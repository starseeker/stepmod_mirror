
(*
   ------------------------------------------------------------
    MIM SCHEMAS 
   ------------------------------------------------------------
*)



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\activity_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.16 2004/10/21 14:43:53 darla Exp $
 ISO TC184/SC4/WG12 N1157 - ISO/TS 10303-1047 Activity - EXPRESS MIM
*)

SCHEMA Activity_mim;

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM action_schema   -- ISO 10303-41
  (action,
   action_relationship,
   action_status,
   executed_action); 

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute,
   object_role); 

USE FROM management_resources_schema   -- ISO 10303-41
  (action_assignment); 

TYPE action_items = EXTENSIBLE GENERIC_ENTITY SELECT ;
END_TYPE;

ENTITY applied_action_assignment
SUBTYPE OF (action_assignment);
  items : SET [1 : ?] OF action_items;
END_ENTITY;

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\activity_as_realized_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.7 2004/11/19 21:37:33 robbod Exp $
 ISO TC184/SC4/WG12 N2993 - ISO/TS 10303-1259 Activity as realized - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2370
*) 


SCHEMA Activity_as_realized_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_relationship,
   executed_action); 

USE FROM Activity_mim;    -- ISO/TS 10303-1047


ENTITY action_actual
  SUBTYPE OF (executed_action);
END_ENTITY;

ENTITY action_happening
  SUBTYPE OF (action_relationship);
END_ENTITY;

END_SCHEMA;  -- Activity_as_realized_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\activity_method_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.13 2004/10/21 14:45:33 darla Exp $
 ISO TC184/SC4/WG12 N1163 - ISO/TS 10303-1049 Activity method - EXPRESS MIM
*)

SCHEMA Activity_method_mim;

USE FROM action_schema    -- ISO 10303-41
(action_method );

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\activity_method_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.5 2004/11/19 21:37:33 robbod Exp $
 ISO TC184/SC4/WG12 N2999 - ISO/TS 10303-1249 Activity method assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2307
*) 


SCHEMA Activity_method_assignment_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_method_relationship); 

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM management_resources_schema   -- ISO 10303-41
  (action_method_assignment); 


TYPE action_method_items = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY applied_action_method_assignment
  SUBTYPE OF (action_method_assignment);
  items : SET[1:?] OF action_method_items;
END_ENTITY;

END_SCHEMA;  -- Activity_method_assignment_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\activity_method_implementation_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.6 2004/11/19 21:37:33 robbod Exp $
 ISO TC184/SC4/WG12 N3005 - ISO/TS 10303-1261 Activity method implementation - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2379
*) 


SCHEMA Activity_method_implementation_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_method_relationship); 

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute,
   id_attribute_select,
   object_role); 

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM Group_mim;    -- ISO/TS 10303-1113

USE FROM group_schema   -- ISO 10303-41
  (group); 

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021


TYPE action_method_implementation_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (action_method_relationship);
END_TYPE; 

TYPE action_method_implementation_identification_item = EXTENSIBLE SELECT BASED_ON identification_item WITH 
   (action_method_relationship);
END_TYPE; 

TYPE activity_method_implementation_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (action_method_relationship, 
    group);
END_TYPE; 

END_SCHEMA;  -- Activity_method_implementation_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\alias_identification_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.13 2007/03/28 17:48:50 philsp Exp $
 ISO TC184/SC4/WG12 N???? - ISO/TS 10303-1025 Alias identification - EXPRESS MIM
*)
SCHEMA Alias_identification_mim;

USE FROM Identification_assignment_mim;

TYPE aliasable_item = EXTENSIBLE SELECT BASED_ON identification_item;
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\analysis_assignment_mim.exp
   ------------------------------------------------------------
*)



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\analysis_characterized_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.4 2007/04/13 11:51:34 abhpf Exp $
   ISO TC184/SC4/WG12 N4545 - ISO/TS 10303-1475 analysis_characterized - EXPRESS MIM*)
(* UNDER DEVELOPMENT *)
SCHEMA Analysis_characterized_mim;

USE FROM Analysis_identification_mim;

USE FROM Approval_mim;

USE FROM Classification_assignment_mim;

USE FROM Contract_mim;

USE FROM Date_time_assignment_mim;

USE FROM Person_organization_assignment_mim;

USE FROM Security_classification_mim;

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\analysis_identification_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.5 2007/08/21 12:40:53 abhpf Exp $
   ISO TC184/SC4/WG12 N4548 - ISO/TS 10303-1476  analysis_identification - EXPRESS MIM*)
(* UNDER DEVELOPMENT *)

SCHEMA Analysis_identification_mim;

   USE FROM Identification_assignment_mim;

   USE FROM Product_version_relationship_mim;

   USE FROM Product_view_definition_mim;

	TYPE analysis_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item  WITH
	   (product,
	    product_definition,
	    product_definition_formation);
	END_TYPE;

 END_SCHEMA;  -- Analysis_identification_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\ap233_system_engineering_and_design_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.10 2007/04/02 18:47:39 philsp Exp $
 ISO TC184/SC4/WG12 N - ISO/WD 10303-433 Ap233 system engineering and design - EXPRESS MIM
*)
(*            UNDER DEVELOPMENT by H.P. Frisch
	      NOTE:  Many duplications exist, they need to be auto-removed.  
	       	Auto-condensation of extensible type lists also need to be done.  

		*)
SCHEMA Ap233_system_engineering_and_design_mim;
  USE FROM Program_management_mim;
  USE FROM System_modelling_mim;
  USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 
  USE FROM state_type_schema;
	
--  push up comes from the Program_management_mim; branch

TYPE upfrompm_pmri_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(product_definition,
	descriptive_representation_item,
	measure_representation_item);
END_TYPE;

TYPE upfrompm_pmri_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(property_definition);
END_TYPE;

TYPE upfrompm_pmri_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(group,
	group_relationship,
	product_definition_formation_relationship);
END_TYPE;

TYPE upfrompm_pmri_name_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON name_item WITH
	(group,
	group_relationship);
END_TYPE;

TYPE upfrompm_pmri_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(characterized_object,
	configuration_effectivity);
END_TYPE;

TYPE upfrompm_pmri_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_classification_item WITH
	(descriptive_representation_item,
	representation,
	group,
	group_relationship,
	property_definition_representation);
END_TYPE;

TYPE upfrompm_pmri2_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(property_definition_representation);
END_TYPE;

TYPE upfrompm_pmri2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(property_definition_representation);
END_TYPE;

TYPE upfrompm_pmri_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(property_definition_representation);
END_TYPE;

TYPE upfrompm_pmri_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(property_definition_representation);
END_TYPE;

TYPE upfrompm_pmri_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(group,
	group_relationship,
	property_definition_representation);
END_TYPE;


TYPE upfrompm_pmri_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH
	(group_relationship);
END_TYPE;


TYPE upfrompm_pmri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(group,
	group_relationship,
	measure_representation_item);
END_TYPE;


TYPE upfrompm_pmri_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(descriptive_representation_item,
	measure_representation_item);
END_TYPE;


TYPE upfrompm_pmri_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(descriptive_representation_item,
	measure_representation_item);
END_TYPE;


TYPE upfrompm_pmri_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(property_definition_representation);
END_TYPE;

TYPE upfrompm_pmri_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(property_definition_representation);
END_TYPE;


TYPE upfrompm_pmri_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
	(product_definition_relationship);
END_TYPE;


TYPE upfrompm_pmri_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
	(characterized_object,
	product_definition_relationship);
END_TYPE;


TYPE upfrompm_pb_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE upfrompm_pb_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	product,
	product_definition_formation,
	product_definition);
END_TYPE;

TYPE upfrompm_pb_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE upfrompm_pb_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(interface_connection,
	product,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_definition_shape,
	product_definition_formation,
	product_definition,
	shape_aspect_relationship);
END_TYPE;

TYPE upfrompm_pb_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	in_zone,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	product,
	interface_specification_definition,
	interface_specification_version,
	product_definition_formation,
	product_definition);
END_TYPE;

TYPE upfrompm_pb_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(alternate_product_relationship,
	interface_connection,
	interface_connector_version,
	interface_definition_connection,
	interface_specification_version,
	product,
	product_definition_formation);
END_TYPE;

TYPE upfrompm_pb_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(alternate_product_relationship,
	in_zone,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_definition_shape,
	product,
	product_definition_formation);
END_TYPE;


TYPE upfrompm_pb_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_classification_item WITH
	(alternate_product_relationship,
	interface_connection,
	interface_connector_definition,
	interface_definition_connection,
	interface_specification_definition,
	product_definition);
END_TYPE;

TYPE upfrompm_pb2_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(hierarchical_interface_connection,
	interface_connection,
	interface_definition_connection);
END_TYPE;


TYPE upfrompm_pb3_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE upfrompm_pb_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(hierarchical_interface_connection,
	interface_connection,
	interface_definition_connection);
END_TYPE;


TYPE upfrompm_pb3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(hierarchical_interface_connection,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE upfrompm_pb_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(interface_connector_version,
	interface_specification_version,
	product,
	product_definition_formation);
END_TYPE;


TYPE upfrompm_pb_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product,
	product_definition_formation,
	product_definition);
END_TYPE;

TYPE upfrompm_pb_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product,
	product_definition_formation,
	product_definition);
END_TYPE;


TYPE upfrompm_pb_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE upfrompm_pb_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_for,
	product,
	product_definition_formation,
	product_definition);
END_TYPE;


TYPE upfrompm_pb_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(interface_connection,
	product,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_specification_definition,
	interface_specification_version,
	product_definition_shape);
END_TYPE;


TYPE upfrompm_pb_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH
	(hierarchical_interface_connection,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;


TYPE upfrompm_pb_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,	
	interface_connection,
	product,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_definition_formation,
	product_definition);
END_TYPE;


TYPE upfrompm_pb_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE upfrompm_pb_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE upfrompm_pb_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_item WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;


TYPE upfrompm_pb_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	product,
	interface_specification_definition,
	interface_specification_version);
END_TYPE;

TYPE upfrompm_pb_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	product,
	interface_specification_definition,
	interface_specification_version);
END_TYPE;


TYPE upfrompm_pb_product_definition_or_product_definition_relationship = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON product_definition_or_product_definition_relationship WITH
	(interface_connector_occurrence);
END_TYPE;


(*TYPE upfrompm_pb_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(hierarchical_interface_connection,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;*)

ENTITY upfrompm_pb_characterizable_hierarchical_interface_connection
  SUBTYPE OF (hierarchical_interface_connection, characterized_object);
END_ENTITY;


ENTITY upfrompm_pb_characterizable_interface_connection
  SUBTYPE OF (interface_connection, characterized_object);
END_ENTITY;


ENTITY upfrompm_pb_characterizable_interface_connector_occurrence
  SUBTYPE OF (interface_connector_occurrence, characterized_object);
END_ENTITY;


ENTITY upfrompm_pb_characterizable_interface_definition_connection
  SUBTYPE OF (interface_definition_connection, characterized_object);
END_ENTITY;


TYPE upfrompm_pb_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	interface_connector_occurrence,
	product,
	product_definition_formation);
END_TYPE;


TYPE upfrompm_pb_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
	(interface_connector_occurrence,
	product_definition_formation,
	shape_aspect);
END_TYPE;

TYPE upfrompm_pb_2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition_formation,
	product_definition);
END_TYPE;


TYPE upfrompm_pb4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition_formation,
	product_definition);
END_TYPE;


TYPE upfrompm_pb_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	interface_connection,
	product,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_definition_formation,
	product_definition,
	promissory_usage_occurrence);
END_TYPE;


TYPE upfrompm_pb_selected_item_context_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON selected_item_context_items WITH
	(product,
	product_definition_formation);
END_TYPE;


TYPE upfrompm_pb_selected_item_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON selected_item_select WITH
	(interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;


TYPE upfrompm_pb_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	product,
	interface_specification_definition,
	interface_specification_version,
	product_definition_formation,
	product_definition);
END_TYPE;


TYPE upfrompm_pb_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_observed_of_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	product,
	interface_specification_definition,
	interface_specification_version,
	product_definition_formation,
	product_definition);
END_TYPE;


TYPE upfrompm_pb_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	interface_connection,
	product,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for);
END_TYPE;

TYPE upfrompm_pb_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	interface_connection,
	product,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for);
END_TYPE;


TYPE upfrompm_pb5_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition_formation,
	product_definition);
END_TYPE;


TYPE upfrompm_ss_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(applied_action_method_assignment,
	task_io_hierarchy
	);
END_TYPE;

TYPE upfrompm_ss_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
	(applied_action_method_assignment,
	state_observed_assignment,
	state_type_assignment,
	state_observed,
	state_type);
END_TYPE;


TYPE upfrompm_ss_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
	(applied_action_method_assignment,
	state_observed_assignment,
	state_type_assignment,
	state_observed,
	state_type);
END_TYPE;


TYPE upfrompm_ap233_3_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(group,
	requirement_source,
	applied_action_method_assignment,
	task_io_hierarchy,
	verification);
END_TYPE;


TYPE upfrompm_ap233_7_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(analysis_assignment,
	group,
	in_zone,
	requirement_assignment,
	applied_action_method_assignment,
	task_io_hierarchy,
	verification);
END_TYPE;


TYPE upfrompm_ap233_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(analysis_assignment,
	group,
	verification);
END_TYPE;


TYPE upfrompm_ap233_analised_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON analised_item WITH
	(executed_action,
	action_method,
	group,
	action_method_relationship,
	action_property,
	action_relationship,
	alternate_product_relationship,
	assembly_component_usage_substitute,
	property_definition,
	groupable_item,
	condition,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	--lessons_learned,
	action_resource_relationship,
	observation,
	observation_consequence,
	representation,
	observation_relationship,
	organization,
	organization_relationship,
	product,
	product_concept,
	product_design_to_individual,
	product_design_version_to_individual,
	product_group_relationship,
	product_planned_to_realized,
	product_relationship,
	product_definition_formation_relationship,
	product_definition,
	organizational_project_relationship,
	requirement_assignment,
	resource_property,
	--risk_analysis,
	--risk_assessment,
	--risk_consequence,
	--risk_control,
	--risk_criteria,
	--risk_estimation,
	--risk_evaluation,
	--risk_perception_relationship,
	--risk_reduction,
	--risk_relationship,
	--risk_treatment,
	state_observed,
	ascribable_state,
	state_type,
	state_observed_role,
	applied_action_method_assignment,
	task_method,
	verification,
	verification_evidence,
	verification_relationship,
	product_definition_context,
	product_definition_relationship,
	action_method_assignment);
END_TYPE;

TYPE upfrompm_ap233_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(verification,
	verification_evidence,
	verification_relationship);
END_TYPE;

TYPE upfrompm_ap233_name_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON name_item WITH
	(analysis);
END_TYPE;


TYPE upfrompm_ap233_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(assembly_component_usage_substitute,
	groupable_item,
	applied_action_method_assignment,
	verification_evidence);
END_TYPE;


(*TYPE upfrompm_ap233_characterized_activity_definition = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_activity_definition WITH
	(analysis,
	applied_action_method_assignment
	verification,);
END_TYPE;*)


TYPE upfrompm_ap233_4_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(analysis_assignment,
	group,
	applied_action_method_assignment,
	verification);
END_TYPE;

TYPE upfrompm_ap233_2_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(requirement_source,
	applied_action_method_assignment);
END_TYPE;

TYPE upfrompm_ap233_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(analysis_assignment,
	requirement_assignment,
	verification_evidence);
END_TYPE;

TYPE upfrompm_ap233_2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(analysis);
END_TYPE;

TYPE upfrompm_ap233_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(applied_action_method_assignment,
	verification);
END_TYPE;


TYPE upfrompm_ap233_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(alternate_product_relationship,
	analysis_assignment,
	applied_action_method_assignment);
END_TYPE;

TYPE upfrompm_ap233_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(alternate_product_relationship,
	analysis_assignment,
	applied_action_method_assignment);
END_TYPE;

TYPE upfrompm_ap233_experience_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON experience_item WITH
	(group);
END_TYPE;


TYPE upfrompm_ap233_experience_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON experience_type_item WITH
	(analysis_assignment,
	groupable_item);
END_TYPE;


(*TYPE upfrompm_ap233_description_attribute_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON description_attribute_select WITH
	(analised_item,
	analysis,
	groupable_item,
	event_occurrence,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	action_resource,
	observation,
	--risk_analysis,
	--risk_treatment,
	applied_action_method_assignment);
END_TYPE;*)


TYPE upfrompm_ap233_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(alternate_product_relationship,
	analysis,
	applied_action_method_assignment);
END_TYPE;

TYPE upfrompm_ap233_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(alternate_product_relationship,
	analysis_assignment,
	constrained_general_parameter_relationship);
END_TYPE;

TYPE upfrompm_ap233_event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON event_occurrence_item WITH
	(verification);
END_TYPE;


TYPE upfrompm_ap233_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH
	(executed_action,
	action_method,
	approval,
	breakdown_of,
	certification,
	condition,
	contract,
	effectivity,
	event_occurrence,
	experience_type,
	document_file,
	interface_connection,
	interface_definition_for,
	product,
	location,
	action_resource,
	observation,
	organizational_project,
	action_resource_requirement,
	--risk,
	applied_action_method_assignment,
	verification,
	versioned_action_request);
END_TYPE;


TYPE upfrompm_ap233_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(assembly_component_usage_substitute,
	applied_action_method_assignment);
END_TYPE;


TYPE upfrompm_ap233_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
	(alternate_product_relationship,
	in_zone,
	applied_action_method_assignment,
	verification_evidence);
END_TYPE;


TYPE upfrompm_ap233_issue_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON issue_reference_item WITH
	(alternate_product_relationship,
	analysis_assignment,
	assembly_component_usage_substitute,
	group,
	characterized_object,
	action_method,
	description_attribute,
	expression_assignment,
	generic_expression,
	group_relationship,
	in_zone,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	product_definition_shape,
	configuration_effectivity,
	requirement_assignment,
	requirement_source,
	shape_aspect_relationship,
	task_io_hierarchy,
	verification,
	verification_evidence,
	verification_relationship);
END_TYPE;


TYPE upfrompm_ap233_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(analysis_assignment,
	assembly_component_usage_substitute,
	group,
	description_attribute,
	requirement_assignment);
END_TYPE;


TYPE upfrompm_ap233_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(analysis_assignment);
END_TYPE;


TYPE upfrompm_ap233_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_item WITH
	(analysis_assignment);
END_TYPE;

TYPE upfrompm_ap233_observed_context_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON observed_context_item WITH
	(alternate_product_relationship,
	analysis_assignment,
	assembly_component_usage_substitute,
	group,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	requirement_assignment,
	verification,
	verification_evidence);
END_TYPE;



TYPE upfrompm_ap233_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(alternate_product_relationship,
	applied_action_method_assignment);
END_TYPE;

TYPE upfrompm_ap233_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(alternate_product_relationship,
	applied_action_method_assignment);
END_TYPE;


TYPE upfrompm_ap233_parameter_value_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON parameter_value_select WITH
	(representation,
	representation_item,
	--risk_analysis,
	state_type,
	state_observed_relationship);
END_TYPE;


TYPE upfrompm_ap233_position_in_organization_group_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_group_item WITH
	(interface_definition_connection,
	verification,
	verification_evidence);
END_TYPE;


TYPE upfrompm_ap233_position_in_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_item WITH
	(interface_definition_connection,
	verification,
	verification_evidence);
END_TYPE;


TYPE upfrompm_ap233_position_in_organization_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_type_item WITH
	(interface_definition_connection,
	verification,
	verification_evidence);
END_TYPE;


(*TYPE upfrompm_ap233_probable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON probable_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	verification,
	verification_evidence,
	verification_relationship,
	product_definition_relationship);
END_TYPE;*)


TYPE upfrompm_ap233_location_representation_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_representation_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	constrained_general_parameter_relationship,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	applied_action_method_assignment,
	verification,
	verification_evidence);
END_TYPE;


TYPE upfrompm_ap233_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	interface_connection,
	interface_definition_connection,
	applied_action_method_assignment);
END_TYPE;


(*TYPE upfrompm_ap233_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(alternate_product_relationship,
	--Analysis_assignment,
	generic_expression,
	in_zone,
	requirement_source,
	--Task_io_hierarchy,
	--Verification,
	--Verification_evidence,
	--Verification_relationship);
END_TYPE;*)

ENTITY upfrompm_ap233_characterizable_alternate_product_relationship
  SUBTYPE OF (alternate_product_relationship, characterized_object);
END_ENTITY;


ENTITY upfrompm_ap233_characterizable_generic_expression
  SUBTYPE OF (generic_expression, characterized_object);
END_ENTITY;


ENTITY upfrompm_ap233_characterizable_in_zone
  SUBTYPE OF (in_zone, characterized_object);
END_ENTITY;


ENTITY upfrompm_ap233_characterizable_requirement_source
  SUBTYPE OF (requirement_source, characterized_object);
END_ENTITY;

ENTITY upfrompm_ap233_characterizable_analysis_assignment
  SUBTYPE OF (analysis_assignment, characterized_object);
END_ENTITY;


ENTITY upfrompm_ap233_characterizable_task_io_hierarchy
  SUBTYPE OF (task_io_hierarchy, characterized_object);
END_ENTITY;


ENTITY upfrompm_ap233_characterizable_verification
  SUBTYPE OF (verification, characterized_object);
END_ENTITY;


ENTITY upfrompm_ap233_characterizable_verification_evidence
  SUBTYPE OF (verification_evidence, characterized_object);
END_ENTITY;


ENTITY upfrompm_ap233_characterizable_verification_relationship
  SUBTYPE OF (verification_relationship, characterized_object);
END_ENTITY;

TYPE upfrompm_ap233_3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(analysis_assignment,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	verification);
END_TYPE;


TYPE upfrompm_ap233_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
	(action_property,
	alternate_product_relationship,
	in_zone,
	interface_definition_for,
	action_method);
END_TYPE;


TYPE upfrompm_ap233_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
	(alternate_product_relationship,
	applied_approval_assignment,
	approval_person_organization,
	applied_certification_assignment,
	applied_contract_assignment,
	directed_action,
	in_zone,
	interface_definition_for,
	observation,
	applied_organization_assignment, applied_person_and_organization_assignment,
	product_concept,
	applied_organizational_project_assignment,
	action
	--risk_analysis,
	--risk_stakeholder,
	--risk_treatment
	);
END_TYPE;


TYPE upfrompm_ap233_4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(analysis_assignment,
	group,
	interface_connection,
	interface_definition_connection,
	interface_definition_for,
	requirement_assignment,
	task_io_hierarchy,
	verification,
	verification_evidence);
END_TYPE;


TYPE upfrompm_ap233_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(analysis_assignment,
	interface_connector_occurrence,
	verification_evidence);
END_TYPE;


(*TYPE upfrompm_ap233_risk_impact_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON risk_impact_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	requirement_assignment,
	requirement_source,
	verification,
	verification_evidence,
	verification_relationship);
END_TYPE;*)


(*TYPE upfrompm_ap233_risk_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON risk_source_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	expression_assignment,
	generic_expression,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	requirement_assignment,
	requirement_source,
	verification,
	verification_evidence,
	verification_relationship);
END_TYPE;*)


TYPE upfrompm_ap233_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(in_zone);
END_TYPE;



TYPE upfrompm_ap233_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(alternate_product_relationship,
	analysis_assignment,
	group,
	task_io_hierarchy,
	verification);
END_TYPE;


TYPE upfrompm_ap233_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_observed_of_item WITH
	(alternate_product_relationship,
	analysis_assignment,
	group,
	verification,
	verification_evidence);
END_TYPE;


TYPE upfrompm_ap233_person_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_type_item WITH
	(analysis_assignment,
	group,
	groupable_item,
	interface_definition_connection,
	interface_definition_for,
	verification,
	verification_evidence);
END_TYPE;


TYPE upfrompm_ap233_verification_evidence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON verification_evidence_item WITH
	(action_actual,
	action_request_solution,
	action_method_relationship,
	action_relationship,
	action_status,
	applied_action_request_assignment,
	alternate_product_relationship,
	analysis_assignment,
	applied_action_method_assignment,
	applied_usage_right,
	state_observed_assignment,
	applied_approval_assignment,
	assembly_component_usage_substitute,
	property_definition,
	group,
	groupable_item,
	breakdown_of,
	applied_action_assignment,
	applied_contract_assignment,
	date_assignment, date_and_time_assignment,
	ascribable_state_relationship,
	description_attribute,
	directed_action,
	applied_effectivity_assignment,
	applied_event_occurrence_assignment,
	expression_assignment,
	interface_connector_definition,
	interface_definition_connection,
	interface_definition_for,
	justification_group_assignment,  justification_assignment,
	product_relationship,
	justification_support_assignment,
	applied_location_assignment,
	observation,
	observation_consequence,
	observation_relationship,
	applied_organization_assignment, applied_person_and_organization_assignment,
	person,
	person_and_organization,
	applied_position_in_organization_assignment,
	product,
	product_design_to_individual,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	applied_organizational_project_assignment,
	representation,
	representation_context,
	representation_item,
	action_method,
	action_resource_relationship,
	action_property,
	--risk_analysis,
	--risk_communication,
	--risk_consequence,
	--risk_criteria,
	--risk_estimation,
	--risk_evaluation,
	--risk_treatment,
	state_observed,
	ascribable_state,
	state_observed_relationship,
	task_io_hierarchy,
	applied_time_interval_assignment,
	applied_person_type_assignment,
	product_definition_context,
	product_definition_relationship,
	action_method_assignment,
	versioned_action_request);
END_TYPE;


TYPE upfrompm_ap233_5_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(analysis_assignment,
	verification);
END_TYPE;


TYPE upfrompm_ap233_6_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(analysis_assignment,
	group,
	applied_action_method_assignment,
	verification_evidence);
END_TYPE;

-- start upfromsm_ from System_modelling;

TYPE upfromsm_pmri3_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(location,
	representation, applied_location_representation_assignment, address);
END_TYPE;

TYPE upfromsm_os_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(position_in_organization,
	group);
END_TYPE;

TYPE upfromsm_pb3_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(group);
END_TYPE;

TYPE upfromsm_ss3_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(state_observed_assignment,
	action_resource,
	action,
	action_method,
	applied_action_method_assignment,
	state_observed,
	state_observed_relationship,
	task_method);
END_TYPE;

TYPE upfromsm_ap233_3_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(--risk,
	action_method);
END_TYPE;


TYPE upfromsm_pmri2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(location,
	applied_location_representation_assignment);
END_TYPE;

TYPE upfromsm_os3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(organization_type,
	position_in_organization,
	group,
	position_in_organization_type,
	person_type,
	person_type_definition);
END_TYPE;

TYPE upfromsm_pb4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product_group);
END_TYPE;

TYPE upfromsm_ss3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_resource,
	action,
	action_method,
	state_observed_relationship,
	task_method);
END_TYPE;

TYPE upfromsm_ap233_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(--applied_risk_impact_assignment,
	--Observation,
	--risk,
	task_objective);
END_TYPE;

-- activity_realization_select Doesn't appear in mim.exp.  Appears only in the mapping table, see 1307

(*TYPE upfromsm_ss_activity_realization_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON activity_realization_select WITH
	(action_method,
	action_method,
	task_method,
	task_method);
END_TYPE;*)

(*TYPE upfromsm_ap233_activity_realization_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON activity_realization_select WITH
	(executed_action,
	action_method,
	product,
	product_definition_formation,
	product_definition,
	task_element);
END_TYPE;*)


TYPE upfromsm_pb_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(product_group);
END_TYPE;


(*TYPE upfromsm_ap233_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(risk);
END_TYPE;*)


TYPE upfromsm_pmri_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(product_relationship);
END_TYPE;


TYPE upfromsm_ap233_analised_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON analised_item WITH
	(group,
	--lessons_learned,
	action_resource_relationship,
	observation,
	observation_consequence,
	representation,
	observation_relationship,
	product_group_relationship,
	product_relationship,
	action_relationship,
	--risk_analysis,
	--risk_assessment,
	--risk_consequence,
	--risk_control,
	--risk_criteria,
	--risk_estimation,
	--risk_evaluation,
	--risk_perception_relationship,
	--risk_reduction,
	--risk_relationship,
	--risk_treatment,
	state_observed,
	ascribable_state,
	state_type,
	state_observed_role,
	task_method,
	action_method_assignment,
	action_method_relationship);
END_TYPE;


TYPE upfromsm_os_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(applied_experience_assignment,
	experience_type,
	applied_organization_type_assignment,
	applied_position_in_organization_assignment,
	group,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	position_in_organization_type,
	applied_qualification_type_assignment,
	qualification_type,
	person_type,
	applied_person_type_assignment);
END_TYPE;

TYPE upfromsm_pb_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_ss_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(action_method_relationship,
	group,
	state_observed_assignment,
	action,
	applied_action_assignment,
	action_resource,
	action_resource_relationship,
	action_method,
	applied_action_method_assignment,
	task_method,
	task_method_relationship,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE upfromsm_ap233_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(ascribable_state,
	state_observed_relationship,
	action_method_assignment);
END_TYPE;


TYPE upfromsm_ap233_name_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON name_item WITH
	(observation
	--risk
	);
END_TYPE;


TYPE upfromsm_pb_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(product_group,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_ss_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(task_method,
	task_objective);
END_TYPE;

(*TYPE upfromsm_ap233_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(lessons_learned);
END_TYPE;*)


(*TYPE upfromsm_ss_characterized_activity_definition = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_activity_definition WITH
	(action,
	action_method,
	task_objective);
END_TYPE;*)

(*TYPE upfromsm_ap233_characterized_activity_definition = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_activity_definition WITH
	(risk);
END_TYPE;*)



(*TYPE upfromsm_ss_characterized_resource_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_resource_select WITH
	(action_resource);
END_TYPE;*)


TYPE upfromsm_pmri_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(applied_location_assignment,
	representation, 
	address,
	applied_location_representation_assignment,
	product_relationship,
	measure_representation_item,
	selected_item,
	selected_item_assignment);
END_TYPE;

TYPE upfromsm_os_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(applied_experience_assignment,
	experience,
	organization_type,
	applied_position_in_organization_assignment,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	applied_qualification_type_assignment,
	qualification_type_relationship);
END_TYPE;


TYPE upfromsm_ss_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(ascribable_state_relationship,
	ascribable_state);
END_TYPE;


TYPE upfromsm_pmri_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_classification_item WITH
	(approval,
	applied_approval_assignment,
	approval_relationship,
	approval_status,
	approval_person_organization,
	certification,
	applied_certification_assignment,
	condition,
	applied_action_method_assignment,
	action_method_relationship,
	context_dependent_unit,
	contract,
	date_assignment, date_and_time_assignment,
	descriptive_representation_item,
	document_file,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	product_definition_relationship,
	applied_external_identification_assignment,
	representation,
	effectivity,
	applied_effectivity_assignment,
	document_relationship,
	group,
	group_relationship,
	applied_identification_assignment,
	general_property,
	general_property_relationship,
	property_definition_representation,
	product,
	justification_group_assignment,  justification_assignment,
	justification_support_assignment,
	language,
	location,
	location_relationship,
	product_concept_context,
	applied_organization_assignment, applied_person_and_organization_assignment,
	applied_location_representation_assignment,
	product_category,
	product_concept,
	product_relationship,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	applied_organizational_project_assignment,
	organizational_project_relationship,
	measure_representation_item,
	representation_context,
	representation_item,
	security_classification,
	time_interval_relationship,
	uncertainty_measure_with_unit,
	named_unit, derived_unit,
	measure_with_unit,
	product_definition_context);
END_TYPE;

TYPE upfromsm_os_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_classification_item WITH
	(person_and_organization_address,  organizational_address,
	organization_relationship,
	person_and_organization);
END_TYPE;

TYPE upfromsm_pb_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_classification_item WITH
	(alternate_product_relationship,
	breakdown_context,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	interface_connection,
	interface_connector_definition,
	interface_definition_connection,
	interface_specification_definition,
	product_definition);
END_TYPE;

TYPE upfromsm_ss_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_classification_item WITH
	(executed_action,
	action_method,
	action_property,
	action_property_representation,
	action_relationship,
	applied_action_assignment,
	property_definition,
	action,
	applied_event_occurrence_assignment,
	event_occurrence_relationship,
	action_resource,
	action_resource_relationship,
	property_definition_representation,
	group,
	action_resource_requirement,
	action_resource_requirement_relationship,
	resource_property,
	resource_property_representation);
END_TYPE;

TYPE upfromsm_ap233_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_classification_item WITH
	(description_attribute);
END_TYPE;


TYPE upfromsm_pmri4_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(approval,
	applied_approval_assignment,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	product_definition_relationship);
END_TYPE;

TYPE upfromsm_pb4_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(hierarchical_interface_connection,
	interface_connection,
	interface_definition_connection,
	product_definition_group_assignment, breakdown_element_group_assignment);
END_TYPE;

TYPE upfromsm_ss4_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(property_definition);
END_TYPE;

TYPE upfromsm_ap233_4_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(action_method,
	action_property,
	analysis_assignment,
	--applied_risk_impact_assignment,
	group,
	product,
	action_resource_requirement,
	action,
	--risk_analysis,
	state_type,
	applied_action_method_assignment,
	verification);
END_TYPE;



TYPE upfromsm_pmri2_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(approval,
	applied_approval_assignment,
	calendar_date,
	applied_certification_assignment,
	applied_classification_assignment,
	applied_contract_assignment,
	date_assignment, date_and_time_assignment,
	date_and_time,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_identification_assignment,
	property_definition_representation,
	applied_organization_assignment, applied_person_and_organization_assignment,
	product,
	product_related_product_category,
	product_concept,
	product_definition_formation,
	product_definition,
	representation,
	product_definition_relationship);
END_TYPE;

TYPE upfromsm_pb2_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	product_as_individual,
	product_definition_group_assignment, breakdown_element_group_assignment);
END_TYPE;

TYPE upfromsm_ss2_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(property_definition,
	property_definition_representation,
	state_observed,
	state_type);
END_TYPE;

TYPE upfromsm_ap233_2_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(executed_action,
	action_property,
	requirement_source,
	applied_action_method_assignment,
	action_method);
END_TYPE;


TYPE upfromsm_pb_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_ss_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(action_method_relationship,
	group,
	action_resource,
	action_resource_relationship,
	action,
	action_relationship,
	applied_action_method_assignment,
	task_method_relationship,
	task_method_version_relationship);
END_TYPE;

TYPE upfromsm_ap233_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(applied_location_assignment,
	applied_qualification_type_assignment
	--risk_treatment
	);
END_TYPE;


TYPE upfromsm_ss2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_resource,
	action_resource_relationship,
	action,
	state_observed,
	ascribable_state);
END_TYPE;

(*TYPE upfromsm_ap233_3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(risk_analysis);
END_TYPE;*)


TYPE upfromsm_pb_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(product_group,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_ss_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(action_method_relationship,
	group,
	action_resource,
	action,
	task_method,
	applied_action_method_assignment,
	task_method_relationship,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE upfromsm_ap233_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(issue
	--risk_analysis,
	--risk_control,
	--risk_treatment
	);
END_TYPE;


TYPE upfromsm_pmri_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(applied_location_assignment,
	representation, applied_location_representation_assignment, address,
	product_relationship,
	selected_item);
END_TYPE;

TYPE upfromsm_pmri_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(applied_location_assignment,
	representation, applied_location_representation_assignment, address,
	product_relationship,
	selected_item);
END_TYPE;

TYPE upfromsm_os_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(applied_organization_type_assignment,
	applied_position_in_organization_assignment,
	group,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	applied_person_type_assignment);
END_TYPE;

TYPE upfromsm_os_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(applied_organization_type_assignment,
	applied_position_in_organization_assignment,
	group,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	applied_person_type_assignment);
END_TYPE;

TYPE upfromsm_pb_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_pb_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_ss_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(action_method_relationship,
	group,
	action,
	applied_action_assignment,
	action_resource,
	action_resource_relationship,
	action_method,
	applied_action_method_assignment,
	task_method,
	task_method_relationship,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE upfromsm_ss_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(action_method_relationship,
	group,
	action,
	applied_action_assignment,
	action_resource,
	action_resource_relationship,
	action_method,
	applied_action_method_assignment,
	task_method,
	task_method_relationship,
	task_method_version_relationship,
	task_objective);
END_TYPE;


TYPE upfromsm_ap233_experience_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON experience_item WITH
	(group,
	applied_event_occurrence_assignment,
	--lessons_learned,
	observation_consequence,
	product,
	organizational_project,
	--risk_analysis,
	action_method);
END_TYPE;


TYPE upfromsm_ap233_person_definition_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_definition_item WITH
	(group,
	applied_position_in_organization_group_assignment,
	position_in_organization_assignment,
	position_in_organization_type_assignment,
	--risk_stakeholder,
	applied_person_type_assignment,
	action_method_assignment);
END_TYPE;


TYPE upfromsm_ap233_experience_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON experience_type_item WITH
	(analysis_assignment,
	groupable_item,
	event_occurrence,
	issue,
	--lessons_learned,
	observation_consequence,
	product,
	product_group,
	--risk_analysis,
	--risk_assessment,
	action_method_assignment);
END_TYPE;


(*TYPE upfromsm_ap233_description_attribute_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON description_attribute_select WITH
	(action_resource,
	observation,
	risk_analysis,
	risk_treatment);
END_TYPE;*)


TYPE upfromsm_pmri_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(location,
	applied_location_assignment,
	location_relationship,
	applied_location_representation_assignment,
	product_relationship,
	representation,
	selected_item);
END_TYPE;

TYPE upfromsm_os_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(experience,
	experience_type,
	organization_type,
	applied_position_in_organization_assignment,
	group,
	position_in_organization,
	position_in_organization_type,
	applied_position_in_organization_type_assignment,
	position_in_organization_type_assignment,
	qualification_type,
	person_type,
	person_type_definition);
END_TYPE;

TYPE upfromsm_pb_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_ss_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(action_method_relationship,
	group,
	action,
	action_resource,
	state_observed,
	ascribable_state,
	task_method,
	applied_action_method_assignment,
	task_method_relationship,
	task_method_version_relationship,
	task_objective);
END_TYPE;

(*TYPE upfromsm_ap233_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(risk_analysis,
	risk_treatment);
END_TYPE;*)


TYPE upfromsm_pmri_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(applied_location_assignment,
	product_relationship,
	selected_item_assignment);
END_TYPE;

TYPE upfromsm_os_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(group,
	applied_position_in_organization_assignment,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	applied_person_type_assignment);
END_TYPE;


TYPE upfromsm_ss_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(action_resource_relationship);
END_TYPE;

TYPE upfromsm_ap233_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(state_observed_assignment,
	issue_consequence
	--risk_treatment
	);
END_TYPE;


TYPE upfromsm_ap233_event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON event_occurrence_item WITH
	(observation
	--risk
	);
END_TYPE;


TYPE upfromsm_ap233_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH
	(--risk_stakeholder,
	action_method);
END_TYPE;


TYPE upfromsm_ap233_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH
	(experience_type,
	location,
	action_resource,
	observation,
	--risk,
	action_method);
END_TYPE;


TYPE upfromsm_pmri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(location,
	representation, 
	 address,
	applied_location_representation_assignment,
	product_relationship);
END_TYPE;

TYPE upfromsm_os_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(experience_type,
	organization_type,
	applied_position_in_organization_assignment,
	group,
	position_in_organization_assignment,
	applied_qualification_type_assignment,
	qualification_type,
	person_type);
END_TYPE;

TYPE upfromsm_pb_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_ss_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(action_method_relationship,
	group,
	action,
	action_resource,
	task_method_relationship,
	applied_action_method_assignment,
	task_method,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE upfromsm_ap233_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(--applied_risk_probability_assignment,
	--applied_risk_impact_assignment,
	--applied_risk_source_assignment,
	--risk,
	--risk_analysis,
	--risk_identification,
	--risk_consequence,
	--risk_stakeholder,
	--risk_treatment,
	applied_action_method_assignment);
END_TYPE;


TYPE upfromsm_ss_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
	(task_method,
	task_objective);
END_TYPE;

TYPE upfromsm_ap233_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
	(action_resource,
	--risk_treatment,
	action_method);
END_TYPE;


TYPE upfromsm_ap233_issue_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON issue_reference_item WITH
	(executed_action,
	action_method,
	action_request_solution,
	action_relationship,
	group,
	action_method_relationship,
	action_property,
	action_property_representation,
	action_status,
	address,
	person_and_organization_address,  organizational_address,
	applied_action_request_assignment,
	alternate_product_relationship,
	analysis_assignment,
	applied_action_assignment,
	applied_action_method_assignment,
	applied_usage_right,
	--applied_risk_probability_assignment,
	--applied_risk_impact_assignment,
	--applied_risk_source_assignment,
	--risk_status_assignment,
	state_observed_assignment,
	state_type_assignment,
	approval,
	applied_approval_assignment,
	approval_relationship,
	approval_status,
	approval_person_organization,
	assembly_component_usage_substitute,
	property_definition,
	applied_attribute_classification_assignment,
	multi_language_attribute_assignment,
	breakdown_context,
	breakdown_of,
	calendar_date,
	certification,
	applied_certification_assignment,
	characterized_object,
	class,
	applied_classification_assignment,
	condition,
	action,
	contract,
	applied_contract_assignment,
	date_assignment, date_and_time_assignment,
	date_and_time,
	ascribable_state_relationship,
	description_attribute,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	product_definition_relationship,
	effectivity,
	applied_effectivity_assignment,
	effectivity_relationship,
	event_occurrence,
	applied_event_occurrence_assignment,
	event_occurrence_relationship,
	applied_experience_assignment,
	experience,
	experience_type,
	experience_type_relationship,
	expression_assignment,
	external_class_library,
	applied_external_identification_assignment,
	document_file,
	document_relationship,
	generic_expression,
	group_relationship,
	applied_identification_assignment,
	in_zone,
	general_property,
	general_property_relationship,
	information_right,
	information_usage_right,
	usage_association,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	configuration_design,
	product_definition_shape,
	configuration_effectivity,
	product,
	justification_group_assignment,  justification_assignment,
	product_relationship,
	justification_support_assignment,
	language,
	attribute_language_assignment,
	local_time,
	location,
	applied_location_assignment,
	location_relationship,
	representation, applied_location_representation_assignment, 
	action_resource,
	action_resource_relationship,
	product_concept_context,
	applied_name_assignment,
	observation,
	observation_consequence,
	observation_relationship,
	organization,
	applied_organization_assignment, applied_person_and_organization_assignment,
	applied_organization_type_assignment,
	organization_relationship,
	organization_type,
	person,
	person_and_organization,
	position_in_organization,
	applied_position_in_organization_assignment,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	position_in_organization_relationship,
	position_in_organization_assignment,
	position_in_organization_type,
	position_in_organization_type_assignment,
	product_category,
	product_related_product_category,
	product_category_relationship,
	product_concept,
	configuration_item,
	product_definition_group_assignment, breakdown_element_group_assignment,
	product_design_to_individual,
	product_design_version_to_individual,
	product_group,
	product_group_membership,
	product_group_relationship,
	product_planned_to_realized,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	organizational_project,
	applied_organizational_project_assignment,
	organizational_project_relationship,
	property_definition_representation,
	applied_qualification_type_assignment,
	qualification_type,
	qualification_type_relationship,
	measure_representation_item,
	representation_context,
	representation_item,
	action_resource_requirement,
	action_resource_requirement_relationship,
	requirement_assignment,
	requirement_source,
	resource_property,
	resource_property_representation,
	--risk,
	--risk_analysis,
	--risk_assessment,
	--risk_attitude,
	--risk_communication,
	--risk_consequence,
	--risk_context,
	--risk_control,
	--risk_estimation,
	--risk_evaluation,
	--risk_identification,
	--risk_owner_person_assignment, --risk_owner_person_and_organization_assignment, --risk_owner_organization_assignment,
	--risk_perception,
	--risk_perception_formation,
	--risk_perception_relationship,
	--risk_reduction,
	--risk_relationship,
	--risk_stakeholder,
	--risk_status,
	--risk_treatment,
	security_classification,
	applied_security_classification_assignment,
	selected_item_assignment,
	shape_aspect_relationship,
	state_observed,
	ascribable_state,
	state_type,
	state_type_relationship,
	state_type_role,
	state_observed_relationship,
	state_observed_role,
	task_io_hierarchy,
	task_objective,
	time_interval,
	applied_time_interval_assignment,
	time_interval_relationship,
	time_interval_role,
	coordinated_universal_time_offset,
	person_type,
	applied_person_type_assignment,
	person_type_definition,
	person_type_definition_relationship,
	applied_person_type_definition_assignment,
	named_unit, derived_unit,
	measure_with_unit,
	verification,
	verification_evidence,
	verification_relationship,
	product_definition_context,
	action_method_assignment,
	versioned_action_request,
	action_request_status);
END_TYPE;


TYPE upfromsm_pmri_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(applied_location_assignment);
END_TYPE;


TYPE upfromsm_ss_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(action_method_relationship,
	group,
	action_resource_relationship,
	action_resource,
	action,
	ascribable_state,
	applied_action_method_assignment,
	task_method,
	task_method_relationship,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE upfromsm_ap233_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(issue,
	qualification_type
	--risk
	);
END_TYPE;


TYPE upfromsm_pmri_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(location,
	applied_location_assignment);
END_TYPE;


TYPE upfromsm_ss_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(state_observed_assignment,
	state_observed,
	state_observed_relationship);
END_TYPE;

(*TYPE upfromsm_ap233_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(risk_analysis,
	risk_consequence,
	risk_stakeholder);
END_TYPE;*)


TYPE upfromsm_pmri_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_item WITH
	(product,
	product_definition,
	product_definition_formation,
	document_file,
	organizational_project);
END_TYPE;

TYPE upfromsm_os_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_item WITH
	(organization,
	organization_type,
	person,
	person_and_organization,
	position_in_organization,
	position_in_organization_type,
	person_type);
END_TYPE;

TYPE upfromsm_pb_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_item WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	product_group);
END_TYPE;

TYPE upfromsm_ss_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_item WITH
	(executed_action,
	applied_action_assignment,
	applied_action_method_assignment,
	action_resource_requirement,
	action_method,
	action_resource,
	task_element,
	task_method,
	task_method_version_relationship);
END_TYPE;

TYPE upfromsm_ap233_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_item WITH
	(analysis_assignment,
	event_occurrence
	--risk_treatment
	);
END_TYPE;


TYPE upfromsm_ap233_observation_recorder_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON observation_recorder_item WITH
	(person,
	person_and_organization,
	applied_person_type_assignment);
END_TYPE;


TYPE upfromsm_ap233_observed_context_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON observed_context_item WITH
	(executed_action,
	action_method,
	action_property,
	alternate_product_relationship,
	analysis_assignment,
	applied_action_assignment,
	applied_action_method_assignment,
	--applied_risk_impact_assignment,
	--applied_risk_source_assignment,
	state_observed_assignment,
	state_type_assignment,
	applied_approval_assignment,
	assembly_component_usage_substitute,
	property_definition,
	group,
	applied_certification_assignment,
	applied_contract_assignment,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_effectivity_assignment,
	applied_event_occurrence_assignment,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	issue,
	justification_group_assignment,  justification_assignment,
	action_resource,
	observation_consequence,
	product,
	product_concept,
	configuration_item,
	product_design_to_individual,
	product_group,
	product_planned_to_realized,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	organizational_project,
	applied_organizational_project_assignment,
	property_definition_representation,
	representation,
	representation_item,
	action_resource_requirement,
	requirement_assignment,
	action,
	resource_property,
	--risk,
	--risk_analysis,
	--risk_assessment,
	--risk_attitude,
	--risk_consequence,
	--risk_control,
	--risk_estimation,
	--risk_evaluation,
	--risk_context,
	--risk_perception,
	--risk_reduction,
	--risk_status,
	--risk_treatment,
	applied_security_classification_assignment,
	state_observed,
	ascribable_state,
	state_type,
	state_type_relationship,
	state_observed_relationship,
	state_observed_role,
	task_method,
	task_objective,
	verification,
	verification_evidence,
	product_definition_relationship);
END_TYPE;


TYPE upfromsm_pmri_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(applied_location_assignment,
	product_relationship,
	selected_item,
	selected_item_assignment);
END_TYPE;

TYPE upfromsm_pmri_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(applied_location_assignment,
	product_relationship,
	selected_item,
	selected_item_assignment);
END_TYPE;

TYPE upfromsm_os_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(applied_position_in_organization_assignment,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	position_in_organization_type,
	applied_person_type_assignment);
END_TYPE;

TYPE upfromsm_os_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(applied_position_in_organization_assignment,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	position_in_organization_type,
	applied_person_type_assignment);
END_TYPE;

TYPE upfromsm_pb_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_pb_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_ss_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(action_method_relationship,
	group,
	action,
	applied_action_assignment,
	action_resource,
	action_resource_relationship,
	action_method,
	task_method_relationship,
	applied_action_method_assignment,
	task_method,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE upfromsm_ss_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(action_method_relationship,
	group,
	action,
	applied_action_assignment,
	action_resource,
	action_resource_relationship,
	action_method,
	task_method_relationship,
	applied_action_method_assignment,
	task_method,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE upfromsm_ap233_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(issue_consequence,
	--risk_analysis,
	--risk_assessment,
	--risk_communication,
	--risk_control,
	--risk_estimation,
	--risk_identification,
	--risk_owner_person_assignment, --risk_owner_person_and_organization_assignment, --risk_owner_organization_assignment,
	applied_action_method_assignment,
	task_method);
END_TYPE;


TYPE upfromsm_ap233_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(issue_consequence,
	--risk_analysis,
	--risk_assessment,
	--risk_communication,
	--risk_control,
	--risk_estimation,
	--risk_identification,
	--risk_owner_person_assignment, --risk_owner_person_and_organization_assignment, --risk_owner_organization_assignment,
	applied_action_method_assignment,
	task_method);
END_TYPE;


TYPE upfromsm_ap233_parameter_value_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON parameter_value_select WITH
	(--risk_analysis,
	state_observed_relationship);
END_TYPE;


TYPE upfromsm_ap233_2_experience_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON experience_type_item WITH
	(applied_organization_assignment, applied_person_and_organization_assignment,
	applied_position_in_organization_assignment,
	group,
	--risk_stakeholder,
	person_type,
	person_type_definition_relationship);
END_TYPE;


TYPE upfromsm_pmri_position_in_organization_group_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_group_item WITH
	(approval_person_organization,
	product_definition,
	applied_organization_assignment, applied_person_and_organization_assignment);
END_TYPE;

TYPE upfromsm_pb_position_in_organization_group_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_group_item WITH
	(product,
	product_definition_formation,
	product_definition);
END_TYPE;

TYPE upfromsm_ap233_position_in_organization_group_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_group_item WITH
	(executed_action,
	action_method,
	event_occurrence,
	interface_definition_connection,
	location,
	product_category,
	product_concept,
	configuration_item,
	product_group,
	organizational_project,
	action_resource_requirement,
	action,
	state_observed,
	verification,
	verification_evidence,
	action_method_assignment,
	versioned_action_request);
END_TYPE;


TYPE upfromsm_pmri_position_in_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_item WITH
	(approval_person_organization,
	product_definition,
	applied_organization_assignment, applied_person_and_organization_assignment);
END_TYPE;

TYPE upfromsm_pb_position_in_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_item WITH
	(product,
	product_definition_formation,
	product_definition);
END_TYPE;

TYPE upfromsm_ap233_position_in_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_item WITH
	(executed_action,
	action_method,
	event_occurrence,
	interface_definition_connection,
	location,
	product_category,
	product_concept,
	configuration_item,
	product_group,
	organizational_project,
	action_resource_requirement,
	action,
	state_observed,
	verification,
	verification_evidence,
	action_method_assignment,
	versioned_action_request);
END_TYPE;


TYPE upfromsm_pmri_position_in_organization_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_type_item WITH
	(approval_person_organization,
	product_definition,
	applied_organization_assignment, applied_person_and_organization_assignment);
END_TYPE;

TYPE upfromsm_pb_position_in_organization_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_type_item WITH
	(product,
	product_definition_formation,
	product_definition);
END_TYPE;

TYPE upfromsm_ap233_position_in_organization_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_type_item WITH
	(executed_action,
	action_method,
	event_occurrence,
	interface_definition_connection,
	location,
	product_category,
	product_concept,
	configuration_item,
	product_group,
	organizational_project,
	action_resource_requirement,
	action,
	state_observed,
	verification,
	verification_evidence,
	action_method_assignment,
	versioned_action_request);
END_TYPE;


(*TYPE upfromsm_ap233_probable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON probable_item WITH
	(executed_action,
	action_method,
	action_method_relationship,
	action_property,
	action_relationship,
	alternate_product_relationship,
	applied_action_method_assignment,
	state_observed_assignment,
	assembly_component_usage_substitute,
	condition,
	applied_action_assignment,
	contract,
	applied_contract_assignment,
	general_property,
	general_property_relationship,
	action_resource,
	product_concept_context,
	product,
	product_definition_formation,
	product_definition,
	organizational_project,
	applied_organizational_project_assignment,
	representation,
	representation_item,
	action_resource_requirement,
	action_method,
	action,
	resource_property,
	state_observed,
	state_type,
	state_type_relationship,
	state_observed_relationship,
	applied_action_method_assignment,
	task_objective,
	applied_action_method_assignment,
	verification,
	verification_evidence,
	verification_relationship,
	product_definition_relationship);
END_TYPE;*)


TYPE upfromsm_ap233_location_representation_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_representation_item WITH
	(executed_action,
	action_method,
	alternate_product_relationship,
	assembly_component_usage_substitute,
	breakdown_of,
	applied_action_assignment,
	constrained_general_parameter_relationship,
	event_occurrence,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	product,
	attribute_language_assignment,
	--lessons_learned,
	action_resource,
	product_concept_context,
	--Observation,
	--risk_organization_stakeholder,
	organization_type,
	product_concept,
	organizational_project,
	representation,
	action_resource_requirement,
	action,
	resource_property,
	--risk,
	--risk_assessment,
	--risk_attitude,
	--risk_consequence,
	--risk_estimation,
	--risk_reduction,
	--risk_stakeholder,
	--risk_treatment,
	state_observed,
	state_type,
	state_observed_relationship,
	applied_action_method_assignment,
	verification,
	verification_evidence,
	product_definition_relationship,
	versioned_action_request);
END_TYPE;



TYPE upfromsm_pb_product_definition_or_product_definition_relationship = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON product_definition_or_product_definition_relationship WITH
	(product_group);
END_TYPE;


TYPE upfromsm_pb_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_ss_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(action_method_relationship,
	group,
	task_method,
	applied_action_method_assignment,
	task_objective);
END_TYPE;

(*TYPE upfromsm_ap233_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(applied_risk_impact_assignment,
	applied_risk_source_assignment,
	lessons_learned,
	risk_person_stakeholder,
	risk_analysis,
	risk_communication,
	risk_control,
	risk_evaluation,
	risk_identification,
	risk_context,
	risk_reduction,
	risk_relationship,
	risk_stakeholder);
END_TYPE;*)


(*TYPE upfromsm_pmri_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(applied_location_assignment);
END_TYPE;*)

ENTITY upfromsm_pmri_characterizable_applied_location_assignment
  SUBTYPE OF (applied_location_assignment, characterized_object);
END_ENTITY;


(*TYPE upfromsm_ss_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(applied_action_method_assignment,
	applied_action_method_assignment);
END_TYPE;*)

ENTITY upfromsm_ss_characterizable_applied_action_method_assignment
  SUBTYPE OF (applied_action_method_assignment, characterized_object);
END_ENTITY;


(*TYPE upfromsm_ap233_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(applied_risk_probability_assignment,
	applied_risk_impact_assignment,
	applied_risk_source_assignment,
	action,
	applied_action_assignment,
	--Observation,
	--Observation_consequence,
	product_group,
	group,
	action_resource,
	action,
	risk_analysis,
	risk_assessment,
	risk_consequence,
	risk_control,
	risk_estimation,
	risk_evaluation,
	risk_context,
	risk_perception,
	risk_reduction,
	risk_treatment,
	ascribable_state,
	ascribable_state,
	task_objective);
END_TYPE;*)

ENTITY upfromsm_ap233_characterizable_action
  SUBTYPE OF (action, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_applied_action_assignment
  SUBTYPE OF (applied_action_assignment, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_action_resource
  SUBTYPE OF (action_resource, characterized_object);
END_ENTITY;


(*ENTITY upfromsm_ap233_characterizable_applied_risk_impact_assignment
  SUBTYPE OF (applied_risk_impact_assignment, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_applied_risk_probability_assignment
  SUBTYPE OF (applied_risk_probability_assignment, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_applied_risk_source_assignment
  SUBTYPE OF (risk_source_assignment, characterized_object);
END_ENTITY;*)


ENTITY upfromsm_ap233_characterizable_ascribable_state
  SUBTYPE OF (ascribable_state, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_group
  SUBTYPE OF (group, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_product_group
  SUBTYPE OF (product_group, characterized_object);
END_ENTITY;


(*ENTITY upfromsm_ap233_characterizable_risk_analysis
  SUBTYPE OF (risk_analysis, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_risk_assessment
  SUBTYPE OF (risk_assessment, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_risk_consequence
  SUBTYPE OF (risk_consequence, characterized_object);
END_ENTITY;


ENTITY vcharacterizable_risk_context
  SUBTYPE OF (risk_context, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_risk_control
  SUBTYPE OF (risk_control, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_risk_estimation
  SUBTYPE OF (risk_estimation, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_risk_evaluation
  SUBTYPE OF (risk_evaluation, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_risk_perception
  SUBTYPE OF (risk_perception, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_risk_reduction
  SUBTYPE OF (risk_reduction, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_risk_treatment
  SUBTYPE OF (risk_treatment, characterized_object);
END_ENTITY;
*)

ENTITY upfromsm_ap233_characterizable_task_objective
  SUBTYPE OF (task_objective, characterized_object);
END_ENTITY;

ENTITY upfromsm_ap233_characterizable_observation
  SUBTYPE OF (observation, characterized_object);
END_ENTITY;


ENTITY upfromsm_ap233_characterizable_observation_consequence
  SUBTYPE OF (observation_consequence, characterized_object);
END_ENTITY;
  
TYPE upfromsm_os4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(position_in_organization,
	position_in_organization_type,
	person_type);
END_TYPE;

TYPE upfromsm_ss6_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_method,
	task_method,
	applied_action_method_assignment,
	task_method_version_relationship);
END_TYPE;

TYPE upfromsm_ap233_4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(applied_action_assignment,
	action_resource
	--risk_analysis,
	--risk_treatment
	);
END_TYPE;


TYPE upfromsm_ss_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
	(state_observed_assignment,
	state_observed);
END_TYPE;

TYPE upfromsm_ap233_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
	(action_method);
END_TYPE;


TYPE upfromsm_ss_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
	(state_observed_assignment,
	state_observed);
END_TYPE;

TYPE upfromsm_ap233_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
	(observation,
	action
	--risk_analysis,
	--risk_stakeholder,
	--risk_treatment
	);
END_TYPE;


TYPE upfromsm_ap233_5_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_actual,
	action_method,
	action_request_solution,
	action_method_relationship,
	applied_action_request_assignment,
	analysis_assignment,
	applied_action_assignment,
	applied_action_method_assignment,
	--applied_risk_impact_assignment,
	group,
	certification,
	applied_certification_assignment,
	state_type_assignment,
	contract,
	applied_contract_assignment,
	directed_action,
	event_occurrence,
	applied_event_occurrence_assignment,
	interface_connection,
	interface_definition_connection,
	interface_definition_for,
	--lessons_learned,
	observation,
	observation_consequence,
	representation,
	product,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	organizational_project,
	applied_organizational_project_assignment,
	representation_item,
	requirement_assignment,
	action,
	action_property,
	action_relationship,
	--risk,
	--risk_analysis,
	--risk_assessment,
	--risk_communication,
	--risk_control,
	--risk_estimation,
	--risk_evaluation,
	--risk_consequence,
	--risk_context,
	--risk_perception,
	--risk_reduction,
	--risk_treatment,
	applied_security_classification_assignment,
	state_observed,
	ascribable_state,
	state_type,
	state_type_relationship,
	state_observed_relationship,
	state_observed_role,
	task_io_hierarchy,
	task_objective,
	verification,
	verification_evidence,
	action_method_assignment);
END_TYPE;


TYPE upfromsm_pmri_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(location);
END_TYPE;

TYPE upfromsm_pb_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product_group);
END_TYPE;

TYPE upfromsm_ap233_2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_resource,
	applied_position_in_organization_group_assignment);
END_TYPE;


TYPE upfromsm_pmri3_action_method_items= EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(location);
END_TYPE;

TYPE upfromsm_os5_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(organization_type,
	position_in_organization,
	position_in_organization_type,
	person_type);
END_TYPE;

TYPE upfromsm_pb2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product_group);
END_TYPE;


(*TYPE upfromsm_ap233_risk_impact_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON risk_impact_item WITH
	(executed_action,
	action_method,
	group,
	action_property,
	action_relationship,
	alternate_product_relationship,
	applied_action_assignment,
	state_observed_assignment,
	approval,
	assembly_component_usage_substitute,
	breakdown_context,
	breakdown_of,
	condition,
	ascribable_state_relationship,
	event_occurrence,
	event_occurrence_relationship,
	general_property,
	general_property_relationship,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	issue,
	issue_consequence,
	action_resource,
	action_resource_relationship,
	product_concept_context,
	organization,
	applied_organization_assignment, applied_person_and_organization_assignment,
	person,
	person_and_organization,
	product,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	organizational_project,
	applied_organizational_project_assignment,
	representation,
	representation_item,
	action_resource_requirement,
	action_method,
	requirement_assignment,
	requirement_source,
	action,
	action_resource,
	action_method,
	action_resource_relationship,
	resource_property,
	state_observed,
	ascribable_state,
	ascribable_state,
	state_type_relationship,
	state_observed_relationship,
	applied_action_method_assignment,
	task_objective,
	applied_action_method_assignment,
	verification,
	verification_evidence,
	verification_relationship,
	product_definition_relationship);
END_TYPE;*)


(*TYPE upfromsm_ap233_risk_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON risk_source_item WITH
	(action_property,
	action_relationship,
	alternate_product_relationship,
	state_observed_assignment,
	approval,
	approval_person_organization,
	assembly_component_usage_substitute,
	property_definition,
	breakdown_context,
	breakdown_of,
	applied_certification_assignment,
	condition,
	applied_action_assignment,
	contract,
	applied_contract_assignment,
	ascribable_state_relationship,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_effectivity_assignment,
	event_occurrence,
	applied_event_occurrence_assignment,
	event_occurrence_relationship,
	applied_experience_assignment,
	experience,
	expression_assignment,
	document_file,
	generic_expression,
	general_property,
	general_property_relationship,
	information_right,
	information_usage_right,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	product,
	justification_group_assignment,  justification_assignment,
	product_relationship,
	justification_group_assignment, justification_support_assignment,
	action_resource,
	action_resource_relationship,
	product_concept_context,
	observation,
	observation_consequence,
	observation_relationship,
	organization,
	applied_organization_assignment, applied_person_and_organization_assignment,
	person,
	person_and_organization,
	applied_position_in_organization_assignment,
	group,
	position_in_organization,
	applied_position_in_organization_assignment,
	group,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_assignment,
	applied_position_in_organization_type_assignment,
	position_in_organization_relationship,
	position_in_organization_assignment,
	position_in_organization_type,
	applied_position_in_organization_type_assignment,
	position_in_organization_type_assignment,
	product_concept,
	product_design_to_individual,
	product_design_version_to_individual,
	product_group,
	product_group_relationship,
	product_planned_to_realized,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	organizational_project,
	applied_organizational_project_assignment,
	organizational_project_relationship,
	applied_qualification_type_assignment,
	qualification_type,
	representation,
	representation_item,
	action_resource_requirement,
	action_method,
	requirement_assignment,
	requirement_source,
	action_resource,
	action,
	action_resource,
	action_method,
	action_resource_relationship,
	resource_property,
	selected_item,
	selected_item_assignment,
	state_observed,
	ascribable_state,
	ascribable_state,
	state_type,
	state_type_relationship,
	state_observed_relationship,
	applied_action_method_assignment,
	task_objective,
	applied_action_method_assignment,
	person_type,
	applied_person_type_assignment,
	person_type_definition,
	person_type_definition_relationship,
	applied_person_type_definition_assignment,
	verification,
	verification_evidence,
	verification_relationship,
	product_definition_relationship,
	action_method,
	action_method,
	action_method_assignment);
END_TYPE;*)


TYPE upfromsm_pmri_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(product_relationship);
END_TYPE;

TYPE upfromsm_pb_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_ss_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(action_method_relationship,
	group,
	applied_action_method_assignment,
	task_method,
	task_method_relationship,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE upfromsm_ap233_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(action_resource
	--risk_communication,
	--risk_consequence,
	--risk_treatment
	);
END_TYPE;


TYPE upfromsm_pmri_selected_item_context_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON selected_item_context_items WITH
	(contract,
	product_concept,
	configuration_item,
	organizational_project);
END_TYPE;

TYPE upfromsm_pb_selected_item_context_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON selected_item_context_items WITH
	(product,
	product_definition_formation,
	product_as_individual,
	Product_as_individual_version);
END_TYPE;


TYPE upfromsm_pmri_selected_item_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON selected_item_select WITH
	(product,
	product_definition_formation);
END_TYPE;

TYPE upfromsm_pb_selected_item_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON selected_item_select WITH
	(interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;


TYPE upfromsm_pmri_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(location);
END_TYPE;


TYPE upfromsm_pb_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(product_group);
END_TYPE;

TYPE upfromsm_ss_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(action_resource,
	action_method,
	action_resource_relationship,
	action,
	action_property,
	action_relationship);
END_TYPE;

TYPE upfromsm_ap233_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(--applied_risk_impact_assignment,
	--lessons_learned,
	observation_consequence,
	--risk,
	--risk_attitude,
	--risk_control,
	--risk_consequence,
	--risk_context,
	--risk_treatment,
	state_observed);
END_TYPE;


TYPE upfromsm_pmri_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_observed_of_item WITH
	(certification,
	contract,
	document_file,
	location,
	product_concept,
	configuration_item,
	security_classification,
	product_definition_relationship);
END_TYPE;

TYPE upfromsm_os_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_observed_of_item WITH
	(organization,
	person_and_organization);
END_TYPE;

TYPE upfromsm_pb_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_observed_of_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_specification_definition,
	interface_specification_version,
	product_as_individual,
	product_as_individual_view,
	product_as_planned,
	product_as_realized,
	product_group);
END_TYPE;

TYPE upfromsm_ss_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_observed_of_item WITH
	(executed_action,
	action_method,
	applied_action_assignment,
	action_resource,
	action_resource_relationship,
	action,
	action_property,
	action_relationship,
	task_method,
	task_objective);
END_TYPE;

TYPE upfromsm_ap233_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_observed_of_item WITH
	(alternate_product_relationship,
	analysis_assignment,
	--applied_risk_impact_assignment,
	state_type_assignment,
	group,
	product_definition,
	product,
	product_definition_formation,
	event_occurrence,
	document_file,
	applied_external_identification_assignment,
	observation,
	observation_consequence,
	--risk_analysis,
	--risk_attitude,
	--risk_communication,
	--risk_control,
	--risk_evaluation,
	--risk_consequence,
	--risk_perception,
	--risk_treatment,
	state_observed,
	ascribable_state,
	state_type,
	state_type_relationship,
	state_observed_relationship,
	state_observed_role,
	person_type,
	verification,
	verification_evidence);
END_TYPE;


TYPE upfromsm_pmri_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(representation,
	location,
	applied_location_assignment,
	location_relationship,
	applied_location_representation_assignment,
	product_relationship,
	measure_representation_item);
END_TYPE;

TYPE upfromsm_pmri_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(representation,
	location,
	applied_location_assignment,
	location_relationship,
	applied_location_representation_assignment,
	product_relationship,
	measure_representation_item);
END_TYPE;

TYPE upfromsm_os_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(applied_experience_assignment,
	experience_type,
	organization_type,
	position_in_organization,
	group,
	position_in_organization_relationship,
	position_in_organization_assignment,
	position_in_organization_type,
	qualification_type,
	person_type,
	applied_person_type_assignment,
	person_type_definition,
	person_type_definition_relationship);
END_TYPE;

TYPE upfromsm_os_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(applied_experience_assignment,
	experience_type,
	organization_type,
	position_in_organization,
	group,
	position_in_organization_relationship,
	position_in_organization_assignment,
	position_in_organization_type,
	qualification_type,
	person_type,
	applied_person_type_assignment,
	person_type_definition,
	person_type_definition_relationship);
END_TYPE;

TYPE upfromsm_pb_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(product_group,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_pb_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(product_group,
	product_group_relationship);
END_TYPE;

TYPE upfromsm_ss_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(action_method_relationship,
	group,
	action,
	action_resource,
	action_resource_relationship,
	action_property,
	action_relationship,
	task_method_relationship,
	task_method,
	applied_action_method_assignment,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE upfromsm_ss_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(action_method_relationship,
	group,
	action,
	action_resource,
	action_resource_relationship,
	action_property,
	action_relationship,
	task_method,
	applied_action_method_assignment,
	task_method_relationship,
	task_method_version_relationship,
	task_objective);
END_TYPE;


TYPE upfromsm_os_person_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_type_item WITH
	(person_and_organization,
	position_in_organization,
	group,
	position_in_organization_type);
END_TYPE;

TYPE upfromsm_ap233_person_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_type_item WITH
	(executed_action,
	action_method,
	action_request_solution,
	analysis_assignment,
	--applied_risk_impact_assignment,
	group,
	groupable_item,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_experience_assignment,
	experience,
	experience_type,
	interface_definition_connection,
	interface_definition_for,
	observation_consequence,
	product,
	product_definition_formation,
	organizational_project,
	applied_organizational_project_assignment,
	--risk_analysis,
	--risk_treatment,
	verification,
	verification_evidence,
	product_definition_relationship,
	action_method_assignment,
	versioned_action_request);
END_TYPE;



TYPE upfromsm_ap233_verification_evidence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON verification_evidence_item WITH
	(state_observed_assignment,
	applied_action_assignment,
	ascribable_state_relationship,
	applied_location_assignment,
	observation,
	observation_consequence,
	observation_relationship,
	applied_position_in_organization_assignment,
	action_method,
	action_resource_relationship,
	action_property,
	action_relationship,
	--risk_analysis,
	--risk_communication,
	--risk_consequence,
	--risk_criteria,
	--risk_estimation,
	--risk_evaluation,
	--risk_treatment,
	state_observed,
	ascribable_state,
	state_observed_relationship,
	applied_action_method_assignment,
	applied_person_type_assignment,
	action_method_assignment);
END_TYPE;



TYPE upfromsm_ss4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(executed_action,
	action_method,
	applied_action_assignment,
	applied_action_method_assignment,
	event_occurrence,
	task_element,
	task_method);
END_TYPE;

TYPE upfromsm_ap233_6_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(analysis_assignment,
	organizational_project,
	verification);
END_TYPE;


TYPE upfromsm_pmri4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(contract,
	product,
	product_definition,
	product_definition_formation,
	document_file,
	location,
	applied_organizational_project_assignment);
END_TYPE;

TYPE upfromsm_os2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(organization,
	organization_type,
	person,
	person_and_organization,
	position_in_organization,
	position_in_organization_type,
	person_type);
END_TYPE;

TYPE upfromsm_pb3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition_formation,
	product_definition,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view,
	product_group);
END_TYPE;

TYPE upfromsm_ss5_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_resource,
	action_resource_requirement,
	state_type);
END_TYPE;

TYPE upfromsm_ap233_7_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_method,
	analysis_assignment,
	group,
	--risk_analysis,
	--risk_assessment,
	--risk_evaluation,
	--risk_reduction,
	--risk_treatment,
	applied_action_method_assignment,
	verification_evidence);
END_TYPE;

-- end upfromsm_

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\approval_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.14 2004/10/28 16:16:40 darla Exp $
ISO TC184/SC4/WG12 N2910 - ISO/TS 10303-1012 Approval - EXPRESS MIM
*) 


SCHEMA Approval_mim;

USE FROM approval_schema   -- ISO 10303-41
  (approval,
   approval_date_time,
   approval_person_organization,
   approval_relationship,
   approval_role,
   approval_status); 

USE FROM basic_attribute_schema   -- ISO 10303-41
  (object_role,
   role_association,
   role_select); 

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM Date_time_mim;    -- ISO/TS 10303-1010

USE FROM management_resources_schema   -- ISO 10303-41
  (approval_assignment); 

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011


TYPE approval_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

TYPE date_and_time_item_approval = SELECT BASED_ON date_and_time_item WITH 
   (approval_person_organization);
END_TYPE; 

TYPE date_item_approval = SELECT BASED_ON date_item WITH 
   (approval_person_organization);
END_TYPE; 

ENTITY applied_approval_assignment
  SUBTYPE OF (approval_assignment);
  items : SET[1:?] OF approval_item;
END_ENTITY;

END_SCHEMA;  -- Approval_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\assembly_structure_mim.exp
   ------------------------------------------------------------
*)

(* 
 $Id: mim.exp,v 1.6 2004/01/13 10:15:26 robbod Exp $
 ISO TC184/SC4/WG12 N2516 - ISO/TS 10303-1026 Assembly structure - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1136
*)

SCHEMA Assembly_structure_mim;

USE FROM Product_view_definition_relationship_mim; -- ISO/TS 10303-1041
USE FROM Value_with_unit_mim; -- ISO/TS 10303-1054

USE FROM product_structure_schema -- ISO 10303-44
  (assembly_component_usage,
   next_assembly_usage_occurrence,
   promissory_usage_occurrence,
   quantified_assembly_component_usage,
   specified_higher_usage_occurrence);

END_SCHEMA;






(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\attribute_classification_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.12 2004/11/19 21:37:34 robbod Exp $
 ISO TC184/SC4/WG12 N3020 - ISO/TS 10303-1246 Attribute classification - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2256
*) 


SCHEMA Attribute_classification_mim;

USE FROM Class_mim;    -- ISO/TS 10303-1070

USE FROM classification_schema   -- ISO 10303-54
  (class); 

USE FROM management_resources_schema   -- ISO 10303-41
  (attribute_classification_assignment); 


TYPE attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_attribute_classification_assignment
  SUBTYPE OF (attribute_classification_assignment);
  SELF\attribute_classification_assignment.assigned_class : class;
  items : SET[1:?] OF attribute_classification_item;
END_ENTITY;

END_SCHEMA;  -- Attribute_classification_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\basic_geometry_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.11 2006/01/20 08:43:36 liutkuviene Exp $
   ISO TC184/SC4/WG12 N3904 - ISO/TS 10303-1652 Basic geometry - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3370
*)


SCHEMA Basic_geometry_mim;

	USE FROM Elemental_geometric_shape_mim;    -- ISO/TS 10303-1004

	USE FROM Geometry_schema(plane,
	point_on_curve,
	curve,
	line,
	point_on_surface,
	degenerate_pcurve,
	surface,
	oriented_surface); -- required by mapping

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\behaviour_description_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.5 2007/04/02 18:49:30 philsp Exp $
  ISO TC184/SC4/WG12 N4554 - ISO/CD-TS 10303-1483 Behaviour description assignment - EXPRESS MIM
*) 


SCHEMA Behaviour_description_assignment_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (object_role,
   role_association,
   role_select); 

USE FROM Behaviour_view_definition_mim;    -- ISO/CD-TS 10303-1481

USE FROM Group_mim;    -- ISO/TS 10303-1113


TYPE behaviour_item_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (product_definition);
END_TYPE; 

TYPE behaviour_model_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item;
END_TYPE; 

END_SCHEMA;  -- Behaviour_description_assignment_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\behaviour_identification_and_version_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.5 2007/03/21 12:25:23 abhpf Exp $
   ISO TC184/SC4/WG12 N4557 - ISO/CD-TS 10303-1482 Behaviour identification and version - EXPRESS MIM
*) 
(******************************************************************************)
(*                                                                            *)
(*         This file was produced by Eurostep GraphicalEXPRESS V1.4.0         *)
(*                                                                            *)
(******************************************************************************)

(* Original model: ap233 wd3mim.vsd*)
(* Title: *)
(* Author: Phil Spiby*)
(* Comments: *)

SCHEMA Behaviour_identification_and_version_mim;

USE FROM Identification_assignment_mim;

USE FROM Product_version_relationship_mim;

TYPE behaviour_and_version_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
  (product,
   product_definition_formation);
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\behaviour_view_definition_mim.exp
   ------------------------------------------------------------
*)

(*"Behaviour_view_definition_mim"
   $Id: mim.exp,v 1.5 2007/04/02 12:02:07 philsp Exp $
  ISO TC184/SC4/WG12 N4560 - ISO/CD-TS 10303-1481 Behaviour view definition - EXPRESS MIM
*)
SCHEMA Behaviour_view_definition_mim;

USE FROM Behaviour_identification_and_version_mim;

USE FROM Product_view_definition_mim;

TYPE behaviour_definition_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
  (product_definition);
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\certification_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.9 2004/10/31 20:37:09 thendrix Exp $
ISO TC184/SC4/WG12 N1148 - ISO/TS 10303-1044 Certification - EXPRESS MIM
*) 


SCHEMA Certification_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (role_association,
   role_select); 

USE FROM certification_schema   -- ISO 10303-41
  (certification,
   certification_type); 

USE FROM management_resources_schema   -- ISO 10303-41
  (certification_assignment); 


TYPE certification_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_certification_assignment
  SUBTYPE OF (certification_assignment);
  items : SET[1:?] OF certification_item;
END_ENTITY;

END_SCHEMA;  -- Certification_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\characterizable_object_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.5 2006/02/20 09:50:40 liutkuviene Exp $
   ISO TC184/SC4/WG12 N4297 - ISO/TS 10303-1765 Characterizable object - EXPRESS MIM
*)

SCHEMA Characterizable_object_mim;

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object);

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\class_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.9 2004/11/19 21:37:34 robbod Exp $
 ISO TC184/SC4/WG12 N3023 - ISO/TS 10303-1070 Class - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2259
*) 


SCHEMA Class_mim;

USE FROM classification_schema   -- ISO 10303-54
  (class,
   class_by_extension,
   class_by_intension); 

USE FROM group_schema   -- ISO 10303-41
  (group); 


END_SCHEMA;  -- Class_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\classification_assignment_mim.exp
   ------------------------------------------------------------
*)

(* 
 $Id: mim.exp,v 1.11 2004/11/30 17:13:38 robbod Exp $
 ISO TC184/SC4/WG12 N3249 - ISO/TS 10303-1114 Classification assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2230 
*)

SCHEMA Classification_assignment_mim;

USE FROM Class_mim;    -- ISO/TS 10303-1070

USE FROM management_resources_schema   -- ISO 10303-41
  (classification_assignment); 


TYPE classification_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_classification_assignment
  SUBTYPE OF (classification_assignment);
  items : SET[1:?] OF classification_item;
END_ENTITY;

END_SCHEMA;  -- Classification_assignment_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\condition_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.20 2004/11/19 21:37:34 robbod Exp $
 ISO TC184/SC4/WG12 N3026 - ISO/TS 10303-1253 Condition - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2319
*) 


SCHEMA Condition_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_method,
   action_method_relationship); 

USE FROM Activity_method_assignment_mim;    -- ISO/TS 10303-1249

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM management_resources_schema   -- ISO 10303-41
  (action_method_assignment,
   action_method_role,
   name_assignment); 

USE FROM Name_assignment_mim;    -- ISO/TS 10303-1340


TYPE condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH 
   (action_method_relationship);
END_TYPE; 

TYPE condition_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (action_method, 
    action_method_relationship, 
    applied_action_method_assignment);
END_TYPE; 

TYPE condition_name_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON name_item WITH 
   (applied_action_method_assignment);
END_TYPE; 

ENTITY condition
  SUBTYPE OF (action_method);
END_ENTITY;

END_SCHEMA;  -- Condition_mim




(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\condition_evaluation_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.15 2004/11/19 21:37:34 robbod Exp $
 ISO TC184/SC4/WG12 N3032 - ISO/TS 10303-1254 Condition evaluation - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2325
*) 


SCHEMA Condition_evaluation_mim;

USE FROM action_schema   -- ISO 10303-41
  (action); 

USE FROM Activity_method_assignment_mim;    -- ISO/TS 10303-1249

USE FROM Activity_mim;    -- ISO/TS 10303-1047

USE FROM basic_attribute_schema   -- ISO 10303-41
  (object_role,
   role_association,
   role_select); 

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM Condition_mim;    -- ISO/TS 10303-1253

USE FROM Group_mim;    -- ISO/TS 10303-1113

USE FROM group_schema   -- ISO 10303-41
  (group); 

USE FROM management_resources_schema   -- ISO 10303-41
  (name_assignment); 

USE FROM Name_assignment_mim;    -- ISO/TS 10303-1340


TYPE condition_evaluation_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items;
END_TYPE; 

TYPE condition_evaluation_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (action, 
    applied_action_assignment, 
    group);
END_TYPE; 

TYPE condition_evaluation_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (applied_action_assignment, 
    applied_action_method_assignment);
END_TYPE; 

TYPE condition_evaluation_name_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON name_item WITH 
   (applied_action_assignment);
END_TYPE; 

END_SCHEMA;  -- Condition_evaluation_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\configuration_effectivity_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.8 2004/10/28 18:27:56 darla Exp $
 ISO TC184/SC4/WG12 N2950 - ISO/TS 10303-1058 Configuration effectivity - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2519
*) 


SCHEMA Configuration_effectivity_mim; 

USE FROM Effectivity_mim;    -- ISO/TS 10303-1057

USE FROM Configuration_item_mim;    -- ISO/CD-TS 10303-1056

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041

USE FROM configuration_management_schema   -- ISO 10303-44
  (configuration_effectivity); 


END_SCHEMA;  -- Configuration_effectivity_mim






(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\configuration_item_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.5 2004/02/25 16:07:46 robbod Exp $
 ISO TC184/SC4/WG12 N2533 - ISO/TS 10303-1056 Configuration item - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2483
*) 


SCHEMA Configuration_item_mim;

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Product_concept_identification_mim;    -- ISO/TS 10303-1060

USE FROM configuration_management_schema   -- ISO 10303-44
  (configuration_design,
   configuration_item); 


END_SCHEMA;  -- Configuration_item_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\contextual_shape_positioning_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.4 2006/03/24 18:27:55 thendrix Exp $
 ISO TC184/SC4/WG12 N4252 - ISO/TS 10303-1027 Contextual shape positioning - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1139
*)
SCHEMA Contextual_shape_positioning_mim;

USE FROM Extended_basic_geometry_mim; -- ISO/TS 10303-1667
USE FROM Foundation_representation_mim; --  ISO/TS 10303-1006
USE FROM Shape_property_assignment_mim; --  ISO/TS 10303-1032

USE FROM product_property_representation_schema -- ISO 10303-41
  (context_dependent_shape_representation);

USE FROM representation_schema 	-- ISO 10303-43
      (functionally_defined_transformation,
      representation_relationship_with_transformation,
      mapped_item);

END_SCHEMA;






(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\contract_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.6 2004/10/21 15:47:34 darla Exp $
 ISO TC184/SC4/WG12 N1127 - ISO/TS 10303-1062 Contract - EXPRESS MIM
*)    
SCHEMA Contract_mim;
USE FROM contract_schema -- ISO 10303-41
  (contract);
USE FROM management_resources_schema -- ISO 10303-41
  (contract_assignment);

   
TYPE contract_item = EXTENSIBLE SELECT; 
END_TYPE;
   
   
ENTITY applied_contract_assignment
  SUBTYPE OF (contract_assignment);
  items : SET [1:?] OF contract_item;
END_ENTITY;

END_SCHEMA;

 


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\date_time_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.5 2004/10/21 16:32:15 darla Exp $
 ISO TC184/SC4/WG12 N1082 - ISO/TS 10303-1010 Date time - EXPRESS MIM
*)       
SCHEMA Date_time_mim;
USE FROM date_time_schema -- ISO 10303-41
  (calendar_date,
   date_and_time,
   coordinated_universal_time_offset);

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\date_time_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.7 2004/10/21 16:34:13 darla Exp $
 ISO TC184/SC4/WG12 N1094 - ISO/TS 10303-1014 Date time assignment - EXPRESS MIM
*)     
SCHEMA Date_time_assignment_mim;

USE FROM Date_time_mim; 	-- 10303-1010

USE FROM date_time_schema 	-- ISO 10303-41
  (date,
   date_role,
   date_time_role);
USE FROM management_resources_schema -- ISO 10303-41
  (date_and_time_assignment,
   date_assignment);

   
TYPE date_item = EXTENSIBLE SELECT; 
END_TYPE;
   
TYPE date_and_time_item = EXTENSIBLE SELECT; 
END_TYPE;
   
ENTITY applied_date_and_time_assignment
  SUBTYPE OF (date_and_time_assignment);
  items : SET [1:?] OF date_and_time_item;
END_ENTITY;
   
ENTITY applied_date_assignment
  SUBTYPE OF (date_assignment);
  items : SET [1:?] OF date_item;
END_ENTITY;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\decision_support_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.7 2007/04/02 18:18:36 philsp Exp $
   ISO TC184/SC4/WG12 N - ISO/WD 10303-1486 Decision_support - EXPRESS MIM *)
(*            UNDER DEVELOPMENT by H.P. Frisch
	      NOTE:  Many duplications exist, they need to be auto-removed.  
	       	Auto-condensation of extensible type lists also need to be done.  
*)
SCHEMA Decision_support_mim;

USE FROM Activity_as_realized_mim;

USE FROM Analysis_assignment_mim;

USE FROM Analysis_characterized_mim;

USE FROM External_analysis_representation_mim;

USE FROM Justification_mim;

USE FROM Measure_of_effectiveness_mim;

USE FROM Requirement_management_mim;

USE FROM Verification_and_validation_mim;

TYPE ds_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
  (executed_action,
   action_method,
   applied_action_assignment,
   property_definition,
   contract,
   effectivity,
   event_occurrence,
   document_file,
   general_property,
   organization,
   person,
   person_and_organization,
   product,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition,
   organizational_project,
   product_definition_relationship);
END_TYPE;

TYPE ds_pmri_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(property_definition,
	contract,
	descriptive_representation_item,
	general_property,
	measure_representation_item,
	product,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	product_definition_relationship);
END_TYPE;

TYPE ds_ss_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(executed_action,
	action_method,
	applied_action_assignment);
END_TYPE;

TYPE ds_pmri_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(approval,
	approval_status,
	certification,
	applied_organization_assignment, applied_person_and_organization_assignment,
	organizational_project,
	applied_security_classification_assignment,
	product_definition_relationship);
END_TYPE;

TYPE ds_os_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(address,
	person,
	person_and_organization);
END_TYPE;

TYPE ds_ss_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(event_occurrence,
	product,
	justification_group_assignment, 
        justification_assignment,
	product_relationship,
	justification_support_assignment);
END_TYPE;

TYPE ds_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
  (executed_action,
   action_method,
   applied_action_assignment,
   product,
   justification_group_assignment, 
justification_assignment,
   product_relationship,
   justification_support_assignment);
END_TYPE;

TYPE ds_pmri_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(certification,
	effectivity,
	applied_identification_assignment,
	general_property,
	property_definition_representation,
	product_definition_formation_relationship,
	product_definition,
	product_definition_relationship,
	product_definition_context);
END_TYPE;

TYPE ds_ss_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(property_definition,
	event_occurrence,
	product,
	justification_group_assignment, 
justification_assignment,
	product_relationship,
	justification_support_assignment);
END_TYPE;

TYPE ds_ap233_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(product,
	product_definition_formation,
	verification,
	verification_evidence,
	verification_relationship);
END_TYPE;

TYPE ds_ap233_analised_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON analised_item WITH
	(executed_action,
	action_method,
	action_relationship,
	property_definition,
	organization,
	Organization_relationship,
	product,
	product_definition_formation_relationship,
	product_definition,
	organizational_project_relationship,
	requirement_assignment,
	verification,
	verification_evidence,
	verification_relationship,
	product_definition_context,
	product_definition_relationship);
END_TYPE;

TYPE ds_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
  (executed_action,
   action_method);
END_TYPE;

TYPE ds_pmri_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(product,
	product_definition_formation,
	product_definition_formation_relationship,
	organizational_project,
	product_definition_relationship);
END_TYPE;

TYPE ds_ap233_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(approval_person_organization,
	property_definition,
	product,
	verification_evidence);
END_TYPE;

TYPE ds_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
  (executed_action,
   action_method,
   action_relationship,
   action_status,
   applied_action_assignment,
   product,
   justification_group_assignment, 
justification_assignment,
   product_relationship,
   justification_support_assignment,
   verification,
   verification_evidence);
END_TYPE;

TYPE ds_pmri_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(conversion_based_unit,
	derived_unit,
	applied_external_identification_assignment,
	general_property,
	property_definition_representation,
	product,
	product_category,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	uncertainty_measure_with_unit,
	named_unit, 
	measure_with_unit,
	product_definition_context,
	product_definition_relationship);
END_TYPE;

TYPE ds_ss_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(executed_action,
	action_relationship,
	applied_action_assignment,
	property_definition,
	property_definition_representation);
END_TYPE;


TYPE ds_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
  (executed_action,
   action_method,
   applied_action_assignment);
END_TYPE;

TYPE ds_pmri_contract_item = EXTENSIBLE SELECT BASED_ON contract_item WITH
	(organization_item, person_and_organization_item,
	product_definition_formation);
END_TYPE;

TYPE ds_ap233_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(verification);
END_TYPE;

TYPE ds_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
  (executed_action,
   action_method,
   action_relationship,
   applied_action_assignment,
   product,
   justification_group_assignment, 
justification_assignment,
   product_relationship,
   justification_support_assignment,
   verification,
   verification_evidence);
END_TYPE;

TYPE ds_pmri_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(applied_identification_assignment,
	general_property,
	property_definition_representation,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	product_definition_context);
END_TYPE;

TYPE ds_ap233_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(analysis_assignment);
END_TYPE;
TYPE ds_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
  (executed_action,
   action_method,
   action_relationship,
   applied_action_assignment,
   product,
   justification_group_assignment, 
justification_assignment,
   product_relationship,
   justification_support_assignment,
   verification,
   verification_evidence);
END_TYPE;

TYPE ds_pmri_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(applied_identification_assignment,
	general_property,
	property_definition_representation,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	product_definition_context);
END_TYPE;

TYPE ds_ap233_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(analysis_assignment);
END_TYPE;

TYPE ds_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
  (executed_action,
   action_method,
   applied_action_assignment,
   verification,
   verification_evidence);
END_TYPE;

TYPE ds_pmri_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(applied_external_identification_assignment);
END_TYPE;

TYPE ds_ap233_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(analysis);
END_TYPE;

TYPE ds_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
  (executed_action,
   action_method,
   applied_action_assignment,
   product,
   justification_group_assignment, 
justification_assignment,
   product_relationship,
   justification_support_assignment,
   verification,
   verification_evidence);
END_TYPE;

TYPE ds_pmri_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(product_definition);
END_TYPE;

TYPE ds_ap233_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(analysis_assignment,
	event_occurrence,
	applied_effectivity_assignment,
	applied_external_identification_assignment);
END_TYPE;

TYPE ds_ap233_event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON event_occurrence_item WITH
	(executed_action,
	approval,
	contract,
	product,
	verification);
END_TYPE;

TYPE ds_ap233_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH
	(person_and_organization,
	product,
	organizational_project);
END_TYPE;

TYPE ds_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
  (executed_action,
   action_method,
   applied_action_assignment,
   product,
   justification_group_assignment, 
justification_assignment,
   product_relationship,
   justification_support_assignment,
   verification,
   verification_evidence);
END_TYPE;

TYPE ds_pmri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(document_file,
	applied_external_identification_assignment,
	general_property,
	property_definition_representation,
	measure_representation_item,
	product_category,
	representation,
	product_definition_context,
	product_definition_usage);
END_TYPE;

TYPE ds_ss_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(action_method);
END_TYPE;

TYPE ds_ap233_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
	(action_method,
	property_definition,
	contract,
	product,
	organizational_project,
	verification_evidence);
END_TYPE;

TYPE ds_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
  (executed_action,
   action_method,
   applied_action_assignment,
   approval,
   applied_approval_assignment,
   property_definition,
   applied_classification_assignment,
   applied_document_reference, applied_document_usage_constraint_assignment,
   product_definition,
   effectivity,
   general_property,
   general_property_relationship,
   product,
   product_definition_formation,
   product_definition_formation_relationship,
   verification,
   verification_evidence,
   product_definition_relationship);
END_TYPE;

TYPE ds_pmri_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(descriptive_representation_item,
	measure_representation_item);
END_TYPE;

TYPE ds_ap233_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(analysis_assignment,
	applied_usage_right,
	certification,
	contract,
	information_usage_right,
	applied_organizational_project_assignment,
	requirement_assignment,
	security_classification);
END_TYPE;

TYPE ds_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
  (executed_action,
   action_method,
   applied_action_assignment,
   approval,
   property_definition,
   certification,
   contract,
   product,
   product_definition,
   product_definition_formation,
   effectivity,
   event_occurrence,
   general_property,
   property_definition_representation,
   product_definition_formation_relationship,
   organizational_project,
   verification,
   verification_evidence,
   product_definition_relationship);
END_TYPE;

TYPE ds_pmri_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(descriptive_representation_item,
	measure_representation_item,
	product_definition_context);
END_TYPE;

TYPE ds_ap233_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(analysis_assignment);
END_TYPE;

TYPE ds_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
  (executed_action,
   action_method,
   action_relationship,
   applied_action_assignment,
   product,
   justification_group_assignment, 
justification_assignment,
   product_relationship,
   justification_support_assignment,
   verification,
   verification_evidence);
END_TYPE;

TYPE ds_pmri_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(product_definition_formation_relationship);
END_TYPE;

TYPE ds_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
  (executed_action,
   action_method,
   action_relationship,
   applied_action_assignment,
   product,
   justification_group_assignment, 
justification_assignment,
   product_relationship,
   justification_support_assignment,
   verification,
   verification_evidence);
END_TYPE;

TYPE ds_pmri_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(product_definition_formation_relationship);
END_TYPE;

TYPE ds_pmri_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(general_property);
END_TYPE;

TYPE ds_ap233_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(representation,
	product_definition_relationship);
END_TYPE;

(*TYPE ds_pmri_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(applied_document_reference, applied_document_usage_constraint_assignment,
	applied_organization_assignment, applied_person_and_organization_assignment,
	product_definition,
	organizational_project);
END_TYPE;*)

(*TYPE ds_os_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(address,
	person,
	person_and_organization);
END_TYPE;*)

(*TYPE ds_ss_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(applied_action_assignment);
END_TYPE;*)

(*TYPE ds_ap233_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(executed_action,
	action_relationship,
	analysis_assignment,
	general_property,
	property_definition_representation,
	information_usage_right,
	product,
	product_category,
	product_definition_formation,
	product_definition_formation_relationship,
	property_definition_representation,
	representation,
	representation_context,
	representation_item,
	requirement_source,
	security_classification,
	verification,
	verification_evidence,
	verification_relationship);
END_TYPE;*)


ENTITY ds_characterizable_executed_action
  SUBTYPE OF (executed_action, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_action_relationship
  SUBTYPE OF (action_relationship, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_address
  SUBTYPE OF (address, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_analysis_assignment
  SUBTYPE OF (analysis_assignment, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_applied_action_assignment
  SUBTYPE OF (applied_action_assignment,  characterized_object);
END_ENTITY;


ENTITY ds_characterizable_applied_document_reference
  SUBTYPE OF ( applied_document_reference,  characterized_object);
END_ENTITY;


ENTITY ds_characterizable_applied_document_usage_constraint_assignment
  SUBTYPE OF (applied_document_usage_constraint_assignment, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_applied_organization_assignment
  SUBTYPE OF ( applied_organization_assignment,  characterized_object);
END_ENTITY;


ENTITY ds_characterizable_applied_person_and_organization_assignment
  SUBTYPE OF (applied_person_and_organization_assignment, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_general_property
  SUBTYPE OF (general_property, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_information_usage_right
  SUBTYPE OF (information_usage_right, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_organizational_project
  SUBTYPE OF (organizational_project,  characterized_object);
END_ENTITY;


ENTITY ds_characterizable_person
  SUBTYPE OF (person, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_person_and_organization
  SUBTYPE OF (person_and_organization, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_product
  SUBTYPE OF (product, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_product_category
  SUBTYPE OF (product_category, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_product_definition
  SUBTYPE OF (product_definition, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_product_definition_formation
  SUBTYPE OF (product_definition_formation, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_product_definition_formation_relationship
  SUBTYPE OF (product_definition_formation_relationship, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_property_definition_representation
  SUBTYPE OF (property_definition_representation,  characterized_object);
END_ENTITY;


ENTITY ds_characterizable_representation
  SUBTYPE OF (representation, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_representation_context
  SUBTYPE OF (representation_context, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_representation_item
  SUBTYPE OF (representation_item, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_requirement_source
  SUBTYPE OF (requirement_source, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_security_classification
  SUBTYPE OF (security_classification, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_verification
  SUBTYPE OF (verification, characterized_object);
END_ENTITY;


ENTITY ds_characterizable_verification_evidence
  SUBTYPE OF (verification_evidence, characterized_object);
END_ENTITY;


TYPE ds_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
  (action_method,
   verification);
END_TYPE;

TYPE ds_pmri_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
	(product_definition_relationship);
END_TYPE;

TYPE ds_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
  (action_method,
   Verification
   );
END_TYPE;

TYPE ds_pmri_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
	(product_definition_relationship);
END_TYPE;

TYPE ds_ap233_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
	(applied_approval_assignment,
	approval_person_organization,
	applied_certification_assignment,
	applied_contract_assignment,
	applied_organization_assignment, applied_person_and_organization_assignment,
	applied_organizational_project_assignment);
END_TYPE;

TYPE ds_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
  (executed_action,
   action_method,
   applied_action_assignment,
   verification,
   verification_evidence);
END_TYPE;

TYPE ds_pmri_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(product_definition_formation,
	product_definition,
	organizational_project_relationship);
END_TYPE;

TYPE ds_ap233_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(property_definition,
	product);
END_TYPE;

TYPE ds_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
  (executed_action,
   action_method,
   action_relationship,
   applied_action_assignment,
   product,
   justification_group_assignment, 
justification_assignment,
   product_relationship,
   justification_support_assignment,
   verification,
   verification_evidence);
END_TYPE;

TYPE ds_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
  (executed_action,
   action_method,
   action_relationship,
   applied_action_assignment,
   product,
   justification_group_assignment, 
justification_assignment,
   product_relationship,
   justification_support_assignment,
   verification,
   verification_evidence);
END_TYPE;

TYPE ds_verification_evidence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON verification_evidence_item WITH
  (action_method,
   analysis_version,
   applied_action_assignment,
   property_definition,
   applied_certification_assignment,
   applied_classification_assignment,
   applied_security_classification_assignment);
END_TYPE;

TYPE ds_ap233_verification_evidence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON verification_evidence_item WITH
	(action_actual,
	action_relationship,
	action_status,
	analysis_assignment,
	applied_usage_right,
	applied_approval_assignment,
	property_definition,
	applied_contract_assignment,
	date_assignment, date_and_time_assignment,
	applied_effectivity_assignment,
	justification_group_assignment, 
justification_assignment,
	product_relationship,
	justification_support_assignment,
	applied_organization_assignment, applied_person_and_organization_assignment,
	person,
	person_and_organization,
	product,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	applied_organizational_project_assignment,
	representation,
	representation_context,
	representation_item,
	product_definition_context,
	product_definition_relationship);
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\description_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.5 2007/07/05 07:33:58 dmprice Exp $
   ISO TC184/SC4/WG12 N4563 - ISO/CD-TS 10303-1473 Description assignment - EXPRESS MIM
*) 


SCHEMA Description_assignment_mim; 

REFERENCE FROM	 systems_engineering_representation_schema  -- ISO 10303-61
	( description_text_assignment );
	 
	TYPE description_item = SELECT EXTENSIBLE GENERIC_ENTITY;
	END_TYPE;	
	
	ENTITY applied_description_text_assignment;
		SUBTYPE OF ( description_text_assignment );
		items : SET[1:?] OF description_item;
	END_ENTITY;
	 

END_SCHEMA;  -- Description_assignment_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\document_and_version_identification_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.12 2004/10/21 16:48:54 darla Exp $
 ISO TC184/SC4/WG12 N1187 - ISO/TS 10303-1121 Document and version identification - EXPRESS MIM
*)

SCHEMA Document_and_version_identification_mim;

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

END_SCHEMA;




(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\document_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.15 2004/10/28 18:49:44 darla Exp $
 ISO TC184/SC4/WG12 N2959 - ISO/TS 10303-1122 Document assignment - EXPRESS MIM
*)



SCHEMA Document_assignment_mim;

USE FROM Document_and_version_identification_mim;    -- ISO/TS 10303-1121

USE FROM Document_definition_mim;    -- ISO/TS 10303-1123

USE FROM document_schema   -- ISO 10303-41
  (document_product_association); 

USE FROM File_identification_mim;    -- ISO/TS 10303-1127

USE FROM management_resources_schema   -- ISO 10303-41
  (document_reference,
   document_usage_constraint_assignment); 


TYPE document_reference_item = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY applied_document_reference
  SUBTYPE OF (document_reference);
  items : SET[1:?] OF document_reference_item;
END_ENTITY;

ENTITY applied_document_usage_constraint_assignment
  SUBTYPE OF (document_usage_constraint_assignment);
  items : SET[1:?] OF document_reference_item;
END_ENTITY;

ENTITY document_product_equivalence
  SUBTYPE OF (document_product_association);
WHERE
  WR1: SELF\document_product_association.name = 'equivalence';
  WR2: NOT('DOCUMENT_ASSIGNMENT_MIM.PRODUCT' IN TYPEOF(SELF\document_product_association.related_product)) OR ((SELF\document_product_association.relating_document.kind. product_data_type = 'configuration controlled document') AND (SIZEOF( QUERY( prpc <* USEDIN(SELF\document_product_association.related_product,'PRODUCT_DEFINITION_SCHEMA.' + 'PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS') | prpc.name = 'document' )) = 1));
  WR3: NOT('DOCUMENT_ASSIGNMENT_MIM.PRODUCT_DEFINITION_FORMATION' IN TYPEOF(SELF.related_product)) OR ((SELF\document_product_association.relating_document.kind.product_data_type = 'configuration controlled document version') AND (SIZEOF( QUERY( prpc <* USEDIN(SELF.related_product\product_definition_formation.of_product, 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS') | prpc.name = 'document')) = 1));
  WR4: NOT('DOCUMENT_ASSIGNMENT_MIM.PRODUCT_DEFINITION' IN TYPEOF(SELF.related_product)) OR ((SELF\document_product_association.relating_document.kind.product_data_type = 'configuration controlled document definition') AND (SIZEOF( QUERY( prpc <* USEDIN(SELF\document_product_association.related_product\product_definition.formation.of_product, 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS') | prpc.name = 'document' )) = 1));
END_ENTITY;

END_SCHEMA;  -- Document_assignment_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\document_definition_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.19 2004/10/28 18:51:31 darla Exp $
 ISO TC184/SC4/WG12 N2961 - ISO/TS 10303-1123 Document definition - EXPRESS MIM
*) 


SCHEMA Document_definition_mim;

USE FROM Document_and_version_identification_mim;    -- ISO/TS 10303-1121

USE FROM External_item_identification_assignment_mim;    -- ISO/TS 10303-1128

USE FROM File_identification_mim;    -- ISO/TS 10303-1127

USE FROM product_definition_schema   -- ISO 10303-41
  (product_definition,
   product_definition_with_associated_documents); 

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019


TYPE document_location_select = SELECT BASED_ON external_identification_item WITH 
   (product_definition);
END_TYPE; 

END_SCHEMA;  -- Document_definition_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\document_management_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.10 2004/11/19 21:37:35 robbod Exp $
 ISO TC184/SC4/WG12 N3038 - ISO/TS 10303-1290 Document management - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2331
*) 


SCHEMA Document_management_mim;

USE FROM Alias_identification_mim;    -- ISO/TS 10303-1025

USE FROM basic_attribute_schema   -- ISO 10303-41
  (object_role); 

USE FROM Contract_mim;    -- ISO/TS 10303-1062

USE FROM Document_and_version_identification_mim;    -- ISO/TS 10303-1121

USE FROM Document_assignment_mim;    -- ISO/TS 10303-1122

USE FROM Document_definition_mim;    -- ISO/TS 10303-1123

USE FROM Document_properties_mim;    -- ISO/TS 10303-1126

USE FROM document_schema   -- ISO 10303-41
  (document_relationship); 

USE FROM Document_structure_mim;    -- ISO/TS 10303-1124

USE FROM External_item_identification_assignment_mim;    -- ISO/TS 10303-1128

USE FROM external_reference_schema   -- ISO 10303-41
  (external_source); 

USE FROM File_identification_mim;    -- ISO/TS 10303-1127

USE FROM Management_resource_information_mim;    -- ISO/TS 10303-1288

USE FROM management_resources_schema   -- ISO 10303-41
  (document_usage_role); 

USE FROM Product_categorization_mim;    -- ISO/TS 10303-1016

USE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_category,
   product_definition,
   product_definition_formation,
   product_definition_relationship); 

USE FROM Security_classification_mim;    -- ISO/TS 10303-1015


TYPE dm_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH 
   (document_file, 
    product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE dm_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_approval_item WITH 
   (product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE dm_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_attribute_language_item WITH 
   (applied_document_reference, 
    applied_document_usage_constraint_assignment, 
    applied_external_identification_assignment, 
    document_relationship, 
    document_usage_role, 
    external_source, 
    object_role, 
    product, 
    product_category, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE dm_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH 
   (product_definition_formation);
END_TYPE; 

TYPE dm_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_date_and_time_item WITH 
   (document_file, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE dm_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_date_item WITH 
   (document_file, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE dm_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_identification_item WITH 
   (document_file, 
    product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE dm_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_multi_language_attribute_item WITH 
   (applied_document_reference, 
    applied_document_usage_constraint_assignment, 
    applied_external_identification_assignment, 
    document_relationship, 
    document_usage_role, 
    external_source, 
    object_role, 
    product, 
    product_category, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE dm_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_organization_item WITH 
   (document_file, 
    product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE dm_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_person_and_organization_item WITH 
   (document_file, 
    product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE dm_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH 
   (document_file, 
    product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

END_SCHEMA;  -- Document_management_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\document_properties_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2004/10/21 17:23:23 darla Exp $
 ISO TC184/SC4/WG12 N1202 - ISO/TS 10303-1126 Document properties - EXPRESS MIM
*)



SCHEMA Document_properties_mim;

USE FROM Document_definition_mim;    -- ISO/TS 10303-1123

USE FROM File_identification_mim;

USE FROM Foundation_representation_mim;

USE FROM Measure_representation_mim;    -- ISO/TS 10303-1118

USE FROM Property_assignment_mim;

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_product_definition); 

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\document_structure_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.9 2004/10/21 17:26:29 darla Exp $
 ISO TC184/SC4/WG12 N1196 - ISO/TS 10303-1124 Document structure - EXPRESS MIM
*)



SCHEMA Document_structure_mim;
USE FROM Document_definition_mim; -- ISO/CD TS 10303-1123
USE FROM File_identification_mim; -- ISO/CD TS 10303-1127
USE FROM document_schema (document_relationship); -- ISO 10303-41
USE FROM product_definition_schema -- ISO 10303-41
	(product_definition_formation_relationship,
         product_definition_relationship);
END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\effectivity_application_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.8 2004/11/15 21:22:47 thendrix Exp $
ISO TC184/SC4/WG12 N3224 - ISO/TS 10303-1059 Effectivity application - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N1175
*) 


SCHEMA Effectivity_application_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (object_role,
   role_association,
   role_select); 

USE FROM Effectivity_mim;    -- ISO/TS 10303-1057

USE FROM management_resources_schema   -- ISO 10303-41
  (effectivity_assignment); 


TYPE effectivity_item = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY applied_effectivity_assignment
  SUBTYPE OF (effectivity_assignment);
  items : SET[1:?] OF effectivity_item;
END_ENTITY;

END_SCHEMA;  -- Effectivity_application_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\effectivity_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.7 2004/10/21 17:46:30 darla Exp $
 ISO TC184/SC4/WG12 N1169 - ISO/TS 10303-1057 Effectivity - EXPRESS MIM
*)
  
SCHEMA Effectivity_mim;

USE FROM Time_interval_mim; -- ISO 10303-1065
USE FROM Value_with_unit_mim ; -- ISO 10303-1054

USE FROM effectivity_schema -- ISO 10303-41
  (	dated_effectivity,
	effectivity,
   	effectivity_relationship,
	lot_effectivity,
   	serial_numbered_effectivity,
      time_interval_based_effectivity);

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\elemental_geometric_shape_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.17 2006/03/24 18:43:16 thendrix Exp $
 ISO TC184/SC4/WG12 N4249 - ISO/TS 10303-1004 Elemental geometric shape - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2103
*)

   
SCHEMA Elemental_geometric_shape_mim;
  
USE FROM Foundation_representation_mim;

USE FROM Identification_assignment_mim; -- ISO 10303-1021

USE FROM Value_with_unit_mim; -- ISO 10303-1054

USE FROM qualified_measure_schema
	(measure_representation_item); -- ISO 10303-45

USE FROM geometry_schema -- ISO 10303-42
      (cartesian_point,
       direction,
       axis2_placement_2d,
       axis2_placement_3d,
       geometric_representation_context,
       geometric_representation_item,
       cartesian_transformation_operator_2d,
       cartesian_transformation_operator_3d);

USE FROM product_property_representation_schema -- ISO 10303-41
      (shape_representation,
  	 shape_representation_relationship);

USE FROM representation_schema -- ISO 10303-43
      (item_defined_transformation,
	value_representation_item);

TYPE representation_identification_item = SELECT BASED_ON identification_item WITH 
  (shape_representation);
END_TYPE; 
 
TYPE representation_version_item = SELECT BASED_ON versionable_item WITH 
  (shape_representation);
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\event_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.12 2004/10/21 17:51:16 darla Exp $
 ISO TC184/SC4/WG12 N2115 - ISO/TS 10303-1064 Event - EXPRESS MIM
*)

SCHEMA Event_mim; 

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM Date_time_mim;    -- ISO/TS 10303-1010

USE FROM date_time_schema   -- ISO 10303-41
  (event_occurrence,
   event_occurrence_relationship,
   relative_event_occurrence); 

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054


TYPE event_occurrence_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH 
   (event_occurrence);
END_TYPE; 

TYPE event_occurrence_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH 
   (event_occurrence);
END_TYPE; 

END_SCHEMA;  -- Event_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\event_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.4 2004/10/21 17:52:41 darla Exp $
 ISO TC184/SC4/WG12 N2117 - ISO/TS 10303-1364 Event assignment - EXPRESS MIM
*)



SCHEMA Event_assignment_mim; 

USE FROM Event_mim;    -- ISO/TS 10303-1064

USE FROM management_resources_schema   -- ISO 10303-41
  (event_occurrence_assignment); 


TYPE event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_event_occurrence_assignment
  SUBTYPE OF (event_occurrence_assignment);
  items : SET[1:?] OF event_occurrence_item;
END_ENTITY;

END_SCHEMA;  -- Event_assignment_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\experience_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.12 2004/11/19 21:37:35 robbod Exp $
 ISO TC184/SC4/WG12 N3044 - ISO/TS 10303-1243 Experience - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2382
*) 


SCHEMA Experience_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_method,
   action_resource,
   executed_action); 

USE FROM Activity_as_realized_mim;    -- ISO/TS 10303-1259

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM Activity_mim;    -- ISO/TS 10303-1047

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM experience_schema   -- ISO 10303-41
  (experience,
   experience_type,
   experience_type_relationship); 

USE FROM management_resources_schema   -- ISO 10303-41
  (experience_assignment,
   experience_type_assignment); 

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011

USE FROM person_organization_schema   -- ISO 10303-41
  (organization,
   person,
   person_and_organization); 

USE FROM process_property_schema   -- ISO 10303-49
  (action_resource_requirement); 

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

USE FROM Required_resource_mim;    -- ISO/TS 10303-1267

USE FROM Resource_as_realized_mim;    -- ISO/TS 10303-1269


TYPE experience_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH 
   (applied_experience_assignment, 
    experience);
END_TYPE; 

TYPE experience_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH 
   (applied_experience_assignment, 
    experience);
END_TYPE; 

TYPE experience_item = EXTENSIBLE GENERIC_ENTITY SELECT
   (action_actual, 
    action_resource, 
    experience_type, 
    experience_type_classification_item);
END_TYPE; 

TYPE experience_type_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (experience_type);
END_TYPE; 

TYPE experience_type_item = EXTENSIBLE GENERIC_ENTITY SELECT
   (action_method, 
    action_resource_requirement, 
    executed_action, 
    organization, 
    person, 
    person_and_organization);
END_TYPE; 

ENTITY applied_experience_assignment
  SUBTYPE OF (experience_assignment);
  items : SET[1:?] OF experience_item;
END_ENTITY;

ENTITY applied_experience_type_assignment
  SUBTYPE OF (experience_type_assignment);
  items : SET[1:?] OF experience_type_item;
END_ENTITY;

ENTITY characterized_experience
  SUBTYPE OF (characterized_object, experience);
END_ENTITY;

END_SCHEMA;  -- Experience_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\expression_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.18 2005/07/04 15:18:43 rocc Exp $
 ISO TC184/SC4/WG12 N2556 - ISO/TS 10303-1342 Expression - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1797
*)

SCHEMA Expression_mim;

USE FROM Generic_expression_mim;

USE FROM ISO13584_expressions_schema(
	and_expression,
	binary_boolean_expression,
	binary_function_call,
	binary_numeric_expression,
	boolean_defined_function,
	boolean_expression,
	boolean_literal,
	boolean_variable,
	comparison_equal,
	comparison_expression,
	comparison_greater,
	comparison_greater_equal,
	comparison_less,
	comparison_less_equal,
	comparison_not_equal,
	concat_expression,
	defined_function,
	div_expression,
	equals_expression,
	expression,
	format_function,
	index_expression,
	int_literal,
	int_numeric_variable,
	interval_expression,
	like_expression,
	literal_number,
	minus_expression,
	mod_expression,
	mult_expression,
	multiple_arity_boolean_expression,
	multiple_arity_function_call,
	multiple_arity_numeric_expression,
	not_expression,
	numeric_expression,
	numeric_variable,
	or_expression,
	plus_expression,
	power_expression,
	real_literal,
	real_numeric_variable,
	simple_boolean_expression,
	simple_numeric_expression,
	simple_string_expression,
	slash_expression,
	SQL_mappable_defined_function,
	string_defined_function,
	string_expression,
	string_literal,
	string_variable,
	substring_expression,
	unary_boolean_expression,
	unary_numeric_expression,
	xor_expression
	);
	
END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\expression_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.3 2007/03/21 01:10:26 abhpf Exp $
  ISO TC184/SC4/WG12 N4569 - ISO/WD 10303-1491 Expression assignment - EXPRESS MIM
*) 


SCHEMA Expression_assignment_mim;

USE FROM Expression_mim;    -- ISO/TS 10303-1342

USE FROM expression_extensions_schema   -- ISO 10303-57
  (assignment_target_select,
   expression_assignment); 


END_SCHEMA;  -- Expression_assignment_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\extended_basic_geometry_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.7 2006/11/01 20:36:35 liutkus Exp $
   ISO TC184/SC4/WG12 N3949 - ISO/TS 10303-1667 Extended basic geometry - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3673
*)


SCHEMA Extended_basic_geometry_mim;
	USE FROM Basic_geometry_mim;	-- ISO/TS 10303-1652
	
	USE FROM Representation_schema(
		mapped_item,
		representation_item_relationship,
		representation_map,
		representation_relationship_with_transformation,
		transformation);
		
	USE FROM Geometry_schema(
		vector);	

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set);

  ENTITY definitional_representation_relationship
    SUBTYPE OF (representation_relationship);
   WHERE
    WR1: acyclic_representation_relationship(SELF,
       [SELF\representation_relationship.rep_2],
       'REPRESENTATION_SCHEMA.'+
       'REPRESENTATION');
  END_ENTITY;  
	
ENTITY geometric_model_element_relationship
  SUBTYPE OF (geometric_representation_item, representation_item_relationship);
UNIQUE
  UR1: SELF\representation_item_relationship.relating_representation_item, 
       SELF\representation_item_relationship.related_representation_item;
WHERE
  WR1: SELF\representation_item_relationship.relating_representation_item :<>: 
       SELF\representation_item_relationship.related_representation_item;
END_ENTITY; 

FUNCTION acyclic_representation_relationship
 (relation : representation_relationship; relatives : SET[1:?] OF representation; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF representation_relationship;
    END_LOCAL;

    IF relation.rep_1 IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(r <* bag_to_set(USEDIN(relation.rep_1, 'REPRESENTATION_SCHEMA.' + 'REPRESENTATION_RELATIONSHIP.' + 'REP_2')) | specific_relation IN TYPEOF(r));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_representation_relationship(x[i], relatives + relation.rep_1, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 
	
	
END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\extended_measure_representation_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.26 2006/05/19 22:26:16 thomasrthurman Exp $
ISO TC184/SC4/WG12 N4270 - ISO/TS 10303-1106 Extended measure representation - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N3232
*) 


SCHEMA Extended_measure_representation_mim;

USE FROM Measure_representation_mim;    -- ISO/TS 10303-1118

USE FROM qualified_measure_schema   -- ISO 10303-45
  (measure_representation_item,
   precision_qualifier,
   qualified_representation_item,
   qualitative_uncertainty, -- GL added, needed for mapping
   standard_uncertainty,
   type_qualifier,
   uncertainty_qualifier); 

USE FROM representation_schema   -- ISO 10303-43
  (compound_item_definition,
   compound_representation_item,
   list_representation_item,
   set_representation_item); 

USE FROM support_resource_schema;    -- ISO 10303-41

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (type_check_function); 


ENTITY value_range
  SUBTYPE OF (compound_representation_item);
WHERE
  WR1: ( 'REPRESENTATION_SCHEMA.'+ 'SET_REPRESENTATION_ITEM' IN TYPEOF ( item_element ) ) AND value_range_wr1 ( item_element );
  WR2: value_range_wr2 ( item_element );
  WR3: value_range_wr3 ( item_element );
END_ENTITY;

RULE subtype_exclusiveness_representation_item FOR 
(representation_item);
WHERE
  WR1: SIZEOF(QUERY (cri <* representation_item | NOT (type_check_function(cri,['QUALIFIED_MEASURE_SCHEMA.MEASURE_REPRESENTATION_ITEM','REPRESENTATION_SCHEMA.VALUE_REPRESENTATION_ITEM','REPRESENTATION_SCHEMA.COMPOUND_REPRESENTATION_ITEM'] , 3)))) = 0;
END_RULE; 

FUNCTION value_range_wr1
 (agg : compound_item_definition) : BOOLEAN; 
BEGIN
IF (SIZEOF(agg) = 2) AND ((SIZEOF(QUERY (i1 <* agg | (
'QUALIFIED_MEASURE_SCHEMA.MEASURE_REPRESENTATION_ITEM' IN TYPEOF
(i1)))) = 2) OR
(SIZEOF(QUERY (i2 <* agg | (
'REPRESENTATION_SCHEMA.VALUE_REPRESENTATION_ITEM' IN TYPEOF
(i2)))) = 2)) THEN
RETURN(TRUE);
ELSE
RETURN(FALSE);
END_IF;
END;
      END_FUNCTION; 

FUNCTION value_range_wr2
 (agg : compound_item_definition) : BOOLEAN; 
BEGIN
IF (SIZEOF(QUERY (i <* agg | (i.name = 'upper limit'))) = 1)
AND (SIZEOF(QUERY (i <* agg | (i.name = 'lower limit'))) = 1)
THEN
RETURN(TRUE);
ELSE
RETURN(FALSE);
END_IF;
END;
      END_FUNCTION; 

FUNCTION value_range_wr3
 (agg : compound_item_definition) : BOOLEAN; 
BEGIN
IF (SIZEOF(QUERY(i1 <* agg |
('QUALIFIED_MEASURE_SCHEMA.MEASURE_REPRESENTATION_ITEM' IN TYPEOF (i1)) AND
(SIZEOF (QUERY (i2 <* agg |
('QUALIFIED_MEASURE_SCHEMA.MEASURE_REPRESENTATION_ITEM' IN TYPEOF (i2)) AND
(i1 :<>: i2) AND (i1\measure_with_unit.unit_component :=: i2\measure_with_unit.unit_component))) = 1))) = 2)
THEN
RETURN (TRUE);
ELSE
RETURN (FALSE);
END_IF;
END;
      END_FUNCTION; 

END_SCHEMA;  -- Extended_measure_representation_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\extended_task_element_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.6 2007/07/04 06:51:47 philsp Exp $
  ISO TC184/SC4/WG12 N4572 - ISO/WD 10303-1479 Extended_task_element - EXPRESS MIM
 *)

(******************************************************************************)
(*                                                                            *)
(*         This file was produced by Eurostep GraphicalEXPRESS V1.4.0         *)
(*                                                                            *)
(******************************************************************************)

(* Original model: ap233 wd3mim.vsd*)
(* Title: *)
(* Author: Phil Spiby*)
(* Comments: *)

SCHEMA Extended_task_element_mim;

USE FROM Task_element_mim;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\external_class_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.14 2004/11/19 21:37:35 robbod Exp $
 ISO TC184/SC4/WG12 N3050 - ISO/TS 10303-1275 External class - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2265
*) 


SCHEMA External_class_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   description_attribute_select); 

USE FROM Class_mim;    -- ISO/TS 10303-1070

USE FROM classification_schema   -- ISO 10303-54
  (class); 

USE FROM external_reference_schema   -- ISO 10303-41
  (external_source,
   externally_defined_item); 

USE FROM Name_assignment_mim;    -- ISO/TS 10303-1340


TYPE external_class_name_item = SELECT BASED_ON name_item WITH 
   (external_class_library);
END_TYPE; 

ENTITY external_class_library
  SUBTYPE OF (external_source);
END_ENTITY;

ENTITY externally_defined_class
  SUBTYPE OF (class, externally_defined_item);
END_ENTITY;

END_SCHEMA;  -- External_class_mim




(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\external_functional_model_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.6 2007/07/05 07:54:07 philsp Exp $
 ISO TC184/SC4/WG12 N4578 - ISO/WD 10303-1478 External_functional_model - EXPRESS MIM
*)
SCHEMA External_functional_model_mim;

USE FROM File_identification_mim;    -- ISO/TS 10303-1127

USE FROM Function_based_behaviour_representation_mim;    -- ISO/CD-TS 10303-1492

USE FROM product_property_definition_schema   -- ISO 10303-41
  (property_definition); 

USE FROM product_property_representation_schema   -- ISO 10303-41
  (property_definition_representation); 


END_SCHEMA;  -- External_functional_model_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\external_item_identification_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.12 2004/10/21 17:58:55 darla Exp $
 ISO TC184/SC4/WG12 N1208 - ISO/TS 10303-1128 External item identification assignment - EXPRESS MIM
*)


SCHEMA External_item_identification_assignment_mim;

USE FROM management_resources_schema   	-- ISO 10303-41
  (external_identification_assignment); 

USE FROM support_resource_schema		-- ISO 10303-41
  (identifier);

TYPE external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE;

ENTITY applied_external_identification_assignment
SUBTYPE OF (external_identification_assignment);
  items : SET [1 : ?] OF external_identification_item;
END_ENTITY;

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\external_model_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.3 2004/10/21 18:01:28 darla Exp $
 ISO TC184/SC4/WG12 N1229 - ISO/TS 10303-1033 External model - EXPRESS MIM
*)

SCHEMA External_model_mim;
  
USE FROM Elemental_geometric_shape_mim; -- ISO 10303-1004
  
USE FROM File_identification_mim;

USE FROM product_property_definition_schema
  (property_definition);

USE FROM product_property_representation_schema
  (property_definition_representation);

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\external_state_based_behaviour_model_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.3 2007/03/21 01:13:21 abhpf Exp $
   ISO TC184/SC4/WG12 N4581 - ISO/WD 10303-1468 External state based behaviour model - EXPRESS MIM
*) 


SCHEMA External_state_based_behaviour_model_mim;

USE FROM Document_assignment_mim;    -- ISO/TS 10303-1122

USE FROM File_identification_mim;    -- ISO/TS 10303-1127

USE FROM State_based_behaviour_representation_mim;    -- ISO/WD 10303-1471


TYPE external_sbb_model_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
   (external_state_based_behaviour_model);
END_TYPE; 

ENTITY external_state_based_behaviour_model
  SUBTYPE OF (state_based_behaviour_model);
END_ENTITY;

END_SCHEMA;  -- External_state_based_behaviour_model_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\file_identification_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.15 2004/10/21 18:07:23 darla Exp $
 ISO TC184/SC4/WG12 N1205 - ISO/TS 10303-1127 File identification - EXPRESS MIM
*)

SCHEMA File_identification_mim;

USE FROM Identification_assignment_mim;
 
USE FROM External_item_identification_assignment_mim;

USE FROM document_schema   -- ISO 10303-41
  (document,
   document_representation_type); 

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 

TYPE file_identification_item = SELECT BASED_ON identification_item WITH (document_file);
END_TYPE; 

TYPE file_version_item = SELECT BASED_ON versionable_item WITH
  (document_file);
END_TYPE;

TYPE file_location_select = SELECT BASED_ON external_identification_item WITH (document_file);
END_TYPE;

ENTITY document_file
SUBTYPE OF (document, characterized_object);
WHERE
  WR1: SELF\characterized_object.name = '';
  WR2: NOT EXISTS(SELF\characterized_object.description);
  WR3: SIZEOF( QUERY( drt <* SELF\document.representation_types |
               drt.name IN ['digital','physical'])) = 1;
END_ENTITY;

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\foundation_state_definition_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.6 2007/07/05 07:41:52 dmprice Exp $
  ISO TC184/SC4/WG12 N4584 - ISO/CD-TS 10303-1469 Foundation state definition - EXPRESS MIM
*) 

SCHEMA Foundation_state_definition_mim;

USE FROM state_type_schema   -- ISO 10303-56
  (state_type,
   state_type_assignment,
   state_type_relationship); 


TYPE state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_state_type_assignment
  SUBTYPE OF (state_type_assignment);
  items : SET[1:?] OF state_type_of_item;
END_ENTITY;

END_SCHEMA;  -- Foundation_state_definition_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\foundation_representation_mim.exp
   ------------------------------------------------------------
*)

(* 
$Id: mim.exp,v 1.17 2006/03/24 18:31:03 thendrix Exp $ 
ISO TC184/SC4/WG12 N4349 - ISO/TS 10303-1006 Foundation representation - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N3223
*) 


SCHEMA Foundation_representation_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   description_attribute_select,
   id_attribute,
   id_attribute_select); 

USE FROM measure_schema   -- ISO 10303-41
  (global_unit_assigned_context); 

USE FROM qualified_measure_schema   -- ISO 10303-45
  (descriptive_representation_item); 

USE FROM representation_schema   -- ISO 10303-43
  (global_uncertainty_assigned_context,
   representation,
   representation_context,
   representation_item,
   representation_relationship,
   uncertainty_measure_with_unit); 

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054


END_SCHEMA;  -- Foundation_representation_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\function_based_behaviour_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.7 2007/07/04 05:23:28 abf Exp $ ISO TC184/SC4/WG12
 N - ISO/WD 10303-1453 Function based behaviour - EXPRESS MIM
*)
SCHEMA Function_based_behaviour_mim;

USE FROM Behaviour_description_assignment_mim;

USE FROM Expression_assignment_mim;

USE FROM External_functional_model_mim;

USE FROM General_model_parameter_mim;

USE FROM Required_resource_mim;

USE FROM Resource_property_assignment_mim;

USE FROM Textual_expression_representation_mim;

USE FROM Function_based_behaviour_representation_mim;

USE FROM Condition_mim  
  (condition); 
  
USE FROM External_item_identification_assignment_mim  
  (applied_external_identification_assignment); 

USE FROM File_identification_mim  
  (document_file); 
  
USE FROM Task_element_mim  
  (task_element,
  task_element_relationship,
  task_step); 
  
TYPE fbb_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
  (action_method,
   product_definition_formation_relationship,
   action_resource_requirement,
   action_resource,
   resource_property);
END_TYPE;

TYPE fbb_pmri_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(document_file);
END_TYPE;

TYPE fbb_ss_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(property_definition);
END_TYPE;

TYPE fbb_ap233_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(group,
	condition,
	applied_action_method_assignment,
	task_io_hierarchy
	);
END_TYPE;

(*TYPE fbb_ss_characterized_resource_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_resource_select WITH
	(action_resource_requirement,
	action_resource,
	action_method,
	action_resource_relationship);
END_TYPE;*)

TYPE fbb_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
  (action_method,
   action_method_relationship,
   applied_action_method_assignment,
   class,
   context_dependent_unit,
   document_file,
   applied_identification_assignment,
   general_property,
   general_property_relationship,
   product,
   product_category,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition,
   representation,
   representation_context,
   representation_item,
   action_resource_requirement,
   action_resource_requirement_relationship,
   action_resource,
   action_resource_relationship,
   resource_property,
   resource_property_representation,
   uncertainty_measure_with_unit,
   named_unit, derived_unit,
   measure_with_unit,
   product_definition_context);
END_TYPE;

TYPE fbb_pmri_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(conversion_based_unit,
	derived_unit,
	external_class_library,
	applied_external_identification_assignment,
	product_definition_formation_relationship);
END_TYPE;

TYPE fbb_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
  (action_method_relationship,
   applied_action_method_assignment,
   action_resource_requirement,
   action_method,
   action_resource_requirement_relationship,
   action_resource,
   action_resource_relationship,
   resource_property,
   task_element_relationship);
END_TYPE;

TYPE fbb_ss_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(property_definition,
	resource_property);
END_TYPE;

TYPE fbb2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
  (parameter_value_select);
END_TYPE;

TYPE fbb3_pmri_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(applied_classification_assignment,
	applied_identification_assignment,
	property_definition_representation,
	product,
	product_related_product_category,
	product_definition_formation,
	product_definition,
	representation);
END_TYPE;

TYPE fbb3_ss_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_method,
	property_definition,
	property_definition_representation,
	action_resource_requirement,
	resource_property,
	resource_property_representation);
END_TYPE;

TYPE fbb_assignment_target_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON assignment_target_select WITH
  (condition);
END_TYPE;

TYPE fbb_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
  (applied_action_method_assignment,
   condition,
   general_property,
   product,
   product_definition_formation,
   product_definition,
   action_resource_requirement,
   action_resource,
   task_step);
END_TYPE;

TYPE fbb_pmri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(document_file,
	external_class_library,
	applied_external_identification_assignment,
	general_property,
	general_property_relationship,
	product_category,
	representation);
END_TYPE;

TYPE fbb_ss_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(action_method,
	action_method_relationship,
	action_resource_requirement_relationship,
	resource_property,
	task_element,
	task_element_relationship);
END_TYPE;

TYPE fbb_ap233_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(applied_action_method_assignment);
END_TYPE;

(*TYPE fbb_sbb_property_assignment_select = SELECT BASED_ON property_assignment_select WITH
  (Activity_method,
   Behaviour_view_definition,
   Product_view_definition);
END_TYPE;

is captured by:*)

ENTITY characterized_action_method
  SUBTYPE OF (action_method, characterized_object);
END_ENTITY;

(*TYPE fbb_sbb_ap233_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(property_definition,
	applied_action_method_assignment,
	generic_expression,
	general_property,
	general_property_relationship,
	product,
	product_category,
	product_definition_formation,
	product_definition_formation_relationship,
	property_definition_representation,
	representation,
	representation_context,
	representation_item);
END_TYPE;

is captured by:*)


ENTITY fbb_characterized_property_definition
  SUBTYPE OF (characterized_object, property_definition);
END_ENTITY;

ENTITY fbb_characterized_applied_action_method_assignment
  SUBTYPE OF (characterized_object, applied_action_method_assignment);
END_ENTITY;

ENTITY fbb_characterized_generic_expression	
  SUBTYPE OF (characterized_object, generic_expression);
END_ENTITY;

ENTITY fbb_characterized_general_property
  SUBTYPE OF (characterized_object, general_property);
END_ENTITY;

ENTITY fbb_characterized_general_property_relationship
  SUBTYPE OF (characterized_object, general_property_relationship);
END_ENTITY;

ENTITY fbb_characterized_product
  SUBTYPE OF (characterized_object, product);
END_ENTITY;

ENTITY fbb_characterized_product_category
  SUBTYPE OF (characterized_object, product_category);
END_ENTITY;

ENTITY fbb_characterized_product_definition_formation
  SUBTYPE OF (characterized_object, product_definition_formation);
END_ENTITY;

ENTITY fbb_characterized_product_definition_formation_relationship
  SUBTYPE OF (characterized_object, product_definition_formation_relationship);
END_ENTITY;

ENTITY fbb_characterized_property_definition_representation
  SUBTYPE OF (characterized_object, property_definition_representation);
END_ENTITY;

ENTITY fbb_characterized_representation
  SUBTYPE OF (characterized_object, representation);
END_ENTITY;

ENTITY fbb_characterized_representation_context
  SUBTYPE OF (characterized_object, representation_context);
END_ENTITY;

ENTITY fbb_characterized_representation_item
  SUBTYPE OF (characterized_object, representation_item);
END_ENTITY;

TYPE fbb5_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
  (task_step);
END_TYPE;

TYPE fbb4_ss_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_method,
	task_element);
END_TYPE;

TYPE fbb2_ap233_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition_formation,
	product_definition);
END_TYPE;

TYPE fbb7_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
  (product,
   product_definition_formation,
   product_definition);
END_TYPE;

TYPE fbb4_ap233_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_method);
END_TYPE;

TYPE fbb3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
  (product,
   product_definition_formation,
   product_definition);
END_TYPE;

TYPE fbb2_pmri_action_method_items= EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(document_file);
END_TYPE;

TYPE fbb4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
  (product,
   product_definition_formation,
   product_definition);
END_TYPE;

TYPE functional_groupable_item = SELECT BASED_ON groupable_item WITH
  (functional_model);
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\function_based_behaviour_representation_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.4 2007/03/21 01:14:44 abhpf Exp $
   ISO TC184/SC4/WG12 N4587 - ISO/WD 10303-1492 Function_based_behaviour_representation - EXPRESS MIM *)

(******************************************************************************)
(*                                                                            *)
(*         This file was produced by Eurostep GraphicalEXPRESS V1.4.0         *)
(*                                                                            *)
(******************************************************************************)

(* Original model: ap233 wd3mim.vsd*)
(* Title: *)
(* Author: Phil Spiby*)
(* Comments: *)

(*"Function_based_behaviour_representation_mim" UNDER DEVELOPMENT *)
SCHEMA Function_based_behaviour_representation_mim;

USE FROM Extended_task_element_mim;

USE FROM Foundation_representation_mim;

USE FROM systems_engineering_representation_schema
  (functional_model,
   functional_representation_context,
   functional_representation_item);

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\generic_expression_mim.exp
   ------------------------------------------------------------
*)

(* 
 $Id: mim.exp,v 1.20 2005/05/02 11:30:44 rocc Exp $
 ISO TC184/SC4/WG12 N2553 - ISO/TS 10303-1341 Generic expression - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1794
*)

SCHEMA Generic_expression_mim;

USE FROM ISO13584_generic_expressions_schema(
	binary_generic_expression,
	environment,
	generic_expression,
	generic_literal,
	generic_variable,
	multiple_arity_generic_expression,
	simple_generic_expression,
	unary_generic_expression,
	variable_semantics
	);
	
USE FROM ISO13584_expressions_schema(
	variable);

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\general_model_parameter_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.4 2007/07/05 07:38:29 dmprice Exp $
   ISO TC184/SC4/WG12 N4590 - ISO/CD-TS 10303-1472 General model parameter - EXPRESS MIM
*) 


SCHEMA General_model_parameter_mim;

USE FROM Class_mim;    -- ISO/TS 10303-1070

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM External_class_mim;    -- ISO/TS 10303-1275

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM Group_mim;    -- ISO/TS 10303-1113

USE FROM Independent_property_mim;    -- ISO/TS 10303-1036

USE FROM Independent_property_representation_mim;    -- ISO/TS 10303-1038

USE FROM Parameter_value_specification_mim   -- ISO/WD 10303-1470
  (parameter_value_select); 

USE FROM product_property_definition_schema   -- ISO 10303-41
  (general_property,
   general_property_relationship); 

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

USE FROM representation_schema   -- ISO 10303-43
  (representation_item); 


TYPE cgpr_required_class_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (constrained_general_parameter_relationship);
END_TYPE; 

TYPE gmp_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (constrained_general_parameter_relationship, 
    general_model_parameter, 
    parameter_value_representation_item);
END_TYPE; 

TYPE parameter_value_representation_item_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (parameter_value_representation_item);
END_TYPE; 

TYPE parameter_value_select_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (parameter_value_select);
END_TYPE; 

ENTITY constrained_general_parameter_relationship
  SUBTYPE OF (general_property_relationship);
  SELF\general_property_relationship.related_property : general_model_parameter;
  SELF\general_property_relationship.relating_property : general_model_parameter;
END_ENTITY;

ENTITY general_model_parameter
  SUBTYPE OF (general_property);
END_ENTITY;

ENTITY parameter_value_representation_item
  SUBTYPE OF (representation_item);
END_ENTITY;

END_SCHEMA;  -- General_model_parameter_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\group_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.8 2006/03/24 18:45:20 thendrix Exp $
 ISO TC184/SC4/WG12 N4276 - ISO/TS 10303-1113 Group - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N3246
*) 


SCHEMA Group_mim;

USE FROM group_schema   -- ISO 10303-41
  (group,
   group_relationship); 

USE FROM management_resources_schema   -- ISO 10303-41
  (group_assignment); 

USE FROM Basic_attribute_schema(
	id_attribute, 
	id_attribute_select); -- ISO/IS 10303-41

TYPE groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT;
WHERE
  WR1: NOT ('GROUP_MIM.GROUP' IN TYPEOF(SELF));
END_TYPE; 

ENTITY applied_group_assignment
  SUBTYPE OF (group_assignment);
  items : SET[1:?] OF groupable_item;
END_ENTITY;

END_SCHEMA;  -- Group_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\identification_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2004/10/28 16:58:42 darla Exp $
 ISO TC184/SC4/WG12 N2915 - ISO/TS 10303-1021 Identification assignment - EXPRESS MIM
*)

SCHEMA Identification_assignment_mim;

USE FROM management_resources_schema   -- ISO 10303-41
  (identification_assignment,
   identification_role); 


TYPE identification_item = EXTENSIBLE SELECT;
END_TYPE; 

TYPE versionable_item = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY applied_identification_assignment
  SUBTYPE OF (identification_assignment);
  items : SET[1:?] OF identification_item;
END_ENTITY;

END_SCHEMA;  -- Identification_assignment_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\incomplete_data_reference_mechanism_mim.exp
   ------------------------------------------------------------
*)

(******************************************************************************)
(*                                                                            *)
(*         This file was produced by Eurostep GraphicalEXPRESS V1.4.0         *)
(*                                                                            *)
(******************************************************************************)

(* Original model: ap233 wd3mim.vsd*)
(* Title: *)
(* Author: Phil Spiby*)
(* Comments: *)

(*"Incomplete_data_reference_mechanism_mim" 
$Id: mim.exp,v 1.10 2007/03/05 21:53:36 philsp Exp $
ISO TC184/SC4/WG12 N2635 - ISO/TS 10303-1349 Incomplete data reference mechanism - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N2069
*)
SCHEMA Incomplete_data_reference_mechanism_mim;

USE FROM Classification_assignment_mim;

USE FROM Document_definition_mim;

USE FROM File_identification_mim;

USE FROM Part_view_definition_mim;

TYPE idrm_marked_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
  (document_file,
   product_definition);
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\independent_property_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.10 2004/10/22 14:15:40 darla Exp $
 ISO TC184/SC4/WG12 N1238 - ISO/TS 10303-1036 Independent property - EXPRESS MIM
*)
SCHEMA Independent_property_mim;

USE FROM product_property_definition_schema
(general_property,
 general_property_relationship);

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\independent_property_representation_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2006/05/18 11:42:07 liutkuviene Exp $
 ISO TC184/SC4/WG12 N4372 - ISO/TS 10303-1038 Independent property representation - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1244
*)
SCHEMA Independent_property_representation_mim;

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\information_rights_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.6 2004/11/19 21:37:36 robbod Exp $
 ISO TC184/SC4/WG12 N3059 - ISO/TS 10303-1241 Information rights - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2337
*) 


SCHEMA Information_rights_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_method,
   action_method_relationship); 

USE FROM Activity_mim;    -- ISO/TS 10303-1047

USE FROM Contract_mim;    -- ISO/TS 10303-1062

USE FROM Management_resource_information_mim;    -- ISO/TS 10303-1288


TYPE ir_approval_item = SELECT BASED_ON mri_approval_item WITH 
   (applied_usage_right, 
    information_usage_right);
END_TYPE; 

TYPE ir_contract_item = SELECT BASED_ON contract_item WITH 
   (information_usage_right);
END_TYPE; 

TYPE ir_date_and_time_item = SELECT BASED_ON mri_date_and_time_item WITH 
   (information_usage_right);
END_TYPE; 

TYPE ir_date_item = SELECT BASED_ON mri_date_item WITH 
   (information_usage_right);
END_TYPE; 

TYPE ir_identification_item = SELECT BASED_ON mri_identification_item WITH 
   (information_right, 
    information_usage_right);
END_TYPE; 

TYPE ir_organization_item = SELECT BASED_ON mri_organization_item WITH 
   (information_usage_right);
END_TYPE; 

TYPE ir_person_and_organization_item = SELECT BASED_ON mri_person_and_organization_item WITH 
   (information_usage_right);
END_TYPE; 

TYPE ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items;
END_TYPE; 

ENTITY applied_usage_right
  SUBTYPE OF (applied_action_assignment);
  SELF\applied_action_assignment.items : SET[1:?] OF ir_usage_item;
END_ENTITY;

ENTITY information_right
  SUBTYPE OF (action_method);
END_ENTITY;

ENTITY information_usage_right
  SUBTYPE OF (action_method);
END_ENTITY;

ENTITY right_to_usage_association
  SUBTYPE OF (action_method_relationship);
  SELF\action_method_relationship.relating_method RENAMED right_usage : information_usage_right;
  SELF\action_method_relationship.related_method RENAMED right_applied : information_right;
END_ENTITY;

ENTITY usage_association
  SUBTYPE OF (action_method_relationship);
  SELF\action_method_relationship.relating_method RENAMED relating : information_usage_right;
  SELF\action_method_relationship.related_method RENAMED related : information_usage_right;
END_ENTITY;

END_SCHEMA;  -- Information_rights_mim





(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\interface_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.12 2004/11/19 21:37:36 robbod Exp $
 ISO TC184/SC4/WG12 N3062 - ISO/TS 10303-1251 Interface - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2274
*) 


SCHEMA Interface_mim;

USE FROM Group_mim   -- ISO/TS 10303-1113
  (groupable_item); 

USE FROM group_schema   -- ISO 10303-41
  (group); 

USE FROM product_definition_schema   -- ISO 10303-41
  (product_definition,
   product_definition_formation,
   product_definition_relationship); 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041


TYPE connection_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (interface_connector_definition, 
    product_definition, 
    product_definition_relationship);
END_TYPE; 

TYPE interface_component_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (interface_definition_for);
END_TYPE; 

TYPE interface_connector_occurrence_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (product_definition);
END_TYPE; 

TYPE interface_connector_on_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (product_definition, 
    product_definition_relationship);
END_TYPE; 

ENTITY hierarchical_interface_connection
  SUBTYPE OF (interface_connection);
END_ENTITY;

ENTITY interface_connection
  SUBTYPE OF (group);
END_ENTITY;

ENTITY interface_connector_definition
  SUBTYPE OF (product_definition);
END_ENTITY;

ENTITY interface_connector_occurrence
  SUBTYPE OF (group);
END_ENTITY;

ENTITY interface_connector_version
  SUBTYPE OF (product_definition_formation);
END_ENTITY;

ENTITY interface_definition_connection
  SUBTYPE OF (product_definition_relationship);
END_ENTITY;

ENTITY interface_definition_for
  SUBTYPE OF (product_definition_relationship);
END_ENTITY;

ENTITY interface_specification_definition
  SUBTYPE OF (product_definition);
END_ENTITY;

ENTITY interface_specification_version
  SUBTYPE OF (product_definition_formation);
END_ENTITY;

END_SCHEMA;  -- Interface_mim




(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\issue_mim.exp
   ------------------------------------------------------------
*)

(*
ISO TC184/SC4/WG12 N - ISO/WD 10303-1490 Issue - EXPRESS MIM
*) 

SCHEMA Issue_mim;

USE FROM Observation_mim;    -- ISO/TS 10303-1258

USE FROM representation_schema   -- ISO 10303-43
  (representation,
   representation_context); 


TYPE issue_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY issue
  SUBTYPE OF (observation);
END_ENTITY;

ENTITY issue_consequence
  SUBTYPE OF (observation_consequence);
END_ENTITY;

ENTITY issue_reference_mapping;
  issue_referenced : representation;
  items : SET[0:?] OF issue_reference_item;
END_ENTITY;

END_SCHEMA;  -- Issue_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\issue_management_mim.exp
   ------------------------------------------------------------
*)

(*
ISO TC184/SC4/WG3 N - ISO/WD 10303-1489 Issue management - EXPRESS MIM
*) 


SCHEMA Issue_management_mim;

USE FROM action_schema;    -- ISO 10303-41

USE FROM Activity_as_realized_mim;    -- ISO/TS 10303-1259

USE FROM Activity_method_assignment_mim;    -- ISO/TS 10303-1249

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM Activity_mim;    -- ISO/TS 10303-1047

USE FROM Alias_identification_mim;    -- ISO/TS 10303-1025

USE FROM application_context_schema;    -- ISO 10303-41

USE FROM Approval_mim;    -- ISO/TS 10303-1012

USE FROM approval_schema;    -- ISO 10303-41

USE FROM Certification_mim;    -- ISO/TS 10303-1044

USE FROM certification_schema;    -- ISO 10303-41

USE FROM Class_mim;    -- ISO/TS 10303-1070

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM classification_schema;    -- ISO 10303-54

USE FROM Contract_mim;    -- ISO/TS 10303-1062

USE FROM contract_schema;    -- ISO 10303-41

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM Date_time_mim;    -- ISO/TS 10303-1010

USE FROM date_time_schema;    -- ISO 10303-41

USE FROM Event_assignment_mim;    -- ISO/TS 10303-1364

USE FROM Event_mim;    -- ISO/TS 10303-1064

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

USE FROM Issue_mim;    -- ISO/WD 10303-1490

USE FROM management_resources_schema;    -- ISO 10303-41

USE FROM measure_schema;    -- ISO 10303-41

USE FROM Multi_linguism_mim;    -- ISO/TS 10303-1105

USE FROM Observation_mim;    -- ISO/TS 10303-1258

USE FROM Person_organization_assignment_mim;    -- ISO/TS 10303-1013

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011

USE FROM person_organization_schema;    -- ISO 10303-41

USE FROM Product_as_individual_mim;    -- ISO/TS 10303-1164

USE FROM Product_categorization_mim;    -- ISO/TS 10303-1016

USE FROM product_definition_schema;    -- ISO 10303-41

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Project_mim;    -- ISO/TS 10303-1061

USE FROM representation_schema;    -- ISO 10303-43

USE FROM Security_classification_mim;    -- ISO/TS 10303-1015

USE FROM security_classification_schema;    -- ISO 10303-41

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054

USE FROM Work_request_mim;    -- ISO/TS 10303-1042


TYPE im_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH 
   (action, 
    action_method, 
    applied_action_assignment, 
    contract, 
    issue, 
    product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE im_action_method_items = EXTENSIBLE SELECT BASED_ON action_method_items WITH 
   (approval_assignment, 
    certification, 
    date_and_time_assignment, 
    date_assignment, 
    observation, 
    security_classification);
END_TYPE; 

TYPE im_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH 
   (action_method, 
    contract, 
    organization, 
    person, 
    person_and_organization, 
    product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE im_aliasable_item = EXTENSIBLE SELECT BASED_ON aliasable_item WITH 
   (address, 
    applied_security_classification_assignment, 
    approval, 
    approval_status, 
    certification, 
    organization_assignment, 
    organizational_project, 
    person, 
    person_and_organization, 
    product_as_individual, 
    product_as_individual_view, 
    product_as_planned, 
    product_as_realized);
END_TYPE; 

TYPE im_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH 
   (action_actual, 
    applied_identification_assignment, 
    certification, 
    event_occurrence, 
    product_as_individual, 
    product_as_planned, 
    product_as_realized, 
    product_definition, 
    product_definition_context, 
    product_design_to_individual, 
    product_design_version_to_individual, 
    product_planned_to_realized, 
    versioned_action_request);
END_TYPE; 

TYPE im_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH 
   (product_as_individual, 
    product_as_individual_version, 
    product_as_individual_view);
END_TYPE; 

TYPE im_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH 
   (organizational_project, 
    product_as_individual, 
    product_as_planned, 
    product_as_realized);
END_TYPE; 

TYPE im_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (action, 
    action_relationship, 
    applied_action_assignment, 
    conversion_based_unit, 
    product, 
    product_as_individual, 
    product_as_realized, 
    product_category, 
    product_definition, 
    product_definition_context, 
    product_definition_formation, 
    product_design_to_individual, 
    product_design_version_to_individual, 
    product_planned_to_realized, 
    uncertainty_measure_with_unit, 
    unit);
END_TYPE; 

TYPE im_contract_item = EXTENSIBLE SELECT BASED_ON contract_item WITH 
   (organization_item, 
    product_as_individual, 
    product_as_planned, 
    product_as_realized, 
    product_definition_formation);
END_TYPE; 

TYPE im_date_and_time_item = EXTENSIBLE SELECT BASED_ON date_and_time_item WITH 
   (applied_identification_assignment, 
    product_as_planned, 
    product_as_realized, 
    product_definition, 
    product_definition_context, 
    product_definition_formation, 
    product_design_to_individual, 
    product_design_version_to_individual, 
    product_planned_to_realized);
END_TYPE; 

TYPE im_date_item = EXTENSIBLE SELECT BASED_ON date_item WITH 
   (applied_identification_assignment, 
    product_as_planned, 
    product_as_realized, 
    product_definition, 
    product_definition_context, 
    product_definition_formation, 
    product_design_to_individual, 
    product_design_version_to_individual, 
    product_planned_to_realized);
END_TYPE; 

TYPE im_event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON event_occurrence_item WITH 
   (observation);
END_TYPE; 

TYPE im_identification_item = EXTENSIBLE SELECT BASED_ON identification_item WITH 
   (action_method, 
    product_as_planned, 
    product_as_realized, 
    product_category, 
    product_definition_context);
END_TYPE; 

TYPE im_issue_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON issue_reference_item WITH 
   (action, 
    action_method, 
    action_relationship, 
    action_request_status, 
    action_status, 
    address, 
    applied_action_assignment, 
    applied_action_method_assignment, 
    applied_action_request_assignment, 
    applied_approval_assignment, 
    applied_certification_assignment, 
    applied_classification_assignment, 
    applied_contract_assignment, 
    applied_event_occurrence_assignment, 
    applied_identification_assignment, 
    applied_organization_assignment, 
    applied_person_and_organization_assignment, 
    applied_security_classification_assignment, 
    approval, 
    approval_person_organization, 
    approval_relationship, 
    approval_status, 
    attribute_language_assignment, 
    calendar_date, 
    certification, 
    class, 
    contract, 
    date_and_time, 
    date_and_time_assignment, 
    date_assignment, 
    event_occurance, 
    event_occurance_relationship, 
    language, 
    local_time, 
    measure_with_unit, 
    multi_language_attribute_assignment, 
    observation, 
    observation_consequence, 
    observation_relationship, 
    organization, 
    organization_relationship, 
    organizational_address, 
    person_and_organization_address, 
    product, 
    product_category, 
    product_category_relationship, 
    product_definition_context, 
    product_definition_formation, 
    product_design_to_individual, 
    product_design_version_to_individual, 
    product_planned_to_realized, 
    product_related_product_category, 
    security_classification, 
    unit, 
    versioned_action_request);
END_TYPE; 

TYPE im_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH 
   (product_as_individual, 
    product_as_individual_version, 
    product_as_individual_view);
END_TYPE; 

TYPE im_observed_context_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON observered_context_item WITH 
   (action, 
    action_method, 
    applied_action_assignment, 
    applied_approval_assignment, 
    applied_certification_assignment, 
    applied_contract_assignment, 
    applied_event_occurrence_assignment, 
    applied_organizational_project_assignment, 
    applied_security_classification_assignment, 
    issue, 
    observation_consequence, 
    organizational_project, 
    product, 
    product_definition, 
    product_definition_formation, 
    product_design_to_individual, 
    product_planned_to_realized);
END_TYPE; 

TYPE im_organization_item = EXTENSIBLE SELECT BASED_ON organization_item WITH 
   (product_as_individual, 
    product_as_planned, 
    product_as_realized);
END_TYPE; 

TYPE im_person_and_organization_item = EXTENSIBLE SELECT BASED_ON person_and_organization_item WITH 
   (product_as_individual, 
    product_as_planned, 
    product_as_realized);
END_TYPE; 

TYPE im_project_item = EXTENSIBLE SELECT BASED_ON project_item WITH 
   (action_method, 
    applied_action_assignment);
END_TYPE; 

TYPE im_security_classification_item = EXTENSIBLE SELECT BASED_ON security_classification_item WITH 
   (organizational_project_relationship, 
    product_as_individual, 
    product_as_individual_version, 
    product_as_planned, 
    product_as_realized, 
    product_definition, 
    product_definition_formation, 
    product_design_version_to_individual);
END_TYPE; 

END_SCHEMA;  -- Issue_management_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\justification_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.6 2004/11/19 21:37:36 robbod Exp $
 ISO TC184/SC4/WG12 N3068 - ISO/TS 10303-1263 Justification - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2385
*) 


SCHEMA Justification_mim;

USE FROM application_context_schema   -- ISO 10303-41
  (application_context_element,
   product_context); 

USE FROM group_schema   -- ISO 10303-41
  (group); 

USE FROM management_resources_schema   -- ISO 10303-41
  (group_assignment); 

USE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_category,
   product_related_product_category,
   product_relationship); 


TYPE justification_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

TYPE justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY justification_assignment
  SUBTYPE OF (group);
END_ENTITY;

ENTITY justification_group_assignment
  SUBTYPE OF (group_assignment);
  items : SET[1:1] OF product;
END_ENTITY;

ENTITY justification_item_group_assignment
  SUBTYPE OF (group_assignment);
  items : SET[1:1] OF justification_item;
END_ENTITY;

ENTITY justification_support_assignment
  SUBTYPE OF (group);
END_ENTITY;

ENTITY justification_support_item_group_assignment
  SUBTYPE OF (group_assignment);
  items : SET[1:1] OF justification_support_item;
END_ENTITY;

END_SCHEMA;  -- Justification_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\location_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.13 2004/11/19 21:37:36 robbod Exp $
 ISO TC184/SC4/WG12 N3071 - ISO/TS 10303-1276 Location - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2388
*) 


SCHEMA Location_mim;

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM location_schema   -- ISO 10303-41
  (location,
   location_relationship); 

USE FROM management_resources_schema   -- ISO 10303-41
  (location_representation_assignment); 

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011

USE FROM person_organization_schema   -- ISO 10303-41
  (organizational_address); 

USE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_definition_formation); 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_definition,
   characterized_object,
   property_definition); 

USE FROM product_property_representation_schema   -- ISO 10303-41
  (property_definition_representation,
   represented_definition); 

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM qualified_measure_schema   -- ISO 10303-45
  (measure_representation_item); 

USE FROM representation_schema   -- ISO 10303-43
  (representation,
   representation_item); 

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054

USE FROM Zonal_breakdown_mim;    -- ISO/TS 10303-1217


TYPE location_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (location, 
    location_relationship);
END_TYPE; 

TYPE location_representation_item = EXTENSIBLE GENERIC_ENTITY SELECT
   (organizational_address, 
    person_and_organization_address, 
    product, 
    product_definition_formation);
END_TYPE; 

ENTITY applied_location_representation_assignment
  SUBTYPE OF (location_representation_assignment);
  items : SET[1:?] OF location_representation_item;
END_ENTITY;

ENTITY characterized_location_object
  SUBTYPE OF (characterized_object, location);
END_ENTITY;

END_SCHEMA;  -- Location_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\location_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.7 2004/11/19 21:37:36 robbod Exp $
 ISO TC184/SC4/WG12 N3074 - ISO/TS 10303-1277 Location assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2391
*) 


SCHEMA Location_assignment_mim;

USE FROM Location_mim;    -- ISO/TS 10303-1276

USE FROM management_resources_schema   -- ISO 10303-41
  (location_assignment); 


TYPE location_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_location_assignment
  SUBTYPE OF (location_assignment);
  items : SET[1:?] OF location_item;
END_ENTITY;

END_SCHEMA;  -- Location_assignment_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\management_resource_information_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.13 2006/11/03 09:13:59 liutkus Exp $
 ISO TC184/SC4/WG12 N4288 - ISO/TS 10303-1288 Management resource information - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N3080
*) 


SCHEMA Management_resource_information_mim;

USE FROM Alias_identification_mim;    -- ISO/TS 10303-1025

USE FROM Approval_mim;    -- ISO/TS 10303-1012

USE FROM Certification_mim;    -- ISO/TS 10303-1044

USE FROM Contract_mim;    -- ISO/TS 10303-1062

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

USE FROM Multi_linguism_mim;    -- ISO/TS 10303-1105

USE FROM Person_organization_assignment_mim;    -- ISO/TS 10303-1013

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011

USE FROM Project_mim;    -- ISO/TS 10303-1061

USE FROM Security_classification_mim;    -- ISO/TS 10303-1015


TYPE mri_aliasable_item = EXTENSIBLE SELECT BASED_ON aliasable_item WITH 
   (approval_status, 
    contract, 
    organization, 
    security_classification,
    security_classification_level);
END_TYPE; 

TYPE mri_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH 
   (certification, 
    contract);
END_TYPE; 

TYPE mri_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH 
   (applied_organizational_project_assignment, 
    approval, 
    approval_relationship, 
    approval_status, 
    certification, 
    certification_type, 
    contract, 
    date_role, 
    date_time_role, 
    identification_role, 
    organization_relationship, 
    organizational_project, 
    organizational_project_relationship, 
    organizational_project_role, 
    person_and_organization);
END_TYPE; 

TYPE mri_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH 
   (applied_organization_assignment, 
    applied_person_and_organization_assignment, 
    applied_security_classification_assignment, 
    certification, 
    contract, 
    security_classification);
END_TYPE; 

TYPE mri_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH 
   (applied_organization_assignment, 
    applied_person_and_organization_assignment, 
    applied_security_classification_assignment, 
    certification, 
    contract, 
    security_classification);
END_TYPE; 

TYPE mri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH 
   (approval_status, 
    contract, 
    organization, 
    security_classification_level);
END_TYPE; 

TYPE mri_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH 
   (applied_organizational_project_assignment, 
    approval, 
    approval_relationship, 
    approval_status, 
    certification, 
    certification_type, 
    contract, 
    date_role, 
    date_time_role, 
    identification_role, 
    organization_relationship, 
    organizational_project, 
    organizational_project_relationship, 
    organizational_project_role, 
    person_and_organization);
END_TYPE; 

TYPE mri_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH 
   (applied_identification_assignment, 
    applied_security_classification_assignment, 
    contract);
END_TYPE; 

TYPE mri_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH 
   (applied_identification_assignment, 
    applied_security_classification_assignment, 
    contract);
END_TYPE; 

END_SCHEMA;  -- Management_resource_information_mim






(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\measure_of_effectiveness_mim.exp
   ------------------------------------------------------------
*)

SCHEMA Measure_of_effectiveness_mim;

USE FROM Requirement_view_definition_mim;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\measure_representation_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.4 2004/10/22 14:22:50 darla Exp $
 ISO TC184/SC4/WG12 N1217 - ISO/TS 10303-1118 Measure representation - EXPRESS MIM
*)

SCHEMA Measure_representation_mim;

USE FROM Foundation_representation_mim;

USE FROM qualified_measure_schema
(measure_representation_item);

USE FROM representation_schema
(value_representation_item);

USE FROM Value_with_unit_mim;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\multi_linguism_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.9 2004/11/30 17:12:57 robbod Exp $
 ISO TC184/SC4/WG12 N3243 - ISO/TS 10303-1105 Multi linguism - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2224
*) 


SCHEMA Multi_linguism_mim;

USE FROM management_resources_schema   -- ISO 10303-41
  (attribute_classification_assignment,
   attribute_value_assignment); 

USE FROM group_schema   -- ISO 10303-41
  (group); 


TYPE attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT
   (multi_language_attribute_assignment, 
    attribute_value_assignment);
END_TYPE; 


TYPE multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE;

ENTITY language 
SUBTYPE OF (group); 
WHERE
WR1: SELF\group.name <> '';
END_ENTITY; 

ENTITY attribute_language_assignment 
SUBTYPE OF (attribute_classification_assignment); 
  SELF\attribute_classification_assignment.assigned_class: language;
  items : SET [1:?] OF attribute_language_item; 
WHERE 
WR1: SELF\attribute_classification_assignment.role.name IN ['primary', 'translated']; 
WR2: SELF\attribute_classification_assignment.attribute_name<> '';
END_ENTITY; 

ENTITY multi_language_attribute_assignment 
SUBTYPE OF (attribute_value_assignment); 
  items : SET [1:?] OF multi_language_attribute_item;

DERIVE
  translation_language : language := language_indication[1]\attribute_classification_assignment.assigned_class;

INVERSE
  language_indication: SET[1:1] OF attribute_language_assignment FOR items;

WHERE 
WR1: (SELF\attribute_value_assignment.role.name = 'alternate language');
WR2: SIZEOF( QUERY( ala <* language_indication |  
   (ala\attribute_classification_assignment.attribute_name = 'attribute_value') AND 
   (ala\attribute_classification_assignment.role.name='translated') )) = 1 ; 
WR3: SELF\attribute_value_assignment.attribute_name <> '' ;
WR4: SIZEOF(QUERY(ci <* items |
SIZEOF(QUERY(ata <* USEDIN(ci, 'MULTI_LINGUISM_MIM.MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.ITEMS') |
(ata\attribute_value_assignment.attribute_name = SELF\attribute_value_assignment.attribute_name) AND 
(ata.translation_language :=: translation_language) ))>1 )) =0;
WR5: SIZEOF(QUERY(ci <* items |
SIZEOF(QUERY(ata <* USEDIN(ci, 'MULTI_LINGUISM_MIM.ATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS') |
 (ata\attribute_classification_assignment.role.name='primary') AND
 (ata\attribute_classification_assignment.attribute_name= SELF\attribute_value_assignment.attribute_name) AND 
 (ata\attribute_classification_assignment.assigned_class :=: translation_language) ))>0 )) =0;
END_ENTITY; 


RULE restrict_language_assignment_per_attribute FOR (attribute_language_assignment);
WHERE
WR1: SIZEOF ( QUERY ( ala1 <* attribute_language_assignment |
	SIZEOF(QUERY( it <* ala1.items |
	   SIZEOF ( QUERY ( ala2 <* USEDIN ( it ,'MULTI_LINGUISM_MIM.ATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS' ) | 
		( ala1\attribute_classification_assignment.attribute_name = ala2\attribute_classification_assignment.attribute_name ) AND 
		( ala1\attribute_classification_assignment.assigned_class :=: ala2\attribute_classification_assignment.assigned_class )
		 )) >1 
	   )) >0 
	)) =0;
END_RULE;

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\name_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.6 2004/11/19 21:37:37 robbod Exp $
 ISO TC184/SC4/WG12 N3086 - ISO/TS 10303-1340 Name assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2283
*) 


SCHEMA Name_assignment_mim;

USE FROM management_resources_schema   -- ISO 10303-41
  (name_assignment); 


TYPE name_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_name_assignment
  SUBTYPE OF (name_assignment);
  item : name_item;
END_ENTITY;

END_SCHEMA;  -- Name_assignment_mim






(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\numeric_function_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.18 2006/09/29 11:16:58 rugarcia Exp $
 ISO TC184/SC4/WG12 N4508 - ISO/TS 10303-1346 Numeric function - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1803
*)

SCHEMA Numeric_function_mim;

USE FROM Expression_mim;

USE FROM ISO13584_expressions_schema(
	abs_function,
	acos_function,	
	asin_function,
	atan_function,	
	cos_function,
	exp_function,
	int_value_function,
	integer_defined_function,	
	length_function,	
	log_function,
	log10_function,
	log2_function,
	maximum_function,
	minimum_function,	
	minus_function,		
	numeric_defined_function,	
	odd_function,	
	real_defined_function,	
	sin_function,	
	square_root_function,	
	tan_function,	
	unary_function_call,	
	value_function);
	
END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\observation_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.9 2004/11/19 21:37:37 robbod Exp $
 ISO TC184/SC4/WG12 N3089 - ISO/TS 10303-1258 Observation - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2397
*) 


SCHEMA Observation_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_relationship,
   action_request_solution); 

USE FROM Activity_as_realized_mim;    -- ISO/TS 10303-1259

USE FROM Activity_mim;    -- ISO/TS 10303-1047

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM Management_resource_information_mim;    -- ISO/TS 10303-1288

USE FROM Product_as_individual_mim;    -- ISO/TS 10303-1164

USE FROM qualified_measure_schema   -- ISO 10303-45
  (descriptive_representation_item); 

USE FROM representation_schema   -- ISO 10303-43
  (representation,
   representation_context,
   representation_item); 

USE FROM Work_request_mim;    -- ISO/TS 10303-1042


TYPE observation_approval = SELECT BASED_ON mri_approval_item WITH 
   (observation);
END_TYPE; 

TYPE observation_classification = SELECT BASED_ON classification_item WITH 
   (observation, 
    observation_relationship);
END_TYPE; 

TYPE observation_date = SELECT BASED_ON mri_date_item WITH 
   (observation);
END_TYPE; 

TYPE observation_date_and_time = SELECT BASED_ON mri_date_and_time_item WITH 
   (observation);
END_TYPE; 

TYPE observation_identification_item = SELECT BASED_ON mri_identification_item WITH 
   (observation, 
    observation_consequence);
END_TYPE; 

TYPE observation_item_representation = SELECT BASED_ON action_items WITH 
   (representation);
END_TYPE; 

TYPE observation_organization = SELECT BASED_ON mri_organization_item WITH 
   (observation);
END_TYPE; 

TYPE observation_person_and_organization = SELECT BASED_ON mri_person_and_organization_item WITH 
   (observation);
END_TYPE; 

TYPE observation_recorder_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH 
   (product_as_realized);
END_TYPE; 

TYPE observed_context_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items;
END_TYPE; 

ENTITY observation
  SUBTYPE OF (action_actual);
END_ENTITY;

ENTITY observation_consequence
  SUBTYPE OF (action_request_solution);
END_ENTITY;

ENTITY observation_relationship
  SUBTYPE OF (action_relationship);
END_ENTITY;

END_SCHEMA;  -- Observation_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\organization_structure_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2007/04/02 18:23:54 philsp Exp $
 ISO TC184/SC4/WG12 N4599 - ISO/WD 10303-1435 Organization structure - EXPRESS MIM
*)
(*            UNDER DEVELOPMENT by H.P. Frisch
	      NOTE:  Many duplications exist, they need to be auto-removed.  
	      	Auto-condensation of extensible type lists also need to be done.  

*)
SCHEMA Organization_structure_mim;
  USE FROM Organization_type_mim;
  USE FROM Project_management_resource_information_mim;
  USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 


TYPE os_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(position_in_organization,
	group);
END_TYPE;


TYPE os_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(organization,
	organization_type,
	person,
	person_and_organization,
	position_in_organization,
	group,
	position_in_organization_type,
	person_type,
	person_type_definition);
END_TYPE;


TYPE os_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(organization,
	person,
	person_and_organization);
END_TYPE;


TYPE os_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(address,
	person,
	person_and_organization);
END_TYPE;


TYPE os_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(applied_experience_assignment,
	experience_type,
	applied_organization_type_assignment,
	applied_position_in_organization_assignment,
	group,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	position_in_organization_type,
	applied_qualification_type_assignment,
	qualification_type,
	person_type,
	applied_person_type_assignment);
END_TYPE;


TYPE os_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(applied_experience_assignment,
	experience,
	organization_type,
	applied_position_in_organization_assignment,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	applied_qualification_type_assignment,
	qualification_type_relationship);
END_TYPE;


TYPE os_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_classification_item WITH
	(person_and_organization_address,  organizational_address,
	organization_relationship,
	person_and_organization);
END_TYPE;


TYPE os_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(applied_organization_type_assignment,
	applied_position_in_organization_assignment,
	group,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	applied_person_type_assignment);
END_TYPE;

TYPE os_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(applied_organization_type_assignment,
	applied_position_in_organization_assignment,
	group,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	applied_person_type_assignment);
END_TYPE;


TYPE os_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(experience,
	experience_type,
	organization_type,
	applied_position_in_organization_assignment,
	group,
	position_in_organization,
	position_in_organization_type,
	applied_position_in_organization_type_assignment,
	position_in_organization_type_assignment,
	qualification_type,
	person_type,
	person_type_definition);
END_TYPE;


TYPE os_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(group,
	applied_position_in_organization_assignment,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	applied_person_type_assignment);
END_TYPE;


TYPE os_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(experience_type,
	organization_type,
	applied_position_in_organization_assignment,
	group,
	position_in_organization_assignment,
	applied_qualification_type_assignment,
	qualification_type,
	person_type);
END_TYPE;


TYPE os_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_item WITH
	(organization,
	organization_type,
	person,
	person_and_organization,
	position_in_organization,
	position_in_organization_type,
	person_type);
END_TYPE;


TYPE os_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(applied_position_in_organization_assignment,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	position_in_organization_type,
	applied_person_type_assignment);
END_TYPE;

TYPE os_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(applied_position_in_organization_assignment,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	position_in_organization_type,
	applied_person_type_assignment);
END_TYPE;


(*TYPE os_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(address,
	person,
	person_and_organization);
END_TYPE;*)

ENTITY os_characterizable_address
  SUBTYPE OF (address, characterized_object);
END_ENTITY;


ENTITY os_characterizable_person
  SUBTYPE OF (person, characterized_object);
END_ENTITY;


ENTITY os_characterizable_person_and_organization
  SUBTYPE OF (person_and_organization, characterized_object);
END_ENTITY;


TYPE os4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(position_in_organization,
	position_in_organization_type,
	person_type);
END_TYPE;


TYPE os2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(organization,
	organization_type,
	person,
	person_and_organization,
	position_in_organization,
	position_in_organization_type,
	person_type);
END_TYPE;


TYPE os_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(organization,
	person_and_organization);
END_TYPE;


TYPE os_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_observed_of_item WITH
	(organization,
	person_and_organization);
END_TYPE;


TYPE os_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(applied_experience_assignment,
	experience_type,
	organization_type,
	position_in_organization,
	group,
	position_in_organization_relationship,
	position_in_organization_assignment,
	position_in_organization_type,
	qualification_type,
	person_type,
	applied_person_type_assignment,
	person_type_definition,
	person_type_definition_relationship);
END_TYPE;

TYPE os_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(applied_experience_assignment,
	experience_type,
	organization_type,
	position_in_organization,
	group,
	position_in_organization_relationship,
	position_in_organization_assignment,
	position_in_organization_type,
	qualification_type,
	person_type,
	applied_person_type_assignment,
	person_type_definition,
	person_type_definition_relationship);
END_TYPE;


TYPE os_person_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_type_item WITH
	(person_and_organization,
	position_in_organization,
	group,
	position_in_organization_type);
END_TYPE;


TYPE os3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(organization,
	organization_type,
	person,
	person_and_organization,
	position_in_organization,
	position_in_organization_type,
	person_type);
END_TYPE;


END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\organization_type_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.8 2004/11/19 21:37:38 robbod Exp $
 ISO TC184/SC4/WG12 N3092 - ISO/TS 10303-1240 Organization type - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2400
*) 


SCHEMA Organization_type_mim;

USE FROM management_resources_schema   -- ISO 10303-41
  (organization_type_assignment); 

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011

USE FROM person_organization_schema   -- ISO 10303-41
  (organization,
   organization_type); 


TYPE organization_type_item = EXTENSIBLE GENERIC_ENTITY SELECT
   (organization);
END_TYPE; 

ENTITY applied_organization_type_assignment
  SUBTYPE OF (organization_type_assignment);
  items : SET[1:?] OF organization_type_item;
END_ENTITY;

END_SCHEMA;  -- Organization_type_mim




(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\parameter_value_specification_mim.exp
   ------------------------------------------------------------
*)


(*
$Id: mim.exp,v 1.4 2007/07/05 07:39:13 dmprice Exp $
ISO TC184/SC4/WG12 N4602 - ISO/CD-TS 10303-1470 Parameter value specification - EXPRESS MIM
*) 


SCHEMA Parameter_value_specification_mim;

USE FROM Group_mim   -- ISO/TS 10303-1113
  (applied_group_assignment,
   groupable_item); 

USE FROM ISO13584_generic_expressions_schema   -- ISO 13584-20
  (generic_expression,
   variable_semantics); 

USE FROM measure_schema   -- ISO 10303-41
  (measure_with_unit); 

USE FROM Name_assignment_mim   -- ISO/TS 10303-1340
  (applied_name_assignment,
   name_item); 


TYPE generic_expression_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (generic_expression);
END_TYPE; 

TYPE named_variable_semantics_name_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON name_item WITH 
   (named_variable_semantics);
END_TYPE; 

TYPE named_variable_semantics_variable_context_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (named_variable_semantics);
END_TYPE; 

TYPE parameter_value_select = EXTENSIBLE GENERIC_ENTITY SELECT
   (generic_expression, 
    measure_with_unit);
END_TYPE; 

ENTITY named_variable_semantics
  SUBTYPE OF (variable_semantics);
END_ENTITY;

END_SCHEMA;  -- Parameter_value_specification_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\part_and_version_identification_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.5 2004/01/13 10:15:26 robbod Exp $
 ISO TC184/SC4/WG12 N2522 - ISO/TS 10303-1022 Part and version identification - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1115
*) 


SCHEMA Part_and_version_identification_mim; 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM Product_version_mim;    -- ISO/TS 10303-1018


END_SCHEMA;  -- Part_and_version_identification_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\part_definition_relationship_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.4 2004/10/22 14:35:06 darla Exp $
 ISO TC184/SC4/WG12 N1327 - ISO/TS 10303-1055 Part definition relationship - EXPRESS MIM
*)
   
SCHEMA Part_definition_relationship_mim;

USE FROM Part_view_definition_mim;
USE FROM Product_view_definition_relationship_mim;
USE FROM Value_with_unit_mim; -- ISO/TS 10303-1054

USE FROM product_structure_schema
	(make_from_usage_option);

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\part_view_definition_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2004/10/28 17:03:50 darla Exp $
 ISO TC184/SC4/WG12 N2919 - ISO/TS 10303-1023 Part view definition - EXPRESS MIM
*)


SCHEMA Part_view_definition_mim;

USE FROM Part_and_version_identification_mim;    -- ISO/TS 10303-1022

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019


END_SCHEMA;  -- Part_view_definition_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\person_organization_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2004/10/29 16:20:10 thendrix Exp $
ISO TC184/SC4/WG12 N2922 - ISO/TS 10303-1011 Person organization - EXPRESS MIM
*) 


SCHEMA Person_organization_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute,
   id_attribute_select,
   name_attribute,
   name_attribute_select); 

USE FROM person_organization_schema   -- ISO 10303-41
  (address,
   organization,
   organization_relationship,
   organizational_address,
   person,
   person_and_organization,
   personal_address); 


ENTITY person_and_organization_address
  SUBTYPE OF (organizational_address, personal_address);
  SELF\organizational_address.organizations : SET[1:1] OF organization;
  SELF\personal_address.people : SET[1:1] OF person;
WHERE
  WR1: SIZEOF(QUERY(pao <* USEDIN (SELF\personal_address.people[1], 'PERSON_ORGANIZATION_SCHEMA.PERSON_AND_ORGANIZATION.THE_PERSON') | pao.the_organization :=: SELF\organizational_address.organizations[1])) = 1;
END_ENTITY;

END_SCHEMA;  -- Person_organization_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\person_organization_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.6 2004/10/22 14:39:13 darla Exp $
 ISO TC184/SC4/WG12 N1091 - ISO/TS 10303-1013 Person organization assignment - EXPRESS MIM
*)
      
SCHEMA Person_organization_assignment_mim;

USE FROM Person_organization_mim; 		-- 10303-1011
USE FROM person_organization_schema 	-- ISO 10303-41
  (organization_role,
   person_and_organization_role);
USE FROM management_resources_schema 	-- ISO 10303-41
  (organization_assignment,
   person_and_organization_assignment);

   
TYPE organization_item = EXTENSIBLE SELECT; 
END_TYPE;

   
TYPE person_and_organization_item = EXTENSIBLE SELECT; 
END_TYPE;

   
ENTITY applied_organization_assignment
  SUBTYPE OF (organization_assignment);
  items : SET [1:?] OF organization_item;
END_ENTITY;

   
ENTITY applied_person_and_organization_assignment
  SUBTYPE OF (person_and_organization_assignment);
  items : SET [1:?] OF person_and_organization_item;
END_ENTITY;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\physical_breakdown_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.9 2004/11/19 21:37:38 robbod Exp $
 ISO TC184/SC4/WG12 N3095 - ISO/TS 10303-1215 Physical breakdown - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2286
*) 


SCHEMA Physical_breakdown_mim;

USE FROM Product_breakdown_mim;    -- ISO/TS 10303-1248


ENTITY physical_breakdown_context
  SUBTYPE OF (breakdown_context);
END_ENTITY;

ENTITY physical_element_usage
  SUBTYPE OF (breakdown_element_usage);
END_ENTITY;

END_SCHEMA;  -- Physical_breakdown_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\position_in_organization_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.9 2004/11/19 21:37:38 robbod Exp $
 ISO TC184/SC4/WG12 N3098 - ISO/TS 10303-1242 Position in organization - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2403
*) 


SCHEMA Position_in_organization_mim;

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM group_schema;    -- ISO 10303-41

USE FROM management_resources_schema   -- ISO 10303-41
  (group_assignment,
   name_assignment,
   position_in_organization_assignment,
   position_in_organization_type_assignment); 

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011

USE FROM person_organization_schema   -- ISO 10303-41
  (address,
   organization,
   organizational_project,
   person,
   person_type,
   position_in_organization,
   position_in_organization_relationship,
   position_in_organization_type); 

USE FROM Project_mim;    -- ISO/TS 10303-1061

USE FROM Type_of_person_mim;    -- ISO/TS 10303-1245


TYPE position_in_organization_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (applied_position_in_organization_assignment, 
    applied_position_in_organization_type_assignment, 
    group, 
    position_in_organization, 
    position_in_organization_relationship, 
    position_in_organization_type);
END_TYPE; 

TYPE position_in_organization_group_assignment_item = EXTENSIBLE GENERIC_ENTITY SELECT
   (position_in_organization_assignment);
END_TYPE; 

TYPE position_in_organization_group_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

TYPE position_in_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT
   (address, 
    organization, 
    organizational_project, 
    person);
END_TYPE; 

TYPE position_in_organization_type_item = EXTENSIBLE GENERIC_ENTITY SELECT
   (person_type, 
    position_in_organization);
END_TYPE; 

TYPE project_group_name_item = EXTENSIBLE GENERIC_ENTITY SELECT
   (applied_position_in_organization_group_assignment);
END_TYPE; 

ENTITY applied_position_in_organization_assignment
  SUBTYPE OF (position_in_organization_assignment);
  items : SET[1:?] OF position_in_organization_item;
END_ENTITY;

ENTITY applied_position_in_organization_assignment_group_assignment
  SUBTYPE OF (group_assignment);
  items : SET[1:?] OF position_in_organization_group_assignment_item;
END_ENTITY;

ENTITY applied_position_in_organization_group_assignment
  SUBTYPE OF (group_assignment);
  items : SET[1:?] OF position_in_organization_group_item;
END_ENTITY;

ENTITY applied_position_in_organization_type_assignment
  SUBTYPE OF (position_in_organization_type_assignment);
  items : SET[1:?] OF position_in_organization_type_item;
END_ENTITY;

ENTITY applied_project_group_name_assignment
  SUBTYPE OF (name_assignment);
  items : SET[1:?] OF project_group_name_item;
END_ENTITY;

END_SCHEMA;  -- Position_in_organization_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\probability_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.7 2004/11/19 21:37:38 robbod Exp $
 ISO TC184/SC4/WG12 N3101 - ISO/TS 10303-1252 Probability - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2406
*) 


SCHEMA Probability_mim;

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM Measure_representation_mim;    -- ISO/TS 10303-1118

USE FROM measure_schema   -- ISO 10303-41
  (descriptive_measure,
   measure_value,
   numeric_measure); 

USE FROM qualified_measure_schema   -- ISO 10303-45
  (descriptive_representation_item); 

USE FROM representation_schema   -- ISO 10303-43
  (compound_representation_item,
   representation,
   representation_context,
   representation_item,
   representation_relationship,
   value_representation_item); 


ENTITY probability_generator
  SUBTYPE OF (representation);
END_ENTITY;

END_SCHEMA;  -- Probability_mim




(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\probability_distribution_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.9 2004/11/19 21:37:38 robbod Exp $
 ISO TC184/SC4/WG12 N3104 - ISO/TS 10303-1274 Probability distribution - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2409
*) 


SCHEMA Probability_distribution_mim;

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM Measure_representation_mim;    -- ISO/TS 10303-1118

USE FROM measure_schema   -- ISO 10303-41
  (descriptive_measure,
   measure_value,
   numeric_measure); 

USE FROM Probability_mim;    -- ISO/TS 10303-1252

USE FROM representation_schema   -- ISO 10303-43
  (compound_representation_item,
   representation,
   representation_context,
   representation_item,
   value_representation_item); 


TYPE probability_distribution_item = SELECT BASED_ON classification_item WITH 
   (representation);
END_TYPE; 

END_SCHEMA;  -- Probability_distribution_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\process_property_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.13 2004/10/22 14:41:13 darla Exp $
 ISO TC184/SC4/WG12 N2126 - ISO/TS 10303-1040 Process property assignment - EXPRESS MIM
*)

SCHEMA Process_property_assignment_mim; 

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM Activity_mim;    -- ISO/TS 10303-1047

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM Independent_property_mim;    -- ISO/TS 10303-1036

USE FROM process_property_representation_schema   -- ISO 10303-49
  (action_property_representation); 

USE FROM process_property_schema   -- ISO 10303-49
  (action_property,
   characterized_action_definition); 

USE FROM product_property_definition_schema   -- ISO 10303-41
  (derived_property_select,
   general_property_association); 


END_SCHEMA;  -- Process_property_assignment_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_as_individual_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.7 2004/11/19 21:37:38 robbod Exp $
 ISO TC184/SC4/WG12 N3107 - ISO/TS 10303-1164 Product as individual - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2292
*) 


SCHEMA Product_as_individual_mim;

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

USE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_relationship); 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019


TYPE product_as_individual_identification_item = SELECT BASED_ON identification_item WITH 
   (product_as_individual, 
    product_as_individual_version, 
    product_as_individual_view);
END_TYPE; 

ENTITY product_as_individual
  SUBTYPE OF (product);
END_ENTITY;

ENTITY product_as_individual_version
  ABSTRACT SUPERTYPE OF (ONEOF (product_as_planned,
                                product_as_realized))
  SUBTYPE OF (product_definition_formation);
  SELF\product_definition_formation.of_product : product_as_individual;
END_ENTITY;

ENTITY product_as_individual_view
  SUBTYPE OF (product_definition);
  SELF\product_definition.formation RENAMED defined_version : product_as_individual_version;
END_ENTITY;

ENTITY product_as_planned
  SUBTYPE OF (product_as_individual_version);
END_ENTITY;

ENTITY product_as_realized
  SUBTYPE OF (product_as_individual_version);
END_ENTITY;

ENTITY product_design_to_individual
  SUBTYPE OF (product_relationship);
  SELF\product_relationship.related_product RENAMED individual_product : product_as_individual;
  SELF\product_relationship.relating_product RENAMED product_design : product;
END_ENTITY;

ENTITY product_design_version_to_individual
  SUBTYPE OF (product_definition_formation_relationship);
  SELF\product_definition_formation_relationship.related_product_definition_formation RENAMED individual_product : product_as_individual_version;
  SELF\product_definition_formation_relationship.relating_product_definition_formation RENAMED product_design_version : product_definition_formation;
END_ENTITY;

ENTITY product_planned_to_realized
  SUBTYPE OF (product_definition_formation_relationship);
  SELF\product_definition_formation_relationship.relating_product_definition_formation RENAMED planned_product : product_as_planned;
  SELF\product_definition_formation_relationship.related_product_definition_formation RENAMED realized_product : product_as_realized;
END_ENTITY;

END_SCHEMA;  -- Product_as_individual_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_breakdown_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.16 2004/11/19 21:37:38 robbod Exp $
 ISO TC184/SC4/WG12 N3110 - ISO/TS 10303-1248 Product breakdown - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2295
*) 


SCHEMA Product_breakdown_mim;

USE FROM group_schema;    -- ISO 10303-41

USE FROM management_resources_schema   -- ISO 10303-41
  (group_assignment); 

USE FROM product_definition_schema   -- ISO 10303-41
  (product_definition,
   product_definition_relationship); 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM product_property_definition_schema;    -- ISO 10303-41

USE FROM product_structure_schema   -- ISO 10303-44
  (product_definition_usage); 

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030


TYPE product_definition_or_breakdown_element_usage = EXTENSIBLE GENERIC_ENTITY SELECT
   (breakdown_element_usage, 
    product_definition);
END_TYPE; 

TYPE product_definition_or_product_definition_relationship = EXTENSIBLE GENERIC_ENTITY SELECT
   (product_definition, 
    product_definition_usage);
END_TYPE; 

ENTITY breakdown_context
  SUBTYPE OF (product_definition_relationship);
END_ENTITY;

ENTITY breakdown_element_group_assignment
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : product_definition_element_relationship;
  items : SET[1:1] OF product_definition_or_breakdown_element_usage;
END_ENTITY;

ENTITY breakdown_element_realization
  SUBTYPE OF (characterized_object, product_definition_element_relationship);
END_ENTITY;

ENTITY breakdown_element_usage
  SUBTYPE OF (product_definition_relationship);
END_ENTITY;

ENTITY breakdown_of
  SUBTYPE OF (product_definition_relationship);
END_ENTITY;

ENTITY product_definition_element_relationship
  SUBTYPE OF (group);
END_ENTITY;

ENTITY product_definition_group_assignment
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : product_definition_element_relationship;
  items : SET[1:1] OF product_definition_or_product_definition_relationship;
END_ENTITY;

END_SCHEMA;  -- Product_breakdown_mim






(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_categorization_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.5 2004/10/29 16:40:18 thendrix Exp $
ISO TC184/SC4/WG12 N1100 - ISO/TS 10303-1016 Product categorization - EXPRESS MIM
*) 


SCHEMA Product_categorization_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute,
   id_attribute_select); 

USE FROM product_definition_schema   -- ISO 10303-41
  (product_category,
   product_category_relationship); 


END_SCHEMA;  -- Product_categorization_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_concept_identification_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.6 2004/10/22 14:44:26 darla Exp $
 ISO TC184/SC4/WG12 N1178 - ISO/TS 10303-1060 Product concept identification - EXPRESS MIM
*)
   
SCHEMA Product_concept_identification_mim;

USE FROM product_concept_schema -- ISO 10303-44
  (product_concept);
USE FROM application_context_schema -- ISO 10303-41
  (product_concept_context);

   
END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_data_management_mim.exp
   ------------------------------------------------------------
*)

(*
$Id: mim.exp,v 1.12 2007/03/06 14:42:13 philsp Exp $
ISO TC184/SC4/WG3 N1880 - ISO/TS 10303-1231 Product data management - EXPRESS MIM
Supersedes ISO TC184/SC4/WG3 N1487
*) 


SCHEMA Product_data_management_mim;

USE FROM action_schema   -- ISO 10303-41
  (action,
   action_directive,
   action_method,
   action_relationship,
   action_request_solution,
   action_request_status,
   directed_action,
   executed_action,
   versioned_action_request); 

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM Activity_mim;    -- ISO/TS 10303-1047

USE FROM application_context_schema   -- ISO 10303-41
  (application_context_relationship,
   application_protocol_definition,
   product_definition_context); 

USE FROM Approval_mim;    -- ISO/TS 10303-1012

USE FROM approval_schema   -- ISO 10303-41
  (approval,
   approval_person_organization,
   approval_relationship,
   approval_status); 

USE FROM Assembly_structure_mim;    -- ISO/TS 10303-1026

USE FROM basic_attribute_schema   -- ISO 10303-41
  (object_role); 

USE FROM Certification_mim;    -- ISO/TS 10303-1044

USE FROM certification_schema   -- ISO 10303-41
  (certification,
   certification_type); 

USE FROM Class_mim;    -- ISO/TS 10303-1070

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM classification_schema   -- ISO 10303-54
  (class); 

USE FROM Configuration_effectivity_mim;    -- ISO/TS 10303-1058

USE FROM Configuration_item_mim;    -- ISO/TS 10303-1056

USE FROM configuration_management_schema   -- ISO 10303-44
  (configuration_effectivity,
   configuration_item); 

USE FROM Contract_mim;    -- ISO/TS 10303-1062

USE FROM contract_schema   -- ISO 10303-41
  (contract); 

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM Date_time_mim;    -- ISO/TS 10303-1010

USE FROM date_time_schema   -- ISO 10303-41
  (calendar_date,
   date_and_time,
   date_role,
   date_time_role,
   event_occurrence); 

USE FROM Document_assignment_mim;    -- ISO/TS 10303-1122

USE FROM Document_management_mim;    -- ISO/TS 10303-1290

USE FROM document_schema   -- ISO 10303-41
  (document_relationship); 

USE FROM Document_structure_mim;    -- ISO/TS 10303-1124

USE FROM Effectivity_application_mim;    -- ISO/TS 10303-1059

USE FROM Effectivity_mim;    -- ISO/TS 10303-1057

USE FROM effectivity_schema   -- ISO 10303-41
  (effectivity); 

USE FROM Event_assignment_mim;    -- ISO/TS 10303-1364

USE FROM Event_mim;    -- ISO/TS 10303-1064

USE FROM External_class_mim;    -- ISO/TS 10303-1275

USE FROM External_item_identification_assignment_mim;    -- ISO/TS 10303-1128

USE FROM External_model_mim;    -- ISO/TS 10303-1033

USE FROM external_reference_schema   -- ISO 10303-41
  (external_source); 

USE FROM File_identification_mim;    -- ISO/TS 10303-1127

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM group_schema   -- ISO 10303-41
  (group); 

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

USE FROM Incomplete_data_reference_mechanism_mim;    -- ISO/TS 10303-1349

USE FROM Independent_property_mim;    -- ISO/TS 10303-1036

USE FROM Independent_property_representation_mim;    -- ISO/TS 10303-1038

USE FROM Management_resource_information_mim;    -- ISO/TS 10303-1288

USE FROM management_resources_schema   -- ISO 10303-41
  (date_and_time_assignment,
   date_assignment,
   document_usage_role,
   identification_assignment,
   identification_role,
   organizational_project_role); 

USE FROM Measure_representation_mim;    -- ISO/TS 10303-1118

USE FROM measure_schema   -- ISO 10303-41
  (context_dependent_unit,
   conversion_based_unit,
   derived_unit,
   measure_with_unit,
   named_unit); 

USE FROM Multi_linguism_mim;    -- ISO/TS 10303-1105

USE FROM Name_assignment_mim;    -- ISO/TS 10303-1340

USE FROM Part_definition_relationship_mim;    -- ISO/TS 10303-1055

USE FROM Person_organization_assignment_mim;    -- ISO/TS 10303-1013

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011

USE FROM person_organization_schema   -- ISO 10303-41
  (address,
   organization,
   organization_relationship,
   organizational_address,
   organizational_project,
   organizational_project_relationship,
   person,
   person_and_organization); 

USE FROM Process_property_assignment_mim;    -- ISO/TS 10303-1040

USE FROM process_property_schema   -- ISO 10303-49
  (action_property); 

USE FROM Product_categorization_mim;    -- ISO/TS 10303-1016

USE FROM Product_concept_identification_mim;    -- ISO/TS 10303-1060

USE FROM product_concept_schema   -- ISO 10303-44
  (product_concept); 

USE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_category,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_formation_with_specified_source,
   product_definition_relationship); 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM product_property_definition_schema   -- ISO 10303-41
  (general_property,
   general_property_relationship,
   property_definition,
   shape_aspect,
   shape_aspect_relationship); 

USE FROM product_property_representation_schema   -- ISO 10303-41
  (property_definition_representation); 

USE FROM Product_replacement_mim;    -- ISO/TS 10303-1046

USE FROM Product_structure_mim;    -- ISO/TS 10303-1134

USE FROM product_structure_schema   -- ISO 10303-44
  (alternate_product_relationship,
   assembly_component_usage,
   assembly_component_usage_substitute); 

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Product_version_relationship_mim;    -- ISO/TS 10303-1020

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Product_view_definition_properties_mim;    -- ISO/TS 10303-1034

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041

USE FROM Project_mim;    -- ISO/TS 10303-1061

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

USE FROM qualified_measure_schema   -- ISO 10303-45
  (descriptive_representation_item,
   measure_representation_item); 

USE FROM representation_schema   -- ISO 10303-43
  (founded_item,
   representation,
   representation_context,
   representation_item,
   uncertainty_measure_with_unit); 

USE FROM Security_classification_mim;    -- ISO/TS 10303-1015

USE FROM security_classification_schema   -- ISO 10303-41
  (security_classification); 

USE FROM Shape_property_assignment_mim;    -- ISO/TS 10303-1032

USE FROM Single_part_representation_mim;    -- ISO/TS 10303-1133

USE FROM Time_interval_assignment_mim;    -- ISO/TS 10303-1365

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054

USE FROM Work_order_mim;    -- ISO/TS 10303-1043

USE FROM Work_request_mim;    -- ISO/TS 10303-1042


TYPE pdm_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH 
   (configuration_effectivity, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE pdm_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH 
   (product_definition, 
    product_definition_formation, 
    product_definition_relationship, 
    property_definition);
END_TYPE; 

TYPE pdm_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH 
   (action, 
    applied_action_assignment, 
    configuration_effectivity, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH 
   (applied_document_reference, 
    applied_document_usage_constraint_assignment, 
    applied_external_identification_assignment, 
    applied_organizational_project_assignment, 
    approval, 
    approval_relationship, 
    approval_status, 
    certification, 
    certification_type, 
    contract, 
    date_role, 
    date_time_role, 
    document_relationship, 
    document_usage_role, 
    external_source, 
    identification_role, 
    object_role, 
    organization_relationship, 
    organizational_project, 
    organizational_project_relationship, 
    organizational_project_role, 
    person_and_organization, 
    product, 
    product_category, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE pdm_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH 
   (product_definition_formation_relationship);
END_TYPE; 

TYPE pdm_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (action, 
    action_directive, 
    action_method, 
    action_property, 
    action_relationship, 
    action_request_solution, 
    action_request_status, 
    address, 
    alternate_product_relationship, 
    applied_action_assignment, 
    applied_action_request_assignment, 
    applied_approval_assignment, 
    applied_certification_assignment, 
    applied_contract_assignment, 
    applied_date_and_time_assignment, 
    applied_date_assignment, 
    applied_document_reference, 
    applied_document_usage_constraint_assignment, 
    applied_effectivity_assignment, 
    applied_event_occurrence_assignment, 
    applied_external_identification_assignment, 
    applied_identification_assignment, 
    applied_organization_assignment, 
    applied_organizational_project_assignment, 
    applied_person_and_organization_assignment, 
    applied_security_classification_assignment, 
    approval, 
    approval_person_organization, 
    approval_relationship, 
    approval_status, 
    assembly_component_usage_substitute, 
    calendar_date, 
    certification, 
    class, 
    configuration_item, 
    context_dependent_unit, 
    contract, 
    conversion_based_unit, 
    date_and_time, 
    date_and_time_assignment, 
    date_assignment, 
    derived_unit, 
    descriptive_representation_item, 
    directed_action, 
    document_file, 
    document_relationship, 
    effectivity, 
    event_occurrence, 
    executed_action, 
    general_property, 
    general_property_relationship, 
    group, 
    identification_assignment, 
    language, 
    measure_representation_item, 
    measure_with_unit, 
    multi_language_attribute_assignment, 
    named_unit, 
    organization, 
    organization_relationship, 
    organizational_address, 
    organizational_project, 
    organizational_project_relationship, 
    person, 
    person_and_organization_address, 
    product, 
    product_category, 
    product_concept, 
    product_definition, 
    product_definition_context, 
    product_definition_formation, 
    product_definition_formation_relationship, 
    product_definition_relationship, 
    property_definition, 
    property_definition_representation, 
    representation, 
    representation_context, 
    representation_item, 
    security_classification, 
    uncertainty_measure_with_unit, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH 
   (action, 
    applied_action_assignment, 
    executed_action, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH 
   (action, 
    applied_action_assignment, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
   (action_method, 
    executed_action, 
    product_definition_formation_relationship, 
    shape_aspect, 
    shape_aspect_relationship, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH 
   (product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE pdm_event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON event_occurrence_item WITH 
   (organizational_project);
END_TYPE; 

TYPE pdm_external_class_name_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON name_item WITH 
   (assembly_component_usage, 
    external_class_library);
END_TYPE; 

TYPE pdm_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH 
   (shape_aspect_relationship);
END_TYPE; 

TYPE pdm_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH 
   (applied_document_reference, 
    applied_document_usage_constraint_assignment, 
    applied_external_identification_assignment, 
    applied_organizational_project_assignment, 
    approval, 
    approval_relationship, 
    approval_status, 
    certification, 
    certification_type, 
    contract, 
    date_role, 
    date_time_role, 
    document_relationship, 
    document_usage_role, 
    external_source, 
    identification_role, 
    object_role, 
    organization_relationship, 
    organizational_project, 
    organizational_project_relationship, 
    organizational_project_role, 
    person_and_organization, 
    product, 
    product_category, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE pdm_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH 
   (action, 
    applied_action_assignment, 
    approval, 
    configuration_item, 
    contract, 
    executed_action, 
    security_classification, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH 
   (action, 
    applied_action_assignment, 
    approval, 
    configuration_item, 
    contract, 
    executed_action, 
    security_classification, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH 
   (executed_action, 
    product_concept);
END_TYPE; 

TYPE pdm_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH 
   (assembly_component_usage);
END_TYPE; 

TYPE pdm_time_interval_item = EXTENSIBLE SELECT BASED_ON time_interval_item WITH 
   (action);
END_TYPE; 

END_SCHEMA;  -- Product_data_management_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_group_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2004/11/19 21:37:38 robbod Exp $
 ISO TC184/SC4/WG12 N3113 - ISO/TS 10303-1278 Product group - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2343
*) 


SCHEMA Product_group_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute); 

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM Effectivity_application_mim;    -- ISO/TS 10303-1059

USE FROM group_schema   -- ISO 10303-41
  (group,
   group_relationship); 

USE FROM management_resources_schema   -- ISO 10303-41
  (group_assignment); 

USE FROM Product_as_individual_mim;    -- ISO/TS 10303-1164

USE FROM Product_concept_identification_mim;    -- ISO/TS 10303-1060

USE FROM product_concept_schema   -- ISO 10303-44
  (product_concept); 

USE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_definition_formation); 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

USE FROM qualified_measure_schema   -- ISO 10303-45
  (descriptive_representation_item); 


TYPE attribute_select = SELECT
   (product_group_context, 
    product_group_purpose);
END_TYPE; 

TYPE product_group_classification_item = SELECT BASED_ON classification_item WITH 
   (product_group, 
    product_group_relationship);
END_TYPE; 

TYPE product_group_effectivity_item = SELECT BASED_ON effectivity_item WITH 
   (product_group, 
    product_group_membership, 
    product_group_relationship);
END_TYPE; 

TYPE product_select = EXTENSIBLE GENERIC_ENTITY SELECT
   (product, 
    product_as_individual, 
    product_concept, 
    product_definition_formation, 
    product_group);
END_TYPE; 

ENTITY product_group
  SUBTYPE OF (group);
END_ENTITY;

ENTITY product_group_attribute_assignment
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : product_group_attributes;
  attributes : SET[1:1] OF attribute_select;
END_ENTITY;

ENTITY product_group_attribute_set
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : product_group;
  product_group_attributes : SET[1:1] OF product_group_attributes;
END_ENTITY;

ENTITY product_group_attributes
  SUBTYPE OF (group);
END_ENTITY;

ENTITY product_group_context
  SUBTYPE OF (descriptive_representation_item);
END_ENTITY;

ENTITY product_group_membership
  SUBTYPE OF (characterized_object, group_assignment);
  member : product_select;
END_ENTITY;

ENTITY product_group_membership_rules
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : product_group;
  product_group_rules : SET[1:1] OF product_group_rules;
END_ENTITY;

ENTITY product_group_purpose
  SUBTYPE OF (descriptive_representation_item);
END_ENTITY;

ENTITY product_group_relationship
  SUBTYPE OF (group_relationship);
END_ENTITY;

ENTITY product_group_rule
  SUBTYPE OF (descriptive_representation_item);
END_ENTITY;

ENTITY product_group_rule_assignment
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : product_group_rules;
  product_group_rules : SET[1:?] OF product_group_rule;
END_ENTITY;

ENTITY product_group_rules
  SUBTYPE OF (group);
END_ENTITY;

END_SCHEMA;  -- Product_group_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_identification_mim.exp
   ------------------------------------------------------------
*)

(*
$Id: mim.exp,v 1.9 2005/06/02 20:42:28 thendrix Exp $
ISO TC184/SC4/WG12 N2926 - ISO/TS 10303-1017 Product identification - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N1103
*) 


SCHEMA Product_identification_mim; 

USE FROM Product_categorization_mim;    -- ISO/TS 10303-1016

USE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_related_product_category); 


END_SCHEMA;  -- Product_identification_mim






(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_relationship_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.5 2004/10/22 14:59:58 darla Exp $
 ISO TC184/SC4/WG12 N1133 - ISO/TS 10303-1024 Product relationship - EXPRESS MIM
*)
  
SCHEMA Product_relationship_mim;
USE FROM Product_identification_mim; -- ISO 10303-1017
USE FROM product_definition_schema -- ISO 10303-41
  (product_relationship);
END_SCHEMA;






(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_replacement_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.6 2006/03/24 18:58:39 thendrix Exp $
 ISO TC184/SC4/WG12 N4361 - ISO/TS 10303-1046 Product replacement - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1145
*)
    
SCHEMA Product_replacement_mim;

USE FROM Assembly_structure_mim; -- ISO 10303-1026
USE FROM Product_identification_mim; -- ISO 10303-1017

USE FROM product_structure_schema -- ISO 10303-44
  (alternate_product_relationship,
   assembly_component_usage_substitute);
END_SCHEMA;






(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_structure_mim.exp
   ------------------------------------------------------------
*)

(*
$Id: mim.exp,v 1.17 2005/05/24 18:03:20 darla Exp $
ISO TC184/SC4/WG12 N2547 - ISO/TS 10303-1134 Product structure - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N1671
*) 


SCHEMA Product_structure_mim;

USE FROM Assembly_structure_mim;    -- ISO/TS 10303-1026

USE FROM Contextual_shape_positioning_mim;    -- ISO/TS 10303-1027

USE FROM Part_and_version_identification_mim;    -- ISO/TS 10303-1022

USE FROM Part_definition_relationship_mim;    -- ISO/TS 10303-1055

USE FROM Product_replacement_mim;    -- ISO/TS 10303-1046

USE FROM Product_version_relationship_mim;    -- ISO/TS 10303-1020

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

USE FROM Single_part_representation_mim;    -- ISO/TS 10303-1133

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set); 


END_SCHEMA;  -- Product_structure_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_version_mim.exp
   ------------------------------------------------------------
*)

(* 
 $Id: mim.exp,v 1.6 2004/01/13 10:15:26 robbod Exp $
 ISO TC184/SC4/WG12 N2528 - ISO/TS 10303-1018 Product version - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1106
*) 


SCHEMA Product_version_mim; 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM product_definition_schema   -- ISO 10303-41
  (product_definition_formation); 


END_SCHEMA;  -- Product_version_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_version_relationship_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.6 2006/03/24 19:02:40 thendrix Exp $
 ISO TC184/SC4/WG12 N4355 - ISO/TS 10303-1020 Product version relationship - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1130
*)
   
SCHEMA Product_version_relationship_mim;

USE FROM Product_version_mim; 	--ISO 10303-1018

USE FROM product_definition_schema 	-- ISO 10303-41
  (product_definition_formation_relationship);
   
END_SCHEMA;




(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_view_definition_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.16 2006/03/24 19:03:52 thendrix Exp $
 ISO TC184/SC4/WG12 N4352 - ISO/TS 10303-1019 Product view definition - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2928
*) 


SCHEMA Product_view_definition_mim;

USE FROM application_context_schema   -- ISO 10303-41
  (product_definition_context); 

USE FROM basic_attribute_schema   -- ISO 10303-41
  (name_attribute,
   name_attribute_select); 

USE FROM product_definition_schema   -- ISO 10303-41
  (product_definition,
   product_definition_context_association); 

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set); 


END_SCHEMA;  -- Product_view_definition_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_view_definition_properties_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.13 2004/11/15 21:22:47 thendrix Exp $
ISO TC184/SC4/WG12 N3228 - ISO/TS 10303-1034 Product view definition properties - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N2127
*) 


SCHEMA Product_view_definition_properties_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute,
   id_attribute_select); 

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_product_definition); 

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030


END_SCHEMA;  -- Product_view_definition_properties_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\product_view_definition_relationship_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.5 2004/10/22 15:18:56 darla Exp $
 ISO TC184/SC4/WG12 N1142 - ISO/TS 10303-1041 Product view definition relationship - EXPRESS MIM
*)

SCHEMA Product_view_definition_relationship_mim;

USE FROM Product_view_definition_mim; -- ISO 10303-1019
USE FROM product_definition_schema -- ISO 10303-41
  (product_definition_relationship);

USE FROM product_structure_schema -- ISO 10303-44
  (product_definition_usage);
END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\program_management_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.11 2007/04/03 08:21:49 philsp Exp $
   ISO TC184/SC4/WG12 N - ISO/WD 10303-1466 Program_management - EXPRESS MIM *)

SCHEMA Program_management_mim;
  USE FROM Issue_management_mim;
  USE FROM Project_management_mim;
  USE FROM Risk_management_mim;
  USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 


TYPE prgm_ss_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(action_directive);
END_TYPE;

TYPE ap233_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(approval,
	certification,
	product,
	product_category,
	action_resource_requirement,
	risk,
	action_method,
	versioned_action_request);
END_TYPE;

TYPE ap233_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(applied_risk_impact_assignment,
	applied_approval_assignment,
	certification,
	condition,
	date_assignment, date_and_time_assignment,
	product,
	observation,
	risk,
	security_classification,
	state_type,
	task_objective);
END_TYPE;

(* original not known!
TYPE ap233_activity_realization_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON activity_realization_select WITH
	(executed_action,
	action_method,
	product,
	product_definition_formation,
	product_definition,
	task_element);
END_TYPE;
*)

TYPE ap233_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(executed_action,
	applied_approval_assignment,
	applied_certification_assignment,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_event_occurrence_assignment,
	information_usage_right,
	justification_group_assignment,  justification_assignment,
	configuration_item,
	applied_organizational_project_assignment,
	risk,
	state_type,
	versioned_action_request);
END_TYPE;

TYPE ap233_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(product,
	product_definition_formation,
	ascribable_state,
	state_type,
	state_type_relationship,
	state_observed_relationship,
	action_method_assignment);
END_TYPE;

TYPE ap233_name_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON name_item WITH
	(product_definition_group_assignment, breakdown_element_group_assignment,
	event_occurrence,
	observation,
	risk);
END_TYPE;

TYPE ap233_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(approval_person_organization,
	property_definition,
	product,
	lessons_learned,
	state_type);
END_TYPE;

(* Original not known!
TYPE prgm_ss_characterized_resource_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_resource_select WITH
	(breakdown_of,
	event_occurrence,
	product,
	risk,
	state_type);
END_TYPE;
*)

TYPE ap233_2_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(action_method,
	action_property,
	applied_risk_impact_assignment,
	product,
	action_resource_requirement,
	action,
	risk_analysis,
	state_type);
END_TYPE;

TYPE ap233_3_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(executed_action,
	action_property,
	action_method);
END_TYPE;

TYPE ap233_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(applied_certification_assignment,
	applied_contract_assignment,
	date_assignment, date_and_time_assignment,
	applied_event_occurrence_assignment,
	justification_group_assignment,  justification_assignment,
	applied_location_assignment,
	applied_organizational_project_assignment,
	applied_qualification_type_assignment,
	risk_treatment,
	applied_security_classification_assignment);
END_TYPE;

TYPE ap233_3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(risk_analysis);
END_TYPE;

TYPE ap233_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(issue,
	product,
	risk_analysis,
	risk_control,
	risk_treatment);
END_TYPE;

TYPE ap233_experience_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON experience_item WITH
	(applied_event_occurrence_assignment,
	lessons_learned,
	observation_consequence,
	product,
	organizational_project,
	risk_analysis,
	action_method);
END_TYPE;

TYPE ap233_person_definition_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_definition_item WITH
	(group,
	applied_position_in_organization_group_assignment,
	position_in_organization_assignment,
	position_in_organization_type_assignment,
	risk_stakeholder,
	applied_person_type_assignment,
	action_method_assignment);
END_TYPE;

TYPE ap233_experience_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON experience_type_item WITH
	(event_occurrence,
	issue,
	lessons_learned,
	observation_consequence,
	product,
	product_group,
	risk_analysis,
	risk_assessment,
	action_method_assignment);
END_TYPE;

TYPE ap233_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(risk_analysis,
	risk_treatment);
END_TYPE;

TYPE ap233_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(action_request_solution,
	state_observed_assignment,
	action_method_relationship,
	event_occurrence,
	applied_event_occurrence_assignment,
	applied_external_identification_assignment,
	issue_consequence,
	risk_treatment);
END_TYPE;

TYPE ap233_event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON event_occurrence_item WITH
	(executed_action,
	approval,
	contract,
	product,
	observation,
	action_resource_requirement,
	risk,
	versioned_action_request);
END_TYPE;

TYPE ap233_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH
	(person_and_organization,
	product,
	organizational_project,
	action_resource_requirement,
	risk_stakeholder,
	action_method);
END_TYPE;

TYPE ap233_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(applied_risk_probability_assignment,
	applied_risk_impact_assignment,
	applied_risk_source_assignment,
	state_type_assignment,
	risk,
	risk_analysis,
	risk_identification,
	risk_consequence,
	risk_stakeholder,
	risk_treatment);
END_TYPE;

TYPE ap233_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
	(action_method,
	action_property,
	property_definition,
	contract,
	product,
	organizational_project,
	action_resource_requirement,
	action_resource,
	risk_treatment);
END_TYPE;

TYPE ap233_issue_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON issue_reference_item WITH
	(executed_action,
	action_method,
	action_request_solution,
	action_method_relationship,
	group,
	action_property,
	action_property_representation,
	action_relationship,
	action_status,
	address,
	person_and_organization_address,  organizational_address,
	applied_action_request_assignment,
	applied_action_assignment,
	applied_action_method_assignment,
	applied_usage_right,
	applied_risk_probability_assignment,
	applied_risk_impact_assignment,
	applied_risk_source_assignment,
	risk_status_assignment,
	state_observed_assignment,
	state_type_assignment,
	approval,
	applied_approval_assignment,
	approval_relationship,
	approval_status,
	approval_person_organization,
	property_definition,
	applied_attribute_classification_assignment,
	multi_language_attribute_assignment,
	breakdown_context,
	breakdown_of,
	calendar_date,
	certification,
	applied_certification_assignment,
	class,
	applied_classification_assignment,
	condition,
	action,
	contract,
	applied_contract_assignment,
	date_assignment, date_and_time_assignment,
	date_and_time,
	ascribable_state_relationship,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	product_definition_relationship,
	effectivity,
	applied_effectivity_assignment,
	effectivity_relationship,
	event_occurrence,
	applied_event_occurrence_assignment,
	event_occurrence_relationship,
	applied_experience_assignment,
	experience,
	experience_type,
	experience_type_relationship,
	external_class_library,
	applied_external_identification_assignment,
	document_file,
	document_relationship,
	applied_identification_assignment,
	general_property,
	general_property_relationship,
	information_right,
	information_usage_right,
	usage_association,
	configuration_design,
	product,
	justification_group_assignment,
  justification_assignment,
	product_relationship,
	justification_support_assignment,
	language,
	attribute_language_assignment,
	location,
	applied_location_assignment,
	location_relationship,
	representation, applied_location_representation_assignment,
	action_resource,
	action_resource_relationship,
	product_concept_context,
	applied_name_assignment,
	observation,
	observation_consequence,
	observation_relationship,
	organization,
	applied_organization_assignment, applied_person_and_organization_assignment,
	applied_organization_type_assignment,
	organization_relationship,
	organization_type,
	person,
	person_and_organization,
	position_in_organization,
	applied_position_in_organization_assignment,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	position_in_organization_relationship,
	position_in_organization_assignment,
	position_in_organization_type,
	position_in_organization_type_assignment,
	product_category,
	product_related_product_category,
	product_category_relationship,
	product_concept,
	configuration_item,
	product_definition_group_assignment, breakdown_element_group_assignment,
	product_design_to_individual,
	product_design_version_to_individual,
	product_group,
	product_group_membership,
	product_group_relationship,
	product_planned_to_realized,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	organizational_project,
	applied_organizational_project_assignment,
	organizational_project_relationship,
	property_definition_representation,
	applied_qualification_type_assignment,
	qualification_type,
	qualification_type_relationship,
	measure_representation_item,
	representation_context,
	representation_item,
	action_resource_requirement,
	action_resource_requirement_relationship,
	resource_property,
	resource_property_representation,
	risk,
	risk_analysis,
	risk_assessment,
	risk_attitude,
	risk_communication,
	risk_consequence,
	risk_context,
	risk_control,
	risk_estimation,
	risk_evaluation,
	risk_identification,
	risk_owner_person_assignment,
	risk_owner_person_and_organization_assignment,
	risk_owner_organization_assignment,
	risk_perception,
	risk_perception_formation,
	risk_perception_relationship,
	risk_reduction,
	risk_relationship,
	risk_stakeholder,
	risk_status,
	risk_treatment,
	security_classification,
	applied_security_classification_assignment,
	selected_item_assignment,
	state_observed,
	ascribable_state,
	state_type,
	state_type_relationship,
	state_observed_relationship,
	state_observed_role,
	task_objective,
	time_interval,
	applied_time_interval_assignment,
	time_interval_relationship,
	time_interval_role,
	coordinated_universal_time_offset,
	person_type,
	applied_person_type_assignment,
	person_type_definition,
	person_type_definition_relationship,
	applied_person_type_definition_assignment,
	named_unit, derived_unit,
	measure_with_unit,
	product_definition_context,
	action_method_assignment,
	versioned_action_request,
	action_request_status);
END_TYPE;

TYPE ap233_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(applied_usage_right,
	product,
	breakdown_of,
	certification,
	condition,
	contract,
	information_usage_right,
	issue,
	applied_organizational_project_assignment,
	qualification_type,
	risk,
	security_classification);
END_TYPE;

TYPE ap233_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(risk_analysis,
	risk_consequence,
	risk_stakeholder);
END_TYPE;

TYPE ap233_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_item WITH
	(event_occurrence,
	risk_treatment);
END_TYPE;

TYPE ap233_oobservation_recorder_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON observation_recorder_item WITH
	(person,
	person_and_organization,
	applied_person_type_assignment);
END_TYPE;

TYPE ap233_observed_context_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON observed_context_item WITH
	(executed_action,
	action_method,
	action_property,
	applied_action_assignment,
	applied_action_method_assignment,
	applied_risk_impact_assignment,
	applied_risk_source_assignment,
	state_observed_assignment,
	state_type_assignment,
	applied_approval_assignment,
	property_definition,
	applied_certification_assignment,
	applied_contract_assignment,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_effectivity_assignment,
	applied_event_occurrence_assignment,
	issue,
	justification_group_assignment,  justification_assignment,
	action_resource,
	observation_consequence,
	product,
	product_concept,
	configuration_item,
	product_design_to_individual,
	product_group,
	product_planned_to_realized,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	organizational_project,
	applied_organizational_project_assignment,
	property_definition_representation,
	group,
	representation,
	representation_item,
	action_resource_requirement,
	action,
	resource_property,
	risk,
	risk_analysis,
	risk_assessment,
	risk_attitude,
	risk_consequence,
	risk_control,
	risk_estimation,
	risk_evaluation,
	risk_context,
	risk_perception,
	risk_reduction,
	risk_status,
	risk_treatment,
	applied_security_classification_assignment,
	state_observed,
	ascribable_state,
	state_type,
	state_type_relationship,
	state_observed_relationship,
	state_observed_role,
	task_method,
	task_objective,
	product_definition_relationship);
END_TYPE;

TYPE ap233_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(issue_consequence,
	risk_analysis,
	risk_assessment,
	risk_communication,
	risk_control,
	risk_estimation,
	risk_identification,
	risk_owner_person_assignment, risk_owner_person_and_organization_assignment, risk_owner_organization_assignment,
	task_method);
END_TYPE;

TYPE ap233_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(issue_consequence,
	risk_analysis,
	risk_assessment,
	risk_communication,
	risk_control,
	risk_estimation,
	risk_identification,
	risk_owner_person_assignment, risk_owner_person_and_organization_assignment, risk_owner_organization_assignment,
	task_method);
END_TYPE;

TYPE ap233_2_experience_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON experience_type_item WITH
	(applied_organization_assignment, applied_person_and_organization_assignment,
	applied_position_in_organization_assignment,
	group,
	risk_stakeholder,
	person_type,
	person_type_definition_relationship);
END_TYPE;

TYPE ap233_position_in_organization_group_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_group_item WITH
	(executed_action,
	action_method,
	event_occurrence,
	location,
	product_category,
	product_concept,
	configuration_item,
	product_group,
	organizational_project,
	action_resource_requirement,
	action,
	state_observed,
	action_method_assignment,
	versioned_action_request);
END_TYPE;

TYPE ap233_position_in_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_item WITH
	(executed_action,
	action_method,
	event_occurrence,
	location,
	product_category,
	product_concept,
	configuration_item,
	product_group,
	organizational_project,
	action_resource_requirement,
	action,
	state_observed,
	action_method_assignment,
	versioned_action_request);
END_TYPE;

TYPE ap233_position_in_organization_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_type_item WITH
	(executed_action,
	action_method,
	event_occurrence,
	location,
	product_category,
	product_concept,
	configuration_item,
	product_group,
	organizational_project,
	action_resource_requirement,
	action,
	state_observed,
	action_method_assignment,
	versioned_action_request);
END_TYPE;

TYPE ap233_probable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON probable_item WITH
	(executed_action,
	action_method,
	action_method_relationship,
	action_property,
	action_relationship,
	applied_action_method_assignment,
	state_observed_assignment,
	condition,
	applied_action_assignment,
	contract,
	applied_contract_assignment,
	general_property,
	general_property_relationship,
	action_resource,
	product_concept_context,
	product,
	product_definition_formation,
	product_definition,
	organizational_project,
	applied_organizational_project_assignment,
	representation,
	representation_item,
	action_resource_requirement,
	action,
	resource_property,
	state_observed,
	state_type,
	state_type_relationship,
	state_observed_relationship,
	task_objective,
	product_definition_relationship);
END_TYPE;

TYPE ap233_location_representation_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_representation_item WITH
	(executed_action,
	action_method,
	breakdown_of,
	applied_action_assignment,
	event_occurrence,
	product,
	attribute_language_assignment,
	lessons_learned,
	action_resource,
	product_concept_context,
	observation,
	risk_organization_stakeholder,
	organization_type,
	product_concept,
	organizational_project,
	representation,
	action_resource_requirement,
	action,
	resource_property,
	risk,
	risk_assessment,
	risk_attitude,
	risk_consequence,
	risk_estimation,
	risk_reduction,
	risk_stakeholder,
	risk_treatment,
	state_observed,
	state_type,
	state_observed_relationship,
	product_definition_relationship,
	versioned_action_request);
END_TYPE;

TYPE ap233_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(applied_risk_impact_assignment,
	applied_risk_source_assignment,
	lessons_learned,
	risk_person_stakeholder,
	product_definition,
	representation,
	risk_analysis,
	risk_communication,
	risk_control,
	risk_evaluation,
	risk_identification,
	risk_context,
	risk_reduction,
	risk_relationship,
	risk_stakeholder,
	product_definition_relationship);
END_TYPE;

(* TYPE ap233_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(executed_action,
	action_relationship,
	action_property,
	applied_risk_probability_assignment,
	applied_risk_impact_assignment,
	applied_risk_source_assignment,
	property_definition,
	action,
	applied_action_assignment,
	applied_action_method_assignment,
	general_property,
	general_property_relationship,
	information_usage_right,
	Observation,
	Observation_consequence,
	product,
	product_category,
	product_concept,
	configuration_item,
	product_group,
	product_definition_formation,
	product_definition_formation_relationship,
	property_definition_representation,
	group,
	representation,
	representation_context,
	representation_item,
	action_resource_requirement,
	action_resource,
	resource_property,
	risk_analysis,
	risk_assessment,
	risk_consequence,
	risk_control,
	risk_estimation,
	risk_evaluation,
	risk_context,
	risk_perception,
	risk_reduction,
	risk_treatment,
	security_classification,
	ascribable_state,
	task_objective,
	action_method,
	versioned_action_request);
END_TYPE; *)

ENTITY ap233_characterizable_action
  SUBTYPE OF (action, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_action_method
  SUBTYPE OF (action_method, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_action_property
  SUBTYPE OF (action_property, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_action_relationship
  SUBTYPE OF (action_relationship, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_action_resource
  SUBTYPE OF (action_resource, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_action_resource_requirement
  SUBTYPE OF (action_resource_requirement, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_applied_action_assignment
  SUBTYPE OF (applied_action_assignment, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_applied_action_method_assignment
  SUBTYPE OF (applied_action_method_assignment, characterized_object);
END_ENTITY;


(*ENTITY ap233_characterizable_applied_risk_impact_assignment
  SUBTYPE OF (applied_risk_impact_assignment, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_applied_risk_probability_assignment
  SUBTYPE OF (applied_risk_probability_assignment, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_applied_risk_source_assignment
  SUBTYPE OF (applied_risk_source_assignment, characterized_object);
END_ENTITY;*)


ENTITY ap233_characterizable_ascribable_state
  SUBTYPE OF (ascribable_state, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_configuration_item
  SUBTYPE OF (configuration_item, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_executed_action
  SUBTYPE OF (executed_action, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_general_property
  SUBTYPE OF (general_property, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_general_property_relationship
  SUBTYPE OF (general_property_relationship, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_group
  SUBTYPE OF (group, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_information_usage_right
  SUBTYPE OF (information_usage_right, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_product
  SUBTYPE OF (product, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_product_category
  SUBTYPE OF (product_category, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_product_concept
  SUBTYPE OF (product_concept, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_product_definition_formation
  SUBTYPE OF (product_definition_formation, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_product_definition_formation_relationship
  SUBTYPE OF (product_definition_formation_relationship, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_product_group
  SUBTYPE OF (product_group, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_property_definition
  SUBTYPE OF (property_definition, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_property_definition_representation
  SUBTYPE OF (property_definition_representation, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_representation
  SUBTYPE OF (representation, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_representation_context
  SUBTYPE OF (representation_context, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_representation_item
  SUBTYPE OF (representation_item, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_resource_property
  SUBTYPE OF (resource_property, characterized_object);
END_ENTITY;


(*ENTITY ap233_characterizable_risk_analysis
  SUBTYPE OF (risk_analysis, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_risk_assessment
  SUBTYPE OF (risk_assessment, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_risk_consequence
  SUBTYPE OF (risk_consequence, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_risk_context
  SUBTYPE OF (risk_context, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_risk_control
  SUBTYPE OF (risk_control, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_risk_estimation
  SUBTYPE OF (risk_estimation, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_risk_evaluation
  SUBTYPE OF (risk_evaluation, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_risk_perception
  SUBTYPE OF (risk_perception, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_risk_reduction
  SUBTYPE OF (risk_reduction, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_risk_treatment
  SUBTYPE OF (risk_treatment, characterized_object);
END_ENTITY;
*)

ENTITY ap233_characterizable_security_classification
  SUBTYPE OF (security_classification, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_task_objective
  SUBTYPE OF (task_objective, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_versioned_action_request	
  SUBTYPE OF (versioned_action_request, characterized_object);
END_ENTITY;

ENTITY ap233_characterizable_observation
  SUBTYPE OF (observation, characterized_object);
END_ENTITY;


ENTITY ap233_characterizable_observation_consequence
  SUBTYPE OF (observation_consequence, characterized_object);
END_ENTITY;


TYPE ap233_4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(applied_certification_assignment,
	applied_action_assignment,
	applied_contract_assignment,
	product,
	action_resource,
	organization,
	person_and_organization,
	product_definition_formation,
	product_definition,
	organizational_project,
	risk_analysis,
	risk_treatment,
	state_type,
	action_directive);
END_TYPE;

TYPE ap233_5_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_actual,
	action_method,
	action_request_solution,
	action_method_relationship,
	applied_action_request_assignment,
	applied_action_assignment,
	applied_action_method_assignment,
	applied_risk_impact_assignment,
	certification,
	applied_certification_assignment,
	state_type_assignment,
	contract,
	applied_contract_assignment,
	directed_action,
	event_occurrence,
	applied_event_occurrence_assignment,
	lessons_learned,
	observation,
	observation_consequence,
	representation,
	product,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	organizational_project,
	applied_organizational_project_assignment,
	representation_item,
	action,
	action_property,
	action_relationship,
	risk,
	risk_analysis,
	risk_assessment,
	risk_communication,
	risk_control,
	risk_estimation,
	risk_evaluation,
	risk_consequence,
	risk_context,
	risk_perception,
	risk_reduction,
	risk_treatment,
	applied_security_classification_assignment,
	state_observed,
	ascribable_state,
	state_type,
	state_type_relationship,
	state_observed_relationship,
	state_observed_role,
	task_objective,
	action_method_assignment);
END_TYPE;

TYPE ap233_8_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_method,
	event_occurrence,
	action_resource,
	person_and_organization,
	applied_position_in_organization_group_assignment,
	action_directive);
END_TYPE;

TYPE ap233_6_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_directive);
END_TYPE;

TYPE ap233_risk_impact_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON risk_impact_item WITH
	(executed_action,
	action_method,
	group,
	action_property,
	action_relationship,
	applied_action_assignment,
	state_observed_assignment,
	approval,
	breakdown_context,
	breakdown_of,
	condition,
	ascribable_state_relationship,
	event_occurrence,
	event_occurrence_relationship,
	general_property,
	general_property_relationship,
	issue,
	issue_consequence,
	action_resource,
	action_resource_relationship,
	product_concept_context,
	organization,
	applied_organization_assignment, applied_person_and_organization_assignment,
	person,
	person_and_organization,
	product,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	organizational_project,
	applied_organizational_project_assignment,
	representation,
	representation_item,
	action_resource_requirement,
	action,
	resource_property,
	state_observed,
	ascribable_state,
	state_type_relationship,
	state_observed_relationship,
	applied_action_method_assignment,
	task_objective,
	product_definition_relationship);
END_TYPE;

TYPE ap233_risk_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON risk_source_item WITH
	(action_property,
	action_relationship,
	state_observed_assignment,
	approval,
	approval_person_organization,
	property_definition,
	breakdown_context,
	breakdown_of,
	applied_certification_assignment,
	condition,
	applied_action_assignment,
	contract,
	applied_contract_assignment,
	ascribable_state_relationship,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_effectivity_assignment,
	event_occurrence,
	applied_event_occurrence_assignment,
	event_occurrence_relationship,
	applied_experience_assignment,
	experience,
	document_file,
	general_property,
	general_property_relationship,
	information_right,
	information_usage_right,
	product,
	justification_group_assignment,  justification_assignment,
	product_relationship,
	justification_support_assignment,
	action_resource,
	action_resource_relationship,
	product_concept_context,
	observation,
	observation_consequence,
	observation_relationship,
	organization,
	applied_organization_assignment, applied_person_and_organization_assignment,
	person,
	person_and_organization,
	group,
	position_in_organization,
	applied_position_in_organization_assignment,
	applied_position_in_organization_group_assignment,
	applied_position_in_organization_type_assignment,
	position_in_organization_relationship,
	position_in_organization_assignment,
	position_in_organization_type,
	position_in_organization_type_assignment,
	product_concept,
	product_design_to_individual,
	product_design_version_to_individual,
	product_group,
	product_group_relationship,
	product_planned_to_realized,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	organizational_project,
	applied_organizational_project_assignment,
	organizational_project_relationship,
	applied_qualification_type_assignment,
	qualification_type,
	representation,
	representation_item,
	action_resource_requirement,
	action_method,
	action,
	resource_property,
	selected_item,
	selected_item_assignment,
	state_observed,
	ascribable_state,
	state_type,
	state_type_relationship,
	state_observed_relationship,
	applied_action_method_assignment,
	task_objective,
	person_type,
	applied_person_type_assignment,
	person_type_definition,
	person_type_definition_relationship,
	applied_person_type_definition_assignment,
	product_definition_relationship,
	action_method_assignment);
END_TYPE;

TYPE ap233_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(action_property,
	property_definition,
	event_occurrence,
	action_resource,
	product,
	risk_communication,
	risk_consequence,
	risk_treatment);
END_TYPE;

TYPE ap233_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(applied_risk_impact_assignment,
	product_definition,
	document_file,
	product,
	product_definition_formation,
	event_occurrence,
	applied_external_identification_assignment,
--	issue_reference,
	lessons_learned,
	observation_consequence,
	risk,
	risk_attitude,
	risk_control,
	risk_consequence,
	risk_context,
	risk_treatment,
	state_observed);
END_TYPE;

TYPE ap233_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_observed_of_item WITH
	(applied_risk_impact_assignment,
	state_type_assignment,
	product_definition_formation, product_definition,
	product,
	event_occurrence,
	document_file,
	applied_external_identification_assignment,
	observation,
	observation_consequence,
	risk_analysis,
	risk_attitude,
	risk_communication,
	risk_control,
	risk_evaluation,
	risk_consequence,
	risk_perception,
	risk_treatment,
	state_observed,
	ascribable_state,
	state_type,
	state_type_relationship,
	state_observed_relationship,
	state_observed_role,
	person_type);
END_TYPE;

TYPE ap233_person_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_type_item WITH
	(executed_action,
	action_method,
	action_request_solution,
	applied_risk_impact_assignment,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_experience_assignment,
	experience,
	experience_type,
	observation_consequence,
	product,
	product_definition_formation,
	organizational_project,
	applied_organizational_project_assignment,
	risk_analysis,
	risk_treatment,
	product_definition_relationship,
	action_method_assignment,
	versioned_action_request);
END_TYPE;

TYPE ap233_7_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(organizational_project);
END_TYPE;

TYPE ap233_9_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_method,
	risk_analysis,
	risk_assessment,
	risk_evaluation,
	risk_reduction,
	risk_treatment);
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\project_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2006/03/24 19:05:05 thendrix Exp $
 ISO TC184/SC4/WG12 N4264 - ISO/TS 10303-1061 Project - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2112
*) 


SCHEMA Project_mim; 

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM Date_time_mim;    -- ISO/TS 10303-1010

USE FROM Event_assignment_mim;    -- ISO/TS 10303-1364

USE FROM Event_mim;    -- ISO/TS 10303-1064

USE FROM management_resources_schema   -- ISO 10303-41
  (organizational_project_assignment,
   organizational_project_role); 

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011

USE FROM person_organization_schema   -- ISO 10303-41
  (organizational_project,
   organizational_project_relationship); 


TYPE project_as_date_and_time_item = SELECT BASED_ON date_and_time_item WITH 
   (organizational_project);
END_TYPE; 

TYPE project_as_date_item = SELECT BASED_ON date_item WITH 
   (organizational_project);
END_TYPE; 

TYPE project_event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON event_occurrence_item WITH 
   (organizational_project);
END_TYPE; 

TYPE project_item = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY applied_organizational_project_assignment
  SUBTYPE OF (organizational_project_assignment);
  items : SET[1:?] OF project_item;
END_ENTITY;

END_SCHEMA;  -- Project_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\project_breakdown_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.9 2007/03/28 18:11:25 philsp Exp $
 ISO TC184/SC4/WG12 N4605 - ISO/WD 10303-1436 Project breakdown - EXPRESS MIM
*)
(*            UNDER DEVELOPMENT by H.P. Frisch
	      NOTE:  Many duplications exist, they need to be auto-removed.  
	      	Auto-condensation of extensible type lists also need to be done.  
*)
SCHEMA Project_breakdown_mim;
  USE FROM Configuration_item_mim;
  USE FROM Position_in_organization_mim;
  USE FROM Product_breakdown_mim;
  USE FROM Product_group_mim;
  USE FROM Product_relationship_mim;
  USE FROM Product_version_relationship_mim;
  USE FROM Schedule_mim;
  USE FROM Selected_item_mim;


TYPE pb_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(product_group);
END_TYPE;


TYPE pb_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition,
	breakdown_element_usage,
	product_definition_formation,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view,
	product_group);
END_TYPE;

TYPE pb_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(product_group);
END_TYPE;


TYPE pb_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(product,
	product_definition,
	product_definition_formation,
	product_as_individual,
	product_as_individual_view,
	product_as_planned,
	product_as_realized);
END_TYPE;


TYPE pb_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(product,
	product_definition,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	product_as_individual,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_group,
	product_group_membership,
	product_group_relationship,
	product_planned_to_realized);
END_TYPE;


TYPE pb_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(product,
	product_as_individual,
	product_as_planned,
	product_as_realized,
	product_group,
	product_group_relationship);
END_TYPE;


TYPE pb_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(product,
	breakdown_context,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	breakdown_of,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized);
END_TYPE;


TYPE pb_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_classification_item WITH
	(breakdown_context,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage);
END_TYPE;


TYPE pb2_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(product_definition_group_assignment, breakdown_element_group_assignment
	);
END_TYPE;


TYPE pb3_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(product_as_individual,
	product_definition_group_assignment, breakdown_element_group_assignment
	);
END_TYPE;


TYPE pb_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(product_definition_group_assignment, breakdown_element_group_assignment,
	product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;

TYPE pb5_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product_as_individual,
	product_definition_group_assignment, breakdown_element_group_assignment
	);
END_TYPE;


TYPE pb_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(product,
	product_definition_formation, product_definition,
	product_as_individual,
	product_as_planned,
	product_as_realized,
	product_group,
	product_group_relationship);
END_TYPE;


TYPE pb_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_group,
	product_group_membership,
	product_group_relationship,
	product_planned_to_realized);
END_TYPE;

TYPE pb_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_group,
	product_group_membership,
	product_group_relationship,
	product_planned_to_realized);
END_TYPE;


TYPE pb_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(product,
	breakdown_context,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_group,
	product_group_membership,
	product_group_relationship,
	product_planned_to_realized);
END_TYPE;


TYPE pb_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(product,
	product_definition,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	breakdown_of,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized);
END_TYPE;


TYPE pb_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(product,
	product_definition,
	product_definition_formation,
	product_as_planned,
	product_as_realized,
	product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;


TYPE pb_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
	(product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation, product_definition,
	product_as_individual,
	product_as_individual_view,
	product_as_planned,
	product_as_realized);
END_TYPE;


TYPE pb_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_item WITH
	(product_group);
END_TYPE;


TYPE pb_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_as_individual,
	product_as_planned,
	product_as_realized,
	product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;

TYPE pb_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_as_individual,
	product_as_planned,
	product_as_realized,
	product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;


TYPE pb_position_in_organization_group_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_group_item WITH
	(product,
	product_definition_formation,
	product_definition);
END_TYPE;


TYPE pb_position_in_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_item WITH
	(product,
	product_definition_formation,
	product_definition);
END_TYPE;


TYPE pb_position_in_organization_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_type_item WITH
	(product,
	product_definition_formation,
	product_definition);
END_TYPE;


TYPE pb_product_definition_or_product_definition_relationship = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON product_definition_or_product_definition_relationship WITH
	(product_group);
END_TYPE;


TYPE pb_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(product,
	product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;


TYPE pb4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product_as_individual,
	product_as_individual_version,
	product_as_individual_view,
	product_group);
END_TYPE;


TYPE pb2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product_as_individual,
	product_as_individual_version,
	product_as_individual_view,
	product_group);
END_TYPE;


TYPE pb_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(product,
	product_definition,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	product_as_individual,
	product_as_individual_view,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_group,
	product_group_membership,
	product_group_relationship);
END_TYPE;


TYPE pb_selected_item_context_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON selected_item_context_items WITH
	(product,
	product_as_individual,
	product_as_individual_version);
END_TYPE;


TYPE pb_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(product_definition,
	product_definition_formation,
	product_as_individual,
	product_as_individual_view,
	product_as_planned,
	product_as_realized,
	product_group);
END_TYPE;


TYPE pb_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_observed_of_item WITH
	(product,
	product_definition,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	product_as_individual,
	product_as_individual_view,
	product_as_planned,
	product_as_realized,
	product_group);
END_TYPE;


TYPE pb_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view,
	product_group,
	product_group_relationship);
END_TYPE;

TYPE pb_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view,
	product_group,
	product_group_relationship);
END_TYPE;



TYPE pb7_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition_formation, product_definition,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view,
	product_group);
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\project_management_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.8 2007/03/28 18:15:58 philsp Exp $
 ISO TC184/SC4/WG12 N - ISO/WD 10303-1433 Project management - EXPRESS MIM
*)

SCHEMA Project_management_mim;
  USE FROM Organization_structure_mim;
  USE FROM Project_breakdown_mim;
  USE FROM Work_structure_mim;

--   Push up from (pmri) Project_management_resource_information;

TYPE prjm_pmri_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(product_concept,
	configuration_item,
	product_definition_formation_relationship,
	product_definition_relationship);
END_TYPE;

TYPE prjm_pmri_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product_concept,
	configuration_item,
	product_definition_formation_relationship,
	product_definition_relationship);
END_TYPE;

TYPE prjm_pmri_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(product_definition_relationship);
END_TYPE;

TYPE prjm_pmri_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(product_concept,
	configuration_item,
	product_relationship,
	product_definition_relationship);
END_TYPE;

TYPE prjm_pmri_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(product_concept,
	configuration_item,
	product_relationship,
	product_definition_formation_relationship,
	product_definition_relationship);
END_TYPE;

TYPE prjm_pmri_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(configuration_item,
	product_definition_formation_relationship,
	product_definition_relationship);
END_TYPE;

TYPE prjm_pmri_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(product_concept_context,
	product_concept,
	configuration_item,
	product_definition_formation_relationship,
	product_relationship,
	product_definition_relationship);
END_TYPE;

TYPE prjm_pmri_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_classification_item WITH
	(product_concept_context,
	product_concept,
	product_relationship,
	product_definition_formation_relationship,
	product_definition_relationship);
END_TYPE;

TYPE prjm_pmri2_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(product_definition_relationship);
END_TYPE;

TYPE prjm_pmri3_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(product_concept,
	product_definition_relationship);
END_TYPE;

TYPE prjm_pmri_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(product_definition_relationship);
END_TYPE;

TYPE prjm_pmri3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(applied_identification_assignment,
	product_concept,
	product_definition_relationship);
END_TYPE;


TYPE prjm_pmri_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(configuration_item);
END_TYPE;

TYPE prjm_pmri_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(product_concept,
	configuration_item,
	product_relationship,
	product_definition_formation_relationship);
END_TYPE;

TYPE prjm_pmri_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(product_concept,
	configuration_item,
	product_relationship,
	product_definition_formation_relationship);
END_TYPE;

TYPE prjm_pmri_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(product_concept_context,
	product_concept,
	configuration_item,
	product_relationship);
END_TYPE;


TYPE prjm_pmri_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(configuration_item,
	product_relationship);
END_TYPE;


TYPE prjm_ap233_event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON event_occurrence_item WITH
	(executed_action,
	approval,
	contract,
	product,
	observation,
	action_resource_requirement,
	versioned_action_request);
END_TYPE;

TYPE prjm_pmri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(product_concept_context,
	product_concept,
	configuration_item,
	product_relationship,
	product_definition_usage);
END_TYPE;


TYPE prjm_pmri_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
	(configuration_item);
END_TYPE;

TYPE prjm_pmri_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(product_relationship,
	product_definition_formation_relationship);
END_TYPE;

TYPE prjm_pmri_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(product_relationship,
	product_definition_formation_relationship);
END_TYPE;


TYPE prjm_pmri_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(configuration_item);
END_TYPE;


TYPE prjm_ap233_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_actual,
	action_method,
	action_request_solution,
	action_method_relationship,
	applied_action_request_assignment,
	applied_action_assignment,
	applied_action_method_assignment,
	certification,
	applied_certification_assignment,
	state_type_assignment,
	contract,
	applied_contract_assignment,
	directed_action,
	event_occurrence,
	applied_event_occurrence_assignment,
	observation,
	observation_consequence,
	representation,
	product,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	organizational_project,
	applied_organizational_project_assignment,
	representation_item,
	action,
	action_property,
	action_relationship,
	applied_security_classification_assignment,
	state_observed,
	ascribable_state,
	state_type,
	state_type_relationship,
	state_observed_relationship,
	state_observed_role,
	task_objective,
	action_method_assignment);
END_TYPE;

TYPE prjm_pmri_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(configuration_item,
	product_relationship);
END_TYPE;


TYPE prjm_pmri_selected_item_context_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON selected_item_context_items WITH
	(product_concept,
	configuration_item);
END_TYPE;


TYPE prjm_pmri_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(product_concept,
	configuration_item,
	product_definition_relationship);
END_TYPE;


TYPE prjm_pmri_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_observed_of_item WITH
	(product_concept,
	configuration_item,
	product_definition_relationship);
END_TYPE;


TYPE prjm_pmri_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(configuration_item,
	product_relationship);
END_TYPE;

TYPE prjm_pmri_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(configuration_item,
	product_relationship);
END_TYPE;


TYPE prjm_pb_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(product_as_individual,
	product_as_planned,
	product_as_realized,
	product_group,
	product_group_relationship);
END_TYPE;


END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\project_management_resource_information_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.10 2007/04/02 18:37:01 philsp Exp $
 ISO TC184/SC4/WG12 N4608 - ISO/WD 10303-1434 Project management resource information - EXPRESS MIM
*)
(*            UNDER DEVELOPMENT by H.P. Frisch
	      NOTE:  Many duplications exist, they need to be auto-removed.  
	      	Auto-condensation of extensible type lists also need to be done.  
*)
SCHEMA Project_management_resource_information_mim;
  USE FROM Document_structure_mim;
  USE FROM External_class_mim;
  USE FROM Position_in_organization_mim;
  USE FROM Schedule_mim;
  USE FROM Selected_item_mim;
  USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 



--		the set of action_items that are associated with the assigned_activity.
--			action_items

TYPE pmri_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(contract,
	general_property,
	location,
	representation, applied_location_representation_assignment, address,
	product,
	product_definition_formation,
	product_definition);
END_TYPE;

--		the set of data associated to the assigned_activity_method.
--			action_method_items

TYPE pmri_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(contract,
	product,
	product_definition_formation,
	document_file,
	location,
	applied_location_representation_assignment,
	product_definition,
	organizational_project);
END_TYPE;

--		the set of things that are affected by the Work_request.
--			action_request_item

TYPE pmri_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(contract,
	product,
	product_definition,
	product_definition_formation,
	document_file);
END_TYPE;

--		the inherited items  attribute shall not contain any element that is not aliasable
--			aliasable_item

TYPE pmri_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(approval,
	approval_status,
	certification,
	applied_organization_assignment, applied_person_and_organization_assignment,
	organizational_project,
	applied_security_classification_assignment);
END_TYPE;

--		the activity or product data to which the Approval is assigned.
--			approval_item

TYPE pmri_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(certification,
	condition,
	applied_action_method_assignment,
	effectivity,
	applied_identification_assignment,
	general_property,
	general_property_relationship,
	product_definition,
	selected_item_assignment,
	product_definition_context);
END_TYPE;

--		the activity or product data to which the Certification is assigned.
--			certification_item

TYPE pmri_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(product,
	product_definition_formation,
	organizational_project);
END_TYPE;

--		the object of which the Activity_property identifies a characteristic.
--			characterized_action_definition

(*TYPE pmri_characterized_activity_definition = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_activity_definition WITH
	(condition,
	action_method_relationship);
END_TYPE;*)

--		the set or more instances of types listed in classification_item that are classified.
--			classification_item

TYPE pmri_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(conversion_based_unit,
	derived_unit,
	external_class_library,
	applied_external_identification_assignment,
	applied_location_assignment,
	representation, applied_location_representation_assignment, address,
	general_property,
	general_property_relationship,
	product,
	product_category,
	product_definition_formation,
	product_definition,
	measure_representation_item,
	selected_item,
	selected_item_assignment,
	uncertainty_measure_with_unit,
	named_unit, 
	measure_with_unit,
	product_definition_context);
END_TYPE;

--		an instance of one of the types of attribute_classification_item.
--			attribute_classification_item

TYPE pmri_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_classification_item WITH
	(approval,
	applied_approval_assignment,
	approval_relationship,
	approval_status,
	approval_person_organization,
	certification,
	applied_certification_assignment,
	condition,
	applied_action_method_assignment,
	action_method_relationship,
	context_dependent_unit,
	contract,
	date_assignment, date_and_time_assignment,
	document_file,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	product_definition_relationship,
	applied_external_identification_assignment,
	effectivity,
	applied_effectivity_assignment,
	document_relationship,
	representation,
	applied_identification_assignment,
	general_property,
	general_property_relationship,
	product,
	justification_group_assignment,  justification_assignment,
	justification_support_assignment,
	language,
	location,
	location_relationship,
	applied_organization_assignment, applied_person_and_organization_assignment,
	applied_location_representation_assignment,
	product_category,
	product_definition_formation,
	product_definition,
	applied_organizational_project_assignment,
	organizational_project_relationship,
	measure_representation_item,
	representation_context,
	representation_item,
	security_classification,
	time_interval_relationship,
	uncertainty_measure_with_unit,
	named_unit, derived_unit,
	measure_with_unit,
	product_definition_context);
END_TYPE;

--		the product or activity data to which the Condition_evaluation has been assigned.
--			action_items

TYPE pmri2_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(approval,
	applied_approval_assignment,
	applied_document_reference,  applied_document_usage_constraint_assignment
	);
END_TYPE;

--		the product or activity data which acted as a parameter to the Condition_evaluation.
--			action_items

TYPE pmri3_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(approval,
	applied_approval_assignment,
	calendar_date,
	applied_certification_assignment,
	applied_classification_assignment,
	applied_contract_assignment,
	date_assignment, date_and_time_assignment,
	date_and_time,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_identification_assignment,
	applied_organization_assignment, applied_person_and_organization_assignment,
	product,
	product_related_product_category,
	product_definition_formation,
	product_definition,
	representation);
END_TYPE;

--		the product or activity data to which the Condition is being assigned.
--			action_method_items

TYPE pmri_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(approval,
	applied_approval_assignment,
	applied_document_reference,  applied_document_usage_constraint_assignment
	);
END_TYPE;

--		the product or activity data which acts as a parameter to the condition.
--			action_method_items

TYPE pmri3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(approval,
	applied_approval_assignment,
	calendar_date,
	applied_certification_assignment,
	applied_classification_assignment,
	applied_contract_assignment,
	date_assignment, date_and_time_assignment,
	date_and_time,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_organization_assignment, applied_person_and_organization_assignment,
	product,
	product_related_product_category,
	product_definition_formation,
	product_definition,
	representation);
END_TYPE;

--		the activity or product data to which the Contract is assigned.
--			contract_item

TYPE pmri_contract_item = EXTENSIBLE SELECT BASED_ON contract_item WITH
	(external_class_library,
	organization_item, person_and_organization_item,
	product_definition_formation);
END_TYPE;

--		the activity or product data to which the Calendar_date or Date_time is assigned.
--			date_and_time_item

TYPE pmri_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(condition,
	applied_action_method_assignment,
	applied_identification_assignment,
	general_property,
	general_property_relationship,
	applied_location_assignment,
	representation, applied_location_representation_assignment, address,
	product_definition_formation,
	product_definition,
	selected_item,
	product_definition_context);
END_TYPE;

TYPE pmri_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(condition,
	applied_action_method_assignment,
	applied_identification_assignment,
	general_property,
	general_property_relationship,
	applied_location_assignment,
	representation, applied_location_representation_assignment, address,
	product_definition_formation,
	product_definition,
	selected_item,
	product_definition_context);
END_TYPE;

--		the document_reference_item for the applied_document_reference,  applied_document_usage_constraint_assignment.
--			document_reference_item

TYPE pmri_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(applied_external_identification_assignment,
	location,
	applied_location_assignment,
	location_relationship,
	applied_location_representation_assignment,
	product_category,
	representation,
	selected_item);
END_TYPE;

--		the set of effectivity_item whose effectivity is characterized by this entity.
--			effectivity_item

TYPE pmri_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(product_definition,
	product_definition_relationship,
	document_relationship,
	applied_location_assignment,
	selected_item_assignment);
END_TYPE;

--		the data to which the identification is assigned.
--			identification_item

TYPE pmri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(document_file,
	external_class_library,
	applied_external_identification_assignment,
	general_property,
	general_property_relationship,
	location,
	representation, applied_location_representation_assignment, address,
	product_category,
	product_definition_context);
END_TYPE;

--		the data item for which Justification  is provided.
--			justification_item

TYPE pmri_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(product_definition_relationship,
	document_relationship,
	applied_location_assignment);
END_TYPE;

--		the item which provides evidential support for a Justification.
--			justification_support_item

TYPE pmri_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(product_definition_relationship,
	document_relationship,
	location,
	applied_location_assignment,
	product_definition_context);
END_TYPE;

--		the item that is assigned to the specified location.
--			location_item

TYPE pmri_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_item WITH
	(product,
	product_definition,
	product_definition_formation,
	document_file,
	organizational_project);
END_TYPE;

--		the activity or product data to which the organization or person in an organization is assigned.
--			person_and_organization_item

TYPE pmri_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(condition,
	applied_action_method_assignment,
	applied_location_assignment,
	selected_item,
	selected_item_assignment);
END_TYPE;

TYPE pmri_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(condition,
	applied_action_method_assignment,
	applied_location_assignment,
	selected_item,
	selected_item_assignment);
END_TYPE;

--		 the activity or product data to which the Position_group is assigned.
--			position_in_organization_group_item

TYPE pmri_position_in_organization_group_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_group_item WITH
	(approval_person_organization,
	product_definition,
	applied_organization_assignment, applied_person_and_organization_assignment);
END_TYPE;

--		 the activity or product data to which the Position  is assigned
--			position_in_organization_item

TYPE pmri_position_in_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_item WITH
	(approval_person_organization,
	product_definition,
	applied_organization_assignment, applied_person_and_organization_assignment);
END_TYPE;

--		 the activity or product data to which the Position_type  is assigned
--			position_in_organization_type_item

TYPE pmri_position_in_organization_type_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON position_in_organization_type_item WITH
	(approval_person_organization,
	product_definition,
	applied_organization_assignment, applied_person_and_organization_assignment);
END_TYPE;

--		the set of instances of entity types listed in project_item, that are associated with the Project. 
--			project_item

TYPE pmri_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(general_property);
END_TYPE;

--		the element to which the property is assigned.
--			property_assignment_select

(*TYPE pmri_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_location_assignment,
	applied_organization_assignment, applied_person_and_organization_assignment,
	product_definition,
	organizational_project);
END_TYPE;*)

ENTITY pmri_characterizable_applied_document_reference  
  SUBTYPE OF (applied_document_reference, characterized_object);
END_ENTITY;

  
ENTITY pmri_characterizable_applied_document_usage_constraint_assignment
  SUBTYPE OF (applied_document_usage_constraint_assignment, characterized_object);
END_ENTITY;


ENTITY pmri_characterizable_applied_location_assignment
  SUBTYPE OF (applied_location_assignment, characterized_object);
END_ENTITY;


ENTITY pmri_characterizable_applied_organization_assignment 
  SUBTYPE OF (applied_organization_assignment, characterized_object);
END_ENTITY;

 
ENTITY pmri_characterizable_applied_person_and_organization_assignment
  SUBTYPE OF (applied_person_and_organization_assignment, characterized_object);
END_ENTITY;


ENTITY pmri_characterizable_organizational_project
  SUBTYPE OF (organizational_project, characterized_object);
END_ENTITY;


ENTITY pmri_characterizable_product_definition
  SUBTYPE OF (product_definition, characterized_object);
END_ENTITY;




--		the resource assignment item to which the resource item is assigned.
--			action_method_items

TYPE pmri6_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(contract,
	location,
	organizational_project);
END_TYPE;

--		the items that are designated as resources within the application context. 
--			action_method_items

TYPE pmri4_action_method_items= EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition,
	product_definition_formation,
	document_file,
	location);
END_TYPE;

--		the activity or product data to which the Security_classification is assigned.
--			security_classification_item

TYPE pmri_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(product_definition_formation,
	product_definition,
	organizational_project_relationship);
END_TYPE;

--		the context in which the product or activity data is being identified as being a Selected_item.
--			selected_item_context_items	

TYPE pmri_selected_item_context_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON selected_item_context_items WITH
	(contract,
	organizational_project);
END_TYPE;

--		the product or activity data that is being designated as a Selected_item.
--			selected_item_select

TYPE pmri_selected_item_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON selected_item_select WITH
	(product,
	product_definition_formation);
END_TYPE;

--		the object whose State_definition is given by the described_state_definition.
--			state_type_of_item

TYPE pmri_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(certification,
	contract,
	location,
	product,
	product_category,
	product_definition_formation,
	organizational_project,
	security_classification);
END_TYPE;

--		the subject which has or is in a State.
--			state_observed_of_item

TYPE pmri_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_observed_of_item WITH
	(certification,
	contract,
	document_file,
	location,
	security_classification);
END_TYPE;

--		the instance for which the Language of the considered_attribute has been identified.
--			multi_language_attribute_item

TYPE pmri_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(condition,
	applied_action_method_assignment,
	action_method_relationship,
	location,
	applied_location_assignment,
	location_relationship,
	applied_location_representation_assignment,
	measure_representation_item,
	representation);
END_TYPE;

TYPE pmri_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(condition,
	applied_action_method_assignment,
	action_method_relationship,
	location,
	applied_location_assignment,
	location_relationship,
	applied_location_representation_assignment,
	measure_representation_item,
	representation);
END_TYPE;

--	Work_output (a statement of output resulting from an activity 
-- 	or a task) has detail representation provided by
--			action_method_items

TYPE pmri5_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(contract,
	product,
	product_definition,
	product_definition_formation,
	document_file,
	location,
	applied_organizational_project_assignment);
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\property_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.14 2006/03/24 19:06:27 thendrix Exp $
 ISO TC184/SC4/WG12 N4375 - ISO/TS 10303-1030 Property assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2129
*) 


SCHEMA Property_assignment_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute,
   id_attribute_select); 

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM Independent_property_mim;    -- ISO/TS 10303-1036

USE FROM product_property_definition_schema   -- ISO 10303-41
  (general_property_association,
   property_definition); 

USE FROM product_property_representation_schema   -- ISO 10303-41
  (property_definition_representation); 


END_SCHEMA;  -- Property_assignment_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\qualifications_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.6 2004/11/19 21:37:38 robbod Exp $
 ISO TC184/SC4/WG12 N3116 - ISO/TS 10303-1244 Qualifications - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2412
*) 


SCHEMA Qualifications_mim;

USE FROM Certification_mim;    -- ISO/TS 10303-1044

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM management_resources_schema   -- ISO 10303-41
  (qualification_type_assignment); 

USE FROM Person_organization_assignment_mim;    -- ISO/TS 10303-1013

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011

USE FROM person_organization_schema   -- ISO 10303-41
  (person); 

USE FROM qualifications_schema   -- ISO 10303-41
  (qualification_type,
   qualification_type_relationship); 


TYPE person_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT
   (person);
END_TYPE; 

TYPE qualification_type_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH 
   (applied_qualification_type_assignment);
END_TYPE; 

TYPE qualification_type_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (qualification_type);
END_TYPE; 

TYPE qualification_type_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH 
   (applied_qualification_type_assignment);
END_TYPE; 

TYPE qualification_type_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH 
   (applied_qualification_type_assignment);
END_TYPE; 

TYPE qualification_type_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH 
   (applied_qualification_type_assignment, 
    qualification_type);
END_TYPE; 

ENTITY applied_qualification_type_assignment
  SUBTYPE OF (qualification_type_assignment);
  items : SET[1:?] OF person_organization_item;
END_ENTITY;

END_SCHEMA;  -- Qualifications_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\required_resource_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.13 2004/11/19 21:37:39 robbod Exp $
 ISO TC184/SC4/WG12 N3119 - ISO/TS 10303-1267 Required resource - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2415
*) 


SCHEMA Required_resource_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_method); 

USE FROM Activity_method_assignment_mim;    -- ISO/TS 10303-1249

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM management_resources_schema   -- ISO 10303-41
  (action_method_assignment,
   action_method_role); 

USE FROM process_property_schema   -- ISO 10303-49
  (action_resource_requirement,
   action_resource_requirement_relationship,
   characterized_action_definition,
   characterized_resource_definition,
   requirement_for_action_resource,
   resource_property,
   resource_requirement_type); 

USE FROM Resource_item_mim;    -- ISO/TS 10303-1268

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054


TYPE required_resource_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (action_method, 
    action_resource_requirement, 
    action_resource_requirement_relationship);
END_TYPE; 

END_SCHEMA;  -- Required_resource_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\requirement_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2004/11/19 21:37:39 robbod Exp $
 ISO TC184/SC4/WG12 N3125 - ISO/TS 10303-1233 Requirement assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2346
*) 


SCHEMA Requirement_assignment_mim;

USE FROM group_schema   -- ISO 10303-41
  (group); 

USE FROM management_resources_schema   -- ISO 10303-41
  (group_assignment); 

USE FROM product_definition_schema   -- ISO 10303-41
  (product_definition); 

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

USE FROM Requirement_view_definition_mim;    -- ISO/TS 10303-1141


TYPE requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

TYPE requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY assigned_requirement
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : requirement_assignment;
  items : SET[1:1] OF product_definition;
END_ENTITY;

ENTITY requirement_assigned_object
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : requirement_assignment;
  items : SET[1:1] OF requirement_assigned_item;
END_ENTITY;

ENTITY requirement_assignment
  SUBTYPE OF (characterized_object, group);
END_ENTITY;

ENTITY requirement_source
  SUBTYPE OF (group);
END_ENTITY;

ENTITY source_for_requirement
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : requirement_source;
  items : SET[1:1] OF requirement_source_item;
END_ENTITY;

ENTITY sourced_requirement
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : requirement_source;
  items : SET[1:1] OF product_definition;
END_ENTITY;

END_SCHEMA;  -- Requirement_assignment_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\requirement_identification_and_version_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.15 2004/11/19 21:37:39 robbod Exp $
 ISO TC184/SC4/WG12 N3128 - ISO/TS 10303-1140 Requirement identification and version - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2348
*) 


SCHEMA Requirement_identification_and_version_mim;

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

USE FROM Management_resource_information_mim;    -- ISO/TS 10303-1288

USE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_definition_formation); 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Product_version_relationship_mim;    -- ISO/TS 10303-1020


TYPE requirement_identification_and_version_mri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_identification_item WITH 
   (product, 
    product_definition_formation);
END_TYPE; 

END_SCHEMA;  -- Requirement_identification_and_version_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\requirement_management_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.17 2007/03/28 17:52:02 philsp Exp $
   ISO TC184/SC4/WG12 N4611- ISO/WD 10303-1348 Requirement_management - EXPRESS ARM
    Supersedes ISO TC184/SC4/WG3 N2352
*) 

SCHEMA Requirement_management_mim;

USE FROM Classification_assignment_mim;

USE FROM Document_assignment_mim;

USE FROM Document_properties_mim;

USE FROM Effectivity_application_mim;

USE FROM Information_rights_mim;

USE FROM Product_view_definition_properties_mim;

USE FROM Requirement_assignment_mim;

USE FROM Requirement_view_definition_relationship_mim;

USE FROM date_time_schema   
  (local_time); 

TYPE requirement_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
  (requirement_assignment,
   requirement_source,
   product_definition_formation_relationship,
   product_definition_relationship);
END_TYPE;

TYPE requirement_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
  (product,
   product_definition_formation);
END_TYPE;

TYPE requirement_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
  (address,
   person_and_organization_address, organizational_address,
   applied_usage_right,
   approval,
   applied_approval_assignment,
   approval_relationship,
   approval_status,
   approval_person_organization,
   property_definition,
   multi_language_attribute_assignment,
   calendar_date,
   certification,
   applied_certification_assignment,
   class,
   context_dependent_unit,
   contract,
   applied_contract_assignment,
   date_assignment, date_and_time_assignment,
   date_and_time,
   product_definition,
   document_file,
   product,
   applied_document_reference, applied_document_usage_constraint_assignment,
   applied_external_identification_assignment,
   product_definition_formation,
   effectivity,
   applied_effectivity_assignment,
   effectivity_relationship,
   event_occurrence,
   applied_event_occurrence_assignment,
   event_occurrence_relationship,
   applied_identification_assignment,
   general_property,
   general_property_relationship,
   information_right,
   information_usage_right,
   usage_association,
   language,
   attribute_language_assignment,
   local_time,
   organization,
   applied_organization_assignment, applied_person_and_organization_assignment,
   organization_relationship,
   person,
   person_and_organization,
   product_category,
   product_definition_formation_relationship,
   organizational_project,
   applied_organizational_project_assignment,
   organizational_project_relationship,
   property_definition_representation,
   representation,
   representation_context,
   representation_item,
   requirement_assignment,
   product_definition_relationship,
   requirement_source,
   security_classification,
   applied_security_classification_assignment,
   time_interval_relationship,
   uncertainty_measure_with_unit,
   named_unit, derived_unit,
   measure_with_unit,
   product_definition_context);
END_TYPE;

TYPE requirement_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
  (product,
   product_definition_formation,
   organizational_project,
   requirement_assignment,
   requirement_source,
   product_definition_formation_relationship,
   product_definition,
   security_classification,
   product_definition_relationship);
END_TYPE;

TYPE requirement_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
  (approval,
   applied_approval_assignment,
   property_definition,
   certification,
   applied_certification_assignment,
   contract,
   applied_contract_assignment,
   product,
   product_definition,
   product_definition_formation,
   effectivity,
   applied_effectivity_assignment,
   applied_identification_assignment,
   general_property,
   general_property_relationship,
   information_right,
   information_usage_right,
   organization,
   applied_organization_assignment, applied_person_and_organization_assignment,
   person,
   product_definition_formation_relationship,
   organizational_project,
   property_definition_representation,
   representation,
   representation_item,
   requirement_assignment,
   requirement_source,
   security_classification,
   applied_security_classification_assignment,
   product_definition_relationship);
END_TYPE;

TYPE requirement_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
  (person_and_organization_address, organizational_address,
   applied_usage_right,
   applied_approval_assignment,
   property_definition,
   multi_language_attribute_assignment,
   applied_certification_assignment,
   applied_contract_assignment,
   date_assignment, date_and_time_assignment,
   product,
   applied_document_reference, applied_document_usage_constraint_assignment,
   product_definition,
   applied_external_identification_assignment,
   product_definition_formation,
   applied_effectivity_assignment,
   document_file,
   applied_identification_assignment,
   applied_organization_assignment, applied_person_and_organization_assignment,
   organization_relationship,
   person_and_organization,
   product_definition_formation_relationship,
   applied_organizational_project_assignment,
   requirement_assignment,
   product_definition_relationship,
   requirement_source,
   applied_security_classification_assignment);
END_TYPE;

TYPE requirement_event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON event_occurrence_item WITH
  (certification,
   organizational_project);
END_TYPE;

TYPE requirement_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
  (applied_usage_right,
   certification,
   applied_certification_assignment,
   product_definition,
   document_file,
   product,
   product_definition_formation,
   requirement_assignment,
   security_classification,
   applied_security_classification_assignment);
END_TYPE;

TYPE requirement_mri_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_approval_item WITH
  (person_and_organization_address, organizational_address,
   property_definition,
   applied_certification_assignment,
   applied_classification_assignment,
   applied_contract_assignment,
   date_assignment, date_and_time_assignment,
   product_definition,
   applied_document_reference, applied_document_usage_constraint_assignment,
   applied_effectivity_assignment,
   applied_event_occurrence_assignment,
   applied_identification_assignment,
   applied_organization_assignment, applied_person_and_organization_assignment,
   organization_relationship,
   person_and_organization,
   product_related_product_category,
   product_definition_formation_relationship,
   organizational_project,
   applied_organizational_project_assignment,
   requirement_assignment,
   product_definition_relationship,
   requirement_source,
   security_classification,
   applied_security_classification_assignment);
END_TYPE;

TYPE requirement_mri_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_date_item WITH
  (person_and_organization_address, organizational_address,
   applied_identification_assignment,
   applied_usage_right,
   approval,
   property_definition,
   applied_certification_assignment,
   applied_classification_assignment,
   applied_contract_assignment,
   date_assignment, date_and_time_assignment,
   product_definition,
   document_file,
   product,
   applied_document_reference, applied_document_usage_constraint_assignment,
   product_definition_formation,
   effectivity,
   applied_effectivity_assignment,
   applied_event_occurrence_assignment,
   general_property,
   general_property_relationship,
   organization_relationship,
   person,
   person_and_organization,
   product_related_product_category,
   product_definition_formation_relationship,
   organizational_project,
   applied_organizational_project_assignment,
   property_definition_representation,
   representation,
   requirement_assignment,
   product_definition_relationship,
   requirement_source,
   security_classification,
   product_definition_context);
END_TYPE;

TYPE requirement_mri_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_date_and_time_item WITH
  (person_and_organization_address, organizational_address,
   applied_identification_assignment,
   applied_usage_right,
   approval,
   property_definition,
   applied_certification_assignment,
   applied_classification_assignment,
   applied_contract_assignment,
   date_assignment, date_and_time_assignment,
   product_definition,
   document_file,
   product,
   applied_document_reference, applied_document_usage_constraint_assignment,
   product_definition_formation,
   effectivity,
   applied_effectivity_assignment,
   applied_event_occurrence_assignment,
   general_property,
   general_property_relationship,
   organization_relationship,
   person,
   person_and_organization,
   product_related_product_category,
   product_definition_formation_relationship,
   organizational_project,
   applied_organizational_project_assignment,
   property_definition_representation,
   representation,
   requirement_assignment,
   product_definition_relationship,
   requirement_source,
   security_classification,
   product_definition_context);
END_TYPE;

TYPE requirement_mri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_identification_item WITH
  (address,
   approval,
   property_definition,
   certification,
   product_definition,
   document_file,
   product,
   applied_document_reference, applied_document_usage_constraint_assignment,
   product_definition_formation,
   effectivity,
   event_occurrence,
   general_property,
   general_property_relationship,
   information_right,
   information_usage_right,
   applied_organization_assignment, applied_person_and_organization_assignment,
   person,
   person_and_organization,
   organizational_project,
   requirement_assignment,
   product_definition_relationship,
   requirement_source,
   product_definition_formation_relationship,
   applied_security_classification_assignment);
END_TYPE;

TYPE requirement_mri_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_organization_item WITH
  (person_and_organization_address, organizational_address,
   applied_identification_assignment,
   approval,
   property_definition,
   certification,
   applied_certification_assignment,
   applied_classification_assignment,
   applied_contract_assignment,
   date_assignment, date_and_time_assignment,
   product_definition,
   document_file,
   product,
   applied_document_reference, applied_document_usage_constraint_assignment,
   product_definition_formation,
   effectivity,
   applied_effectivity_assignment,
   event_occurrence,
   applied_event_occurrence_assignment,
   general_property,
   general_property_relationship,
   applied_organization_assignment, applied_person_and_organization_assignment,
   person_and_organization,
   product_category,
   product_related_product_category,
   organizational_project,
   applied_organizational_project_assignment,
   property_definition_representation,
   representation,
   requirement_assignment,
   product_definition_relationship,
   requirement_source,
   product_definition_formation_relationship,
   security_classification,
   applied_security_classification_assignment,
   product_definition_context);
END_TYPE;

TYPE requirement_mri_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_person_and_organization_item WITH
  (person_and_organization_address, organizational_address,
   applied_identification_assignment,
   approval,
   property_definition,
   certification,
   applied_certification_assignment,
   applied_classification_assignment,
   applied_contract_assignment,
   date_assignment, date_and_time_assignment,
   product_definition,
   document_file,
   product,
   applied_document_reference, applied_document_usage_constraint_assignment,
   product_definition_formation,
   effectivity,
   applied_effectivity_assignment,
   event_occurrence,
   applied_event_occurrence_assignment,
   general_property,
   general_property_relationship,
   applied_organization_assignment, applied_person_and_organization_assignment,
   person_and_organization,
   product_category,
   product_related_product_category,
   organizational_project,
   applied_organizational_project_assignment,
   property_definition_representation,
   representation,
   requirement_assignment,
   product_definition_relationship,
   requirement_source,
   product_definition_formation_relationship,
   security_classification,
   applied_security_classification_assignment,
   product_definition_context);
END_TYPE;

TYPE requirement_mri_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_multi_language_attribute_item WITH
  (property_definition,
   product_definition,
   product,
   applied_document_reference, applied_document_usage_constraint_assignment,
   product_definition_formation,
   event_occurrence,
   applied_external_identification_assignment,
   general_property,
   general_property_relationship,
   information_right,
   information_usage_right,
   product_category,
   representation_item,
   requirement_assignment,
   product_definition_relationship,
   requirement_source,
   product_definition_formation_relationship);
END_TYPE;

TYPE requirement_mri_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_attribute_language_item WITH
  (property_definition,
   product_definition,
   product,
   applied_document_reference, applied_document_usage_constraint_assignment,
   product_definition_formation,
   event_occurrence,
   applied_external_identification_assignment,
   general_property,
   general_property_relationship,
   information_right,
   information_usage_right,
   product_category,
   representation_item,
   requirement_assignment,
   product_definition_relationship,
   requirement_source,
   product_definition_formation_relationship);
END_TYPE;

TYPE requirement_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
  (product,
   product_definition_formation);
END_TYPE;

TYPE requirement_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
  (product_definition,
   document_file,
   product,
   applied_document_reference, applied_document_usage_constraint_assignment,
   product_definition_formation,
   requirement_assignment,
   product_definition_relationship,
   requirement_source,
   product_definition_formation_relationship);
END_TYPE;

TYPE rm_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
  (product,
   product_definition_formation,
   product_definition);
END_TYPE;

TYPE rm_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
  (product,
   product_definition_formation,
   product_definition);
END_TYPE;

END_SCHEMA;




(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\requirement_view_definition_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2006/03/24 19:08:22 thendrix Exp $
 ISO TC184/SC4/WG12 N4285 - ISO/TS 10303-1141 Requirement view definition - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N3134
*) 


SCHEMA Requirement_view_definition_mim;

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Requirement_identification_and_version_mim;    -- ISO/TS 10303-1140


END_SCHEMA;  -- Requirement_view_definition_mim




(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\requirement_view_definition_relationship_mim.exp
   ------------------------------------------------------------
*)

(* 
 $Id: mim.exp,v 1.7 2004/11/19 21:37:40 robbod Exp $
 ISO TC184/SC4/WG12 N3137 - ISO/TS 10303-1142 Requirement view definition relationship - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2358
*) 


SCHEMA Requirement_view_definition_relationship_mim;

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041

USE FROM Requirement_view_definition_mim;    -- ISO/TS 10303-1141


END_SCHEMA;  -- Requirement_view_definition_relationship_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\resource_as_realized_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2004/11/19 21:37:40 robbod Exp $
 ISO TC184/SC4/WG12 N3140 - ISO/TS 10303-1269 Resource as realized - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2421
*) 


SCHEMA Resource_as_realized_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_method,
   action_resource,
   action_resource_relationship); 

USE FROM Activity_method_assignment_mim;    -- ISO/TS 10303-1249

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM Required_resource_mim;    -- ISO/TS 10303-1267

USE FROM Resource_item_mim;    -- ISO/TS 10303-1268

USE FROM Resource_management_mim;    -- ISO/TS 10303-1266

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054


TYPE resource_as_realized_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (action_method, 
    action_resource, 
    action_resource_relationship);
END_TYPE; 

END_SCHEMA;  -- Resource_as_realized_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\resource_item_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.12 2004/11/19 21:37:40 robbod Exp $
 ISO TC184/SC4/WG12 N3146 - ISO/TS 10303-1268 Resource item - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2427
*) 


SCHEMA Resource_item_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_method,
   action_resource,
   action_resource_relationship,
   action_resource_type,
   supported_item); 

USE FROM Activity_method_assignment_mim;    -- ISO/TS 10303-1249

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM management_resources_schema   -- ISO 10303-41
  (action_method_assignment,
   action_method_role); 

USE FROM process_property_representation_schema   -- ISO 10303-49
  (resource_property_representation); 

USE FROM process_property_schema   -- ISO 10303-49
  (characterized_resource_definition,
   resource_property); 

USE FROM representation_schema   -- ISO 10303-43
  (representation,
   representation_context,
   representation_item,
   value_representation_item); 

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054


TYPE resource_item_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (action_method, 
    action_resource, 
    action_resource_relationship);
END_TYPE; 

END_SCHEMA;  -- Resource_item_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\resource_management_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.10 2004/11/19 21:37:41 robbod Exp $
 ISO TC184/SC4/WG12 N3152 - ISO/TS 10303-1266 Resource management - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2433
*) 


SCHEMA Resource_management_mim;

USE FROM action_schema   -- ISO 10303-41
  (action,
   action_relationship,
   action_resource,
   action_resource_relationship); 

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM Location_assignment_mim;    -- ISO/TS 10303-1277

USE FROM process_property_representation_schema   -- ISO 10303-49
  (action_property_representation); 

USE FROM process_property_schema   -- ISO 10303-49
  (action_property,
   characterized_action_definition); 

USE FROM Required_resource_mim;    -- ISO/TS 10303-1267

USE FROM Resource_item_mim;    -- ISO/TS 10303-1268

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054


TYPE resource_management_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (action, 
    action_property, 
    action_relationship, 
    action_resource, 
    action_resource_relationship);
END_TYPE; 

TYPE resource_management_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_item WITH 
   (action_resource);
END_TYPE; 

END_SCHEMA;  -- Resource_management_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\resource_property_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.3 2004/11/19 21:37:41 robbod Exp $
 ISO TC184/SC4/WG12 N3158 - ISO/TS 10303-1273 Resource property assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2439
*) 


SCHEMA Resource_property_assignment_mim;

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM Independent_property_mim;    -- ISO/TS 10303-1036

USE FROM process_property_representation_schema   -- ISO 10303-49
  (resource_property_representation); 

USE FROM process_property_schema   -- ISO 10303-49
  (characterized_resource_definition,
   resource_property); 

USE FROM product_property_definition_schema   -- ISO 10303-41
  (derived_property_select,
   general_property_association); 


END_SCHEMA;  -- Resource_property_assignment_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\risk_mim.exp
   ------------------------------------------------------------
*)

(******************************************************************************)
(*                                                                            *)
(*        This file was produced by Eurostep GraphicalEXPRESS V1.3.19        *)
(*                                                                            *)
(******************************************************************************)

(* Original model: Risk_mim_v014.vsd *)
(* Title: Risk_mim_e1.2 *)
(* Author: Hartvigsen *)
(* Comments:  *)

SCHEMA Risk_mim;

USE FROM action_schema;

USE FROM Activity_method_assignment_mim;

USE FROM Activity_method_mim;

USE FROM Activity_mim;

USE FROM Approval_mim;

USE FROM Classification_assignment_mim;

USE FROM Condition_mim;

USE FROM Date_time_assignment_mim;

USE FROM Document_assignment_mim;

USE FROM Event_mim;

USE FROM Justification_mim;

USE FROM Person_organization_assignment_mim;

USE FROM Person_organization_mim;

USE FROM Probability_distribution_mim;

USE FROM Probability_mim;

USE FROM Product_identification_mim;

USE FROM product_property_definition_schema
  (characterized_object);

USE FROM Property_assignment_mim;

USE FROM representation_schema
  (representation);

USE FROM Resource_item_mim;

USE FROM risk_schema;

USE FROM State_definition_mim;

TYPE probable_item = EXTENSIBLE GENERIC_ENTITY SELECT ;
END_TYPE;

TYPE risk_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
  (risk_evaluation,
   risk_reduction);
END_TYPE;

TYPE risk_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
  (applied_risk_source_assignment,
   risk_analysis,
   risk_assessment,
   risk_communication,
   risk_control,
   risk_criteria,
   risk_estimation,
   risk_evaluation,
   risk_identification,
   risk_perception,
   risk_reduction,
   risk_treatment);
END_TYPE;

TYPE risk_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
  (risk_perception,
   risk_reduction);
END_TYPE;

TYPE risk_condition_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
  (risk_status);
END_TYPE;

TYPE risk_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
  (applied_risk_classification_assignment,
   risk,
   risk_analysis,
   risk_assessment,
   risk_attitude,
   risk_communication,
   risk_consequence,
   risk_context,
   risk_control,
   risk_criteria,
   risk_evaluation,
   risk_identification,
   risk_impact_assignment,
   risk_perception,
   risk_perception_relationship,
   risk_probability,
   risk_probability_assignment,
   risk_reduction,
   risk_relationship,
   risk_source_assignment,
   risk_status,
   risk_treatment);
END_TYPE;

TYPE risk_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
  (applied_risk_classification_assignment,
   risk,
   risk_analysis,
   risk_assessment,
   risk_attitude,
   risk_communication,
   risk_consequence,
   risk_context,
   risk_control,
   risk_criteria,
   risk_evaluation,
   risk_identification,
   risk_impact_assignment,
   risk_perception,
   risk_perception_relationship,
   risk_probability,
   risk_probability_assignment,
   risk_reduction,
   risk_relationship,
   risk_source_assignment,
   risk_status,
   risk_treatment);
END_TYPE;

TYPE risk_document_reference_item = EXTENSIBLE SELECT BASED_ON document_reference_item WITH
  (risk,
   risk_criteria,
   risk_source_assignment);
END_TYPE;

TYPE risk_impact_item = EXTENSIBLE GENERIC_ENTITY SELECT ;
END_TYPE;

TYPE risk_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
  (risk_reduction,
   risk_treatment);
END_TYPE;

TYPE risk_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
  (applied_risk_classification_assignment,
   risk,
   risk_analysis,
   risk_assessment,
   risk_attitude,
   risk_communication,
   risk_consequence,
   risk_context,
   risk_control,
   risk_criteria,
   risk_evaluation,
   risk_identification,
   risk_impact_assignment,
   risk_perception,
   risk_perception_relationship,
   risk_probability,
   risk_probability_assignment,
   risk_reduction,
   risk_relationship,
   risk_source_assignment,
   risk_stakeholder,
   risk_status,
   risk_treatment);
END_TYPE;

TYPE risk_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
  (applied_risk_classification_assignment,
   risk,
   risk_analysis,
   risk_assessment,
   risk_attitude,
   risk_communication,
   risk_consequence,
   risk_context,
   risk_control,
   risk_criteria,
   risk_evaluation,
   risk_identification,
   risk_impact_assignment,
   risk_perception,
   risk_perception_relationship,
   risk_probability,
   risk_probability_assignment,
   risk_reduction,
   risk_relationship,
   risk_source_assignment,
   risk_stakeholder,
   risk_status,
   risk_treatment);
END_TYPE;

TYPE risk_source_item = EXTENSIBLE GENERIC_ENTITY SELECT ;
END_TYPE;

ENTITY applied_risk_impact_assignment
SUBTYPE OF (risk_impact_assignment);
  items : SET [1 : ?] OF risk_impact_item;
END_ENTITY;

ENTITY applied_risk_probability_assignment
SUBTYPE OF (risk_probability_assignment);
  items : SET [1 : ?] OF probable_item;
END_ENTITY;

ENTITY applied_risk_source_assignment
SUBTYPE OF (risk_source_assignment);
  items : SET [1 : ?] OF risk_source_item;
END_ENTITY;

ENTITY risk_attitude;
  criticality_factor : NUMBER;
END_ENTITY;

ENTITY risk_characterized_object
SUBTYPE OF (characterized_object, risk);
END_ENTITY;

ENTITY risk_level
SUBTYPE OF (risk_perception);
  risk_attitude : risk_attitude;
  risk_objective : risk_objective;
END_ENTITY;

ENTITY risk_level_relationship
SUBTYPE OF (risk_perception_relationship);
  relating_risk_level : risk_level;
  related_risk_level : risk_level;
END_ENTITY;

ENTITY risk_objective
SUBTYPE OF (risk_context);
END_ENTITY;

ENTITY risk_relationship_characterized_object
SUBTYPE OF (characterized_object, risk_relationship);
END_ENTITY;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\risk_management_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.7 2007/04/02 18:38:42 philsp Exp $
   ISO TC184/SC4/WG12 N - ISO/WD 10303-1467 Risk_management - EXPRESS MIM *)

SCHEMA Risk_management_mim;
  USE FROM Risk_mim;
  USE FROM product_property_definition_schema   -- ISO 10303-41
  	(characterized_object); 
  USE FROM state_observed_schema;


TYPE rm_pmri_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(general_property,
	product,
	product_definition_formation,
	product_definition);
END_TYPE;

TYPE rm_ss_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(executed_action,
	action_method,
	applied_action_assignment,
	property_definition,
	action_resource);
END_TYPE;

TYPE rm_pmri_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition_formation,
	document_file,
	product_definition);
END_TYPE;

TYPE rm_os_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(organization,
	person,
	person_and_organization);
END_TYPE;

TYPE rm_ss_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(executed_action,
	applied_action_assignment,
	property_definition,
	event_occurrence);
END_TYPE;

TYPE rm_pmri_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(condition,
	applied_action_method_assignment,
	applied_identification_assignment,
	general_property,
	general_property_relationship,
	product_definition,
	product_definition_context);
END_TYPE;

TYPE rm_ss_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(action_method_relationship,
	applied_action_method_assignment,
	state_type_assignment,
	property_definition,
	event_occurrence,
	product,
	justification_group_assignment,  justification_assignment,
	product_relationship,
	justification_support_assignment,
	action_resource,
	action_method,
	action_resource_relationship);
END_TYPE;
TYPE rm_pmri_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(conversion_based_unit,
	derived_unit,
	applied_external_identification_assignment,
	general_property,
	general_property_relationship,
	product,
	product_category,
	product_definition_formation,
	product_definition,
	uncertainty_measure_with_unit,
	named_unit, 
	measure_with_unit,
	product_definition_context);
END_TYPE;

TYPE rm_ss_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(executed_action,
	action_relationship,
	applied_action_assignment,
	property_definition,
	property_definition_representation);
END_TYPE;

TYPE rm_pmri2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(approval,
	applied_approval_assignment,
	applied_document_reference,  applied_document_usage_constraint_assignment
	);
END_TYPE;

TYPE rm_ss2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(executed_action,
	applied_action_assignment,
	property_definition,
	state_type,
	state_type_relationship);
END_TYPE;

TYPE rm_pmri3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(approval,
	applied_approval_assignment,
	calendar_date,
	applied_classification_assignment,
	date_assignment, date_and_time_assignment,
	date_and_time,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_identification_assignment,
	applied_organization_assignment, applied_person_and_organization_assignment,
	product,
	product_related_product_category,
	product_definition_formation,
	product_definition,
	representation);
END_TYPE;

TYPE rm_ss3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(executed_action,
	action_method,
	property_definition,
	property_definition_representation,
	state_type);
END_TYPE;

TYPE rm_pmri_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(condition,
	applied_action_method_assignment,
	applied_identification_assignment,
	general_property,
	general_property_relationship,
	product_definition_formation,
	product_definition,
	product_definition_context);
END_TYPE;

TYPE rm_pmri_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(condition,
	applied_action_method_assignment,
	applied_identification_assignment,
	general_property,
	general_property_relationship,
	product_definition_formation,
	product_definition,
	product_definition_context);
END_TYPE;

TYPE rm_ss_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(action_method_relationship,
	applied_action_method_assignment,
	action_resource,
	action_method);
END_TYPE;

TYPE rm_ss_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(action_method_relationship,
	applied_action_method_assignment,
	action_resource,
	action_method);
END_TYPE;

TYPE rm_pmri_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(applied_external_identification_assignment,
	product_category);
END_TYPE;

TYPE rm_ss_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(action_method_relationship,
	applied_action_method_assignment,
	action_resource,
	action_method,
	action_resource_relationship,
	state_type);
END_TYPE;

TYPE rm_pmri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(document_file,
	applied_external_identification_assignment,
	general_property,
	general_property_relationship,
	product_category,
	representation,
	product_definition_context);
END_TYPE;

TYPE rm_ss_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(action_method,
	action_method_relationship,
	state_type,
	state_type_relationship);
END_TYPE;

TYPE rm_ss_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(action_method_relationship,
	applied_action_method_assignment,
	action_resource,
	action_method,
	action_resource_relationship);
END_TYPE;

TYPE rm_pmri_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(product_definition_context);
END_TYPE;

TYPE rm_ss_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(applied_action_method_assignment,
	state_type_assignment,
	state_type);
END_TYPE;

TYPE rm_pmri_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(condition,
	applied_action_method_assignment);
END_TYPE;

TYPE rm_pmri_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(condition,
	applied_action_method_assignment);
END_TYPE;

TYPE rm_ss_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(action_method_relationship,
	applied_action_method_assignment,
	action_resource,
	action_method);
END_TYPE;

TYPE rm_ss_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(action_method_relationship,
	applied_action_method_assignment,
	action_resource,
	action_method);
END_TYPE;

(*TYPE rm_pmri_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_organization_assignment, applied_person_and_organization_assignment,
	product_definition);
END_TYPE;*)

ENTITY rm_pmri_characterizable_applied_document_reference  
  SUBTYPE OF (applied_document_reference, characterized_object);
END_ENTITY;

  
ENTITY rm_pmri_characterizable_applied_document_usage_constraint_assignment
  SUBTYPE OF (applied_document_usage_constraint_assignment, characterized_object);
END_ENTITY;


ENTITY rm_pmri_characterizable_applied_organization_assignment 
  SUBTYPE OF (applied_organization_assignment, characterized_object);
END_ENTITY;

 
ENTITY rm_pmri_characterizable_applied_person_and_organization_assignment
  SUBTYPE OF (applied_person_and_organization_assignment, characterized_object);
END_ENTITY;


ENTITY rm_pmri_characterizable_product_definition
  SUBTYPE OF (product_definition, characterized_object);
END_ENTITY;



(*TYPE rm_os_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(address,
	person,
	person_and_organization);
END_TYPE;*)

ENTITY rm_os_characterizable_address
  SUBTYPE OF (address, characterized_object);
END_ENTITY;


ENTITY rm_os_characterizable_person
  SUBTYPE OF (person, characterized_object);
END_ENTITY;


ENTITY rm_os_characterizable_person_and_organization
  SUBTYPE OF (person_and_organization, characterized_object);
END_ENTITY;



(*TYPE rm_ss_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(applied_action_assignment,
	applied_action_method_assignment);
END_TYPE;*)

ENTITY rm_ss_characterizable_applied_action_assignment
  SUBTYPE OF (applied_action_assignment, characterized_object);
END_ENTITY;


ENTITY rm_ss_characterizable_applied_action_method_assignment
  SUBTYPE OF (applied_action_method_assignment, characterized_object);
END_ENTITY;



TYPE rm_pmri4_action_method_items= EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition,
	product_definition_formation,
	document_file);
END_TYPE;

TYPE rm_os2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(organization,
	person,
	person_and_organization);
END_TYPE;

TYPE rm_pmri_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(product,
	product_category,
	product_definition_formation);
END_TYPE;

TYPE rm_os_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(organization,
	person_and_organization);
END_TYPE;

TYPE rm_ss_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(executed_action,
	action_method,
	applied_action_assignment,
	applied_action_method_assignment,
	action_resource_relationship,
	action_resource);
END_TYPE;

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\schedule_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2007/04/03 08:28:18 philsp Exp $
 ISO TC184/SC4/WG12 N4614 - ISO/WD 10303-1437 Schedule - EXPRESS MIM
*)
SCHEMA Schedule_mim;
  USE FROM Activity_method_implementation_mim;
  USE FROM Attribute_classification_mim;
  USE FROM Condition_evaluation_mim;
  USE FROM Document_assignment_mim;
  USE FROM Effectivity_application_mim;
  USE FROM Information_rights_mim;
  USE FROM Justification_mim;
  USE FROM Observation_mim;
  USE FROM Process_property_assignment_mim;
  USE FROM Property_assignment_mim;
  USE FROM Resource_as_realized_mim;
  USE FROM Resource_property_assignment_mim;
  USE FROM Scheme_mim;
  USE FROM Task_specification_mim;
  USE FROM Time_interval_assignment_mim;
  USE FROM Work_output_mim;
  USE FROM action_schema;   -- ISO 10303-41
  USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 


TYPE ss_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(executed_action,
	action_method,
	action_property,
	applied_action_assignment,
	state_observed_assignment,
	property_definition,
	action,
	action_resource,
	resource_property,
	applied_action_method_assignment,
	state_observed,
	state_observed_relationship,
	task_element,
	task_method,
	task_method_version);
END_TYPE;


TYPE ss_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(executed_action,
	action_property,
	applied_action_assignment,
	property_definition,
	event_occurrence,
	action_resource,
	action,
	action_method,
	state_observed_relationship,
	task_method,
	task_method_version);
END_TYPE;

(* TYPE ss_activity_realization_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON activity_realization_select WITH
	(action_method,
	task_method,
	task_method_version);
END_TYPE; *)


TYPE ss_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(action_method,
	action_property,
	property_definition,
	action_resource,
	resource_property);
END_TYPE;


TYPE ss_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(event_occurrence,
	product,
	justification_group_assignment,  justification_assignment,
	product_relationship,
	justification_support_assignment);
END_TYPE;


TYPE ss_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(action_method_relationship,
	group,
	action_property,
	state_observed_assignment,
	state_type_assignment,
	property_definition,
	action,
	applied_action_assignment,
	event_occurrence,
	product,
	justification_group_assignment,  justification_assignment,
	product_relationship,
	justification_support_assignment,
	action_resource,
	action_resource_relationship,
	action_resource_requirement,
	action_method,
	action_resource_requirement_relationship,
	resource_property,
	task_element,
	task_method,
	task_method_relationship,
	task_method_version,
	task_method_version_relationship,
	task_objective,
	applied_action_method_assignment);
END_TYPE;

TYPE ss_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(applied_action_method_assignment,
	action_resource,
	task_element,
	task_method,
	task_method_version,
	task_objective);
END_TYPE;

(* TYPE ss_characterized_activity_definition = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_activity_definition WITH
	(action_method_relationship,
	action,
	action_method,
	task_objective);
END_TYPE; *)

(* TYPE ss_characterized_resource_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_resource_select WITH
	(action_resource,
	action_resource_requirement,
	action_method,
	action_resource_relationship);
END_TYPE; *)


TYPE ss_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(executed_action,
	action_property_representation,
	action_relationship,
	applied_action_assignment,
	property_definition,
	ascribable_state_relationship,
	property_definition_representation,
	ascribable_state);
END_TYPE;


TYPE ss_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_classification_item WITH
	(executed_action,
	action_method,
	action_property,
	action_property_representation,
	action_relationship,
	applied_action_assignment,
	property_definition,
	action,
	applied_event_occurrence_assignment,
	event_occurrence_relationship,
	action_resource,
	action_resource_relationship,
	property_definition_representation,
	group,
	action_resource_requirement,
	action_resource_requirement_relationship,
	resource_property,
	resource_property_representation);
END_TYPE;


TYPE ss2_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(property_definition);
END_TYPE;


TYPE ss3_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(property_definition,
	property_definition_representation,
	state_observed,
	state_type);
END_TYPE;


TYPE ss_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(executed_action,
	action_method_relationship,
	group,
	action_property,
	applied_action_assignment,
	property_definition,
	action_resource,
	action_resource_relationship,
	action,
	action_relationship,
	resource_property,
	state_type,
	state_type_relationship,
	applied_action_method_assignment,
	task_method_relationship,
	task_method_version_relationship);
END_TYPE;

TYPE ss3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(executed_action,
	action_method,
	action_property,
	action_property_representation,
	property_definition,
	action_resource,
	property_definition_representation,
	action_resource_requirement,
	action_resource_relationship,
	action,
	resource_property,
	resource_property_representation,
	state_observed,
	ascribable_state,
	state_type);
END_TYPE;


TYPE ss_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(action_method_relationship,
	group,
	applied_action_method_assignment,
	action_resource,
	action,
	task_element,
	task_element_relationship,
	task_method,
	task_method_relationship,
	task_method_version,
	task_method_version_relationship,
	task_objective);
END_TYPE;


TYPE ss_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(action_method_relationship,
	group,
	action_property,
	action_property_representation,
	applied_action_method_assignment,
	action,
	applied_action_assignment,
	action_resource,
	action_resource_relationship,
	action_resource_requirement,
	action_method,
	resource_property,
	resource_property_representation,
	task_element,
	task_element_relationship,
	task_method,
	task_method_relationship,
	task_method_version,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE ss_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(action_method_relationship,
	group,
	action_property,
	action_property_representation,
	applied_action_method_assignment,
	action,
	applied_action_assignment,
	action_resource,
	action_resource_relationship,
	action_resource_requirement,
	action_method,
	resource_property,
	resource_property_representation,
	task_element,
	task_element_relationship,
	task_method,
	task_method_relationship,
	task_method_version,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE ss_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(action_method_relationship,
	group,
	action_property,
	action_property_representation,
	applied_action_method_assignment,
	action,
	action_resource,
	action_resource_requirement,
	action_method,
	action_resource_requirement_relationship,
	action_resource_relationship,
	resource_property,
	resource_property_representation,
	state_observed,
	ascribable_state,
	state_type,
	task_element,
	task_element_relationship,
	task_method,
	task_method_relationship,
	task_method_version,
	task_method_version_relationship,
	task_objective);
END_TYPE;


TYPE ss_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(action_property,
	applied_action_method_assignment,
	state_type_assignment,
	action_resource_relationship,
	action_method,
	action_resource_requirement_relationship,
	resource_property,
	state_type_relationship);
END_TYPE;


TYPE ss_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(action_method,
	action_method_relationship,
	group,
	action_property,
	action,
	action_resource,
	action_resource_requirement_relationship,
	resource_property,
	state_type,
	state_type_relationship,
	task_element,
	task_element_relationship,
	applied_action_method_assignment,
	task_method,
	task_method_relationship,
	task_method_version,
	task_method_version_relationship,
	task_objective);
END_TYPE;


TYPE ss_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
	(task_element,
	task_method,
	task_method_version,
	task_objective);
END_TYPE;


TYPE ss_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(action_method_relationship,
	group,
	action_property,
	applied_action_method_assignment,
	action_resource_relationship,
	action_resource_requirement,
	action_method,
	action_resource_requirement_relationship,
	action_resource,
	action,
	resource_property,
	ascribable_state,
	task_element,
	task_element_relationship,
	task_method,
	task_method_relationship,
	task_method_version,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE ss_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(action_property,
	applied_action_method_assignment,
	state_observed_assignment,
	state_type_assignment,
	resource_property,
	state_observed,
	state_type,
	state_observed_relationship);
END_TYPE;

TYPE ss_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON location_item WITH
	(executed_action,
	applied_action_assignment,
	applied_action_method_assignment,
	action_resource_requirement,
	action_method,
	action_resource,
	task_element,
	task_method,
	task_method_version,
	task_method_version_relationship);
END_TYPE;

TYPE ss_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(action_method_relationship,
	group,
	action_property,
	action_property_representation,
	applied_action_method_assignment,
	action,
	applied_action_assignment,
	action_resource,
	action_resource_relationship,
	action_resource_requirement,
	action_method,
	resource_property,
	resource_property_representation,
	task_element,
	task_element_relationship,
	task_method_relationship,
	task_method,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE ss_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(action_method_relationship,
	group,
	action_property,
	action_property_representation,
	applied_action_method_assignment,
	action,
	applied_action_assignment,
	action_resource,
	action_resource_relationship,
	action_resource_requirement,
	action_method,
	resource_property,
	resource_property_representation,
	task_element,
	task_element_relationship,
	task_method_relationship,
	task_method_version,
	task_method_version_relationship,
	task_objective);
END_TYPE;


TYPE ss_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(action_method,
	action_method_relationship,
	group,
	applied_action_assignment,
	applied_action_method_assignment,
	task_element,
	task_method,
	task_method_version,
	task_objective);
END_TYPE;

(* TYPE ss_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(applied_action_assignment,
	applied_action_method_assignment);
END_TYPE; *)


ENTITY ss_characterizable_applied_action_assignment
  SUBTYPE OF (applied_action_assignment, characterized_object);
END_ENTITY;


ENTITY ss_characterizable_applied_action_method_assignment
  SUBTYPE OF (applied_action_method_assignment, characterized_object);
END_ENTITY;



TYPE ss4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(executed_action,
	action_method,
	applied_action_assignment,
	event_occurrence,
	task_element,
	task_method,
	applied_action_method_assignment,
	task_method_version,
	task_method_version_relationship);
END_TYPE;



TYPE ss_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(action_method_relationship,
	group,
	applied_action_method_assignment,
	action_resource,
	task_element,
	task_element_relationship,
	task_method,
	task_method_relationship,
	task_method_version,
	task_method_version_relationship,
	task_objective);
END_TYPE;


TYPE ss_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(executed_action,
	action_method,
	applied_action_assignment,
	applied_action_method_assignment,
	action_resource,
	action_resource_relationship,
	action,
	action_property,
	action_relationship);
END_TYPE;


TYPE ss_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_observed_of_item WITH
	(executed_action,
	action_method,
	applied_action_assignment,
	action_resource,
	action_resource_relationship,
	action,
	action_property,
	action_relationship,
	task_method_version,
	task_objective);
END_TYPE;

TYPE ss_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(action_method_relationship,
	group,
	action_property,
	applied_action_method_assignment,
	action,
	action_resource,
	action_resource_relationship,
	action_resource_requirement,
	action_resource_requirement_relationship,
	action_relationship,
	action_method,
	resource_property,
	task_element,
	task_element_relationship,
	task_method,
	task_method_relationship,
	task_method_version,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE ss_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(action_method_relationship,
	group,
	action_property,
	applied_action_method_assignment,
	action,
	action_resource,
	action_resource_relationship,
	action_resource_requirement,
	action_resource_requirement_relationship,
	action_relationship,
	action_method,
	resource_property,
	task_element,
	task_element_relationship,
	task_method,
	task_method_relationship,
	task_method_version,
	task_method_version_relationship,
	task_objective);
END_TYPE;

TYPE ss5_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(executed_action,
	action_method,
	applied_action_assignment,
	applied_action_method_assignment,
	event_occurrence,
	task_element,
	task_method,
	task_method_version);
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\scheme_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.9 2004/11/19 21:37:41 robbod Exp $
 ISO TC184/SC4/WG12 N3161 - ISO/TS 10303-1260 Scheme - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2442
*) 


SCHEMA Scheme_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_method,
   action_method_relationship); 

USE FROM Activity_method_assignment_mim;    -- ISO/TS 10303-1249

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM Identification_assignment_mim   -- ISO/TS 10303-1021
  (applied_identification_assignment,
   identification_item); 

USE FROM Person_organization_assignment_mim;    -- ISO/TS 10303-1013

USE FROM Time_interval_assignment_mim;    -- ISO/TS 10303-1365

USE FROM Time_interval_mim;    -- ISO/TS 10303-1065


TYPE scheme_date_and_time_item = EXTENSIBLE SELECT BASED_ON date_and_time_item WITH 
   (action_method);
END_TYPE; 

TYPE scheme_identification_item = EXTENSIBLE SELECT BASED_ON identification_item WITH 
   (action_method);
END_TYPE; 

TYPE scheme_person_and_organization_item = EXTENSIBLE SELECT BASED_ON person_and_organization_item WITH 
   (action_method);
END_TYPE; 

TYPE scheme_time_interval_item = EXTENSIBLE SELECT BASED_ON time_interval_item WITH 
   (action_method_relationship);
END_TYPE; 

END_SCHEMA;  -- Scheme_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\security_classification_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.9 2004/10/22 15:22:41 darla Exp $
 ISO TC184/SC4/WG12 N1097 - ISO/TS 10303-1015 Security classification - EXPRESS MIM
*)

SCHEMA Security_classification_mim;

USE FROM security_classification_schema -- ISO 10303-41
  (security_classification,
   security_classification_level);
USE FROM management_resources_schema -- ISO 10303-41
  (security_classification_assignment);
  
TYPE security_classification_item = EXTENSIBLE SELECT; 
END_TYPE;

ENTITY applied_security_classification_assignment
  SUBTYPE OF (security_classification_assignment);
  items : SET [1:?] OF security_classification_item;
END_ENTITY;

END_SCHEMA;








(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\selected_item_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.12 2004/11/19 21:37:41 robbod Exp $
 ISO TC184/SC4/WG12 N3164 - ISO/TS 10303-1357 Selected item - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2445
*) 


SCHEMA Selected_item_mim;

USE FROM Class_mim;    -- ISO/TS 10303-1070

USE FROM classification_schema   -- ISO 10303-54
  (class); 

USE FROM group_schema   -- ISO 10303-41
  (group); 

USE FROM management_resources_schema   -- ISO 10303-41
  (group_assignment); 


TYPE selected_item_context_items = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

TYPE selected_item_select = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY selected_item
  SUBTYPE OF (class);
END_ENTITY;

ENTITY selected_item_assignment;
  assigned_class : selected_item;
  item : selected_item_select;
END_ENTITY;

ENTITY selected_items_assignment_in_context_group
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : selected_items_context_group;
  selected_item_assignment : SET[1:1] OF selected_item_assignment;
END_ENTITY;

ENTITY selected_items_context_group
  SUBTYPE OF (group);
END_ENTITY;

ENTITY selected_items_context_group_to_context
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : selected_items_context_group;
  item_context : SET[1:?] OF selected_item_context_items;
END_ENTITY;

END_SCHEMA;  -- Selected_item_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\shape_property_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.13 2006/03/24 19:08:57 thendrix Exp $
 ISO TC184/SC4/WG12 N4358 - ISO/TS 10303-1032 Shape property assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1226
*) 


SCHEMA Shape_property_assignment_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute); 

USE FROM Elemental_geometric_shape_mim;    -- ISO/TS 10303-1004

USE FROM External_model_mim;    -- ISO/TS 10303-1033

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM product_property_definition_schema   -- ISO 10303-41
  (product_definition_shape,
   shape_aspect,
   shape_aspect_relationship); 

USE FROM product_property_representation_schema   -- ISO 10303-41
  (shape_definition_representation); 

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041

USE FROM Characterizable_object_mim;     -- ISO/TS 10303-xxxx	


END_SCHEMA;  -- Shape_property_assignment_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\single_part_representation_mim.exp
   ------------------------------------------------------------
*)

(*
$Id: mim.exp,v 1.11 2004/11/18 17:39:07 thendrix Exp $
ISO TC184/SC4/WG12 N2544 - ISO/TS 10303-1133 Single part representation - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N1668
*) 


SCHEMA Single_part_representation_mim;

USE FROM Document_assignment_mim;    -- ISO/TS 10303-1122

USE FROM Extended_measure_representation_mim;    -- ISO/TS 10303-1106

USE FROM External_model_mim;    -- ISO/TS 10303-1033

USE FROM Part_and_version_identification_mim;    -- ISO/TS 10303-1022

USE FROM Part_view_definition_mim;    -- ISO/TS 10303-1023

USE FROM Person_organization_assignment_mim;    -- ISO/TS 10303-1013

USE FROM Product_categorization_mim;    -- ISO/TS 10303-1016

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

USE FROM Shape_property_assignment_mim;    -- ISO/TS 10303-1032


TYPE spr_document_reference_item = SELECT BASED_ON document_reference_item WITH 
   (product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE spr_organization_item = EXTENSIBLE SELECT BASED_ON organization_item WITH 
   (product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE spr_person_and_organization_item = EXTENSIBLE SELECT BASED_ON person_and_organization_item WITH 
   (product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

FUNCTION categories_of_product
 (obj : product) : SET OF STRING; 
LOCAL
category_assignments: BAG OF product_category;
categories: SET OF STRING:=[];
i: INTEGER;
END_LOCAL;
category_assignments := USEDIN(obj, 'PRODUCT_DEFINITION_SCHEMA' + '.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS');
REPEAT i := LOINDEX(category_assignments) TO HIINDEX(category_assignments) BY 1;
categories := categories + category_assignments[i].name;
END_REPEAT;
RETURN(categories);
      END_FUNCTION; 

END_SCHEMA;  -- Single_part_representation_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\state_based_behaviour_representation_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.5 2007/07/05 07:40:34 dmprice Exp $
  ISO TC184/SC4/WG12 N4617 - ISO/CD-TS 10303-1471 State based behaviour representation - EXPRESS MIM
*) 


SCHEMA State_based_behaviour_representation_mim;

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM Foundation_state_definition_mim;    -- ISO/WD 10303-1469

USE FROM Group_mim;    -- ISO/TS 10303-1113

USE FROM representation_schema   -- ISO 10303-43
  (representation,
   representation_context,
   representation_item); 

USE FROM state_type_schema   -- ISO 10303-56
  (state_type,
   state_type_relationship); 


TYPE state_based_behaviour_element_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (state_type, 
    state_type_relationship);
END_TYPE; 

TYPE state_based_behaviour_representation_item_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (state_based_behaviour_representation_item);
END_TYPE; 

ENTITY state_based_behaviour_model
  SUBTYPE OF (representation);
  SELF\representation.context_of_items : state_based_behaviour_representation_context;
  SELF\representation.items : SET[1:?] OF state_based_behaviour_representation_item;
END_ENTITY;

ENTITY state_based_behaviour_representation_context
  SUBTYPE OF (representation_context);
END_ENTITY;

ENTITY state_based_behaviour_representation_item
  SUBTYPE OF (representation_item);
END_ENTITY;

END_SCHEMA;  -- State_based_behaviour_representation_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\state_based_behaviour_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.8 2007/07/04 06:12:19 dmprice Exp $
  ISO TC184/SC4/WG3 N - ISO/WD 10303-1371 State based behaviour - EXPRESS MIM
*) 


SCHEMA State_based_behaviour_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_method); 

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM Alias_identification_mim;    -- ISO/TS 10303-1025

USE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute); 

USE FROM Behaviour_description_assignment_mim;    -- ISO/CD-TS 10303-1483

USE FROM Behaviour_identification_and_version_mim;    -- ISO/CD-TS 10303-1482

USE FROM Behaviour_view_definition_mim;    -- ISO/CD-TS 10303-1481

USE FROM Class_mim;    -- ISO/TS 10303-1070

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM Condition_mim;    -- ISO/TS 10303-1253

USE FROM Description_assignment_mim;    -- ISO/WD 10303-1473

USE FROM Expression_assignment_mim;    -- ISO/WD 10303-1491

USE FROM expression_extensions_schema   -- ISO 10303-57
  (assignment_target_select); 

USE FROM Expression_mim;    -- ISO/TS 10303-1342

USE FROM External_class_mim;    -- ISO/TS 10303-1275

USE FROM External_item_identification_assignment_mim;    -- ISO/TS 10303-1128

USE FROM External_state_based_behaviour_model_mim;    -- ISO/WD 10303-1468

USE FROM File_identification_mim;    -- ISO/TS 10303-1127

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM Foundation_state_definition_mim;    -- ISO/WD 10303-1469

USE FROM General_model_parameter_mim;    -- ISO/WD 10303-1472

USE FROM Generic_expression_mim;    -- ISO/TS 10303-1341

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

USE FROM Independent_property_mim;    -- ISO/TS 10303-1036

USE FROM Independent_property_representation_mim;    -- ISO/TS 10303-1038

USE FROM Numeric_function_mim;    -- ISO/TS 10303-1346

USE FROM Parameter_value_specification_mim;    -- ISO/WD 10303-1470

USE FROM Product_categorization_mim;    -- ISO/TS 10303-1016

USE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_definition,
   product_definition_formation); 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Product_version_relationship_mim;    -- ISO/TS 10303-1020

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

USE FROM representation_schema   -- ISO 10303-43
  (representation); 

USE FROM State_based_behaviour_representation_mim;    -- ISO/WD 10303-1471

USE FROM state_type_schema   -- ISO 10303-56
  (state_type,
   state_type_assignment,
   state_type_relationship); 

USE FROM Textual_expression_representation_mim;    -- ISO/CD-TS 10303-1367

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054

TYPE sbb_assignment_target_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON assignment_target_select WITH 
   (condition);
END_TYPE; 

TYPE sbb_behaviour_model_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON behaviour_model_groupable_item WITH 
   (state_based_behaviour_model);
END_TYPE; 

TYPE sbb_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (action_method, 
    applied_external_identification_assignment, 
    condition, 
    description_attribute, 
    document_file, 
    general_model_parameter, 
    product, 
    product_definition, 
    product_definition_formation, 
    representation, 
    state_based_behaviour_model, 
    state_type, 
    state_type_assignment, 
    state_type_relationship);
END_TYPE; 


TYPE sbb_pmri_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(conversion_based_unit,
	derived_unit,
	external_class_library,
	applied_external_identification_assignment,
	product_definition_formation_relationship);
END_TYPE;

TYPE sbb_ss_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(property_definition);
END_TYPE;

TYPE sbb_condition_action_method_items = SELECT BASED_ON condition_action_method_items WITH
  (state_type_relationship);
END_TYPE;

TYPE sbb_ss_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(property_definition,
	state_type,
	state_type_relationship);
END_TYPE;

(*TYPE sbb2_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH 
   (parameter_value_select);
END_TYPE;*) 

TYPE sbb_pmri_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(applied_classification_assignment,
	applied_identification_assignment,
	property_definition_representation,
	product,
	product_related_product_category,
	product_definition_formation,
	product_definition,
	representation);
END_TYPE;

TYPE sbb3_ss_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(action_method,
	property_definition,
	property_definition_representation,
	state_type);
END_TYPE;


(*TYPE sbb_description_item = SELECT BASED_ON description_item WITH
   (action_method, 
    condition, 
    general_model_parameter, 
    product, 
    product_definition, 
    product_definition_formation, 
    representation, 
    state_based_behaviour_model, 
    state_type, 
    state_type_relationship);
END_TYPE; *)

(*TYPE sbb_ap233_description_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON description_item WITH
	(behaviour_model);
END_TYPE;*)

(*TYPE sbb_expression_assignment_item = SELECT BASED_ON expression_assignment_item WITH
  (condition);
END_TYPE;*)

TYPE sbb_ap233_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH
	(product);
END_TYPE;


TYPE sbb_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH 
   (action_method, 
    applied_external_identification_assignment, 
    condition, 
    description_attribute, 
    document_file, 
    general_model_parameter, 
    product, 
    product_definition, 
    product_definition_formation, 
    representation, 
    state_based_behaviour_model, 
    state_type, 
    state_type_relationship);
END_TYPE; 

TYPE sbb_pmri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(document_file,
	external_class_library,
	applied_external_identification_assignment,
	general_property,
	general_property_relationship,
	product_category,
	representation,
	product_definition_context);
END_TYPE;

TYPE sbb_ss_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(state_type,
	state_type_relationship);
END_TYPE;

TYPE sbb_ap233_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(state_type_assignment);
END_TYPE;


TYPE sbb_parameter_value_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON parameter_value_select WITH 
   (product_definition);
END_TYPE; 

TYPE sbb_ap233_parameter_value_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON parameter_value_select WITH
	(representation,
	representation_item,
	state_type);
END_TYPE;

(* PS: not needed! 
TYPE sbb_property_assignment_select = SELECT BASED_ON property_assignment_select WITH
  (Activity_method,
   Product_view_definition);
END_TYPE;

is captured by:*)

ENTITY sbb_characterized_action_method
  SUBTYPE OF (action_method, characterized_object);
END_ENTITY;


(*TYPE sbb_ap233_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(property_definition,
	applied_action_method_assignment,
	generic_expression,
	general_property,
	general_property_relationship,
	product,
	product_category,
	product_definition_formation,
	product_definition_formation_relationship,
	property_definition_representation,
	representation,
	representation_context,
	representation_item);
END_TYPE;

is captured by:*)

ENTITY sbb_characterized_applied_action_method_assignment
  SUBTYPE OF (characterized_object, applied_action_method_assignment);
END_ENTITY;

ENTITY sbb_characterized_generic_expression	
  SUBTYPE OF (characterized_object, generic_expression);
END_ENTITY;

ENTITY sbb_characterized_general_property
  SUBTYPE OF (characterized_object, general_property);
END_ENTITY;

ENTITY sbb_characterized_general_property_relationship
  SUBTYPE OF (characterized_object, general_property_relationship);
END_ENTITY;

ENTITY sbb_characterized_product
  SUBTYPE OF (characterized_object, product);
END_ENTITY;

ENTITY sbb_characterized_product_category
  SUBTYPE OF (characterized_object, product_category);
END_ENTITY;

ENTITY sbb_characterized_product_definition_formation
  SUBTYPE OF (characterized_object, product_definition_formation);
END_ENTITY;

ENTITY sbb_characterized_product_definition_formation_relationship
  SUBTYPE OF (characterized_object, product_definition_formation_relationship);
END_ENTITY;

ENTITY sbb_characterized_property_definition_representation
  SUBTYPE OF (characterized_object, property_definition_representation);
END_ENTITY;

ENTITY sbb_characterized_representation
  SUBTYPE OF (characterized_object, representation);
END_ENTITY;

ENTITY sbb_characterized_representation_context
  SUBTYPE OF (characterized_object, representation_context);
END_ENTITY;

ENTITY sbb_characterized_representation_item
  SUBTYPE OF (characterized_object, representation_item);
END_ENTITY;

TYPE sbb_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH 
   (product_definition);
END_TYPE; 

END_SCHEMA;  -- State_based_behaviour_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\state_definition_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.22 2007/07/05 07:41:12 dmprice Exp $
ISO TC184/SC4/WG12 N4880  - ISO/E2 CD-TS 10303-1255 State definition - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N3173
*) 


SCHEMA State_definition_mim;

USE FROM Activity_mim;    -- ISO/TS 10303-1047

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

USE FROM Foundation_state_definition_mim;    -- ISO/CD-TS 10303-1469


TYPE state_definition_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH 
   (applied_state_type_assignment);
END_TYPE; 

TYPE state_definition_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (state_type, 
    state_type_assignment, 
    state_type_relationship);
END_TYPE; 

TYPE state_definition_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH 
   (state_type, 
    state_type_relationship);
END_TYPE; 

END_SCHEMA;  -- State_definition_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\state_observed_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.15 2004/11/19 21:37:41 robbod Exp $
 ISO TC184/SC4/WG12 N3176 - ISO/TS 10303-1256 State observed - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2367
*) 


SCHEMA State_observed_mim;

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM management_resources_schema   -- ISO 10303-41
  (identification_role); 

USE FROM State_definition_mim;    -- ISO/TS 10303-1255

USE FROM state_observed_schema   -- ISO 10303-56
  (ascribable_state,
   ascribable_state_relationship,
   state_observed,
   state_observed_assignment,
   state_observed_relationship,
   state_observed_role); 


TYPE state_observed_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (state_observed, 
    state_observed_assignment, 
    state_observed_relationship);
END_TYPE; 

TYPE state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_state_observed_assignment
  SUBTYPE OF (state_observed_assignment);
  items : SET[1:?] OF state_observed_of_item;
END_ENTITY;

ENTITY state_predicted
  SUBTYPE OF (state_observed);
END_ENTITY;

END_SCHEMA;  -- State_observed_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\system_behaviour_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.6 2007/07/04 06:09:47 dmprice Exp $ ISO TC184/SC4/WG3
   ISO TC184/SC4/WG3 N2336 - ISO/CD-TS 10303-1448 System behaviour - EXPRESS MIM*)

SCHEMA System_behaviour_mim;

USE FROM Function_based_behaviour_mim;

USE FROM State_based_behaviour_mim;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\system_breakdown_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.10 2004/11/19 21:37:41 robbod Exp $
 ISO TC184/SC4/WG12 N3179 - ISO/TS 10303-1214 System breakdown - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2301
*) 


SCHEMA System_breakdown_mim;

USE FROM Product_breakdown_mim;    -- ISO/TS 10303-1248


ENTITY system_breakdown_context
  SUBTYPE OF (breakdown_context);
END_ENTITY;

ENTITY system_element_usage
  SUBTYPE OF (breakdown_element_usage);
END_ENTITY;

END_SCHEMA;  -- System_breakdown_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\system_identification_and_version_mim.exp
   ------------------------------------------------------------
*)

(*"System_identification_and_version_mim"
   $Id: mim.exp,v 1.6 2007/03/28 18:17:33 philsp Exp $
   ISO TC184/SC4/WG12 N4617 - ISO/WD 10303-1484 System_identification_and_version - EXPRESS MIM 
*)
SCHEMA System_identification_and_version_mim;

USE FROM Identification_assignment_mim;

USE FROM Product_version_relationship_mim;

TYPE system_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
  (product,
   product_definition_formation);
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\system_modelling_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.6 2007/04/03 08:36:33 philsp Exp $
   ISO TC184/SC4/WG12 N - ISO/WD 10303-1477 System_modelling - EXPRESS MIM *)
(*            UNDER DEVELOPMENT by H.P. Frisch
	      NOTE:  Many duplications exist, they need to be auto-removed.  
	       	Auto-condensation of extensible type lists also need to be done.  
*)
SCHEMA System_modelling_mim;

  USE FROM Decision_support_mim;
  USE FROM Group_mim;
  USE FROM System_behaviour_mim;
  USE FROM System_structure_mim;
  USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 


TYPE sm_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
  (product,
   product_definition_group_assignment, breakdown_element_group_assignment,
   breakdown_element_usage,
   product_definition_formation, product_definition,
   product_as_individual_version,
   product_as_planned,
   product_as_realized,
   configuration_item,
   organizational_project,
   action_resource_requirement);
END_TYPE;

TYPE sm_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
  (product_definition_formation,
   product_as_individual_version,
   product_definition);
END_TYPE;

--		the set of action_items that are associated with the assigned_activity.
--			action_items

TYPE smpushup_pmri_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(product_definition,
	contract,
	descriptive_representation_item,
	general_property,
	measure_representation_item,
	product,
	product_concept,
	configuration_item,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition_relationship);
END_TYPE;


TYPE smpushup_pb_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE smpushup_ss_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(executed_action,
	action_method,
	action_property,
	applied_action_assignment,
	property_definition,
	action_resource,
	resource_property,
	task_element);
END_TYPE;

TYPE smpushup_ap233_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(approval,
	group,
	certification,
	product,
	product_category,
	action_resource_requirement,
	requirement_source,
	applied_action_method_assignment,
	task_io_hierarchy,
	verification,
	action_method,
	versioned_action_request);
END_TYPE;


--		the set of data associated to the assigned_activity_method.
--			action_method_items

TYPE smpushup_pmri_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product_definition,
	contract,
	product,
	product_definition_formation,
	document_file,
	product_concept,
	configuration_item,
	product_definition_formation_relationship,
	organizational_project,
	product_definition_relationship);
END_TYPE;

TYPE smpushup_os_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(organization,
	person,
	person_and_organization);
END_TYPE;

TYPE smpushup_pb_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition,
	breakdown_element_usage,
	product_definition_formation,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view);
END_TYPE;

TYPE smpushup_ss_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(executed_action,
	action_property,
	applied_action_assignment,
	property_definition,
	event_occurrence);
END_TYPE;

TYPE smpushup_ap233_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(analysis_assignment,
	applied_approval_assignment,
	group,
	certification,
	condition,
	date_assignment, date_and_time_assignment,
	in_zone,
	product,
	requirement_assignment,
	security_classification,
	state_type,
	applied_action_method_assignment,
	task_io_hierarchy,
	verification);
END_TYPE;


--		the set of things that are affected by the Work_request.
--			action_request_item

TYPE smpushup_pmri_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(contract,
	product,
	product_definition,
	product_definition_formation,
	document_file,
	product_definition_relationship);
END_TYPE;

TYPE smpushup_os_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(organization,
	person,
	person_and_organization);
END_TYPE;

TYPE smpushup_pb_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE smpushup_ss_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(action_method,
	action_property,
	property_definition,
	action_resource,
	Resource_property);
END_TYPE;

TYPE smpushup_ap233_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(executed_action,
	analysis_assignment,
	applied_approval_assignment,
	group,
	applied_certification_assignment,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_event_occurrence_assignment,
	information_usage_right,
	justification_group_assignment,  justification_assignment,
	configuration_item,
	applied_organizational_project_assignment,
	state_type,
	verification,
	versioned_action_request);
END_TYPE;


--		the inherited items  attribute shall not contain any element that is not aliasable
--			aliasable_item

TYPE smpushup_pmri_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(approval,
	approval_status,
	certification,
	applied_organization_assignment, applied_person_and_organization_assignment,
	product_concept,
	configuration_item,
	organizational_project,
	applied_security_classification_assignment,
	product_definition_relationship);
END_TYPE;

TYPE smpushup_os_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(address,
	person,
	person_and_organization);
END_TYPE;

TYPE smpushup_pb_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(product,
	product_definition_formation, product_definition,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_definition_shape,
	product_as_individual,
	product_as_individual_view,
	product_as_planned,
	product_as_realized,
	shape_aspect_relationship);
END_TYPE;

TYPE smpushup_ss_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH
	(event_occurrence,
	product,
	justification_group_assignment,  justification_assignment,
	product_relationship,
	justification_support_assignment
	);
END_TYPE;


--			analised_item

TYPE smpushup_ap233_analised_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON analised_item WITH
	(executed_action,
	action_method,
	action_method_relationship,
	action_property,
	action_relationship,
	alternate_product_relationship,
	assembly_component_usage_substitute,
	property_definition,
	group,
	groupable_item,
	condition,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	organization,
	organization_relationship,
	product,
	product_concept,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized,
	product_definition_formation_relationship,
	product_definition,
	organizational_project_relationship,
	requirement_assignment,
	action_resource_relationship,
	resource_property,
	applied_action_method_assignment,
	verification,
	verification_evidence,
	verification_relationship,
	product_definition_context,
	product_definition_relationship);
END_TYPE;


--		the activity or product data to which the Approval is assigned.
--			approval_item

TYPE smpushup_pmri_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(certification,
	condition,
	applied_action_method_assignment,
	effectivity,
	group,
	group_relationship,
	applied_identification_assignment,
	general_property,
	general_property_relationship,
	product_concept,
	configuration_item,
	product_definition_formation_relationship,
	product_definition,
	product_definition_relationship,
	product_definition_context);
END_TYPE;


TYPE smpushup_pb_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	in_zone,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_as_individual,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized);
END_TYPE;

TYPE smpushup_ss_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(action_method_relationship,
	action_property,
	applied_action_method_assignment,
	state_type_assignment,
	property_definition,
	event_occurrence,
	product,
	justification_group_assignment,  justification_assignment,
	product_relationship,
	justification_support_assignment,
	action_resource_requirement,
	action_method,
	action_resource_requirement_relationship,
	action_resource,
	action_resource_relationship,
	resource_property,
	task_element);
END_TYPE;

TYPE smpushup_ap233_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(product,
	product_definition_formation,
	state_type,
	state_type_relationship,
	verification,
	verification_evidence,
	verification_relationship);
END_TYPE;

--		the things to which the name is assigned.
--			assigned_name_select

TYPE smpushup_pmri_name_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON name_item WITH
	(group,
	group_relationship);
END_TYPE;

TYPE smpushup_ap233_name_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON name_item WITH
	(analysis,
	product_definition_group_assignment, breakdown_element_group_assignment,
	event_occurrence);
END_TYPE;


--		the activity or product data to which the Certification is assigned.
--			certification_item

TYPE smpushup_pmri_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(product,
	product_definition_formation,
	configuration_item,
	product_definition_formation_relationship,
	organizational_project,
	product_definition_relationship);
END_TYPE;

TYPE smpushup_pb_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(alternate_product_relationship,
	product,
	interface_connection,
	interface_connector_version,
	interface_definition_connection,
	interface_specification_version,
	product_definition_formation,
	product_as_individual,
	product_as_planned,
	product_as_realized);
END_TYPE;

TYPE smpushup_ss_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(applied_action_method_assignment,
	action_resource,
	task_element);
END_TYPE;

TYPE smpushup_ap233_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(approval_person_organization,
	assembly_component_usage_substitute,
	property_definition,
	groupable_item,
	product,
	state_type,
	applied_action_method_assignment,
	verification_evidence);
END_TYPE;


--		the object of which the Activity_property identifies a characteristic.
--			characterized_action_definition

(*TYPE smpushup_pmri_characterized_activity_definition = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_activity_definition WITH
	(condition,
	action_method_relationship);
END_TYPE;*)

(*TYPE smpushup_ss_characterized_activity_definition = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_activity_definition WITH
	(action_method_relationship,
	action_method,
	action_method);
END_TYPE;*)

(*TYPE smpushup_ap233_characterized_activity_definition = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_activity_definition WITH
	(--Analysis,
	breakdown_of,
	event_occurrence,
	product,
	state_type,
	applied_action_method_assignment
	--Verification
	);
END_TYPE;*)


--		the object of which the Resource_property identifies a characteristic.
--			characterized_resource_definition

(*TYPE smpushup_ss_characterized_resource_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_resource_select WITH
	(action_resource_requirement,
	action_resource,
	action_method,
	action_resource_relationship);
END_TYPE;*)

--		the set or more instances of types listed in classification_item that are classified.
--			classification_item

TYPE smpushup_pmri_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(characterized_object,
	conversion_based_unit,
	derived_unit,
	external_class_library,
	applied_external_identification_assignment,
	configuration_effectivity,
	general_property,
	general_property_relationship,
	product_concept_context,
	product,
	product_category,
	product_concept,
	configuration_item,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	uncertainty_measure_with_unit,
	named_unit,
	measure_with_unit,
	product_definition_context,
	product_definition_relationship);
END_TYPE;


TYPE smpushup_pb_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(alternate_product_relationship,
	product,
	breakdown_context,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	breakdown_of,
	in_zone,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_definition_shape,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized);
END_TYPE;

TYPE smpushup_ss_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(executed_action,
	action_property_representation,
	action_relationship,
	applied_action_assignment,
	property_definition,
	property_definition_representation);
END_TYPE;



--		the product or activity data to which the Condition is being assigned.
--			action_method_items

TYPE smpushup_pmri_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(approval,
	applied_approval_assignment,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	product_definition_relationship);
END_TYPE;

TYPE smpushup_pb_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(hierarchical_interface_connection,
	interface_connection,
	interface_definition_connection,
	product_definition_group_assignment, breakdown_element_group_assignment);
END_TYPE;

TYPE smpushup_ss_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(executed_action,
	action_property,
	applied_action_assignment,
	property_definition,
	resource_property,
	state_type,
	state_type_relationship);
END_TYPE;

TYPE smpushup_ap233_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON condition_action_method_items WITH
	(analysis_assignment,
	applied_certification_assignment,
	applied_contract_assignment,
	date_assignment, date_and_time_assignment,
	applied_event_occurrence_assignment,
	justification_group_assignment,  justification_assignment,
	applied_organizational_project_assignment,
	requirement_assignment,
	applied_security_classification_assignment,
	verification_evidence);
END_TYPE;

--		the product or activity data which acts as a parameter to the condition.
--			action_method_items

TYPE smpushup_pmri3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(approval,
	applied_approval_assignment,
	calendar_date,
	applied_certification_assignment,
	applied_classification_assignment,
	applied_contract_assignment,
	date_assignment, date_and_time_assignment,
	date_and_time,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_identification_assignment,
	property_definition_representation,
	applied_organization_assignment, applied_person_and_organization_assignment,
	product,
	product_related_product_category,
	product_concept,
	product_definition_formation,
	product_definition,
	representation,
	product_definition_relationship);
END_TYPE;

TYPE smpushup_pb3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(hierarchical_interface_connection,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	product_as_individual,
	product_definition_group_assignment, breakdown_element_group_assignment
	);
END_TYPE;

TYPE smpushup_ss3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(executed_action,
	action_method,
	action_property,
	action_property_representation,
	property_definition,
	property_definition_representation,
	action_resource_requirement,
	resource_property,
	resource_property_representation,
	state_type);
END_TYPE;

TYPE smpushup_ap233_3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(analysis);
END_TYPE;

--		the activity or product data to which the Contract is assigned.
--			contract_item

TYPE smpushup_pmri_contract_item = EXTENSIBLE SELECT BASED_ON contract_item WITH
	(external_class_library,
	organization_item, person_and_organization_item,
	configuration_item,
	product_definition_formation);
END_TYPE;

TYPE smpushup_pb_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(product,
	product_definition,
	interface_connector_version,
	interface_specification_version,
	product_definition_formation,
	product_as_individual,
	product_as_planned,
	product_as_realized);
END_TYPE;

TYPE smpushup_ss_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(action_method_relationship,
	applied_action_method_assignment,
	action_resource,
	task_element,
	task_element_relationship);
END_TYPE;

TYPE smpushup_ap233_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(product,
	applied_action_method_assignment,
	verification);
END_TYPE;


--		the activity or product data to which the Calendar_date or Date_time is assigned.
--			date_and_time_item

TYPE smpushup_pmri_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(condition,
	applied_action_method_assignment,
	applied_identification_assignment,
	general_property,
	general_property_relationship,
	property_definition_representation,
	product_concept,
	configuration_item,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	product_definition_context);
END_TYPE;

TYPE smpushup_pmri_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(condition,
	applied_action_method_assignment,
	applied_identification_assignment,
	general_property,
	general_property_relationship,
	property_definition_representation,
	product_concept,
	configuration_item,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	product_definition_context);
END_TYPE;


TYPE smpushup_pb_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_definition,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized);
END_TYPE;

TYPE smpushup_pb_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_definition,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized);
END_TYPE;

TYPE smpushup_ss_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(action_method_relationship,
	action_property,
	action_property_representation,
	applied_action_method_assignment,
	action_resource_requirement,
	action_method,
	action_resource,
	resource_property,
	resource_property_representation,
	task_element,
	task_element_relationship);
END_TYPE;

TYPE smpushup_ss_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(action_method_relationship,
	action_property,
	action_property_representation,
	applied_action_method_assignment,
	action_resource_requirement,
	action_method,
	action_resource,
	resource_property,
	resource_property_representation,
	task_element,
	task_element_relationship);
END_TYPE;

TYPE smpushup_ap233_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(alternate_product_relationship,
	analysis_assignment,
	applied_action_method_assignment);
END_TYPE;

TYPE smpushup_ap233_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(alternate_product_relationship,
	analysis_assignment,
	applied_action_method_assignment);
END_TYPE;


--		the set of items being described
--			description_item

(*TYPE smpushup_ap233_description_attribute_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON description_attribute_select WITH
	(analised_item,
	analysis,
	groupable_item,
	event_occurrence,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	applied_action_method_assignment);
END_TYPE;*)


--		the document_reference_item for the applied_document_reference,  applied_document_usage_constraint_assignment.
--			document_reference_item

TYPE smpushup_pmri_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(applied_external_identification_assignment,
	group,
	group_relationship,
	property_definition_representation,
	product_concept_context,
	product_category,
	product_concept,
	configuration_item);
END_TYPE;


TYPE smpushup_pb_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	breakdown_context,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized);
END_TYPE;

TYPE smpushup_ss_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(action_method_relationship,
	action_property,
	action_property_representation,
	applied_action_method_assignment,
	action_resource_requirement,
	action_method,
	action_resource_requirement_relationship,
	action_resource,
	action_resource_relationship,
	resource_property,
	resource_property_representation,
	state_type,
	task_element,
	task_element_relationship);
END_TYPE;

TYPE smpushup_ap233_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH
	(alternate_product_relationship,
	analysis,
	applied_action_method_assignment);
END_TYPE;


--		the set of effectivity_item whose effectivity is characterized by this entity.
--			effectivity_item

TYPE smpushup_pmri_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(product_definition,
	product_definition_relationship,
	document_relationship,
	configuration_item);
END_TYPE;


TYPE smpushup_pb_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	breakdown_of,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_for,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized);
END_TYPE;

TYPE smpushup_ss_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(action_property,
	applied_action_method_assignment,
	state_type_assignment,
	action_method,
	action_resource_requirement_relationship,
	action_resource_relationship,
	resource_property,
	state_type_relationship);
END_TYPE;

TYPE smpushup_ap233_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(action_request_solution,
	alternate_product_relationship,
	analysis_assignment,
	action_method_relationship,
	constrained_general_parameter_relationship,
	event_occurrence,
	applied_event_occurrence_assignment,
	applied_external_identification_assignment);
END_TYPE;


--		the product or activity data to which the Event is assigned.
--			event_occurrence_item

TYPE smpushup_ap233_event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON event_occurrence_item WITH
	(executed_action,
	approval,
	contract,
	product,
	action_resource_requirement,
	verification,
	versioned_action_request);
END_TYPE;


--		the external_identification_item whose source is identified.
--			external_identification_item

TYPE smpushup_ap233_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH
	(person_and_organization,
	product,
	organizational_project,
	action_resource_requirement);
END_TYPE;


--		the groupable_item instances that are included in the Group.
--			groupable_item

TYPE smpushup_pmri_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH
	(group_relationship);
END_TYPE;

TYPE smpushup_ap233_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH
	(executed_action,
	action_method,
	approval,
	breakdown_of,
	certification,
	condition,
	contract,
	effectivity,
	event_occurrence,
	document_file,
	interface_connection,
	interface_definition_for,
	product,
	organizational_project,
	action_resource_requirement,
	action_resource,
	applied_action_method_assignment,
	verification,
	versioned_action_request);
END_TYPE;

--		the data to which the identification is assigned.
--			identification_item

TYPE smpushup_pmri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(document_file,
	external_class_library,
	applied_external_identification_assignment,
	group,
	group_relationship,
	general_property,
	general_property_relationship,
	product_concept_context,
	measure_representation_item,
	product_category,
	product_concept,
	configuration_item,
	representation,
	product_definition_context,
	product_definition_usage);
END_TYPE;

TYPE smpushup_pb_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(product,
	product_definition,
	product_definition_formation,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_specification_definition,
	interface_specification_version,
	product_definition_shape,
	product_as_planned,
	product_as_realized);
END_TYPE;

TYPE smpushup_ss_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(action_method,
	action_method_relationship,
	action_property,
	action_resource_requirement_relationship,
	resource_property,
	state_type,
	state_type_relationship,
	task_element,
	task_element_relationship);
END_TYPE;

TYPE smpushup_ap233_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(state_type_assignment,
	assembly_component_usage_substitute,
	applied_action_method_assignment);
END_TYPE;


--		the item that exists in the zone.
--			in_zone

TYPE smpushup_pb_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH
	(hierarchical_interface_connection,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;


--		the set of information usage right items to which the usage right applies.
--			ir_usage_item

TYPE smpushup_pmri_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
	(configuration_item);
END_TYPE;

TYPE smpushup_pb_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation, product_definition,
	interface_connection,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_as_individual,
	product_as_individual_view,
	product_as_planned,
	product_as_realized);
END_TYPE;

TYPE smpushup_ss_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
	(task_element);
END_TYPE;

TYPE smpushup_ap233_ir_usage_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ir_usage_item WITH
	(action_method,
	action_property,
	alternate_product_relationship,
	property_definition,
	contract,
	in_zone,
	product,
	organizational_project,
	action_resource_requirement,
	action_resource,
	applied_action_method_assignment,
	verification_evidence);
END_TYPE;



--		the data item for which Justification  is provided.
--			justification_item

TYPE smpushup_pmri_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(descriptive_representation_item,
	product_definition_relationship,
	document_relationship,
	measure_representation_item);
END_TYPE;

TYPE smpushup_pb_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE smpushup_ss_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(action_method_relationship,
	action_property,
	applied_action_method_assignment,
	action_resource_requirement,
	action_method,
	action_resource_requirement_relationship,
	action_resource,
	action_resource_relationship,
	resource_property,
	task_element,
	task_element_relationship,
	task_io_hierarchy);
END_TYPE;

TYPE smpushup_ap233_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_item WITH
	(analysis_assignment,
	applied_usage_right,
	assembly_component_usage_substitute,
	group,
	product,
	breakdown_of,
	certification,
	condition,
	contract,
	description_attribute,
	information_usage_right,
	applied_organizational_project_assignment,
	requirement_assignment,
	security_classification);
END_TYPE;


--		the item which provides evidential support for a Justification.
--			justification_support_item

TYPE smpushup_pmri_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(descriptive_representation_item,
	product_definition_relationship,
	document_relationship,
	measure_representation_item,
	product_definition_context);
END_TYPE;

TYPE smpushup_pb_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE smpushup_ss_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(action_property,
	applied_action_method_assignment,
	state_type_assignment,
	resource_property,
	state_type,
	action_directive);
END_TYPE;

TYPE smpushup_ap233_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON justification_support_item WITH
	(analysis_assignment);
END_TYPE;


--		the activity or product data to which the organization or person in an organization is assigned.
--			person_and_organization_item

TYPE smpushup_pmri_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(condition,
	applied_action_method_assignment,
	property_definition_representation,
	product_definition_formation_relationship);
END_TYPE;

TYPE smpushup_pmri_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(condition,
	applied_action_method_assignment,
	property_definition_representation,
	product_definition_formation_relationship);
END_TYPE;


TYPE smpushup_pb_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_as_individual,
	product_as_planned,
	product_as_realized);
END_TYPE;

TYPE smpushup_pb_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_as_individual,
	product_as_planned,
	product_as_realized);
END_TYPE;

TYPE smpushup_ss_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(action_method_relationship,
	action_property,
	action_property_representation,
	applied_action_method_assignment,
	action_resource_requirement,
	action_method,
	action_resource,
	resource_property,
	resource_property_representation,
	task_element,
	task_element_relationship);
END_TYPE;

TYPE smpushup_ss_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(action_method_relationship,
	action_property,
	action_property_representation,
	applied_action_method_assignment,
	action_resource_requirement,
	action_resource,
	action_method,
	resource_property,
	resource_property_representation,
	task_element,
	task_element_relationship);
END_TYPE;

TYPE smpushup_ap233_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(Alternate_product_relationship);

--		the value of the parameter
--			parameter_value_select
END_TYPE;

TYPE smpushup_ap233_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(Alternate_product_relationship);
END_TYPE;

TYPE smpushup_ap233_parameter_value_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON parameter_value_select WITH
	(representation,
	representation_item,
	state_type);
END_TYPE;



--		the View_definition_relationship or Product_view_definition that is related to the Breakdown_element_definition or a Breakdown_element_usage.
--			product_item

TYPE smpushup_pb_product_definition_or_product_definition_relationship = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON product_definition_or_product_definition_relationship WITH
	(interface_connector_occurrence);
END_TYPE;

--		the set of instances of entity types listed in project_item, that are associated with the Project. 
--			project_item

TYPE smpushup_pmri_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(general_property,
	configuration_item);
END_TYPE;

TYPE smpushup_pb_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(product);
END_TYPE;

TYPE smpushup_ss_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(action_method,
	action_method_relationship,
	applied_action_assignment,
	applied_action_method_assignment,
	task_element);
END_TYPE;

TYPE smpushup_ap233_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	interface_connection,
	interface_definition_connection,
	product_definition,
	representation,
	applied_action_method_assignment,
	product_definition_relationship);
END_TYPE;

--		the element to which the property is assigned.
--			property_assignment_select

(*TYPE smpushup_pmri_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_organization_assignment, applied_person_and_organization_assignment,
	product_definition,
	organizational_project);
END_TYPE;*)


ENTITY smpushup_pmri_characterizable_applied_document_reference  
  SUBTYPE OF (applied_document_reference, characterized_object);
END_ENTITY;

  
ENTITY smpushup_pmri_characterizable_applied_document_usage_constraint_assignment
  SUBTYPE OF (applied_document_usage_constraint_assignment, characterized_object);
END_ENTITY;


ENTITY smpushup_pmri_characterizable_applied_organization_assignment 
  SUBTYPE OF (applied_organization_assignment, characterized_object);
END_ENTITY;

 
ENTITY smpushup_pmri_characterizable_applied_person_and_organization_assignment
  SUBTYPE OF (applied_person_and_organization_assignment, characterized_object);
END_ENTITY;


ENTITY smpushup_pmri_characterizable_organizational_project
  SUBTYPE OF (organizational_project, characterized_object);
END_ENTITY;


ENTITY smpushup_pmri_characterizable_product_definition
  SUBTYPE OF (product_definition, characterized_object);
END_ENTITY;



(*TYPE smpushup_os_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(address,
	person,
	person_and_organization);
END_TYPE;*)


ENTITY smpushup_os_characterizable_address
  SUBTYPE OF (address, characterized_object);
END_ENTITY;


ENTITY smpushup_os_characterizable_person
  SUBTYPE OF (person, characterized_object);
END_ENTITY;


ENTITY smpushup_os_characterizable_person_and_organization
  SUBTYPE OF (person_and_organization, characterized_object);
END_ENTITY;



(*TYPE smpushup_pb_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(hierarchical_interface_connection,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;*)

ENTITY smpushup_pb_characterizable_hierarchical_interface_connection
  SUBTYPE OF (hierarchical_interface_connection, characterized_object);
END_ENTITY;


ENTITY smpushup_pb_characterizable_interface_connection
  SUBTYPE OF (interface_connection, characterized_object);
END_ENTITY;


ENTITY smpushup_pb_characterizable_interface_connector_occurrence
  SUBTYPE OF (interface_connector_occurrence, characterized_object);
END_ENTITY;


ENTITY smpushup_pb_characterizable_interface_definition_connection
  SUBTYPE OF (interface_definition_connection, characterized_object);
END_ENTITY;




(*TYPE smpushup_ss_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(applied_action_assignment,
	applied_action_method_assignment);
END_TYPE;*)


ENTITY smpushup_ss_characterizable_applied_action_assignment
  SUBTYPE OF (applied_action_assignment, characterized_object);
END_ENTITY;


ENTITY smpushup_ss_characterizable_applied_action_method_assignment
  SUBTYPE OF (applied_action_method_assignment, characterized_object);
END_ENTITY;




(*TYPE smpushup_ap233_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(executed_action,
	action_relationship,
	action_property,
	alternate_product_relationship,
	--Analysis_assignment,
	property_definition,
	applied_action_method_assignment,
	generic_expression,
	in_zone,
	general_property,
	general_property_relationship,
	information_usage_right,
	product,
	product_category,
	product_concept,
	configuration_item,
	product_definition_formation,
	product_definition_formation_relationship,
	property_definition_representation,
	representation,
	representation_context,
	representation_item,
	action_resource_requirement,
	requirement_source,
	resource_property,
	security_classification,
	task_io_hierarchy,
	verification,
	verification_evidence,
	verification_relationship,
	action_method,
	versioned_action_request);
END_TYPE;*)


ENTITY smpushup_ap233_characterizable_action_method
  SUBTYPE OF (action_method, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_action_property
  SUBTYPE OF (action_property, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_action_relationship
  SUBTYPE OF (action_relationship, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_action_resource_requirement
  SUBTYPE OF (action_resource_requirement, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_alternate_product_relationship
  SUBTYPE OF (alternate_product_relationship, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_applied_action_method_assignment
  SUBTYPE OF (applied_action_method_assignment, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_configuration_item
  SUBTYPE OF (configuration_item, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_executed_action
  SUBTYPE OF (executed_action, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_general_property
  SUBTYPE OF (general_property, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_general_property_relationship
  SUBTYPE OF (general_property_relationship, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_generic_expression
  SUBTYPE OF (generic_expression, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_in_zone
  SUBTYPE OF (in_zone, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_information_usage_right
  SUBTYPE OF (information_usage_right, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_product
  SUBTYPE OF (product, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_product_category
  SUBTYPE OF (product_category, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_product_concept
  SUBTYPE OF (product_concept, characterized_object);
END_ENTITY;


ENTITY vcharacterizable_product_definition_formation
  SUBTYPE OF (product_definition_formation, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_product_definition_formation_relationship
  SUBTYPE OF (product_definition_formation_relationship, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_property_definition
  SUBTYPE OF (property_definition, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_property_definition_representation
  SUBTYPE OF (property_definition_representation, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_representation
  SUBTYPE OF (representation, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_representation_context
  SUBTYPE OF (representation_context, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_representation_item
  SUBTYPE OF (representation_item, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_requirement_source
  SUBTYPE OF (requirement_source, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_resource_property
  SUBTYPE OF (resource_property, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_security_classification
  SUBTYPE OF (security_classification, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_versioned_action_request	
  SUBTYPE OF (versioned_action_request, characterized_object);
END_ENTITY;

ENTITY smpushup_ap233_characterizable_analysis_assignment
  SUBTYPE OF (analysis_assignment, characterized_object);
END_ENTITY;

ENTITY smpushup_ap233_characterizable_task_io_hierarchy
  SUBTYPE OF (task_io_hierarchy, characterized_object);
END_ENTITY;

ENTITY smpushup_ap233_characterizable_verification
  SUBTYPE OF (verification, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_verification_evidence
  SUBTYPE OF (verification_evidence, characterized_object);
END_ENTITY;


ENTITY smpushup_ap233_characterizable_verification_relationship
  SUBTYPE OF (verification_relationship, characterized_object);
END_ENTITY;



--		 the entity to which the required resource statement is assigned.
--			action_method_items


TYPE smpushup_ss4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(executed_action,
	action_method,
	applied_action_assignment,
	event_occurrence,
	task_element);
END_TYPE;

TYPE smpushup_ap233_4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(analysis_assignment,
	applied_certification_assignment,
	applied_contract_assignment,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	product,
	organization,
	person_and_organization,
	product_definition_formation,
	product_definition,
	organizational_project,
	state_type,
	verification,
	action_directive);
END_TYPE;


--		the item which has the requirement assigned to it.
--			requirement_assigned_item

TYPE smpushup_pmri_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
	(product_definition_relationship);
END_TYPE;

TYPE smpushup_pb_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	interface_connector_occurrence,
	product,
	product_definition_formation);
END_TYPE;

TYPE smpushup_ss_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
	(applied_action_method_assignment,
	state_type_assignment,
	state_type);
END_TYPE;

TYPE smpushup_ap233_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH
	(action_property,
	alternate_product_relationship,
	in_zone,
	interface_definition_for);
END_TYPE;


--		the item which is the source of the requirement.
--			requirement_source_item

TYPE smpushup_pmri_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
	(characterized_object,
	product_definition_relationship);
END_TYPE;

TYPE smpushup_pb_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
	(interface_connector_occurrence,
	product_definition_formation,
	shape_aspect);
END_TYPE;

TYPE smpushup_ss_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
	(applied_action_method_assignment,
	state_type_assignment,
	state_type);
END_TYPE;

TYPE smpushup_ap233_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH
	(alternate_product_relationship,
	applied_approval_assignment,
	approval_person_organization,
	applied_certification_assignment,
	applied_contract_assignment,
	directed_action,
	in_zone,
	interface_definition_for,
	applied_organization_assignment, applied_person_and_organization_assignment,
	product_concept,
	applied_organizational_project_assignment);
END_TYPE;


--		the resource assignment item to which the resource item is assigned.
--			action_method_items

TYPE smpushup2_pmri_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(contract,
	organizational_project);
END_TYPE;

TYPE smpushup2_pb_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition_formation,
	product_definition,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view);
END_TYPE;

TYPE smpushup2_ap233_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_method,
	analysis_assignment,
	event_occurrence,
	interface_connector_occurrence,
	person_and_organization,
	verification_evidence,
	action_directive);
END_TYPE;

--		the items that are designated as resources within the application context. 
--			action_method_items

TYPE smpushup_pmri4_action_method_items= EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition,
	product_definition_formation,
	document_file);
END_TYPE;

TYPE smpushup_os2_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(organization,
	person,
	person_and_organization);
END_TYPE;

TYPE smpushup_pb4_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(product,
	product_definition_formation,
	product_definition,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view);
END_TYPE;

TYPE smpushup_ap233_5_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH
	(action_directive);
END_TYPE;


--		the activity or product data to which the Security_classification is assigned.
--			security_classification_item

TYPE smpushup_pmri_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(configuration_item,
	product_definition_formation,
	product_definition,
	organizational_project_relationship);
END_TYPE;

TYPE smpushup_pb_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	product,
	product_definition,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_as_individual,
	product_as_individual_view,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	promissory_usage_occurrence);
END_TYPE;

TYPE smpushup_ss_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(action_method_relationship,
	applied_action_method_assignment,
	action_resource,
	task_element,
	task_element_relationship);
END_TYPE;

TYPE smpushup_ap233_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(action_property,
	property_definition,
	event_occurrence,
	in_zone,
	product);
END_TYPE;



--		the object whose State_definition is given by the described_state_definition.
--			state_type_of_item

TYPE smpushup_pmri_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(certification,
	contract,
	product,
	product_category,
	product_concept,
	configuration_item,
	product_definition_formation,
	organizational_project,
	security_classification,
	product_definition_relationship);
END_TYPE;

TYPE smpushup_os_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(organization,
	person_and_organization);
END_TYPE;

TYPE smpushup_pb_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product_definition,
	product_definition_formation,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	product,
	interface_specification_definition,
	interface_specification_version,
	product_as_individual,
	product_as_individual_view,
	product_as_planned,
	product_as_realized);
END_TYPE;

TYPE smpushup_ss_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(executed_action,
	action_method,
	applied_action_assignment,
	applied_action_method_assignment,
	action_resource,
	action_resource_relationship);
END_TYPE;

TYPE smpushup_ap233_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH
	(alternate_product_relationship,
	analysis_assignment,
	group,
	product_definition,
	document_file,
	product,
	product_definition_formation,
	event_occurrence,
	applied_external_identification_assignment,
	task_io_hierarchy,
	verification);
END_TYPE;


--		the instance for which the Language of the considered_attribute has been identified.
--			multi_language_attribute_item

TYPE smpushup_pmri_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(condition,
	applied_action_method_assignment,
	action_method_relationship,
	configuration_item);
END_TYPE;

TYPE smpushup_pmri_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(condition,
	applied_action_method_assignment,
	action_method_relationship,
	configuration_item);
END_TYPE;


TYPE smpushup_pb_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view);
END_TYPE;

TYPE smpushup_pb_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view);
END_TYPE;

TYPE smpushup_ss_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(action_method_relationship,
	action_property,
	applied_action_method_assignment,
	action_resource_requirement,
	action_resource_requirement_relationship,
	action_resource,
	action_method,
	action_resource_relationship,
	resource_property,
	task_element,
	task_element_relationship);
END_TYPE;

TYPE smpushup_ss_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(action_method_relationship,
	action_property,
	applied_action_method_assignment,
	action_resource_requirement,
	action_resource_requirement_relationship,
	action_resource,
	action_method,
	action_resource_relationship,
	resource_property,
	task_element,
	task_element_relationship);
END_TYPE;



--		the component data items used to support this evidence.
--			verification_evidence_item

TYPE smpushup_ap233_verification_evidence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON verification_evidence_item WITH
	(action_actual,
	action_request_solution,
	action_method_relationship,
	action_relationship,
	action_status,
	applied_action_request_assignment,
	alternate_product_relationship,
	analysis_assignment,
	applied_action_method_assignment,
	applied_usage_right,
	applied_approval_assignment,
	assembly_component_usage_substitute,
	property_definition,
	group,
	groupable_item,
	breakdown_of,
	applied_contract_assignment,
	date_assignment, date_and_time_assignment,
	description_attribute,
	directed_action,
	applied_effectivity_assignment,
	applied_event_occurrence_assignment,
	expression_assignment,
	interface_connector_definition,
	interface_definition_connection,
	interface_definition_for,
	justification_group_assignment,  justification_assignment,
	product_relationship,
	justification_support_assignment,
	applied_organization_assignment, applied_person_and_organization_assignment,
	person,
	person_and_organization,
	product,
	product_design_to_individual,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	applied_organizational_project_assignment,
	representation,
	representation_context,
	representation_item,
	action_method,
	task_io_hierarchy,
	applied_time_interval_assignment,
	product_definition_context,
	product_definition_relationship,
	versioned_action_request);
END_TYPE;

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\system_structure_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.5 2007/04/02 15:48:59 philsp Exp $
 ISO TC184/SC4/WG12 N - ISO/WD 10303-1450 System structure - EXPRESS MIM
*)
(*            UNDER DEVELOPMENT by H.P. Frisch
		This file starts with the mim.exp for this module.
	      NOTE:  Many duplications exist, they need to be auto-removed.  
	       	Auto-condensation of extensible type lists also need to be done.  

*)
SCHEMA System_structure_mim;

  USE FROM Interface_mim;
  USE FROM Physical_breakdown_mim;
  USE FROM Product_as_individual_mim;
  USE FROM Product_data_management_mim;
  USE FROM System_breakdown_mim;
  USE FROM System_view_definition_mim;
  USE FROM Zonal_breakdown_mim;
  USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object);
  USE FROM action_schema;   -- ISP 10303-41
  


TYPE system_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
  (interface_connection,
   interface_connector_definition,
   product);
END_TYPE;

TYPE system_pmri_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(product_definition,
	contract,
	descriptive_representation_item,
	general_property,
	measure_representation_item,
	product,
	product_concept,
	configuration_item,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition_relationship);
END_TYPE;

TYPE system_pb_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE system_ss_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(action_property,
	property_definition);
END_TYPE;

TYPE system_ap233_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH
	(approval,
	certification,
	product_category,
	action_method,
	versioned_action_request);
END_TYPE;

TYPE system_pmri_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(contract,
	product,
	product_definition,
	product_definition_formation,
	document_file,
	product_definition_relationship);
END_TYPE;

TYPE system_os_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(organization,
	person,
	person_and_organization);
END_TYPE;

TYPE system_pb_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE system_ss_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(action_method,
	action_property,
	property_definition);
END_TYPE;

TYPE system_ap233_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH
	(executed_action,
	applied_approval_assignment,
	applied_certification_assignment,
	applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_event_occurrence_assignment,
	configuration_item,
	applied_organizational_project_assignment,
	versioned_action_request);
END_TYPE;

TYPE system_pmri_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(certification,
	effectivity,
	applied_identification_assignment,
	general_property,
	general_property_relationship,
	product_concept,
	configuration_item,
	product_definition_formation_relationship,
	product_definition,
	product_definition_relationship,
	product_definition_context);
END_TYPE;

TYPE system_pb_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	in_zone,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_as_individual,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized);
END_TYPE;

TYPE system_ss_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(action_property,
	property_definition,
	event_occurrence);
END_TYPE;

TYPE system_ap233_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH
	(product,
	product_definition_formation);
END_TYPE;

--
TYPE system_ap233_name_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON name_item WITH
	(product_definition_group_assignment, breakdown_element_group_assignment,
	event_occurrence);
END_TYPE;

TYPE system_pmri_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(product,
	product_definition_formation,
	configuration_item,
	product_definition_formation_relationship,
	organizational_project,
	product_definition_relationship);
END_TYPE;

TYPE system_pb_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(alternate_product_relationship,
	product,
	interface_connection,
	interface_connector_version,
	interface_definition_connection,
	interface_specification_version,
	product_definition_formation,
	product_as_individual,
	product_as_planned,
	product_as_realized);
END_TYPE;

TYPE system_ap233_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON certification_item WITH
	(approval_person_organization,
	assembly_component_usage_substitute,
	property_definition);
END_TYPE;

-- enabled by action_schema & mapping_table

(*TYPE system_ap233_characterized_activity_definition = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON characterized_activity_definition WITH
	(breakdown_of,
	event_occurrence,
	product);
END_TYPE;*)

TYPE system_pmri_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(characterized_object,
	conversion_based_unit,
	derived_unit,
	external_class_library,
	applied_external_identification_assignment,
	general_property,
	general_property_relationship,
	configuration_effectivity,
	product_concept_context,
	product,
	product_category,
	product_concept,
	configuration_item,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	uncertainty_measure_with_unit,
	named_unit,
	measure_with_unit,
	product_definition_context,
	product_definition_relationship);
END_TYPE;

TYPE system_pb_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(alternate_product_relationship,
	product,
	breakdown_context,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	breakdown_of,
	in_zone,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_definition_shape,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized);
END_TYPE;

TYPE system_ss_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
	(executed_action,
	action_property_representation,
	action_relationship,
	applied_action_assignment,
	property_definition,
	property_definition_representation);
END_TYPE;

TYPE system_pmri_contract_item = EXTENSIBLE SELECT BASED_ON contract_item WITH
	(external_class_library,
	organization_item, person_and_organization_item,
	configuration_item,
	product_definition_formation);
END_TYPE;

TYPE system_pb_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH
	(product,
	product_definition_formation, product_definition,
	interface_connector_version,
	interface_specification_version,
	product_as_individual,
	product_as_planned,
	product_as_realized);
END_TYPE;

TYPE system_pmri_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(applied_identification_assignment,
	general_property,
	general_property_relationship,
	property_definition_representation,
	product_concept,
	configuration_item,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	product_definition_context);
END_TYPE;

TYPE system_pmri_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(applied_identification_assignment,
	general_property,
	general_property_relationship,
	property_definition_representation,
	product_concept,
	configuration_item,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition,
	product_definition_context);
END_TYPE;

TYPE system_pb_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_definition,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized);
END_TYPE;

TYPE system_pb_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_definition,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized);
END_TYPE;

TYPE system_ss_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(action_property,
	action_property_representation);
END_TYPE;

TYPE system_ss_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(action_property,
	action_property_representation);
END_TYPE;

TYPE system_ap233_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
	(alternate_product_relationship);
END_TYPE;

TYPE system_ap233_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
	(alternate_product_relationship);
END_TYPE;

TYPE system_pmri_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(product_definition,
	product_definition_relationship,
	document_relationship,
	configuration_item);
END_TYPE;

TYPE system_pb_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	breakdown_of,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_for,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view,
	product_design_to_individual,
	product_design_version_to_individual,
	product_planned_to_realized);
END_TYPE;

TYPE system_ss_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(action_property);
END_TYPE;

TYPE system_ap233_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH
	(action_request_solution,
	alternate_product_relationship,
	event_occurrence,
	applied_event_occurrence_assignment,
	applied_external_identification_assignment);
END_TYPE;

TYPE system_ap233_event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON event_occurrence_item WITH
	(executed_action,
	approval,
	contract,
	product,
	versioned_action_request);
END_TYPE;

TYPE system_ap233_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH
	(person_and_organization,
	product,
	organizational_project);
END_TYPE;

TYPE system_pmri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(document_file,
	external_class_library,
	applied_external_identification_assignment,
	general_property,
	general_property_relationship,
	product_concept_context,
	measure_representation_item,
	product_category,
	product_concept,
	configuration_item,
	representation,
	product_definition_context,
	product_definition_usage);
END_TYPE;

TYPE system_pb_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(product,
	product_definition,
	product_definition_formation,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_specification_definition,
	interface_specification_version,
	product_definition_shape,
	product_as_planned,
	product_as_realized);
END_TYPE;

TYPE system_ss_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(action_method,
	action_property);
END_TYPE;

TYPE system_ap233_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
	(assembly_component_usage_substitute);
END_TYPE;

TYPE system_pb_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH
	(hierarchical_interface_connection,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;

TYPE system_pmri_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(property_definition_representation,
	product_definition_formation_relationship);
END_TYPE;

TYPE system_pmri_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(property_definition_representation,
	product_definition_formation_relationship);
END_TYPE;

TYPE system_pb_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_as_individual,
	product_as_planned,
	product_as_realized);
END_TYPE;

TYPE system_pb_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(alternate_product_relationship,
	assembly_component_usage,
	assembly_component_usage_substitute,
	product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_connector_version,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_as_individual,
	product_as_planned,
	product_as_realized);
END_TYPE;

TYPE system_ss_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(action_property_representation,
	action_property);
END_TYPE;

TYPE system_ss_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(action_property_representation,
	action_property);
END_TYPE;

TYPE system_ap233_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH
	(alternate_product_relationship);
END_TYPE;

TYPE system_ap233_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH
	(alternate_product_relationship);
END_TYPE;

TYPE system_pb_product_definition_or_product_definition_relationship = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON product_definition_or_product_definition_relationship WITH
	(interface_connector_occurrence);
END_TYPE;

TYPE system_pmri_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(general_property,
	configuration_item);
END_TYPE;

TYPE system_pb_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(product);
END_TYPE;

TYPE system_ss_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(action_method,
	applied_action_assignment);
END_TYPE;

TYPE system_ap233_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	interface_connection,
	interface_definition_connection,
	product_definition,
	representation,
	product_definition_relationship);
END_TYPE;

(*TYPE system_pmri_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(applied_document_reference,  applied_document_usage_constraint_assignment,
	applied_organization_assignment, applied_person_and_organization_assignment,
	organizational_project);
END_TYPE;*)

ENTITY system__pmri_characterizable_applied_document_reference  
  SUBTYPE OF (applied_document_reference, characterized_object);
END_ENTITY;

  
ENTITY system__pmri_characterizable_applied_document_usage_constraint_assignment
  SUBTYPE OF (applied_document_usage_constraint_assignment, characterized_object);
END_ENTITY;


ENTITY system__pmri_characterizable_applied_organization_assignment 
  SUBTYPE OF (applied_organization_assignment, characterized_object);
END_ENTITY;

 
ENTITY system__pmri_characterizable_applied_person_and_organization_assignment
  SUBTYPE OF (applied_person_and_organization_assignment, characterized_object);
END_ENTITY;


ENTITY system__pmri_characterizable_organizational_project
  SUBTYPE OF (organizational_project, characterized_object);
END_ENTITY;


(*TYPE system_os_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(address,
	person,
	person_and_organization);
END_TYPE;*)

ENTITY system_os_characterizable_address
  SUBTYPE OF (address, characterized_object);
END_ENTITY;


ENTITY system_os_characterizable_person
  SUBTYPE OF (person, characterized_object);
END_ENTITY;


ENTITY system_os_characterizable_person_and_organization
  SUBTYPE OF (person_and_organization, characterized_object);
END_ENTITY;



(*TYPE system_pb_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(hierarchical_interface_connection,
	interface_connection,
	interface_connector_occurrence,
	interface_definition_connection);
END_TYPE;*)

ENTITY system_pb_characterizable_hierarchical_interface_connection
  SUBTYPE OF (hierarchical_interface_connection, characterized_object);
END_ENTITY;


ENTITY system_pb_characterizable_interface_connection
  SUBTYPE OF (interface_connection, characterized_object);
END_ENTITY;


ENTITY system_pb_characterizable_interface_connector_occurrence
  SUBTYPE OF (interface_connector_occurrence, characterized_object);
END_ENTITY;


ENTITY system_pb_characterizable_interface_definition_connection
  SUBTYPE OF (interface_definition_connection, characterized_object);
END_ENTITY;


(*TYPE system_ss_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(applied_action_assignment);
END_TYPE;*)


ENTITY system_ss_characterizable_applied_action_assignment
  SUBTYPE OF (applied_action_assignment, characterized_object);
END_ENTITY;


(*TYPE system_ap233_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
	(executed_action,
	action_property,
	alternate_product_relationship,
	property_definition,
	in_zone,
	general_property,
	general_property_relationship,
	product,
	product_category,
	product_concept,
	configuration_item,
	product_definition_formation,
	product_definition_formation_relationship,
	property_definition_representation,
	representation,
	representation_context,
	representation_item,
	security_classification,
	action_method,
	versioned_action_request);
END_TYPE;*)



ENTITY system_ap233_characterizable_action_method
  SUBTYPE OF (action_method, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_action_property
  SUBTYPE OF (action_property, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_alternate_product_relationship
  SUBTYPE OF (alternate_product_relationship, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_configuration_item
  SUBTYPE OF (configuration_item, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_executed_action
  SUBTYPE OF (executed_action, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_general_property
  SUBTYPE OF (general_property, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_general_property_relationship
  SUBTYPE OF (general_property_relationship, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_in_zone
  SUBTYPE OF (in_zone, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_product
  SUBTYPE OF (product, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_product_category
  SUBTYPE OF (product_category, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_product_concept
  SUBTYPE OF (product_concept, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_product_definition_formation
  SUBTYPE OF (product_definition_formation, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_product_definition_formation_relationship
  SUBTYPE OF (product_definition_formation_relationship, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_property_definition
  SUBTYPE OF (property_definition, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_property_definition_representation
  SUBTYPE OF (property_definition_representation, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_representation
  SUBTYPE OF (representation, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_representation_context
  SUBTYPE OF (representation_context, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_representation_item
  SUBTYPE OF (representation_item, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_security_classification
  SUBTYPE OF (security_classification, characterized_object);
END_ENTITY;


ENTITY system_ap233_characterizable_versioned_action_request	
  SUBTYPE OF (versioned_action_request, characterized_object);
END_ENTITY;



TYPE system_pmri_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(configuration_item,
	product_definition_formation,
	product_definition,
	organizational_project_relationship);
END_TYPE;

TYPE system_pb_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	product,
	product_definition,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	interface_specification_definition,
	interface_specification_version,
	product_as_individual,
	product_as_individual_view,
	product_as_planned,
	product_as_realized,
	product_design_to_individual,
	product_design_version_to_individual,
	promissory_usage_occurrence);
END_TYPE;

TYPE system_ap233_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH
	(action_property,
	property_definition,
	event_occurrence,
	in_zone,
	product);
END_TYPE;

TYPE system_pmri_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(configuration_item);
END_TYPE;

TYPE system_pmri_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(configuration_item);
END_TYPE;

TYPE system_pb_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view);
END_TYPE;

TYPE system_pb_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(alternate_product_relationship,
	assembly_component_usage_substitute,
	product,
	product_definition_group_assignment, breakdown_element_group_assignment,
	breakdown_element_usage,
	product_definition_formation,
	interface_connection,
	interface_connector_definition,
	interface_connector_occurrence,
	interface_definition_connection,
	interface_definition_for,
	product_as_individual,
	product_as_individual_version,
	product_as_individual_view);
END_TYPE;

TYPE system_ss_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH
	(action_property);
END_TYPE;

TYPE system_ss_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH
	(action_property);
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\system_view_definition_mim.exp
   ------------------------------------------------------------
*)

(*"System_view_definition_mim"
   $Id: mim.exp,v 1.5 2007/04/02 13:07:24 philsp Exp $
   ISO TC184/SC4/WG12 N4623 - ISO/WD 10303-1485 System_view_definition - EXPRESS MIM
*)
SCHEMA System_view_definition_mim;

USE FROM Product_view_definition_mim;

USE FROM System_identification_and_version_mim;

TYPE system_definition_identification_item = SELECT BASED_ON identification_item WITH
  (product_definition);
END_TYPE;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\task_element_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.5 2007/03/28 18:19:43 philsp Exp $
   ISO TC184/SC4/WG12 N4626 - ISO/WD 10303-1480 Task_element - EXPRESS MIM 
*)

SCHEMA Task_element_mim;

USE FROM Activity_method_assignment_mim;

USE FROM Condition_mim;

USE FROM method_definition_schema;

ENTITY concurrent_task_element
SUBTYPE OF (task_element);
END_ENTITY;

ENTITY end_task
SUBTYPE OF (task_element);
END_ENTITY;

ENTITY exit_loop
SUBTYPE OF (task_element);
END_ENTITY;

ENTITY looping_element
SUBTYPE OF (task_element);
END_ENTITY;

ENTITY task_element
SUBTYPE OF (action_method);
END_ENTITY;

ENTITY task_element_relationship
SUBTYPE OF (action_method_relationship);
END_ENTITY;

ENTITY task_element_sequence
SUBTYPE OF (task_element);
END_ENTITY;

ENTITY task_step
SUBTYPE OF (task_element);
END_ENTITY;

SUBTYPE_CONSTRAINT restrict_task_method_subtypes FOR task_element;
  ONEOF(concurrent_task_element, end_task, exit_loop, looping_element, task_element_sequence, task_step);
END_SUBTYPE_CONSTRAINT;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\task_specification_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.19 2007/04/10 17:20:46 abhpf Exp $
   ISO TC184/SC4/WG12 N3182 - ISO/WD 10303-1262 Task_specification - EXPRESS MIM 
*)

SCHEMA Task_specification_mim;

USE FROM action_schema
  (action_method,
   action_method_relationship);

USE FROM Activity_method_assignment_mim;

USE FROM Activity_method_mim;

USE FROM Classification_assignment_mim;

USE FROM Condition_mim;

USE FROM Group_mim;

USE FROM State_definition_mim;

USE FROM State_observed_mim;

USE FROM state_observed_schema
  (state_observed);

USE FROM state_type_schema
  (state_type);

USE FROM Task_element_mim;

TYPE task_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH
  (action_method,
   action_method_relationship,
   applied_action_method_assignment,
   applied_state_observed_assignment,
   applied_state_type_assignment);
END_TYPE;

TYPE task_specification_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH
  (action_method,
   action_method_relationship);
END_TYPE;

TYPE task_state_items = EXTENSIBLE SELECT BASED_ON action_method_items WITH
  (applied_state_observed_assignment,
   applied_state_type_assignment,
   state_observed,
   state_type);
END_TYPE;

ENTITY simultaneous_task_element
SUBTYPE OF (concurrent_task_element);
END_ENTITY;

ENTITY task_invocation
SUBTYPE OF (task_element);
END_ENTITY;

ENTITY task_method
SUBTYPE OF (action_method);
END_ENTITY;

ENTITY task_method_relationship
SUBTYPE OF (action_method_relationship);
END_ENTITY;

ENTITY task_method_version
SUBTYPE OF (action_method);
END_ENTITY;

ENTITY task_method_version_relationship
SUBTYPE OF (action_method_relationship);
END_ENTITY;

ENTITY task_objective
SUBTYPE OF (action_method);
END_ENTITY;

SUBTYPE_CONSTRAINT restrict_action_method_relationship_subtypes FOR action_method_relationship;
  ONEOF(task_element_relationship, task_method_relationship, task_method_version_relationship);
END_SUBTYPE_CONSTRAINT;

SUBTYPE_CONSTRAINT restrict_task_action_method_subtypes FOR action_method;
  ONEOF(task_element, task_method, task_method_version, task_objective);
END_SUBTYPE_CONSTRAINT;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\textual_expression_representation_mim.exp
   ------------------------------------------------------------
*)

(*
$Id: mim.exp,v 1.7 2007/03/21 01:25:09 abhpf Exp $
ISO TC184/SC4/WG12 N4629 - ISO/CD-TS 10303-1367 Textual expression representation - EXPRESS MIM
*) 


SCHEMA Textual_expression_representation_mim;

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM qualified_measure_schema   -- ISO 10303-45
  (descriptive_representation_item); 

USE FROM representation_schema   -- ISO 10303-43
  (compound_representation_item,
   representation,
   representation_context,
   representation_item,
   representation_map); 


TYPE ter_classification_item = SELECT BASED_ON classification_item WITH 
   (representation_context, 
    text_based_representation);
END_TYPE; 

TYPE text_based_item_select = EXTENSIBLE GENERIC_ENTITY SELECT
   (included_text_based_representation, 
    textual_expression_composition, 
    textual_expression_representation_item);
END_TYPE; 

ENTITY included_text_based_representation
  SUBTYPE OF (representation_item);
END_ENTITY;

ENTITY text_based_representation
  SUBTYPE OF (representation);
  SELF\representation.context_of_items : text_based_representation_context;
  SELF\representation.items : text_based_item_select;
END_ENTITY;

ENTITY text_based_representation_context
  SUBTYPE OF (representation_context);
END_ENTITY;

ENTITY textual_expression_composition
  SUBTYPE OF (compound_representation_item);
END_ENTITY;

ENTITY textual_expression_representation_item
  SUBTYPE OF (descriptive_representation_item);
END_ENTITY;

END_SCHEMA;  -- Textual_expression_representation_mim




(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\time_interval_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.10 2004/10/22 15:26:05 darla Exp $
 ISO TC184/SC4/WG12 N2119 - ISO/TS 10303-1065 Time interval - EXPRESS MIM
*)

SCHEMA Time_interval_mim; 

USE FROM date_time_schema   -- ISO 10303-41
  (time_interval,
   time_interval_relationship,
   time_interval_with_bounds); 

USE FROM Event_mim;    -- ISO/TS 10303-1064

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054


END_SCHEMA;  -- Time_interval_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\time_interval_assignment_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.4 2003/10/14 14:32:49 robbod Exp $
 ISO TC184/SC4/WG12 N2121 - ISO/TS 10303-1365 Time interval assignment - EXPRESS MIM
*) 


SCHEMA Time_interval_assignment_mim; 

USE FROM date_time_schema   -- ISO 10303-41
  (time_interval_role); 

USE FROM management_resources_schema   -- ISO 10303-41
  (time_interval_assignment); 

USE FROM Time_interval_mim;    -- ISO/TS 10303-1065


TYPE time_interval_item = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY applied_time_interval_assignment
  SUBTYPE OF (time_interval_assignment);
  items : SET[0:?] OF time_interval_item;
END_ENTITY;

END_SCHEMA;  -- Time_interval_assignment_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\type_of_person_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.10 2004/11/19 21:37:58 robbod Exp $
 ISO TC184/SC4/WG12 N3185 - ISO/TS 10303-1245 Type of person - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2451
*) 


SCHEMA Type_of_person_mim;

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM Experience_mim;    -- ISO/TS 10303-1243

USE FROM experience_schema   -- ISO 10303-41
  (experience_type); 

USE FROM management_resources_schema   -- ISO 10303-41
  (person_type_assignment,
   person_type_definition_assignment); 

USE FROM person_organization_schema   -- ISO 10303-41
  (person_type,
   person_type_definition,
   person_type_definition_relationship); 

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

USE FROM Qualifications_mim;    -- ISO/TS 10303-1244

USE FROM qualifications_schema   -- ISO 10303-41
  (qualification_type); 


TYPE person_definition_item = EXTENSIBLE GENERIC_ENTITY SELECT
   (experience_type, 
    qualification_type);
END_TYPE; 

TYPE person_type_definition_relationship_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (applied_person_type_assignment, 
    applied_person_type_definition_assignment, 
    person_type, 
    person_type_definition, 
    person_type_definition_relationship);
END_TYPE; 

TYPE person_type_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_person_type_assignment
  SUBTYPE OF (person_type_assignment);
  items : SET[1:?] OF person_type_item;
END_ENTITY;

ENTITY applied_person_type_definition_assignment
  SUBTYPE OF (person_type_definition_assignment);
  items : SET[1:?] OF person_definition_item;
END_ENTITY;

ENTITY characterized_person_type_definition
  SUBTYPE OF (characterized_object, person_type_definition);
END_ENTITY;

END_SCHEMA;  -- Type_of_person_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\value_with_unit_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.13 2004/10/22 15:28:54 darla Exp $
 ISO TC184/SC4/WG12 N1302 - ISO/TS 10303-1054 Value with unit - EXPRESS MIM
*)

SCHEMA Value_with_unit_mim;

USE FROM measure_schema;

USE FROM representation_schema
 (uncertainty_measure_with_unit);

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\verification_and_validation_mim.exp
   ------------------------------------------------------------
*)

SCHEMA Verification_and_validation_mim;

USE FROM group_schema;

USE FROM Requirement_assignment_mim;

TYPE verification_evidence_item = EXTENSIBLE GENERIC_ENTITY SELECT ;
END_TYPE;

ENTITY verification
SUBTYPE OF (group);
END_ENTITY;

ENTITY verification_evidence
SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : verification;
  items : SET [1 : ?] OF verification_evidence_item;
END_ENTITY;

ENTITY verification_relationship
SUBTYPE OF (group_relationship);
  SELF\group_relationship.relating_group : verification;
  SELF\group_relationship.related_group : verification;
END_ENTITY;

END_SCHEMA;



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\work_order_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.13 2004/10/22 15:31:03 darla Exp $
 ISO TC184/SC4/WG12 N1154 - ISO/TS 10303-1043 Work order - EXPRESS MIM
*)

SCHEMA Work_order_mim; 

USE FROM Activity_mim;    -- ISO/TS 10303-1047

USE FROM Work_request_mim;    -- ISO/TS 10303-1042

USE FROM action_schema   -- ISO 10303-41
  (action_directive,
   directed_action); 

END_SCHEMA; 


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\work_output_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2004/11/19 21:37:58 robbod Exp $
 ISO TC184/SC4/WG12 N3191 - ISO/TS 10303-1300 Work output - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2457
*) 


SCHEMA Work_output_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_method,
   action_method_relationship); 

USE FROM Activity_method_assignment_mim;    -- ISO/TS 10303-1249

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM management_resources_schema   -- ISO 10303-41
  (action_method_assignment,
   action_method_role); 

USE FROM process_property_representation_schema   -- ISO 10303-49
  (action_property_representation); 

USE FROM process_property_schema   -- ISO 10303-49
  (action_property,
   characterized_action_definition); 

USE FROM representation_schema   -- ISO 10303-43
  (representation,
   representation_context,
   representation_item,
   value_representation_item); 

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054


TYPE work_output_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (action_method, 
    action_method_assignment, 
    action_method_relationship);
END_TYPE; 

END_SCHEMA;  -- Work_output_mim


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\work_request_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.16 2004/10/22 15:32:13 darla Exp $
 ISO TC184/SC4/WG12 N1151 - ISO/TS 10303-1042 Work request - EXPRESS MIM
*)

SCHEMA Work_request_mim;

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM action_schema   -- ISO 10303-41
  (action_request_solution,
   action_request_status,
   versioned_action_request); 

USE FROM management_resources_schema   -- ISO 10303-41
   (action_request_assignment);


TYPE action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT ;
END_TYPE;

ENTITY applied_action_request_assignment
SUBTYPE OF (action_request_assignment);
  items : SET [1 : ?] OF action_request_item;
END_ENTITY;

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\work_structure_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.9 2007/04/02 16:18:14 philsp Exp $
 ISO TC184/SC4/WG12 N4632 - ISO/WD 10303-1438 Work structure - EXPRESS MIM
*)
(*            UNDER DEVELOPMENT by H.P. Frisch
		This file starts with the mim.exp for this module.
		All referenced mim.exp's and IR schemas needed to generate a 
		long form and for .xml production are appended.  
	      NOTE:  Many duplications exist, they need to be auto-removed.  
	      	Auto-condensation of extensible type lists also need to be done.  
		When done checkability and traceability of mim.exp information 
		detail will be destroyed. 
		This module was hand generated via cut, paste, search and replace.
		To eliminate human error it needs to be auto-generated from the arm.exp.
*)
SCHEMA Work_structure_mim;
  USE FROM Project_management_resource_information_mim;
  USE FROM Work_order_mim;

TYPE ws_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ss_action_items WITH
  (observation_consequence);
END_TYPE;

TYPE ws_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ss_action_method_items WITH
  (observation_consequence,
   action_method,
   action_method_assignment);
END_TYPE;

TYPE ws_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_approval_item WITH
  (action_request_solution,
   applied_action_request_assignment,
   directed_action,
   observation,
   action_method,
   versioned_action_request);
END_TYPE;

TYPE ws_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pmri_certification_item WITH
  (action_method);
END_TYPE;

-- characterized_activity_definition is enabled by USE FROM Action_schema and mapping table detail

(*TYPE ws_characterized_activity_definition = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ss_characterized_activity_definition WITH
  (action_method);
END_TYPE;*)

TYPE ws_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pmri_classification_item WITH
  (action_request_solution,
   applied_action_request_assignment,
   directed_action,
   observation,
   observation_consequence,
   representation,
   observation_relationship,
   action_method,
   action_method_assignment,
   action_method_relationship,
   versioned_action_request,
   action_request_status);
END_TYPE;

TYPE ws_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pmri_attribute_classification_item WITH
  (action_request_solution,
   applied_action_request_assignment,
   action_method,
   action_method_relationship,
   versioned_action_request,
   action_request_status);
END_TYPE;

TYPE ws_condition_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pmri_condition_action_method_items WITH
  (action_method,
   versioned_action_request);
END_TYPE;

TYPE ws3_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pmri_action_method_items WITH
  (observation,
   action_method);
END_TYPE;

TYPE ws_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pmri_contract_item WITH
  (action_method);
END_TYPE;

TYPE ws_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH
  (action_request_solution,
   applied_action_request_assignment,
   directed_action,
   observation,
   action_method,
   versioned_action_request);
END_TYPE;

TYPE ws_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH
  (action_request_solution,
   applied_action_request_assignment,
   directed_action,
   observation,
   action_method,
   versioned_action_request);
END_TYPE;

TYPE ws_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pmri_document_reference_item WITH
  (observation,
   observation_consequence,
   action_method,
   versioned_action_request);
END_TYPE;

TYPE ws_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pmri_effectivity_item WITH
  (action_method,
   action_method_assignment,
   action_method_relationship);
END_TYPE;

TYPE ws_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_identification_item WITH
  (applied_action_request_assignment,
   directed_action,
   observation,
   observation_consequence,
   action_method,
   versioned_action_request);
END_TYPE;

TYPE ws_justification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pmri_justification_item WITH
  (action_request_solution,
   applied_action_request_assignment,
   directed_action,
   action_method,
   action_method_assignment,
   versioned_action_request);
END_TYPE;

TYPE ws_justification_support_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pmri_justification_support_item WITH
  (action_request_solution,
   observation,
   action_method,
   versioned_action_request);
END_TYPE;

TYPE ws_location_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pmri_location_item WITH
  (action_request_solution);
END_TYPE;

TYPE ws_observed_context_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON observed_context_item WITH
  (action_method,
   versioned_action_request);
END_TYPE;

TYPE ws_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_person_and_organization_item WITH
  (action_request_solution,
   applied_action_request_assignment,
   directed_action,
   observation,
   action_method,
   versioned_action_request);
END_TYPE;

TYPE ws_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_organization_item WITH
  (action_request_solution,
   applied_action_request_assignment,
   directed_action,
   observation,
   action_method,
   versioned_action_request);
END_TYPE;

TYPE ws_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pmri_security_classification_item WITH
  (action_request_solution,
   applied_action_request_assignment,
   directed_action,
   observation,
   observation_consequence,
   representation,
   observation_relationship,
   action_method,
   action_method_assignment,
   action_method_relationship,
   versioned_action_request,
   action_request_status);
END_TYPE;

TYPE ws_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ss_state_type_of_item WITH
  (action_method,
   versioned_action_request);
END_TYPE;

TYPE ws_state_observed_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON ss_state_observed_of_item WITH
  (action_method,
   versioned_action_request);
END_TYPE;

TYPE ws_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_multi_language_attribute_item WITH
  (action_request_solution,
   observation,
   observation_consequence,
   observation_relationship,
   action_method,
   action_method_relationship,
   versioned_action_request);
END_TYPE;

TYPE ws_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_attribute_language_item WITH
  (action_request_solution,
   observation,
   observation_consequence,
   observation_relationship,
   action_method,
   action_method_relationship,
   versioned_action_request);
END_TYPE;

TYPE ws_time_interval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON time_interval_item WITH
  (action_request_solution,
   applied_action_request_assignment,
   directed_action,
   observation,
   action_method,
   versioned_action_request);
END_TYPE;

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\zonal_breakdown_mim.exp
   ------------------------------------------------------------
*)

(*
 $Id: mim.exp,v 1.11 2004/11/29 14:08:47 mikeward Exp $
 ISO TC184/SC4/WG12 N3200 - ISO/TS 10303-1217 Zonal breakdown - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2304
*) 


SCHEMA Zonal_breakdown_mim;

USE FROM Group_mim;    -- ISO/TS 10303-1113

USE FROM group_schema   -- ISO 10303-41
  (group); 

USE FROM Product_breakdown_mim;    -- ISO/TS 10303-1248

USE FROM product_definition_schema   -- ISO 10303-41
  (product_definition); 

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019


TYPE in_zone_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (product_definition);
END_TYPE; 

ENTITY in_zone
  SUBTYPE OF (group);
END_ENTITY;

ENTITY zone_breakdown_context
  SUBTYPE OF (breakdown_context);
END_ENTITY;

ENTITY zone_element_usage
  SUBTYPE OF (breakdown_element_usage);
END_ENTITY;

END_SCHEMA;  -- Zonal_breakdown_mim




(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\external_analysis_representation_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.5 2007/07/05 07:26:43 philsp Exp $
  ISO TC184/SC4/WG12 N4575 - ISO/WD 10303-1784 external_analysis_representation - EXPRESS MIM*)
(* UNDER DEVELOPMENT *)
SCHEMA External_analysis_representation_mim;

USE FROM Analysis_representation_mim;    -- ISO/CD-TS 10303-1785

USE FROM File_identification_mim;    -- ISO/TS 10303-1127

USE FROM product_property_definition_schema   -- ISO 10303-41
  (property_definition); 

USE FROM product_property_representation_schema   -- ISO 10303-41
  (property_definition_representation); 


END_SCHEMA;  -- External_analysis_representation_mim



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\ballots\ballots\ap233_sc4-cd_build\express\mim\analysis_representation_mim.exp
   ------------------------------------------------------------
*)

(*
   $Id: mim.exp,v 1.6 2007/07/05 07:22:45 philsp Exp $
   ISO TC184/SC4/WG12 N4551 - ISO/TS 10303-1785 analysis_representation - EXPRESS MIM
*)
SCHEMA Analysis_representation_mim;

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM systems_engineering_representation_schema   -- ISO 10303-61
  (analysis_model,
   analysis_representation_context); 


END_SCHEMA;  -- Analysis_representation_mim

(*
   ------------------------------------------------------------
    COMMON RESOURCE SCHEMAS
   ------------------------------------------------------------
*)



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\action_schema\action_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: action_schema.exp,v 1.11 2004/11/25 16:29:38 thendrix Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 

SCHEMA action_schema; 

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value,
   get_id_value,
   get_name_value,
   id_attribute,
   name_attribute); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE supported_item = SELECT
   (action, 
    action_directive, 
    action_method);
END_TYPE; 

ENTITY action;
  name : label;
  description : OPTIONAL text;
  chosen_method : action_method;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY action_directive;
  name : label;
  description : OPTIONAL text;
  analysis : text;
  comment : text;
  requests : SET[1:?] OF versioned_action_request;
END_ENTITY;

ENTITY action_method;
  name : label;
  description : OPTIONAL text;
  consequence : text;
  purpose : text;
END_ENTITY;

ENTITY action_method_relationship;
  name : label;
  description : OPTIONAL text;
  relating_method : action_method;
  related_method : action_method;
END_ENTITY;

ENTITY action_relationship;
  name : label;
  description : OPTIONAL text;
  relating_action : action;
  related_action : action;
END_ENTITY;

ENTITY action_request_solution;
  method : action_method;
  request : versioned_action_request;
DERIVE
  description : text := get_description_value (SELF);
  name : label := get_name_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
END_ENTITY;

ENTITY action_request_status;
  status : label;
  assigned_request : versioned_action_request;
END_ENTITY;

ENTITY action_resource;
  name : label;
  description : OPTIONAL text;
  usage : SET[1:?] OF supported_item;
  kind : action_resource_type;
END_ENTITY;

ENTITY action_resource_relationship;
  name : label;
  description : OPTIONAL text;
  relating_resource : action_resource;
  related_resource : action_resource;
END_ENTITY;

ENTITY action_resource_type;
  name : label;
END_ENTITY;

ENTITY action_status;
  status : label;
  assigned_action : executed_action;
END_ENTITY;

ENTITY directed_action
  SUBTYPE OF (executed_action);
  directive : action_directive;
END_ENTITY;

ENTITY executed_action
  SUBTYPE OF (action);
END_ENTITY;

ENTITY versioned_action_request;
  id : identifier;
  version : label;
  purpose : text;
  description : OPTIONAL text;
END_ENTITY;

ENTITY versioned_action_request_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_versioned_action_request : versioned_action_request;
  related_versioned_action_request : versioned_action_request;
END_ENTITY;

FUNCTION acyclic_action_method_relationship (relation : action_method_relationship; relatives : SET [1:?] OF action_method; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF action_method_relationship;
    END_LOCAL;

    IF relation.relating_method IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(am <* bag_to_set(USEDIN(relation.relating_method, 'ACTION_SCHEMA.' + 'ACTION_METHOD_RELATIONSHIP.' + 'RELATED_METHOD')) | specific_relation IN TYPEOF(am));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_action_method_relationship(x[i], relatives + relation.relating_method, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

  FUNCTION acyclic_action_relationship (relation : action_relationship; relatives : SET [1:?] OF action; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF action_relationship;
    END_LOCAL;

    IF relation.relating_action IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(actn <* bag_to_set(USEDIN(relation.relating_action, 'ACTION_SCHEMA.' + 'ACTION_RELATIONSHIP.' + 'RELATED_ACTION')) | specific_relation IN TYPEOF(actn));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_action_relationship(x[i], relatives + relation.relating_action, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

  FUNCTION acyclic_action_resource_relationship (relation : action_resource_relationship; relatives : SET [1:?] OF action_resource; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF action_resource_relationship;
    END_LOCAL;

    IF relation.relating_resource IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(ar <* bag_to_set(USEDIN(relation.relating_resource, 'ACTION_SCHEMA.' + 'ACTION_RESOURCE_RELATIONSHIP.' + 'RELATED_RESOURCE')) | specific_relation IN TYPEOF(ar));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_action_resource_relationship(x[i], relatives + relation.relating_resource, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

  FUNCTION acyclic_versioned_action_request_relationship (relation : versioned_action_request_relationship; relatives : SET OF versioned_action_request; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF versioned_action_request_relationship;
    END_LOCAL;

    IF relation.relating_versioned_action_request IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(varr <* bag_to_set(USEDIN(relation.relating_versioned_action_request, 'ACTION_SCHEMA.' + 'VERSIONED_ACTION_REQUEST_RELATIONSHIP.' + 'RELATED_VERSIONED_ACTION_REQUEST')) | specific_relation IN TYPEOF(varr));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_versioned_action_request_relationship(x[i], relatives + relation.relating_versioned_action_request, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION; 

END_SCHEMA;  -- action_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_advanced_brep\aic_advanced_brep.exp
   ------------------------------------------------------------
*)

SCHEMA aic_advanced_brep;
  
USE FROM aic_topologically_bounded_surface;
 USE FROM geometry_schema ( cartesian_transformation_operator_3d);
 USE FROM geometric_model_schema ( manifold_solid_brep, brep_with_voids);
 REFERENCE FROM geometric_model_schema ( msb_shells);
 USE FROM topology_schema ( closed_shell, connected_face_set, oriented_closed_shell);
 USE FROM representation_schema ( mapped_item);
 USE FROM product_property_representation_schema ( shape_representation);
  
ENTITY advanced_brep_shape_representation 
 SUBTYPE OF ( shape_representation );
 WHERE 
WR1 : 
SIZEOF ( 
QUERY ( it <* SELF.items| NOT ( SIZEOF ([ 'AIC_ADVANCED_BREP.MANIFOLD_SOLID_BREP', 'AIC_ADVANCED_BREP.FACETED_BREP', 'AIC_ADVANCED_BREP.MAPPED_ITEM', 'AIC_ADVANCED_BREP.AXIS2_PLACEMENT_3D' ] * TYPEOF (it)) = 1) )) = 0;
WR2 : 
SIZEOF ( 
QUERY ( it <* SELF.items| ( SIZEOF ([ 'AIC_ADVANCED_BREP.MANIFOLD_SOLID_BREP', 'AIC_ADVANCED_BREP.MAPPED_ITEM' ] * TYPEOF (it)) = 1) )) > 0;
WR3 : 
SIZEOF ( 
QUERY ( msb <* 
QUERY ( it <* SELF.items| ('AIC_ADVANCED_BREP.MANIFOLD_SOLID_BREP' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( csh <* msb_shells(msb)| NOT ( SIZEOF ( 
QUERY ( fcs <* csh\connected_face_set.cfs_faces| NOT ('AIC_ADVANCED_BREP.ADVANCED_FACE' IN TYPEOF (fcs)) )) = 0) )) = 0) )) = 0;
WR4 : 
SIZEOF ( 
QUERY ( msb <* 
QUERY ( it <* items| ('AIC_ADVANCED_BREP.MANIFOLD_SOLID_BREP' IN TYPEOF (it)) )| ('AIC_ADVANCED_BREP.ORIENTED_CLOSED_SHELL' IN TYPEOF (msb\manifold_solid_brep.outer)) )) = 0;
WR5 : 
SIZEOF ( 
QUERY ( brv <* 
QUERY ( it <* items| ('AIC_ADVANCED_BREP.BREP_WITH_VOIDS' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( csh <* brv\brep_with_voids.voids| csh\oriented_closed_shell.orientation )) = 0) )) = 0;
WR6 : 
SIZEOF ( 
QUERY ( mi <* 
QUERY ( it <* items| ('AIC_ADVANCED_BREP.MAPPED_ITEM' IN TYPEOF (it)) )| NOT ('AIC_ADVANCED_BREP.ADVANCED_BREP_SHAPE_REPRESENTATION' IN TYPEOF (mi\mapped_item.mapping_source.mapped_representation)) )) = 0;
 END_ENTITY ;
END_SCHEMA;
 


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_associative_draughting_elements\aic_associative_draughting_elements.exp
   ------------------------------------------------------------
*)

(* EXPRESS short form corresponding to 10303-520 IS 
   WG12 N383 *)

SCHEMA aic_associative_draughting_elements;

 USE FROM measure_schema                            -- ISO 10303-41
  (derived_unit,
  named_unit);

 USE FROM product_property_definition_schema        -- ISO 10303-41
  (property_definition, -- GL added
  shape_aspect, -- GL added
  shape_aspect_relationship);

 USE FROM product_property_representation_schema    -- ISO 10303-41
   (shape_definition_representation);

 REFERENCE FROM support_resource_schema             -- ISO 10303-41
  (bag_to_set);

-- GL-added
 USE FROM geometry_schema             -- ISO 10303-42
  (axis2_placement);

 USE FROM representation_schema                     -- ISO 10303-43
  (mapped_item,
  representation,
  representation_item,
  representation_map);

 REFERENCE FROM representation_schema               -- ISO 10303-43
  (using_representations);

 USE FROM qualified_measure_schema                  -- ISO 10303-45
  (measure_representation_item);

 USE FROM presentation_appearance_schema            -- ISO 10303-46
  (curve_style,
  styled_item);
 
 USE FROM presentation_definition_schema            -- ISO 10303-46
  (annotation_curve_occurrence,
  annotation_fill_area_occurrence,
  annotation_occurrence,
  annotation_occurrence_relationship,
  annotation_symbol_occurrence,
  annotation_text_occurrence,
  text_literal);

 USE FROM presentation_organization_schema            -- ISO 10303-46
  (camera_model,
  annotation_representation_select); -- GL added

 USE FROM shape_dimension_schema                    -- ISO 10303-47
  (dimensional_characteristic_representation,
  shape_dimension_representation);

 USE FROM draughting_element_schema                 -- ISO 10303-101
  (annotation_plane,
  draughting_callout,
  leader_curve,
  projection_curve);

-- LK new in aic_associative_draughting_elements:
TYPE aade_annotation_representation_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON annotation_representation_select WITH
  (draughting_model); 
END_TYPE;

TYPE draughting_model_item_select = SELECT
  (mapped_item,
   styled_item,
   axis2_placement,
   camera_model,
   draughting_callout); --GL added
END_TYPE;  

ENTITY annotation_occurrence_associativity
  SUBTYPE OF (annotation_occurrence_relationship);
WHERE
  WR1:  SIZEOF (TYPEOF (SELF.related_annotation_occurrence) *
                ['AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.ANNOTATION_FILL_AREA_OCCURRENCE',
                'AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.PROJECTION_CURVE',
                'AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.LEADER_CURVE']) = 1;
END_ENTITY;

ENTITY dimension_text_associativity
  SUBTYPE OF (text_literal, mapped_item);
WHERE
  WR1:  ('AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.SHAPE_DIMENSION_REPRESENTATION'
          IN TYPEOF (SELF\mapped_item.
                          mapping_source.mapped_representation));
  WR2:  ('AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.DRAUGHTING_CALLOUT'
          IN TYPEOF (SELF\mapped_item.mapping_target));
  WR3:  SIZEOF (QUERY (ato <* QUERY (si <* 
                USEDIN (SELF, 'PRESENTATION_APPEARANCE_SCHEMA.STYLED_ITEM.ITEM') |
                  ('AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.ANNOTATION_TEXT_OCCURRENCE'
                    IN TYPEOF(si))) |
                NOT (SIZEOF( QUERY (dc <*
                   USEDIN (ato, 'DRAUGHTING_ELEMENT_SCHEMA.' +
                                 'DRAUGHTING_CALLOUT.CONTENTS') |
                     ('AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.DRAUGHTING_CALLOUT'
                   IN TYPEOF (dc)))
                  * [SELF\mapped_item.mapping_target]) = 1)
                )) = 0;
END_ENTITY;

ENTITY draughting_model
  SUBTYPE OF (representation);
    SELF\representation.items : SET[1:?] OF draughting_model_item_select;
UNIQUE
  UR1:  SELF\representation.name;
WHERE
  WR1:  SIZEOF (QUERY (mi <* QUERY (it <* SELF.items |
                 ('AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.MAPPED_ITEM' IN TYPEOF(it))) |
                 NOT (
                   SIZEOF (['AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.SHAPE_REPRESENTATION',
                            'AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.DRAUGHTING_MODEL'] *
                      TYPEOF (mi\mapped_item.mapping_source.
                              mapped_representation)) = 1
               ))) = 0;
  WR2:  SIZEOF (QUERY (smi <* QUERY (si <* QUERY (it <* SELF.items |
                 ('AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.STYLED_ITEM' IN TYPEOF(it))) |
                 ('AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.MAPPED_ITEM' IN
                     TYPEOF(si\styled_item.item))) |
                 (NOT (('AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.SHAPE_REPRESENTATION' IN
                          TYPEOF(smi\styled_item.item\mapped_item.
                                 mapping_source.mapped_representation))
                     AND
                      (SIZEOF (QUERY (sty <* smi\styled_item.styles |
                        (NOT (SIZEOF (QUERY (psa <* sty.styles |
                               (NOT ('AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.CURVE_STYLE' IN TYPEOF(psa))))) = 1
                     )))) = 1)))
               )) = 0;
END_ENTITY;

ENTITY shape_aspect_associativity
  SUBTYPE OF (shape_aspect_relationship);
  -- GL - we need this kind of path so often in WRs 3 and 4, 
  -- so we better calulcate it only once in a DERIVED attribute
  -- shape_aspect <- property_definition.definition <- shape_definition_representation.definition
  -- shape_definition_representation.used_representation -> shape_representation.items -> xxx_callout
  DERIVE
    callouts : SET[1:?] OF draughting_callout := get_callouts_for_shape_aspect(SELF.related_shape_aspect);
WHERE
  WR1:  SELF.relating_shape_aspect.product_definitional;
  WR2:  NOT (SELF.related_shape_aspect.product_definitional);
  -- Idea, have 2 group of rules - because cardinality callout vs GD&T is not 1:1
  -- WRs capturing callout <-> GD&T type for 1:N1 links as callouts maybe combined in complex and
  -- There are no callout -> GD&T type for 1:N.
  WR3: (NOT('AIC_DRAUGHTING_ELEMENTS.'+'DATUM_FEATURE_CALLOUT' IN TYPEOF(callouts[1])) OR
       ('SHAPE_ASPECT_DEFINITION_SCHEMA.'+'DATUM_FEATURE' IN TYPEOF(SELF.relating_shape_aspect)));
  WR4: (NOT('AIC_DRAUGHTING_ELEMENTS.'+'DATUM_TARGET_CALLOUT' IN TYPEOF(callouts[1])) OR
       ('SHAPE_ASPECT_DEFINITION_SCHEMA.'+'DATUM_TARGET' IN TYPEOF(SELF.relating_shape_aspect)));
  WR5: (NOT('AIC_DRAUGHTING_ELEMENTS.'+'ANGULAR_DIMENSION' IN TYPEOF(callouts[1])) OR
       ('SHAPE_DIMENSION_SCHEMA.'+'ANGULAR_SIZE' IN TYPEOF(SELF.relating_shape_aspect)));
       -- Names are from Recommended practices on GD&T      
  WR6: ((NOT('AIC_DRAUGHTING_ELEMENTS.'+'CURVE_DIMENSION' IN TYPEOF(callouts[1])) OR
       ('SHAPE_ASPECT_DEFINITION_SCHEMA.'+'DIMENSIONAL_SIZE' IN TYPEOF(SELF.relating_shape_aspect))) AND
       (SELF.relating_shape_aspect.name = 'curve dimension'));
  WR7: ((NOT('AIC_DRAUGHTING_ELEMENTS.'+'DIAMETER_DIMENSION' IN TYPEOF(callouts[1])) OR
       ('SHAPE_ASPECT_DEFINITION_SCHEMA.'+'DIMENSIONAL_SIZE' IN TYPEOF(SELF.relating_shape_aspect))) AND
       (SELF.relating_shape_aspect.name = 'diameter'));
  WR8: ((NOT('AIC_DRAUGHTING_ELEMENTS.'+'LINEAR_DIMENSION' IN TYPEOF(callouts[1])) OR
       ('SHAPE_ASPECT_DEFINITION_SCHEMA.'+'DIMENSIONAL_SIZE' IN TYPEOF(SELF.relating_shape_aspect))) AND
       ((SELF.relating_shape_aspect.name = 'heigth') OR 
       (SELF.relating_shape_aspect.name = 'length') OR
       (SELF.relating_shape_aspect.name = 'width')));
  WR9: ((NOT('AIC_DRAUGHTING_ELEMENTS.'+'RADIUS_DIMENSION' IN TYPEOF(callouts[1])) OR
       ('SHAPE_ASPECT_DEFINITION_SCHEMA.'+'DIMENSIONAL_SIZE' IN TYPEOF(SELF.relating_shape_aspect))) AND
       (SELF.relating_shape_aspect.name = 'radius'));
  WR10: (NOT('AIC_DRAUGHTING_ELEMENTS.'+'GEOMETRICAL_TOLERANCE_CALLOUT' IN TYPEOF(callouts[1])) OR
       ('SHAPE_TOLERANCE_SCHEMA.'+'GEOMETRIC_TOLERANCE' IN TYPEOF(SELF.relating_shape_aspect)));
  -- WRs capturing callout <- GD&T type for N:1 links and       
  WR11: (NOT('SHAPE_DIMENSION_SCHEMA.'+'DIMENSIONAL_SIZE' IN TYPEOF(SELF.relating_shape_aspect)) OR
        (['DRAUGHTING_DIMENSION_SCHEMA.'+'DIMENSION_CALLOUT',
        'DRAUGHTING_ELEMENT_SCHEMA.'+'DIMENSION_CURVE_DIRECTED_CALLOUT',
        'AIC_DRAUGHTING_ELEMENTS.'+'LEADER_DIRECTED_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.'+'ORDINATE_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.'+'STRUCTURED_DIMENSION_CALLOUT'] IN TYPEOF(callouts[1])));
-- TODO - discuss with LK what I wrote above.
END_ENTITY;

FUNCTION check_associative_shape_aspects
  (sdr : shape_definition_representation) : BOOLEAN;
  LOCAL
    sr1, sr2 : SET OF representation;
    dm, pv   : SET OF representation;
  END_LOCAL;

  -- Check if the representation contains only two items
  IF (SIZEOF (sdr.used_representation.items) <> 2) THEN
     RETURN (FALSE);
  END_IF;

  -- Find the representations that use each item
  sr1 := using_representations(sdr.used_representation.items[1]);
  sr2 := using_representations(sdr.used_representation.items[2]);

  -- Find the representations in which item 1 representations are mapped
  REPEAT i := 1 TO HIINDEX(sr1);
    dm := representations_mapped_into(sr1[i]);
    REPEAT j := 1 TO HIINDEX(dm);
      IF ('AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.DRAUGHTING_MODEL' IN TYPEOF(dm[j]))
      THEN
        IF (dm[j] IN sr2) THEN RETURN (TRUE);
        END_IF;
        -- Find the views that the draughting model is mapped into
        pv := representations_mapped_into(dm[j]);
        REPEAT k := 1 TO HIINDEX(pv);
          IF ('AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.PRESENTATION_VIEW' IN TYPEOF(pv[k]))
          THEN
            IF (pv[k] IN sr2) THEN RETURN (TRUE);
            END_IF;
          END_IF;
        END_REPEAT;
      END_IF;
    END_REPEAT;
  END_REPEAT;

  -- Find the representations in which item 2 representations are mapped
  REPEAT i := 1 TO HIINDEX(sr2);
    dm := representations_mapped_into(sr2[i]);
    REPEAT j := 1 TO HIINDEX(dm);
      IF ('AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.DRAUGHTING_MODEL' IN TYPEOF(dm[j]))
      THEN
        IF (dm[j] IN sr1) THEN RETURN (TRUE);
        END_IF;
        -- Find the views that the draughting model is mapped into
        pv := representations_mapped_into(dm[j]);
        REPEAT k := 1 TO HIINDEX(pv);
          IF ('AIC_ASSOCIATIVE_DRAUGHTING_ELEMENTS.PRESENTATION_VIEW' IN TYPEOF(pv[k]))
          THEN
            IF (pv[k] IN sr1) THEN RETURN (TRUE);
            END_IF;
          END_IF;
        END_REPEAT;
      END_IF;
    END_REPEAT;
  END_REPEAT;
  RETURN(FALSE);
END_FUNCTION;

FUNCTION representations_mapped_into 
  (rep : representation) : SET of representation;
  LOCAL
    results : SET OF representation := [];
    rm      : SET OF representation_map;
    mi      : SET OF mapped_item := [];
  END_LOCAL;

  -- Find set of representation_maps which specify the representation
  rm := bag_to_set(USEDIN(rep, 'REPRESENTATION_SCHEMA.' +
                    'REPRESENTATION_MAP.MAPPED_REPRESENTATION'));
  -- Find the set of mapped_items that use each representation_map
  REPEAT i := 1 TO HIINDEX(rm);
    mi := mi + rm[i].map_usage;
  END_REPEAT;
  -- Find the set of representations that use each mapped_item
  REPEAT j := 1 TO HIINDEX(mi);
    results := results + USEDIN(mi[j],'REPRESENTATION_SCHEMA.' +
                                      'REPRESENTATION.ITEMS');
  END_REPEAT;
  RETURN(results);
END_FUNCTION;

FUNCTION get_callouts_for_shape_aspect 
  (sa : shape_aspect) : SET of draughting_callout;
  LOCAL
    pd      : SET OF property_definition;
    sdr     : SET OF shape_definition_representation;
    r       : representation;
    ri      : representation_item;
    result  : SET OF draughting_callout;
  END_LOCAL;
  -- Find shape_aspect <- property_defintiion
  pd := bag_to_set(USEDIN(sa, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' +
                    'PROPERTY_DEFINITION.DEFINITION'));
  -- Find property_defininition <- shape_description_representation
  REPEAT i := 1 TO HIINDEX(pd);
  	sdr := sdr + bag_to_set(QUERY (pdr <* (USEDIN(pd[i], 'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.' +
                    'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION')) | 
		'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.'+
		'SHAPE_DEFINITION_REPRESENTATION' IN TYPEOF (pdr)));
  END_REPEAT;                    
  
  -- Find shape_description_representation -> shape_representation -> draughting_callout
  REPEAT i := 1 TO HIINDEX(sdr);
    r := sdr[i].used_representation;
    IF ('PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.SHAPE_REPRESENTATION' IN TYPEOF(r)) THEN
      REPEAT j := 1 TO HIINDEX(r.items);
        ri := r.items[j];
        IF ('DRAUGHTING_ELEMENT_SCHEMA.DRAUGHTING_CALLOUT' IN TYPEOF(ri)) THEN
          result := result + ri;  
        END_IF;
      END_REPEAT;                            
    END_IF;
  END_REPEAT;                 
  
  RETURN(result);
END_FUNCTION;


END_SCHEMA;  


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_csg\aic_csg.exp
   ------------------------------------------------------------
*)

SCHEMA aic_csg;
  
USE FROM aic_advanced_brep;
 USE FROM aic_faceted_brep;
 USE FROM geometric_model_schema ( block, boolean_operand, boolean_operator, boolean_result, box_domain, boxed_half_space, csg_primitive, csg_select, csg_solid, extruded_face_solid, half_space_solid, revolved_face_solid, right_angular_wedge, right_circular_cone, right_circular_cylinder, solid_replica, sphere, torus);
  
ENTITY csg_shape_representation 
 SUBTYPE OF ( shape_representation );
 WHERE 
WR1 : SELF.context_of_items\geometric_representation_context.coordinate_space_dimension = 3;
WR2 : 
SIZEOF ( 
QUERY ( it <* SELF.items| ( SIZEOF ([ 'AIC_CSG.CSG_SOLID', 'AIC_CSG.MAPPED_ITEM', 'AIC_CSG.AXIS2_PLACEMENT_3D', 'AIC_CSG.SOLID_REPLICA', 'AIC_CSG.REVOLVED_FACE_SOLID', 'AIC_CSG.EXTRUDED_FACE_SOLID' ] * TYPEOF (it)) <> 1) )) = 0;
WR3 : 
SIZEOF ( 
QUERY ( mi <* 
QUERY ( it <* SELF.items| ('AIC_CSG.MAPPED_ITEM' IN TYPEOF (it)) )| NOT ('AIC_CSG.CSG_SHAPE_REPRESENTATION' IN TYPEOF (mi\mapped_item.mapping_source.mapped_representation)) )) = 0;
WR4 : 
SIZEOF ( 
QUERY ( sr <* 
QUERY ( it <* SELF.items| ('AIC_CSG.SOLID_REPLICA' IN TYPEOF (it)) )| ( SIZEOF ([ 'AIC_CSG.CSG_SOLID', 'AIC_CSG.REVOLVED_FACE_SOLID', 'AIC_CSG.EXTRUDED_FACE_SOLID' ] * TYPEOF (sr\solid_replica.parent_solid)) = 0) )) = 0;
WR5 : 
SIZEOF ( 
QUERY ( it <* SELF.items| NOT ('AIC_CSG.AXIS2_PLACEMENT_3D' IN TYPEOF (it)) )) > 0;
 END_ENTITY ;
END_SCHEMA;
 


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_draughting_annotation\aic_draughting_annotation.exp
   ------------------------------------------------------------
*)

(*
  This is the EXPRESS of the IS version of ISO 10303-504.
  This document is ISO TC 184/SC4/WG12 N503.
*)
SCHEMA aic_draughting_annotation;

USE FROM draughting_element_schema	-- ISO 10303-101
  (draughting_callout,
   terminator_symbol);

USE FROM geometry_schema	-- ISO 10303-42
  (axis2_placement_2d,
   geometric_representation_context);

USE FROM measure_schema	-- ISO 10303-41
  (conversion_based_unit,
   derived_unit,
   global_unit_assigned_context,
   length_measure_with_unit,
   length_unit,
   measure_with_unit,
   named_unit,
   plane_angle_unit,
   plane_angle_measure_with_unit,
   si_unit);
USE FROM presentation_appearance_schema	-- ISO 10303-46
  (box_height,
   box_rotate_angle,
   box_slant_angle,
   box_width,
   context_dependent_invisibility,
   curve_style,
   curve_style_font,
   externally_defined_curve_font,
   externally_defined_hatch_style,
   externally_defined_tile_style,
   fill_area_style,
   fill_area_style_colour,
   fill_area_style_hatching,
   fill_area_style_tile_symbol_with_style,
   fill_area_style_tiles,
   null_style,
   pre_defined_curve_font,
   presentation_style_by_context,
   symbol_colour,
   symbol_style,
   text_style,
   text_style_for_defined_font,
   text_style_with_box_characteristics,
   text_style_with_mirror,
   text_style_with_spacing);

USE FROM presentation_definition_schema	-- ISO 10303-46
  (annotation_curve_occurrence,
   annotation_fill_area,
   annotation_fill_area_occurrence,
   annotation_occurrence,
   annotation_symbol,
   annotation_symbol_occurrence,
   annotation_text_occurrence,
   composite_text,
   composite_text_with_associated_curves,
   composite_text_with_blanking_box,
   composite_text_with_extent,
   defined_symbol,
   externally_defined_symbol,
   pre_defined_symbol,
   symbol_representation,
   symbol_representation_map,
   text_alignment,
   text_literal,
   text_literal_with_associated_curves,
   text_literal_with_blanking_box,
   text_literal_with_delineation,
   text_literal_with_extent);

USE FROM presentation_resource_schema	-- ISO 10303-46
  (colour_rgb,
   externally_defined_text_font,
   font_select,
   pre_defined_colour,
   pre_defined_text_font);

USE FROM representation_schema	-- ISO 10303-43
  (mapped_item,
   representation,
   representation_item);

ENTITY annotation_subfigure_occurrence
  SUBTYPE OF (annotation_symbol_occurrence);
WHERE
  WR1: SIZEOF (QUERY (sty <* SELF.styles |
         NOT (SIZEOF (sty.styles) = 1)
       )) = 0;
  WR2: SIZEOF (QUERY (sty <* SELF.styles |
         NOT ('AIC_DRAUGHTING_ANNOTATION.NULL_STYLE'
               IN TYPEOF (sty.styles[1]))       ))=0;
  WR3: ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL'
           IN TYPEOF (SELF.item));
  WR4: ('AIC_DRAUGHTING_ANNOTATION.DRAUGHTING_SUBFIGURE_REPRESENTATION'
           IN TYPEOF
           (SELF.item\mapped_item.mapping_source.mapped_representation));
END_ENTITY;

ENTITY draughting_annotation_occurrence
  SUBTYPE OF (annotation_occurrence);
WHERE
  WR1:	-- curve_has_curve_style:
    (NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_CURVE_OCCURRENCE'
            IN TYPEOF (SELF))) OR
    (SIZEOF (QUERY (sty <* SELF.styles |
       NOT ((SIZEOF (sty.styles) = 1)
         AND ('AIC_DRAUGHTING_ANNOTATION.CURVE_STYLE'
                 IN TYPEOF (sty.styles[1]))) )) = 0);
  WR2:	-- fill_area_has_fill_style:
    (NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_FILL_AREA_OCCURRENCE'
            IN TYPEOF (SELF))) OR    (SIZEOF (QUERY (sty <* SELF.styles |
      NOT ((SIZEOF (sty.styles) = 1)
        AND ('AIC_DRAUGHTING_ANNOTATION.FILL_AREA_STYLE'
                IN TYPEOF (sty.styles[1]))) )) = 0);
  WR3:	-- styled_fill_boundaries:
    (NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_FILL_AREA_OCCURRENCE'
            IN TYPEOF (SELF))) OR    (SIZEOF (QUERY (bound <*
                     SELF.item\annotation_fill_area.boundaries |
       NOT (SIZEOF (QUERY (si <*
                   USEDIN (bound, 'PRESENTATION_APPEARANCE_SCHEMA.' +
                                  'STYLED_ITEM.ITEM') |
         ('AIC_DRAUGHTING_ANNOTATION.' +
             'ANNOTATION_CURVE_OCCURRENCE' IN TYPEOF (si)))) > 0))) = 0);
  WR4:	-- symbol_has_symbol_style:
    (NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL_OCCURRENCE'
            IN TYPEOF (SELF))) OR    (SIZEOF (QUERY (sty <* SELF.styles |
       NOT ((SIZEOF (sty.styles) = 1)           AND
            (SIZEOF (TYPEOF (sty.styles[1]) *
                ['AIC_DRAUGHTING_ANNOTATION.SYMBOL_STYLE',
                 'AIC_DRAUGHTING_ANNOTATION.NULL_STYLE']) = 1)) )) = 0);
  WR5:	-- allowable_symbol_representations:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL_OCCURRENCE'
             IN TYPEOF (SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL'
             IN TYPEOF(SELF.item)))) OR
         (SIZEOF (['AIC_DRAUGHTING_ANNOTATION.' +
                   'DRAUGHTING_SYMBOL_REPRESENTATION',
                  'AIC_DRAUGHTING_ANNOTATION.' +
                  'DRAUGHTING_SUBFIGURE_REPRESENTATION'] *
          TYPEOF (SELF.item\mapped_item.mapping_source.
                  mapped_representation)) = 1);
  WR6:	-- text_has_text_style:
    (NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
            IN TYPEOF (SELF))) OR
    (SIZEOF (QUERY (sty <* SELF.styles |
       NOT ((SIZEOF (sty.styles) = 1)
        AND ('AIC_DRAUGHTING_ANNOTATION.TEXT_STYLE'
                IN TYPEOF (sty.styles[1]))) )) = 0);
  WR7:	-- allowable_text:
     (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (SELF))) OR
         (SIZEOF (TYPEOF(SELF.item) *
             ['AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT',
              'AIC_DRAUGHTING_ANNOTATION.TEXT_LITERAL']) = 1);
  WR8:	-- text_not_nested:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT'
             IN TYPEOF (SELF.item)))) OR    (SIZEOF (QUERY (tl <*
                   SELF.item\composite_text.collected_text |
             NOT ('AIC_DRAUGHTING_ANNOTATION.TEXT_LITERAL' 
             IN TYPEOF (tl)) )) = 0);
  WR9:	-- text_alignment_literals:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.TEXT_LITERAL'
             IN TYPEOF (SELF.item)))) OR (SELF.item\text_literal.alignment 
             IN ['baseline left', 'baseline centre', 'baseline right']);
  WR10:	-- text_alignment_composites:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT'
             IN TYPEOF (SELF.item)))) OR
         (SIZEOF (QUERY (tl <* QUERY (text <* SELF.
                  item\composite_text.collected_text
             |('AIC_DRAUGHTING_ANNOTATION.TEXT_LITERAL' IN TYPEOF(text))) |
          NOT (tl\text_literal.alignment IN
         ['baseline left', 'baseline centre', 'baseline right']) )) = 0);
  WR11:	-- single_text_alignment:
    NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF(SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT'
             IN TYPEOF (SELF.item))) OR check_text_alignment(SELF.item);
  WR12:	-- single_text_font:
    NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF(SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT'
             IN TYPEOF (SELF.item))) OR check_text_font(SELF.item);
  WR13:	-- allowable_text_literals:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF(SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT'
               IN TYPEOF (SELF.item)))) OR
         (SIZEOF (QUERY (tl <* QUERY (text <*
            SELF.item\composite_text.collected_text |
            ('AIC_DRAUGHTING_ANNOTATION.TEXT_LITERAL' IN TYPEOF (text))) |
             NOT (SIZEOF (TYPEOF(tl) *
                  ['AIC_DRAUGHTING_ANNOTATION.' +
                   'TEXT_LITERAL_WITH_BLANKING_BOX',
                   'AIC_DRAUGHTING_ANNOTATION.' +
                   'TEXT_LITERAL_WITH_ASSOCIATED_CURVES']) = 0) )) = 0);
  WR14:	-- styled_text_literal_curves:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.TEXT_LITERAL_WITH_ASSOCIATED_CURVES'
             IN TYPEOF (SELF.item)))) OR
    (SIZEOF (QUERY (crv <*
                   SELF.item\text_literal_with_associated_curves.
                   associated_curves |
      NOT (SIZEOF (QUERY (si <*  USEDIN (crv, 
             'PRESENTATION_APPEARANCE_SCHEMA.STYLED_ITEM.ITEM') |
        ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_CURVE_OCCURRENCE'
            IN TYPEOF (si)) )) > 0) )) = 0);
  WR15:	-- styled_composite_text_curves:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT_WITH_ASSOCIATED_CURVES'
             IN TYPEOF (SELF.item)))) OR
          (SIZEOF (QUERY (crv <*
                SELF.item\composite_text_with_associated_curves.
                associated_curves |
           NOT (SIZEOF (QUERY (si <*  USEDIN (crv,
                'PRESENTATION_APPEARANCE_SCHEMA.STYLED_ITEM.ITEM') |
               ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_CURVE_OCCURRENCE'
           IN TYPEOF (si)) )) > 0) )) = 0);
WR16:	-- curve_style_has_width:
    SIZEOF (QUERY (cs <* QUERY (sty <* SELF.styles |
      ('AIC_DRAUGHTING_ANNOTATION.CURVE_STYLE' IN TYPEOF (sty.styles[1])))
      | NOT (('AIC_DRAUGHTING_ANNOTATION.LENGTH_MEASURE_WITH_UNIT'
        IN TYPEOF (cs.styles[1]\curve_style.curve_width)) AND
       ('MEASURE_SCHEMA.POSITIVE_LENGTH_MEASURE'
        IN TYPEOF (cs.styles[1]\curve_style.
        curve_width\measure_with_unit.value_component))))) = 0;
WR17:	-- tiling_constraints:
    SIZEOF (QUERY (fas <* QUERY (sty <* SELF.styles |
      ('AIC_DRAUGHTING_ANNOTATION.FILL_AREA_STYLE'
          IN TYPEOF (sty.styles[1]))) |
      NOT ((SIZEOF (QUERY (fs <* fas.styles[1]\fill_area_style.fill_styles
                    | ('AIC_DRAUGHTING_ANNOTATION.FILL_AREA_STYLE_TILES'
                       IN TYPEOF (fs)))) <= 1)
       AND (SIZEOF (QUERY (fst <* QUERY (fs <*
                           fas.styles[1]\fill_area_style.fill_styles |
              ('AIC_DRAUGHTING_ANNOTATION.FILL_AREA_STYLE_TILES'
                  IN TYPEOF (fs))) |
                 NOT (SIZEOF (fst\fill_area_style_tiles.tiles) = 1)
           )) = 0))
    )) = 0;
  WR18:	-- hatching_constraints:
    SIZEOF (QUERY (fas <* QUERY (sty <* SELF.styles |
           ('AIC_DRAUGHTING_ANNOTATION.FILL_AREA_STYLE' 
            IN TYPEOF (sty.styles[1]))) |
             NOT (SIZEOF (QUERY (fsh <* QUERY (fs <*
                          fas.styles[1]\fill_area_style.fill_styles |
             ('AIC_DRAUGHTING_ANNOTATION.FILL_AREA_STYLE_HATCHING'
               IN TYPEOF (fs))) |
        NOT (fsh\fill_area_style_hatching.point_of_reference_hatch_line :=:
             fsh\fill_area_style_hatching.pattern_start)  )) = 0)  )) = 0;
  WR19:	-- text_style_constraint:
    SIZEOF (QUERY (ts <* QUERY (sty <* SELF.styles |
         ('AIC_DRAUGHTING_ANNOTATION.TEXT_STYLE' 
         IN TYPEOF(sty.styles[1]))) |
             NOT ('AIC_DRAUGHTING_ANNOTATION.' +
                  'TEXT_STYLE_WITH_BOX_CHARACTERISTICS'
             IN TYPEOF (ts.styles[1])))) = 0;
  WR20:	-- text_style_characteristics:
    SIZEOF (QUERY (ts <* QUERY (sty <* SELF.styles |
         ('AIC_DRAUGHTING_ANNOTATION.TEXT_STYLE_WITH_BOX_CHARACTERISTICS'
             IN TYPEOF (sty.styles[1]))) |
           NOT (SIZEOF (ts.styles[1]\text_style_with_box_characteristics.
                characteristics) = 4) )) = 0;
END_ENTITY;

ENTITY draughting_subfigure_representation
  SUBTYPE OF (symbol_representation);
WHERE
  WR1: SIZEOF (QUERY (item <* SELF\representation.items |
         NOT (SIZEOF (['AIC_DRAUGHTING_ANNOTATION.ANNOTATION_OCCURRENCE',
              'AIC_DRAUGHTING_ANNOTATION.DRAUGHTING_CALLOUT',
              'GEOMETRY_SCHEMA.AXIS2_PLACEMENT']
               * TYPEOF (item)) = 1))) = 0;
  WR2: SIZEOF (QUERY (item <* SELF\representation.items |
         SIZEOF (['AIC_DRAUGHTING_ANNOTATION.ANNOTATION_OCCURRENCE',
                  'AIC_DRAUGHTING_ANNOTATION.DRAUGHTING_CALLOUT'] *
           TYPEOF (item)) = 1)) >= 1;
  WR3: SIZEOF (QUERY (srm <* QUERY (rm <*
          USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                        'REPRESENTATION_MAP.MAPPED_REPRESENTATION') |
          ('AIC_DRAUGHTING_ANNOTATION.SYMBOL_REPRESENTATION_MAP'
             IN TYPEOF(rm))) | 
            NOT (SIZEOF (QUERY (a_s <* QUERY (mi <* srm.map_usage |
            ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL' IN TYPEOF(mi)))
          | NOT (SIZEOF (QUERY (aso <*
            USEDIN (a_s, 'PRESENTATION_APPEARANCE_SCHEMA.' + 
                         'STYLED_ITEM.ITEM') |
          NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SUBFIGURE_OCCURRENCE'
            IN TYPEOF(aso)))) = 0))) = 0))) > 0;
  WR4: NOT (acyclic_mapped_item_usage (SELF));
  WR5: SIZEOF (SELF.context_of_items.representations_in_context) = 1;
END_ENTITY;

ENTITY draughting_symbol_representation
  SUBTYPE of (symbol_representation);
UNIQUE
  UR1: SELF\representation.name;
WHERE
  WR1: 
    SIZEOF (QUERY (item <* SELF\representation.items |
         NOT (SIZEOF (TYPEOF (item) *
            ['AIC_DRAUGHTING_ANNOTATION.ANNOTATION_CURVE_OCCURRENCE',
             'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL_OCCURRENCE',
             'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_FILL_AREA_OCCURRENCE',
             'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE',
             'GEOMETRY_SCHEMA.AXIS2_PLACEMENT']) = 1)
       )) = 0;
  WR2: 
    SIZEOF (QUERY (item <* SELF\representation.items |
         (SIZEOF (TYPEOF (item) *
            ['AIC_DRAUGHTING_ANNOTATION.ANNOTATION_CURVE_OCCURRENCE',
             'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL_OCCURRENCE',
             'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_FILL_AREA_OCCURRENCE',
             'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE']) = 1)
       )) >= 1;
  WR3: 
    SIZEOF (QUERY (item <* SELF\representation.items |
         'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SUBFIGURE_OCCURRENCE'
          IN TYPEOF (item))) = 0;
  WR4: 
    SIZEOF (QUERY (srm <* QUERY (rm <*
          USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                        'REPRESENTATION_MAP.MAPPED_REPRESENTATION') |
          ('REPRESENTATION_SCHEMA.SYMBOL_REPRESENTATION_MAP'
             IN TYPEOF(rm))) |
         NOT (SIZEOF (QUERY (a_s <* QUERY (mi <* srm.map_usage |
           ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL' IN TYPEOF(mi))) |
         NOT (SIZEOF (QUERY(aso <*
             USEDIN(a_s, 'PRESENTATION_APPEARANCE_SCHEMA.' +
                         'STYLED_ITEM.ITEM') |
             NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL_OCCURRENCE'
                  IN TYPEOF(aso))
          )) = 0) )) = 0) )) > 0;
  WR5: 
    NOT (acyclic_mapped_item_usage (SELF));
  WR6: 
    SIZEOF (SELF.context_of_items.representations_in_context) = 1;
END_ENTITY;

ENTITY draughting_text_literal_with_delineation
  SUBTYPE OF (text_literal_with_delineation);
WHERE
  WR1: SELF.delineation IN ['underline', 'overline'];
END_ENTITY;

FUNCTION acyclic_mapped_item_usage (rep: representation) : BOOLEAN;
  -- returns TRUE if the representation contains one or more mapped_items
  -- that are a mapping of the representation itself
  LOCAL
    items : SET OF representation_item;
  END_LOCAL;

  items := QUERY (item <* rep.items |
           'AIC_DRAUGHTING_ANNOTATION.MAPPED_ITEM' IN TYPEOF (item));
  IF SIZEOF (items) = 0
  THEN 
    RETURN (FALSE);
  ELSE 
    REPEAT i := 1 TO HIINDEX (items);
      IF items[i]\mapped_item.mapping_source.mapped_representation :=: rep
      THEN 
        RETURN (TRUE);
      ELSE 
        RETURN (acyclic_mapped_item_usage(items[i]\
                  mapped_item.mapping_source.mapped_representation));
      END_IF;
    END_REPEAT;
  RETURN (FALSE);
  END_IF;
END_FUNCTION;

FUNCTION check_text_alignment (ct : composite_text) : BOOLEAN;

  LOCAL
    a : SET OF text_alignment := [];
  END_LOCAL;

  -- create a set of all the alignments
  REPEAT i := 1 TO HIINDEX (ct.collected_text);
    a := a + [ct.collected_text[i]\text_literal.alignment];
  END_REPEAT;

  -- if there is more than one element in the set
  -- then not all alignments were the same
  RETURN (SIZEOF(a) = 1);
END_FUNCTION;

FUNCTION check_text_font (ct : composite_text) : BOOLEAN;

  LOCAL
    f : SET OF font_select := [];
  END_LOCAL;

  -- build a set of all the fonts
  REPEAT i := 1 TO HIINDEX (ct.collected_text);
    f := f + [ct.collected_text[i]\text_literal.font];
  END_REPEAT;

  -- if there is more than one element in the set
  -- then not all fonts were the same
  RETURN (SIZEOF(f) <= 1);
END_FUNCTION;

END_SCHEMA; -- aic_draughting_annotation


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_draughting_elements\aic_draughting_elements.exp
   ------------------------------------------------------------
*)

(*
  This is the EXPRESS of the IS version of ISO 10303-506.
  This document is ISO TC 184/SC4/WG12 N488.
*)

SCHEMA aic_draughting_elements;

USE FROM draughting_element_schema	-- ISO 10303-101
  (dimension_curve,
   dimension_curve_directed_callout,
   dimension_curve_terminator,
   draughting_callout,
   draughting_callout_relationship,
   leader_curve,
   leader_directed_callout,
   leader_terminator,
   projection_curve,
   projection_directed_callout);

USE FROM presentation_definition_schema	-- ISO 10303-46
  (annotation_text_occurrence);

ENTITY angular_dimension
  SUBTYPE OF (dimension_curve_directed_callout);
END_ENTITY;

ENTITY curve_dimension
  SUBTYPE OF (dimension_curve_directed_callout);
END_ENTITY;

ENTITY datum_feature_callout
  SUBTYPE OF (draughting_callout);
END_ENTITY;

ENTITY datum_target_callout
  SUBTYPE OF (draughting_callout);
END_ENTITY;

ENTITY diameter_dimension
  SUBTYPE OF (dimension_curve_directed_callout);
END_ENTITY;

ENTITY dimension_callout_component_relationship
  SUBTYPE OF (draughting_callout_relationship);
WHERE
  WR1: SELF.name IN ['prefix', 'suffix'];
  WR2: 'AIC_DRAUGHTING_ELEMENTS.STRUCTURED_DIMENSION_CALLOUT'
           IN TYPEOF (SELF.relating_draughting_callout);
  WR3: SIZEOF (TYPEOF (SELF.related_draughting_callout) *
       ['AIC_DRAUGHTING_ELEMENTS.LEADER_DIRECTED_CALLOUT',
        'AIC_DRAUGHTING_ELEMENTS.PROJECTION_DIRECTED_CALLOUT',
        'AIC_DRAUGHTING_ELEMENTS.DIMENSION_CURVE_DIRECTED_CALLOUT',
        'AIC_DRAUGHTING_ELEMENTS.STRUCTURED_DIMENSION_CALLOUT']) = 0;
  WR4: SELF.related_draughting_callout.contents *
       SELF.relating_draughting_callout.contents =
       SELF.related_draughting_callout.contents;
  WR5: ((SELF.name = 'prefix') AND
       (SIZEOF (QUERY (ato <* QUERY (con <*
                 SELF.related_draughting_callout.contents |
         ('AIC_DRAUGHTING_ELEMENTS.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF(con))) |
         NOT (ato.name = 'prefix text')
       )) = 0));
 
  WR6: ((SELF.name = 'suffix') AND
       (SIZEOF (QUERY (ato <* QUERY (con <*
                 SELF.related_draughting_callout.contents |
         ('AIC_DRAUGHTING_ELEMENTS.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF(con))) |
         NOT (ato.name = 'suffix text')
       )) = 0));
END_ENTITY;

ENTITY dimension_callout_relationship
  SUBTYPE OF (draughting_callout_relationship);
WHERE
  WR1: SELF.name IN ['primary', 'secondary'];
  WR2: SIZEOF (TYPEOF (SELF.relating_draughting_callout) * 
       ['AIC_DRAUGHTING_ELEMENTS.ANGULAR_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.CURVE_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.DIAMETER_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.LEADER_DIRECTED_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.LINEAR_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.ORDINATE_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.RADIUS_DIMENSION'])>=1;
  WR3: SIZEOF (TYPEOF (SELF.related_draughting_callout) *
       ['AIC_DRAUGHTING_ELEMENTS.DIMENSION_CURVE_DIRECTED_CALLOUT',
        'AIC_DRAUGHTING_ELEMENTS.PROJECTION_DIRECTED_CALLOUT',
        'AIC_DRAUGHTING_ELEMENTS.LEADER_DIRECTED_CALLOUT']) = 0;
  WR4: SELF.related_draughting_callout.contents *
       SELF.relating_draughting_callout.contents =
       SELF.related_draughting_callout.contents;
END_ENTITY;

ENTITY dimension_pair
  SUBTYPE OF (draughting_callout_relationship);
WHERE
  WR1: SELF.name IN ['chained', 'parallel'];
  WR2: SIZEOF (TYPEOF (SELF.relating_draughting_callout) *
       ['AIC_DRAUGHTING_ELEMENTS.ANGULAR_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.CURVE_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.DIAMETER_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.LINEAR_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.ORDINATE_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.RADIUS_DIMENSION'])=1;
  WR3: SIZEOF (TYPEOF (SELF.related_draughting_callout) *
       ['AIC_DRAUGHTING_ELEMENTS.ANGULAR_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.CURVE_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.DIAMETER_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.LINEAR_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.ORDINATE_DIMENSION',
        'AIC_DRAUGHTING_ELEMENTS.RADIUS_DIMENSION'])=1;
END_ENTITY;

ENTITY draughting_elements
  SUBTYPE OF (draughting_callout);
WHERE
  WR1: SIZEOF (QUERY (l_c <* QUERY (con <* SELF.contents |
              ('AIC_DRAUGHTING_ELEMENTS.LEADER_CURVE' IN TYPEOF(con))) |
              NOT (SIZEOF (QUERY (ldc <* USEDIN (l_c,
               'DRAUGHTING_ELEMENT_SCHEMA.' + 'DRAUGHTING_CALLOUT.CONTENTS') |
              ('AIC_DRAUGHTING_ELEMENTS.LEADER_DIRECTED_CALLOUT'
              IN TYPEOF (ldc)))) <= 1)))=0;
  WR2: NOT    ('DRAUGHTING_ELEMENT_SCHEMA.DIMENSION_CURVE_DIRECTED_CALLOUT'
              IN TYPEOF(SELF)) OR
              (SIZEOF (QUERY (con <* SELF.contents |
              ('AIC_DRAUGHTING_ELEMENTS.PROJECTION_CURVE' IN
               TYPEOF (con)))) <= 2);
  WR3: SIZEOF (QUERY (rc <* USEDIN (SELF,
              'DRAUGHTING_ELEMENT_SCHEMA.DRAUGHTING_CALLOUT_' +
              'RELATIONSHIP.RELATING_DRAUGHTING_CALLOUT') |
              ('AIC_DRAUGHTING_ELEMENTS.' +
               'DIMENSION_CALLOUT_RELATIONSHIP' IN TYPEOF (rc)) AND
              (rc.name = 'primary') )) <= 1;
  WR4: SIZEOF (QUERY (rc <* USEDIN (SELF,
              'DRAUGHTING_ELEMENT_SCHEMA.DRAUGHTING_CALLOUT_' +
              'RELATIONSHIP.RELATING_DRAUGHTING_CALLOUT') |
               ('AIC_DRAUGHTING_ELEMENTS.' +
                'DIMENSION_CALLOUT_RELATIONSHIP' IN TYPEOF (rc)) AND
                (rc.name = 'secondary') )) <= 1;
  WR5: SIZEOF (QUERY (sec <* QUERY (rc <* USEDIN (SELF,
               'DRAUGHTING_ELEMENT_SCHEMA.DRAUGHTING_CALLOUT_' +
               'RELATIONSHIP.RELATING_DRAUGHTING_CALLOUT') |
               ('AIC_DRAUGHTING_ELEMENTS.' +
                'DIMENSION_CALLOUT_RELATIONSHIP' IN TYPEOF (rc)) AND         
                (rc.name = 'secondary') ) |
         NOT (SIZEOF (QUERY (prim <* USEDIN (SELF,
               'DRAUGHTING_ELEMENT_SCHEMA.DRAUGHTING_CALLOUT_' +
               'RELATIONSHIP.RELATING_DRAUGHTING_CALLOUT') |
               ('AIC_DRAUGHTING_ELEMENTS.' +
                'DIMENSION_CALLOUT_RELATIONSHIP' IN TYPEOF (prim)) AND         
                (prim.name = 'primary') )) = 1))) = 0;  
END_ENTITY;

ENTITY geometrical_tolerance_callout
  SUBTYPE OF (draughting_callout);
END_ENTITY;

ENTITY leader_directed_dimension
  SUBTYPE OF (leader_directed_callout);
WHERE
  WR1: SIZEOF (QUERY (con <* SELF.contents |
       'AIC_DRAUGHTING_ELEMENTS.LEADER_CURVE' IN TYPEOF (con)))=1;
END_ENTITY;

ENTITY linear_dimension
  SUBTYPE OF (dimension_curve_directed_callout);
END_ENTITY;

ENTITY ordinate_dimension
   SUBTYPE OF (projection_directed_callout);
END_ENTITY;

ENTITY radius_dimension
  SUBTYPE OF (dimension_curve_directed_callout);
WHERE
  WR1: SIZEOF (QUERY (con <* SELF.contents |
       'AIC_DRAUGHTING_ELEMENTS.PROJECTION_CURVE' IN TYPEOF (con)))<=1;
END_ENTITY;

ENTITY structured_dimension_callout
  SUBTYPE OF (draughting_callout);
WHERE
  WR1: SIZEOF (TYPEOF (SELF) *
       ['AIC_DRAUGHTING_ELEMENTS.DATUM_FEATURE_CALLOUT',
        'AIC_DRAUGHTING_ELEMENTS.DATUM_TARGET_CALLOUT',
        'AIC_DRAUGHTING_ELEMENTS.GEOMETRICAL_TOLERANCE_CALLOUT',
        'AIC_DRAUGHTING_ELEMENTS.LEADER_DIRECTED_CALLOUT',
        'AIC_DRAUGHTING_ELEMENTS.PROJECTION_DIRECTED_CALLOUT',
        'AIC_DRAUGHTING_ELEMENTS.DIMENSION_CURVE_DIRECTED_CALLOUT']) = 0;
  WR2: SIZEOF (QUERY (ato <* QUERY (con <* SELF.contents |
         ('AIC_DRAUGHTING_ELEMENTS.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (con))) |
         NOT (ato.name IN
             ['dimension value', 'tolerance value', 'unit text',
              'prefix text', 'suffix text']))) = 0;
  WR3: SIZEOF (QUERY (ato <* QUERY (con <* SELF.contents |
         ('AIC_DRAUGHTING_ELEMENTS.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (con))) |
         (ato.name = 'dimension value')
       )) >= 1;
  WR4: SIZEOF (QUERY (dcr <* USEDIN (SELF, 'DRAUGHTING_ELEMENT_SCHEMA.' +
         'DRAUGHTING_CALLOUT_RELATIONSHIP.' +
         'RELATING_DRAUGHTING_CALLOUT') |
         ('AIC_DRAUGHTING_ELEMENTS.' +
          'DIMENSION_CALLOUT_COMPONENT_RELATIONSHIP' IN TYPEOF (dcr)) AND 
         (dcr.name = 'prefix') )) <= 1;
  WR5: SIZEOF (QUERY (dcr <* USEDIN (SELF, 'DRAUGHTING_ELEMENT_SCHEMA.' +
         'DRAUGHTING_CALLOUT_RELATIONSHIP.' +
         'RELATING_DRAUGHTING_CALLOUT') |
         ('AIC_DRAUGHTING_ELEMENTS.' +
          'DIMENSION_CALLOUT_COMPONENT_RELATIONSHIP' IN TYPEOF (dcr)) AND 
         (dcr.name = 'suffix') )) <= 1;
  WR6: NOT((SIZEOF (QUERY (ato <* QUERY (con <* SELF.contents |
         ('AIC_DRAUGHTING_ELEMENTS.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF(con)) ) |
         (ato.name = 'prefix text')
       )) > 0)) OR
       (SIZEOF (QUERY (dcr <* USEDIN (SELF, 'DRAUGHTING_ELEMENT_SCHEMA.' +
                               'DRAUGHTING_CALLOUT_RELATIONSHIP.' +
                               'RELATING_DRAUGHTING_CALLOUT') |
         ('AIC_DRAUGHTING_ELEMENTS.' +
          'DIMENSION_CALLOUT_COMPONENT_RELATIONSHIP' IN TYPEOF (dcr)) AND  
         (dcr.name = 'prefix') )) = 1);
  WR7: NOT(SIZEOF (QUERY (ato <* QUERY (con <* SELF.contents |
         ('AIC_DRAUGHTING_ELEMENTS.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF(con))) |
         (ato.name = 'suffix text')
       )) > 0) OR
       (SIZEOF (QUERY (dcr <* USEDIN (SELF, 'DRAUGHTING_ELEMENT_SCHEMA.' +
                               'DRAUGHTING_CALLOUT_RELATIONSHIP.' +
                               'RELATING_DRAUGHTING_CALLOUT') |
         ('AIC_DRAUGHTING_ELEMENTS.' +
          'DIMENSION_CALLOUT_COMPONENT_RELATIONSHIP' IN TYPEOF (dcr)) AND    
            (dcr.name = 'suffix') )) = 1);
END_ENTITY;

END_SCHEMA;


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_edge_based_wireframe\aic_edge_based_wireframe.exp
   ------------------------------------------------------------
*)

SCHEMA aic_edge_based_wireframe;
  
USE FROM geometric_model_schema ( edge_based_wireframe_model);
 USE FROM geometry_schema ( axis2_placement_3d, b_spline_curve_with_knots, bezier_curve, cartesian_transformation_operator_3d, circle, conic, curve, curve_replica, ellipse, geometric_representation_context, hyperbola, line, offset_curve_3d, parabola, point, point_replica, polyline, quasi_uniform_curve, rational_b_spline_curve, uniform_curve);
 USE FROM product_property_representation_schema ( shape_representation);
 USE FROM representation_schema ( mapped_item);
 USE FROM topology_schema ( edge_curve, vertex_point);
  
ENTITY edge_based_wireframe_shape_representation 
 SUBTYPE OF ( shape_representation );
 WHERE 
WR1 : 
SIZEOF ( 
QUERY ( it <* SELF.items| NOT ( SIZEOF ([ 'AIC_EDGE_BASED_WIREFRAME.EDGE_BASED_WIREFRAME_MODEL', 'AIC_EDGE_BASED_WIREFRAME.MAPPED_ITEM', 'AIC_EDGE_BASED_WIREFRAME.AXIS2_PLACEMENT_3D' ] * TYPEOF (it)) = 1) )) = 0;
WR2 : 
SIZEOF ( 
QUERY ( it <* SELF.items| ( SIZEOF ([ 'AIC_EDGE_BASED_WIREFRAME.EDGE_BASED_WIREFRAME_MODEL', 'AIC_EDGE_BASED_WIREFRAME.MAPPED_ITEM' ] * TYPEOF (it)) = 1) )) >= 1;
WR3 : 
SIZEOF ( 
QUERY ( ebwm <* 
QUERY ( it <* SELF.items| ('AIC_EDGE_BASED_WIREFRAME.EDGE_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( eb <* ebwm\edge_based_wireframe_model.ebwm_boundary| NOT ( SIZEOF ( 
QUERY ( edges <* eb.ces_edges| NOT ('AIC_EDGE_BASED_WIREFRAME.EDGE_CURVE' IN TYPEOF (edges)) )) = 0) )) = 0) )) = 0;
WR4 : 
SIZEOF ( 
QUERY ( ebwm <* 
QUERY ( it <* SELF.items| ('AIC_EDGE_BASED_WIREFRAME.EDGE_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( eb <* ebwm\edge_based_wireframe_model.ebwm_boundary| NOT ( SIZEOF ( 
QUERY ( pline_edges <* 
QUERY ( edges <* eb.ces_edges| ('AIC_EDGE_BASED_WIREFRAME.POLYLINE' IN TYPEOF (edges\edge_curve.edge_geometry)) )| NOT ( SIZEOF (pline_edges\edge_curve.edge_geometry\polyline.points) > 2) )) = 0) )) = 0) )) = 0;
WR5 : 
SIZEOF ( 
QUERY ( ebwm <* 
QUERY ( it <* SELF.items| ('AIC_EDGE_BASED_WIREFRAME.EDGE_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( eb <* ebwm\edge_based_wireframe_model.ebwm_boundary| NOT ( SIZEOF ( 
QUERY ( edges <* eb.ces_edges| NOT (('AIC_EDGE_BASED_WIREFRAME.VERTEX_POINT' IN TYPEOF (edges.edge_start)) AND ('AIC_EDGE_BASED_WIREFRAME.VERTEX_POINT' IN TYPEOF (edges.edge_end))) )) = 0) )) = 0) )) = 0;
WR6 : 
SIZEOF ( 
QUERY ( ebwm <* 
QUERY ( it <* SELF.items| ('AIC_EDGE_BASED_WIREFRAME.EDGE_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( eb <* ebwm\edge_based_wireframe_model.ebwm_boundary| NOT ( SIZEOF ( 
QUERY ( edges <* eb.ces_edges| NOT valid_wireframe_edge_curve(edges\edge_curve.edge_geometry) )) = 0) )) = 0) )) = 0;
WR7 : 
SIZEOF ( 
QUERY ( ebwm <* 
QUERY ( it <* SELF.items| ('AIC_EDGE_BASED_WIREFRAME.EDGE_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( eb <* ebwm\edge_based_wireframe_model.ebwm_boundary| NOT ( SIZEOF ( 
QUERY ( edges <* eb.ces_edges| NOT (valid_wireframe_vertex_point(edges.edge_start\vertex_point.vertex_geometry) AND valid_wireframe_vertex_point(edges.edge_end\vertex_point.vertex_geometry)) )) = 0) )) = 0) )) = 0;
WR8 : 
SIZEOF ( 
QUERY ( mi <* 
QUERY ( it <* SELF.items| ('AIC_EDGE_BASED_WIREFRAME.MAPPED_ITEM' IN TYPEOF (it)) )| NOT ('AIC_EDGE_BASED_WIREFRAME.' + 'EDGE_BASED_WIREFRAME_SHAPE_REPRESENTATION' IN TYPEOF (mi\mapped_item.mapping_source.mapped_representation)) )) = 0;
WR9 : SELF.context_of_items\geometric_representation_context.coordinate_space_dimension = 3;
 END_ENTITY ;
  
FUNCTION valid_wireframe_edge_curve 
( 
crv : curve ) : BOOLEAN ;
 IF SIZEOF ([ 'AIC_EDGE_BASED_WIREFRAME.LINE', 'AIC_EDGE_BASED_WIREFRAME.CONIC', 'AIC_EDGE_BASED_WIREFRAME.B_SPLINE_CURVE', 'AIC_EDGE_BASED_WIREFRAME.POLYLINE' ] * TYPEOF (crv)) = 1 THEN 
 RETURN (TRUE);
 ELSE 
 IF 'AIC_EDGE_BASED_WIREFRAME.CURVE_REPLICA' IN TYPEOF (crv) THEN 
 RETURN (valid_wireframe_edge_curve(crv\curve_replica.parent_curve));
 ELSE 
 IF 'AIC_EDGE_BASED_WIREFRAME.OFFSET_CURVE_3D' IN TYPEOF (crv) THEN 
 RETURN (valid_wireframe_edge_curve(crv\offset_curve_3d.basis_curve));
 END_IF ;
 END_IF ;
 END_IF ;
 RETURN (FALSE);
 END_FUNCTION ;
FUNCTION valid_wireframe_vertex_point 
( 
pnt : point ) : BOOLEAN ;
 IF 'AIC_EDGE_BASED_WIREFRAME.CARTESIAN_POINT' IN TYPEOF (pnt) THEN 
 RETURN (TRUE);
 ELSE 
 IF 'AIC_EDGE_BASED_WIREFRAME.POINT_REPLICA' IN TYPEOF (pnt) THEN 
 RETURN (valid_wireframe_vertex_point(pnt\point_replica.parent_pt));
 END_IF ;
 END_IF ;
 RETURN (FALSE);
 END_FUNCTION ;
END_SCHEMA;
 


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_faceted_brep\aic_faceted_brep.exp
   ------------------------------------------------------------
*)

SCHEMA aic_faceted_brep;
  
USE FROM geometry_schema ( axis2_placement_3d, cartesian_point, cartesian_transformation_operator_3d, elementary_surface, plane);
 USE FROM geometric_model_schema ( brep_with_voids, faceted_brep, manifold_solid_brep);
 REFERENCE FROM geometric_model_schema ( msb_shells);
 USE FROM topology_schema ( closed_shell, connected_face_set, face_bound, face_outer_bound, face_surface, oriented_closed_shell, poly_loop);
 USE FROM representation_schema ( mapped_item);
 USE FROM product_property_representation_schema ( shape_representation);
  
ENTITY faceted_brep_shape_representation 
 SUBTYPE OF ( shape_representation );
 WHERE 
WR1 : 
SIZEOF ( 
QUERY ( it <* items| NOT ( SIZEOF ([ 'AIC_FACETED_BREP.FACETED_BREP', 'AIC_FACETED_BREP.MAPPED_ITEM', 'AIC_FACETED_BREP.AXIS2_PLACEMENT_3D' ] * TYPEOF (it)) = 1) )) = 0;
WR2 : 
SIZEOF ( 
QUERY ( it <* items| ( SIZEOF ([ 'AIC_FACETED_BREP.FACETED_BREP', 'AIC_FACETED_BREP.MAPPED_ITEM' ] * TYPEOF (it)) = 1) )) > 0;
WR3 : 
SIZEOF ( 
QUERY ( fbrep <* 
QUERY ( it <* items| ('AIC_FACETED_BREP.FACETED_BREP' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( csh <* msb_shells(fbrep)| NOT ( SIZEOF ( 
QUERY ( fcs <* csh\connected_face_set.cfs_faces| NOT (('AIC_FACETED_BREP.FACE_SURFACE' IN TYPEOF (fcs)) AND (('AIC_FACETED_BREP.PLANE' IN TYPEOF (fcs\face_surface.face_geometry)) AND ('AIC_FACETED_BREP.CARTESIAN_POINT' IN TYPEOF (fcs\face_surface.face_geometry\elementary_surface.position.location)))) )) = 0) )) = 0) )) = 0;
WR4 : 
SIZEOF ( 
QUERY ( fbrep <* 
QUERY ( it <* items| ('AIC_FACETED_BREP.FACETED_BREP' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( csh <* msb_shells(fbrep)| NOT ( SIZEOF ( 
QUERY ( fcs <* csh\connected_face_set.cfs_faces| NOT ( SIZEOF ( 
QUERY ( bnds <* fcs.bounds| ('AIC_FACETED_BREP.FACE_OUTER_BOUND' IN TYPEOF (bnds)) )) = 1) )) = 0) )) = 0) )) = 0;
WR5 : 
SIZEOF ( 
QUERY ( msb <* 
QUERY ( it <* items| ('AIC_FACETED_BREP.MANIFOLD_SOLID_BREP' IN TYPEOF (it)) )| ('AIC_FACETED_BREP.ORIENTED_CLOSED_SHELL' IN TYPEOF (msb\manifold_solid_brep.outer)) )) = 0;
WR6 : 
SIZEOF ( 
QUERY ( brv <* 
QUERY ( it <* items| ('AIC_FACETED_BREP.BREP_WITH_VOIDS' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( csh <* brv\brep_with_voids.voids| csh\oriented_closed_shell.orientation )) = 0) )) = 0;
WR7 : 
SIZEOF ( 
QUERY ( mi <* 
QUERY ( it <* items| ('AIC_FACETED_BREP.MAPPED_ITEM' IN TYPEOF (it)) )| NOT ('AIC_FACETED_BREP.FACETED_BREP_SHAPE_REPRESENTATION' IN TYPEOF (mi\mapped_item.mapping_source.mapped_representation)) )) = 0;
 END_ENTITY ;
END_SCHEMA;
 


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_geometric_tolerances\aic_geometric_tolerances.exp
   ------------------------------------------------------------
*)

SCHEMA aic_geometric_tolerances;
  
USE FROM measure_schema ( derived_unit, named_unit);
 USE FROM product_property_definition_schema ( shape_aspect_relationship);
 USE FROM shape_aspect_definition_schema ( apex, centre_of_symmetry, composite_shape_aspect, datum, datum_feature, datum_reference, datum_target, derived_shape_aspect, extension, geometric_alignment, geometric_intersection, parallel_offset, perpendicular_to, referenced_modified_datum, shape_aspect_deriving_relationship, symmetric_shape_aspect, tangent);
 USE FROM shape_tolerance_schema ( dimension_related_tolerance_zone_element, geometric_tolerance, geometric_tolerance_relationship, geometric_tolerance_with_datum_reference, geometric_tolerance_with_defined_unit, modified_geometric_tolerance, projected_zone_definition, runout_zone_definition, runout_zone_orientation_reference_direction, tolerance_zone, tolerance_zone_definition);
  
ENTITY angularity_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) < 3;
 END_ENTITY ;
ENTITY circular_runout_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 2;
 END_ENTITY ;
ENTITY coaxiality_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 2;
 END_ENTITY ;
ENTITY common_datum 
 SUBTYPE OF ( composite_shape_aspect , datum );
 WHERE 
WR1 : 
SIZEOF (SELF.component_relationships) = 2;
WR2 : 
SIZEOF ( 
QUERY ( sar <* SELF.component_relationships| NOT (('AIC_GEOMETRIC_TOLERANCES.DATUM' IN TYPEOF (sar.related_shape_aspect)) AND NOT ('AIC_GEOMETRIC_TOLERANCES.COMMON_DATUM' IN TYPEOF (sar.related_shape_aspect))) )) = 0;
 END_ENTITY ;
ENTITY concentricity_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) = 1;
 END_ENTITY ;
ENTITY cylindricity_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF));
 END_ENTITY ;
ENTITY flatness_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF));
 END_ENTITY ;
ENTITY line_profile_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF)) OR ( SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 3);
WR2 : 
SIZEOF ( 
QUERY ( sar <* USEDIN (SELF\geometric_tolerance.toleranced_shape_aspect, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' + 'SHAPE_ASPECT_RELATIONSHIP.RELATING_SHAPE_ASPECT')| (sar.name IN [ 'affected plane association', 'resulting intersection curve association' ]) )) = 1;
 END_ENTITY ;
ENTITY parallelism_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) < 3;
 END_ENTITY ;
ENTITY perpendicularity_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 3;
 END_ENTITY ;
ENTITY position_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF)) OR ( SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 3);
 END_ENTITY ;
ENTITY roundness_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF));
 END_ENTITY ;
ENTITY straightness_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF));
 END_ENTITY ;
ENTITY surface_profile_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF)) OR ( SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 3);
 END_ENTITY ;
ENTITY symmetry_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 3;
 END_ENTITY ;
ENTITY total_runout_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 2;
 END_ENTITY ;
END_SCHEMA;
 


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_geometrically_bounded_surface\aic_geometrically_bounded_surface.exp
   ------------------------------------------------------------
*)

(* ISO 10303-507, TC 184/SC4/WG12 N564 *)

SCHEMA aic_geometrically_bounded_surface;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set); 

USE FROM geometric_model_schema   -- ISO 10303-42
  (geometric_set); 

USE FROM geometry_schema   -- ISO 10303-42
  (axis1_placement,
   axis2_placement_2d,
   axis2_placement_3d,
   b_spline_curve,
   b_spline_curve_with_knots,
   b_spline_surface,
   b_spline_surface_with_knots,
   bezier_curve,
   bezier_surface,
   boundary_curve,
   bounded_pcurve,
   bounded_surface_curve,
   cartesian_point,
   cartesian_transformation_operator_3d,
   circle,
   composite_curve,
   composite_curve_on_surface,
   composite_curve_segment,
   conical_surface,
   curve,
   curve_bounded_surface,
   curve_replica,
   cylindrical_surface,
   degenerate_pcurve,
   degenerate_toroidal_surface,
   direction,
   ellipse,
   evaluated_degenerate_pcurve,
   geometric_representation_context,
   hyperbola,
   intersection_curve,
   line,
   offset_curve_3d,
   offset_surface,
   outer_boundary_curve,
   parabola,
   pcurve,
   plane,
   point,
   point_on_curve,
   point_on_surface,
   polyline,
   quasi_uniform_curve,
   quasi_uniform_surface,
   rational_b_spline_curve,
   rational_b_spline_surface,
   rectangular_composite_surface,
   rectangular_trimmed_surface,
   reparametrised_composite_curve_segment,
   seam_curve,
   spherical_surface,
   surface,
   surface_curve,
   surface_of_linear_extrusion,
   surface_of_revolution,
   surface_patch,
   surface_replica,
   swept_surface,
   toroidal_surface,
   trimmed_curve,
   uniform_curve,
   uniform_surface,
   vector); 

USE FROM product_property_representation_schema   -- ISO 10303-41
  (shape_representation); 

USE FROM representation_schema   -- ISO 10303-43
  (definitional_representation,
   mapped_item,
   parametric_representation_context,
   representation,
   representation_item,
   representation_map); 


ENTITY geometrically_bounded_surface_shape_representation
  SUBTYPE OF (shape_representation);
WHERE
  WR1: SIZEOF(QUERY(it <* SELF.items | NOT (SIZEOF(['AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.MAPPED_ITEM', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.AXIS2_PLACEMENT_3D'] * TYPEOF(it)) = 1))) = 0;
  WR2: SIZEOF(QUERY(it <* SELF.items | SIZEOF(['AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.MAPPED_ITEM'] * TYPEOF(it)) = 1)) > 0;
  WR3: SIZEOF(QUERY(mi <* QUERY(it <* SELF.items | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.MAPPED_ITEM' IN TYPEOF(it)) | NOT (('AIC_GEOMETRICALLY_BOUNDED_SURFACE.' + 'GEOMETRICALLY_BOUNDED_SURFACE_SHAPE_REPRESENTATION' IN TYPEOF(mi\mapped_item.mapping_source.mapped_representation)) AND (SIZEOF(QUERY(mr_it <* mi\mapped_item.mapping_source.mapped_representation.items | ('AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET' IN TYPEOF(mr_it)))) > 0)))) = 0;
  WR4: SIZEOF(QUERY(gs <* QUERY(it <* SELF.items | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET' IN TYPEOF(it)) | NOT (SIZEOF(QUERY(pnt <* QUERY(gsel <* gs\geometric_set.elements | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.POINT' IN TYPEOF(gsel)) | NOT (gbsf_check_point(pnt)))) = 0))) = 0;
  WR5: SIZEOF(QUERY(gs <* QUERY(it <* SELF.items | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET' IN TYPEOF(it)) | NOT (SIZEOF(QUERY(cv <* QUERY(gsel <* gs\geometric_set.elements | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.CURVE' IN TYPEOF(gsel)) | NOT (gbsf_check_curve(cv)))) = 0))) = 0;
  WR6: SIZEOF(QUERY(gs <* QUERY(it <* SELF.items | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET' IN TYPEOF(it)) | NOT (SIZEOF(QUERY(sf <* QUERY(gsel <* gs\geometric_set.elements | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.SURFACE' IN TYPEOF(gsel)) | NOT (gbsf_check_surface(sf)))) = 0))) = 0;
  WR7: SIZEOF(QUERY(gs <* QUERY(it <* SELF.items | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET' IN TYPEOF(it)) | SIZEOF(QUERY(gsel <* gs\geometric_set.elements | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.SURFACE' IN TYPEOF(gsel))) > 0)) > 0;
END_ENTITY;

FUNCTION gbsf_check_point
 (pnt : point) : BOOLEAN; 
  IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.CARTESIAN_POINT' IN TYPEOF(pnt) THEN
    RETURN (TRUE);
  ELSE
    IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.POINT_ON_CURVE' IN TYPEOF(pnt) THEN
      RETURN (gbsf_check_curve(pnt\point_on_curve.basis_curve));
    ELSE
      IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.POINT_ON_SURFACE' IN TYPEOF(pnt) THEN
        RETURN (gbsf_check_surface(pnt\point_on_surface.basis_surface));
      ELSE
        IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.DEGENERATE_PCURVE' IN TYPEOF(pnt) THEN
          RETURN ((gbsf_check_curve(pnt\degenerate_pcurve.reference_to_curve\representation.items[1])) AND (gbsf_check_surface(pnt\degenerate_pcurve.basis_surface)));
        END_IF;
      END_IF;
    END_IF;
  END_IF;
  RETURN (FALSE);
      END_FUNCTION; 

FUNCTION gbsf_check_curve
 (cv : representation_item) : BOOLEAN; 
  IF SIZEOF(['AIC_GEOMETRICALLY_BOUNDED_SURFACE.BOUNDED_CURVE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.CONIC', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.CURVE_REPLICA', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.LINE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.OFFSET_CURVE_3D'] * TYPEOF(cv)) > 1 THEN
    RETURN (FALSE);
  END_IF;
  IF SIZEOF(['AIC_GEOMETRICALLY_BOUNDED_SURFACE.CIRCLE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.ELLIPSE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.TRIMMED_CURVE'] * TYPEOF(cv)) = 1 THEN
    RETURN (TRUE);
  ELSE
    IF (('AIC_GEOMETRICALLY_BOUNDED_SURFACE.B_SPLINE_CURVE' IN TYPEOF(cv)) AND (cv\b_spline_curve.self_intersect = FALSE) OR (cv\b_spline_curve.self_intersect = UNKNOWN)) THEN
      RETURN (TRUE);
    ELSE
      IF (('AIC_GEOMETRICALLY_BOUNDED_SURFACE.COMPOSITE_CURVE' IN TYPEOF(cv)) AND (cv\composite_curve.self_intersect = FALSE) OR (cv\composite_curve.self_intersect = UNKNOWN)) THEN
        RETURN (SIZEOF(QUERY(seg <* cv\composite_curve.segments | NOT (gbsf_check_curve(seg.parent_curve)))) = 0);
      ELSE
        IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.CURVE_REPLICA' IN TYPEOF(cv) THEN
          RETURN (gbsf_check_curve(cv\curve_replica.parent_curve));
        ELSE
          IF (('AIC_GEOMETRICALLY_BOUNDED_SURFACE.OFFSET_CURVE_3D' IN TYPEOF(cv)) AND ((cv\offset_curve_3d.self_intersect = FALSE) OR (cv\offset_curve_3d.self_intersect = UNKNOWN)) AND (NOT ('AIC_GEOMETRICALLY_BOUNDED_SURFACE.POLYLINE' IN TYPEOF(cv\offset_curve_3d.basis_curve)))) THEN
            RETURN (gbsf_check_curve(cv\offset_curve_3d.basis_curve));
          ELSE
            IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.PCURVE' IN TYPEOF(cv) THEN
              RETURN ((gbsf_check_curve(cv\pcurve.reference_to_curve\representation.items[1])) AND (gbsf_check_surface(cv\pcurve.basis_surface)));
            ELSE
              IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.POLYLINE' IN TYPEOF(cv) THEN
                IF (SIZEOF(cv\polyline.points) >= 3) THEN
                  RETURN (TRUE);
                END_IF;
              ELSE
                IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.SURFACE_CURVE' IN TYPEOF(cv) THEN
                  IF gbsf_check_curve(cv\surface_curve.curve_3d) THEN
                    REPEAT i := 1 TO SIZEOF(cv\surface_curve.associated_geometry);
                      IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.SURFACE' IN TYPEOF(cv\surface_curve.associated_geometry[i]) THEN
                        IF NOT gbsf_check_surface(cv\surface_curve.associated_geometry[i]) THEN
                          RETURN (FALSE);
                        END_IF;
                      ELSE
                        IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.PCURVE' IN TYPEOF(cv\surface_curve.associated_geometry[i]) THEN
                          IF NOT gbsf_check_curve(cv\surface_curve.associated_geometry[i]) THEN
                            RETURN (FALSE);
                          END_IF;
                        END_IF;
                      END_IF;
                    END_REPEAT;
                    RETURN (TRUE);
                  END_IF;
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
  END_IF;
  RETURN (FALSE);
      END_FUNCTION; 

FUNCTION gbsf_check_surface
 (sf : surface) : BOOLEAN; 
  IF (('AIC_GEOMETRICALLY_BOUNDED_SURFACE.B_SPLINE_SURFACE' IN TYPEOF(sf)) AND (sf\b_spline_surface.self_intersect = FALSE) OR (sf\b_spline_surface.self_intersect = UNKNOWN)) THEN
    RETURN (TRUE);
  ELSE
    IF SIZEOF(['AIC_GEOMETRICALLY_BOUNDED_SURFACE.SPHERICAL_SURFACE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.TOROIDAL_SURFACE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.CURVE_BOUNDED_SURFACE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.RECTANGULAR_TRIMMED_SURFACE'] * TYPEOF(sf)) = 1 THEN
      RETURN (TRUE);
    ELSE
      IF (('AIC_GEOMETRICALLY_BOUNDED_SURFACE.OFFSET_SURFACE' IN TYPEOF(sf)) AND (sf\offset_surface.self_intersect = FALSE) OR (sf\offset_surface.self_intersect = UNKNOWN)) THEN
        RETURN (gbsf_check_surface(sf\offset_surface.basis_surface));
      ELSE
        IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.RECTANGULAR_COMPOSITE_SURFACE' IN TYPEOF(sf) THEN
          REPEAT i := 1 TO SIZEOF(sf\rectangular_composite_surface.segments);
            REPEAT j := 1 TO SIZEOF(sf\rectangular_composite_surface.segments[i]);
              IF NOT (gbsf_check_surface(sf\rectangular_composite_surface.segments[i][j].parent_surface)) THEN
                RETURN (FALSE);
              END_IF;
            END_REPEAT;
          END_REPEAT;
          RETURN (TRUE);
        ELSE
          IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.SURFACE_REPLICA' IN TYPEOF(sf) THEN
            RETURN (gbsf_check_surface(sf\surface_replica.parent_surface));
          ELSE
            IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.SURFACE_OF_REVOLUTION' IN TYPEOF(sf) THEN
              RETURN (gbsf_check_curve(sf\swept_surface.swept_curve));
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
  END_IF;
  RETURN (FALSE);
      END_FUNCTION; 

END_SCHEMA;  -- aic_geometrically_bounded_surface


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_geometrically_bounded_wireframe\aic_geometrically_bounded_wireframe.exp
   ------------------------------------------------------------
*)

SCHEMA aic_geometrically_bounded_wireframe;
  
USE FROM geometric_model_schema ( geometric_curve_set, geometric_set);
 USE FROM geometry_schema ( axis1_placement, axis2_placement_3d, b_spline_curve_with_knots, bezier_curve, cartesian_transformation_operator_3d, circle, composite_curve, conic, curve, curve_replica, ellipse, geometric_representation_context, hyperbola, line, offset_curve_3d, parabola, point, point_on_curve, point_replica, polyline, quasi_uniform_curve, rational_b_spline_curve, reparametrised_composite_curve_segment, trimmed_curve, uniform_curve);
 USE FROM product_property_representation_schema ( shape_representation);
 USE FROM representation_schema ( mapped_item);
  
ENTITY geometrically_bounded_wireframe_shape_representation 
 SUBTYPE OF ( shape_representation );
 WHERE 
WR1 : 
SIZEOF ( 
QUERY ( it <* SELF.items| NOT ( SIZEOF ( TYPEOF (it) * [ 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.GEOMETRIC_CURVE_SET', 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.AXIS2_PLACEMENT_3D', 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.MAPPED_ITEM' ]) = 1) )) = 0;
WR2 : 
SIZEOF ( 
QUERY ( it <* SELF.items| ( SIZEOF ( TYPEOF (it) * [ 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.GEOMETRIC_CURVE_SET', 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.MAPPED_ITEM' ]) = 1) )) >= 1;
WR3 : 
SIZEOF ( 
QUERY ( gcs <* 
QUERY ( it <* SELF.items| ('AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.GEOMETRIC_CURVE_SET' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( crv <* 
QUERY ( elem <* gcs\geometric_set.elements| ('AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.CURVE' IN TYPEOF (elem)) )| NOT valid_geometrically_bounded_wf_curve(crv) )) = 0) )) = 0;
WR4 : 
SIZEOF ( 
QUERY ( gcs <* 
QUERY ( it <* SELF.items| ('AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.GEOMETRIC_CURVE_SET' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( pnts <* 
QUERY ( elem <* gcs\geometric_set.elements| ('AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.POINT' IN TYPEOF (elem)) )| NOT valid_geometrically_bounded_wf_point(pnts) )) = 0) )) = 0;
WR5 : 
SIZEOF ( 
QUERY ( gcs <* 
QUERY ( it <* SELF.items| ('AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.GEOMETRIC_CURVE_SET' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( cnc <* 
QUERY ( elem <* gcs\geometric_set.elements| ('AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.CONIC' IN TYPEOF (elem)) )| NOT ('AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.AXIS2_PLACEMENT_3D' IN TYPEOF (cnc\conic.position)) )) = 0) )) = 0;
WR6 : 
SIZEOF ( 
QUERY ( gcs <* 
QUERY ( it <* SELF.items| ('AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.GEOMETRIC_CURVE_SET' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( pline <* 
QUERY ( elem <* gcs\geometric_set.elements| ('AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.POLYLINE' IN TYPEOF (elem)) )| NOT ( SIZEOF (pline\polyline.points) > 2) )) = 0) )) = 0;
WR7 : 
SIZEOF ( 
QUERY ( mi <* 
QUERY ( it <* SELF.items| ('AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.MAPPED_ITEM' IN TYPEOF (it)) )| NOT ('AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.' + 'GEOMETRICALLY_BOUNDED_WIREFRAME_SHAPE_REPRESENTATION' IN TYPEOF (mi\mapped_item.mapping_source.mapped_representation)) )) = 0;
 END_ENTITY ;
  
FUNCTION valid_geometrically_bounded_wf_curve 
( 
crv : curve ) : BOOLEAN ;
 IF SIZEOF ([ 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.POLYLINE', 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.B_SPLINE_CURVE', 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.ELLIPSE', 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.CIRCLE' ] * TYPEOF (crv)) = 1 THEN 
 RETURN (TRUE);
 ELSE 
 IF 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.TRIMMED_CURVE' IN TYPEOF (crv) THEN 
 IF SIZEOF ([ 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.LINE', 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.PARABOLA', 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.HYPERBOLA' ] * TYPEOF (crv\trimmed_curve.basis_curve)) = 1 THEN 
 RETURN (TRUE);
 ELSE 
 RETURN (valid_geometrically_bounded_wf_curve(crv\trimmed_curve.basis_curve));
 END_IF ;
 ELSE 
 IF 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.OFFSET_CURVE_3D' IN TYPEOF (crv) THEN 
 RETURN (valid_geometrically_bounded_wf_curve(crv\offset_curve_3d.basis_curve));
 ELSE 
 IF 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.CURVE_REPLICA' IN TYPEOF (crv) THEN 
 RETURN (valid_geometrically_bounded_wf_curve(crv\curve_replica.parent_curve));
 ELSE 
 IF 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.COMPOSITE_CURVE' IN TYPEOF (crv) THEN 
 RETURN ( SIZEOF ( 
QUERY ( ccs <* crv\composite_curve.segments| NOT valid_geometrically_bounded_wf_curve(ccs.parent_curve) )) = 0);
 END_IF ;
 END_IF ;
 END_IF ;
 END_IF ;
 END_IF ;
 RETURN (FALSE);
 END_FUNCTION ;
FUNCTION valid_geometrically_bounded_wf_point 
( 
pnt : point ) : BOOLEAN ;
 IF 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.CARTESIAN_POINT' IN TYPEOF (pnt) THEN 
 RETURN (TRUE);
 ELSE 
 IF 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.POINT_ON_CURVE' IN TYPEOF (pnt) THEN 
 RETURN (valid_geometrically_bounded_wf_curve(pnt\point_on_curve.basis_curve));
 ELSE 
 IF 'AIC_GEOMETRICALLY_BOUNDED_WIREFRAME.POINT_REPLICA' IN TYPEOF (pnt) THEN 
 RETURN (valid_geometrically_bounded_wf_point(pnt\point_replica.parent_pt));
 END_IF ;
 END_IF ;
 END_IF ;
 RETURN (FALSE);
 END_FUNCTION ;
END_SCHEMA;
 


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_manifold_surface\aic_manifold_surface.exp
   ------------------------------------------------------------
*)

(* ISO 10303-509, TC 184/SC4/WG12 N578 *)
SCHEMA aic_manifold_surface; 
 
  USE FROM aic_topologically_bounded_surface;       -- ISO 10303-511
 
  USE FROM geometric_model_schema (                 -- ISO 10303-42
      shell_based_surface_model); 
 
  USE FROM geometry_schema (                        -- ISO 10303-42
      b_spline_curve,
      b_spline_surface,
      bounded_pcurve,
      bounded_surface_curve,
      cartesian_transformation_operator_3d,
      curve, 
      curve_replica, 
      degenerate_pcurve, 
      evaluated_degenerate_pcurve, 
      intersection_curve, 
      offset_curve_3d, 
      offset_surface, 
      point_on_curve, 
      point_on_surface, 
      seam_curve, 
      surface, 
      surface_replica); 

  USE FROM product_property_representation_schema ( -- ISO 10303-41 
      shape_representation); 
 
  USE FROM representation_schema (                  -- ISO 10303-43
      mapped_item,
      representation,
      representation_item,
      representation_map);
 
  USE FROM topology_schema (                        -- ISO 10303-42
      closed_shell,
      connected_face_set, 
      face,
      open_shell, 
      oriented_closed_shell);

ENTITY manifold_surface_shape_representation 
   SUBTYPE OF (shape_representation); 
WHERE 
  WR1: SIZEOF (QUERY (it <* SELF.items |
       NOT (SIZEOF (['AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL',
       'AIC_MANIFOLD_SURFACE.MAPPED_ITEM',
       'AIC_MANIFOLD_SURFACE.AXIS2_PLACEMENT_3D'] * TYPEOF (it)) = 1))) = 0;
  WR2: SIZEOF (QUERY (it <* SELF.items |
       SIZEOF (['AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL',
       'AIC_MANIFOLD_SURFACE.MAPPED_ITEM'] * TYPEOF (it)) = 1)) > 0;
  WR3: SIZEOF (QUERY (mi <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.MAPPED_ITEM' IN TYPEOF (it)) |
       NOT (('AIC_MANIFOLD_SURFACE.MANIFOLD_SURFACE_SHAPE_REPRESENTATION'
       IN TYPEOF (mi\mapped_item.mapping_source.mapped_representation))
       AND
       (SIZEOF(QUERY (mr_it <*
       mi\mapped_item.mapping_source.mapped_representation.items |
       ('AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL'
       IN TYPEOF (mr_it)))) > 0 )))) = 0;
  WR4: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (sh <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (['AIC_MANIFOLD_SURFACE.OPEN_SHELL',
       'AIC_MANIFOLD_SURFACE.ORIENTED_CLOSED_SHELL',
       'AIC_MANIFOLD_SURFACE.CLOSED_SHELL']
       * TYPEOF (sh)) = 1))) = 0))) = 0;
  WR5: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT ('AIC_MANIFOLD_SURFACE.FACE_SURFACE' IN TYPEOF (fa)) )) = 0)))
       = 0))) = 0;
  WR6: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (msf_surface_check(fa\face_surface.face_geometry))))) = 0))) 
       = 0))) = 0;
  WR7: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (bnds <* fa.bounds |
       NOT (SIZEOF (['AIC_MANIFOLD_SURFACE.EDGE_LOOP',
       'AIC_MANIFOLD_SURFACE.VERTEX_LOOP']
       * TYPEOF (bnds.bound)) = 1))) = 0)))) = 0))) = 0))) = 0;
  WR8: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items|
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe <* elp_fbnds\path.edge_list |
       NOT ('AIC_MANIFOLD_SURFACE.EDGE_CURVE' IN TYPEOF 
       (oe.edge_element)))) = 0))) = 0)))) = 0))) = 0))) = 0;
  WR9: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe_cv <* QUERY (oe <* 
       elp_fbnds\path.edge_list |
       'AIC_MANIFOLD_SURFACE.EDGE_CURVE' IN TYPEOF (oe.edge_element)) |
       NOT (SIZEOF (['AIC_MANIFOLD_SURFACE.B_SPLINE_CURVE',
       'AIC_MANIFOLD_SURFACE.CONIC',
       'AIC_MANIFOLD_SURFACE.CURVE_REPLICA',
       'AIC_MANIFOLD_SURFACE.LINE',
       'AIC_MANIFOLD_SURFACE.OFFSET_CURVE_3D',
       'AIC_MANIFOLD_SURFACE.PCURVE',
       'AIC_MANIFOLD_SURFACE.POLYLINE',
       'AIC_MANIFOLD_SURFACE.SURFACE_CURVE'] * 
       TYPEOF (oe_cv.edge_element\edge_curve.edge_geometry)) 
       = 1))) = 0))) = 0)))) = 0))) = 0))) = 0;
 WR10: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe <* elp_fbnds\path.edge_list |
       NOT (msf_curve_check (oe.edge_element\edge_curve.edge_geometry)))) 
       = 0))) = 0)))) = 0))) = 0))) = 0;
 WR11: SIZEOF (QUERY(sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe <* elp_fbnds\path.edge_list|
       NOT (('AIC_MANIFOLD_SURFACE.VERTEX_POINT' IN TYPEOF
       (oe.edge_element.edge_start))
       AND
       ('AIC_MANIFOLD_SURFACE.VERTEX_POINT' IN
       TYPEOF (oe.edge_element.edge_end))))) 
       = 0))) = 0)))) = 0))) = 0))) = 0;
 WR12: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe <* elp_fbnds\path.edge_list |
       NOT ((SIZEOF (['AIC_MANIFOLD_SURFACE.CARTESIAN_POINT',
       'AIC_MANIFOLD_SURFACE.DEGENERATE_PCURVE',
       'AIC_MANIFOLD_SURFACE.POINT_ON_CURVE',
       'AIC_MANIFOLD_SURFACE.POINT_ON_SURFACE'] * TYPEOF
       (oe.edge_element.edge_start\vertex_point.vertex_geometry)) = 1)
       AND
       (SIZEOF (['AIC_MANIFOLD_SURFACE.CARTESIAN_POINT',
       'AIC_MANIFOLD_SURFACE.DEGENERATE_PCURVE',
       'AIC_MANIFOLD_SURFACE.POINT_ON_CURVE',
       'AIC_MANIFOLD_SURFACE.POINT_ON_SURFACE'] * TYPEOF
       (oe.edge_element.edge_end\vertex_point.vertex_geometry)) = 1
       )))) = 0))) = 0)))) = 0))) = 0))) = 0;
 WR13: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <* 
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (vlp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.VERTEX_LOOP' IN TYPEOF (bnds.bound)) |
       NOT ('AIC_MANIFOLD_SURFACE.VERTEX_POINT' IN TYPEOF
       (vlp_fbnds\vertex_loop.loop_vertex)))) = 0)))) = 0))) 
       = 0))) = 0;
 WR14: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <* 
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (vlp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.VERTEX_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (['AIC_MANIFOLD_SURFACE.CARTESIAN_POINT',
       'AIC_MANIFOLD_SURFACE.DEGENERATE_PCURVE',
       'AIC_MANIFOLD_SURFACE.POINT_ON_CURVE',
       'AIC_MANIFOLD_SURFACE.POINT_ON_SURFACE'] * TYPEOF
       (vlp_fbnds\vertex_loop.loop_vertex\vertex_point.vertex_geometry)) 
       = 1))) = 0)))) = 0))) = 0))) = 0;
END_ENTITY;

FUNCTION msf_curve_check (cv : representation_item) : BOOLEAN;  
 
(* This function varifies the validity of a curve in the context of a
   manifold surface model. Representation_items are
   valid input, however, they are supposed to be curves; otherwise
   this function will return false.
*)

(* complex subtypes of curve that are both bounded_curve and
   oneof conic, curve_replica, line, or offset_curve_3d are not
   valid
*)
IF SIZEOF (['AIC_MANIFOLD_SURFACE.BOUNDED_CURVE',
  'AIC_MANIFOLD_SURFACE.CONIC',
  'AIC_MANIFOLD_SURFACE.CURVE_REPLICA', 'AIC_MANIFOLD_SURFACE.LINE',
  'AIC_MANIFOLD_SURFACE.OFFSET_CURVE_3D'] * TYPEOF(cv)) > 1 THEN
  RETURN(FALSE);
END_IF;

(* b_spline_curves shall not self-intersect
 *)
IF (('AIC_MANIFOLD_SURFACE.B_SPLINE_CURVE' IN TYPEOF (cv)) AND
  (cv\b_spline_curve.self_intersect = FALSE)OR
  (cv\b_spline_curve.self_intersect = UNKNOWN)) THEN
  RETURN(TRUE);
ELSE

  (* conics and lines are valid curve types
   *)
  IF SIZEOF (['AIC_MANIFOLD_SURFACE.CONIC', 'AIC_MANIFOLD_SURFACE.LINE'] 
    * TYPEOF (cv)) = 1 THEN
    RETURN(TRUE);
  ELSE

    (* a curve_replica shall reference a valid curve
     *)
    IF 'AIC_MANIFOLD_SURFACE.CURVE_REPLICA' IN TYPEOF(cv) THEN
      RETURN (msf_curve_check(cv\curve_replica.parent_curve)); 
    ELSE 
 
      (* an offset_curve_3d shall not self-intersect and
         shall reference a valid curve; a polyline is not a
         valid basis_curve
       *)
      IF (('AIC_MANIFOLD_SURFACE.OFFSET_CURVE_3D' IN TYPEOF (cv))
        AND
        ((cv\offset_curve_3d.self_intersect = FALSE) OR
        (cv\offset_curve_3d.self_intersect = UNKNOWN))
        AND
        (NOT ('AIC_MANIFOLD_SURFACE.POLYLINE' IN TYPEOF
        (cv\offset_curve_3d.basis_curve)))) THEN
        RETURN (msf_curve_check(cv\offset_curve_3d.basis_curve)); 
      ELSE 
 
        (* a pcurve shall reference a valid curve and a valid
           basis_surface
         *)
        IF 'AIC_MANIFOLD_SURFACE.PCURVE' IN TYPEOF(cv) THEN 
          RETURN ((msf_curve_check
          (cv\pcurve.reference_to_curve\representation.items[1])) AND
          (msf_surface_check(cv\pcurve.basis_surface)));
        ELSE 
 
          (* a surface_curve references a curve_3d and one or
             two pcurves or one or two surfaces or one of
             each; all of these references shall be valid
           *)
          IF 'AIC_MANIFOLD_SURFACE.SURFACE_CURVE' IN TYPEOF(cv) THEN 

            (* if the curve reference is correct, check also the rest
             *)
            IF msf_curve_check(cv\surface_curve.curve_3d) THEN
              REPEAT i := 1 TO SIZEOF
              (cv\surface_curve.associated_geometry);

                (* do for one or two associated_geometrys:
                 *)
                IF 'AIC_MANIFOLD_SURFACE.SURFACE' IN 
                  TYPEOF (cv\surface_curve.associated_geometry[i]) THEN  
                  IF NOT msf_surface_check
                    (cv\surface_curve.associated_geometry[i]) THEN  
                    RETURN(FALSE);  
                  END_IF;  
                ELSE  
                  IF 'AIC_MANIFOLD_SURFACE.PCURVE' IN TYPEOF 
                    (cv\surface_curve.associated_geometry[i]) THEN  
                    IF NOT msf_curve_check
                      (cv\surface_curve.associated_geometry[i]) THEN 
                      RETURN(FALSE);  
                    END_IF;  
                  END_IF;  
                END_IF; 
              END_REPEAT;  
              RETURN(TRUE);
            END_IF; 
          ELSE

            (* a polyline shall have at least 3 points
             *)
            IF 'AIC_MANIFOLD_SURFACE.POLYLINE' IN TYPEOF(cv) THEN
              IF (SIZEOF (cv\polyline.points) >= 3) THEN RETURN (TRUE);
              END_IF;
            END_IF;
          END_IF; 
        END_IF; 
      END_IF; 
    END_IF; 
  END_IF; 
END_IF; 
(* FALSE is returned if the input parameter cv is not a valid curve.
 *)
RETURN (FALSE); 
END_FUNCTION;

FUNCTION msf_surface_check (surf : surface) : BOOLEAN;

(* This function varifies the validity of a surface in the
   context of a manifold surface model.
*)

  (* elementary_surfaces are valid surface types
   *)
  IF 'AIC_MANIFOLD_SURFACE.ELEMENTARY_SURFACE' IN TYPEOF(surf) THEN
    RETURN(TRUE);
  ELSE 

    (* a swept_surface shall have a valid sweeping curve
     *)
    IF 'AIC_MANIFOLD_SURFACE.SWEPT_SURFACE' IN TYPEOF (surf) THEN 
      RETURN (msf_curve_check(surf\swept_surface.swept_curve));  
    ELSE 
 
      (* an offset_surface shall not self-intersect and shall
         reference a valid surface
       *)
      IF (('AIC_MANIFOLD_SURFACE.OFFSET_SURFACE' IN TYPEOF (surf)) AND
        (surf\offset_surface.self_intersect = FALSE) OR 
        (surf\offset_surface.self_intersect = UNKNOWN)) THEN
        RETURN (msf_surface_check(surf\offset_surface.basis_surface));
      ELSE 
 
        (* a surface_replica shall have a valid parent surface
         *)
        IF 'AIC_MANIFOLD_SURFACE.SURFACE_REPLICA' IN TYPEOF(surf) THEN 
          RETURN(msf_surface_check(surf\surface_replica.parent_surface)); 
        ELSE

          (* a b_spline_surface shall not self-intersect
           *)
          IF (('AIC_MANIFOLD_SURFACE.B_SPLINE_SURFACE' IN TYPEOF(surf)) AND
            (surf\b_spline_surface.self_intersect = FALSE) OR
            (surf\b_spline_surface.self_intersect = UNKNOWN)) THEN
            RETURN(TRUE);
          END_IF;
        END_IF; 
      END_IF; 
    END_IF; 
  END_IF; 
  RETURN(FALSE); 
END_FUNCTION;

END_SCHEMA; (* aic_manifold_surface *)


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_mechanical_design_geometric_presentation\aic_mechanical_design_geometric_presentation.exp
   ------------------------------------------------------------
*)

--this is wg12n968
SCHEMA aic_mechanical_design_geometric_presentation;

    USE FROM geometry_schema                          -- ISO 10303-42
     (axis2_placement_2d,
      axis2_placement_3d); 

    USE FROM presentation_appearance_schema           -- ISO 10303-46
       (curve_style,
        curve_style_font, 
        curve_style_font_pattern,
        draughting_pre_defined_curve_font,
        fill_area_style_colour,
        invisibility,
        marker_type,
        over_riding_styled_item,
        point_style,
        presentation_style_by_context,
        styled_item,
        surface_side_style,
        surface_style_boundary,
        surface_style_control_grid, 
        surface_style_fill_area,
        surface_style_parameter_line,
        surface_style_segmentation_curve, 
        surface_style_silhouette, 
        surface_style_usage,
        u_direction_count,        
        v_direction_count);

    REFERENCE FROM presentation_organization_schema    -- ISO 10303-46
       (aspect_ratio);

    USE FROM presentation_organization_schema          -- ISO 10303-46
       (background_colour,
        camera_image_3d_with_scale,
        camera_usage,
        presentation_area,        
        presentation_representation,
        presentation_size,
        presentation_view);

    USE FROM presentation_resource_schema              -- ISO 10303-46
       (colour_rgb,
        draughting_pre_defined_colour,
        planar_extent);

    USE FROM product_property_representation_schema    -- ISO 10303-41
     (shape_representation);

    USE FROM representation_schema                     -- ISO 10303-43
       (mapped_item,
        representation); 

ENTITY mechanical_design_geometric_presentation_area
  SUBTYPE OF (presentation_area);
WHERE
  WR1:  -- only presentation_views or axis2_placements in
        -- mechanical_design_geometric_presentation_area
        SIZEOF(QUERY(it1 <* SELF.items |
        NOT (('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.AXIS2_PLACEMENT'
        IN TYPEOF(it1))
        OR
        (('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.MAPPED_ITEM'
        IN TYPEOF(it1)) AND
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.PRESENTATION_VIEW'
        IN TYPEOF
        (it1\mapped_item.mapping_source.mapped_representation)))))) = 0;
  WR2:  -- only mechanical_design_geometric_presentation_representation
        -- via camera_image_3d_with_scale or axis2_placements in
        -- presentation_views
        SIZEOF(QUERY(pv <* QUERY(mi1 <* QUERY(it1 <* SELF.items |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.MAPPED_ITEM'
        IN TYPEOF(it1)) |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.PRESENTATION_VIEW'
        IN TYPEOF
        (mi1\mapped_item.mapping_source.mapped_representation)) |
        -- search in all presentation_views for axis2_placements and
        -- mapped_items and for the subtype of mapped_item
        -- camera_image_3d_with_scale; the latter shall reference
        -- a mechanical_design_geometric_presentation_representation;
        -- the supertype mapped_item shall reference presentation_view.
        NOT (SIZEOF(QUERY(it2 <* pv\mapped_item.mapping_source.
        mapped_representation\representation.items |
        NOT (('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.AXIS2_PLACEMENT'
        IN TYPEOF(it2))
        OR
        (('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.MAPPED_ITEM'
        IN TYPEOF(it2)) AND NOT
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'CAMERA_IMAGE_3D_WITH_SCALE' IN TYPEOF(it2))) AND NOT (
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.PRESENTATION_VIEW'
        IN TYPEOF
        (it2\mapped_item.mapping_source.mapped_representation)))
        OR
        (('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'CAMERA_IMAGE_3D_WITH_SCALE' IN TYPEOF(it2))
        AND NOT (
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION'
        IN TYPEOF (it2\mapped_item.mapping_source.mapped_representation) ))
        ))) = 0))) = 0;
  WR3:  (SIZEOF(QUERY(ps <* USEDIN (SELF\presentation_area,
        'PRESENTATION_ORGANIZATION_SCHEMA.' +
        'PRESENTATION_SIZE.UNIT') | ((ps.size\planar_extent.size_in_x <= 0)
        OR
        (ps.size\planar_extent.size_in_y <= 0)))) = 0)
        AND
        (SIZEOF(QUERY(ais <* USEDIN (SELF\presentation_area,
        'PRESENTATION_ORGANIZATION_SCHEMA.' +
        'AREA_IN_SET.AREA') |
        (SIZEOF(QUERY(ps <* USEDIN (ais, 
        'PRESENTATION_ORGANIZATION_SCHEMA.' +
        'PRESENTATION_SIZE.UNIT') |
        ((ps.size\planar_extent.size_in_x <= 0)
        OR
        (ps.size\planar_extent.size_in_y <= 0)))) > 0))) = 0);
  WR4:  (SIZEOF(QUERY(ps <* USEDIN (SELF\presentation_area,
        'PRESENTATION_ORGANIZATION_SCHEMA.' +
        'PRESENTATION_SIZE.UNIT') | 
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'AXIS2_PLACEMENT_2D' IN TYPEOF (ps.size.placement)))) = 1)
        AND
        (SIZEOF(QUERY(ps <* USEDIN (SELF\presentation_area,
        'PRESENTATION_ORGANIZATION_SCHEMA.' +
        'PRESENTATION_SIZE.UNIT') | 
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'AXIS2_PLACEMENT_3D' IN TYPEOF (ps.size.placement)))) = 0)
        OR
        ((SIZEOF(QUERY(ais <* USEDIN (SELF\presentation_area,
        'PRESENTATION_ORGANIZATION_SCHEMA.' +
        'AREA_IN_SET.AREA') |
        (SIZEOF(QUERY(ps <* USEDIN (ais, 
        'PRESENTATION_ORGANIZATION_SCHEMA.' +
        'PRESENTATION_SIZE.UNIT') |
        ('GEOMETRY_SCHEMA.' +
        'AXIS2_PLACEMENT_2D' IN TYPEOF (ps.size.placement)))) = 1))) = 1)
        AND
        (SIZEOF(QUERY(ais <* USEDIN (SELF\presentation_area,
        'PRESENTATION_ORGANIZATION_SCHEMA.' +
        'AREA_IN_SET.AREA') |
        (SIZEOF(QUERY(ps <* USEDIN (ais, 
        'PRESENTATION_ORGANIZATION_SCHEMA.' +
        'PRESENTATION_SIZE.UNIT') |
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'AXIS2_PLACEMENT_3D' IN TYPEOF (ps.size.placement)))) = 0))) = 1));
END_ENTITY;

ENTITY mechanical_design_geometric_presentation_representation
  SUBTYPE OF (representation);
WHERE
  WR1:  SIZEOF(QUERY(it <* SELF.items |
        NOT (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.MAPPED_ITEM',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.STYLED_ITEM',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.AXIS2_PLACEMENT',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CAMERA_MODEL_D3']
        * TYPEOF(it)) = 1))) = 0;
  WR2:  -- only shape_representations and
        -- mechanical_design_geometric_presentation_representations
        -- shall be referenced from mapped_items
        SIZEOF(QUERY(mi <* QUERY(it <* SELF.items |
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.MAPPED_ITEM'
        IN TYPEOF(it))) | NOT (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SHAPE_REPRESENTATION',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION']
        * TYPEOF(mi\mapped_item.mapping_source.mapped_representation))
        = 1))) = 0;
  WR3:  -- a mapped_item that is styled shall reference a
        -- shape_representation
        SIZEOF(QUERY(smi <* QUERY(si <* QUERY(it <* SELF.items |
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.STYLED_ITEM'
        IN TYPEOF(it))) |
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.MAPPED_ITEM'
        IN TYPEOF(si\styled_item.item))) | NOT (
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SHAPE_REPRESENTATION' IN TYPEOF (smi\styled_item.
        item\mapped_item.mapping_source.mapped_representation))) )) = 0;
  WR4:  SIZEOF(QUERY(si <* QUERY(it <* SELF.items |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.STYLED_ITEM'
        IN TYPEOF(it)) | NOT (SIZEOF(QUERY(psa <* si\styled_item.styles |
        NOT (SIZEOF(QUERY(pss <* psa.styles | NOT (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.POINT_STYLE',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CURVE_STYLE',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.SURFACE_STYLE_USAGE']
        * TYPEOF(pss)) = 1))) = 0))) = 0))) = 0;
  WR5:  SIZEOF(QUERY(si <* QUERY(it <* SELF.items |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.STYLED_ITEM'
        IN TYPEOF(it)) |
        NOT (SIZEOF(QUERY(psbc <* QUERY(psa <* si\styled_item.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'PRESENTATION_STYLE_BY_CONTEXT' IN TYPEOF(psa)) | NOT (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'REPRESENTATION_ITEM',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.REPRESENTATION']
        * TYPEOF(psbc\presentation_style_by_context.style_context))
        = 1))) = 0))) = 0;
  WR6:  SIZEOF(QUERY(si <* QUERY(it <* SELF.items |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.STYLED_ITEM'
        IN TYPEOF(it)) | NOT (SIZEOF(QUERY(psa <* si\styled_item.styles |
        NOT (SIZEOF(QUERY(ps <* QUERY(pss <* psa.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.POINT_STYLE'
        IN TYPEOF(pss)) | NOT
        (('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'POSITIVE_LENGTH_MEASURE' IN TYPEOF (ps\point_style.marker_size))
        AND (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.COLOUR_RGB',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'DRAUGHTING_PRE_DEFINED_COLOUR']
        * TYPEOF(ps\point_style.marker_colour))
        = 1)))) = 0))) = 0))) = 0;
  WR7:  SIZEOF(QUERY(si <* QUERY(it <* SELF.items |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.STYLED_ITEM'
        IN TYPEOF(it)) | NOT (SIZEOF(QUERY(psa <* si\styled_item.styles |
        NOT (SIZEOF(QUERY(cs <* QUERY(pss <* psa.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CURVE_STYLE'
        IN TYPEOF(pss)) | NOT((SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.COLOUR_RGB',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'DRAUGHTING_PRE_DEFINED_COLOUR']
        * TYPEOF(cs\curve_style.curve_colour)) = 1)
        AND
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'POSITIVE_LENGTH_MEASURE' IN TYPEOF (cs\curve_style.curve_width))
        AND (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CURVE_STYLE_FONT',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'DRAUGHTING_PRE_DEFINED_CURVE_FONT']
        * TYPEOF(cs\curve_style.curve_font)) = 1)))) = 0))) = 0))) = 0;
  WR8:  SIZEOF(QUERY(si <* QUERY(it <* SELF.items |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.STYLED_ITEM'
        IN TYPEOF(it)) | NOT (SIZEOF(QUERY(psa <* si\styled_item.styles |
        NOT (SIZEOF(QUERY(ssu <* QUERY(pss <* psa.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.SURFACE_STYLE_USAGE'
        IN TYPEOF(pss)) |
        NOT ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SURFACE_SIDE_STYLE' IN TYPEOF
        (ssu\surface_style_usage.style)))) = 0))) = 0))) = 0;
  WR9:  SIZEOF(QUERY(si <* QUERY(it <* SELF.items |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.STYLED_ITEM'
        IN TYPEOF(it)) | NOT (SIZEOF(QUERY(psa <* si\styled_item.styles |
        NOT (SIZEOF(QUERY(ssu <* QUERY(pss <* psa.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.SURFACE_STYLE_USAGE'
        IN TYPEOF(pss)) | NOT (SIZEOF(QUERY(sses <*
        ssu\surface_style_usage.style\surface_side_style.styles |
        NOT (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SURFACE_STYLE_PARAMETER_LINE',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SURFACE_STYLE_CONTROL_GRID',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SURFACE_STYLE_SILHOUETTE',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SURFACE_STYLE_SEGMENTATION_CURVE',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SURFACE_STYLE_FILL_AREA',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SURFACE_STYLE_BOUNDARY']
        * TYPEOF(sses)) = 1))) = 0))) = 0))) = 0))) = 0;
  WR10: SIZEOF(QUERY(si <* QUERY(it <* SELF.items |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.STYLED_ITEM'
        IN TYPEOF(it)) | NOT (SIZEOF(QUERY(psa <* si\styled_item.styles |
        NOT (SIZEOF(QUERY(ssu <* QUERY(pss <* psa.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.SURFACE_STYLE_USAGE'
        IN TYPEOF(pss)) | NOT (SIZEOF(QUERY(sspl <* QUERY(sses <*
        ssu\surface_style_usage.style\surface_side_style.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SURFACE_STYLE_PARAMETER_LINE' IN TYPEOF(sses)) |
        NOT (('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CURVE_STYLE'
        IN TYPEOF
        (sspl\surface_style_parameter_line.style_of_parameter_lines))
        AND (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.COLOUR_RGB',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'DRAUGHTING_PRE_DEFINED_COLOUR']
        * TYPEOF(sspl\surface_style_parameter_line.
        style_of_parameter_lines\curve_style.curve_colour)) = 1)
        AND (
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'POSITIVE_LENGTH_MEASURE' IN TYPEOF
        (sspl\surface_style_parameter_line.
        style_of_parameter_lines\curve_style.curve_width))
        AND (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CURVE_STYLE_FONT',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.'+
        'DRAUGHTING_PRE_DEFINED_CURVE_FONT']
        * TYPEOF(sspl\surface_style_parameter_line.
        style_of_parameter_lines\curve_style.curve_font)) = 1))))
        = 0))) = 0))) = 0))) = 0;
  WR11: SIZEOF(QUERY(si <* QUERY(it <* SELF.items |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.STYLED_ITEM'
        IN TYPEOF(it)) | NOT (SIZEOF(QUERY(psa <* si\styled_item.styles |
        NOT (SIZEOF(QUERY(ssu <* QUERY(pss <* psa.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.SURFACE_STYLE_USAGE'
        IN TYPEOF(pss)) | NOT (SIZEOF(QUERY(sscg <* QUERY(sses <*
        ssu\surface_style_usage.style\surface_side_style.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SURFACE_STYLE_CONTROL_GRID' IN TYPEOF(sses)) |
        NOT (('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CURVE_STYLE'
        IN TYPEOF (sscg\surface_style_control_grid.style_of_control_grid))
        AND (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.COLOUR_RGB',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'DRAUGHTING_PRE_DEFINED_COLOUR']
        * TYPEOF(sscg\surface_style_control_grid.
        style_of_control_grid\curve_style.curve_colour)) = 1)
        AND
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'POSITIVE_LENGTH_MEASURE' IN TYPEOF 
        (sscg\surface_style_control_grid.
        style_of_control_grid\curve_style.curve_width))
        AND (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CURVE_STYLE_FONT',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'DRAUGHTING_PRE_DEFINED_CURVE_FONT']
        * TYPEOF(sscg\surface_style_control_grid.
        style_of_control_grid\curve_style.curve_font)) = 1))))
        = 0))) = 0))) = 0))) = 0;
  WR12: SIZEOF(QUERY(si <* QUERY(it <* SELF.items |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.STYLED_ITEM'
        IN TYPEOF(it)) |
        NOT (SIZEOF(QUERY(psa <* si\styled_item.styles |
        NOT (SIZEOF(QUERY(ssu <* QUERY(pss <* psa.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.SURFACE_STYLE_USAGE'
        IN TYPEOF(pss)) | NOT (SIZEOF(QUERY(sssh <* QUERY(sses <*
        ssu\surface_style_usage.style\surface_side_style.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SURFACE_STYLE_SILHOUETTE' IN TYPEOF(sses)) |
        NOT (('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CURVE_STYLE'
        IN TYPEOF (sssh\surface_style_silhouette.style_of_silhouette))
        AND (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.COLOUR_RGB',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'DRAUGHTING_PRE_DEFINED_COLOUR']
        * TYPEOF(sssh\surface_style_silhouette.
        style_of_silhouette\curve_style.curve_colour)) = 1)
        AND
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'POSITIVE_LENGTH_MEASURE' IN TYPEOF
        (sssh\surface_style_silhouette.style_of_silhouette\curve_style.
        curve_width))
        AND (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CURVE_STYLE_FONT',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'DRAUGHTING_PRE_DEFINED_CURVE_FONT']
        * TYPEOF(sssh\surface_style_silhouette.
        style_of_silhouette\curve_style.curve_font)) = 1))))
        = 0))) = 0))) = 0))) = 0;
  WR13: SIZEOF(QUERY(si <* QUERY(it <* SELF.items |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.STYLED_ITEM'
        IN TYPEOF(it)) | NOT (SIZEOF(QUERY(psa <* si\styled_item.styles |
        NOT (SIZEOF(QUERY(ssu <* QUERY(pss <* psa.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.SURFACE_STYLE_USAGE'
        IN TYPEOF(pss)) | NOT (SIZEOF(QUERY(sssc <* QUERY(sses <*
        ssu\surface_style_usage.style\surface_side_style.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SURFACE_STYLE_SEGMENTATION_CURVE' IN TYPEOF(sses)) |
        NOT (('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CURVE_STYLE'
        IN TYPEOF
        (sssc\surface_style_segmentation_curve.style_of_segmentation_curve))
        AND (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.COLOUR_RGB',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'DRAUGHTING_PRE_DEFINED_COLOUR']
        * TYPEOF(sssc\surface_style_segmentation_curve.
        style_of_segmentation_curve\curve_style.curve_colour)) = 1)
        AND
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'POSITIVE_LENGTH_MEASURE' IN TYPEOF
        (sssc\surface_style_segmentation_curve.
        style_of_segmentation_curve\curve_style.curve_width))
        AND (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CURVE_STYLE_FONT',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'DRAUGHTING_PRE_DEFINED_CURVE_FONT']
        * TYPEOF(sssc\surface_style_segmentation_curve.
        style_of_segmentation_curve\curve_style.curve_font)) = 1))))
        = 0))) = 0))) = 0))) = 0;
  WR14: SIZEOF(QUERY(si <* QUERY(it <* SELF.items |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.STYLED_ITEM'
        IN TYPEOF(it)) | NOT (SIZEOF(QUERY(psa <* si\styled_item.styles |
        NOT (SIZEOF(QUERY(ssu <* QUERY(pss <* psa.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.SURFACE_STYLE_USAGE'
        IN TYPEOF(pss)) | NOT (SIZEOF(QUERY(ssbd <* QUERY(sses <*
        ssu\surface_style_usage.style\surface_side_style.styles |
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'SURFACE_STYLE_BOUNDARY' IN TYPEOF(sses)) |
        NOT (('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CURVE_STYLE'
        IN TYPEOF (ssbd\surface_style_boundary.style_of_boundary))
        AND (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.COLOUR_RGB',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'DRAUGHTING_PRE_DEFINED_COLOUR']
        * TYPEOF(ssbd\surface_style_boundary.
        style_of_boundary\curve_style.curve_colour)) = 1)
        AND
        ('AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'POSITIVE_LENGTH_MEASURE' IN TYPEOF (ssbd\surface_style_boundary.
        style_of_boundary\curve_style.curve_width))
        AND (SIZEOF(
        ['AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.CURVE_STYLE_FONT',
        'AIC_MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION.' +
        'DRAUGHTING_PRE_DEFINED_CURVE_FONT']
        * TYPEOF(ssbd\surface_style_boundary.
        style_of_boundary\curve_style.curve_font)) = 1)))) = 0)))
        = 0))) = 0))) = 0;
END_ENTITY;

END_SCHEMA;  


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_non_manifold_surface\aic_non_manifold_surface.exp
   ------------------------------------------------------------
*)

(* ISO 10303-508, TC 184/SC4/WG12 N571 *)
SCHEMA aic_non_manifold_surface; 
 
  USE FROM aic_topologically_bounded_surface;       -- ISO 10303-511
 
  USE FROM geometric_model_schema (                 -- ISO 10303-42
      face_based_surface_model); 
 
  USE FROM geometry_schema (                        -- ISO 10303-42
      b_spline_curve,
      b_spline_surface,
      bounded_pcurve,
      bounded_surface_curve,
      cartesian_transformation_operator_3d,
      curve, 
      curve_replica, 
      degenerate_pcurve, 
      evaluated_degenerate_pcurve, 
      intersection_curve, 
      offset_curve_3d, 
      offset_surface, 
      point_on_curve, 
      point_on_surface, 
      seam_curve, 
      surface, 
      surface_replica); 

  USE FROM product_property_representation_schema ( -- ISO 10303-41
      shape_representation); 
 
  USE FROM representation_schema (                  -- ISO 10303-43
      mapped_item,
      representation,
      representation_item,
      representation_map);
 
  USE FROM topology_schema (                        -- ISO 10303-42
      closed_shell,
      connected_face_set, 
      face,
      open_shell, 
      oriented_face);
 

ENTITY non_manifold_surface_shape_representation 
   SUBTYPE OF (shape_representation); 
WHERE 
  WR1: SIZEOF (QUERY (it <* SELF.items |
       NOT (SIZEOF (['AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL',
       'AIC_NON_MANIFOLD_SURFACE.MAPPED_ITEM',
       'AIC_NON_MANIFOLD_SURFACE.AXIS2_PLACEMENT_3D'] * TYPEOF (it)) = 1)))
       = 0;
  WR2: SIZEOF (QUERY (it <* SELF.items |
       SIZEOF (['AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL',
       'AIC_NON_MANIFOLD_SURFACE.MAPPED_ITEM'] * TYPEOF (it)) = 1)) > 0;
  WR3: SIZEOF (QUERY (mi <* QUERY (it <* SELF.items |
       'AIC_NON_MANIFOLD_SURFACE.MAPPED_ITEM' IN TYPEOF (it)) |
       NOT (('AIC_NON_MANIFOLD_SURFACE.'+
       'NON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION'
       IN TYPEOF (mi\mapped_item.mapping_source.mapped_representation))
       AND
       (SIZEOF(QUERY (mr_it <*
       mi\mapped_item.mapping_source.mapped_representation.items |
       ('AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL'
       IN TYPEOF (mr_it)))) > 0 )))) = 0;
  WR4: SIZEOF (QUERY (fbsm <* QUERY (it <* SELF.items |
       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       fbsm\face_based_surface_model.fbsm_faces |
       NOT (SIZEOF (QUERY (fa <* cfs.cfs_faces |
       NOT (SIZEOF (['AIC_NON_MANIFOLD_SURFACE.FACE_SURFACE',
       'AIC_NON_MANIFOLD_SURFACE.ORIENTED_FACE'] * TYPEOF (fa)) = 1)))
       = 0))) = 0))) = 0;
  WR5: SIZEOF (QUERY (fbsm <* QUERY (it <* SELF.items |
       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       fbsm\face_based_surface_model.fbsm_faces |
       NOT (SIZEOF (QUERY (f_sf <* QUERY (fa <* cfs.cfs_faces |
       ('AIC_NON_MANIFOLD_SURFACE.FACE_SURFACE' IN TYPEOF (fa))) |
       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (f_sf))
       OR
       (nmsf_surface_check(f_sf\face_surface.face_geometry))))) = 0))) 
       = 0))) = 0;
  WR6: SIZEOF (QUERY (fbsm <* QUERY (it <* SELF.items |
       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       fbsm\face_based_surface_model.fbsm_faces |
       NOT (SIZEOF (QUERY (o_fa <* QUERY (fa <* cfs.cfs_faces |
       ('AIC_NON_MANIFOLD_SURFACE.ORIENTED_FACE' IN TYPEOF (fa))) |
       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF 
       (o_fa\oriented_face.face_element))
       OR
       (nmsf_surface_check
       (o_fa\oriented_face.face_element\face_surface.face_geometry)))))
       = 0))) = 0))) = 0;
  WR7: SIZEOF (QUERY (fbsm <* QUERY (it <* SELF.items |
       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       fbsm\face_based_surface_model.fbsm_faces |
       NOT (SIZEOF (QUERY (fa <* cfs.cfs_faces |
       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (bnds <* fa.bounds |
       NOT (SIZEOF (['AIC_NON_MANIFOLD_SURFACE.EDGE_LOOP',
       'AIC_NON_MANIFOLD_SURFACE.VERTEX_LOOP']
       * TYPEOF (bnds.bound)) = 1))) = 0)))) = 0))) = 0))) = 0;
  WR8: SIZEOF (QUERY (fbsm <* QUERY (it <* SELF.items|
       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       fbsm\face_based_surface_model.fbsm_faces |
       NOT (SIZEOF (QUERY (fa <* cfs.cfs_faces |
       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_NON_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe <* elp_fbnds\path.edge_list |
       NOT ('AIC_NON_MANIFOLD_SURFACE.EDGE_CURVE' IN TYPEOF 
       (oe.edge_element)))) = 0))) = 0)))) = 0))) = 0))) = 0;
  WR9: SIZEOF (QUERY (fbsm <* QUERY (it <* SELF.items |
       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       fbsm\face_based_surface_model.fbsm_faces |
       NOT (SIZEOF (QUERY (fa <* cfs.cfs_faces |
       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_NON_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe_cv <* QUERY (oe <* 
       elp_fbnds\path.edge_list |
       'AIC_NON_MANIFOLD_SURFACE.EDGE_CURVE' IN TYPEOF (oe.edge_element)) |
       NOT (SIZEOF (['AIC_NON_MANIFOLD_SURFACE.B_SPLINE_CURVE',
       'AIC_NON_MANIFOLD_SURFACE.CONIC',
       'AIC_NON_MANIFOLD_SURFACE.CURVE_REPLICA',
       'AIC_NON_MANIFOLD_SURFACE.LINE',
       'AIC_NON_MANIFOLD_SURFACE.OFFSET_CURVE_3D',
       'AIC_NON_MANIFOLD_SURFACE.PCURVE',
       'AIC_NON_MANIFOLD_SURFACE.POLYLINE',
       'AIC_NON_MANIFOLD_SURFACE.SURFACE_CURVE'] * 
       TYPEOF (oe_cv.edge_element\edge_curve.edge_geometry)) 
       = 1))) = 0))) = 0)))) = 0))) = 0))) = 0;
 WR10: SIZEOF (QUERY (fbsm <* QUERY (it <* SELF.items |
       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       fbsm\face_based_surface_model.fbsm_faces |
       NOT (SIZEOF (QUERY (fa <* cfs.cfs_faces |
       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_NON_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe <* elp_fbnds\path.edge_list |
       NOT (nmsf_curve_check (oe.edge_element\edge_curve.edge_geometry)))) 
       = 0))) = 0)))) = 0))) = 0))) = 0;
 WR11: SIZEOF (QUERY(fbsm <* QUERY (it <* SELF.items |
       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       fbsm\face_based_surface_model.fbsm_faces |
       NOT (SIZEOF (QUERY (fa <* cfs.cfs_faces |
       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_NON_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe <* elp_fbnds\path.edge_list|
       NOT (('AIC_NON_MANIFOLD_SURFACE.VERTEX_POINT' IN TYPEOF
       (oe.edge_element.edge_start))
       AND
       ('AIC_NON_MANIFOLD_SURFACE.VERTEX_POINT' IN
       TYPEOF (oe.edge_element.edge_end))))) 
       = 0))) = 0)))) = 0))) = 0))) = 0;
 WR12: SIZEOF (QUERY (fbsm <* QUERY (it <* SELF.items |
       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       fbsm\face_based_surface_model.fbsm_faces |
       NOT (SIZEOF (QUERY (fa <* cfs.cfs_faces |
       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_NON_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe <* elp_fbnds\path.edge_list |
       NOT ((SIZEOF (['AIC_NON_MANIFOLD_SURFACE.CARTESIAN_POINT',
       'AIC_NON_MANIFOLD_SURFACE.DEGENERATE_PCURVE',
       'AIC_NON_MANIFOLD_SURFACE.POINT_ON_CURVE',
       'AIC_NON_MANIFOLD_SURFACE.POINT_ON_SURFACE'] * TYPEOF
       (oe.edge_element.edge_start\vertex_point.vertex_geometry)) = 1)
       AND
       (SIZEOF (['AIC_NON_MANIFOLD_SURFACE.CARTESIAN_POINT',
       'AIC_NON_MANIFOLD_SURFACE.DEGENERATE_PCURVE',
       'AIC_NON_MANIFOLD_SURFACE.POINT_ON_CURVE',
       'AIC_NON_MANIFOLD_SURFACE.POINT_ON_SURFACE'] * TYPEOF
       (oe.edge_element.edge_end\vertex_point.vertex_geometry)) = 1
       )))) = 0))) = 0)))) = 0))) = 0))) = 0;
 WR13: SIZEOF (QUERY (fbsm <* QUERY (it <* SELF.items |
       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <* 
       fbsm\face_based_surface_model.fbsm_faces |
       NOT (SIZEOF (QUERY (fa <* cfs.cfs_faces |
       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (vlp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_NON_MANIFOLD_SURFACE.VERTEX_LOOP' IN TYPEOF (bnds.bound)) |
       NOT ('AIC_NON_MANIFOLD_SURFACE.VERTEX_POINT' IN TYPEOF
       (vlp_fbnds\vertex_loop.loop_vertex)))) = 0)))) = 0))) 
       = 0))) = 0;
 WR14: SIZEOF (QUERY (fbsm <* QUERY (it <* SELF.items |
       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <* 
       fbsm\face_based_surface_model.fbsm_faces |
       NOT (SIZEOF (QUERY (fa <* cfs.cfs_faces |
       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (vlp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_NON_MANIFOLD_SURFACE.VERTEX_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (['AIC_NON_MANIFOLD_SURFACE.CARTESIAN_POINT',
       'AIC_NON_MANIFOLD_SURFACE.DEGENERATE_PCURVE',
       'AIC_NON_MANIFOLD_SURFACE.POINT_ON_CURVE',
       'AIC_NON_MANIFOLD_SURFACE.POINT_ON_SURFACE'] * TYPEOF
       (vlp_fbnds\vertex_loop.loop_vertex\vertex_point.vertex_geometry)) 
       = 1))) = 0)))) = 0))) = 0))) = 0;
END_ENTITY;

FUNCTION nmsf_curve_check (cv : representation_item) : BOOLEAN;  
 
(* This function varifies the validity of a curve in the context of a
   non-manifold surface model. Representation_items are
   valid input, however, they are supposed to be curves; otherwise
   this function will return false.
*)

 (* complex subtypes of curve that are both bounded_curve and
    oneof conic, curve_replica, line, or offset_curve_3d are not
    valid
 *)
 IF SIZEOF (['AIC_NON_MANIFOLD_SURFACE.BOUNDED_CURVE',
   'AIC_NON_MANIFOLD_SURFACE.CONIC',
   'AIC_NON_MANIFOLD_SURFACE.CURVE_REPLICA',
   'AIC_NON_MANIFOLD_SURFACE.LINE',
   'AIC_NON_MANIFOLD_SURFACE.OFFSET_CURVE_3D'] * TYPEOF(cv)) > 1
 THEN RETURN(FALSE);
 ELSE

  (* b_spline_curves shall not self-intersect
   *)
  IF (('AIC_NON_MANIFOLD_SURFACE.B_SPLINE_CURVE' IN TYPEOF (cv)) AND
    (cv\b_spline_curve.self_intersect = FALSE) OR
    (cv\b_spline_curve.self_intersect = UNKNOWN))
  THEN RETURN(TRUE);
  ELSE

    (* conics and lines are valid curve types
     *)
    IF SIZEOF (['AIC_NON_MANIFOLD_SURFACE.CONIC',
    'AIC_NON_MANIFOLD_SURFACE.LINE'] * TYPEOF (cv)) = 1 THEN
      RETURN(TRUE);
    ELSE

      (* a curve_replica shall reference a valid curve
       *)
      IF 'AIC_NON_MANIFOLD_SURFACE.CURVE_REPLICA' IN TYPEOF(cv) THEN
        RETURN (nmsf_curve_check(cv\curve_replica.parent_curve)); 
      ELSE 
 
        (* an offset_curve_3d shall not self-intersect and
           shall reference a valid curve; a polyline is not a
           valid basis_curve
         *)
        IF (('AIC_NON_MANIFOLD_SURFACE.OFFSET_CURVE_3D' IN TYPEOF (cv)) 
          AND
          ((cv\offset_curve_3d.self_intersect = FALSE) OR
          (cv\offset_curve_3d.self_intersect = UNKNOWN))
          AND
          (NOT ('AIC_NON_MANIFOLD_SURFACE.POLYLINE' IN TYPEOF
          (cv\offset_curve_3d.basis_curve)))) THEN
          RETURN (nmsf_curve_check(cv\offset_curve_3d.basis_curve)); 
        ELSE 
 
          (* a pcurve shall reference a valid curve and a valid
             basis_surface
           *)
          IF 'AIC_NON_MANIFOLD_SURFACE.PCURVE' IN TYPEOF(cv) THEN 
            RETURN ((nmsf_curve_check
            (cv\pcurve.reference_to_curve\representation.items[1]))
            AND
            (nmsf_surface_check(cv\pcurve.basis_surface)));
          ELSE 
 
            (* a surface_curve references a curve_3d and one or
               two pcurves or one or two surfaces or one of
               each; all of these references shall be valid
             *)
            IF 'AIC_NON_MANIFOLD_SURFACE.SURFACE_CURVE' IN TYPEOF(cv) THEN 

              (* if the curve reference is correct, check also the rest
               *)
              IF nmsf_curve_check(cv\surface_curve.curve_3d) THEN
                REPEAT i := 1 TO SIZEOF
                (cv\surface_curve.associated_geometry);

                  (* do for one or two associated_geometrys:
                   *)
                  IF 'AIC_NON_MANIFOLD_SURFACE.SURFACE' IN 
                    TYPEOF (cv\surface_curve.associated_geometry[i]) THEN  
                    IF NOT nmsf_surface_check
                      (cv\surface_curve.associated_geometry[i]) THEN  
                      RETURN(FALSE);  
                    END_IF;  
                  ELSE  
                    IF 'AIC_NON_MANIFOLD_SURFACE.PCURVE' IN TYPEOF 
                      (cv\surface_curve.associated_geometry[i]) THEN  
                      IF NOT nmsf_curve_check
                        (cv\surface_curve.associated_geometry[i]) THEN 
                        RETURN(FALSE);  
                      END_IF;  
                    END_IF;  
                  END_IF; 
                END_REPEAT;  
                RETURN(TRUE);
              END_IF; 
            ELSE

              (* a polyline shall have at least 3 points 
               *)
              IF 'AIC_NON_MANIFOLD_SURFACE.POLYLINE' IN TYPEOF(cv) THEN
                IF (SIZEOF (cv\polyline.points) >= 3) THEN RETURN (TRUE);
                END_IF;
              END_IF;
            END_IF; 
          END_IF; 
        END_IF; 
      END_IF; 
    END_IF; 
  END_IF; 
 END_IF; 
 (* FALSE is returned if the input parameter cv is not a valid curve.
  *)
 RETURN (FALSE); 
END_FUNCTION;

FUNCTION nmsf_surface_check (surf : surface) : BOOLEAN;

(* This function varifies the validity of a surface in the
   context of a non-manifold surface model.
*)

  (* elementary_surfaces are valid surface types
   *)
  IF 'AIC_NON_MANIFOLD_SURFACE.ELEMENTARY_SURFACE' IN TYPEOF(surf) THEN
    RETURN(TRUE);
  ELSE 

    (* a swept_surface shall have a valid sweeping curve
     *)
    IF 'AIC_NON_MANIFOLD_SURFACE.SWEPT_SURFACE' IN TYPEOF (surf) THEN 
      RETURN (nmsf_curve_check(surf\swept_surface.swept_curve));  
    ELSE 
 
      (* an offset_surface shall not self-intersect and shall
         reference a valid surface
       *)
      IF (('AIC_NON_MANIFOLD_SURFACE.OFFSET_SURFACE' IN TYPEOF (surf)) AND
        (surf\offset_surface.self_intersect = FALSE) OR 
        (surf\offset_surface.self_intersect = UNKNOWN)) THEN
        RETURN (nmsf_surface_check(surf\offset_surface.basis_surface));
      ELSE 
 
        (* a surface_replica shall have a valid parent surface
         *)
        IF 'AIC_NON_MANIFOLD_SURFACE.SURFACE_REPLICA' IN TYPEOF(surf) THEN 
          RETURN(nmsf_surface_check(surf\surface_replica.parent_surface)); 
        ELSE

          (* a b_spline_surface shall not self-intersect
           *)
          IF (('AIC_NON_MANIFOLD_SURFACE.B_SPLINE_SURFACE' IN TYPEOF(surf))
            AND
            (surf\b_spline_surface.self_intersect = FALSE) OR
            (surf\b_spline_surface.self_intersect = UNKNOWN)) THEN
            RETURN(TRUE);
          END_IF;
        END_IF; 
      END_IF; 
    END_IF; 
  END_IF; 
  RETURN(FALSE); 
END_FUNCTION;

END_SCHEMA; (* aic_non_manifold_surface *)


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_shell_based_wireframe\aic_shell_based_wireframe.exp
   ------------------------------------------------------------
*)

SCHEMA aic_shell_based_wireframe;
  
USE FROM geometric_model_schema ( shell_based_wireframe_model);
 USE FROM geometry_schema ( axis2_placement_3d, b_spline_curve_with_knots, bezier_curve, cartesian_transformation_operator_3d, circle, conic, curve, curve_replica, ellipse, geometric_representation_context, hyperbola, line, offset_curve_3d, parabola, point, point_replica, polyline, quasi_uniform_curve, rational_b_spline_curve, uniform_curve);
 USE FROM product_property_representation_schema ( shape_representation);
 USE FROM representation_schema ( mapped_item);
 USE FROM topology_schema ( edge_curve, edge_loop, path, vertex_loop, vertex_point, vertex_shell, wire_shell);
  
ENTITY shell_based_wireframe_shape_representation 
 SUBTYPE OF ( shape_representation );
 WHERE 
WR1 : 
SIZEOF ( 
QUERY ( it <* SELF.items| NOT ( SIZEOF ([ 'AIC_SHELL_BASED_WIREFRAME.SHELL_BASED_WIREFRAME_MODEL', 'AIC_SHELL_BASED_WIREFRAME.MAPPED_ITEM', 'AIC_SHELL_BASED_WIREFRAME.AXIS2_PLACEMENT_3D' ] * TYPEOF (it)) = 1) )) = 0;
WR2 : 
SIZEOF ( 
QUERY ( it <* SELF.items| ( SIZEOF ([ 'AIC_SHELL_BASED_WIREFRAME.SHELL_BASED_WIREFRAME_MODEL', 'AIC_SHELL_BASED_WIREFRAME.MAPPED_ITEM' ] * TYPEOF (it)) = 1) )) >= 1;
WR3 : 
SIZEOF ( 
QUERY ( sbwm <* 
QUERY ( it <* SELF.items| ('AIC_SHELL_BASED_WIREFRAME.SHELL_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( ws <* 
QUERY ( sb <* sbwm\shell_based_wireframe_model.sbwm_boundary| ('AIC_SHELL_BASED_WIREFRAME.WIRE_SHELL' IN TYPEOF (sb)) )| NOT ( SIZEOF ( 
QUERY ( eloop <* 
QUERY ( wsb <* ws\wire_shell.wire_shell_extent| ('AIC_SHELL_BASED_WIREFRAME.EDGE_LOOP' IN TYPEOF (wsb)) )| NOT ( SIZEOF ( 
QUERY ( el <* eloop\path.edge_list| NOT ('AIC_SHELL_BASED_WIREFRAME.EDGE_CURVE' IN TYPEOF (el.edge_element)) )) = 0) )) = 0) )) = 0) )) = 0;
WR4 : 
SIZEOF ( 
QUERY ( sbwm <* 
QUERY ( it <* SELF.items| ('AIC_SHELL_BASED_WIREFRAME.SHELL_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( ws <* 
QUERY ( sb <* sbwm\shell_based_wireframe_model.sbwm_boundary| ('AIC_SHELL_BASED_WIREFRAME.WIRE_SHELL' IN TYPEOF (sb)) )| NOT ( SIZEOF ( 
QUERY ( eloop <* 
QUERY ( wsb <* ws\wire_shell.wire_shell_extent| ('AIC_SHELL_BASED_WIREFRAME.EDGE_LOOP' IN TYPEOF (wsb)) )| NOT ( SIZEOF ( 
QUERY ( pline_el <* 
QUERY ( el <* eloop\path.edge_list| ('AIC_SHELL_BASED_WIREFRAME.POLYLINE' IN TYPEOF (el.edge_element\edge_curve.edge_geometry)) )| NOT ( SIZEOF (pline_el.edge_element\edge_curve.edge_geometry\polyline.points) > 2) )) = 0) )) = 0) )) = 0) )) = 0;
WR5 : 
SIZEOF ( 
QUERY ( sbwm <* 
QUERY ( it <* SELF.items| ('AIC_SHELL_BASED_WIREFRAME.SHELL_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( ws <* 
QUERY ( sb <* sbwm\shell_based_wireframe_model.sbwm_boundary| ('AIC_SHELL_BASED_WIREFRAME.WIRE_SHELL' IN TYPEOF (sb)) )| NOT ( SIZEOF ( 
QUERY ( eloop <* 
QUERY ( wsb <* ws\wire_shell.wire_shell_extent| ('AIC_SHELL_BASED_WIREFRAME.EDGE_LOOP' IN TYPEOF (wsb)) )| NOT ( SIZEOF ( 
QUERY ( el <* eloop\path.edge_list| NOT valid_wireframe_edge_curve(el.edge_element\edge_curve.edge_geometry) )) = 0) )) = 0) )) = 0) )) = 0;
WR6 : 
SIZEOF ( 
QUERY ( sbwm <* 
QUERY ( it <* SELF.items| ('AIC_SHELL_BASED_WIREFRAME.SHELL_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( ws <* 
QUERY ( sb <* sbwm\shell_based_wireframe_model.sbwm_boundary| ('AIC_SHELL_BASED_WIREFRAME.WIRE_SHELL' IN TYPEOF (sb)) )| NOT ( SIZEOF ( 
QUERY ( eloop <* 
QUERY ( wsb <* ws\wire_shell.wire_shell_extent| ('AIC_SHELL_BASED_WIREFRAME.EDGE_LOOP' IN TYPEOF (wsb)) )| NOT ( SIZEOF ( 
QUERY ( el <* eloop\path.edge_list| NOT (('AIC_SHELL_BASED_WIREFRAME.VERTEX_POINT' IN TYPEOF (el.edge_element.edge_start)) AND ('AIC_SHELL_BASED_WIREFRAME.VERTEX_POINT' IN TYPEOF (el.edge_element.edge_end))) )) = 0) )) = 0) )) = 0) )) = 0;
WR7 : 
SIZEOF ( 
QUERY ( sbwm <* 
QUERY ( it <* SELF.items| ('AIC_SHELL_BASED_WIREFRAME.SHELL_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( ws <* 
QUERY ( sb <* sbwm\shell_based_wireframe_model.sbwm_boundary| ('AIC_SHELL_BASED_WIREFRAME.WIRE_SHELL' IN TYPEOF (sb)) )| NOT ( SIZEOF ( 
QUERY ( eloop <* 
QUERY ( wsb <* ws\wire_shell.wire_shell_extent| ('AIC_SHELL_BASED_WIREFRAME.EDGE_LOOP' IN TYPEOF (wsb)) )| NOT ( SIZEOF ( 
QUERY ( el <* eloop\path.edge_list| NOT (valid_wireframe_vertex_point(el.edge_element.edge_start\vertex_point.vertex_geometry) AND valid_wireframe_vertex_point(el.edge_element.edge_end\vertex_point.vertex_geometry)) )) = 0) )) = 0) )) = 0) )) = 0;
WR8 : 
SIZEOF ( 
QUERY ( sbwm <* 
QUERY ( it <* SELF.items| ('AIC_SHELL_BASED_WIREFRAME.SHELL_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( ws <* 
QUERY ( sb <* sbwm\shell_based_wireframe_model.sbwm_boundary| ('AIC_SHELL_BASED_WIREFRAME.WIRE_SHELL' IN TYPEOF (sb)) )| NOT ( SIZEOF ( 
QUERY ( vloop <* 
QUERY ( wsb <* ws\wire_shell.wire_shell_extent| ('AIC_SHELL_BASED_WIREFRAME.VERTEX_LOOP' IN TYPEOF (wsb)) )| NOT ('AIC_SHELL_BASED_WIREFRAME.VERTEX_POINT' IN TYPEOF (vloop\vertex_loop.loop_vertex)) )) = 0) )) = 0) )) = 0;
WR9 : 
SIZEOF ( 
QUERY ( sbwm <* 
QUERY ( it <* SELF.items| ('AIC_SHELL_BASED_WIREFRAME.SHELL_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( ws <* 
QUERY ( sb <* sbwm\shell_based_wireframe_model.sbwm_boundary| ('AIC_SHELL_BASED_WIREFRAME.WIRE_SHELL' IN TYPEOF (sb)) )| NOT ( SIZEOF ( 
QUERY ( vloop <* 
QUERY ( wsb <* ws\wire_shell.wire_shell_extent| ('AIC_SHELL_BASED_WIREFRAME.VERTEX_LOOP' IN TYPEOF (wsb)) )| NOT valid_wireframe_vertex_point(vloop\vertex_loop.loop_vertex\vertex_point.vertex_geometry) )) = 0) )) = 0) )) = 0;
WR10 : 
SIZEOF ( 
QUERY ( sbwm <* 
QUERY ( it <* SELF.items| ('AIC_SHELL_BASED_WIREFRAME.SHELL_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( vs <* 
QUERY ( sb <* sbwm\shell_based_wireframe_model.sbwm_boundary| ('AIC_SHELL_BASED_WIREFRAME.VERTEX_SHELL' IN TYPEOF (sb)) )| NOT ('AIC_SHELL_BASED_WIREFRAME.VERTEX_POINT' IN TYPEOF (vs\vertex_shell.vertex_shell_extent.loop_vertex)) )) = 0) )) = 0;
WR11 : 
SIZEOF ( 
QUERY ( sbwm <* 
QUERY ( it <* SELF.items| ('AIC_SHELL_BASED_WIREFRAME.SHELL_BASED_WIREFRAME_MODEL' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( vs <* 
QUERY ( sb <* sbwm\shell_based_wireframe_model.sbwm_boundary| ('AIC_SHELL_BASED_WIREFRAME.VERTEX_SHELL' IN TYPEOF (sb)) )| NOT valid_wireframe_vertex_point(vs\vertex_shell.vertex_shell_extent.loop_vertex\vertex_point.vertex_geometry) )) = 0) )) = 0;
WR12 : 
SIZEOF ( 
QUERY ( mi <* 
QUERY ( it <* SELF.items| ('AIC_SHELL_BASED_WIREFRAME.MAPPED_ITEM' IN TYPEOF (it)) )| NOT ('AIC_SHELL_BASED_WIREFRAME.' + 'SHELL_BASED_WIREFRAME_SHAPE_REPRESENTATION' IN TYPEOF (mi\mapped_item.mapping_source.mapped_representation)) )) = 0;
WR13 : SELF.context_of_items\geometric_representation_context.coordinate_space_dimension = 3;
 END_ENTITY ;
  
FUNCTION valid_wireframe_edge_curve 
( 
crv : curve ) : BOOLEAN ;
 IF SIZEOF ([ 'AIC_SHELL_BASED_WIREFRAME.LINE', 'AIC_SHELL_BASED_WIREFRAME.CONIC', 'AIC_SHELL_BASED_WIREFRAME.B_SPLINE_CURVE', 'AIC_SHELL_BASED_WIREFRAME.POLYLINE' ] * TYPEOF (crv)) = 1 THEN 
 RETURN (TRUE);
 ELSE 
 IF 'AIC_SHELL_BASED_WIREFRAME.CURVE_REPLICA' IN TYPEOF (crv) THEN 
 RETURN (valid_wireframe_edge_curve(crv\curve_replica.parent_curve));
 ELSE 
 IF 'AIC_SHELL_BASED_WIREFRAME.OFFSET_CURVE_3D' IN TYPEOF (crv) THEN 
 RETURN (valid_wireframe_edge_curve(crv\offset_curve_3d.basis_curve));
 END_IF ;
 END_IF ;
 END_IF ;
 RETURN (FALSE);
 END_FUNCTION ;
FUNCTION valid_wireframe_vertex_point 
( 
pnt : point ) : BOOLEAN ;
 IF 'AIC_SHELL_BASED_WIREFRAME.CARTESIAN_POINT' IN TYPEOF (pnt) THEN 
 RETURN (TRUE);
 ELSE 
 IF 'AIC_SHELL_BASED_WIREFRAME.POINT_REPLICA' IN TYPEOF (pnt) THEN 
 RETURN (valid_wireframe_vertex_point(pnt\point_replica.parent_pt));
 END_IF ;
 END_IF ;
 RETURN (FALSE);
 END_FUNCTION ;
END_SCHEMA;
 


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\aic_topologically_bounded_surface\aic_topologically_bounded_surface.exp
   ------------------------------------------------------------
*)

SCHEMA aic_topologically_bounded_surface;
  
USE FROM geometry_schema ( axis2_placement_2d, axis2_placement_3d, bezier_curve, bezier_surface, b_spline_curve_with_knots, b_spline_surface_with_knots, cartesian_point, circle, composite_curve_on_surface, conical_surface, cylindrical_surface, degenerate_toroidal_surface, direction, ellipse, geometric_representation_context, hyperbola, line, parabola, pcurve, plane, polyline, quasi_uniform_curve, quasi_uniform_surface, rational_b_spline_curve, rational_b_spline_surface, spherical_surface, surface_curve, surface_of_linear_extrusion, surface_of_revolution, swept_surface, toroidal_surface, uniform_curve, uniform_surface, vector);
 USE FROM topology_schema ( edge, edge_curve, edge_loop, face_bound, face_outer_bound, face_surface, oriented_edge, path, vertex_loop, vertex_point);
 USE FROM representation_schema ( definitional_representation, parametric_representation_context);
 USE FROM measure_schema ( parameter_value);
  
ENTITY advanced_face 
 SUBTYPE OF ( face_surface );
 WHERE 
WR1 : 
SIZEOF ([ 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.ELEMENTARY_SURFACE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.B_SPLINE_SURFACE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.SWEPT_SURFACE' ] * TYPEOF (face_geometry)) = 1;
WR2 : 
SIZEOF ( 
QUERY ( elp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) )| NOT ( SIZEOF ( 
QUERY ( oe <* elp_fbnds.bound\path.edge_list| NOT ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_CURVE' IN TYPEOF (oe\oriented_edge.edge_element)) )) = 0) )) = 0;
WR3 : 
SIZEOF ( 
QUERY ( elp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) )| NOT ( SIZEOF ( 
QUERY ( oe <* elp_fbnds.bound\path.edge_list| NOT ( SIZEOF ([ 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.LINE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.CONIC', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.POLYLINE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.SURFACE_CURVE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.B_SPLINE_CURVE' ] * TYPEOF (oe.edge_element\edge_curve.edge_geometry)) = 1) )) = 0) )) = 0;
WR4 : 
SIZEOF ( 
QUERY ( elp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) )| NOT ( SIZEOF ( 
QUERY ( oe <* elp_fbnds.bound\path.edge_list| NOT ((('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.VERTEX_POINT' IN TYPEOF (oe\edge.edge_start)) AND ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.CARTESIAN_POINT' IN TYPEOF (oe\edge.edge_start\vertex_point.vertex_geometry))) AND (('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.VERTEX_POINT' IN TYPEOF (oe\edge.edge_end)) AND ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.CARTESIAN_POINT' IN TYPEOF (oe\edge.edge_end\vertex_point.vertex_geometry)))) )) = 0) )) = 0;
WR5 : 
SIZEOF ( 
QUERY ( elp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) )| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.ORIENTED_PATH' IN TYPEOF (elp_fbnds.bound)) )) = 0;
WR6 : NOT ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.SWEPT_SURFACE' IN TYPEOF (face_geometry)) OR ( SIZEOF ([ 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.LINE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.CONIC', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.POLYLINE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.B_SPLINE_CURVE' ] * TYPEOF (face_geometry\swept_surface.swept_curve)) = 1);
WR7 : 
SIZEOF ( 
QUERY ( vlp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.VERTEX_LOOP' IN TYPEOF (bnds.bound)) )| NOT (('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.VERTEX_POINT' IN TYPEOF (vlp_fbnds\face_bound.bound\vertex_loop.loop_vertex)) AND ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.CARTESIAN_POINT' IN TYPEOF (vlp_fbnds\face_bound.bound\vertex_loop.loop_vertex\vertex_point.vertex_geometry))) )) = 0;
WR8 : 
SIZEOF ( 
QUERY ( bnd <* bounds| NOT ( SIZEOF ([ 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.VERTEX_LOOP' ] * TYPEOF (bnd.bound)) = 1) )) = 0;
WR9 : 
SIZEOF ( 
QUERY ( elp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) )| NOT ( SIZEOF ( 
QUERY ( oe <* elp_fbnds.bound\path.edge_list| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.SURFACE_CURVE' IN TYPEOF (oe\oriented_edge.edge_element\edge_curve.edge_geometry)) AND NOT ( SIZEOF ( 
QUERY ( sc_ag <* oe.edge_element\edge_curve.edge_geometry\surface_curve.associated_geometry| NOT ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.PCURVE' IN TYPEOF (sc_ag)) )) = 0) )) = 0) )) = 0;
WR10 : (NOT ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.SWEPT_SURFACE' IN TYPEOF (face_geometry)) OR (NOT ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.POLYLINE' IN TYPEOF (face_geometry\swept_surface.swept_curve)) OR ( SIZEOF (face_geometry\swept_surface.swept_curve\polyline.points) >= 3))) AND ( SIZEOF ( 
QUERY ( elp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) )| NOT ( SIZEOF ( 
QUERY ( oe <* elp_fbnds.bound\path.edge_list| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.POLYLINE' IN TYPEOF (oe\oriented_edge.edge_element\edge_curve.edge_geometry)) AND NOT ( SIZEOF (oe\oriented_edge.edge_element\edge_curve.edge_geometry\polyline.points) >= 3) )) = 0) )) = 0);
 END_ENTITY ;
END_SCHEMA;
 


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\application_context_schema\application_context_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: application_context_schema.exp,v 1.5 2004/11/09 18:43:13 mikeward Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA application_context_schema; 

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value,
   get_id_value,
   id_attribute); 

REFERENCE FROM date_time_schema   -- ISO 10303-41
  (year_number); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (identifier,
   label,
   text); 


ENTITY application_context;
  application : label;
DERIVE
  description : text := get_description_value (SELF);
  id : identifier := get_id_value (SELF);
INVERSE
  context_elements : SET[1:?] OF application_context_element FOR frame_of_reference;
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY application_context_element
  SUPERTYPE OF (ONEOF (library_context,
                       product_concept_context,
                       product_context,
                       product_definition_context));
  name : label;
  frame_of_reference : application_context;
END_ENTITY;

ENTITY application_context_relationship;
  name : label;
  description : OPTIONAL text;
  relating_context : application_context;
  related_context : application_context;
END_ENTITY;

ENTITY application_protocol_definition;
  status : label;
  application_interpreted_model_schema_name : label;
  application_protocol_year : year_number;
  application : application_context;
END_ENTITY;

ENTITY library_context
  SUBTYPE OF (application_context_element);
  library_reference : label;
END_ENTITY;

ENTITY product_concept_context
  SUBTYPE OF (application_context_element);
  market_segment_type : label;
END_ENTITY;

ENTITY product_context
  SUBTYPE OF (application_context_element);
  discipline_type : label;
END_ENTITY;

ENTITY product_definition_context
  SUBTYPE OF (application_context_element);
  life_cycle_stage : label;
END_ENTITY;

END_SCHEMA;  -- application_context_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\approval_schema\approval_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: approval_schema.exp,v 1.5 2004/11/09 18:43:45 mikeward Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 

SCHEMA approval_schema; 

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value,
   get_role,
   object_role,
   role_association); 

REFERENCE FROM date_time_schema   -- ISO 10303-41
  (date_time_select); 

REFERENCE FROM person_organization_schema   -- ISO 10303-41
  (person_organization_select); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   label,
   text); 


ENTITY approval;
  status : approval_status;
  level : label;
END_ENTITY;

ENTITY approval_date_time;
  date_time : date_time_select;
  dated_approval : approval;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY approval_person_organization;
  person_organization : person_organization_select;
  authorized_approval : approval;
  role : approval_role;
END_ENTITY;

ENTITY approval_relationship;
  name : label;
  description : OPTIONAL text;
  relating_approval : approval;
  related_approval : approval;
END_ENTITY;

ENTITY approval_role;
  role : label;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY approval_status;
  name : label;
END_ENTITY;

FUNCTION acyclic_approval_relationship
 (relation : approval_relationship; relatives : SET[1:?] OF approval; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF approval_relationship;
    END_LOCAL;

    IF relation.relating_approval IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(app <* bag_to_set(USEDIN(relation.relating_approval, 'APPROVAL_SCHEMA.' + 'APPROVAL_RELATIONSHIP.' + 'RELATED_APPROVAL')) | specific_relation IN TYPEOF(app));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_approval_relationship(x[i], relatives + relation.relating_approval, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- approval_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\basic_attribute_schema\basic_attribute_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: basic_attribute_schema.exp,v 1.8 2004/11/10 12:39:43 mikeward Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 

SCHEMA basic_attribute_schema; 

REFERENCE FROM action_schema   -- ISO 10303-41
  (action,
   action_request_solution); 

REFERENCE FROM application_context_schema   -- ISO 10303-41
  (application_context); 

REFERENCE FROM approval_schema   -- ISO 10303-41
  (approval_date_time,
   approval_role); 

REFERENCE FROM configuration_management_schema   -- ISO 10303-44
  (configuration_design); 

REFERENCE FROM date_time_schema   -- ISO 10303-41
  (date_role,
   date_time_role,
   time_role); 

REFERENCE FROM effectivity_schema   -- ISO 10303-41
  (effectivity); 

REFERENCE FROM external_reference_schema   -- ISO 10303-41
  (external_source); 

REFERENCE FROM group_schema   -- ISO 10303-41
  (group); 

REFERENCE FROM management_resources_schema   -- ISO 10303-41
  (action_assignment,
   action_request_assignment,
   approval_assignment,
   certification_assignment,
   contract_assignment,
   document_reference,
   effectivity_assignment,
   external_referent_assignment,
   group_assignment,
   name_assignment,
   security_classification_assignment); 

REFERENCE FROM measure_schema   -- ISO 10303-41
  (derived_unit); 

REFERENCE FROM person_organization_schema   -- ISO 10303-41
  (address,
   organization_role,
   organizational_project,
   person_and_organization,
   person_and_organization_role,
   person_role); 

REFERENCE FROM product_definition_schema   -- ISO 10303-41
  (product_category,
   product_definition,
   product_definition_substitute); 

REFERENCE FROM product_property_definition_schema   -- ISO 10303-41
  (property_definition,
   shape_aspect,
   shape_aspect_relationship); 

REFERENCE FROM product_property_representation_schema   -- ISO 10303-41
  (context_dependent_shape_representation,
   property_definition_representation); 

REFERENCE FROM representation_schema   -- ISO 10303-43
  (representation); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (identifier,
   label,
   text); 


TYPE description_attribute_select = SELECT
   (action_request_solution, 
    application_context, 
    approval_role, 
    configuration_design, 
    context_dependent_shape_representation, 
    date_role, 
    date_time_role, 
    effectivity, 
    external_source, 
    organization_role, 
    person_and_organization, 
    person_and_organization_role, 
    person_role, 
    property_definition_representation, 
    representation, 
    time_role);
END_TYPE; 

TYPE id_attribute_select = SELECT
   (action, 
    address, 
    application_context, 
    group, 
    organizational_project, 
    product_category, 
    property_definition, 
    representation, 
    shape_aspect, 
    shape_aspect_relationship);
END_TYPE; 

TYPE name_attribute_select = SELECT
   (action_request_solution, 
    address, 
    configuration_design, 
    context_dependent_shape_representation, 
    derived_unit, 
    effectivity, 
    person_and_organization, 
    product_definition, 
    product_definition_substitute, 
    property_definition_representation);
END_TYPE; 

TYPE role_select = SELECT
   (action_assignment, 
    action_request_assignment, 
    approval_assignment, 
    approval_date_time, 
    certification_assignment, 
    contract_assignment, 
    document_reference, 
    effectivity_assignment, 
    external_referent_assignment, 
    group_assignment, 
    name_assignment, 
    security_classification_assignment);
END_TYPE; 

ENTITY description_attribute;
  attribute_value : text;
  described_item : description_attribute_select;
END_ENTITY;

ENTITY id_attribute;
  attribute_value : identifier;
  identified_item : id_attribute_select;
END_ENTITY;

ENTITY name_attribute;
  attribute_value : label;
  named_item : name_attribute_select;
END_ENTITY;

ENTITY object_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY role_association;
  role : object_role;
  item_with_role : role_select;
END_ENTITY;

FUNCTION get_description_value
 (obj : description_attribute_select) : text; 
  LOCAL
    description_bag : BAG OF description_attribute := (USEDIN(obj, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.' + 'DESCRIBED_ITEM'));
  END_LOCAL;

  IF SIZEOF(description_bag) = 1 THEN
    RETURN (description_bag[1].attribute_value);
  ELSE
    RETURN (?);
  END_IF;
END_FUNCTION; 

FUNCTION get_id_value
 (obj : id_attribute_select) : identifier; 
LOCAL
      id_bag : BAG OF id_attribute := (USEDIN(obj, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.' + 'IDENTIFIED_ITEM'));
END_LOCAL;
IF SIZEOF(id_bag) = 1 THEN
      RETURN (id_bag[1].attribute_value);
ELSE
      RETURN (?);
END_IF;
END_FUNCTION; 

FUNCTION get_name_value
 (obj : name_attribute_select) : label; 
  LOCAL
    name_bag : BAG OF name_attribute := (USEDIN(obj, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.' + 'NAMED_ITEM'));
  END_LOCAL;

  IF SIZEOF(name_bag) = 1 THEN
    RETURN (name_bag[1].attribute_value);
  ELSE
    RETURN (?);
  END_IF;
END_FUNCTION; 

FUNCTION get_role
 (obj : role_select) : object_role; 
  LOCAL
    role_bag : BAG OF role_association := (USEDIN(obj, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.' + 'ITEM_WITH_ROLE'));
  END_LOCAL;

  IF SIZEOF(role_bag) = 1 THEN
    RETURN (role_bag[1].role);
  ELSE
    RETURN (?);
  END_IF;
END_FUNCTION; 

END_SCHEMA;  -- basic_attribute_schema







(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\certification_schema\certification_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: certification_schema.exp,v 1.6 2004/11/09 18:42:30 mikeward Exp $
ISO TC184/SC4/WG12 N28872 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA certification_schema; 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (label,
   text); 


ENTITY certification;
  name : label;
  purpose : text;
  kind : certification_type;
END_ENTITY;

ENTITY certification_type;
  description : label;
END_ENTITY;

END_SCHEMA;  -- certification_schema





(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\classification_schema\classification_schema.exp
   ------------------------------------------------------------
*)

(* 
$Id: classification_schema.exp,v 1.10 2005/01/05 00:07:15 thendrix Exp $
ISO TC184/SC4/WG12 N3213 - ISO/IS 10303-54 Classification and set theory - EXPRESS
Supersedes ISO TC184/SC4/WG12 N1510
*) 


SCHEMA classification_schema;

REFERENCE FROM group_schema   -- ISO 10303-41
  (group); 

REFERENCE FROM management_resources_schema   -- ISO 10303-41
  (classification_assignment); 


TYPE classification_select = EXTENSIBLE SELECT;
END_TYPE; 

TYPE complete_membership_select = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY class
  SUBTYPE OF (group);
END_ENTITY;

ENTITY class_by_extension
  SUBTYPE OF (class);
END_ENTITY;

ENTITY class_by_intension
  SUBTYPE OF (class);
END_ENTITY;

ENTITY classification
  SUBTYPE OF (classification_assignment);
  classified : classification_select;
DERIVE
  classifier : class := SELF\classification_assignment.assigned_class;
END_ENTITY;

ENTITY complete_membership
  SUBTYPE OF (classification_assignment);
DERIVE
  containing_set : class := SELF\classification_assignment.assigned_class;
END_ENTITY;

ENTITY complete_membership_of_empty_set
  SUBTYPE OF (complete_membership);
END_ENTITY;

ENTITY complete_membership_of_non_empty_set
  SUBTYPE OF (complete_membership);
  members : SET[1:?] OF complete_membership_select;
END_ENTITY;

SUBTYPE_CONSTRAINT classification_or_complete_membership FOR classification_assignment;
  ONEOF (classification,
         complete_membership);
END_SUBTYPE_CONSTRAINT;

END_SCHEMA;  -- classification_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\configuration_management_schema\configuration_management_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n529.exp *)

SCHEMA configuration_management_schema;

  REFERENCE FROM product_definition_schema
    (product_definition,
     product_definition_formation,
     product_definition_effectivity);

  REFERENCE FROM product_structure_schema
    (product_definition_usage);

  REFERENCE FROM product_concept_schema
    (product_concept,
     product_concept_feature_association);

  REFERENCE FROM basic_attribute_schema
    (get_description_value,
     get_name_value);

  REFERENCE FROM support_resource_schema
    (text, label, identifier, bag_to_set);

TYPE configuration_design_item = SELECT
   (product_definition,
    product_definition_formation);
END_TYPE;

ENTITY configurable_item
  SUBTYPE OF (configuration_item);
  item_concept_feature : SET[1:?] OF product_concept_feature_association;
END_ENTITY;

ENTITY configuration_design;
  configuration : configuration_item;
  design        : configuration_design_item;
DERIVE
  name          : label := get_name_value (SELF);
  description   : text := get_description_value (SELF);
UNIQUE
  UR1: configuration, design;
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +
                             'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +
                             'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY configuration_effectivity
  SUBTYPE OF (product_definition_effectivity);
  configuration : configuration_design;
UNIQUE
  UR1: configuration,
       usage,
       id;
WHERE
  WR1: 'PRODUCT_STRUCTURE_SCHEMA.PRODUCT_DEFINITION_USAGE' IN
        TYPEOF (SELF\product_definition_effectivity.usage);
END_ENTITY;

ENTITY configuration_item;
   id                  :  identifier;
   name                :  label;
   description         :  OPTIONAL text;
   item_concept        :  product_concept;
   purpose             :  OPTIONAL label;
END_ENTITY;

ENTITY configuration_item_relationship;
  name                        : label;
  description                 : OPTIONAL text;
  relating_configuration_item : configuration_item;
  related_configuration_item  : configuration_item;
END_ENTITY;

END_SCHEMA; -- configuration_management_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\contract_schema\contract_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: contract_schema.exp,v 1.5 2004/11/10 12:32:56 mikeward Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA contract_schema; 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


ENTITY contract;
  name : label;
  purpose : text;
  kind : contract_type;
END_ENTITY;

ENTITY contract_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_contract : contract;
  related_contract : contract;
END_ENTITY;

ENTITY contract_type;
  description : label;
END_ENTITY;

FUNCTION acyclic_contract_relationship
 (relation : contract_relationship; relatives : SET[1:?] OF contract; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF contract_relationship;
    END_LOCAL;

    IF relation.relating_contract IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(cont <* bag_to_set(USEDIN(relation.relating_contract, 'CONTRACT_SCHEMA.' + 'CONTRACT_RELATIONSHIP.' + 'RELATED_CONTRACT')) | specific_relation IN TYPEOF(cont));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_contract_relationship(x[i], relatives + relation.relating_contract, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- contract_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\date_time_schema\date_time_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: date_time_schema.exp,v 1.6 2004/11/10 12:56:51 mikeward Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA date_time_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value); 

REFERENCE FROM measure_schema   -- ISO 10303-41
  (time_measure_with_unit); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE ahead_or_behind = ENUMERATION OF 
   (ahead,
    exact,
    behind);
END_TYPE; 

TYPE date_time_or_event_occurrence = SELECT
   (date_time_select, 
    event_occurrence);
END_TYPE; 

TYPE date_time_select = SELECT
   (date, 
    date_and_time, 
    local_time);
END_TYPE; 

TYPE day_in_month_number = INTEGER;
WHERE
  WR1: {1 <= SELF <= 31};
END_TYPE; 

TYPE day_in_week_number = INTEGER;
WHERE
  WR1: { 1 <= SELF <= 7 };
END_TYPE; 

TYPE day_in_year_number = INTEGER;
WHERE
  WR1: {1 <= SELF <= 366};
END_TYPE; 

TYPE hour_in_day = INTEGER;
WHERE
  WR1: { 0 <= SELF < 24 };
END_TYPE; 

TYPE minute_in_hour = INTEGER;
WHERE
  WR1: { 0 <= SELF <= 59 };
END_TYPE; 

TYPE month_in_year_number = INTEGER;
WHERE
  WR1: { 1 <= SELF <= 12 };
END_TYPE; 

TYPE second_in_minute = REAL;
WHERE
  WR1: { 0 <= SELF <= 60.0 };
END_TYPE; 

TYPE week_in_year_number = INTEGER;
WHERE
  WR1: { 1 <= SELF <= 53 };
END_TYPE; 

TYPE year_number = INTEGER;
END_TYPE; 

ENTITY calendar_date
  SUBTYPE OF (date);
  day_component : day_in_month_number;
  month_component : month_in_year_number;
WHERE
  WR1: valid_calendar_date (SELF);
END_ENTITY;

ENTITY coordinated_universal_time_offset;
  hour_offset : INTEGER;
  minute_offset : OPTIONAL INTEGER;
  sense : ahead_or_behind;
DERIVE
  actual_minute_offset : INTEGER := NVL(minute_offset,0);
WHERE
  WR1: { 0 <= hour_offset < 24 };
  WR2: { 0 <= actual_minute_offset <= 59 };
  WR3: NOT (((hour_offset <> 0) OR (actual_minute_offset <>0)) AND (sense = exact));
END_ENTITY;

ENTITY date
  SUPERTYPE OF (ONEOF (calendar_date,
                       ordinal_date,
                       week_of_year_and_day_date));
  year_component : year_number;
END_ENTITY;

ENTITY date_and_time;
  date_component : date;
  time_component : local_time;
END_ENTITY;

ENTITY date_role;
  name : label;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY date_time_role;
  name : label;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY event_occurrence;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY event_occurrence_context_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY event_occurrence_relationship;
  name : label;
  description : OPTIONAL text;
  relating_event : event_occurrence;
  related_event : event_occurrence;
END_ENTITY;

ENTITY event_occurrence_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY local_time;
  hour_component : hour_in_day;
  minute_component : OPTIONAL minute_in_hour;
  second_component : OPTIONAL second_in_minute;
  zone : coordinated_universal_time_offset;
WHERE
  WR1: valid_time (SELF);
END_ENTITY;

ENTITY ordinal_date
  SUBTYPE OF (date);
  day_component : day_in_year_number;
WHERE
  WR1: (NOT leap_year(SELF.year_component) AND { 1 <= day_component <= 365 }) OR (leap_year(SELF.year_component) AND { 1 <= day_component <= 366 });
END_ENTITY;

ENTITY relative_event_occurrence
  SUBTYPE OF (event_occurrence);
  base_event : event_occurrence;
  offset : time_measure_with_unit;
END_ENTITY;

ENTITY time_interval;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY time_interval_relationship;
  name : label;
  description : OPTIONAL text;
  relating_time_interval : time_interval;
  related_time_interval : time_interval;
END_ENTITY;

ENTITY time_interval_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY time_interval_with_bounds
  SUBTYPE OF (time_interval);
  primary_bound : OPTIONAL date_time_or_event_occurrence;
  secondary_bound : OPTIONAL date_time_or_event_occurrence;
  duration : OPTIONAL time_measure_with_unit;
WHERE
  WR1: NOT (EXISTS(secondary_bound) AND EXISTS(duration));
  WR2: EXISTS(primary_bound) OR EXISTS(secondary_bound);
END_ENTITY;

ENTITY time_role;
  name : label;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY week_of_year_and_day_date
  SUBTYPE OF (date);
  week_component : week_in_year_number;
  day_component : OPTIONAL day_in_week_number;
END_ENTITY;

FUNCTION acyclic_event_occurrence_relationship
 (relation : event_occurrence_relationship; relatives : SET[1:?] OF event_occurrence; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF event_occurrence_relationship;
    END_LOCAL;

    IF relation.relating_event IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(evnt <* bag_to_set(USEDIN(relation.relating_event, 'DATE_TIME_SCHEMA.' + 'EVENT_OCCURRENCE_RELATIONSHIP.' + 'RELATED_EVENT')) | specific_relation IN TYPEOF(evnt));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_event_occurrence_relationship(x[i], relatives + relation.relating_event, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_time_interval_relationship
 (relation : time_interval_relationship; relatives : SET[1:?] OF time_interval; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF time_interval_relationship;
    END_LOCAL;

    IF relation.relating_time_interval IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(ti <* bag_to_set(USEDIN(relation.relating_time_interval, 'DATE_TIME_SCHEMA.' + 'TIME_INTERVAL_RELATIONSHIP.' + 'RELATED_TIME_INTERVAL')) | specific_relation IN TYPEOF(ti));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_time_interval_relationship(x[i], relatives + relation.relating_time_interval, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION leap_year
 (year : year_number) : BOOLEAN; 
  IF ((((year MOD 4) = 0) AND ((year MOD 100) <> 0)) OR ((year MOD 400) = 0)) THEN
    RETURN (TRUE);
  ELSE
    RETURN (FALSE);
  END_IF;
END_FUNCTION; 

FUNCTION valid_calendar_date
 (date : calendar_date) : LOGICAL; 
  CASE date.month_component OF
    1  : RETURN({ 1 <= date.day_component <= 31 });
    2  : BEGIN
           IF (leap_year(date.year_component)) THEN
             RETURN({ 1 <= date.day_component <= 29 });
           ELSE
             RETURN({ 1 <= date.day_component <= 28 });
           END_IF;
         END;
    3  : RETURN({ 1 <= date.day_component <= 31 });
    4  : RETURN({ 1 <= date.day_component <= 30 });
    5  : RETURN({ 1 <= date.day_component <= 31 });
    6  : RETURN({ 1 <= date.day_component <= 30 });
    7  : RETURN({ 1 <= date.day_component <= 31 });
    8  : RETURN({ 1 <= date.day_component <= 31 });
    9  : RETURN({ 1 <= date.day_component <= 30 });
    10 : RETURN({ 1 <= date.day_component <= 31 });
    11 : RETURN({ 1 <= date.day_component <= 30 });
    12 : RETURN({ 1 <= date.day_component <= 31 });
  END_CASE;
  RETURN (FALSE);
END_FUNCTION; 

FUNCTION valid_time
 (time : local_time) : BOOLEAN; 
  IF EXISTS(time.second_component) THEN
    RETURN (EXISTS(time.minute_component));
  ELSE
    RETURN (TRUE);
  END_IF;
END_FUNCTION; 

END_SCHEMA;  -- date_time_schema



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\document_schema\document_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: document_schema.exp,v 1.6 2004/11/25 16:29:38 thendrix Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA document_schema;

REFERENCE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_definition,
   product_definition_formation); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE product_or_formation_or_definition = SELECT
   (product, 
    product_definition_formation, 
    product_definition);
END_TYPE; 

ENTITY document;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  kind : document_type;
INVERSE
  representation_types : SET[0:?] OF document_representation_type FOR represented_document;
END_ENTITY;

ENTITY document_product_association;
  name : label;
  description : OPTIONAL text;
  relating_document : document;
  related_product : product_or_formation_or_definition;
END_ENTITY;

ENTITY document_relationship;
  name : label;
  description : OPTIONAL text;
  relating_document : document;
  related_document : document;
END_ENTITY;

ENTITY document_representation_type;
  name : label;
  represented_document : document;
END_ENTITY;

ENTITY document_type;
  product_data_type : label;
END_ENTITY;

ENTITY document_usage_constraint;
  source : document;
  subject_element : label;
  subject_element_value : text;
END_ENTITY;

ENTITY document_with_class
  SUBTYPE OF (document);
  class : identifier;
END_ENTITY;

FUNCTION acyclic_document_relationship
 (relation : document_relationship; relatives : SET[1:?] OF document; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF document_relationship;
    END_LOCAL;

    IF relation.relating_document IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(doc <* bag_to_set(USEDIN(relation.relating_document, 'DOCUMENT_SCHEMA.' + 'DOCUMENT_RELATIONSHIP.' + 'RELATED_DOCUMENT')) | specific_relation IN TYPEOF(doc));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_document_relationship(x[i], relatives + relation.relating_document, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- document_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\draughting_element_schema\draughting_element_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n268.exp *)

SCHEMA draughting_element_schema;

REFERENCE FROM geometry_schema (geometric_representation_item);

REFERENCE FROM support_resource_schema
    (label,
     text);

REFERENCE FROM presentation_definition_schema
    (annotation_occurrence,
     annotation_curve_occurrence,
     annotation_fill_area_occurrence, -- GL - Added, because of subtype constraint
     annotation_point_occurrence, -- GL - Added, because of subtype constraint
     annotation_text_occurrence, 
     annotation_symbol_occurrence);
     
-- GL added
REFERENCE FROM presentation_appearance_schema
    (invisible_item,
    presentation_style_assignment,
    styled_item);

-- GL added
REFERENCE FROM presentation_resource_schema
    (planar_box);

-- GL added
REFERENCE FROM geometry_schema
    (plane);

TYPE annotation_plane_element = SELECT 
  (draughting_callout, 
  styled_item); 
END_TYPE;

TYPE draughting_callout_element = SELECT
  (annotation_text_occurrence, 
   annotation_symbol_occurrence,
   annotation_curve_occurrence);
END_TYPE;

TYPE dimension_extent_usage = ENUMERATION OF
  (origin,
   target);
END_TYPE;

TYPE des_invisible_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON invisible_item WITH
  (draughting_callout);
END_TYPE;

TYPE plane_or_planar_box = SELECT 
  (plane, 
  planar_box) ;
END_TYPE; 
   
ENTITY annotation_plane 
  SUBTYPE OF (annotation_occurrence, geometric_representation_item);
    elements : OPTIONAL SET[1:?] OF annotation_plane_element;
    SELF\styled_item.item : plane_or_planar_box;
  WHERE
    WR1: SELF\geometric_representation_item.dim = 3;
    -- if planar_box then it must have a axis2_placement_3d
    WR2: NOT('PRESENTATION_RESOURCE_SCHEMA.'+'PLANAR_BOX' IN TYPEOF(SELF\styled_item.item)) OR
      ('GEOMETRY_SCHEMA.'+'AXIS2_PLACEMENT_3D' IN TYPEOF(SELF\styled_item.item\planar_box.placement));
    -- allowed styles are fill_area_style for plane and fill_area_style or curve_style for planar_box; (maybe siluette style instead?)
    WR3: (('PRESENTATION_RESOURCE_SCHEMA.'+'PLANAR_BOX' IN TYPEOF(SELF\styled_item.item)) AND
      ('PRESENTATION_APPEARANCE_SCHEMA.'+'CURVE_STYLE' IN TYPEOF(SELF\styled_item.styles[1]\presentation_style_assignment.styles[1]))) OR
      (('GEOMETRY_SCHEMA.'+'PLANE' IN TYPEOF(SELF\styled_item.item)) AND
      ('PRESENTATION_APPEARANCE_SCHEMA.'+'FILL_AREA_STYLE' IN TYPEOF(SELF\styled_item.styles[1]\presentation_style_assignment.styles[1])));
    -- GL - check that we have exactly one style  
    WR4: SIZEOF(SELF\styled_item.styles = 1) AND
      SIZEOF(SELF\styled_item.styles[1]\presentation_style_assignment.styles = 1);
-- IP1: The elements should be located in the definition plane. 
--  Note: Because of numerical inaccuracy this might not be perfectly the case. A receiving system may correct such a derivation      
END_ENTITY;

ENTITY dimension_curve
  SUBTYPE OF (annotation_curve_occurrence);
WHERE
  WR1: (SIZEOF(
          QUERY(dct <* USEDIN(SELF,'DRAUGHTING_ELEMENT_SCHEMA.' +
                'TERMINATOR_SYMBOL.ANNOTATED_CURVE')
               | (('DRAUGHTING_ELEMENT_SCHEMA.'+
                  'DIMENSION_CURVE_TERMINATOR' IN TYPEOF(dct))
                  ))
          ) <= 2);
   WR2:  SIZEOF(
            QUERY( dcdc <* USEDIN(SELF,'DRAUGHTING_ELEMENT_SCHEMA.' +
                   'DRAUGHTING_CALLOUT.CONTENTS') |
                   ('DRAUGHTING_ELEMENT_SCHEMA.'+
                    'DIMENSION_CURVE_DIRECTED_CALLOUT' IN TYPEOF(dcdc)))
       )>= 1;
   WR3: (SIZEOF(
            QUERY(dct1 <* USEDIN(SELF,'DRAUGHTING_ELEMENT_SCHEMA.' +
                  'TERMINATOR_SYMBOL.ANNOTATED_CURVE') 
               | (('DRAUGHTING_ELEMENT_SCHEMA.'+
                  'DIMENSION_CURVE_TERMINATOR' IN TYPEOF(dct1)) 
                  AND (dct1.role = origin)))
        ) <= 1)
     AND 
        (SIZEOF(
            QUERY (dct2 <* USEDIN(SELF,'DRAUGHTING_ELEMENT_SCHEMA.'+
                   'TERMINATOR_SYMBOL.ANNOTATED_CURVE') 
                 | (('DRAUGHTING_ELEMENT_SCHEMA.'+
                   'DIMENSION_CURVE_TERMINATOR' IN TYPEOF(dct2))
                   AND (dct2.role = target)))
       ) <= 1);
END_ENTITY;

ENTITY leader_curve
  SUBTYPE OF (annotation_curve_occurrence);
WHERE
  WR1: SIZEOF( 
          QUERY(ldc <* USEDIN( SELF, 'DRAUGHTING_ELEMENT_SCHEMA.' +
                       'DRAUGHTING_CALLOUT.CONTENTS')
                   |   'DRAUGHTING_ELEMENT_SCHEMA.' +
                       'LEADER_DIRECTED_CALLOUT'  IN TYPEOF(ldc))) >= 1;
END_ENTITY;

ENTITY projection_curve
  SUBTYPE OF (annotation_curve_occurrence);
END_ENTITY;

ENTITY terminator_symbol
  SUBTYPE OF (annotation_symbol_occurrence);
  annotated_curve : annotation_curve_occurrence;
END_ENTITY;

ENTITY dimension_curve_terminator
  SUBTYPE OF (terminator_symbol);
  role  : dimension_extent_usage;
WHERE
  WR1: 'DRAUGHTING_ELEMENT_SCHEMA.DIMENSION_CURVE' IN TYPEOF
       (SELF\terminator_symbol.annotated_curve);
END_ENTITY;

ENTITY leader_terminator
  SUBTYPE OF (terminator_symbol);
WHERE
  WR1: 'DRAUGHTING_ELEMENT_SCHEMA.LEADER_CURVE' IN TYPEOF
       (SELF\terminator_symbol.annotated_curve);
END_ENTITY;

ENTITY draughting_callout
  SUBTYPE OF (geometric_representation_item);
    contents : SET [1:?] OF draughting_callout_element; 
  WHERE
-- "A draughting callout that includes a leader line to direct the eye of the reader to a 
-- place of interest is a leader directed callout. 
-- Requirements for a leader_directed_callout are specified in 5.4.9. 
-- A draughting callout that includes a projection line to direct the eye of the 
-- reader to a place of interest is a projection directed callout. 
-- Requirements for a projection_directed_callout are specified in 5.4.10. 
-- A draughting callout that includes a dimension line to direct information in the 
-- callout is a dimension curve directed callout. 
-- Requirements for a dimension_curve_directed_callout are specified in 5.4.11."
    WR1: (SIZEOF (QUERY (l_1 <* SELF\draughting_callout.contents |
       'DRAUGHTING_ELEMENT_SCHEMA.LEADER_CURVE' IN (TYPEOF(l_1)))) = 0) OR
       ('DRAUGHTING_ELEMENT_SCHEMA.LEADER_DIRECTED_CALLOUT' IN (TYPEOF(SELF))) AND
       (SIZEOF (QUERY (l_1 <* SELF\draughting_callout.contents |
       'DRAUGHTING_ELEMENT_SCHEMA.PROJECTION_CURVE' IN (TYPEOF(l_1)))) = 0) OR
       ('DRAUGHTING_ELEMENT_SCHEMA.PROJECTION_DIRECTED_CALLOUT' IN (TYPEOF(SELF))) AND  
       (SIZEOF (QUERY (l_1 <* SELF\draughting_callout.contents |
       'DRAUGHTING_ELEMENT_SCHEMA.DIMENSION_CURVE' IN (TYPEOF(l_1)))) = 0) OR
       ('DRAUGHTING_ELEMENT_SCHEMA.DIMENSION_CURVE_DIRECTED_CALLOUT' IN (TYPEOF(SELF)));
END_ENTITY;

ENTITY draughting_callout_relationship;
  name : label;
  description : text;
  relating_draughting_callout : draughting_callout;
  related_draughting_callout : draughting_callout;
END_ENTITY;

ENTITY leader_directed_callout
  SUBTYPE OF (draughting_callout);
WHERE
  WR1: SIZEOF (QUERY (l_1 <* SELF\draughting_callout.contents |
       'DRAUGHTING_ELEMENT_SCHEMA.LEADER_CURVE' IN (TYPEOF(l_1)))) >= 1;
  WR2: SIZEOF(SELF\draughting_callout.contents) >=2;
END_ENTITY;

ENTITY projection_directed_callout
  SUBTYPE OF (draughting_callout);
WHERE
  WR1: SIZEOF(QUERY(p_1<*SELF\draughting_callout.contents | 
      'DRAUGHTING_ELEMENT_SCHEMA.PROJECTION_CURVE' IN (TYPEOF(p_1))))=1;
  WR2: SIZEOF(SELF\draughting_callout.contents) >=2;
END_ENTITY;

ENTITY dimension_curve_directed_callout
  SUBTYPE OF (draughting_callout);
WHERE
  WR1: SIZEOF(QUERY(d_c<*SELF\draughting_callout.contents | 
      'DRAUGHTING_ELEMENT_SCHEMA.DIMENSION_CURVE' IN (TYPEOF(d_c))))=1;
  WR2: SIZEOF(SELF\draughting_callout.contents) >= 2;
END_ENTITY;

SUBTYPE_CONSTRAINT annotation_occurrence_subtypes FOR annotation_occurrence;
ONEOF (annotation_curve_occurrence,
       annotation_fill_area_occurrence,
       annotation_plane,
       annotation_point_occurrence,
       annotation_symbol_occurrence,
       annotation_text_occurrence);
END_SUBTYPE_CONSTRAINT;


END_SCHEMA; -- draughting_element_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\effectivity_schema\effectivity_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: effectivity_schema.exp,v 1.4 2004/11/10 11:51:52 mikeward Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA effectivity_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value,
   get_name_value,
   name_attribute); 

REFERENCE FROM date_time_schema   -- ISO 10303-41
  (date_time_or_event_occurrence,
   time_interval); 

REFERENCE FROM measure_schema   -- ISO 10303-41
  (measure_with_unit); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


ENTITY dated_effectivity
  SUBTYPE OF (effectivity);
  effectivity_end_date : OPTIONAL date_time_or_event_occurrence;
  effectivity_start_date : date_time_or_event_occurrence;
END_ENTITY;

ENTITY effectivity
  SUPERTYPE OF (ONEOF (serial_numbered_effectivity,
                       dated_effectivity,
                       lot_effectivity,
                       time_interval_based_effectivity));
  id : identifier;
DERIVE
  name : label := get_name_value(SELF);
  description : text := get_description_value(SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
  WR2: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY effectivity_relationship;
  name : label;
  description : OPTIONAL text;
  related_effectivity : effectivity;
  relating_effectivity : effectivity;
END_ENTITY;

ENTITY lot_effectivity
  SUBTYPE OF (effectivity);
  effectivity_lot_id : identifier;
  effectivity_lot_size : measure_with_unit;
END_ENTITY;

ENTITY serial_numbered_effectivity
  SUBTYPE OF (effectivity);
  effectivity_start_id : identifier;
  effectivity_end_id : OPTIONAL identifier;
END_ENTITY;

ENTITY time_interval_based_effectivity
  SUBTYPE OF (effectivity);
  effectivity_period : time_interval;
END_ENTITY;

FUNCTION acyclic_effectivity_relationship
 (relation : effectivity_relationship; relatives : SET[1:?] OF effectivity; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF effectivity_relationship;
    END_LOCAL;

    IF relation.relating_effectivity IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(eff <* bag_to_set(USEDIN(relation.relating_effectivity, 'EFFECTIVITY_SCHEMA.' + 'EFFECTIVITY_RELATIONSHIP.' + 'RELATED_EFFECTIVITY')) | specific_relation IN TYPEOF(eff));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_effectivity_relationship(x[i], relatives + relation.relating_effectivity, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- effectivity_schema




(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\experience_schema\experience_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: experience_schema.exp,v 1.13 2004/11/10 14:41:44 mikeward Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA experience_schema;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


ENTITY experience;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY experience_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_experience : experience;
  related_experience : experience;
END_ENTITY;

ENTITY experience_type;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY experience_type_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_experience_type : experience_type;
  related_experience_type : experience_type;
END_ENTITY;

FUNCTION acyclic_experience_relationship (relation : experience_relationship; relatives : SET OF experience; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF experience_relationship;
    END_LOCAL;

    IF relation.relating_experience IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(expr <* bag_to_set(USEDIN(relation.relating_experience, 'EXPERIENCE_SCHEMA.' + 'EXPERIENCE_RELATIONSHIP.' + 'RELATED_EXPERIENCE')) | specific_relation IN TYPEOF(expr));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_experience_relationship(x[i], relatives + relation.relating_experience, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

  FUNCTION acyclic_experience_type_relationship (relation : experience_type_relationship; relatives : SET OF experience_type; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF experience_type_relationship;
    END_LOCAL;

    IF relation.relating_experience_type IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(exptyp <* bag_to_set(USEDIN(relation.relating_experience_type, 'EXPERIENCE_SCHEMA.' + 'EXPERIENCE_TYPE_RELATIONSHIP.' + 'RELATED_EXPERIENCE_TYPE')) | specific_relation IN TYPEOF(exptyp));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_experience_type_relationship(x[i], relatives + relation.relating_experience_type, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

END_SCHEMA;  -- experience_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\external_reference_schema\external_reference_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: external_reference_schema.exp,v 1.4 2004/11/10 11:57:16 mikeward Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA external_reference_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE message = STRING;
END_TYPE; 

TYPE source_item = SELECT
   (identifier, 
    message);
END_TYPE; 

ENTITY external_source;
  source_id : source_item;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY external_source_relationship;
  name : label;
  description : OPTIONAL text;
  relating_source : external_source;
  related_source : external_source;
END_ENTITY;

ENTITY externally_defined_item;
  item_id : source_item;
  source : external_source;
END_ENTITY;

ENTITY externally_defined_item_relationship;
  name : label;
  description : OPTIONAL text;
  relating_item : externally_defined_item;
  related_item : externally_defined_item;
END_ENTITY;

ENTITY pre_defined_item;
  name : label;
END_ENTITY;

FUNCTION acyclic_external_source_relationship
 (relation : external_source_relationship; relatives : SET[1:?] OF external_source; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF external_source_relationship;
    END_LOCAL;

    IF relation.relating_source IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(es <* bag_to_set(USEDIN(relation.relating_source, 'EXTERNAL_REFERENCE_SCHEMA.' + 'EXTERNAL_SOURCE_RELATIONSHIP.' + 'RELATED_SOURCE')) | specific_relation IN TYPEOF(es));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_external_source_relationship(x[i], relatives + relation.relating_source, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_externally_defined_item_relationship
 (relation : externally_defined_item_relationship; relatives : SET[1:?] OF externally_defined_item; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF externally_defined_item_relationship;
    END_LOCAL;

    IF relation.relating_item IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(edi <* bag_to_set(USEDIN(relation.relating_item, 'EXTERNAL_REFERENCE_SCHEMA.' + 'EXTERNALLY_DEFINED_ITEM_RELATIONSHIP.' + 'RELATED_ITEM')) | specific_relation IN TYPEOF(edi));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_externally_defined_item_relationship(x[i], relatives + relation.relating_item, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- external_reference_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\geometric_model_schema\geometric_model_schema.exp
   ------------------------------------------------------------
*)

 (* Document WG12 N1046r date 2003-04-29. EXPRESS listing corresponding to part
 42  edition IS WG12 N536, as modified by TC1 WG12 N608 and
 by revision 1 (edition 3)  WG12 N1045 *)

 SCHEMA geometric_model_schema;
   REFERENCE FROM geometry_schema;
   REFERENCE FROM topology_schema;
   REFERENCE FROM measure_schema(length_measure,
                                 parameter_value,
                                 plane_angle_measure,
                                 plane_angle_unit,
                                 positive_length_measure,
                                 positive_plane_angle_measure);
   REFERENCE FROM representation_schema(founded_item);

 TYPE boolean_operand = SELECT
   (solid_model, 
    half_space_solid,
    csg_primitive,
    boolean_result,
    half_space_2d);
 END_TYPE;

 TYPE boolean_operator = ENUMERATION OF 
   (union, 
    intersection, 
    difference);
 END_TYPE;

 TYPE csg_select = SELECT
   (boolean_result,
    csg_primitive);
 END_TYPE;

 TYPE csg_primitive = SELECT
   (sphere,
    ellipsoid,
    block,
    right_angular_wedge,
    faceted_primitive,
    rectangular_pyramid,
    torus,
    right_circular_cone,
    eccentric_cone,
    right_circular_cylinder,
    cyclide_segment_solid,
    primitive_2d);
 END_TYPE;

 TYPE geometric_set_select = SELECT
   (point,
    curve,
    surface);
 END_TYPE;

 TYPE surface_model = SELECT
   (shell_based_surface_model, 
    face_based_surface_model);
 END_TYPE;

 TYPE wireframe_model = SELECT
   (shell_based_wireframe_model,
    edge_based_wireframe_model);
 END_TYPE;

 ENTITY block
   SUBTYPE OF (geometric_representation_item);
   position : axis2_placement_3d;
   x        : positive_length_measure;
   y        : positive_length_measure;
   z        : positive_length_measure;
 END_ENTITY;

 ENTITY boolean_result
   SUBTYPE OF (geometric_representation_item);
   operator        : boolean_operator;
   first_operand   :  boolean_operand;
   second_operand  :  boolean_operand;
 END_ENTITY;

 ENTITY box_domain
   SUBTYPE OF (founded_item);
   corner  : cartesian_point;
   xlength : positive_length_measure;
   ylength : positive_length_measure;
   zlength : positive_length_measure;
 WHERE
   WR1: SIZEOF(QUERY(item <* USEDIN(SELF,'')|
             NOT ('GEOMETRIC_MODEL_SCHEMA.BOXED_HALF_SPACE'
                    IN TYPEOF(item)))) = 0;
 END_ENTITY;

 ENTITY boxed_half_space
   SUBTYPE OF(half_space_solid);
   enclosure : box_domain;
 END_ENTITY;

 ENTITY brep_2d
  SUBTYPE OF (solid_model);
  extent : face;
  WHERE
    WR1:  SIZEOF (['TOPOLOGY_SCHEMA.FACE_SURFACE',
          'TOPOLOGY_SCHEMA.SUBFACE', 'TOPOLOGY_SCHEMA.ORIENTED_FACE'] *
              TYPEOF (SELF.extent)) = 0;
   WR2 : SIZEOF (QUERY (bnds <* extent.bounds |
         NOT ('TOPOLOGY_SCHEMA.EDGE_LOOP' IN TYPEOF(bnds.bound))) ) = 0;
   WR3 : SIZEOF (QUERY (bnds <* extent.bounds |
         'TOPOLOGY_SCHEMA.FACE_OUTER_BOUND' IN TYPEOF(bnds))) = 1;
   WR4 : SIZEOF(QUERY (elp_fbnds <* QUERY (bnds <* extent.bounds |
         'TOPOLOGY_SCHEMA.EDGE_LOOP' IN TYPEOF(bnds.bound)) |
          NOT (SIZEOF (QUERY (oe <* elp_fbnds.bound\path.edge_list | NOT
          (('TOPOLOGY_SCHEMA.EDGE_CURVE' IN TYPEOF(oe.edge_element)) AND
         (oe.edge_element\geometric_representation_item.dim = 2)))) =
                0))) = 0;
 END_ENTITY;

 ENTITY brep_with_voids
   SUBTYPE OF (manifold_solid_brep);
   voids : SET [1:?] OF oriented_closed_shell;
 END_ENTITY;

ENTITY  circular_area
  SUBTYPE OF (primitive_2d);
    centre: cartesian_point;
    radius: positive_length_measure;
END_ENTITY;

 ENTITY convex_hexahedron
   SUBTYPE OF (faceted_primitive);
  WHERE
    WR1: SIZEOF(points) = 8 ;
    WR2: above_plane(points[1], points[2], points[3], points[4]) = 0.0;
    WR3: above_plane(points[5], points[8], points[7], points[6]) = 0.0;
    WR4: above_plane(points[1], points[4], points[8], points[5]) = 0.0;
    WR5: above_plane(points[4], points[3], points[7], points[8]) = 0.0;
    WR6: above_plane(points[3], points[2], points[6], points[7]) = 0.0;
    WR7: above_plane(points[1], points[5], points[6], points[2]) = 0.0;
    WR8: same_side([points[1], points[2], points[3]],
                     [points[5], points[6], points[7], points[8]]);
    WR9: same_side([points[1], points[4], points[8]],
                     [points[3], points[7], points[6], points[2]]);
    WR10: same_side([points[1], points[2], points[5]],
                      [points[3], points[7], points[8], points[4]]);
    WR11: same_side([points[5], points[6], points[7]],
                     [points[1], points[2], points[3], points[4]]);
    WR12: same_side([points[3], points[7], points[6]],
                     [points[1], points[4], points[8], points[5]]);
    WR13: same_side([points[3], points[7], points[8]],
                      [points[1], points[5], points[6], points[2]]);
  END_ENTITY;

 ENTITY csg_solid
   SUBTYPE OF (solid_model);
   tree_root_expression : csg_select;
 END_ENTITY;

ENTITY cyclide_segment_solid
   SUBTYPE OF (geometric_representation_item);
   position    : axis2_placement_3d;
   radius1     : positive_length_measure;
   radius2     : positive_length_measure;
   cone_angle1 : plane_angle_measure;
   cone_angle2 : plane_angle_measure;
   turn_angle  : plane_angle_measure;
END_ENTITY;

 ENTITY eccentric_cone
  SUBTYPE OF (geometric_representation_item);
   position    : axis2_placement_3d;
   semi_axis_1 : positive_length_measure;
   semi_axis_2 : positive_length_measure;
   height      : positive_length_measure;
   x_offset    : length_measure;
   y_offset    : length_measure;
   ratio       : REAL;
 WHERE
  WR1 : ratio >= 0.0;
 END_ENTITY;

 ENTITY edge_based_wireframe_model
   SUBTYPE OF (geometric_representation_item);
   ebwm_boundary  : SET [1:?] OF connected_edge_set;
 END_ENTITY;

 ENTITY face_based_surface_model
   SUBTYPE OF (geometric_representation_item);
   fbsm_faces : SET [1:?] OF connected_face_set;
 END_ENTITY;

 ENTITY geometric_curve_set
   SUBTYPE OF (geometric_set);
 WHERE
   WR1: SIZEOF(QUERY(temp <* SELF\geometric_set.elements |
                            'GEOMETRY_SCHEMA.SURFACE' IN TYPEOF(temp))) = 0;
 END_ENTITY;

 ENTITY geometric_set
   SUPERTYPE OF (ONEOF(geometric_curve_set,
                       geometric_set_replica))
   SUBTYPE OF (geometric_representation_item);
   elements :  SET [1:?] OF geometric_set_select;
 END_ENTITY;

 ENTITY ellipsoid
   SUBTYPE OF (geometric_representation_item);
     position      : axis2_placement_3d;
     semi_axis_1 : positive_length_measure;
     semi_axis_2 : positive_length_measure;
     semi_axis_3 : positive_length_measure;
 END_ENTITY;

ENTITY  elliptic_area
  SUBTYPE OF (primitive_2d);
    position : axis2_placement_2d;
    semi_axis_1 : positive_length_measure;
    semi_axis_2 : positive_length_measure;
END_ENTITY;

 ENTITY extruded_area_solid
   SUBTYPE OF (swept_area_solid);
   extruded_direction : direction;
   depth              : positive_length_measure;
 WHERE
   WR1: dot_product(
        (SELF\swept_area_solid.swept_area.basis_surface\
        elementary_surface.position.p[3]), extruded_direction) <> 0.0;
 END_ENTITY;

 ENTITY extruded_face_solid
   SUBTYPE OF (swept_face_solid);
   extruded_direction : direction;
   depth              : positive_length_measure;
 WHERE
   WR1: dot_product(
        (SELF\swept_face_solid.swept_face.face_geometry\
        elementary_surface.position.p[3]), extruded_direction) <> 0.0;
 END_ENTITY;

 ENTITY faceted_brep
   SUBTYPE OF (manifold_solid_brep);
 END_ENTITY;

 ENTITY faceted_primitive
   SUPERTYPE OF (ONEOF(tetrahedron, convex_hexahedron))
   SUBTYPE OF (geometric_representation_item) ;
     points : LIST[4:?] OF UNIQUE cartesian_point ;
  WHERE
    WR1: points[1].dim = 3 ;
  END_ENTITY;

  ENTITY geometric_set_replica
   SUBTYPE OF (geometric_set); 
     parent_set     : geometric_set; 
     transformation : cartesian_transformation_operator; 
   DERIVE 
     SELF\geometric_set.elements : SET [1:?] OF geometric_set_select := 
           build_transformed_set(transformation, parent_set); 
   WHERE
     WR1: acyclic_set_replica(SELF, parent_set);
   END_ENTITY;

ENTITY  half_space_2d
  SUBTYPE OF (geometric_representation_item);
    base_curve:  curve;
    agreement_flag: BOOLEAN;
END_ENTITY;

 ENTITY half_space_solid
   SUBTYPE OF(geometric_representation_item);
   base_surface   : surface;
   agreement_flag : BOOLEAN;
 END_ENTITY;

 ENTITY manifold_solid_brep
   SUBTYPE OF (solid_model);
   outer : closed_shell;
 END_ENTITY;

 ENTITY polygonal_area
   SUBTYPE OF (primitive_2d);
   bounds:  LIST [3:?] OF UNIQUE cartesian_point;
 END_ENTITY;

 ENTITY primitive_2d
   SUPERTYPE  OF (ONEOF (circular_area, elliptic_area, rectangular_area,
                            polygonal_area))
   SUBTYPE OF (geometric_representation_item);
   WHERE
     WR1 : SELF\geometric_representation_item.dim = 2;
 END_ENTITY;

 ENTITY rectangle_domain
   SUBTYPE OF (founded_item);
   corner: cartesian_point;
   xlength: positive_length_measure;
   ylength: positive_length_measure;
 WHERE
   WR1: SIZEOF(QUERY(item <* USEDIN(SELF, '')| NOT
   ('GEOMETRIC_MODEL_SCHEMA.RECTANGLED_HALF_SPACE' IN TYPEOF(item)))) = 0;
 END_ENTITY;

ENTITY rectangled_half_space
  SUBTYPE OF (half_space_2d);
    enclosure: rectangle_domain;
END_ENTITY;

ENTITY rectangular_area
  SUBTYPE OF (primitive_2d);
    position: axis2_placement_2d;
    x: positive_length_measure;
    y: positive_length_measure;
END_ENTITY;

 ENTITY rectangular_pyramid
   SUBTYPE OF (geometric_representation_item);
   position       : axis2_placement_3d;
   xlength        : positive_length_measure;
   ylength        : positive_length_measure;
   height         : positive_length_measure;
 END_ENTITY;

 ENTITY revolved_area_solid
   SUBTYPE OF (swept_area_solid);
   axis  : axis1_placement;
   angle : plane_angle_measure;
 DERIVE
  axis_line : line := representation_item('')||
                    geometric_representation_item()|| curve()||
                    line(axis.location, representation_item('')||
                    geometric_representation_item()||
                    vector(axis.z, 1.0));
 END_ENTITY;

ENTITY revolved_face_solid
   SUBTYPE OF (swept_face_solid);
   axis  : axis1_placement;
   angle : plane_angle_measure;
 DERIVE
  axis_line : line := representation_item('')||
                    geometric_representation_item()|| curve()||
                    line(axis.location, representation_item('')||
                    geometric_representation_item()||
                    vector(axis.z, 1.0));
 END_ENTITY;

 ENTITY right_angular_wedge
   SUBTYPE OF (geometric_representation_item);
   position : axis2_placement_3d;
   x        : positive_length_measure;
   y        : positive_length_measure;
   z        : positive_length_measure;
   ltx      : length_measure;
 WHERE
   WR1: ((0.0 <= ltx) AND (ltx < x));
 END_ENTITY;

 ENTITY right_circular_cone
   SUBTYPE OF (geometric_representation_item);
   position   : axis1_placement;
   height     : positive_length_measure;
   radius     : length_measure;
   semi_angle : plane_angle_measure;
 WHERE
   WR1: radius >= 0.0;
 END_ENTITY;

 ENTITY right_circular_cylinder
   SUBTYPE OF (geometric_representation_item);
   position   : axis1_placement;
   height     : positive_length_measure;
   radius     : positive_length_measure;
 END_ENTITY;

 ENTITY sectioned_spine
   SUBTYPE OF (geometric_curve_set);
      cross_sections   : LIST[2:?] OF curve;
      spine_points     : LIST[2:?] OF point;
   WHERE
     WR1 : SIZEOF(SELF\geometric_set.elements) = 1;
     WR2 : 'GEOMETRY_SCHEMA.CURVE' IN
                     TYPEOF(SELF\geometric_set.elements[1]);
     WR3 : SIZEOF(cross_sections) = SIZEOF(spine_points);
     WR4 : SELF\geometric_representation_item.dim = 3;
 END_ENTITY;

 ENTITY shell_based_surface_model
   SUBTYPE OF (geometric_representation_item);
   sbsm_boundary  : SET [1:?] OF shell;
 WHERE
   WR1: constraints_geometry_shell_based_surface_model(SELF);
 END_ENTITY;

 ENTITY shell_based_wireframe_model
   SUBTYPE OF (geometric_representation_item);
   sbwm_boundary  : SET [1:?] OF shell;
 WHERE
   WR1: constraints_geometry_shell_based_wireframe_model(SELF);
 END_ENTITY;

 ENTITY solid_model
   SUPERTYPE OF (ONEOF( csg_solid, manifold_solid_brep, swept_face_solid,
                        swept_area_solid, swept_disk_solid, solid_replica,
                        brep_2d, trimmed_volume))
   SUBTYPE OF (geometric_representation_item);
 END_ENTITY;

 ENTITY solid_replica
   SUBTYPE OF (solid_model);
   parent_solid   : solid_model;
   transformation : cartesian_transformation_operator_3d;
 WHERE
   WR1: acyclic_solid_replica(SELF, parent_solid);
   WR2: parent_solid\geometric_representation_item.dim = 3;
 END_ENTITY;


 ENTITY sphere
   SUBTYPE OF (geometric_representation_item);
   radius : positive_length_measure;
   centre : point;
 END_ENTITY;

 ENTITY surface_curve_swept_area_solid
   SUBTYPE OF (swept_area_solid);
      directrix          : curve;
      start_param        : REAL;
      end_param          : REAL;
      reference_surface  : surface;
   WHERE
     WR1 : (NOT ('GEOMETRY_SCHEMA.SURFACE_CURVE' IN TYPEOF(directrix))) OR
          (reference_surface IN (directrix\surface_curve.basis_surface));
 END_ENTITY;

 ENTITY surface_curve_swept_face_solid
   SUBTYPE OF (swept_face_solid);
      directrix          : curve;
      start_param        : REAL;
      end_param          : REAL;
      reference_surface  : surface;
   WHERE
     WR1 : (NOT ('GEOMETRY_SCHEMA.SURFACE_CURVE' IN TYPEOF(directrix))) OR
          (reference_surface IN (directrix\surface_curve.basis_surface));
 END_ENTITY;

 ENTITY swept_area_solid
   SUPERTYPE OF (ONEOF(revolved_area_solid, extruded_area_solid,
                       surface_curve_swept_area_solid))
   SUBTYPE OF (solid_model);
   swept_area :  curve_bounded_surface;
 WHERE
   WR1: 'GEOMETRY_SCHEMA.PLANE' IN TYPEOF(swept_area.basis_surface);
 END_ENTITY;

 ENTITY swept_disk_solid
   SUBTYPE OF (solid_model);
     directrix    : curve;
     radius       : positive_length_measure;
     inner_radius : OPTIONAL positive_length_measure;
     start_param : REAL;
     end_param   : REAL;
   WHERE
     WR1 : directrix.dim = 3;
     WR2 : (NOT EXISTS(inner_radius)) OR (radius > inner_radius) ;
 END_ENTITY;

 ENTITY swept_face_solid
   SUPERTYPE OF (ONEOF(extruded_face_solid, revolved_face_solid,
                 surface_curve_swept_face_solid))
   SUBTYPE OF (solid_model);
   swept_face :  face_surface;
 WHERE
   WR1: 'GEOMETRY_SCHEMA.PLANE' IN TYPEOF(swept_face.face_geometry);
 END_ENTITY;

 ENTITY tetrahedron
   SUBTYPE OF (faceted_primitive);
  WHERE
    WR1: SIZEOF(points) = 4 ;
    WR2: above_plane(points[1], points[2], points[3], points[4]) <> 0.0;
  END_ENTITY;

 ENTITY torus
   SUBTYPE OF (geometric_representation_item);
   position     : axis1_placement;
   major_radius : positive_length_measure;
   minor_radius : positive_length_measure;
 WHERE
   WR1: major_radius > minor_radius;
 END_ENTITY;

 ENTITY trimmed_volume
   SUBTYPE OF (solid_model);
   basis_volume :  volume;
     u1         :  parameter_value;
     u2         :  parameter_value;
     v1         :  parameter_value;
     v2         :  parameter_value;
     w1         :  parameter_value;
     w2         :  parameter_value;
   WHERE
     WR1 : u1 <> u2;
     WR2 : v1 <> v2;
     WR3 : w1 <> w2;
 END_ENTITY;

 
 FUNCTION acyclic_set_replica(rep : geometric_set_replica;
                           parent : geometric_set) : BOOLEAN;
   IF NOT (('GEOMETRY_SCHEMA.GEOMETRIC_SET_REPLICA') IN TYPEOF(parent))
        THEN  RETURN (TRUE);
   END_IF;
 (* Return TRUE if the parent is not of type geometric_set_replica *)
   IF (parent :=: rep) THEN
      RETURN (FALSE);
  (* Return FALSE if the parent is the same geometric_set_replica,
     otherwise, call function again with the parents own parent_set.  *)
    ELSE RETURN(acyclic_set_replica(rep,
                          parent\geometric_set_replica.parent_set));
    END_IF;
  END_FUNCTION;

 FUNCTION acyclic_solid_replica(rep : solid_replica; parent :
                    solid_model) : BOOLEAN;
   IF NOT (('GEOMETRY_SCHEMA.SOLID_REPLICA') IN TYPEOF(parent)) THEN
      RETURN (TRUE);
   END_IF;
 (* Return TRUE if the parent is not of type solid_replica. *)
   IF (parent :=: rep) THEN
      RETURN (FALSE);
  (* Return FALSE if the parent is the same solid_replica, otherwise,
   call function again with the parents own parent_solid.     *)
    ELSE RETURN(acyclic_solid_replica(rep,
                      parent\solid_replica.parent_solid));
    END_IF;
  END_FUNCTION;

 FUNCTION build_transformed_set(tr: cartesian_transformation_operator;
           gset : geometric_set) : SET [0:?] OF geometric_set_select;
  LOCAL
   s          : SET [1:?] OF geometric_set_select := gset.elements;
   trset      : SET [0:?] OF geometric_set_select := [];
  END_LOCAL;
  REPEAT j := 1 TO SIZEOF(s);
    IF ('GEOMETRY_SCHEMA.CURVE' IN TYPEOF(s[j])) THEN
     trset := trset + dummy_gri || curve() ||curve_replica(s[j],tr); ELSE
     IF ('GEOMETRY_SCHEMA.POINT' IN TYPEOF(s[j])) THEN
       trset := trset + dummy_gri || point() || point_replica(s[j],tr);
       ELSE
       IF ('GEOMETRY_SCHEMA.SURFACE' IN TYPEOF(s[j])) THEN
         trset := trset + dummy_gri || surface()  || surface_replica(s[j],
           tr || cartesian_transformation_operator_3d (?));
       END_IF;
     END_IF;
    END_IF;
  END_REPEAT;
  RETURN(trset);
 END_FUNCTION;

 FUNCTION constraints_geometry_shell_based_surface_model
             (m: shell_based_surface_model): BOOLEAN;
   LOCAL
     result : BOOLEAN := TRUE;
   END_LOCAL;
   
   REPEAT j := 1 TO SIZEOF(m.sbsm_boundary);
     IF (NOT ('TOPOLOGY_SCHEMA.OPEN_SHELL' IN
                     TYPEOF(m.sbsm_boundary[j])) AND
        (NOT ('TOPOLOGY_SCHEMA.CLOSED_SHELL' IN
           TYPEOF(m.sbsm_boundary[j]))))
     THEN
       result := FALSE;
       RETURN(result);
       (* A surface model is composed of OPEN_ and CLOSED_SHELLs. *)
     END_IF;
   END_REPEAT;
   RETURN(result);
 END_FUNCTION;

 FUNCTION constraints_geometry_shell_based_wireframe_model
                       (m : shell_based_wireframe_model) : BOOLEAN;
   LOCAL
     result : BOOLEAN := TRUE;
   END_LOCAL;

   REPEAT j := 1 TO SIZEOF(m.sbwm_boundary);
     IF (NOT ('TOPOLOGY_SCHEMA.WIRE_SHELL' IN
                    TYPEOF(m.sbwm_boundary[j])) AND
        (NOT ('TOPOLOGY_SCHEMA.VERTEX_SHELL' IN
                      TYPEOF(m.sbwm_boundary[j]))))
     THEN
       result := FALSE;
       RETURN(result);
       (* A wireframe model is composed of WIRE_ and VERTEX_SHELLs *)
     END_IF;
   END_REPEAT;
   RETURN(result);
 END_FUNCTION;

 FUNCTION msb_shells (brep: manifold_solid_brep) :
                          SET [1:?] OF  closed_shell;
 
     IF SIZEOF (QUERY (msbtype <* TYPEOF (brep) |
       msbtype LIKE '*BREP_WITH_VOIDS')) >= 1 THEN
       RETURN (brep\brep_with_voids.voids + brep.outer);
     ELSE
       RETURN([brep.outer]);
     END_IF;
 END_FUNCTION;

 END_SCHEMA; -- end GEOMETRIC MODEL schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\geometry_schema\geometry_schema.exp
   ------------------------------------------------------------
*)

 (* Document WG12 N1046r date 2003-04-29. EXPRESS listing corresponding to part
 42  edition IS WG12 N536, as modified by TC1 WG12 N608 and
 by revision 1 (edition 3)  WG12 N1045 *)
 SCHEMA geometry_schema;
   REFERENCE FROM representation_schema
     (definitional_representation,
      founded_item,
      functionally_defined_transformation,
      item_in_context,
      representation,
      representation_item,
      representation_context,
      using_representations);
   REFERENCE FROM measure_schema
     (global_unit_assigned_context,
      length_measure,
      parameter_value,
      plane_angle_measure,
      plane_angle_unit,
      positive_length_measure,
      positive_plane_angle_measure);
   REFERENCE FROM topology_schema
     (edge_curve,
      face_surface,
      poly_loop,
      vertex_point);
    REFERENCE FROM geometric_model_schema
      (block,
       boolean_result,
       cyclide_segment_solid,
       eccentric_cone,
       edge_based_wireframe_model,
       ellipsoid,
       face_based_surface_model,
       faceted_primitive,
       geometric_set,
       half_space_solid,
       half_space_2d,
       primitive_2d,
       rectangular_pyramid,
       right_angular_wedge,
       right_circular_cone,
       right_circular_cylinder,
       shell_based_surface_model,
       shell_based_wireframe_model,
       solid_model,
       sphere,
       torus);

 CONSTANT
  dummy_gri : geometric_representation_item :=  representation_item('')||
                                   geometric_representation_item();
 END_CONSTANT;

 TYPE axis2_placement = SELECT
   (axis2_placement_2d, 
    axis2_placement_3d);
 END_TYPE;

 TYPE b_spline_curve_form = ENUMERATION OF
   (polyline_form,
    circular_arc,
    elliptic_arc,
    parabolic_arc,
    hyperbolic_arc,
    unspecified);
 END_TYPE;

 TYPE b_spline_surface_form = ENUMERATION OF
   (plane_surf,
    cylindrical_surf,
    conical_surf,
    spherical_surf,
    toroidal_surf,
    surf_of_revolution,
    ruled_surf,
    generalised_cone,
    quadric_surf,
    surf_of_linear_extrusion,
    unspecified);
 END_TYPE;

 TYPE curve_on_surface = SELECT
   (pcurve, 
    surface_curve, 
    composite_curve_on_surface);
 END_TYPE;

TYPE dimension_count = INTEGER;
WHERE
  WR1: SELF > 0;
END_TYPE;

 TYPE extent_enumeration = ENUMERATION OF 
   (invalid,
    zero,
    finite_non_zero,
    infinite);
 END_TYPE;

 TYPE knot_type = ENUMERATION OF 
   (uniform_knots,
    quasi_uniform_knots,
    piecewise_bezier_knots,
    unspecified);
 END_TYPE;

 TYPE pcurve_or_surface = SELECT
   (pcurve, 
    surface);
 END_TYPE;

 TYPE preferred_surface_curve_representation = ENUMERATION OF 
   (curve_3d,
    pcurve_s1, 
    pcurve_s2);
 END_TYPE;

TYPE surface_boundary = SELECT
   (boundary_curve,
    degenerate_pcurve);
END_TYPE;

 TYPE transition_code = ENUMERATION OF 
   (discontinuous,
    continuous,
    cont_same_gradient,
    cont_same_gradient_same_curvature);
 END_TYPE;

 TYPE trimming_preference = ENUMERATION OF 
   (cartesian,
    parameter,
    unspecified);
 END_TYPE;

 TYPE trimming_select = SELECT 
   (cartesian_point, 
    parameter_value);
 END_TYPE;

 TYPE vector_or_direction = SELECT
   (vector, 
    direction);
 END_TYPE;

ENTITY geometric_representation_context
  SUBTYPE OF (representation_context);
  coordinate_space_dimension : dimension_count;
END_ENTITY;

 ENTITY axis1_placement
 SUBTYPE OF (placement);
   axis     : OPTIONAL direction;
 DERIVE
   z : direction := NVL(normalise(axis), dummy_gri ||
                                 direction([0.0,0.0,1.0]));
 WHERE
   WR1: SELF\geometric_representation_item.dim  = 3;
 END_ENTITY;

 ENTITY axis2_placement_2d
   SUBTYPE OF (placement);
   ref_direction : OPTIONAL direction;
 DERIVE
   p             : LIST [2:2] OF direction := build_2axes(ref_direction);
 WHERE
   WR1: SELF\geometric_representation_item.dim = 2;
 END_ENTITY;

 ENTITY axis2_placement_3d
   SUBTYPE OF (placement);
   axis          : OPTIONAL direction;
   ref_direction : OPTIONAL direction;
 DERIVE
   p             : LIST [3:3] OF direction := build_axes(axis,ref_direction);
 WHERE
   WR1: SELF\placement.location.dim = 3;
   WR2: (NOT (EXISTS (axis))) OR (axis.dim = 3);
   WR3: (NOT (EXISTS (ref_direction))) OR (ref_direction.dim = 3);
   WR4: (NOT (EXISTS (axis))) OR (NOT (EXISTS (ref_direction))) OR
          (cross_product(axis,ref_direction).magnitude > 0.0);
 END_ENTITY;

 ENTITY b_spline_curve
   SUPERTYPE OF (ONEOF(uniform_curve, b_spline_curve_with_knots,
                       quasi_uniform_curve, bezier_curve)
                         ANDOR rational_b_spline_curve)
   SUBTYPE OF (bounded_curve);
   degree               : INTEGER;
   control_points_list  : LIST [2:?] OF cartesian_point;
   curve_form           : b_spline_curve_form;
   closed_curve         : LOGICAL;
   self_intersect       : LOGICAL;
 DERIVE
   upper_index_on_control_points  : INTEGER 
                                  := (SIZEOF(control_points_list) - 1);
   control_points       : ARRAY [0:upper_index_on_control_points]
                                                         OF cartesian_point 
                                  := list_to_array(control_points_list,0,
                                             upper_index_on_control_points);
 WHERE
   WR1: ('GEOMETRY_SCHEMA.UNIFORM_CURVE' IN TYPEOF(self)) OR
        ('GEOMETRY_SCHEMA.QUASI_UNIFORM_CURVE' IN TYPEOF(self)) OR
        ('GEOMETRY_SCHEMA.BEZIER_CURVE' IN TYPEOF(self)) OR
        ('GEOMETRY_SCHEMA.B_SPLINE_CURVE_WITH_KNOTS' IN TYPEOF(self));
 END_ENTITY;

 ENTITY b_spline_curve_with_knots
   SUBTYPE OF (b_spline_curve);
   knot_multiplicities  : LIST [2:?] OF INTEGER;
   knots                : LIST [2:?] OF parameter_value;
   knot_spec            : knot_type;
 DERIVE
   upper_index_on_knots : INTEGER := SIZEOF(knots);
 WHERE
   WR1: constraints_param_b_spline(degree, upper_index_on_knots,
                               upper_index_on_control_points,
                               knot_multiplicities, knots);
    WR2: SIZEOF(knot_multiplicities) = upper_index_on_knots;
END_ENTITY;

 ENTITY b_spline_surface
   SUPERTYPE OF (ONEOF(b_spline_surface_with_knots, uniform_surface,
                       quasi_uniform_surface, bezier_surface)
                         ANDOR rational_b_spline_surface)
   SUBTYPE OF (bounded_surface);
   u_degree             : INTEGER;
   v_degree             : INTEGER;
   control_points_list  : LIST [2:?] OF
                            LIST [2:?] OF cartesian_point;
   surface_form         : b_spline_surface_form;
   u_closed             : LOGICAL;
   v_closed             : LOGICAL;
   self_intersect       : LOGICAL;
 DERIVE
   u_upper             : INTEGER := SIZEOF(control_points_list) - 1;
   v_upper             : INTEGER := SIZEOF(control_points_list[1]) - 1;
   control_points      : ARRAY [0:u_upper] OF ARRAY [0:v_upper] OF 
                         cartesian_point 
                       := make_array_of_array(control_points_list,
                                              0,u_upper,0,v_upper);
 WHERE
   WR1: ('GEOMETRY_SCHEMA.UNIFORM_SURFACE' IN TYPEOF(SELF)) OR
        ('GEOMETRY_SCHEMA.QUASI_UNIFORM_SURFACE' IN TYPEOF(SELF)) OR
        ('GEOMETRY_SCHEMA.BEZIER_SURFACE' IN TYPEOF(SELF)) OR
        ('GEOMETRY_SCHEMA.B_SPLINE_SURFACE_WITH_KNOTS' IN TYPEOF(SELF));
 END_ENTITY;

 ENTITY b_spline_surface_with_knots
   SUBTYPE OF (b_spline_surface);
   u_multiplicities  : LIST [2:?] OF INTEGER;
   v_multiplicities  : LIST [2:?] OF INTEGER;
   u_knots           : LIST [2:?] OF parameter_value;
   v_knots           : LIST [2:?] OF parameter_value;
   knot_spec         : knot_type;
 DERIVE
   knot_u_upper      : INTEGER := SIZEOF(u_knots);
   knot_v_upper      : INTEGER := SIZEOF(v_knots);
 WHERE
    WR1: constraints_param_b_spline(SELF\b_spline_surface.u_degree,
                   knot_u_upper, SELF\b_spline_surface.u_upper,
                               u_multiplicities, u_knots);
    WR2: constraints_param_b_spline(SELF\b_spline_surface.v_degree,
                   knot_v_upper, SELF\b_spline_surface.v_upper,
                               v_multiplicities, v_knots);
    WR3: SIZEOF(u_multiplicities) = knot_u_upper;
    WR4: SIZEOF(v_multiplicities) = knot_v_upper;
 END_ENTITY;

 ENTITY b_spline_volume
   SUPERTYPE OF (ONEOF(b_spline_volume_with_knots, uniform_volume,
                      quasi_uniform_volume,bezier_volume) ANDOR
                       rational_b_spline_volume)
   SUBTYPE OF (volume);
   u_degree             : INTEGER;
   v_degree             : INTEGER;
   w_degree             : INTEGER;
   control_points_list  : LIST [2:?] OF
                            LIST [2:?] OF
                              LIST [2:?] OF cartesian_point;
 DERIVE
   u_upper             : INTEGER := SIZEOF(control_points_list) - 1;
   v_upper             : INTEGER := SIZEOF(control_points_list[1]) - 1;
   w_upper             : INTEGER := SIZEOF(control_points_list[1][1]) - 1;

   control_points      : ARRAY [0:u_upper] OF ARRAY [0:v_upper]
                         OF ARRAY [0:w_upper] OF  cartesian_point
                       := make_array_of_array_of_array (control_points_list,
                                              0,u_upper,0,v_upper,
                                              0,w_upper );
 WHERE
   WR1: ('GEOMETRY_SCHEMA.BEZIER_VOLUME' IN TYPEOF(SELF)) OR
        ('GEOMETRY_SCHEMA.UNIFORM_VOLUME' IN TYPEOF(SELF)) OR
        ('GEOMETRY_SCHEMA.QUASI_UNIFORM_VOLUME' IN TYPEOF(SELF)) OR
        ('GEOMETRY_SCHEMA.B_SPLINE_VOLUME_WITH_KNOTS' IN TYPEOF(SELF)) ;
 END_ENTITY;

 ENTITY b_spline_volume_with_knots
   SUBTYPE OF (b_spline_volume);
   u_multiplicities  : LIST [2:?] OF INTEGER;
   v_multiplicities  : LIST [2:?] OF INTEGER;
   w_multiplicities  : LIST [2:?] OF INTEGER;
   u_knots           : LIST [2:?] OF parameter_value;
   v_knots           : LIST [2:?] OF parameter_value;
   w_knots           : LIST [2:?] OF parameter_value;
 DERIVE
   knot_u_upper      : INTEGER := SIZEOF(u_knots);
   knot_v_upper      : INTEGER := SIZEOF(v_knots);
   knot_w_upper      : INTEGER := SIZEOF(w_knots);
 WHERE
    WR1: constraints_param_b_spline(SELF\b_spline_volume.u_degree,
                   knot_u_upper, SELF\b_spline_volume.u_upper,
                               u_multiplicities, u_knots);
    WR2: constraints_param_b_spline(SELF\b_spline_volume.v_degree,
                   knot_v_upper, SELF\b_spline_volume.v_upper,
                               v_multiplicities, v_knots);
    WR3: constraints_param_b_spline(SELF\b_spline_volume.w_degree,
                   knot_w_upper, SELF\b_spline_volume.w_upper,
                               w_multiplicities, w_knots);
    WR4: SIZEOF(u_multiplicities) = knot_u_upper;
    WR5: SIZEOF(v_multiplicities) = knot_v_upper;
    WR6: SIZEOF(w_multiplicities) = knot_w_upper;
 END_ENTITY;

 ENTITY bezier_curve
   SUBTYPE OF (b_spline_curve);
 END_ENTITY;

 ENTITY bezier_surface
   SUBTYPE OF (b_spline_surface);
 END_ENTITY;

 ENTITY bezier_volume
   SUBTYPE OF (b_spline_volume);
 END_ENTITY;

 ENTITY block_volume
   SUBTYPE OF (volume);
   position : axis2_placement_3d;
   x        : positive_length_measure;
   y        : positive_length_measure;
   z        : positive_length_measure;
 END_ENTITY;

 ENTITY boundary_curve
   SUBTYPE OF (composite_curve_on_surface);
 WHERE
   WR1: SELF\composite_curve.closed_curve;
 END_ENTITY;

 ENTITY bounded_curve
   SUPERTYPE OF (ONEOF(polyline, b_spline_curve, trimmed_curve,
                      bounded_pcurve, bounded_surface_curve, composite_curve))
   SUBTYPE OF (curve);
 END_ENTITY;

 ENTITY bounded_pcurve
   SUBTYPE OF (pcurve, bounded_curve);
  WHERE
    WR1: ('GEOMETRY_SCHEMA.BOUNDED_CURVE' IN
                   TYPEOF(SELF\pcurve.reference_to_curve.items[1]));
  END_ENTITY;

 ENTITY bounded_surface
   SUPERTYPE OF (ONEOF(b_spline_surface, rectangular_trimmed_surface,
                       curve_bounded_surface, rectangular_composite_surface))
   SUBTYPE OF (surface);
 END_ENTITY;

 ENTITY bounded_surface_curve
   SUBTYPE OF (surface_curve, bounded_curve);
 WHERE
   WR1: ('GEOMETRY_SCHEMA.BOUNDED_CURVE' IN
             TYPEOF(SELF\surface_curve.curve_3d));
 END_ENTITY;

 ENTITY cartesian_point
   SUPERTYPE OF (ONEOF(cylindrical_point, polar_point, spherical_point))
   SUBTYPE OF (point);
    coordinates  : LIST [1:3] OF length_measure;
 END_ENTITY;

 ENTITY cartesian_transformation_operator
   SUPERTYPE OF(ONEOF(cartesian_transformation_operator_2d,
                               cartesian_transformation_operator_3d))
   SUBTYPE OF (geometric_representation_item,
                            functionally_defined_transformation);
   axis1        : OPTIONAL direction;
   axis2        : OPTIONAL direction;
   local_origin : cartesian_point;
   scale        : OPTIONAL REAL;
 DERIVE
   scl          : REAL := NVL(scale, 1.0);
 WHERE
   WR1: scl > 0.0;
 END_ENTITY;

 ENTITY cartesian_transformation_operator_2d
   SUBTYPE OF (cartesian_transformation_operator);
 DERIVE
   u : LIST[2:2] OF direction := 
       base_axis(2,SELF\cartesian_transformation_operator.axis1,
                   SELF\cartesian_transformation_operator.axis2,?);
 WHERE
   WR1: SELF\geometric_representation_item.dim = 2;
 END_ENTITY;

 ENTITY cartesian_transformation_operator_3d
   SUBTYPE OF (cartesian_transformation_operator);
   axis3 : OPTIONAL direction;
 DERIVE
   u     : LIST[3:3] OF direction 
         := base_axis(3,SELF\cartesian_transformation_operator.axis1,
                        SELF\cartesian_transformation_operator.axis2,axis3);
 WHERE
   WR1: SELF\geometric_representation_item.dim = 3;
 END_ENTITY;

 ENTITY circle
   SUBTYPE OF (conic);
   radius   : positive_length_measure;
 END_ENTITY;

 ENTITY circular_involute
   SUBTYPE OF (curve);
   position    : axis2_placement;
   base_radius : positive_length_measure;
 END_ENTITY;

 ENTITY clothoid
   SUBTYPE OF (curve);
     position          : axis2_placement;
     clothoid_constant : length_measure;
  END_ENTITY;

 ENTITY composite_curve
   SUBTYPE OF (bounded_curve);
   segments       : LIST [1:?] OF composite_curve_segment;
   self_intersect : LOGICAL;
 DERIVE
   n_segments     : INTEGER := SIZEOF(segments);
   closed_curve   : LOGICAL 
                  := segments[n_segments].transition <> discontinuous;
 WHERE
   WR1: ((NOT closed_curve) AND (SIZEOF(QUERY(temp <* segments |
                temp.transition = discontinuous)) = 1)) OR
            ((closed_curve) AND (SIZEOF(QUERY(temp <* segments | 
                temp.transition = discontinuous)) = 0));
 END_ENTITY;

 ENTITY composite_curve_on_surface
   SUPERTYPE OF(boundary_curve)
   SUBTYPE OF (composite_curve);

 DERIVE
   basis_surface : SET[0:2] OF surface :=
                get_basis_surface(SELF);
 WHERE
   WR1: SIZEOF(basis_surface) > 0;
   WR2: constraints_composite_curve_on_surface(SELF);
 END_ENTITY;

 ENTITY composite_curve_segment
 SUBTYPE OF (founded_item);
   transition    : transition_code;
   same_sense    : BOOLEAN;
   parent_curve  : curve;
 INVERSE
   using_curves  : BAG[1:?] OF composite_curve FOR segments;
 WHERE
   WR1 : ('GEOMETRY_SCHEMA.BOUNDED_CURVE' IN TYPEOF(parent_curve));
 END_ENTITY;

 ENTITY conic
   SUPERTYPE OF (ONEOF(circle, ellipse, hyperbola, parabola))
   SUBTYPE OF (curve);
   position: axis2_placement;
 END_ENTITY;

 ENTITY
 conical_surface
   SUBTYPE OF (elementary_surface);
   radius     : length_measure;
   semi_angle : plane_angle_measure;
 WHERE
   WR1: radius >= 0.0;
 END_ENTITY;

ENTITY curve
   SUPERTYPE OF (ONEOF(line, conic, clothoid, circular_involute, pcurve,
             surface_curve, offset_curve_2d, offset_curve_3d, curve_replica))
   SUBTYPE OF (geometric_representation_item);
END_ENTITY;
 
 ENTITY curve_bounded_surface
    SUBTYPE OF (bounded_surface);
    basis_surface    : surface;
    boundaries       : SET [1:?] OF boundary_curve;
    implicit_outer   : BOOLEAN;
  WHERE
    WR1: (NOT implicit_outer) OR
         (SIZEOF (QUERY (temp <* boundaries |
           'GEOMETRY_SCHEMA.OUTER_BOUNDARY_CURVE' IN TYPEOF(temp))) = 0);
    WR2: (NOT(implicit_outer)) OR
                ('GEOMETRY_SCHEMA.BOUNDED_SURFACE' IN TYPEOF(basis_surface));
    WR3: SIZEOF(QUERY(temp <* boundaries |
                  'GEOMETRY_SCHEMA.OUTER_BOUNDARY_CURVE' IN
                                         TYPEOF(temp))) <= 1;
    WR4: SIZEOF(QUERY(temp <* boundaries |
            (temp\composite_curve_on_surface.basis_surface [1] <>
                                         SELF.basis_surface))) = 0;
 END_ENTITY;

 ENTITY curve_replica
   SUBTYPE OF (curve);
   parent_curve   : curve;
   transformation : cartesian_transformation_operator;
 WHERE
   WR1: transformation.dim = parent_curve.dim;
   WR2: acyclic_curve_replica (SELF, parent_curve);
 END_ENTITY;

 ENTITY cylindrical_point
   SUBTYPE OF (cartesian_point);
     r     : length_measure;
     theta : plane_angle_measure;
     z     : length_measure;
   DERIVE
     SELF\cartesian_point.coordinates : LIST [1:3] OF length_measure :=
                     [r*cos(theta), r*sin(theta), z];
   WHERE
    WR1: r >= 0.0;
 END_ENTITY;

 ENTITY cylindrical_surface
   SUBTYPE OF (elementary_surface);
   radius : positive_length_measure;
 END_ENTITY;

 ENTITY  cylindrical_volume
   SUBTYPE OF (volume);
   position : axis2_placement_3d;
   radius   : positive_length_measure;
   height   : positive_length_measure;
 END_ENTITY;

 ENTITY degenerate_pcurve
   SUBTYPE OF (point);
   basis_surface:  surface;
   reference_to_curve : definitional_representation;
 WHERE
   WR1: SIZEOF(reference_to_curve\representation.items) = 1;
   WR2: 'GEOMETRY_SCHEMA.CURVE' IN TYPEOF
                    (reference_to_curve\representation.items[1]);
   WR3: reference_to_curve\representation.
                   items[1]\geometric_representation_item.dim =2;
 END_ENTITY;

 ENTITY degenerate_toroidal_surface
   SUBTYPE OF (toroidal_surface);
   select_outer : BOOLEAN;
 WHERE
  WR1: major_radius <   minor_radius;
 END_ENTITY;

 ENTITY direction
   SUBTYPE OF (geometric_representation_item);
   direction_ratios : LIST [2:3] OF REAL;
 WHERE
   WR1: SIZEOF(QUERY(tmp <* direction_ratios | tmp <> 0.0)) > 0;
 END_ENTITY;

ENTITY dupin_cyclide_surface
   SUBTYPE OF (elementary_surface);
   generalised_major_radius : positive_length_measure;
   generalised_minor_radius : positive_length_measure;
   skewness                 : length_measure;
WHERE
  WR1: skewness >= 0.0;
END_ENTITY;

 ENTITY eccentric_conical_volume
  SUBTYPE OF (volume);
   position    : axis2_placement_3d;
   semi_axis_1 : positive_length_measure;
   semi_axis_2 : positive_length_measure;
   height      : positive_length_measure;
   x_offset    : length_measure;
   y_offset    : length_measure;
   ratio       : REAL;
 WHERE
  WR1 : ratio >= 0.0;
 END_ENTITY;

 ENTITY elementary_surface
   SUPERTYPE OF (ONEOF(plane, cylindrical_surface, conical_surface,
                       spherical_surface, toroidal_surface))
   SUBTYPE OF (surface);
   position : axis2_placement_3d;
 END_ENTITY;

 ENTITY ellipse
   SUBTYPE OF (conic);
   semi_axis_1 : positive_length_measure;
   semi_axis_2 : positive_length_measure;
 END_ENTITY;

 ENTITY ellipsoid_volume
   SUBTYPE OF (volume);
     position      : axis2_placement_3d;
     semi_axis_1 : positive_length_measure;
     semi_axis_2 : positive_length_measure;
     semi_axis_3 : positive_length_measure;
 END_ENTITY;

 ENTITY evaluated_degenerate_pcurve
   SUBTYPE OF (degenerate_pcurve);
   equivalent_point : cartesian_point;
 END_ENTITY;

 ENTITY fixed_reference_swept_surface
   SUBTYPE OF (swept_surface);
      directrix       : curve;
      fixed_reference : direction;
 END_ENTITY;

  ENTITY geometric_representation_item
  SUPERTYPE OF (ONEOF(point, direction, vector, placement,
                 cartesian_transformation_operator, curve, surface,
                 edge_curve, face_surface, poly_loop, vertex_point,
                 solid_model, boolean_result, sphere, right_circular_cone,
                 right_circular_cylinder, torus, block, primitive_2d,
                 right_angular_wedge, ellipsoid, faceted_primitive,
                 rectangular_pyramid, cyclide_segment_solid, volume,
                 half_space_solid, half_space_2d,
                 shell_based_surface_model, face_based_surface_model,
                 shell_based_wireframe_model, edge_based_wireframe_model,
                 geometric_set))
  SUBTYPE OF (representation_item);
  DERIVE
    dim : dimension_count := dimension_of(SELF);
  WHERE
  WR1: SIZEOF (QUERY (using_rep <* using_representations (SELF) |
      NOT ('GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_CONTEXT' IN
      TYPEOF (using_rep.context_of_items)))) = 0;
  END_ENTITY;

 ENTITY line
   SUBTYPE OF (curve);
   pnt : cartesian_point;
   dir : vector;
 WHERE
   WR1: dir.dim  = pnt.dim;
 END_ENTITY;

 ENTITY hexahedron_volume
   SUBTYPE OF (volume);
   points  : LIST[8:8] OF cartesian_point;
  WHERE
    WR1: above_plane(points[1], points[2], points[3], points[4]) = 0.0;
    WR2: above_plane(points[5], points[8], points[7], points[6]) = 0.0;
    WR3: above_plane(points[1], points[4], points[8], points[5]) = 0.0;
    WR4: above_plane(points[4], points[3], points[7], points[8]) = 0.0;
    WR5: above_plane(points[3], points[2], points[6], points[7]) = 0.0;
    WR6: above_plane(points[1], points[5], points[6], points[2]) = 0.0;
    WR7: same_side([points[1], points[2], points[3]],
                     [points[5], points[6], points[7], points[8]]);
    WR8: same_side([points[1], points[4], points[8]],
                     [points[3], points[7], points[6], points[2]]);
    WR9:  same_side([points[1], points[2], points[5]],
                      [points[3], points[7], points[8], points[4]]);
    WR10: same_side([points[5], points[6], points[7]],
                     [points[1], points[2], points[3], points[4]]);
    WR11: same_side([points[3], points[7], points[6]],
                     [points[1], points[4], points[8], points[5]]);
    WR12: same_side([points[3], points[7], points[8]],
                      [points[1], points[5], points[6], points[2]]);
    WR13: points[1].dim = 3;
  END_ENTITY;

 ENTITY hyperbola
   SUBTYPE OF (conic);
   semi_axis      : positive_length_measure;
   semi_imag_axis : positive_length_measure;
 END_ENTITY;

 ENTITY intersection_curve
   SUBTYPE OF (surface_curve);
 WHERE
   WR1: SIZEOF(SELF\surface_curve.associated_geometry) = 2;
   WR2: associated_surface(SELF\surface_curve.associated_geometry[1]) <>
             associated_surface(SELF\surface_curve.associated_geometry[2]);
 END_ENTITY;

 ENTITY offset_curve_2d
   SUBTYPE OF (curve);
   basis_curve    : curve;
   distance       : length_measure;
   self_intersect : LOGICAL;
 WHERE
   WR1: basis_curve.dim = 2;
 END_ENTITY;

 ENTITY offset_curve_3d
   SUBTYPE OF (curve);
   basis_curve    : curve;
   distance       : length_measure;
   self_intersect : LOGICAL;
   ref_direction  : direction;
 WHERE
   WR1 : (basis_curve.dim = 3) AND (ref_direction.dim = 3);
 END_ENTITY;

 ENTITY offset_surface
   SUBTYPE OF (surface);
   basis_surface  : surface;
   distance       : length_measure;
   self_intersect : LOGICAL;
 END_ENTITY;

 ENTITY oriented_surface
   SUBTYPE OF (surface);
   orientation : BOOLEAN;
 END_ENTITY;

 ENTITY outer_boundary_curve
   SUBTYPE OF (boundary_curve);
 END_ENTITY;

 ENTITY parabola
   SUBTYPE OF (conic);
   focal_dist : length_measure;
 WHERE
   WR1: focal_dist <> 0.0;
 END_ENTITY;

 ENTITY pcurve
   SUBTYPE OF (curve);
   basis_surface      : surface;
   reference_to_curve : definitional_representation;
 WHERE
   WR1: SIZEOF(reference_to_curve\representation.items) = 1;
   WR2: 'GEOMETRY_SCHEMA.CURVE' IN TYPEOF
                    (reference_to_curve\representation.items[1]);
   WR3: reference_to_curve\representation.items[1]\
                               geometric_representation_item.dim =2;
 END_ENTITY;

 ENTITY placement
   SUPERTYPE OF (ONEOF(axis1_placement,axis2_placement_2d,axis2_placement_3d))
   SUBTYPE OF (geometric_representation_item);
   location : cartesian_point;
 END_ENTITY;

 ENTITY plane
 SUBTYPE OF (elementary_surface);
 END_ENTITY;

 ENTITY polar_point
   SUBTYPE OF (cartesian_point);
     r     : length_measure;
     theta : plane_angle_measure;
   DERIVE
     SELF\cartesian_point.coordinates : LIST [1:3] OF length_measure :=
                   [r*cos(theta), r*sin(theta)];
   WHERE
    WR1: r >= 0.0;
 END_ENTITY;

ENTITY point
   SUPERTYPE OF (ONEOF(cartesian_point, point_on_curve, point_on_surface,
                        point_in_volume, point_replica, degenerate_pcurve))
   SUBTYPE OF (geometric_representation_item);
 END_ENTITY;

 ENTITY point_in_volume
   SUBTYPE OF (point);
   basis_volume     : volume;
   point_parameter_u : parameter_value;
   point_parameter_v : parameter_value;
   point_parameter_w : parameter_value;
 END_ENTITY;

 ENTITY point_on_curve
   SUBTYPE OF (point);
   basis_curve     : curve;
   point_parameter : parameter_value;
 END_ENTITY;

 ENTITY point_on_surface
   SUBTYPE OF (point);
   basis_surface     : surface;
   point_parameter_u : parameter_value;
   point_parameter_v : parameter_value;
 END_ENTITY;

 ENTITY point_replica
   SUBTYPE OF (point);
   parent_pt      : point;
   transformation : cartesian_transformation_operator;
 WHERE
   WR1: transformation.dim = parent_pt.dim;
   WR2: acyclic_point_replica (SELF,parent_pt);
 END_ENTITY;

 ENTITY polyline
   SUBTYPE OF (bounded_curve);
   points : LIST [2:?] OF cartesian_point;
 END_ENTITY;

 ENTITY pyramid_volume
   SUBTYPE OF (volume);
   position       : axis2_placement_3d;
   xlength        : positive_length_measure;
   ylength          : positive_length_measure;
   height         : positive_length_measure;
 END_ENTITY;

 ENTITY quasi_uniform_curve
   SUBTYPE OF (b_spline_curve);
 END_ENTITY;

 ENTITY quasi_uniform_surface
   SUBTYPE OF (b_spline_surface);
 END_ENTITY;

 ENTITY quasi_uniform_volume
   SUBTYPE OF (b_spline_volume);
 END_ENTITY;

 ENTITY rational_b_spline_curve
   SUBTYPE OF (b_spline_curve);
   weights_data : LIST [2:?] OF REAL;
                                
 DERIVE
   weights           : ARRAY [0:upper_index_on_control_points] OF REAL
                               := list_to_array(weights_data,0,
                                      upper_index_on_control_points);
 WHERE
   WR1:  SIZEOF(weights_data) = SIZEOF(SELF\b_spline_curve.
                                           control_points_list);
   WR2:  curve_weights_positive(SELF);
 END_ENTITY;

 ENTITY rational_b_spline_surface
   SUBTYPE OF (b_spline_surface);
   weights_data : LIST [2:?] OF
                    LIST [2:?] OF REAL;
                                
 DERIVE
   weights       : ARRAY [0:u_upper] OF
                      ARRAY [0:v_upper] OF REAL
                 := make_array_of_array(weights_data,0,u_upper,0,v_upper);
 WHERE
   WR1: (SIZEOF(weights_data) =
                     SIZEOF(SELF\b_spline_surface.control_points_list))
           AND (SIZEOF(weights_data[1]) =
                  SIZEOF(SELF\b_spline_surface.control_points_list[1]));
   WR2: surface_weights_positive(SELF);
 END_ENTITY;

 ENTITY rational_b_spline_volume
   SUBTYPE OF (b_spline_volume);
   weights_data : LIST [2:?] OF
                   LIST [2:?] OF
                    LIST [2:?] OF REAL;
                                
 DERIVE
   weights       : ARRAY [0:u_upper] OF
                    ARRAY [0:v_upper] OF
                     ARRAY [0:w_upper] OF REAL
                 := make_array_of_array_of_array
                             (weights_data,0,u_upper,0,v_upper,0,w_upper);
 WHERE
   WR1: (SIZEOF(weights_data) =
                         SIZEOF(SELF\b_spline_volume.control_points_list))
           AND (SIZEOF(weights_data[1]) =
                     SIZEOF(SELF\b_spline_volume.control_points_list[1]))
            AND (SIZEOF(weights_data[1][1]) =
                 SIZEOF(SELF\b_spline_volume.control_points_list[1][1]));
   WR2: volume_weights_positive(SELF);
 END_ENTITY;

 ENTITY rectangular_composite_surface
   SUBTYPE OF (bounded_surface);
   segments      : LIST [1:?] OF LIST [1:?] OF surface_patch;
 DERIVE
   n_u : INTEGER := SIZEOF(segments);
   n_v : INTEGER := SIZEOF(segments[1]);
 WHERE
   WR1: SIZEOF(QUERY (s <* segments | n_v <> SIZEOF (s))) = 0;
   WR2: constraints_rectangular_composite_surface(SELF);
 END_ENTITY;

 ENTITY rectangular_trimmed_surface
   SUBTYPE OF (bounded_surface);
   basis_surface : surface;
   u1            : parameter_value;
   u2            : parameter_value;
   v1            : parameter_value;
   v2            : parameter_value;
   usense        : BOOLEAN;
   vsense        : BOOLEAN;
 WHERE
   WR1: u1 <> u2;
   WR2: v1 <> v2;
   WR3: (('GEOMETRY_SCHEMA.ELEMENTARY_SURFACE' IN TYPEOF(basis_surface))
       AND  (NOT ('GEOMETRY_SCHEMA.PLANE' IN TYPEOF(basis_surface)))) OR
      ('GEOMETRY_SCHEMA.SURFACE_OF_REVOLUTION' IN TYPEOF(basis_surface))
          OR (usense = (u2 > u1));
   WR4: (('GEOMETRY_SCHEMA.SPHERICAL_SURFACE' IN TYPEOF(basis_surface))
          OR
         ('GEOMETRY_SCHEMA.TOROIDAL_SURFACE' IN TYPEOF(basis_surface)))
          OR (vsense = (v2 > v1));
 END_ENTITY;

 ENTITY reparametrised_composite_curve_segment
   SUBTYPE OF (composite_curve_segment);
   param_length : parameter_value;
 WHERE
   WR1: param_length > 0.0;
 END_ENTITY;

 ENTITY seam_curve
   SUBTYPE OF (surface_curve);
 WHERE
   WR1: SIZEOF(SELF\surface_curve.associated_geometry) = 2;
   WR2: associated_surface(SELF\surface_curve.associated_geometry[1]) =
           associated_surface(SELF\surface_curve.associated_geometry[2]);
   WR3: 'GEOMETRY_SCHEMA.PCURVE' IN
           TYPEOF(SELF\surface_curve.associated_geometry[1]);
   WR4: 'GEOMETRY_SCHEMA.PCURVE' IN
            TYPEOF(SELF\surface_curve.associated_geometry[2]);
 END_ENTITY;

 ENTITY spherical_point
   SUBTYPE OF (cartesian_point);
     r     : length_measure;
     theta : plane_angle_measure;
     phi   : plane_angle_measure;
   DERIVE
     SELF\cartesian_point.coordinates : LIST [1:3] OF length_measure :=
       [r*sin(theta)*cos(phi), r*sin(theta)*sin(phi), r*cos(theta)];
   WHERE
    WR1: r >= 0.0;
 END_ENTITY;

 ENTITY spherical_surface
   SUBTYPE OF (elementary_surface);
   radius   : positive_length_measure;
 END_ENTITY;

 ENTITY spherical_volume
   SUBTYPE OF (volume);
   position : axis2_placement_3d;
   radius   : positive_length_measure;
 END_ENTITY;

 ENTITY surface
   SUPERTYPE OF (ONEOF(elementary_surface, swept_surface, bounded_surface,
                       offset_surface, surface_replica))
   SUBTYPE OF (geometric_representation_item);
 END_ENTITY;

 ENTITY surface_curve
   SUPERTYPE OF (ONEOF(intersection_curve, seam_curve) ANDOR
                                            bounded_surface_curve)
   SUBTYPE OF (curve);
   curve_3d              : curve;
   associated_geometry   : LIST[1:2] OF pcurve_or_surface;
   master_representation : preferred_surface_curve_representation;
 DERIVE
   basis_surface         : SET[1:2] OF surface
                         := get_basis_surface(SELF);
 WHERE
   WR1: curve_3d.dim = 3;
   WR2: ('GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(associated_geometry[1])) OR
                        (master_representation <> pcurve_s1);
   WR3: ('GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(associated_geometry[2])) OR
                        (master_representation <> pcurve_s2);
   WR4: NOT ('GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(curve_3d));
 END_ENTITY;

 ENTITY surface_curve_swept_surface
   SUBTYPE OF (swept_surface);
      directrix  : curve;
      reference_surface : surface;
   WHERE
     WR1 : (NOT ('GEOMETRY_SCHEMA.SURFACE_CURVE' IN TYPEOF(directrix))) OR
          (reference_surface IN (directrix\surface_curve.basis_surface));
 END_ENTITY;

 ENTITY surface_of_linear_extrusion
   SUBTYPE OF (swept_surface);
   extrusion_axis      : vector;
 END_ENTITY;

 ENTITY surface_of_revolution
  SUBTYPE OF (swept_surface);
   axis_position       : axis1_placement;
 DERIVE
   axis_line : line := representation_item('')||
                     geometric_representation_item()|| curve()||
                     line(axis_position.location, representation_item('')||
                     geometric_representation_item()||
                     vector(axis_position.z, 1.0));
 END_ENTITY;

 ENTITY surface_patch
 SUBTYPE OF (founded_item);
   parent_surface : bounded_surface;
   u_transition   : transition_code;
   v_transition   : transition_code;
   u_sense        : BOOLEAN;
   v_sense        : BOOLEAN;
 INVERSE
   using_surfaces : BAG[1:?] OF rectangular_composite_surface FOR segments;
 WHERE
   WR1: (NOT ('GEOMETRY_SCHEMA.CURVE_BOUNDED_SURFACE' 
                 IN TYPEOF(parent_surface)));
 END_ENTITY;

 ENTITY surface_replica
   SUBTYPE OF (surface);
   parent_surface : surface;
   transformation : cartesian_transformation_operator_3d;
 WHERE
   WR1: acyclic_surface_replica(SELF, parent_surface);
 END_ENTITY;

 ENTITY swept_surface
   SUPERTYPE OF (ONEOF(surface_of_linear_extrusion, surface_of_revolution,
                 surface_curve_swept_surface, fixed_reference_swept_surface))
   SUBTYPE OF (surface);
   swept_curve : curve;
 END_ENTITY;

 ENTITY tetrahedron_volume
   SUBTYPE OF (volume);
     point_1 : cartesian_point ;
     point_2 : cartesian_point ;
     point_3 : cartesian_point ;
     point_4 : cartesian_point ;
  WHERE
    WR1: point_1.dim = 3 ;
    WR2: above_plane(point_1, point_2, point_3, point_4) <> 0.0 ;
  END_ENTITY;

 ENTITY toroidal_volume
   SUBTYPE OF (volume);
   position     : axis2_placement_3d;
   major_radius : positive_length_measure;
   minor_radius : positive_length_measure;
 WHERE
   WR1 : minor_radius < major_radius;
 END_ENTITY;

 ENTITY trimmed_curve
   SUBTYPE OF (bounded_curve);
   basis_curve           : curve;
   trim_1                : SET[1:2] OF trimming_select;
   trim_2                : SET[1:2] OF trimming_select;
   sense_agreement       : BOOLEAN;
   master_representation : trimming_preference;
 WHERE
   WR1: (HIINDEX(trim_1) = 1) OR (TYPEOF(trim_1[1]) <> TYPEOF(trim_1[2]));
   WR2: (HIINDEX(trim_2) = 1) OR (TYPEOF(trim_2[1]) <> TYPEOF(trim_2[2]));
 END_ENTITY;

 ENTITY toroidal_surface
   SUBTYPE OF (elementary_surface);
   major_radius : positive_length_measure;
   minor_radius : positive_length_measure;
 END_ENTITY;

 ENTITY uniform_curve
   SUBTYPE OF (b_spline_curve);
 END_ENTITY;

 ENTITY uniform_surface
   SUBTYPE OF (b_spline_surface);
 END_ENTITY;

 ENTITY uniform_volume
   SUBTYPE OF (b_spline_volume);
 END_ENTITY;

 ENTITY vector
   SUBTYPE OF (geometric_representation_item);
   orientation : direction;
   magnitude   : length_measure;
 WHERE
   WR1 : magnitude >= 0.0;
 END_ENTITY;

 ENTITY volume
   SUPERTYPE OF (ONEOF(block_volume, wedge_volume, spherical_volume,
                    cylindrical_volume, eccentric_conical_volume,
                    toroidal_volume, pyramid_volume, b_spline_volume,
                    ellipsoid_volume, tetrahedron_volume, hexahedron_volume))
   SUBTYPE OF (geometric_representation_item);
   WHERE
     WR1 : SELF\geometric_representation_item.dim = 3;
 END_ENTITY;

  ENTITY wedge_volume
   SUBTYPE OF (volume);
   position : axis2_placement_3d;
   x        : positive_length_measure;
   y        : positive_length_measure;
   z        : positive_length_measure;
   ltx      : length_measure;
 WHERE
   WR1: ((0.0 <= ltx) AND (ltx < x));
 END_ENTITY;

RULE compatible_dimension FOR 
  (cartesian_point,
  direction,
  representation_context,
  geometric_representation_context);
WHERE

  -- ensure that the count of coordinates of each cartesian_point
  -- matches the coordinate_space_dimension of each geometric_context in
  -- which it is geometrically founded
  WR1: SIZEOF(QUERY(x <* cartesian_point| SIZEOF(QUERY
       (y <* geometric_representation_context | item_in_context(x,y) AND
       (HIINDEX(x.coordinates) <> y.coordinate_space_dimension))) > 0 )) =0;

  -- ensure that the count of direction_ratios of each direction
  -- matches the coordinate_space_dimension of each geometric_context in
  -- which it is geometrically founded
  WR2: SIZEOF(QUERY(x <* direction | SIZEOF( QUERY
       (y <* geometric_representation_context | item_in_context(x,y) AND
       (HIINDEX(x.direction_ratios) <> y.coordinate_space_dimension)))
       > 0 )) = 0;
END_RULE;

 FUNCTION above_plane(p1, p2, p3, p4 : cartesian_point) : REAL;
   LOCAL
     dir2, dir3, dir4 : direction :=
                 dummy_gri || direction([1.0, 0.0, 0.0]);
     val, mag         : REAL;
   END_LOCAL;

   IF (p1.dim <> 3) THEN
     RETURN(?);
   END_IF;
   REPEAT i := 1 TO 3;
     dir2.direction_ratios[i] := p2.coordinates[i] - p1.coordinates[i];
     dir3.direction_ratios[i] := p3.coordinates[i] - p1.coordinates[i];
     dir4.direction_ratios[i] := p4.coordinates[i] - p1.coordinates[i];
     mag := dir4.direction_ratios[i]*dir4.direction_ratios[i];
  END_REPEAT;
  mag := sqrt(mag);
  val := mag*dot_product(dir4, cross_product(dir2, dir3).orientation);
  RETURN(val);
 END_FUNCTION;

 FUNCTION acyclic_curve_replica(rep : curve_replica; parent : curve)
                                              : BOOLEAN;
   IF NOT (('GEOMETRY_SCHEMA.CURVE_REPLICA') IN TYPEOF(parent)) THEN
      RETURN (TRUE);
   END_IF;
 (* Return TRUE if the parent is not of type curve_replica *)
   IF (parent :=: rep) THEN
      RETURN (FALSE);
  (* Return FALSE if the parent is the same curve_replica, otherwise,
   call function again with the parents own parent_curve.     *)
    ELSE
    RETURN(acyclic_curve_replica(rep,
               parent\curve_replica.parent_curve));
    END_IF;
  END_FUNCTION;

 FUNCTION acyclic_point_replica(rep : point_replica; parent : point)
                                              : BOOLEAN;
   IF NOT (('GEOMETRY_SCHEMA.POINT_REPLICA') IN TYPEOF(parent)) THEN
      RETURN (TRUE);
   END_IF;
 (* Return TRUE if the parent is not of type point_replica *)
   IF (parent :=: rep) THEN
      RETURN (FALSE);
  (* Return FALSE if the parent is the same point_replica, otherwise,
   call function again with the parents own parent_pt.     *)
    ELSE RETURN(acyclic_point_replica(rep, parent\point_replica.parent_pt));
    END_IF;
  END_FUNCTION;

 FUNCTION acyclic_surface_replica(rep : surface_replica; parent : surface)
                                              : BOOLEAN;
   IF NOT (('GEOMETRY_SCHEMA.SURFACE_REPLICA') IN TYPEOF(parent)) THEN
      RETURN (TRUE);
   END_IF;
 (* Return TRUE if the parent is not of type surface_replica *)
   IF (parent :=: rep) THEN
      RETURN (FALSE);
  (* Return FALSE if the parent is the same surface_replica, otherwise,
   call function again with the parents own parent_surface.     *)
    ELSE RETURN(acyclic_surface_replica(rep,
                   parent\surface_replica.parent_surface));
    END_IF;
  END_FUNCTION;

 FUNCTION associated_surface(arg : pcurve_or_surface) : surface;
   LOCAL
     surf : surface;
   END_LOCAL;
   
   IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(arg) THEN
     surf := arg.basis_surface;
   ELSE
     surf := arg;
   END_IF;
   RETURN(surf);
 END_FUNCTION;

FUNCTION base_axis(dim : INTEGER; axis1, axis2, axis3 : direction) :
                                                 LIST [2:3] OF 
direction;
  LOCAL
    u      : LIST [2:3] OF direction;
    factor : REAL;
    d1, d2 : direction;
  END_LOCAL;
  
  IF (dim = 3) THEN
    d1 := NVL(normalise(axis3),  dummy_gri || direction([0.0,0.0,1.0]));
    d2 := first_proj_axis(d1,axis1);
    u := [d2, second_proj_axis(d1,d2,axis2), d1];
  ELSE
     IF EXISTS(axis1) THEN
      d1 := normalise(axis1);
      u := [d1, orthogonal_complement(d1)];
      IF EXISTS(axis2) THEN
        factor := dot_product(axis2,u[2]);
        IF (factor < 0.0) THEN
          u[2].direction_ratios[1] := -u[2].direction_ratios[1];
          u[2].direction_ratios[2] := -u[2].direction_ratios[2];
        END_IF;
      END_IF;
    ELSE
      IF EXISTS(axis2) THEN
        d1 := normalise(axis2);
        u := [orthogonal_complement(d1), d1]; 
        u[1].direction_ratios[1] := -u[1].direction_ratios[1];
        u[1].direction_ratios[2] := -u[1].direction_ratios[2];
      ELSE
        u := [dummy_gri || direction([1.0, 0.0]), dummy_gri ||
                                                direction([0.0, 1.0])];
      END_IF;
    END_IF;
  END_IF;
  RETURN(u);
END_FUNCTION;

 FUNCTION build_2axes(ref_direction : direction) : LIST [2:2] OF direction;
   LOCAL
     d : direction := NVL(normalise(ref_direction),
                          dummy_gri || direction([1.0,0.0]));
   END_LOCAL;

   RETURN([d, orthogonal_complement(d)]);
 END_FUNCTION;

 FUNCTION build_axes(axis, ref_direction : direction) :
                                          LIST [3:3] OF direction;
   LOCAL
     d1, d2 : direction;
   END_LOCAL;
  d1 := NVL(normalise(axis), dummy_gri || direction([0.0,0.0,1.0]));
  d2 := first_proj_axis(d1, ref_direction);
  RETURN([d2, normalise(cross_product(d1,d2)).orientation, d1]);
 END_FUNCTION;

 FUNCTION constraints_composite_curve_on_surface
               (c: composite_curve_on_surface) : BOOLEAN;
   LOCAL
     n_segments : INTEGER := SIZEOF(c.segments);
   END_LOCAL;
        
   REPEAT k := 1 TO n_segments;
     IF (NOT('GEOMETRY_SCHEMA.PCURVE' IN 
           TYPEOF(c\composite_curve.segments[k].parent_curve))) AND
        (NOT('GEOMETRY_SCHEMA.SURFACE_CURVE' IN 
           TYPEOF(c\composite_curve.segments[k].parent_curve))) AND
        (NOT('GEOMETRY_SCHEMA.COMPOSITE_CURVE_ON_SURFACE' IN
           TYPEOF(c\composite_curve.segments[k].parent_curve)))  THEN
       RETURN (FALSE);
     END_IF;
   END_REPEAT;
   RETURN(TRUE);
 END_FUNCTION;

 FUNCTION constraints_param_b_spline(degree, up_knots, up_cp : INTEGER;
                                               knot_mult : LIST OF INTEGER;
                        knots : LIST OF parameter_value) : BOOLEAN;
   LOCAL
     result  : BOOLEAN := TRUE;
     k, sum  : INTEGER;
   END_LOCAL;
   
   (* Find sum of knot multiplicities. *)
   sum := knot_mult[1];
   
   REPEAT i := 2 TO up_knots;
     sum := sum + knot_mult[i];
   END_REPEAT;
   
   (* Check limits holding for all B-spline parametrisations *)
   IF (degree < 1) OR (up_knots < 2) OR (up_cp < degree) OR
         (sum <> (degree + up_cp + 2)) THEN
     result := FALSE;
     RETURN(result);
   END_IF;
   
   k := knot_mult[1];
   
   IF (k < 1) OR (k > degree + 1) THEN
     result := FALSE;
     RETURN(result);
   END_IF;
      
   REPEAT i := 2 TO up_knots;
     IF (knot_mult[i] < 1) OR (knots[i] <= knots[i-1]) THEN
       result := FALSE;
       RETURN(result);
     END_IF;
        
     k := knot_mult[i];
     
     IF (i < up_knots) AND (k > degree) THEN
       result := FALSE;
       RETURN(result);
     END_IF;
        
     IF (i = up_knots) AND (k > degree + 1) THEN
       result := FALSE;
       RETURN(result);
     END_IF;
   END_REPEAT;
   RETURN(result);
 END_FUNCTION;

   FUNCTION constraints_rectangular_composite_surface
           (s : rectangular_composite_surface) : BOOLEAN;

   (* Check the surface types *)
     REPEAT i := 1 TO s.n_u;
       REPEAT j := 1 TO s.n_v;
         IF NOT (('GEOMETRY_SCHEMA.B_SPLINE_SURFACE' IN TYPEOF
                    (s.segments[i][j].parent_surface)) OR
                 ('GEOMETRY_SCHEMA.RECTANGULAR_TRIMMED_SURFACE' IN TYPEOF
                    (s.segments[i][j].parent_surface))) THEN
           RETURN(FALSE);
       END_IF;
     END_REPEAT;
   END_REPEAT;

   (* Check the transition codes, omitting the last row or column *)
   REPEAT i := 1 TO s.n_u-1;
     REPEAT j := 1 TO s.n_v;
       IF s.segments[i][j].u_transition = discontinuous THEN
         RETURN(FALSE);
       END_IF;
     END_REPEAT;
   END_REPEAT;
   
   REPEAT i := 1 TO s.n_u;
     REPEAT j := 1 TO s.n_v-1;
       IF s.segments[i][j].v_transition = discontinuous THEN
         RETURN(FALSE);
       END_IF;
     END_REPEAT;
   END_REPEAT;
   RETURN(TRUE);
 END_FUNCTION;

FUNCTION cross_product (arg1, arg2 : direction) : vector;
  LOCAL
    mag    : REAL;
    res    : direction;
    v1,v2  : LIST[3:3] OF REAL;
    result : vector;
  END_LOCAL;
  
  IF ( NOT EXISTS (arg1) OR (arg1.dim = 2)) OR
     ( NOT EXISTS (arg2) OR (arg2.dim = 2)) THEN
    RETURN(?);
  ELSE
    BEGIN
      v1  := normalise(arg1).direction_ratios;
      v2  := normalise(arg2).direction_ratios;
      res := dummy_gri || direction([(v1[2]*v2[3] - v1[3]*v2[2]),
            (v1[3]*v2[1] - v1[1]*v2[3]), (v1[1]*v2[2] - v1[2]*v2[1])]);
      mag := 0.0;
      REPEAT i := 1 TO 3;
        mag := mag + res.direction_ratios[i]*res.direction_ratios[i];
      END_REPEAT;
      IF (mag > 0.0) THEN
        result := dummy_gri || vector(res, SQRT(mag));
      ELSE
        result := dummy_gri || vector(arg1, 0.0);
      END_IF;
      RETURN(result);
    END;
  END_IF;
END_FUNCTION;

 FUNCTION curve_weights_positive(b: rational_b_spline_curve) : BOOLEAN;
   LOCAL
     result : BOOLEAN := TRUE;
   END_LOCAL;

   REPEAT i := 0 TO b.upper_index_on_control_points;
     IF b.weights[i] <= 0.0  THEN
       result := FALSE;
       RETURN(result);
     END_IF;
   END_REPEAT;
   RETURN(result);
 END_FUNCTION;

 FUNCTION default_b_spline_curve_weights(up_cp : INTEGER)
                                          : ARRAY [0:up_cp] OF REAL;
   RETURN([1:up_cp + 1]);
 END_FUNCTION;

 FUNCTION default_b_spline_surface_weights(u_upper, v_upper: INTEGER)
                                      : ARRAY [0:u_upper] OF 
                                        ARRAY [0:v_upper] OF REAL;
    RETURN([[1:v_upper + 1]:u_upper +1]);
 END_FUNCTION;

 FUNCTION default_b_spline_knot_mult(degree, up_knots : INTEGER;
                                          uniform : knot_type) 
                                                  : LIST [2:?] OF INTEGER;
   LOCAL
     knot_mult : LIST [1:up_knots] OF INTEGER;
   END_LOCAL;
        
   IF uniform = uniform_knots THEN
     knot_mult := [1:up_knots];
   ELSE
     IF uniform = quasi_uniform_knots THEN
       knot_mult := [1:up_knots];
       knot_mult[1] := degree + 1;
       knot_mult[up_knots] := degree + 1;
     ELSE
       IF uniform = piecewise_bezier_knots THEN
         knot_mult := [degree:up_knots];
         knot_mult[1] := degree + 1;
         knot_mult[up_knots] := degree + 1;
       ELSE
         knot_mult := [0:up_knots];
       END_IF;
     END_IF;
   END_IF;
   RETURN(knot_mult);
 END_FUNCTION;

 FUNCTION default_b_spline_knots(degree,up_knots : INTEGER;
                              uniform : knot_type)
                                      : LIST [2:?] OF parameter_value;
  LOCAL
    knots  : LIST [1:up_knots] OF parameter_value := [0:up_knots];
    ishift : INTEGER := 1;
  END_LOCAL;

  IF (uniform = uniform_knots) THEN
     ishift := degree + 1;
  END_if;
  IF (uniform = uniform_knots) OR 
     (uniform = quasi_uniform_knots) OR
     (uniform = piecewise_bezier_knots) THEN
    
    REPEAT i := 1 TO up_knots;
      knots[i] := i - ishift;
    END_REPEAT;
  END_IF;
  RETURN(knots);
 END_FUNCTION;

FUNCTION dimension_of(item : geometric_representation_item) :
  dimension_count;
  LOCAL
    x   : SET OF representation;
    y   : representation_context;
    dim : dimension_count;
  END_LOCAL;
  -- For cartesian_point, direction, or vector dimension is determined by
  -- counting components.
    IF 'GEOMETRY_SCHEMA.CARTESIAN_POINT' IN TYPEOF(item) THEN
       dim := SIZEOF(item\cartesian_point.coordinates);
       RETURN(dim);
    END_IF;
    IF 'GEOMETRY_SCHEMA.DIRECTION' IN TYPEOF(item) THEN
       dim := SIZEOF(item\direction.direction_ratios);
       RETURN(dim);
    END_IF;
    IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(item) THEN
       dim := SIZEOF(item\vector.orientation\direction.direction_ratios);
       RETURN(dim);
    END_IF;
  -- For all other types of geometric_representation_item dim is obtained
  -- via context.
  -- Find the set of representation in which the item is used. 

  x := using_representations(item);

  -- Determines the dimension_count of the 
  -- geometric_representation_context. Note that the 
  -- RULE compatible_dimension ensures that the context_of_items
  -- is of type geometric_representation_context and has
  -- the same dimension_count for all values of x.
  -- The SET x is non-empty since this is required by WR1 of
  -- representation_item.
    y := x[1].context_of_items;
    dim := y\geometric_representation_context.coordinate_space_dimension;
    RETURN (dim);

END_FUNCTION;

 FUNCTION dot_product(arg1, arg2 : direction) : REAL;
   LOCAL
     scalar : REAL;
     vec1, vec2: direction;
     ndim : INTEGER;
   END_LOCAL;
   
   IF NOT EXISTS (arg1) OR NOT EXISTS (arg2) THEN
     scalar := ?;
     (* When function is called with invalid data an indeterminate result
     is returned *)
   ELSE
     IF (arg1.dim <> arg2.dim) THEN
       scalar := ?;
     (* When function is called with invalid data an indeterminate result
     is returned *)
     ELSE
       BEGIN
         vec1   := normalise(arg1);
         vec2   := normalise(arg2);
         ndim   := arg1.dim;
         scalar := 0.0;
         REPEAT  i := 1 TO ndim;
           scalar := scalar +
                       vec1.direction_ratios[i]*vec2.direction_ratios[i];
         END_REPEAT;
       END;
     END_IF;
   END_IF;
   RETURN (scalar);
 END_FUNCTION;

FUNCTION first_proj_axis(z_axis, arg : direction) : direction;
  LOCAL
    x_axis : direction;
    v      : direction;
    z      : direction;
    x_vec  : vector;
  END_LOCAL;
  
  IF (NOT EXISTS(z_axis)) THEN
    RETURN (?) ;
  ELSE
    z := normalise(z_axis);
    IF NOT EXISTS(arg) THEN
      IF ((z.direction_ratios <> [1.0,0.0,0.0]) AND
          (z.direction_ratios <> [-1.0,0.0,0.0]))  THEN
        v :=  dummy_gri || direction([1.0,0.0,0.0]);
      ELSE
        v := dummy_gri || direction([0.0,1.0,0.0]);
      END_IF;
    ELSE
      IF  (arg.dim <> 3) THEN
        RETURN (?) ;
      END_IF;
      IF ((cross_product(arg,z).magnitude) = 0.0) THEN
        RETURN (?);
      ELSE
        v := normalise(arg);
      END_IF;
    END_IF;
    x_vec := scalar_times_vector(dot_product(v, z), z);
    x_axis := vector_difference(v, x_vec).orientation;
    x_axis := normalise(x_axis);
  END_IF;
  RETURN(x_axis);
END_FUNCTION;

FUNCTION get_basis_surface (c : curve_on_surface) : SET[0:2] OF surface;
  LOCAL
    surfs  : SET[0:2] OF surface;
    n      : INTEGER;
  END_LOCAL;
  surfs := [];
  IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF (c) THEN
    surfs := [c\pcurve.basis_surface];
  ELSE
    IF 'GEOMETRY_SCHEMA.SURFACE_CURVE' IN TYPEOF (c) THEN
      n := SIZEOF(c\surface_curve.associated_geometry);
      REPEAT i := 1 TO n;
      surfs := surfs +
                associated_surface(c\surface_curve.associated_geometry[i]);
      END_REPEAT;
    END_IF;
  END_IF;
  IF 'GEOMETRY_SCHEMA.COMPOSITE_CURVE_ON_SURFACE' IN TYPEOF (c) THEN
   (* For a composite_curve_on_surface the basis_surface is the intersection
    of the basis_surfaces of all the segments. *)
     n := SIZEOF(c\composite_curve.segments);
     surfs := get_basis_surface(
                     c\composite_curve.segments[1].parent_curve);
     IF n > 1 THEN
       REPEAT i := 2 TO n;
         surfs := surfs * get_basis_surface(
                  c\composite_curve.segments[i].parent_curve);
       END_REPEAT;
     END_IF;

  END_IF;
  RETURN(surfs);
END_FUNCTION;

 FUNCTION list_to_array(lis : LIST [0:?] OF GENERIC : T;
                      low,u : INTEGER) : ARRAY [low:u] OF GENERIC : T;
   LOCAL
     n   : INTEGER;
     res : ARRAY [low:u] OF GENERIC : T;
   END_LOCAL;
      
   n := SIZEOF(lis);
   IF (n <> (u-low +1)) THEN
     RETURN(?);
   ELSE
     res := [lis[1] : n];
     REPEAT i := 2 TO n;
       res[low+i-1] := lis[i];
     END_REPEAT;
     RETURN(res);
   END_IF;
 END_FUNCTION;

 FUNCTION make_array_of_array(lis : LIST[1:?] OF LIST [1:?] OF GENERIC : T;
                              low1, u1, low2, u2 : INTEGER):
                 ARRAY [low1:u1] OF ARRAY [low2:u2] OF GENERIC : T;
   LOCAL
     res   : ARRAY[low1:u1] OF ARRAY [low2:u2] OF GENERIC : T;
   END_LOCAL;

(* Check input dimensions for consistency *)
   IF (u1-low1+1) <> SIZEOF(lis) THEN
     RETURN (?);
   END_IF;
   IF (u2 - low2 + 1 ) <> SIZEOF(lis[1]) THEN
     RETURN (?) ;
   END_IF;
(* Initialise res with values from lis[1] *)
   res := [list_to_array(lis[1], low2, u2) : (u1-low1 + 1)];
   REPEAT i := 2 TO HIINDEX(lis);
     IF (u2-low2+1) <> SIZEOF(lis[i]) THEN
       RETURN (?);
     END_IF;     
     res[low1+i-1] := list_to_array(lis[i], low2, u2);
   END_REPEAT; 
   
   RETURN (res);
 END_FUNCTION;

 FUNCTION make_array_of_array_of_array(lis : LIST[1:?] OF
              LIST [1:?] OF LIST [1:?] OF GENERIC : T;
              low1, u1, low2, u2, low3, u3 : INTEGER):
      ARRAY[low1:u1] OF ARRAY[low2:u2] OF ARRAY[low3:u3] OF GENERIC : T;
 LOCAL 
   res   : ARRAY[low1:u1] OF ARRAY [low2:u2] OF
             ARRAY[low3:u3] OF GENERIC : T;
 END_LOCAL;                

(* Check input dimensions for consistency *)
   IF (u1-low1+1) <> SIZEOF(lis) THEN
     RETURN (?);
   END_IF;
   IF (u2-low2+1) <> SIZEOF(lis[1]) THEN
     RETURN (?);
   END_IF;
(* Initialise res with values from lis[1] *)
   res := [make_array_of_array(lis[1], low2, u2, low3, u3) : (u1-low1 + 1)];
   REPEAT i := 2 TO HIINDEX(lis);
     IF (u2-low2+1) <> SIZEOF(lis[i]) THEN
       RETURN (?);
     END_IF;  
     res[low1+i-1] := make_array_of_array(lis[i], low2, u2, low3, u3);
   END_REPEAT; 
   RETURN (res);
 END_FUNCTION;

 FUNCTION normalise (arg : vector_or_direction) : vector_or_direction;
   LOCAL
     ndim   : INTEGER;
     v      : direction;
     result : vector_or_direction;
     vec    : vector;
     mag    : REAL;
   END_LOCAL;
   
   IF NOT EXISTS (arg) THEN
     result := ?;
 (* When function is called with invalid data a NULL result is returned *)
   ELSE
     ndim := arg.dim;
     IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg) THEN
       BEGIN
             v := dummy_gri || direction(arg.orientation.direction_ratios);
         IF arg.magnitude = 0.0 THEN
           RETURN(?);
         ELSE
          vec := dummy_gri || vector (v, 1.0);
         END_IF;
       END;
     ELSE
       v := dummy_gri || direction (arg.direction_ratios);
     END_IF;
     mag := 0.0;
     REPEAT  i := 1 TO ndim;
       mag := mag + v.direction_ratios[i]*v.direction_ratios[i];
     END_REPEAT;
     IF mag > 0.0 THEN
       mag := SQRT(mag);
       REPEAT  i := 1 TO ndim;
         v.direction_ratios[i] := v.direction_ratios[i]/mag;
       END_REPEAT;
       IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg) THEN
         vec.orientation := v;
         result := vec;
       ELSE
         result := v;
       END_IF;
     ELSE
       RETURN(?);
     END_IF;
   END_IF;
   RETURN (result);
 END_FUNCTION;

 FUNCTION orthogonal_complement(vec : direction) : direction;
   LOCAL
     result :  direction ;
   END_LOCAL;

   IF (vec.dim <> 2) OR NOT EXISTS (vec) THEN
     RETURN(?);
   ELSE
     result := dummy_gri || direction([-vec.direction_ratios[2],
                                          vec.direction_ratios[1]]);
     RETURN(result);
   END_IF;
 END_FUNCTION;

 FUNCTION same_side(plane_pts : LIST [3:3] of cartesian_point;
                    test_points : LIST [2:?] of cartesian_point) : BOOLEAN;
   LOCAL
     val1, val2 : REAL;
     n          : INTEGER;
   END_LOCAL;

   IF (plane_pts[1].dim = 2) OR (test_points[1].dim = 2) THEN
     RETURN(?);
   END_IF;
   n := SIZEOF(test_points);
   val1 := above_plane(plane_pts[1], plane_pts[2], plane_pts[3],
                       test_points[1] );
   REPEAT i := 2 TO n;
     val2 := above_plane(plane_pts[1], plane_pts[2], plane_pts[3],
                       test_points[i] );
     IF (val1*val2 <= 0.0) THEN
       RETURN(FALSE);
     END_IF;
   END_REPEAT;
   RETURN(TRUE);
 END_FUNCTION;

 FUNCTION scalar_times_vector (scalar : REAL; vec : vector_or_direction)
                                      : vector;
   LOCAL
     v      : direction;
     mag    : REAL;
     result : vector;
   END_LOCAL;

   IF NOT EXISTS (scalar) OR NOT EXISTS (vec) THEN
     RETURN (?) ;
    ELSE
     IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF (vec) THEN
       v   := dummy_gri || direction(vec.orientation.direction_ratios);
       mag := scalar * vec.magnitude;
     ELSE
       v   := dummy_gri || direction(vec.direction_ratios);
       mag := scalar;
     END_IF;
     IF (mag < 0.0 ) THEN
       REPEAT i := 1 TO SIZEOF(v.direction_ratios);
         v.direction_ratios[i] := -v.direction_ratios[i];
       END_REPEAT;
       mag := -mag;
     END_IF;
     result := dummy_gri || vector(normalise(v), mag);
   END_IF;
   RETURN (result);
 END_FUNCTION;

 FUNCTION second_proj_axis(z_axis, x_axis, arg: direction) : direction;
   LOCAL
     y_axis : vector;
     v      : direction;
     temp   : vector;
   END_LOCAL;
   
   IF NOT EXISTS(arg) THEN
     v := dummy_gri || direction([0.0,1.0,0.0]);
   ELSE
     v := arg;
   END_IF;
   
   temp   := scalar_times_vector(dot_product(v, z_axis), z_axis);
   y_axis := vector_difference(v, temp);
   temp   := scalar_times_vector(dot_product(v, x_axis), x_axis);
   y_axis := vector_difference(y_axis, temp);
   y_axis := normalise(y_axis);
   RETURN(y_axis.orientation);
 END_FUNCTION;

 FUNCTION surface_weights_positive(b: rational_b_spline_surface) : BOOLEAN;
   LOCAL
     result        : BOOLEAN := TRUE;
   END_LOCAL;
   
   REPEAT i := 0 TO b.u_upper;
     REPEAT j := 0 TO b.v_upper;
       IF (b.weights[i][j] <= 0.0)  THEN
         result := FALSE;
         RETURN(result);
       END_IF;
     END_REPEAT;
   END_REPEAT;
   RETURN(result);
 END_FUNCTION;

 FUNCTION vector_difference(arg1, arg2 : vector_or_direction) : vector;
   LOCAL
     result          : vector;
     res, vec1, vec2 : direction;
     mag, mag1, mag2 : REAL;
     ndim            : INTEGER;
   END_LOCAL;

   IF ((NOT EXISTS (arg1)) OR (NOT EXISTS (arg2))) OR (arg1.dim <> arg2.dim)
       THEN
     RETURN (?) ;
    ELSE
     BEGIN
       IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg1) THEN
         mag1 := arg1.magnitude;
         vec1 := arg1.orientation;
       ELSE
         mag1 := 1.0;
         vec1 := arg1;
       END_IF;
       IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg2) THEN
         mag2 := arg2.magnitude;
         vec2 := arg2.orientation;
       ELSE
         mag2 := 1.0;
         vec2 := arg2;
       END_IF;
       vec1 := normalise (vec1);
       vec2 := normalise (vec2);
       ndim := SIZEOF(vec1.direction_ratios);
       mag := 0.0;
       res := dummy_gri || direction(vec1.direction_ratios);
       REPEAT i := 1 TO ndim;
         res.direction_ratios[i] := mag1*vec1.direction_ratios[i] +
                                     mag2*vec2.direction_ratios[i];
         mag := mag + (res.direction_ratios[i]*res.direction_ratios[i]);
       END_REPEAT;
       IF (mag > 0.0 ) THEN
       result := dummy_gri || vector( res, SQRT(mag));
       ELSE
         result := dummy_gri || vector( vec1,  0.0);
       END_IF;
     END;
   END_IF;
   RETURN (result);
 END_FUNCTION;

 FUNCTION vector_sum(arg1, arg2 : vector_or_direction) : vector;
   LOCAL
     result          : vector;
     res, vec1, vec2 : direction;
     mag, mag1, mag2 : REAL;
     ndim            : INTEGER;
   END_LOCAL;

   IF ((NOT EXISTS (arg1)) OR (NOT EXISTS (arg2))) OR (arg1.dim <> arg2.dim)
       THEN
     RETURN (?) ;

   ELSE
     BEGIN
       IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg1) THEN
         mag1 := arg1.magnitude;
         vec1 := arg1.orientation;
       ELSE
         mag1 := 1.0;
         vec1 := arg1;
       END_IF;
       IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg2) THEN
         mag2 := arg2.magnitude;
         vec2 := arg2.orientation;
       ELSE
         mag2 := 1.0;
         vec2 := arg2;
       END_IF;
       vec1 := normalise (vec1);
       vec2 := normalise (vec2);
       ndim := SIZEOF(vec1.direction_ratios);
       mag := 0.0;
       res := dummy_gri || direction(vec1.direction_ratios);
       REPEAT i := 1 TO ndim;
         res.direction_ratios[i] := mag1*vec1.direction_ratios[i] +
                                      mag2*vec2.direction_ratios[i];
         mag := mag + (res.direction_ratios[i]*res.direction_ratios[i]);
       END_REPEAT;
       IF (mag > 0.0 ) THEN
       result := dummy_gri || vector( res, SQRT(mag));
       ELSE
         result := dummy_gri || vector( vec1,  0.0);
       END_IF;
     END;
   END_IF;
   RETURN (result);
 END_FUNCTION;

 FUNCTION volume_weights_positive(b: rational_b_spline_volume): BOOLEAN;
     LOCAL
       result   : BOOLEAN := TRUE;
     END_LOCAL;

     REPEAT i := 0 TO b.u_upper;
       REPEAT j := 0 TO b.v_upper;
         REPEAT k := 0 TO b.w_upper;
           IF (b.weights[i][j][k] <= 0.0)  THEN
             result := FALSE;
             RETURN(result);
           END_IF;
         END_REPEAT;
       END_REPEAT;
     END_REPEAT;
     RETURN(result);
   END_FUNCTION;

 END_SCHEMA; -- end GEOMETRY schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\group_schema\group_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: group_schema.exp,v 1.5 2004/11/12 18:17:25 mikeward Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA group_schema;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (get_id_value,
   id_attribute); 


ENTITY group;
  name : label;
  description : OPTIONAL text;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY group_relationship;
  name : label;
  description : OPTIONAL text;
  relating_group : group;
  related_group : group;
END_ENTITY;

FUNCTION acyclic_group_relationship
 (relation : group_relationship; relatives : SET[1:?] OF group; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF group_relationship;
    END_LOCAL;

    IF relation.relating_group IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(grp <* bag_to_set(USEDIN(relation.relating_group, 'GROUP_SCHEMA.' + 'GROUP_RELATIONSHIP.' + 'RELATED_GROUP')) | specific_relation IN TYPEOF(grp));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_group_relationship(x[i], relatives + relation.relating_group, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- group_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\location_schema\location_schema.exp
   ------------------------------------------------------------
*)

(*
  $Id: location_schema.exp,v 1.11 2004/11/10 15:38:20 mikeward Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA location_schema;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


ENTITY location;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY location_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_location : location;
  related_location : location;
END_ENTITY;

  FUNCTION acyclic_location_relationship (relation : location_relationship; relatives : SET OF location; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF location_relationship;
    END_LOCAL;

    IF relation.relating_location IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(lctn <* bag_to_set(USEDIN(relation.relating_location, 'LOCATION_SCHEMA.' + 'LOCATION_RELATIONSHIP.' + 'RELATED_LOCATION')) | specific_relation IN TYPEOF(lctn));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_location_relationship(x[i], relatives + relation.relating_location, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

END_SCHEMA;  -- location_schema



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\management_resources_schema\management_resources_schema.exp
   ------------------------------------------------------------
*)

(*
  $Id: management_resources_schema.exp,v 1.22 2004/11/10 13:38:35 mikeward Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA management_resources_schema;

REFERENCE FROM action_schema;    -- ISO 10303-41

REFERENCE FROM application_context_schema   -- ISO 10303-41
  (library_context); 

REFERENCE FROM approval_schema;    -- ISO 10303-41

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (get_role,
   object_role,
   role_association); 

REFERENCE FROM certification_schema;    -- ISO 10303-41

REFERENCE FROM contract_schema;    -- ISO 10303-41

REFERENCE FROM date_time_schema;    -- ISO 10303-41

REFERENCE FROM document_schema;    -- ISO 10303-41

REFERENCE FROM effectivity_schema;    -- ISO 10303-41

REFERENCE FROM experience_schema;    -- ISO 10303-41

REFERENCE FROM external_reference_schema   -- ISO 10303-41
  (external_source); 

REFERENCE FROM group_schema;    -- ISO 10303-41

REFERENCE FROM location_schema;    -- ISO 10303-41

REFERENCE FROM person_organization_schema;    -- ISO 10303-41

REFERENCE FROM qualifications_schema;    -- ISO 10303-41

REFERENCE FROM security_classification_schema;    -- ISO 10303-41

REFERENCE FROM support_resource_schema;    -- ISO 10303-41


TYPE attribute_type = SELECT
   (label, 
    text);
END_TYPE; 

ENTITY action_assignment
  ABSTRACT SUPERTYPE ;
  assigned_action : action;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY action_method_assignment
  ABSTRACT SUPERTYPE ;
  assigned_action_method : action_method;
  role : action_method_role;
END_ENTITY;

ENTITY action_method_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY action_request_assignment
  ABSTRACT SUPERTYPE ;
  assigned_action_request : versioned_action_request;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY approval_assignment
  ABSTRACT SUPERTYPE ;
  assigned_approval : approval;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY attribute_classification_assignment
  ABSTRACT SUPERTYPE ;
  assigned_class : group;
  attribute_name : label;
  role : classification_role;
END_ENTITY;

ENTITY attribute_value_assignment
  ABSTRACT SUPERTYPE ;
  attribute_name : label;
  attribute_value : attribute_type;
  role : attribute_value_role;
END_ENTITY;

ENTITY attribute_value_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY certification_assignment
  ABSTRACT SUPERTYPE ;
  assigned_certification : certification;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY classification_assignment
  ABSTRACT SUPERTYPE ;
  assigned_class : group;
  role : classification_role;
END_ENTITY;

ENTITY classification_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY contract_assignment
  ABSTRACT SUPERTYPE ;
  assigned_contract : contract;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY date_and_time_assignment
  ABSTRACT SUPERTYPE ;
  assigned_date_and_time : date_and_time;
  role : date_time_role;
END_ENTITY;

ENTITY date_assignment
  ABSTRACT SUPERTYPE ;
  assigned_date : date;
  role : date_role;
END_ENTITY;

ENTITY document_reference
  ABSTRACT SUPERTYPE ;
  assigned_document : document;
  source : label;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY document_usage_constraint_assignment
  ABSTRACT SUPERTYPE ;
  assigned_document_usage : document_usage_constraint;
  role : document_usage_role;
END_ENTITY;

ENTITY document_usage_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY effectivity_assignment
  ABSTRACT SUPERTYPE ;
  assigned_effectivity : effectivity;
DERIVE
  role : object_role := get_role(SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY effectivity_context_assignment
  ABSTRACT SUPERTYPE ;
  assigned_effectivity_assignment : effectivity_assignment;
  role : effectivity_context_role;
END_ENTITY;

ENTITY effectivity_context_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY event_occurrence_assignment
  ABSTRACT SUPERTYPE ;
  assigned_event_occurrence : event_occurrence;
  role : event_occurrence_role;
END_ENTITY;

ENTITY event_occurrence_context_assignment
  ABSTRACT SUPERTYPE ;
  assigned_event_occurrence_assignment : event_occurrence_assignment;
  role : event_occurrence_context_role;
END_ENTITY;

ENTITY experience_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_experience : experience;
  role : experience_role;
END_ENTITY;

ENTITY experience_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY experience_type_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_experience_type : experience_type;
  role : experience_type_role;
END_ENTITY;

ENTITY experience_type_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY external_identification_assignment
  ABSTRACT SUPERTYPE 
  SUBTYPE OF (identification_assignment);
  source : external_source;
END_ENTITY;

ENTITY external_referent_assignment
    ABSTRACT SUPERTYPE;
    assigned_name : label;
  DERIVE
    role : object_role := get_role(SELF);
  UNIQUE
    UR1: assigned_name;
  WHERE
    WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
  END_ENTITY;

ENTITY group_assignment
  ABSTRACT SUPERTYPE ;
  assigned_group : group;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY identification_assignment
  ABSTRACT SUPERTYPE ;
  assigned_id : identifier;
  role : identification_role;
END_ENTITY;

ENTITY identification_assignment_relationship;
  name : label;
  description : OPTIONAL text;
  relating_identification_assignment : identification_assignment;
  related_identification_assignment : identification_assignment;
END_ENTITY;

ENTITY identification_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY library_assignment
  ABSTRACT SUPERTYPE 
  SUBTYPE OF (external_referent_assignment);
  frame_of_reference : library_context;
UNIQUE
  UR1: frame_of_reference;
END_ENTITY;

ENTITY location_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_location : location;
  role : location_role;
END_ENTITY;

ENTITY location_representation_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  represented_location : location;
  role : location_representation_role;
END_ENTITY;

ENTITY location_representation_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY location_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY name_assignment
  ABSTRACT SUPERTYPE ;
  assigned_name : label;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1 ;
END_ENTITY;

ENTITY organization_assignment
  ABSTRACT SUPERTYPE ;
  assigned_organization : organization;
  role : organization_role;
END_ENTITY;

ENTITY organization_type_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_organization_type : organization_type;
  role : organization_type_role;
END_ENTITY;

ENTITY organization_type_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY organizational_project_assignment
  ABSTRACT SUPERTYPE ;
  assigned_organizational_project : organizational_project;
  role : organizational_project_role;
END_ENTITY;

ENTITY organizational_project_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY person_and_organization_assignment
  ABSTRACT SUPERTYPE ;
  assigned_person_and_organization : person_and_organization;
  role : person_and_organization_role;
END_ENTITY;

ENTITY person_assignment
  ABSTRACT SUPERTYPE ;
  assigned_person : person;
  role : person_role;
END_ENTITY;

ENTITY person_type_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_person_type : person_type;
  role : person_type_role;
END_ENTITY;

ENTITY person_type_definition_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_person_type_definition : person_type_definition;
  role : person_type_definition_role;
END_ENTITY;

ENTITY person_type_definition_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY person_type_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY position_in_organization_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_position_in_organization : position_in_organization;
  role : position_in_organization_role;
END_ENTITY;

ENTITY position_in_organization_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY position_in_organization_type_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_position_in_organization_type : position_in_organization_type;
  role : position_in_organization_type_role;
END_ENTITY;

ENTITY position_in_organization_type_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY qualification_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_qualification : qualification;
  role : qualification_role;
END_ENTITY;

ENTITY qualification_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY qualification_type_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_qualification_type : qualification_type;
  role : qualification_type_role;
END_ENTITY;

ENTITY qualification_type_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY security_classification_assignment
  ABSTRACT SUPERTYPE ;
  assigned_security_classification : security_classification;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY time_assignment
  ABSTRACT SUPERTYPE ;
  assigned_time : local_time;
  role : time_role;
END_ENTITY;

ENTITY time_interval_assignment
  ABSTRACT SUPERTYPE ;
  assigned_time_interval : time_interval;
  role : time_interval_role;
END_ENTITY;

FUNCTION acyclic_identification_assignment_relationship
 (relation : identification_assignment_relationship; relatives : SET[1:?] OF identification_assignment; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF identification_assignment_relationship;
    END_LOCAL;

    IF relation.relating_identification_assignment IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(ia <* bag_to_set(USEDIN(relation.relating_identification_assignment, 'MANAGEMENT_RESOURCES_SCHEMA.' + 'IDENTIFICATION_ASSIGNMENT_RELATIONSHIP.' + 'RELATED_IDENTIFICATION_ASSIGNMENT')) | specific_relation IN TYPEOF(ia));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_identification_assignment_relationship(x[i], relatives + relation.relating_identification_assignment, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);

END_FUNCTION; 

END_SCHEMA;  -- management_resources_schema





(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\material_property_definition_schema\material_property_definition_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n257.exp *)

SCHEMA material_property_definition_schema;

REFERENCE FROM product_definition_schema
      (product_definition_relationship);

REFERENCE FROM product_property_definition_schema
      (characterized_definition,
      property_definition);

REFERENCE FROM support_resource_schema
     (label,
      text,
      bag_to_set);

REFERENCE FROM measure_schema
     (measure_with_unit);

REFERENCE FROM material_property_representation_schema
     (material_property_representation);

TYPE characterized_material_property = SELECT
  (material_property_representation,
   product_material_composition_relationship);
END_TYPE;

ENTITY material_property
SUBTYPE OF (property_definition);
UNIQUE
  UR1 : SELF\property_definition.name, SELF\property_definition.definition;
WHERE
  WR1 : ('PRODUCT_PROPERTY_DEFINITION_SCHEMA.CHARACTERIZED_OBJECT' IN
          TYPEOF(SELF\property_definition.definition)) OR
       (SIZEOF(bag_to_set(USEDIN(SELF ,
                     'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.' +
                     'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION')) -
              QUERY(temp <* bag_to_set(USEDIN(SELF ,
                       'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.' +
                       'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION')) |
                       ('MATERIAL_PROPERTY_REPRESENTATION_SCHEMA.' +
                      'MATERIAL_PROPERTY_REPRESENTATION' IN
                      TYPEOF(temp)))) = 0);
END_ENTITY;

ENTITY property_definition_relationship;
  name                       : label;
  description                 : text;
  relating_property_definition : property_definition;
  related_property_definition  : property_definition;
END_ENTITY;

ENTITY material_designation;
  name       : label;
  definitions : SET [1:?] OF characterized_definition;
END_ENTITY;

ENTITY material_designation_characterization;
  name       : label;
  description : text;
  designation : material_designation;
  property    : characterized_material_property;
END_ENTITY;

ENTITY product_material_composition_relationship
SUBTYPE OF (product_definition_relationship);
  class               : label;
  constituent_amount   : SET [1:?] OF measure_with_unit;
  composition_basis    : label;
  determination_method : text;
END_ENTITY;

FUNCTION acyclic_property_definition_relationship
  (relation          : property_definition_relationship;
   relatives         : SET [1:?] OF property_definition;
   specific_relation : STRING) : LOGICAL;

  LOCAL
    x                : SET OF property_definition_relationship;
  END_LOCAL;

  IF relation.relating_property_definition IN 
            relatives THEN
    RETURN (FALSE);
  END_IF;             -- IN is based in instance equality

  x := QUERY (pd <* bag_to_set (USEDIN
       (relation.relating_property_definition,
        'MATERIAL_PROPERTY_DEFINITION_SCHEMA.' +
        'PROPERTY_DEFINITION_RELATIONSHIP.' +
        'RELATED_PROPERTY_DEFINITION')) |
         specific_relation IN TYPEOF (pd));

  REPEAT I := 1 TO HIINDEX(x);             -- pre-checked loop
    IF NOT acyclic_property_definition_relationship
      (x[i],
       relatives + relation.relating_property_definition,
       specific_relation) THEN
      RETURN(FALSE);
    END_IF;
  END_REPEAT;

  RETURN(TRUE);
END_FUNCTION;  -- acyclic_property_definition_relationship

END_SCHEMA;    -- material_property_definition_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\material_property_representation_schema\material_property_representation_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n257.exp *)

SCHEMA material_property_representation_schema;

REFERENCE FROM product_property_representation_schema
     (property_definition_representation);

REFERENCE FROM support_resource_schema
     (label,
      text);

ENTITY material_property_representation
  SUBTYPE OF (property_definition_representation);
  dependent_environment : data_environment;
END_ENTITY;

ENTITY data_environment;
  name       : label;
  description : text;
  elements    : SET [1:?] OF property_definition_representation;
END_ENTITY;

ENTITY data_environment_relationship;
  name                    : label;
  description              : text;
  relating_data_environment : data_environment;
  related_data_environment  : data_environment;
END_ENTITY;

END_SCHEMA;    -- material_property_representation_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\measure_schema\measure_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: measure_schema.exp,v 1.7 2004/11/10 13:18:30 mikeward Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA measure_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (get_name_value,
   name_attribute); 

REFERENCE FROM representation_schema   -- ISO 10303-43
  (representation_context); 

REFERENCE FROM support_resource_schema;    -- ISO 10303-41


TYPE amount_of_substance_measure = REAL;
END_TYPE; 

TYPE area_measure = REAL;
END_TYPE; 

TYPE celsius_temperature_measure = REAL;
END_TYPE; 

TYPE context_dependent_measure = REAL;
END_TYPE; 

TYPE count_measure = NUMBER;
END_TYPE; 

TYPE descriptive_measure = STRING;
END_TYPE; 

TYPE electric_current_measure = REAL;
END_TYPE; 

TYPE length_measure = REAL;
END_TYPE; 

TYPE luminous_intensity_measure = REAL;
END_TYPE; 

TYPE mass_measure = REAL;
END_TYPE; 

TYPE measure_value = SELECT
   (amount_of_substance_measure, 
    area_measure, 
    celsius_temperature_measure, 
    context_dependent_measure, 
    count_measure, 
    descriptive_measure, 
    electric_current_measure, 
    length_measure, 
    luminous_intensity_measure, 
    mass_measure, 
    numeric_measure, 
    parameter_value, 
    plane_angle_measure, 
    positive_length_measure, 
    positive_plane_angle_measure, 
    positive_ratio_measure, 
    ratio_measure, 
    solid_angle_measure, 
    thermodynamic_temperature_measure, 
    time_measure, 
    volume_measure);
END_TYPE; 

TYPE numeric_measure = NUMBER;
END_TYPE; 

TYPE parameter_value = REAL;
END_TYPE; 

TYPE plane_angle_measure = REAL;
END_TYPE; 

TYPE positive_length_measure = length_measure;
WHERE
  WR1: SELF > 0.0;
END_TYPE; 

TYPE positive_plane_angle_measure = plane_angle_measure;
WHERE
  WR1: SELF > 0.0;
END_TYPE; 

TYPE positive_ratio_measure = ratio_measure;
WHERE
  WR1: SELF > 0.0;
END_TYPE; 

TYPE ratio_measure = REAL;
END_TYPE; 

TYPE si_prefix = ENUMERATION OF 
   (exa,
    peta,
    tera,
    giga,
    mega,
    kilo,
    hecto,
    deca,
    deci,
    centi,
    milli,
    micro,
    nano,
    pico,
    femto,
    atto);
END_TYPE; 

TYPE si_unit_name = ENUMERATION OF 
   (metre,
    gram,
    second,
    ampere,
    kelvin,
    mole,
    candela,
    radian,
    steradian,
    hertz,
    newton,
    pascal,
    joule,
    watt,
    coulomb,
    volt,
    farad,
    ohm,
    siemens,
    weber,
    tesla,
    henry,
    degree_Celsius,
    lumen,
    lux,
    becquerel,
    gray,
    sievert);
END_TYPE; 

TYPE solid_angle_measure = REAL;
END_TYPE; 

TYPE thermodynamic_temperature_measure = REAL;
END_TYPE; 

TYPE time_measure = REAL;
END_TYPE; 

TYPE unit = SELECT
   (derived_unit, 
    named_unit);
END_TYPE; 

TYPE volume_measure = REAL;
END_TYPE; 

ENTITY amount_of_substance_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.AMOUNT_OF_SUBSTANCE_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY amount_of_substance_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 1.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY area_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.AREA_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY area_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 2.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY celsius_temperature_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.THERMODYNAMIC_TEMPERATURE_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY context_dependent_unit
  SUBTYPE OF (named_unit);
  name : label;
END_ENTITY;

ENTITY conversion_based_unit
  SUBTYPE OF (named_unit);
  name : label;
  conversion_factor : measure_with_unit;
END_ENTITY;

ENTITY derived_unit;
  elements : SET[1:?] OF derived_unit_element;
DERIVE
  name : label := get_name_value (SELF);
WHERE
  WR1: (SIZEOF (elements) > 1) OR ((SIZEOF (elements) = 1) AND (elements[1].exponent <> 1.0));
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
END_ENTITY;

ENTITY derived_unit_element;
  unit : named_unit;
  exponent : REAL;
END_ENTITY;

ENTITY dimensional_exponents;
  length_exponent : REAL;
  mass_exponent : REAL;
  time_exponent : REAL;
  electric_current_exponent : REAL;
  thermodynamic_temperature_exponent : REAL;
  amount_of_substance_exponent : REAL;
  luminous_intensity_exponent : REAL;
END_ENTITY;

ENTITY electric_current_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.ELECTRIC_CURRENT_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY electric_current_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 1.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY global_unit_assigned_context
  SUBTYPE OF (representation_context);
  units : SET[1:?] OF unit;
END_ENTITY;

ENTITY length_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.LENGTH_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY length_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 1.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY luminous_intensity_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.LUMINOUS_INTENSITY_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY luminous_intensity_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 1.0);
END_ENTITY;

ENTITY mass_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.MASS_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY mass_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 1.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY measure_with_unit
  SUPERTYPE OF (ONEOF (length_measure_with_unit,
                       mass_measure_with_unit,
                       time_measure_with_unit,
                       electric_current_measure_with_unit,
                       thermodynamic_temperature_measure_with_unit,
                       celsius_temperature_measure_with_unit,
                       amount_of_substance_measure_with_unit,
                       luminous_intensity_measure_with_unit,
                       plane_angle_measure_with_unit,
                       solid_angle_measure_with_unit,
                       area_measure_with_unit,
                       volume_measure_with_unit,
                       ratio_measure_with_unit));
  value_component : measure_value;
  unit_component : unit;
WHERE
  WR1: valid_units (SELF);
END_ENTITY;

ENTITY named_unit
  SUPERTYPE OF (ONEOF (si_unit,
                       conversion_based_unit,
                       context_dependent_unit)
               ANDOR ONEOF (length_unit,
                    mass_unit,
                    time_unit,
                    electric_current_unit,
                    thermodynamic_temperature_unit,
                    amount_of_substance_unit,
                    luminous_intensity_unit,
                    plane_angle_unit,
                    solid_angle_unit,
                    area_unit,
                    volume_unit,
                    ratio_unit));
  dimensions : dimensional_exponents;
END_ENTITY;

ENTITY plane_angle_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.PLANE_ANGLE_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY plane_angle_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY ratio_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.RATIO_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY ratio_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY si_unit
  SUBTYPE OF (named_unit);
  prefix : OPTIONAL si_prefix;
  name : si_unit_name;
DERIVE
  SELF\named_unit.dimensions : dimensional_exponents := dimensions_for_si_unit (name);
END_ENTITY;

ENTITY solid_angle_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.SOLID_ANGLE_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY solid_angle_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY thermodynamic_temperature_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.THERMODYNAMIC_TEMPERATURE_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY thermodynamic_temperature_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 1.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY time_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.TIME_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY time_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 1.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY volume_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.VOLUME_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY volume_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 3.000000) AND (SELF\named_unit.dimensions.mass_exponent = 0.000000) AND (SELF\named_unit.dimensions.time_exponent = 0.000000) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.000000) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.000000) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.000000) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.000000);
END_ENTITY;

FUNCTION derive_dimensional_exponents
 (x : unit) : dimensional_exponents; 
  LOCAL
    result : dimensional_exponents := dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  END_LOCAL;

  IF 'MEASURE_SCHEMA.DERIVED_UNIT' IN TYPEOF(x) THEN
    REPEAT i := LOINDEX(x.elements) TO HIINDEX(x.elements);
      result.length_exponent := result.length_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.length_exponent);
      result.mass_exponent := result.mass_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.mass_exponent);
      result.time_exponent := result.time_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.time_exponent);
      result.electric_current_exponent := result.electric_current_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.electric_current_exponent);
      result.thermodynamic_temperature_exponent := result.thermodynamic_temperature_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.thermodynamic_temperature_exponent);
      result.amount_of_substance_exponent := result.amount_of_substance_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.amount_of_substance_exponent);
      result.luminous_intensity_exponent := result.luminous_intensity_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.luminous_intensity_exponent);
    END_REPEAT;
  ELSE
    result := x.dimensions;
  END_IF;
  RETURN (result);
END_FUNCTION; 

FUNCTION dimensions_for_si_unit
 (n : si_unit_name) : dimensional_exponents; 
 CASE n OF
    metre          : RETURN (dimensional_exponents
                          (1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
    gram           : RETURN (dimensional_exponents
                         (0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0));
    second         : RETURN (dimensional_exponents
                         (0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0));
    ampere         : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0));
    kelvin         : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0));
    mole           : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0));
    candela        : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0));
    radian         : RETURN (dimensional_exponents
                           (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
    steradian      : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
    hertz          : RETURN (dimensional_exponents
                         (0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0));
    newton         : RETURN (dimensional_exponents
                         (1.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0));
    pascal         : RETURN (dimensional_exponents
                         (-1.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0));
    joule          : RETURN (dimensional_exponents
                         (2.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0));
    watt           : RETURN (dimensional_exponents
                         (2.0, 1.0, -3.0, 0.0, 0.0, 0.0, 0.0));
    coulomb        : RETURN (dimensional_exponents
                         (0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0));
    volt           : RETURN (dimensional_exponents
                         (2.0, 1.0, -3.0, -1.0, 0.0, 0.0, 0.0));
    farad          : RETURN (dimensional_exponents
                         (-2.0, -1.0, 4.0, 1.0, 0.0, 0.0, 0.0));
    ohm            : RETURN (dimensional_exponents
                         (2.0, 1.0, -3.0, -2.0, 0.0, 0.0, 0.0));
    siemens        : RETURN (dimensional_exponents
                         (-2.0, -1.0, 3.0, 2.0, 0.0, 0.0, 0.0));
    weber          : RETURN (dimensional_exponents
                         (2.0, 1.0, -2.0, -1.0, 0.0, 0.0, 0.0));
    tesla          : RETURN (dimensional_exponents
                         (0.0, 1.0, -2.0, -1.0, 0.0, 0.0, 0.0));
    henry          : RETURN (dimensional_exponents
                         (2.0, 1.0, -2.0, -2.0, 0.0, 0.0, 0.0));
    degree_Celsius : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0));
    lumen          : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0));
    lux            : RETURN (dimensional_exponents
                         (-2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0));
    becquerel      : RETURN (dimensional_exponents
                         (0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0));
    gray           : RETURN (dimensional_exponents
                         (2.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0));
    sievert        : RETURN (dimensional_exponents
                         (2.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0));
    OTHERWISE      : RETURN (?);
  END_CASE;
END_FUNCTION; 

FUNCTION valid_units
 (m : measure_with_unit) : BOOLEAN; 
 IF 'MEASURE_SCHEMA.LENGTH_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.MASS_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.TIME_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.ELECTRIC_CURRENT_MEASURE' 
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.THERMODYNAMIC_TEMPERATURE_MEASURE'
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.CELSIUS_TEMPERATURE_MEASURE'
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.AMOUNT_OF_SUBSTANCE_MEASURE' 
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.LUMINOUS_INTENSITY_MEASURE' 
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.PLANE_ANGLE_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.SOLID_ANGLE_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.AREA_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.VOLUME_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.RATIO_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.POSITIVE_LENGTH_MEASURE' 
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.POSITIVE_PLANE_ANGLE_MEASURE' 
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- measure_schema




(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\person_organization_schema\person_organization_schema.exp
   ------------------------------------------------------------
*)

(*
  $Id: person_organization_schema.exp,v 1.17 2005/04/12 21:19:36 thendrix Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA person_organization_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value,
   get_id_value,
   get_name_value,
   get_role,
   id_attribute,
   name_attribute,
   object_role,
   role_association); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE person_organization_select = SELECT
   (organization, 
    person, 
    person_and_organization);
END_TYPE; 

ENTITY address;
  internal_location : OPTIONAL label;
  street_number : OPTIONAL label;
  street : OPTIONAL label;
  postal_box : OPTIONAL label;
  town : OPTIONAL label;
  region : OPTIONAL label;
  postal_code : OPTIONAL label;
  country : OPTIONAL label;
  facsimile_number : OPTIONAL label;
  telephone_number : OPTIONAL label;
  electronic_mail_address : OPTIONAL label;
  telex_number : OPTIONAL label;
DERIVE
  name : label := get_name_value(SELF);
  url : identifier := get_id_value(SELF);
WHERE
  WR1: EXISTS(internal_location) OR EXISTS(street_number) OR EXISTS(street) OR EXISTS(postal_box) OR EXISTS(town) OR EXISTS(region) OR EXISTS(postal_code) OR EXISTS(country) OR EXISTS(facsimile_number) OR EXISTS(telephone_number) OR EXISTS(electronic_mail_address) OR EXISTS(telex_number);
END_ENTITY;

ENTITY organization;
  id : OPTIONAL identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY organization_relationship;
  name : label;
  description : OPTIONAL text;
  relating_organization : organization;
  related_organization : organization;
END_ENTITY;

ENTITY organization_role;
  name : label;
DERIVE
  description : text := get_description_value(SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY organization_type;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY organization_type_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_organization_type : organization_type;
  related_organization_type : organization_type;
END_ENTITY;

ENTITY organizational_address
  SUBTYPE OF (address);
  organizations : SET[1:?] OF organization;
  description : OPTIONAL text;
END_ENTITY;

ENTITY organizational_project;
  name : label;
  description : OPTIONAL text;
  responsible_organizations : SET[1:?] OF organization;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY organizational_project_relationship;
  name : label;
  description : OPTIONAL text;
  relating_organizational_project : organizational_project;
  related_organizational_project : organizational_project;
END_ENTITY;

ENTITY person;
  id : identifier;
  last_name : OPTIONAL label;
  first_name : OPTIONAL label;
  middle_names : OPTIONAL LIST[1:?] OF label;
  prefix_titles : OPTIONAL LIST[1:?] OF label;
  suffix_titles : OPTIONAL LIST[1:?] OF label;
WHERE
  WR1: EXISTS(last_name) OR EXISTS(first_name);
END_ENTITY;

ENTITY person_and_organization;
  the_person : person;
  the_organization : organization;
DERIVE
  name : label := get_name_value (SELF);
  description : text := get_description_value(SELF);
  
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY person_and_organization_role;
  name : label;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY person_role;
  name : label;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY person_type;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY person_type_definition;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  formation : person_type_definition_formation;
END_ENTITY;

ENTITY person_type_definition_formation;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  of_person_type : person_type;
END_ENTITY;

ENTITY person_type_definition_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_person_type_definition : person_type_definition;
  related_person_type_definition : person_type_definition;
END_ENTITY;

ENTITY personal_address
  SUBTYPE OF (address);
  people : SET[1:?] OF person;
  description : OPTIONAL text;
END_ENTITY;

ENTITY position_in_organization;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY position_in_organization_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_position_in_organization : position_in_organization;
  related_position_in_organization : position_in_organization;
END_ENTITY;

ENTITY position_in_organization_type;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

FUNCTION acyclic_organization_relationship (relation : organization_relationship; relatives : SET [1:?] OF organization; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF organization_relationship;
    END_LOCAL;

    IF relation.relating_organization IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(org <* bag_to_set(USEDIN(relation.relating_organization, 'PERSON_ORGANIZATION_SCHEMA.' + 'ORGANIZATION_RELATIONSHIP.' + 'RELATED_ORGANIZATION')) | specific_relation IN TYPEOF(org));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_organization_relationship(x[i], relatives + relation.relating_organization, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION; 

FUNCTION acyclic_organization_type_relationship
 (relation : organization_type_relationship; relatives : SET OF organization_type; specific_relation : STRING) : BOOLEAN; 
   LOCAL
      x : SET OF organization_type_relationship;
    END_LOCAL;

    IF relation.relating_organization_type IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(orgtyp <* bag_to_set(USEDIN(relation.relating_organization_type, 'PERSON_ORGANIZATION_SCHEMA.' + 'ORGANIZATION_TYPE_RELATIONSHIP.' + 'RELATED_ORGANIZATION_TYPE')) | specific_relation IN TYPEOF(orgtyp));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_organization_type_relationship(x[i], relatives + relation.relating_organization_type, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_organizational_project_relationship (relation : organizational_project_relationship; relatives : SET [1:?] OF organizational_project; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF organizational_project_relationship;
    END_LOCAL;

    IF relation.relating_organizational_project IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(op <* bag_to_set(USEDIN(relation.relating_organizational_project, 'PERSON_ORGANIZATION_SCHEMA.' + 'ORGANIZATIONAL_PROJECT_RELATIONSHIP.' + 'RELATED_ORGANIZATIONAL_PROJECT')) | specific_relation IN TYPEOF(op));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_organizational_project_relationship(x[i], relatives + relation.relating_organizational_project, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION; 

FUNCTION acyclic_person_type_definition_relationship
 (relation : person_type_definition_relationship; relatives : SET OF person_type_definition; specific_relation : STRING) : BOOLEAN; 
   LOCAL
      x : SET OF person_type_definition_relationship;
    END_LOCAL;

    IF relation.relating_person_type_definition IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(ptdef <* bag_to_set(USEDIN(relation.relating_person_type_definition, 'PERSON_ORGANIZATION_SCHEMA.' + 'PERSON_TYPE_DEFINITION_RELATIONSHIP.' + 'RELATED_PERSON_TYPE_DEFINITION')) | specific_relation IN TYPEOF(ptdef));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_person_type_definition_relationship(x[i], relatives + relation.relating_person_type_definition, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_position_in_organization_relationship
 (relation : position_in_organization_relationship; relatives : SET OF position_in_organization; specific_relation : STRING) : BOOLEAN; 
   LOCAL
      x : SET OF position_in_organization_relationship;
    END_LOCAL;

    IF relation.relating_position_in_organization IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(piorg <* bag_to_set(USEDIN(relation.relating_position_in_organization, 'PERSON_ORGANIZATION_SCHEMA.' + 'POSITION_IN_ORGANIZATION_RELATIONSHIP.' + 'RELATED_POSITION_IN_ORGANIZATION')) | specific_relation IN TYPEOF(piorg));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_position_in_organization_relationship(x[i], relatives + relation.relating_position_in_organization, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- person_organization_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\presentation_appearance_schema\presentation_appearance_schema.exp
   ------------------------------------------------------------
*)

SCHEMA presentation_appearance_schema;
 
REFERENCE FROM external_reference_schema
    (externally_defined_item,
     pre_defined_item);

REFERENCE FROM geometry_schema
    (axis2_placement,
     b_spline_curve, -- GL added
     cartesian_point,
     composite_curve,-- GL added
     curve,
     geometric_representation_item,
     point,
     polyline, -- GL added
     vector);

REFERENCE FROM group_schema
  (group);

REFERENCE FROM measure_schema
    (descriptive_measure,
     length_measure,
     measure_with_unit,
     plane_angle_measure,
     positive_length_measure,
     ratio_measure,
     positive_ratio_measure);

REFERENCE FROM presentation_organization_schema
     (area_dependent_annotation_representation,
      presentation_area,
      presentation_layer_assignment,
      presentation_layer_usage,
      presentation_representation,
      presentation_set,
      presentation_view,
      product_data_representation_view,
      view_dependent_annotation_representation);

REFERENCE FROM presentation_definition_schema
    (annotation_curve_occurrence,
     annotation_fill_area,
     annotation_symbol_occurrence,
     annotation_text_with_delineation,
     symbol_representation_with_blanking_box);

REFERENCE FROM presentation_resource_schema
    (character_glyph_symbol_outline,
     character_glyph_symbol_stroke,
     colour);

REFERENCE FROM representation_schema
    (founded_item,
     mapped_item,
     representation,
     representation_item,
     representation_map,
     using_representations);

REFERENCE FROM support_resource_schema
    (label,
     bag_to_set);
 

SUBTYPE_CONSTRAINT pas_geometric_representation_item_subtypes FOR geometric_representation_item;  
    (ONEOF ( 
     curve, 
     curve_style_curve_pattern, 
     curve_style_curve_pattern_set ,
     externally_defined_hatch_style,
     externally_defined_tile_style,  
     fill_area_style_hatching,
     fill_area_style_tile_coloured_region,
     fill_area_style_tile_curve_with_style, 
     fill_area_style_tile_symbol_with_style, 
     fill_area_style_tiles, 
     one_direction_repeat_factor,
     point, 
     pre_defined_hatch_style,  
     pre_defined_tile_style, 
     vector)); 
END_SUBTYPE_CONSTRAINT; 

TYPE approximation_method = ENUMERATION OF
  (chordal_deviation,
   chordal_length);
END_TYPE;

TYPE box_characteristic_select = SELECT
  (box_height,
   box_width,
   box_slant_angle,
   box_rotate_angle);
END_TYPE;

TYPE box_height = positive_ratio_measure;
END_TYPE;

TYPE box_rotate_angle = plane_angle_measure;
END_TYPE;

TYPE  box_slant_angle = plane_angle_measure;
END_TYPE;

TYPE box_width = positive_ratio_measure;
END_TYPE;

TYPE character_spacing_select = SELECT
  (length_measure,
   ratio_measure,
   measure_with_unit,
   descriptive_measure,
   pre_defined_character_spacing);
END_TYPE;

TYPE character_style_select = SELECT
  (character_glyph_style_stroke,
   character_glyph_style_outline,
   text_style_for_defined_font);
END_TYPE;

TYPE curve_font_or_scaled_curve_font_select = SELECT
  (curve_style_font_select,
   curve_style_font_and_scaling);
END_TYPE;

TYPE curve_or_annotation_curve_occurrence = SELECT
  (curve,
   annotation_curve_occurrence);
END_TYPE;

TYPE curve_or_render = SELECT
  (curve_style,
   curve_style_rendering);
END_TYPE;

TYPE curve_style_font_select = SELECT
  (curve_style_font,
   pre_defined_curve_font,
   externally_defined_curve_font);
END_TYPE;

TYPE curve_tolerance_deviation = positive_length_measure;
END_TYPE;

TYPE curve_tolerance_parameter = REAL;
END_TYPE;

TYPE direction_count_select = SELECT
  (u_direction_count,
   v_direction_count);
END_TYPE;

TYPE fill_style_select = SELECT
  (fill_area_style_colour,
   pre_defined_tile_style,
   externally_defined_tile_style,
   fill_area_style_tiles,
   pre_defined_hatch_style,
   externally_defined_hatch_style,
   fill_area_style_hatching);
END_TYPE;

TYPE fill_area_style_tile_shape_select = SELECT
  (fill_area_style_tile_curve_with_style,
   fill_area_style_tile_coloured_region,
   fill_area_style_tile_symbol_with_style,
   pre_defined_tile,
   externally_defined_tile);
END_TYPE;

TYPE hiding_or_blanking_select = SELECT
  (presentation_area,
   presentation_view,
   product_data_representation_view,
   annotation_fill_area,
   area_dependent_annotation_representation,
   view_dependent_annotation_representation,
   annotation_text_with_delineation,
   character_glyph_symbol_stroke,
   character_glyph_symbol_outline,
   symbol_representation_with_blanking_box);
END_TYPE;

TYPE invisibility_context = SELECT 
  (presentation_layer_usage,
   presentation_representation,
   presentation_set);
END_TYPE;

TYPE invisible_item = EXTENSIBLE GENERIC_ENTITY SELECT 
  (styled_item,
   presentation_layer_assignment,
   representation);
END_TYPE;

TYPE marker_select = SELECT
  (marker_type,
   pre_defined_marker);
END_TYPE;

TYPE marker_type = ENUMERATION OF
  (dot,
   x,
   plus,
   asterisk,
   ring,
   square,
   triangle);
END_TYPE;

TYPE null_style = ENUMERATION OF
  (null);
END_TYPE;

TYPE presentation_style_select = SELECT
  (pre_defined_presentation_style,
   point_style,
   curve_style,
   surface_style_usage,
   symbol_style,
   fill_area_style,
   text_style,
   approximation_tolerance,
   externally_defined_style,
   null_style);
END_TYPE;

TYPE product_or_presentation_space = ENUMERATION OF
  (product_shape_space,
   presentation_area_space);
END_TYPE;

TYPE rendering_properties_select = SELECT
  (surface_style_reflectance_ambient,
   surface_style_transparent);
END_TYPE;

TYPE shading_curve_method = ENUMERATION OF
  (constant_colour,
   linear_colour);
END_TYPE;

TYPE shading_surface_method = ENUMERATION OF
  (constant_shading,
   colour_shading,
   dot_shading,
   normal_shading);
END_TYPE;

TYPE size_select  = SELECT
  (positive_length_measure,
   measure_with_unit,
   descriptive_measure,
   pre_defined_size);
END_TYPE;

TYPE squared_or_rounded = ENUMERATION OF
  (squared,
   rounded);
END_TYPE;

TYPE style_context_select = SELECT
  (group,
   presentation_layer_assignment,
   representation,
   representation_item,
   presentation_set);
END_TYPE;

TYPE surface_side = ENUMERATION OF
  (positive,
   negative,
   both);
END_TYPE;

TYPE surface_side_style_select = SELECT
  (surface_side_style,
   pre_defined_surface_side_style);
END_TYPE;

TYPE surface_style_element_select = SELECT
  (surface_style_fill_area,
   surface_style_boundary,
   surface_style_silhouette,
   surface_style_segmentation_curve,
   surface_style_control_grid,
   surface_style_parameter_line,
   surface_style_rendering);
END_TYPE;

TYPE surface_tolerance_deviation = positive_length_measure;
END_TYPE;

TYPE surface_tolerance_parameter = REAL;
END_TYPE;

TYPE symbol_style_select= SELECT
  (symbol_element_style,
   symbol_colour);
END_TYPE;


TYPE text_justification = label;
END_TYPE;

TYPE tolerance_deviation_select = SELECT
  (curve_tolerance_deviation,
   surface_tolerance_deviation);
END_TYPE;

TYPE tolerance_parameter_select = SELECT
  (curve_tolerance_parameter,
   surface_tolerance_parameter);
END_TYPE;

TYPE tolerance_select = SELECT
  (approximation_tolerance_deviation,
   approximation_tolerance_parameter);
END_TYPE;

TYPE u_direction_count = INTEGER;
WHERE
  WR1: SELF > 1;
END_TYPE;

TYPE v_direction_count = INTEGER;
WHERE
  WR1: SELF > 1;
END_TYPE;

ENTITY approximation_tolerance
  SUBTYPE OF (founded_item); --LK added
  tolerance : tolerance_select;
END_ENTITY;

ENTITY approximation_tolerance_deviation
  SUBTYPE OF (founded_item); --GL added
  tessellation_type : approximation_method;
  tolerances        : SET [1:2] OF tolerance_deviation_select;
  definition_space  : product_or_presentation_space;
WHERE
  WR1: (HIINDEX(SELF.tolerances) = 1)
                XOR
       (TYPEOF(SELF.tolerances[1]) <> TYPEOF(SELF.tolerances[2]));
END_ENTITY;

ENTITY approximation_tolerance_parameter
  SUBTYPE OF (founded_item); --GL added
  tolerances : SET [1:2] OF tolerance_parameter_select;
WHERE
  WR1: (HIINDEX (SELF.tolerances) = 1 )
               XOR
       (TYPEOF (SELF.tolerances[1]) <> TYPEOF (SELF.tolerances[2]));
END_ENTITY;

ENTITY character_glyph_style_outline
  SUBTYPE OF (founded_item); --GL added
  outline_style : curve_style;
END_ENTITY;

ENTITY character_glyph_style_outline_with_characteristics
  SUBTYPE OF (character_glyph_style_outline);
  characteristics : fill_area_style;
END_ENTITY;

ENTITY character_glyph_style_stroke
  SUBTYPE OF (founded_item); --GL added
  stroke_style : curve_style;
END_ENTITY;

ENTITY context_dependent_invisibility
  SUBTYPE OF (invisibility);
  presentation_context : invisibility_context;
END_ENTITY;

ENTITY context_dependent_over_riding_styled_item
  SUBTYPE OF(over_riding_styled_item);
  style_context : SET[1:2] OF style_context_select;
WHERE
  WR1: (SIZEOF(QUERY( sc <* SELF.style_context |
       'REPRESENTATION_SCHEMA.REPRESENTATION' IN
         TYPEOF(sc))) <= 1 )
                 AND
       (SIZEOF(QUERY( sc <* SELF.style_context |
       'REPRESENTATION_SCHEMA.REPRESENTATION_ITEM' IN
         TYPEOF(sc))) <= 1);
END_ENTITY;
--GP In my opinion, there an error in the above rule WR1.
--GP In both cases, it should be "<= 1" instead of "= 1".
--LK ok, do it

ENTITY curve_style
  SUBTYPE OF (founded_item); --LK added
  name         : label;
  curve_font   : curve_font_or_scaled_curve_font_select;
  curve_width  : size_select;
  curve_colour : colour;
END_ENTITY;

ENTITY curve_style_curve_pattern
  SUBTYPE OF (geometric_representation_item);
  pattern        : annotation_curve_occurrence;
  pattern_length : positive_length_measure;
END_ENTITY;

ENTITY curve_style_curve_pattern_set
  SUBTYPE OF (curve_style_font, 
              geometric_representation_item);
  pattern_set : SET [1:?] OF curve_style_curve_pattern;
END_ENTITY;

ENTITY curve_style_font
  SUBTYPE OF (founded_item); --GL add
  name         : label;
  pattern_list : LIST [1:?] OF curve_style_font_pattern;
END_ENTITY;

ENTITY curve_style_font_and_scaling
  SUBTYPE OF (founded_item); --GL add
  name               : label;
  curve_font         : curve_style_font_select;
  curve_font_scaling : REAL;
END_ENTITY;

ENTITY curve_style_font_pattern
  SUBTYPE OF (founded_item); --LK add
  visible_segment_length   : positive_length_measure;
  invisible_segment_length : positive_length_measure;
END_ENTITY;

ENTITY curve_style_rendering;
  rendering_method     : shading_curve_method;
  rendering_properties : surface_rendering_properties;
END_ENTITY;

ENTITY curve_style_wide
  SUBTYPE OF (curve_style_font);
  interior_style : fill_area_style;
END_ENTITY;

ENTITY curve_style_with_ends_and_corners
  SUBTYPE OF (curve_style);
  curve_ends    : squared_or_rounded;
  curve_corners : squared_or_rounded;
END_ENTITY;

ENTITY curve_style_with_extension
  SUBTYPE OF (curve_style);
  curve_extensions   : length_measure;
END_ENTITY;

ENTITY draughting_pre_defined_curve_font
  SUBTYPE OF (pre_defined_curve_font);
WHERE
  WR1: SELF.name IN
       ['continuous',
        'chain',
        'chain double dash',
        'dashed',
        'dotted'];
END_ENTITY;

ENTITY externally_defined_curve_font
  SUBTYPE OF (externally_defined_item);
END_ENTITY;

ENTITY externally_defined_hatch_style
  SUBTYPE OF (externally_defined_item, geometric_representation_item);
END_ENTITY;

ENTITY externally_defined_style
  SUBTYPE OF (externally_defined_item, founded_item); --GL added founded_item  
END_ENTITY;

ENTITY externally_defined_tile
  SUBTYPE OF (externally_defined_item);
END_ENTITY;

ENTITY externally_defined_tile_style
  SUBTYPE OF (externally_defined_item, geometric_representation_item);
END_ENTITY;

ENTITY fill_area_style
  SUBTYPE OF (founded_item); --LK added
  name       : label;
  fill_styles : SET [1:?] OF fill_style_select;
WHERE
  WR1: SIZEOF(QUERY(fill_style <* SELF.fill_styles |
         'PRESENTATION_APPEARANCE_SCHEMA.'+
         'FILL_AREA_STYLE_COLOUR' IN
         TYPEOF(fill_style)
         )) <= 1;
END_ENTITY;

ENTITY fill_area_style_colour;
  name        : label;
  fill_colour : colour;
END_ENTITY;

ENTITY fill_area_style_hatching
  SUBTYPE OF (geometric_representation_item);
  hatch_line_appearance         : curve_style;
  start_of_next_hatch_line      : one_direction_repeat_factor;
  point_of_reference_hatch_line : cartesian_point;
  pattern_start                 : cartesian_point;
  hatch_line_angle              : plane_angle_measure;
END_ENTITY;

ENTITY fill_area_style_tile_coloured_region
  SUBTYPE OF (geometric_representation_item);
  closed_curve  : curve_or_annotation_curve_occurrence;
  region_colour : colour;
WHERE
--GP Where rule WR1 is added for informal proposition IP1, property 'closed'
  WR1: (NOT('GEOMETRY_SCHEMA.CURVE' IN TYPEOF (closed_curve))) OR 
       ('GEOMETRY_SCHEMA.CIRCLE' IN TYPEOF (closed_curve)) OR 
       ('GEOMETRY_SCHEMA.ELLIPSE' IN TYPEOF (closed_curve)) OR 
       ( ('GEOMETRY_SCHEMA.B_SPLINE_CURVE' IN TYPEOF (closed_curve)) 
            AND (closed_curve\b_spline_curve.closed_curve = TRUE) ) OR 
       ( ('GEOMETRY_SCHEMA.COMPOSITE_CURVE' IN TYPEOF (closed_curve)) 
            AND (closed_curve\composite_curve.closed_curve = TRUE) ) OR 
       ( ('GEOMETRY_SCHEMA.POLYLINE' IN TYPEOF (closed_curve)) 
            AND (closed_curve\polyline.points[LOINDEX(closed_curve\polyline.points)] = 
                 closed_curve\polyline.points[HIINDEX(closed_curve\polyline.points)]) );
END_ENTITY;
--GP Here is informal proposition IP1: The closed_curve shall be closed and not self-intersecting.
--GP However, I am not able to write a where rule, using Part 42 entities, for the property "closed".
--LK apply the same as for annoation_fill_area once we have decided

ENTITY fill_area_style_tile_curve_with_style
  SUBTYPE OF (geometric_representation_item);
  styled_curve : annotation_curve_occurrence;
END_ENTITY;

ENTITY fill_area_style_tile_symbol_with_style
  SUBTYPE OF (geometric_representation_item);
  symbol : annotation_symbol_occurrence;
END_ENTITY;

ENTITY fill_area_style_tiles
  SUBTYPE OF (geometric_representation_item);
  tiling_pattern : two_direction_repeat_factor;
  tiles          : SET [1:?] OF fill_area_style_tile_shape_select;
  tiling_scale   : positive_ratio_measure;
END_ENTITY;

ENTITY invisibility;
  invisible_items : SET [1:?] OF invisible_item;
END_ENTITY;

ENTITY occlusion_precedence;
  higher_precedence : hiding_or_blanking_select;
  lower_precedence  : hiding_or_blanking_select;
  occlusion_context : representation;
WHERE
  WR1: acyclic_occlusion_precedence (SELF, [SELF.lower_precedence]);
END_ENTITY;

ENTITY one_direction_repeat_factor
  SUBTYPE OF (geometric_representation_item);
  repeat_factor : vector;
END_ENTITY;

ENTITY over_riding_styled_item
  SUBTYPE OF (styled_item);
  over_ridden_style : styled_item;
END_ENTITY;

ENTITY point_style
  SUBTYPE OF (founded_item); --LK add
  name          : label;
  marker        : marker_select;
  marker_size   : size_select;
  marker_colour : colour;
END_ENTITY;

ENTITY pre_defined_character_spacing
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY pre_defined_curve_font
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY pre_defined_hatch_style
  SUBTYPE OF (pre_defined_item, geometric_representation_item);
END_ENTITY;

ENTITY pre_defined_marker
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY pre_defined_presentation_style
  SUBTYPE OF (founded_item, pre_defined_item); --GL added founded_item
END_ENTITY;

ENTITY pre_defined_size
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY pre_defined_surface_side_style
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY pre_defined_tile
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY pre_defined_tile_style
  SUBTYPE OF (pre_defined_item, geometric_representation_item);
END_ENTITY;

ENTITY presentation_style_assignment
  SUBTYPE OF (founded_item); --LK added
  styles : SET [1:?] OF presentation_style_select;
WHERE
  WR1: SIZEOF (QUERY (style1 <* SELF.styles |
         NOT (SIZEOF (QUERY (style2 <* (SELF.styles - style1) |
           NOT ((TYPEOF (style1) <> TYPEOF (style2)) OR
             (SIZEOF (['PRESENTATION_APPEARANCE_SCHEMA.' +
                       'SURFACE_STYLE_USAGE',
                       'PRESENTATION_APPEARANCE_SCHEMA.'+
                       'EXTERNALLY_DEFINED_STYLE'] *
                     TYPEOF (style1)) = 1)
           ))) = 0
         ))) = 0;
  WR2: SIZEOF (QUERY (style1 <* SELF.styles |
         'PRESENTATION_APPEARANCE_SCHEMA.SURFACE_STYLE_USAGE' IN
         TYPEOF(style1)
         )) <= 2;
--GP The rule WR3 below is added for the following informal proposition:
--GP IP3: If there are two instances of surface_style_usage in the set of styles, each shall specify the style for opposite sides of the surface being styled., --LK ok
  WR3: SIZEOF (QUERY (style1 <* SELF.styles |
         ('PRESENTATION_APPEARANCE_SCHEMA.SURFACE_STYLE_USAGE' IN TYPEOF (style1)) AND 
         (SIZEOF (QUERY (style2 <* (SELF.styles - style1) |
           ('PRESENTATION_APPEARANCE_SCHEMA.SURFACE_STYLE_USAGE' IN TYPEOF (style2)) AND 
           ((style1\surface_style_usage.side = both) OR 
           (style2\surface_style_usage.side = both) OR 
           (style1\surface_style_usage.side = style2\surface_style_usage.side)) )) > 0))) = 0;
END_ENTITY;
--GP It seems difficult, if possible at all, to write a where rule for the informal proposition IP1.
--GP For me, IP2 is not clear. In my opinion, IP2 contradicts WR1. 
-- LK: Let us remove IP2 because it is not clear what unique means here and what is not covered by WR1 and new WR3

ENTITY presentation_style_by_context
  SUBTYPE OF (presentation_style_assignment);
  style_context : style_context_select;
END_ENTITY;

ENTITY symbol_colour;
  colour_of_symbol : colour;
END_ENTITY;

ENTITY symbol_element_style
  SUBTYPE OF (founded_item); --GL added
  style_of_symbol : presentation_style_assignment;
WHERE
  WR1: SIZEOF (QUERY ( style <* SELF.style_of_symbol.styles |
         'PRESENTATION_APPEARANCE_SCHEMA.SYMBOL_STYLE' IN
         TYPEOF (style))) = 0;
  WR2: NOT ('PRESENTATION_APPEARANCE_SCHEMA.' +
            'PRESENTATION_STYLE_BY_CONTEXT' IN
            TYPEOF (SELF.style_of_symbol)
           );
END_ENTITY;

ENTITY symbol_style
  SUBTYPE OF (founded_item); --LK added
  name            : label; 
  style_of_symbol : symbol_style_select;
END_ENTITY;

ENTITY styled_item
  SUBTYPE OF (representation_item);
  styles :  SET [1:?] OF presentation_style_assignment;
  item   :  representation_item;
WHERE
  WR1: (SIZEOF(SELF.styles) = 1)
               XOR
       (SIZEOF(QUERY(pres_style <* SELF.styles |
         NOT ('PRESENTATION_APPEARANCE_SCHEMA.' +
              'PRESENTATION_STYLE_BY_CONTEXT' IN
         TYPEOF(pres_style))
         )) = 0);
END_ENTITY;

ENTITY surface_rendering_properties;
  rendered_colour : colour;
END_ENTITY;

ENTITY surface_side_style
  SUBTYPE OF (founded_item); --LK added
  name   : label;
  styles : SET [1:7] OF surface_style_element_select;
WHERE
  WR1: SIZEOF(QUERY( style1 <* SELF.styles |
         SIZEOF(QUERY( style2 <* SELF.styles - style1 |
           TYPEOF(style1) = TYPEOF(style2)
           )) > 0
         )) = 0;
END_ENTITY;

ENTITY surface_style_boundary
  SUBTYPE OF (founded_item); --GL added
  style_of_boundary : curve_or_render;
END_ENTITY;

ENTITY surface_style_control_grid
  SUBTYPE OF (founded_item); --GL added
  style_of_control_grid : curve_or_render;
END_ENTITY;

ENTITY surface_style_fill_area
  SUBTYPE OF (founded_item); --GL added
  fill_area : fill_area_style;
END_ENTITY;

ENTITY surface_style_parameter_line
  SUBTYPE OF (founded_item); --GL added
  style_of_parameter_lines : curve_or_render;
  direction_counts         : SET [1:2] OF direction_count_select;
WHERE
  WR1: (HIINDEX(SELF.direction_counts) = 1)
                        XOR
       (TYPEOF(SELF.direction_counts[1]) <>
          TYPEOF(SELF.direction_counts[2]));
END_ENTITY;

ENTITY surface_style_reflectance_ambient;
  ambient_reflectance : REAL;
END_ENTITY;

ENTITY surface_style_reflectance_ambient_diffuse
  SUBTYPE OF (surface_style_reflectance_ambient);
  diffuse_reflectance : REAL;
END_ENTITY;

ENTITY surface_style_reflectance_ambient_diffuse_specular
  SUBTYPE OF (surface_style_reflectance_ambient_diffuse);
  specular_reflectance : REAL;
  specular_exponent    : REAL;
  specular_colour      : colour;
END_ENTITY;

ENTITY surface_style_rendering;
  rendering_method : shading_surface_method;
  surface_colour   : colour;
END_ENTITY;

ENTITY surface_style_rendering_with_properties
  SUBTYPE OF (surface_style_rendering);
  properties : SET [1:2] OF rendering_properties_select;
WHERE
  WR1: (HIINDEX(SELF.properties) = 1)
                   XOR
       (TYPEOF(SELF.properties[1]) <> TYPEOF(SELF.properties[2]));
END_ENTITY;

ENTITY surface_style_segmentation_curve
  SUBTYPE OF (founded_item); --GL added
  style_of_segmentation_curve : curve_or_render;
END_ENTITY;

ENTITY surface_style_silhouette
  SUBTYPE OF (founded_item); --GL added
  style_of_silhouette : curve_or_render;
END_ENTITY;

ENTITY surface_style_transparent;
  transparency : REAL;
WHERE
  WR1: {0.0 <= transparency <= 1.0};
END_ENTITY;

ENTITY surface_style_usage
  SUBTYPE OF (founded_item); --LK added
  side  : surface_side;
  style : surface_side_style_select;
END_ENTITY;

ENTITY text_style
  SUBTYPE OF (founded_item); --LK added
  name                 : label;
  character_appearance : character_style_select;
END_ENTITY;

ENTITY text_style_for_defined_font;
  text_colour : colour;
END_ENTITY;

ENTITY text_style_with_box_characteristics
  SUBTYPE OF (text_style);
  characteristics : SET [1:4] OF box_characteristic_select;
WHERE
  WR1: SIZEOF( QUERY( c1 <* SELF.characteristics |
         SIZEOF( QUERY( c2 <* SELF.characteristics - c1 |
           TYPEOF (c1) = TYPEOF (c2)
           )) > 0
       )) = 0;
END_ENTITY;

ENTITY text_style_with_justification
  SUBTYPE OF (text_style);
  justification : text_justification;
END_ENTITY;

ENTITY text_style_with_mirror
  SUBTYPE OF (text_style);
  mirror_placement : axis2_placement;
END_ENTITY;

ENTITY text_style_with_spacing
  SUBTYPE OF (text_style);
  character_spacing : character_spacing_select;
END_ENTITY;

ENTITY two_direction_repeat_factor
  SUBTYPE OF (one_direction_repeat_factor);
  second_repeat_factor : vector;
END_ENTITY;


FUNCTION acyclic_occlusion_precedence
   ( relation : occlusion_precedence;
     set_of_lower : SET OF hiding_or_blanking_select ) : BOOLEAN;
   LOCAL
      x : SET OF occlusion_precedence;
      local_set_of_lower : SET OF hiding_or_blanking_select;
   END_LOCAL;
   REPEAT i:=1 TO HIINDEX(set_of_lower);
      IF relation.higher_precedence :=: set_of_lower[i] THEN
         RETURN(FALSE);
      END_IF;
   END_REPEAT;
   x := bag_to_set (USEDIN ( relation.higher_precedence,
                   'PRESENTATION_APPEARANCE_SCHEMA.'+
           'OCCLUSION_PRECEDENCE.LOWER_PRECEDENCE'));
   local_set_of_lower := set_of_lower + relation.higher_precedence;
   IF SIZEOF (x) > 0 THEN
      REPEAT i:=1 TO HIINDEX (x);
         If NOT acyclic_occlusion_precedence(x[i] ,
 
                                     local_set_of_lower) THEN
            RETURN (FALSE);
         END_IF;
      END_REPEAT;
   END_IF;
   RETURN (TRUE);
END_FUNCTION;

SUBTYPE_CONSTRAINT founded_item_subtypes FOR founded_item;
  ONEOF (approximation_tolerance,
    approximation_tolerance_deviation,
    approximation_tolerance_parameter,
    character_glyph_style_outline,
    character_glyph_style_stroke,
    curve_style,
    curve_style_font,
    curve_style_font_and_scaling,
    curve_style_font_pattern,
    externally_defined_style,
    fill_area_style,
    point_style,
    pre_defined_presentation_style,
    presentation_style_assignment,
    surface_side_style,
    surface_style_boundary,
    surface_style_control_grid,
    surface_style_fill_area,
    surface_style_parameter_line,
    surface_style_segmentation_curve,
    surface_style_silhouette,
    surface_style_usage,
    symbol_element_style,
    symbol_style,
    text_style);
END_SUBTYPE_CONSTRAINT;

END_SCHEMA; -- presentation_appearance_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\presentation_definition_schema\presentation_definition_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n953.exp *)

SCHEMA presentation_definition_schema;
 
REFERENCE FROM external_reference_schema
    (externally_defined_item,
     pre_defined_item);
 
REFERENCE FROM geometry_schema
    (axis2_placement,
     b_spline_curve, -- GL added
     composite_curve,-- GL added
     curve,
     geometric_representation_item,
     point,
     polyline -- GL added
     );
 
REFERENCE FROM measure_schema
    (positive_ratio_measure);
 
REFERENCE FROM presentation_appearance_schema
    (styled_item);
 
REFERENCE FROM presentation_resource_schema
    (character_glyph_symbol,
     planar_box,
     planar_extent,
     font_select,
     text_font);
 
REFERENCE FROM representation_schema
    (item_in_context,
     mapped_item,
     representation,
     representation_item,
     representation_map,
     representation_relationship,
     representation_relationship_with_transformation,
     using_representations);

REFERENCE FROM support_resource_schema
    (label,
     text,
     bag_to_set);

TYPE annotation_symbol_occurrence_item = SELECT ( --LK
  annotation_symbol,
  defined_symbol
); END_TYPE;

TYPE defined_glyph_select = SELECT
  (pre_defined_character_glyph,
   externally_defined_character_glyph);
END_TYPE;

TYPE defined_symbol_select = SELECT
  (pre_defined_symbol,
   externally_defined_symbol);
END_TYPE;

TYPE text_alignment = label;
END_TYPE;

TYPE text_delineation = label;
END_TYPE;

TYPE text_or_character = SELECT
  (annotation_text,
   annotation_text_character,
   defined_character_glyph,
   composite_text,
   text_literal);
END_TYPE;

TYPE text_path = ENUMERATION OF
  (left,
   right,
   up,
   down);
END_TYPE;

TYPE annotation_table_occurrence_item = SELECT(annotation_table, defined_table); END_TYPE; --LK add

TYPE annotation_text_occurrence_item = SELECT(text_literal, annotation_text, annotation_text_character, defined_character_glyph, composite_text); END_TYPE; --LK new

SUBTYPE_CONSTRAINT pds_geometric_representation_item_subtypes FOR geometric_representation_item;  
    (ONEOF ( 
	annotation_fill_area,
	composite_text,
	curve,
	defined_character_glyph,
	defined_symbol,
	point,
	symbol_target,
	text_literal)); 
END_SUBTYPE_CONSTRAINT; 

TYPE presentable_text = STRING;
--LK WRx: IP1: The string shall not contain any control characters. EXAMPLE    IP1 prohibits linefeed and carriage return characters in presentable_text. 
--GP Is it possible, using Express, to enumerate all control characters?
--GP All such characters except newline character \n are out of Express definition (Clause 7.1).
--LK write function with to llop through all characters and check for 09, 0A, 0D, see 7.5.4 String literal (\x9 | \xA | \xD)
WHERE
  WR1: control_characters_free(SELF);
END_TYPE;

TYPE text_string_representation_item = SELECT(text_literal, annotation_text, annotation_text_character, defined_character_glyph, composite_text, axis2_placement); END_TYPE; --LK new

ENTITY annotation_curve_occurrence
  SUBTYPE OF (annotation_occurrence);
  SELF\styled_item.item : curve; --LK
--LK WHERE
--LK   WR1: 'GEOMETRY_SCHEMA.CURVE' IN TYPEOF (SELF\styled_item.item);
END_ENTITY;

ENTITY annotation_fill_area
  SUBTYPE OF (geometric_representation_item);
  boundaries : SET [1:?] OF curve;
--LK WRx: IP1: All the curves in the set boundaries shall be closed and planar. 
--   restrict to closed curves in 2D. These are circle, ellipse, closed polyline, closed composite_curve, closed b-spline_curve. Exclude all others
WHERE
--GP for 'closed' property, where rule WR1 below is added
--GL - Either it is 3d OR we require only particular type of curves.
  WR1: (SELF\geometric_representation_item.dim = 3) OR SIZEOF (QUERY (curve <* SELF.boundaries |
          NOT (
              ('GEOMETRY_SCHEMA.CIRCLE' IN TYPEOF (curve)) OR 
              ('GEOMETRY_SCHEMA.ELLIPSE' IN TYPEOF (curve)) OR 
              ( ('GEOMETRY_SCHEMA.B_SPLINE_CURVE' IN TYPEOF (curve)) 
                   AND (curve\b_spline_curve.closed_curve = TRUE) ) OR 
              ( ('GEOMETRY_SCHEMA.COMPOSITE_CURVE' IN TYPEOF (curve)) 
                   AND (curve\composite_curve.closed_curve = TRUE) ) OR 
              ( ('GEOMETRY_SCHEMA.POLYLINE' IN TYPEOF (curve)) 
                   AND (curve\polyline.points[LOINDEX(curve\polyline.points)] = 
                        curve\polyline.points[HIINDEX(curve\polyline.points)]) )
              ) )) = 0;
--GP Case 1: "closed". It is not clear if it is possible to check closeness using entities from Part 42.
--GP both b_spline_curve and composite_curve have (informal) attributes for closeness. 
--GP circle and ellipse are closed by definition, polyline may be sometimes closed and this could be checked.
--GP However, how to know closeness of other types like surface_curve and its subtypes, circular_involute, curve_replica, offset_curve_2d and so on?
--GP Case 2: "planar". Looking at Part 42, absolutely no idea how this property can be realized with 
--GP expressions manipulating existing entities and their attributes.
-- LK: checking for intersection is not possible
-- LK: checking on planar might be done by constraining dimensiality to 2. Need further discussion with Ray+Giedrius on this. Have to support Section_view in ISO 16792.
END_ENTITY;

ENTITY annotation_fill_area_occurrence
  SUBTYPE OF (annotation_occurrence);
  fill_style_target : point;
  SELF\styled_item.item : annotation_fill_area; --LK
--LK WHERE
--LK   WR1: 'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_FILL_AREA' IN
--LK          TYPEOF (SELF.item);
END_ENTITY;

ENTITY annotation_occurrence
  SUPERTYPE OF (ONEOF(annotation_point_occurrence,
                      annotation_curve_occurrence,
                      annotation_fill_area_occurrence,
                      annotation_text_occurrence,
                      annotation_symbol_occurrence))
  SUBTYPE OF (styled_item);
  WHERE
    WR1: 'GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_ITEM' IN
           TYPEOF (SELF);
--LK WRx: The annotation_occurrences shall be used only in representations which are defined for annotation purposes: area_dependent_annotation_representation, view_dependent_annotation_representation, 
-- LK: From normative text we have to remove curve_style_curve_pattern, fill_area_style_tile_curve_with_style, or fill_area_style_tile_coloured_region. 
    WR2: SIZEOF (QUERY (reps <* using_representations(SELF) | 
      NOT('PRESENTATION_ORGANIZATION_SCHEMA.ANNOTATION_REPRESENTATION_SELECT' IN TYPEOF(reps)))) = 0;
END_ENTITY;

ENTITY annotation_occurrence_relationship;
  name                           : label;
  description                    : text;
  relating_annotation_occurrence : annotation_occurrence;
  related_annotation_occurrence  : annotation_occurrence;
END_ENTITY;

ENTITY annotation_point_occurrence
  SUBTYPE OF (annotation_occurrence);
  SELF\styled_item.item : point; --LK
--LK WHERE
--LK   WR1: 'GEOMETRY_SCHEMA.POINT' IN TYPEOF (SELF\styled_item.item);
END_ENTITY;

ENTITY annotation_symbol
  SUBTYPE OF(mapped_item);
  SELF\mapped_item.mapping_source : symbol_representation_map; --LK new
  SELF\mapped_item.mapping_target : symbol_target; --LK new
  WHERE
  --LK WR1: 'PRESENTATION_DEFINITION_SCHEMA.SYMBOL_REPRESENTATION_MAP' IN
  --LK       TYPEOF (SELF\mapped_item.mapping_source);
  --LK WR2: 'PRESENTATION_DEFINITION_SCHEMA.SYMBOL_TARGET' IN
  --LK        TYPEOF (SELF\mapped_item.mapping_target);
  WR1: 'GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_ITEM' IN
          TYPEOF (SELF);
END_ENTITY;

ENTITY annotation_symbol_occurrence
  SUBTYPE OF (annotation_occurrence);
  SELF\styled_item.item : annotation_symbol_occurrence_item; --LK
--LK WHERE
--LK   WR1: SIZEOF(
--LK          ['PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_SYMBOL',
--LK           'PRESENTATION_DEFINITION_SCHEMA.DEFINED_SYMBOL'] *
--LK          TYPEOF(SELF\styled_item.item)) > 0;
END_ENTITY;

ENTITY annotation_table
  SUBTYPE OF(annotation_symbol);
WHERE
  WR1: 'PRESENTATION_DEFINITION_SCHEMA.TABLE_REPRESENTATION' IN
        TYPEOF (SELF\mapped_item.mapping_source.mapped_representation);
END_ENTITY;

ENTITY annotation_table_occurrence
  SUBTYPE OF (annotation_symbol_occurrence);
  SELF\styled_item.item : annotation_table_occurrence_item; --LK add
--LK WHERE
--LK   WR1: SIZEOF (
--LK          ['PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TABLE',
--LK           'PRESENTATION_DEFINITION_SCHEMA.DEFINED_TABLE'] *
--LK          TYPEOF (SELF\styled_item.item)) > 0;
END_ENTITY;

ENTITY annotation_text
  SUBTYPE OF (mapped_item); --LK would be good to make this also subtype of geometric_representation_item
  SELF\mapped_item.mapping_target : axis2_placement; --LK new
WHERE
--LK  WR1: 'GEOMETRY_SCHEMA.AXIS2_PLACEMENT' IN
--LK       TYPEOF( SELF\mapped_item.mapping_target);
  WR1: 'PRESENTATION_DEFINITION_SCHEMA.TEXT_STRING_REPRESENTATION' IN
       TYPEOF( SELF\mapped_item.mapping_source.mapped_representation);
  WR2: 'GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_ITEM' IN
       TYPEOF( SELF);
END_ENTITY;


ENTITY annotation_text_character
  SUBTYPE OF (mapped_item); --LK would be good to make this subtype of geometric_representation_item
  alignment : text_alignment;
  SELF\mapped_item.mapping_target : axis2_placement; --LK new
WHERE
  WR1: 'PRESENTATION_RESOURCE_SCHEMA.CHARACTER_GLYPH_SYMBOL' IN
         TYPEOF (SELF\mapped_item.mapping_source.mapped_representation);
--LK  WR2: 'GEOMETRY_SCHEMA.AXIS2_PLACEMENT' IN
--LK         TYPEOF (SELF\mapped_item.mapping_target);
  WR2: 'GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_ITEM' IN
        TYPEOF (SELF);
END_ENTITY;


ENTITY annotation_text_occurrence
  SUBTYPE OF (annotation_occurrence);
  SELF\styled_item.item : annotation_text_occurrence_item;
--LK WHERE
--LK   WR1: SIZEOF (
--LK          ['PRESENTATION_DEFINITION_SCHEMA.TEXT_LITERAL',
--LK           'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT',
--LK           'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT_CHARACTER',
--LK           'PRESENTATION_DEFINITION_SCHEMA.DEFINED_CHARACTER_GLYPH',
--LK           'PRESENTATION_DEFINITION_SCHEMA.COMPOSITE_TEXT'] *
--LK          TYPEOF (SELF\styled_item.item)) > 0;
END_ENTITY;

ENTITY annotation_text_with_associated_curves
  SUBTYPE OF (annotation_text);
  associated_curves : SET[1:?] of curve;
END_ENTITY;

ENTITY annotation_text_with_blanking_box
  SUBTYPE OF (annotation_text);
  blanking : planar_box;
END_ENTITY;

ENTITY annotation_text_with_delineation
  SUBTYPE OF (annotation_text);
  delineation : text_delineation;
END_ENTITY;

ENTITY annotation_text_with_extent
  SUBTYPE OF (annotation_text);
  extent : planar_extent;
END_ENTITY;

ENTITY composite_text
  SUBTYPE OF (geometric_representation_item);
  collected_text : SET[2:?] of text_or_character;
WHERE
  WR1: acyclic_composite_text( SELF, SELF.collected_text);
END_ENTITY;

ENTITY composite_text_with_associated_curves
  SUBTYPE OF (composite_text);
  associated_curves : SET[1:?] of curve;
END_ENTITY;

ENTITY composite_text_with_blanking_box
  SUBTYPE OF (composite_text);
  blanking : planar_box;
END_ENTITY;

ENTITY composite_text_with_delineation
  SUBTYPE OF (composite_text);
  delineation : text_delineation;
END_ENTITY;

ENTITY composite_text_with_extent
  SUBTYPE OF (composite_text);
  extent : planar_extent;
END_ENTITY;

ENTITY defined_character_glyph
  SUBTYPE OF(geometric_representation_item);
  definition : defined_glyph_select;
  placement  : axis2_placement;
END_ENTITY;

ENTITY defined_symbol
  SUBTYPE OF(geometric_representation_item);
  definition : defined_symbol_select;
  target     : symbol_target;
END_ENTITY;

ENTITY defined_table
  SUBTYPE OF(defined_symbol);
END_ENTITY;

ENTITY externally_defined_character_glyph
  SUBTYPE OF (externally_defined_item);
END_ENTITY;

ENTITY externally_defined_symbol
  SUBTYPE OF (externally_defined_item);
END_ENTITY;

ENTITY pre_defined_character_glyph
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY pre_defined_symbol
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY symbol_representation
  SUBTYPE OF (representation);
END_ENTITY;

ENTITY symbol_representation_map
  SUBTYPE OF (representation_map);
  SELF\representation_map.mapped_representation : symbol_representation; --LK
  SELF\representation_map.mapping_origin : axis2_placement; --LK
--LK WHERE
--LK  WR1: 'PRESENTATION_DEFINITION_SCHEMA.SYMBOL_REPRESENTATION' IN
--LK         TYPEOF (SELF\representation_map.mapped_representation);
--LK  WR2: 'GEOMETRY_SCHEMA.AXIS2_PLACEMENT' IN
--LK         TYPEOF (SELF\representation_map.mapping_origin);
END_ENTITY;

ENTITY symbol_representation_relationship
  SUBTYPE OF (representation_relationship_with_transformation);
  SELF\representation_relationship.rep_1 : symbol_representation; --LK
  SELF\representation_relationship.rep_2 : symbol_representation; --LK
WHERE
  WR1: acyclic_symbol_representation_relationship (SELF,
                                                   [SELF\representation_relationship.
                                                         rep_2]);
--LK  WR2: 'PRESENTATION_DEFINITION_SCHEMA.SYMBOL_REPRESENTATION' IN
--LK         TYPEOF (SELF\representation_relationship.rep_1);
--LK  WR3: 'PRESENTATION_DEFINITION_SCHEMA.SYMBOL_REPRESENTATION'IN
--LK          TYPEOF (SELF\representation_relationship.rep_2);
END_ENTITY;

ENTITY symbol_representation_with_blanking_box
  SUBTYPE OF (symbol_representation);
  blanking : planar_box;
WHERE
  WR1: item_in_context (SELF.blanking, SELF\representation.context_of_items);
END_ENTITY;

ENTITY symbol_target
  SUBTYPE OF (geometric_representation_item);
  placement         : axis2_placement;
  x_scale           : positive_ratio_measure;
  y_scale           : positive_ratio_measure;
END_ENTITY;

ENTITY table_representation
  SUBTYPE OF (symbol_representation);
--LK WRx: "table_representations may only be related with table_representation_relationship entities."
--GP This statement is wrong: table_representations may also be related through mapped_item with other entities.
--GP See 5.4.8 annotation_table, for example.
-- wr1: all users of representation_relationship.rep_1 or rep_2 should be a table_representation_relationship
--GP inserted the rule below
WHERE
  WR1: (SIZEOF (QUERY (trr <* USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                                             'REPRESENTATION_RELATIONSHIP.REP_1') | 
          NOT ('PRESENTATION_DEFINITION_SCHEMA.TABLE_REPRESENTATION_RELATIONSHIP' IN TYPEOF (trr)) 
              )) = 0) AND 
       (SIZEOF (QUERY (trr <* USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                                             'REPRESENTATION_RELATIONSHIP.REP_2') | 
          NOT ('PRESENTATION_DEFINITION_SCHEMA.TABLE_REPRESENTATION_RELATIONSHIP' IN TYPEOF (trr)) 
              )) = 0);
END_ENTITY;

ENTITY table_record_field_representation
  SUBTYPE OF (symbol_representation);
WHERE
  WR1: (SIZEOF(USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                            'REPRESENTATION_RELATIONSHIP.REP_2')) > 0) 
                        OR 
       (SIZEOF(QUERY( map_item <* USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                                               'REPRESENTATION_MAP.'+ 
                                               'MAPPED_REPRESENTATION') | 
         SIZEOF(QUERY( mi <* USEDIN(map_item, 'REPRESENTATION_SCHEMA.'+
                                              'MAPPED_ITEM.'+
                                              'MAPPING_SOURCE') |   
               SIZEOF(QUERY( rep <* using_representations (mi) |                              
                                         'PRESENTATION_DEFINITION_SCHEMA.'+
                                          'TABLE_RECORD_REPRESENTATION' IN 
                                          TYPEOF (rep))) > 0
         )) > 0))  
                    > 0);
END_ENTITY;

ENTITY table_record_field_representation_with_clipping_box
  SUBTYPE OF (table_record_field_representation);
  clipping_box : planar_box;
WHERE
   WR1: item_in_context (SELF.clipping_box, 
                         SELF\representation.context_of_items);
END_ENTITY;

ENTITY table_record_representation
  SUBTYPE OF (symbol_representation);
WHERE
  WR1: (SIZEOF(USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                            'REPRESENTATION_RELATIONSHIP.REP_2')) > 0) 
                        OR 
       (SIZEOF(QUERY( map_item <* USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                                               'REPRESENTATION_MAP.'+ 
                                               'MAPPED_REPRESENTATION') | 
         SIZEOF(QUERY( mi <* USEDIN(map_item, 'REPRESENTATION_SCHEMA.'+
                                              'MAPPED_ITEM.'+
                                              'MAPPING_SOURCE') |   
	            SIZEOF(QUERY( rep <* using_representations (mi) |                              
	                             'PRESENTATION_DEFINITION_SCHEMA.'+
	                              'TABLE_REPRESENTATION' IN 
	                              TYPEOF (rep))) > 0

         )) > 0))  
                    > 0);
--LK WRx:  table_record_representations may only be related by table_representation_relationships. 
-- WR: all users of representation_relationship.rep1/2 must be of type table_representation_relationships
--GP inserted the rule below
  WR2: (SIZEOF (QUERY (trr <* USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                                             'REPRESENTATION_RELATIONSHIP.REP_1') | 
          NOT ('PRESENTATION_DEFINITION_SCHEMA.TABLE_REPRESENTATION_RELATIONSHIP' IN TYPEOF (trr)) 
              )) = 0) AND 
       (SIZEOF (QUERY (trr <* USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                                             'REPRESENTATION_RELATIONSHIP.REP_2') | 
          NOT ('PRESENTATION_DEFINITION_SCHEMA.TABLE_REPRESENTATION_RELATIONSHIP' IN TYPEOF (trr)) 
              )) = 0);
END_ENTITY;

ENTITY table_representation_relationship
  SUBTYPE OF (symbol_representation_relationship);
WHERE
  WR1: NOT ('PRESENTATION_DEFINITION_SCHEMA.TABLE_RECORD_REPRESENTATION' IN
            TYPEOF (SELF\representation_relationship.rep_1))   
         OR
       ('PRESENTATION_DEFINITION_SCHEMA.TABLE_RECORD_FIELD_REPRESENTATION' IN
         TYPEOF (SELF\representation_relationship.rep_2));
  WR2: NOT ('PRESENTATION_DEFINITION_SCHEMA.TABLE_REPRESENTATION' IN
             TYPEOF (SELF\representation_relationship.rep_1))   
         OR
       ('PRESENTATION_DEFINITION_SCHEMA.TABLE_RECORD_REPRESENTATION' IN
         TYPEOF (SELF\representation_relationship.rep_2));
  WR3: NOT ('PRESENTATION_DEFINITION_SCHEMA.TABLE_RECORD_FIELD_REPRESENTATION' IN
            TYPEOF (SELF\representation_relationship.rep_1)) 
         OR
       ('PRESENTATION_DEFINITION_SCHEMA.TABLE_RECORD_FIELD_REPRESENTATION' IN
         TYPEOF (SELF\representation_relationship.rep_2));
END_ENTITY;

ENTITY table_text_relationship
  SUBTYPE OF (annotation_occurrence_relationship);
  field : table_record_field_representation;
  SELF\annotation_occurrence_relationship.relating_annotation_occurrence : annotation_table_occurrence; --LK add
  SELF\annotation_occurrence_relationship.related_annotation_occurrence : annotation_text_occurrence; --LK add
WHERE
--LK  WR1: 'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TABLE_OCCURRENCE'
--LK       IN TYPEOF (SELF\annotation_occurrence_relationship.
--LK                  relating_annotation_occurrence);
  WR1: 'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TABLE'
       IN TYPEOF (SELF\annotation_occurrence_relationship.
                  relating_annotation_occurrence\styled_item.item);
--LK   WR3: 'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT_OCCURRENCE'
--LK        IN TYPEOF (SELF\annotation_occurrence_relationship.
--LK                   related_annotation_occurrence);
  WR2: field_in_table (SELF.field,
                       SELF\annotation_occurrence_relationship.
                       relating_annotation_occurrence);
END_ENTITY;

ENTITY text_literal
  SUBTYPE OF (geometric_representation_item);
  literal   : presentable_text;
  placement : axis2_placement;
  alignment : text_alignment;
  path      : text_path;
  font      : font_select;
END_ENTITY;

ENTITY text_literal_with_associated_curves
  SUBTYPE OF (text_literal);
  associated_curves : SET[1:?] of curve;
END_ENTITY;

ENTITY text_literal_with_blanking_box
  SUBTYPE OF (text_literal);
  blanking : planar_box;
END_ENTITY;

ENTITY text_literal_with_delineation
  SUBTYPE OF (text_literal);
  delineation : text_delineation;
END_ENTITY;

ENTITY text_literal_with_extent
  SUBTYPE OF (text_literal);
  extent : planar_extent;
END_ENTITY;

ENTITY text_string_representation
  SUBTYPE OF (representation);
  SELF\representation.items : SET[1:?] OF text_string_representation_item; --LK add
WHERE
--LK  WR1: SIZEOF (
--LK         QUERY (item <* SELF\representation.items |
--LK           SIZEOF (['PRESENTATION_DEFINITION_SCHEMA.TEXT_LITERAL',
--LK                    'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT',
--LK                    'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT_CHARACTER',
--LK                    'PRESENTATION_DEFINITION_SCHEMA.DEFINED_CHARACTER_GLYPH',
--LK                    'PRESENTATION_DEFINITION_SCHEMA.COMPOSITE_TEXT',
--LK                    'GEOMETRY_SCHEMA.AXIS2_PLACEMENT'] * TYPEOF (item)) = 0
--LK         )) = 0;
  WR1: SIZEOF (
         QUERY (item <* SELF\representation.items |
           NOT (SIZEOF (['PRESENTATION_DEFINITION_SCHEMA.TEXT_LITERAL',
                         'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT',
                         'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT_CHARACTER',
                         'PRESENTATION_DEFINITION_SCHEMA.DEFINED_CHARACTER_GLYPH',
                         'PRESENTATION_DEFINITION_SCHEMA.COMPOSITE_TEXT'] *
                 TYPEOF (item)) = 0)
         )) >= 1;
  WR2: SIZEOF (
         QUERY (a2p <* 
           QUERY (item <* SELF\representation.items | 
             'GEOMETRY_SCHEMA.AXIS2_PLACEMENT' IN TYPEOF (item)) |
           NOT ((SIZEOF (
             QUERY (at <* 
               QUERY (item <* SELF\representation.items | 
                  'PRESENTATION_DEFINITION_SCHEMA.' + 
                  'ANNOTATION_TEXT' IN TYPEOF (item)) | 
               (at\mapped_item.mapping_target :=: a2p))) >= 1) OR
           (SIZEOF (
             QUERY (atc <* 
               QUERY (item <* SELF\representation.items |
                 'PRESENTATION_DEFINITION_SCHEMA.' + 
                 'ANNOTATION_TEXT_CHARACTER' IN TYPEOF (item)) | 
               (atc\mapped_item.mapping_target :=: a2p))) >= 1)
          ))) = 0;
END_ENTITY;

FUNCTION acyclic_composite_text(start_composite : composite_text;
                                child_text : SET [1:?] OF
                                text_or_character) : LOGICAL;
  LOCAL
   i : INTEGER;
   local_composite_text : SET [0:?] OF composite_text;
   local_annotation_text : SET [0:?] OF annotation_text;
   local_children : SET [0:?] OF text_or_character;
  END_LOCAL;

  local_composite_text := QUERY (child <* child_text |
                          ('PRESENTATION_DEFINITION_SCHEMA.COMPOSITE_TEXT'
                           IN TYPEOF (child)));

  IF (SIZEOF (local_composite_text) > 0) THEN
    REPEAT i := 1 TO HIINDEX (local_composite_text);
      IF (start_composite :=: local_composite_text[i]) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;

  local_children := child_text;

  IF (SIZEOF (local_composite_text)) > 0 THEN
    REPEAT i := 1 TO HIINDEX (local_composite_text);
      local_children := local_children +
                        local_composite_text[i].collected_text;
    END_REPEAT;
  END_IF;


  local_annotation_text := QUERY (child <* child_text |
                          ('PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT'
                           IN TYPEOF (child)));

  IF (SIZEOF (local_annotation_text) > 0) THEN
    REPEAT i := 1 TO HIINDEX (local_annotation_text);
      local_children := local_children +
      QUERY (item <* local_annotation_text[i]\mapped_item.
                     mapping_source.mapped_representation.items |
        SIZEOF(['PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT',
                'PRESENTATION_DEFINITION_SCHEMA.COMPOSITE_TEXT'] *
                TYPEOF(item)) > 0);
    END_REPEAT;
  END_IF;

  IF (local_children :<>: child_text) THEN
    RETURN (acyclic_composite_text (start_composite, local_children));
  ELSE
    RETURN (TRUE);
  END_IF;

 END_FUNCTION;

FUNCTION acyclic_symbol_representation_relationship
  (relation : symbol_representation_relationship;
   children : SET OF symbol_representation ) : BOOLEAN;
  LOCAL
    x : SET OF symbol_representation_relationship;
    local_children : SET OF symbol_representation;
  END_LOCAL;
 
  REPEAT i:=1 TO HIINDEX(children);
    IF relation\representation_relationship.rep_1 :=: children[i] THEN
      RETURN(FALSE);
    END_IF;
  END_REPEAT;
 
  x := bag_to_set (USEDIN ( relation\representation_relationship.rep_1,
                'REPRESENTATION_SCHEMA.'+
                'REPRESENTATION_RELATIONSHIP.'+ 'REP_2'));
  local_children := children + relation\representation_relationship.rep_1;
 
  IF SIZEOF (x) > 0 THEN
    REPEAT i:=1 TO HIINDEX (x);
      IF NOT acyclic_symbol_representation_relationship(x[i] , 
                                                local_children) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;
 
  RETURN (TRUE);
 
END_FUNCTION;

FUNCTION control_characters_free 
  (s : STRING) : BOOLEAN;

  LOCAL
    ch : STRING;
  END_LOCAL;

  REPEAT i:=1 TO LENGTH(s);
    ch := s[i];
    IF (ch = '\x9') OR (ch = '\xA') OR (ch = '\xD') THEN
       RETURN(FALSE);
    END_IF;
  END_REPEAT;
  RETURN (TRUE);

END_FUNCTION;

FUNCTION field_in_table (field : table_record_field_representation;
                         table : annotation_table_occurrence): BOOLEAN;
  LOCAL
    table_rep : table_representation;
    symbol_rep_rel_set : SET OF symbol_representation_relationship;
    mapped_item_set : SET OF mapped_item;
    table_record_rep_set : SET OF table_record_representation := [];
  END_LOCAL;
 
  table_rep := table\styled_item.item\mapped_item.mapping_source.
    mapped_representation;
  mapped_item_set := QUERY(item <* table_rep.items |
                       ('REPRESENTATION_SCHEMA.MAPPED_ITEM' IN
                        TYPEOF(item))
                                 AND
                       ('PRESENTATION_DEFINITION_SCHEMA.'+
                        'TABLE_RECORD_REPRESENTATION' IN
                         TYPEOF(item\mapped_item.mapping_source.
                                    mapped_representation ))
                     );
 
  REPEAT i := 1 TO HIINDEX(mapped_item_set);
    table_record_rep_set := table_record_rep_set +
           mapped_item_set[i].mapping_source.mapped_representation;
  END_REPEAT;
 
  symbol_rep_rel_set := bag_to_set (USEDIN(table_rep, 
                               'REPRESENTATION_SCHEMA.'+
                               'REPRESENTATION_RELATIONSHIP.REP_1'));
 
  REPEAT i := 1 TO HIINDEX(symbol_rep_rel_set);
     table_record_rep_set := table_record_rep_set +
              symbol_rep_rel_set[i]\representation_relationship.rep_2;
  END_REPEAT;
 
  IF SIZEOF(QUERY( table_record_rep <* table_record_rep_set |
--              (SIZEOF(QUERY( symbol_rep_rel <* USEDIN(table_record_rep,
--                            'PRESENTATION_DEFINITION_SCHEMA.'+
--                            'SYMBOL_REPRESENTATION_RELATIONSHIP.REP_1') |
--                       symbol_rep_rel\representation_relationship.rep_2 :=: field
              (SIZEOF(QUERY( rep_rel <* USEDIN(table_record_rep,
                            'REPRESENTATION_SCHEMA.'+
                            'REPRESENTATION_RELATIONSHIP.REP_1') |
                       ('PRESENTATION_DEFINITION_SCHEMA.' +
                       'SYMBOL_REPRESENTATION_RELATIONSHIP' IN TYPEOF(rep_rel)) AND  
                       (rep_rel.rep_2 :=: field)
                       )) > 0)
                       OR
              (SIZEOF(QUERY(item <* table_record_rep.items |
                        ('REPRESENTATION_SCHEMA.MAPPED_ITEM' IN
                         TYPEOF(item))
                                 AND
                        (field :=: item\mapped_item.mapping_source.
                                    mapped_representation )
                         )) > 0)
             )) = 0 THEN
    RETURN(FALSE);
  END_IF;
 
  RETURN(TRUE);
 
END_FUNCTION;

END_SCHEMA; -- presentation_definition_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\presentation_organization_schema\presentation_organization_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n953.exp *)

SCHEMA presentation_organization_schema;

REFERENCE FROM presentation_resource_schema
   (colour,
    planar_box,
    planar_extent,
    presentation_scaled_placement);

REFERENCE FROM presentation_definition_schema
    (annotation_occurrence,
     symbol_representation,
     symbol_representation_relationship);

REFERENCE FROM presentation_appearance_schema
    (styled_item);

REFERENCE FROM geometry_schema
    (axis2_placement,    -- LK add for area_dependent_annotation_representation
     axis2_placement_2d,
     axis2_placement_3d,
     cartesian_point,
     curve,
     direction,
     dot_product,
     geometric_representation_context,
     geometric_representation_item,
     plane
     );
 
REFERENCE FROM representation_schema
    (founded_item,
     item_defined_transformation,
     item_in_context,
     mapped_item,
     representation,
     representation_item,
     representation_map,
     representation_relationship,
     representation_relationship_with_transformation,
     using_representations);
 
REFERENCE FROM measure_schema
   (length_measure,
    positive_ratio_measure,
    positive_plane_angle_measure);
 
REFERENCE FROM support_resource_schema
    (identifier,
     label,
     text,
     bag_to_set);

TYPE area_or_view = SELECT 
  (presentation_area,
   presentation_view);
END_TYPE;

TYPE camera_model_d3_multi_clipping_interection_select = SELECT ( 
  camera_model_d3_multi_clipping_union, 
  plane); 
END_TYPE; 
 
TYPE camera_model_d3_multi_clipping_union_select = SELECT ( 
  camera_model_d3_multi_clipping_intersection, 
  plane); 
END_TYPE; 

TYPE central_or_parallel = ENUMERATION OF 
  (central, 
   parallel);
END_TYPE;

TYPE layered_item = SELECT 
  (presentation_representation,
   representation_item);
END_TYPE;

SUBTYPE_CONSTRAINT pos_geometric_representation_item_subtypes FOR geometric_representation_item;  
    (ONEOF ( 
	camera_model, 
	camera_model_d3_multi_clipping_intersection,
	camera_model_d3_multi_clipping_union, 
	curve,
	direction,
	light_source)); 
END_SUBTYPE_CONSTRAINT; 

TYPE presentation_representation_select = SELECT 
  (presentation_representation,
   presentation_set);
END_TYPE;

TYPE presentation_size_assignment_select = SELECT 
  (presentation_view,
   presentation_area,
   area_in_set);
END_TYPE;

-- LK new:
TYPE annotation_representation_select = EXTENSIBLE SELECT (
  area_dependent_annotation_representation, 
  symbol_representation,
  view_dependent_annotation_representation);
END_TYPE;

TYPE area_dependent_annotation_representation_item = SELECT (annotation_occurrence, axis2_placement); END_TYPE; --LK new

TYPE product_data_representation_view_item = SELECT (camera_image, axis2_placement); END_TYPE; --LK new

TYPE view_dependent_annotation_representation_item = SELECT (annotation_occurrence, axis2_placement); END_TYPE; --LK new

ENTITY area_dependent_annotation_representation
  SUBTYPE OF (presentation_representation);
  SELF\representation.items : SET[1:?] OF area_dependent_annotation_representation_item; --LK add
WHERE
--LK  WR1: SIZEOF (QUERY (item <* SELF\representation.items |
--LK       NOT (SIZEOF (['PRESENTATION_DEFINITION_SCHEMA.' +
--LK                     'ANNOTATION_OCCURRENCE',
--LK                     'GEOMETRY_SCHEMA.AXIS2_PLACEMENT'] * 
--LK            TYPEOF(item)) = 1
--LK       ))) = 0;
  WR1: SIZEOF (QUERY (item <* SELF\representation.items | 
       ('PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_OCCURRENCE' IN
         TYPEOF (item))
       )) >= 1;
--LK WRx:  it shall be contained in a presentation_area and it shall not be contained in a representation which is not a presentation_area
--GP WR3 below is added
  WR2: (SIZEOF (QUERY (prr <* USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                                             'REPRESENTATION_RELATIONSHIP.REP_2') | 
          'PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_AREA' IN
          TYPEOF (prr\representation_relationship.rep_1))) > 0)
                                  OR 
--GL better rename internal variable                          
--GL - don't we need a recursion for the case above?  
--LK: recursion is not needed, but we have to enforce its usage in another area_dependent_annotation_representation or presentation_area
-- GL: area_dependent_annotation_representation is not allowed. Here is a text from p46 description:
-- GL: "An area_dependent_annotation_representation may be related only to a presentation_area."
       (SIZEOF(QUERY( rm <* USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                                               'REPRESENTATION_MAP.'+ 
                                               'MAPPED_REPRESENTATION') | 
         SIZEOF(QUERY( mi <* USEDIN(rm, 'REPRESENTATION_SCHEMA.'+
                                              'MAPPED_ITEM.'+
                                              'MAPPING_SOURCE') |   
               SIZEOF(QUERY( rep <* using_representations (mi) |                              
                                         'PRESENTATION_ORGANIZATION_SCHEMA.'+
                                          'PRESENTATION_AREA' IN 
                                          TYPEOF (rep))) > 0
         )) > 0))  
                    > 0);
-- LK: we need to test for the specific subtype presentation_representation_relationship, only this gives the needed direction and fullfils by this the usage requirements          
-- LK: another issue is about a usage via mapped_item + representation_map
--GL: Added a new - Require that ALL users are presentation_areas.
  WR3: (SIZEOF (QUERY (prr <* USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                                             'REPRESENTATION_RELATIONSHIP.REP_2') | 
          NOT('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_AREA' IN
          TYPEOF (prr\representation_relationship.rep_1)))) = 0)
                                  AND 
       (SIZEOF(QUERY( rm <* USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                                               'REPRESENTATION_MAP.'+ 
                                               'MAPPED_REPRESENTATION') | 
         SIZEOF(QUERY( mi <* USEDIN(rm, 'REPRESENTATION_SCHEMA.'+
                                              'MAPPED_ITEM.'+
                                              'MAPPING_SOURCE') |   
               SIZEOF(QUERY( rep <* using_representations (mi) |                              
                                         NOT('PRESENTATION_ORGANIZATION_SCHEMA.'+
                                          'PRESENTATION_AREA' IN 
                                          TYPEOF (rep)))) > 0
                             
         )) > 0))  
                    = 0);

END_ENTITY;

ENTITY area_in_set;
  area   : presentation_area;
  in_set : presentation_set;
END_ENTITY;

ENTITY background_colour
  SUBTYPE OF (colour);
  presentation : area_or_view;
UNIQUE
  UR1:  presentation;
END_ENTITY;

ENTITY camera_image
  SUBTYPE OF (mapped_item); --LK we should add geometric_representation_item here and remove WR3 if we are allowed
  SELF\mapped_item.mapping_source : camera_usage; --LK
  SELF\mapped_item.mapping_target : planar_box; --LK
WHERE
  --LK WR1: 'PRESENTATION_ORGANIZATION_SCHEMA.CAMERA_USAGE'
  --LK      IN TYPEOF (SELF\mapped_item.mapping_source);
  --LK WR2: 'PRESENTATION_RESOURCE_SCHEMA.PLANAR_BOX'
  --LK      IN TYPEOF (SELF\mapped_item.mapping_target);
  WR1: 'GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_ITEM'
        IN TYPEOF (SELF);
END_ENTITY;

ENTITY camera_image_3d_with_scale
  SUBTYPE OF (camera_image);
DERIVE
  scale: positive_ratio_measure := ((SELF\mapped_item.mapping_target\
         planar_extent.size_in_x) / (SELF\mapped_item.mapping_source.
         mapping_origin\camera_model_d3.perspective_of_volume.view_window.
         size_in_x));
WHERE
  WR1: ('PRESENTATION_ORGANIZATION_SCHEMA.CAMERA_MODEL_D3'
       IN TYPEOF (SELF\mapped_item.mapping_source.mapping_origin));
  WR2: aspect_ratio(SELF\mapped_item.mapping_target) =
       aspect_ratio(SELF\mapped_item.mapping_source.mapping_origin\
       camera_model_d3.perspective_of_volume.view_window);
  WR3: SELF\mapped_item.mapping_source.mapping_origin\camera_model_d3.
       perspective_of_volume.front_plane_clipping
       AND
       SELF\mapped_item.mapping_source.mapping_origin\camera_model_d3.
       perspective_of_volume.view_volume_sides_clipping;
  WR4: (SELF\mapped_item.mapping_target\planar_extent.size_in_x > 0)
       AND
       (SELF\mapped_item.mapping_target\planar_extent.size_in_y > 0);
  WR5: (SELF\mapped_item.mapping_source.mapping_origin\camera_model_d3.
       perspective_of_volume.view_window.size_in_x > 0)
       AND
       (SELF\mapped_item.mapping_source.mapping_origin\camera_model_d3.
       perspective_of_volume.view_window.size_in_y > 0);
  WR6: ('GEOMETRY_SCHEMA.' +
       'AXIS2_PLACEMENT_2D' IN TYPEOF (SELF\mapped_item.
       mapping_target\planar_box.placement))
       AND NOT ('GEOMETRY_SCHEMA.' +
       'AXIS2_PLACEMENT_3D' IN TYPEOF (SELF\mapped_item.
       mapping_target\planar_box.placement));
END_ENTITY;

ENTITY camera_model
  ABSTRACT --LK added
  SUPERTYPE OF (ONEOF(camera_model_d2, camera_model_d3))
  SUBTYPE OF (geometric_representation_item);
WHERE
  WR1: (SIZEOF (USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                              'ITEM_DEFINED_TRANSFORMATION.' +
                              'TRANSFORM_ITEM_1')) +
        SIZEOF (USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                              'REPRESENTATION_MAP.MAPPING_ORIGIN'))
       ) > 0;
  WR2: SIZEOF(USEDIN(SELF,'PRESENTATION_APPEARANCE_SCHEMA.'+
                          'STYLED_ITEM.ITEM')) = 0;
END_ENTITY;

ENTITY camera_model_d2
  SUBTYPE OF (camera_model);
  view_window          : planar_box;
  view_window_clipping : BOOLEAN;
WHERE
  WR1: SELF\geometric_representation_item.dim = 2;
END_ENTITY;

ENTITY camera_model_d2_shape_clipping
  SUBTYPE OF (camera_model_d2);
  shape_clipping : curve;
END_ENTITY;

ENTITY camera_model_d3
  SUBTYPE OF (camera_model);
  view_reference_system : axis2_placement_3d;
  perspective_of_volume : view_volume;
WHERE
  WR1: (dot_product (SELF.view_reference_system.p[3],
         SELF.perspective_of_volume.view_window.placement.p[3]) = 1.0)
         AND
       (SELF.view_reference_system.location.coordinates[3] =
        SELF.perspective_of_volume.view_window.
             placement.location.coordinates[3]);
  WR2: SELF\geometric_representation_item.dim = 3;
END_ENTITY;

ENTITY camera_model_d3_multi_clipping 
  SUBTYPE OF (camera_model_d3); 
  shape_clipping : SET [1:?] OF camera_model_d3_multi_clipping_interection_select; 
END_ENTITY; 
 
ENTITY camera_model_d3_multi_clipping_union 
  SUBTYPE OF (geometric_representation_item); 
  shape_clipping : SET [2:?] OF camera_model_d3_multi_clipping_union_select; 
END_ENTITY;   
 
ENTITY camera_model_d3_multi_clipping_intersection 
  SUBTYPE OF (geometric_representation_item); 
  shape_clipping : SET [2:?] OF camera_model_d3_multi_clipping_interection_select; 
END_ENTITY;

ENTITY camera_model_d3_with_hlhsr
  SUBTYPE OF (camera_model_d3);
  hidden_line_surface_removal : BOOLEAN;
END_ENTITY;

ENTITY camera_model_with_light_sources
  SUBTYPE OF (camera_model_d3);
  sources : SET [1:?] OF light_source;
END_ENTITY;

ENTITY camera_usage
  SUBTYPE OF (representation_map);
  SELF\representation_map.mapping_origin : camera_model; --LK
WHERE
  WR1: NOT ('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_REPRESENTATION'
        IN TYPEOF(SELF\representation_map.mapped_representation));
  --LK WR2: 'PRESENTATION_ORGANIZATION_SCHEMA.CAMERA_MODEL'
  --LK      IN TYPEOF (SELF\representation_map.mapping_origin);
END_ENTITY;

ENTITY graphical_transformation
  SUBTYPE OF (item_defined_transformation);
  SELF\item_defined_transformation.transform_item_1 : axis2_placement_2d; --LK
  SELF\item_defined_transformation.transform_item_2 : presentation_scaled_placement; --LK
--LK WHERE
--LK   WR1: 'GEOMETRY_SCHEMA.AXIS2_PLACEMENT_2D' IN
--LK          TYPEOF (SELF\item_defined_transformation.transform_item_1);
--LK   WR2: 'PRESENTATION_RESOURCE_SCHEMA.PRESENTATION_SCALED_PLACEMENT' IN
--LK          TYPEOF (SELF\item_defined_transformation.transform_item_2);
END_ENTITY;

ENTITY light_source
  SUPERTYPE OF (ONEOF(light_source_ambient,
                      light_source_directional,
                      light_source_positional,
                      light_source_spot))
  SUBTYPE OF (geometric_representation_item);
  light_colour : colour;
WHERE
  WR1: SIZEOF(USEDIN(SELF,'PRESENTATION_APPEARANCE_SCHEMA.'+
                         'STYLED_ITEM.ITEM')) = 0;
END_ENTITY;

ENTITY light_source_ambient
  SUBTYPE OF (light_source);
END_ENTITY;

ENTITY light_source_directional
  SUBTYPE OF (light_source);
  orientation : direction;
END_ENTITY;

ENTITY light_source_positional
  SUBTYPE OF (light_source);
  position             : cartesian_point;
  constant_attenuation : REAL;
  distance_attenuation : REAL;
END_ENTITY;

ENTITY light_source_spot
  SUBTYPE OF (light_source);
  position               : cartesian_point;
  orientation            : direction;
  concentration_exponent : REAL;
  constant_attenuation   : REAL;
  distance_attenuation   : REAL;
  spread_angle           : positive_plane_angle_measure;
END_ENTITY;

ENTITY presentation_area
  SUBTYPE OF (presentation_representation);
WHERE
  WR1: ((SIZEOF (QUERY (ais <* USEDIN (SELF, 'PRESENTATION_ORGANIZATION_SCHEMA.' +
                                             'AREA_IN_SET.AREA') | 
           SIZEOF (USEDIN (ais, 'PRESENTATION_ORGANIZATION_SCHEMA.' +
                                'PRESENTATION_SIZE.UNIT')) =1)) > 0) OR
         (SIZEOF (USEDIN (SELF, 'PRESENTATION_ORGANIZATION_SCHEMA.' +
                                'PRESENTATION_SIZE.UNIT')) =1));
END_ENTITY;

ENTITY presentation_layer_assignment;
  name           : label;
  description    : text;
  assigned_items : SET [1:?] OF layered_item;
END_ENTITY;

ENTITY presentation_layer_usage;
  assignment   : presentation_layer_assignment;
  presentation : presentation_representation;
UNIQUE
  UR1: assignment, presentation;
END_ENTITY;

ENTITY presentation_representation
  SUPERTYPE OF (ONEOF(area_dependent_annotation_representation,
    presentation_area,
    presentation_view,
    product_data_representation_view,
    view_dependent_annotation_representation))
  SUBTYPE OF (representation);
  SELF\representation.context_of_items : geometric_representation_context; --LK
WHERE
  WR1: SELF\representation.
            context_of_items\geometric_representation_context.
            coordinate_space_dimension = 2;
--LK  WR2: 'GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_CONTEXT'
--LK       IN TYPEOF (SELF\representation.context_of_items);
-- WRx: IP1: Any presentation_representation shall be presented in the context of a tree which has as its root a presentation_area. 
-- LK: better to re-prase this to: "A presentation_representation shall either be included in another presentation_representation or it shall be an presentation_area. Note: presentation_area requires it to be used by another presentation_area or used by a presentation_set" Add this to p46
-- (from presentation_area, via presentation_representation_relationship or mapped_item). It shall not be in any other representation
--  WR3: check_root (SELF); --GP this where rule is for IP1 stated above
-- LK: simply the rule(function) for new wording, we only need to check one level, 
-- LK: but don't need to have a recursive rule. So we may not need the function at all.
--GL: added a new:
--GL - logic - it has to be either presentation_area or it has to be used by another presentation_representation.
--GL - requirement that presentation_area has to be used by presentation_set is already captured in WR1 of presentation_area.
  WR2: ('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_AREA' IN TYPEOF (SELF))
    OR
    (SIZEOF (QUERY (prr <* USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                                             'REPRESENTATION_RELATIONSHIP.REP_2') | 
          'PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_REPRESENTATION' IN
          TYPEOF (prr\representation_relationship.rep_1))) > 0)
    OR 
    (SIZEOF(QUERY( rm <* USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                                               'REPRESENTATION_MAP.'+ 
                                               'MAPPED_REPRESENTATION') | 
         SIZEOF(QUERY( mi <* USEDIN(rm, 'REPRESENTATION_SCHEMA.'+
                                              'MAPPED_ITEM.'+
                                              'MAPPING_SOURCE') |   
               SIZEOF(QUERY( rep <* using_representations (mi) |                              
                                         'PRESENTATION_ORGANIZATION_SCHEMA.'+
                                          'PRESENTATION_REPRESENTATION' IN 
                                          TYPEOF (rep))) > 0
         )) > 0))  
                    > 0);
END_ENTITY;



ENTITY presentation_representation_relationship
  SUBTYPE OF (representation_relationship_with_transformation);
  SELF\representation_relationship.rep_1 : presentation_representation; --LK
  SELF\representation_relationship.rep_2 : presentation_representation; --LK
  SELF\representation_relationship_with_transformation.transformation_operator : graphical_transformation; --LK
WHERE
--LK  WR1: 'PRESENTATION_DEFINITION_SCHEMA.PRESENTATION_REPRESENTATION' IN
--LK         TYPEOF (SELF\representation_relationship.rep_1);
--LK  WR2: 'PRESENTATION_DEFINITION_SCHEMA.PRESENTATION_REPRESENTATION' IN
--LK         TYPEOF (SELF\representation_relationship.rep_2);
  WR1: acyclic_presentation_representation_relationship (SELF,
         [SELF\representation_relationship.rep_2]);
  WR2: NOT (('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_AREA' IN
         TYPEOF (SELF\representation_relationship.rep_1)) 
                 AND
         NOT (SIZEOF (['PRESENTATION_ORGANIZATION_SCHEMA.' +
                       'PRODUCT_DATA_REPRESENTATION_VIEW',
                       'PRESENTATION_ORGANIZATION_SCHEMA.' +
                       'VIEW_DEPENDENT_ANNOTATION_REPRESENTATION'] *
         TYPEOF (SELF\representation_relationship.rep_2)) = 0));
  WR3: NOT (('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_VIEW'
         IN TYPEOF (SELF\representation_relationship.rep_1))
                 AND
       NOT (SIZEOF (['PRESENTATION_ORGANIZATION_SCHEMA.' +
                     'PRESENTATION_AREA',
                     'PRESENTATION_ORGANIZATION_SCHEMA.' +
                     'PRESENTATION_VIEW',
                     'PRESENTATION_ORGANIZATION_SCHEMA.' +
                     'AREA_DEPENDENT_ANNOTATION_REPRESENTATION'] *
              TYPEOF (SELF\representation_relationship.rep_2))=0));
  WR4: (NOT ('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_VIEW' IN
         TYPEOF(SELF\representation_relationship.rep_2)))
              XOR
         ('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_AREA'IN
         TYPEOF(SELF\representation_relationship.rep_1));
  WR5: (NOT ('PRESENTATION_ORGANIZATION_SCHEMA.' +
             'PRODUCT_DATA_REPRESENTATION_VIEW' IN
         (TYPEOF(SELF\representation_relationship.rep_1) +
          TYPEOF(SELF\representation_relationship.rep_2))))
              XOR
       ('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_VIEW' IN
         TYPEOF(SELF\representation_relationship.rep_1))
                AND
       ('PRESENTATION_ORGANIZATION_SCHEMA.PRODUCT_DATA_REPRESENTATION_VIEW' IN
         TYPEOF(SELF\representation_relationship.rep_2));
--LK  WR8: 'PRESENTATION_ORGANIZATION_SCHEMA.GRAPHICAL_TRANSFORMATION' IN
--LK         TYPEOF(SELF\representation_relationship_with_transformation.
--LK                     transformation_operator);
END_ENTITY;

ENTITY presentation_set;
INVERSE
  areas : SET [1:?] OF area_in_set FOR in_set;
END_ENTITY;

ENTITY presentation_size; -- ok
  unit : presentation_size_assignment_select;
  size : planar_box;
UNIQUE
  UR1: unit; -- added by LK
WHERE
  WR1: (('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_REPRESENTATION'
         IN TYPEOF (SELF.unit)) AND
         item_in_context (SELF.size, 
                          SELF.unit\representation.context_of_items)
       )
            OR
       (
        ('PRESENTATION_ORGANIZATION_SCHEMA.AREA_IN_SET'
          IN TYPEOF (SELF.unit)) AND
        (SIZEOF (QUERY ( ais <* SELF.unit\area_in_set.in_set.areas |
                NOT item_in_context (SELF.size, ais.area\representation.
                                                context_of_items) )) = 0)
       ); 
END_ENTITY;
-- Add description: If a presentation size is available for both, an area_in_set and for a presentation_area, refered to by area_in_set, the presentation_size for the area_in_set overwrites the other one for the purpose of the presentation_set."


ENTITY presentation_view
  SUBTYPE OF (presentation_representation);
END_ENTITY;

ENTITY presented_item
  ABSTRACT SUPERTYPE;
END_ENTITY;

ENTITY presented_item_representation;
  presentation : presentation_representation_select;
  item         : presented_item;
END_ENTITY;

ENTITY product_data_representation_view
  SUBTYPE OF (presentation_representation);
  SELF\representation.items : SET[1:?] OF product_data_representation_view_item;
WHERE
--LK  WR1: SIZEOF (QUERY (item <* SELF\representation.items |
--LK       NOT (SIZEOF (['PRESENTATION_ORGANIZATION_SCHEMA.CAMERA_IMAGE',
--LK                     'GEOMETRY_SCHEMA.AXIS2_PLACEMENT'] *
--LK                    TYPEOF (item)) = 1
--LK       ))) = 0;
  WR1: SIZEOF (QUERY (item <* SELF\representation.items | 
       ('PRESENTATION_ORGANIZATION_SCHEMA.CAMERA_IMAGE' IN
        TYPEOF (item))
       )) >= 1;
--LK WRx: "... shall not be displayed without being placed in a presentation_view." (here only directly via rel or mapped_item)
--GP this where rule is for WRx stated above
--GL 'code' just captures logic 'There should be at least 1 presentatation_view refering it'
-- Was it meant? Maybe it should restrict and dissalow other types at all?
-- Must be used by at least one presentatation_view and only be used by presentation_representation which are presentatation_view(s).
  WR2: (SIZEOF (QUERY (prr <* USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                                             'REPRESENTATION_RELATIONSHIP.REP_2') | 
          'PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_VIEW' IN
          TYPEOF (prr\representation_relationship.rep_1))) > 0)
                                  OR 
-- GL - cosmetics - rename                                  
       (SIZEOF(QUERY( rm <* USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                                               'REPRESENTATION_MAP.'+ 
                                               'MAPPED_REPRESENTATION') | 
         SIZEOF(QUERY( mi <* USEDIN(rm, 'REPRESENTATION_SCHEMA.'+
                                              'MAPPED_ITEM.'+
                                              'MAPPING_SOURCE') |   
               SIZEOF(QUERY( rep <* using_representations (mi) |                              
                                         'PRESENTATION_ORGANIZATION_SCHEMA.'+
                                          'PRESENTATION_VIEW' IN 
                                          TYPEOF (rep))) > 0
         )) > 0))  
                    > 0);
-- GL added: Require that ALL users are presentation_views                                        
  WR3: (SIZEOF (QUERY (prr <* USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                                             'REPRESENTATION_RELATIONSHIP.REP_2') | 
          NOT('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_VIEW' IN
          TYPEOF (prr\representation_relationship.rep_1)))) = 0)
                                  AND 
       (SIZEOF(QUERY( rm <* USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                                               'REPRESENTATION_MAP.'+ 
                                               'MAPPED_REPRESENTATION') | 
         SIZEOF(QUERY( mi <* USEDIN(rm, 'REPRESENTATION_SCHEMA.'+
                                              'MAPPED_ITEM.'+
                                              'MAPPING_SOURCE') |   
               SIZEOF(QUERY( rep <* using_representations (mi) |                              
                                         NOT('PRESENTATION_ORGANIZATION_SCHEMA.'+
                                          'PRESENTATION_VIEW' IN 
                                          TYPEOF (rep)))) > 0
         )) > 0))  
                    = 0);
END_ENTITY;

ENTITY representation_item_dependent_layer_assignment
  SUBTYPE OF (presentation_layer_assignment);
  item_context : representation_item;
END_ENTITY;

ENTITY view_dependent_annotation_representation
  SUBTYPE OF (presentation_representation);
  SELF\representation.items : SET [1:?] OF view_dependent_annotation_representation_item;
WHERE
--LK  WR1: SIZEOF (QUERY (item <* SELF\representation.items |
--LK       NOT (SIZEOF (['PRESENTATION_DEFINITION_SCHEMA.' +
--LK                     'ANNOTATION_OCCURRENCE',
--LK                     'GEOMETRY_SCHEMA.AXIS2_PLACEMENT'] * 
--LK            TYPEOF(item)) = 1
--LK       ))) = 0;
  WR1: SIZEOF (QUERY (item <* SELF\representation.items |
       ('PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_OCCURRENCE' IN
        TYPEOF (item))
       )) >= 1;
--LK WRx: "... it shall be contained in a presentation_view", should be implemented identical to the case in product_data_representation_view. 
--LK Must ensure that it is PLACED (mapped_item or presentation_rep) in a presentation_view
--GP WR3 below is added for the property stated above
-- Must be used by at least one presentatation_view and only be used by presentation_representation which are presentatation_view(s).
  WR2: (SIZEOF (QUERY (prr <* USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                                             'REPRESENTATION_RELATIONSHIP.REP_2') | 
          'PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_VIEW' IN
          TYPEOF (prr\representation_relationship.rep_1))) > 0)
                                  OR 
--GL cosmetic renaming                                  
       (SIZEOF(QUERY( rm <* USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                                               'REPRESENTATION_MAP.'+ 
                                               'MAPPED_REPRESENTATION') | 
         SIZEOF(QUERY( mi <* USEDIN(rm, 'REPRESENTATION_SCHEMA.'+
                                              'MAPPED_ITEM.'+
                                              'MAPPING_SOURCE') |   
               SIZEOF(QUERY( rep <* using_representations (mi) |                              
                                         'PRESENTATION_ORGANIZATION_SCHEMA.'+
                                          'PRESENTATION_VIEW' IN 
                                          TYPEOF (rep))) > 0
         )) > 0))  
                    > 0);
-- GL added: Require that ALL users are presentation_views                    
  WR3: (SIZEOF (QUERY (prr <* USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                                             'REPRESENTATION_RELATIONSHIP.REP_2') | 
          NOT('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_VIEW' IN
          TYPEOF (prr\representation_relationship.rep_1)))) = 0)
                                  AND 
       (SIZEOF(QUERY( rm <* USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                                               'REPRESENTATION_MAP.'+ 
                                               'MAPPED_REPRESENTATION') | 
         SIZEOF(QUERY( mi <* USEDIN(rm, 'REPRESENTATION_SCHEMA.'+
                                              'MAPPED_ITEM.'+
                                              'MAPPING_SOURCE') |   
               SIZEOF(QUERY( rep <* using_representations (mi) |                              
                                         NOT('PRESENTATION_ORGANIZATION_SCHEMA.'+
                                          'PRESENTATION_VIEW' IN 
                                          TYPEOF (rep)))) > 0
         )) > 0))  
                    = 0);
                    
END_ENTITY;

ENTITY view_volume
  SUBTYPE OF (founded_item);
  projection_type            : central_or_parallel;
  projection_point           : cartesian_point;
  view_plane_distance        : length_measure;
  front_plane_distance       : length_measure;
  front_plane_clipping       : BOOLEAN;
  back_plane_distance        : length_measure;
  back_plane_clipping        : BOOLEAN;
  view_volume_sides_clipping : BOOLEAN;
  view_window                : planar_box;
END_ENTITY;

RULE symbol_representation_rule
  FOR (presentation_representation_relationship);
WHERE
  WR1: SIZEOF(QUERY(each_1 <* presentation_representation_relationship  |
              NOT ('PRESENTATION_DEFINITION_SCHEMA.'+
              'SYMBOL_REPRESENTATION_RELATIONSHIP' IN TYPEOF(each_1)) AND
         (SIZEOF(QUERY(each_2 <* [each_1\representation_relationship.rep_1,
                                  each_1\representation_relationship.rep_2] |
         'PRESENTATION_DEFINITION_SCHEMA.SYMBOL_REPRESENTATION' IN TYPEOF(each_2)
         )) > 0)
       )) = 0;
END_RULE;

FUNCTION acyclic_presentation_representation_relationship
  ( relation : presentation_representation_relationship;
    children : SET OF presentation_representation ) : BOOLEAN;

  LOCAL
    x : SET OF presentation_representation_relationship;
    local_children : SET OF presentation_representation;
  END_LOCAL;

  REPEAT i:=1 TO HIINDEX(children);
    IF relation\representation_relationship.rep_1 :=: children[i] THEN
       RETURN(FALSE);
    END_IF;
  END_REPEAT;

  x := bag_to_set (USEDIN ( relation\representation_relationship.rep_1,
                  'REPRESENTATION_SCHEMA.'+
                  'REPRESENTATION_RELATIONSHIP.REP_2'));
  local_children := children + relation\representation_relationship.rep_1;

  IF SIZEOF (x) > 0 THEN
    REPEAT i:=1 TO HIINDEX (x);
       IF NOT acyclic_presentation_representation_relationship
              (x[i] , local_children) THEN
         RETURN (FALSE);
       END_IF;
    END_REPEAT;
  END_IF;

  RETURN (TRUE);

END_FUNCTION;

FUNCTION aspect_ratio (p : planar_box) : positive_ratio_measure;
(* if the dimensions of the planar_box are greater than zero,
      compute the aspect ratio and return the resulting value. *)
   IF (p.size_in_x > 0.) AND (p.size_in_y > 0.) THEN
      RETURN (p.size_in_x / p.size_in_y);
   ELSE
      RETURN (?);
   END_IF;
END_FUNCTION; 

END_SCHEMA; -- presentation_organization_schema 


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\presentation_resource_schema\presentation_resource_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n953.exp *)

SCHEMA presentation_resource_schema;

REFERENCE FROM external_reference_schema
    (externally_defined_item,
     pre_defined_item);

REFERENCE FROM geometry_schema
    (axis2_placement,
     curve,
     geometric_representation_item
     );

REFERENCE FROM measure_schema
    (length_measure,
     positive_length_measure,
     positive_ratio_measure,
     ratio_measure);

REFERENCE FROM presentation_definition_schema
    (annotation_fill_area,
     symbol_representation);

REFERENCE FROM representation_schema
    (item_in_context,
     representation);

REFERENCE FROM support_resource_schema
    (identifier,
     label,
     text);
 

TYPE font_select = SELECT
  (pre_defined_text_font,
   externally_defined_text_font,
   text_font);
END_TYPE;

SUBTYPE_CONSTRAINT prs_geometric_representation_item_subtypes FOR geometric_representation_item;  
    (ONEOF ( 
    curve,
	planar_extent,
	presentation_scaled_placement)); 
END_SUBTYPE_CONSTRAINT; 

TYPE staircase_or_linear = ENUMERATION OF 
  (staircase, 
   linear);
END_TYPE;


ENTITY character_glyph_font_usage;
  character : generic_character_glyph_symbol;
  font      : text_font;
END_ENTITY;

ENTITY character_glyph_symbol
  SUBTYPE OF (generic_character_glyph_symbol);
  character_box  : planar_extent;
  baseline_ratio : ratio_measure;
DERIVE
  box_height : length_measure := character_box.size_in_y;
WHERE
  WR1: {0.0 <= baseline_ratio <= 1.0};
  WR2: item_in_context(SELF.character_box, 
                       SELF\representation.context_of_items);
  WR3: 'MEASURE_SCHEMA.POSITIVE_LENGTH_MEASURE'
        IN TYPEOF (SELF.box_height);
END_ENTITY;

ENTITY character_glyph_symbol_outline
  SUBTYPE OF (character_glyph_symbol);
  outlines : SET [1:?] OF annotation_fill_area;
WHERE
  WR1: SELF.outlines <= SELF\representation.items;
END_ENTITY;

ENTITY character_glyph_symbol_stroke
  SUBTYPE OF (character_glyph_symbol);
  strokes : SET [1:?] OF curve;
WHERE
  WR1: SELF.strokes <= SELF\representation.items;
END_ENTITY;

ENTITY colour;
END_ENTITY;

ENTITY colour_associated
  SUBTYPE OF (colour);
  name : label;
  variable_to_be_shown : SET [1:?] OF REAL;
  mapping              : colour_association_table;
END_ENTITY;

ENTITY colour_association_table;
  discrete_states_with_colours : LIST [1:?] OF state_variable_with_colour;
  interpolation_type           : staircase_or_linear;
END_ENTITY;

ENTITY colour_rgb
  SUBTYPE OF (colour_specification);
  red   : REAL;
  green : REAL;
  blue  : REAL;
WHERE
  WR1: {0.0 <= red <= 1.0};
  WR2: {0.0 <= green <= 1.0};
  WR3: {0.0 <= blue <= 1.0};
END_ENTITY;

ENTITY colour_specification
  SUBTYPE OF (colour);
  name : label;
END_ENTITY;

ENTITY draughting_pre_defined_colour
  SUBTYPE OF (pre_defined_colour);
WHERE
  WR1: SELF.name IN
      ['red',
       'green',
       'blue',
       'yellow',
       'magenta',
       'cyan',
       'black',
       'white'];
END_ENTITY;

ENTITY draughting_pre_defined_text_font
   SUBTYPE of (pre_defined_text_font);
WHERE
   WR1: SELF.name IN ['ISO 3098'];
END_ENTITY;

ENTITY externally_defined_text_font
  SUBTYPE OF (externally_defined_item);
END_ENTITY;

ENTITY generic_character_glyph_symbol
  ABSTRACT SUPERTYPE
  SUBTYPE OF (symbol_representation);
END_ENTITY; 

ENTITY planar_box
  SUBTYPE OF (planar_extent);
  placement:  axis2_placement;
END_ENTITY;

ENTITY planar_extent
  SUBTYPE OF (geometric_representation_item);
   size_in_x : length_measure;
   size_in_y : length_measure;
END_ENTITY;

ENTITY pre_defined_colour
  SUBTYPE OF (pre_defined_item, colour);
END_ENTITY;

ENTITY pre_defined_text_font
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY presentation_scaled_placement 
  SUBTYPE OF (geometric_representation_item);
  placement : axis2_placement;
  scaling   : positive_ratio_measure;
END_ENTITY;

ENTITY state_variable_with_colour;
  state_variable    : REAL;
  associated_colour : colour_specification;
END_ENTITY;

ENTITY text_font;
  id          : identifier;
  name        : label;
  description : text;
INVERSE
  glyphs : SET [1:?] OF character_glyph_font_usage FOR font;
END_ENTITY;

ENTITY text_font_family;
  id          : identifier;
  name        : label;
  description : text;
INVERSE
  fonts       : SET [1:?] OF text_font_in_family FOR family;
END_ENTITY;

ENTITY text_font_in_family;
  font   : text_font;
  family : text_font_family;
END_ENTITY;

END_SCHEMA; -- presentation_resource_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\process_property_representation_schema\process_property_representation_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/10303-049.exp *)

SCHEMA process_property_representation_schema;

REFERENCE FROM support_resource_schema
    (label, 
     text);

REFERENCE FROM representation_schema
    (representation);

REFERENCE FROM process_property_schema
    (action_property, 
     resource_property);

ENTITY action_property_representation;
  name           : label;
  description    : text;
  property       : action_property;
  representation : representation;
END_ENTITY;

ENTITY resource_property_representation;
  name           : label;
  description    : text;
  property       : resource_property;
  representation : representation;
END_ENTITY;

END_SCHEMA; -- process_property_representation_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\process_property_schema\process_property_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/10303-049.exp *)

SCHEMA process_property_schema;

REFERENCE FROM action_schema
    (action, 
     action_method,
     action_method_relationship,
     action_relationship,
     action_resource,
     action_resource_relationship,
     acyclic_action_relationship);

REFERENCE FROM product_property_definition_schema
    (characterized_product_definition,
     property_definition, 
     shape_definition);

REFERENCE FROM support_resource_schema
    (identifier,
     label,
     text);

TYPE characterized_action_definition = SELECT
   (action,
   action_method,
   action_method_relationship,
   action_relationship);
END_TYPE;

TYPE characterized_resource_definition = SELECT
  (action_resource,
   action_resource_relationship,
   action_resource_requirement,
   action_resource_requirement_relationship);
END_TYPE;

TYPE property_or_shape_select = SELECT
     (property_definition,
      shape_definition);
END_TYPE;

ENTITY action_property;
  name        : label;
  description : text;
  definition  : characterized_action_definition;
END_ENTITY;

ENTITY product_definition_process
  SUBTYPE OF (action);
  identification : identifier;
INVERSE 
  product_definitions : SET [1:?] OF process_product_association FOR process;
END_ENTITY;

ENTITY process_product_association;
  name            : label;
  description     : text;
  defined_product : characterized_product_definition;
  process         : product_definition_process;
END_ENTITY;

ENTITY property_process
  SUBTYPE OF (action);
  identification : identifier;
INVERSE
  properties : SET [1:?] OF process_property_association FOR process;
END_ENTITY;

ENTITY process_property_association;
  name              : label;
  description       : text;
  process           : property_process;
  property_or_shape : property_or_shape_select;
END_ENTITY;

ENTITY replacement_relationship
  SUBTYPE OF (action_relationship);
WHERE
  WR1: acyclic_action_relationship (SELF,
       [SELF\action_relationship.related_action],
       'PROCESS_PROPERTY_SCHEMA.REPLACEMENT_RELATIONSHIP');
END_ENTITY;

ENTITY resource_property;
  name        : label;
  description : text;
  resource    : characterized_resource_definition;
END_ENTITY;

ENTITY action_resource_requirement;
  name        : label;
  description : text;
  kind        : resource_requirement_type;
  operations  : SET [1:?] OF characterized_action_definition;
END_ENTITY;

ENTITY action_property_relationship;
  name                     : label;
  description              : text;
  relating_action_property : action_property;
  related_action_property  : action_property;
WHERE
  WR1: relating_action_property :<>: related_action_property;
END_ENTITY;

ENTITY requirement_for_action_resource
  SUBTYPE OF (action_resource_requirement);
  resources : SET [1:?] OF action_resource;
END_ENTITY;

ENTITY resource_property_relationship;
  name                       : label;
  description                : text;
  relating_resource_property : resource_property;
  related_resource_property  : resource_property;
WHERE
  WR1: relating_resource_property :<>: related_resource_property;
END_ENTITY;

ENTITY action_resource_requirement_relationship;
  name                                 : label;
  description                          : text;
  relating_action_resource_requirement : action_resource_requirement;
  related_action_resource_requirement  : action_resource_requirement;
WHERE
  WR1: relating_action_resource_requirement :<>: 
       related_action_resource_requirement;
END_ENTITY;

ENTITY resource_requirement_type;
  name        : label;
  description : text;
END_ENTITY;

ENTITY resource_requirement_type_relationship;
  name                      : label;
  description               : text;
  relating_requirement_type : resource_requirement_type;
  related_requirement_type  : resource_requirement_type;
WHERE
  WR1: relating_requirement_type :<>: related_requirement_type;
END_ENTITY;

END_SCHEMA; -- process_property_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\product_concept_schema\product_concept_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n529.exp *)

SCHEMA product_concept_schema;

  REFERENCE FROM support_resource_schema
    (text, label, identifier);

  REFERENCE FROM application_context_schema
    (product_concept_context);

ENTITY concept_feature_operator;
  name        : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY concept_feature_relationship;
  name                              : label;
  description                       : OPTIONAL text;
  relating_product_concept_feature  : product_concept_feature;
  related_product_concept_feature   : product_concept_feature;
END_ENTITY;

ENTITY concept_feature_relationship_with_condition
  SUBTYPE OF (concept_feature_relationship);
  conditional_operator : concept_feature_operator;
END_ENTITY;

ENTITY conditional_concept_feature
  SUBTYPE OF (product_concept_feature);
  condition : concept_feature_relationship_with_condition;
END_ENTITY;

ENTITY product_concept;
  id                  : identifier;
  name                : label;
  description         : OPTIONAL text;
  market_context      : product_concept_context;
UNIQUE
  UR1: id;
END_ENTITY;

ENTITY product_concept_feature;
  id          : identifier;
  name        : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY product_concept_feature_association;
  name        : label;
  description : OPTIONAL text;
  concept     : product_concept;
  feature     : product_concept_feature;
END_ENTITY;

ENTITY product_concept_relationship;
  name                     : label;
  description              : OPTIONAL text;
  relating_product_concept : product_concept;
  related_product_concept  : product_concept;
END_ENTITY;

END_SCHEMA; -- product_concept_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\product_definition_schema\product_definition_schema.exp
   ------------------------------------------------------------
*)

(*
$Id: product_definition_schema.exp,v 1.4 2004/11/10 12:11:25 mikeward Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA product_definition_schema;

REFERENCE FROM application_context_schema   -- ISO 10303-41
  (product_context,
   product_definition_context); 

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (get_id_value,
   get_name_value,
   name_attribute); 

REFERENCE FROM document_schema   -- ISO 10303-41
  (document); 

REFERENCE FROM effectivity_schema   -- ISO 10303-41
  (effectivity); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE source = ENUMERATION OF 
   (made,
    bought,
    not_known);
END_TYPE; 

ENTITY product;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  frame_of_reference : SET[1:?] OF product_context;
END_ENTITY;

ENTITY product_category;
  name : label;
  description : OPTIONAL text;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY product_category_relationship;
  name : label;
  description : OPTIONAL text;
  category : product_category;
  sub_category : product_category;
WHERE
  WR1: acyclic_product_category_relationship (SELF, [SELF.sub_category]);
END_ENTITY;

ENTITY product_definition;
  id : identifier;
  description : OPTIONAL text;
  formation : product_definition_formation;
  frame_of_reference : product_definition_context;
DERIVE
  name : label := get_name_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
END_ENTITY;

ENTITY product_definition_context_association;
  definition : product_definition;
  frame_of_reference : product_definition_context;
  role : product_definition_context_role;
END_ENTITY;

ENTITY product_definition_context_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY product_definition_effectivity
  SUBTYPE OF (effectivity);
  usage : product_definition_relationship;
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'MANAGEMENT_RESOURCES_SCHEMA.' + 'EFFECTIVITY_ASSIGNMENT.ASSIGNED_EFFECTIVITY')) = 0;
END_ENTITY;

ENTITY product_definition_formation;
  id : identifier;
  description : OPTIONAL text;
  of_product : product;
UNIQUE
  UR1: id, of_product;
END_ENTITY;

ENTITY product_definition_formation_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_product_definition_formation : product_definition_formation;
  related_product_definition_formation : product_definition_formation;
END_ENTITY;

ENTITY product_definition_formation_with_specified_source
  SUBTYPE OF (product_definition_formation);
  make_or_buy : source;
END_ENTITY;

ENTITY product_definition_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_product_definition : product_definition;
  related_product_definition : product_definition;
END_ENTITY;

ENTITY product_definition_substitute;
  description : OPTIONAL text;
  context_relationship : product_definition_relationship;
  substitute_definition : product_definition;
DERIVE
  name : label := get_name_value (SELF);
WHERE
  WR1: context_relationship.related_product_definition :<>: substitute_definition;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
END_ENTITY;

ENTITY product_definition_with_associated_documents
  SUBTYPE OF (product_definition);
  documentation_ids : SET[1:?] OF document;
END_ENTITY;

ENTITY product_related_product_category
  SUBTYPE OF (product_category);
  products : SET[1:?] OF product;
END_ENTITY;

ENTITY product_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_product : product;
  related_product : product;
END_ENTITY;

FUNCTION acyclic_product_category_relationship
 (relation : product_category_relationship; children : SET OF product_category) : BOOLEAN; 
LOCAL
      x : SET OF product_category_relationship;
      local_children : SET OF product_category;
    END_LOCAL;

    REPEAT i := 1 TO HIINDEX(children);
      IF relation.category :=: children[i] THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    x := bag_to_set(USEDIN(relation.category, 'PRODUCT_DEFINITION_SCHEMA.' + 'PRODUCT_CATEGORY_RELATIONSHIP.SUB_CATEGORY'));
    local_children := children + relation.category;
    IF SIZEOF(x) > 0 THEN
      REPEAT i := 1 TO HIINDEX(x);
        IF NOT acyclic_product_category_relationship(x[i], local_children) THEN
          RETURN (FALSE);
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_product_definition_formation_relationship
 (relation : product_definition_formation_relationship; relatives : SET[1:?] OF product_definition_formation; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF product_definition_formation_relationship;
    END_LOCAL;

    IF relation.relating_product_definition_formation IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(pdf <* bag_to_set(USEDIN(relation.relating_product_definition_formation, 'PRODUCT_DEFINITION_SCHEMA.' + 'PRODUCT_DEFINITION_FORMATION_RELATIONSHIP.' + 'RELATED_PRODUCT_DEFINITION_FORMATION')) | specific_relation IN TYPEOF(pdf));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_product_definition_formation_relationship(x[i], relatives + relation.relating_product_definition_formation, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_product_definition_relationship
 (relation : product_definition_relationship; relatives : SET[1:?] OF product_definition; specific_relation : STRING) : BOOLEAN; 
LOCAL
      x : SET OF product_definition_relationship;
    END_LOCAL;

    IF relation.relating_product_definition IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(pd <* bag_to_set(USEDIN(relation.relating_product_definition, 'PRODUCT_DEFINITION_SCHEMA.' + 'PRODUCT_DEFINITION_RELATIONSHIP.' + 'RELATED_PRODUCT_DEFINITION')) | specific_relation IN TYPEOF(pd));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_product_definition_relationship(x[i], relatives + relation.relating_product_definition, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_product_relationship
 (relation : product_relationship; relatives : SET[1:?] OF product; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF product_relationship;
    END_LOCAL;

    IF relation.relating_product IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(prod <* bag_to_set(USEDIN(relation.relating_product, 'PRODUCT_DEFINITION_SCHEMA.' + 'PRODUCT_RELATIONSHIP.' + 'RELATED_PRODUCT')) | specific_relation IN TYPEOF(prod));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_product_relationship(x[i], relatives + relation.relating_product, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION get_product_definitions
 (c_def_instance : product) : SET OF product_definition; 
  LOCAL
      pd_set : SET OF product_definition_formation := [];
      pdr_set : SET OF product_definition := [];
    END_LOCAL;

    pd_set := bag_to_set(USEDIN(c_def_instance, 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION_FORMATION.OF_PRODUCT'));
    IF (SIZEOF(pd_set) < 1) THEN
      RETURN (pdr_set);
    END_IF;
    REPEAT i := 1 TO HIINDEX(pd_set);
      pdr_set := pdr_set + bag_to_set(USEDIN(pd_set[i], 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION.FORMATION'));
    END_REPEAT;
    RETURN (pdr_set);
END_FUNCTION; 

END_SCHEMA;  -- product_definition_schema



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\product_property_definition_schema\product_property_definition_schema.exp
   ------------------------------------------------------------
*)

(*
  $Id: product_property_definition_schema.exp,v 1.5 2004/11/10 13:29:26 mikeward Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA product_property_definition_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (get_id_value,
   id_attribute); 

REFERENCE FROM process_property_schema   -- ISO 10303-49
  (action_property,
   resource_property); 

REFERENCE FROM product_definition_schema   -- ISO 10303-41
  (product_definition,
   product_definition_relationship); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE characterized_definition = SELECT
   (characterized_object, 
    characterized_product_definition, 
    shape_definition);
END_TYPE; 

TYPE characterized_product_definition = SELECT
   (product_definition, 
    product_definition_relationship);
END_TYPE; 

TYPE derived_property_select = SELECT
   (action_property, 
    property_definition, 
    resource_property);
END_TYPE; 

TYPE shape_definition = SELECT
   (product_definition_shape, 
    shape_aspect, 
    shape_aspect_relationship);
END_TYPE; 

ENTITY characterized_object;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY characterized_object_relationship;
  name : label;
  description : OPTIONAL text;
  relating_object : characterized_object;
  related_object : characterized_object;
END_ENTITY;

ENTITY general_property;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY general_property_association;
  name : label;
  description : OPTIONAL text;
  base_definition : general_property;
  derived_definition : derived_property_select;
WHERE
  WR1: SIZEOF( USEDIN( derived_definition, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' + 'GENERAL_PROPERTY_ASSOCIATION.' + 'DERIVED_DEFINITION')) = 1;
  WR2: derived_definition.name = base_definition.name;
END_ENTITY;

ENTITY general_property_relationship;
  name : label;
  description : OPTIONAL text;
  relating_property : general_property;
  related_property : general_property;
END_ENTITY;

ENTITY product_definition_shape
    SUBTYPE OF (property_definition);
  UNIQUE
    UR1: SELF\property_definition.definition;
  WHERE
    WR1: SIZEOF(['PRODUCT_PROPERTY_DEFINITION_SCHEMA.CHARACTERIZED_PRODUCT_DEFINITION', 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.CHARACTERIZED_OBJECT'] * TYPEOF(SELF\property_definition.definition)) > 0;
END_ENTITY;

ENTITY property_definition;
  name : label;
  description : OPTIONAL text;
  definition : characterized_definition;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY shape_aspect;
  name : label;
  description : OPTIONAL text;
  of_shape : product_definition_shape;
  product_definitional : LOGICAL;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY shape_aspect_relationship;
  name : label;
  description : OPTIONAL text;
  relating_shape_aspect : shape_aspect;
  related_shape_aspect : shape_aspect;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

FUNCTION acyclic_characterized_object_relationship
 (relation : characterized_object_relationship; relatives : SET[1:?] OF characterized_object; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF characterized_object_relationship;
    END_LOCAL;

    IF relation.relating_object IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(ca <* bag_to_set(USEDIN(relation.relating_object, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' + 'CHARACTERIZED_OBJECT_RELATIONSHIP.' + 'RELATED_OBJECT')) | specific_relation IN TYPEOF(ca));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_characterized_object_relationship(x[i], relatives + relation.relating_object, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_general_property_relationship
 (relation : general_property_relationship; relatives : SET[1:?] OF general_property; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF general_property_relationship;
    END_LOCAL;

    IF relation.relating_property IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(genp <* bag_to_set(USEDIN(relation.relating_property, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' + 'GENERAL_PROPERTY_RELATIONSHIP.' + 'RELATED_PROPERTY')) | specific_relation IN TYPEOF(genp));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_general_property_relationship(x[i], relatives + relation.relating_property, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_shape_aspect_relationship
 (relation : shape_aspect_relationship; relatives : SET[1:?] OF shape_aspect; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF shape_aspect_relationship;
    END_LOCAL;

    IF relation.relating_shape_aspect IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(sa <* bag_to_set(USEDIN(relation.relating_shape_aspect, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' + 'SHAPE_ASPECT_RELATIONSHIP.' + 'RELATED_SHAPE_ASPECT')) | specific_relation IN TYPEOF(sa));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_shape_aspect_relationship(x[i], relatives + relation.relating_shape_aspect, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION get_shape_aspects
 (c_def_instance : characterized_definition) : SET OF shape_aspect; 
  LOCAL
      pd_set : SET OF product_definition_shape := [];
      pdr_set : SET OF shape_aspect := [];
    END_LOCAL;

    pd_set := bag_to_set(QUERY(pd <* USEDIN(c_def_instance, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.PROPERTY_DEFINITION.DEFINITION') | 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.PRODUCT_DEFINITION_SHAPE' IN TYPEOF(pd)));
    IF (SIZEOF(pd_set) < 1) THEN
      RETURN (pdr_set);
    END_IF;
    REPEAT i := 1 TO HIINDEX(pd_set);
      pdr_set := pdr_set + bag_to_set(USEDIN(pd_set[i], 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.SHAPE_ASPECT.OF_SHAPE'));
    END_REPEAT;
    RETURN (pdr_set);
END_FUNCTION; 

END_SCHEMA;  -- product_property_definition_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\product_property_representation_schema\product_property_representation_schema.exp
   ------------------------------------------------------------
*)

(*
  $Id: product_property_representation_schema.exp,v 1.5 2004/11/10 12:16:33 mikeward Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA product_property_representation_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value,
   get_name_value,
   name_attribute); 

REFERENCE FROM material_property_definition_schema   -- ISO 10303-45
  (property_definition_relationship); 

REFERENCE FROM product_definition_schema   -- ISO 10303-41
  (product_definition,
   product_definition_relationship); 

REFERENCE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_definition,
   general_property,
   product_definition_shape,
   property_definition,
   shape_aspect,
   shape_aspect_relationship); 

REFERENCE FROM representation_schema   -- ISO 10303-43
  (representation,
   representation_item,
   representation_relationship,
   using_representations); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   label,
   text); 


TYPE represented_definition = SELECT
   (general_property, 
    property_definition, 
    property_definition_relationship, 
    shape_aspect, 
    shape_aspect_relationship);
END_TYPE; 

ENTITY context_dependent_shape_representation;
  representation_relation : shape_representation_relationship;
  represented_product_relation : product_definition_shape;
DERIVE
  description : text := get_description_value (SELF);
  name : label := get_name_value (SELF);
WHERE
  WR1: 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION_RELATIONSHIP' IN TYPEOF (SELF.represented_product_relation.definition);
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
  WR3: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
END_ENTITY;

ENTITY item_identified_representation_usage;
  name : label;
  description : OPTIONAL text;
  definition : represented_definition;
  used_representation : representation;
  identified_item : representation_item;
WHERE
  WR1: SELF.used_representation IN using_representations(SELF.identified_item);
END_ENTITY;

ENTITY property_definition_representation;
  definition : represented_definition;
  used_representation : representation;
DERIVE
  description : text := get_description_value (SELF);
  name : label := get_name_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
END_ENTITY;

ENTITY shape_definition_representation
  SUBTYPE OF (property_definition_representation);
WHERE
  WR1: ('PRODUCT_PROPERTY_DEFINITION_SCHEMA.PRODUCT_DEFINITION_SHAPE' IN TYPEOF (SELF.definition)) OR ('PRODUCT_PROPERTY_DEFINITION_SCHEMA.SHAPE_DEFINITION' IN TYPEOF (SELF.definition.definition));
  WR2: 'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.SHAPE_REPRESENTATION' IN TYPEOF(SELF.used_representation);
END_ENTITY;

ENTITY shape_representation
  SUBTYPE OF (representation);
END_ENTITY;

ENTITY shape_representation_relationship
  SUBTYPE OF (representation_relationship);
WHERE
  WR1: 'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.SHAPE_REPRESENTATION' IN (TYPEOF(SELF\representation_relationship.rep_1) + TYPEOF(SELF\representation_relationship.rep_2));
END_ENTITY;

FUNCTION relatives_of_product_definitions
 (definition_set : SET OF product_definition; relation_subtype : STRING) : SET OF product_definition; 
FUNCTION local_relatives_of_product_definitions (definition_set : SET OF product_definition; total_definitions : SET OF product_definition; relation_subtype : STRING):SET OF product_definition;
      LOCAL
        local_def : SET OF product_definition := [];
        local_pdr : SET OF product_definition_relationship := [];
        local_total : SET OF product_definition := [];
      END_LOCAL;

      REPEAT i := 1 TO HIINDEX(definition_set);
        local_pdr := local_pdr + bag_to_set(USEDIN(definition_set[i], relation_subtype + '.RELATING_PRODUCT_DEFINITION'));
      END_REPEAT;
      REPEAT i := 1 TO HIINDEX(local_pdr);
        local_def := local_def + local_pdr[i].related_product_definition;
      END_REPEAT;
      IF (SIZEOF(local_def) - SIZEOF(total_definitions)) = 0 THEN
        RETURN (local_def);
      ELSE
        local_total := total_definitions + local_def;
        RETURN (local_def + (local_relatives_of_product_definitions(local_def - total_definitions, local_total, relation_subtype)));
      END_IF;
    END_FUNCTION;

    RETURN (local_relatives_of_product_definitions(definition_set, definition_set, relation_subtype));
END_FUNCTION; 

FUNCTION relatives_of_shape_representations
 (shape_representation_set : SET OF shape_representation) : SET OF shape_representation; 
 FUNCTION local_relatives_of_shape_representations (shape_representation_set : SET OF shape_representation; total_reps : SET OF shape_representation):SET OF shape_representation;
      LOCAL
        local_shape_rep : SET OF shape_representation := [];
        local_srr : SET OF shape_representation_relationship := [];
        local_total : SET OF shape_representation := [];
      END_LOCAL;

      REPEAT i := 1 TO HIINDEX(shape_representation_set);
        local_srr := local_srr + QUERY(rr <* bag_to_set(USEDIN(shape_representation_set[i], 'REPRESENTATION_SCHEMA.REPRESENTATION_RELATIONSHIP.REP_1')) | 'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.SHAPE_REPRESENTATION_RELATIONSHIP' IN TYPEOF(rr));
      END_REPEAT;
      REPEAT i := 1 TO HIINDEX(local_srr);
        IF 'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.' + 'SHAPE_REPRESENTATION_RELATIONSHIP' IN TYPEOF(local_srr[i]) THEN
          local_shape_rep := local_shape_rep + local_srr[i].rep_2;
        END_IF;
      END_REPEAT;
      IF SIZEOF(local_shape_rep - total_reps) = 0 THEN
        RETURN (shape_representation_set);
      ELSE
        local_total := total_reps + local_shape_rep;
        RETURN (local_shape_rep + (local_relatives_of_shape_representations(local_shape_rep - total_reps, local_total)));
      END_IF;
    END_FUNCTION;

    RETURN (local_relatives_of_shape_representations(shape_representation_set, shape_representation_set));      
END_FUNCTION; 

FUNCTION get_property_definition_representations
 (c_def_instance : characterized_definition) : SET OF property_definition_representation; 
LOCAL
      pd_set : SET OF property_definition := [];
      pdr_set : SET OF property_definition_representation := [];
    END_LOCAL;

    pd_set := bag_to_set(USEDIN(c_def_instance, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.PROPERTY_DEFINITION.DEFINITION'));
    IF (SIZEOF(pd_set) < 1) THEN
      RETURN (pdr_set);
    END_IF;
    REPEAT i := 1 TO HIINDEX(pd_set);
      pdr_set := pdr_set + bag_to_set(USEDIN(pd_set[i], 'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'));
    END_REPEAT;
    RETURN (pdr_set);
END_FUNCTION; 

END_SCHEMA;  -- product_property_representation_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\product_structure_schema\product_structure_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n529.exp *)

SCHEMA product_structure_schema;

  REFERENCE FROM product_definition_schema
    (product,
     product_definition,
     product_definition_relationship,
     acyclic_product_definition_relationship);

  REFERENCE FROM measure_schema
     (measure_with_unit);

  REFERENCE FROM support_resource_schema
     (identifier, label, text);

ENTITY alternate_product_relationship;
  name        : label;
  definition  : OPTIONAL text;
  alternate   : product;
  base        : product;
  basis       : text;
UNIQUE
  UR1: alternate, base;
WHERE
  WR1: alternate :<>: base;
END_ENTITY;

ENTITY assembly_component_usage
  SUPERTYPE OF (ONEOF (next_assembly_usage_occurrence,
                       specified_higher_usage_occurrence,
                       promissory_usage_occurrence))
  SUBTYPE OF (product_definition_usage);
  reference_designator : OPTIONAL identifier;
END_ENTITY;

ENTITY assembly_component_usage_substitute;
  name              : label;
  definition        : OPTIONAL text;
  base              : assembly_component_usage;
  substitute        : assembly_component_usage;
UNIQUE
  UR1: base,substitute;
WHERE
  WR1: base.relating_product_definition :=:
       substitute.relating_product_definition;
  WR2: base :<>: substitute;
END_ENTITY;

ENTITY assembly_component_usage_substitute_with_ranking
  SUBTYPE OF (assembly_component_usage_substitute);
  ranking           : INTEGER;
  ranking_rationale : text;
END_ENTITY;

ENTITY make_from_usage_option
  SUBTYPE OF (product_definition_usage);
  ranking           : INTEGER;
  ranking_rationale : text;
  quantity          : measure_with_unit;
WHERE
  WR1: (NOT ('NUMBER' IN TYPEOF(quantity.value_component)))
       OR (quantity.value_component > 0);
END_ENTITY;

ENTITY make_from_usage_option_group;
  members : SET [2:?] OF make_from_usage_option;
WHERE
  WR1: SIZEOF (QUERY (example <* members |
       example.related_product_definition
       :=: members[1].related_product_definition)) =SIZEOF(members);
END_ENTITY;

ENTITY next_assembly_usage_occurrence
  SUBTYPE OF (assembly_component_usage);
END_ENTITY;

ENTITY product_definition_occurrence_relationship;
  name             : label;
  description      : OPTIONAL text;
  occurrence       : product_definition;
  occurrence_usage : assembly_component_usage;
WHERE
  WR1: occurrence_usage.relating_product_definition :<>: 
       occurrence;
  WR2: occurrence_usage.related_product_definition :<>: 
       occurrence;
  WR3: occurrence.formation :=:
       occurrence_usage.related_product_definition.formation;
END_ENTITY;

ENTITY product_definition_usage
  SUPERTYPE OF (ONEOF (make_from_usage_option,
                       assembly_component_usage))
  SUBTYPE OF (product_definition_relationship);
UNIQUE
  UR1: SELF\product_definition_relationship.id,
       SELF\product_definition_relationship.relating_product_definition,
       SELF\product_definition_relationship.related_product_definition;
WHERE
  WR1:  acyclic_product_definition_relationship
         (SELF,
         [SELF\product_definition_relationship.related_product_definition],
         'PRODUCT_STRUCTURE_SCHEMA.PRODUCT_DEFINITION_USAGE');
END_ENTITY;

ENTITY promissory_usage_occurrence
  SUBTYPE OF (assembly_component_usage);
END_ENTITY;

ENTITY quantified_assembly_component_usage
  SUBTYPE OF (assembly_component_usage);
  quantity   : measure_with_unit;
WHERE
  WR1: (NOT ('NUMBER' IN TYPEOF(quantity.value_component)))
       OR (quantity.value_component > 0);
END_ENTITY;

ENTITY specified_higher_usage_occurrence
  SUBTYPE OF (assembly_component_usage);
  upper_usage   : assembly_component_usage;
  next_usage    : next_assembly_usage_occurrence;
UNIQUE
  UR1: upper_usage, next_usage;
WHERE
  WR1: SELF :<>: upper_usage;
  WR2: SELF\product_definition_relationship.relating_product_definition
       :=: upper_usage.relating_product_definition;
  WR3: SELF\product_definition_relationship.related_product_definition
       :=: next_usage.related_product_definition;
  WR4: (upper_usage.related_product_definition :=:
       next_usage.relating_product_definition) OR
       (SIZEOF (QUERY (pdr <* USEDIN (upper_usage.related_product_definition,
       'PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION_RELATIONSHIP.' +
       'RELATED_PRODUCT_DEFINITION') |
        pdr.relating_product_definition :=: 
        next_usage.relating_product_definition)) = 1);
  WR5: SIZEOF (['PRODUCT_STRUCTURE_SCHEMA.NEXT_ASSEMBLY_USAGE_OCCURRENCE',
       'PRODUCT_STRUCTURE_SCHEMA.SPECIFIED_HIGHER_USAGE_OCCURRENCE']
       * TYPEOF(upper_usage)) = 1;
END_ENTITY;

END_SCHEMA; -- product_structure


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\qualifications_schema\qualifications_schema.exp
   ------------------------------------------------------------
*)

(*
  $Id: qualifications_schema.exp,v 1.10 2004/11/10 15:33:21 mikeward Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA qualifications_schema;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


ENTITY qualification;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY qualification_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_qualification : qualification;
  related_qualification : qualification;
END_ENTITY;

ENTITY qualification_type;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY qualification_type_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_qualification_type : qualification_type;
  related_qualification_type : qualification_type;
END_ENTITY;

FUNCTION acyclic_qualification_relationship (relation : qualification_relationship; relatives : SET OF qualification; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF qualification_relationship;
    END_LOCAL;

    IF relation.relating_qualification IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(qual <* bag_to_set(USEDIN(relation.relating_qualification, 'QUALIFICATIONS_SCHEMA.' + 'QUALIFICATION_RELATIONSHIP.' + 'RELATED_QUALIFICATION')) | specific_relation IN TYPEOF(qual));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_qualification_relationship(x[i], relatives + relation.relating_qualification, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

  FUNCTION acyclic_qualification_type_relationship (relation : qualification_type_relationship; relatives : SET OF qualification_type; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF qualification_type_relationship;
    END_LOCAL;

    IF relation.relating_qualification_type IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(qultyp <* bag_to_set(USEDIN(relation.relating_qualification_type, 'QUALIFICATIONS_SCHEMA.' + 'QUALIFICATION_TYPE_RELATIONSHIP.' + 'RELATED_QUALIFICATION_TYPE')) | specific_relation IN TYPEOF(qultyp));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_qualification_type_relationship(x[i], relatives + relation.relating_qualification_type, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

END_SCHEMA;  -- qualifications_schema



(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\qualified_measure_schema\qualified_measure_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n257.exp *)

SCHEMA qualified_measure_schema;

REFERENCE FROM support_resource_schema
     (label,
      text);

REFERENCE FROM measure_schema
     (measure_with_unit);

REFERENCE FROM representation_schema
     (representation_item);

TYPE value_qualifier = SELECT
  (precision_qualifier,
   type_qualifier,
   uncertainty_qualifier);
END_TYPE;

ENTITY type_qualifier;
  name : label;
END_ENTITY;

ENTITY precision_qualifier;
  precision_value : INTEGER;
END_ENTITY;

ENTITY uncertainty_qualifier
  SUPERTYPE OF (ONEOF (standard_uncertainty,
                     qualitative_uncertainty));
  measure_name : label;
  description  : text;
END_ENTITY;

ENTITY qualitative_uncertainty
  SUBTYPE OF (uncertainty_qualifier);
  uncertainty_value : text;
END_ENTITY;

ENTITY standard_uncertainty
  SUPERTYPE OF (expanded_uncertainty)
  SUBTYPE OF (uncertainty_qualifier);
  uncertainty_value : REAL;
END_ENTITY;

ENTITY expanded_uncertainty
  SUBTYPE OF (standard_uncertainty);
  coverage_factor : REAL;
END_ENTITY;

ENTITY measure_representation_item
  SUBTYPE OF (representation_item, measure_with_unit);
END_ENTITY;

ENTITY descriptive_representation_item
  SUBTYPE OF (representation_item);
  description : text;
END_ENTITY;

ENTITY qualified_representation_item
  SUBTYPE OF (representation_item);
  qualifiers : SET [1:?] OF value_qualifier;
WHERE
  WR1: SIZEOF(QUERY(temp <* qualifiers |
             'QUALIFIED_MEASURE_SCHEMA.PRECISION_QUALIFIER'
             IN TYPEOF(temp))) < 2;
END_ENTITY;

ENTITY measure_qualification;
  name : label;
  description : text;
  qualified_measure : measure_with_unit;
  qualifiers : SET [1:?] OF value_qualifier;
WHERE
  WR1: SIZEOF(QUERY(temp <* qualifiers |
             'QUALIFIED_MEASURE_SCHEMA.PRECISION_QUALIFIER'
             IN TYPEOF(temp))) < 2;
END_ENTITY;

END_SCHEMA;  -- qualified_measure_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\representation_schema\representation_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n458.exp *)

SCHEMA representation_schema;

REFERENCE FROM basic_attribute_schema
  (get_description_value,
   get_id_value);

REFERENCE FROM measure_schema
  (measure_value,
   measure_with_unit);

REFERENCE FROM support_resource_schema
  (bag_to_set,
   identifier,
   label,
   text);

TYPE compound_item_definition = SELECT
  (list_representation_item,
   set_representation_item);
END_TYPE;

TYPE founded_item_select = SELECT
  (founded_item,
   representation_item);
END_TYPE;

TYPE list_representation_item = LIST [1:?] OF representation_item;
END_TYPE;

TYPE set_representation_item = SET [1:?] OF representation_item;
END_TYPE;

TYPE transformation = SELECT
  (item_defined_transformation,
   functionally_defined_transformation);
END_TYPE;

ENTITY compound_representation_item
  SUBTYPE OF (representation_item);
  item_element : compound_item_definition;
END_ENTITY;

ENTITY definitional_representation
  SUBTYPE OF (representation);
WHERE
  WR1: 'REPRESENTATION_SCHEMA.PARAMETRIC_REPRESENTATION_CONTEXT' IN
        TYPEOF (SELF\representation.context_of_items );
END_ENTITY;

ENTITY founded_item;
END_ENTITY;

ENTITY functionally_defined_transformation;
  name        : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY global_uncertainty_assigned_context
  SUBTYPE OF (representation_context);
  uncertainty : SET [1:?] OF uncertainty_measure_with_unit;
END_ENTITY;

ENTITY item_defined_transformation;
  name             : label;
  description      : OPTIONAL text;
  transform_item_1 : representation_item;
  transform_item_2 : representation_item;
END_ENTITY;

ENTITY mapped_item
  SUBTYPE OF (representation_item);
  mapping_source : representation_map;
  mapping_target : representation_item;
WHERE
  WR1: acyclic_mapped_representation(using_representations(SELF), [SELF]);
END_ENTITY;

ENTITY parametric_representation_context
  SUBTYPE OF (representation_context);
END_ENTITY;

ENTITY representation;
  name             : label;
  items            : SET[1:?] OF representation_item;
  context_of_items : representation_context;
DERIVE
  id               : identifier := get_id_value (SELF);
  description      : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +
                             'ID_ATTRIBUTE.IDENTIFIED_ITEM'))
       <= 1;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +
                             'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'))
       <= 1;
 END_ENTITY;

ENTITY representation_context;
  context_identifier : identifier;
  context_type       : text;
INVERSE
  representations_in_context : SET [1:?] OF representation
    FOR context_of_items;
END_ENTITY;

ENTITY representation_item;
  name : label;
WHERE
  WR1: SIZEOF(using_representations(SELF)) > 0;
END_ENTITY;

ENTITY representation_item_relationship;
  name : label;
  description : OPTIONAL text;
  relating_representation_item : representation_item;
  related_representation_item : representation_item;
END_ENTITY;

ENTITY representation_map;
  mapping_origin        : representation_item;
  mapped_representation : representation;
INVERSE
  map_usage : SET[1:?] OF mapped_item FOR mapping_source;
WHERE
  WR1: item_in_context(SELF.mapping_origin,
       SELF.mapped_representation.context_of_items);
END_ENTITY;

ENTITY representation_relationship;
  name        : label;
  description : OPTIONAL text;
  rep_1       : representation;
  rep_2       : representation;
END_ENTITY;

ENTITY representation_relationship_with_transformation
  SUBTYPE OF (representation_relationship);
  transformation_operator : transformation;
WHERE
  WR1:
   SELF\representation_relationship.rep_1.context_of_items
   :<>: SELF\representation_relationship.rep_2.context_of_items;
END_ENTITY;

ENTITY uncertainty_assigned_representation
  SUBTYPE OF (representation);
  uncertainty : SET [1:?] OF uncertainty_measure_with_unit;
END_ENTITY;

ENTITY uncertainty_measure_with_unit
  SUBTYPE OF (measure_with_unit);
  name        : label;
  description : OPTIONAL text;
WHERE
  WR1: valid_measure_value (SELF\measure_with_unit.value_component);
END_ENTITY;

ENTITY value_representation_item
SUBTYPE OF (representation_item);
  value_component : measure_value;
WHERE
  WR1: SIZEOF (QUERY (rep <* using_representations (SELF) |
       NOT ('MEASURE_SCHEMA.GLOBAL_UNIT_ASSIGNED_CONTEXT'
       IN TYPEOF (rep.context_of_items)
       ))) = 0;
END_ENTITY;

FUNCTION acyclic_mapped_representation
  (parent_set   : SET OF representation;
   children_set : SET OF representation_item) : BOOLEAN;
  LOCAL
    x,y : SET OF representation_item;
  END_LOCAL;
  -- Determine the subset of children_set that are mapped_items
  x := QUERY(z <* children_set | 'REPRESENTATION_SCHEMA.MAPPED_ITEM'
       IN TYPEOF(z));
  -- Determine that the subset has elements
  IF SIZEOF(x) > 0 THEN
    -- Check each element of the set
    REPEAT i := 1 TO HIINDEX(x);
      -- If the selected element maps a representation in the
      -- parent_set, then return false
      IF x[i]\mapped_item.mapping_source.mapped_representation
        IN parent_set THEN
        RETURN (FALSE);
      END_IF;
      -- Recursive check of the items of mapped_representation
      IF NOT acyclic_mapped_representation
        (parent_set +
        x[i]\mapped_item.mapping_source.mapped_representation,
        x[i]\mapped_item.mapping_source.mapped_representation.items) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;
  -- Determine the subset of children_set that are not
  -- mapped_items
  x := children_set - x;
  -- Determine that the subset has elements
  IF SIZEOF(x) > 0 THEN
    -- For each element of the set:
    REPEAT i := 1 TO HIINDEX(x);
      -- Determine the set of representation_items referenced
      y := QUERY(z <* bag_to_set( USEDIN(x[i], '')) |
           'REPRESENTATION_SCHEMA.REPRESENTATION_ITEM' IN TYPEOF(z));
      -- Recursively check for an offending mapped_item
      -- Return false for any errors encountered
      IF NOT acyclic_mapped_representation(parent_set, y) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;
  -- Return true when all elements are checked and
  -- no error conditions found
  RETURN (TRUE);
END_FUNCTION;

FUNCTION item_in_context
  (item  : representation_item;
   cntxt : representation_context) : BOOLEAN;
  LOCAL
    y : BAG OF representation_item;
  END_LOCAL;
  -- If there is one or more representation using both the item
  -- and cntxt return true.
  IF SIZEOF(USEDIN(item,'REPRESENTATION_SCHEMA.REPRESENTATION.ITEMS')
    * cntxt.representations_in_context) > 0 THEN
    RETURN (TRUE);
    -- Determine the bag of representation_items that reference
    -- item
    ELSE y := QUERY(z <* USEDIN (item , '') |
           'REPRESENTATION_SCHEMA.REPRESENTATION_ITEM' IN TYPEOF(z));
      -- Ensure that the bag is not empty
      IF SIZEOF(y) > 0 THEN
      -- For each element in the bag
      REPEAT i := 1 TO HIINDEX(y);
        -- Check to see it is an item in the input cntxt.
        IF item_in_context(y[i], cntxt) THEN
          RETURN (TRUE);
        END_IF;
      END_REPEAT;
    END_IF;
  END_IF;
  -- Return false when all possible branches have been checked
  -- with no success.
  RETURN (FALSE);
END_FUNCTION;

FUNCTION using_items (item : founded_item_select;
                      checked_items: SET OF founded_item_select)
                    : SET OF founded_item_select;
  LOCAL
    new_check_items    : SET OF founded_item_select;
    result_items       : SET OF founded_item_select;
    next_items         : SET OF founded_item_select;
  END_LOCAL;
  result_items := [];
  new_check_items := checked_items + item;
  -- Find the set of representation_items or founded_items
  -- in which item is used directly.
  next_items := QUERY(z <* bag_to_set( USEDIN(item , '')) |
    ('REPRESENTATION_SCHEMA.REPRESENTATION_ITEM' IN TYPEOF(z)) OR
    ('REPRESENTATION_SCHEMA.FOUNDED_ITEM'        IN TYPEOF(z)));
  -- If the set of next_items is not empty;
  IF SIZEOF(next_items) > 0 THEN
    -- For each element in the set, find the using_items recursively
    REPEAT i := 1 TO HIINDEX(next_items);
      -- Check for loop in data model, i.e. one of the next_items
      -- occurred earlier in the set of check_items;
      IF NOT(next_items[i] IN new_check_items) THEN
        result_items := result_items + next_items[i] +
                        using_items(next_items[i],new_check_items);
      END_IF;
    END_REPEAT;
  END_IF;
  -- return the set of representation_items or founded_items
  -- in which the input item is used directly and indirectly.
  RETURN (result_items);
END_FUNCTION;

FUNCTION using_representations (item : founded_item_select)
  : SET OF representation;
  LOCAL
    results            : SET OF representation;
    result_bag         : BAG OF representation;
    intermediate_items : SET OF founded_item_select;
  END_LOCAL;
  -- Find the representations in which the item is used and add to the
  -- results set.
  results := [];
  result_bag :=
USEDIN(item,'REPRESENTATION_SCHEMA.REPRESENTATION.ITEMS');
  IF SIZEOF(result_bag) > 0 THEN
    REPEAT i := 1 TO HIINDEX(result_bag);
      results := results + result_bag[i];
    END_REPEAT;
  END_IF;
  -- Find all representation_items or founded_items
  -- by which item is referenced directly or indirectly.
  intermediate_items := using_items(item,[]);
  -- If the set of intermediate items is not empty;
  IF SIZEOF(intermediate_items) > 0 THEN
    -- For each element in the set, add the
    -- representations of that element.
    REPEAT i := 1 TO HIINDEX(intermediate_items);
      result_bag := USEDIN(intermediate_items[i],
                    'REPRESENTATION_SCHEMA.REPRESENTATION.ITEMS');
      IF SIZEOF(result_bag) > 0 THEN
        REPEAT j := 1 TO HIINDEX(result_bag);
          results := results + result_bag[j];
        END_REPEAT;
      END_IF;
    END_REPEAT;
  END_IF;
  -- Return the set of representation in which the input item is
  -- used directly and indirectly (through intervening
  -- representation_items or founded items).
  RETURN (results);
END_FUNCTION;

FUNCTION valid_measure_value
  (m : measure_value) : BOOLEAN;
  IF ('REAL' IN TYPEOF (m)) THEN
  RETURN (m > 0.0);
  ELSE
    IF ('INTEGER' IN TYPEOF (m)) THEN
    RETURN (m > 0);
    ELSE
      RETURN (TRUE);
    END_IF;
  END_IF;
END_FUNCTION;

END_SCHEMA; -- representation_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\security_classification_schema\security_classification_schema.exp
   ------------------------------------------------------------
*)

(*
  $Id: security_classification_schema.exp,v 1.4 2004/11/10 12:21:16 mikeward Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA security_classification_schema;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (label,
   text); 


ENTITY security_classification;
  name : label;
  purpose : text;
  security_level : security_classification_level;
END_ENTITY;

ENTITY security_classification_level;
  name : label;
END_ENTITY;

END_SCHEMA;  -- security_classification_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\shape_aspect_definition_schema\shape_aspect_definition_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n548.exp *)

SCHEMA shape_aspect_definition_schema;
REFERENCE FROM product_property_definition_schema
    (shape_aspect,
     shape_aspect_relationship);
REFERENCE FROM measure_schema
    (measure_with_unit);
REFERENCE FROM support_resource_schema
    (bag_to_set, label, identifier);

TYPE limit_condition = ENUMERATION OF
  (maximum_material_condition,
   least_material_condition,
   regardless_of_feature_size);
END_TYPE;

ENTITY datum
  SUBTYPE OF (shape_aspect);
  identification               :identifier;
INVERSE
  established_by_relationships : SET [1:?] OF shape_aspect_relationship
                                 FOR related_shape_aspect;
WHERE
  WR1: SIZEOF (QUERY (x<*SELF\datum.established_by_relationships |
       SIZEOF (TYPEOF(x\shape_aspect_relationship.relating_shape_aspect)* 
       ['SHAPE_ASPECT_DEFINITION_SCHEMA.DATUM_FEATURE', 
       'SHAPE_ASPECT_DEFINITION_SCHEMA.DATUM_TARGET']) <> 1))=0;
END_ENTITY;

ENTITY datum_feature
   SUBTYPE OF (shape_aspect);
INVERSE 
   feature_basis_relationship : shape_aspect_relationship
                              FOR relating_shape_aspect;
WHERE
   WR1: SIZEOF (QUERY (sar<* bag_to_set (USEDIN (SELF,
     'PRODUCT_PROPERTY_DEFINITION_SCHEMA.SHAPE_ASPECT_RELATIONSHIP.'+
       'RELATING_SHAPE_ASPECT'))
       | NOT ('SHAPE_ASPECT_DEFINITION_SCHEMA.DATUM' IN TYPEOF
       (sar\shape_aspect_relationship.related_shape_aspect))))=0;
  WR2: SELF\shape_aspect.product_definitional = TRUE;
END_ENTITY;

ENTITY datum_target
  SUBTYPE OF (shape_aspect);
  target_id             : identifier; 
INVERSE
  target_basis_relationship : shape_aspect_relationship FOR
                              relating_shape_aspect;
WHERE
   WR1: SIZEOF (QUERY (sar<* bag_to_set (USEDIN (SELF,
     'PRODUCT_PROPERTY_DEFINITION_SCHEMA.SHAPE_ASPECT_RELATIONSHIP.' +
       'RELATING_SHAPE_ASPECT'))
      | NOT ('SHAPE_ASPECT_DEFINITION_SCHEMA.DATUM' IN TYPEOF 
      (sar\shape_aspect_relationship.related_shape_aspect))))=0;
   WR2: SELF\shape_aspect.product_definitional = TRUE;
END_ENTITY;

ENTITY datum_reference;
  precedence       : INTEGER;
  referenced_datum : datum;
WHERE
  WR1: precedence > 0;
END_ENTITY;

ENTITY referenced_modified_datum
  SUBTYPE OF (datum_reference);
  modifier : limit_condition;
END_ENTITY;

ENTITY composite_shape_aspect
  SUBTYPE OF (shape_aspect);
INVERSE
  component_relationships : SET [2:?] OF shape_aspect_relationship
                            FOR relating_shape_aspect;
END_ENTITY;

ENTITY derived_shape_aspect
  SUPERTYPE OF (ONEOF (apex,
                       centre_of_symmetry,
                       geometric_alignment,
                       geometric_intersection,
                       parallel_offset,
                       perpendicular_to,
                       extension,
                       tangent))
  SUBTYPE OF (shape_aspect);
INVERSE
  deriving_relationships : SET [1:?] OF
          shape_aspect_relationship FOR relating_shape_aspect;
WHERE
   WR1: SIZEOF (QUERY (dr <*
          SELF\derived_shape_aspect.deriving_relationships |
          NOT ('SHAPE_ASPECT_DEFINITION_SCHEMA.' +
               'SHAPE_ASPECT_DERIVING_RELATIONSHIP'
          IN TYPEOF (dr)))) = 0;
END_ENTITY;

ENTITY apex
  SUBTYPE OF (derived_shape_aspect);
END_ENTITY;

ENTITY centre_of_symmetry 
   SUBTYPE OF (derived_shape_aspect);
WHERE
    WR1: SIZEOF
        (QUERY(sadr<*SELF\derived_shape_aspect.deriving_relationships|
    NOT('SHAPE_ASPECT_DEFINITION_SCHEMA.SYMMETRIC_SHAPE_ASPECT'
     IN TYPEOF
     (sadr\shape_aspect_relationship.related_shape_aspect))))=0; 
END_ENTITY;

ENTITY geometric_alignment
  SUBTYPE OF (derived_shape_aspect);
WHERE
  WR1: SIZEOF (SELF\derived_shape_aspect.deriving_relationships)> 1;
END_ENTITY;

ENTITY geometric_intersection
  SUBTYPE OF (derived_shape_aspect);
WHERE
  WR1: SIZEOF (SELF\derived_shape_aspect.deriving_relationships)> 1;
END_ENTITY;

ENTITY parallel_offset
  SUBTYPE OF (derived_shape_aspect);
  offset               : measure_with_unit;
WHERE
  WR1: SIZEOF (SELF\derived_shape_aspect.deriving_relationships)= 1;
END_ENTITY;

ENTITY perpendicular_to
  SUBTYPE OF (derived_shape_aspect);
WHERE
  WR1: SIZEOF (SELF\derived_shape_aspect.deriving_relationships)= 1;
END_ENTITY;

ENTITY extension
  SUBTYPE OF (derived_shape_aspect);
WHERE
  WR1: SIZEOF (SELF\derived_shape_aspect.deriving_relationships)= 1;
END_ENTITY;

ENTITY tangent
  SUBTYPE OF (derived_shape_aspect);
WHERE
  WR1: SIZEOF (SELF\derived_shape_aspect.deriving_relationships)= 1;
END_ENTITY;

ENTITY shape_aspect_deriving_relationship
       SUBTYPE OF (shape_aspect_relationship);
     WHERE
       WR1: 'SHAPE_ASPECT_DEFINITION_SCHEMA.DERIVED_SHAPE_ASPECT' IN
TYPEOF
            (SELF\SHAPE_ASPECT_RELATIONSHIP.RELATING_SHAPE_ASPECT);
     END_ENTITY;

ENTITY symmetric_shape_aspect
  SUBTYPE OF (shape_aspect);
INVERSE
  basis_relationships : SET [1:?] OF shape_aspect_relationship
                        FOR relating_shape_aspect;
WHERE
  WR1: SIZEOF (QUERY (x<*SELF\symmetric_shape_aspect.basis_relationships |
       'SHAPE_ASPECT_DEFINITION_SCHEMA.CENTRE_OF_SYMMETRY' IN TYPEOF 
       (x\shape_aspect_relationship.related_shape_aspect)))>=1;
END_ENTITY;

END_SCHEMA;  --  shape_aspect_definition_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\shape_dimension_schema\shape_dimension_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n548.exp *)

SCHEMA shape_dimension_schema;
REFERENCE FROM measure_schema
   (measure_with_unit);
REFERENCE FROM representation_schema
    (representation);
REFERENCE FROM qualified_measure_schema
    (measure_representation_item, 
     qualified_representation_item);
REFERENCE FROM product_property_representation_schema
    (shape_representation);
REFERENCE FROM product_property_definition_schema
    (shape_aspect,
     shape_aspect_relationship);
REFERENCE FROM support_resource_schema
    (label,
     text);

TYPE angle_relator = ENUMERATION OF
  (equal,
   large,
   small);
END_TYPE;

TYPE dimensional_characteristic = SELECT (dimensional_location,
                                          dimensional_size);
END_TYPE;

ENTITY angular_location
  SUBTYPE OF (dimensional_location);
  angle_selection : angle_relator;
END_ENTITY;

ENTITY angular_size
  SUBTYPE OF (dimensional_size);
  angle_selection : angle_relator;
END_ENTITY;

ENTITY dimensional_characteristic_representation;
  dimension      : dimensional_characteristic; 
  representation : shape_dimension_representation;
END_ENTITY;

ENTITY dimensional_location
  SUPERTYPE OF (ONEOF (angular_location,
                       dimensional_location_with_path))
  SUBTYPE OF (shape_aspect_relationship);
END_ENTITY;

ENTITY dimensional_location_with_path
  SUBTYPE OF (dimensional_location);
  path : shape_aspect;
END_ENTITY;

ENTITY dimensional_size
  SUPERTYPE OF (ONEOF (angular_size,
                       dimensional_size_with_path));
  applies_to : shape_aspect;
  name       : label;
WHERE
  WR1: applies_to.product_definitional = TRUE;
END_ENTITY;

ENTITY dimensional_size_with_path
  SUBTYPE OF (dimensional_size);
  path : shape_aspect;
END_ENTITY;

ENTITY shape_dimension_representation
                SUBTYPE OF (shape_representation);
  WHERE
   WR1: SIZEOF (QUERY (temp <* SELF\representation.items | 
    NOT ('QUALIFIED_MEASURE_SCHEMA.MEASURE_REPRESENTATION_ITEM' 
        IN TYPEOF (temp)))) = 0;
   WR2: SIZEOF (SELF\representation.items) <= 3;
   WR3: SIZEOF (QUERY (pos_mri <* QUERY (real_mri <*
        SELF\representation.items | 'REAL' IN TYPEOF
        (real_mri\measure_with_unit.value_component) ) |        
     NOT  (pos_mri\measure_with_unit.value_component > 0.0 ))) = 0;
END_ENTITY;

END_SCHEMA;   --  shape_dimension_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\shape_tolerance_schema\shape_tolerance_schema.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ../../irs/wg12n548.exp *)

SCHEMA shape_tolerance_schema;
REFERENCE FROM product_property_definition_schema
    (shape_aspect,
     shape_aspect_relationship);
REFERENCE FROM measure_schema
   (derive_dimensional_exponents,
    dimensional_exponents,
    measure_with_unit,
    measure_value);
REFERENCE FROM representation_schema
    (representation);
REFERENCE FROM support_resource_schema
    (label,
     text);
REFERENCE FROM shape_aspect_definition_schema
    (datum_reference,
     limit_condition);
REFERENCE FROM shape_dimension_schema
    (dimensional_characteristic,
     dimensional_location);

TYPE tolerance_method_definition = SELECT
  (tolerance_value,
   limits_and_fits);
END_TYPE;

TYPE  shape_tolerance_select = SELECT
     (geometric_tolerance,
      plus_minus_tolerance);
END_TYPE;

ENTITY dimension_related_tolerance_zone_element;
  related_dimension : dimensional_location; 
  related_element   : tolerance_zone_definition;
END_ENTITY;

ENTITY geometric_tolerance;
  name                    : label;
  description             : text;
  magnitude               : measure_with_unit; 
  toleranced_shape_aspect : shape_aspect; 
WHERE
  WR1: ('NUMBER' IN TYPEOF
       (magnitude\measure_with_unit.value_component)) AND
       (magnitude\measure_with_unit.value_component >= 0.0);
END_ENTITY;

ENTITY geometric_tolerance_relationship;
                                   name                         :label;
                                   description                  :text;
                                   relating_geometric_tolerance : geometric_tolerance; 
                                   related_geometric_tolerance  : geometric_tolerance; 
END_ENTITY;

ENTITY geometric_tolerance_with_datum_reference
   SUBTYPE OF (geometric_tolerance);
   datum_system : SET [1:?] OF  datum_reference;
END_ENTITY;

ENTITY geometric_tolerance_with_defined_unit
  SUBTYPE OF (geometric_tolerance);
  unit_size : measure_with_unit;
WHERE
  WR1: ('NUMBER' IN TYPEOF
       (unit_size\measure_with_unit.value_component)) AND
       (unit_size\measure_with_unit.value_component > 0.0);
END_ENTITY;

ENTITY modified_geometric_tolerance
  SUBTYPE OF (geometric_tolerance);
  modifier : limit_condition;
END_ENTITY;

ENTITY projected_zone_definition 
  SUBTYPE OF (tolerance_zone_definition);  
  projection_end   : shape_aspect; 
  projected_length : measure_with_unit;
WHERE 
  WR1: ('NUMBER' IN TYPEOF
       (projected_length\measure_with_unit.value_component)) AND
       (projected_length\measure_with_unit.value_component > 0.0);
  WR2: (derive_dimensional_exponents
       (projected_length\measure_with_unit.unit_component)=
        dimensional_exponents(1,0,0,0,0,0,0));
END_ENTITY;

ENTITY runout_zone_definition
  SUBTYPE OF (tolerance_zone_definition); 
  orientation  : runout_zone_orientation;
END_ENTITY;

ENTITY runout_zone_orientation;
  angle : measure_with_unit;
END_ENTITY;

ENTITY runout_zone_orientation_reference_direction
  SUBTYPE OF (runout_zone_orientation); 
  orientation_defining_relationship: shape_aspect_relationship;
END_ENTITY;

ENTITY statistical_distribution_for_tolerance
  SUBTYPE OF (representation);
WHERE
  WR1: SIZEOF (QUERY (item <* SELF\representation.items |
       NOT ('QUALIFIED_MEASURE_SCHEMA.MEASURE_REPRESENTATION_ITEM' 
       IN TYPEOF (item)))) = 0;
END_ENTITY;

ENTITY tolerance_with_statistical_distribution;
   associated_tolerance : shape_tolerance_select;
   tolerance_allocation : statistical_distribution_for_tolerance;
END_ENTITY;

ENTITY tolerance_zone
  SUBTYPE OF (shape_aspect);
  defining_tolerance : SET [1:?] OF geometric_tolerance; 
  form               : tolerance_zone_form;
END_ENTITY;

ENTITY tolerance_zone_form;
  name : label;
END_ENTITY;

ENTITY tolerance_zone_definition
  SUPERTYPE OF (ONEOF (projected_zone_definition,
                       runout_zone_definition));
  zone : tolerance_zone;
  boundaries: SET [1:?] OF shape_aspect;
END_ENTITY;

ENTITY limits_and_fits;
  form_variance   : label;
  zone_variance   : label;
  grade           : label;
  source          : text;
END_ENTITY;

ENTITY  plus_minus_tolerance;
  range                : tolerance_method_definition; 
  toleranced_dimension : dimensional_characteristic;
UNIQUE
  UR1: toleranced_dimension;
END_ENTITY;

ENTITY tolerance_value; 
   lower_bound : measure_with_unit; 
   upper_bound : measure_with_unit;
WHERE 
   WR1: upper_bound\measure_with_unit.value_component >
        lower_bound\measure_with_unit.value_component;  
   WR2: upper_bound\measure_with_unit.unit_component =
        lower_bound\measure_with_unit.unit_component;
END_ENTITY;

END_SCHEMA;   -- End of shape_tolerance_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\support_resource_schema\support_resource_schema.exp
   ------------------------------------------------------------
*)

(*
  $Id: support_resource_schema.exp,v 1.7 2004/11/10 13:09:41 mikeward Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA support_resource_schema;


TYPE identifier = STRING;
END_TYPE; 

TYPE label = STRING;
END_TYPE; 

TYPE text = STRING;
END_TYPE; 

FUNCTION bag_to_set (the_bag : BAG OF GENERIC:intype):SET OF GENERIC:intype;
    LOCAL
      the_set : SET OF GENERIC:intype := [];
    END_LOCAL;

    IF SIZEOF(the_bag) > 0 THEN
      REPEAT i := 1 TO HIINDEX(the_bag);
        the_set := the_set + the_bag[i];
      END_REPEAT;
    END_IF;
    RETURN (the_set);
END_FUNCTION; 

FUNCTION type_check_function
 (the_type : GENERIC; sub_names : SET OF STRING; criterion : INTEGER) : LOGICAL; 
IF (( NOT EXISTS ( the_type ) ) OR (NOT ({0<= criterion <=3})) OR
(SIZEOF ( sub_names ) = 0 ) ) THEN RETURN (UNKNOWN);
ELSE
  CASE criterion OF
       0: RETURN (SIZEOF ( sub_names * TYPEOF (the_type) ) > 0);
       1: RETURN (SIZEOF ( sub_names * TYPEOF (the_type) ) = 0);
       2: RETURN (SIZEOF ( sub_names * TYPEOF (the_type) ) = 1);
       3: RETURN (SIZEOF ( sub_names * TYPEOF (the_type) ) <= 1);
  END_CASE;
END_IF;
END_FUNCTION; 

END_SCHEMA;  -- support_resource_schema


(*
   ------------------------------------------------------------
C:\Repositories\stepmod\data\resources\topology_schema\topology_schema.exp
   ------------------------------------------------------------
*)

 (* Document WG12 N1046r date 2003-04-29. EXPRESS listing corresponding to part
 42  edition IS WG12 N536, as modified by TC1 WG12 N608 and
 by revision 1 (edition 3)  WG12 N1045 *)

 SCHEMA topology_schema;
   REFERENCE FROM geometry_schema;
   REFERENCE FROM representation_schema(representation_item);

 CONSTANT
    dummy_tri : topological_representation_item := representation_item('')||
                   topological_representation_item();        
 END_CONSTANT;

 TYPE list_of_reversible_topology_item =
                               LIST [0:?] of reversible_topology_item;
 END_TYPE;

 TYPE reversible_topology = SELECT
           (reversible_topology_item,
            list_of_reversible_topology_item,
            set_of_reversible_topology_item);
 END_TYPE;

 TYPE reversible_topology_item = SELECT
   (edge, 
    path, 
    face, 
    face_bound,
    closed_shell, 
    open_shell);
 END_TYPE;

  TYPE set_of_reversible_topology_item =
                       SET [0:?] of reversible_topology_item;
  END_TYPE;

 TYPE shell = SELECT
   (vertex_shell,
    wire_shell,
    open_shell,
    closed_shell);
 END_TYPE;

 ENTITY closed_shell
   SUBTYPE OF (connected_face_set);
 END_ENTITY;

 ENTITY connected_edge_set
   SUBTYPE OF (topological_representation_item);
   ces_edges : SET [1:?] OF edge;
 END_ENTITY;

 ENTITY connected_face_set
   SUPERTYPE OF (ONEOF (closed_shell, open_shell))
   SUBTYPE OF (topological_representation_item);
   cfs_faces : SET [1:?] OF face;
 END_ENTITY;

 ENTITY connected_face_sub_set
   SUBTYPE OF (connected_face_set);
   parent_face_set   :  connected_face_set;
 END_ENTITY;

 ENTITY edge
   SUPERTYPE OF(ONEOF(edge_curve, oriented_edge, subedge))
   SUBTYPE OF (topological_representation_item);
   edge_start : vertex;
   edge_end   : vertex;
 END_ENTITY;

 ENTITY edge_curve
   SUBTYPE OF(edge,geometric_representation_item);
   edge_geometry : curve;
   same_sense    : BOOLEAN;
 END_ENTITY;

 ENTITY edge_loop
   SUBTYPE OF (loop,path);
 DERIVE
   ne : INTEGER := SIZEOF(SELF\path.edge_list);
 WHERE
   WR1: (SELF\path.edge_list[1].edge_start) :=:
        (SELF\path.edge_list[ne].edge_end);
 END_ENTITY;

 ENTITY face
   SUPERTYPE OF(ONEOF(face_surface, subface, oriented_face))
   SUBTYPE OF (topological_representation_item);
   bounds : SET[1:?] OF face_bound;
 WHERE
   WR1: NOT (mixed_loop_type_set(list_to_set(list_face_loops(SELF))));
   WR2: SIZEOF(QUERY(temp <* bounds | 'TOPOLOGY_SCHEMA.FACE_OUTER_BOUND' IN
                                               TYPEOF(temp))) <= 1;
 END_ENTITY;

 ENTITY face_bound
   SUBTYPE OF(topological_representation_item);
   bound       :  loop;
   orientation :  BOOLEAN;
 END_ENTITY;

    ENTITY face_outer_bound
    SUBTYPE OF (face_bound);
    END_ENTITY;

 ENTITY face_surface
   SUBTYPE OF(face,geometric_representation_item);
   face_geometry :  surface;
   same_sense    :  BOOLEAN;
 WHERE
   WR1: NOT ('GEOMETRY_SCHEMA.ORIENTED_SURFACE' IN TYPEOF(face_geometry));
 END_ENTITY;

 ENTITY loop
   SUPERTYPE OF (ONEOF(vertex_loop, edge_loop, poly_loop))
   SUBTYPE OF (topological_representation_item);
 END_ENTITY;

 ENTITY open_path
   SUBTYPE OF (path);
 DERIVE
   ne : INTEGER := SIZEOF(SELF\path.edge_list);
 WHERE
   WR1: (SELF\path.edge_list[1].edge_element.edge_start) :<>:
                       (SELF\path.edge_list[ne].edge_element.edge_end);
 END_ENTITY;

 ENTITY open_shell
   SUBTYPE OF (connected_face_set);
 END_ENTITY;

 ENTITY oriented_closed_shell
   SUBTYPE OF (closed_shell);
   closed_shell_element : closed_shell;
   orientation          : BOOLEAN;
 DERIVE
   SELF\connected_face_set.cfs_faces : SET [1:?] OF face
                                := conditional_reverse(SELF.orientation,
                                   SELF.closed_shell_element.cfs_faces);
 WHERE
   WR1: NOT ('TOPOLOGY_SCHEMA.ORIENTED_CLOSED_SHELL' 
                IN TYPEOF (SELF.closed_shell_element));
 END_ENTITY;

 ENTITY oriented_edge
   SUBTYPE OF (edge);
   edge_element : edge;
   orientation  : BOOLEAN;
 DERIVE
   SELF\edge.edge_start : vertex := boolean_choose (SELF.orientation,
                                            SELF.edge_element.edge_start,
                                            SELF.edge_element.edge_end);
   SELF\edge.edge_end   : vertex := boolean_choose (SELF.orientation,
                                            SELF.edge_element.edge_end,
                                            SELF.edge_element.edge_start);
 WHERE
   WR1: NOT ('TOPOLOGY_SCHEMA.ORIENTED_EDGE' IN TYPEOF (SELF.edge_element));
 END_ENTITY;

 ENTITY oriented_face
   SUBTYPE OF (face);
   face_element : face;
   orientation  : BOOLEAN;
 DERIVE
   SELF\face.bounds : SET[1:?] OF face_bound
          := conditional_reverse(SELF.orientation,SELF.face_element.bounds);
 WHERE
   WR1: NOT ('TOPOLOGY_SCHEMA.ORIENTED_FACE' IN TYPEOF (SELF.face_element));
 END_ENTITY;

 ENTITY oriented_open_shell
   SUBTYPE OF (open_shell);
   open_shell_element : open_shell;
   orientation        : BOOLEAN;
 DERIVE
   SELF\connected_face_set.cfs_faces : SET [1:?] OF face
                                := conditional_reverse(SELF.orientation,
                                      SELF.open_shell_element.cfs_faces);
 WHERE
   WR1: NOT ('TOPOLOGY_SCHEMA.ORIENTED_OPEN_SHELL' 
                IN TYPEOF (SELF.open_shell_element));
 END_ENTITY;

 ENTITY oriented_path
   SUBTYPE OF (path);
   path_element : path;
   orientation  : BOOLEAN;
 DERIVE
   SELF\path.edge_list : LIST [1:?] OF UNIQUE oriented_edge
                           := conditional_reverse(SELF.orientation,
                                         SELF.path_element.edge_list);
 WHERE
   WR1: NOT ('TOPOLOGY_SCHEMA.ORIENTED_PATH' IN TYPEOF (SELF.path_element));
 END_ENTITY;

 ENTITY path
   SUPERTYPE OF (ONEOF(open_path, edge_loop, oriented_path))
   SUBTYPE OF (topological_representation_item);
   edge_list  : LIST [1:?] OF UNIQUE oriented_edge;
 WHERE
   WR1: path_head_to_tail(SELF);
 END_ENTITY;

 ENTITY poly_loop
   SUBTYPE OF (loop,geometric_representation_item);
   polygon : LIST [3:?] OF UNIQUE cartesian_point;
 END_ENTITY;

 ENTITY seam_edge
   SUBTYPE OF (oriented_edge);
     pcurve_reference : pcurve ; 
 WHERE
    WR1 : ( 'TOPOLOGY_SCHEMA.EDGE_CURVE' IN TYPEOF (edge_element) )  AND
                ('TOPOLOGY_SCHEMA.SEAM_CURVE' IN TYPEOF
                       (edge_element\edge_curve.edge_geometry)) ;
   WR2 :  pcurve_reference IN edge_element\edge_curve.edge_geometry\
                                 surface_curve.associated_geometry ;
 END_ENTITY;

 ENTITY subedge
   SUBTYPE OF (edge);
   parent_edge   :  edge;
 END_ENTITY;

 ENTITY subface
   SUBTYPE OF (face);
   parent_face   :  face;
 WHERE
   WR1: NOT (mixed_loop_type_set(list_to_set(list_face_loops(SELF)) +
              list_to_set(list_face_loops(parent_face))));
 END_ENTITY;

 ENTITY topological_representation_item
   SUPERTYPE OF (ONEOF(vertex, edge, face_bound, face, vertex_shell,
                   wire_shell, connected_edge_set, connected_face_set,
                    (loop ANDOR path)))
   SUBTYPE OF (representation_item);
 END_ENTITY;

 ENTITY vertex
   SUBTYPE OF (topological_representation_item);
 END_ENTITY;

 ENTITY vertex_point
 SUBTYPE OF(vertex,geometric_representation_item);
   vertex_geometry : point;
 END_ENTITY;

 ENTITY vertex_loop
   SUBTYPE OF (loop);
   loop_vertex : vertex;
 END_ENTITY;

 ENTITY vertex_shell
   SUBTYPE OF (topological_representation_item);
   vertex_shell_extent : vertex_loop;
 END_ENTITY;

 ENTITY wire_shell
   SUBTYPE OF (topological_representation_item);
   wire_shell_extent : SET [1:?] OF loop;
 WHERE
   WR1: NOT mixed_loop_type_set(wire_shell_extent);
 END_ENTITY;

   FUNCTION boolean_choose (b : boolean;
            choice1, choice2 : generic : item)  : generic : item;
 
     IF b THEN
       RETURN (choice1);
     ELSE
       RETURN (choice2);
     END_IF;
   END_FUNCTION;

 FUNCTION closed_shell_reversed (a_shell : closed_shell) :
                                       oriented_closed_shell;
  LOCAL
    the_reverse : oriented_closed_shell;
  END_LOCAL;
   IF ('TOPOLOGY_SCHEMA.ORIENTED_CLOSED_SHELL' IN TYPEOF (a_shell) ) THEN
      the_reverse := dummy_tri ||
                    connected_face_set (
                       a_shell\connected_face_set.cfs_faces) ||
                    closed_shell () || oriented_closed_shell(
                     a_shell\oriented_closed_shell.closed_shell_element,
                       NOT(a_shell\oriented_closed_shell.orientation));
   ELSE
      the_reverse := dummy_tri ||
               connected_face_set (
                 a_shell\connected_face_set.cfs_faces) ||
               closed_shell () || oriented_closed_shell (a_shell, FALSE);
   END_IF;
   RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION conditional_reverse (p       : BOOLEAN;
                               an_item : reversible_topology)
                                       : reversible_topology;
   IF p THEN
     RETURN (an_item);
   ELSE
     RETURN (topology_reversed (an_item));
   END_IF;
 END_FUNCTION;

FUNCTION edge_curve_pcurves (an_edge  : edge_curve;
                       the_surface_curves : SET OF surface_curve)
      : SET OF pcurve;
LOCAL
  a_curve      : curve;
  result       : SET OF pcurve;
  the_geometry : LIST[1:2] OF pcurve_or_surface;
END_LOCAL;
  a_curve := an_edge.edge_geometry;
  result := [];
  IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(a_curve) THEN
    result := result + a_curve;
  ELSE
    IF 'GEOMETRY_SCHEMA.SURFACE_CURVE' IN TYPEOF(a_curve) THEN
      the_geometry := a_curve\surface_curve.associated_geometry;
      REPEAT k := 1 TO SIZEOF(the_geometry);
         IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF (the_geometry[k])
         THEN
            result := result + the_geometry[k];
         END_IF;
      END_REPEAT;
    ELSE
      REPEAT j := 1 TO SIZEOF(the_surface_curves);
        the_geometry := the_surface_curves[j].associated_geometry;
        IF the_surface_curves[j].curve_3d :=: a_curve
        THEN
          REPEAT k := 1 TO SIZEOF(the_geometry);
            IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF (the_geometry[k])
            THEN
              result := result + the_geometry[k];
            END_IF;
          END_REPEAT;
        END_IF;
      END_REPEAT;
    END_IF;
  END_IF;

  RETURN (RESULT);
END_FUNCTION;

 FUNCTION edge_reversed (an_edge : edge) : oriented_edge;
   LOCAL
     the_reverse : oriented_edge;
   END_LOCAL;

   IF ('TOPOLOGY_SCHEMA.ORIENTED_EDGE' IN TYPEOF (an_edge) ) THEN
     the_reverse  := dummy_tri ||
             edge(an_edge.edge_end, an_edge.edge_start) ||
             oriented_edge(an_edge\oriented_edge.edge_element,
                        NOT (an_edge\oriented_edge.orientation)) ;
   ELSE
     the_reverse := dummy_tri ||
             edge(an_edge.edge_end, an_edge.edge_start) ||
             oriented_edge(an_edge, FALSE);
   END_IF;
   RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION face_bound_reversed (a_face_bound : face_bound) : face_bound;
   LOCAL
     the_reverse : face_bound ;
   END_LOCAL;
   IF ('TOPOLOGY_SCHEMA.FACE_OUTER_BOUND' IN TYPEOF (a_face_bound) ) THEN
     the_reverse := dummy_tri ||
                      face_bound(a_face_bound\face_bound.bound,
                           NOT (a_face_bound\face_bound.orientation))
                            || face_outer_bound() ;
   ELSE
     the_reverse := dummy_tri ||
         face_bound(a_face_bound.bound, NOT(a_face_bound.orientation));
   END_IF;
  RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION face_reversed (a_face : face) : oriented_face;
   LOCAL
     the_reverse : oriented_face ;
   END_LOCAL;
   IF ('TOPOLOGY_SCHEMA.ORIENTED_FACE' IN TYPEOF (a_face) ) THEN
     the_reverse := dummy_tri ||
       face(set_of_topology_reversed(a_face.bounds)) ||
          oriented_face(a_face\oriented_face.face_element,
                           NOT (a_face\oriented_face.orientation)) ;
   ELSE
     the_reverse := dummy_tri ||
       face(set_of_topology_reversed(a_face.bounds)) ||
                               oriented_face(a_face, FALSE) ;
   END_IF;
      RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION list_face_loops(f: face) : LIST[0:?] OF loop;
   LOCAL
     loops : LIST[0:?] OF loop := [];
   END_LOCAL;
   
   REPEAT i := 1 TO SIZEOF(f.bounds);
     loops := loops +(f.bounds[i].bound);
   END_REPEAT;
      
   RETURN(loops);
 END_FUNCTION;

 FUNCTION list_loop_edges(l: loop): LIST[0:?] OF edge;
   LOCAL
     edges : LIST[0:?] OF edge := [];
   END_LOCAL;
      
   IF 'TOPOLOGY_SCHEMA.EDGE_LOOP' IN TYPEOF(l) THEN
     REPEAT i := 1 TO SIZEOF(l\path.edge_list);
       edges := edges + (l\path.edge_list[i].edge_element);
     END_REPEAT;
   END_IF;

   RETURN(edges);
 END_FUNCTION;

 FUNCTION list_of_topology_reversed (a_list
                                  : list_of_reversible_topology_item)
                                  : list_of_reversible_topology_item;
   LOCAL
     the_reverse : list_of_reversible_topology_item;
   END_LOCAL;
    
   the_reverse := [];
   REPEAT i := 1 TO SIZEOF (a_list);
     the_reverse := topology_reversed (a_list [i]) + the_reverse;
   END_REPEAT;
  
   RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION list_shell_edges(s : shell) : LIST[0:?] OF edge;
   LOCAL
     edges : LIST[0:?] OF edge := [];
   END_LOCAL;
      
   REPEAT i := 1 TO SIZEOF(list_shell_loops(s));
     edges := edges + list_loop_edges(list_shell_loops(s)[i]);
   END_REPEAT;
   
   RETURN(edges);
 END_FUNCTION;

 FUNCTION list_shell_faces(s : shell) : LIST[0:?] OF face;
   LOCAL
     faces : LIST[0:?] OF face := [];
   END_LOCAL;
   
   IF ('TOPOLOGY_SCHEMA.CLOSED_SHELL' IN TYPEOF(s)) OR 
      ('TOPOLOGY_SCHEMA.OPEN_SHELL' IN TYPEOF(s)) THEN
     REPEAT i := 1 TO SIZEOF(s\connected_face_set.cfs_faces);
       faces := faces + s\connected_face_set.cfs_faces[i];
     END_REPEAT;
   END_IF;
      
   RETURN(faces);
 END_FUNCTION;

 FUNCTION list_shell_loops(s : shell) : LIST[0:?] OF loop;
   LOCAL
     loops : LIST[0:?] OF loop := [];
   END_LOCAL;
      
   IF 'TOPOLOGY_SCHEMA.VERTEX_SHELL' IN TYPEOF(s) THEN
     loops := loops + s.vertex_shell_extent;
   END_IF;
      
   IF 'TOPOLOGY_SCHEMA.WIRE_SHELL' IN TYPEOF(s) THEN
     REPEAT i := 1 TO SIZEOF(s.wire_shell_extent);
       loops := loops + s.wire_shell_extent[i];
     END_REPEAT;
   END_IF;
      
   IF ('TOPOLOGY_SCHEMA.OPEN_SHELL' IN TYPEOF(s)) OR 
      ('TOPOLOGY_SCHEMA.CLOSED_SHELL' IN TYPEOF(s)) THEN
     REPEAT i := 1 TO SIZEOF(s.cfs_faces);
       loops := loops + list_face_loops(s.cfs_faces[i]);
     END_REPEAT;
   END_IF;
      
   RETURN(loops);
 END_FUNCTION;

 FUNCTION list_to_set(l : LIST [0:?] OF GENERIC:T) : SET OF GENERIC:T;
   LOCAL
     s : SET OF GENERIC:T := [];
   END_LOCAL;
      
   REPEAT i := 1 TO SIZEOF(l);
     s := s + l[i];
   END_REPEAT;
   
   RETURN(s);
 END_FUNCTION;

 FUNCTION mixed_loop_type_set(l: SET[0:?] OF loop): LOGICAL;
    LOCAL
      poly_loop_type: LOGICAL;
    END_LOCAL;
    IF(SIZEOF(l) <= 1) THEN
      RETURN(FALSE);
    END_IF;
    poly_loop_type := ('TOPOLOGY_SCHEMA.POLY_LOOP' IN TYPEOF(l[1]));
    REPEAT i := 2 TO SIZEOF(l);
      IF(('TOPOLOGY_SCHEMA.POLY_LOOP' IN TYPEOF(l[i])) <> poly_loop_type)
          THEN
          RETURN(TRUE);
       END_IF;
    END_REPEAT;
    RETURN(FALSE);
  END_FUNCTION;

 FUNCTION open_shell_reversed ( a_shell : open_shell) :
                                         oriented_open_shell;
   LOCAL
     the_reverse : oriented_open_shell;
   END_LOCAL;
   IF ('TOPOLOGY_SCHEMA.ORIENTED_OPEN_SHELL' IN TYPEOF (a_shell) ) THEN
     the_reverse := dummy_tri ||
                  connected_face_set (
                      a_shell\connected_face_set.cfs_faces) ||
                  open_shell () || oriented_open_shell(
                    a_shell\oriented_open_shell.open_shell_element,
                      (NOT (a_shell\oriented_open_shell.orientation)));
   ELSE
     the_reverse := dummy_tri ||
                 connected_face_set (
                     a_shell\connected_face_set.cfs_faces) ||
                 open_shell () ||  oriented_open_shell (a_shell, FALSE);
   END_IF;
   RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION path_head_to_tail(a_path : path) : LOGICAL;
   LOCAL
     n : INTEGER;
     p : LOGICAL := TRUE;
   END_LOCAL;
     
     n := SIZEOF (a_path.edge_list);
     REPEAT i := 2 TO n;
       p := p AND (a_path.edge_list[i-1].edge_end :=:
                   a_path.edge_list[i].edge_start);
     END_REPEAT;
     
     RETURN (p);
 END_FUNCTION;

FUNCTION path_reversed (a_path : path) : oriented_path;
  LOCAL
    the_reverse : oriented_path ;
  END_LOCAL;
  IF ('TOPOLOGY_SCHEMA.ORIENTED_PATH' IN TYPEOF (a_path) ) THEN
    the_reverse := dummy_tri ||
       path(list_of_topology_reversed (a_path.edge_list)) ||
          oriented_path(a_path\oriented_path.path_element,
                          NOT(a_path\oriented_path.orientation)) ;
  ELSE
    the_reverse := dummy_tri ||
                   path(list_of_topology_reversed (a_path.edge_list)) ||
                       oriented_path(a_path, FALSE);
  END_IF;

  RETURN (the_reverse);
END_FUNCTION;

 FUNCTION set_of_topology_reversed (a_set : set_of_reversible_topology_item)
                                          : set_of_reversible_topology_item;
   LOCAL
     the_reverse : set_of_reversible_topology_item;
   END_LOCAL;
   
   the_reverse := [];
   REPEAT i := 1 TO SIZEOF (a_set);
     the_reverse := the_reverse + topology_reversed (a_set [i]);
   END_REPEAT;
   
   RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION shell_reversed (a_shell : shell) : shell;
   IF ('TOPOLOGY_SCHEMA.OPEN_SHELL' IN TYPEOF (a_shell) ) THEN
     RETURN (open_shell_reversed (a_shell));
   ELSE
     IF ('TOPOLOGY_SCHEMA.CLOSED_SHELL' IN TYPEOF (a_shell) ) THEN
       RETURN (closed_shell_reversed (a_shell));
     ELSE
       RETURN (?);
     END_IF;
   END_IF;
 END_FUNCTION;

 FUNCTION topology_reversed (an_item : reversible_topology)
                                     : reversible_topology;

   IF ('TOPOLOGY_SCHEMA.EDGE' IN TYPEOF (an_item)) THEN
     RETURN (edge_reversed (an_item));
   END_IF;

   IF ('TOPOLOGY_SCHEMA.PATH' IN TYPEOF (an_item)) THEN
     RETURN (path_reversed (an_item));
   END_IF;

   IF ('TOPOLOGY_SCHEMA.FACE_BOUND' IN TYPEOF (an_item)) THEN
     RETURN (face_bound_reversed (an_item));
   END_IF;
  
   IF ('TOPOLOGY_SCHEMA.FACE' IN TYPEOF (an_item)) THEN
     RETURN (face_reversed (an_item));
   END_IF;

   IF ('TOPOLOGY_SCHEMA.SHELL' IN TYPEOF (an_item)) THEN
     RETURN (shell_reversed (an_item));
   END_IF;

   IF ('SET' IN TYPEOF (an_item)) THEN
     RETURN (set_of_topology_reversed (an_item));
   END_IF;

   IF ('LIST' IN TYPEOF (an_item)) THEN
     RETURN (list_of_topology_reversed (an_item));
   END_IF;

   RETURN (?);
 END_FUNCTION;


FUNCTION vertex_point_pcurves (a_vertex  : vertex_point; 
      the_degenerates : SET OF evaluated_degenerate_pcurve)
      : SET OF degenerate_pcurve;
LOCAL
  a_point : point;
  result  : SET OF degenerate_pcurve;
END_LOCAL;
  a_point := a_vertex.vertex_geometry;
  result := [];
  IF 'GEOMETRY_SCHEMA.DEGENERATE_PCURVE' IN TYPEOF(a_point) THEN
    result := result + a_point;
  ELSE
      REPEAT j := 1 TO SIZEOF(the_degenerates);
         IF (the_degenerates[j].equivalent_point :=: a_point)  THEN
            result := result + the_degenerates[j];
         END_IF;
      END_REPEAT;
  END_IF;

  RETURN (RESULT);
END_FUNCTION;

 END_SCHEMA; -- end TOPOLOGY schema
