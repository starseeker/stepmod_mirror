<?xml version="1.0" encoding="utf-8"?>
<!--
$ Id: build_script.xsl,v 1.9 2003/02/26 02:12:17 thendrix Exp $
   Author:  Rob Bodington, Eurostep Limited
   Owner:   Developed by Eurostep Limited http://www.eurostep.com
   Purpose: To build the initial ANT build package. 
-->

<xsl:stylesheet 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="1.0">
  
  <xsl:import href="../../xsl/common.xsl"/>

  <xsl:output 
    method="xml"
    indent="yes"
    />
        
  <xsl:template match="ballot_index">
    <xsl:text>
    </xsl:text>
    <xsl:comment>
      This file has been auto generated by:
      ant -buildfile buildscript.xml
      
      Usage:
      ant -buildfile script.xml checks
         Generates the HTML for the modules listed in ballot_index.xml
      Errors are reported an stored in 
      <xsl:value-of select="concat('stepmod/',@name,'_ant_check_[yyyymmdd].txt')"/>

    </xsl:comment>

    <project name="ballotchecks" default="all" basedir=".">
      <xsl:text>
      </xsl:text>

      <target name="init">
        <tstamp/>

        <xsl:element name="dirname">
          <xsl:attribute name="property">BALLOTDIR</xsl:attribute>
          <xsl:attribute name="file">ballot_index.xml</xsl:attribute>
        </xsl:element>
        
        <xsl:element name="property">
          <xsl:attribute name="name">BALLOTNAME</xsl:attribute>
          <xsl:attribute name="value">
            <xsl:value-of select="@name"/>
          </xsl:attribute>
        </xsl:element>

        <xsl:element name="property">
          <xsl:attribute name="name">MODULESDIR</xsl:attribute>
          <xsl:attribute name="value">
            <xsl:value-of select="'data/modules/'"/>
          </xsl:attribute>
        </xsl:element>

        <xsl:element name="property">
          <xsl:attribute name="name">RESDIR</xsl:attribute>
          <xsl:attribute name="value">
            <xsl:value-of select="'data/resource_docs/'"/>
          </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="property">
          <xsl:attribute name="name">UTILSDIR</xsl:attribute>
          <xsl:attribute name="value">
            <xsl:value-of select="'../../../utils/'"/>
          </xsl:attribute>
        </xsl:element>

        <xsl:element name="property">
          <xsl:attribute name="name">CHECKDIR</xsl:attribute>
          <xsl:attribute name="value">${BALLOTDIR}\check_${BALLOTNAME}_${DSTAMP}</xsl:attribute>
        </xsl:element>

        <xsl:element name="property">
          <xsl:attribute name="name">ANTERR</xsl:attribute>
          <xsl:attribute name="value">${CHECKDIR}\ant_check_${BALLOTNAME}_${DSTAMP}.txt</xsl:attribute>
        </xsl:element>

        <property name="EXPRESSCOMP" value="C:/apps/eep/Eep.exe"/>
        <property name="EXPRESSARGS" value="-2 -i -w"/>

        <xsl:element name="property">
          <xsl:attribute name="name">EXPRESSDIR</xsl:attribute>
          <xsl:attribute name="value">${CHECKDIR}\express</xsl:attribute>
        </xsl:element>
        
        <xsl:element name="property">
          <xsl:attribute name="name">ARMEXPRESSFILE</xsl:attribute>
          <xsl:attribute name="value">arm_${DSTAMP}v1.exp</xsl:attribute>
        </xsl:element>

        <xsl:element name="property">
          <xsl:attribute name="name">ARMEXPRESS</xsl:attribute>
          <xsl:attribute name="value">${EXPRESSDIR}\${ARMEXPRESSFILE}</xsl:attribute>
        </xsl:element>

        <xsl:element name="property">
          <xsl:attribute name="name">ARMERRFILE</xsl:attribute>
          <xsl:attribute name="value">arm_${DSTAMP}v1_err.txt</xsl:attribute>
        </xsl:element>

        <xsl:element name="property">
          <xsl:attribute name="name">ARMERR</xsl:attribute>
          <xsl:attribute name="value">${EXPRESSDIR}\${ARMERRFILE}</xsl:attribute>
        </xsl:element>
        
        <xsl:element name="property">
          <xsl:attribute name="name">MIMEXPRESSFILE</xsl:attribute>
          <xsl:attribute name="value">mim_resources_${DSTAMP}v1.exp</xsl:attribute>
        </xsl:element>

        <xsl:element name="property">
          <xsl:attribute name="name">MIMEXPRESS</xsl:attribute>
          <xsl:attribute name="value">${EXPRESSDIR}\${MIMEXPRESSFILE}</xsl:attribute>
        </xsl:element>

        <xsl:element name="property">
          <xsl:attribute name="name">MIMERRFILE</xsl:attribute>
          <xsl:attribute name="value">mim_resources_${DSTAMP}v1_err.txt</xsl:attribute>
        </xsl:element>

        <xsl:element name="property">
          <xsl:attribute name="name">MIMERR</xsl:attribute>
          <xsl:attribute name="value">${EXPRESSDIR}\${MIMERRFILE}</xsl:attribute>
        </xsl:element>

        <xsl:element name="property">
          <xsl:attribute name="name">ZIPFILE</xsl:attribute>
          <xsl:attribute name="value">${CHECKDIR}\check_${DSTAMP}.zip</xsl:attribute>
        </xsl:element>

        <xsl:element name="mkdir">
          <xsl:attribute name="dir">${CHECKDIR}</xsl:attribute>
        </xsl:element>
      </target>
      <xsl:text>
      </xsl:text>

      <xsl:variable name="outfile" select="'${ANTERR}'"/>
      <target name="checks" depends="init">
        <echo>
          Outputting to: stepmod/${ANTERR}
      </echo>
      <xsl:apply-templates select="ballot_package/module">
        <xsl:with-param name="outfile" select="$outfile"/>
      </xsl:apply-templates>

      <xsl:apply-templates select="ballot_package/resource">
        <xsl:with-param name="outfile" select="$outfile"/>
      </xsl:apply-templates>
      
      <xsl:element name="fixcrlf">
        <xsl:attribute name="srcdir">${CHECKDIR}</xsl:attribute>
        <xsl:attribute name="includes">**/*.txt</xsl:attribute>
      </xsl:element>
      </target>

      <xsl:text>
      </xsl:text>
      <!-- not yet implemented for resdocs -->
      <target name="getexpress" depends="init">
        <echo>Copying Express to ${EXPRESSDIR}</echo>
        <xsl:element name="exec">
          <xsl:attribute name="executable">cscript</xsl:attribute>
          <xsl:attribute name="dir">${UTILSDIR}</xsl:attribute>
          <arg value="./getExpressIr.wsf"/>
          <xsl:element name="arg">
            <xsl:attribute name="value">${EXPRESSDIR}</xsl:attribute>
          </xsl:element>
          <xsl:element name="arg">
            <xsl:attribute name="value">${BALLOTDIR}/modlist.txt</xsl:attribute>
          </xsl:element>
          <xsl:element name="arg">
            <xsl:attribute name="value">${BALLOTDIR}/irlist.txt</xsl:attribute>
          </xsl:element>
        </xsl:element>
      </target>

      <xsl:text>
      </xsl:text>

      <!-- not yet implemented for resdocs -->
      <target name="compileexpress" depends="getexpress">
        <echo>Compiling EXPRESS: ${ARMEXPRESS}</echo>
        <xsl:element name="exec">
          <xsl:attribute name="executable">${EXPRESSCOMP}</xsl:attribute>
          <xsl:attribute name="dir">${EXPRESSDIR}</xsl:attribute>
          <xsl:attribute name="output">${ARMERR}</xsl:attribute>
          <xsl:element name="arg">
            <xsl:attribute name="value">${EXPRESSARGS}</xsl:attribute>
          </xsl:element>
          <xsl:element name="arg">
            <xsl:attribute name="value">${ARMEXPRESS}</xsl:attribute>
          </xsl:element>
        </xsl:element>

        <xsl:element name="copy">
          <xsl:attribute name="verbose">true</xsl:attribute>
          <xsl:attribute name="overwrite">true</xsl:attribute>
          <xsl:attribute name="file">${EXPRESSDIR}/errors.em</xsl:attribute>  
          <xsl:attribute name="tofile">${CHECKDIR}/${ARMERRFILE}</xsl:attribute>
        </xsl:element>

        <xsl:element name="copy">
          <xsl:attribute name="verbose">true</xsl:attribute>
          <xsl:attribute name="overwrite">true</xsl:attribute>
          <xsl:attribute name="file">${ARMEXPRESS}</xsl:attribute>  
          <xsl:attribute name="todir">${CHECKDIR}</xsl:attribute>
        </xsl:element>

        <xsl:text>
        </xsl:text>        
        <echo>Compiling EXPRESS: ${MIMEXPRESS}</echo>
        <xsl:element name="exec">
          <xsl:attribute name="executable">${EXPRESSCOMP}</xsl:attribute>
          <xsl:attribute name="dir">${EXPRESSDIR}</xsl:attribute>
          <xsl:attribute name="output">${MIMERR}</xsl:attribute>
          <xsl:element name="arg">
            <xsl:attribute name="value">${EXPRESSARGS}</xsl:attribute>
          </xsl:element>
          <xsl:element name="arg">
            <xsl:attribute name="value">${MIMEXPRESS}</xsl:attribute>
          </xsl:element>
        </xsl:element>

        <xsl:element name="copy">
          <xsl:attribute name="verbose">true</xsl:attribute>
          <xsl:attribute name="overwrite">true</xsl:attribute>
          <xsl:attribute name="file">${EXPRESSDIR}/errors.em</xsl:attribute>  
          <xsl:attribute name="tofile">${CHECKDIR}/${MIMERRFILE}</xsl:attribute>
        </xsl:element>

        <xsl:element name="copy">
          <xsl:attribute name="verbose">true</xsl:attribute>
          <xsl:attribute name="overwrite">true</xsl:attribute>
          <xsl:attribute name="file">${MIMEXPRESS}</xsl:attribute>  
          <xsl:attribute name="todir">${CHECKDIR}</xsl:attribute>
        </xsl:element>

        <xsl:text>
        </xsl:text>
        <xsl:element name="fixcrlf">
          <xsl:attribute name="srcdir">${CHECKDIR}</xsl:attribute>
          <xsl:attribute name="includes">*.txt, **/*.exp</xsl:attribute>
        </xsl:element>
      </target>
    
      <xsl:text>
      </xsl:text>

      <target name="zip" depends="init">
        <echo>Zipping: ${ZIPFILE}</echo>

        <xsl:element name="zip">
          <xsl:attribute name="zipfile">${ZIPFILE}</xsl:attribute>
          <xsl:attribute name="basedir">${CHECKDIR}</xsl:attribute>
          <xsl:attribute name="excludes">**/*.zip, express/**</xsl:attribute>
          <xsl:attribute name="includes">ant_check*.txt, arm*.*, mim_resources*.*</xsl:attribute>
        </xsl:element>
      </target>

      <xsl:text>
      </xsl:text>
      <target name="all" depends="checks, compileexpress, zip"/>
       <target name="all" depends="checks"/>

      <xsl:text>
      </xsl:text>
  </project>

  </xsl:template>

  <xsl:template match="module">
    <xsl:param name="outfile"/>
    <exec executable="bash" failifexecutionfails="false" dir="${{UTILSDIR}}" output="${{ANTERR}}" append="true">
      <arg value="ant"/>
      <arg value="-emacs"/>
      <arg value="-q"/>
      <arg value="-buildfile"/>
      <arg value="build.xml"/>
      <arg value="-DMODULES=${{MODULESDIR}}{@name}"/>
      <arg value="clean_module"/>
    </exec>
    <exec executable="bash" failifexecutionfails="false" dir="${{UTILSDIR}}" output="${{ANTERR}}" append="true">
      <arg value="ant"/>
      <arg value="-emacs"/>
      <arg value="-q"/>
      <arg value="-buildfile"/>
      <arg value="build.xml"/>
      <arg value="-DMODULES=${{MODULESDIR}}{@name}"/>
      <arg value="modules"/>
    </exec>
    <exec executable="bash" failifexecutionfails="false" dir="${{UTILSDIR}}" output="${{ANTERR}}" append="true">
      <arg value="ant"/>
      <arg value="-emacs"/>
      <arg value="-q"/>
      <arg value="-buildfile"/>
      <arg value="build.xml"/>
      <arg value="-DMODULES=${{MODULESDIR}}{@name}"/>
      <arg value="mapping"/>
    </exec>
    <exec executable="bash" failifexecutionfails="false" dir="${{UTILSDIR}}" output="${{ANTERR}}" append="true">
      <arg value="ant"/>
      <arg value="-emacs"/>
      <arg value="-q"/>
      <arg value="-buildfile"/>
      <arg value="build.xml"/>
      <arg value="-DMODULESDIR=${{MODULESDIR}}{@name}"/>
      <arg value="valid_modules"/>
    </exec>
  </xsl:template>

  <xsl:template match="resource">
    <xsl:param name="outfile"/>
    <exec executable="bash" failifexecutionfails="false" dir="${{UTILSDIR}}" output="${{ANTERR}}" append="true">
      <arg value="ant"/>
      <arg value="-emacs"/>
      <arg value="-q"/>
      <arg value="-buildfile"/>
      <arg value="build.xml"/>
      <arg value="-DRESDOCS=${{RESDIR}}{@name}"/>
      <arg value="clean_resdocs"/>
    </exec>
    <exec executable="bash" failifexecutionfails="false" dir="${{UTILSDIR}}" output="${{ANTERR}}" append="true">
      <arg value="ant"/>
      <arg value="-emacs"/>
      <arg value="-q"/>
      <arg value="-buildfile"/>
      <arg value="build.xml"/>
      <arg value="-DRESDOCS=${{RESDIR}}{@name}"/>
      <arg value="resdocs"/>
    </exec>
    <exec executable="bash" failifexecutionfails="false" dir="${{UTILSDIR}}" output="${{ANTERR}}" append="true">
      <arg value="ant"/>
      <arg value="-emacs"/>
      <arg value="-q"/>
      <arg value="-buildfile"/>
      <arg value="build.xml"/>
      <arg value="-DRESDOCS=${{RESDIR}}{@name}"/>
      <arg value="valid_resdocs"/>
    </exec>
  </xsl:template>


</xsl:stylesheet>












