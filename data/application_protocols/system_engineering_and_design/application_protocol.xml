<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: application_protocol.xml,v 1.5 2006/06/21 02:42:37 abf Exp $ -->
<!DOCTYPE application_protocol SYSTEM "../../../dtd/ap_doc/application_protocol.dtd">
<!-- Generated by mkapdoc_main.js, Eurostep Limited, http://www.eurostep.com -->
<application_protocol 
name="system_engineering_and_design" 
module_name="ap233_system_engineering_and_design" 
title="System engineering and design" 
part="233" 
purpose="systems engineering design data" 
wg.number="2103" 
version="1" 
status="WD" 
language="E" 
publication.year="" 
published="n" 
checklist.internal_review="" 
checklist.project_leader="" 
checklist.convener="" 
rcs.date="$Date: 2006/06/21 02:42:37 $" 
rcs.revision="$Revision: 1.5 $" 
development.folder="dvlp">

<keywords>
    Application protocol, issue management, program management, project management, risk management, systems engineering, system behaviour, system modelling, 
system_structure </keywords>

<!-- the abstract for the application protocol. -->
<abstract>
		<p>
   This part of ISO 10303 specifies an application protocol for the representation of systems engineering design data. It defines the context, scope and information requirements for various development stages during the design of a system. This part of ISO 10303 is applicable to any form of system, including aircraft, cars, ships, railways, and plant.  </p>
			</abstract>
	<!-- Reference to contacts detailed in stepmod/data/basic/contacts.xml -->
	<contacts>
		<projlead ref="jim.uren"/>
		<editor ref="allison.barnardfeeney"/>
	</contacts>
	<!-- Introduction -->
	<purpose>
		<!-- data_plan>
			<imgfile file="data_plan_intro1.xml"/>
		</data_plan -->
		<p>
   This part of ISO 10303 specifies an application protocol for the representation of systems engineering design data. It defines the context, scope and information requirements for various development stages during the design of a system. This part of ISO 10303 is applicable to any form of system, including aircraft, cars, ships, railways, and plant.  </p>
	</purpose>

	<!-- Items in scope 
      If from_module is YES then XSL will copy the in scope statement from the module.     -->
	<inscope from_module="YES" context="representation of system engineering and design data.">
	</inscope>

	<!-- Items out of scope
      If from_module is YES then XSL will copy the out scope statement from the module
     -->
	<outscope/>
	
<normrefs/>
<definition>
   <term id="ap233_element">element</term>
   <def>
     that which is discernable by the reproducible measurement of its characteristics
     <note>The semantic term element includes matter, energy and information.  The term product from ISO 10303-Part 1 STEP definitions defines product as: a thing or substance produced by a natural or artificial process. This part of ISO 10303 needs to define the informational attributes associated with the entity named "product" as defined within ISO 10303-1017 - Product Identification. This entity has attributes that enable one to capture: id, name and description.  ISO 10303-1017 provides the definition: A Product is the identification of a product or of a type of product. It is a collector of data common to all revisions of the product. Element appears to be a legitimate subclass of product because this part requires reproducible measurement of element.</note>
     <example>Any thing from microscopic particles to galaxy clusters is an element.  Any thing with a finite existence from galaxies with billion-year lives to trans-uranic elements with lifetimes less than nano-seconds. Counter-example: Things like ghosts, devils, the Loch Ness monster, the city of Atlantis are not discernable by reproducible measurement and are excluded. Research and development things that do not yet have reproducible measurements and process control are excluded. For example, silicon for electronic devices would be excluded in 1900. </example>
   </def>
</definition>

<definition>
   <term id="ap233_category">category</term>
   <def>
     categories provide the grouping of elements into a set based on defined 
     properties that serve as selection criteria for which elements of all those     in the universe belong in that set
     <note>This is one of the forms of generalization/specialization. This is <b>not inheritance</b> as used in object-oriented software languages. Physical elements of matter and energy do not inherit their properties. Rather they posses the properties of themselves and can be identified by measurement of those properties.</note>
     
     <example>Explanation: It is categorization that enables us to define alternatives and create taxonomies for libraries. </example>
     <ul>
     <li>Inclusive/Complete Category: Any Element of the super category may 
     reside in any number of the sub-categories and all members of the super-category are members of at least one of the sub-categories.</li></ul>
     <example>the super category is all apples raised on a particular farm. The subcategories are used for sorting and include: good apples, bruised apples, marked apples, rotten apples, and wormy apples.</example>
     <ul>
     <li>Inclusive/Incomplete Category: Any Element of the super category may reside in any number of the sub-categories and only some members of the super-category are members of the sub-categories.</li></ul>
     <example>the super category is all fruit raised on a particular farm. The subcategories are used for sorting and include: good apples, bruised apples, marked apples, rotten apples, and wormy apples.</example>
     <ul>
     <li>Exclusive/Complete Category:  Any Element of the super-category may reside in one and only one of the sub-categories and all members of the super-category are members of at least one of the sub-categories.</li></ul>
     <example>An automobile has in its decomposition tree an engine. For this automobile any of three engines: 140 HP, 180 HP, and 220 HP. The superclass of engine is exhausted by the subclasses and the subclasses are independent.</example>
     <ul>
     <li>Exclusive/ Incomplete Category:  Any Element of the super-category may reside in one and only one of the sub-categories and only some members of the super-category are members of the sub-categories.</li></ul>
     <example>All of the automobile engines under current manufacture by GM and its subsidiaries are considered as candidates for three engines that will be used in a new car.</example>
   </def>
 </definition>

<definition>
   <term id="ap233_domain of interest">domain of interest</term>
   <def>
   all elements of interest to the problem at hand
   <note>These include the system, its environment, external systems of interest in the environment, stakeholders, enabling things, things that may cause failure, and all other things of interests.
   </note>
   </def>
</definition>

<definition>
   <term id="ap233_system">system</term>
   <def>
   an element with a well defined boundary with respect to all other elements, outside of it and in the domain of interest, with which it interacts
   <note>A system is composed of interacting systems. The emergent behaviors and properties of a system are the result of the properties and behaviors of the sub-systems and their interactions. These interactions may be highly nonlinear.
   </note>
   <note> Systems decompose hierarchically; they are systems of systems. </note>
   <example>A car has a well defined boundary with respect to its environment, and the relationships are both static and dynamic. Similarly the engine has the same kinds of relationships and so does the fuel injector of the engine. 
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_system view">system view</term>
   <def>  
   a collection of elements and related information about the system that are useful and defined for a particular purpose in a particular context
  <note>Engineers involved in specification, design, manufacturing and maintenance need a particular collection of information to do their work. An engineer working on the cooling system of an engine needs information about a particular set of parts, behaviors and properties that are particular to that engineering problem. The set of possibly useful system views is very large.
   </note>
   </def>
</definition>

<definition>
   <term id="ap233_environment">environment</term>
   <def>  
   all elements external to the system that interact with it
   <note>It is often possible to limit the parts of the environment needed for development purposes to those external systems that are neighbors to the system. </note>
   <note> The environment includes not only the external systems that couple with it for useful purposes, but it also includes all external systems that may interact in a manner that causes failure.    </note>
   <example>Elements in the environment need not have well defined boundaries as do systems.  A laptop computer can connect to a power grid. But for the design of the laptop it is not important to consider the power grid as a system. It is simpler to consider it as an element with an interface that the laptop connects to when needed.
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_stakeholder">stakeholder</term>
   <def>people, organizations and institutions that are a part of the system environment because the system provides some benefit to them and they have an interest in the system
  <note>Stakeholders include; for example, the producers, owners, operators, users, and maintainers of the system.
   </note>
   </def>
</definition>

<definition>
   <term id="ap233_stakeholder_need">stakeholder need</term>
   <def>the benefits that the stakeholders wish to be satisfied by or delivered by the system when it is implemented and functioning  
   <note>At the top level of development these needs drive the requirements for the system and the optimization criteria for its development.
   </note>
   </def>
</definition>

<definition>
   <term id="ap233_property">property</term>
   <def>any named measurable or observable attribute, quality or characteristic of an element
 <note>Property is usefully decomposed into several categories – the measurable characteristics in normal use, the measurable characteristics that require additional instrumentation for measurement, and the observable characteristics. It is a systems engineering best practice to separate behavior from structure (function from form) and to allocate behavior to structure based on trade studies among alternatives.
   </note>
   <example>The acceleration of a car is in the first category. behavior.  This characteristic can be observed in the normal operation of the car. The weight of the car is not directly observable in the use of the car.  It requires that the car be placed on a scale to record the measurable characteristic. The fact that a car has four wheels, a steering wheel on either the left or the right side, and a sun roof are observable characteristics.
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_system requirement">system requirement</term>
   <def>a statement of properties that a system shall exhibit or shall not exhibit when completed
    <note>Requirements are derived from requirements in a many-to-many relationship.
   </note>
   </def>
</definition>

<definition>
   <term id="ap233_reference document">reference document</term>
   <def>a statement of the document source of information concerning an element or a property of an element, including the tensor characteristics, units, values, value probability distribution, or symmetry
   </def>
</definition>

<definition>
   <term id="ap233_behavior">behavior</term>
   <def>what an element is to do or is not to do in response to excitations it receives from the external elements in its environment
  <note>This is the subclass of property that includes measurable characteristics in normal use. It encompasses the response of the system to excitation by things in its environment. In some other engineering disciplines it is the analysis with differential equations that is called behavior. That is not what is meant here. Here, in AP233, behavior is a model representation of a functional requirement: it is what the system is to do.
   </note>
   <example>Make a fender is a behavior with several function steps, inputs of sheet steel, power, paint primer, paint and the output of a fender. Ring is the behavior of a bell or tuning fork. The "Q" of the bell or tuning fork is a physical property of the bell and its environment.
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_function based behavior">function based behavior</term>
   <def>a description of behavior based on function and transformation without reference to state
   </def>
</definition>

<definition>
   <term id="ap233_physical property">physical property</term>
   <def>what an element exhibits or does not exhibit in response to excitation and stimulation from auxiliary measurement entities that are not part of its context 
   <note>This is the subclass of property that encompasses measurable characteristics that require additional instrumentation to measure them. They cannot be established from responses to the enviropnment alone. All of the "properties" used in analysis with differential equations fall into this category.
   </note>
   <example>Responses of an element like mass, power consumption, mean time between failure, etc. are critically important and appear in requirements. They are not measured by responses to excitation from their environment.
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_structure">structure</term>
   <def>the decomposition, interconnection and other static relationship among the parts of the system
   <note>Physical properties are budgeted to structure using analysis methods, and the emergent performance is calculated using the same methods. Behavior is allocated to the structure. Form and function are separated conceptually so that the design can be optimized by considering several different structures that can provide the desired emergent behavior and properties.
   </note>
   <example>In a real example of optimization the engineer examines not just the maximum or minimum, but looks at the trend in data in that region to be sure the solution is robust. That is, the design solution must not degrade rapidly with small variances in the variables of design.
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_part">part</term>
   <def>static parts of the system including their interconnection and interconnection descriptions
  <note>Parts have physical properties assigned to them. Many engineering domains think of these as components, but manufacturing thinks of them as assemblies because they build assemblies.  <i>Assembly is a standard ISO naming convention. It may be desirable to alias this name.</i> </note>
   <note>Physical properties are budgeted to structure using analysis methods, and the emergent performance is calculated using the same methods. Behavior is allocated to the structure. Form and function are separated conceptually so that the design can be optimized by considering several different structures that can provide the desired emergent behavior and properties.
   </note>
   </def>
</definition>

<definition>
   <term id="ap233_link">link</term>
   <def>a particular kind of part that is used when it is helpful not to model or specify its details
   <note>Link must be provided in the concept model because a number of application tools use the  concept. Links ultimately are fully specified and become a system-assembly.
   </note>
   <example>In a pumping system it may be useful to define the pumps and tanks while representing the piping as links without detail. At some point in the design detail like diameter, flow impedence, pressure rating, and corrosion resistance must be defined. At his point the link becomes a part.
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_port">port</term>
   <def>a connection point on a part in the part decomposition hierarchy
   <note>Systems interconnect with one another port-to-port. Ports couple to desired things in the environment and also to the ports of things that cause failure, threaten security or safety. The alias for port is interface connection, this is the term that is used in AP239. </note>
   <note>When a system interacts with its environment, the boundary between the system and the environment is the collection of all interacting ports.
   </note>
   <example>Consider a ultrasonic transmitting transducer coupled to a water tank and a receiver transducer coupled to the tank. The transmitter port connects to a water port and couples sound energy into the water. The intensity at any point is a result of the impedance match between the two ports, the radiation pattern of the transducer, and the attenuation and dispersion in the water. The receiving transducer is attached to another port of the water. The received signal is dependant on the relative impedance of the two ports, the sound distribution in the water, and the radiation pattern of the receiving transducer. This example is often oversimplified as "broadcast" neglecting the port to port conditions and the properties of the medium and neglecting the ports. 
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_interconnection">interconnection</term>
   <def>a listing of the ports that interconnect with one another
   <note>The interconnection may exist for structural reasons without any flow from port to port. The interconnection may exist because functions are assigned to particular assemblies, and the output from one function is an input to the other function. In this case the ports and their interconnection must exist to support flow. The alias for interconnection is interface connection, the term used in AP239.
   </note>
   </def>
</definition>

<definition>
   <term id="ap233_interface specification">interface specification</term>
   <def> a description of a port of a part that includes the geometric description, input/output description, protocols that must be met, assemblies of parts required to join two ports, allowable defect characteristics, etc. including the emergent properties of the interface that are the result of the two ports interacting, and are not associated with either
  <note>Parts interact physically through direct physical contact, exchange of elements, and through forces they exert such as gravity, compression or torque. Thus input/output is bound to ports and described by interfaces. The interface may consist of more than the two ports and may involve an assembly of parts as in the case of two flanges that are assembled with six bolts and an O-ring. The interface may also require detailed description to define what occurs there or how it is maintained. 
   </note>
   <example>For two ports to connect, their interfaces must be compatible. The current carrying capacity of a plug and a socket is a result of the surface area of contact, the contact force, the wiping action on plugging them together, and the surface conductivity of both. This is an emergent property that is not assignable to either port individually.
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_function">function; transformation</term>
   <def>the entity in the context of modeling that transforms an input set of elements into a set of output elements that may be the same or measurably different from the input set
   <note>It is a part of behavior. This is what functions do in mathematics where the input/output are variables. In software the input/output is data. In systems engineering the input/output are elements, matter, energy, and information. An internal function is a kind of function that is allocated to and implemented by the system/structure. An external function is a kind of function that is allocated to and implemented by elements in the environment. 
   </note>
   <example>The function may be "burn gasses" with an input of two moles of hydrogen and one mole of oxygen. The output will be one mole of water, distinctly different from the inputs and a lot of energy. This function may be followed by a function "cool to 90 degrees centigrade". The input had pressure and volume proportional to temperature; the output is now liquid with a well-defined volume, an isotropic compressibility and a viscosity. If the next function is "cool to –10 degrees centigrade", then the viscosity goes away and the compressibility becomes a fourth rank tensor relating stress to strain. 
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_timing">timing</term>
   <def>a time interval assigned to a function that defines the duration of activity of the function or the probability distribution for the duration
   <note>Many probability distributions are used in systems engineering. These may include: normal, log-normal, Bernoulli, beta, binomial, negative binomial, chi squared, discrete uniformed, erlang, exponential, F, gamma, geometric, laplace, poisson, T, triangular, uniform, weibull.</note>
    </def>
</definition>

<definition>
   <term id="ap233_script">script</term>
   <def>an executable textual language statement assigned to a function to define how 
   that function executes
    </def>
</definition>

<definition>
   <term id="ap233_function port">function port</term>
   <def>a logical entity to whch input/output is bound
    </def>
</definition>

<definition>
   <term id="ap233_queue">queue</term>
   <def>a storage entity on a function port that accumulate input/output until needed by the function
   <note>Triggering input/output is stored in a "first in first out" queue so that the earliest trigger received activates the function. Non-triggering input/output is stored in a "last in first out" queue so that the most  recent input is used by the function to ensure the input is fresh.</note>
    </def>
</definition>

<definition>
   <term id="ap233_regular function port">regular function port</term>
   <def>a function port that accepts input/output that does not trigger the function
   <note>The constructs regular function port and control function port allow input/output to trigger some function but not others.</note>
    </def>
</definition>

<definition>
   <term id="ap233_control function port">control function port</term>
   <def>a function port that accepts input/output that triggers the function
   <note>The constructs regular function port and control function port allow input/output to trigger some function but not others.</note>
    </def>
</definition>

<definition>
   <term id="ap233_resource">resource</term>
   <def>the amount of input available to a function or the amount of
   output available from it; or, the amount of property of a system available to a function
 <example>There exists some number of missiles available to a missile battery available for the function "Shoot". </example>
  <example>The function "transmit message" may be allocated to a satellite system, a fiber optic line, a microwave link, etc. Each of these alternatives has some value of the property "bandwidth" that may be used by the function.</example>
    </def>
</definition>

<definition>
   <term id="ap233_function exit">function exit</term>
   <def>a function based behavior construct that links a functional decomposition to the exit paths identified for the parent function
  <example>If function exit is decomposed, there are function exit constructs corresponding to the two exit paths in the higher level function. When one of the exit constructs is encountered, execution of the decomposition is complete and control is passed to the corresponding exit path at the higher level.</example>
    </def>
</definition>

<definition>
   <term id="ap233_input output">input output</term>
   <def>elements consumed by a function are inputs and those generated by a function are outputs
 <note>The name input/output or I/O is used because a given I/O entity is generated by one function and consumed by another. It is a part of behavior. In the general case outputs are different things than inputs, and physical properties, behaviors, values, variances and probability distributions can all change. In this general definition "function" is an element of type information and cannot be realized in the physical world except through elements of type matter or energy that exhibit that function. In the physical world things transform other things. It is this fact of reality that results in the allocation of function to structure which is really a statement that this particular structure entity exhibits this particular function and it will be used to provide that transformation. The thought pattern is to think of the desired transformation, function, to consider alternative things that might be used to provide it, and to select among these, using a trade study based on optimization.</note>
   <example>I/O may trrigger functions and it may terminate functions.</example>
    </def>
</definition>

<definition>
   <term id="ap233_function ordering">function ordering</term>
   <def>imposes how/when functions execute, which may be sequential, concurrent, traversed iteratively, or lie on separate alternative path
  <note>David <b>some word-smithing has been done, please check</b> </note>
   <note>It is a part of behavior. There are several ways to represent function ordering. It may be done with ordering operators and triggering input/output as in classical behavior diagrams or it may be done with events, states, and transitions as done in state machines and state charts. For this fine level of detail it is necessary to intercompare the detailed models in SEDRES with those in the concept model and those emerging from UML 2.0 development.
   </note>
   <example>A function is activated when all preceeding threads of functions are complete. At this point the function examines its inputs. If all triggering inputs are present the function proceeds to do its work. If one or more triggering inputs is absent, the function waits for them before doing its work. Triggers that arrive while the functions are running are stored in a first in first out queue. Ordinary input/output that arrives while a function is deactivated is stored in a last in first out queue. If the function is running it is discarded.  A function is deactivated when it completes its work or is deactivated by input/output.</example>
    </def>
</definition>

<definition>
   <term id="ap233_ordering operations">ordering operations</term>
   <def>function ordering constructions that establish how the functions are ordered
    </def>
</definition>

<definition>
   <term id="ap233_replicate">replicate</term>
   <def>an ordering_operation that replicates a function used many times
   <note>Especially useful for distributed systems in which a particular function is realized in many places</note>
   </def>
</definition>

<definition>
   <term id="ap233_and">and</term>
   <def>an ordering operation pair that establishes concurrency among functions
    </def>
</definition>

<definition>
   <term id="ap233_and out">and out</term>
   <def>an ordering operation that shows the branching our among concurrent functions
    </def>
</definition>

<definition>
   <term id="ap233_and in ">and in</term>
   <def>an ordering operation that shows the path rejoining among concurrent functions
    </def>
</definition>

<definition>
   <term id="ap233_iterate">iterate</term>
   <def>an ordering operation that repeats a function or group of functions 
    </def>
</definition>

<definition>
   <term id="ap233_iterate limit">iterate limit</term>
   <def>an ordering operation that establishes the set over which the iteration is performed
    </def>
</definition>

<definition>
   <term id="ap233_loop">loop</term>
   <def>an ordering operation that repeats a function or group of functions some number of times
    </def>
</definition>

<definition>
   <term id="ap233_loop limit">loop limit</term>
   <def>the number or expression for the number of repetitions in a loop 
    </def>
</definition>

<definition>
   <term id="ap233_loop exit">loop exit</term>
   <def>the ordering operation that terminates a loop and provides correct continuation of the execution path
    </def>
</definition>

<definition>
   <term id="ap233_sequence">sequence</term>
   <def>an ordering operator that establishes sequence among functions
    </def>
</definition>

<definition>
   <term id="ap233_or">or</term>
   <def>an ordering operator pair that establishes alternative paths for a group of functions
    </def>
</definition>

<definition>
   <term id="ap233_or out">or out</term>
   <def>the ordering operation that establishes branching of functions and their alternative paths
    </def>
</definition>

<definition>
   <term id="ap233_or in">or in</term>
   <def>the ordering operation that establishes the rejoin of alternative paths
    </def>
</definition>

<definition>
   <term id="ap233_multi exit function">multi exit function</term>
   <def>a special function with multiple exit conditions that can serve the same purpose as "or out"
    </def>
</definition>

<definition>
   <term id="ap233_probability">probability</term>
   <def>a set of numbers, of sum equal to 1.0, that can be assigned to the several exit paths of an "or out" to establish the relative frequenty that each path is taken </def>
</definition>

<definition>
   <term id="ap233_activation rules">activation rules</term>
   <def>the set of rules used by an execution engine in a tool to execute the function based behavior
   <note>The same behavior model can produce different execution results if the rules of execution differ between two tools that exchange data. These are the entities that allow recording of the rules used by the tool putting data into the data model.</note>
    </def>
</definition>

<definition>
   <term id="ap233_start rules">start rules</term>
   <def>the activation rules that establish when a function begins to execute
    </def>
</definition>

<definition>
   <term id="ap233_run rules">run rules</term>
   <def>the activation rules that establish how the function executes
    </def>
</definition>

<definition>
   <term id="ap233_terminate_rules">terminate rules</term>
   <def>the activation rules that establish the conditions under which a function ceases to execute
    </def>
</definition>

<definition>
   <term id="ap233_internal function">internal function</term>
   <def>a kind of function that is allocated to and implemented by system/structure
   <note> For each input/output there are two such functions, one that generates it and one that consumes it.</note>
    </def>
</definition>

<definition>
   <term id="ap233_external function">external function</term>
   <def>a kind of function that is allocated to and implemented by elements in the environment
   <note>These functions act as sources and sinks of input/output</note>
   <note>Input/output is associated with one function.</note>
    </def>
</definition>

<definition>
   <term id="ap233_unit">unit</term>
   <def>establishes the standard of measure against which the values of physical properties shall be stated
   <note>Several different standards of units are in use around the world. It is essential to state the standard in use.</note>
   <example>Failure is assured when different groups use different units without making the necesaary transformations.</example>
    </def>
</definition>

<definition>
   <term id="ap233_property value">property value</term>
   <def>a numeric value assigned to a physical property
   <note>Numeric values, real numbers, can be given as a mean and variance, a probability distribution of values or as a histogram. Many probability distributions are used in systems engineering. These may include: normal, log-normal, Bernoulli, beta, binomial, negative binomial, chi squared, discrete uniformed, erlang, exponential, F, gamma, geometric, laplace, poisson, T, triangular, uniform, weibull.</note>
 <example>Property values are useful in making comparisons and decisions, in verification, and in validation. Comparisons and decisions can only be made if there are both mean values and variances available. Mean values alone are insufficient.</example>
    </def>
</definition>

<definition>
   <term id="ap233_required budgeted property value">required budgeted property value</term>
   <def>a property value allocated to a part by a requirement, or budgeted to that part by analysis
   <note>Values that shall be met are stated in requirements. The laws of science and engineering interrelate the values of properties and are used to calculate the values appropriate for the parts based on the required value for the whole.</note>
   <example>A requirement may state that a space probe shall weigh no more than 150 pounds. In that case the masses of the subsystems must add up to no more than 150 pounds. It is best practice to budget values to the subsystems for guidance of the engineers working on the subsystems.</example>
    </def>
</definition>

   
<definition>
   <term id="ap233_calculated property value">calculated property value</term>
   <def>a property value of a whole calculated or estimated from the values of the parts that assemble to make the whole
   <note>The laws of science and engineering interrelate the values of properties and are used to calculate the values for the whole based on the designed values for the parts.</note>
   <example>As the designers do their work they arrive at design values for the parts. These values will generally differ from the budgeted values because the designers have detailed information unavailable before. It is necessary to calculate the properties of the whole based on these design values to ensure that requirements are satisfied by the proposed design. The mass of the space probe should be 150 pounds or less, based on the design data.</example>
    </def>
</definition>

<definition>
   <term id="ap233_target budget property value">target budget property value</term>
   <def>a temporary property value used by a designer as the design work proceeds and different design alternatives are considered
   <note>As a designer considers several alternatives to meet ysystem requirements, it is necessary to carry along temporary property values to accomplish the design work.</note>
   <example>A designer may have been budgeted 40 pounds for his subsystem. He may find a design solution that weighs 38 pounds. In the design process he may consider alternatives that turn out to weigh 36 , 38,  41, and 43 pounds. These are temporary targets. When he examines other budgets he must meet for the subsystem, the designer may conclude that the 38 pound alternative is the best found.</example>
   </def>
</definition>

<definition>
   <term id="ap233_measured property value">measured property value</term>
   <def>a property value established by measurement of an actual part
   <note>These measurements are often made when actual parts first become available. They verify that the parts meet their requirements.  They also verify the quality of analysis models used during design.</note>
   <example>A part like a turbine blade has a number of important properties critical to the performance of a jet engine, These include aerodynamic efficiency, weight, moment of inertia, vibration spectra, mean time between failure, and corrosion resistance. Important properties are predicted durng design with analysis. Measurement is made as soon as possible.</example>
    </def>
</definition>

<definition>
   <term id="ap233_model parameter">model parameter</term>
   <def>a formally declared variable of the analytical model provided for an external application to populate at execution time in a computing environment
   <note>Physical properties are represented in equations by parameters.</note>
   <example>In Spice, temperature is a model parameter that may be set at the execution time. </example>
    </def>
</definition>

<definition>
   <term id="ap233_parameter assignment">parameter assignment</term>
   <def>provides actual values for characteristics declared formally by the model parameter
   <note>Some parameters are left in parametric form and are calculated. 
   Others are supplied values to fully specify the equations.</note>
    </def>
</definition>

<definition>
   <term id="ap233_analytical representation">analytical representation</term>
   <def>the association of specific properties of specific system assemblies with an 
   analytical model in order to unambiguously characterize the performance of a specific part
   <note>To perform a calculation it is necessary to associate parameters with other elements of equations.</note>
    </def>
</definition>

<definition>
   <term id="ap233_analytical model">analytical model</term>
   <def>provides a mathematical description of the properties of a system
   <note>An analytical model may be a library model. </note>
    </def>
</definition>

<definition>
   <term id="ap233_functional requirement">functional requirement</term>
   <def>states what the shall be done by the system to which it is allocated
   </def>
</definition>

<definition>
   <term id="ap233_performance requirement">performance requirement</term>
   <def>states a time duration or a time probability for the completion of a functional 
   requirement or a function as a modeling element
   </def>
</definition>

<definition>
   <term id="ap233_physical property requirement">physical property requirement</term>
   <def>states a physical property that shall be exhibited by the system or system asseembly 
   to which it is assigned
   </def>
</definition>

<definition>
   <term id="ap233_interface requirement">interface requirement</term>
   <def>states the characteristics of the interface to which it is assigned
   <note>It includes the geometric description, input/output description, protocols that must be met, assemblies of parts required to join two ports, allowable defect characteristics, etc.</note>
   </def>
</definition>

<definition>
   <term id="ap233_imposed design requirement">imposed design requirement</term>
   <def>states particular elements that shall be used in the desiign of the system or part
   </def>
</definition>

<definition>
   <term id="ap233_reference requirement">reference requirement</term>
   <def>states a reference to a source of additional requirements that shall be met by the system or part
   <note>The referenced source may be a requirements document, government requirements for safety, security, environmental quality, etc., or a state or federal law</note>
   </def>
</definition>

<definition>
   <term id="ap233_reference source">reference source</term>
   <def>any requirements document, government regulation or law that contains applicable requirement
    </def>
</definition>

<definition>
   <term id="ap233_effectiveness measure">effectiveness measure</term>
   <def>states an optimization condition that a system shall meet
   <note>Requirements define the domain of the solution; that is, the solution space. The effectiveness 
   measures drive the solution to a particular region in that space. The effectiveness measures 
   are tightly related to stakeholder needs. 
   </note>
   <example>The requirements differences between a PC and a laptop are largely in the laptop 
   optimization conditions for minimum weight, minimum thickness, and maximum battery life. 
   These critiera are some of those that customers (one of the kinds of stakeholder) consider 
   in deciding what to purchase. 
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_optimization direction">optimization direction</term>
   <def>states the direction of optimization, maximize or minimize, for an effectiveness measure 
   <example>For a laptop computer weight and thickness are minimized and battery life is maximized.</example>
    </def>
</definition>

<definition>
   <term id="ap233_weight">weight</term>
   <def>relative importance of a particular effectriveness measure
   <note>Weights are often expressed in a numerical form.</note>
   <example>They fix the relative importance in trade off weight, 
   thickness, and battery life. How many minutes of battery life are worth how many tenths of a 
   pound in weight.</example>
    </def>
</definition>

<definition>
   <term id="ap233_regularization function">regularization function</term>
   <def>an analytic expression that combines effectiveness measures with weights to produce a single 
   number for the goodness of a design option
   <note>This corresponds to the regularization function used in optimal control design and in 
   statistical optimization of processes. </note>
    </def>
</definition>

<definition>
   <term id="ap233_verification requirement">verification requirement</term>
   <def>statement of how a system design or instance shall be shown by the development 
   organization using test, analysis, inspection ,  demonstration, simulation, similarity, 
   sampling, or other method to meet a requirement allocated to the system
    <note>This is a requirement on the development organization and not on the system. </note>
    <note>This is performed to confirm that the deployed system will meet the requirements</note>
    </def>
</definition>

<definition>
   <term id="ap233_verification event">verification event</term>
   <def>occurrence (with date, performer and result) of a comparison of a requirement against 
   the test, analysis, or inspection results of a design or instance of a system
    </def>
</definition>

<definition>
   <term id="ap233_verification procedure">verification procedure</term>
   <def>describes the process used to compare a requirement against the test, analysis, 
   or inspection results of a design or instance of a system
    <example>For a complex digital 
   system the procedure may require the application of a suite of test vectors to the digital 
   system along with environmental tests involving temperature stress and vibration. </example>
   <example> 
   For a complex metal system the the procedure may require the application of several nondestructuve 
   tests to ensure that there are no flaws preset that will cause failure</example>
    </def>
</definition>

<definition>
   <term id="ap233_verification configuration">verification configuration</term>
   <def>arrangement of system and infrastructure necessary to perform the test, analysis, or 
   inspection of a design or instance of a system
    </def>
</definition>

<definition>
   <term id="ap233_verification plan">verification plan</term>
   <def>the schedule of tasks, task durations, start times, end times, task inputs, task 
   outputs, goals, and resources (both personnel and infrastructure) to perform the test, 
   analysis, or inspection of a design or instance of a system
    </def>
</definition>

<definition>
   <term id="ap233_organization">organization</term>
   <def> description of the roles of persons in a group or team 
    ordered definition list.
    </def>
</definition>

<definition>
   <term id="ap233_issue">issue</term>
   <def>any question raised concerning the system or the system development
    </def>
</definition>

<definition>
   <term id="ap233_risk">risk</term>
   <def>likelihood and impact of failure to meet any technical or development program goal
    </def>
</definition>

<definition>
   <term id="ap233_verification result">verification result</term>
   <def>describes the result of a verification  event
    <example>For a complex digital system the procedure may require the application of a suite of test vectors to the digital system along with environmental tests involving temperature stress and vibration.  The result describes the test coverage and the tests passed and failed</example>
    </def>
</definition>

<definition>
   <term id="ap233_validation requirement">validation requirement</term>
   <def>statement of how a system requirement, design or instance shall be shown by the development organization to meet stakeholder seeds 
    <note>This is to confirm that the requirements are suitable for the marketplace. </note>
   <example>Proctor and Gamble recently acquired an electric toothbrush product, SpinBrush, from four cleveland area entrepreneurs. Out of a panel of twenty four consumers, twenty three raved about the product. Sales have been sufficient to boost Proctor and Gamble to number 1 position in US oral care.</example>
    </def>
</definition>

<definition>
   <term id="ap233_validation event">validation event</term>
   <def>occurrence (with date, performer and result) of a comparison of a requirement against the stakeholder needs
    </def>
</definition>

<definition>
   <term id="ap233_validation procedure">validation procedure</term>
   <def>describes the process used to compare a requirement against stakeholder needs
    <note>This is a requirement on the development organization and not on the system.</note>
    <note>The procedures may include stakeholder and market surveys, and test marketing</note>
    </def>
</definition>

<definition>
   <term id="ap233_validation infrastructure">validation infrastructure</term>
   <def>arrangement of requirement information and related infrastructure necessary to check the corresondance with stakeholder needs and market realities
    </def>
</definition>

<definition>
   <term id="ap233_validation plan">validation plan</term>
   <def>the schedule of tasks, inputs, outputs, goals, and resources, both personnel and infrastructure to perform the comparison of requirements against stakeholder Needs
    </def>
</definition>

<definition>
   <term id="ap233_validation result">validation result</term>
   <def>describes the result of the validation event
    <note>Entire new product lines 
   have been abandoned after completed development because of unsatisfactory consumer panel responses and unsatisfactory test marketing</note>
    </def>
</definition>

<definition>
   <term id="ap233_design view">design view</term>
   <def>a partial view of the system that captures only design information; it 
   contains no information about realized, manufactured things that may have lot numbers or serial numbers
   <note>Several different design hierarchues can exist for different purposes. The hierarchy appropriate for manufacturing may conatin more elemnts than the one for engineering design by including materials used in manufacture. The hierarchy for verification of first system built may be different than others because of the need to build parts of the system for early testing to reduce technical risk.</note>
   <example>This definition corresponds to the SC4 convention of separately representing design and realization. SC4 uses the name Part to represent design .</example>
    </def>
</definition>

<definition>
   <term id="ap233_realization view">realization view</term>
   <def>a partial view of the system that captures only information relating to realized things that may have lot numbers or serial numbers
   <note>Several different realization hierarchies can exist for different purposes. The hierarchy appropriate for manufacturing may conatin more elemnts than the one for maintenance because that discipline emphasizes line replaceable units.</note>
   <example>This definition corresponds to the SC4 convention of saeparately 
   representing design and realization. SC4  uses Product_as_realized to represent realized things.</example>
    </def>
</definition>

<definition>
   <term id="ap233_functional breakdown">functional breakdown</term>
   <def>a particular collection of functional and other entities collected for a particular engineering purpose
   <note>These collections allow an engineer to examine functionality for special purposes, picking those elements needed from the prototypical design and realization views.</note>
   <example>An engineer may wish to study the cooling system of a car engine and require a collection of entities distributed through the prototypical design or realization hierarchies.</example>
    </def>
</definition>

<definition>
   <term id="ap233_system breakdown">system breakdown</term>
   <def>a particular collection of system and other entities collected for a particular engineering purpose
   <note>These collections allow an engineer to examine subsystems for special purposes, picking those elements needed from the prototypical system, design and realization views.</note>
   <example>An engineer  may wish to study the cooling system of a car engine and require a collection of entities distributed through the prototypical design or realization hierarchies.</example>
    </def>
</definition>

<definition>
   <term id="ap233_physical breakdown">physical breakdown</term>
   <def>a particular collection of realized things and other entities collected  for a particular engineering purpose
   <note>These collections allow an engineer to examine physical realizations for special purposes, picking those elements needed from the prototypical system, design and realization views.</note>
   <example>An engineer  may wish to study the cooling system of a car engine and require a collection of entities distributed through the prototypical design or realization hierarchies.</example>
    </def>
</definition>

 <abbreviations/>
-->
	<!-- Clause 4  -->
	<inforeqt>
		<fundamentals>
			<data_plan>
				<imgfile file="data_plan_detail1.xml"/>
			</data_plan>
			<description>
				<p>
       @@@@
       Business concepts and terminology descriptions goes here and
       provides the context for the information requirements.
       This may include a data planning model. This may be a more detailed
       data planning model than that in the introduction. 
       References to the Activity model may be included as notes.
       The description may link to the modules.
       @@@@
       </p>
			</description>
		</fundamentals>
		<reqtover module="ap233_system_engineering_and_design">
			<description>
				<p>
        @@@@ summary of module requirements goes here @@@@
      </p>
			</description>
		</reqtover>
		<!-- reqtover module="@@@@">
			<description>
				<p>
        @@@@ summary of module requirements goes here @@@@
      </p>
			</description>
		</reqtover -->
	</inforeqt>
	<!--  Terminology map -->
	<terminology_map>
		<!-- mapping of a business to term to an AP term -->
		<term_map>
			<description>
        @@@@ description of the mapping @@@
      </description>
			<business_term term_id="@@@@"/>
			<ap_term term_id="@@@@" application_protocol="@@@@"/>
			<module_term term_id="@@@@" module="@@@@"/>
		</term_map>
	</terminology_map>
	<!-- Activity Model -->
	<aam>
		<idef0>
			<imgfile file="aamidef01.xml"/>
		</idef0>
	</aam>
	<!--  -->
	<imp_meths>
		<imp_meth general="n" part="21">
			<description>
   @@@@
  </description>
		</imp_meth>
	</imp_meths>
	<usage_guide>
   @@@
 </usage_guide>
<tech_disc>
 
<p><b>Concept Model for Systems Engineering</b></p>
<p>This annex provides the concept model for systems engineering that was the foundation for developing this part of ISO 10303.  Together with the terms defined in clause 3 of this part, this model defines the breath and scope of capability while also providing the semantic reference base and model based requirements that were used to drive development of this part of ISO 10303.</p>
 
<p>The definitions in clause 3 explain meanings in natural language. The model captures the multitude of relationships in a graphic form so that the relationships can be scanned. The model is patterned after UML 1, with indications of semantics that are missing from the language.  Figure 1 is a guide for interpreting the models in this annex.</p>
<figure> <title>Key to diagrams</title>
		<img src="ug_figure13.gif"/>	
</figure>
<figure> <title>Top level concept model</title>
		<img src="ug_figure1.gif"/>	
</figure>

<p><b>Top Level Model</b></p>
<p>The model needs to be read with reference to the definitions in the semantic dictionary. It starts with Element that is any thing on which repeated measurements can be made for the engineering purposes of interest. This is  a necessary definition because otherwise it is not possible to verify that a design or implementation meets its requirements. Element is built from Element in a hierarchy. The aggregation symbol has a small "C" in it to show that what is meant is a decomposition into all of the parts. The special notation is used because this concept is missing from UML 1.</p>
 
<p>The Domain of Interest constitutes all the things of interest to the application.</p>

<p>System is a kind of Element and thus it is built of systems in a hierarchy and it must have measurable characteristics that are repeatable. What makes the System unique is that it has well defined relationships with all of the things with which it interacts. The collection of those things is its Environment. To have a system it is necessary to characterize what is in the system and what is in the environment along with the static and dynamic interactions between system and environment. The Environment contains Elements and Systems.</p>
<p>
Different persons in engineering, manufacturing, maintenance, and management need different sets of information about the system. Manufacturing personnel need to know about all the materials, nuts and rivets that go into the system and how they assemble together. Maintenance personnel need to have diagnostic information and deal with replaceable units of the system. There are a very large number of such useful collections of information, each with its own context.  System View provides for the collection of such sets of information, each set in a particular context.</p>
<p>
An important subset of things in the environment are the Stakeholders. These are all the persons and organizations with a need, preference, or interest in the system. Stakeholders may include manufacturer, owner, user of owner's services, user of the system, operator, maintainer, government regulator. Stakeholder Need represents their need, preference, interest, etc. in the system. If the System is designed and implemented well, then it satisfies these needs in a manner that is superior to competitive systems. It sells in the marketplace.</p>
<p>
A Property is a named measurable or observable attribute, quality or  characteristic of an se_thing. If you can measure it or observe it it is called a property. Properties have units, values, variances and probability distributions associated with them.  They may be looked up in handbooks of properties of standard materials, they may be calculated from the structure of the thing, or they may be measured directly. In general they are tensors and may be a function of time. Because of the multiple ways of arriving at a property and its values, it is important to have a Reference Document that establishes the source of the information.</p>
<p>
A Requirement is a statement of a Property that a System shall exhibit.  The relationship to System is handled by allocating the requirement to the system that shall exhibit that property. This formality allows the engineer to consider alternative allocations to different systems that may fulfill the requirement. It is fundamental to trade-off among solutions. Requirements originate from Stakeholder Needs. As the design proceeds in levels of detail, requirements are derived from other requirements. These "derived from" relationships are preserved as traceability relationships. In a real world problem requirements will be changed from time to time. It is critical to trace from a requirement that has changed to other requirements impacted by that change.</p>
<p>
It is useful to distinguish among three kinds of properties.</p>
<ul>
<li>
<b>Structure</b> the description of how a system decomposes into its parts and how the parts assemble to make the whole.</li>
<li>
<b>Behavior</b> what the system does in response to the things in its environment. This includes both desired responses that satisfy needs, and prevention of undesired responses (failures) that can cause injury, destruction, or loss.</li>
<li>
<b>Physical Property</b> includes all the measurable or observable attributes, qualities or characteristic of an Element that cannot be observed in interaction with the environment. Additional instruments or tools are required to make the measurement or observation. Mass may require a scale for weighing, index of refraction may require use of an optical instrument.</li></ul>
<p>
These three kinds of properties are described separately and then interrelated. This principle supports the consideration of alternatives
</p>
<figure> <title>System static structure</title>
		<img src="ug_figure2.gif"/>	
</figure>
<p><b>
Structure</b></p>
<p>
Structure is built from Part, Port, and Interface Specification. Structure decomposes hierarchically. This forces Part and Port to also decompose hierarchically. </p>
<p>
The Part is simply a part or component list. The name used  follows the STEP manufacturing point of view of looking at a part or component and talking about it as an assembly because their job is to assemble it. This is a place where it may be advisable for clarity to use the words component or part as an alias for Part. </p>
<p>
Each Part (part or component) attaches to others at particular locations. These locations are called Ports. This is a familiar idea when one thinks of the port on a power cord that plugs into a port on the wall to get electric power. It also applies to the surface of a bridge, a port, that interacts with wind, a port. In the second case the concept is less intuitive and more formal but it works. Ports connect to ports.</p>
<p>
Interconnection specifies which ports attach to which other ports. Together Part, Port, and Interconnection specify how parts go together to constitute the whole. This description does not include Behavior or Physical Properties.
</p>
<p>
Each port has associated with it a description, an Interface Specification, that describes the geometry, forces, transferred material or energy or information, protocols, how to assemble to it, and tests that may be required of the port-to-port connection. For two ports to be interconnected  their interfaces must be compatible. 
</p>
<p>
<b>Structure, Behavior and Physical Property</b>
</p>
<p>
Structure, Behavior and Physical Properties are described separately. Behavior and Physical Properties are allocated or budgeted to Part to complete the description.
</p>
<p>
Behavior is built from Function, I/O (Input/Output), and Function Ordering as shown in Figure 3. Any Element may be I/O (Light blue shows an entity comes from Figure 1.). A Function is a entity of transformation that changes a set of inputs to a set of outputs. Function Ordering orders the functions such that it is possible to represent sequence, concurrency, branching, and iteration.
</p>
<p>
There are two major forms of representing Behavior. Function based behavior, independent of state, emerged in systems engineering in the 1970's. It provides for completed functions to enable succeeding functions, for I/O to trigger functions, and for ordering operators to represent sequence, branching, and iteration. The SEDRES model represents this with a Petrie net model. UML 2.0 contributors may be using a Petrie Net model. If so, then these two models need careful comparison.
</p>

<figure> <title>Behavior</title>
		<img src="ug_figure3.gif"/>	
</figure>
<p>

Description Function Based Behavior
</p>
<p>
A model for Function Based Behavior is given in Figure 4. I/O may trigger functions, starting or terminating functions. I/O that triggers is coupled to the function by binding to a Function Control Port. I/O that does not trigger is bound to a Regular Function Port. I/O arriving while a function is active is stored in a queue unless it is terminating I/O.
</p>
<p>
Function ordering uses a set of operators: AND to define concurrency, Multi-exit Function or OR to represent alternative paths, a sequence operator, and LOOP, Iterate, and Replicate constructs. LOOP and ITERATE require limits to control their termination. Scripts are used to provide detailed control of function ordering. Probabilities are assigned to Or Out to facilitate execution of the behavior to produce time lines or Monte Carlo simulation.
</p>
<p>
After tools are to exchange behavior information that includes timing, the tool interpretation engines may execute the models to produce time lines or perform Monte Carlo calculations. These results will differ unless the tools agree on function activation rules. 
</p>
<p>
Resource
</p>
<p>
Resource is: 
</p>
<ul>
<li>the amount of input available to a function or the amount of output available from it.</li>
<li> or the amount of property of a system available to a function.</li>
</ul>
<example>There exists some number of missiles available to a missile battery available for the function "Shoot".</example>
<example>
The function "transmit message" may be allocated to a satellite system, a fiber optic line, a microwave link, etc. Each of these alternatives has some value of the property "bandwidth" that may be used by the function.</example>
<p>
Function - Resource Relationships
</p>
<p>
Captures: Captures indicates the resource that this object requires (but does not destroy) during execution. Resources are captured when the execution of the function begins and released when the function completes execution.  
</p>
<p>
Consumes: Consumes indicates the resource that this object requires (and destroys) during execution. Resources are consumed when the execution of the function begins. 
</p>
<p>
Produces: Produces indicate the resource that is generated by the function. Resources are produced when the execution of the function completes.
</p>
<p>
Function Activation Rules
</p>
<p>
A representative set of activation rules follows:
</p>
<p>
Start Rule - A function is activated and begins its work if and only if all preceding functions and threads of functions have completed and all inputs that trigger the function are present at the function control ports. A function begins work if and only all resources to be utilized by that function are available. Otherwise it waits.
</p>
<p>
Run Rule -  Trigger signals received while a function is active are stored in queues. 
</p>
<p>
Terminate Rule - Functions complete generation of all their outputs, terminate, and pass activation to the next function when the time interval allocated to them expires. Functions complete production of all resources and return any resources that were captured during execution.</p>
<p>
I/O Queuing Rules
</p>
<p>
A representative set of queuing rules follows:
</p>
<p>
Triggering I/O that arrives at function is stored in a FIFO queue. On its next activation the function uses the I/O first stored in the queue. 
</p>
<p>Non-trigger signals received while a function is active are discarded. Non-trigger signals received while a function is dormant are stored in    LIFO queues. It is the last I/O received that is used.
</p>
<figure> <title>Function based behavior</title>
	<img src="ug_figure4.gif"/>	
</figure>
<p>
The Function Exit Construct
</p>
<p>
A Function Exit construct links a functional decomposition to the exit paths identified for the parent function. For example, assume you have a Multi-exit Function with two exit paths. If this is the leaf-level of your model, scripting (or probabilities if no script is defined) selects which path to take.
</p>
<p>
However, if this function is decomposed, there are Function Exit constructs corresponding to the two exit paths in the higher level function. When one of the Exit constructs is encountered, execution of the decomposition is complete and control is passed to the corresponding exit path at the higher level.
</p>
<p>
State based behavior emerged from automata theory and has matured into State Charts that provide for state explosion in highly concurrent models. SEDRES has a representation for this and has demonstrated model transfer between Statemate and Teamwork Real Time tools.
</p><p>
In the UML community Action Semantics are to provide a basis for state based behavior. These two approaches require careful correlation. The concept model here does not go beyond the very general notion of function ordering, but notes the critical importance of correlation among emerging detailed models.</p>
<p>
<b>Structure and Physical Properties</b>
</p>
<p>
Physical Property, its relationship to the Structure hierarchy and to analysis is shown in Figure 4. The key concept is that performance, behavior and physical properties of the whole results from the structure, the behavior and physical properties of the parts. They are not related to a class tree.
</p>
<figure> <title>Structure and physical property</title>
		<img src="ug_figure5.gif"/>	
</figure>
<p>
System Assemblies in the Part tree all have Physical Properties such as mass, power consumption, geometry, MTBF, drag coefficient, etc. The Physical Properties are assigned to a particular Part. A Physical Property has a name and an ID that identifies it uniquely. For example, many different System Assemblies have the Physical Property mass. Consequently each of these assigned Physical Properties needs an ID. Each has an associated unit in which it is measured.
</p>
<p>
A Physical Property assigned to a particular Part has values. The value may be expressed as a mean, a mean with variance, a probability distribution, or a histogram. All of these values are a result of a set of measurements and analysis of the data. The value goes through a series of versions as the system definition evolves. The Part is declared to have a Required or Budgeted Value.  The Part may have a Target Budget Property Value used as a guide or target as designers consider alternatives. A Part, as a whole, may have a Calculated Property Value based on analysis of the properties, behaviors and interactions of its parts. When a Part is built, it may have a Measured Property Value. 
</p>
<p>
Calculated Property Values - Analytical Modeling
</p>
<p>
Any one assembly is an interconnection of assemblies one tier down in the tree. The emergent properties of any assembly are a result of the properties, interconnection,and interaction of the sub-assemblies from which it is built. The relationships may be very non-linear in the physical world as observed with phenomena like combustion and friction.
</p>
<p>
 The basic relationships for analytical modeling of emergent properties and budgeting of properties are shown in Figure 5. A set of engineering equations or estimates, analytical  models, are used by systems engineers to budget properties to the interacting sub-assemblies as a guide to designers at the lower level. When designs for all of the sub-assemblies are available, their individual properties and interactions are better defined. The same equations are used to calculate the emergent properties of the complete assembly. The fidelity of the calculations increases as the work proceeds.
</p>
<p>
A Part, as a whole, may have a Calculated Property Value based on analysis of the properties, behaviors and interactions of its parts. This is accomplished by estimation or by an analysis that solves the relevant engineering equations. This makes it necessary to represent physical properties as parameters in the equations of the relevant analysis model. Model Parameter provides this parameterization. It has an attribute of its of the unit of measure applicable to the analysis. This may be different from the unit assigned to Physical Property. The reference_document attribute specifies the standard document that contains the reference for the Model_parameter. A default value and valid range can be specified when needed.
</p>
<p>
Parameter_assignment assigns parameters to model_parameter that in turn is a  parameter for analytical_model. Analytical_representation has a set of parameter_assignments and is modeled by one or several analytical models. be solved, Analytical _representation. The several Analytical_models provide answers at different levels of fidelity and with different efforts of computation. AM_port connects the analytical results back to the appropriate location in the part hierarchy. 
</p>
<p>
Emergent Properties and Budgeting of Properties Example 
</p>
<p>
One may wish to develop a car that can accelerate from zero to sixty  miles per hour in 6.5 seconds or less. This is a required emergent property of the car. This behavior is a result of the power of the drive train, the air resistance of the body, the total mass of the car, and the friction of the tires on the road. These parameters are inter-related by a second order differential equation.
</p>
<p>
The differential equation is first used to budget target values of mass, power, drag coefficient, and tire friction to the appropriate components as targets for the designers. When the designs are available with definite property values, the same equations are used to calculate the emergent property, time for acceleration from zero to sixty mph for the car.  
</p>
<p>
Note that there may be several distinctly different approaches to the solution of what sub-components to use. Thus it is useful for the assembly to have relationships that indicate if it is an alternative or is selected as a solution, if it meets requirements, and what its regularization function value may be as the basis of selecting a particular solution from among the alternatives.  
</p>
<figure> <title>Example</title>
		<img src="ug_figure6a.gif"/>	
</figure>

<figure> <title>Engineering equations</title>
		<img src="ug_figure6.gif"/>	
</figure>
<p>
The Table below is a crude map of the equations in Figure 7. Into the concept model defined in Figure 4 for the car example. Only the properties of car have been mapped. Note there are two analytical models. One is very simple and assumes constant traction once the car is in motion and rolling friction applies. The second is of higher fidelity and uses traction vs. Rpm. from actual engine data, including transmission gear changing.
</p>
<figure> <title></title>
		<img src="ug_table1.gif"/>	
</figure>
<p>
Model_parameter
</p>
<p>
A Model_parameter is a formally declared variable of the analytical model provided for an external application to populate at execution time in a computing environment. 
</p>
<example>
In Spice, temperature is a Model_parameter that may be set at the execution time. 
</example>
<p>
Parameter_assignment
</p>
<p>
Parameter_assignment provides actual values for characteristics declared formally by the Model_parameter.
</p>
<p>
Analytical_representation
</p>
<p>
An Analytical_representation is the association of specific properties of specific System Assemblies with an Analytical_model in order to unambiguously characterize the performance of a specific Part.
</p>
<notes>
<note>
This entity accomplishes a function similar to the parameter assignment part of a statement in a Spice netlist, or a function or subroutine call in a computer program. This capability is useful where the parts in the library have many parameters, not all of which apply to each simulation model that could be used for the part. This entity matches up the correct parameter values with the correct model.</note>
<note>The properties specified should be in accordance with the capabilities and limitations of the Analytical_model. That is, the mathematical formulations in the Analytical_model apply over limited ranges of real product characteristics and environmental characteristics.</note>
<note>This part of ISO 10303 does not standardize qualification of Analytical_representations for an intended usage.
</note>
</notes>
<p>
Analytical_model
</p>
<p>
Provides a mathematical description of the properties of a system. An Analytical_model may be a Library_model.
</p>
<note>In this part of ISO 10303 an Analytical_model includes the variable declarations of the mathematical description but may not include the assignment of actual values for the variables declared. 
</note>
<note>
This part of ISO 10303 provides support for computer systems to verify type consistency between product data defined in this part of ISO 10303 and product data captured by Analytical_models. 
</note>
<note>
This part of ISO 10303 describes the interfaces (ports) to an Analytical_model and provides  support for type checking of the units used for the parameters that may be assigned values for an Analytical_model.
</note>
<example>
Consider the case where actual values are not included: the Analytical_model for a resistor that is coded in pseudocode. When the Analytical_model is referenced by an analytical_representation, literals will be supplied for items declared in the interface; both connections and their parameters, and the simulator will ensure that types are compatible. 
</example>
<p>
Probability Distributions
</p>
<p>
Probabilities are applied to the values of physical properties, and to the performance requirement time duration assigned to functions. A list follows of representative probability distributions used in systems engineering tools. 
</p>
<p>
<i>NormalLog-normalBernouliNegative BinomialBetaPo</i>
</p>
<p>
Allocation of Requirements
</p>
<p>
Depending upon their content, requirements are allocated to different parts of the information model. Requirements describing functions are allocated to functions, etc. This is a useful way of classifying requirements for the purpose of creating a logically consistent model or description of a system.
</p>
<p>
Within systems engineering there is no single standardized way of classifying requirements and many different classifications for different purposes are in use.  The classification given in Figure 6 is defined as shown because it is useful for the purpose allocating or assigning requirements.
</p>
<p>
It is not possible to enforce any process with an information model and AP233 is intended to support both pest practices and other practices in use. Hence, any collection of requirements may contain compound requirements, contradictory requirements, and non-feasible requirements. Consequently the generalization/specialization of Figure 6 is non-exhaustive and inclusive. 
</p>
<figure> <title>Classification of requirements for the purpose of allocation</title>
		<img src="ug_figure7.gif"/>	
</figure>
<figure> <title>Requirement allocations</title>
		<img src="ug_figure8.gif"/>	
</figure>
<p>
Summary of Allocation Relationships
</p>
<ul>
<li>
 Requirements are assigned to functions
</li>
<li>
 Performance Requirements are assigned to functions
</li>
<li>
 Function is allocated to Part (red used because of line crossings)
</li>
<li>
 I/O is bound to ports (red used because of line crossings)
</li>
<li>
 Interface Requirements are assigned to Interfaces
</li>
<li>
 Physical Property Requirements are assigned to Part
</li>
<li>
 Imposed Design is assigned to the Part on which it is imposed
</li>
<li>
Reference Requirements point to a Reference Source that may contain requirements of all the kinds in the classification
</li>
</ul>
   <p>
<b>Physical Property and Time</b>
</p>
<p>
Figure 9 shows draft models for Physical Property and Time. Physical Property and Part are under study by a team member and improved models are expected for Figure 9 and Figure 5.
</p>
<p>
The model for time in Figure 9 is preliminary and needs discussion.
</p>
<p>
Continuous Time is a dimension along with three spatial dimensions used by science and engineering to describe reality using math. It has no past, present or future.
</p>
<p>
 Present Time recognizes a standard of year, month, week, day, hour, minute, and second to represent past, present, and future. It is the basis of plans and schedules.
</p>
<p>
Time Interval provides a time duration that may be assigned to a task or function to represent how long the task will take for completion.
</p>
<p>
 Start Time is a Present Time that states where in Present Time a Time Interval begins.
</p>
<p>
 Stop Time is a Present Time that states where in Present Time a Time Interval ends.
</p>
<p>
Discrete Time is time represented by clock pulses of negligible duration.    In this approximation events occur on each clock pulse.
</p>
<p>
Time is one of the most accurately measured quantities that we have. Current accuracy of measurement is about one part in 10 -13. Research underway may extend this to 10 -17. Many properties now have primary standards based in part on time.
</p>
<figure> <title>Physical property and time</title>
		<img src="ug_figure9a.gif"/>	
</figure>
<p>
Three Models follow that are important to systems Engineering Management.
</p>
<p>
The models for verification and validation are at first draft level and need discussion. 
</p>
<p>
The model for Risk was discussed with the Risk Working Group at the INCOSE 2002 symposium. AP233 is waiting for there corrections and changes. The existing model is based on information from the risk working group, NASA Goddard Risk Attributes in SLATE 'GPM' Data Base March 7,2002 (Dave Everett), and from NASA JPL Risk Process Diagram
</p>
<figure> <title>Verification</title>
		<img src="ug_figure10.gif"/>	
</figure>
<figure> <title>Validation</title>
		<img src="ug_figure11.gif"/>	
</figure><figure> <title>Risk</title>
		<img src="ug_figure12.gif"/>	
</figure>
<p>
<b>Category</b>
</p>
<p>
The decomposition tree for Part is more than a simple parts tree. At any node one may introduce a category of parts. For example, an automobile may have several different engines that can be used in the automobile, each providing a different level of economy and performance.
</p>
<p>
Categories are a grouping of elements into a set based on defined properties that serve as selection criteria for which elements of all those in the universe belong in that set Explanation: It is categorization that enables us to define alternatives and create taxonomies for libraries. This is one of the forms of  generalization/specialization. Note that this is NOT INHERITANCE as found in object-oriented software languages. Physical elements, matter and energy, do not inherit their properties. Rather they posses the properties of themselves and can be identified by measurement of those properties. For a discussion of these issues in computer science see the work of Barbara Liskov and her CLU language.
</p>
<note>The subcategories may be exclusive or inclusive and the subcategories may exhaust the super category or not there are four such possibilities 
</note>
<p>
Category is the basic concept in the physical world to support specialization - generalization.
</p>
 </tech_disc>
	<bibliography>
		<bibitem.inc ref="ISOIEC8859-1_1987"/>
	</bibliography>
</application_protocol>
