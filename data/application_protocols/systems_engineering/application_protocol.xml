<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: application_protocol.xml,v 1.54 2009/08/27 20:40:11 abf Exp $ -->
<!DOCTYPE application_protocol SYSTEM "../../../dtd/ap_doc/application_protocol.dtd">
<!-- Generated by mkapdoc_main.js, Eurostep Limited, http://www.eurostep.com -->
<!-- 
     To view the application document in IExplorer, open: sys/1_scope.xml
      -->
<!-- The XML for the AP documents
     name :
       is the name/directory of the Application protocol, all lower case with no whitespace

     module_name :
       is the name of the top level implementation module, the AP module

     title :
       is the title of the AP document

     part :
       ISO 10303 part number of the AP document

     purpose :
       Used to complete the first sentence in the introduction
         "This part of ISO 10303 specifies an application protocol (AP) for ....."
       and clause 4
         "This clause specifies the information required for ...."

     wg.number :
       SC4 N-number of the AP document

     wg.number.supersedes :
       the SC4 N-number of the document that this AP document supercedes

     version :
       version of AP document 

     status :
       AP document status

     language :
       E for English langauge

     publication.year :
       year of publication of AP document

     published :
       y if published
-->
<application_protocol
   name="systems_engineering"
   module_name="ap233_systems_engineering"
   title="Systems engineering"
   name.french="Les systÃ¨mes techniques d'ing&#233;nieurs"
   part="233"
   purpose="systems engineering data"
   wg.number="2474"	
   wg.number.supersedes="2277" 
   version="1"
   status="DIS"
   language="E"
   publication.year="2009"
   published="n"
   checklist.convener="2530"
   checklist.internal_review="2531"
   checklist.project_leader="2532"
   rcs.date="$Date: 2009/08/27 20:40:11 $"
   rcs.revision="$Revision: 1.54 $"
   development.folder="dvlp">
  
  <keywords>
    Application protocol, decision support, issue management, program management, project management, 
    requirements management, risk management, systems engineering, system behaviour, system modelling, 
    system structure. 
  </keywords>
  
  <!-- the abstract for the application protocol. -->
  <abstract>
    <p>This part of ISO 10303 specifies an application protocol for the representation of 
    systems engineering data. It defines the context, scope and information 
    requirements for various development stages during the design of a system. This 
    part of ISO 10303 is applicable to any form of system, including aircraft, cars, 
    ships, railways, and plant.  </p>
  </abstract>
  
  <!-- Reference to contacts detailed in stepmod/data/basic/contacts.xml -->
  <contacts>
    <projlead ref="ap233.projlead2"/>
    <editor ref="ap233.editor2"/>
  </contacts>
  
  <!-- Introduction -->
  <purpose>
    <p>This application protocol defines the context, scope and information requirements 
    for various development stages during the design of a system. It is 
    applicable to any form of system, including aircraft, cars, ships, railways, and plant. </p>
    
    <p> This part of ISO 10303 was informed by a rich body of work on systems engineering.  
    The following references played a significant role in development of ISO 10303-233: 
    ISO/PAS 20542 [4], Blanchard [10], Herzog [11], Oliver [12].  The INCOSE and NASA systems 
    engineering handbooks [15, 16] were also instrumental. </p>
    
    <p>This introduction provides a high level view of ISO 10303-233 documentation. Extensive hyperlinking is 
    provided throughout.  These hyperlinks define how concepts, views and modelling elements
    cross couple to create the whole.</p>
    
    <ul> 
      <li>an overview of  "What systems engineering is" follows;</li>
      
      <li>the Application Activity Model (AAM) in <clause_ref linkend="aam">Annex F</clause_ref> attempts 
      to span the information 
      modelling needs of all systems engineering process standards developed over the past two decades, including
      ISO 15288 [6];</li>
      
      <li>consensus building during development of this part of ISO 10303 led to the creation of a single 
      Concept Model that documented agreements in a harmonized and consistent manner, it is provided in 
      Annex <clause_ref linkend="tech_disc:Concept Model for Systems Engineering">I</clause_ref>, 
      along with its associated semantic dictionary;</li>
      
      <li>the complexity of this part of ISO 10303's modular architecture can be visualized via a set 
      of loosely defined concepts used to logically group and graphically display module 
      USE FROM connectivity and extensible select origin, this work is in Annex F of 
      <module_ref linkend="ap233_systems_engineering:f_usage_guide"/>;</li>
      
      <li>provided in <clause_ref linkend="inforeqt:Information requirements">clause 4</clause_ref> is an overview 
      of implementation module architecture with an emphasis on the extensible selects that network 
      ISO 10303 foundation and higher level modules together to form an implementation module with 
      identified scope;</li>
      
      <li>a large repository of information relevant to users and implementers of the ISO 10303 capabilities used 
      by ISO 10303-239 and by 70% of this part of ISO 10303 is at
      <a href="http://docs.oasis-open.org/plcs/dexlib/oasis_cover.htm"/>;</li>
      
      <li>information relevant to users and implementers of capabilities of this part of ISO 10303 is
      evolving work; as it is created, it will be 
      archived in a public information folder at <a href="http://www.ap233.org"/>.</li>
    </ul>
    
    <p>Systems Engineering <i>is an interdisciplinary collaborative approach to derive, evolve, 
    and verify a life cycle balanced system solution that satisfies customer expectations and 
    meets public acceptability.</i> [5] </p>
    
   <p>The International Council on Systems Engineering (INCOSE) defines systems engineering to be the following:</p> 
    <blockquote>Systems Engineering is an interdisciplinary approach and means to enable the realization 
    of successful systems. It focuses on defining customer needs and required functionality early 
    in the development cycle, documenting requirements, then proceeding with design synthesis and 
    system validation while considering the complete problem:
    
    <ul>
      <li> operations; </li>
      <li> performance; </li>
      <li> test; </li>
      <li> manufacturing; </li>
      <li> cost and schedule; </li>
      <li> training and support; </li>
      <li> disposal. </li>
    </ul>
    
    Systems Engineering integrates all the disciplines and specialty groups into a team effort 
    forming a structured development process that proceeds from concept to production to operation. 
    Systems Engineering considers both the business and the technical needs of all customers with 
    the goal of providing a quality product that meets the user needs. [15]</blockquote> 
  
    <p>Systems Engineering makes extensive use of specification of all interfaces, performance 
    analysis, and trade studies to ensure that the system is near optimal for and will be accepted 
    by stakeholders and the marketplace. It is applicable to anything for which a well-defined 
    boundary can be established whether mechanical, electrical, electronic, information, chemical, 
    biological, social or organizational.</p>
    
    <p>This part of ISO 10303 is an information model that captures the concepts used in Systems Engineering, as 
    <clause_ref linkend="purpose:figure:se1:1">Figure 1</clause_ref> shows. 
    These concepts may be represented by a variety of symbols and each set of such 
    symbols can be combined into an number of different views. A particular set of symbols and views 
    constitutes a language. Tools automate the use of such a language to represent and model systems. 
    For any language a number of different tools may exist and they may not be able to exchange data 
    even using the same language unless they have compatible schema for storing that language. Thus a 
    single set of concepts results in a plethora of languages and tools.</p>
    
    <figure id="se1" number="1"> 
      <title>ISO 10303 Information model</title>
      <img src="Slide9.gif"/>	
    </figure>
    
    <p>The tools are used by engineers. Frequently it is the organization that establishes the process, 
    a specification of the views and development order that must be followed, that the engineers 
    shall follow. Two organizations using the same tool may or may not use equivalent views in doing 
    their work.</p>
    
    <p>In general, there is no single tool that can support all the work that must be done so the 
    tools are most efficient when put in an environment that enables them to exchange the information 
    artifacts that the engineers produce using the tools. Often, different tools incorporated in a 
    single environment cannot exchange information. Very often, the organizations in a supply chain 
    or working together on a single project as a consortium will have different environments 
    incorporating different sets of tools. Yet all members of the supply chain or consortium need 
    to efficiently share data rigorously and at low cost.</p>
    
    <p>The application protocol provides a solution to this 
    problem. Each tool needs an interface that interconnects the tool with the AP. The interface 
    transforms the data artifacts from the tool for correct storage in the AP and transforms data 
    supplied by the AP for use by the tool.</p>
    
    <p>In this way this part of ISO 10303 supports information exchange among organizations, even 
    though their environments contain different tools.  This part of ISO 10303 is the glue for organizations
    working together in a consortium or a supply chain.</p>
    
    <p><clause_ref linkend="purpose:figure:se2:2">Figure 2</clause_ref> 
    shows the basic capabilities of this part of ISO 10303. It is divided into two main parts, program 
    management and system requirements/design. Major capabilities are listed in each box. The 
    relevant kinds of tools that are applicable surround each box. The two main parts of the work 
    are interconnected by risk analysis, issue resolution, and management authorization and review. 
    Where these capabilities share concepts, i.e. where they are semantically equivalent, there can 
    be exchange of information artifacts among any of the tools through the tool interfaces and the 
    ISO 10303-233 information model.</p>
    
    <figure id="se2" number="2"> 
      <title>ISO 10303-233 content and associated tools</title>
      <img src="Slide10.gif"/>	
    </figure>
    
    <p>The same transfer is possible where there is semantic identity with downstream design, 
    manufacture, test, and maintenance tools. There are many APs for a variety of industrial 
    businesses such as, geometry, circuit board and chip 
    development, shipbuilding, building construction, furniture design and manufacture, maintenance.
    A large number of different tools are used by these businesses and interface through their 
    own APs. All of these APs have been made modular and share, as much as possible, the same modules 
    This approach is vital for connecting systems engineering tools to downstream tools and it makes 
    possible the use of this part of ISO 10303 as an integrating AP across all the others.</p>
    
    <p>The shared modularity has also required that the ISO 10303-233 modules use naming conventions that 
    were developed a decade or more ago by developers in other disciplines. The consequence is that 
    ISO 10303-233 contains names in the detailed EXPRESS code that will seem foreign to practicing systems 
    engineers. It also means that many modules will use a different common module for widely needed 
    representation of concepts like number or a weighting factor. Thus the reader who looks at a 
    particular module may not see there an entity that he knows belongs there because it resides 
    in a shared module and is connected to the module he is reading. Efficient use of the EXPRESS 
    language also means that the connection to the common module may go through a chain of classes 
    and subclasses; it may be very indirect for the reader. </p>
    
    <p>For the reasons above, this introduction does not attempt to show the reader the details of 
    the EXPRESS model. Rather this introduction attempts to: </p>
    <ul>
      <li>describe this part of ISO 10303 as a container of concepts shared by tools; </li>
      <li>list a number of this part's capabilities; </li>
      <li>show kinds of tools that can interface with one another through this part of ISO 10303;</li>
      <li>show the major mappings of capabilities onto the modules that constitute the information module.</li>
    </ul>
    
    <p>Those who wish to investigate the modules in detail can use this Introduction as a guide to 
    that adventure. 
    <clause_ref linkend="purpose:figure:se3:3">Figure 3</clause_ref>
    shows a top-level view of the module hierarchy. It is important to be 
    aware that the boxes under a higher box do not necessarily completely compose it. Rather there 
    may be additional things in the box above. This is not intuitive to those accustomed to hardware 
    development, but it is a result of the software languages.</p>
    
    <figure id="se3" number="3"> 
      <title>Top-level hierarchy of ISO 10303-233 modules</title>
      <img src="Slide11.gif"/>	
    </figure>
    
    <p>The capabilities of <clause_ref linkend="purpose:figure:se2:2">Figure 2</clause_ref> 
    map into modules of <clause_ref linkend="purpose:figure:se3:3">Figure 3</clause_ref> 
    as identified below. Be 
    aware that these are not leaf cell modules. There may be structure below them, and they may 
    connect to modules above and below through type extensions. This makes reading the code or 
    the graphic EXPRESS-G diagrams difficult, but it is the nature of the language. </p>
    
    <p> All of the program management capabilities in this part of ISO 10303 map to 
 <module_ref linkend="program_management:introduction"/> and its component modules as described below:</p>
    <ul>
      <li>issues map to <module_ref linkend="issue_management:introduction"/>;</li>
      <li>organization structure maps to <module_ref linkend="organization_structure:introduction"/>;</li>
      <li>project breakdown maps to <module_ref linkend="project_breakdown:introduction"/>;</li>
      <li>project management information maps to <module_ref linkend="project_management:introduction"/>;</li>
      <li>project management resource information maps to <module_ref linkend="project_management_resource_information:introduction"/>;</li>
      <li>risk maps to <module_ref linkend="risk_management:introduction"/>;</li>
      <li>schedule maps to <module_ref linkend="project_breakdown:introduction"/>;</li>
      <li>work breakdown information maps to <module_ref linkend="work_structure:introduction"/>; </li>
      <li>configuration management maps in a complex manner to capabilities in <module_ref linkend="product_data_management:introduction"/>;</li>
      <li>product data management (PDM) maps in a complex manner to capabilities in <module_ref linkend="product_data_management:introduction"/>.</li>
    </ul>
    
    <p>All of the system requirements and design capabilities map to modules under: 
    <module_ref linkend="system_modelling:introduction"/></p>
    <ul>
      <li>requirements map to <module_ref linkend="requirement_management:introduction"/>;</li>
      <li>allocation of requirements to system elements map to 
      <module_ref linkend="requirement_management:introduction"/>;</li>
      <li>moments of effectiveness and trade studies map to capability under 
      <module_ref linkend="decision_support:introduction"/>;</li>
      <li>configuration management maps to 
      <module_ref linkend="product_data_management:introduction"/> under  
      <module_ref linkend="system_structure:introduction"/>;</li>
      <li>product data management (PDM) maps to <module_ref linkend="product_data_management:introduction"/>
      under  <module_ref linkend="system_structure:introduction"/>;</li>
      <li>interface to analysis maps to capabilities under  
      <module_ref linkend="decision_support:introduction"/>;</li>  
      <li>function based behaviour maps to <module_ref linkend="function_based_behaviour:introduction"/> 
      under <module_ref linkend="system_behaviour:introduction"/>;</li>
      <li>state based behaviour maps to <module_ref linkend="state_based_behaviour:introduction"/> 
      under <module_ref linkend="system_behaviour:introduction"/>.</li>
      <li>system hierarchies for the design system, the realized system and all interfaces map to 
      capabilities under <module_ref linkend="system_structure:introduction"/> 
      and <module_ref linkend="functional_breakdown:introduction"/>. </li>
    </ul>

  </purpose>

  
  <!-- Items in scope 
       If from_module is YES then XSL will copy the in scope statement from the module.
       The XSL will automatically insert:
       "This part of ISO 10303 specifies the use of the integrated
       resources necessary for the scope and information requirements for "
       The context is the text that completes the sentence.-->
  <inscope from_module="NO" context="representation of systems engineering data.">
    <li>support for assigning program management information to systems engineering data including:
<ul>
    <li>issue management;</li>
    <li>risk management;</li>
    <li>project managementincluding;</li>
    <li>project breakdown;</li>
    <li>project resource information;</li>
    <li>organization structure;</li>
    <li>schedule;</li>
    <li>work structure.</li>
</ul></li>
    <li>support for assigning system modeling information to systems engineering data including:
<ul>
    <li>requirements;</li>
    <li>requirements allocation; </li>
    <li>trade studies with measures of effectiveness; </li>
    <li>interface to analysis; </li>
    <li>function-based behavior; </li>
    <li>state-based behavior;</li>
    <li>system hierarchies for the design system, the realized system and all interfaces.</li>
</ul>
    </li>
     </inscope>

 <!-- Items out of scope
      If from_module is YES then XSL will copy the out scope statement from the module
     -->
 <outscope from_module="NO">
   <li>product life-cycle support;</li>
   <li>product design;</li>
   <li>product manufacturing;</li>
   <li>data to recreate diagrams related to systems modelling.</li>
 </outscope>

 <normrefs>
	<normref.inc normref="ref10303-41.e3"/>
	<normref.inc normref="ref10303-42"/>
	<normref.inc normref="ref10303-43"/>
	<normref.inc normref="ref10303-44.2000"/>
	<normref.inc normref="ref10303-45"/>
	<normref.inc normref="ref10303-49.1998"/>
	<normref.inc normref="ref10303-50.2002"/>
	<normref.inc normref="ref10303-54.-"/>
	<normref.inc normref="ref10303-56.-"/>
	<normref.inc normref="ref10303-58.-"/>
	<normref.inc normref="ref10303-61.-"/>
	<normref.inc normref="ref13584-20.1998"/>
	<normref.inc normref="ref13584-42.1998"/> 
   </normrefs>

<!-- <definition>
  </definition> -->

 <abbreviations>

 <abbreviation id="CM">
     <acronym>CM</acronym>
     <term>configuration management</term>
   </abbreviation>
   
 <abbreviation id="CD">
     <acronym>CD</acronym>
     <term>committee draft</term>
   </abbreviation>
   
 <abbreviation id="DoDAF">
     <acronym>DoDAF</acronym>
     <term>Department of Defense Architecture Framework</term>
   </abbreviation>
   
 <abbreviation id="DIS">
     <acronym>DIS</acronym>
     <term>draft international standard</term>
   </abbreviation>
   
 <abbreviation id="FIFO">
     <acronym>FIFO</acronym>
     <term>first in first out</term>
   </abbreviation>
   
 <abbreviation id="INCOSE">
     <acronym>INCOSE</acronym>
     <term>International Council on Systems Engineering</term>
   </abbreviation>
   
 <abbreviation id="IslashO">
     <acronym>I&#47;O</acronym>
     <term>input/output</term>
   </abbreviation>
   
 <abbreviation id="LIFO">
     <acronym>LIFO</acronym>
     <term>last in first out</term>
   </abbreviation>
   
 <abbreviation id="MBSE">
     <acronym>MSBSE</acronym>
     <term>model based systems engineering</term>
   </abbreviation>
   
 <abbreviation id="MDSD">
     <acronym>MDSD</acronym>
     <term>model driven system design</term>
   </abbreviation>
   
 <abbreviation id="MOE">
     <acronym>MOE</acronym>
     <term>measure of effectiveness</term>
   </abbreviation>
   
 <abbreviation id="MTBF">
     <acronym>MTBF</acronym>
     <term>mean time between failure</term>
   </abbreviation>
   
 <abbreviation id="NASA">
     <acronym>NASA</acronym>
     <term>National Aeronautics and Space Administration</term>
   </abbreviation>
   
   <abbreviation.inc linkend="OMG" ></abbreviation.inc >

 <abbreviation.inc linkend="OWL" ></abbreviation.inc >
 
 <abbreviation id="PAS">
     <acronym>PAS</acronym>
     <term>publically available specification</term>
   </abbreviation>
   
 <abbreviation id="PDM">
     <acronym>PDM</acronym>
     <term>product data management</term>
   </abbreviation>
   
 <abbreviation id="SE">
     <acronym>SE</acronym>
     <term>systems engineering</term>
   </abbreviation>
   
 <abbreviation id="SEDRES">
     <acronym>SEDRES</acronym>
     <term>systems engineering data representation and exchange standardisation</term>
   </abbreviation>
   
 <abbreviation id="SysML">
     <acronym>SysML</acronym>
     <term>System Modeling Language</term>
   </abbreviation>
   
 <abbreviation.inc linkend="UML" ></abbreviation.inc >

 <abbreviation id="VandV">
     <acronym>V&amp;V</acronym>
     <term>verification and validation</term>
   </abbreviation>
   
 <abbreviation.inc linkend="W3C" ></abbreviation.inc >

 <abbreviation id="WBS">
     <acronym>WBS</acronym>
     <term>work breakdown structure</term>
   </abbreviation>
   
 </abbreviations>

 <!-- Clause 4  -->
<inforeqt>
	<fundamentals>
		<data_plan>
<!--			<imgfile file="data_plan_intro1.xml"/>   -->
			<imgfile file="data_plan_detail0.xml"/>
		</data_plan>

		<description>
			<p>This data planning figure, which is also used in the <b>"What ISO 10303-233 contains"</b> section of the   
			<clause_ref linkend="purpose"/>, provides the bridge between the business of 
			systems engineering as enabled by its software support tools and the ISO 10303-233 
			information model.</p>
			
			<p>The methodology used to build the information model in a hierarchal manner while 
			also enabling the networking of capabilities necessary to capture the complexities of systems 
			engineering follows.</p>
			
			<p>Both the business of systems engineering and the ISO 10303-233 information model are complex.
			This leads to the problem of complexity presentation. It is done herein by first 
			partitioning the problem into two parts; Implementation modules and step enabled concepts.</p>
			
			<p><b>4.1.1 Implementation modules</b></p>
			
			<p>Implementation modules service focused business needs.  This part of ISO 10303 arranges these 
			in a hierarchal manner as shown in the data planning model; thus enabling capabilities 
			of greater scope to be build from capabilities of lesser scope.  As capabilities are joined in the 
			hierarchy there is a need to network their respective standalone capabilities together.  Networking  
			results in a new capability greater than the disjoint union. Networking is accomplished 
			via the EXPRESS modelling language capability referred to as "extensible selects". In a very loose 
			sense this enables a publish and subscribe capability between capabilities created (published) 
			and other capabilities with a need to use (subscribe).</p>
			
			<p><b>4.1.2 ISO 10303 enabled concepts</b></p>
			
			<p>This part of ISO 10303 is built in a modular manner from a repository of a large number of foundational and dilated ISO 10303 
			modelling capabilities shared by all ISO 10303 application protocols.  To provide some visibility
			into this complexity problem a set of high level natural language concepts; for example: who, when, 
			where, what, etc. are defined.  These enable one to group all of the modules used by this part of ISO 10303 relative 
			to easily visualized and reasonably disjoint concepts.  
			The full set of concepts defined and associated groupings are presented graphically in 
			<module_ref linkend="ap233_systems_engineering:f_usage_guide">ISO 10303-433 Annex F</module_ref>.
			The ability to now view this part's complexity relative to a few implementation modules 
			and ISO 10303 capability enabled concepts is created.  It is important to note 
			that the groupings and associated membership boundaries are fuzzy.  This is intentional.  The 
			groupings are used simply as a complexity visualization aid.</p>
						
			<p><b>4.1.3 Complexity presentation</b></p>
			
			<p>The following subclauses provide a top-level graphical view of the simple statement that 
			<b>Extensible selects network modules together to realize implementation modules</b>.  In each 
			graphical display extensible selects and modules are grouped relative to the named concepts. Associated 
			text provides hyperlinks to the clauses within the modules where relevant detail is found.		
			</p>
			
			<p><b>4.1.4 Matrix analysis view of the complexity problem</b></p>
			
			<p>Concept groupings can be graphically presented as 
			"Concept maps"; for an informative overview of these, see <a href="http://en.wikipedia.org/wiki/Concept_map"/> 
			Within this application protocol they are used to show 
			both module to module connectivity and where extensible select types are defined.  All concept maps are 
			collected together in 
			<module_ref linkend="ap233_systems_engineering:f_usage_guide">ISO 10303-433 Annex F</module_ref>.</p>
			
			<p>Readers with a mathematics background find that cluster analysis via matrix row/column operations 
			provides good visualization insight and uncovers hidden logic based patterns. It can also expose 
			obvious errors.  <clause_ref linkend="inforeqt:figure:imcm">Figure 5</clause_ref> provides a module 
			"uses" vs. module "used by" matrix at the implementation module plus concept group level of granularity.</p>
			
			<p>Modules within a row index module group use modules within column module groups marked by the letter <b>X</b>. 
			Some readers may find this to be a useful aid into data model visualization.
			</p>
			
			<note>In matrix analysis the null matrix implies no relationship between associated 
			row/column elements, upper triangular implies a hierarchal relationship between the associated set 
			of row - column elements and a populated non-symmetric matrix implies a network of relationships. 
			A bit more insight can be derived from linear analysis.  The eigenvalues of an upper triangular matrix 
			are guaranteed to be real and well-conditioned while eigenvalues for a non-symmetric are complex 
			and may be ill-conditioned.  Furthermore, non-symmetric matrices can be singular implying a non-unique 
			inverse relationship.  It is not hard to be convinced that the complexity of dealing with non-symmetric 
			numeric matrices will carry over to analogous information model realization difficulties when networked 
			relationships exist.</note>
			
			<figure id="imcm" number="5">
			<title>Implementation module concept group/map uses-used by matrix</title>
			<img src="im_cm_matrix.png"/>
			</figure>
			
			<p>This matrix shows that approximately half of the module groups are hierarchical while the rest are
			extensively networked.  The following row/column notation is used for the module groups that have
			hierarchical connectivity</p>	
			<ul>
			<li>AP233 - <module_ref linkend="ap233_systems_engineering:introduction">Ap233 systems engineering</module_ref>.</li>
			<li>IM-Pgm - <module_ref linkend="program_management:introduction"> Program management</module_ref>;</li>
			<li>IM-Rsk - <module_ref linkend="risk_management:introduction"> Risk management</module_ref>;</li>
			<li>IM-Iss - <module_ref linkend="issue_management:introduction"> Issue management</module_ref>;</li>
			<li>IM-SysM - <module_ref linkend="system_modelling:introduction">System modelling</module_ref>;</li>
			<li>CM-Issue-Risk - issue-risk-group concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>IM-Des - <module_ref linkend="decision_support:introduction">Decision support</module_ref>;</li>
			<li>IM-Req - <module_ref linkend="requirement_management:introduction">Requirement management</module_ref>;</li>
			<li>IM-SysS - <module_ref linkend="system_structure:introduction">System structure</module_ref>;</li>
			<li>CM-System - system concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>IM-SysB - <module_ref linkend="system_behaviour:introduction">System behaviour</module_ref>;</li>
			<li>CM-Behaviour - behaviour concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>IM-SBB - <module_ref linkend="state_based_behaviour:introduction">State based behaviour</module_ref>;</li>
			<li>IM-FBB - <module_ref linkend="function_based_behaviour:introduction">Function based behaviour</module_ref>;</li>
			</ul>
			<p>The following row/column notation is used for the module groups that have
			networked connectivity</p>
			<ul>
			<li>CM-Representation - representation concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>CM-Authorization - authorization concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>CM-MRI - management resource information concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>CM-Project - project concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>CM-Schedule - schedule concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>CM-Activity - activity concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>CM-Resource - resource concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>CM-When - when concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>CM-Where - where concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>CM-Why - why concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>CM-Who - who concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>CM-What - what concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>CM-How - how concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>;</li>
			<li>CM-What-geo - what geometry concepts, ISO 10303-433 Clause <module_ref linkend="ap233_systems_engineering:f_usage_guide">F</module_ref>.</li>
			</ul>	
		</description>
</fundamentals>
		
<reqtover module="ap233_systems_engineering">
	<description>
		<p><module_ref linkend="ap233_systems_engineering:introduction">ISO 10303-433</module_ref>
		defines the full information model and associated scope for this part of ISO 10303.  
		It provides a single root for all of the modules normatively referenced by this part of ISO 10303. </p>
		
		<p>The top-level networking view of this part of ISO 10303's modules and extensible selects used to enable the systems engineering 
		implementation module is shown below in  <clause_ref linkend="inforeqt:figure:syse">Figure 6</clause_ref>.  

		All USE FROM connectivity and extensible select list detail is contained in Clause 4 of 
		<module_ref linkend="ap233_systems_engineering:introduction">ISO 10303-433</module_ref> while 
		a graphical, concept map, display of associated detail along with additional user guide information is 
		provided in Annex F of 
		<module_ref linkend="ap233_systems_engineering:introduction">ISO 10303-433</module_ref>. </p>
		
		<p>This implementation module uses the application modules identified and then provides the 
		facility via extensible selects to assign both capability enabling and product 
		data management information to systems engineering data.</p>
		
		<figure id="syse" number="6">
		<title>ISO 10303-233 systems engineering modules used and extensible SELECTs</title>
		<img src="im_syse.png"/>
		</figure>
		
	</description>
</reqtover>

<reqtover module="decision_support">
	<description>
		<p><module_ref linkend="decision_support:introduction">ISO 10303-1486</module_ref>
		defines the information model and associated scope for decision support.</p>
		
		<p>The top-level networking view of this part of ISO 10303's modules and extensible selects used to enable the decision support 
		implementation module is shown in <clause_ref linkend="inforeqt:figure:ds">Figure 7</clause_ref>.  
		
		All USE FROM connectivity and extensible select list detail is contained in Clause 4 of 
		<module_ref linkend="decision_support:introduction">ISO 10303-1486</module_ref> while 
		a graphical, concept map, display of associated detail along with additional user guide information is 
		provided in Annex F of 
		<module_ref linkend="decision_support:introduction">ISO 10303-1486</module_ref>. </p>

		<p>This implementation module uses the application modules identified and then provides the 
		facility via extensible selects to assign both capability enabling and product 
		data management information to decision support data.</p>
		
		<figure id="ds" number="7">
		<title>Decision support modules used and extensible SELECTs</title>
		<img src="im_ds.png"/>
		</figure>
		
		</description>
</reqtover>

<reqtover module="function_based_behaviour">
	<description>
		<p><module_ref linkend="function_based_behaviour:introduction">ISO 10303-1453</module_ref>
		defines the information model and associated scope for function based behaviour. </p>
		
		<p>The top-level networking view of this part of ISO 10303's modules and extensible selects used to enable the function 
		based behaviour implementation module is shown in <clause_ref linkend="inforeqt:figure:fbb">Figure 8</clause_ref>. 
		
		All USE FROM connectivity and extensible select list detail is contained in Clause 4 of 
		<module_ref linkend="function_based_behaviour:introduction">ISO 10303-1453</module_ref> while 
		additional user guide information is provided in Annex F of 
		<module_ref linkend="function_based_behaviour:introduction">ISO 10303-1453</module_ref>.</p>
		
		<p>This implementation module uses the application modules identified and then provides the 
		facility via extensible selects to assign both capability enabling and product 
		data management information to function based behaviour data.</p>
		
		<figure id="fbb" number="8">
		<title>Modules and extensible SELECTs used to realize function based behaviour </title>
		<img src="im_fbb.png"/>
		</figure>
      </description>
</reqtover>

<reqtover module="issue_management">
	<description>
		<p><module_ref linkend="issue_management:introduction"> ISO 10303-1489</module_ref>
		defines the information model and associated scope for issue management. </p>
		
		<p>
		The top-level networking view of this part of ISO 10303's modules and extensible selects used to enable 
		the issue management implementation module is shown in <clause_ref linkend="inforeqt:figure:im">Figure 9</clause_ref>. 
			
		All USE FROM connectivity and extensible select list detail is contained in Clause 4 of 
		<module_ref linkend="issue_management:introduction"> ISO 10303-1489</module_ref> while 
		a graphical, concept map, display of associated detail along with additional user guide information is 
		provided in Annex F of 
		<module_ref linkend="issue_management:introduction"> ISO 10303-1489</module_ref>.</p>
		
		<p>This implementation module uses the application modules identified and then provides the 
		facility via extensible selects to assign both capability enabling and product 
		data management information to issue management data.</p>
		
		<figure id="im" number="9">
		<title>Issue management modules used and extensible SELECTs</title>
		<img src="im_im.png"/>
		</figure>

	</description>
</reqtover>


<reqtover module="program_management">
	<description>
		<p>
		<module_ref linkend="program_management:introduction"> ISO 10303-1466</module_ref>
		defines the information model and associated scope for program management. </p>
		    
		<p>
		The top-level networking view of this part of ISO 10303's modules and extensible selects used to enable 
		the program management implementation module is shown in 
		<clause_ref linkend="inforeqt:figure:prgm">Figure 10</clause_ref>. 
							
		All USE FROM connectivity and extensible select list detail is contained in Clause 4 of 
		<module_ref linkend="program_management:introduction"> ISO 10303-1466</module_ref> while 
		a graphical, concept map, display of associated detail along with additional user guide information is 
		provided in Annex F of 
		<module_ref linkend="program_management:introduction"> ISO 10303-1466</module_ref>.</p>
		
		<p>This implementation module uses the application modules identified and then provides the 
		facility via extensible selects to assign both capability enabling and product 
		data management information to program management data.</p>
		
		<figure id="prgm" number="10">
		<title>Program management modules used and extensible SELECTs</title>
		<img src="im_prgm.png"/>
		</figure>

	</description>
</reqtover>

<reqtover module="project_management">
	<description>
		<p><module_ref linkend="project_management:introduction">ISO 10303-1433</module_ref>
		defines the information model and associated scope for project management. </p>
		
		<p>The top-level networking view of this part of ISO 10303's modules and extensible selects used to enable 
		the project management implementation module is shown in 
		<clause_ref linkend="inforeqt:figure:prjm">Figure 11</clause_ref>. 
			
		All USE FROM connectivity and extensible select list detail is contained in Clause 4 of 
		<module_ref linkend="project_management:introduction">ISO 10303-1433</module_ref> while 
		a graphical, concept map, display of associated detail along with additional user guide information is 
		provided in Annex F of 
		<module_ref linkend="project_management:introduction">ISO 10303-1433</module_ref>.</p>
				
		<p>This implementation module uses the application modules identified and then provides the 
		facility via extensible selects to assign both capability enabling and product 
		data management information to project management data.</p>
		
		<figure id="prjm" number="11">
		<title>Project management modules used and extensible SELECTs</title>
		<img src="im_prjm.png"/>
		</figure>
			
	</description>
</reqtover>		

<reqtover module="requirement_management">
	<description>
		<p><module_ref linkend="requirement_management:introduction">ISO 10303-1348</module_ref>
		defines the information model and associated scope for requirement management. </p>
		
		<p>The top-level networking view of this part of ISO 10303's modules and extensible selects used to enable 
		the requirement management implementation module is shown in 
		<clause_ref linkend="inforeqt:figure:rqtm">Figure 12</clause_ref>. 
		
		All USE FROM connectivity and extensible select list detail is contained in Clause 4 of 
		<module_ref linkend="requirement_management:introduction">ISO 10303-1348</module_ref> while 
		a graphical, concept map, display of associated detail along with additional user guide information is 
		provided in Annex F of 
		<module_ref linkend="requirement_management:introduction">ISO 10303-1348</module_ref>.</p>
		
		<p>This implementation module uses the application modules identified and then provides the 
		facility via extensible selects to assign both capability enabling and product 
		data management information to requirement management data.</p>
		
		<figure id="rqtm" number="12">
		<title>Requirement management modules used and extensible SELECTs</title>
		<img src="im_rqtm.png"/>
		</figure>
			
	</description>
</reqtover>

<reqtover module="risk_management">
	<description>
		<p><module_ref linkend="risk_management:introduction">ISO 10303-1467</module_ref>
		defines the information model and associated scope for risk management. </p>

		<p>The top-level networking view of this part of ISO 10303's modules and extensible selects used to enable 
		the risk management implementation module is shown in 
		<clause_ref linkend="inforeqt:figure:rm">Figure 13</clause_ref>. 
		
		All USE FROM connectivity and extensible select list detail is contained in Clause 4 of 
		<module_ref linkend="risk_management:introduction">ISO 10303-1467</module_ref> while 
		a graphical, concept map, display of associated detail along with additional user guide information is 
		provided in Annex F of 
		<module_ref linkend="risk_management:introduction">ISO 10303-1467</module_ref>.</p>
		
		<p>This implementation module uses the application modules identified and then provides the 
		facility via extensible selects to assign both capability enabling and product 
		data management information to risk management data.</p>
		
		<figure id="rm" number="13">
		<title>Risk management modules used and extensible SELECTs</title>
		<img src="im_rm.png"/>
		</figure>
			
	</description>
</reqtover>
		
<reqtover module="state_based_behaviour">
	<description>
		<p><module_ref linkend="state_based_behaviour:introduction">ISO 10303-1371</module_ref>
		defines the information model and associated scope for state based behaviour. </p>
		
		<p>The top-level networking view of this part of ISO 10303's modules and extensible selects used to enable the state 
		based behaviour implementation module is shown in 
		<clause_ref linkend="inforeqt:figure:sbb">Figure 14</clause_ref>.  
		
		All USE FROM connectivity and extensible select list detail is contained in Clause 4 of 
		<module_ref linkend="state_based_behaviour:introduction">ISO 10303-1371</module_ref> while 
		a graphical, concept map, display of associated detail along with additional user guide information is 
		provided in Annex F of 
		<module_ref linkend="state_based_behaviour:introduction">ISO 10303-1371</module_ref>.</p>
		
		<p>This implementation module uses the application modules identified and then provides the 
		facility via extensible selects to assign both capability enabling and product 
		data management information to state based behaviour data.</p>
		
		<figure id="sbb" number="14">
		<title>State based behaviour modules used and extensible SELECTs</title>
		<img src="im_sbb.png"/>
		</figure>
      </description>
</reqtover>
		
<reqtover module="system_behaviour">
	<description>
		<p><module_ref linkend="system_behaviour:introduction">ISO 10303-1448</module_ref>
		defines the information model and associated scope for system behaviour. </p>
		
		<p>
		The top-level view ofthis part of ISO 10303's implementation modules used to enable the system behaviour implementation module is shown in 
		<clause_ref linkend="inforeqt:figure:sysb">Figure 15</clause_ref>.  
		
		All USE FROM connectivity and extensible select list detail is contained in Clause 4 of 
		<module_ref linkend="system_behaviour:introduction">ISO 10303-1448</module_ref> while 
		a graphical, concept map, display of associated detail along with additional user guide information is 
		provided in Annex F of 
		<module_ref linkend="system_behaviour:introduction">ISO 10303-1448</module_ref>.</p>
		
		<figure id="sysb" number="15">
		<title>System behaviour modules used and extensible SELECTs</title>
		<img src="im_sysb.png"/>
		</figure>
		
		<p>This implementation module joins two system behaviour modelling capabilities; namely  
		<module_ref linkend="function_based_behaviour:introduction">function_based_behaviour </module_ref>and 
		<module_ref linkend="state_based_behaviour:introduction">state_based_behaviour</module_ref>.  There is 
		no information modelling need to cross couple information between these capabilities and hence 
		there can be no associated set of extensible select lists.</p>
	</description>
</reqtover>

<reqtover module="system_modelling">
	<description>
		<p><module_ref linkend="system_modelling:introduction">ISO 10303-1477</module_ref>
		defines the information model and associated scope for system modelling. </p>
		
		<p>The top-level networking view of this part of ISO 10303's modules and extensible selects used to enable 
		the system modelling implementation module is shown in 
		<clause_ref linkend="inforeqt:figure:sysm">Figure 16</clause_ref>. 
		
		All USE FROM connectivity and extensible select list detail is contained in Clause 4 of 
		<module_ref linkend="system_modelling:introduction">ISO 10303-1477</module_ref> while 
		a graphical, concept map, display of associated detail along with additional user guide information is 
		provided in Annex F of 
		<module_ref linkend="system_modelling:introduction">ISO 10303-1477</module_ref>.</p>
		
		<p>This implementation module uses the application modules identified and then provides the 
		facility via extensible selects to assign both capability enabling and product 
		data management information to system modelling data.</p>
		
		<figure id="sysm" number="16">
		<title>System modelling modules used and extensible SELECTs</title>
		<img src="im_sysm.png"/>
		</figure>
   
	</description>
</reqtover>

<reqtover module="system_structure">
	<description>
		<p><module_ref linkend="system_structure:introduction">ISO 10303-1450</module_ref>
		defines the information model and associated scope for system structure. </p>
		
		<p>The top-level networking view of this part of ISO 10303's modules and extensible selects used to enable 
		the system structure implementation module is shown in 
		<clause_ref linkend="inforeqt:figure:syss">Figure 17</clause_ref>. 
		
		All USE FROM connectivity and extensible select list detail is contained in Clause 4 of 
		<module_ref linkend="system_structure:introduction">ISO 10303-1450</module_ref> while 
		a graphical, concept map, display of associated detail along with additional user guide information is 
		provided in Annex F of 
		<module_ref linkend="system_structure:introduction">ISO 10303-1450</module_ref>.</p>
		
		<p>This implementation module uses the application modules identified and then provides the 
		facility via extensible selects to assign both capability enabling and product 
		data management information to system structure data.</p>
		
		<figure id="syss" number="17">
		<title>System structure modules used and extensible SELECTs</title>
		<img src="im_syss.png"/>
		</figure>
		
	</description>
</reqtover>
</inforeqt>

<!--  Terminology map
  <terminology_map>
   mapping of a business to term to an AP term 
    <term_map>
      <description>
        @@@@ description of the mapping @@@
      </description>
      <business_term term_id="@@@@"/>
      <ap_term term_id="@@@@" application_protocol="@@@@"/>
      <module_term term_id="@@@@" module="@@@@"/>
    </term_map>
  </terminology_map> -->
  

 <!-- Activity Model -->
	<aam>
		<idef0>
			<imgfile file="aamidef01.xml"/>
			<imgfile file="aamidef02.xml"/>
			<imgfile file="aamidef03.xml"/>
			<imgfile file="aamidef04.xml"/>
			<imgfile file="aamidef05.xml"/>
			<imgfile file="aamidef06.xml"/>
			<imgfile file="aamidef07.xml"/>
			<imgfile file="aamidef08.xml"/>
			<imgfile file="aamidef09.xml"/>
			<imgfile file="aamidef10.xml"/>
			<imgfile file="aamidef11.xml"/>
		</idef0>
	</aam>

 <!--  Annex C -->
<imp_meths>
  <imp_meth general="y">
    <description>
      <p>
        For various reasons, some entities may not be completely exported into an exchange structure. 
        There may be mandatory information in the AIM that has no correspondence in the ARM. 
        Sometimes an application may not maintain all the information that is anticipated for the data exchange. 
        Other times, the information may be maintained by a sending system but not included in the data exchange. 
        Nevertheless, the preprocessor must provide values for all mandatory attributes in an exchange file. 
      </p>
      <p>	
        When no data is provided by a sending system for a string value, the preprocessor shall use '/NULL' or the empty string ''. 
      </p>	
      To further indicate the reason why no data is provided, the following convention shall be used:
      <ul>
	<li>empty string '' indicates user data managed by the sending system but not provided for data exchange;</li>
	<li>string '/NULL' indicates user data in a mandatory attribute that is not managed by the sending system or currently not known or a mandatory AIM information that has no correspondence in the ARM;</li>
	<li>$ is used in the physical file, if an optional attribute is not instantiated.</li>
      </ul>
    </description>
  </imp_meth>

<imp_meth general="n" part="21">
  <description>
      <p>
	If the implementation method is ISO 10303-21, the file format shall be
	encoded according to the syntax and EXPRESS language mapping defined in
	ISO 10303-21 and to the MIM schema referenced in <clause_ref linkend="express_mim_lf"/> of this part of
	ISO 10303.
      </p>
      <p>
	The FILE_SCHEMA element of the header shall specify the name of the
	EXPRESS schema used and include its object information identifier (see
	<clause_ref linkend="object_registration"/>).
      </p>
      <example>
	The instance below identifies the ap233_systems_engineering_mim_lf 
	extended schema:
      </example>
<!-- ABF correct this string. Numbers correct for AP203 -->
      <screen>
	FILE_SCHEMA (('AP233_SYSTEMS_ENGINEERING_MIM_LF { 1 0 10303 233 2 1 4} '))
      </screen>
    </description>
  </imp_meth>
  
  <imp_meth part="28">
    <description>
      <p>
	If the implementation method is ISO 10303-28, the file format shall be
	encoded according to the syntax and an EXPRESS language mapping defined
	in ISO 10303-28 and to the MIM schema referenced in 
	<clause_ref linkend="express_mim_lf"/>
	of this part of ISO 10303.
      </p>
  </description>
</imp_meth>
</imp_meths>

 <!--  Annex J <usage_guide>

 </usage_guide>  -->
 
 
<!--  Annex H Technical discussion  -->
 
 <tech_disc>
 

<annex_clause title="Technical foundation of ISO 10303-233">
  
<p>This part of ISO 10303 had its origins with Esprit Project 20496 - SEDRES Systems Engineering 
Data Representation and Exchange Standardisation.  The project was completed with the publication of 
ISO/PAS 20542.</p>

<p>Shortly thereafter the need for extension was recognized. The model itself needed to be made consistent 
with the modular structure evolving within the ISO 10303 community and its scope needed to be extended to 
support the needs and associated process standards of the systems engineering community; as represented by the 
ISO, Object Management Group (OMG) and International Council on Systems Engineering (INCOSE). See 
<a href="http://www.incose.org/practice/standardsupdate.aspx"/></p>

<p>The need to harmonize associated requirements, viewpoints and semantics across this expanded group of 
stakeholders lead to the creation of a conceptual base, the "Concept model".  This model had the net effect 
of both documenting consensus building agreements and providing a framework by which semantic consistency 
could be checked as the conceptual base evolved. This "Concept model" and its companion "Semantic dictionary" 
are provided in the following sections of this Annex. 
</p>

<p>These two interwoven elements of this part of ISO 10303's conceptual base have been extensively reviewed by the 
ISO development team, along with members of INCOSE and OMG.  The work was performed via the leadership 
efforts of INCOSE's Model Driven System Design (MDSD)working group (<a href="http://www.incose.org/practice/techactivities/wg/mdsd/"/>).   
This group has, in its efforts to extend best practices of systems engineering into software engineering also succeed 
in initiating the SysML project within the OMG and assisting with that activity. The home page for the SysML 
partners is <a href="http://www.sysml.org"/>; also see <a href="http://en.wikipedia.org/wiki/SysML"/> for an informative overview.
INCOSE's MDSD working group has a password protected home page open to all INCOSE members at 
<a href="http://connect.incose.org/tb/MnT/mdsd/default.aspx"/>. This website provides access to ISO 10303-233 overview and 
tutorial work presented at past INCOSE meetings.
</p>

<p>Additionally, significant inputs to ISO 10303-233's behaviour modelling capabilities and SysML consistency needs 
came in via work done to insure harmonization with the U.S Department of Defense Architecture Framework (DoDAF), 
see <a href="http://en.wikipedia.org/wiki/Department_of_Defense_Architecture_Framework"/>.  Much of the documentation 
associated with this work, based upon earlier versions of this part of ISO 10303, can be found at 
<a href="http://homepages.nildram.co.uk/~esukpc20/exff2005_05/ap233/index.html"/>.  Readers with a UML background may 
find the presentation style of this reference useful.</p>

<p>As this part of ISO 10303 was evolving to support systems engineering within the ISO 10303 community a parallel 
<b>ISO 10303-239 Product life cycle support</b> effort began.  As these efforts proceeded 
in an organizationally independent manner, respective stakeholder and developer groups both mixed together and worked 
hard to ensure harmonization.  Both capabilities share a common set of ISO 10303 foundation modules.  In fact, about 70% 
of the modules used by ISO 10303-233 are also used by ISO 10303-239. This part of ISO 10303 has also been influenced by many other groups within the 
ISO 10303 community, an overview with hyperlinks to these groups with useful ISO 10303 references can be found at 
<a href="http://en.wikipedia.org/wiki/ISO_10303"/>.</p>

<p>During the early years of the ISO 10303-239 effort it was recognized they an ability to accommodate a wide range of 
semantic standards was required.  This lead to the use of reference data and eventually this was 
supported by the ontology standards evolving within the World Wide Web Consortium (W3C) community; namely 
Web Ontology Language (OWL).  See <a href="http://en.wikipedia.org/wiki/Web_Ontology_Language"/> for an informative 
overview.  Examples of reference data and its use within the OASIS PLCS group can be found at 
<a href="http://www.plcs-resources.org/plcs/dexlib/dex_index.htm"/>. Additional 
documentation can be found in the PLCS guide for reference data developers. This document can be downloaded directly from 
<a href="http://www.oasis-open.org/committees/download.php/11732"/>.
It would be safe to assume that the ISO 10303-233 development team will remain committed to full harmonization with ISO 10303-239 as our 
respective uses of reference data, taxonomies and ontologies evolve and mature.
</p>

</annex_clause>
 
<annex_clause title="Concept model for systems engineering">
<p>This annex provides the concept model for systems engineering as enabled by this part of ISO 10303.  
Together with its associated semantic dictionary, also provided, the model defines the breath and scope 
of capability enabled. It provides both the semantic reference 
base and the model based requirements used to drive development of this part of ISO 10303.</p>
 
<p>Definitions used stem from numerous authoritative sources; such as: ISO 15288, INCOSE SE Handbook, 
NASA SE Handbook, etc. However; these could not be used verbatim since, when used together without change, 
they became circular and inconsistent.  Circularity  and inconsistency problems were removed by the 
consensus agreement of systems engineering experts from ISO, INCOSE and the OMG.
</p>

<p>The definitions provided explain meanings in natural language. The model captures the 
multitude of relationships in a graphic form so that the relationships can be scanned. 
Figure <clause_ref linkend="tech_disc:figure:ug13"> H.1</clause_ref> provides a guide for interpreting the 
models presented in this annex.    
</p>
		<figure id="ug13" number="H.1"> 
		<title>Key to diagrams</title>
		<img src="ug_figure13.png"/>	
		</figure>


<annex_clause title="Top-level model">
<p>The model defined in figure <clause_ref linkend="tech_disc:figure:ug1"> H.2</clause_ref>
is patterned after UML 1, with indications of semantics that are missing from the language.
The model needs to be read with reference to the definitions in the semantic dictionary. It 
starts with Element that is anything on which repeated measurements can be made for the 
engineering purposes of interest. This is  a necessary definition because otherwise it is not 
possible to verify that a design or implementation meets its requirements. Element is built from 
Element in a hierarchy. The aggregation symbol has a small "C" in it to show that what is meant 
is a decomposition into all of the parts. The special notation is used because this concept is
missing from UML 1.</p>
		
		<figure id="ug1" number="H.2"> 
		<title>Top-level concept model</title>
		<img src="ug_figure1.png"/>	
		</figure>
 
<p>The Domain of Interest constitutes all the things of interest to the application.</p>

<p>System is a kind of Element and thus it is built of systems in a hierarchy and it must have 
measurable characteristics that are repeatable. What makes the System unique is that it has well 
defined relationships with all of the things with which it interacts. The collection of those 
things is its Environment. To have a System it is necessary to characterize what is in the 
System and what is in the Environment along with the static and dynamic interactions between 
System and Environment. The Environment contains Elements and Systems.</p>
<p>
Different persons in engineering, manufacturing, maintenance, and management need different 
sets of information about the System. Manufacturing personnel need to know about all the 
materials, nuts and rivets that go into the System and how they assemble together. Maintenance 
personnel need to have diagnostic information and deal with replaceable units of the System. 
There are a very large number of such useful collections of information, each with its own 
context.  System View provides for the collection of such sets of information, each set in a 
particular context.</p>
<p>
An important subset of things in the Environment is the Stakeholders. These are all the persons 
and organizations with a need, preference, or interest in the System. Stakeholders may include 
manufacturer, owner, user of owner's services, user of the system, operator, maintainer, 
government regulator. Stakeholder Need represents their need, preference, interest, etc. 
in the System. If the System is designed and implemented well, then it satisfies these needs 
in a manner that is superior to competitive systems. It sells in the marketplace.</p>
<p>
A Property is a named measurable or observable attribute, quality or  characteristic of a 
systems engineering thing. If you can measure it or observe it, it is called a Property. Properties have units, 
values, variances and probability distributions associated with them.  They may be looked up 
in handbooks of properties of standard materials, they may be calculated from the structure 
of the thing, or they may be measured directly. In general they are tensors and may be a 
function of time. Because of the multiple ways of arriving at a property and its values, 
it is important to have a Reference Document that establishes the source of the information.</p>
<p>
A Requirement is a statement of a Property that a System shall exhibit.  The relationship to 
System is handled by allocating the Requirement to the System that shall exhibit that Property. 
This formality allows the engineer to consider alternative allocations to different systems 
that may fulfill the Requirement. It is fundamental to trade-off among solutions. Requirements 
originate from Stakeholder Needs. As the design proceeds in levels of detail, requirements are 
derived from other requirements. These "derived from" relationships are preserved as traceability 
relationships. In a real world problem requirements will be changed from time to time. It is 
critical to trace from a requirement that has changed to other requirements impacted by that change.</p>
<p>
It is useful to distinguish among three kinds of properties:</p>
<ul>
<li>
<b>Structure</b>: the description of how a System decomposes into its parts and how the 
parts assemble to make the whole;</li>
<li>
<b>Behavior</b>: what the System does in response to the things in its Environment. This 
includes both desired responses that satisfy needs, and prevention of undesired responses 
(failures) that can cause injury, destruction, or loss;</li>
<li>
<b>Physical Property</b>: includes all the measurable or observable attributes, qualities or 
characteristic of an Element that cannot be observed in interaction with the Environment. 
Additional instruments or tools are required to make the measurement or observation. Mass 
may require a scale for weighing, index of refraction may require use of an optical instrument.</li></ul>
<p>
These three kinds of properties will be described separately herein and then interrelated. This 
principle supports the consideration of alternatives.
</p>

<annex_clause title="Semantic dictionary for terms used in figure H.2">

	<p><b>element </b>(1)</p> <p>that which is discernable by the reproducible measurement of its characteristics</p>
	<note>The semantic term element includes matter, energy and information.  The term 
	product from ISO 10303-Part 1 ISO 10303 definitions defines product as: a thing or 
	substance produced by a natural or artificial process. This part of ISO 10303 
	needs to define the informational attributes associated with the entity named 
	"product" as defined within ISO 10303-1017 - Product Identification. This entity 
	has attributes that enable one to capture: id, name and description.  ISO 10303-1017 
	provides the definition: A Product is the identification of a product or of a type 
	of product. It is a collector of data common to all revisions of the product. Element 
	appears to be a legitimate subclass of product because this part requires reproducible 
	measurement of element.</note>
	<example>Anything from microscopic particles to galaxy clusters is an element.  
	Anything with a finite existence from galaxies with billion-year lives to trans-uranic 
	elements with lifetimes less than nano-seconds. Counter-example: Things like ghosts, 
	devils, the Loch Ness monster, the city of Atlantis are not discernable by reproducible 
	measurement and are excluded. Research and development things that do not yet have 
	reproducible measurements and process control are excluded. For example, silicon for 
	electronic devices would be excluded in 1900. </example>
	
	<p><b>category </b>(2) </p><p>that which provides the grouping of elements into a set based on defined 
	properties that serve as selection criteria for which elements of all those
	in the universe belong in that set</p>
	<note>This is one of the forms of generalization/specialization. This is 
	<b>not inheritance</b> as used in object-oriented software languages. Physical 
	elements of matter and energy do not inherit their properties. Rather they posses 
	the properties of themselves and can be identified by measurement of those properties.</note>
	
	<example> Explanation: It is categorization that enables us to define alternatives 
	and create taxonomies for libraries. </example>
	
	<ul>
	<li>Inclusive/Complete Category: Any Element of the super category may 
	reside in any number of the sub-categories and all members of the super-category 
	are members of at least one of the sub-categories.
	<example>the super category is all apples raised on a particular farm. The subcategories 
	are used for sorting and include: good apples, bruised apples, marked apples, rotten 
	apples, and wormy apples.</example></li></ul>
	
	<ul>
	<li>Inclusive/Incomplete Category: Any Element of the super category may reside in any 
	number of the sub-categories and only some members of the super-category are members 
	of the sub-categories.
	<example>the super category is all fruit raised on a particular farm. The subcategories 
	are used for sorting and include: good apples, bruised apples, marked apples, rotten 
	apples, and wormy apples.</example></li></ul>

	<ul>
	<li>Exclusive/Complete Category:  Any Element of the super-category may reside in one 
	and only one of the sub-categories and all members of the super-category are members 
	of at least one of the sub-categories.
	<example>An automobile has in its decomposition tree an engine. For this automobile 
	any of three engines: 140 HP, 180 HP, and 220 HP. The superclass of engine is exhausted 
	by the subclasses and the subclasses are independent.</example></li></ul>
 
	<ul>
	<li>Exclusive/ Incomplete Category:  Any Element of the super-category may reside in 
	one and only one of the sub-categories and only some members of the super-category are
	members of the sub-categories.
	<example>All of the automobile engines under current manufacture by General Motors and its 
	subsidiaries are considered as candidates for three engines that will be used in a new car.</example></li></ul>
	
	<p><b>domain of interest </b>(3)</p><p>  all elements of interest to the problem at hand</p>
	<note>These include the system, its environment, external systems of interest in the environment, 
	stakeholders, enabling things, things that may cause failure, and all other things of interests.
	</note>
	
	<p><b>system </b>(4)</p><p>  an element with a well-defined boundary with respect to all other elements, outside of it and 
	in the domain of interest, with which it interacts</p>
	<note> 1. A system is composed of interacting systems. The emergent behaviors and properties of a 
	system are the result of the properties and behaviors of the sub-systems and their interactions. 
	These interactions may be highly nonlinear.
	</note>
	<example>A car has a well-defined boundary with respect to its environment, and the 
	relationships are both static and dynamic. Similarly the engine has the same kinds of 
	relationships and so does the fuel injector of the engine. 
	</example>
	
	<p><b>system view </b>(5)</p><p>  a collection of elements and related information about the system that are useful and 
	defined for a particular purpose in a particular context</p>
	<note>Engineers involved in specification, design, manufacturing and maintenance need a 
	particular collection of information to do their work. An engineer working on the 
	cooling system of an engine needs information about a particular set of parts, behaviors 
	and properties that are particular to that engineering problem. The set of possibly 
	useful system views is very large.
	</note>
	
	<p><b>environment </b>(6)</p><p>  all elements external to the system that interact with it</p>
	<note>1. It is often possible to limit the parts of the environment needed for development 
	purposes to those external systems that are neighbors to the system. </note>
	<note>2.  The environment includes not only the external systems that couple with it for 
	useful purposes, but it also includes all external systems that may interact in a manner 
	that causes failure.    </note>
	<example>Elements in the environment need not have well defined boundaries as do systems.  
	A laptop computer can connect to a power grid. But for the design of the laptop it is 
	not important to consider the power grid as a system. It is simpler to consider it as 
	an element with an interface that the laptop connects to when needed.
	</example>
	
	<p><b>stakeholder </b>(7)</p><p>  people, organizations and institutions that are a part of the system environment 
	because the system provides some benefit to them and they have an interest in the system</p>
	<note>Stakeholders include; for example, the producers, owners, operators, users, 
	and maintainers of the system.
	</note>
	
	<p><b>stakeholder need </b>(8)</p><p>  the benefits that the stakeholders wish to be satisfied by or delivered by 
	the system when it is implemented and functioning </p> 
	<note>At the top-level of development these needs drive the requirements for the 
	system and the optimization criteria for its development.
	</note>

	<p><b>property </b>(9)</p><p>  any named measurable or observable attribute, quality or characteristic of an 
	element </p>
	<note>Property is usefully decomposed into several categories â the measurable characteristics 
	in normal use, the measurable characteristics that require additional instrumentation for 
	measurement, and the observable characteristics. It is a systems engineering best practice 
	to separate behavior from structure (function from form) and to allocate behavior to structure 
	based on trade studies among alternatives.
	</note>
	<example>The acceleration of a car is in the first category. behavior.  This characteristic 
	can be observed in the normal operation of the car. The weight of the car is not directly 
	observable in the use of the car.  It requires that the car be placed on a scale to record 
	the measurable characteristic. The fact that a car has four wheels, a steering wheel on 
	either the left or the right side, and a sunroof are observable characteristics.
	</example>
	
	<p><b>system requirement </b>(10)</p><p> a statement of properties that a system shall exhibit or shall 
	not exhibit when completed </p>
	<note>Requirements are derived from requirements in a many-to-many relationship.
	</note>
	
	<p><b>reference document </b>(11)</p><p> a statement of the document source of information concerning 
	an element or a property of 
	an element, including the tensor characteristics, units, values, value probability 
	distribution, or symmetry </p>
	
	<p><b>behavior </b>(12)</p><p>  what an element is to do or is not to do in response to excitations it 
	receives from the 
	external elements in its environment </p>
	<note>This is the subclass of property that includes measurable characteristics in normal use. 
	It encompasses the response of the system to excitation by things in its environment. In some 
	other engineering disciplines it is the analysis with differential equations that is called 
	behavior. That is not what is meant here. Here, in this part of ISO 10303, behavior is a model representation 
	of a functional requirement: it is what the system is to do.
	</note>
	<example>Make a fender is a behavior with several function steps, inputs of sheet steel, 
	power, paint primer, paint and the output of a fender. Ring is the behavior of a bell or 
	tuning fork. The "Q" of the bell or tuning fork is a physical property of the bell 
	and its environment.
	</example>
	
	<p><b>physical property </b>(13)</p><p>  what an element exhibits or does not exhibit in response to 
	excitation and 
	stimulation from auxiliary measurement entities that are not part of its context  </p>
	<note>This is the subclass of property that encompasses measurable characteristics that 
	require additional instrumentation to measure them. They cannot be established from responses 
	to the environment alone. All of the "properties" used in analysis with differential 
	equations fall into this category.
	</note>
	<example>Responses of an element like mass, power consumption, mean time between failure, 
	etc. are critically important and appear in requirements. They are not measured by responses 
	to excitation from their environment.
	</example>
	
	<p><b>structure </b>(14)</p><p>  the decomposition, interconnection and other static relationship 
	among the parts of the system </p>
	<note>Physical properties are budgeted to structure using analysis methods, and the emergent 
	performance is calculated using the same methods. Behavior is allocated to the structure. Form 
	and function are separated conceptually so that the design can be optimized by considering 
	several different structures that can provide the desired emergent behavior and properties.
	</note>
	<example>In a real example of optimization the engineer examines not just the maximum or minimum, 
	but looks at the trend in data in that region to be sure the solution is robust. That is, the 
	design solution must not degrade rapidly with small variances in the variables of design.
	</example>

</annex_clause>
</annex_clause>

<annex_clause title="System static structure">
<p>Figure <clause_ref linkend="tech_disc:figure:ug2"> H.3</clause_ref> provides a graphical 
depiction of the system's static structure. Structure is built from Part, Port, and Interface 
Specification. Structure decomposes  hierarchically. This forces Part and Port to also 
decompose hierarchically. </p>
		<figure id="ug2" number="H.3"> 
		<title>System static structure</title>
		<img src="ug_figure2.png"/>	
</figure>

<p>
The Part is simply a part or component list. The name used  follows the ISO 10303 manufacturing 
point of view of looking at a part or component and talking about it as an assembly because 
their job is to assemble it.</p>
<p>
Each Part (part or component) attaches to others at particular locations. These locations are 
called Ports. This is a familiar idea when one thinks of the port on a power cord that plugs 
into a port on the wall to get electric power. It also applies to the surface of a bridge, a 
port, that interacts with wind, is a port. In the second case the concept is less intuitive and 
more formal. Ports connect to ports.</p>
<p>
Interconnection specifies which ports attach to which other ports. Together Part, Port, and 
Interconnection specify how parts go together to constitute the whole. This description 
does not include Behavior or Physical Properties.
</p>
<p>
Each port has associated with it a description, an Interface Specification, that describes 
the geometry, forces, transferred material or energy or information, protocols, how to 
assemble to it, and tests that may be required of the port-to-port connection. For two 
ports to be interconnected  their interfaces must be compatible. 
</p>

<annex_clause title="Semantic dictionary for terms used in figure H.3">

	<p><b>structure </b>(14) </p> <p> the decomposition, interconnection and other static relationship 
	among the parts of the system </p>
	<note>Physical properties are budgeted to structure using analysis methods, and the emergent 
	performance is calculated using the same methods. Behavior is allocated to the structure. Form 
	and function are separated conceptually so that the design can be optimized by considering 
	several different structures that can provide the desired emergent behavior and properties.
	</note>
	<example>In a real example of optimization the engineer examines not just the maximum or minimum, 
	but looks at the trend in data in that region to be sure the solution is robust. That is, the 
	design solution must not degrade rapidly with small variances in the variables of design.
	</example>

	<p><b>part </b>(15)</p> <p>
	static parts of the system including their interconnection and interconnection descriptions</p>
	<note>1. Parts have physical properties assigned to them. Many engineering domains think of these as 
	components, but manufacturing thinks of them as assemblies because they build assemblies.  <i>Assembly 
	is a standard ISO naming convention. It may be desirable to alias this name.</i> </note>
	<note>2. Physical properties are budgeted to structure using analysis methods, and the emergent 
	performance is calculated using the same methods. Behavior is allocated to the structure. Form 
	and function are separated conceptually so that the design can be optimized by considering several 
	different structures that can provide the desired emergent behavior and properties.
	</note>
	
	<p><b>link </b>(16) </p> <p>
	a particular kind of part that is used when it is helpful not to model or specify its details</p>
	<note>Link must be provided in the concept model because a number of application tools use the 
	concept. Links ultimately are fully specified and become a system-assembly.
	</note>
	<example>In a pumping system it may be useful to define the pumps and tanks while representing the 
	piping as links without detail. At some point in the design detail like diameter, flow impedance, 
	pressure rating, and corrosion resistance must be defined. At his point the link becomes a part.
	</example>
	
	<p><b>port </b>(17) </p> <p>
	a connection point on a part in the part decomposition hierarchy</p>
	<note>1. Systems interconnect with one another port-to-port. Ports couple to desired things 
	in the environment and also to the ports of things that cause failure, threaten security 
	or safety. The alias for port is interface connection, this is the term that is used in AP239. </note>
	<note>2. When a system interacts with its environment, the boundary between the system and 
	the environment is the collection of all interacting ports.
	</note>
	<example>Consider a ultrasonic transmitting transducer coupled to a water tank and a receiver 
	transducer coupled to the tank. The transmitter port connects to a water port and couples 
	sound energy into the water. The intensity at any point is a result of the impedance match 
	between the two ports, the radiation pattern of the transducer, and the attenuation and 
	dispersion in the water. The receiving transducer is attached to another port of the water. 
	The received signal is dependant on the relative impedance of the two ports, the sound 
	distribution in the water, and the radiation pattern of the receiving transducer. This example 
	is often oversimplified as "broadcast" neglecting the port to port conditions and the properties 
	of the medium and neglecting the ports. 
	</example>
	
	<p><b>interconnection </b>(18) </p> <p>
	a listing of the ports that interconnect with one another</p>
	<note>The interconnection may exist for structural reasons without any flow from port to port. 
	The interconnection may exist because functions are assigned to particular assemblies, and the 
	output from one function is an input to the other function. In this case the ports and their 
	interconnection must exist to support flow. The alias for interconnection is interface 
	connection, the term used in AP239.
	</note>
	
	<p><b>interface specification </b>(19) </p> <p>
	a description of a port of a part that includes the geometric description, input/output 
	description, protocols that must be met, assemblies of parts required to join two ports, 
	allowable defect characteristics, etc. including the emergent properties of the interface 
	that are the result of the two ports interacting, and are not associated with either</p>
	<note>Parts interact physically through direct physical contact, exchange of elements, and 
	through forces they exert such as gravity, compression or torque. Thus input/output is bound 
	to ports and described by interfaces. The interface may consist of more than the two ports 
	and may involve an assembly of parts as in the case of two flanges that are assembled with 
	six bolts and an O-ring. The interface may also require detailed description to define what 
	occurs there or how it is maintained. 
	</note>
	<example>For two ports to connect, their interfaces must be compatible. The current carrying 
	capacity of a plug and a socket is a result of the surface area of contact, the contact 
	force, the wiping action on plugging them together, and the surface conductivity of both. 
	This is an emergent property that is not assignable to either port individually.
	</example>

</annex_clause>
</annex_clause>

<annex_clause title="Structure, behavior and physical property">
<p>
Structure, Behavior and Physical Properties are described separately. Behavior and Physical 
Properties are allocated or budgeted to Part to complete the description.
</p>
<p>
Behavior is built from Function, I/O (Input/Output), and Function Ordering as shown in 
figure <clause_ref linkend="tech_disc:figure:ug3"> H.4</clause_ref>. Any Element may 
be I/O (light blue shows an entity comes from figure 
<clause_ref linkend="tech_disc:figure:ug1"> H.2</clause_ref>). A 
Function is an entity of transformation that changes a set of inputs to a set of outputs. 
Function Ordering orders the functions such that it is possible to represent sequence, 
concurrency, branching, and iteration.
</p>
<p>
There are two major ways of representing Behavior. Function based behavior, independent 
of state, emerged in systems engineering in the 1970's. It provides for completed functions 
to enable succeeding functions, for I/O to trigger functions, and for ordering operators 
to represent sequence, branching, and iteration. The SEDRES model represents this with a 
Petrie net model. UML 2.0 contributors may be using a Petrie Net model. If so, then these 
two models need careful comparison.
</p>

	<figure id="ug3" number="H.4"> 
	<title>Behavior</title>
		<img src="ug_figure3.png"/>	
</figure>

<annex_clause title="Semantic dictionary for terms used in figure H.4">

	<p><b>element </b>(1)</p> <p> that which is discernable by the reproducible measurement of its characteristics</p>
	<note>The semantic term element includes matter, energy and information.  The term 
	product from ISO 10303-Part 1 ISO 10303 definitions defines product as: a thing or 
	substance produced by a natural or artificial process. This part of ISO 10303 
	needs to define the informational attributes associated with the entity named 
	"product" as defined within ISO 10303-1017 - Product Identification. This entity 
	has attributes that enable one to capture: id, name and description.  ISO 10303-1017 
	provides the definition: A Product is the identification of a product or of a type 
	of product. It is a collector of data common to all revisions of the product. Element 
	appears to be a legitimate subclass of product because this part requires reproducible 
	measurement of element.</note>
	<example>Anything from microscopic particles to galaxy clusters is an element.  
	Anything with a finite existence from galaxies with billion-year lives to trans-uranic 
	elements with lifetimes less than nano-seconds. Counter-example: Things like ghosts, 
	devils, the Loch Ness monster, the city of Atlantis are not discernable by reproducible 
	measurement and are excluded. Research and development things that do not yet have 
	reproducible measurements and process control are excluded. For example, silicon for 
	electronic devices would be excluded in 1900. </example>

	<p><b>system </b>(4) </p> <p> an element with a well-defined boundary with respect to all other elements, outside of it and 
	in the domain of interest, with which it interacts</p>
	<note>1. A system is composed of interacting systems. The emergent behaviors and properties of a 
	system are the result of the properties and behaviors of the sub-systems and their interactions. 
	These interactions may be highly nonlinear.
	</note>
	<note>2. Systems decompose hierarchically; they are systems of systems. </note>
	<example>A car has a well-defined boundary with respect to its environment, and the 
	relationships are both static and dynamic. Similarly the engine has the same kinds of 
	relationships and so does the fuel injector of the engine. 
	</example>
	
	<p><b>environment </b>(6) </p> <p> all elements external to the system that interact with it</p>
	<note>1. It is often possible to limit the parts of the environment needed for development 
	purposes to those external systems that are neighbors to the system. </note>
	<note>2.  The environment includes not only the external systems that couple with it for 
	useful purposes, but it also includes all external systems that may interact in a manner 
	that causes failure.    </note>
	<example>Elements in the environment need not have well-defined boundaries as do systems.  
	A laptop computer can connect to a power grid. But for the design of the laptop it is 
	not important to consider the power grid as a system. It is simpler to consider it as 
	an element with an interface that the laptop connects to when needed.
	</example>
	
	<p><b>behavior </b>(12) </p> <p> what an element is to do or is not to do in response to excitations it 
	receives from the 
	external elements in its environment </p>
	<note>This is the subclass of property that includes measurable characteristics in normal use. 
	It encompasses the response of the system to excitation by things in its environment. In some 
	other engineering disciplines it is the analysis with differential equations that is called 
	behavior. That is not what is meant here. In this part of ISO 10303, behavior is a model representation 
	of a functional requirement: it is what the system is to do.
	</note>
	<example>Make a fender is a behavior with several function steps, inputs of sheet steel, 
	power, paint primer, paint and the output of a fender. Ring is the behavior of a bell or 
	tuning fork. The "Q" of the bell or tuning fork is a physical property of the bell 
	and its environment.
	</example>

	<p><b>function </b>(20) </p> <p> the entity in the context of modelling that transforms an input set of elements 
	into a set of output elements that may be the same or measurably different from the input set</p>
	<note>It is a part of behavior. This is what functions do in mathematics where the 
	input/output are variables. In software the input/output is data. In systems engineering 
	the input/output are elements, matter, energy, and information. An internal function is a 
	kind of function that is allocated to and implemented by the system/structure. An external 
	function is a kind of function that is allocated to and implemented by elements in the environment. 
	</note>
	<example>The function may be "burn gasses" with an input of two moles of hydrogen and one 
	mole of oxygen. The output will be one mole of water, distinctly different from the inputs 
	and a lot of energy. This function may be followed by a function "cool to 90 degrees 
	centigrade". The input had pressure and volume proportional to temperature; the output 
	is now liquid with a well-defined volume, an isotropic compressibility and a viscosity. If 
	the next function is "cool to â10 degrees centigrade", then the viscosity goes away and the 
	compressibility becomes a fourth rank tensor relating stress to strain. 
	</example>
	
	<p><b>input output </b>(21) </p> <p> elements consumed by a function are inputs and those generated 
	by a function are outputs</p>
	<note>The name input/output or I/O is used because a given I/O entity is generated by one 
	function and consumed by another. It is a part of behavior. In the general case outputs are 
	different things than inputs, and physical properties, behaviors, values, variances and 
	probability distributions can all change. In this general definition "function" is an element 
	of type information and cannot be realized in the physical world except through elements of 
	type matter or energy that exhibit that function. In the physical world things transform other 
	things. It is this fact of reality that results in the allocation of function to structure 
	which is really a statement that this particular structure entity exhibits this particular 
	function and it will be used to provide that transformation. The thought pattern is to think 
	of the desired transformation, function, to consider alternative things that might be used to 
	provide it, and to select among these, using a trade study based on optimization.</note>
	<example>I/O may trigger functions and it may terminate functions.</example>
	
	<p><b>function ordering </b>(22) </p> <p> imposes how/when functions execute, which may be 
	sequential, concurrent, traversed 
	iteratively, or lie on separate alternative path</p>
	<note>It is a part of behavior. There are several ways to represent function ordering. It 
	may be done with ordering operators and triggering input/output as in classical behavior 
	diagrams or it may be done with events, states, and transitions as done in state machines 
	and state charts. For this fine level of detail it is necessary to inter-compare the 
	detailed models in SEDRES with those in the concept model and those emerging from UML 2.0 development.
	</note>
	<example>A function is activated when all preceding threads of functions are complete. 
	At this point the function examines its inputs. If all triggering inputs are present the 
	function proceeds to do its work. If one or more triggering inputs is absent, the function 
	waits for them before doing its work. Triggers that arrive while the functions are running 
	are stored in a first in first out queue. Ordinary input/output that arrives while a function 
	is deactivated is stored in a last in first out queue. If the function is running it is 
	discarded.  A function is deactivated when it completes its work or is deactivated by input/output.</example>

</annex_clause>
</annex_clause>

<annex_clause title="Description function based behavior">
<p>
A model for Function Based Behavior is given in figure 
<clause_ref linkend="tech_disc:figure:ug12"> H.4</clause_ref>. I/O may trigger functions, 
starting or terminating functions. I/O that triggers is coupled to the function by 
binding to a Function Control Port. I/O that does not trigger is bound to a Regular 
Function Port. I/O arriving while a function is active is stored in a queue unless 
it is terminating I/O.
</p>
<p>
Function ordering uses a set of operators: AND to define concurrency, Multi-exit 
Function or OR to represent alternative paths, a sequence operator, and LOOP, Iterate, 
and Replicate constructs. LOOP and ITERATE require limits to control their termination. 
Scripts are used to provide detailed control of function ordering. Probabilities are 
assigned to Or Out to facilitate execution of the behavior to produce time lines or 
Monte Carlo simulation.
</p>
<p>
After tools are to exchange behavior information that includes timing, the tool 
interpretation engines may execute the models to produce time lines or perform Monte 
Carlo calculations. These results will differ unless the tools agree on function activation rules. 
</p>
</annex_clause>

	<annex_clause title="Resource">
<p>
A <b>Resource</b> is the amount of input available to a function or the amount of output available from 
a function or the amount of property of a system available to a function.</p>
<example>1. There exists some number of missiles available to a missile battery available 
for the function "Shoot".</example>
<example>2. The function "transmit message" may be allocated to a satellite system, a fiber optic 
line, a microwave link, etc. Each of these alternatives has some value of the property 
"bandwidth" that may be used by the function.</example>

<p>
The Function-Resource relationships are:
</p>
<ul>
<li>Captures: Captures indicates the resource that this object requires (but does not destroy) 
during execution. Resources are captured when the execution of the function begins and 
released when the function completes execution.  </li>

<li>Consumes: Consumes indicates the resource that this object requires (and destroys) during 
execution. Resources are consumed when the execution of the function begins. </li>

<li>Produces: Produces indicate the resource that is generated by the function. Resources are 
produced when the execution of the function completes.</li>
</ul>
</annex_clause>

<annex_clause title="Function activation rules">
	<figure id="ug4" number="H.5"> 
	<title>Function based behavior</title>
	<img src="ug_figure4.png"/>	
	</figure>

<p>
The representative set of activation rules are shown in figure 
<clause_ref linkend="tech_disc:figure:ug4"> H.5</clause_ref> are defined as follows:
</p>
<ul>
<li>Start rule - A function is activated and begins its work if and only if all preceding 
functions and threads of functions have completed and all inputs that trigger the 
function are present at the function control ports. A function begins work if and only 
all resources to be utilized by that function are available. Otherwise it waits.</li>

<li>Run rule -  Trigger signals received while a function is active are stored in queues. </li>


<li>Terminate rule - Functions complete generation of all their outputs, terminate, and 
pass activation to the next function when the time interval allocated to them expires. 
Functions complete production of all resources and return any resources that were 
captured during execution.</li>
</ul>

<p>I/O queuing rules, a representative set of queuing rules follows:</p>

<ul>
<li>Triggering I/O that arrives at function is stored in a FIFO queue. On its next activation 
the function uses the I/O first stored in the queue. Non-trigger signals received while a function is active are discarded. Non-trigger 
signals received while a function is dormant are stored in    LIFO queues. It is the 
last I/O received that is used.</li>

<li>A Function exit> construct links a functional decomposition to the exit paths identified 
for the parent function. For example, assume you have a Multi-exit Function with two exit 
paths. If this is the leaf-level of your model, scripting (or probabilities if no script 
is defined) selects which path to take. However, if this function is decomposed, there are 
Function Exit constructs corresponding 
to the two exit paths in the higher-level function. When one of the Exit constructs is 
encountered, execution of the decomposition is complete and control is passed to the 
corresponding exit path at the higher level.</li>
</ul>

<p>
State based behavior emerged from automata theory and has matured into State Charts that 
provide for state explosion in highly concurrent models. SEDRES has a representation for 
this and has demonstrated model transfer between Statemate and Teamwork Real Time tools.
</p><p>
In the UML community, Action Semantics are to provide a basis for state based behavior. 
These two approaches require careful correlation. The concept model here does not go 
beyond the very general notion of function ordering, but notes the critical importance 
of correlation among emerging detailed models.</p>

<annex_clause title="Semantic dictionary for terms used in figure H.5">

	<p><b>function based behavior </b>(12.1) </p> <p> a description of behavior based on function and transformation without 
	reference to state </p>
	
	<p><b>timing </b>(20.1)  a time interval assigned to a function that defines the duration of activity of the 
	function or the probability distribution for the duration</p>
	<note>Many probability distributions are used in systems engineering. These may include: 
	Normal, Log-normal, Bernoulli, Beta, Binomial, Negative binomial, Chi squared, Discrete 
	Uniformed, Erlang, Exponential, F, Gamma, Geometric, Laplace, Poisson, T, Triangular, 
	Uniform, Weibull.</note>
	
	<p><b>script </b>(20.2) </p> <p> an executable textual language statement assigned to a function to define how 
	that function executes</p>
	
	<p><b>function port </b>(20.3) </p> <p> a logical entity to which input/output is bound</p>
	
	<p><b>queue </b>(20.4) </p> <p> a storage entity on a function port that accumulate input/output 
	until needed by the function</p>
	<note>Triggering input/output is stored in a "first in first out" queue so that the earliest 
	trigger received activates the function. Non-triggering input/output is stored in a "last in 
	first out" queue so that the most  recent input is used by the function to ensure the input is fresh.</note>
	
	<p><b>regular function port </b>(20.5) </p> <p> a function port that accepts input/output that 
	does not trigger the function</p>
	<note>The constructs regular function port and control function port allow input/output to 
	trigger some function but not others.</note>
	
	<p><b>control function port </b>(20.6) </p> <p> a function port that accepts input/output that triggers the function</p>
	<note>The constructs regular function port and control function port allow input/output to 
	trigger some function but not others.</note>
	
	<p><b>resource </b>(20.7) </p> <p> the amount of input available to a function or the amount of
	output available from it; or, the amount of property of a system available to a function</p>
	<example>1. There exists some number of missiles available to a missile battery available for 
	the function "Shoot". </example>
	<example>2. The function "transmit message" may be allocated to a satellite system, a fiber 
	optic line, a microwave link, etc. Each of these alternatives has some value of the property 
	"bandwidth" that may be used by the function.</example>
	
	<p><b>function exit </b>(20.8) </p> <p> a function based behavior construct that links a functional decomposition to the exit
	paths identified for the parent function</p>
	<example>If function exit is decomposed, there are function exit constructs corresponding 
	to the two exit paths in the higher-level function. When one of the exit constructs is 
	encountered, execution of the decomposition is complete and control is passed to the 
	corresponding exit path at the higher level.</example>
	
	<p><b>ordering operations </b>(22.1) </p> <p> function ordering constructions that establish how the 
	functions are ordered</p>
	
	<p><b>replicate </b>(22.2) </p> <p> an ordering operation that replicates a function used many times</p>
	<note>Especially useful for distributed systems in which a particular function is realized 
	in many places</note>
	
	<p><b> and </b>(22.3) </p> <p>an ordering operation pair that establishes concurrency among functions</p>
	
	<p><b>and out </b>(22.4)  </p> <p>an ordering operation that shows the branching our among concurrent functions</p>
	
	<p><b>and in </b>(22.5)  </p> <p>an ordering operation that shows the path rejoining among concurrent functions</p>
	
	<p><b>iterate </b>(22.6)  </p> <p>an ordering operation that repeats a function or group of functions </p>
	
	<p><b>iterate limit </b>(22.7)  </p> <p>an ordering operation that establishes the set over which the iteration is performed</p>
	
	<p><b>loop </b>(22.8) </p> <p> an ordering operation that repeats a function or group of functions some number of times</p>
	
	<p><b>loop limit </b>(22.9) </p> <p> the number or expression for the number of repetitions in a loop </p>
	
	<p><b>loop exit </b>(22.10) </p> <p> the ordering operation that terminates a loop and provides correct continuation of the execution path</p>
	
	<p><b>sequence </b>(22.11) </p> <p> an ordering operator that establishes sequence among functions</p>
	
	<p><b>or </b>(22.12) </p> <p> an ordering operator pair that establishes alternative paths for a group of functions</p>
	
	<p><b>or out </b>(22.13) </p> <p> the ordering operation that establishes branching of functions and their alternative paths</p>
	
	<p><b>or in </b>(22.15) </p> <p> the ordering operation that establishes the rejoin of alternative paths</p>
	
	<p><b>multi exit function </b>(22.14) </p> <p> a special function with multiple exit conditions that can serve the same purpose as "or out"</p>
	
	<p><b>probability </b>(22.16) </p> <p> a set of numbers, of sum equal to 1.0, that can be assigned to the several exit paths of 
	an "or out" to establish the relative frequency that each path is taken </p>
	
	<p><b>activation rules </b>(22.17) </p> <p> the set of rules used by an execution engine in a tool to execute the function based behavior</p>
	<note>The same behavior model can produce different execution results if the rules of execution 
	differ between two tools that exchange data. These are the entities that allow recording of the 
	rules used by the tool putting data into the data model.</note>
	
	<p><b>start rules </b>(22.18) </p> <p> the activation rules that establish when a function begins to execute</p>
	
	<p><b>run rules </b>(22.19) </p> <p> the activation rules that establish how the function executes</p>
	
	<p><b>terminate rules </b>(22.20) </p> <p> the activation rules that establish the conditions under which a function ceases to execute</p>
	
</annex_clause>
</annex_clause>

<annex_clause title="Structure and physical properties">
<p>
Physical Property, its relationship to the Structure hierarchy and to analysis is shown figure 
<clause_ref linkend="tech_disc:figure:ug5"> H.6</clause_ref>. The key concept is that 
performance, behavior and physical properties of 
the whole results from the structure, the behavior and physical properties of the parts. 
They are not related to a class tree.
</p>
		<figure id="ug5" number="H.6"> 
		<title>Structure and physical property</title>
		<img src="ug_figure5.png"/>	
		</figure>

<p>
System Assemblies in the Part tree all have Physical Properties such as mass, power 
consumption, geometry, MTBF, drag coefficient, etc. The Physical Properties are assigned 
to a particular Part. A Physical Property has a name and an ID that identifies it 
uniquely. For example, many different System Assemblies have the Physical Property mass. 
Consequently each of these assigned Physical Properties needs an ID. Each has an 
associated unit in which it is measured.
</p>
<p>
A Physical Property assigned to a particular Part has values. The value may be expressed 
as a mean, a mean with variance, a probability distribution, or a histogram. All of these 
values are a result of a set of measurements and analysis of the data. The value goes 
through a series of versions as the system definition evolves. The Part is declared to 
have a Required or Budgeted Value.  The Part may have a Target Budget Property Value 
used as a guide or target as designers consider alternatives. A Part, as a whole, may 
have a Calculated Property Value based on analysis of the properties, behaviors and 
interactions of its parts. When a Part is built, it may have a Measured Property Value. 
</p>

<annex_clause title="Semantic dictionary for terms used in figure H.6">

	<p><b>physical property </b>(13) </p> <p> what an element exhibits or does not exhibit in response to 
	excitation and 
	stimulation from auxiliary measurement entities that are not part of its context  </p>
	<note>This is the subclass of property that encompasses measurable characteristics that 
	require additional instrumentation to measure them. They cannot be established from responses 
	to the environment alone. All of the "properties" used in analysis with differential 
	equations fall into this category.
	</note>
	<example>Responses of an element like mass, power consumption, mean time between failure, 
	etc. are critically important and appear in requirements. They are not measured by responses 
	to excitation from their environment.
	</example>
	
	<p><b>structure </b>(14) </p> <p> the decomposition, interconnection and other static relationship 
	among the parts of the system </p>
	<note>Physical properties are budgeted to structure using analysis methods, and the emergent 
	performance is calculated using the same methods. Behavior is allocated to the structure. Form 
	and function are separated conceptually so that the design can be optimized by considering 
	several different structures that can provide the desired emergent behavior and properties.
	</note>
	<example>In a real example of optimization the engineer examines not just the maximum or minimum, 
	but looks at the trend in data in that region to be sure the solution is robust. That is, the 
	design solution must not degrade rapidly with small variances in the variables of design.
	</example>

	<p><b>part </b>(15) </p> <p>
	static parts of the system including their interconnection and interconnection descriptions</p>
	<note>1. Parts have physical properties assigned to them. Many engineering domains think of these as 
	components, but manufacturing thinks of them as assemblies because they build assemblies.  <i>Assembly 
	is a standard ISO naming convention. It may be desirable to alias this name.</i> </note>
	<note>2. Physical properties are budgeted to structure using analysis methods, and the emergent 
	performance is calculated using the same methods. Behavior is allocated to the structure. Form 
	and function are separated conceptually so that the design can be optimized by considering several 
	different structures that can provide the desired emergent behavior and properties.
	</note>
	
	<p><b>port </b>(17) </p> <p>
	a connection point on a part in the part decomposition hierarchy</p>
	<note>1. Systems interconnect with one another port-to-port. Ports couple to desired things 
	in the environment and also to the ports of things that cause failure, threaten security 
	or safety. The alias for port is interface connection, this is the term that is used in AP239. </note>
	<note>2. When a system interacts with its environment, the boundary between the system and 
	the environment is the collection of all interacting ports.
	</note>
	<example>Consider a ultrasonic transmitting transducer coupled to a water tank and a receiver 
	transducer coupled to the tank. The transmitter port connects to a water port and couples 
	sound energy into the water. The intensity at any point is a result of the impedance match 
	between the two ports, the radiation pattern of the transducer, and the attenuation and 
	dispersion in the water. The receiving transducer is attached to another port of the water. 
	The received signal is dependant on the relative impedance of the two ports, the sound 
	distribution in the water, and the radiation pattern of the receiving transducer. This example 
	is often oversimplified as "broadcast" neglecting the port to port conditions and the properties 
	of the medium and neglecting the ports. 
	</example>
	
	<p><b>interconnection </b>(18) </p> <p>
	a listing of the ports that interconnect with one another</p>
	<note>The interconnection may exist for structural reasons without any flow from port to port. 
	The interconnection may exist because functions are assigned to particular assemblies, and the 
	output from one function is an input to the other function. In this case the ports and their 
	interconnection must exist to support flow. The alias for interconnection is interface 
	connection, the term used in AP239.
	</note>
	
	<p><b>interface specification </b>(19) </p> <p>
	a description of a port of a part that includes the geometric description, input/output 
	description, protocols that must be met, assemblies of parts required to join two ports, 
	allowable defect characteristics, etc. including the emergent properties of the interface 
	that are the result of the two ports interacting, and are not associated with either</p>
	<note>Parts interact physically through direct physical contact, exchange of elements, and 
	through forces they exert such as gravity, compression or torque. Thus input/output is bound 
	to ports and described by interfaces. The interface may consist of more than the two ports 
	and may involve an assembly of parts as in the case of two flanges that are assembled with 
	six bolts and an O-ring. The interface may also require detailed description to define what 
	occurs there or how it is maintained. 
	</note>
	<example>For two ports to connect, their interfaces must be compatible. The current carrying 
	capacity of a plug and a socket is a result of the surface area of contact, the contact 
	force, the wiping action on plugging them together, and the surface conductivity of both. 
	This is an emergent property that is not assignable to either port individually.
	</example>
	
	<p><b>unit </b>(25) </p> <p> establishes the standard of measure against which the values of physical properties 
	shall be stated</p>
	<note>Several different standards of units are in use around the world. It is essential 
	to state the standard in use.</note>
	<example>Failure is assured when different groups use different units without making the 
	necessary transformations.</example>
	
	<p><b>property value </b>(26) </p> <p> a numeric value assigned to a physical property</p>
	<note>Numeric values, real numbers, can be given as a mean and variance, a probability 
	distribution of values or as a histogram. Many probability distributions are used in 
	systems engineering. These may include: Normal, Log-normal, Bernoulli, Beta, Binomial, 
	Negative binomial, Chi squared, Discrete 
	Uniformed, Erlang, Exponential, F, Gamma, Geometric, Laplace, Poisson, T, Triangular, 
	Uniform, Weibull.</note>
	<example>Property values are useful in making comparisons and decisions, in verification, and 
	in validation. Comparisons and decisions can only be made if there are both mean values and 
	variances available. Mean values alone are insufficient.</example>
	
	<p><b>required budgeted property value </b>(27) </p> <p> a property value allocated to a part by a requirement, or budgeted to that part by analysis</p>
	<note>Values that shall be met are stated in requirements. The laws of science and 
	engineering interrelate the values of properties and are used to calculate the values 
	appropriate for the parts based on the required value for the whole.</note>
	<example>A requirement may state that a space probe shall weigh no more than 150 pounds. 
	In that case the masses of the subsystems must add up to no more than 150 pounds. It is best 
	practice to budget values to the subsystems for guidance of the engineers working on the subsystems.</example>
	
	<p><b>calculated property value </b>(28)</p> <p> a property value of a whole calculated or estimated from the values of the parts 
	that assemble to make the whole</p>
	<note>The laws of science and engineering interrelate the values of properties and are 
	used to calculate the values for the whole based on the designed values for the parts.</note>
	<example>As the designers do their work they arrive at design values for the parts. 
	These values will generally differ from the budgeted values because the designers have 
	detailed information unavailable before. It is necessary to calculate the properties of 
	the whole based on these design values to ensure that requirements are satisfied by the 
	proposed design. The mass of the space probe should be 150 pounds or less, based on the 
	design data.</example>
	
	<p><b>target budget property value </b>(29) </p> <p> a temporary property value used by a designer as the design work proceeds and 
	different design alternatives are considered</p>
	<note>As a designer considers several alternatives to meet system requirements, it 
	is necessary to carry along temporary property values to accomplish the design work.</note>
	<example>A designer may have been budgeted 40 pounds for his subsystem. He may find 
	a design solution that weighs 38 pounds. In the design process he may consider 
	alternatives that turn out to weigh 36 , 38,  41, and 43 pounds. These are temporary 
	targets. When he examines other budgets he must meet for the subsystem, the designer 
	may conclude that the 38 pound alternative is the best found.</example>
	
	<p><b>measured property value </b>(30) </p> <p> a property value established by measurement of an actual part</p>
	<note>These measurements are often made when actual parts first become available. They 
	verify that the parts meet their requirements.  They also verify the quality of analysis 
	models used during design.</note>
	<example>A part like a turbine blade has a number of important properties critical to 
	the performance of a jet engine, These include aerodynamic efficiency, weight, moment 
	of inertia, vibration spectra, mean time between failure, and corrosion resistance. 
	Important properties are predicted during design with analysis. Measurement is made as 
	soon as possible.</example>
	
	<p><b>model parameter </b>(31) </p> <p> a formally declared variable of the analytical model provided for an external 
	application to populate at execution time in a computing environment</p>
	<note>Physical properties are represented in equations by parameters.</note>
	<example>In Spice, temperature is a model parameter that may be set at the execution time. </example>
	
	<p><b>parameter assignment </b>(32) </p> <p> provides actual values for characteristics declared formally by the model parameter</p>
	<note>Some parameters are left in parametric form and are calculated. 
	Others are supplied values to fully specify the equations.</note>
	
	<p><b>analytical representation </b>(33) </p> <p> the association of specific properties of specific system assemblies with an 
	analytical model in order to unambiguously characterize the performance of a specific part</p>
	<note>To perform a calculation it is necessary to associate parameters with other 
	elements of equations.</note>
	
	<p><b>analytical model </b>(34) </p> <p> provides a mathematical description of the properties of a system</p>
	<note>An analytical model may be a library model. </note>

</annex_clause>
</annex_clause>


<annex_clause title="Calculated property values - analytical modelling">
<p>
Any one assembly is an interconnection of assemblies one tier down in the tree. The emergent 
properties of any assembly are a result of the properties, interconnection, and interaction of 
the sub-assemblies from which it is built. The relationships may be very non-linear in the 
physical world as observed with phenomena like combustion and friction.
</p>
<p>
 The basic relationships for analytical modelling of emergent properties and budgeting of 
 properties are shown in figure <clause_ref linkend="tech_disc:figure:ug5"> H.6</clause_ref>. 
 A set of engineering equations or estimates, analytical  
 models, are used by systems engineers to budget properties to the interacting sub-assemblies 
 as a guide to designers at the lower level. When designs for all of the sub-assemblies are 
 available, their individual properties and interactions are better defined. The same 
 equations are used to calculate the emergent properties of the complete assembly. The 
 fidelity of the calculations increases as the work proceeds.
</p>
<p>
A Part, as a whole, may have a Calculated Property Value based on analysis of the 
properties, behaviors and interactions of its parts. This is accomplished by estimation 
or by an analysis that solves the relevant engineering equations. This makes it necessary 
to represent physical properties as parameters in the equations of the relevant analysis 
model. Model Parameter provides this parameterization. It has an attribute of its of the 
unit of measure applicable to the analysis. This may be different from the unit assigned 
to Physical Property. The reference document attribute specifies the standard document 
that contains the reference for the Model parameter. A default value and valid range 
can be specified when needed.
</p>
<p>
Parameter assignment assigns parameters to model parameter that in turn is a  parameter 
for analytical model. Analytical representation has a set of parameter assignments and 
is modeled by one or several analytical models. be solved, Analytical  representation. 
The several Analytical models provide answers at different levels of fidelity and with 
different efforts of computation. Analytical model port connects the analytical results back to the 
appropriate location in the part hierarchy. 
</p>
</annex_clause>

<annex_clause title="Emergent properties and budgeting of properties example"> 
<p>
One may wish to develop a car that can accelerate from zero to sixty  miles per hour 
in 6.5 seconds or less. This is a required emergent property of the car with elements shown in 
figure <clause_ref linkend="tech_disc:figure:ug6a"> H.7</clause_ref>.  This behavior 
is a result of the power of the drive train, the air resistance of the body, the total 
mass of the car, and the friction of the tires on the road. These parameters are 
inter-related by a second order differential equation.
</p>
<p>
The differential equation is first used to budget target values of mass, power, drag 
coefficient, and tire friction to the appropriate components as targets for the designers. 
When the designs are available with definite property values, the same equations are used 
to calculate the emergent property, time for acceleration from zero to sixty mph for the car.  
</p>
<p>
Note that there may be several distinctly different approaches to the solution of what 
sub-components to use. Thus it is useful for the assembly to have relationships that 
indicate if it is an alternative or is selected as a solution, if it meets requirements, 
and what its regularization function value may be as the basis of selecting a particular 
solution from among the alternatives.  
</p>
		<figure id="ug6a" number="H.7"> 
		<title>Automobile example</title>
		<img src="ug_figure6a.png"/>	
</figure>

		<figure id="ug6" number="H.8"> 
		<title>Engineering equations</title>
		<img src="ug_figure6.png"/>	
</figure>
<p>
The table in figure <clause_ref linkend="tech_disc:figure:ugt1"> H.9</clause_ref> provides 
a crude map of how the equations in figure 
<clause_ref linkend="tech_disc:figure:ug6"> H.8</clause_ref> map into the concept model 
defined in figure <clause_ref linkend="tech_disc:figure:ug5"> H.6</clause_ref> for the car example. 
Only the properties of car have been mapped. 
Note there are two analytical models. One is very simple and assumes constant traction 
once the car is in motion and rolling friction applies. The second is of higher fidelity 
and uses traction vs. Rpm. from actual engine data, including transmission gear changing.
</p>
		<figure id="ugt1" number="H.9"> 
		<title>Equation to concept model mapping</title>
		<img src="ug_table1.png"/>	
</figure>
</annex_clause>

<annex_clause title="Model parameter">
<p>
A Model parameter is a formally declared variable of the analytical model provided 
for an external application to populate at execution time in a computing environment. 
</p>
<example>
In Spice, temperature is a Model parameter that may be set at the execution time. 
</example>

<p>
A Parameter assignment  provides actual values for characteristics declared formally 
by the Model parameter.
</p>

<p>
An Analytical representation is the association of specific properties of specific 
System Assemblies with an Analytical model in order to unambiguously characterize the 
performance of a specific Part.
</p>
<note>1. This entity accomplishes a function similar to the parameter assignment part of a 
statement in a Spice netlist, or a function or subroutine call in a computer program. 
This capability is useful where the parts in the library have many parameters, not 
all of which apply to each simulation model that could be used for the part. This 
entity matches up the correct parameter values with the correct model.</note>
<note>2. The properties specified should be in accordance with the capabilities and 
limitations of the Analytical model. That is, the mathematical formulations in the 
Analytical model apply over limited ranges of real product characteristics and 
environmental characteristics.</note>
<note>3. This part of ISO 10303 does not standardize qualification of Analytical representations 
for an intended usage.
</note>
<p>
The Analytical model provides a mathematical description of the properties of a system. An Analytical model 
may be a Library model.
</p>
<note>1. In this part of ISO 10303 an Analytical model includes the variable declarations 
of the mathematical description but may not include the assignment of actual values 
for the variables declared. 
</note>
<note>2. This part of ISO 10303 provides support for computer systems to verify type consistency 
between product data defined in this part of ISO 10303 and product data captured by 
Analytical models. 
</note>
<note>3. This part of ISO 10303 describes the interfaces (ports) to an Analytical model and 
provides  support for type checking of the units used for the parameters that may be 
assigned values for an Analytical model.
</note>
<example>
Consider the case where actual values are not included: the Analytical model for a 
resistor that is coded in pseudocode. When the Analytical model is referenced by an 
analytical representation, literals will be supplied for items declared in the 
interface; both connections and their parameters, and the simulator will ensure that 
types are compatible. 
</example>
<p>
Probabilities are applied to the values of physical properties, and to the performance 
requirement time duration assigned to functions. A list follows of representative 
probability distributions used in systems engineering tools: . 
<i>Normal, Log-normal, Bernoulli, Negative Binomial, Beta, Poission, Binomial, T,
Chi squared, Triangular, Discrete uninformed, Uniform, Erlang, Weibull
Expoonetial, F, Gamma, Geometric, Laplace.</i>
</p>
</annex_clause>

<annex_clause title="Allocation of requirements">
<p>
Depending upon their content, requirements are allocated to different parts of the 
information model. Requirements describing functions are allocated to functions, etc. 
This is a useful way of classifying requirements for the purpose of creating a logically 
consistent model or description of a system.
</p>
<p>
Within systems engineering there is no single standardized way of classifying requirements 
and many different classifications for different purposes are in use.  The classification 
given in figure 
<clause_ref linkend="tech_disc:figure:ug7"> H.10</clause_ref> 
is defined as shown because it is useful for the purpose allocating or assigning requirements.
</p>
<p>
It is not possible to enforce any process with an information model and this part of ISO 10303 is intended 
to support both pest practices and other practices in use. Hence, any collection of 
requirements may contain compound requirements, contradictory requirements, and non-feasible 
requirements. Consequently the generalization/specialization of figure 
<clause_ref linkend="tech_disc:figure:ug7"> H.10</clause_ref> is non-exhaustive and inclusive. 
</p>
		<figure id="ug7" number="H.10"> 
		<title>Classification of requirements for the purpose of allocation</title>
		<img src="ug_figure7.png"/>	
		</figure>

<p>
Figure <clause_ref linkend="tech_disc:figure:ug8"> H.11</clause_ref> provides a summary of the 
allocation relationships depicted:
</p>
<ul>
<li>
 Requirements are assigned to functions;
</li>
<li>
 Performance Requirements are assigned to functions;
</li>
<li>
 Function is allocated to Part (red used because of line crossings);
</li>
<li>
 I/O is bound to ports (red used because of line crossings);
</li>
<li>
 Interface Requirements are assigned to Interfaces;
</li>
<li>
 Physical Property Requirements are assigned to Part;
</li>
<li>
 Imposed Design is assigned to the Part on which it is imposed;
</li>
<li>
Reference Requirements point to a Reference Source that may contain requirements of 
all the kinds in the classification.
</li>
</ul>

		<figure id="ug8" number="H.11"> 
		<title>Requirement allocations</title>
		<img src="ug_figure8.png"/>	
		</figure>

<annex_clause title="Semantic dictionary for terms used in figure H.11">

	<p><b>functional requirement </b> </p> <p>states what the system shall be done by the system to which it is allocated</p>
	
	<p><b>performance requirement </b> </p> <p>states a time duration or a time probability for the completion of a functional 
	requirement or a function as a modelling element</p>
	
	<p><b>physical property requirement </b> </p> <p>states a physical property that shall be exhibited by the system or system assembly 
	to which it is assigned</p>
	
	<p><b>interface requirement </b> </p> <p>states the characteristics of the interface to which it is assigned</p>
	<note>It includes the geometric description, input/output description, protocols that 
	must be met, assemblies of parts required to join two ports, allowable defect characteristics, etc.</note>
	
	<p><b>imposed design requirement </b> </p> <p>states particular elements that shall be used in the design of the system or part</p>
	
	<p><b>reference requirement </b> </p> <p>states a reference to a source of additional requirements that shall be met by the 
	system or part</p>
	<note>The referenced source may be a requirements document, government requirements for 
	safety, security, environmental quality, etc., or a state or federal law</note>
	
	<p><b>reference source </b>(28) </p> <p> any requirements document, government regulation or law that contains applicable requirement</p>
	
	<p><b>effectiveness measure </b> </p> <p>states an optimization condition that a system shall meet</p>
	<note>Requirements define the domain of the solution; that is, the solution space. The effectiveness 
	measures drive the solution to a particular region in that space. The effectiveness measures 
	are tightly related to stakeholder needs. 
	</note>
	<example>The requirements differences between a PC and a laptop are largely in the laptop 
	optimization conditions for minimum weight, minimum thickness, and maximum battery life. 
	These criteria are some of those that customers (one of the kinds of stakeholder) consider 
	in deciding what to purchase. 
	</example>
	
	<p><b>optimization direction </b>(43) </p> <p> states the direction of optimization, maximize or minimize, for an effectiveness measure </p>
	<example>For a laptop computer weight and thickness are minimized and battery life is maximized.</example>
	
	<p><b>weight </b>(44) </p> <p> relative importance of a particular effectiveness measure</p>
	<note>Weights are often expressed in a numerical form.</note>
	<example>They fix the relative importance in trade off weight, 
	thickness, and battery life. How many minutes of battery life are worth how many tenths of a 
	pound in weight.</example>
	
	<p><b>regularization function </b>(45) </p> <p> an analytic expression that combines effectiveness measures with weights to produce a single 
	number for the goodness of a design option</p>
	<note>This corresponds to the regularization function used in optimal control design and in 
	statistical optimization of processes. </note>
	
</annex_clause>
</annex_clause>


<annex_clause title="Physical property and time">
<p>
Figure <clause_ref linkend="tech_disc:figure:ug9a"> H.12</clause_ref>
shows the model for physical property and figure
<clause_ref linkend="tech_disc:figure:ug9b"> H.13</clause_ref> shows the model for time. 
</p>
		<figure id="ug9a" number="H.12"> 
		<title>Physical property</title>
		<img src="ug_figure9a.png"/>	
		</figure>

		<figure id="ug9b" number="H.13"> 
		<title>Time breakdown</title>
		<img src="ug_figure9b.png"/>	
		</figure>
		
<annex_clause title="Semantic dictionary for terms used in figure H.12 and H.13">

	<p><b>physical property </b>(13) </p> <p> what an element exhibits or does not exhibit in response to 
	excitation and 
	stimulation from auxiliary measurement entities that are not part of its context  </p>
	<note>This is the subclass of property that encompasses measurable characteristics that 
	require additional instrumentation to measure them. They cannot be established from responses 
	to the environment alone. All of the "properties" used in analysis with differential 
	equations fall into this category.
	</note>
	<example>Responses of an element like mass, power consumption, mean time between failure, 
	etc. are critically important and appear in requirements. They are not measured by responses 
	to excitation from their environment.
	</example>
	<p>
	<b>Continuous Time</b> is a dimension along with three spatial dimensions used by science and 
	engineering to describe reality-using math. It has no past, present or future.
	</p>
	<p>
	 <b>Present Time</b> recognizes a standard of year, month, week, day, hour, minute, and second to 
	 represent past, present, and future. It is the basis of plans and schedules.
	</p>
	<p>
	<b>Time Interval</b> provides a time duration that may be assigned to a task or function to represent 
	how long the task will take for completion.
	</p>
	<p>
	 <b>Start Time</b> is a Present Time that states where in Present Time a Time Interval begins.
	</p>
	<p>
	 <b>Stop Time</b> is a Present Time that states where in Present Time a Time Interval ends.
	</p>
	<p>
	<b>Discrete Time</b> is time represented by clock pulses of negligible duration.    In this 
	approximation events occur on each clock pulse.
	</p>
	<p>
	Time is one of the most accurately measured quantities that we have. Current accuracy of 
	measurement is about one part in 10 -13. Research underway may extend this to 10 -17. 
	Many properties now have primary standards based in part on time.
	</p>

</annex_clause>
</annex_clause>

<annex_clause title="Other models important to systems engineering management">
<p>
The models for verification, validation and risk are shown in figures
<clause_ref linkend="tech_disc:figure:ug10"> H.14</clause_ref>,  
<clause_ref linkend="tech_disc:figure:ug11"> H.15</clause_ref> and 
<clause_ref linkend="tech_disc:figure:ug12"> H.16</clause_ref> 
</p>

<note>These graphical concept models were developed early in the creation of this part of ISO 10303.  The elegance of this 
model that has evolved has enabled all that is outlined within these figure to be accomplished in a manner
that does not obviously mirror the detail shown.
</note>
		<figure id="ug10" number="H.14"> 
		<title>Verification</title>
		<img src="ug_figure10.png"/>	
		</figure>

		<figure id="ug11" number="H.15"> 
		<title>Validation</title>
		<img src="ug_figure11.png"/>	
		</figure>

		<figure id="ug12" number="H.16"> 
		<title>Risk</title>
		<img src="ug_figure12.png"/>	
		</figure>

<annex_clause title="Semantic dictionary for terms used in figures H.14 to H.16">

	<p><b> stakeholder </b>(7) </p> <p>people, organizations and institutions that are a part of the system environment 
	because the system provides some benefit to them and they have an interest in the system</p>
	<note>Stakeholders include; for example, the producers, owners, operators, users, 
	and maintainers of the system.
	</note>
	
	<p><b>stakeholder need </b>(8) </p> <p> the benefits that the stakeholders wish to be satisfied by or delivered by 
	the system when it is implemented and functioning </p> 
	<note>At the top-level of development these needs drive the requirements for the 
	system and the optimization criteria for its development.
	</note>
	
	<p><b>system requirement </b>(10) </p> <p> a statement of properties that a system shall exhibit or shall 
	not exhibit when completed </p>
	<note>Requirements are derived from requirements in a many-to-many relationship.
	</note>
	
	<p><b>verification requirement </b>(46) </p> <p> statement of how a system design or instance shall be shown by the development 
	organization using test, analysis, inspection ,  demonstration, simulation, similarity, 
	sampling, or other method to meet a requirement allocated to the system</p>
	<note>This is a requirement on the development organization and not on the system. </note>
	<note>This is performed to confirm that the deployed system will meet the requirements</note>
	
	<p><b>verification event </b>(47) </p> <p> occurrence (with date, performer and result) of a comparison of a requirement against 
	the test, analysis, or inspection results of a design or instance of a system</p>
	
	<p><b>verification procedure </b>(48) </p> <p> describes the process used to compare a requirement against the test, analysis, 
	or inspection results of a design or instance of a system</p>
	<example>1. For a complex digital 
	system the procedure may require the application of a suite of test vectors to the digital 
	system along with environmental tests involving temperature stress and vibration. </example>
	<example>2. For a complex metal system the procedure may require the application of several nondestructive 
	tests to ensure that there are no flaws preset that will cause failure</example>
	
	<p><b>verification configuration </b>(49) </p> <p> arrangement of system and infrastructure necessary to perform the test, analysis, or 
	inspection of a design or instance of a system</p>
	
	<p><b>verification plan </b>(50) </p> <p> the schedule of tasks, task durations, start times, end times, task inputs, task 
	outputs, goals, and resources (both personnel and infrastructure) to perform the test, 
	analysis, or inspection of a design or instance of a system</p>
	
	<p><b>organization </b>(51) </p> <p>  description of the roles of persons in a group or team 
	ordered definition list</p>
	
	<p><b>issue </b>(52) </p> <p> any question raised concerning the system or the system development</p>
	
	<p><b>risk </b>(53) </p> <p> likelihood and impact of failure to meet any technical or development program goal</p>
	
	<p><b>verification requirement status </b>(54) </p> <p> describes the result of a verification  event</p>
	<example>For a complex digital system the procedure may require the application of a suite of 
	test vectors to the digital system along with environmental tests involving temperature stress 
	and vibration.  The result describes the test coverage and the tests passed and failed</example>
	
	<p><b>validation requirement </b>(55) </p> <p> statement of how a system requirement, design or instance shall be shown by the development 
	organization to meet stakeholder needs </p>
	<note>This is to confirm that the requirements are suitable for the marketplace. </note>
	<example>Proctor and Gamble recently acquired an electric toothbrush product, SpinBrush, from four 
	Cleveland area entrepreneurs. Out of a panel of twenty four consumers, twenty three raved about 
	the product. Sales have been sufficient to boost Proctor and Gamble to number 1 position in US oral care.</example>
	
	<p><b>validation event </b>(56) </p> <p> occurrence (with date, performer and result) of a comparison of a requirement against the 
	stakeholder needs</p>
	
	<p><b>validation procedure </b>(57) </p> <p> describes the process used to compare a requirement against stakeholder needs</p>
	<note>1. This is a requirement on the development organization and not on the system.</note>
	<note>2. The procedures may include stakeholder and market surveys, and test marketing.</note>
	
	<p><b>validation infrastructure </b>(58) </p> <p> arrangement of requirement information and related infrastructure necessary to check the 
	correspondence with stakeholder needs and market realities</p>
	
	<p><b>validation plan </b>(59) </p> <p> the schedule of tasks, inputs, outputs, goals, and resources, both personnel and infrastructure 
	to perform the comparison of requirements against stakeholder needs</p>
	
	<p><b>validation requirement status </b>(60) </p> <p> describes the result of the validation event</p>
	<note>Entire new product lines 
	have been abandoned after completed development because of unsatisfactory consumer panel 
	responses and unsatisfactory test marketing.</note>

   </annex_clause>
</annex_clause>

<annex_clause title="Category">
<p>
The decomposition tree for Part is more than a simple parts tree. At any node one may 
introduce a category of parts. For example, an automobile may have several different engines 
that can be used in the automobile, each providing a different level of economy and performance.
</p>
<p>
Categories are a grouping of elements into a set based on defined properties that serve as 
selection criteria for which elements of all those in the universe belong in that set Explanation: 
It is categorization that enables us to define alternatives and create taxonomies for libraries. 
This is one of the forms of  generalization/specialization. Note that this is NOT INHERITANCE as 
found in object-oriented software languages. Physical elements, matter and energy, do not inherit 
their properties. Rather they posses the properties of themselves and can be identified by 
measurement of those properties. For a discussion of these issues in computer science see the work 
of Barbara Liskov and her CLU language.
</p>
<note>The subcategories may be exclusive or inclusive and the subcategories may exhaust the super 
category or not there are four such possibilities 
</note>
<p>
Category is the basic concept in the physical world to support specialization - generalization.
</p>

</annex_clause>


<annex_clause title="Linking semantics of systems engineering and information model">
	<p>The information modelling constructs used to enable the ISO 10303 Application Protocols of ISO 10303 
	use semantics that do not exactly align with the semantics commonly used with the domain of 
	systems engineering.</p>  
	
	<p>While it is impossible to provide a complete semantics comparison list the following definitions
	capture the ISO 10303 modelling distinction made between views of system design and system realization.  This
	distinction is foundational to this part of ISO 10303.  Once it is seen other relations build upon eachother and 
	follow in a non-trivial manner.</p>
	
	<p><b>design view</b> </p> <p>a partial view of the system that captures only design information; it 
	contains no information about realized, manufactured things that may have lot numbers or serial numbers</p>
	<note>Several different design hierarchies can exist for different purposes. The hierarchy 
	appropriate for manufacturing may contain more elements than the one for engineering design by 
	including materials used in manufacture. The hierarchy for verification of first system built 
	may be different than others because of the need to build parts of the system for early 
	testing to reduce technical risk.</note>
	<example>This definition corresponds to the ISO 10303 convention of separately representing design 
	and realization. ISO 10303 uses the name Part to represent design .</example>
	
	<p><b>realization view</b> </p> <p>a partial view of the system that captures only information relating to realized things 
	that may have lot numbers or serial numbers</p>
	<note>Several different realization hierarchies can exist for different purposes. The hierarchy 
	appropriate for manufacturing may contain more elements than the one for maintenance because 
	that discipline emphasizes line replaceable units.</note>
	<example>This definition corresponds to the ISO 10303 convention of separately 
	representing design and realization. ISO 10303 uses Product_as_realized to represent realized things.</example>
	
	<p><b>functional breakdown</b> </p> <p>a particular collection of functional and other entities collected for a particular 
	engineering purpose</p>
	<note>These collections allow an engineer to examine functionality for special purposes, 
	picking those elements needed from the prototypical design and realization views.</note>
	<example>An engineer may wish to study the cooling system of a car engine and require a 
	collection of entities distributed through the prototypical design or realization hierarchies.</example>
	
	<p><b>system breakdown</b> </p> <p>a particular collection of system and other entities collected for a particular 
	engineering purpose</p>
	<note>These collections allow an engineer to examine subsystems for special purposes, 
	picking those elements needed from the prototypical system, design and realization views.</note>
	<example>An engineer  may wish to study the cooling system of a car engine and require 
	a collection of entities distributed through the prototypical design or realization hierarchies.</example>
	
	<p><b>physical breakdown</b> </p> <p>a particular collection of realized things and other entities collected  for a particular 
	engineering purpose</p>
	<note>These collections allow an engineer to examine physical realizations for special 
	purposes, picking those elements needed from the prototypical system, design and realization views.</note>
	<example>An engineer  may wish to study the cooling system of a car engine and require a 
	collection of entities distributed through the prototypical design or realization hierarchies.</example>

</annex_clause>
</annex_clause>
</tech_disc>


<bibliography>
 
  <bibitem.inc ref="ISOPAS20542"/>

  <bibitem.inc ref="ISO-IEC-1220"/>

 <!-- ABF I could not find a reason to retain this citation 
 <bibitem.inc ref="ISOIEC8859-1_1987"/>
-->

  <bibitem.inc ref="ISO-IEC-15288"/>

  <bibitem.inc ref="ISO-IEC-19501c1.4.2"/>  

  <bibitem.inc ref="IEEE-IDEF0-1998"/>

  <bibitem.inc ref="OMG-UML-v2.1.2"/>  
  
  <bibitem.inc ref="W3COWLLR"/>
  
  <bibitem.inc ref="BLANCHARD1998"/>
  
  <bibitem.inc ref="HERZOG2004"/>
  
  <bibitem.inc ref="OLIVER1997"/>
  
  <bibitem.inc ref="LONG2002"/>
  
  <bibitem.inc ref="SAGE2009"/>

  <bibitem.inc ref="INCOSE2007"/>
  
  <bibitem.inc ref="NASA2007"/>
  
</bibliography>
</application_protocol>
