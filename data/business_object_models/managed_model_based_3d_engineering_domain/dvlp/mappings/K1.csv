BO;Attribute;ARM Element;Source;Rules;Reference path
ActuatedPair;;Actuated_kinematic_pair;442;;
;ActuatedPair to ActuatedDirectionEnum (as rx);Actuated_kinematic_pair.r_x;;;
;ActuatedPair to ActuatedDirectionEnum (as ry);Actuated_kinematic_pair.r_y;;;
;ActuatedPair to ActuatedDirectionEnum (as rz);Actuated_kinematic_pair.r_y;;;
;ActuatedPair to ActuatedDirectionEnum (as tx);Actuated_kinematic_pair.t_x;;;
;ActuatedPair to ActuatedDirectionEnum (as ty);Actuated_kinematic_pair.t_y;;;
;ActuatedPair to ActuatedDirectionEnum (as tz);Actuated_kinematic_pair.t_z;;;
HighOrderKinematicPair;;High_order_kinematic_pair;442;;
;HighOrderKinematicPair to Curve (as curveOrSurface1);PATH;;;"# if pair is of kind linear_flexible_and_planar_curve_pair
(High_order_kinematic_pair => Linear_flexible_and_planar_curve_pair
Linear_flexible_and_planar_curve_pair.pair_curve -> Curve)

# if pair is of kind planar_curve_pair
# if pair is of kind rolling_curve_pair
# if pair is of kind sliding_curve_pair
(High_order_kinematic_pair => Planar_curve_pair
Planar_curve_pair.curve_1 -> Curve)

# if pair is of kind point_on_planar_curve_pair
(High_order_kinematic_pair => Point_on_planar_curve_pair
Point_on_planar_curve_pair.pair_curve -> Curve)"
;HighOrderKinematicPair to Surface (as curveOrSurface1);PATH;;;"# if pair is of kind point_on_surface_pair
(High_order_kinematic_pair => Point_on_surface_pair
Point_on_surface_pair.pair_surface -> Surface)

# if pair is of kind point_on_surface_pair
# if pair is of kind rolling_surface_pair
# if pair is of kind sliding_surface_pair
(High_order_kinematic_pair => Surface_pair
Surface_pair.surface_1 -> Surface)"
;HighOrderKinematicPair to Curve (as curveOrSurface2);PATH;;;"# if pair is of kind planar_curve_pair
# if pair is of kind rolling_curve_pair
# if pair is of kind sliding_curve_pair
High_order_kinematic_pair => Planar_curve_pair
Planar_curve_pair.curve_2 -> Curve"
;HighOrderKinematicPair to Surface (as curveOrSurface2);PATH;;;"# if pair is of kind point_on_surface_pair
# if pair is of kind rolling_surface_pair
# if pair is of kind sliding_surface_pair
High_order_kinematic_pair => Surface_pair
Surface_pair.surface_2 -> Surface"
;HighOrderKinematicPair to HighOrderKinematicPairTypeEnum (as kind);PATH;;;"# if pair is of kind linear_flexible_and_planar_curve_pair
(High_order_kinematic_pair => Linear_flexible_and_planar_curve_pair)
# if pair is of kind point_on_surface_pair
(High_order_kinematic_pair => Point_on_surface_pair)
# if pair is of kind point_on_planar_curve_pair
(High_order_kinematic_pair => Point_on_planar_curve_pair)
# if pair is of kind planar_curve_pair
(High_order_kinematic_pair => Planar_curve_pair)
# if pair is of kind rolling_curve_pair
(High_order_kinematic_pair => )
Planar_curve_pair => Rolling_curve_pair)
# if pair is of kind sliding_curve_pair
(High_order_kinematic_pair => 
Planar_curve_pair => Sliding_curve_pair)
# if pair is of kind rolling_surface_pair
(High_order_kinematic_pair => 
Surface_pair => Rolling_surface_pair)
# if pair is of kind sliding_surface_pair
(High_order_kinematic_pair => 
Surface_pair => Sliding_surface_pair)"
;HighOrderKinematicPair to PlaneAngleMeasure (as lowerLimitPitch);PATH;;;"# if pair is of kind point_on_surface_pair
(High_order_kinematic_pair =>                    
Point_on_surface_pair => 
Point_on_surface_pair_with_range
Point_on_surface_pair_with_range.lower_limit_pitch)

# if pair is of kind planar_curve_pair
# if pair is of kind rolling_curve_pair
# if pair is of kind sliding_curve_pair,
(High_order_kinematic_pair =>                    
Point_on_planar_curve_pair => 
Point_on_planar_curve_pair_with_range
Point_on_planar_curve_pair_with_range.lower_limit_pitch)
"
;HighOrderKinematicPair to PlaneAngleMeasure (as lowerLimitRoll);PATH;;;"# if pair is of kind point_on_surface_pair
High_order_kinematic_pair =>                    
Point_on_surface_pair => 
Point_on_surface_pair_with_range
Point_on_surface_pair_with_range.lower_limit_roll

# if pair is of kind planar_curve_pair
# if pair is of kind rolling_curve_pair
# if pair is of kind sliding_curve_pair,
High_order_kinematic_pair =>                    
Point_on_planar_curve_pair => 
Point_on_planar_curve_pair_with_range
Point_on_planar_curve_pair_with_range.lower_limit_roll
"
;HighOrderKinematicPair to PlaneAngleMeasure (as lowerLimitYaw);PATH;;;"# if pair is of kind point_on_surface_pair
(High_order_kinematic_pair =>                    
Point_on_surface_pair => 
Point_on_surface_pair_with_range
Point_on_surface_pair_with_range.lower_limit_yaw)

# if pair is of kind planar_curve_pair
# if pair is of kind rolling_curve_pair
# if pair is of kind sliding_curve_pair,
(High_order_kinematic_pair =>                    
Point_on_planar_curve_pair => 
Point_on_planar_curve_pair_with_range
Point_on_planar_curve_pair_with_range.lower_limit_yaw)

# if pair is of kind rolling_surface_pair
# if pair is of kind sliding_surface_pair
(High_order_kinematic_pair =>                    
Surface_pair => 
Surface_pair_with_range
Surface_pair_with_range.lower_limit_actual_rotation)"
;HighOrderKinematicPair to ExternalGeometricModel (as model1);PATH;;;"High_order_kinematic_pair <=
Kinematic_pair
Kinematic_pair <-
Pair_representation_relationship.transformation_operator
Pair_representation_relationship
Pair_representation_relationship.rep_1 ->
Kinematic_link_representation <-
Kinematic_link_representation_association.rep_1
Kinematic_link_representation_association
Kinematic_link_representation_association.rep-2 ->
Geometric_model 
Geometric_model => External_geometric_model"
;HighOrderKinematicPair to ExternalGeometricModel (as model2);PATH;;;"High_order_kinematic_pair <=
Kinematic_pair
Kinematic_pair <-
Pair_representation_relationship.transformation_operator
Pair_representation_relationship
Pair_representation_relationship.rep_2 ->
Kinematic_link_representation <-
Kinematic_link_representation_association.rep_1
Kinematic_link_representation_association
Kinematic_link_representation_association.rep-2 ->
Geometric_model 
Geometric_model => External_geometric_model"
;orientation;PATH;;;"# if pair is of kind linear_flexible_and_planar_curve_pair
(High_order_kinematic_pair => Linear_flexible_and_planar_curve_pair
Linear_flexible_and_planar_curve_pair.orientation)

# if pair is of kind planar_curve_pair
# if pair is of kind rolling_curve_pair
# if pair is of kind sliding_curve_pair
(High_order_kinematic_pair => Planar_curve_pair
Planar_curve_pair.orientation)

# if pair is of kind point_on_planar_curve_pair
(High_order_kinematic_pair => Point_on_planar_curve_pair
Point_on_planar_curve_pair.orientation)

# if pair is of kind point_on_surface_pair
# if pair is of kind rolling_surface_pair
# if pair is of kind sliding_surface_pair
(High_order_kinematic_pair => Surface_pair
Surface_pair.orientation)"
;HighOrderKinematicPair to RectangularTrimmedSurface (as range1);PATH;;;"# if pair is of kind point_on_surface_pair
(High_order_kinematic_pair =>                    
Point_on_surface_pair => 
Point_on_surface_pair_with_range
Point_on_surface_pair_with_range.range_on_pair_surface -> Trimmed_surface)

# if pair is of kind rolling_surface_pair
# if pair is of kind sliding_surface_pair
(High_order_kinematic_pair =>                    
Surface_pair => 
Surface_pair_with_range
Surface_pair_with_range.range_on_surface_1 -> Trimmed_surface)"
;HighOrderKinematicPair to TrimmedCurve (as range1);PATH;;;"# if pair is of kind planar_curve_pair
# if pair is of kind rolling_curve_pair
# if pair is of kind sliding_curve_pair,
High_order_kinematic_pair =>                    
Point_on_planar_curve_pair => 
Point_on_planar_curve_pair_with_range
Point_on_planar_curve_pair_with_range.range_on_pair_curve -> Trimmed_curve

# if pair is of kind point_on_planar_curve_pair
High_order_kinematic_pair =>                    
Planar_curve_pair => 
Planar_curve_pair_range
Planar_curve_pair_range.range_on_curve_1 -> Trimmed_curve
"
;HighOrderKinematicPair to RectangularTrimmedSurface (as range2);PATH;;;"# if pair is of kind point_on_planar_curve_pair
High_order_kinematic_pair =>                    
Planar_curve_pair => 
Planar_curve_pair_range
Planar_curve_pair_range.range_on_curve_2 -> Trimmed_curve"
;HighOrderKinematicPair to TrimmedCurve (as range2);PATH;;;"# if pair is of kind rolling_surface_pair
# if pair is of kind sliding_surface_pair
High_order_kinematic_pair =>                    
Surface_pair => 
Surface_pair_with_range
Surface_pair_with_range.range_on_surface_2 -> Trimmed_surface"
;HighOrderKinematicPair to PlaneAngleMeasure (as upperLimitPitch);PATH;;;"# if pair is of kind point_on_surface_pair
High_order_kinematic_pair =>                    
Point_on_surface_pair => 
Point_on_surface_pair_with_range
Point_on_surface_pair_with_range.upper_limit_pitch

# if pair is of kind planar_curve_pair
# if pair is of kind rolling_curve_pair
# if pair is of kind sliding_curve_pair,
High_order_kinematic_pair =>                    
Point_on_planar_curve_pair => 
Point_on_planar_curve_pair_with_range
Point_on_planar_curve_pair_with_range.upper_limit_pitch
"
;HighOrderKinematicPair to PlaneAngleMeasure (as upperLimitRoll);PATH;;;"# if pair is of kind point_on_surface_pair
(High_order_kinematic_pair =>                    
Point_on_surface_pair => 
Point_on_surface_pair_with_range
Point_on_surface_pair_with_range.upper_limit_roll)

# if pair is of kind planar_curve_pair
(High_order_kinematic_pair =>                    
Point_on_planar_curve_pair => 
Point_on_planar_curve_pair_with_range
Point_on_planar_curve_pair_with_range.upper_limit_roll)"
;HighOrderKinematicPair to PlaneAngleMeasure (as upperLimitYaw);PATH;;;"# if pair is of kind point_on_surface_pair
# if pair is of kind rolling_surface_pair
# if pair is of kind sliding_surface_pair
(High_order_kinematic_pair =>                    
Point_on_surface_pair => 
Point_on_surface_pair_with_range
Point_on_surface_pair_with_range.upper_limit_yaw)

# if pair is of kind planar_curve_pair
# if pair is of kind rolling_curve_pair
# if pair is of kind sliding_curve_pair,
(High_order_kinematic_pair =>                    
Point_on_planar_curve_pair => 
Point_on_planar_curve_pair_with_range
Point_on_planar_curve_pair_with_range.upper_limit_yaw)

# if pair is of kind rolling_surface_pair
# if pair is of kind sliding_surface_pair
(High_order_kinematic_pair =>                    
Surface_pair => 
Surface_pair_with_range
Surface_pair_with_range.upper_limit_actual_rotation)"
InterpolatedConfigurationModel;;Interpolated_configuration_representation;442;;
;InterpolatedConfigurationModel to InterpolatedConfigurationSequence (as items);PATH;;;"Interpolated_configuration_representation.items[i] ->
Interpolated_configuration_sequence"
;InterpolatedConfigurationModel to Unit (as parameterUnit);PATH;;;"Interpolated_configuration_representation.items[i] -> Interpolated_configuration_sequence
Interpolated_configuration_sequence.context_of_items ->
Geometric_representation_context_with_parameter
Geometric_representation_context_with_parameter.parameter_unit ->
Unit"
InterpolatedConfigurationSegment;;Interpolated_configuration_segment;442;;
;InterpolatedConfigurationSegment to InterpolationTypeEnum (as interpolation);Interpolated_configuration_segment.interpolation;;;Interpolated_configuration_segment
;InterpolatedConfigurationSegment to MechanismState (as state);PATH;;;
;InterpolatedConfigurationSegment to ParameterValue (as tParameter);PATH;;;"Interpolated_configuration_segment.t_parameter ->
parameter_value"
InterpolatedConfigurationSequence;;Interpolated_configuration_sequence;442;;
;InterpolatedConfigurationSequence to InterpolatedConfigurationSegment (as segments);PATH;;;"Interpolated_configuration_sequence.segments[i] ->
Interpolated_configuration_segment"
KinematicLink;;Kinematic_link_representation;442;;
;KinematicLink to AxisPlacement (as items);PATH;;;"Kinematic_link_representation.items[i] ->
Axis_placement_3d"
;KinematicLink to ExternalGeometricModel (as ofModel);PATH;;;"Kinematic_link_representation <-
Kinematic_link_representation_association.rep_1
Kinematic_link_representation_association.rep_2 ->
Geometric_model =>
External_geometric_model"
KinematicLinkToOccurrenceAssociation;;Context_dependent_kinematic_link_representation;442;;
;KinematicLinkToOccurrenceAssociation to KinematicLink (as associatedLink);PATH;;;Context_dependent_kinematic_link_representation
;KinematicLinkToOccurrenceAssociation to AssemblyOccurrenceRelationship (as associatedTo);PATH;;;"Context_dependent_kinematic_link_representation.represented_product_relation ->
Product_definition_relationship_kinematics"
KinematicMechanismAssociation;;Kinematic_property_mechanism_representation;442;;"Product_definition_relationship_kinematics.described_element ->
Assembly_component_relationship"
;KinematicMechanismAssociation to Mechanism (as associatedMechanism);PATH;;;"Kinematic_property_mechanism_representation.used_representation ->
Mechanism_representation"
;KinematicMechanismAssociation to AssemblyDefinition (as associatedTo);PATH;;;"Kinematic_property_mechanism_representation <=
Kinematic_property_definition_representation
Kinematic_property_definition_representation.definition ->
Product_definition_kinematics
Product_definition_kinematics.described_element ->
Part_view_definition => 
Assembly_definition"
;KinematicMechanismAssociation to KinematicLink (as baseLink);PATH;;;"Kinematic_property_mechanism_representation.base ->
Kinematic_link_representation"
KinematicPair;;Pair_representation_relationship;442;;
;KinematicPair to ActuatedPair (as actuation);PATH;;;"Pair_representation_relationship.transformation_operator ->
Kinematic_pair
Kinematic_pair => Actuated_kinematic_pair"
;KinematicPair to KinematicLink (as link1);PATH;;;"Pair_representation_relationship.rep_1 ->
Kinematic_link_representation"
;KinematicPair to KinematicLink (as link2);PATH;;;"Pair_representation_relationship.rep_2 ->
Kinematic_link_representation"
;KinematicPair to AxisPlacement (as pairFrame1);PATH;;;"Pair_representation_relationship.transformation_operator ->
Kinematic_pair
Kinematic_pair.transform_item_1 -> 
rigid_placement = Axis_placement_3d"
;KinematicPair to AxisPlacement (as pairFrame2);PATH;;;"Pair_representation_relationship.transformation_operator ->
Kinematic_pair
Kinematic_pair.transform_item_2 -> 
rigid_placement = Axis_placement_3d"
KinematicPairValue;;Pair_value;442;;
;KinematicPairValue to PointOnCurve (as actualPointOnCurve1);PATH;;;"# if pair is of kind point_on_planar_curve_pair
(Pair_value => Point_on_planar_curve_pair_value
Point_on_planar_curve_pair_value.actual_point_on_curve)

# if pair is of kind sliding_curve_pair
(Pair_value => Sliding_curve_pair_value
Sliding_curve_pair_value.actual_point_on_curve_1)"
;KinematicPairValue to PointOnCurve (as actualPointOnCurve2);PATH;;;"# if pair is of kind sliding_curve_pair
(Pair_value => Sliding_curve_pair_value
Sliding_curve_pair_value.actual_point_on_curve_2)

# if pair is of kind rolling_curve_pair
(Pair_value => Rolling_curve_pair_value
Rolling_curve_pair_value.actual_point_on_curve_1)"
;KinematicPairValue to PointOnSurface (as actualPointOnSurface1);PATH;;;"# if pair is of kind point_on_surface_pair
(Pair_value => Point_on_surface_pair_value
Point_on_surface_pair_value.actual_point_on_surface)

# if pair is of kind sliding_surface_pair
(Pair_value => Sliding_surface_pair_value
Sliding_surface_pair_value.actual_point_on_surface_1)

# if pair is of kind rolling_surface_pair
(Pair_value => Rolling_surface_pair_value
Rolling_surface_pair_value.actual_point_on_surface)"
;KinematicPairValue to PointOnSurface (as actualPointOnSurface2);PATH;;;"# if pair is of kind sliding_surface_pair
Pair_value => Sliding_surface_pair_value
Sliding_surface_pair_value.actual_point_on_surface_2"
;KinematicPairValue to RotationAboutAxes (as actualRotation);PATH;;;"# if pair is of kind sliding_surface_pair
(Pair_value => Sliding_surface_pair_value
Sliding_surface_pair_value.actual_rotation)

# if pair is of kind rolling_surface_pair
(Pair_value => Rolling_surface_pair_value
Rolling_surface_pair_value.actual_rotation)

# if pair is of kind cylindrical_pair
(Pair_value => Cylindrical_pair_value
Cylindrical_pair_value.actual_rotation)

# if pair is of kind planar_pair
(Pair_value => Planar_pair_value
Planar_pair_value.actual_rotation)

# if pair is of kind universal_pair
(Pair_value => Universal_pair_value
Universal_pair_value.first_rotation_angle
Universal_pair_value.second_rotation_angle)

# if pair is of kind gear_pair
(Pair_value => Gear_pair_value
Gear_pair_value.actual_rotation_1)

# if pair is of kind revolute_pair
(Pair_value => Revolute_pair_value
Revolute_pair_value.actual_rotation)

# if pair is of kind screw_pair
(Pair_value => Screw_pair_value
Screw_pair_value.actual_rotation)"
;KinematicPairValue to RotationAboutDirection (as actualRotation);PATH;;;"# if pair is of kind point_on_planar_curve_pair
(Pair_value => Point_on_planar_curve_pair_value
Point_on_planar_curve_pair_value.input_orientation)

# if pair is of kind point_on_surface_pair
(Pair_value => Point_on_surface_pair_value
Point_on_surface_pair_value.input_orientation)

# if pair is of kind spherical_pair or spherical_pair_with_pin
(Pair_value => Spherical_pair_value
Spherical_pair_value.input_orientation)

# if pair is of kind unconstrained_pair
(Pair_value => Unconstrained_pair_value
Unconstrained_pair_value.actual_placement ->
Axis_placement_3d
Axis_placement_3d.origin ->
Cartesian_point
[Cartesian_point.x_axis -> Direction]
[Cartesian_point.y_axis -> Direction])"
;KinematicPairValue to TranslationAlongAxes (as actualTranslation);PATH;;;"# if pair is of kind cylindrical_pair
(Pair_value => Cylindrical_pair_value
Cylindrical_pair_value.actual_translation)

# if pair is of kind planar_pair
(Pair_value => Planar_pair_value
[Planar_pair_value.actual_translation_x
Planar_pair_value.actual_translation_y])

# if pair is of kind prismatic_pair
(Pair_value => Prismatic_pair_value
Prismatic_pair_value.actual_translation)

# if pair is of kind unconstrained_pair
(Pair_value => Unconstrained_pair_value
Unconstrained_pair_value.actual_placement ->
Axis_placement_3d
Axis_placement_3d.origin ->
Cartesian_point
Cartesian_point.coordinates)

# if pair is of kind rack_and_pinion_pair
(Pair_value => Rack_and_pinion_pair_value
Rack_and_pinion_pair_value.actual_displacement)"
;KinematicPairValue to KinematicPair (as appliesToPair);PATH;;;Pair_value.applies_to_pair
LowOrderKinematicPair;;Low_order_kinematic_pair;442;;
;LowOrderKinematicPair to LowOrderKinematicPairTypeEnum (as kind);PATH;;;"# if pair is of kind cylindrical_pair
(Low_order_kinematic_pair => Cylindrical_pair)
# if pair is of kind fully_constrained_pair
(Low_order_kinematic_pair => Fully_constrained_pair)
# if pair is of kind planar_pair
(Low_order_kinematic_pair => Planar_pair)
# if pair is of kind prismatic_pair
(Low_order_kinematic_pair => Prismatic_pair)
# if pair is of kind revolute_pair
(Low_order_kinematic_pair => Revolute_pair)
# if pair is of kind spherical_pair
(Low_order_kinematic_pair => Spherical_pair)
# if pair is of kind spherical_pair_with_pin
(Low_order_kinematic_pair => Spherical_pair_with_pin)
# if pair is of kind unconstrained_pair
(Low_order_kinematic_pair => Unconstrained_pair)
# if pair is of kind universal_pair
(Low_order_kinematic_pair => Universal_pair)"
;LowOrderKinematicPair to PlaneAngleMeasure (as lowerLimitActualRotationX);PATH;;;"# if pair is of kind spherical_pair
(Low_order_kinematic_pair =>
Spherical_pair =>
Spherical_pair_with_range
Spherical_pair_with_range.lower_limit_yaw)

# if pair is of kind spherical_pair_with_pin
(Low_order_kinematic_pair =>
Spherical_pair_with_pin =>
Spherical_pair_with_pin_and_range
Spherical_pair_with_pin_and_range.lower_limit_yaw)"
;LowOrderKinematicPair to PlaneAngleMeasure (as lowerLimitActualRotationY);PATH;;;"# if pair is of kind spherical_pair
Low_order_kinematic_pair =>
Spherical_pair =>
Spherical_pair_with_range
Spherical_pair_with_range.lower_limit_pitch"
;LowOrderKinematicPair to PlaneAngleMeasure (as lowerLimitActualRotationZ);PATH;;;"# if pair is of kind cylindrical_pair
(Low_order_kinematic_pair =>
Cylindrical_pair => 
Cylindrical_pair_with_range
Cylindrical_pair_with_range.lower_limit_actual_rotation)

# if pair is of kind planar_pair
(Low_order_kinematic_pair =>
Planar_pair =>
Planar_pair_with_range
Planar_pair_with_range.lower_limit_actual_rotation)

# if pair is of kind revolute_pair
(Low_order_kinematic_pair =>
Revolute_pair =>
Revolute_pair_with_range
Revolute_pair_with_range.lower_limit_actual_rotation)

# if pair is of kind spherical_pair
(Low_order_kinematic_pair =>
Spherical_pair =>
Spherical_pair_with_range
Spherical_pair_with_range.lower_limit_roll)

# if pair is of kind spherical_pair_with_pin
(Low_order_kinematic_pair =>
Spherical_pair_with_pin =>
Spherical_pair_with_pin_and_range
Spherical_pair_with_pin_and_range.lower_limit_roll)"
;LowOrderKinematicPair to LengthMeasure (as lowerLimitActualTranslationX);PATH;;;"# if pair is of kind planar_pair
Low_order_kinematic_pair =>
Planar_pair =>
Planar_pair_with_range
Planar_pair_with_range.lower_limit_actual_translation_x"
;LowOrderKinematicPair to LengthMeasure (as lowerLimitActualTranslationY);PATH;;;"# if pair is of kind planar_pair
Low_order_kinematic_pair =>
Planar_pair =>
Planar_pair_with_range
Planar_pair_with_range.lower_limit_actual_translation_y"
;LowOrderKinematicPair to LengthMeasure (as lowerLimitActualTranslationZ);PATH;;;"# if pair is of kind cylindrical_pair
(Low_order_kinematic_pair =>
Cylindrical_pair => 
Cylindrical_pair_with_range
Cylindrical_pair_with_range.lower_limit_actual_translation)

# if pair is of kind prismatic_pair
(Low_order_kinematic_pair =>
Prismatic_pair =>
Prismatic_pair_with_range
Prismatic_pair_with_range.lower_limit_actual_translation)"
;LowOrderKinematicPair to PlaneAngleMeasure (as upperLimitActualRotationX);PATH;;;"# if pair is of kind spherical_pair
(Low_order_kinematic_pair =>
Spherical_pair =>
Spherical_pair_with_range
Spherical_pair_with_range.upper_limit_yaw)

# if pair is of kind spherical_pair_with_pin
(Low_order_kinematic_pair =>
Spherical_pair_with_pin =>
Spherical_pair_with_pin_and_range
Spherical_pair_with_pin_and_range.upper_limit_yaw)"
;LowOrderKinematicPair to PlaneAngleMeasure (as upperLimitActualRotationY);PATH;;;"# if pair is of kind spherical_pair
Low_order_kinematic_pair =>
Spherical_pair =>
Spherical_pair_with_range
Spherical_pair_with_range.upper_limit_pitch"
;LowOrderKinematicPair to PlaneAngleMeasure (as upperLimitActualRotationZ);PATH;;;"# if pair is of kind cylindrical_pair
(Low_order_kinematic_pair =>
Cylindrical_pair => 
Cylindrical_pair_with_range
Cylindrical_pair_with_range.upper_limit_actual_rotation)

# if pair is of kind planar_pair
(Low_order_kinematic_pair =>
Planar_pair =>
Planar_pair_with_range
Planar_pair_with_range.upper_limit_actual_rotation)

# if pair is of kind revolute_pair
(Low_order_kinematic_pair =>
Revolute_pair =>
Revolute_pair_with_range
Revolute_pair_with_range.upper_limit_actual_rotation)

# if pair is of kind spherical_pair
(Low_order_kinematic_pair =>
Spherical_pair =>
Spherical_pair_with_range
Spherical_pair_with_range.upper_limit_roll)

# if pair is of kind spherical_pair_with_pin
(Low_order_kinematic_pair =>
Spherical_pair_with_pin =>
Spherical_pair_with_pin_and_range
Spherical_pair_with_pin_and_range.upper_limit_roll)"
;LowOrderKinematicPair to LengthMeasure (as upperLimitActualTranslationX);PATH;;;"# if pair is of kind planar_pair
(Low_order_kinematic_pair =>
Planar_pair =>
Planar_pair_with_range
Planar_pair_with_range.upper_limit_actual_translation_x)

# if pair is of kind prismatic_pair
(Low_order_kinematic_pair =>
Prismatic_pair =>
Prismatic_pair_with_range
Prismatic_pair_with_range.upper_limit_actual_translation)"
;LowOrderKinematicPair to LengthMeasure (as upperLimitActualTranslationY);PATH;;;"# if pair is of kind planar_pair
Low_order_kinematic_pair =>
Planar_pair =>
Planar_pair_with_range
Planar_pair_with_range.upper_limit_actual_translation_y"
;LowOrderKinematicPair to LengthMeasure (as upperLimitActualTranslationZ);PATH;;;"# if pair is of kind cylindrical_pair
Low_order_kinematic_pair =>
Cylindrical_pair => 
Cylindrical_pair_with_range
Cylindrical_pair_with_range.upper_limit_actual_translation"
LowOrderKinematicPairWithMotionCoupling;;Low_order_kinematic_pair_with_motion_coupling;442;;
;LowOrderKinematicPairWithMotionCoupling to PlaneAngleMeasure (as bevel);PATH;;;"# if pair is of kind gear_pair
Low_order_kinematic_pair_with_motion_coupling =>
Gear_pair
Gear_pair.bevel"
;gearRatio;PATH;;;"# if pair is of kind gear_pair
Low_order_kinematic_pair_with_motion_coupling =>
Gear_pair
Gear_pair.gear_ratio"
;LowOrderKinematicPairWithMotionCoupling to PlaneAngleMeasure (as helicalAngle);PATH;;;"# if pair is of kind gear_pair
Low_order_kinematic_pair_with_motion_coupling =>
Gear_pair
Gear_pair.helical_angle"
;LowOrderKinematicPairWithMotionCoupling to LowOrderKinematicPairWithMotionCouplingTypeEnum (as kind);PATH;;;"# if pair is of kind gear_pair
(Low_order_kinematic_pair_with_motion_coupling => Gear_pair)
# if pair is of kind linear_flexible_and_pinion_pair
(Low_order_kinematic_pair_with_motion_coupling => Linear_flexible_and_pinion_pair)
# if pair is of kind rack_and_pinion_pair
(Low_order_kinematic_pair_with_motion_coupling => Rack_and_pinion_pair)
# if pair is of kind screw_pair
(Low_order_kinematic_pair_with_motion_coupling => Screw_pair)"
;LowOrderKinematicPairWithMotionCoupling to PlaneAngleMeasure (as lowerLimitActualRotation);PATH;;;"# if pair is of kind gear_pair
(Low_order_kinematic_pair_with_motion_coupling =>
Gear_pair =>
Gear_pair_with_range
Gear_pair_with_range.lower_limit_actual_rotation_1)

# if pair is of kind screw_pair 
(Low_order_kinematic_pair_with_motion_coupling =>
Screw_pair =>
Screw_pair_with_range
Screw_pair_with_range.lower_limit_actual_rotation)"
;LowOrderKinematicPairWithMotionCoupling to LengthMeasure (as lowerLimitRackDisplacement);PATH;;;"# if pair is of kind rack_and_pinion_pair
Low_order_kinematic_pair_with_motion_coupling =>
Rack_and_pinion_pair =>
Rack_and_pinion_pair_with_range
Rack_and_pinion_pair_with_range.lower_limit_rack_displacement"
;LowOrderKinematicPairWithMotionCoupling to LengthMeasure (as pitch);PATH;;;"# if pair is of kind screw_pair 
Low_order_kinematic_pair_with_motion_coupling =>
Screw_pair
Screw_pair.pitch"
;LowOrderKinematicPairWithMotionCoupling to LengthMeasure (as radius1);PATH;;;"# if pair is of kind gear_pair
(Low_order_kinematic_pair_with_motion_coupling =>
Gear_pair
Gear_pair.radius_first_link)

# if pair is of kind linear_flexible_and_pinion_pair
(Low_order_kinematic_pair_with_motion_coupling =>
Linear_flexible_and_pinion_pair
Linear_flexible_and_pinion_pair.pinion_radius)

# if pair is of kind rack_and_pinion_pair
(Low_order_kinematic_pair_with_motion_coupling =>
Rack_and_pinion_pair
Rack_and_pinion_pair.pinion_radius)"
;LowOrderKinematicPairWithMotionCoupling to LengthMeasure (as radius2);PATH;;;"# if pair is of kind gear_pair
Low_order_kinematic_pair_with_motion_coupling =>
Gear_pair
Gear_pair.radius_second_link"
;LowOrderKinematicPairWithMotionCoupling to PlaneAngleMeasure (as upperLimitActualRotation);PATH;;;"# if pair is of kind gear_pair
(Low_order_kinematic_pair_with_motion_coupling =>
Gear_pair =>
Gear_pair_with_range
Gear_pair_with_range.upper_limit_actual_rotation_1)

# if pair is of kind screw_pair 
(Low_order_kinematic_pair_with_motion_coupling =>
Screw_pair =>
Screw_pair_with_range
Screw_pair_with_range.upper_limit_actual_rotation)"
;LowOrderKinematicPairWithMotionCoupling to LengthMeasure (as upperLimitRackDisplacement);PATH;;;"# if pair is of kind rack_and_pinion_pair
Low_order_kinematic_pair_with_motion_coupling =>
Rack_and_pinion_pair =>
Rack_and_pinion_pair_with_range
Rack_and_pinion_pair_with_range.upper_limit_rack_displacement"
Mechanism;;Mechanism_representation;442;;
;Mechanism to KinematicPair (as items);PATH;;;"Mechanism_representation.items[i] ->
Pair_representation_relationship"
MechanismState;;Mechanism_state_representation;442;;
;MechanismState to KinematicPairValue (as items);PATH;;;"Mechanism_state_representation.items[i] ->
Pair_value"
;MechanismState to Mechanism (as representedMechanism);PATH;;;Mechanism_state_representation.represented_mechanism
MotionModelAssociation;;Kinematic_property_definition_representation;442;;
;MotionModelAssociation to InterpolatedConfigurationModel (as associatedModel);PATH;;;"Kinematic_property_definition_representation <=
Property_definition_representation
Property_definition_representation.used_representation ->
Representation
Representation =>
Interpolated_configuration_representation"
;MotionModelAssociation to LinkMotionAlongPath (as associatedModel);PATH;;;"Kinematic_property_definition_representation <=
Property_definition_representation
Property_definition_representation.used_representation ->
Representation
Representation =>
Link_motion_representation_along_path"
;MotionModelAssociation to AssemblyDefinition (as associatedTo);PATH;;;"Kinematic_property_definition_representation ->
Product_definition_kinematics
Product_definition_kinematics.described_element ->
Part_view_definition
Part_view_definition => 
Assembly_definition"
RectangularTrimmedSurface;;Trimmed_surface;442;;
RotationAboutDirection;;Rotation_about_direction;442;;
;RotationAboutDirection to Direction (as directionOfAxis);PATH;;;"Rotation_about_direction.direction_of_axis ->
Direction"
;RotationAboutDirection to PlaneAngleMeasure (as rotationAngle);PATH;;;Rotation_about_direction.rotation_angle
ToolAttachmentPointFrame;;Tool_attachment_point_frame;442;;
ToolCentrePointFrame;;Tool_centre_point_frame;442;;
TrimmedCurve;;Trimmed_curve;442;;
