<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xsl/part1000/collection_page.xsl"?>
<!DOCTYPE collection_page [
<!ENTITY % characters SYSTEM "characters.ent"> 
%characters; 
]>
<collection_page page_type="main">
	<h2 id="arch">4 Architecture of ISO 10303</h2>
	<p>ISO 10303 has evolved over the past two decades; there are now two related architectures that govern the development of ISO 10303 standards.  They are referred to as the initial architecture and the modular architecture.  Both architectures adhere to the fundamental principles described in 3.3.  Both architectures are in effect, though new projects are encouraged to use the modular architecture.</p>
	<p>This clause explains the concepts behind the ISO 10303 architecture, describes the initial architecture, then explains the modular architecture. </p>
	<h3 id="arch_1">4.1 General</h3>
	<p>The architecture of ISO 10303 is designed to support the development of standards for product data exchange and product data sharing.  The architecture is governed by the following concepts: (1) the scope of what is standardized and what is conformance tested is set at the level of “an application,” (2) application requirements are based on a model of a business activity, (3) application requirements are standardized using natural language, and (4) a mapping is specified defining how the application requirements are satisfied using the integrated resources.</p>
	<p>ISO 10303 is implemented through application protocols.  An AP consists of the following major elements:</p>
	<ul>
	<li>An <a href="2_defs.htm#term_application_activity_model">application activity model</a> (AAM) describing the business process the information model supports.</li>
	<li>An <a href="2_defs.htm#term_application_reference_model">application reference model</a> (ARM) specifying the information requirements.</li>
	<li>A schema for data structures based on the <a href="2_defs.htm#term_integrated_resource">integrated resources</a> (IRs), called an <a href="2_defs.htm#term_application_interpreted_model">application interpreted model<a/> (AIM), that is the basis for implementations of the standard.</li>
</ul>
<p>ISO 10303 architects made a conscious decision to focus on the information required by industrial processes rather than on the processes themselves as the processes may change over time while the underlying information requirements are longer lasting. This focus on information allows STEP to support data exchange, some forms of data sharing, as well as long-term data retention. </p>

<!-- stuff cut from section 5
  <h4 id="struct_2_2">5.2.2 Graphical presentation of models</h4>
  <p>
    The graphical presentation of models to illustrate normative data definitions is informative in all
    cases. The four types of models within this International Standard using graphical presentations
    are:
  </p>
  <ul>
    <li>resource constructs within integrated resources;</li>
    <li>AAMs;</li>
    <li>ARMs;</li>
    <li>AIMs.</li>
  </ul>
  <p>
    Graphical presentations are provided to aid in understanding the definitions presented in each
    part. Different graphical presentations that are used within ISO 10303 include:
    
  </p>
  
  <ul>
    
    <li>EXPRESS-G: the graphical representation of EXPRESS, used as an informative supplement to textual EXPRESS data models;</li>
    
    <li>IDEF0: an activity modelling notation [2] used for AAMs within
      application protocols;
    </li>
    
    <li>IDEFlX: the graphical representation used in the IDEFlX information modelling
      method [3] used for ARMs in some APs;
    </li>
    
    <li>NIAM: the graphical representation used within the NIAM information modelling
      method [4] used for ARMs in some APs.
    </li>	
    
  </ul>
-->

	<h3 id="arch_2">4.2 Initial architecture</h3>
<p>One of the fundamental principles of ISO 10303 is that whenever a resource construct is used to represent the same information requirement in different application protocols, the same interpretation of that resource construct is used.  One of the first modifications to the ISO 10303 architecture was the addition of <a href="2_defs.term_application_interpreted_construct">application interpreted constructs</a>. </p><p><a href="2_defs.term_application_interpreted_construct">Application interpreted constructs</a> were introduced to the ISO 10303 architecture to ensure consistency of interpretation and thus enable cooperative use of multiple APs in a business enterprise.  An AIC specifies a piece of an AIM that may be used to exchange product data common to two or more APs.  However, an AIC does not document the common requirements or the mapping of those requirements into the AIM.</p>
	<p>An <a href="2_defs.htm#term_application_protocol">AP</a> compliant with initial architecture is called a "monolithic AP".</p>
	<h3 id="arch_3">4.3 Modular architecture</h3>
<p>The objective of the ISO 10303 modularization effort is to enable the more efficient technical development, standardization, implementation and deployment of ISO 10303 standards without changing the fundamentals of the current technical architecture.  The ISO 10303 architecture continues to be based on standardizing industry requirements and mapping those requirements to a data model based on the integrated resources, the process known as interpretation.</p>
<p>The primary change introduced by the new modular architecture is the explicit harmonization of common information requirements.  Rather than relying on harmonization occurring as a by-product of consistent interpretation across APs, module requirements are first harmonized across domains and the resulting mappings are standardized in smaller packages, known as application modules (AMs).  AMs are reused by other AMs and ultimately in APs. </p>
<p>The implementable portion of the modular architecture has two core components:</p>
<ul>
<li><a href="2_defs.htm#term_application_module">Application module</a> (AM) - A small, reusable data specification documented with an ARM; mapping; interpreted schema; and usage guide.</li>
<li><a href="2_defs.htm#term_application_protocol">Application protocol<a> (AP) - The use of a data specification to meet the requirements of some business process.</li>
</ul>
<p>The objectives and function of the architectural components are described below. 
</p>
	<h4 id="arch_31">4.3.1 Application Module</h4>
<p>
An application module is designed to maximize reusability of the harmonized requirements and the associated interpretation into the integrated resources, the data specification, and thus, software implementations.  This supports reusability by the standards developer, implementer, and user.</p>
<p>Application modules replace AICs in the modular architecture. The objectives of AICs and AMs are similar.  They both standardize interpretation results for reuse in multiple APs.  However, AICs and AMs are created differently and have different content.  AMs, unlike AICs, contain harmonized information requirements and specifications of the mappings of those requirements to the IRs. An objective of modularization is to document a concept one time and then to directly reuse that concept in other modules. An AIC is only created when a concept has already been documented in two or more APs.</p>
<p>The modular approach calls for the use of EXPRESS rather than natural language for the documentation of requirements, i.e., the ARM, in an application module.  This allows the use of tools to validate the dependencies between application module ARMs. It has the added benefit of allowing for the future use of an in-development EXPRESS mapping language called EXPRESS-X [8] that will make the requirements-to-resources mapping computer interpretable as well.</p>
	<h4 id="arch_32">4.3.2 Application Protocol</h4>
<p>A modular AP is a documented use of an application module for a specific business process. A single, normatively referenced AM is the data specification for the AP.  This AM uses other normative AMs and may include specific business process rules or constraints.  The AP document contains an activity model and conformance class definitions.  Industry terminology mappings from the generic AM terminology may be defined in an AP to make it more understandable to reviewers from the application domain. A modular AP references, through a high-level module, a collection of related AMs that provide the documentation of its requirements and interpreted model.</p>

	<p>An <a href="2_defs.htm#term_application_protocol">AP</a> compliant with modular architecture is called a "modular AP".</p>

<!-- abf stuff pulled from section 5

  <p>The ISO 10303 modular architecture is intended to:</p>
  
  <ul>
    
    <li>
      ensure the ability to implement a combination of subsets of multiple
      APs, or to extend existing APs to meet a business need;
    </li>
    
    
    <li>
      ensure the ability to reuse application software developed to support
      one AP in the development of an implementation of another AP with the same,
      or similar, requirements;
    </li>
    
    
    <li>
      avoid the duplication and repeated documentation of the same requirements
      in different application protocols, leading to potentially different solutions
      for the same requirements;
    </li>
    
    
    <li>
      ensure the ability to reuse data generated by an implementation of one
      or more APs by an implementation of one or more different APs.
    </li>
    
  </ul>
-->
</collection_page>
