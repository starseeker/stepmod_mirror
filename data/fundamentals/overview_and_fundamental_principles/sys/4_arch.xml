<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xsl/part1000/collection_page.xsl"?>
<!DOCTYPE collection_page [
<!ENTITY % characters SYSTEM "characters.ent"> 
<!ENTITY % terms SYSTEM "terms.ent"> 
%characters; 
%terms; 
]>
<collection_page page_type="main">
	<h2 id="arch">4 Architecture of ISO 10303</h2>
	<p>ISO 10303 has evolved over the past two decades; there are
	now two related architectures that govern the development of
	ISO 10303 standards.  They are referred to as the initial
	architecture and the modular architecture.  Both architectures
	adhere to the fundamental principles described in 3.3.  Both
	architectures are in effect, though new projects are
	encouraged to use the modular architecture.</p>
	<p>This clause explains the concepts behind the ISO 10303
	architecture, describes the initial architecture, then
	explains the modular architecture. </p>
	<h3 id="arch_1">4.1 General</h3>
	<p>The architecture of ISO 10303 is designed to support the
	development of standards for &tr-product-data; exchange and &tr-product-data;
	sharing. The architecture is governed by the following
	concepts: (1) the scope of what is standardized and what is
	conformance tested is set at the level of an &tr-application;,
	(2) &tr-application; requirements are based on a model of a
	business activity, (3) &tr-application; requirements are
	standardized using natural language, and (4) a mapping is
	specified defining how the &tr-application; requirements are
	satisfied using the &tr-integrated-resources;.</p>
	<p>ISO 10303 is implemented through &tr-application-protocols;.  An
	&tr-AP; consists of the following major elements:</p>
	<ul>
	<li>An &tr-application-activity-model; (AAM) describing the business process
	the &tr-information-model; supports.</li>
	<li>An &tr-application-reference-model; (ARM) specifying the &tr-information;
	requirements.</li>
	<li>A schema for &tr-data; structures based on
	  the &tr-integrated-resources; (IRs), called
	  an &tr-application-interpreted-model; (AIM), that is the basis for
	  implementations of the standard.</li>
	</ul>
	<p>ISO 10303 architects made a conscious decision to focus on
	the &tr-information; required by industrial processes rather than
	on the processes themselves as the processes can change over
	time while the underlying &tr-information; requirements are longer
	lasting. This focus on &tr-information; allows STEP to support
	&tr-data-exchange;, some forms of &tr-data; sharing, as well as long-term
	&tr-data; retention. </p>

<!-- stuff cut from section 5
  <h4 id="struct_2_2">5.2.2 Graphical presentation of models</h4>
  <p>
    The graphical presentation of models to illustrate normative &tr-data; definitions is informative in all
    cases. The four types of models within this International Standard using graphical presentations
    are:
  </p>
  <ul>
    <li>&tr-resource-constructs; within &tr-integrated-resources;;</li>
    <li>AAMs;</li>
    <li>&tr-ARMs;;</li>
    <li>&tr-AIMs;.</li>
  </ul>
  <p>
    Graphical presentations are provided to aid in understanding the definitions presented in each
    part. Different graphical presentations that are used within ISO 10303 include:
    
  </p>
  
  <ul>
    
    <li>EXPRESS-G: the graphical representation of EXPRESS, used as an informative supplement to textual EXPRESS &tr-data; models;</li>
    
    <li>IDEF0: an activity modelling notation [2] used for AAMs within
      &tr-application-protcols;;
    </li>
    
    <li>IDEFlX: the graphical representation used in the IDEFlX &tr-information; modelling
      method [3] used for &tr-ARMs; in some &tr-APs;;
    </li>
    
    <li>NIAM: the graphical representation used within the NIAM &tr-information; modelling
      method [4] used for &tr-ARMs; in some &tr-APs;.
    </li>	
    
  </ul>
-->

	<h3 id="arch_2">4.2 Initial architecture</h3>
<p>One of the fundamental principles of ISO 10303 is that whenever a &tr-resource-construct; is used to represent the same &tr-information; requirement in different &tr-application-protocols;, the same interpretation of that &tr-resource-construct; is used.  One of the first modifications to the ISO 10303 architecture was the addition of &tr-application-interpreted-constructs;. </p><p>&tr-Application-interpreted-constructs; were introduced to the ISO 10303 architecture to ensure consistency of interpretation and thus enable cooperative use of multiple &tr-APs; in a business enterprise.  An &tr-AIC; specifies a piece of an &tr-AIM; that can be used to exchange &tr-product-data; common to two or more &tr-APs;.  However, an &tr-AIC; does not document the common requirements or the mapping of those requirements into the &tr-AIM;.</p>
	<p>An &tr-AP; compliant with initial architecture is called a "monolithic &tr-AP;".</p>
	<h3 id="arch_3">4.3 Modular architecture</h3>
<p>The objective of the ISO 10303 modularization effort is to enable the more efficient technical development, standardization, implementation and deployment of ISO 10303 standards without changing the fundamentals of the current technical architecture.  The ISO 10303 architecture continues to be based on standardizing industry requirements and mapping those requirements to a &tr-data; model based on the &tr-integrated-resources;, the process known as &tr-interpretation;.</p>
<p>The primary change introduced by the new modular architecture is the explicit harmonization of common &tr-information; requirements.  Rather than relying on harmonization occurring as a by-product of consistent &tr-interpretation; across &tr-APs;, &tr-application-module; requirements are first harmonized across domains and the resulting mappings are standardized in smaller packages, known as &tr-application-modules; (AMs).  &tr-AMs; are reused by other &tr-AMs; and ultimately by &tr-APs;. </p>
<p>The implementable portion of the modular architecture has two core components:</p>
<ul>
<li>&tr-AM;: A small, reusable &tr-data; specification documented with an &tr-ARM;; mapping; interpreted schema; and usage guide.</li>
<li>&tr-AP;: The use of a &tr-data; specification to meet the requirements of some business process.</li>
</ul>
<p>The objectives and function of the architectural components are described below. 
</p>
	<h4 id="arch_31">4.3.1 Application module</h4>
<p>
An &tr-application-module; is designed to maximize reusability of the harmonized requirements and the associated &tr-interpretation; into the &tr-integrated-resources;, the &tr-data; specification, and thus, software implementations.  This supports reusability by the standards developer, implementer, and user.</p>
<p>&tr-Application-modules; replace &tr-AICs; in the modular architecture. The objectives of &tr-AICs; and &tr-AMs; are similar.  They both standardize &tr-interpretation; results for reuse in multiple &tr-APs;.  However, &tr-AICs; and &tr-AMs; are created differently and have different content.  &tr-AMs;, unlike &tr-AICs;, contain harmonized &tr-information; requirements and specifications of the mappings of those requirements to the &tr-IRs;. An objective of modularization is to document a concept one time and then to directly reuse that concept in other &tr-application-modules;. An &tr-AIC; is only created when a concept has already been documented in two or more &tr-APs;.</p>
<p>The modular approach calls for the use of EXPRESS rather than natural language for the documentation of requirements, i.e., the &tr-ARM;, in an &tr-application-module;.  This allows the use of tools to validate the dependencies between &tr-application-module;<space/>&tr-ARMs;. It has the added benefit of allowing for the future use of an in-development EXPRESS mapping language called EXPRESS-X [8] that will make the requirements-to-resources mapping computer interpretable as well.</p>
	<h4 id="arch_32">4.3.2 Application protocol</h4>
<p>A modular &tr-AP; is a documented use of an &tr-application-module; for a specific business process. A single, normatively referenced &tr-AM; is the &tr-data; specification for the &tr-AP;.  This &tr-AM; uses other normative &tr-AMs; and can include specific business process rules or constraints.  The &tr-AP; document contains an activity model and &tr-conformance-class; definitions.  Industry terminology mappings from the generic &tr-AM; terminology may be defined in an &tr-AP; to make it more understandable to reviewers from the &tr-application; domain. A modular &tr-AP; references, through a high-level &tr-application-module;, a collection of related &tr-AMs; that provide the documentation of its &tr-information; requirements and &tr-AIM;.</p>

	<p>An &tr-AP; compliant with modular architecture is called a "modular &tr-AP;".</p>

<!-- abf stuff pulled from section 5

  <p>The ISO 10303 modular architecture is intended to:</p>
  
  <ul>
    
    <li>
      ensure the ability to implement a combination of subsets of multiple
      &tr-APs;, or to extend existing &tr-APs; to meet a business need;
    </li>
    
    
    <li>
      ensure the ability to reuse &tr-application; software developed to support
      one &tr-AP; in the development of an implementation of another &tr-AP; with the same,
      or similar, requirements;
    </li>
    
    
    <li>
      avoid the duplication and repeated documentation of the same requirements
      in different &tr-application-protocols;, leading to potentially different solutions
      for the same requirements;
    </li>
    
    
    <li>
      ensure the ability to reuse data generated by an implementation of one
      or more &tr-APs; by an implementation of one or more different &tr-APs;.
    </li>
    
  </ul>
-->
</collection_page>
