<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xsl/part1000/collection_page.xsl"?>
<!DOCTYPE collection_page [
<!ENTITY % characters SYSTEM "characters.ent"> 
<!ENTITY % terms SYSTEM "terms.ent"> 
%characters; 
%terms; 
]>
<collection_page page_type="main">
	<h2 id="arch">4 Architecture of ISO 10303</h2>
	<h3 id="arch_concepts">4.1 Concepts behind the architecture</h3>
	<p>The ISO 10303 architecture is designed to support the
	development of standards for &tr-product-data; exchange and &tr-product-data;
	sharing. The architecture is governed by the following
	concepts: (1) the scope of what is standardized and what is
	conformance tested is set at the level of an &tr-application;,
	(2) &tr-application; requirements are based on a model of a
	business activity, (3) &tr-application; requirements are
	standardized using natural language, and (4) a mapping is
	specified defining how the &tr-application; requirements are
	satisfied using the &tr-integrated-resources; (IRs).</p>
	<p>ISO 10303 is implemented through &tr-application-protocols;.  An
	&tr-AP; consists of the following major elements:</p>
	<ul>
	<li>An &tr-application-activity-model; (AAM) describing the business process
	the &tr-information-model; supports.</li>
	<li>An &tr-application-reference-model; (ARM) specifying the &tr-information;
	requirements.</li>
	<li>A schema for &tr-data; structures based on
	  the &tr-IRs;, called
	  an &tr-application-interpreted-model; (AIM), that is the basis for
	  implementations of the standard.</li>
	</ul>
	<p>
The architecture is based on standardizing industry &tr-information; requirements and mapping those &tr-information; requirements to an &tr-information; model based on the &tr-IRs;. The process of mapping &tr-information; requirements to the &tr-IRs; is known as "&tr-interpretation;".
	</p>
	<p>The ISO 10303 architecture focuses on
	the &tr-information; required by industrial processes rather than
	on the processes themselves, as the processes can change over
	time, while the underlying &tr-information; requirements are longer
	lasting. This focus on &tr-information; allows ISO 10303 to support
	&tr-data-exchange;, some forms of &tr-data; sharing, as well as long-term
	&tr-data; retention. </p>
	<p>
	  Whenever a &tr-resource-construct; is used to represent the same &tr-information; requirement in different &tr-application-protocols;, the same &tr-interpretation; of that &tr-resource-construct; shall be used.
	</p>
	<h3 id="arch_versions">4.2 Elaborations of the architecture</h3>
	<p>The general architectural principles described in <link ref="#arch_concepts">4.1</link> have been elaborated into two architectures:
	  the "Initial Architecture" and the "Modular Architecture". Both
	  architectures adhere to the fundamental principles described in
	  <link ref="3_overview#overview_principles">3.3</link>.
	</p>
	<p class="note">
	  NOTE&nbsp;&nbsp;&nbsp;The term "ISO 10303 architecture", without
	  qualification, refers to the general principles described in
	  <link href="arch_concepts">4.1</link> and the common aspects
	  of its elaborations.
	</p>
	<p>
	  An ISO 10303 project may use either the Initial Architecture or the
	  Modular Architecture, although new projects are encouraged to use the
	  Modular Architecture. ISO TC 184/SC 4 shall determine, at the time a
	  project is approved, which architecture the project will use.
	</p>

<!-- stuff cut from section 5
  <h4 id="struct_2_2">5.2.2 Graphical presentation of models</h4>
  <p>
    The graphical &tr-presentation; of models to illustrate normative &tr-data; definitions is informative in all
    cases. The four types of models within ISO 10303 using graphical &tr-presentations; are:
  </p>
  <ul>
    <li>&tr-resource-constructs; within &tr-IRs;;</li>
    <li>AAMs;</li>
    <li>&tr-ARMs;;</li>
    <li>&tr-AIMs;.</li>
  </ul>
  <p>
    Graphical &tr-presentations; are provided to aid in understanding the definitions presented in each
    part. Different graphical &tr-presentations; that are used within ISO 10303 include:
    
  </p>
  
  <ul>
    
    <li>EXPRESS-G: the graphical representation of EXPRESS, used as an informative supplement to textual EXPRESS &tr-data; models;</li>
    
    <li>IDEF0: an activity modelling notation [2] used for AAMs within
      &tr-application-protcols;;
    </li>
    
    <li>IDEFlX: the graphical representation used in the IDEFlX &tr-information; modelling
      method [3] used for &tr-ARMs; in some &tr-APs;;
    </li>
    
    <li>NIAM: the graphical representation used within the NIAM &tr-information; modelling
      method [4] used for &tr-ARMs; in some &tr-APs;.
    </li>	
    
  </ul>
-->

	<h3 id="arch_initial">4.2 Initial Architecture</h3>
	<p>
An &tr-application-interpreted-construct; (&tr-AIC;) shall be used to specify a piece of an &tr-AIM; that can be used to exchange &tr-product-data; common to two or more &tr-APs;.
	</p>
	<p class="note">
NOTE&nbsp;&nbsp;&nbsp;An &tr-AIC; does not document the common &tr-information; requirements or the mapping of those &tr-information; requirements into the &tr-AIM;.
	</p>
	<p>An &tr-AP; that complies with Initial Architecture is called a "monolithic &tr-AP;".</p>
	<h3 id="arch_modular">4.3 Modular Architecture</h3>
	<p>
	  The primary change introduced by the new Modular Architecture is the explicit harmonization of common &tr-information; requirements.  Rather than relying on harmonization occurring as a by-product of consistent &tr-interpretation; across &tr-APs;, &tr-application; requirements are first harmonized across domains and the resulting mappings are standardized in smaller packages, known as &tr-application-modules; (&tr-AMs;).  &tr-AMs; are reused by other &tr-AMs; and ultimately by &tr-APs;.
	</p>
	<p>
	  The implementable portion of the Modular Architecture has two core components:
	</p>
	<ul>
	  <li>
	    &tr-AM;: A small, reusable &tr-data; specification documented with an &tr-ARM;; mapping; interpreted schema; and usage guide.
	  </li>
	  <li>
	    &tr-AP;: The use of a &tr-data; specification to meet the requirements of some business process.
	  </li>
	</ul>
	<p>
	  The objectives and function of the architectural components are described below.
	</p>
	<h4 id="arch_AM">4.3.1 Application module</h4>
	<p>
An &tr-application-module; is designed to maximize reusability of the harmonized requirements and the associated &tr-interpretation; into the &tr-IRs;, the &tr-data; specification, and thus, software implementations.  This supports reusability by the standards developer, implementer, and user.
	</p>
	<p>
&tr-Application-modules; replace &tr-AICs; in the Modular Architecture. The objectives of &tr-AICs; and &tr-AMs; are similar.  They both standardize &tr-interpretation; results for reuse in multiple &tr-APs;.  However, &tr-AICs; and &tr-AMs; are created differently and have different content.  &tr-AMs;, unlike &tr-AICs;, contain harmonized &tr-information; requirements and specifications of the mappings of those requirements to the &tr-IRs;. An objective of modularization is to document a concept one time and then to directly reuse that concept in other &tr-AMs;. An &tr-AIC; is only created when a concept has already been documented in two or more &tr-APs;.
	</p>
	<p>
The modular approach uses EXPRESS rather than natural language for the documentation of requirements, i.e., the &tr-ARM;, in an &tr-application-module;.  This allows the use of tools to validate the dependencies between &tr-application-module;<space/>&tr-ARMs;.
	</p>
	<h4 id="arch_AP">4.3.2 Application protocol</h4>
	<p>
A modular &tr-AP; is a documented use of a set of &tr-AMs; for a specific business process. The &tr-AMs; used by an &tr-AP; are organized in a tree structure. 
A single, normatively referenced &tr-AM; is the &tr-data; specification for the &tr-AP;.  This &tr-AM; uses other normative &tr-AMs; and can include specific business process rules or constraints.  The &tr-AP; document contains an activity model and &tr-conformance-class; definitions.  Industry terminology mappings from the generic &tr-AM; terminology may be defined in an &tr-AP; to make it more understandable to reviewers from the &tr-application; domain. A modular &tr-AP; references, through a high-level &tr-application-module;, a collection of related &tr-AMs; that provide the documentation of its &tr-information; requirements and &tr-AIM;.
	</p>
	<p>
	  An &tr-AP; that complies with Modular Architecture is called a "modular &tr-AP;".
	</p>
</collection_page>
