<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xsl/part1000/collection_page.xsl"?>
<!DOCTYPE collection_page [
<!ENTITY % characters SYSTEM "characters.ent"> 
<!ENTITY % terms SYSTEM "terms.ent"> 
%characters;
%terms;
<!ENTITY sc-desc "2">
<!ENTITY sc-IM "3">
<!ENTITY sc-IR "4">
<!ENTITY sc-AIC "5">
<!ENTITY sc-AM "6">
<!ENTITY sc-AP "7">
<!ENTITY sc-UG "8">
<!ENTITY sc-CT "9">
<!ENTITY sc-ATS "10">
]>
<collection_page page_type="main">
  <h2 id="struct">5 &tr-Structure; of ISO 10303</h2>
  
  <h3 id="struct_series">5.1 Series of parts</h3>
  
  <p>
    ISO 10303 is divided into nine series of parts. Each series has a unique function and
    consists of one or more parts. The series are listed below with their numbering scheme:
  </p>
  
  <ul>
    <li>description methods: <link ref="#struct_desc-methods">parts 11 to 19</link>;</li>
    <li>&tr-implementation-methods;: <link ref="#struct_impl-method">parts 21 to 29</link>;</li>
    <li>&tr-conformance-testing; methodology and framework: <link ref="#struct_conform-test">parts 31 to 39</link>;</li>
    <li>&tr-integrated-resources;:
      <ul>
        <li>&tr-generic-resources;: <link ref="#struct_IGR">parts 41 to 99</link>;</li>
        <li>&tr-application-resources;: <link ref="#struct_IAR">parts 101 to 199</link>;</li>
      </ul>
    </li> 
    <li>&tr-application-protocols;: <link ref="#struct_AP">parts 201 to 299</link>;</li>
    <li>&tr-abstract-test-suites;: <link ref="#struct_ATS">parts 301 to 399</link> (corresponding to the associated &tr-APs; 201 to 299);</li>
    <li>&tr-application-modules;: <link ref="#struct_AM">parts 401 to 499</link>  (corresponding to the associated &tr-APs; 201 to 299) and <link ref="#struct_AM">1001 to 1999</link>;</li>
    <li>&tr-application-interpreted-constructs;: <link ref="#struct_AIC">parts 501 to 599</link>;</li>
    <li>usage guides: <link ref="#struct_usage-guide">parts 5001 to 5999</link>;</li>
  </ul>
  
  <h3 id="struct_desc-methods">5.&sc-desc; Description methods</h3>
  <h4 id="struct_desc-methods_1">5.&sc-desc;.1 Purpose</h4>
  <p>
    The description of &tr-product-data; in &tr-common-resources; and &tr-application-protocols; (&tr-APs;) requires the
    use of formal &tr-data; specification languages to ensure consistency and avoid ambiguity. The languages
    are intended to be both human-readable to facilitate human understanding and computer-interpretable
    to facilitate the generation of &tr-application; software and supporting tools.	
  </p>
  
  <h4 id="struct_EXPRESS">5.&sc-desc;.2 The EXPRESS and EXPRESS-G modeling languages (<std-ref>ISO 10303-11</std-ref>)</h4>
  <p>
    EXPRESS is a formal modeling language that provides the
    mechanism for the normative description of &tr-product-data; for both &tr-common-resources; and
    &tr-APs;.
  </p>
  <p>
    EXPRESS allows a description of the &tr-data; and constraints applicable to &tr-product-data;. EXPRESS
    permits the definition of &tr-resource-constructs; from &tr-data; elements, constraints, relationships, rules
    and functions. The language permits classification and structuring of &tr-resource-constructs;. Resource
    constructs may be interpreted within &tr-APs;. The &tr-interpretation; capability
    of EXPRESS is a mechanism to facilitate the development of &tr-APs; by allowing the
    addition of restrictions on attributes, the addition of constraints, the addition of relationships
    among &tr-resource-constructs; and &tr-application-constructs;, or all of the above.
  </p>
  <p>
    EXPRESS-G is a graphical representation for a subset of the constructs in the EXPRESS language.
  </p>
    <h4 id="struct_EXPRESS-I">5.&sc-desc;.3 The EXPRESS-I language reference manual (<std-ref>ISO/TR 10303-12</std-ref>)</h4>
  
  <p>
   EXPRESS-I is a formal &tr-data; representation and &tr-abstract-test-case; 
specification language. It may be used to exemplify the &tr-information; 
requirements of other parts of ISO 10303 and is a 
companion to the EXPRESS and EXPRESS-G languages.  The EXPRESS-I 
language provides a means of displaying instantiations of EXPRESS 
&tr-data; elements. The language is designed principally for human 
readability and for ease of mapping between EXPRESS-I instances and 
the definitions in an EXPRESS schema.  EXPRESS-I is not intended to 
be a specifications for computer-efficient methods for instantiating a schema. 
 </p>
  <p class="note">EXPRESS-I is not being actively used within ISO TC 184/SC 4. <std-ref>ISO/TR 10303-12</std-ref> is retained for historical reasons.
  </p>
  
  <h4 id="struct_EXPRESS-X">5.&sc-desc;.4 The EXPRESS-X language reference manual (<std-ref>ISO 10303-14</std-ref>)</h4>
  
  <p>
EXPRESS-X is a structural &tr-data; mapping language.  It allows the unambiguous 
specification of relationship between &tr-data; that 
is governed by EXPRESS schemas, and for specifying alternative views 
of &tr-data; that is governed by EXPRESS schemas. 
  </p>
  
  <h3 id="struct_IM">5.&sc-IM;<space/>&tr-Implementation-methods;</h3>
  
  
  <h4>5.&sc-IM;.1 Purpose</h4>
  
  <p>
    ISO 10303 provides for various methods of implementation. An &tr-implementation-method; provides
    a particular way of using the &tr-APs; defined in ISO 10303. 
    
    <std-ref>ISO 10303-21</std-ref> specifies
    an &tr-implementation-method; for an &tr-exchange-structure;. The &tr-exchange-structure; provides for the
    writing and reading of the description of &tr-product-data; in &tr-APs;, using clear text
    or binary encoding.
    
  </p>
  
  
  <h4>5.&sc-IM;.2 Use of formal language</h4>
  
  <p>
    An &tr-implementation-method; is defined using a formal language so that computer-based methods
    may be used for the development of implementations.
  </p>
  
  
  <h4>5.&sc-IM;.3 Mapping from EXPRESS to &tr-implementation-method;</h4>
  
  <p>
    EXPRESS provides the basis for all specifications of &tr-product-information; in ISO 10303. Each
    &tr-implementation-method; defined in ISO 10303 specifies mapping rules from the syntax of EXPRESS
    onto the language used for the &tr-implementation-method;. The &tr-structure; and syntax of
    each &tr-resource-construct; as it appears in the implementation is derived by applying the mapping
    rules. The rules to be applied for a particular &tr-implementation-method; may be conditional on
    the form of the EXPRESS definition that is being mapped. Any schema defined in EXPRESS
    can be mapped to the &tr-implementation-method;.
    
  </p>
  
  
  <h4>5.&sc-IM;.4 Exchange &tr-structures; for &tr-product-data; (implementation)</h4>
  
  <p>
    ISO 10303 provides three different ways of exchanging &tr-product-data; described in EXPRESS between computer systems:
  </p>
  <ul>
  	<li>clear text encoding of the &tr-exchange-structure; (<std-ref>ISO 10303-21</std-ref>);</li>
  	<li>binary representation of EXPRESS-driven &tr-data; (<std-ref>ISO 10303-26</std-ref>);</li>
  	<li>XML representations of EXPRESS schemas and &tr-data; (<std-ref>ISO 10303-28</std-ref>).</li>
  </ul>    
  <p> 
    <std-ref>ISO 10303-21</std-ref> provides a compact and human readable form of the &tr-exchange-structure;.   
    The &tr-exchange-structure; can be implemented to support file exchange. The
    language used for the syntax of the &tr-exchange-structure;<space/>&tr-implementation-method; is based on Wirth Syntax Notation [<link ref="biblio#bibitem_WIRTH-CACM">94</link>]. The mapping from EXPRESS to the syntax of the &tr-exchange-structure; is defined.
  </p>  
  <p>
    <std-ref>ISO 10303-26</std-ref> provides a mapping of EXPRESS to the binary Hierarchical Data Format Version 5 (HDF5)
    that is optimized for the exchange of huge &tr-data; sets.
    HDF5 is a &tr-product; of The HDF Group, a spinoff from the National Center for Supercomputing Applications (NCSA) at the University of Illinois at Urbana-Champaign. 
    The HDF software includes I/O libraries and tools for analyzing, visualizing, and converting scientific &tr-data;.
  </p>
  <p>
    <std-ref>ISO 10303-28</std-ref> enables &tr-product-data; described in EXPRESS to be exchanged using XML 
    and the many software tools developed to support XML technologies. 
    It also permits &tr-product-data; sets so described to be readily incorporated into electronic commerce transactions represented in XML.
ISO 10303-28 specifies the form of XML documents containing EXPRESS schemas and data governed by EXPRESS schemas. For an arbitrary EXPRESS schema, it specifies an XML schema that corresponds to the EXPRESS schema. It also contains a set of configuration directives that can be used to specify options for the structure of the XML representation of data sets that conform to EXPRESS schemas.
  </p>
  <p>
<std-ref>ISO/TS 10303-28:2003</std-ref> specifies an XML document type definition (DTD) that corresponds to the EXPRESS schema. It can be used by implementers who need to use DTDs instead of XML schemas.
  </p>  
  
  <h4 id="struct_SDAI">5.&sc-IM;.7 Standard &tr-data; access interface specification</h4>
  <p>
The standard &tr-data; access interface (SDAI) specifies the functional characteristics of an &tr-application; programming &tr-data; access interface to &tr-product-data;. 
SDAI defines the operations available to an &tr-application; for the purposes of accessing and manipulating &tr-data; with a &tr-structure; defined using EXPRESS.  
SDAI is specified in <std-ref>ISO 10303-22</std-ref>.
The SDAI is defined independently of any programming language.  
  </p>
  <p>
The specification of the SDAI functionality in a particular programming language is known as a language binding.  
A language binding provides access to and manipulation of &tr-data; entities, types and constants, mechanisms for constraint validation and error handling. 
Language bindings are provided as separate parts of ISO 10303.
  </p>
  <p>At the time of preparation of this part of ISO 10303, the following language bindings are available:</p>
   <ul>
    <li>C++ language binding to the SDAI (<std-ref>ISO 10303-23</std-ref>);</li>
    <li>C language binding to the SDAI (<std-ref>ISO 10303-24</std-ref>);</li>
    <li>Java(tm) programming language binding to the SDAI with Internet/Intranet extensions (<std-ref>ISO/TS 10303-27</std-ref>).</li>
   </ul>
   <p>
Generic &tr-conformance-testing; for SDAI implementations is provided by <std-ref>ISO/TS 10303-35</std-ref>.
For each language binding these &tr-abstract-test-methods; have to be converted into executable test methods for &tr-conformance-testing;.  
   </p>
  
  <h4 id="struct_EXPRESS-XMI">5.&sc-IM;.8 EXPRESS to OMG XMI binding</h4>
  
  <p>
<std-ref>ISO/TS 10303-25</std-ref> specifies a mapping of EXPRESS constructs to the UML metamodel. Because the XMI standard specifies the XML representation of UML metamodel constructs, standardizing the mapping of EXPRESS constructs into UML constructs supports the XMI representation of EXPRESS schemas. EXPRESS schemas, being data specifications, are mapped into the UML metamodel concepts that appear in UML Static Structure Diagrams. <std-ref>ISO/TS 10303-25</std-ref> does not map all EXPRESS constructs to the UML metamodel, because that metamodel does not support all of the corresponding EXPRESS concepts. The specified mapping is a one-way mapping from EXPRESS into the UML Interchange Metamodel. These limitations make the mapping unsuitable for the general interchange of EXPRESS schemas and UML models for information modelling purposes.
  </p>

  <h3 id="struct_IR">5.&sc-IR;<space/>&tr-Integrated-resources;</h3>
  <h4>5.&sc-IR;.1 Purpose</h4>
  
  <p>
  The &tr-integrated-resources; declare &tr-resource-constructs; that are used as the basis of representation
    of &tr-product-data;. The &tr-integrated-resources; are interpreted to support the &tr-information;
    requirements of &tr-application; domains.
  </p>
  <h4>5.&sc-IR;.2 Characteristics</h4>
  
  <p>
The integrated resources may include EXPRESS information models from other
International Standards. Inclusion of an EXPRESS information model from another
International Standard into the integrated resources shall be approved by a
resolution of ISO TC 184/SC 4. Like any integrated resource model, such an EXPRESS model
may be referenced by any other EXPRESS model in the integrated resources. Any
EXPRESS models that it references must also be included as integrated resources,
in order to ensure that the integrated resources consitute a self-contained
model.
  </p>

    <p class="note">
NOTE&nbsp;&nbsp;&nbsp;At the time of preparation of this part of ISO 10303, the only such model is <std-ref>ISO 13584-20</std-ref>.
    </p>

   <p>
    &tr-Integrated-resources; provide a unique representation of each element of &tr-information; within
    ISO 10303. The meanings of the &tr-resource-constructs; are provided through text definitions.
    </p>

   <p>
    The &tr-integrated-resources; are divided into logically-related sets of one or more &tr-resource-constructs;.
    The &tr-generic-resources; are context-independent. The &tr-application-resources; are applicable to
    specified ranges of &tr-applications;.
  </p>

  <p>
    Generic and &tr-application;<space/>&tr-resource-constructs; may reference &tr-generic-resource; constructs.
  </p>
  
  <h4 id="struct_IGR">5.&sc-IR;.3 &tr-Generic-resources;</h4>
  
  <p>At the time of preparation of this part of ISO 10303, the following are the members of the &tr-generic-resources; series:</p>
  
  <ul>
    
    <li>Fundamentals of &tr-product; description and support (<std-ref>ISO 10303-41</std-ref>);</li>
    
    <li>Geometric and topological representation (<std-ref>ISO 10303-42</std-ref>);</li>
    
    <li>Representation &tr-structures; (<std-ref>ISO 10303-43</std-ref>);</li>
    
    <li>&tr-Product;<space/>&tr-structure; configuration (<std-ref>ISO 10303-44</std-ref>);</li>
    
    <li>Material and other engineering properties (<std-ref>ISO 10303-45</std-ref>);</li>
    
    <li>Visual &tr-presentation; (<std-ref>ISO 10303-46</std-ref>);</li>
    
    <li>Shape variation tolerances (<std-ref>ISO 10303-47</std-ref>);</li>
    
    <li>Process &tr-structure; and properties (<std-ref>ISO 10303-49</std-ref>);</li>
    
    <li>Mathematical constructs (<std-ref>ISO 10303-50</std-ref>);</li>
    
    <li>Mathematical representation (<std-ref>ISO 10303-51</std-ref>);</li>
    
    <li>Mesh-based topology (<std-ref>ISO 10303-52</std-ref>);</li>
    
    <li>Numerical analysis (<std-ref>ISO 10303-53</std-ref>);</li>
    
    <li>Classification and set theory (<std-ref>ISO 10303-54</std-ref>);</li>
    
    <li>Procedural and hybrid representation (<std-ref>ISO 10303-55</std-ref>);</li>
    
    <li>State (<std-ref>ISO 10303-56</std-ref>);</li>
    
    <li>Risk (<std-ref>ISO 10303-58</std-ref>);</li>
    
    <li>Quality of &tr-product; shape &tr-data; (<std-ref>ISO 10303-59</std-ref>);</li>
    
    <li>Logical model of expressions (<std-ref>ISO 13584-20</std-ref>).
      
      <p class="note">NOTE&sp3;Although it is part of ISO 13584, ISO 13584-20 plays the role of an &tr-integrated-resource; for ISO 10303.</p>
      
    </li>
    
  </ul>
  
  <h4 id="struct_IAR">5.&sc-IR;.4 &tr-Application-resources;</h4>

  <p>At the time of preparation of this part of ISO 10303, the following are the members of the &tr-application-resource; series:</p>
  
  <ul>
    
    <li>Draughting (<std-ref>ISO 10303-101</std-ref>);</li>
    
    <li>Finite element analysis (<std-ref>ISO 10303-104</std-ref>);</li>
    
    <li>Kinematics (<std-ref>ISO 10303-105</std-ref>);</li>
    
    <li>Finite element analysis definition relationships (<std-ref>ISO 10303-107</std-ref>);</li>
    
    <li>Parameterization and constraints for explicit geometric &tr-product; \models (<std-ref>ISO 10303-108</std-ref>);</li>
    
    <li>Kinematic and geometric constraints for &tr-assembly; models (<std-ref>ISO 10303-109</std-ref>);</li>
    
    <li>Mesh based computational fluid dynamics &tr-data; (<std-ref>ISO 10303-110</std-ref>);</li>
    
    <li>Elements for the procedural modelling of solid shapes (<std-ref>ISO 10303-111</std-ref>);</li>
    
    <li>Modelling commands for the exchange of procedurally represented 2D CAD models (<std-ref>ISO 10303-112</std-ref>).</li>
    
  </ul>
  
  
  <h3 id="struct_AIC">5.&sc-AIC;<space/>&tr-Application-interpreted-construct;</h3>
  <h4>5.&sc-AIC;.1 Purpose</h4>
  <p>
The purpose of &tr-application-interpreted-constructs; (&tr-AIC;) is to provide a mechanism 
to identify and document the common requirements of different &tr-APs; 
as represented within their &tr-ARMs;.  
&tr-AICs; provide a consistent and standardized &tr-interpretation; of the &tr-integrated-resources; (&tr-IRs;) 
across different &tr-application-contexts; by identifying the semantics and shared &tr-data; definitions 
to support a specific functionality.
  <p>
  <h4>5.&sc-AIC;.2 Characteristics</h4>
  </p>
&tr-AICs; may be referenced by &tr-APs;, &tr-application-modules; (&tr-AMs;)
or other &tr-AICs; in their entirely. 
In the Modular Architecture, typically one &tr-AIC; is encapsulated in one &tr-AM;.
  </p>
    <h4>5.&sc-AIC;.3 Series members</h4>

  
  <p>At the time of preparation of this part of ISO 10303, the following are the members 
    of the &tr-application-interpreted-constructs; series:</p>
   <ul>
    
    <li>Edge-based wireframe (<std-ref>ISO 10303-501</std-ref>);</li>
    
    <li>Shell-based wireframe (<std-ref>ISO 10303-502</std-ref>);</li>
    
    <li>Geometrically bounded 2D wireframe (<std-ref>ISO 10303-503</std-ref>);</li>
    
    <li>Draughting annotation (<std-ref>ISO 10303-504</std-ref>);</li>
    
    <li>Drawing &tr-structure; and administration (<std-ref>ISO 10303-505</std-ref>);</li>
    
    <li>Draughting elements (<std-ref>ISO 10303-506</std-ref>);</li>
    
    <li>Geometrically bounded surface (<std-ref>ISO 10303-507</std-ref>);</li>
    
    <li>Non-manifold surface (<std-ref>ISO 10303-508</std-ref>);</li>
    
    <li>Manifold surface (<std-ref>ISO 10303-509</std-ref>);</li>
    
    <li>Geometrically bounded wireframe (<std-ref>ISO 10303-510</std-ref>);</li>
    
    <li>Topologically bounded surface (<std-ref>ISO 10303-511</std-ref>);</li>
    
    <li>Faceted boundary representation (<std-ref>ISO 10303-512</std-ref>);</li>
    
    <li>Elementary boundary representation (<std-ref>ISO 10303-513</std-ref>);</li>
    
    <li>Advanced boundary representation (<std-ref>ISO 10303-514</std-ref>);</li>
    
    <li>Constructive solid geometry (<std-ref>ISO 10303-515</std-ref>);</li>
    
    <li>Mechanical design geometric &tr-presentation; (<std-ref>ISO 10303-517</std-ref>);</li>
    
    <li>Mechanical design shaded representation (<std-ref>ISO 10303-518</std-ref>);</li>
    
    <li>Geometric tolerances (<std-ref>ISO 10303-519</std-ref>);</li>
    
    <li>Associative draughting elements (<std-ref>ISO 10303-520</std-ref>);</li>
    
    <li>Manifold subsurface (<std-ref>ISO 10303-521</std-ref>);</li>
    
    <li>Machining features (<std-ref>ISO 10303-522</std-ref>);</li>
    
    <li>Curve swept solid (<std-ref>ISO 10303-523</std-ref>);</li>
    
  </ul>
  
  
  <h3 id="struct_AM">5.&sc-AM;<space/>&tr-Application-modules;</h3>
    <h4>5.&sc-AM;.1 Purpose</h4>

  <p>&tr-Application-modules; are the key constituent of the
    Modular Architecture. The basis of the modular approach is understanding and harmonizing the requirements,
    both new and those documented in existing &tr-APs;, grouping the requirements
    into reuseable modules, and using the modules
    in the development of an &tr-AP;.
  </p>
  
    <h4>5.&sc-AM;.2 Characteristics</h4>

  <p>An &tr-AM; contains much of the technical content that, under the initial architecture, was documented in an &tr-AP;. The role of an &tr-AP; document
    in the Modular Architecture is to provide a business context for the industrial
    use and implementation of the &tr-AMs; that are the &tr-data; specification
    of the &tr-AP;.
  </p>
  
  <p>There are three types of &tr-AMs;: foundation modules (level
    1), implementation modules (level 2), and &tr-AP; modules (level 3).</p>
  <p>The the &tr-AP; module has a part number equal to the &tr-AP;'s part number plus 200.</p>
  <p class="note">NOTE&nbsp;&nbsp;&nbsp;The &tr-AP; module for &tr-AP; <std-ref>ISO 10303-210</std-ref> is <std-ref>ISO/TS 10303-410</std-ref>.</p>
  <p>Foundation
    modules provide lower level reusable &tr-structures; that are not likely to
    be implemented alone, but are highly shareable and reusable. Implementation
    modules define a capability that can be implemented and against which conformance
    classes can be defined. Each &tr-AP; references a single root module, which
    is called the "&tr-AP; module". An &tr-AP; module is an implementation module, and the
    contents of an &tr-AP; module are the same as other implementation modules,
    the only documentation difference being in their name and title. The
    &tr-AP; module from one &tr-AP; can be used by another &tr-AP;. A detailed description
    of the content of an &tr-AM; is provided in reference [<link ref="biblio#bibitem_AMConGde06">92</link>]. A detailed description of the content of an
    &tr-AP; that uses &tr-AMs; is provided in
    reference [<link ref="biblio.htm#bibitem_APConGde">93</link>].
  </p>
  
  <p>The Modular Architecture provides:</p>
  
  <ul>
    
    <li>
      the ability to implement a combination of subsets of multiple
      &tr-APs;, or to extend existing &tr-APs; to meet a business need;
    </li>
    
    
    <li>
      the ability to reuse &tr-application; software developed to support
      one &tr-AP; in the development of an implementation of another &tr-AP; with the same,
      or similar, requirements;
    </li>
    
    
    <li>
      avoid the duplication and repeated documentation of the same requirements
      in different &tr-APs;, leading to potentially different solutions
      for the same requirements;
    </li>
    
    
    <li>
      the ability to reuse &tr-data; generated by an implementation of one
      or more &tr-APs; by an implementation of one or more different &tr-APs;.
    </li>
    
  </ul>
  
  
  <h3 id="struct_AP">5.&sc-AP;<space/>&tr-Application-protocols;</h3>
  <h4>5.&sc-AP;.1 Purpose</h4>  
  <p>
    An &tr-AP; specifies an &tr-information-model;, suitable not only for neutral file exchange, but also as a basis for implementing and sharing &tr-product; databases and archiving, within an &tr-application;. For a monolithic &tr-AP;, the &tr-information-model; is specified as an integral part of the &tr-AP; document. For a module &tr-AP;, the &tr-information-model; is specified by reference to the &tr-AP; module.
  </p>
  
  
  <h4>5.&sc-AP;.2 Definition of &tr-application; requirements</h4>
  
  <p>
    An &tr-AP; includes the definitions of scope, context, and &tr-information; requirements 
    of an &tr-application;. The definitions may specify functions, processes or &tr-information;
    that are excluded from the &tr-application; in order to clarify the scope, context, and &tr-information;
    requirements. The statement of scope is supported by an &tr-application-activity-model; (&tr-AAM;)
    that describes the processes, &tr-information; flows, and functional requirements of the &tr-application;.
    The activity model is included as an informative annex to the &tr-AP;.
    
  </p>
  
  <p>
    The &tr-information; requirements and constraints for the &tr-application-context; are defined by means
    of a set of &tr-units-of-functionality; and &tr-application-objects; using &tr-application;-based terminology.
    This definition is derived from an &tr-application-reference-model; (&tr-ARM;). An &tr-ARM; is a formal
    &tr-information-model; that is documented in an informative annex to the &tr-AP;.
    
  </p>
  
  
  <h4>5.&sc-AP;.3 &tr-Information; representation</h4>
  
  <p>
    The &tr-resource-constructs; for representing the &tr-information; requirements of the &tr-application; are
    specified in an &tr-application-interpreted-model; (&tr-AIM;) using the EXPRESS language. The &tr-AIM;
    is assembled from &tr-resource-constructs; specified by the &tr-integrated-resources;. The &tr-resource-constructs;
    are interpreted to meet the &tr-application; requirements within the defined context and
    scope of the &tr-AP;.
    
  </p>
  
  <p>
    A mapping from the &tr-information; requirements to the &tr-AIM; is provided. The mapping defines
    the use within the &tr-AIM; of &tr-resource-constructs; from the &tr-integrated-resources; to represent the
    &tr-information; requirements of the &tr-application;.
    
  </p>
  
  
  <h4 id="struct_impl-method">5.&sc-AP;.4 &tr-Implementation-methods;</h4>
  
  <p>
    The &tr-AP; is independent of &tr-implementation-methods;. However, an &tr-AP; may include implementation
    method specific &tr-information; in a normative annex. An &tr-AP; includes a table of short names
    that the &tr-exchange-structure;<space/>&tr-implementation-method; uses to encode &tr-AP; entity names.
    
  </p>
  
  
  <h4 id="struct_conform-req">5.&sc-AP;.5 &tr-Conformance-requirements;</h4>
  
  <p>
    An &tr-AP; includes the &tr-conformance-requirements; to be satisfied by any implementation
    claiming to support the requirements of the &tr-AP;. &tr-Conformance-requirements; reflect the
    capabilities defined in an &tr-AP; and may be specified in the description methods, implementation
    methods, or &tr-AP; series of parts of ISO 10303.
    
  </p>
  
  
  <h4 id="struct_monolithic-AP">5.&sc-AP;.6 Monolithic &tr-APs;</h4>
  <p>At the time of preparation of this part of ISO 10303, the following are the members 
    of the monolithic &tr-AP; series:</p>
  <ul>
    <li>Explicit draughting (<std-ref>ISO 10303-201</std-ref>);</li>
    <li>Associative draughting (<std-ref>ISO 10303-202</std-ref>);</li>
    <li>Mechanical design using boundary representation (<std-ref>ISO 10303-204</std-ref>);</li>
    <li>Sheet metal die planning and design (<std-ref>ISO 10303-207</std-ref>);</li>
    <li>Electrotechnical design and installation (<std-ref>ISO 10303-212</std-ref>);</li>
    <li>Core &tr-data; for automotive mechanical design processes (<std-ref>ISO 10303-214</std-ref>);</li>
    <li>Ship arrangement (<std-ref>ISO 10303-215</std-ref>);</li>
    <li>Ship moulded forms (<std-ref>ISO 10303-216</std-ref>);</li>
    <li>Ship &tr-structures; (<std-ref>ISO 10303-218</std-ref>);</li>
    <li>Dimensional inspection &tr-information; exchange (<std-ref>ISO 10303-219</std-ref>);</li>
    <li>Exchange of design and manufacturing &tr-product-information; for cast parts (<std-ref>ISO 10303-223</std-ref>);</li>
    <li>Mechanical &tr-product; definition for process plans using machining features (<std-ref>ISO 10303-224</std-ref>);</li>
    <li>Building elements using explicit shape representation (<std-ref>ISO 10303-225</std-ref>);</li>
    <li>Plant spatial configuration (<std-ref>ISO 10303-227</std-ref>);</li>
    <li>Technical &tr-data; packaging core &tr-information; and exchange (<std-ref>ISO 10303-232</std-ref>);</li>
    <li>Materials &tr-information; for the design and verification of &tr-products; (<std-ref>ISO 10303-235</std-ref>);</li>
    <li>&tr-Application-interpreted-model; for computerized numerical controllers (<std-ref>ISO 10303-238</std-ref>);</li>
    <li>Process plans for machined &tr-products; (<std-ref>ISO 10303-240</std-ref>);</li>
  </ul>

  <h4 id="struct_modular-AP">5.&sc-AP;.7 Modular &tr-APs;</h4>
  <p>At the time of preparation of this part of ISO 10303, the following are the members 
    of the modular &tr-AP; series:</p>
  <ul>
    <li>Configuration controlled 3D design of mechanical parts and assemblies (<std-ref>ISO 10303-203</std-ref>);</li>
    <li>Multidisciplinary analysis and design (<std-ref>ISO 10303-209</std-ref>);</li>
    <li>Electronic &tr-assembly;, interconnect, and packaging design (<std-ref>ISO 10303-210</std-ref>);</li>
    <li>Functional &tr-data; and their schematic representation for process plant (<std-ref>ISO 10303-221</std-ref>);</li>
    <li>Systems engineering (<std-ref>ISO 10303-233</std-ref>);</li>
    <li>Furniture catalog and interior design (<std-ref>ISO 10303-236</std-ref>);</li>
    <li>&tr-Product; life cycle support (<std-ref>ISO 10303-239</std-ref>).</li>
  </ul>

  <!-- Usage guides -->

  <h3 id="struct_usage-guide">5.&sc-UG;<space/>Usage guides</h3>
    <h4>5.&sc-UG;.1 Purpose</h4>
  <p>
A usage guide contains guidance on implementing and using an &tr-AP;.
A usage guide may provide guidance to two different audiences: implementors and end users of &tr-AP; compliant implementations.
  </p>
    <h4>5.&sc-UG;.2 Characteristics</h4>
  <p>
A usage guide may define refined context, scope, and &tr-information; requirements for a subset of the context, scope, and &tr-information; requirements of the subject &tr-AP;, and specify the use of the &tr-AP;'s &tr-information; representation to satisfy these requirements.
  </p>
  <p class="example">EXAMPLE&nbsp;1&nbsp;&nbsp;<std-ref>ISO/TS 10303-5001</std-ref> defines the context, scope, and &tr-information; requirements for various development phases during the design of a gear unit and specifies the <std-ref>ISO 10303-214</std-ref> resources necessary to satisfy these requirements.
  </p>
  <p>
An &tr-AP; may have more than one usage guide covering the same subject area, but for different disciplines.
  </p>
  <p class="example">EXAMPLE&nbsp;2&nbsp;&nbsp;<std-ref>ISO 10303-227</std-ref> was developed jointly by the shipbuilding and process plant communities. There could be separate usage guides for <std-ref>ISO 10303-227</std-ref> for ship piping and process plant piping, to document usage of the <std-ref>ISO 10303-227</std-ref> &tr-information; representation specific to the respective communities, or the software &tr-products; they use.</p>

    <h4>5.&sc-UG;.3 Document structure</h4>
   <p>
A usage guide may be included as an annex of an &tr-AP;. One or more usage guides may be published as separate documents, in addition to or instead of such an annex.
   </p>
    <h4>5.&sc-UG;.4 Content</h4>
  <p>
A usage guide may include its own &tr-information; requirements and reference model, separate from the &tr-information; requirements and &tr-ARM; of the &tr-AP;. If so, the usage guide shall include a mapping of its &tr-information; requirements and reference model to those of the &tr-AP;. The mapping may be to the &tr-AP;'s &tr-ARM; or &tr-AIM;, or there may be mappings to both &tr-ARM; and &tr-AIM;.
  </p>
  <p>
Example &tr-product; descriptions that are supported by the &tr-AP; and the corresponding &tr-AP; exchange files can be included in a usage guide.
If exchange files are included, the usage guide should explain the primary data structures and the logic and meaning of the values used in the exchange file.
 </p>
  
  <!-- Conformance testing methodology -->

  <h3 id="struct_conform-test">5.&sc-CT;<space/>&tr-Conformance-testing; methodology and framework</h3>
  
  
  <h4>5.&sc-CT;.1 Purpose</h4>
  
  <p>
    The &tr-conformance-testing; methodology and framework series of ISO 10303 provides
    the general methodology and requirements for the process of testing the conformance
    of a &tr-product; that claims to implement an ISO 10303 &tr-AP;. The goal of the
    methodology and framework of &tr-conformance-testing; is to ensure:
    
  </p>
  
  <ul>
    
    <li>Repeatability: test results are consistent whenever undertaken;</li>
    
    <li>Comparability: test results are consistent wherever undertaken;</li>
    
    <li>Auditability: test procedures can be confirmed as having been correctly undertaken,
      subsequent to the testing, by review of record.
    </li>
    
  </ul>
  
  <p>
    <std-ref>ISO 10303-31</std-ref> provides a framework and describes the general concepts for &tr-conformance-testing;
    of implementations of ISO 10303.
    
  </p>
  
  
  <h4>5.&sc-CT;.2 Procedures for &tr-conformance-testing;</h4>
  
  <p>
    &tr-Conformance-testing; of an &tr-AP; can be performed by applying the abstract test
    method for the chosen &tr-implementation-method; to the test cases in the &tr-abstract-test-suite;. The
    procedures for &tr-conformance-testing; are independent of the &tr-implementation-under-test;.
  </p>
  
  <p>
    If a single implementation combines several &tr-APs;, &tr-conformance-testing; is performed
    for each &tr-AP; separately.
  </p>
  
  <p>
    ISO 10303 defines the roles and responsibilities of the testing laboratory and the client submitting
    an implementation for &tr-conformance-testing;.
  </p>
  
  
  <h4 id="struct_ATM">5.&sc-CT;.3 Abstract test methods</h4>
  
  <p>
    ISO 10303 specifies an &tr-abstract-test-method; for each &tr-implementation-method;. The abstract test
    method describes how an implementation of a particular &tr-implementation-method; is to be tested,
    independent of:
  </p>
  <ul>
    <li>the particular implementation;</li>
    <li>the testing tools and procedures;</li>
    <li>the specific &tr-AP; under test.</li>
  </ul>
  
  <!-- Abstract test suites -->

  <h3 id="struct_ATS">5.&sc-ATS;<space/>&tr-Abstract-test-suites;</h3>
  <p>
    An &tr-abstract-test-suite; contains the set of &tr-abstract-test-cases; for an &tr-AP; to
    support the &tr-conformance-requirements;. Each &tr-abstract-test-case; provides an implementation-independent
    specification of the actions required to evaluate part of one or more &tr-conformance-requirements;. 
  </p>
  
  <p>
    Each &tr-conformance-requirement; corresponds to one or more &tr-abstract-test-cases;, designed to
    satisfy one or more test purposes. For each &tr-abstract-test-case;, &tr-verdict-criteria; are generated
    from the &tr-conformance-requirements; to allow a testing laboratory to assess the conformance of
    an implementation with respect to that test case. When a conformance test based on an &tr-abstract-test-case; is conducted, the resulting &tr-verdict; indicates if the implementation meets one or more
    &tr-conformance-requirements;.
    
  </p>
  
  
</collection_page>
