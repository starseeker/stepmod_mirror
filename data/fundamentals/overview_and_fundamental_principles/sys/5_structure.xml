<collection_page page_type="main">
	<h2>
		<a name="defns">5 Structure of IS0 10303</a>
	</h2>

	<h2>5.1 Series of parts</h2>
	<p>
IS0 10303 is divided into nine series of parts. Each series has a unique function. Each series may
have one or more parts. The series are listed below with their numbering scheme:
	</p>
	<ul>
      <li>Description methods - Parts 11 to 19;</li>
      <li>Integrated resources:
	    <ul>
	      <li>Generic resources - Parts 41 to 99;</li>
	      <li>Application resources - Parts 101 to 199;</li>
	    </ul>
      </li> 
      <li>Application interpreted constructs - Parts 401 to 499 and 1001 to 1999;</li>
      <li>Application modules - Parts 401 to 499 and 1001 to 1999;</li>
      <li>Application protocols - Parts 201 to 299;</li>
      <li>Usage guides - Parts 5001 to 5999;</li>
      <li>Conformance testing methodology and framework - Parts 31 to 39;</li>
      <li>Abstract test suites - Parts 301 to 399, corresponding to the associated application protocols 201 to 399;</li>
      <li>Implementation methods - Parts 21 to 29.</li>	
	</ul>

	<h2>5.2 Description methods</h2>
	<p>
The description of product data in integrated resources and application protocols requires the
use of formal data specification languages to ensure consistency and avoid ambiguity. The languages
are intended to be both human-readable to facilitate human understanding and computer-interpretable
to facilitate the generation of application software and supporting tools.	
    </p>

	<h3>5.2.1 The EXPRESS language</h3>
	<p>
EXYPRESS is a formal data specification language, specified in IS0 10303-11, that provides the
mechanism for the normative description of product data for both integrated resources and
application protocols.
	<p>
	</p>
EXPRESS allows a description of the data and constraints applicable to product data. EXPRESS
permits the definition of resource constructs from data elements, constraints, relationships, rules
and functions. The language permits classification and structuring of resource constructs. Resource
constructs may be interpreted within application protocols. The interpretation capability
of EXPRESS is a mechanism to facilitate the development of application protocols by allowing the
addition of restrictions on attributes, the addition of constraints, the addition of relationships
among resource constructs and application constructs, or all of the above.
    </p>

	<h3>5.2.2 Graphical presentation of models</h3>
	<p>
The graphical presentation of models to illustrate normative data definitions is informative in all
cases. The four types of models within this International Standard using graphical presentations
are:
    </p>
    <ul>
      <li>resource constructs within integrated resources;</li>
      <li>application activity models;</li>
      <li>application reference models;</li>
      <li>application interpreted models.</li>
    </ul>
	<p>
Graphical presentations are provided to aid in understanding the definitions presented in each
part. Different graphical presentations that are used within IS0 10303 include:
    </p>
    <ul>
      <li>EXPRESS-G - The graphical representation of EXPRESS as defined in IS0 10303-11.</li>
      <li>IDEFO - An activity modelling notation [2] used for application activity models within
          application protocols.</li>
      <li>IDEFlX - The graphical representation used in the IDEFlX information modelling
          method [3].</li>
      <li>NIAM - The graphical representation used within the NIAM information modelling
method [4].</li>	
    </ul>

	<h2>5.3 Integrated resources</h2>
	<p>
The integrated resources provide resource constructs that are used as the basis of representation
of product data. The integrated resources are interpreted to support the information
requirements of applications.
	<p>
	</p>
Integrated resources provide a unique representation of each element of information within
IS0 10303. The meanings of the resource constructs are provided through text definitions.
	<p>
	</p>
The integrated resources are divided into logically-related sets of one or more resource constructs.
The generic resources are context-independent. The application resources are applicable to
specified ranges of applications.
Examples of the two types of integrated resources include:
Generic resources:
    </p>
    <ul>
      <li>Fundamentals of product description and support (IS0 10303-41);</li>
      <li>Geometric and topological representation (IS0 10303-42);</li>
      <li>Representation structures (IS0 10303-43);</li>
      <li>Product structure configuration (IS0 10303-44);</li>
      <li>Material and other engineering properties (IS0 10303-45);</li>
      <li>Visual presentation (IS0 10303-46);</li>
      <li>Shape variation tolerances (IS0 10303-47);</li>
      <li>Process structure and properties (IS0 10303-49);</li>
      <li>Mathematical constructs (IS0 10303-50);</li>
      <li>Mathematical representation (IS0 10303-51);</li>
      <li>Mesh-based topology (IS0 10303-52) ???;</li>
      <li>Numerical analysis (IS0 10303-53) ???;</li>
      <li>Classification and set theory (IS0 10303-54);</li>
      <li>Procedural and hybrid representation (IS0 10303-55);</li>
      <li>State (IS0 10303-56);</li>
      <li>Risk (IS0 10303-58);</li>
      <li>Quality of product shape data (IS0 10303-59);</li>
    </ul>
    <p>
Application resources:
    </p>
    <ul>
      <li>Draughting (IS0 10303-101);</li>
      <li>Finite element analysis (IS0 10303-104);</li>
      <li>Kinematics (IS0 10303-105);</li>
      <li>Finite element analysis definition relationships (IS0 10303-107);</li>
      <li>Parameterization and constraints for explicit geometric product models (IS0 10303-108);</li>
      <li>Kinematic and geometric constraints for assembly models (IS0 10303-109);</li>
      <li>Computational fluid dynamics data (IS0 10303-110) ???;</li>
      <li>Elements for the procedural modelling of solid shapes (IS0 10303-111);</li>
      <li>Modelling commands for the exchange of procedurally represented 2D CAD models (IS0 10303-112).</li>
    </ul>
    <p>
Generic resource constructs may be interdependent to avoid duplication. Application resource
constructs may reference generic resource constructs.
    </p>

	<h2>5.4 Application interpreted construct</h2>
	<p>
xxx	
    </p>
    <ul>
      <li>Edge-based wireframe (IS0 10303-501);</li>
      <li>Shell-based wireframe (IS0 10303-502);</li>
      <li>Geometrically bounded 2D wireframe (IS0 10303-503);</li>
      <li>Draughting annotation (IS0 10303-504);</li>
      <li>Drawing structure and administration (IS0 10303-505);</li>
      <li>Draughting elements (IS0 10303-506);</li>
      <li>Geometrically bounded surface (IS0 10303-507);</li>
      <li>Non-manifold surface (IS0 10303-508);</li>
      <li>Manifold surface (IS0 10303-509);</li>
      <li>Geometrically bounded wireframe (IS0 10303-510);</li>
      <li>Topologically bounded surface (IS0 10303-511);</li>
      <li>Faceted boundary representation (IS0 10303-512);</li>
      <li>Elementary boundary representation (IS0 10303-513);</li>
      <li>Advanced boundary representation (IS0 10303-514);</li>
      <li>Constructive solid geometry (IS0 10303-515);</li>
      <li>Mechanical design geometric presentation (IS0 10303-517);</li>
      <li>Mechanical design shaded representation (IS0 10303-518);</li>
      <li>Geometric tolerances (IS0 10303-519);</li>
      <li>Associative draughting elements (IS0 10303-520);</li>
      <li>Manifold subsurface (IS0 10303-521);</li>
      <li>Machining features (IS0 10303-522);</li>
      <li>Curve swept solid (IS0 10303-523);</li>
    </ul>

	<h2>5.5 Application modules</h2>
	<p>
xxx	
    </p>

	<h2>5.6 Application protocols</h2>
	<p>
    </p>

	<h3>5.6.1 Definition of application requirements</h3>
	<p>
An application protocol (AP) includes the definitions of scope, context, and information requirements 
of an application. The definitions may specify functions, processes or information
that are excluded from the application in order to clarify the scope, context, and information
requirements. The statement of scope is supported by an application activity model (AAM)
that describes the processes, information flows, and functional requirements of the application.
The activity model is included as an informative annex to the AP.
    </p>
    <p>
The information requirements and constraints for the application context are defined by means
of a set of units of functionality and application objects using application-based terminology.
This definition is derived from an application reference model (ARM). An ARM is a formal
information model that is documented in an informative annex to the AP.
    </p>

	<h3>5.6.2 Information representation</h3>
	<p>
The resource constructs for representing the information requirements of the application are
specified in an application interpreted model (AIM) using the EXPRESS language. The AIM
is assembled from resource constructs specified by the integrated resources. The resource constructs
are interpreted to meet the application requirements within the defined context and
scope of the AP.
    </p>
    <p>
A mapping from the information requirements to the AIM is provided. The mapping defines
the use within the AIM of resource constructs from the integrated resources to represent the
information requirements of the application.
    </p>

	<h3>5.6.3 Implementation methods</h3>
	<p>
The AP is independent of implementation methods. However, an AP may include implementation
method specific information in a normative annex. An AP includes a table of short names
that the exchange structure implementation method uses to encode AP entity names.
    </p>

	<h3>5.6.4 Conformance requirements</h3>
	<p>
An application protocol includes the conformance requirements to be satisfied by any implementation
claiming to support the requirements of the AP. Conformance requirements reflect the
capabilities defined in an AP and may be specified in the description methods, implementation
methods, or application protocol series of parts of IS0 10303.
    </p>

	<h2>5.7 Usage guides</h2>
	<p>
    </p>

	<h2>5.8 Conformance testing methodology and framework</h2>

	<h3>5.8.1 Purpose of conformance testing</h3>
	<p>
The conformance testing methodology and framework series of this International Standard provides
the general methodology and requirements for the process of testing the conformance
of a product that claims to implement an IS0 10303 application protocol. The goal of the
methodology and framework of conformance testing is to ensure:
    </p>
    <ul>
      <li>Repeatability: test results are consistent whenever undertaken;</li>
      <li>Comparability: test results are consistent wherever undertaken;</li>
      <li>Auditability: test procedures can be confirmed as having been correctly undertaken,
          subsequent to the testing, by review of record.</li>
    </ul>
    <p>
IS0 10303-31 provides a framework and describes the general concepts for conformance testing
of implementations of IS0 10303.
    </p>

	<h3>5.8.2 Procedures for conformance testing</h3>
	<p>
Conformance testing of an application protocol can be performed by applying the abstract test
method for the chosen implementation method to the test cases in the abstract test suite. The
procedures for conformance testing are independent of the implementation under test.
	</p>
	<p>
If a single implementation combines several application protocols, conformance testing is performed
for each application protocol separately.
	</p>
	<p>
IS0 10303 defines the roles and responsibilities of the testing laboratory and the client submitting
an implementation for conformance testing.
    </p>

	<h3>5.8.3 Abstract test methods</h3>
	<p>
IS0 10303 specifies an abstract test method for each implementation method. The abstract test
method describes how an implementation of a particular implementation method is to be tested,
independent of:
	</p>
	<ul>
      <li>the particular implementation;</li>
      <li>the testing tools and procedures;</li>
      <li>the specific application protocol under test.</li>
    </ul>

	<h2>5.9 Abstract test suites</h2>
	<p>
An abstract test suite contains the set of abstract test cases for an application protocol to
support the conformance requirements. Each abstract test ‘case provides an implementation-independent
specification of the actions required to evaluate part of one or more conformance
requirements. Each application protocol contains a normative reference to the corresponding
abstract test suite.
	</p>
	<p>
Each conformance requirement corresponds to one or more abstract test cases, designed to
satisfy one or more test purposes. For each abstract test case, verdict criteria are generated
from the conformance requirements to allow a testing laboratory to assess the conformance of
an implementation with respect to that test case. When a conformance test based on an abstract
test case is conducted, the resulting verdict indicates if the implementation meets one or more
conformance requirements.
    </p>

	<h2>5.10 Implementation methods</h2>

	<h3>5.10.1 Purpose</h3>
	<p>
IS0 10303 provides for various methods of implementation. An implementation method provides
a particular way of using the application protocols defined in IS0 10303. IS0 10303-21 specifies
an implementation method for an exchange structure. The exchange structure provides for the
writing and reading of the description of product data in application protocols, using clear text
or binary encoding.
    </p>

	<h3>5.10.2 Use of formal language</h3>
	<p>
An implementation method is defined using a formal language so that computer-based methods
may be used for the development of implementations.
    </p>

	<h3>5.10.3 Mapping from EXPRESS to implementation method</h3>
	<p>
EXPRESS provides the basis for all specifications of product information in IS0 10303. Each
implementation method defined in IS0 10303 specifies mapping rules from the syntax of EXPRESS
onto the language used for the implementation method. The structure and syntax of
each resource construct as it appears in the implementation is derived by applying the mapping
rules. The rules to be applied for a particular implementation method may be conditional on
the form of the EXPRESS definition that is being mapped. Any schema defined in EXPRESS
can be mapped to the implementation method.
    </p>

	<h3>5.10.4 Exchange structure implementation</h3>
	<p>
The syntax and mapping rules for the exchange structure using clear text encoding are specified
in IS0 10303-21. The exchange structure may be implemented to support file exchange. The
language used for the syntax of the exchange structure implementation method is based on Wirth
Syntax Notation [5]. The mapping from EXPRESS to the syntax of the exchange structure is
defined.
    </p>

	<h3>5.10.5 XML implementation</h3>
	<p>
xxx
<br/>ISO 10303-28 
    </p>

	<h3>5.10.6 HDF5 implementation</h3>
	<p>
xxx
<br/>ISO 10303-26 
    </p>

	<h3>5.10.7 Software interface implementation (SDAI)</h3>
	<p>
xxx
<br/>ISO 10303-22 
<br/>ISO 10303-23 
<br/>ISO 10303-24 
<br/>ISO 10303-27 
<br/>ISO 10303-35 
    </p>

	<h3>5.11 Miscellaneous</h3>

	<h3>5.11.1 EXPRESS-I</h3>
	<p>
xxx
<br/>ISO 10303-12
    </p>

	<h3>5.11.2 EXPRESS-X</h3>
	<p>
xxx
<br/>ISO 10303-14 
    </p>

	<h3>5.11.3 EXPRESS to OMG XMI binding</h3>
	<p>
xxx
<br/>ISO 10303-25 
    </p>

</collection_page>
