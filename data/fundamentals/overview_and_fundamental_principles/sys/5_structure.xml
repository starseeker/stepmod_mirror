<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE collection_page [
<!ENTITY % characters SYSTEM "characters.ent"> 
%characters; 
]>
<collection_page page_type="main">
  <h2 id="struct">5 Structure of ISO 10303</h2>
  
  <h3 id="struct_1">5.1 Series of parts</h3>
  
  <p>
    ISO 10303 is divided into nine series of parts. Each series has a unique function. Each series may
    have one or more parts. The series are listed below with their numbering scheme:
  </p>
  
  <ul>
    
    <li>description methods: parts 11 to 19;</li>
    <li>Integrated resources:
      <ul>
        <li>generic resources: parts 41 to 99;</li>
        <li>application resources: parts 101 to 199;</li>
      </ul>
    </li> 
    <li>application interpreted constructs: parts 401 to 499 and 1001 to 1999;</li>
    <li>application modules: parts 401 to 499 and 1001 to 1999;</li>
    <li>application protocols: parts 201 to 299;</li>
    <li>usage guides: parts 5001 to 5999;</li>
    <li>conformance testing methodology and framework: parts 31 to 39;</li>
    <li>abstract test suites: parts 301 to 399, corresponding to the associated application protocols 201 to 399;</li>
    <li>implementation methods: parts 21 to 29.</li>	
  </ul>
  
  <h3 id="struct_2">5.2 Description methods</h3>
  <p>
    The description of product data in integrated resources and application protocols requires the
    use of formal data specification languages to ensure consistency and avoid ambiguity. The languages
    are intended to be both human-readable to facilitate human understanding and computer-interpretable
    to facilitate the generation of application software and supporting tools.	
  </p>
  
  <h4 id="struct_2_1">5.2.1 The EXPRESS modeling language</h4>
  <p>
    ISO 10303-11 specifies EXRESS, a formal modeling language that provides the
    mechanism for the normative description of product data for both integrated resources and
    application protocols.
  </p>
  <p>
    EXPRESS allows a description of the data and constraints applicable to product data. EXPRESS
    permits the definition of resource constructs from data elements, constraints, relationships, rules
    and functions. The language permits classification and structuring of resource constructs. Resource
    constructs may be interpreted within application protocols. The interpretation capability
    of EXPRESS is a mechanism to facilitate the development of application protocols by allowing the
    addition of restrictions on attributes, the addition of constraints, the addition of relationships
    among resource constructs and application constructs, or all of the above.
  </p>
  
  <h4 id="struct_2_2">5.2.2 Graphical presentation of models</h4>
  <p>
    The graphical presentation of models to illustrate normative data definitions is informative in all
    cases. The four types of models within this International Standard using graphical presentations
    are:
  </p>
  <ul>
    <li>resource constructs within integrated resources;</li>
    <li>application activity models (AAMs);</li>
    <li>application reference models (ARMs);</li>
    <li>application interpreted models (AIMs).</li>
  </ul>
  <p>
    Graphical presentations are provided to aid in understanding the definitions presented in each
    part. Different graphical presentations that are used within ISO 10303 include:
    
  </p>
  
  <ul>
    
    <li>EXPRESS-G: the graphical representation of EXPRESS, used as an informative supplement to textual EXPRESS data models;</li>
    
    <li>IDEF0: an activity modelling notation [2] used for AAMs within
      application protocols;
    </li>
    
    <li>IDEFlX: the graphical representation used in the IDEFlX information modelling
      method [3] used for ARMs in some APs;
    </li>
    
    <li>NIAM: the graphical representation used within the NIAM information modelling
      method [4] used for ARMs in some APs.
    </li>	
    
  </ul>
  
  
  <h3 id="struct_3">5.3 Integrated resources</h3>
  
  <p>
    The integrated resources provide resource constructs that are used as the basis of representation
    of product data. The integrated resources are interpreted to support the information
    requirements of applications.
    
    <p>
      
    </p>
    Integrated resources provide a unique representation of each element of information within
    ISO 10303. The meanings of the resource constructs are provided through text definitions.
    
    <p>
      
    </p>
    The integrated resources are divided into logically-related sets of one or more resource constructs.
    The generic resources are context-independent. The application resources are applicable to
    specified ranges of applications.
  </p>

  <h4 id="struct_3_1">5.3.1 Generic resources</h4>
  
  <p>The following are the generic resources:</p>
  
  <ul>
    
    <li>Fundamentals of product description and support (ISO 10303-41);</li>
    
    <li>Geometric and topological representation (ISO 10303-42);</li>
    
    <li>Representation structures (ISO 10303-43);</li>
    
    <li>Product structure configuration (ISO 10303-44);</li>
    
    <li>Material and other engineering properties (ISO 10303-45);</li>
    
    <li>Visual presentation (ISO 10303-46);</li>
    
    <li>Shape variation tolerances (ISO 10303-47);</li>
    
    <li>Process structure and properties (ISO 10303-49);</li>
    
    <li>Mathematical constructs (ISO 10303-50);</li>
    
    <li>Mathematical representation (ISO 10303-51);</li>
    
    <li>Mesh-based topology (ISO 10303-52) ???;</li>
    
    <li>Numerical analysis (ISO 10303-53) ???;</li>
    
    <li>Classification and set theory (ISO 10303-54);</li>
    
    <li>Procedural and hybrid representation (ISO 10303-55);</li>
    
    <li>State (ISO 10303-56);</li>
    
    <li>Risk (ISO 10303-58);</li>
    
    <li>Quality of product shape data (ISO 10303-59);</li>
    
    <li>
      
      <p>Logical model of expressions (ISO 13584-20).</p>
      
      <p class="note">NOTE&sp3;Although it is part of ISO 13584, ISO 13584-20 plays the role of an integrated resource for ISO 10303.</p>
      
    </li>
    
  </ul>
  
  <h4 id="struct_3_2">5.3.2 Application resources</h4>

  <p>
    The following are the application resources:
    
  </p>
  
  <ul>
    
    <li>Draughting (ISO 10303-101);</li>
    
    <li>Finite element analysis (ISO 10303-104);</li>
    
    <li>Kinematics (ISO 10303-105);</li>
    
    <li>Finite element analysis definition relationships (ISO 10303-107);</li>
    
    <li>Parameterization and constraints for explicit geometric product models (ISO 10303-108);</li>
    
    <li>Kinematic and geometric constraints for assembly models (ISO 10303-109);</li>
    
    <li>Computational fluid dynamics data (ISO 10303-110) ???;</li>
    
    <li>Elements for the procedural modelling of solid shapes (ISO 10303-111);</li>
    
    <li>Modelling commands for the exchange of procedurally represented 2D CAD models (ISO 10303-112).</li>
    
  </ul>
  
  <p>
    Generic resource constructs may be interdependent to avoid duplication. Application resource
    constructs may reference generic resource constructs.
    
  </p>
  
  
  <h3 id="struct_4">5.4 Application interpreted construct</h3>
  
  <p>
    Application interpreted constructs provide logical groupings of interpreted constructs
    that supports a specific functionality for the usage of product data across multiple application
    contexts. An interpreted construct is a common interpretation of the integrated resources that
    supports shared information requirements among application protocols.
  </p>
  
   <p>
    The following are the application interpreted constructs:
   </p>
   <ul>
    
    <li>Edge-based wireframe (ISO 10303-501);</li>
    
    <li>Shell-based wireframe (ISO 10303-502);</li>
    
    <li>Geometrically bounded 2D wireframe (ISO 10303-503);</li>
    
    <li>Draughting annotation (ISO 10303-504);</li>
    
    <li>Drawing structure and administration (ISO 10303-505);</li>
    
    <li>Draughting elements (ISO 10303-506);</li>
    
    <li>Geometrically bounded surface (ISO 10303-507);</li>
    
    <li>Non-manifold surface (ISO 10303-508);</li>
    
    <li>Manifold surface (ISO 10303-509);</li>
    
    <li>Geometrically bounded wireframe (ISO 10303-510);</li>
    
    <li>Topologically bounded surface (ISO 10303-511);</li>
    
    <li>Faceted boundary representation (ISO 10303-512);</li>
    
    <li>Elementary boundary representation (ISO 10303-513);</li>
    
    <li>Advanced boundary representation (ISO 10303-514);</li>
    
    <li>Constructive solid geometry (ISO 10303-515);</li>
    
    <li>Mechanical design geometric presentation (ISO 10303-517);</li>
    
    <li>Mechanical design shaded representation (ISO 10303-518);</li>
    
    <li>Geometric tolerances (ISO 10303-519);</li>
    
    <li>Associative draughting elements (ISO 10303-520);</li>
    
    <li>Manifold subsurface (ISO 10303-521);</li>
    
    <li>Machining features (ISO 10303-522);</li>
    
    <li>Curve swept solid (ISO 10303-523);</li>
    
  </ul>
  
  
  <h3 id="struct_5">5.5 Application modules</h3>
  
  <p>Application modules are the key component of the
    ISO 10303 modular architecture. The basis of the approach is understanding and harmonizing the requirements,
    both new and those documented in existing APs, grouping the requirements
    into reuseable modules, and using the modules
    in the development of an AP.
  </p>
  
  <p>An application module contains much of the technical content that, in the initial ISO
    10303 architecture, was documented in an AP. The role of an AP document
    in the modular architecture is to provide a business context for the industrial
    use and implementation of the application modules that are the data specification
    of the AP.
  </p>
  
  <p>There are three types of application modules: foundation modules (level
    1), implementation modules (level 2), and AP modules (level 3). Foundation
    modules provide lower level reusable structures that are not likely to
    be implemented alone, but are highly shareable and reusable. Implementation
    modules define a capability that can be implemented and against which conformance
    classes can be defined. Each AP references a single root module that
    is an AP module. An AP module is an implementation module, and the
    contents of an AP module are the same as other implementation modules,
    the only documentation difference being in their name and title. The
    AP module from one AP can be used by another AP. A detailed description
    of the content of an application module is provided in Reference [<a href="biblio.htm#bibitem_AMConGde06">10</a>]. A detailed description of the content of an
    application protocol that uses application modules is provided in
    Reference [<a href="biblio.htm#bibitem_APConGde">11</a>].
  </p>
  
  <p>The ISO 10303 modular architecture is intended to:</p>
  
  <ul>
    
    <li>
      ensure the ability to implement a combination of subsets of multiple
      APs, or to extend existing APs to meet a business need;
    </li>
    
    
    <li>
      ensure the ability to reuse application software developed to support
      one AP in the development of an implementation of another AP with the same,
      or similar, requirements;
    </li>
    
    
    <li>
      avoid the duplication and repeated documentation of the same requirements
      in different application protocols, leading to potentially different solutions
      for the same requirements;
    </li>
    
    
    <li>
      ensure the ability to reuse data generated by an implementation of one
      or more APs by an implementation of one or more different APs.
    </li>
    
  </ul>
  
  
  <h3 id="struct_6">5.6 Application protocols</h3>
  
  <p>
    
  </p>
  
  
  <h4 id="struct_6_1">5.6.1 Definition of application requirements</h4>
  
  <p>
    An application protocol (AP) includes the definitions of scope, context, and information requirements 
    of an application. The definitions may specify functions, processes or information
    that are excluded from the application in order to clarify the scope, context, and information
    requirements. The statement of scope is supported by an application activity model (AAM)
    that describes the processes, information flows, and functional requirements of the application.
    The activity model is included as an informative annex to the AP.
    
  </p>
  
  <p>
    The information requirements and constraints for the application context are defined by means
    of a set of units of functionality and application objects using application-based terminology.
    This definition is derived from an application reference model (ARM). An ARM is a formal
    information model that is documented in an informative annex to the AP.
    
  </p>
  
  
  <h4 id="struct_6_2">5.6.2 Information representation</h4>
  
  <p>
    The resource constructs for representing the information requirements of the application are
    specified in an application interpreted model (AIM) using the EXPRESS language. The AIM
    is assembled from resource constructs specified by the integrated resources. The resource constructs
    are interpreted to meet the application requirements within the defined context and
    scope of the AP.
    
  </p>
  
  <p>
    A mapping from the information requirements to the AIM is provided. The mapping defines
    the use within the AIM of resource constructs from the integrated resources to represent the
    information requirements of the application.
    
  </p>
  
  
  <h4 id="struct_6_3">5.6.3 Implementation methods</h4>
  
  <p>
    The AP is independent of implementation methods. However, an AP may include implementation
    method specific information in a normative annex. An AP includes a table of short names
    that the exchange structure implementation method uses to encode AP entity names.
    
  </p>
  
  
  <h4 id="struct_6_4">5.6.4 Conformance requirements</h4>
  
  <p>
    An application protocol includes the conformance requirements to be satisfied by any implementation
    claiming to support the requirements of the AP. Conformance requirements reflect the
    capabilities defined in an AP and may be specified in the description methods, implementation
    methods, or application protocol series of parts of ISO 10303.
    
  </p>
  
  
  <h4 id="struct_6_5">5.6.5 Monolithic application protocols</h4>
  <p>The following are the monolithic application protocols:</p>
  <ul>
    <li>Explicit draughting (ISO 10303-201);</li>
    <li>Associative draughting (ISO 10303-202);</li>
    <li>Mechanical design using boundary representation (ISO 10303-204);</li>
    <li>Sheet metal die planning and design (ISO 10303-207);</li>
    <li>Electrotechnical design and installation (ISO 10303-212);</li>
    <li>Core data for automotive mechanical design processes (ISO 10303-214);</li>
    <li>Ship arrangement (ISO 10303-215);</li>
    <li>Ship moulded forms (ISO 10303-216);</li>
    <li>Ship structures (ISO 10303-218);</li>
    <li>Dimensional inspection information exchange (ISO 10303-219);</li>
    <li>Exchange of design and manufacturing product information for cast parts (ISO 10303-223);</li>
    <li>Mechanical product definition for process plans using machining features (ISO 10303-224);</li>
    <li>Building elements using explicit shape representation (ISO 10303-225);</li>
    <li>Plant spatial configuration (ISO 10303-227);</li>
    <li>Technical data packaging core information and exchange (ISO 10303-232);</li>
    <li>Materials information for the design and verification of products (ISO 10303-235);</li>
    <li>Application interpreted model for computerized numerical controllers (ISO 10303-238);</li>
    <li>Process plans for machined products (ISO 10303-240);</li>
  </ul>

  <h4 id="struct_6_6">5.6.6 Modular application protocols</h4>
  <p>The following are the modular application protocols:</p>
  <ul>
    <li>Configuration controlled 3D design of mechanical parts and assemblies (ISO 10303-203);</li>
    <li>Multidisciplinary analysis and design (ISO 10303-209);</li>
    <li>Electronic assembly, interconnect, and packaging design (ISO 10303-210);</li>
    <li>Functional data and their schematic representation for process plant (ISO 10303-221);</li>
    <li>Systems engineering (ISO 10303-233);</li>
    <li>Furniture catalog and interior design (ISO 10303-236);</li>
    <li>Product life cycle support (ISO 10303-239).</li>
  </ul>

  <h3 id="struct_7">5.7 Usage guides</h3>
  
  <p>
    
  </p>
  
  
  <h3 id="struct_8">5.8 Conformance testing methodology and framework</h3>
  
  
  <h4 id="struct_8_1">5.8.1 Purpose of conformance testing</h4>
  
  <p>
    The conformance testing methodology and framework series of this International Standard provides
    the general methodology and requirements for the process of testing the conformance
    of a product that claims to implement an ISO 10303 application protocol. The goal of the
    methodology and framework of conformance testing is to ensure:
    
  </p>
  
  <ul>
    
    <li>Repeatability: test results are consistent whenever undertaken;</li>
    
    <li>Comparability: test results are consistent wherever undertaken;</li>
    
    <li>Auditability: test procedures can be confirmed as having been correctly undertaken,
      subsequent to the testing, by review of record.
    </li>
    
  </ul>
  
  <p>
    ISO 10303-31 provides a framework and describes the general concepts for conformance testing
    of implementations of ISO 10303.
    
  </p>
  
  
  <h4 id="struct_8_2">5.8.2 Procedures for conformance testing</h4>
  
  <p>
    Conformance testing of an application protocol can be performed by applying the abstract test
    method for the chosen implementation method to the test cases in the abstract test suite. The
    procedures for conformance testing are independent of the implementation under test.
    
  </p>
  
  <p>
    If a single implementation combines several application protocols, conformance testing is performed
    for each application protocol separately.
    
  </p>
  
  <p>
    ISO 10303 defines the roles and responsibilities of the testing laboratory and the client submitting
    an implementation for conformance testing.
    
  </p>
  
  
  <h4 id="struct_8_3">5.8.3 Abstract test methods</h4>
  
  <p>
    ISO 10303 specifies an abstract test method for each implementation method. The abstract test
    method describes how an implementation of a particular implementation method is to be tested,
    independent of:
    
  </p>
  
  <ul>
    
    <li>the particular implementation;</li>
    
    <li>the testing tools and procedures;</li>
    
    <li>the specific application protocol under test.</li>
    
  </ul>
  
  
  <h3 id="struct_9">5.9 Abstract test suites</h3>
  
  <p>
    An abstract test suite contains the set of abstract test cases for an application protocol to
    support the conformance requirements. Each abstract test ‘case provides an implementation-independent
    specification of the actions required to evaluate part of one or more conformance
    requirements. Each application protocol contains a normative reference to the corresponding
    abstract test suite.
    
  </p>
  
  <p>
    Each conformance requirement corresponds to one or more abstract test cases, designed to
    satisfy one or more test purposes. For each abstract test case, verdict criteria are generated
    from the conformance requirements to allow a testing laboratory to assess the conformance of
    an implementation with respect to that test case. When a conformance test based on an abstract
    test case is conducted, the resulting verdict indicates if the implementation meets one or more
    conformance requirements.
    
  </p>
  
  
  <h3 id="struct_10">5.10 Implementation methods</h3>
  
  
  <h4 id="struct_10_1">5.10.1 Purpose</h4>
  
  <p>
    ISO 10303 provides for various methods of implementation. An implementation method provides
    a particular way of using the application protocols defined in ISO 10303. 
    
    ISO 10303-21 specifies
    an implementation method for an exchange structure. The exchange structure provides for the
    writing and reading of the description of product data in application protocols, using clear text
    or binary encoding.
    
  </p>
  
  
  <h4 id="struct_10_2">5.10.2 Use of formal language</h4>
  
  <p>
    An implementation method is defined using a formal language so that computer-based methods
    may be used for the development of implementations.
  </p>
  
  
  <h4 id="struct_10_3">5.10.3 Mapping from EXPRESS to implementation method</h4>
  
  <p>
    EXPRESS provides the basis for all specifications of product information in ISO 10303. Each
    implementation method defined in ISO 10303 specifies mapping rules from the syntax of EXPRESS
    onto the language used for the implementation method. The structure and syntax of
    each resource construct as it appears in the implementation is derived by applying the mapping
    rules. The rules to be applied for a particular implementation method may be conditional on
    the form of the EXPRESS definition that is being mapped. Any schema defined in EXPRESS
    can be mapped to the implementation method.
    
  </p>
  
  
  <h4 id="struct_10_4">5.10.4 Exchange structures for product data (implementation)</h4>
  
  <p>
    ISO 10303 provides three different ways of exchanging product data described in EXPRESS between computer systems:
  </p>
  <ul>
  	<li>Clear text encoding of the exchange structure (ISO 10303-21);</li>
  	<li>Binary representation of EXPRESS-driven data (ISO/TS 10303-26);<br/>??? Not yet published ???;</li>
  	<li>XML representations of EXPRESS schemas and data, using XML schemas (ISO 10303-28); <br/>??? To mention both the older DTD and newer XML schema version???</li>
  </ul>    
  <p> 
    ISO 10303-21 provides a compact and human readable form of the exchange structure.   
    <!-- The syntax and mapping rules for the exchange structure using clear text encoding are specified in ISO 10303-21.  --> 
    The exchange structure may be implemented to support file exchange. The
    language used for the syntax of the exchange structure implementation method is based on Wirth
    Syntax Notation [5]. The mapping from EXPRESS to the syntax of the exchange structure is
    defined.
  </p>  
  <p>
    ISO 10303-26 provides a mapping of EXPRESS to the binary Hierarchical Data Format Version 5 (HDF5)
    that is optimized for the exchange of huge data sets.
    HDF5 is a product of The HDF Group, a spin off from the National Center for Supercomputing Applications (NCSA) at the University of Illinois at Urbana-Champaign. 
    The HDF software includes I/O libraries and tools for analyzing, visualizing, and converting scientific data.
  </p>
  <p>
    ISO 10303-28 enables product data described in EXPRESS to be exchanged using XML 
    and the many software tools developed to support XML technologies. 
    It also permits product data sets so described to be readily incorporated into "electronic commerce" transactions represented in XML.
    <br/> ??? more to talk on XML schema and DTD ??? 
  </p>
  
  
  <h4 id="struct_10_7">5.10.7 Software interface implementation (SDAI)</h4>
  
  <p>
    xxx
    <br/>ISO 10303-22 
    <br/>ISO 10303-23 
    <br/>ISO 10303-24 
    <br/>ISO 10303-27 
    <br/>ISO 10303-35 
    
  </p>
  
  
  <h4 id="struct_11">5.11 Miscellaneous</h4>
  
  
  <h4 id="struct_11_1">5.11.1 EXPRESS-I</h4>
  
  <p>
    xxx
    <br/>ISO 10303-12
    
  </p>
  
  
  <h4 id="struct_11_2">5.11.2 EXPRESS-X</h4>
  
  <p>
    xxx
    <br/>ISO 10303-14 
    
  </p>
  
  
  <h4 id="struct_11_3">5.11.3 EXPRESS to OMG XMI binding</h4>
  
  <p>
    xxx
    <br/>ISO 10303-25 
    
  </p>

</collection_page>
