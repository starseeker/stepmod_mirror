<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xsl/part1000/collection_page.xsl"?>
<!DOCTYPE collection_page [
<!ENTITY % characters SYSTEM "characters.ent"> 
<!ENTITY % terms SYSTEM "terms.ent"> 
%characters; 
%terms; 
]>
<collection_page page_type="main">
  <h2 id="struct">5 &tr-Structure; of ISO 10303</h2>
  
  <h3 id="struct_1">5.1 Series of parts</h3>
  
  <p>
    ISO 10303 is divided into nine series of parts. Each series has a unique function and
    consists of one or more parts. The series are listed below with their numbering scheme:
  </p>
  
  <ul>
    <li>description methods: parts 11 to 19;</li>
    <li>&tr-implementation-methods;: parts 21 to 29;</li>	
    <li>&tr-conformance-testing; methodology and framework: parts 31 to 39;</li>
    <li>&tr-integrated-resources;:
      <ul>
        <li>&tr-generic-resources;: parts 41 to 99;</li>
        <li>&tr-application-resources;: parts 101 to 199;</li>
      </ul>
    </li> 
    <li>&tr-application-protocols;: parts 201 to 299;</li>
    <li>&tr-abstract-test-suites;: parts 301 to 399, corresponding to the associated &tr-application-protocols; 201 to 299;</li>
    <li>&tr-application-modules;: parts 401 to 499 and 1001 to 1999;</li>
    <li>&tr-application-interpreted-constructs;: parts 501 to 599;</li>
    <li>usage guides: parts 5001 to 5999;</li>
  </ul>
  
  <h3 id="struct_2">5.2 Description methods</h3>
  <h4 id="struct_2_1">5.2.1 Purpose</h4>
  <p>
    The description of &tr-product-data; in SC4 &tr-common-resources; and &tr-application-protocols; requires the
    use of formal &tr-data; specification languages to ensure consistency and avoid ambiguity. The languages
    are intended to be both human-readable to facilitate human understanding and computer-interpretable
    to facilitate the generation of &tr-application; software and supporting tools.	
  </p>
  
  <h4 id="struct_2_2">5.2.2 The EXPRESS modeling language</h4>
  <p>
    ISO 10303-11 specifies EXRESS, a formal modeling language that provides the
    mechanism for the normative description of &tr-product-data; for both SC4 &tr-common-resources; and
    &tr-application-protocols;.
  </p>
  <p>
    EXPRESS allows a description of the &tr-data; and constraints applicable to &tr-product-data;. EXPRESS
    permits the definition of &tr-resource-constructs; from &tr-data; elements, constraints, relationships, rules
    and functions. The language permits classification and structuring of &tr-resource-constructs;. Resource
    constructs may be interpreted within &tr-application-protocols;. The &tr-interpretation; capability
    of EXPRESS is a mechanism to facilitate the development of &tr-application-protocols; by allowing the
    addition of restrictions on attributes, the addition of constraints, the addition of relationships
    among &tr-resource-constructs; and &tr-application-constructs;, or all of the above.
  </p>
    <h4 id="struct_2_3">5.2.3 The EXPRESS-I language reference manual (ISO 10303-12)</h4>
  
  <p>
   EXPRESS-I is a formal &tr-data; representation and &tr-abstract-test-case; 
specification language. It may be used to exemplify the &tr-information; 
requirements of other parts of this International Standard and is a 
companion to the EXPRESS and EXPRESS-G languages.  The EXPRESS-I 
language provides a means of displaying instantiations of EXPRESS 
&tr-data; elements. The language is designed principally for human 
readability and for ease of mapping between EXPRESS-I instances and 
the definitions in an EXPRESS schema.  EXPRESS-I is not intended to 
be a specifications for computer-efficient methods for instantiating a schema. 
 </p>
<p>
The language has two major parts.
The first part is for the display of &tr-data; instances. &tr-Data; may be displayed on 
an entity by entity basis, on a schema basis or as a collection of schema 
instances which are taken to be a display of some &tr-information-model; of a 
universe of discourse. The &tr-information-model; is assumed to have been defined 
using EXPRESS.
The second part of the language is for the specification of &tr-abstract-test-cases; for the purposes of formally describing tests to be performed against 
an implementation of an EXPRESS-defined &tr-information-model;.
      </p>
    
  <h4 id="struct_2_4">5.2.4 The EXPRESS-X language reference manual (ISO 10303-14)</h4>
  
  <p>
EXPRESS-X is a structural &tr-data; mapping language.  It allows the unambiguous 
specification of relationship between &tr-data; that 
is governed by EXPRESS schemas, and for specifying alternative views 
of &tr-data; that is governed by EXPRESS schemas. 
  </p>
  
  <h3 id="struct_3">5.3 &tr-Conformance-testing; methodology and framework</h3>
  
  
  <h4 id="struct_8_1">5.3.1 Purpose</h4>
  
  <p>
    The &tr-conformance-testing; methodology and framework series of this International Standard provides
    the general methodology and requirements for the process of testing the conformance
    of a &tr-product; that claims to implement an ISO 10303 &tr-application-protocol;. The goal of the
    methodology and framework of &tr-conformance-testing; is to ensure:
    
  </p>
  
  <ul>
    
    <li>Repeatability: test results are consistent whenever undertaken;</li>
    
    <li>Comparability: test results are consistent wherever undertaken;</li>
    
    <li>Auditability: test procedures can be confirmed as having been correctly undertaken,
      subsequent to the testing, by review of record.
    </li>
    
  </ul>
  
  <p>
    ISO 10303-31 provides a framework and describes the general concepts for &tr-conformance-testing;
    of implementations of ISO 10303.
    
  </p>
  
  
  <h4 id="struct_8_2">5.3.2 Procedures for &tr-conformance-testing;</h4>
  
  <p>
    &tr-Conformance-testing; of an &tr-application-protocol; can be performed by applying the abstract test
    method for the chosen &tr-implementation-method; to the test cases in the &tr-abstract-test-suite;. The
    procedures for &tr-conformance-testing; are independent of the &tr-implementation-under-test;.
    
  </p>
  
  <p>
    If a single implementation combines several &tr-application-protocols;, &tr-conformance-testing; is performed
    for each &tr-application-protocol; separately.
    
  </p>
  
  <p>
    ISO 10303 defines the roles and responsibilities of the testing laboratory and the client submitting
    an implementation for &tr-conformance-testing;.
    
  </p>
  
  
  <h4 id="struct_3_3">5.3.3 Abstract test methods</h4>
  
  <p>
    ISO 10303 specifies an &tr-abstract-test-method; for each &tr-implementation-method;. The abstract test
    method describes how an implementation of a particular &tr-implementation-method; is to be tested,
    independent of:
    
  </p>
  
  <ul>
    
    <li>the particular implementation;</li>
    
    <li>the testing tools and procedures;</li>
    
    <li>the specific &tr-application-protocol; under test.</li>
    
  </ul>
  

  <h3 id="struct_4">5.4 &tr-Integrated-resources;</h3>
  <h4 id="struct_3_1">5.4.1 Purpose</h4>
  
  <p>
  The &tr-integrated-resources; declare &tr-resource-constructs; that are used as the basis of representation
    of &tr-product-data;. The &tr-integrated-resources; are interpreted to support the &tr-information;
    requirements of &tr-application; domains.
    Other International Standards may provide &tr-product-data; descriptions written in EXPRESS which may be referenced by the &tr-integrated-resources;.
    <p>
      
    </p>
    &tr-Integrated-resources; provide a unique representation of each element of &tr-information; within
    ISO 10303. The meanings of the &tr-resource-constructs; are provided through text definitions.
    
    <p>
      
    </p>
    The &tr-integrated-resources; are divided into logically-related sets of one or more &tr-resource-constructs;.
    The &tr-generic-resources; are context-independent. The &tr-application-resources; are applicable to
    specified ranges of &tr-applications;.
  </p>

  <p>
    Generic and &tr-application;<space/>&tr-resource-constructs; may reference &tr-generic-resource; constructs.
  </p>
  
  <h4 id="struct_4_2">5.4.2 Generic resources</h4>
  
  <p>At the time of preparation of this part of ISO 10303, the following are the members of the &tr-generic-resources; series:</p>
  
  <ul>
    
    <li>Fundamentals of &tr-product; description and support (ISO 10303-41);</li>
    
    <li>Geometric and topological representation (ISO 10303-42);</li>
    
    <li>Representation &tr-structures; (ISO 10303-43);</li>
    
    <li>&tr-Product;<space/>&tr-structure; configuration (ISO 10303-44);</li>
    
    <li>Material and other engineering properties (ISO 10303-45);</li>
    
    <li>Visual &tr-presentation; (ISO 10303-46);</li>
    
    <li>Shape variation tolerances (ISO 10303-47);</li>
    
    <li>Process &tr-structure; and properties (ISO 10303-49);</li>
    
    <li>Mathematical constructs (ISO 10303-50);</li>
    
    <li>Mathematical representation (ISO 10303-51);</li>
    
    <li>Mesh-based topology (ISO 10303-52);</li>
    
    <li>Numerical analysis (ISO 10303-53);</li>
    
    <li>Classification and set theory (ISO 10303-54);</li>
    
    <li>Procedural and hybrid representation (ISO 10303-55);</li>
    
    <li>State (ISO 10303-56);</li>
    
    <li>Risk (ISO 10303-58);</li>
    
    <li>Quality of &tr-product; shape &tr-data; (ISO 10303-59);</li>
    
    <li>
      
      <p>Logical model of expressions (ISO 13584-20).</p>
      
      <p class="note">NOTE&sp3;Although it is part of ISO 13584, ISO 13584-20 plays the role of an &tr-integrated-resource; for ISO 10303.</p>
      
    </li>
    
  </ul>
  
  <h4 id="struct_4_3">5.4.3 &tr-Application-resources;</h4>

  <p>At the time of preparation of this part of ISO 10303, the following are the members of the &tr-application-resource; series:</p>
  
  <ul>
    
    <li>Draughting (ISO 10303-101);</li>
    
    <li>Finite element analysis (ISO 10303-104);</li>
    
    <li>Kinematics (ISO 10303-105);</li>
    
    <li>Finite element analysis definition relationships (ISO 10303-107);</li>
    
    <li>Parameterization and constraints for explicit geometric &tr-product; \models (ISO 10303-108);</li>
    
    <li>Kinematic and geometric constraints for &tr-assembly; models (ISO 10303-109);</li>
    
    <li>Mesh based computational fluid dynamics &tr-data; (ISO 10303-110);</li>
    
    <li>Elements for the procedural modelling of solid shapes (ISO 10303-111);</li>
    
    <li>Modelling commands for the exchange of procedurally represented 2D CAD models (ISO 10303-112).</li>
    
  </ul>
  
  
  <h3 id="struct_5">5.5 &tr-Abstract-test-suites;</h3>
  <p>
    An &tr-abstract-test-suite; contains the set of &tr-abstract-test-cases; for an &tr-application-protocol; to
    support the &tr-conformance-requirements;. Each abstract test ‘case provides an implementation-independent
    specification of the actions required to evaluate part of one or more conformance
    requirements. 
  </p>
  
  <p>
    Each &tr-conformance-requirement; corresponds to one or more &tr-abstract-test-cases;, designed to
    satisfy one or more test purposes. For each &tr-abstract-test-case;, &tr-verdict-criteria; are generated
    from the &tr-conformance-requirements; to allow a testing laboratory to assess the conformance of
    an implementation with respect to that test case. When a conformance test based on an abstract
    test case is conducted, the resulting &tr-verdict; indicates if the implementation meets one or more
    &tr-conformance-requirements;.
    
  </p>
  
  
  <h3 id="struct_6">5.6 &tr-Application-interpreted-construct;</h3>
    <h4 id="struct_6_1">5.6.1 Purpose</h4>
  <p>
The purpose of &tr-application-interpreted-constructs; (AIC) is to provide a mechanism 
to identify and document the common requirements of different &tr-application-protocols; 
as represented within their &tr-ARMs;.  
AICs provide a consistent and standardized &tr-interpretation; of the &tr-integrated-resources; (IRs) 
across different &tr-application-contexts; by identifying the semantics and shared &tr-data; definitions 
to support a specific functionality.
  <p>
  </p>
&tr-AICs; may be referenced by &tr-application-protocols;, &tr-application-modules;
or other &tr-AICs; in their entirely. 
In the modular architecture, typically one &tr-AIC; is encapsulated in one &tr-application-module;.
  </p>
  
  <p>At the time of preparation of this part of ISO 10303, the following are the members 
    of the &tr-application-interpreted-constructs; series:</p>
   <ul>
    
    <li>Edge-based wireframe (ISO 10303-501);</li>
    
    <li>Shell-based wireframe (ISO 10303-502);</li>
    
    <li>Geometrically bounded 2D wireframe (ISO 10303-503);</li>
    
    <li>Draughting annotation (ISO 10303-504);</li>
    
    <li>Drawing &tr-structure; and administration (ISO 10303-505);</li>
    
    <li>Draughting elements (ISO 10303-506);</li>
    
    <li>Geometrically bounded surface (ISO 10303-507);</li>
    
    <li>Non-manifold surface (ISO 10303-508);</li>
    
    <li>Manifold surface (ISO 10303-509);</li>
    
    <li>Geometrically bounded wireframe (ISO 10303-510);</li>
    
    <li>Topologically bounded surface (ISO 10303-511);</li>
    
    <li>Faceted boundary representation (ISO 10303-512);</li>
    
    <li>Elementary boundary representation (ISO 10303-513);</li>
    
    <li>Advanced boundary representation (ISO 10303-514);</li>
    
    <li>Constructive solid geometry (ISO 10303-515);</li>
    
    <li>Mechanical design geometric &tr-presentation; (ISO 10303-517);</li>
    
    <li>Mechanical design shaded representation (ISO 10303-518);</li>
    
    <li>Geometric tolerances (ISO 10303-519);</li>
    
    <li>Associative draughting elements (ISO 10303-520);</li>
    
    <li>Manifold subsurface (ISO 10303-521);</li>
    
    <li>Machining features (ISO 10303-522);</li>
    
    <li>Curve swept solid (ISO 10303-523);</li>
    
  </ul>
  
  
  <h3 id="struct_7">5.7 &tr-Application-modules;</h3>
    <h4 id="struct_7_1">5.7.1 Purpose</h4>

  <p>&tr-Application-modules; are the key constituent of the
    ISO 10303 modular architecture. The basis of the modular approach is understanding and harmonizing the requirements,
    both new and those documented in existing &tr-APs;, grouping the requirements
    into reuseable modules, and using the modules
    in the development of an &tr-AP;.
  </p>
  
  <p>An &tr-application-module; contains much of the technical content that, in the initial ISO
    10303 architecture, was documented in an &tr-AP;. The role of an &tr-AP; document
    in the modular architecture is to provide a business context for the industrial
    use and implementation of the &tr-application-modules; that are the &tr-data; specification
    of the &tr-AP;.
  </p>
  
  <p>There are three types of &tr-application-modules;: foundation modules (level
    1), implementation modules (level 2), and &tr-AP; modules (level 3). Foundation
    modules provide lower level reusable &tr-structures; that are not likely to
    be implemented alone, but are highly shareable and reusable. Implementation
    modules define a capability that can be implemented and against which conformance
    classes can be defined. Each &tr-AP; references a single root module that
    is an &tr-AP; module. An &tr-AP; module is an implementation module, and the
    contents of an &tr-AP; module are the same as other implementation modules,
    the only documentation difference being in their name and title. The
    &tr-AP; module from one &tr-AP; can be used by another &tr-AP;. A detailed description
    of the content of an &tr-application-module; is provided in Reference [<link ref="biblio.htm#bibitem_AMConGde06">10</link>]. A detailed description of the content of an
    &tr-application-protocol; that uses &tr-application-modules; is provided in
    Reference [<link ref="biblio.htm#bibitem_APConGde">11</link>].
  </p>
  
  <p>The ISO 10303 modular architecture is intended to:</p>
  
  <ul>
    
    <li>
      ensure the ability to implement a combination of subsets of multiple
      &tr-APs;, or to extend existing &tr-APs; to meet a business need;
    </li>
    
    
    <li>
      ensure the ability to reuse &tr-application; software developed to support
      one &tr-AP; in the development of an implementation of another &tr-AP; with the same,
      or similar, requirements;
    </li>
    
    
    <li>
      avoid the duplication and repeated documentation of the same requirements
      in different &tr-application-protocols;, leading to potentially different solutions
      for the same requirements;
    </li>
    
    
    <li>
      ensure the ability to reuse &tr-data; generated by an implementation of one
      or more &tr-APs; by an implementation of one or more different &tr-APs;.
    </li>
    
  </ul>
  
  
  <h3 id="struct_8">5.8 &tr-application-protocols;</h3>
  <h4 id="struct_8_1">5.8.1 Purpose</h4>  
  <p>
    
  </p>
  
  
  <h4 id="struct_8_2">5.8.2 Definition of &tr-application; requirements</h4>
  
  <p>
    An &tr-application-protocol; (AP) includes the definitions of scope, context, and &tr-information; requirements 
    of an &tr-application;. The definitions may specify functions, processes or &tr-information;
    that are excluded from the &tr-application; in order to clarify the scope, context, and &tr-information;
    requirements. The statement of scope is supported by an &tr-application-activity-model; (AAM)
    that describes the processes, &tr-information; flows, and functional requirements of the &tr-application;.
    The activity model is included as an informative annex to the &tr-AP;.
    
  </p>
  
  <p>
    The &tr-information; requirements and constraints for the &tr-application-context; are defined by means
    of a set of &tr-units-of-functionality; and &tr-application-objects; using &tr-application;-based terminology.
    This definition is derived from an &tr-application-reference-model; (ARM). An &tr-ARM; is a formal
    &tr-information-model; that is documented in an informative annex to the &tr-AP;.
    
  </p>
  
  
  <h4 id="struct_8_3">5.8.3 &tr-Information; representation</h4>
  
  <p>
    The &tr-resource-constructs; for representing the &tr-information; requirements of the &tr-application; are
    specified in an &tr-application-interpreted-model; (AIM) using the EXPRESS language. The &tr-AIM;
    is assembled from &tr-resource-constructs; specified by the &tr-integrated-resources;. The &tr-resource-constructs;
    are interpreted to meet the &tr-application; requirements within the defined context and
    scope of the &tr-AP;.
    
  </p>
  
  <p>
    A mapping from the &tr-information; requirements to the &tr-AIM; is provided. The mapping defines
    the use within the &tr-AIM; of &tr-resource-constructs; from the &tr-integrated-resources; to represent the
    &tr-information; requirements of the &tr-application;.
    
  </p>
  
  
  <h4 id="struct_8_4">5.8.4 &tr-Implementation-methods;</h4>
  
  <p>
    The &tr-AP; is independent of &tr-implementation-methods;. However, an &tr-AP; may include implementation
    method specific &tr-information; in a normative annex. An &tr-AP; includes a table of short names
    that the &tr-exchange-structure;<space/>&tr-implementation-method; uses to encode &tr-AP; entity names.
    
  </p>
  
  
  <h4 id="struct_8_5">5.8.5 &tr-conformance-requirements;</h4>
  
  <p>
    An &tr-application-protocol; includes the &tr-conformance-requirements; to be satisfied by any implementation
    claiming to support the requirements of the &tr-AP;. &tr-Conformance-requirements; reflect the
    capabilities defined in an &tr-AP; and may be specified in the description methods, implementation
    methods, or &tr-application-protocol; series of parts of ISO 10303.
    
  </p>
  
  
  <h4 id="struct_8_6">5.8.6 Monolithic &tr-application-protocols;</h4>
  <p>At the time of preparation of this part of ISO 10303, the following are the members 
    of the monolithic &tr-application-protocol; series:</p>
  <ul>
    <li>Explicit draughting (ISO 10303-201);</li>
    <li>Associative draughting (ISO 10303-202);</li>
    <li>Mechanical design using boundary representation (ISO 10303-204);</li>
    <li>Sheet metal die planning and design (ISO 10303-207);</li>
    <li>Electrotechnical design and installation (ISO 10303-212);</li>
    <li>Core &tr-data; for automotive mechanical design processes (ISO 10303-214);</li>
    <li>Ship arrangement (ISO 10303-215);</li>
    <li>Ship moulded forms (ISO 10303-216);</li>
    <li>Ship &tr-structures; (ISO 10303-218);</li>
    <li>Dimensional inspection &tr-information; exchange (ISO 10303-219);</li>
    <li>Exchange of design and manufacturing &tr-product-information; for cast parts (ISO 10303-223);</li>
    <li>Mechanical &tr-product; definition for process plans using machining features (ISO 10303-224);</li>
    <li>Building elements using explicit shape representation (ISO 10303-225);</li>
    <li>Plant spatial configuration (ISO 10303-227);</li>
    <li>Technical &tr-data; packaging core &tr-information; and exchange (ISO 10303-232);</li>
    <li>Materials &tr-information; for the design and verification of &tr-products; (ISO 10303-235);</li>
    <li>&tr-Application-interpreted-model; for computerized numerical controllers (ISO 10303-238);</li>
    <li>Process plans for machined &tr-products; (ISO 10303-240);</li>
  </ul>

  <h4 id="struct_8_7">5.8.7 Modular &tr-application-protocols;</h4>
  <p>At the time of preparation of this part of ISO 10303, the following are the members 
    of the modular &tr-application-protocol; series:</p>
  <ul>
    <li>Configuration controlled 3D design of mechanical parts and assemblies (ISO 10303-203);</li>
    <li>Multidisciplinary analysis and design (ISO 10303-209);</li>
    <li>Electronic &tr-assembly;, interconnect, and packaging design (ISO 10303-210);</li>
    <li>Functional &tr-data; and their schematic representation for process plant (ISO 10303-221);</li>
    <li>Systems engineering (ISO 10303-233);</li>
    <li>Furniture catalog and interior design (ISO 10303-236);</li>
    <li>&tr-Product; life cycle support (ISO 10303-239).</li>
  </ul>

  <h3 id="struct_9">5.9 Usage guides</h3>
    <h4 id="struct_9_1">5.9.1 Purpose</h4>
  <p>
    
  </p>
  
  
  <h3 id="struct_10">5.10 &tr-Implementation-methods;</h3>
  
  
  <h4 id="struct_10_1">5.10.1 Purpose</h4>
  
  <p>
    ISO 10303 provides for various methods of implementation. An &tr-implementation-method; provides
    a particular way of using the &tr-application-protocols; defined in ISO 10303. 
    
    ISO 10303-21 specifies
    an &tr-implementation-method; for an &tr-exchange-structure;. The &tr-exchange-structure; provides for the
    writing and reading of the description of &tr-product-data; in &tr-application-protocols;, using clear text
    or binary encoding.
    
  </p>
  
  
  <h4 id="struct_10_2">5.10.2 Use of formal language</h4>
  
  <p>
    An &tr-implementation-method; is defined using a formal language so that computer-based methods
    may be used for the development of implementations.
  </p>
  
  
  <h4 id="struct_10_3">5.10.3 Mapping from EXPRESS to &tr-implementation-method;</h4>
  
  <p>
    EXPRESS provides the basis for all specifications of &tr-product-information; in ISO 10303. Each
    &tr-implementation-method; defined in ISO 10303 specifies mapping rules from the syntax of EXPRESS
    onto the language used for the &tr-implementation-method;. The &tr-structure; and syntax of
    each &tr-resource-construct; as it appears in the implementation is derived by applying the mapping
    rules. The rules to be applied for a particular &tr-implementation-method; may be conditional on
    the form of the EXPRESS definition that is being mapped. Any schema defined in EXPRESS
    can be mapped to the &tr-implementation-method;.
    
  </p>
  
  
  <h4 id="struct_10_4">5.10.4 Exchange &tr-structures; for &tr-product-data; (implementation)</h4>
  
  <p>
    ISO 10303 provides three different ways of exchanging &tr-product-data; described in EXPRESS between computer systems:
  </p>
  <ul>
  	<li>Clear text encoding of the &tr-exchange-structure; (ISO 10303-21);</li>
  	<li>Binary representation of EXPRESS-driven &tr-data; (ISO/TS 10303-26);<br/>??? Not yet published ???;</li>
  	<li>XML representations of EXPRESS schemas and &tr-data;, using XML schemas (ISO 10303-28); <br/>??? To mention both the older DTD and newer XML schema version???</li>
  </ul>    
  <p> 
    ISO 10303-21 provides a compact and human readable form of the &tr-exchange-structure;.   
    <!-- The syntax and mapping rules for the &tr-exchange-structure; using clear text encoding are specified in ISO 10303-21.  --> 
    The &tr-exchange-structure; may be implemented to support file exchange. The
    language used for the syntax of the &tr-exchange-structure;<space/>&tr-implementation-method; is based on Wirth
    Syntax Notation [5]. The mapping from EXPRESS to the syntax of the &tr-exchange-structure; is
    defined.
  </p>  
  <p>
    ISO 10303-26 provides a mapping of EXPRESS to the binary Hierarchical Data Format Version 5 (HDF5)
    that is optimized for the exchange of huge &tr-data; sets.
    HDF5 is a &tr-product; of The HDF Group, a spin off from the National Center for Supercomputing Applications (NCSA) at the University of Illinois at Urbana-Champaign. 
    The HDF software includes I/O libraries and tools for analyzing, visualizing, and converting scientific &tr-data;.
  </p>
  <p>
    ISO 10303-28 enables &tr-product-data; described in EXPRESS to be exchanged using XML 
    and the many software tools developed to support XML technologies. 
    It also permits &tr-product-data; sets so described to be readily incorporated into "electronic commerce" transactions represented in XML.
    <br/> ??? more to talk on XML schema and DTD ??? 
  </p>
  
  
  <h4 id="struct_10_7">5.10.7 Standard &tr-data; access interface specification</h4>
  <p>
The standard &tr-data; access interface (SDAI) specifies the functional characteristics of an &tr-application; programming &tr-data; access interface to &tr-product-data;. 
SDAI defines the operations available to an &tr-application; for the purposes of accessing and manipulating &tr-data; with a &tr-structure; defined using EXPRESS.  
SDAI is specified in ISO 10303-22.
The SDAI is defined independently of any programming language.  
  </p>
  <p>
The specification of the SDAI functionality in a particular programming language is known as a language binding.  
A language binding provides access to and manipulation of &tr-data; entities, types and constants, mechanisms for constraint validation and error handling. 
Language bindings are provided as separate parts of this International Standard.
  </p>
  <p>At the time of preparation of this part of ISO 10303, the following language bindings are available:</p>
   <ul>
    <li>C++ language binding to the &tr-SDAI; (ISO 10303-23);</li>
    <li>C language binding to the &tr-SDAI; (ISO 10303-24);</li>
    <li>Java(TM) programming language binding to the &tr-SDAI; with Internet/Intranet extensions (ISO 10303-27);</li>
   </ul>
   <p>
Generic &tr-conformance-testing; for SDAI implementations is provided by 
"Abstract test methods for standard &tr-data; access interface (SDAI) implementations" (ISO 10303-35).
For each language binding these &tr-abstract-test-methods; have to be converted into executable test methods for &tr-conformance-testing;.  
   </p>
  
  <h4 id="struct_10_8">5.10.8 EXPRESS to OMG XMI binding</h4>
  
  <p>
    xxx
    <br/>ISO 10303-25 
    
  </p>

</collection_page>
