SCHEMA ap210_assembly_functional_requirements_arm_lf;
TYPE base_type = SELECT (
	simple_type,
	aggregation_type,
	named_type,
	parameter);
END_TYPE; -- base_type

TYPE constructed_type = SELECT (
	enumeration_type,
	select_type);
END_TYPE; -- constructed_type

TYPE declaration_scope_type = SELECT (
	algorithm_definition,
	global_rule);
END_TYPE; -- declaration_scope_type

TYPE declaration_type = SELECT (
	named_type,
	global_rule,
	algorithm_definition,
	constant_definition,
	map_definition,
	sub_supertype_constraint);
END_TYPE; -- declaration_type

TYPE documentation_object = SELECT (
	schema_definition,
	constant_definition,
	named_type,
	attribute,
	algorithm_definition,
	global_rule,
	where_rule);
END_TYPE; -- documentation_object

TYPE entity_or_subtype_expression = SELECT (
	entity_definition,
	subtype_expression);
END_TYPE; -- entity_or_subtype_expression

TYPE entity_or_view_definition_or_simple_type = SELECT (
	entity_or_view_definition,
	simple_type);
END_TYPE; -- entity_or_view_definition_or_simple_type

TYPE entity_or_view_or_subtype_expression = SELECT (
	entity_or_view_definition,
	subtype_expression);
END_TYPE; -- entity_or_view_or_subtype_expression

TYPE explicit_or_derived = SELECT (
	explicit_attribute,
	derived_attribute);
END_TYPE; -- explicit_or_derived

TYPE express_id = STRING;
END_TYPE; -- express_id

TYPE info_object_id = STRING;
END_TYPE; -- info_object_id

TYPE map_or_view_definition_select = SELECT (
	map_definition,
	view_definition);
END_TYPE; -- map_or_view_definition_select

TYPE schema_map_or_view_definition = SELECT (
	schema_view_definition,
	schema_map_definition);
END_TYPE; -- schema_map_or_view_definition

TYPE type_or_rule = SELECT (
	named_type,
	global_rule);
END_TYPE; -- type_or_rule

TYPE underlying_type = SELECT (
	simple_type,
	aggregation_type,
	defined_type,
	constructed_type);
END_TYPE; -- underlying_type

TYPE aggregate_member_constraint_select = SELECT (
	attribute,
	inverse_attribute_constraint,
	aggregate_member_constraint,
	entity_constraint,
	select_constraint);
END_TYPE; -- aggregate_member_constraint_select

TYPE attribute_mapping_domain_select = SELECT (
	named_type,
	entity_mapping);
END_TYPE; -- attribute_mapping_domain_select

TYPE attribute_mapping_path_select = SELECT (
	path_constraint,
	inverse_attribute_constraint,
	select_constraint,
	entity_constraint,
	aggregate_member_constraint,
	intersection_constraint,
	attribute);
END_TYPE; -- attribute_mapping_path_select

TYPE attribute_select = SELECT (
	attribute,
	inverse_attribute_constraint,
	aggregate_member_constraint);
END_TYPE; -- attribute_select

TYPE attribute_value_constraint_select = SELECT (
	attribute,
	aggregate_member_constraint,
	select_constraint);
END_TYPE; -- attribute_value_constraint_select

TYPE constraint_select = SELECT (
	constraint_attribute,
	constraint_relationship,
	inverse_attribute_constraint,
	attribute,
	end_of_path_constraint,
	intersection_constraint,
	type_constraint,
	negation_constraint);
END_TYPE; -- constraint_select

TYPE entity_or_attribute = SELECT (
	entity_definition,
	attribute);
END_TYPE; -- entity_or_attribute

TYPE inverse_attribute_constraint_select = SELECT (
	attribute,
	entity_constraint,
	aggregate_member_constraint,
	select_constraint);
END_TYPE; -- inverse_attribute_constraint_select

TYPE path_constraint_select = SELECT (
	aggregate_member_constraint,
	inverse_attribute_constraint,
	entity_constraint,
	intersection_constraint,
	attribute);
END_TYPE; -- path_constraint_select

TYPE select_constraint_select = SELECT (
	attribute,
	aggregate_member_constraint);
END_TYPE; -- select_constraint_select

ENTITY aggregate_target_parameter
	SUBTYPE OF (target_parameter);
	lower_bound : OPTIONAL bound;
	upper_bound : OPTIONAL bound;
END_ENTITY; -- aggregate_target_parameter


ENTITY aggregation_type
	SUPERTYPE OF (ONEOF (variable_size_aggregation_type, array_type))
	SUBTYPE OF (data_type);
	element_type : data_type;
END_ENTITY; -- aggregation_type


ENTITY algorithm_declaration
	ABSTRACT SUPERTYPE OF (ONEOF (function_declaration, procedure_declaration))
	SUBTYPE OF (declaration);
END_ENTITY; -- algorithm_declaration


ENTITY algorithm_definition
	ABSTRACT SUPERTYPE OF (ONEOF (function_definition, procedure_definition));
	name : express_id;
	parameters : LIST [0:?] OF parameter;
END_ENTITY; -- algorithm_definition


ENTITY and_subtype_expression
	SUBTYPE OF (subtype_expression);
END_ENTITY; -- and_subtype_expression


ENTITY andor_subtype_expression
	SUBTYPE OF (subtype_expression);
END_ENTITY; -- andor_subtype_expression


ENTITY annotation
	ABSTRACT SUPERTYPE OF (ONEOF (documentation, express_code));
	target : documentation_object;
	values : LIST [1:?] OF STRING;
END_ENTITY; -- annotation


ENTITY array_type
	SUBTYPE OF (aggregation_type);
	lower_index : OPTIONAL bound;
	upper_index : OPTIONAL bound;
	unique_flag : BOOLEAN;
	optional_flag : BOOLEAN;
END_ENTITY; -- array_type


ENTITY attribute
	ABSTRACT SUPERTYPE OF (ONEOF (derived_attribute, explicit_attribute, inverse_attribute, view_attribute));
	name : express_id;
	parent : entity_or_view_definition;
	order : OPTIONAL INTEGER;
DERIVE
	parent_entity : entity_definition :=  get_entity_definition(parent);
END_ENTITY; -- attribute


ENTITY bag_type
	SUBTYPE OF (variable_size_aggregation_type);
END_ENTITY; -- bag_type


ENTITY binary_type
	SUBTYPE OF (simple_type);
	width : OPTIONAL bound;
	fixed_width : BOOLEAN;
END_ENTITY; -- binary_type


ENTITY boolean_type
	SUBTYPE OF (simple_type);
END_ENTITY; -- boolean_type


ENTITY bound
	ABSTRACT SUPERTYPE OF (ONEOF (integer_bound, population_dependent_bound));
	bound_value : INTEGER;
END_ENTITY; -- bound


ENTITY constant_declaration
	SUBTYPE OF (declaration);
END_ENTITY; -- constant_declaration


ENTITY constant_definition;
	name : express_id;
	domain : base_type;
	constant_value : base_type;
END_ENTITY; -- constant_definition


ENTITY data_type
	SUPERTYPE OF (ONEOF (named_type, enumeration_type, select_type, simple_type, aggregation_type));
	name : express_id;
END_ENTITY; -- data_type


ENTITY data_type_declaration
	SUPERTYPE OF (ONEOF (entity_declaration, type_declaration, view_declaration))
	SUBTYPE OF (declaration);
END_ENTITY; -- data_type_declaration


ENTITY declaration
	ABSTRACT SUPERTYPE OF ((ONEOF (inner_declaration, interfaced_declaration, local_declaration) AND ONEOF (data_type_declaration, rule_declaration, algorithm_declaration, constant_declaration, map_declaration, subtype_constraint_declaration)));
	parent : generic_schema_definition;
	definition : declaration_type;
DERIVE
	parent_schema : schema_definition :=  get_schema_definition(parent);
END_ENTITY; -- declaration


ENTITY defined_type
	SUBTYPE OF (named_type);
	domain : underlying_type;
END_ENTITY; -- defined_type


ENTITY dependent_map_definition
	SUBTYPE OF (map_definition);
END_ENTITY; -- dependent_map_definition


ENTITY dependent_map_partition
	SUBTYPE OF (map_or_view_partition);
	SELF\map_or_view_partition.parent : dependent_map_definition;
INVERSE
	SELF\map_or_view_partition.source_parameters: SET [0:?] OF dependent_source_parameter FOR parent;
END_ENTITY; -- dependent_map_partition


ENTITY dependent_source_parameter
	SUBTYPE OF (source_parameter);
	SELF\map_or_view_input_parameter.extent : entity_or_view_definition_or_simple_type;
	SELF\map_or_view_input_parameter.name : express_id;
END_ENTITY; -- dependent_source_parameter


ENTITY dependent_view_definition
	SUBTYPE OF (view_definition);
	domain : base_type;
END_ENTITY; -- dependent_view_definition


ENTITY derived_attribute
	SUBTYPE OF (attribute);
	domain : base_type;
	redeclaring : OPTIONAL explicit_or_derived;
END_ENTITY; -- derived_attribute


ENTITY documentation
	SUBTYPE OF (annotation);
END_ENTITY; -- documentation


ENTITY domain_equivalent_type;
	external_type : named_type;
	native_type : named_type;
	owner : external_schema;
END_ENTITY; -- domain_equivalent_type


ENTITY entity_declaration
	SUBTYPE OF (data_type_declaration);
	SELF\declaration.definition : entity_definition;
END_ENTITY; -- entity_declaration


ENTITY entity_definition
	SUBTYPE OF (entity_or_view_definition);
	complex : BOOLEAN;
	instantiable : BOOLEAN;
	independent : BOOLEAN;
DERIVE
	supertypes : LIST [0:?] OF  UNIQUE entity_definition :=  get_list_of_entity_definition(generic_supertypes);
INVERSE
	attributes: SET [0:?] OF attribute FOR parent;
	global_rules: SET [0:?] OF global_rule FOR entities;
	uniqueness_rules: SET [0:?] OF uniqueness_rule FOR parent_entity;
END_ENTITY; -- entity_definition


ENTITY entity_or_view_definition
	ABSTRACT SUPERTYPE OF (ONEOF (entity_definition, view_definition))
	SUBTYPE OF (named_type);
	generic_supertypes : LIST [0:?] OF  UNIQUE entity_or_view_definition;
END_ENTITY; -- entity_or_view_definition


ENTITY entity_select_type
	SUBTYPE OF (select_type);
END_ENTITY; -- entity_select_type


ENTITY enumeration_type
	SUPERTYPE OF ((extensible_enumeration_type ANDOR extended_enumeration_type))
	SUBTYPE OF (data_type);
	local_elements : OPTIONAL LIST [0:?] OF  UNIQUE express_id;
DERIVE
	elements : LIST [0:?] OF  UNIQUE express_id :=  local_elements ;
WHERE
	wr1 : (SIZEOF(local_elements)> 0)OR('extended_dictionary_schema.extensible_enumeration_type' IN TYPEOF(SELF));
END_ENTITY; -- enumeration_type


ENTITY explicit_attribute
	SUBTYPE OF (attribute);
	domain : base_type;
	redeclaring : OPTIONAL explicit_attribute;
	optional_flag : BOOLEAN;
END_ENTITY; -- explicit_attribute


ENTITY express_code
	SUBTYPE OF (annotation);
END_ENTITY; -- express_code


ENTITY extended_enumeration_type
	SUBTYPE OF (enumeration_type);
	is_based_on : extensible_enumeration_type;
END_ENTITY; -- extended_enumeration_type


ENTITY extended_select_type
	SUBTYPE OF (select_type);
	is_based_on : extensible_select_type;
END_ENTITY; -- extended_select_type


ENTITY extensible_enumeration_type
	SUBTYPE OF (enumeration_type);
END_ENTITY; -- extensible_enumeration_type


ENTITY extensible_select_type
	SUBTYPE OF (select_type);
END_ENTITY; -- extensible_select_type


ENTITY external_schema;
	definition : schema_definition;
	native_schema : schema_definition;
INVERSE
	for_types: SET [1:?] OF domain_equivalent_type FOR owner;
END_ENTITY; -- external_schema


ENTITY function_declaration
	SUBTYPE OF (algorithm_declaration);
END_ENTITY; -- function_declaration


ENTITY function_definition
	SUBTYPE OF (algorithm_definition);
	return_type : data_type;
	return_type_label : OPTIONAL express_id;
END_ENTITY; -- function_definition


ENTITY generic_schema_definition
	ABSTRACT SUPERTYPE OF (ONEOF (schema_definition, schema_view_definition, schema_map_definition));
	name : express_id;
	identification : OPTIONAL info_object_id;
UNIQUE
	ur1 : identification;
END_ENTITY; -- generic_schema_definition


ENTITY global_rule;
	name : express_id;
	entities : LIST [1:?] OF entity_definition;
INVERSE
	where_rules: SET [1:?] OF where_rule FOR parent_item;
END_ENTITY; -- global_rule


ENTITY identified_by_parameter
	SUBTYPE OF (map_or_view_input_parameter);
END_ENTITY; -- identified_by_parameter


ENTITY implicit_declaration
	SUBTYPE OF (interfaced_declaration);
END_ENTITY; -- implicit_declaration


ENTITY independent_view_definition
	SUBTYPE OF (view_definition);
END_ENTITY; -- independent_view_definition


ENTITY inner_declaration
	SUBTYPE OF (declaration);
	scope : declaration_scope_type;
END_ENTITY; -- inner_declaration


ENTITY integer_bound
	SUBTYPE OF (bound);
END_ENTITY; -- integer_bound


ENTITY integer_type
	SUBTYPE OF (simple_type);
END_ENTITY; -- integer_type


ENTITY interface_specification;
	foreign_schema : generic_schema_definition;
	current_schema : generic_schema_definition;
	items : OPTIONAL SET [1:?] OF interfaced_declaration;
END_ENTITY; -- interface_specification


ENTITY interfaced_declaration
	ABSTRACT SUPERTYPE OF (ONEOF (implicit_declaration, used_declaration, referenced_declaration))
	SUBTYPE OF (declaration);
	alias_name : OPTIONAL express_id;
END_ENTITY; -- interfaced_declaration


ENTITY inverse_attribute
	SUBTYPE OF (attribute);
	domain : entity_definition;
	redeclaring : OPTIONAL inverse_attribute;
	inverted_attr : explicit_attribute;
	min_cardinality : OPTIONAL bound;
	max_cardinality : OPTIONAL bound;
	duplicates : BOOLEAN;
END_ENTITY; -- inverse_attribute


ENTITY list_type
	SUBTYPE OF (variable_size_aggregation_type);
	unique_flag : BOOLEAN;
END_ENTITY; -- list_type


ENTITY local_declaration
	SUBTYPE OF (declaration);
END_ENTITY; -- local_declaration


ENTITY logical_type
	SUBTYPE OF (simple_type);
END_ENTITY; -- logical_type


ENTITY map_declaration
	SUBTYPE OF (data_type_declaration);
	SELF\declaration.definition : map_definition;
	SELF\declaration.parent : schema_map_definition;
END_ENTITY; -- map_declaration


ENTITY map_definition;
	name : express_id;
	super_type : map_definition;
INVERSE
	partitions: SET [1:?] OF map_partition FOR parent;
	target_parameters: SET [0:?] OF target_parameter FOR parent;
END_ENTITY; -- map_definition


ENTITY map_or_view_input_parameter
	ABSTRACT SUPERTYPE OF (ONEOF (identified_by_parameter, source_parameter));
	name : OPTIONAL express_id;
	parent : map_or_view_partition;
	extent : OPTIONAL data_type;
	order : INTEGER;
END_ENTITY; -- map_or_view_input_parameter


ENTITY map_or_view_partition
	ABSTRACT SUPERTYPE OF (ONEOF (map_partition, dependent_map_partition, view_partition));
	parent : map_or_view_definition_select;
	name : express_id;
INVERSE
	source_parameters: SET [0:?] OF source_parameter FOR parent;
END_ENTITY; -- map_or_view_partition


ENTITY map_partition
	SUBTYPE OF (map_or_view_partition);
	SELF\map_or_view_partition.parent : map_definition;
END_ENTITY; -- map_partition


ENTITY named_type
	ABSTRACT SUPERTYPE OF (ONEOF (defined_type, entity_or_view_definition))
	SUBTYPE OF (data_type);
	short_name : OPTIONAL STRING;
INVERSE
	where_rules: SET [0:?] OF where_rule FOR parent_item;
END_ENTITY; -- named_type


ENTITY non_extensible_select_type
	SUBTYPE OF (select_type);
	SELF\select_type.local_selections : SET [1:?] OF named_type;
END_ENTITY; -- non_extensible_select_type


ENTITY number_type
	SUBTYPE OF (simple_type);
END_ENTITY; -- number_type


ENTITY oneof_subtype_expression
	SUBTYPE OF (subtype_expression);
END_ENTITY; -- oneof_subtype_expression


ENTITY parameter;
	name : express_id;
	parameter_type : data_type;
	var_type : BOOLEAN;
	type_labels : OPTIONAL LIST [1:?] OF express_id;
END_ENTITY; -- parameter


ENTITY population_dependent_bound
	SUBTYPE OF (bound);
	schema_name : STRING;
	entity_name : STRING;
	method_name : STRING;
DERIVE
	SELF\bound.bound_value : INTEGER :=  0 ;
END_ENTITY; -- population_dependent_bound


ENTITY procedure_declaration
	SUBTYPE OF (algorithm_declaration);
END_ENTITY; -- procedure_declaration


ENTITY procedure_definition
	SUBTYPE OF (algorithm_definition);
END_ENTITY; -- procedure_definition


ENTITY real_type
	SUBTYPE OF (simple_type);
	precision : OPTIONAL bound;
END_ENTITY; -- real_type


ENTITY reference_from_specification
	SUBTYPE OF (interface_specification);
	SELF\interface_specification.items : OPTIONAL SET [1:?] OF referenced_declaration;
END_ENTITY; -- reference_from_specification


ENTITY reference_from_specification_as
	ABSTRACT SUPERTYPE OF (ONEOF (reference_from_specification_as_source, reference_from_specification_as_target))
	SUBTYPE OF (reference_from_specification);
	alias_name : OPTIONAL express_id;
	SELF\interface_specification.current_schema : schema_map_definition;
END_ENTITY; -- reference_from_specification_as


ENTITY reference_from_specification_as_source
	SUBTYPE OF (reference_from_specification_as);
END_ENTITY; -- reference_from_specification_as_source


ENTITY reference_from_specification_as_target
	SUBTYPE OF (reference_from_specification_as);
END_ENTITY; -- reference_from_specification_as_target


ENTITY referenced_declaration
	SUBTYPE OF (interfaced_declaration);
END_ENTITY; -- referenced_declaration


ENTITY rule_declaration
	SUBTYPE OF (declaration);
END_ENTITY; -- rule_declaration


ENTITY schema_definition
	SUBTYPE OF (generic_schema_definition);
INVERSE
	algorithm_declarations: SET [0:?] OF algorithm_declaration FOR parent;
	entity_declarations: SET [0:?] OF entity_declaration FOR parent;
	external_schemas: SET [1:?] OF external_schema FOR native_schema;
	rule_declarations: SET [0:?] OF rule_declaration FOR parent;
	type_declarations: SET [0:?] OF type_declaration FOR parent;
END_ENTITY; -- schema_definition


ENTITY schema_map_definition
	SUBTYPE OF (generic_schema_definition);
INVERSE
	map_declarations: SET [0:?] OF map_declaration FOR parent;
	source_schema_specifications: SET [1:?] OF reference_from_specification_as_source FOR current_schema;
	target_schema_specifications: SET [1:?] OF reference_from_specification_as_target FOR current_schema;
	view_declarations: SET [0:?] OF view_declaration FOR parent;
END_ENTITY; -- schema_map_definition


ENTITY schema_view_definition
	SUBTYPE OF (generic_schema_definition);
INVERSE
	view_declarations: SET [0:?] OF view_declaration FOR parent;
END_ENTITY; -- schema_view_definition


ENTITY select_type
	ABSTRACT SUPERTYPE OF ((ONEOF (non_extensible_select_type, extensible_select_type) ANDOR entity_select_type ANDOR extended_select_type))
	SUBTYPE OF (data_type);
	local_selections : OPTIONAL SET [1:?] OF named_type;
DERIVE
	selections : SET [1:?] OF named_type :=  local_selections ;
END_ENTITY; -- select_type


ENTITY set_type
	SUBTYPE OF (variable_size_aggregation_type);
END_ENTITY; -- set_type


ENTITY simple_type
	ABSTRACT SUPERTYPE OF (ONEOF (integer_type, number_type, real_type, boolean_type, logical_type, binary_type, string_type))
	SUBTYPE OF (data_type);
END_ENTITY; -- simple_type


ENTITY source_parameter
	SUBTYPE OF (map_or_view_input_parameter);
	SELF\map_or_view_input_parameter.extent : entity_or_view_definition;
	SELF\map_or_view_input_parameter.name : express_id;
END_ENTITY; -- source_parameter


ENTITY string_type
	SUBTYPE OF (simple_type);
	width : OPTIONAL bound;
	fixed_width : BOOLEAN;
END_ENTITY; -- string_type


ENTITY sub_supertype_constraint;
	name : OPTIONAL express_id;
	generic_supertype : entity_or_view_definition;
	total_cover : OPTIONAL SET [0:?] OF entity_definition;
	constraint : OPTIONAL subtype_expression;
DERIVE
	super_type : entity_definition :=  get_entity_definition(generic_supertype);
END_ENTITY; -- sub_supertype_constraint


ENTITY subtype_constraint_declaration
	SUBTYPE OF (declaration);
END_ENTITY; -- subtype_constraint_declaration


ENTITY subtype_expression
	ABSTRACT SUPERTYPE OF (ONEOF (andor_subtype_expression, and_subtype_expression, oneof_subtype_expression));
	generic_operands : SET [1:?] OF entity_or_view_or_subtype_expression;
DERIVE
	operands : SET [1:?] OF entity_or_subtype_expression :=  get_operands(generic_operands);
END_ENTITY; -- subtype_expression


ENTITY target_parameter;
	name : express_id;
	parent : map_definition;
	extent : entity_definition;
	order : INTEGER;
END_ENTITY; -- target_parameter


ENTITY type_declaration
	SUBTYPE OF (data_type_declaration);
	SELF\declaration.definition : defined_type;
END_ENTITY; -- type_declaration


ENTITY uniqueness_rule;
	label : OPTIONAL express_id;
	attributes : LIST [1:?] OF attribute;
	parent_entity : entity_definition;
END_ENTITY; -- uniqueness_rule


ENTITY use_from_specification
	SUBTYPE OF (interface_specification);
	SELF\interface_specification.items : OPTIONAL SET [1:?] OF used_declaration;
END_ENTITY; -- use_from_specification


ENTITY used_declaration
	SUBTYPE OF (interfaced_declaration);
END_ENTITY; -- used_declaration


ENTITY variable_size_aggregation_type
	ABSTRACT SUPERTYPE OF (ONEOF (bag_type, set_type, list_type))
	SUBTYPE OF (aggregation_type);
	lower_bound : OPTIONAL bound;
	upper_bound : OPTIONAL bound;
END_ENTITY; -- variable_size_aggregation_type


ENTITY view_attribute
	SUBTYPE OF (attribute);
	domain : base_type;
	optional_flag : BOOLEAN;
	SELF\attribute.parent : independent_view_definition;
END_ENTITY; -- view_attribute


ENTITY view_declaration
	SUBTYPE OF (data_type_declaration);
	SELF\declaration.definition : view_definition;
	SELF\declaration.parent : schema_map_or_view_definition;
END_ENTITY; -- view_declaration


ENTITY view_definition
	ABSTRACT SUPERTYPE OF (ONEOF (independent_view_definition, dependent_view_definition))
	SUBTYPE OF (entity_or_view_definition);
	SELF\entity_or_view_definition.generic_supertypes : LIST [0:?] OF  UNIQUE view_definition;
INVERSE
	partitions: SET [1:?] OF view_partition FOR parent;
END_ENTITY; -- view_definition


ENTITY view_partition
	SUBTYPE OF (map_or_view_partition);
	SELF\map_or_view_partition.parent : view_definition;
INVERSE
	attribute: SET [0:?] OF view_partition_attribute FOR related_partition;
END_ENTITY; -- view_partition


ENTITY view_partition_attribute;
	parent_view_attribute : view_attribute;
	related_partition : view_partition;
END_ENTITY; -- view_partition_attribute


ENTITY where_rule;
	label : OPTIONAL express_id;
	parent_item : type_or_rule;
	order : INTEGER;
END_ENTITY; -- where_rule


ENTITY aggregate_member_constraint
	SUBTYPE OF (constraint_attribute);
	member : OPTIONAL INTEGER;
	attribute : aggregate_member_constraint_select;
UNIQUE
	ur1 : attribute, member;
END_ENTITY; -- aggregate_member_constraint


ENTITY aggregate_size_constraint
	SUBTYPE OF (constraint_attribute);
	size : INTEGER;
	attribute : aggregate_member_constraint_select;
UNIQUE
	ur1 : attribute, size;
END_ENTITY; -- aggregate_size_constraint


ENTITY and_constraint_relationship
	SUBTYPE OF (instance_constraint);
UNIQUE
	ur1 : element1, element2;
END_ENTITY; -- and_constraint_relationship


ENTITY application_protocol_mapping
	SUBTYPE OF (schema_mapping);
END_ENTITY; -- application_protocol_mapping


ENTITY attribute_mapping
	SUBTYPE OF (generic_attribute_mapping);
	path : OPTIONAL LIST [1:?] OF attribute_mapping_path_select;
	domain : OPTIONAL attribute_mapping_domain_select;
DERIVE
	target : base_type :=  path [ 1 ] ;
END_ENTITY; -- attribute_mapping


ENTITY attribute_mapping_boolean_value
	SUBTYPE OF (attribute_mapping_value);
	mapped_value : BOOLEAN;
END_ENTITY; -- attribute_mapping_boolean_value


ENTITY attribute_mapping_enumeration_value
	SUBTYPE OF (attribute_mapping_value);
	mapped_value : STRING;
END_ENTITY; -- attribute_mapping_enumeration_value


ENTITY attribute_mapping_int_value
	SUBTYPE OF (attribute_mapping_value);
	mapped_value : INTEGER;
END_ENTITY; -- attribute_mapping_int_value


ENTITY attribute_mapping_logical_value
	SUBTYPE OF (attribute_mapping_value);
	mapped_value : LOGICAL;
END_ENTITY; -- attribute_mapping_logical_value


ENTITY attribute_mapping_real_value
	SUBTYPE OF (attribute_mapping_value);
	mapped_value : REAL;
END_ENTITY; -- attribute_mapping_real_value


ENTITY attribute_mapping_string_value
	SUBTYPE OF (attribute_mapping_value);
	mapped_value : STRING;
END_ENTITY; -- attribute_mapping_string_value


ENTITY attribute_mapping_value
	ABSTRACT SUPERTYPE OF (ONEOF (attribute_mapping_real_value, attribute_mapping_enumeration_value, attribute_mapping_logical_value, attribute_mapping_int_value, attribute_mapping_boolean_value, attribute_mapping_string_value))
	SUBTYPE OF (generic_attribute_mapping);
END_ENTITY; -- attribute_mapping_value


ENTITY attribute_value_constraint
	SUPERTYPE OF (ONEOF (boolean_constraint, integer_constraint, non_optional_constraint, string_constraint, real_constraint, enumeration_constraint, logical_constraint))
	SUBTYPE OF (constraint_attribute);
	attribute : attribute_value_constraint_select;
UNIQUE
	ur1 : attribute;
END_ENTITY; -- attribute_value_constraint


ENTITY boolean_constraint
	SUBTYPE OF (attribute_value_constraint);
	constraint_value : BOOLEAN;
UNIQUE
	ur1 : attribute, constraint_value;
END_ENTITY; -- boolean_constraint


ENTITY conformance_class_mapping
	SUBTYPE OF (schema_mapping);
END_ENTITY; -- conformance_class_mapping


ENTITY constraint
	ABSTRACT SUPERTYPE OF (ONEOF (constraint_attribute, constraint_relationship, inverse_attribute_constraint, type_constraint, intersection_constraint, negation_constraint, end_of_path_constraint));
END_ENTITY; -- constraint


ENTITY constraint_attribute
	ABSTRACT SUPERTYPE OF (ONEOF (attribute_value_constraint, select_constraint, aggregate_member_constraint, entity_constraint))
	SUBTYPE OF (constraint);
END_ENTITY; -- constraint_attribute


ENTITY constraint_relationship
	ABSTRACT SUPERTYPE OF (ONEOF (path_constraint, instance_constraint))
	SUBTYPE OF (constraint);
	element2 : constraint_select;
END_ENTITY; -- constraint_relationship


ENTITY derived_variant_entity_mapping
	SUBTYPE OF (entity_mapping_relationship);
END_ENTITY; -- derived_variant_entity_mapping


ENTITY end_of_path_constraint
	SUBTYPE OF (constraint);
	constraints : constraint_select;
END_ENTITY; -- end_of_path_constraint


ENTITY entity_constraint
	SUPERTYPE OF (exact_entity_constraint)
	SUBTYPE OF (constraint_attribute);
	domain : entity_definition;
	attribute : attribute_select;
UNIQUE
	ur1 : attribute, domain;
END_ENTITY; -- entity_constraint


ENTITY entity_mapping;
	source : entity_definition;
	target : entity_or_attribute;
	constraints : OPTIONAL constraint_select;
	entry_point : BOOLEAN;
	strong_users : BOOLEAN;
END_ENTITY; -- entity_mapping


ENTITY entity_mapping_relationship
	ABSTRACT SUPERTYPE OF (ONEOF (sub_supertype_mapping, derived_variant_entity_mapping));
	relating : entity_mapping;
	related : entity_mapping;
	constraints : OPTIONAL constraint_select;
	path : OPTIONAL LIST [1:?] OF attribute_mapping_path_select;
END_ENTITY; -- entity_mapping_relationship


ENTITY enumeration_constraint
	SUBTYPE OF (attribute_value_constraint);
	constraint_value : express_id;
UNIQUE
	ur1 : attribute, constraint_value;
END_ENTITY; -- enumeration_constraint


ENTITY exact_entity_constraint
	SUBTYPE OF (entity_constraint);
END_ENTITY; -- exact_entity_constraint


ENTITY exact_type_constraint
	SUBTYPE OF (type_constraint);
END_ENTITY; -- exact_type_constraint


ENTITY generic_attribute_mapping
	ABSTRACT SUPERTYPE OF (ONEOF (attribute_mapping, attribute_mapping_value));
	parent_entity : entity_mapping;
	source : attribute;
	constraints : OPTIONAL constraint_select;
	data_type : OPTIONAL LIST [1:?] OF named_type;
	strong : BOOLEAN;
END_ENTITY; -- generic_attribute_mapping


ENTITY instance_constraint
	ABSTRACT SUPERTYPE OF (ONEOF (and_constraint_relationship, or_constraint_relationship, instance_equal))
	SUBTYPE OF (constraint_relationship);
	element1 : constraint_select;
END_ENTITY; -- instance_constraint


ENTITY instance_equal
	SUBTYPE OF (instance_constraint);
END_ENTITY; -- instance_equal


ENTITY integer_constraint
	SUBTYPE OF (attribute_value_constraint);
	constraint_value : INTEGER;
UNIQUE
	ur1 : attribute, constraint_value;
END_ENTITY; -- integer_constraint


ENTITY intersection_constraint
	SUBTYPE OF (constraint);
	subpaths : SET [2:?] OF constraint_select;
END_ENTITY; -- intersection_constraint


ENTITY inverse_attribute_constraint
	SUBTYPE OF (constraint);
	inverted_attribute : inverse_attribute_constraint_select;
UNIQUE
	ur1 : inverted_attribute;
END_ENTITY; -- inverse_attribute_constraint


ENTITY logical_constraint
	SUBTYPE OF (attribute_value_constraint);
	constraint_value : LOGICAL;
UNIQUE
	ur1 : attribute, constraint_value;
END_ENTITY; -- logical_constraint


ENTITY module_mapping
	SUBTYPE OF (schema_mapping);
END_ENTITY; -- module_mapping


ENTITY negation_constraint
	SUBTYPE OF (constraint);
	constraints : constraint_select;
END_ENTITY; -- negation_constraint


ENTITY non_optional_constraint
	SUBTYPE OF (attribute_value_constraint);
END_ENTITY; -- non_optional_constraint


ENTITY or_constraint_relationship
	SUBTYPE OF (instance_constraint);
UNIQUE
	ur1 : element1, element2;
END_ENTITY; -- or_constraint_relationship


ENTITY path_constraint
	SUBTYPE OF (constraint_relationship);
	element1 : path_constraint_select;
UNIQUE
	ur1 : element1, element2;
END_ENTITY; -- path_constraint


ENTITY real_constraint
	SUBTYPE OF (attribute_value_constraint);
	constraint_value : REAL;
UNIQUE
	ur1 : attribute, constraint_value;
END_ENTITY; -- real_constraint


ENTITY schema_mapping
	SUPERTYPE OF (ONEOF (module_mapping, conformance_class_mapping, application_protocol_mapping));
	source : schema_definition;
	target : schema_definition;
	uofs : SET [1:?] OF uof_mapping;
	id : STRING;
	components : OPTIONAL SET [1:?] OF schema_mapping;
END_ENTITY; -- schema_mapping


ENTITY select_constraint
	SUBTYPE OF (constraint_attribute);
	data_type : LIST [1:?] OF defined_type;
	attribute : select_constraint_select;
UNIQUE
	ur1 : attribute, data_type;
END_ENTITY; -- select_constraint


ENTITY string_constraint
	SUBTYPE OF (attribute_value_constraint);
	constraint_value : STRING;
UNIQUE
	ur1 : attribute, constraint_value;
END_ENTITY; -- string_constraint


ENTITY sub_supertype_mapping
	SUBTYPE OF (entity_mapping_relationship);
END_ENTITY; -- sub_supertype_mapping


ENTITY type_constraint
	SUPERTYPE OF (exact_type_constraint)
	SUBTYPE OF (constraint);
	domain : entity_definition;
	constraints : OPTIONAL constraint_select;
END_ENTITY; -- type_constraint


ENTITY uof_mapping;
	name : STRING;
	mappings : SET [1:?] OF entity_mapping;
END_ENTITY; -- uof_mapping


FUNCTION get_entity_definition
	(parent : entity_or_view_definition) : entity_definition;
 LOCAL
 parent_entity : entity_definition;
 END_LOCAL
;
 IF 'extended_dictionary_schema.entity_definition' IN TYPEOF(parent)THEN parent_entity := parent;
 END_IF;
 RETURN(parent_entity);
 END_FUNCTION; -- get_entity_definition

FUNCTION get_list_of_entity_definition
	(generic_supertypes : LIST [0:?] OF entity_or_view_definition) : LIST [0:?] OF entity_definition;
 LOCAL
 supertypes : LIST OF entity_definition := [ ];
 END_LOCAL
;
 REPEAT i := 1 TO SIZEOF(generic_supertypes);
 IF 'extended_dictionary_schema.entity_definition' IN TYPEOF(generic_supertypes [ i ])THEN supertypes := supertypes + generic_supertypes [ i ];
 END_IF;
 END_REPEAT;
 RETURN(supertypes);
 END_FUNCTION; -- get_list_of_entity_definition

FUNCTION get_operands
	(operandz : SET [0:?] OF entity_or_view_or_subtype_expression) : SET [0:?] OF entity_or_subtype_expression;
 LOCAL
 operands : SET OF entity_or_subtype_expression := [ ];
 END_LOCAL
;
 REPEAT i := 1 TO SIZEOF(operandz);
 IF NOT('extended_dictionary_schema.view_definition' IN TYPEOF(operandz [ i ]))THEN operands := operands + operandz [ i ];
 END_IF;
 END_REPEAT;
 RETURN(operands);
 END_FUNCTION; -- get_operands

FUNCTION get_schema_definition
	(parent : generic_schema_definition) : schema_definition;
 LOCAL
 parent_schema : schema_definition;
 END_LOCAL
;
 IF 'extended_dictionary_schema.schema_definition' IN TYPEOF(parent)THEN parent_schema := parent;
 END_IF;
 RETURN(parent_schema);
 END_FUNCTION; -- get_schema_definition

END_SCHEMA; --ap210_assembly_functional_requirements_arm_lf

