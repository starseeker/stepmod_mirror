<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express description.file="descriptions.xml" language_version="2" rcs.date="$Date$" rcs.revision="$Revision$">
   <application name="JSDAI" owner="LKSoft" source="ap210_electronic_assembly_interconnect_and_packaging_design_mim_lf schema_instance" url="www.lksoft.com" version="4.0 beta"/>
   <schema name="ap210_electronic_assembly_interconnect_and_packaging_design_mim_lf">
      <constant expression="'Mon Mar 24 10:53:49 2014'" name="schema_date_stamp">
         <builtintype type="STRING"/>
      </constant>
      <constant expression="representation_item( '' ) &#10;                                                  ||&#10;                                                  geometric_representation_item(  )" name="dummy_gri">
         <typename name="geometric_representation_item"/>
      </constant>
      <constant expression="representation_item( '' ) &#10;                                                  ||&#10;                                                  topological_representation_item(  )" name="dummy_tri">
         <typename name="topological_representation_item"/>
      </constant>
      <constant expression="[ 'JPEG' , &#10;                                                  'PNG' , &#10;                                                  'TIFF' , &#10;                                                  'BMP' , &#10;                                                  'GIF' ]" name="pre_defined_picture_representation_types">
         <aggregate lower="0" type="SET" upper="?"/>
         <builtintype type="STRING"/>
      </constant>
      <constant expression="'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'" name="schema_prefix">
         <builtintype type="STRING"/>
      </constant>
      <constant expression="make_elementary_space( &#10;                                                  es_binarys )" name="the_binarys">
         <typename name="elementary_space"/>
      </constant>
      <constant expression="make_elementary_space( &#10;                                                  es_booleans )" name="the_booleans">
         <typename name="elementary_space"/>
      </constant>
      <constant expression="make_elementary_space( &#10;                                                  es_complex_numbers )" name="the_complex_numbers">
         <typename name="elementary_space"/>
      </constant>
      <constant expression="make_extended_tuple_space( &#10;                                                  the_zero_tuple_space, &#10;                                                  the_complex_numbers )" name="the_complex_tuples">
         <typename name="extended_tuple_space"/>
      </constant>
      <constant expression="[]" name="the_empty_maths_tuple">
         <typename name="maths_tuple"/>
      </constant>
      <constant expression="make_finite_space( &#10;                                                  [] )" name="the_empty_space">
         <typename name="finite_space"/>
      </constant>
      <constant expression="make_elementary_space( &#10;                                                  es_generics )" name="the_generics">
         <typename name="elementary_space"/>
      </constant>
      <constant expression="make_extended_tuple_space( &#10;                                                  the_zero_tuple_space, &#10;                                                  the_integers )" name="the_integer_tuples">
         <typename name="extended_tuple_space"/>
      </constant>
      <constant expression="make_elementary_space( &#10;                                                  es_integers )" name="the_integers">
         <typename name="elementary_space"/>
      </constant>
      <constant expression="make_elementary_space( &#10;                                                  es_logicals )" name="the_logicals">
         <typename name="elementary_space"/>
      </constant>
      <constant expression="make_elementary_space( &#10;                                                  es_maths_spaces )" name="the_maths_spaces">
         <typename name="elementary_space"/>
      </constant>
      <constant expression="make_finite_real_interval( &#10;                                                  -&#10;                                                  1, &#10;                                                  closed, &#10;                                                  1, &#10;                                                  closed )" name="the_neg1_one_interval">
         <typename name="finite_real_interval"/>
      </constant>
      <constant expression="make_finite_real_interval( &#10;                                                  ( &#10;                                                  -&#10;                                                  0.5 ) &#10;                                                  *&#10;                                                  PI, &#10;                                                  closed, &#10;                                                  0.5 &#10;                                                  *&#10;                                                  PI, &#10;                                                  closed )" name="the_neghalfpi_halfpi_interval">
         <typename name="finite_real_interval"/>
      </constant>
      <constant expression="make_finite_real_interval( &#10;                                                  -&#10;                                                  PI, &#10;                                                  open, &#10;                                                  PI, &#10;                                                  closed )" name="the_negpi_pi_interval">
         <typename name="finite_real_interval"/>
      </constant>
      <constant expression="make_real_interval_from_min( &#10;                                                  0, &#10;                                                  closed )" name="the_nonnegative_reals">
         <typename name="real_interval_from_min"/>
      </constant>
      <constant expression="make_elementary_space( &#10;                                                  es_numbers )" name="the_numbers">
         <typename name="elementary_space"/>
      </constant>
      <constant expression="make_extended_tuple_space( &#10;                                                  the_zero_tuple_space, &#10;                                                  the_reals )" name="the_real_tuples">
         <typename name="extended_tuple_space"/>
      </constant>
      <constant expression="make_elementary_space( &#10;                                                  es_reals )" name="the_reals">
         <typename name="elementary_space"/>
      </constant>
      <constant expression="make_elementary_space( &#10;                                                  es_strings )" name="the_strings">
         <typename name="elementary_space"/>
      </constant>
      <constant expression="make_extended_tuple_space( &#10;                                                  the_zero_tuple_space, &#10;                                                  the_generics )" name="the_tuples">
         <typename name="extended_tuple_space"/>
      </constant>
      <constant expression="make_finite_real_interval( &#10;                                                  0, &#10;                                                  closed, &#10;                                                  PI, &#10;                                                  closed )" name="the_zero_pi_interval">
         <typename name="finite_real_interval"/>
      </constant>
      <constant expression="make_listed_product_space( &#10;                                                  [] )" name="the_zero_tuple_space">
         <typename name="listed_product_space"/>
      </constant>
      <type name="absorbed_dose_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="acceleration_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="action_items">
         <select selectitems="action action_directive action_method action_property action_relationship action_request_solution alternate_product_relationship applied_action_assignment applied_classification_assignment applied_person_and_organization_assignment approval_status assembly_component_usage_substitute certification certification_item characterized_object class class_system classification_item configuration_design configuration_effectivity configuration_item configured_effectivity_assignment contract document_file document_reference_item draughting_model drawing_revision evaluated_characteristic executed_action general_property identification_item material_designation mechanical_design_geometric_presentation_representation organization organization_relationship organizational_project person_and_organization presentation_area product product_concept product_concept_feature product_concept_feature_association product_concept_feature_category product_concept_feature_category_usage product_definition product_definition_formation product_definition_formation_relationship product_definition_relationship product_definition_substitute property_definition requirement_assigned_item requirement_for_action_resource resource_property security_classification security_classification_level shape_aspect shape_representation versioned_action_request"/>
      </type>
      <type name="action_method_items">
         <select selectitems="action action_method action_property applied_action_assignment configuration_design contract document_file event_occurrence organization organizational_project person person_and_organization product product_concept product_definition product_definition_formation product_definition_formation_relationship product_definition_relationship property_definition test_method_based_parameter_assignment"/>
      </type>
      <type name="action_request_item">
         <select selectitems="action action_method action_property action_relationship alternate_product_relationship assembly_component_usage_substitute configuration_design configuration_effectivity configuration_item configured_effectivity_assignment document_file draughting_model drawing_revision general_property material_designation mechanical_design_geometric_presentation_representation organizational_project presentation_area product product_concept product_concept_feature product_concept_feature_association product_concept_feature_category product_concept_feature_category_usage product_definition product_definition_formation product_definition_formation_relationship product_definition_relationship product_definition_substitute property_definition resource_property shape_aspect shape_representation versioned_action_request"/>
      </type>
      <type name="actuated_direction">
         <enumeration items="bidirectional positive_only negative_only not_actuated"/>
      </type>
      <type name="ahead_or_behind">
         <enumeration items="ahead exact behind"/>
      </type>
      <type name="amount_of_substance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="angle_direction_reference_select">
         <select selectitems="direction curve point_path"/>
      </type>
      <type name="angle_direction_reference_with_a2p3d_select">
         <select selectitems="angle_direction_reference_select axis2_placement_3d"/>
      </type>
      <type name="angle_relator">
         <enumeration items="equal large small"/>
      </type>
      <type name="annotation_plane_element">
         <select selectitems="draughting_callout styled_item"/>
      </type>
      <type name="annotation_representation_select">
         <select selectitems="draughting_model presentation_area presentation_view symbol_representation"/>
      </type>
      <type name="annotation_symbol_occurrence_item">
         <select selectitems="annotation_symbol defined_symbol"/>
      </type>
      <type name="annotation_text_occurrence_item">
         <select selectitems="text_literal annotation_text annotation_text_character defined_character_glyph composite_text"/>
      </type>
      <type name="approval_item">
         <select selectitems="action action_directive action_property action_request_solution alternate_product_relationship applied_action_assignment applied_classification_assignment applied_usage_right assembly_component_usage_substitute certification class class_system configuration_design configuration_effectivity configuration_item configured_effectivity_assignment contract date directed_action document document_file draughting_model drawing_revision effectivity executed_action frozen_assignment general_property general_property_relationship group group_relationship information_usage_right material_designation mechanical_design_geometric_presentation_representation organizational_project presentation_area product product_concept product_concept_feature product_concept_feature_association product_concept_feature_category product_concept_feature_category_usage product_definition product_definition_formation product_definition_formation_relationship product_definition_relationship product_definition_substitute property_definition representation requirement_assignment resource_property security_classification shape_aspect_relationship shape_representation versioned_action_request"/>
      </type>
      <type name="approved_item">
         <select selectitems="certification change change_request configuration_effectivity configuration_item contract product security_classification start_request start_work"/>
      </type>
      <type name="area_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="area_or_view">
         <select selectitems="presentation_area presentation_view"/>
      </type>
      <type name="area_unit_type">
         <enumeration items="circular rectangular square"/>
      </type>
      <type name="atom_based_tuple">
         <aggregate lower="0" type="LIST" upper="?"/>
         <typename name="atom_based_value"/>
      </type>
      <type name="atom_based_value">
         <select selectitems="maths_atom atom_based_tuple"/>
      </type>
      <type name="attribute_classification_item">
         <select selectitems="action_directive action_method action_property action_property_representation action_relationship action_request_solution action_request_status alternate_product_relationship applied_action_assignment applied_action_request_assignment applied_approval_assignment applied_certification_assignment applied_document_reference applied_document_usage_constraint_assignment applied_effectivity_assignment applied_event_occurrence_assignment applied_external_identification_assignment applied_identification_assignment applied_organization_assignment applied_organizational_project_assignment applied_person_and_organization_assignment approval approval_person_organization approval_relationship approval_status certification context_dependent_unit contract date_and_time_assignment date_assignment derived_unit descriptive_representation_item document_file document_relationship effectivity event_occurrence_relationship executed_action general_property general_property_relationship group group_relationship information_right information_usage_right language measure_representation_item measure_with_unit named_unit organization_relationship organizational_address organizational_project_relationship person_and_organization person_and_organization_address product product_category product_concept product_concept_context product_definition product_definition_context product_definition_formation product_definition_formation_relationship product_definition_relationship property_definition property_definition_relationship property_definition_representation representation representation_context representation_item security_classification time_interval_relationship uncertainty_measure_with_unit usage_association versioned_action_request"/>
      </type>
      <type name="attribute_identifier">
         <typename name="identifier"/>
         <where expression="validate_attribute_id( SELF )" label="wr1"/>
      </type>
      <type name="attribute_language_item">
         <select selectitems="action actuated_kinematic_pair alternate_product_relationship application_context applied_certification_assignment applied_document_reference applied_document_usage_constraint_assignment applied_external_identification_assignment applied_identification_assignment applied_organizational_project_assignment applied_security_classification_assignment approval approval_relationship approval_status assembly_component_usage_substitute attribute_value_assignment certification certification_type configuration_design configuration_item contract data_environment date_role date_time_role descriptive_representation_item document_relationship document_usage_role draughting_title effectivity effectivity_relationship event_occurrence external_source general_property general_property_relationship geometric_representation_item geometric_tolerance group group_relationship identification_role information_right information_usage_right kinematic_pair make_from_usage_option mapped_item multi_language_attribute_assignment name_assignment object_role organization_relationship organization_role organizational_project organizational_project_relationship organizational_project_role person_and_organization person_and_organization_role presentation_layer_assignment process_product_association product product_concept product_concept_feature product_concept_feature_association product_concept_relationship product_definition product_definition_context product_definition_formation product_definition_formation_relationship product_definition_relationship product_definition_shape product_definition_substitute product_related_product_category property_definition property_definition_relationship representation representation_relationship requirement_for_action_resource resource_property resource_requirement_type security_classification security_classification_assignment shape_aspect shape_aspect_relationship shape_representation styled_item time_interval_role topological_representation_item uncertainty_measure_with_unit uncertainty_qualifier usage_association versioned_action_request versioned_action_request_relationship"/>
      </type>
      <type name="attribute_type">
         <select selectitems="label text"/>
      </type>
      <type name="axial_geometry_constraint_element">
         <select selectitems="point line circle plane cylindrical_surface conical_surface spherical_surface toroidal_surface surface_of_revolution sphere right_circular_cone right_circular_cylinder torus revolved_face_solid revolved_area_solid"/>
      </type>
      <type name="axis2_placement">
         <select selectitems="axis2_placement_2d axis2_placement_3d"/>
      </type>
      <type name="b_spline_curve_form">
         <enumeration items="polyline_form circular_arc elliptic_arc parabolic_arc hyperbolic_arc unspecified"/>
      </type>
      <type name="b_spline_or_composite_curve_select">
         <select selectitems="b_spline_curve composite_curve"/>
      </type>
      <type name="b_spline_or_rectangular_composite_surface_select">
         <select selectitems="b_spline_surface rectangular_composite_surface"/>
      </type>
      <type name="b_spline_surface_form">
         <enumeration items="plane_surf cylindrical_surf conical_surf spherical_surf toroidal_surf surf_of_revolution ruled_surf generalised_cone quadric_surf surf_of_linear_extrusion unspecified"/>
      </type>
      <type name="base_solid_select">
         <select selectitems="solid_model csg_primitive boolean_result"/>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRIMITIVE_2D' IN TYPEOF( SELF ) ) )" label="wr1"/>
      </type>
      <type name="blend_end_condition_select">
         <select selectitems="point_on_curve edge_curve vertex"/>
      </type>
      <type name="blend_radius_variation_type">
         <enumeration items="linear_blend cubic_blend unspecified_blend"/>
      </type>
      <type name="boolean_operand">
         <select selectitems="boolean_result csg_primitive half_space_2d half_space_solid solid_model"/>
      </type>
      <type name="boolean_operand_2d">
         <select selectitems="bounded_primitive_2d boolean_result_2d"/>
      </type>
      <type name="boolean_operator">
         <enumeration items="union intersection difference"/>
      </type>
      <type name="boolean_value">
         <builtintype type="BOOLEAN"/>
      </type>
      <type name="bounded_primitive_2d">
         <select selectitems="area_with_outer_boundary circular_area elliptic_area path_area_with_parameters polygonal_area rectangular_area"/>
      </type>
      <type name="box_characteristic_select">
         <select selectitems="box_height box_width box_slant_angle box_rotate_angle"/>
      </type>
      <type name="box_height">
         <typename name="positive_ratio_measure"/>
      </type>
      <type name="box_rotate_angle">
         <typename name="plane_angle_measure"/>
      </type>
      <type name="box_slant_angle">
         <typename name="plane_angle_measure"/>
      </type>
      <type name="box_width">
         <typename name="positive_ratio_measure"/>
      </type>
      <type name="camera_model_d3_multi_clipping_interection_select">
         <select selectitems="camera_model_d3_multi_clipping_union plane"/>
      </type>
      <type name="camera_model_d3_multi_clipping_union_select">
         <select selectitems="camera_model_d3_multi_clipping_intersection plane"/>
      </type>
      <type name="capacitance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="category_usage_item">
         <select selectitems="product_class"/>
      </type>
      <type name="cc_classified_item">
         <select selectitems="assembly_component_usage product_definition_formation"/>
      </type>
      <type name="cc_person_organization_item">
         <select selectitems="change change_request configuration_item contract product product_definition product_definition_formation security_classification start_request start_work"/>
      </type>
      <type name="cc_specified_item">
         <select selectitems="product_definition shape_aspect"/>
      </type>
      <type name="celsius_temperature_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="central_or_parallel">
         <enumeration items="central parallel"/>
      </type>
      <type name="certification_item">
         <select selectitems="alternate_product_relationship make_from_usage_option product_definition product_definition_formation product_definition_formation_relationship product_definition_relationship"/>
      </type>
      <type name="certified_item">
         <select selectitems="supplied_part_relationship"/>
      </type>
      <type name="chained_representation_link">
         <select selectitems="mapped_item representation_context representation_relationship"/>
      </type>
      <type name="change_management_object">
         <select selectitems="action action_directive action_items action_relationship alternate_product_relationship analytical_model_definition analytical_model_make_from_relationship analytical_model_port analytical_model_port_assignment analytical_representation applied_approval_assignment applied_date_and_time_assignment applied_document_reference applied_external_identification_assignment applied_group_assignment applied_identification_assignment applied_organization_assignment applied_person_and_organization_assignment approval approval_status assembly_bond_definition assembly_component assembly_component_usage assembly_component_usage_substitute assembly_group_component_definition_placement_link assembly_joint bus_element_link bus_structural_definition calendar_date certification characterized_object class complex_clause component_2d_location component_3d_location component_definition component_feature component_feature_relationship component_functional_terminal component_functional_unit component_terminal composite_curve_segment composite_signal_property_relationship conductive_interconnect_element_terminal_link configuration_effectivity configuration_item connection_zone_interface_plane_relationship connection_zone_map_identification connector_based_interconnect_definition contract curve_style curve_style_font curve_style_font_and_scaling curve_style_parameters_representation date date_and_time datum datum_difference_functional_unit_usage_view_terminal_assignment descriptive_representation_item design_composition_path device_terminal_map dielectric_crossover_area dimension_related_tolerance_zone_element dimensional_characteristic_representation dimensional_location dimensional_size direct_stratum_component_join_implementation direction document document_usage_constraint draughting_pre_defined_text_font effectivity evaluated_characteristic event_occurrence externally_defined_curve_font externally_defined_hatch_style externally_defined_item externally_defined_text_font externally_defined_tile_style fabrication_joint fill_area_style_hatching fill_area_style_tiles frozen_assignment func functional_specification functional_terminal_group functional_unit_terminal_definition general_property_relationship geometric_representation_context geometric_representation_item geometric_tolerance geometric_tolerance_relationship group group_product_definition group_shape_aspect interface_mounted_join item_defined_transformation join_shape_aspect layer_connection_point layout_junction linear_array_component_definition_link make_from_connectivity_relationship make_from_feature_relationship make_from_usage_option mapped_item material_designation measure_qualification measure_with_unit model_parameter network_node_definition operational_requirement_relationship organization packaged_connector_terminal_relationship parameter_assignment parameter_assignment_override part_connected_terminals_definition passage_technology person person_and_organization physical_connectivity_definition physical_connectivity_element physical_network physical_node_requirement_to_implementing_component_allocation plated_inter_stratum_feature plus_minus_tolerance port_variable pre_defined_item predefined_requirement_view_definition presentation_style_assignment printed_connector_template_terminal_relationship printed_part_template_connected_terminals_definition printed_part_template_material printed_part_template_material_link product product_category product_concept product_definition product_definition_formation product_definition_formation_relationship product_definition_relationship product_definition_with_associated_documents product_specific_parameter_value_assignment project_item projected_zone_definition promissory_usage_occurrence property_definition property_definition_relationship property_definition_representation range_characteristic reference_composition_path representation representation_context representation_item representation_relationship representation_relationship_with_transformation requirement_assignment rule_action runout_zone_orientation_reference_direction scalar_terminal_definition_link security_classification sequential_laminate_passage_based_fabrication_joint shape_aspect shape_aspect_relationship shape_dimension_representation shape_representation shape_representation_relationship signal simple_clause solid_curve_font specified_higher_usage_occurrence stratum_feature_based_derived_pattern stratum_feature_conductive_join stratum_surface stratum_technology stratum_technology_occurrence_link styled_item text_font tolerance_value tolerance_zone_definition tolerance_zone_form usage_view_connection_zone_terminal_shape_relationship vector versioned_action_request"/>
      </type>
      <type name="change_relationship_select">
         <select selectitems="action_relationship product_definition_formation_relationship product_definition_relationship shape_aspect_relationship"/>
      </type>
      <type name="change_request_item">
         <select selectitems="product_definition_formation"/>
      </type>
      <type name="character_spacing_select">
         <select selectitems="length_measure ratio_measure measure_with_unit descriptive_measure"/>
      </type>
      <type name="character_style_select">
         <select selectitems="character_glyph_style_stroke character_glyph_style_outline text_style_for_defined_font"/>
      </type>
      <type name="characterized_action_definition">
         <select selectitems="action action_method action_method_relationship action_relationship"/>
      </type>
      <type name="characterized_definition">
         <select selectitems="characterized_object characterized_product_definition shape_definition"/>
      </type>
      <type name="characterized_material_property">
         <select selectitems="material_property_representation product_material_composition_relationship"/>
      </type>
      <type name="characterized_product_composition_value">
         <select selectitems="measure_with_unit"/>
      </type>
      <type name="characterized_product_definition">
         <select selectitems="product_definition product_definition_relationship"/>
      </type>
      <type name="characterized_resource_definition">
         <select selectitems="action_resource action_resource_requirement"/>
      </type>
      <type name="class_usage_effectivity_context_item">
         <select selectitems="product_definition"/>
      </type>
      <type name="classification_item">
         <select selectitems="action action_directive action_method action_property action_relationship action_request_solution action_request_status address alternate_product_relationship applied_action_assignment applied_action_request_assignment applied_approval_assignment applied_certification_assignment applied_contract_assignment applied_date_and_time_assignment applied_date_assignment applied_document_reference applied_document_usage_constraint_assignment applied_effectivity_assignment applied_event_occurrence_assignment applied_external_identification_assignment applied_identification_assignment applied_organization_assignment applied_organizational_project_assignment applied_person_and_organization_assignment applied_security_classification_assignment approval approval_person_organization approval_relationship approval_status assembly_component_usage_substitute calendar_date certification characterized_class characterized_object class classified_item configuration_item context_dependent_unit contract conversion_based_unit date_and_time date_and_time_assignment date_assignment derived_unit descriptive_representation_item directed_action document_file document_relationship document_type effectivity event_occurrence executed_action feature_definition functional_unit_terminal_definition general_feature general_property general_property_relationship group identification_assignment information_right information_usage_right language material_designation measure_representation_item measure_with_unit multi_language_attribute_assignment named_unit organization organization_relationship organizational_address organizational_project organizational_project_relationship person person_and_organization_address plus_minus_tolerance process_operation product product_concept product_concept_feature product_concept_feature_category product_definition product_definition_context product_definition_formation product_definition_formation_relationship product_definition_relationship property_definition property_definition_representation representation representation_context representation_item resource_property security_classification security_classification_level shape_aspect stratum_technology_occurrence_relationship uncertainty_measure_with_unit usage_association versioned_action_request"/>
      </type>
      <type name="classified_item">
         <select selectitems="product product_definition product_definition_formation"/>
      </type>
      <type name="closed_or_open_shell_select">
         <select selectitems="closed_shell open_shell"/>
      </type>
      <type name="common_datum_list">
         <aggregate lower="2" type="LIST" upper="?"/>
         <typename name="datum_reference_element"/>
         <where expression="( SIZEOF( QUERY ( dre &lt;* SELF | ( dre\shape_aspect.of_shape &lt;&gt; SELF[1]\shape_aspect.of_shape ) ) ) = 0 )" label="wr1"/>
      </type>
      <type name="component_material_relationship_assignment_item">
         <select selectitems="assembly_component_usage assembly_item_number specification_definition"/>
      </type>
      <type name="compound_inner_area_boundary">
         <select selectitems="set_inner_area_boundary"/>
      </type>
      <type name="compound_item_definition">
         <select selectitems="list_representation_item set_representation_item"/>
      </type>
      <type name="conductance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="configuration_design_item">
         <select selectitems="product_definition product_definition_formation"/>
      </type>
      <type name="configured_effectivity_context_item">
         <select selectitems="product_concept_feature_association"/>
      </type>
      <type name="configured_effectivity_item">
         <select selectitems="action_relationship process_plan product_definition product_process_plan"/>
      </type>
      <type name="constraint_group_member">
         <select selectitems="explicit_constraint simultaneous_constraint_group"/>
      </type>
      <type name="constructive_geometry_representation_or_shape_represenation">
         <select selectitems="constructive_geometry_representation shape_representation"/>
      </type>
      <type name="context_dependent_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="contract_item">
         <select selectitems="action_directive alternate_product_relationship directed_action drawing_revision executed_action information_usage_right organization person_and_organization product product_definition_formation"/>
      </type>
      <type name="contracted_item">
         <select selectitems="product_definition_formation"/>
      </type>
      <type name="count_measure">
         <builtintype type="NUMBER"/>
      </type>
      <type name="csg_2d_area_select">
         <select selectitems="axis2_placement_2d csg_primitive_solid_2d"/>
      </type>
      <type name="csg_2d_shape_select">
         <select selectitems="mapped_item axis2_placement_2d csg_solid_2d"/>
      </type>
      <type name="csg_primitive">
         <select selectitems="block bounded_primitive_2d right_angular_wedge right_circular_cone right_circular_cylinder sphere torus"/>
      </type>
      <type name="csg_select">
         <select selectitems="boolean_result csg_primitive"/>
      </type>
      <type name="csg_select_2d">
         <select selectitems="bounded_primitive_2d boolean_result_2d"/>
      </type>
      <type name="current_element_assignment_select">
         <select selectitems="modify_element add_element"/>
      </type>
      <type name="curve_font_or_scaled_curve_font_select">
         <select selectitems="curve_style_font_select curve_style_font_and_scaling"/>
      </type>
      <type name="curve_on_surface">
         <select selectitems="composite_curve_on_surface pcurve surface_curve"/>
      </type>
      <type name="curve_or_annotation_curve_occurrence">
         <select selectitems="curve annotation_curve_occurrence"/>
      </type>
      <type name="curve_or_curve_set">
         <select selectitems="curve geometric_curve_set"/>
      </type>
      <type name="curve_or_render">
         <select selectitems="curve_style curve_style_rendering"/>
      </type>
      <type name="curve_or_surface_constraint_element">
         <select selectitems="curve surface"/>
      </type>
      <type name="curve_style_font_select">
         <select selectitems="curve_style_font pre_defined_curve_font externally_defined_curve_font"/>
      </type>
      <type name="curves_or_area">
         <enumeration items="curves area"/>
      </type>
      <type name="date_and_time_item">
         <select selectitems="action action_directive action_method action_property action_relationship action_request_solution alternate_product_relationship applied_action_assignment applied_classification_assignment applied_organization_assignment applied_person_and_organization_assignment applied_security_classification_assignment approval_person_organization approval_status assembly_component_usage_substitute certification class class_system configuration_design configuration_item configured_effectivity_assignment contract data_quality_definition directed_action document document_file draughting_model drawing_revision effectivity event_occurrence executed_action general_property information_usage_right material_designation mechanical_design_geometric_presentation_representation organization_relationship organizational_project person_and_organization presentation_area product product_concept product_concept_feature product_concept_feature_association product_concept_feature_category product_concept_feature_category_usage product_definition product_definition_formation product_definition_formation_relationship product_definition_relationship product_definition_substitute property_definition requirement_for_action_resource resource_property rule_action security_classification security_classification_level shape_representation versioned_action_request"/>
      </type>
      <type name="date_item">
         <select selectitems="action action_directive action_method action_property action_relationship action_request_solution alternate_product_relationship applied_action_assignment applied_classification_assignment applied_organization_assignment applied_person_and_organization_assignment applied_security_classification_assignment approval_person_organization approval_status assembly_component_usage_substitute certification class class_system configuration_design configuration_item configured_effectivity_assignment contract data_quality_definition directed_action document document_file draughting_model drawing_revision effectivity event_occurrence executed_action general_property information_usage_right material_designation mechanical_design_geometric_presentation_representation organization_relationship organizational_project person_and_organization presentation_area product product_concept product_concept_feature product_concept_feature_association product_concept_feature_category product_concept_feature_category_usage product_definition product_definition_formation product_definition_formation_relationship product_definition_relationship product_definition_substitute property_definition requirement_for_action_resource resource_property security_classification security_classification_level shape_representation versioned_action_request"/>
      </type>
      <type name="date_time_item">
         <select selectitems="approval_person_organization certification change change_request contract product_definition security_classification start_request start_work"/>
      </type>
      <type name="date_time_or_event_occurrence">
         <select selectitems="date_time_select event_occurrence"/>
      </type>
      <type name="date_time_select">
         <select selectitems="date date_and_time local_time"/>
      </type>
      <type name="datum_or_common_datum">
         <select selectitems="common_datum_list datum"/>
      </type>
      <type name="datum_reference_modifier">
         <select selectitems="datum_reference_modifier_with_value simple_datum_reference_modifier"/>
      </type>
      <type name="datum_reference_modifier_type">
         <enumeration items="circular_or_cylindrical distance projected spherical"/>
      </type>
      <type name="datum_system_or_reference">
         <select selectitems="datum_reference datum_system"/>
      </type>
      <type name="day_in_month_number">
         <builtintype type="INTEGER"/>
         <where expression="( ( 1 &lt;= SELF ) AND ( SELF &lt;= 31 ) )" label="wr1"/>
      </type>
      <type name="day_in_week_number">
         <builtintype type="INTEGER"/>
         <where expression="( ( 1 &lt;= SELF ) AND ( SELF &lt;= 7 ) )" label="wr1"/>
      </type>
      <type name="day_in_year_number">
         <builtintype type="INTEGER"/>
         <where expression="( ( 1 &lt;= SELF ) AND ( SELF &lt;= 366 ) )" label="wr1"/>
      </type>
      <type name="defined_glyph_select">
         <select selectitems="pre_defined_character_glyph externally_defined_character_glyph"/>
      </type>
      <type name="defined_symbol_select">
         <select selectitems="pre_defined_symbol externally_defined_symbol"/>
      </type>
      <type name="derived_property_select">
         <select selectitems="property_definition action_property resource_property"/>
      </type>
      <type name="description_attribute_select">
         <select selectitems="action_request_solution application_context approval_role configuration_design context_dependent_shape_representation date_role date_time_role effectivity external_source organization_role organizational_project person_and_organization person_and_organization_role property_definition_representation representation"/>
      </type>
      <type name="descriptive_measure">
         <builtintype type="STRING"/>
      </type>
      <type name="detailed_report_type">
         <enumeration items="measured_element inferior_quality_element"/>
      </type>
      <type name="dimension_count">
         <builtintype type="INTEGER"/>
         <where expression="( SELF &gt; 0 )" label="wr1"/>
      </type>
      <type name="dimension_extent_usage">
         <enumeration items="origin target"/>
      </type>
      <type name="dimensional_characteristic">
         <select selectitems="dimensional_location dimensional_size"/>
      </type>
      <type name="direction_count_select">
         <select selectitems="u_direction_count v_direction_count"/>
      </type>
      <type name="document_identifier_assigned_item">
         <select selectitems="document"/>
      </type>
      <type name="document_reference_item">
         <select selectitems="action_directive action_method action_relationship analytical_model_definition applied_action_assignment applied_external_identification_assignment approval assembly_component assembly_component_usage certification characterized_class characterized_object class class_system component_feature configuration_design configuration_item contract descriptive_representation_item dimensional_size executed_action externally_conditioned_data_quality_criterion externally_defined_dimension_definition externally_defined_item feature_definition general_property group group_relationship information_right information_usage_right inter_stratum_feature material_designation measure_representation_item model_parameter organization organizational_project package_terminal passage_technology person physical_connectivity_definition physical_connectivity_element predefined_requirement_view_definition presentation_area process_plan product product_category product_concept product_concept_feature product_concept_feature_category product_definition product_definition_context product_definition_formation product_definition_formation_relationship product_definition_process product_definition_relationship product_definition_substitute product_related_product_category property_definition protocol_physical_layer_definition representation representation_item resource_requirement_type retention rule_set security_classification shape_aspect shape_aspect_relationship stratum stratum_feature stratum_surface stratum_technology structured_layout_component usage_association versioned_action_request"/>
      </type>
      <type name="dose_equivalent_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="draughting_callout_element">
         <select selectitems="annotation_curve_occurrence annotation_fill_area_occurrence annotation_symbol_occurrence annotation_text_occurrence tessellated_annotation_occurrence"/>
      </type>
      <type name="draughting_model_item_association_select">
         <select selectitems="annotation_occurrence draughting_callout"/>
      </type>
      <type name="draughting_model_item_definition">
         <select selectitems="applied_action_assignment applied_action_method_assignment applied_action_request_assignment applied_approval_assignment applied_certification_assignment applied_classification_assignment applied_contract_assignment applied_date_and_time_assignment applied_date_assignment applied_document_reference applied_document_usage_constraint_assignment applied_effectivity_assignment applied_event_occurrence_assignment applied_external_identification_assignment applied_group_assignment applied_identification_assignment applied_ineffectivity_assignment applied_name_assignment applied_organization_assignment applied_organizational_project_assignment applied_person_and_organization_assignment applied_security_classification_assignment applied_time_interval_assignment applied_usage_right dimensional_size geometric_tolerance product_definition_relationship product_definition_shape property_definition shape_aspect shape_aspect_relationship"/>
      </type>
      <type name="draughting_model_item_select">
         <select selectitems="mapped_item styled_item axis2_placement camera_model draughting_callout"/>
      </type>
      <type name="draughting_subfigure_representation_item">
         <select selectitems="annotation_occurrence draughting_callout axis2_placement"/>
      </type>
      <type name="draughting_symbol_representation_item">
         <select selectitems="annotation_curve_occurrence annotation_symbol_occurrence annotation_fill_area_occurrence annotation_text_occurrence axis2_placement"/>
      </type>
      <type name="draughting_titled_item">
         <select selectitems="drawing_revision drawing_sheet_revision"/>
      </type>
      <type name="edge_or_curve">
         <select selectitems="curve edge"/>
      </type>
      <type name="effectivity_item">
         <select selectitems="action action_method action_method_relationship action_property action_relationship assembly_component_usage_substitute class class_system configuration_design configuration_item configured_effectivity_assignment document_file draughting_model drawing_revision general_property material_designation mechanical_design_geometric_presentation_representation presentation_area product product_concept product_concept_feature product_concept_feature_association product_concept_feature_category product_concept_feature_category_usage product_definition product_definition_formation product_definition_formation_relationship product_definition_relationship product_definition_substitute property_definition requirement_for_action_resource resource_property security_classification shape_aspect shape_representation"/>
      </type>
      <type name="electric_charge_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="electric_current_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="electric_potential_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="elementary_function_enumerators">
         <enumeration items="ef_and ef_or ef_not ef_xor ef_negate_i ef_add_i ef_subtract_i ef_multiply_i ef_divide_i ef_mod_i ef_exponentiate_i ef_eq_i ef_ne_i ef_gt_i ef_lt_i ef_ge_i ef_le_i ef_abs_i ef_max_i ef_min_i ef_if_i ef_negate_r ef_reciprocal_r ef_add_r ef_subtract_r ef_multiply_r ef_divide_r ef_mod_r ef_exponentiate_r ef_exponentiate_ri ef_eq_r ef_ne_r ef_gt_r ef_lt_r ef_ge_r ef_le_r ef_abs_r ef_max_r ef_min_r ef_acos_r ef_asin_r ef_atan2_r ef_cos_r ef_exp_r ef_ln_r ef_log2_r ef_log10_r ef_sin_r ef_sqrt_r ef_tan_r ef_if_r ef_form_c ef_rpart_c ef_ipart_c ef_negate_c ef_reciprocal_c ef_add_c ef_subtract_c ef_multiply_c ef_divide_c ef_exponentiate_c ef_exponentiate_ci ef_eq_c ef_ne_c ef_conjugate_c ef_abs_c ef_arg_c ef_cos_c ef_exp_c ef_ln_c ef_sin_c ef_sqrt_c ef_tan_c ef_if_c ef_subscript_s ef_eq_s ef_ne_s ef_gt_s ef_lt_s ef_ge_s ef_le_s ef_subsequence_s ef_concat_s ef_size_s ef_format ef_value ef_like ef_if_s ef_subscript_b ef_eq_b ef_ne_b ef_gt_b ef_lt_b ef_ge_b ef_le_b ef_subsequence_b ef_concat_b ef_size_b ef_if_b ef_subscript_t ef_eq_t ef_ne_t ef_concat_t ef_size_t ef_entuple ef_detuple ef_insert ef_remove ef_if_t ef_sum_it ef_product_it ef_add_it ef_subtract_it ef_scalar_mult_it ef_dot_prod_it ef_sum_rt ef_product_rt ef_add_rt ef_subtract_rt ef_scalar_mult_rt ef_dot_prod_rt ef_norm_rt ef_sum_ct ef_product_ct ef_add_ct ef_subtract_ct ef_scalar_mult_ct ef_dot_prod_ct ef_norm_ct ef_if ef_ensemble ef_member_of"/>
      </type>
      <type name="elementary_space_enumerators">
         <enumeration items="es_numbers es_complex_numbers es_reals es_integers es_logicals es_booleans es_strings es_binarys es_maths_spaces es_maths_functions es_generics"/>
      </type>
      <type name="energy_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="event_occurrence_item">
         <select selectitems="action action_directive action_method action_property action_request_solution alternate_product_relationship applied_action_assignment applied_classification_assignment assembly_component_usage_substitute certification class class_system configuration_design configuration_effectivity configuration_item configured_effectivity_assignment contract draughting_model drawing_revision executed_action general_property material_designation mechanical_design_geometric_presentation_representation organization_relationship organizational_project person_and_organization presentation_area product product_concept product_concept_feature product_concept_feature_association product_concept_feature_category product_concept_feature_category_usage product_definition_formation product_definition_formation_relationship product_definition_relationship product_definition_substitute property_definition requirement_for_action_resource resource_property security_classification_level shape_representation"/>
      </type>
      <type name="expression_extension_select">
         <select selectitems="expression_extension_string expression_extension_numeric"/>
      </type>
      <type name="extension_options">
         <enumeration items="eo_none eo_cont eo_cont_right eo_cont_left"/>
      </type>
      <type name="external_identification_item">
         <select selectitems="action_relationship action_request_status applied_organization_assignment applied_person_and_organization_assignment approval approval_status assembly_bond_definition assembly_component composite_signal_property_relationship date_and_time_assignment date_assignment digital_analytical_model_vector_port document_file external_source externally_defined_class externally_defined_context_dependent_unit externally_defined_conversion_based_unit externally_defined_general_property externally_defined_physical_network_group externally_defined_physical_network_group_element_relationship externally_defined_picture_representation_item externally_defined_representation_item functional_specification generic_product_definition_reference land_physical_template organizational_address package package_terminal_template_definition printed_component product_definition property_definition security_classification shape_representation signal stratum stratum_feature_based_derived_pattern stratum_technology trimmed_curve versioned_action_request"/>
      </type>
      <type name="face_or_surface">
         <select selectitems="face surface"/>
      </type>
      <type name="fill_area_style_tile_shape_select">
         <select selectitems="fill_area_style_tile_curve_with_style fill_area_style_tile_coloured_region fill_area_style_tile_symbol_with_style pre_defined_tile externally_defined_tile"/>
      </type>
      <type name="fill_style_select">
         <select selectitems="fill_area_style_colour externally_defined_tile_style fill_area_style_tiles externally_defined_hatch_style fill_area_style_hatching"/>
      </type>
      <type name="font_select">
         <select selectitems="pre_defined_text_font externally_defined_text_font text_font"/>
      </type>
      <type name="force_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="founded_item_select">
         <select selectitems="founded_item representation_item"/>
      </type>
      <type name="frequency_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="generalized_surface_select">
         <select selectitems="surface face_surface surfaced_open_shell"/>
      </type>
      <type name="geometric_constraint_element">
         <select selectitems="point curve surface vector direction"/>
      </type>
      <type name="geometric_item_specific_usage_select">
         <select selectitems="shape_aspect shape_aspect_relationship"/>
      </type>
      <type name="geometric_model_item">
         <select selectitems="connected_face_set edge_loop geometric_representation_item"/>
      </type>
      <type name="geometric_set_select">
         <select selectitems="curve point surface"/>
      </type>
      <type name="geometric_tolerance_modifier">
         <enumeration items="any_cross_section common_zone each_radial_element free_state least_material_requirement line_element major_diameter maximum_material_requirement minor_diameter not_convex pitch_diameter reciprocity_requirement separate_requirement statistical_tolerance tangent_plane"/>
      </type>
      <type name="geometric_tolerance_target">
         <select selectitems="dimensional_location dimensional_size product_definition_shape shape_aspect"/>
      </type>
      <type name="groupable_item">
         <select selectitems="applied_identification_assignment applied_name_assignment assembly_component assembly_component_usage assembly_spacing_requirement component_feature component_functional_unit geometric_representation_item group_relationship group_shape_aspect layout_spacing_requirement mapped_item network_node_definition package_product_concept_feature part_connected_terminals_definition physical_connectivity_definition physical_network predefined_requirement_view_definition printed_part_template_terminal product_concept_feature product_definition product_definition_formation property_definition_representation representation representation_item representation_relationship_with_transformation shape_aspect shape_aspect_relationship shape_representation_relationship stratum styled_item topological_representation_item"/>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GROUP' IN TYPEOF( SELF ) ) )" label="wr1"/>
      </type>
      <type name="hour_in_day">
         <builtintype type="INTEGER"/>
         <where expression="( ( 0 &lt;= SELF ) AND ( SELF &lt; 24 ) )" label="wr1"/>
      </type>
      <type name="id_attribute_select">
         <select selectitems="action address application_context dimensional_size geometric_tolerance group organizational_project product_category property_definition representation shape_aspect shape_aspect_relationship"/>
      </type>
      <type name="identification_item">
         <select selectitems="action action_directive action_method action_property applied_identification_assignment approval_status characterized_class class class_system configuration_item contract dimensional_size document_file document_type draughting_model effectivity general_property group group_relationship information_right information_usage_right material_designation measure_representation_item mechanical_design_geometric_presentation_representation organization organizational_project person_and_organization presentation_area product product_category product_class product_concept product_concept_feature product_concept_feature_category product_definition product_definition_formation product_definition_relationship product_identification property_definition property_definition_relationship representation rule_set security_classification security_classification_level shape_aspect_relationship shape_representation usage_association versioned_action_request"/>
      </type>
      <type name="identifier">
         <builtintype type="STRING"/>
      </type>
      <type name="illuminance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="inductance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="input_selector">
         <typename name="positive_integer"/>
      </type>
      <type name="inspected_ecdq_element_select">
         <typename name="inspected_element_select"/>
      </type>
      <type name="inspected_element_select">
         <select selectitems="assembly_component_usage axis2_placement_3d b_spline_or_composite_curve_select b_spline_or_rectangular_composite_surface_select cartesian_transformation_operator_3d closed_or_open_shell_select connected_face_set curve direction edge_curve edge_loop face_surface global_uncertainty_assigned_context global_unit_assigned_context group manifold_solid_brep placement point presentation_layer_assignment representation_item styled_item surface vertex_point"/>
      </type>
      <type name="inspected_shape_element_select">
         <typename name="inspected_element_select"/>
      </type>
      <type name="instance_usage_context_select">
         <select selectitems="product_definition_relationship product_definition_usage"/>
      </type>
      <type name="internal_or_reflected_shape_aspect">
         <select selectitems="shape_aspect identifier"/>
      </type>
      <type name="interpolation_type">
         <enumeration items="undefined_interpolation_type discontinuous_interpolation_type synchronous_interpolation_type linear_interpolation_type"/>
      </type>
      <type name="invisibility_context">
         <select selectitems="draughting_model presentation_representation presentation_set"/>
      </type>
      <type name="invisible_item">
         <select selectitems="draughting_callout presentation_layer_assignment representation styled_item"/>
      </type>
      <type name="ir_usage_item">
         <typename name="action_items"/>
      </type>
      <type name="item_identified_representation_usage_definition">
         <select selectitems="applied_action_assignment applied_action_method_assignment applied_action_request_assignment applied_approval_assignment applied_certification_assignment applied_classification_assignment applied_contract_assignment applied_date_and_time_assignment applied_date_assignment applied_document_reference applied_document_usage_constraint_assignment applied_effectivity_assignment applied_event_occurrence_assignment applied_external_identification_assignment applied_group_assignment applied_identification_assignment applied_ineffectivity_assignment applied_name_assignment applied_organization_assignment applied_organizational_project_assignment applied_person_and_organization_assignment applied_security_classification_assignment applied_time_interval_assignment applied_usage_right dimensional_size general_property geometric_tolerance product_definition_relationship property_definition property_definition_relationship shape_aspect shape_aspect_relationship"/>
      </type>
      <type name="item_identified_representation_usage_select">
         <select selectitems="representation_item list_representation_item set_representation_item"/>
      </type>
      <type name="kinematic_analysis_definition">
         <select selectitems="interpolated_configuration_sequence prescribed_path"/>
      </type>
      <type name="kinematic_link_representation_items">
         <select selectitems="curve point rigid_placement surface"/>
      </type>
      <type name="kinematic_result">
         <select selectitems="interpolated_configuration_sequence resulting_path"/>
      </type>
      <type name="kinematic_topology_representation_select">
         <select selectitems="kinematic_topology_structure kinematic_topology_directed_structure kinematic_topology_network_structure"/>
      </type>
      <type name="knot_type">
         <enumeration items="uniform_knots quasi_uniform_knots piecewise_bezier_knots unspecified"/>
      </type>
      <type name="label">
         <builtintype type="STRING"/>
      </type>
      <type name="layered_item">
         <select selectitems="presentation_representation representation_item"/>
      </type>
      <type name="length_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="limit_condition">
         <enumeration items="maximum_material_condition least_material_condition regardless_of_feature_size"/>
      </type>
      <type name="linear_geometry_constraint_element">
         <select selectitems="line plane direction vector"/>
      </type>
      <type name="link_or_shape_representation">
         <select selectitems="kinematic_link_representation shape_representation"/>
      </type>
      <type name="list_of_reversible_topology_item">
         <aggregate lower="0" type="LIST" upper="?"/>
         <typename name="reversible_topology_item"/>
      </type>
      <type name="list_representation_item">
         <aggregate lower="1" type="LIST" upper="?"/>
         <typename name="representation_item"/>
      </type>
      <type name="location_in_aggregate_item">
         <aggregate lower="1" type="LIST" upper="?"/>
         <typename name="integer_representation_item"/>
      </type>
      <type name="location_of_extreme_value_select">
         <select selectitems="inspected_shape_element_select b_spline_surface_knot_locator b_spline_curve_knot_locator b_spline_curve_segment b_spline_surface_strip b_spline_surface_patch composite_curve_transition_locator rectangular_composite_surface_transition_locator boundary_curve_of_b_spline_or_rectangular_composite_surface oriented_edge face_bound point_on_edge_curve point_on_face_surface subedge subface"/>
      </type>
      <type name="luminous_flux_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="luminous_intensity_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="machining_feature_definition">
         <select selectitems="boss compound_feature externally_defined_feature_definition flat_face gear marking outer_round outside_profile pocket protrusion removal_volume replicate_feature revolved_profile rib_top round_hole rounded_end spherical_cap step slot thread turned_knurl"/>
      </type>
      <type name="magnetic_flux_density_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="magnetic_flux_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="marker_select">
         <select selectitems="marker_type pre_defined_marker"/>
      </type>
      <type name="marker_type">
         <enumeration items="dot x plus asterisk ring square triangle"/>
      </type>
      <type name="mass_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="maths_atom">
         <select selectitems="maths_simple_atom maths_enum_atom"/>
      </type>
      <type name="maths_binary">
         <builtintype type="BINARY"/>
      </type>
      <type name="maths_boolean">
         <builtintype type="BOOLEAN"/>
      </type>
      <type name="maths_enum_atom">
         <select selectitems="elementary_space_enumerators ordering_type elementary_function_enumerators open_closed space_constraint_type repackage_options extension_options"/>
      </type>
      <type name="maths_expression">
         <select selectitems="atom_based_value maths_tuple generic_expression"/>
      </type>
      <type name="maths_function_select">
         <select selectitems="maths_function elementary_function_enumerators"/>
      </type>
      <type name="maths_integer">
         <builtintype type="INTEGER"/>
      </type>
      <type name="maths_logical">
         <builtintype type="LOGICAL"/>
      </type>
      <type name="maths_number">
         <builtintype type="NUMBER"/>
      </type>
      <type name="maths_real">
         <builtintype type="REAL"/>
      </type>
      <type name="maths_simple_atom">
         <select selectitems="maths_number maths_real maths_integer maths_logical maths_boolean maths_string maths_binary"/>
      </type>
      <type name="maths_space_or_function">
         <select selectitems="maths_space maths_function"/>
      </type>
      <type name="maths_string">
         <builtintype type="STRING"/>
      </type>
      <type name="maths_tuple">
         <aggregate lower="0" type="LIST" upper="?"/>
         <typename name="maths_value"/>
      </type>
      <type name="maths_value">
         <select selectitems="atom_based_value maths_tuple generic_expression"/>
         <where expression="( ( NOT ( 'GENERIC_EXPRESSION' IN stripped_typeof( SELF ) ) ) OR expression_is_constant( SELF ) )" label="constancy"/>
      </type>
      <type name="measure_value">
         <select selectitems="absorbed_dose_measure dose_equivalent_measure radioactivity_measure acceleration_measure amount_of_substance_measure area_measure celsius_temperature_measure context_dependent_measure count_measure descriptive_measure capacitance_measure electric_charge_measure conductance_measure electric_current_measure electric_potential_measure energy_measure magnetic_flux_density_measure force_measure frequency_measure illuminance_measure inductance_measure length_measure luminous_flux_measure luminous_intensity_measure magnetic_flux_measure mass_measure numeric_measure non_negative_length_measure parameter_value plane_angle_measure positive_length_measure positive_plane_angle_measure positive_ratio_measure power_measure pressure_measure ratio_measure resistance_measure solid_angle_measure thermodynamic_temperature_measure time_measure velocity_measure volume_measure"/>
      </type>
      <type name="measured_value_select">
         <select selectitems="boolean_value measure_value plane_angle_and_ratio_pair plane_angle_and_length_pair"/>
      </type>
      <type name="mechanical_design_and_draughting_relationship_select">
         <select selectitems="draughting_model mechanical_design_geometric_presentation_representation mechanical_design_presentation_representation_with_draughting mechanical_design_shaded_presentation_representation shape_representation"/>
      </type>
      <type name="mechanical_design_geometric_presentation_area_items">
         <select selectitems="axis2_placement mapped_item"/>
      </type>
      <type name="mechanical_design_geometric_presentation_representation_items">
         <select selectitems="axis2_placement camera_model_d3 mapped_item styled_item"/>
      </type>
      <type name="mechanical_design_shaded_presentation_area_items">
         <select selectitems="axis2_placement mapped_item"/>
      </type>
      <type name="mechanical_design_shaded_presentation_representation_items">
         <select selectitems="axis2_placement camera_model_d3 mapped_item styled_item"/>
      </type>
      <type name="message">
         <builtintype type="STRING"/>
      </type>
      <type name="minute_in_hour">
         <builtintype type="INTEGER"/>
         <where expression="( ( 0 &lt;= SELF ) AND ( SELF &lt;= 59 ) )" label="wr1"/>
      </type>
      <type name="month_in_year_number">
         <builtintype type="INTEGER"/>
         <where expression="( ( 1 &lt;= SELF ) AND ( SELF &lt;= 12 ) )" label="wr1"/>
      </type>
      <type name="multi_language_attribute_item">
         <select selectitems="action action_directive action_method action_property action_relationship actuated_kinematic_pair alternate_product_relationship application_context applied_certification_assignment applied_document_reference applied_document_usage_constraint_assignment applied_external_identification_assignment applied_identification_assignment applied_organizational_project_assignment approval approval_relationship approval_status assembly_component_usage_substitute attribute_value_assignment certification certification_type colour configuration_design configuration_item contract data_environment date_role date_time_role descriptive_representation_item document_relationship document_usage_role draughting_title effectivity effectivity_relationship event_occurrence external_source general_property general_property_relationship geometric_representation_item geometric_tolerance group group_relationship identification_role information_right information_usage_right kinematic_pair make_from_usage_option mapped_item name_assignment object_role organization_relationship organization_role organizational_project organizational_project_relationship organizational_project_role person_and_organization person_and_organization_role presentation_layer_assignment process_product_association product product_concept product_concept_feature product_concept_feature_association product_concept_relationship product_definition product_definition_context product_definition_formation product_definition_formation_relationship product_definition_relationship product_definition_shape product_definition_substitute product_related_product_category property_definition property_definition_relationship representation representation_relationship requirement_for_action_resource resource_property resource_requirement_type security_classification security_classification_assignment shape_aspect shape_aspect_relationship shape_representation styled_item time_interval_role topological_representation_item uncertainty_measure_with_unit uncertainty_qualifier usage_association versioned_action_request versioned_action_request_relationship"/>
      </type>
      <type name="multi_or_next_assembly_usage_occurrence">
         <select selectitems="multi_level_reference_designator next_assembly_usage_occurrence"/>
      </type>
      <type name="name_attribute_select">
         <select selectitems="action_request_solution address configuration_design context_dependent_shape_representation derived_unit effectivity person_and_organization product_definition product_definition_substitute property_definition_representation"/>
      </type>
      <type name="name_item">
         <select selectitems="assembly_component_usage external_class_library group group_relationship product product_definition"/>
      </type>
      <type name="non_negative_length_measure">
         <typename name="length_measure"/>
         <where expression="( SELF &gt;= 0 )" label="wr1"/>
      </type>
      <type name="nonnegative_integer">
         <builtintype type="INTEGER"/>
         <where expression="( SELF &gt;= 0 )" label="nonnegativity"/>
      </type>
      <type name="null_style">
         <enumeration items="null"/>
      </type>
      <type name="numeric_measure">
         <builtintype type="NUMBER"/>
      </type>
      <type name="one_or_two">
         <typename name="positive_integer"/>
         <where expression="( ( SELF = 1 ) OR ( SELF = 2 ) )" label="in_range"/>
      </type>
      <type name="open_closed">
         <enumeration items="open closed"/>
      </type>
      <type name="ordering_type">
         <enumeration items="by_rows by_columns"/>
      </type>
      <type name="organization_item">
         <select selectitems="action action_directive action_method action_property action_relationship action_request_solution alternate_product_relationship applied_action_assignment applied_classification_assignment applied_identification_assignment applied_organization_assignment applied_person_and_organization_assignment applied_security_classification_assignment approval approval_status assembly_component_usage_substitute certification class class_system configuration_design configuration_effectivity configuration_item configured_effectivity_assignment contract data_quality_definition document_file document_type draughting_model drawing_revision effectivity event_occurrence executed_action general_property information_usage_right material_designation mechanical_design_geometric_presentation_representation organization organization_relationship organizational_project person_and_organization presentation_area product product_concept product_concept_feature product_concept_feature_association product_concept_feature_category product_concept_feature_category_usage product_definition product_definition_formation product_definition_formation_relationship product_definition_relationship product_definition_substitute property_definition representation requirement_for_action_resource resource_property rule_action security_classification security_classification_level shape_representation versioned_action_request"/>
      </type>
      <type name="orientation_basis_select">
         <select selectitems="axis2_placement_3d min_and_major_ply_orientation_basis"/>
      </type>
      <type name="parallel_offset_type">
         <enumeration items="curve_2d_offset curve_3d_offset surface_offset"/>
      </type>
      <type name="parameter_assignment_select">
         <select selectitems="analytical_model_parameter model_parameter"/>
      </type>
      <type name="parameter_value">
         <builtintype type="REAL"/>
      </type>
      <type name="path_or_composite_curve">
         <select selectitems="composite_curve path"/>
      </type>
      <type name="pcurve_or_surface">
         <select selectitems="pcurve surface"/>
      </type>
      <type name="person_and_organization_item">
         <select selectitems="action action_directive action_method action_property action_relationship action_request_solution alternate_product_relationship applied_action_assignment applied_classification_assignment applied_identification_assignment applied_organization_assignment applied_person_and_organization_assignment applied_security_classification_assignment approval approval_status assembly_component_usage_substitute certification class class_system configuration_design configuration_effectivity configuration_item configured_effectivity_assignment contract data_quality_definition document_file document_type draughting_model drawing_revision event_occurrence executed_action general_property information_usage_right material_designation mechanical_design_geometric_presentation_representation organization organization_relationship organizational_project person_and_organization presentation_area product product_concept product_concept_feature product_concept_feature_association product_concept_feature_category product_concept_feature_category_usage product_definition product_definition_formation product_definition_formation_relationship product_definition_relationship product_definition_substitute property_definition requirement_for_action_resource resource_property rule_action security_classification security_classification_level shape_representation versioned_action_request"/>
      </type>
      <type name="person_organization_select">
         <select selectitems="person organization person_and_organization"/>
      </type>
      <type name="picture_representation_item_select">
         <select selectitems="styled_item planar_box axis2_placement_2d"/>
      </type>
      <type name="planar_curve_select">
         <select selectitems="line conic trimmed_curve pcurve surface_curve"/>
         <where expression="( SELF\geometric_representation_item.dim = 3 )" label="wr1"/>
         <where expression="check_curve_planarity( SELF )" label="wr2"/>
      </type>
      <type name="plane_angle_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="plane_or_planar_box">
         <select selectitems="plane planar_box"/>
      </type>
      <type name="point_and_vector_member">
         <select selectitems="point direction"/>
      </type>
      <type name="point_and_vector_members">
         <aggregate lower="2" type="LIST" upper="3"/>
         <typename name="point_and_vector_member"/>
      </type>
      <type name="point_curve_or_surface_constraint_element">
         <select selectitems="point curve surface"/>
      </type>
      <type name="point_path_members">
         <aggregate lower="1" type="LIST" upper="?"/>
         <typename name="point_and_vector"/>
      </type>
      <type name="point_placement_shape_representation_item">
         <select selectitems="compound_representation_item mapped_item axis2_placement_3d"/>
      </type>
      <type name="positive_integer">
         <typename name="nonnegative_integer"/>
         <where expression="( SELF &gt; 0 )" label="positivity"/>
      </type>
      <type name="positive_length_measure">
         <typename name="non_negative_length_measure"/>
         <where expression="( SELF &gt; 0 )" label="wr1"/>
      </type>
      <type name="positive_plane_angle_measure">
         <typename name="plane_angle_measure"/>
         <where expression="( SELF &gt; 0 )" label="wr1"/>
      </type>
      <type name="positive_ratio_measure">
         <typename name="ratio_measure"/>
         <where expression="( SELF &gt; 0 )" label="wr1"/>
      </type>
      <type name="power_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="preferred_ordering">
         <enumeration items="extremity_order detected_order"/>
      </type>
      <type name="preferred_surface_curve_representation">
         <enumeration items="curve_3d pcurve_s1 pcurve_s2"/>
      </type>
      <type name="presentable_text">
         <builtintype type="STRING"/>
         <where expression="control_characters_free( SELF )" label="wr1"/>
      </type>
      <type name="presentation_representation_select">
         <select selectitems="presentation_representation presentation_set"/>
      </type>
      <type name="presentation_size_assignment_select">
         <select selectitems="presentation_view presentation_area area_in_set"/>
      </type>
      <type name="presentation_style_select">
         <select selectitems="point_style curve_style surface_style_usage symbol_style fill_area_style text_style externally_defined_style null_style"/>
      </type>
      <type name="presented_item_select">
         <select selectitems="action action_method action_relationship product_concept product_concept_feature product_concept_feature_category product_definition product_definition_formation product_definition_relationship"/>
      </type>
      <type name="pressure_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="previous_element_assignment_select">
         <select selectitems="modify_element delete_element"/>
      </type>
      <type name="product_definition_or_assembly_relationship">
         <select selectitems="assembly_component_usage product_definition"/>
      </type>
      <type name="product_definition_or_breakdown_element_usage">
         <select selectitems="product_definition product_definition_usage"/>
      </type>
      <type name="product_definition_or_product_definition_relationship">
         <select selectitems="product_definition product_definition_usage"/>
      </type>
      <type name="product_definition_or_reference">
         <select selectitems="product_definition generic_product_definition_reference"/>
      </type>
      <type name="product_or_formation_or_definition">
         <select selectitems="product product_definition_formation product_definition"/>
      </type>
      <type name="product_space">
         <select selectitems="uniform_product_space listed_product_space"/>
      </type>
      <type name="project_item">
         <select selectitems="assembly_component_usage configuration_item executed_action product product_concept product_definition product_definition_formation"/>
      </type>
      <type name="property_or_shape_select">
         <select selectitems="property_definition shape_definition"/>
      </type>
      <type name="property_variable_rep_select">
         <select selectitems="dimensional_size representation"/>
      </type>
      <type name="radial_geometry_constraint_element">
         <select selectitems="circle cylindrical_surface conical_surface spherical_surface right_circular_cylinder right_circular_cone sphere"/>
      </type>
      <type name="radioactivity_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="ratio_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="real_interval">
         <select selectitems="real_interval_from_min real_interval_to_max finite_real_interval elementary_space"/>
         <where expression="( ( NOT ( 'ELEMENTARY_SPACE' IN stripped_typeof( SELF ) ) ) OR ( SELF\elementary_space.space_id = es_reals ) )" label="wr1"/>
      </type>
      <type name="rendering_properties_select">
         <select selectitems="surface_style_reflectance_ambient surface_style_transparent"/>
      </type>
      <type name="repackage_options">
         <enumeration items="ro_nochange ro_wrap_as_tuple ro_unwrap_tuple"/>
      </type>
      <type name="represented_definition">
         <select selectitems="general_property property_definition property_definition_relationship shape_aspect shape_aspect_relationship"/>
      </type>
      <type name="requirement_assigned_item">
         <select selectitems="assembly_component_usage assembly_item_number assembly_joint component_functional_unit component_material_relationship configuration_item derived_laminate_assignment descriptive_representation_item dielectric_crossover_area group group_product_definition group_relationship group_shape_aspect layered_interconnect_module_design_view part_connected_terminals_definition part_connected_terminals_element passage_technology physical_connectivity_definition predefined_requirement_view_definition product product_class product_definition product_definition_formation product_definition_relationship representation shape_aspect shape_aspect_relationship shape_representation stratum_feature_conductive_join stratum_technology stratum_technology_occurrence stratum_technology_occurrence_relationship structured_template thermal_isolation_removal_template"/>
      </type>
      <type name="requirement_satisfaction_item">
         <select selectitems="requirement_assigned_item"/>
      </type>
      <type name="requirement_source_item">
         <select selectitems="characterized_object group group_relationship product product_definition product_definition_formation product_definition_relationship shape_aspect"/>
      </type>
      <type name="resistance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="reversible_topology">
         <select selectitems="reversible_topology_item list_of_reversible_topology_item set_of_reversible_topology_item"/>
      </type>
      <type name="reversible_topology_item">
         <select selectitems="edge path face face_bound closed_shell open_shell"/>
      </type>
      <type name="rigid_placement">
         <select selectitems="axis2_placement_3d su_parameters"/>
      </type>
      <type name="role_select">
         <select selectitems="action_assignment action_request_assignment approval_assignment approval_date_time certification_assignment contract_assignment document_reference effectivity_assignment group_assignment name_assignment security_classification_assignment"/>
      </type>
      <type name="rule_superseded_item">
         <select selectitems="product_definition_formation"/>
      </type>
      <type name="second_in_minute">
         <builtintype type="REAL"/>
         <where expression="( ( 0 &lt;= SELF ) AND ( SELF &lt; 60 ) )" label="wr1"/>
      </type>
      <type name="security_classification_item">
         <select selectitems="action action_directive action_property applied_action_assignment assembly_component_usage assembly_component_usage_substitute class_system configuration_design configuration_effectivity configured_effectivity_assignment document document_file draughting_model drawing_revision executed_action general_property make_from_usage_option material_designation mechanical_design_geometric_presentation_representation organizational_project presentation_area product product_concept product_concept_feature product_concept_feature_category product_definition product_definition_formation product_definition_relationship product_definition_usage property_definition resource_property shape_representation versioned_action_request"/>
      </type>
      <type name="set_inner_area_boundary">
         <aggregate lower="1" type="SET" upper="?"/>
         <typename name="bounded_primitive_2d"/>
      </type>
      <type name="set_of_reversible_topology_item">
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="reversible_topology_item"/>
      </type>
      <type name="set_representation_item">
         <aggregate lower="1" type="SET" upper="?"/>
         <typename name="representation_item"/>
      </type>
      <type name="shading_curve_method">
         <enumeration items="constant_colour linear_colour"/>
      </type>
      <type name="shading_surface_method">
         <enumeration items="constant_shading colour_shading dot_shading normal_shading"/>
      </type>
      <type name="shape_data_quality_assessment_specification_select">
         <select selectitems="shape_data_quality_assessment_by_logical_test shape_data_quality_assessment_by_numerical_test"/>
      </type>
      <type name="shape_data_quality_value_limit_type_select">
         <select selectitems="shape_data_quality_value_range shape_data_quality_value_limit"/>
      </type>
      <type name="shape_definition">
         <select selectitems="product_definition_shape shape_aspect shape_aspect_relationship"/>
      </type>
      <type name="shape_dimension_representation_item">
         <select selectitems="compound_representation_item descriptive_representation_item measure_representation_item placement"/>
      </type>
      <type name="shape_model">
         <select selectitems="constructive_geometry_representation shape_representation"/>
      </type>
      <type name="shape_representation_item">
         <select selectitems="geometric_representation_item topological_representation_item"/>
      </type>
      <type name="shape_representation_with_parameters_items">
         <select selectitems="descriptive_representation_item direction measure_representation_item placement"/>
      </type>
      <type name="shell">
         <select selectitems="vertex_shell wire_shell open_shell closed_shell"/>
      </type>
      <type name="si_prefix">
         <enumeration items="exa peta tera giga mega kilo hecto deca deci centi milli micro nano pico femto atto"/>
      </type>
      <type name="si_unit_name">
         <enumeration items="metre gram second ampere kelvin mole candela radian steradian hertz newton pascal joule watt coulomb volt farad ohm siemens weber tesla henry degree_celsius lumen lux becquerel gray sievert"/>
      </type>
      <type name="simple_datum_reference_modifier">
         <enumeration items="any_cross_section any_longitudinal_section basic contacting_feature degree_of_freedom_constraint_u degree_of_freedom_constraint_v degree_of_freedom_constraint_w degree_of_freedom_constraint_x degree_of_freedom_constraint_y degree_of_freedom_constraint_z distance_variable free_state least_material_requirement line major_diameter maximum_material_requirement minor_diameter orientation pitch_diameter plane point translation"/>
      </type>
      <type name="size_select">
         <select selectitems="positive_length_measure measure_with_unit descriptive_measure"/>
      </type>
      <type name="sketch_basis_select">
         <select selectitems="planar_curve_select curve_bounded_surface face_surface"/>
      </type>
      <type name="sketch_element_select">
         <select selectitems="curve point"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF( SELF ) )" label="wr1"/>
      </type>
      <type name="sketch_type_select">
         <select selectitems="neutral_sketch_representation positioned_sketch subsketch"/>
      </type>
      <type name="solid_angle_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="source">
         <enumeration items="made bought not_known"/>
      </type>
      <type name="source_item">
         <select selectitems="identifier message"/>
      </type>
      <type name="space_constraint_type">
         <enumeration items="sc_equal sc_subspace sc_member"/>
      </type>
      <type name="spatial_rotation">
         <select selectitems="ypr_rotation rotation_about_direction"/>
      </type>
      <type name="spherical_pair_select">
         <select selectitems="spherical_pair spherical_pair_with_pin"/>
      </type>
      <type name="start_request_item">
         <select selectitems="product_definition_formation"/>
      </type>
      <type name="statistical_value_type">
         <enumeration items="number_of_inspected_instances number_of_quality_defects_detected"/>
      </type>
      <type name="string_representation_item_select">
         <select selectitems="descriptive_representation_item included_text_block structured_text_composition"/>
      </type>
      <type name="style_context_select">
         <select selectitems="group presentation_layer_assignment presentation_set representation representation_item representation_relationship"/>
      </type>
      <type name="styled_item_target">
         <select selectitems="geometric_representation_item mapped_item representation topological_representation_item"/>
      </type>
      <type name="summary_report_type">
         <enumeration items="unspecified conclusion_only number_of_quality_defects number_of_inspections_and_conclusion full_statistics"/>
      </type>
      <type name="supported_item">
         <select selectitems="action_directive action action_method"/>
      </type>
      <type name="surface_boundary_type">
         <enumeration items="u_parameter_min v_parameter_min u_parameter_max v_parameter_max"/>
      </type>
      <type name="surface_model">
         <select selectitems="face_based_surface_model shell_based_surface_model"/>
      </type>
      <type name="surface_or_solid_model">
         <select selectitems="surface_model solid_model"/>
      </type>
      <type name="surface_side">
         <enumeration items="positive negative both"/>
      </type>
      <type name="surface_side_style_select">
         <select selectitems="surface_side_style pre_defined_surface_side_style"/>
      </type>
      <type name="surface_style_element_select">
         <select selectitems="surface_style_fill_area surface_style_boundary surface_style_silhouette surface_style_segmentation_curve surface_style_control_grid surface_style_parameter_line surface_style_rendering"/>
      </type>
      <type name="swept_surface_or_solid">
         <select selectitems="swept_surface swept_face_solid swept_area_solid"/>
      </type>
      <type name="symbol_style_select">
         <select selectitems="symbol_colour"/>
      </type>
      <type name="tangent_contact_type">
         <enumeration items="point_contact curve_contact surface_contact"/>
      </type>
      <type name="tessellated_edge_or_vertex">
         <select selectitems="tessellated_edge tessellated_vertex"/>
      </type>
      <type name="text">
         <builtintype type="STRING"/>
      </type>
      <type name="text_alignment">
         <typename name="label"/>
      </type>
      <type name="text_delineation">
         <typename name="label"/>
      </type>
      <type name="text_or_character">
         <select selectitems="annotation_text annotation_text_character defined_character_glyph composite_text text_literal"/>
      </type>
      <type name="text_path">
         <enumeration items="left right up down"/>
      </type>
      <type name="text_string_representation_item">
         <select selectitems="text_literal annotation_text annotation_text_character defined_character_glyph composite_text axis2_placement"/>
      </type>
      <type name="thermodynamic_temperature_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="time_interval_item">
         <select selectitems="action action_directive action_method action_property action_relationship action_request_solution alternate_product_relationship applied_action_assignment applied_classification_assignment applied_person_and_organization_assignment approval_status assembly_component_usage_substitute certification class class_system configuration_design configuration_effectivity configuration_item configured_effectivity_assignment contract document_file draughting_model drawing_revision executed_action general_property material_designation mechanical_design_geometric_presentation_representation organization_relationship organizational_project person_and_organization presentation_area product product_concept product_concept_feature product_concept_feature_association product_concept_feature_category product_concept_feature_category_usage product_definition product_definition_formation product_definition_formation_relationship product_definition_relationship product_definition_substitute property_definition requirement_for_action_resource resource_property security_classification security_classification_level shape_representation time_interval_based_effectivity versioned_action_request"/>
      </type>
      <type name="time_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="tolerance_method_definition">
         <select selectitems="limits_and_fits tolerance_value"/>
      </type>
      <type name="tolerance_zone_target">
         <select selectitems="dimensional_location dimensional_size geometric_tolerance general_datum_reference"/>
      </type>
      <type name="transformation">
         <select selectitems="item_defined_transformation functionally_defined_transformation"/>
      </type>
      <type name="transition_code">
         <enumeration items="discontinuous continuous cont_same_gradient cont_same_gradient_same_curvature"/>
      </type>
      <type name="trim_condition_select">
         <select selectitems="length_measure plane_angle_measure generalized_surface_select solid_model"/>
      </type>
      <type name="trim_intent">
         <enumeration items="blind offset through_all unspecified up_to_next"/>
      </type>
      <type name="trimming_preference">
         <enumeration items="cartesian parameter unspecified"/>
      </type>
      <type name="trimming_select">
         <select selectitems="cartesian_point parameter_value"/>
      </type>
      <type name="tuple_space">
         <select selectitems="product_space extended_tuple_space"/>
      </type>
      <type name="u_direction_count">
         <builtintype type="INTEGER"/>
         <where expression="( SELF &gt; 1 )" label="wr1"/>
      </type>
      <type name="u_or_v_parameter">
         <enumeration items="u_parameter v_parameter"/>
      </type>
      <type name="unit">
         <select selectitems="derived_unit named_unit"/>
      </type>
      <type name="used_quality_representation_select">
         <select selectitems="data_quality_criteria_representation data_quality_inspection_result_representation"/>
      </type>
      <type name="v_direction_count">
         <builtintype type="INTEGER"/>
         <where expression="( SELF &gt; 1 )" label="wr1"/>
      </type>
      <type name="value_format_type">
         <typename name="identifier"/>
         <where expression="( LENGTH( SELF ) &lt;= 80 )" label="wr1"/>
      </type>
      <type name="value_qualifier">
         <select selectitems="precision_qualifier type_qualifier uncertainty_qualifier value_format_type_qualifier"/>
      </type>
      <type name="vector_or_direction">
         <select selectitems="direction vector"/>
      </type>
      <type name="velocity_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="volume_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="week_in_year_number">
         <builtintype type="INTEGER"/>
         <where expression="( ( 1 &lt;= SELF ) AND ( SELF &lt;= 53 ) )" label="wr1"/>
      </type>
      <type name="work_item">
         <select selectitems="product_definition_formation"/>
      </type>
      <type name="year_number">
         <builtintype type="INTEGER"/>
         <where expression="( SELF &gt; 1581 )" label="wr1"/>
      </type>
      <type name="ypr_enumeration">
         <enumeration items="yaw pitch roll"/>
      </type>
      <type name="ypr_rotation">
         <aggregate lower="ypr_index( yaw )" type="ARRAY" upper="ypr_index( roll )"/>
         <typename name="plane_angle_measure"/>
      </type>
      <type name="zero_or_one">
         <typename name="nonnegative_integer"/>
         <where expression="( ( SELF = 0 ) OR ( SELF = 1 ) )" label="in_range"/>
      </type>
      <entity name="abrupt_change_of_surface_normal" supertypes="geometry_with_local_irregularity">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="small_vector_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="test_point_distance_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE'] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'POINT_ON_SURFACE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_SURFACE'] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="abs_function" supertypes="unary_function_call"/>
      <entity name="absorbed_dose_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ABSORBED_DOSE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="absorbed_dose_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.gray ) )" label="wr1"/>
      </entity>
      <entity name="abstract_variable" supertypes="property_definition property_definition_representation representation representation_item"/>
      <entity name="abstracted_expression_function" supertypes="maths_function quantifier_expression">
         <derived expression="remove_first( SELF\&#10;                                                multiple_arity_generic_expression.operands )" name="variables">
            <aggregate lower="1" type="LIST" unique="YES" upper="?"/>
            <typename name="generic_variable"/>
            <redeclaration entity-ref="quantifier_expression"/>
         </derived>
         <derived expression="SELF\multiple_arity_generic_expression.operands[1]" name="expr">
            <typename name="generic_expression"/>
         </derived>
         <where expression="( SIZEOF( QUERY ( operand &lt;* SELF\multiple_arity_generic_expression.operands | ( NOT has_values_space( operand ) ) ) ) &#10;               = 0 )" label="wr1"/>
      </entity>
      <entity name="acceleration_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ACCELERATION_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="acceleration_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensional_exponents( 1, 0, -2, 0, 0, 0, 0 ) )" label="wr1"/>
      </entity>
      <entity name="acos_function" supertypes="unary_function_call"/>
      <entity name="across_port_variable" supertypes="port_variable"/>
      <entity name="action">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="chosen_method">
            <typename name="action_method"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ID_ATTRIBUTE.'&#10;               + 'IDENTIFIED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="action_assignment">
         <explicit name="assigned_action">
            <typename name="action"/>
         </explicit>
         <derived expression="get_role( SELF )" name="role">
            <typename name="object_role"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ROLE_ASSOCIATION.'&#10;               + 'ITEM_WITH_ROLE'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="action_directive">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="analysis">
            <typename name="text"/>
         </explicit>
         <explicit name="comment">
            <typename name="text"/>
         </explicit>
         <explicit name="requests">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="versioned_action_request"/>
         </explicit>
      </entity>
      <entity name="action_method">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="consequence">
            <typename name="text"/>
         </explicit>
         <explicit name="purpose">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="action_method_assignment">
         <explicit name="assigned_action_method">
            <typename name="action_method"/>
         </explicit>
         <explicit name="role">
            <typename name="action_method_role"/>
         </explicit>
      </entity>
      <entity name="action_method_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_method">
            <typename name="action_method"/>
         </explicit>
         <explicit name="related_method">
            <typename name="action_method"/>
         </explicit>
      </entity>
      <entity name="action_method_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="action_property">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="definition">
            <typename name="characterized_action_definition"/>
         </explicit>
      </entity>
      <entity name="action_property_representation">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="property">
            <typename name="action_property"/>
         </explicit>
         <explicit name="representation">
            <typename name="representation"/>
         </explicit>
      </entity>
      <entity name="action_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_action">
            <typename name="action"/>
         </explicit>
         <explicit name="related_action">
            <typename name="action"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="action_request_assignment">
         <explicit name="assigned_action_request">
            <typename name="versioned_action_request"/>
         </explicit>
         <derived expression="get_role( SELF )" name="role">
            <typename name="object_role"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ROLE_ASSOCIATION.'&#10;               + 'ITEM_WITH_ROLE'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="action_request_solution">
         <explicit name="method">
            <typename name="action_method"/>
         </explicit>
         <explicit name="request">
            <typename name="versioned_action_request"/>
         </explicit>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <derived expression="get_name_value( SELF )" name="name">
            <typename name="label"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.'&#10;               + 'NAMED_ITEM'  ) ) &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="action_request_status">
         <explicit name="status">
            <typename name="label"/>
         </explicit>
         <explicit name="assigned_request">
            <typename name="versioned_action_request"/>
         </explicit>
      </entity>
      <entity name="action_resource">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="usage">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="supported_item"/>
         </explicit>
         <explicit name="kind">
            <typename name="action_resource_type"/>
         </explicit>
      </entity>
      <entity name="action_resource_requirement">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="kind">
            <typename name="resource_requirement_type"/>
         </explicit>
         <explicit name="operations">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="characterized_action_definition"/>
         </explicit>
      </entity>
      <entity name="action_resource_type">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="action_status">
         <explicit name="status">
            <typename name="label"/>
         </explicit>
         <explicit name="assigned_action">
            <typename name="executed_action"/>
         </explicit>
      </entity>
      <entity name="actuated_kinematic_pair" supertypes="kinematic_pair">
         <explicit name="t_x" optional="YES">
            <typename name="actuated_direction"/>
         </explicit>
         <explicit name="t_y" optional="YES">
            <typename name="actuated_direction"/>
         </explicit>
         <explicit name="t_z" optional="YES">
            <typename name="actuated_direction"/>
         </explicit>
         <explicit name="r_x" optional="YES">
            <typename name="actuated_direction"/>
         </explicit>
         <explicit name="r_y" optional="YES">
            <typename name="actuated_direction"/>
         </explicit>
         <explicit name="r_z" optional="YES">
            <typename name="actuated_direction"/>
         </explicit>
      </entity>
      <entity name="add_element" supertypes="change_element"/>
      <entity name="additive_laminate_text_component" supertypes="generic_laminate_text_component"/>
      <entity name="address">
         <explicit name="internal_location" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="street_number" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="street" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="postal_box" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="town" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="region" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="postal_code" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="country" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="facsimile_number" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="telephone_number" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="electronic_mail_address" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="telex_number" optional="YES">
            <typename name="label"/>
         </explicit>
         <derived expression="get_name_value( SELF )" name="name">
            <typename name="label"/>
         </derived>
         <derived expression="get_id_value( SELF )" name="url">
            <typename name="identifier"/>
         </derived>
         <where expression="( EXISTS( internal_location ) OR EXISTS( street_number ) OR EXISTS( street ) OR EXISTS( postal_box ) OR EXISTS( town ) &#10;               OR EXISTS( region ) OR EXISTS( postal_code ) OR EXISTS( country ) OR EXISTS( facsimile_number ) OR EXISTS( &#10;               telephone_number ) OR EXISTS( electronic_mail_address ) OR EXISTS( telex_number ) )" label="wr1"/>
      </entity>
      <entity name="advanced_brep_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACETED_BREP' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MANIFOLD_SOLID_BREP' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'] * &#10;               TYPEOF( it ) ) = 1 ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( &#10;               NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( SIZEOF( QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces | &#10;               ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_FACE' IN TYPEOF( fcs ) ) ) ) ) &#10;               = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_CLOSED_SHELL'  IN TYPEOF( msb\&#10;               manifold_solid_brep.outer ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( brv &lt;* QUERY ( it &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'BREP_WITH_VOIDS'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* brv\brep_with_voids.voids | csh\&#10;               oriented_closed_shell.orientation ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'ADVANCED_BREP_SHAPE_REPRESENTATION'  IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) ) ) ) =&#10;               0 )" label="wr6"/>
      </entity>
      <entity name="advanced_face" supertypes="face_surface">
         <where expression="( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELEMENTARY_SURFACE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_SURFACE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SWEPT_SURFACE' ] * TYPEOF( face_geometry ) ) &#10;                = 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( NOT ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe\oriented_edge.&#10;                edge_element ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE' ] * TYPEOF( oe.edge_element\&#10;                edge_curve.edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( NOT ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe\edge.edge_start ) ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT' IN TYPEOF( oe\edge.&#10;                edge_start\vertex_point.vertex_geometry ) ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe\edge.edge_end ) ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT' IN TYPEOF( oe\edge.&#10;                edge_end\vertex_point.vertex_geometry ) ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_PATH'  IN TYPEOF( elp_fbnds.bound ) ) ) ) &#10;                = 0 )" label="wr5"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SWEPT_SURFACE' IN TYPEOF( face_geometry ) ) ) &#10;                OR ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE' ] * TYPEOF( face_geometry\&#10;                swept_surface.swept_curve ) ) = 1 ) )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( vlp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_LOOP'  IN TYPEOF( bnds.bound ) ) ) | &#10;                ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT' IN TYPEOF( vlp_fbnds\&#10;                face_bound.bound\vertex_loop.loop_vertex ) ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT'  IN TYPEOF( vlp_fbnds\&#10;                face_bound.bound\vertex_loop.loop_vertex\vertex_point.vertex_geometry ) ) ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( bnd &lt;* bounds | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_LOOP' ] * TYPEOF( bnd.bound ) ) = 1 ) ) ) ) &#10;                = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE'  IN TYPEOF( oe\oriented_edge.&#10;                edge_element\edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( QUERY ( sc_ag &lt;* oe.edge_element\edge_curve.&#10;                edge_geometry\surface_curve.associated_geometry | ( NOT ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE'  IN TYPEOF( sc_ag ) ) ) ) ) = 0 ) ) ) ) ) &#10;                = 0 ) ) ) ) = 0 )" label="wr9"/>
         <where expression="( ( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SWEPT_SURFACE' IN TYPEOF( &#10;                face_geometry ) ) ) OR ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE' IN &#10;                TYPEOF( face_geometry\swept_surface.swept_curve ) ) ) OR ( SIZEOF( face_geometry\swept_surface.swept_curve\&#10;                polyline.points ) &gt;= 3 ) ) AND ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE'  IN TYPEOF( oe\oriented_edge.&#10;                edge_element\edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( oe\oriented_edge.edge_element\edge_curve.&#10;                edge_geometry\polyline.points ) &gt;= 3 ) ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr10"/>
      </entity>
      <entity name="agc_with_dimension" supertypes="angle_geometric_constraint">
         <explicit name="angle_value">
            <typename name="plane_angle_measure"/>
         </explicit>
      </entity>
      <entity name="aggregate_connectivity_requirement" supertypes="applied_group_assignment product_definition"/>
      <entity name="all_around_shape_aspect" supertypes="continuous_shape_aspect"/>
      <entity name="allocated_passage_minimum_annular_ring" supertypes="characterized_object"/>
      <entity abstract.supertype="YES" name="altered_package_terminal" super.expression="shape_formed_terminal ANDOR surface_prepped_terminal ANDOR length_trimmed_terminal" supertypes="package_terminal"/>
      <entity name="alternate_product_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="definition" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="alternate">
            <typename name="product"/>
         </explicit>
         <explicit name="base">
            <typename name="product"/>
         </explicit>
         <explicit name="basis">
            <typename name="text"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="alternate"/>
            <unique.attribute attribute="base"/>
         </unique>
         <where expression="( alternate :&lt;&gt;: base )" label="wr1"/>
      </entity>
      <entity name="amount_of_substance_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AMOUNT_OF_SUBSTANCE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="amount_of_substance_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 1 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="analog_analytical_model_port" supertypes="analytical_model_port"/>
      <entity name="analytical_model_definition" supertypes="product_definition"/>
      <entity name="analytical_model_make_from_relationship" supertypes="product_definition_relationship">
         <explicit name="relating_product_definition">
            <typename name="analytical_model_definition"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </explicit>
         <explicit name="related_product_definition">
            <typename name="analytical_model_definition"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="relating_product_definition"/>
            <unique.attribute attribute="related_product_definition"/>
         </unique>
      </entity>
      <entity name="analytical_model_parameter" supertypes="property_definition"/>
      <entity name="analytical_model_port" supertypes="property_definition property_definition_representation representation">
         <derived expression="SELF" name="definition">
            <typename name="property_definition"/>
            <redeclaration entity-ref="property_definition_representation"/>
         </derived>
         <derived expression="SELF" name="used_representation">
            <typename name="representation"/>
            <redeclaration entity-ref="property_definition_representation"/>
         </derived>
      </entity>
      <entity name="analytical_model_port_assignment" supertypes="property_definition_representation representation_relationship">
         <explicit name="used_representation">
            <typename name="analytical_model_port"/>
            <redeclaration entity-ref="property_definition_representation"/>
         </explicit>
         <explicit name="rep_1">
            <typename name="analytical_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <derived expression="SELF\property_definition_representation.&#10;                                                 used_representation" name="rep_2">
            <typename name="analytical_model_port"/>
            <redeclaration entity-ref="representation_relationship"/>
         </derived>
      </entity>
      <entity name="analytical_model_scalar_port" supertypes="analytical_model_vector_port"/>
      <entity name="analytical_model_vector_port" supertypes="analytical_model_port compound_representation_item"/>
      <entity name="analytical_representation" supertypes="representation">
         <unique label="ur1">
            <unique.attribute attribute="SELF\representation.name"/>
         </unique>
      </entity>
      <entity name="and_expression" supertypes="multiple_arity_boolean_expression"/>
      <entity name="angle_assembly_constraint_with_dimension" supertypes="binary_assembly_constraint agc_with_dimension"/>
      <entity name="angle_direction_reference" supertypes="representation_item_relationship geometric_representation_item">
         <explicit name="relating_representation_item">
            <typename name="orientation_basis_select"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <explicit name="related_representation_item">
            <typename name="angle_direction_reference_select"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_PATH' IN TYPEOF( &#10;               related_representation_item ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MIN_AND_MAJOR_PLY_ORIENTATION_BASIS'  IN TYPEOF( relating_representation_item ) ) ) OR ( ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_PATH'  IN TYPEOF( &#10;               related_representation_item ) ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'AXIS2_PLACEMENT_3D'  IN TYPEOF( relating_representation_item ) ) ) )" label="wr1"/>
      </entity>
      <entity name="angle_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="linear_geometry_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="1"/>
            <typename name="linear_geometry_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <where expression="( ( SIZEOF( SELF\explicit_constraint.reference_elements ) = 1 ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AGC_WITH_DIMENSION'  IN TYPEOF( SELF ) ) AND &#10;               ( SIZEOF( SELF\explicit_constraint.constrained_elements ) = 2 ) ) )" label="wr1"/>
      </entity>
      <entity name="angular_dimension" supertypes="dimension_curve_directed_callout"/>
      <entity name="angular_location" supertypes="dimensional_location">
         <explicit name="angle_selection">
            <typename name="angle_relator"/>
         </explicit>
      </entity>
      <entity name="angular_size" supertypes="dimensional_size">
         <explicit name="angle_selection">
            <typename name="angle_relator"/>
         </explicit>
      </entity>
      <entity name="angularity_tolerance" supertypes="geometric_tolerance_with_datum_reference"/>
      <entity name="annotation_curve_occurrence" super.expression="ONEOF (dimension_curve, leader_curve, projection_curve)" supertypes="annotation_occurrence">
         <explicit name="item">
            <typename name="curve_or_curve_set"/>
            <redeclaration entity-ref="styled_item"/>
         </explicit>
      </entity>
      <entity name="annotation_fill_area" supertypes="geometric_representation_item">
         <explicit name="boundaries">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="curve"/>
         </explicit>
         <where expression="( ( SELF\geometric_representation_item.dim = 3 ) OR ( SIZEOF( QUERY ( curve &lt;* SELF.boundaries | ( NOT ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCLE'  IN TYPEOF( curve ) ) OR ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELLIPSE'  IN TYPEOF( curve ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE'  IN TYPEOF( curve ) ) AND ( &#10;               curve\b_spline_curve.closed_curve = TRUE ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_CURVE'  IN TYPEOF( curve ) ) AND ( &#10;               curve\composite_curve.closed_curve = TRUE ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE'  IN TYPEOF( curve ) ) AND ( curve\&#10;               polyline.points[LOINDEX( curve\polyline.points )] = curve\polyline.points[HIINDEX( curve\polyline.points )] ) ) ) ) ) ) &#10;               = 0 ) )" label="wr1"/>
      </entity>
      <entity name="annotation_fill_area_occurrence" supertypes="annotation_occurrence">
         <explicit name="fill_style_target">
            <typename name="point"/>
         </explicit>
         <explicit name="item">
            <typename name="annotation_fill_area"/>
            <redeclaration entity-ref="styled_item"/>
         </explicit>
      </entity>
      <entity name="annotation_occurrence" super.expression="ONEOF (annotation_curve_occurrence, annotation_fill_area_occurrence, annotation_text_occurrence, annotation_symbol_occurrence) ANDOR ONEOF (annotation_curve_occurrence, annotation_fill_area_occurrence, annotation_plane, annotation_symbol_occurrence, annotation_text_occurrence, tessellated_annotation_occurrence)" supertypes="styled_item">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF( SELF ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( reps &lt;* using_representations( SELF ) | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_REPRESENTATION_SELECT'  IN TYPEOF( &#10;               reps ) ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="annotation_occurrence_associativity" supertypes="annotation_occurrence_relationship">
         <where expression="( SIZEOF( TYPEOF( SELF.related_annotation_occurrence ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_FILL_AREA_OCCURRENCE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROJECTION_CURVE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LEADER_CURVE' ] ) = 1 )" label="wr1"/>
      </entity>
      <entity name="annotation_occurrence_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_annotation_occurrence">
            <typename name="annotation_occurrence"/>
         </explicit>
         <explicit name="related_annotation_occurrence">
            <typename name="annotation_occurrence"/>
         </explicit>
      </entity>
      <entity name="annotation_plane" supertypes="annotation_occurrence geometric_representation_item">
         <explicit name="elements" optional="YES">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="annotation_plane_element"/>
         </explicit>
         <explicit name="item">
            <typename name="plane_or_planar_box"/>
            <redeclaration entity-ref="styled_item"/>
         </explicit>
         <where expression="( SELF\geometric_representation_item.dim = 3 )" label="wr1"/>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'PLANAR_BOX' ) IN TYPEOF( SELF\&#10;               styled_item.item ) ) ) OR ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'AXIS2_PLACEMENT_3D'  ) IN TYPEOF( SELF\styled_item.item\planar_box.placement ) ) )" label="wr2"/>
         <where expression="( ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'PLANAR_BOX' ) IN TYPEOF( SELF\&#10;               styled_item.item ) ) AND ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'CURVE_STYLE' ) &#10;               IN TYPEOF( SELF\styled_item.styles[1]\presentation_style_assignment.styles[1] ) ) ) OR ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PLANE' ) IN TYPEOF( SELF\styled_item.&#10;               item ) ) AND ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'FILL_AREA_STYLE' ) IN &#10;               TYPEOF( SELF\styled_item.styles[1]\presentation_style_assignment.styles[1] ) ) ) )" label="wr3"/>
         <where expression="( ( SIZEOF( SELF\styled_item.styles ) = 1 ) AND ( SIZEOF( SELF\styled_item.styles[1]\presentation_style_assignment.&#10;               styles ) = 1 ) )" label="wr4"/>
      </entity>
      <entity name="annotation_subfigure_occurrence" supertypes="annotation_symbol_occurrence">
         <where expression="( SIZEOF( QUERY ( sty &lt;* SELF.styles | ( NOT ( SIZEOF( sty.styles ) = 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( sty &lt;* SELF.styles | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'NULL_STYLE'  IN TYPEOF( sty.styles[1] ) ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_SYMBOL' IN TYPEOF( SELF.item ) )" label="wr3"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DRAUGHTING_SUBFIGURE_REPRESENTATION' IN TYPEOF( &#10;               SELF.item\mapped_item.mapping_source.mapped_representation ) )" label="wr4"/>
      </entity>
      <entity name="annotation_symbol" supertypes="mapped_item">
         <explicit name="mapping_source">
            <typename name="symbol_representation_map"/>
            <redeclaration entity-ref="mapped_item"/>
         </explicit>
         <explicit name="mapping_target">
            <typename name="symbol_target"/>
            <redeclaration entity-ref="mapped_item"/>
         </explicit>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF( SELF ) )" label="wr1"/>
      </entity>
      <entity name="annotation_symbol_occurrence" supertypes="annotation_occurrence">
         <explicit name="item">
            <typename name="annotation_symbol_occurrence_item"/>
            <redeclaration entity-ref="styled_item"/>
         </explicit>
      </entity>
      <entity name="annotation_text" supertypes="mapped_item">
         <explicit name="mapping_target">
            <typename name="axis2_placement"/>
            <redeclaration entity-ref="mapped_item"/>
         </explicit>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEXT_STRING_REPRESENTATION' IN TYPEOF( SELF\&#10;               mapped_item.mapping_source.mapped_representation ) )" label="wr1"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF( SELF ) )" label="wr2"/>
      </entity>
      <entity name="annotation_text_character" supertypes="mapped_item">
         <explicit name="alignment">
            <typename name="text_alignment"/>
         </explicit>
         <explicit name="mapping_target">
            <typename name="axis2_placement"/>
            <redeclaration entity-ref="mapped_item"/>
         </explicit>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CHARACTER_GLYPH_SYMBOL' IN TYPEOF( SELF\&#10;               mapped_item.mapping_source.mapped_representation ) )" label="wr1"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF( SELF ) )" label="wr2"/>
      </entity>
      <entity name="annotation_text_occurrence" supertypes="annotation_occurrence">
         <explicit name="item">
            <typename name="annotation_text_occurrence_item"/>
            <redeclaration entity-ref="styled_item"/>
         </explicit>
      </entity>
      <entity name="apex" supertypes="derived_shape_aspect"/>
      <entity name="application_context">
         <explicit name="application">
            <typename name="label"/>
         </explicit>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <inverse attribute="frame_of_reference" entity="application_context_element" name="context_elements">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ID_ATTRIBUTE.'&#10;               + 'IDENTIFIED_ITEM'  ) ) &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="application_context_element" super.expression="ONEOF (product_concept_context, product_context, product_definition_context)">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="frame_of_reference">
            <typename name="application_context"/>
         </explicit>
      </entity>
      <entity name="application_defined_function" supertypes="maths_function">
         <explicit name="explicit_domain">
            <typename name="tuple_space"/>
         </explicit>
         <explicit name="explicit_range">
            <typename name="tuple_space"/>
         </explicit>
         <explicit name="parameters">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="maths_value"/>
         </explicit>
         <where expression="expression_is_constant( explicit_domain )" label="wr1"/>
         <where expression="expression_is_constant( explicit_range )" label="wr2"/>
      </entity>
      <entity name="application_protocol_definition">
         <explicit name="status">
            <typename name="label"/>
         </explicit>
         <explicit name="application_interpreted_model_schema_name">
            <typename name="label"/>
         </explicit>
         <explicit name="application_protocol_year">
            <typename name="year_number"/>
         </explicit>
         <explicit name="application">
            <typename name="application_context"/>
         </explicit>
      </entity>
      <entity name="applied_action_assignment" supertypes="action_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="action_items"/>
         </explicit>
      </entity>
      <entity name="applied_action_method_assignment" supertypes="action_method_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="action_method_items"/>
         </explicit>
      </entity>
      <entity name="applied_action_request_assignment" supertypes="action_request_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="action_request_item"/>
         </explicit>
      </entity>
      <entity name="applied_approval_assignment" supertypes="approval_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="approval_item"/>
         </explicit>
      </entity>
      <entity name="applied_area" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( SELF.&#10;               of_shape ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( ( 2 &lt;= SIZEOF( impl_rep.used_representation.items ) ) AND ( &#10;               SIZEOF( impl_rep.used_representation.items ) &lt;= 3 ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( srwp_i &lt;* pdr.used_representation.items | ( NOT ( srwp_i.&#10;               name IN [ 'orientation', 'effective length', 'maximum length'] ) ) ) ) &gt; 0 ) ) ) ) = 0 ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'effective length' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) &lt;= 1 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'maximum length' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name = &#10;               'orientation'  ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
      </entity>
      <entity name="applied_attribute_classification_assignment" supertypes="attribute_classification_assignment">
         <explicit name="assigned_class">
            <typename name="class"/>
            <redeclaration entity-ref="attribute_classification_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="attribute_classification_item"/>
         </explicit>
      </entity>
      <entity name="applied_certification_assignment" supertypes="certification_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="certification_item"/>
         </explicit>
      </entity>
      <entity name="applied_classification_assignment" supertypes="classification_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="classification_item"/>
         </explicit>
      </entity>
      <entity name="applied_contract_assignment" supertypes="contract_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="contract_item"/>
         </explicit>
      </entity>
      <entity name="applied_date_and_time_assignment" supertypes="date_and_time_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="date_and_time_item"/>
         </explicit>
      </entity>
      <entity name="applied_date_assignment" supertypes="date_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="date_item"/>
         </explicit>
      </entity>
      <entity name="applied_document_reference" supertypes="document_reference">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="document_reference_item"/>
         </explicit>
      </entity>
      <entity name="applied_document_usage_constraint_assignment" supertypes="document_usage_constraint_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="document_reference_item"/>
         </explicit>
      </entity>
      <entity name="applied_effectivity_assignment" supertypes="effectivity_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="effectivity_item"/>
         </explicit>
      </entity>
      <entity name="applied_event_occurrence_assignment" supertypes="event_occurrence_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="event_occurrence_item"/>
         </explicit>
      </entity>
      <entity name="applied_external_identification_assignment" supertypes="external_identification_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="external_identification_item"/>
         </explicit>
      </entity>
      <entity name="applied_group_assignment" supertypes="group_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="groupable_item"/>
         </explicit>
      </entity>
      <entity name="applied_identification_assignment" supertypes="identification_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="identification_item"/>
         </explicit>
      </entity>
      <entity name="applied_ineffectivity_assignment" supertypes="effectivity_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="effectivity_item"/>
         </explicit>
         <where expression="( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LOT_EFFECTIVITY', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SERIAL_NUMBERED_EFFECTIVITY' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_EFFECTIVITY' ] * TYPEOF( &#10;               SELF.assigned_effectivity ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="applied_name_assignment" supertypes="name_assignment">
         <explicit name="item">
            <typename name="name_item"/>
         </explicit>
      </entity>
      <entity name="applied_organization_assignment" supertypes="organization_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="organization_item"/>
         </explicit>
      </entity>
      <entity name="applied_organizational_project_assignment" supertypes="organizational_project_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="project_item"/>
         </explicit>
      </entity>
      <entity name="applied_person_and_organization_assignment" supertypes="person_and_organization_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="person_and_organization_item"/>
         </explicit>
      </entity>
      <entity name="applied_presented_item" supertypes="presented_item">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="presented_item_select"/>
         </explicit>
      </entity>
      <entity name="applied_security_classification_assignment" supertypes="security_classification_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="security_classification_item"/>
         </explicit>
      </entity>
      <entity name="applied_time_interval_assignment" supertypes="time_interval_assignment">
         <explicit name="items">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="time_interval_item"/>
         </explicit>
      </entity>
      <entity name="applied_usage_right" supertypes="applied_action_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="ir_usage_item"/>
            <redeclaration entity-ref="applied_action_assignment"/>
         </explicit>
      </entity>
      <entity name="approval">
         <explicit name="status">
            <typename name="approval_status"/>
         </explicit>
         <explicit name="level">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="approval_assignment">
         <explicit name="assigned_approval">
            <typename name="approval"/>
         </explicit>
         <derived expression="get_role( SELF )" name="role">
            <typename name="object_role"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ROLE_ASSOCIATION.'&#10;               + 'ITEM_WITH_ROLE'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="approval_date_time">
         <explicit name="date_time">
            <typename name="date_time_select"/>
         </explicit>
         <explicit name="dated_approval">
            <typename name="approval"/>
         </explicit>
         <derived expression="get_role( SELF )" name="role">
            <typename name="object_role"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ROLE_ASSOCIATION.'&#10;               + 'ITEM_WITH_ROLE'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="approval_person_organization">
         <explicit name="person_organization">
            <typename name="person_organization_select"/>
         </explicit>
         <explicit name="authorized_approval">
            <typename name="approval"/>
         </explicit>
         <explicit name="role">
            <typename name="approval_role"/>
         </explicit>
      </entity>
      <entity name="approval_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_approval">
            <typename name="approval"/>
         </explicit>
         <explicit name="related_approval">
            <typename name="approval"/>
         </explicit>
      </entity>
      <entity name="approval_role">
         <explicit name="role">
            <typename name="label"/>
         </explicit>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="approval_status">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="area_component" super.expression="connected_area_component" supertypes="stratum_feature_template_component"/>
      <entity name="area_in_set">
         <explicit name="area">
            <typename name="presentation_area"/>
         </explicit>
         <explicit name="in_set">
            <typename name="presentation_set"/>
         </explicit>
      </entity>
      <entity name="area_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="area_qualified_layout_spacing_requirement" supertypes="layout_spacing_requirement"/>
      <entity name="area_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensional_exponents( 2, 0, 0, 0, 0, 0, 0 ) )" label="wr1"/>
      </entity>
      <entity name="area_with_outer_boundary" supertypes="half_space_2d">
         <explicit name="base_curve">
            <typename name="composite_curve"/>
            <redeclaration entity-ref="half_space_2d"/>
         </explicit>
         <where expression="( base_curve\composite_curve.closed_curve = TRUE )" label="wr1"/>
      </entity>
      <entity name="array_placement_group" super.expression="ONEOF (linear_array_placement_group_component, rectangular_array_placement_group_component) ANDOR ONEOF (laminate_text_string_component, linear_array_placement_group_component, rectangular_array_placement_group_component)" supertypes="assembly_group_component"/>
      <entity name="asin_function" supertypes="unary_function_call"/>
      <entity name="assembly_bond_definition" supertypes="shape_aspect">
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect.name"/>
         </unique>
      </entity>
      <entity name="assembly_component" super.expression="ONEOF (physical_component, laminate_component) ANDOR ONEOF (physical_component, printed_component, laminate_component)" supertypes="component_definition product_definition_shape">
         <derived expression="SELF" name="definition">
            <typename name="assembly_component"/>
            <redeclaration entity-ref="property_definition"/>
         </derived>
         <where expression="( NOT EXISTS( SELF\property_definition.description ) )" label="wr1"/>
      </entity>
      <entity name="assembly_component_usage" super.expression="quantified_assembly_component_usage ANDOR ONEOF (multi_level_reference_designator, next_assembly_usage_occurrence, promissory_usage_occurrence, specified_higher_usage_occurrence)" supertypes="product_definition_usage">
         <explicit name="reference_designator" optional="YES">
            <typename name="identifier"/>
         </explicit>
      </entity>
      <entity name="assembly_component_usage_substitute">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="definition" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="base">
            <typename name="assembly_component_usage"/>
         </explicit>
         <explicit name="substitute">
            <typename name="assembly_component_usage"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="base"/>
            <unique.attribute attribute="substitute"/>
         </unique>
         <where expression="( base.relating_product_definition :=: substitute.relating_product_definition )" label="wr1"/>
         <where expression="( base :&lt;&gt;: substitute )" label="wr2"/>
      </entity>
      <entity abstract.supertype="YES" name="assembly_geometric_constraint" super.expression="ONEOF (binary_assembly_constraint, fixed_constituent_assembly_constraint)" supertypes="explicit_constraint"/>
      <entity name="assembly_group_component" supertypes="assembly_component"/>
      <entity name="assembly_group_component_definition_placement_link" supertypes="product_definition product_definition_relationship">
         <explicit name="relating_product_definition">
            <typename name="assembly_component"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </explicit>
         <explicit name="related_product_definition">
            <typename name="assembly_component"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </explicit>
         <where expression="( SELF\product_definition_relationship.related_product_definition :&lt;&gt;: SELF\product_definition_relationship.&#10;               relating_product_definition )" label="wr1"/>
         <where expression="acyclic_product_definition_relationship( SELF, [SELF\product_definition_relationship.related_product_definition], &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'ASSEMBLY_GROUP_COMPONENT_DEFINITION_PLACEMENT_LINK'  )" label="wr2"/>
      </entity>
      <entity name="assembly_group_spacing_requirement" supertypes="predefined_requirement_view_definition"/>
      <entity name="assembly_item_number" supertypes="group applied_group_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="assembly_component_usage"/>
            <redeclaration entity-ref="applied_group_assignment"/>
         </explicit>
         <derived expression="SELF" name="assigned_group">
            <typename name="group"/>
            <redeclaration entity-ref="group_assignment"/>
         </derived>
      </entity>
      <entity name="assembly_joint" supertypes="component_feature_joint">
         <where expression="acyclic_shape_aspect_relationship( SELF, [SELF\shape_aspect_relationship.related_shape_aspect], &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'ASSEMBLY_JOINT' )" label="wr1"/>
      </entity>
      <entity name="assembly_module_component" supertypes="physical_component"/>
      <entity name="assembly_module_design_view" super.expression="ONEOF (layered_assembly_panel_design_view, layered_assembly_module_design_view)" supertypes="physical_unit"/>
      <entity name="assembly_module_interface_terminal" supertypes="assembly_module_terminal"/>
      <entity name="assembly_module_macro_component" supertypes="physical_component"/>
      <entity name="assembly_module_macro_component_join_terminal" supertypes="physical_component_terminal"/>
      <entity name="assembly_module_macro_terminal" supertypes="assembly_module_terminal"/>
      <entity name="assembly_module_terminal" super.expression="assembly_module_interface_terminal ANDOR ONEOF (assembly_module_interface_terminal, assembly_module_macro_terminal)" supertypes="shape_aspect"/>
      <entity name="assembly_module_usage_view" super.expression="layered_assembly_module_usage_view" supertypes="physical_unit"/>
      <entity name="assembly_shield_allocation" supertypes="electromagnetic_compatibility_requirement_allocation"/>
      <entity name="assembly_spacing_requirement" supertypes="predefined_requirement_view_definition"/>
      <entity name="assembly_to_part_connectivity_structure_allocation" supertypes="shape_aspect_relationship shape_aspect">
         <explicit name="related_shape_aspect">
            <typename name="physical_connectivity_element"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="relating_shape_aspect">
            <typename name="part_connected_terminals_element"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <derived expression="SELF\shape_aspect_relationship.related_shape_aspect" name="assembly_element">
            <typename name="physical_connectivity_element"/>
         </derived>
         <derived expression="SELF\shape_aspect_relationship.relating_shape_aspect" name="part_element">
            <typename name="part_connected_terminals_element"/>
         </derived>
      </entity>
      <entity name="assigned_requirement" supertypes="group_assignment">
         <explicit name="assigned_group">
            <typename name="requirement_assignment"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="product_definition"/>
         </explicit>
      </entity>
      <entity name="atan_function" supertypes="binary_function_call"/>
      <entity name="atom_based_literal" supertypes="generic_literal">
         <explicit name="lit_value">
            <typename name="atom_based_value"/>
         </explicit>
      </entity>
      <entity name="atomic_formula" supertypes="compound_representation_item"/>
      <entity name="attribute_assertion" supertypes="fact_type property_definition_representation representation"/>
      <entity abstract.supertype="YES" name="attribute_classification_assignment">
         <explicit name="assigned_class">
            <typename name="group"/>
         </explicit>
         <explicit name="attribute_name">
            <typename name="label"/>
         </explicit>
         <explicit name="role">
            <typename name="classification_role"/>
         </explicit>
      </entity>
      <entity name="attribute_language_assignment" supertypes="attribute_classification_assignment">
         <explicit name="assigned_class">
            <typename name="language"/>
            <redeclaration entity-ref="attribute_classification_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="attribute_language_item"/>
         </explicit>
         <where expression="( SELF\attribute_classification_assignment.role.name IN [ 'primary', 'translated'] )" label="wr1"/>
         <where expression="( SELF\attribute_classification_assignment.attribute_name &lt;&gt; '' )" label="wr2"/>
      </entity>
      <entity abstract.supertype="YES" name="attribute_value_assignment">
         <explicit name="attribute_name">
            <typename name="label"/>
         </explicit>
         <explicit name="attribute_value">
            <typename name="attribute_type"/>
         </explicit>
         <explicit name="role">
            <typename name="attribute_value_role"/>
         </explicit>
      </entity>
      <entity name="attribute_value_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="auxiliary_geometric_representation_item" supertypes="geometric_representation_item variational_representation_item"/>
      <entity name="axis1_placement" supertypes="placement">
         <explicit name="axis" optional="YES">
            <typename name="direction"/>
         </explicit>
         <derived expression="NVL( normalise( axis ), dummy_gri || direction( [0, 0, 1] ) )" name="z">
            <typename name="direction"/>
         </derived>
         <where expression="( SELF\geometric_representation_item.dim = 3 )" label="wr1"/>
      </entity>
      <entity name="axis2_placement_2d" supertypes="placement">
         <explicit name="ref_direction" optional="YES">
            <typename name="direction"/>
         </explicit>
         <derived expression="build_2axes( ref_direction )" name="p">
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="direction"/>
         </derived>
         <where expression="( SELF\geometric_representation_item.dim = 2 )" label="wr1"/>
      </entity>
      <entity name="axis2_placement_3d" supertypes="placement">
         <explicit name="axis" optional="YES">
            <typename name="direction"/>
         </explicit>
         <explicit name="ref_direction" optional="YES">
            <typename name="direction"/>
         </explicit>
         <derived expression="build_axes( axis, ref_direction )" name="p">
            <aggregate lower="3" type="LIST" upper="3"/>
            <typename name="direction"/>
         </derived>
         <where expression="( SELF\placement.location.dim = 3 )" label="wr1"/>
         <where expression="( ( NOT EXISTS( axis ) ) OR ( axis.dim = 3 ) )" label="wr2"/>
         <where expression="( ( NOT EXISTS( ref_direction ) ) OR ( ref_direction.dim = 3 ) )" label="wr3"/>
         <where expression="( ( NOT EXISTS( axis ) ) OR ( NOT EXISTS( ref_direction ) ) OR ( cross_product( axis, ref_direction ).magnitude &gt; 0 ) )" label="wr4"/>
      </entity>
      <entity name="axis_placement_2d_3d_mapping" supertypes="item_defined_transformation">
         <explicit name="transform_item_1">
            <typename name="axis2_placement_2d"/>
            <redeclaration entity-ref="item_defined_transformation"/>
         </explicit>
         <explicit name="transform_item_2">
            <typename name="axis2_placement_3d"/>
            <redeclaration entity-ref="item_defined_transformation"/>
         </explicit>
      </entity>
      <entity name="b_spline_basis" supertypes="maths_function generic_literal">
         <explicit name="degree">
            <typename name="nonnegative_integer"/>
         </explicit>
         <explicit name="repeated_knots">
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="REAL"/>
         </explicit>
         <derived expression="degree + 1" name="order">
            <typename name="positive_integer"/>
         </derived>
         <derived expression="SIZEOF( repeated_knots ) - order" name="num_basis">
            <typename name="positive_integer"/>
         </derived>
         <where expression="( num_basis &gt;= order )" label="wr1"/>
         <where expression="nondecreasing( repeated_knots )" label="wr2"/>
         <where expression="( repeated_knots[order] &lt; repeated_knots[num_basis + 1] )" label="wr3"/>
      </entity>
      <entity name="b_spline_curve" super.expression="ONEOF (uniform_curve, b_spline_curve_with_knots, quasi_uniform_curve, bezier_curve) ANDOR rational_b_spline_curve" supertypes="bounded_curve">
         <explicit name="degree">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="control_points_list">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="curve_form">
            <typename name="b_spline_curve_form"/>
         </explicit>
         <explicit name="closed_curve">
            <builtintype type="LOGICAL"/>
         </explicit>
         <explicit name="self_intersect">
            <builtintype type="LOGICAL"/>
         </explicit>
         <derived expression="SIZEOF( control_points_list ) - 1" name="upper_index_on_control_points">
            <builtintype type="INTEGER"/>
         </derived>
         <derived expression="list_to_array( &#10;                                         control_points_list, 0, upper_index_on_control_points )" name="control_points">
            <aggregate lower="0" type="ARRAY" upper="upper_index_on_control_points"/>
            <typename name="cartesian_point"/>
         </derived>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.UNIFORM_CURVE' IN TYPEOF( SELF ) ) OR ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.QUASI_UNIFORM_CURVE'  IN TYPEOF( SELF ) ) OR &#10;               ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BEZIER_CURVE' IN TYPEOF( SELF ) ) OR ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE_WITH_KNOTS'  IN TYPEOF( SELF ) ) )" label="wr1"/>
      </entity>
      <entity name="b_spline_curve_knot_locator" supertypes="founded_item">
         <explicit name="basis_curve">
            <typename name="b_spline_curve"/>
         </explicit>
         <explicit name="knot_index">
            <builtintype type="INTEGER"/>
         </explicit>
         <where expression="( SIZEOF( using_representations( SELF.basis_curve ) * relating_shape_representations_of_extreme_values( SELF ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="b_spline_curve_segment" supertypes="founded_item">
         <explicit name="basis_curve">
            <typename name="b_spline_curve"/>
         </explicit>
         <explicit name="start_knot_index">
            <builtintype type="INTEGER"/>
         </explicit>
         <where expression="( SIZEOF( using_representations( SELF.basis_curve ) * relating_shape_representations_of_extreme_values( SELF ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="b_spline_curve_with_knots" supertypes="b_spline_curve">
         <explicit name="knot_multiplicities">
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="knots">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="knot_spec">
            <typename name="knot_type"/>
         </explicit>
         <derived expression="SIZEOF( knots )" name="upper_index_on_knots">
            <builtintype type="INTEGER"/>
         </derived>
         <where expression="constraints_param_b_spline( degree, upper_index_on_knots, upper_index_on_control_points, knot_multiplicities, knots )" label="wr1"/>
         <where expression="( SIZEOF( knot_multiplicities ) = upper_index_on_knots )" label="wr2"/>
      </entity>
      <entity name="b_spline_function" supertypes="maths_function unary_generic_expression">
         <explicit name="operand">
            <typename name="maths_function"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
         <explicit name="basis">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="b_spline_basis"/>
         </explicit>
         <derived expression="SELF\unary_generic_expression.operand" name="coef">
            <typename name="maths_function"/>
         </derived>
         <where expression="function_is_table( coef )" label="wr1"/>
         <where expression="( ( space_dimension( coef.range ) = 1 ) AND ( number_superspace_of( factor1( coef.range ) ) = the_reals ) )" label="wr2"/>
         <where expression="( SIZEOF( basis ) &lt;= SIZEOF( shape_of_array( coef ) ) )" label="wr3"/>
         <where expression="compare_basis_and_coef( basis, coef )" label="wr4"/>
      </entity>
      <entity name="b_spline_surface" super.expression="ONEOF (b_spline_surface_with_knots, uniform_surface, quasi_uniform_surface, bezier_surface) ANDOR rational_b_spline_surface" supertypes="bounded_surface">
         <explicit name="u_degree">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="v_degree">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="control_points_list">
            <aggregate lower="2" type="LIST" upper="?"/>
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="surface_form">
            <typename name="b_spline_surface_form"/>
         </explicit>
         <explicit name="u_closed">
            <builtintype type="LOGICAL"/>
         </explicit>
         <explicit name="v_closed">
            <builtintype type="LOGICAL"/>
         </explicit>
         <explicit name="self_intersect">
            <builtintype type="LOGICAL"/>
         </explicit>
         <derived expression="SIZEOF( control_points_list ) - 1" name="u_upper">
            <builtintype type="INTEGER"/>
         </derived>
         <derived expression="SIZEOF( control_points_list[1] ) - 1" name="v_upper">
            <builtintype type="INTEGER"/>
         </derived>
         <derived expression="make_array_of_array( control_points_list, &#10;                          0, u_upper, 0, v_upper )" name="control_points">
            <aggregate lower="0" type="ARRAY" upper="u_upper"/>
            <aggregate lower="0" type="ARRAY" upper="v_upper"/>
            <typename name="cartesian_point"/>
         </derived>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.UNIFORM_SURFACE' IN TYPEOF( SELF ) ) OR ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.QUASI_UNIFORM_SURFACE'  IN TYPEOF( SELF ) ) OR&#10;               ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BEZIER_SURFACE' IN TYPEOF( SELF ) ) OR ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_SURFACE_WITH_KNOTS'  IN TYPEOF( SELF ) ) )" label="wr1"/>
      </entity>
      <entity name="b_spline_surface_knot_locator" supertypes="founded_item">
         <explicit name="basis_surface">
            <typename name="b_spline_surface"/>
         </explicit>
         <explicit name="knot_index">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="surface_parameter">
            <typename name="u_or_v_parameter"/>
         </explicit>
         <where expression="( SIZEOF( using_representations( SELF.basis_surface ) * relating_shape_representations_of_extreme_values( SELF ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="b_spline_surface_patch" supertypes="founded_item">
         <explicit name="basis_surface">
            <typename name="b_spline_surface"/>
         </explicit>
         <explicit name="u_start_knot_index">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="v_start_knot_index">
            <builtintype type="INTEGER"/>
         </explicit>
         <where expression="( SIZEOF( using_representations( SELF.basis_surface ) * relating_shape_representations_of_extreme_values( SELF ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="b_spline_surface_strip" supertypes="founded_item">
         <explicit name="basis_surface">
            <typename name="b_spline_surface"/>
         </explicit>
         <explicit name="start_knot_index">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="surface_parameter">
            <typename name="u_or_v_parameter"/>
         </explicit>
         <where expression="( SIZEOF( using_representations( SELF.basis_surface ) * relating_shape_representations_of_extreme_values( SELF ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="b_spline_surface_with_knots" supertypes="b_spline_surface">
         <explicit name="u_multiplicities">
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="v_multiplicities">
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="u_knots">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="v_knots">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="knot_spec">
            <typename name="knot_type"/>
         </explicit>
         <derived expression="SIZEOF( u_knots )" name="knot_u_upper">
            <builtintype type="INTEGER"/>
         </derived>
         <derived expression="SIZEOF( v_knots )" name="knot_v_upper">
            <builtintype type="INTEGER"/>
         </derived>
         <where expression="constraints_param_b_spline( SELF\b_spline_surface.u_degree, knot_u_upper, SELF\b_spline_surface.u_upper, &#10;               u_multiplicities, u_knots )" label="wr1"/>
         <where expression="constraints_param_b_spline( SELF\b_spline_surface.v_degree, knot_v_upper, SELF\b_spline_surface.v_upper, &#10;               v_multiplicities, v_knots )" label="wr2"/>
         <where expression="( SIZEOF( u_multiplicities ) = knot_u_upper )" label="wr3"/>
         <where expression="( SIZEOF( v_multiplicities ) = knot_v_upper )" label="wr4"/>
      </entity>
      <entity name="back_chaining_rule" supertypes="rule_definition"/>
      <entity name="back_chaining_rule_body" supertypes="property_definition property_definition_representation representation"/>
      <entity name="background_colour" supertypes="colour">
         <explicit name="presentation">
            <typename name="area_or_view"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="presentation"/>
         </unique>
      </entity>
      <entity name="bare_die" supertypes="physical_unit"/>
      <entity name="bare_die_bottom_surface" supertypes="bare_die_surface"/>
      <entity name="bare_die_component" supertypes="physical_component"/>
      <entity name="bare_die_edge_segment_surface" supertypes="shape_aspect shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <where expression="( SELF\shape_aspect_relationship.relating_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.related_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="bare_die_edge_surface" supertypes="bare_die_surface">
         <where expression="SELF\shape_aspect.product_definitional" label="wr1"/>
         <where expression="( SIZEOF( TYPEOF( SELF ) - TYPEOF( SELF\shape_aspect || SELF\part_mounting_feature || SELF\bare_die_edge_surface || &#10;               SELF\bare_die_surface ) ) = 0 )" label="wr2"/>
      </entity>
      <entity abstract.supertype="YES" name="bare_die_surface" super.expression="ONEOF (bare_die_bottom_surface, bare_die_top_surface, bare_die_edge_surface)" supertypes="part_mounting_feature">
         <explicit name="of_shape">
            <typename name="bare_die"/>
            <redeclaration entity-ref="shape_aspect"/>
         </explicit>
         <where expression="SELF\shape_aspect.product_definitional" label="wr1"/>
      </entity>
      <entity name="bare_die_template_terminal" supertypes="part_feature_template_definition shape_aspect"/>
      <entity name="bare_die_terminal" supertypes="minimally_defined_bare_die_terminal placed_feature"/>
      <entity name="bare_die_top_surface" supertypes="bare_die_surface">
         <where expression="SELF\shape_aspect.product_definitional" label="wr1"/>
         <where expression="( SIZEOF( TYPEOF( SELF ) - TYPEOF( SELF\shape_aspect || SELF\part_mounting_feature || SELF\bare_die_top_surface || &#10;               SELF\bare_die_surface ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="barring_hole" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.name = 'hole profile' ) AND ( sa.description = &#10;               'closed profile occurrence'  ) AND ( SIZEOF( QUERY ( sar &lt;* USEDIN( sa, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar.description = 'profile usage' ) AND ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_CLOSED_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NGON_CLOSED_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_CLOSED_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLOSED_PATH_PROFILE' ] * TYPEOF( sar.&#10;               relating_shape_aspect ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.name = 'barring profile' ) AND ( sa.description = &#10;               'closed profile occurrence'  ) AND ( SIZEOF( QUERY ( sar &lt;* USEDIN( sa, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar.description = 'profile usage' ) ) ) ) = 1 ) ) ) ) = &#10;               1 )" label="wr2"/>
         <where expression="( ( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) AND ( SIZEOF( QUERY ( pdr &lt;* &#10;               get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( 1 &lt;= SIZEOF( pdr.used_representation.items ) ) AND ( SIZEOF( pdr.&#10;               used_representation.items ) &lt;= 2 ) ) ) ) = 1 ) )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( NOT ( i.name IN [&#10;               'orientation' , 'base radius'] ) ) ) ) &gt; 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;               'base radius'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) &lt;&gt; 1 ) ) ) ) = 0 )" label="wr5"/>
      </entity>
      <entity name="basic_multi_stratum_printed_component" supertypes="printed_component"/>
      <entity name="basic_multi_stratum_printed_part_template" supertypes="printed_part_template"/>
      <entity name="basic_sparse_matrix" supertypes="explicit_table_function multiple_arity_generic_expression">
         <explicit name="operands">
            <aggregate lower="3" type="LIST" upper="3"/>
            <typename name="maths_function"/>
            <redeclaration entity-ref="multiple_arity_generic_expression"/>
         </explicit>
         <explicit name="default_entry">
            <typename name="maths_value"/>
         </explicit>
         <explicit name="order">
            <typename name="ordering_type"/>
         </explicit>
         <derived expression="SELF\multiple_arity_generic_expression.operands[1]" name="index">
            <typename name="maths_function"/>
         </derived>
         <derived expression="SELF\multiple_arity_generic_expression.operands[2]" name="loc">
            <typename name="maths_function"/>
         </derived>
         <derived expression="SELF\multiple_arity_generic_expression.operands[3]" name="val">
            <typename name="maths_function"/>
         </derived>
         <where expression="function_is_1d_table( index )" label="wr1"/>
         <where expression="function_is_1d_table( loc )" label="wr2"/>
         <where expression="function_is_1d_table( val )" label="wr3"/>
         <where expression="check_sparse_index_domain( index.domain, index_base, shape, order )" label="wr4"/>
         <where expression="check_sparse_index_to_loc( index.range, loc.domain )" label="wr5"/>
         <where expression="( loc.domain = val.domain )" label="wr6"/>
         <where expression="check_sparse_loc_range( loc.range, index_base, shape, order )" label="wr7"/>
         <where expression="member_of( default_entry, val.range )" label="wr8"/>
      </entity>
      <entity name="bead" supertypes="feature_definition">
         <where expression="( ( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) &lt;= 1 ) AND ( SIZEOF( QUERY ( pdr &lt;* &#10;               get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( pdr.used_representation.items ) &gt; 2 ) ) ) ) = 0 ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( NOT ( i.name IN [&#10;               'orientation' , 'base radius'] ) ) ) ) &gt; 0 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;               'base radius'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) &gt; 1 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.name = 'sweep path' ) AND ( sa.description = &#10;               'path feature component occurrence'  ) AND ( SIZEOF( QUERY ( sar &lt;* USEDIN( sa, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar.description = 'path feature component usage' ) AND &#10;               ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_FEATURE_COMPONENT' IN TYPEOF( sar.&#10;               relating_shape_aspect ) ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.name = 'bead profile' ) AND ( sa.description = &#10;               'open profile occurrence'  ) AND ( SIZEOF( QUERY ( sar &lt;* USEDIN( sa, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar.description = 'profile usage' ) AND ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OPEN_PATH_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARTIAL_CIRCULAR_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUNDED_U_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SQUARE_U_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEE_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VEE_PROFILE' ] * TYPEOF( sar.&#10;               relating_shape_aspect ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.name = 'end condition' ) AND ( sa.description = &#10;               'bead end occurrence'  ) AND ( SIZEOF( QUERY ( sar &lt;* USEDIN( sa, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar.name = 'bead end usage' ) AND ( sar.description =&#10;               'starting' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BEAD_END' IN TYPEOF( sar.&#10;               relating_shape_aspect ) ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.name = 'end condition' ) AND ( sa.description = &#10;               'bead end occurrence'  ) AND ( SIZEOF( QUERY ( sar &lt;* USEDIN( sa, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar.name = 'bead end usage' ) AND ( sar.description =&#10;               'ending' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BEAD_END' IN TYPEOF( sar.&#10;               relating_shape_aspect ) ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr7"/>
      </entity>
      <entity name="bead_end" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SELF.description IN [ 'linear', 'open', 'radiused'] )" label="wr2"/>
         <where expression="( ( SELF.description &lt;&gt; 'linear' ) XOR ( SIZEOF( QUERY ( pdr &lt;* get_shape_aspect_property_definition_representations( &#10;               SELF ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' &#10;               IN TYPEOF( pdr.used_representation ) ) ) ) &gt; 0 ) )" label="wr3"/>
         <where expression="( ( SELF.description &lt;&gt; 'linear' ) OR ( SIZEOF( QUERY ( pdr &lt;* get_shape_aspect_property_definition_representations( &#10;               SELF ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( pdr.&#10;               used_representation.items ) = 2 ) ) ) ) = 1 ) )" label="wr4"/>
         <where expression="( ( SELF.description &lt;&gt; 'linear' ) OR ( SIZEOF( QUERY ( pdr &lt;* get_shape_aspect_property_definition_representations( &#10;               SELF ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.&#10;               used_representation.items | ( ( i.name = 'end length' ) AND ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = &#10;               2 ) ) ) ) = 1 ) ) ) ) = 1 ) )" label="wr5"/>
         <where expression="( ( SELF.description &lt;&gt; 'linear' ) OR ( SIZEOF( QUERY ( pdr &lt;* get_shape_aspect_property_definition_representations( &#10;               SELF ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.&#10;               used_representation.items | ( ( i.name = 'end shape' ) AND ( i\descriptive_representation_item.description IN [&#10;               'straight' , 'tapered'] ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) ) ) ) = 1 ) ) ) ) = 1 ) )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( sar &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'SHAPE_ASPECT_RELATIONSHIP.RELATING_SHAPE_ASPECT'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;               sar ) ) AND ( sar.name = 'bead end usage' ) AND ( sar.description IN [ 'starting', 'ending'] ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BEAD'  IN TYPEOF( sar.related_shape_aspect.&#10;               of_shape.definition ) ) AND ( sar.related_shape_aspect.of_shape.definition\characterized_object.name = &#10;               'end condition'  ) AND ( sar.related_shape_aspect.of_shape.definition\characterized_object.description = &#10;               'bead end occurrence'  ) ) ) ) = 1 )" label="wr7"/>
      </entity>
      <entity name="between_shape_aspect" supertypes="continuous_shape_aspect"/>
      <entity name="beveled_sheet_representation" supertypes="shape_representation"/>
      <entity name="bezier_curve" supertypes="b_spline_curve"/>
      <entity name="bezier_surface" supertypes="b_spline_surface"/>
      <entity abstract.supertype="YES" name="binary_assembly_constraint" super.expression="ONEOF (parallel_assembly_constraint, surface_distance_assembly_constraint_with_dimension, angle_assembly_constraint_with_dimension, perpendicular_assembly_constraint, incidence_assembly_constraint, coaxial_assembly_constraint, tangent_assembly_constraint)" supertypes="assembly_geometric_constraint representation_relationship_with_transformation">
         <explicit name="rep_1">
            <typename name="representative_shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="representative_shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <where expression="( ( SELF\explicit_constraint.constrained_elements[1]\geometric_representation_item.dim = 3 ) AND ( SELF\&#10;               explicit_constraint.reference_elements[1]\geometric_representation_item.dim = 3 ) )" label="wr1"/>
         <where expression="( ( SELF\representation_relationship.rep_1 IN ( using_representations( SELF\&#10;               representation_relationship_with_transformation.transformation_operator\item_defined_transformation.&#10;               transform_item_1 ) + using_representation_with_mapping( SELF\representation_relationship_with_transformation.&#10;               transformation_operator\item_defined_transformation.transform_item_1 ) ) ) AND ( SELF\representation_relationship.&#10;               rep_2 IN ( using_representations( SELF\representation_relationship_with_transformation.transformation_operator\&#10;               item_defined_transformation.transform_item_2 ) + using_representation_with_mapping( SELF\&#10;               representation_relationship_with_transformation.transformation_operator\item_defined_transformation.&#10;               transform_item_2 ) ) ) )" label="wr2"/>
         <where expression="( ( SIZEOF( SELF\explicit_constraint.constrained_elements ) = 1 ) AND ( SIZEOF( SELF\explicit_constraint.&#10;               reference_elements ) = 1 ) )" label="wr3"/>
         <where expression="( ( SELF\representation_relationship_with_transformation.transformation_operator\item_defined_transformation.&#10;               transform_item_1 = SELF\explicit_constraint.reference_elements[1] ) AND ( SELF\&#10;               representation_relationship_with_transformation.transformation_operator\item_defined_transformation.&#10;               transform_item_2 = SELF\explicit_constraint.constrained_elements[1] ) )" label="wr4"/>
      </entity>
      <entity abstract.supertype="YES" name="binary_boolean_expression" super.expression="ONEOF (xor_expression, equals_expression)" supertypes="boolean_expression binary_generic_expression"/>
      <entity abstract.supertype="YES" name="binary_function_call" supertypes="binary_numeric_expression"/>
      <entity abstract.supertype="YES" name="binary_generic_expression" supertypes="generic_expression">
         <explicit name="operands">
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="generic_expression"/>
         </explicit>
      </entity>
      <entity name="binary_literal" supertypes="generic_literal">
         <explicit name="lit_value">
            <builtintype type="BINARY"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="binary_numeric_expression" super.expression="ONEOF (minus_expression, div_expression, mod_expression, slash_expression, power_expression, binary_function_call)" supertypes="numeric_expression binary_generic_expression">
         <explicit name="operands">
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="numeric_expression"/>
            <redeclaration entity-ref="binary_generic_expression"/>
         </explicit>
      </entity>
      <entity name="binary_representation_item" supertypes="representation_item">
         <explicit name="binary_value">
            <builtintype type="BINARY"/>
         </explicit>
      </entity>
      <entity name="blind_passage_template" supertypes="unsupported_passage_template"/>
      <entity abstract.supertype="YES" name="blind_via" super.expression="ONEOF (non_conductive_base_blind_via, plated_conductive_base_blind_via)" supertypes="via"/>
      <entity name="block" supertypes="geometric_representation_item">
         <explicit name="position">
            <typename name="axis2_placement_3d"/>
         </explicit>
         <explicit name="x">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="y">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="z">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="boolean_defined_function" supertypes="defined_function boolean_expression"/>
      <entity abstract.supertype="YES" name="boolean_expression" super.expression="ONEOF (simple_boolean_expression, unary_boolean_expression, binary_boolean_expression, multiple_arity_boolean_expression, comparison_expression, interval_expression, boolean_defined_function)" supertypes="expression"/>
      <entity name="boolean_literal" supertypes="simple_boolean_expression generic_literal">
         <explicit name="the_value">
            <builtintype type="BOOLEAN"/>
         </explicit>
      </entity>
      <entity name="boolean_representation_item" supertypes="representation_item boolean_literal"/>
      <entity name="boolean_result" supertypes="geometric_representation_item">
         <explicit name="operator">
            <typename name="boolean_operator"/>
         </explicit>
         <explicit name="first_operand">
            <typename name="boolean_operand"/>
         </explicit>
         <explicit name="second_operand">
            <typename name="boolean_operand"/>
         </explicit>
      </entity>
      <entity name="boolean_result_2d" supertypes="boolean_result">
         <explicit name="first_operand">
            <typename name="boolean_operand_2d"/>
            <redeclaration entity-ref="boolean_result"/>
         </explicit>
         <explicit name="second_operand">
            <typename name="boolean_operand_2d"/>
            <redeclaration entity-ref="boolean_result"/>
         </explicit>
      </entity>
      <entity name="boolean_variable" supertypes="simple_boolean_expression variable"/>
      <entity name="boss" supertypes="feature_definition">
         <where expression="( SELF\characterized_object.description IN [ 'circular', 'complex', 'rectangular'] )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'boss height occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'path feature component usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_FEATURE_COMPONENT' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) AND ( sdr.relating_shape_aspect.description = 'linear' ) AND ( sdr.name = 'boss height' ) ) ) ) &#10;                = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN&#10;                TYPEOF( pdr.used_representation ) ) AND ( 1 &lt;= SIZEOF( pdr.used_representation.items ) ) AND ( SIZEOF( pdr.&#10;                used_representation.items ) &lt;= 2 ) ) ) ) = 1 ) ) ) = 1 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN&#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( srwp_i &lt;* pdr.used_representation.items | ( ( srwp_i.&#10;                name = 'orientation' ) OR ( srwp_i.name = 'fillet radius' ) ) ) ) = SIZEOF( pdr.used_representation.items ) ) ) ) ) &#10;                = 1 ) ) ) = 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'fillet radius' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'circular' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( &#10;                SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'circular profile occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_CLOSED_PROFILE' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'top condition occurrence' ) AND ( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'boss top usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOSS_TOP' IN TYPEOF( fcr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'circular' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( &#10;                SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'change in diameter occurrence' ) AND ( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'taper usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TAPER' IN TYPEOF( fcr.&#10;                related_shape_aspect ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOSS' IN &#10;                TYPEOF( fcr.relating_shape_aspect ) ) ) ) ) = 1 ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) )" label="wr8"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'complex' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( &#10;                SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'enclosed boundary occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NGON_CLOSED_PROFILE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLOSED_PATH_PROFILE' ] * TYPEOF( sdr.&#10;                relating_shape_aspect ) ) = 1 ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr9"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'complex', 'rectangular'] ) ) OR ( SIZEOF( QUERY ( pds &lt;* &#10;                QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'change in boundary occurrence' ) AND ( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATING_SHAPE_ASPECT'  ) | ( ( sar.description = 'taper usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TAPER' IN TYPEOF( fcr.&#10;                related_shape_aspect ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOSS' IN &#10;                TYPEOF( fcr.relating_shape_aspect ) ) AND ( fcr.related_shape_aspect.description IN [ 'angle taper', &#10;                'directed taper' ] ) ) ) ) = 1 ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) )" label="wr10"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'rectangular' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* &#10;                USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'rectangular profile occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_CLOSED_PROFILE' IN TYPEOF( sdr&#10;                .relating_shape_aspect ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;                used_representation ) ) AND ( pdr.used_representation.name = 'maximum feature limit' ) ) ) ) &gt;= 0 )" label="wr12"/>
      </entity>
      <entity name="boss_top" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SELF.description IN [ 'planar', 'complex'] )" label="wr2"/>
         <where expression="( ( NOT ( SELF.description = 'planar' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION_SHAPE_REPRESENTATION'  IN TYPEOF( &#10;               pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( ( NOT ( SELF.description = 'planar' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LOCATION_SHAPE_REPRESENTATION'  IN TYPEOF( pdr&#10;               .used_representation ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( ( NOT ( SELF.description = 'complex' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;               used_representation ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'  + &#10;               'RELATING_SHAPE_ASPECT'  ) | ( ( sar.description = 'boss top usage' ) AND ( sar.name IN [ 'boss height start', &#10;               'boss height end' ] ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( fcr.related_shape_aspect.description = &#10;               'top condition occurrence'  ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOSS' IN &#10;               TYPEOF( fcr.related_shape_aspect.of_shape.definition ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOSS_TOP'  IN TYPEOF( fcr.&#10;               relating_shape_aspect ) ) ) ) ) &gt;= 1 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'top radius' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr9"/>
      </entity>
      <entity name="bound_parameter_environment" supertypes="environment">
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOUND_VARIATIONAL_PARAMETER' IN TYPEOF( SELF\&#10;               environment.syntactic_representation ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'INSTANCE_ATTRIBUTE_REFERENCE'  IN TYPEOF( SELF\environment.semantics ) ) )" label="wr1"/>
      </entity>
      <entity name="bound_variational_parameter" supertypes="variational_parameter">
         <derived expression="?" name="parameter_current_value">
            <typename name="maths_value"/>
            <redeclaration entity-ref="variational_parameter"/>
         </derived>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOUND_PARAMETER_ENVIRONMENT' IN TYPEOF( SELF\&#10;               generic_variable.interpretation ) )" label="wr1"/>
      </entity>
      <entity name="boundary_curve" supertypes="composite_curve_on_surface">
         <where expression="SELF\composite_curve.closed_curve" label="wr1"/>
      </entity>
      <entity name="boundary_curve_of_b_spline_or_rectangular_composite_surface" supertypes="founded_item">
         <explicit name="basis_surface">
            <typename name="b_spline_or_rectangular_composite_surface_select"/>
         </explicit>
         <explicit name="boundary_type">
            <typename name="surface_boundary_type"/>
         </explicit>
         <where expression="( SIZEOF( using_representations( SELF.basis_surface ) * relating_shape_representations_of_extreme_values( SELF ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="bounded_curve" super.expression="ONEOF (polyline, b_spline_curve, trimmed_curve, bounded_pcurve, bounded_surface_curve, composite_curve)" supertypes="curve"/>
      <entity name="bounded_pcurve" supertypes="pcurve bounded_curve">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOUNDED_CURVE' IN TYPEOF( SELF\pcurve.&#10;               reference_to_curve.items[1] ) )" label="wr1"/>
      </entity>
      <entity name="bounded_surface" super.expression="ONEOF (b_spline_surface, rectangular_trimmed_surface, curve_bounded_surface, rectangular_composite_surface)" supertypes="surface"/>
      <entity name="bounded_surface_curve" supertypes="surface_curve bounded_curve">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOUNDED_CURVE' IN TYPEOF( SELF\surface_curve.&#10;               curve_3d ) )" label="wr1"/>
      </entity>
      <entity name="box_domain" supertypes="founded_item">
         <explicit name="corner">
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="xlength">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="ylength">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="zlength">
            <typename name="positive_length_measure"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( item &lt;* USEDIN( SELF, '' ) | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOXED_HALF_SPACE'  IN TYPEOF( item ) ) ) ) ) =&#10;               0 )" label="wr1"/>
      </entity>
      <entity name="boxed_half_space" supertypes="half_space_solid">
         <explicit name="enclosure">
            <typename name="box_domain"/>
         </explicit>
      </entity>
      <entity name="breakdown_context" supertypes="product_definition_relationship"/>
      <entity name="breakdown_element_group_assignment" supertypes="group_assignment">
         <explicit name="assigned_group">
            <typename name="product_definition_element_relationship"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="product_definition_or_breakdown_element_usage"/>
         </explicit>
      </entity>
      <entity name="breakdown_element_realization" supertypes="characterized_object product_definition_element_relationship"/>
      <entity name="breakdown_element_usage" supertypes="product_definition_relationship"/>
      <entity name="breakdown_of" supertypes="product_definition_relationship"/>
      <entity name="breakout_footprint_definition" supertypes="generic_footprint_definition"/>
      <entity name="breakout_occurrence" supertypes="footprint_occurrence"/>
      <entity name="brep_with_voids" supertypes="manifold_solid_brep">
         <explicit name="voids">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="oriented_closed_shell"/>
         </explicit>
      </entity>
      <entity name="buried_via" supertypes="via"/>
      <entity name="bus_element_link" supertypes="product_definition product_definition_relationship">
         <unique label="ur1">
            <unique.attribute attribute="SELF\product_definition_relationship.related_product_definition"/>
            <unique.attribute attribute="SELF\product_definition_relationship.relating_product_definition"/>
         </unique>
         <where expression="( SELF\product_definition_relationship.related_product_definition :&lt;&gt;: SELF\product_definition_relationship.&#10;               relating_product_definition )" label="wr1"/>
      </entity>
      <entity name="bus_structural_definition" supertypes="product_definition"/>
      <entity name="bytes_representation_item" supertypes="binary_representation_item">
         <derived expression="BLENGTH( SELF\binary_representation_item.binary_value ) DIV 8" name="no_of_bytes">
            <builtintype type="INTEGER"/>
         </derived>
         <where expression="( ( BLENGTH( SELF\binary_representation_item.binary_value ) MOD 8 ) = 0 )" label="wr1"/>
      </entity>
      <entity name="cable_component" supertypes="physical_component"/>
      <entity name="cable_terminal" supertypes="shape_aspect">
         <explicit name="of_shape">
            <typename name="cable_usage_view"/>
            <redeclaration entity-ref="shape_aspect"/>
         </explicit>
      </entity>
      <entity name="cable_usage_view" supertypes="physical_unit"/>
      <entity name="calendar_date" supertypes="date">
         <explicit name="day_component">
            <typename name="day_in_month_number"/>
         </explicit>
         <explicit name="month_component">
            <typename name="month_in_year_number"/>
         </explicit>
         <where expression="valid_calendar_date( SELF )" label="wr1"/>
      </entity>
      <entity name="camera_image" super.expression="ONEOF (camera_image_2d_with_scale, camera_image_3d_with_scale)" supertypes="mapped_item">
         <explicit name="mapping_source">
            <typename name="camera_usage"/>
            <redeclaration entity-ref="mapped_item"/>
         </explicit>
         <explicit name="mapping_target">
            <typename name="planar_box"/>
            <redeclaration entity-ref="mapped_item"/>
         </explicit>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF( SELF ) )" label="wr1"/>
      </entity>
      <entity name="camera_image_2d_with_scale" supertypes="camera_image">
         <derived expression="SELF\mapped_item.mapping_target\planar_extent.size_in_x / SELF\mapped_item.&#10;                 mapping_source.mapping_origin\camera_model_d2.view_window\planar_extent.size_in_x" name="scale">
            <typename name="positive_ratio_measure"/>
         </derived>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CAMERA_MODEL_D2' IN TYPEOF( SELF\mapped_item.&#10;               mapping_source.mapping_origin ) )" label="wr1"/>
         <where expression="( aspect_ratio( SELF\mapped_item.mapping_target ) = aspect_ratio( SELF\mapped_item.mapping_source.mapping_origin\&#10;               camera_model_d2.view_window ) )" label="wr2"/>
         <where expression="SELF\mapped_item.mapping_source.mapping_origin\camera_model_d2.view_window_clipping" label="wr3"/>
      </entity>
      <entity name="camera_image_3d_with_scale" supertypes="camera_image">
         <derived expression="SELF\mapped_item.mapping_target\planar_extent.size_in_x / SELF\mapped_item.&#10;                 mapping_source.mapping_origin\camera_model_d3.perspective_of_volume.view_window.size_in_x" name="scale">
            <typename name="positive_ratio_measure"/>
         </derived>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CAMERA_MODEL_D3' IN TYPEOF( SELF\mapped_item.&#10;               mapping_source.mapping_origin ) )" label="wr1"/>
         <where expression="( aspect_ratio( SELF\mapped_item.mapping_target ) = aspect_ratio( SELF\mapped_item.mapping_source.mapping_origin\&#10;               camera_model_d3.perspective_of_volume.view_window ) )" label="wr2"/>
         <where expression="( SELF\mapped_item.mapping_source.mapping_origin\camera_model_d3.perspective_of_volume.front_plane_clipping AND SELF\&#10;               mapped_item.mapping_source.mapping_origin\camera_model_d3.perspective_of_volume.view_volume_sides_clipping )" label="wr3"/>
         <where expression="( ( SELF\mapped_item.mapping_target\planar_extent.size_in_x &gt; 0 ) AND ( SELF\mapped_item.mapping_target\planar_extent.&#10;               size_in_y &gt; 0 ) )" label="wr4"/>
         <where expression="( ( SELF\mapped_item.mapping_source.mapping_origin\camera_model_d3.perspective_of_volume.view_window.size_in_x &gt; 0 ) &#10;               AND ( SELF\mapped_item.mapping_source.mapping_origin\camera_model_d3.perspective_of_volume.view_window.size_in_y &gt; &#10;               0 ) )" label="wr5"/>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'AXIS2_PLACEMENT_2D' ) IN TYPEOF( SELF\&#10;               mapped_item.mapping_target\planar_box.placement ) ) AND ( NOT ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'AXIS2_PLACEMENT_3D' ) IN TYPEOF( SELF\&#10;               mapped_item.mapping_target\planar_box.placement ) ) ) )" label="wr6"/>
      </entity>
      <entity abstract.supertype="YES" name="camera_model" super.expression="ONEOF (camera_model_d2, camera_model_d3)" supertypes="geometric_representation_item">
         <where expression="( ( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'ITEM_DEFINED_TRANSFORMATION.'  + 'TRANSFORM_ITEM_1' ) ) + SIZEOF( USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'REPRESENTATION_MAP.MAPPING_ORIGIN' ) ) ) &#10;               &gt; 0 )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'STYLED_ITEM.ITEM' ) ) &#10;               = 0 )" label="wr2"/>
      </entity>
      <entity name="camera_model_d2" supertypes="camera_model">
         <explicit name="view_window">
            <typename name="planar_box"/>
         </explicit>
         <explicit name="view_window_clipping">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( SELF\geometric_representation_item.dim = 2 )" label="wr1"/>
      </entity>
      <entity name="camera_model_d3" supertypes="camera_model">
         <explicit name="view_reference_system">
            <typename name="axis2_placement_3d"/>
         </explicit>
         <explicit name="perspective_of_volume">
            <typename name="view_volume"/>
         </explicit>
         <where expression="( SELF\geometric_representation_item.dim = 3 )" label="wr1"/>
      </entity>
      <entity name="camera_model_d3_multi_clipping" supertypes="camera_model_d3">
         <explicit name="shape_clipping">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="camera_model_d3_multi_clipping_interection_select"/>
         </explicit>
      </entity>
      <entity name="camera_model_d3_multi_clipping_intersection" supertypes="geometric_representation_item">
         <explicit name="shape_clipping">
            <aggregate lower="2" type="SET" upper="?"/>
            <typename name="camera_model_d3_multi_clipping_interection_select"/>
         </explicit>
      </entity>
      <entity name="camera_model_d3_multi_clipping_union" supertypes="geometric_representation_item">
         <explicit name="shape_clipping">
            <aggregate lower="2" type="SET" upper="?"/>
            <typename name="camera_model_d3_multi_clipping_union_select"/>
         </explicit>
      </entity>
      <entity name="camera_model_d3_with_hlhsr" supertypes="camera_model_d3">
         <explicit name="hidden_line_surface_removal">
            <builtintype type="BOOLEAN"/>
         </explicit>
      </entity>
      <entity name="camera_model_with_light_sources" supertypes="camera_model_d3">
         <explicit name="sources">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="light_source"/>
         </explicit>
      </entity>
      <entity name="camera_usage" supertypes="representation_map">
         <explicit name="mapping_origin">
            <typename name="camera_model"/>
            <redeclaration entity-ref="representation_map"/>
         </explicit>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRESENTATION_REPRESENTATION' IN TYPEOF( &#10;               SELF\representation_map.mapped_representation ) ) )" label="wr1"/>
      </entity>
      <entity name="capacitance_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CAPACITANCE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="capacitance_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.farad ) )" label="wr1"/>
      </entity>
      <entity name="cartesian_complex_number_region" supertypes="maths_space generic_literal">
         <explicit name="real_constraint">
            <typename name="real_interval"/>
         </explicit>
         <explicit name="imag_constraint">
            <typename name="real_interval"/>
         </explicit>
         <where expression="( min_exists( real_constraint ) OR max_exists( real_constraint ) OR min_exists( imag_constraint ) OR max_exists( &#10;               imag_constraint ) )" label="wr1"/>
      </entity>
      <entity name="cartesian_point" supertypes="point">
         <explicit name="coordinates">
            <aggregate lower="1" type="LIST" upper="3"/>
            <typename name="length_measure"/>
         </explicit>
      </entity>
      <entity name="cartesian_transformation_operator" super.expression="ONEOF (cartesian_transformation_operator_2d, cartesian_transformation_operator_3d)" supertypes="geometric_representation_item functionally_defined_transformation">
         <explicit name="axis1" optional="YES">
            <typename name="direction"/>
         </explicit>
         <explicit name="axis2" optional="YES">
            <typename name="direction"/>
         </explicit>
         <explicit name="local_origin">
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="scale" optional="YES">
            <builtintype type="REAL"/>
         </explicit>
         <derived expression="NVL( scale, 1 )" name="scl">
            <builtintype type="REAL"/>
         </derived>
         <where expression="( scl &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="cartesian_transformation_operator_2d" supertypes="cartesian_transformation_operator">
         <derived expression="base_axis( 2, SELF\cartesian_transformation_operator.axis1, SELF\&#10;             cartesian_transformation_operator.axis2, ? )" name="u">
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="direction"/>
         </derived>
         <where expression="( SELF\geometric_representation_item.dim = 2 )" label="wr1"/>
      </entity>
      <entity name="cartesian_transformation_operator_3d" supertypes="cartesian_transformation_operator">
         <explicit name="axis3" optional="YES">
            <typename name="direction"/>
         </explicit>
         <derived expression="base_axis( 3, SELF\cartesian_transformation_operator.axis1, SELF\&#10;             cartesian_transformation_operator.axis2, axis3 )" name="u">
            <aggregate lower="3" type="LIST" upper="3"/>
            <typename name="direction"/>
         </derived>
         <where expression="( SELF\geometric_representation_item.dim = 3 )" label="wr1"/>
      </entity>
      <entity name="category_model_parameter" supertypes="model_parameter"/>
      <entity name="cc_design_approval" supertypes="approval_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="approved_item"/>
         </explicit>
      </entity>
      <entity name="cc_design_certification" supertypes="certification_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="certified_item"/>
         </explicit>
      </entity>
      <entity name="cc_design_contract" supertypes="contract_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="contracted_item"/>
         </explicit>
      </entity>
      <entity name="cc_design_date_and_time_assignment" supertypes="date_and_time_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="date_time_item"/>
         </explicit>
      </entity>
      <entity name="cc_design_person_and_organization_assignment" supertypes="person_and_organization_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="cc_person_organization_item"/>
         </explicit>
         <where expression="cc_design_person_and_organization_correlation( SELF )" label="wr1"/>
      </entity>
      <entity name="cc_design_security_classification" supertypes="security_classification_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="cc_classified_item"/>
         </explicit>
      </entity>
      <entity name="cc_design_specification_reference" supertypes="document_reference">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="cc_specified_item"/>
         </explicit>
      </entity>
      <entity name="cdgc_with_dimension" supertypes="curve_distance_geometric_constraint">
         <explicit name="distance_value">
            <typename name="non_negative_length_measure"/>
         </explicit>
      </entity>
      <entity name="celsius_temperature_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.THERMODYNAMIC_TEMPERATURE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="centre_of_symmetry" supertypes="derived_shape_aspect"/>
      <entity name="certification">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="purpose">
            <typename name="text"/>
         </explicit>
         <explicit name="kind">
            <typename name="certification_type"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="certification_assignment">
         <explicit name="assigned_certification">
            <typename name="certification"/>
         </explicit>
         <derived expression="get_role( SELF )" name="role">
            <typename name="object_role"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ROLE_ASSOCIATION.'&#10;               + 'ITEM_WITH_ROLE'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="certification_type">
         <explicit name="description">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="chain_based_geometric_item_specific_usage" supertypes="geometric_item_specific_usage chain_based_item_identified_representation_usage"/>
      <entity name="chain_based_item_identified_representation_usage" supertypes="item_identified_representation_usage">
         <explicit name="nodes">
            <aggregate lower="2" type="LIST" unique="YES" upper="?"/>
            <typename name="representation"/>
         </explicit>
         <explicit name="undirected_link">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="chained_representation_link"/>
         </explicit>
         <derived expression="nodes[1]" name="root">
            <typename name="representation"/>
         </derived>
         <derived expression="nodes[HIINDEX( nodes )]" name="used_representation">
            <typename name="representation"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </derived>
         <derived expression="get_directed_link( nodes, &#10;                                                 undirected_link )" name="directed_link">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="representation_relationship"/>
         </derived>
         <derived expression="SELF\item_identified_representation_usage.used_representation" name="leaf">
            <typename name="representation"/>
         </derived>
         <where expression="EXISTS( directed_link )" label="wr1"/>
      </entity>
      <entity name="chamfer" supertypes="transition_feature">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION' IN TYPEOF( pdr&#10;               .used_representation ) ) AND ( pdr.used_representation.name = 'chamfer face' ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATING_SHAPE_ASPECT'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CHAMFER_OFFSET'  IN TYPEOF( fcr.&#10;               related_shape_aspect ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CHAMFER' IN &#10;               TYPEOF( fcr.relating_shape_aspect ) ) AND ( fcr.related_shape_aspect.description = 'first offset' ) ) ) ) = 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATING_SHAPE_ASPECT'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CHAMFER_OFFSET'  IN TYPEOF( fcr.&#10;               related_shape_aspect ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CHAMFER' IN &#10;               TYPEOF( fcr.relating_shape_aspect ) ) AND ( fcr.related_shape_aspect.description = 'second offset' ) ) ) ) = 1 )" label="wr3"/>
      </entity>
      <entity name="chamfer_offset" supertypes="shape_aspect">
         <where expression="( SELF.description IN [ 'first offset', 'second offset'] )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr3"/>
         <where expression="( ( NOT ( SELF.description = 'first offset' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'offset amount' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( ( NOT ( SELF.description = 'first offset' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;               used_representation ) ) AND ( pdr.used_representation.name = 'first face shape' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( SELF.description = 'second offset' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'offset amount' ) ) OR ( ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;               = 2 ) AND ( it.name = 'offset angle' ) ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr6"/>
         <where expression="( ( NOT ( SELF.description = 'second offset' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;               used_representation ) ) AND ( pdr.used_representation.name = 'second face shape' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP' IN TYPEOF( &#10;               sar ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CHAMFER' IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CHAMFER_OFFSET' &#10;               IN TYPEOF( sdr.related_shape_aspect ) ) ) ) ) = 1 )" label="wr8"/>
      </entity>
      <entity name="change" supertypes="action_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="work_item"/>
         </explicit>
      </entity>
      <entity name="change_composition_relationship" supertypes="group_relationship">
         <explicit name="relating_group">
            <typename name="change_group"/>
            <redeclaration entity-ref="group_relationship"/>
         </explicit>
         <explicit name="related_group">
            <typename name="change_element"/>
            <redeclaration entity-ref="group_relationship"/>
         </explicit>
         <derived expression="SELF\group_relationship.relating_group" name="composition">
            <typename name="change_group"/>
         </derived>
         <derived expression="SELF\group_relationship.related_group" name="element">
            <typename name="change_element"/>
         </derived>
      </entity>
      <entity abstract.supertype="YES" name="change_element" super.expression="ONEOF (modify_element, delete_element, add_element)" supertypes="group characterized_object"/>
      <entity name="change_element_sequence" supertypes="group_relationship">
         <explicit name="relating_group">
            <typename name="change_element"/>
            <redeclaration entity-ref="group_relationship"/>
         </explicit>
         <explicit name="related_group">
            <typename name="change_element"/>
            <redeclaration entity-ref="group_relationship"/>
         </explicit>
         <derived expression="SELF\group_relationship.related_group" name="next">
            <typename name="change_element"/>
         </derived>
         <derived expression="SELF\group_relationship.relating_group" name="previous">
            <typename name="change_element"/>
         </derived>
      </entity>
      <entity name="change_group" supertypes="group"/>
      <entity name="change_group_assignment" supertypes="group_assignment">
         <explicit name="assigned_group">
            <typename name="change_group"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="item">
            <typename name="change_relationship_select"/>
         </explicit>
      </entity>
      <entity name="change_request" supertypes="action_request_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="change_request_item"/>
         </explicit>
      </entity>
      <entity name="character_glyph_font_usage">
         <explicit name="character">
            <typename name="generic_character_glyph_symbol"/>
         </explicit>
         <explicit name="font">
            <typename name="text_font"/>
         </explicit>
      </entity>
      <entity name="character_glyph_style_outline" supertypes="founded_item">
         <explicit name="outline_style">
            <typename name="curve_style"/>
         </explicit>
      </entity>
      <entity name="character_glyph_style_stroke" supertypes="founded_item">
         <explicit name="stroke_style">
            <typename name="curve_style"/>
         </explicit>
      </entity>
      <entity name="character_glyph_symbol" supertypes="generic_character_glyph_symbol">
         <explicit name="character_box">
            <typename name="planar_extent"/>
         </explicit>
         <explicit name="baseline_ratio">
            <typename name="ratio_measure"/>
         </explicit>
         <derived expression="character_box.size_in_y" name="box_height">
            <typename name="length_measure"/>
         </derived>
         <where expression="( ( 0 &lt;= baseline_ratio ) AND ( baseline_ratio &lt;= 1 ) )" label="wr1"/>
         <where expression="item_in_context( SELF.character_box, SELF\representation.context_of_items )" label="wr2"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POSITIVE_LENGTH_MEASURE' IN TYPEOF( SELF.&#10;               box_height ) )" label="wr3"/>
      </entity>
      <entity name="character_glyph_symbol_outline" supertypes="character_glyph_symbol">
         <explicit name="outlines">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="annotation_fill_area"/>
         </explicit>
         <where expression="( SELF.outlines &lt;= SELF\representation.items )" label="wr1"/>
      </entity>
      <entity name="character_glyph_symbol_stroke" supertypes="character_glyph_symbol">
         <explicit name="strokes">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="curve"/>
         </explicit>
         <where expression="( SELF.strokes &lt;= SELF\representation.items )" label="wr1"/>
      </entity>
      <entity name="characteristic_data_column_header" supertypes="general_property"/>
      <entity name="characteristic_data_column_header_link" supertypes="general_property_relationship"/>
      <entity name="characteristic_data_table_header" supertypes="general_property"/>
      <entity name="characteristic_data_table_header_decomposition" supertypes="general_property_relationship"/>
      <entity name="characteristic_type" supertypes="group"/>
      <entity name="characterized_chain_based_item_within_representation" supertypes="characterized_item_within_representation">
         <explicit name="nodes">
            <aggregate lower="2" type="LIST" unique="YES" upper="?"/>
            <typename name="representation"/>
         </explicit>
         <explicit name="undirected_link">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="chained_representation_link"/>
         </explicit>
         <derived expression="nodes[1]" name="root">
            <typename name="representation"/>
         </derived>
         <derived expression="nodes[HIINDEX( nodes )]" name="rep">
            <typename name="representation"/>
            <redeclaration entity-ref="characterized_item_within_representation"/>
         </derived>
         <derived expression="get_directed_link( nodes, &#10;                                                 undirected_link )" name="directed_link">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="representation_relationship"/>
         </derived>
         <derived expression="SELF\characterized_item_within_representation.rep" name="leaf">
            <typename name="representation"/>
         </derived>
         <where expression="EXISTS( directed_link )" label="wr1"/>
      </entity>
      <entity name="characterized_class" supertypes="characterized_object class"/>
      <entity name="characterized_item_within_representation" supertypes="characterized_object">
         <explicit name="item">
            <typename name="representation_item"/>
         </explicit>
         <explicit name="rep">
            <typename name="representation"/>
         </explicit>
         <unique label="wr1">
            <unique.attribute attribute="item"/>
            <unique.attribute attribute="rep"/>
         </unique>
         <where expression="( rep IN using_representations( item ) )" label="wr2"/>
      </entity>
      <entity name="characterized_object">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="characterized_representation" supertypes="representation characterized_object">
         <derived expression="SELF\representation.name" name="name">
            <typename name="label"/>
            <redeclaration entity-ref="characterized_object"/>
         </derived>
         <derived expression="SELF\representation.description" name="description">
            <typename name="text"/>
            <redeclaration entity-ref="characterized_object"/>
         </derived>
      </entity>
      <entity name="circle" supertypes="conic">
         <explicit name="radius">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="circular_area" supertypes="primitive_2d">
         <explicit name="centre">
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="radius">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="circular_closed_profile" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 2 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name = &#10;               'orientation'  ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'diameter' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
      </entity>
      <entity name="circular_path" supertypes="path_node">
         <explicit name="via_point">
            <typename name="cartesian_point"/>
         </explicit>
      </entity>
      <entity name="circular_pattern" supertypes="replicate_feature">
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;               QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_ASPECT_RELATIONSHIP.'  + 'RELATING_SHAPE_ASPECT' ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;               sar ) ) ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT' IN TYPEOF( sdr.&#10;               related_shape_aspect ) ) ) ) = 1 ) ) ) &lt;= 3 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( ( SIZEOF( impl_rep.used_representation.items ) &gt;= 3 ) AND ( &#10;               SIZEOF( impl_rep.used_representation.items ) &lt;= 5 ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'diameter' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;               = 2 ) AND ( it.name = 'base feature rotation' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' IN TYPEOF( it\&#10;               measure_with_unit.value_component ) ) AND ( it.name = 'number of features' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;               = 2 ) AND ( it.name = 'angular spacing' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name = &#10;               'orientation'  ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
      </entity>
      <entity name="circular_runout_tolerance" supertypes="geometric_tolerance_with_datum_reference"/>
      <entity name="class" supertypes="group"/>
      <entity name="class_by_extension" supertypes="class"/>
      <entity name="class_by_intension" supertypes="class"/>
      <entity name="class_system" supertypes="group"/>
      <entity name="class_usage_effectivity_context_assignment" supertypes="effectivity_context_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="class_usage_effectivity_context_item"/>
         </explicit>
         <where expression="( SELF.role.name = 'class usage influence' )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION'  IN TYPEOF( i ) ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.APPLIED_EFFECTIVITY_ASSIGNMENT' IN TYPEOF( &#10;               SELF.assigned_effectivity_assignment ) ) AND ( SIZEOF( TYPEOF( SELF.assigned_effectivity_assignment.&#10;               assigned_effectivity ) ) = 1 ) AND ( SELF.assigned_effectivity_assignment.assigned_effectivity.id = 'class usage' ) &#10;               AND ( SIZEOF( QUERY ( i &lt;* SELF.assigned_effectivity_assignment\applied_effectivity_assignment.items | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE'  IN &#10;               TYPEOF( i ) ) ) ) ) = 0 ) )" label="wr3"/>
      </entity>
      <entity abstract.supertype="YES" name="classification_assignment">
         <explicit name="assigned_class">
            <typename name="group"/>
         </explicit>
         <explicit name="role">
            <typename name="classification_role"/>
         </explicit>
      </entity>
      <entity name="classification_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="clgc_with_dimension" supertypes="curve_length_geometric_constraint">
         <explicit name="length_value">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="closed_curve_style_parameters" supertypes="curve_style_parameters_representation"/>
      <entity name="closed_path_profile" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name = &#10;               'orientation'  ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_SHAPE_REPRESENTATION' IN TYPEOF( pdr.&#10;               used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr5"/>
      </entity>
      <entity name="closed_shell" supertypes="connected_face_set"/>
      <entity name="coaxial_assembly_constraint" supertypes="binary_assembly_constraint coaxial_geometric_constraint"/>
      <entity name="coaxial_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="axial_geometry_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="1"/>
            <typename name="axial_geometry_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( q &lt;* SELF\explicit_constraint.reference_elements | ( SIZEOF( TYPEOF( q ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SPHERICAL_SURFACE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SPHERE' ] ) &gt; 0 ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="coaxiality_tolerance" supertypes="geometric_tolerance_with_datum_reference"/>
      <entity name="colour"/>
      <entity name="colour_rgb" supertypes="colour_specification">
         <explicit name="red">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="green">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="blue">
            <builtintype type="REAL"/>
         </explicit>
         <where expression="( ( 0 &lt;= red ) AND ( red &lt;= 1 ) )" label="wr1"/>
         <where expression="( ( 0 &lt;= green ) AND ( green &lt;= 1 ) )" label="wr2"/>
         <where expression="( ( 0 &lt;= blue ) AND ( blue &lt;= 1 ) )" label="wr3"/>
      </entity>
      <entity name="colour_specification" supertypes="colour">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="common_datum" supertypes="composite_shape_aspect datum">
         <where expression="( SIZEOF( SELF\composite_shape_aspect.component_relationships ) = 2 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( sar &lt;* SELF\composite_shape_aspect.component_relationships | ( NOT ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DATUM'  IN TYPEOF( sar.related_shape_aspect ) ) &#10;               AND ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMMON_DATUM' IN TYPEOF( sar.&#10;               related_shape_aspect ) ) ) ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="comparison_equal" supertypes="comparison_expression"/>
      <entity abstract.supertype="YES" name="comparison_expression" super.expression="ONEOF (comparison_equal, comparison_greater, comparison_greater_equal, comparison_less, comparison_less_equal, comparison_not_equal, like_expression)" supertypes="boolean_expression binary_generic_expression">
         <explicit name="operands">
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="expression"/>
            <redeclaration entity-ref="binary_generic_expression"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NUMERIC_EXPRESSION' IN TYPEOF( SELF\&#10;               binary_generic_expression.operands[1] ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'NUMERIC_EXPRESSION'  IN TYPEOF( SELF\binary_generic_expression.operands[2] ) ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_EXPRESSION'  IN TYPEOF( SELF\&#10;               binary_generic_expression.operands[1] ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'BOOLEAN_EXPRESSION'  IN TYPEOF( SELF\binary_generic_expression.operands[2] ) ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STRING_EXPRESSION'  IN TYPEOF( SELF\&#10;               binary_generic_expression.operands[1] ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'STRING_EXPRESSION'  IN TYPEOF( SELF\binary_generic_expression.operands[2] ) ) ) )" label="wr1"/>
      </entity>
      <entity name="comparison_greater" supertypes="comparison_expression"/>
      <entity name="comparison_greater_equal" supertypes="comparison_expression"/>
      <entity name="comparison_less" supertypes="comparison_expression"/>
      <entity name="comparison_less_equal" supertypes="comparison_expression"/>
      <entity name="comparison_not_equal" supertypes="comparison_expression"/>
      <entity abstract.supertype="YES" name="complex_area" super.expression="path_area_with_parameters ANDOR primitive_2d_with_inner_boundary" supertypes="primitive_2d"/>
      <entity name="complex_clause" supertypes="compound_representation_item"/>
      <entity name="complex_conjunctive_clause" supertypes="complex_clause"/>
      <entity name="complex_disjunctive_clause" supertypes="complex_clause"/>
      <entity name="complex_number_literal" supertypes="generic_literal">
         <explicit name="real_part">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="imag_part">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="complex_number_literal_polar" supertypes="complex_number_literal">
         <explicit name="modulus">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="argument">
            <builtintype type="REAL"/>
         </explicit>
         <derived expression="modulus * COS( argument )" name="real_part">
            <builtintype type="REAL"/>
            <redeclaration entity-ref="complex_number_literal"/>
         </derived>
         <derived expression="modulus * SIN( argument )" name="imag_part">
            <builtintype type="REAL"/>
            <redeclaration entity-ref="complex_number_literal"/>
         </derived>
         <where expression="( modulus &gt;= 0 )" label="wr1"/>
         <where expression="( ( 0 &lt;= argument ) AND ( argument &lt;= ( 2 * PI ) ) )" label="wr2"/>
      </entity>
      <entity name="complex_passage_padstack_definition" supertypes="stratum_stack_dependent_template passage_padstack_definition"/>
      <entity name="complex_shelled_solid" supertypes="shelled_solid">
         <explicit name="thickened_face_list">
            <aggregate lower="1" type="LIST" upper="?"/>
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="face_surface"/>
         </explicit>
         <explicit name="thickness_list">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="length_measure"/>
         </explicit>
         <where expression="( SIZEOF( thickened_face_list ) = SIZEOF( thickness_list ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* thickness_list | ( q = 0 ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="complex_triangulated_face" supertypes="tessellated_face">
         <explicit name="pnindex">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="triangle_strips">
            <aggregate lower="0" type="LIST" upper="?"/>
            <aggregate lower="3" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="triangle_fans">
            <aggregate lower="0" type="LIST" upper="?"/>
            <aggregate lower="3" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <where expression="( ( SIZEOF( pnindex ) = 0 ) OR ( SIZEOF( pnindex ) = SELF\tessellated_face.pnmax ) )" label="wr1"/>
         <where expression="( NOT ( ( SIZEOF( pnindex ) = 0 ) AND ( SELF\tessellated_face.pnmax &lt;&gt; coordinates.npoints ) ) )" label="wr2"/>
         <where expression="( NOT ( ( SIZEOF( triangle_strips ) = 0 ) AND ( SIZEOF( triangle_fans ) = 0 ) ) )" label="wr3"/>
      </entity>
      <entity name="complex_triangulated_surface_set" supertypes="tessellated_surface_set">
         <explicit name="pnindex">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="triangle_strips">
            <aggregate lower="0" type="LIST" upper="?"/>
            <aggregate lower="3" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="triangle_fans">
            <aggregate lower="0" type="LIST" upper="?"/>
            <aggregate lower="3" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <where expression="( ( SIZEOF( pnindex ) = 0 ) OR ( SIZEOF( pnindex ) = SELF\tessellated_surface_set.pnmax ) )" label="wr1"/>
         <where expression="( NOT ( ( SIZEOF( pnindex ) = 0 ) AND ( SELF\tessellated_surface_set.pnmax &lt;&gt; coordinates.npoints ) ) )" label="wr2"/>
         <where expression="( NOT ( ( SIZEOF( triangle_strips ) = 0 ) AND ( SIZEOF( triangle_fans ) = 0 ) ) )" label="wr3"/>
      </entity>
      <entity name="component_2d_location" supertypes="context_dependent_shape_representation shape_representation_relationship representation_relationship_with_transformation definitional_representation_relationship">
         <derived expression="SELF" name="representation_relation">
            <typename name="component_2d_location"/>
            <redeclaration entity-ref="context_dependent_shape_representation"/>
         </derived>
         <where expression="( SELF\representation_relationship.name = 'component 2d location' )" label="wr1"/>
      </entity>
      <entity name="component_3d_location" supertypes="context_dependent_shape_representation shape_representation_relationship representation_relationship_with_transformation definitional_representation_relationship">
         <derived expression="SELF" name="representation_relation">
            <typename name="component_3d_location"/>
            <redeclaration entity-ref="context_dependent_shape_representation"/>
         </derived>
         <where expression="( SELF\representation_relationship.name = 'component 3d location' )" label="wr1"/>
      </entity>
      <entity name="component_definition" supertypes="product_definition product_definition_relationship">
         <derived expression="SELF" name="related_product_definition">
            <typename name="component_definition"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </derived>
         <where expression="( NOT EXISTS( SELF\product_definition_relationship.description ) )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\property_definition.description ) )" label="wr2"/>
         <where expression="( SELF\product_definition_relationship.id = SELF\product_definition.id )" label="wr3"/>
         <where expression="( SELF\product_definition_relationship.name = 'definition usage' )" label="wr4"/>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'PRODUCT_DEFINITION_USAGE' ) IN &#10;               TYPEOF( SELF ) ) )" label="wr5"/>
      </entity>
      <entity name="component_feature" super.expression="ONEOF (physical_component_feature, laminate_component_feature)" supertypes="shape_aspect">
         <explicit name="of_shape">
            <typename name="assembly_component"/>
            <redeclaration entity-ref="shape_aspect"/>
         </explicit>
      </entity>
      <entity name="component_feature_joint" supertypes="shape_aspect_relationship shape_aspect">
         <explicit name="relating_shape_aspect">
            <typename name="component_feature"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="component_feature"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
      </entity>
      <entity name="component_feature_relationship" supertypes="shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="component_feature"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="component_feature"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <where expression="( SELF\shape_aspect_relationship.related_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.relating_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="component_functional_terminal" supertypes="shape_aspect"/>
      <entity name="component_functional_unit" supertypes="product_definition"/>
      <entity name="component_material_relationship" supertypes="group property_definition">
         <explicit name="definition">
            <typename name="physical_unit"/>
            <redeclaration entity-ref="property_definition"/>
         </explicit>
      </entity>
      <entity name="component_material_relationship_assignment" supertypes="group_assignment role_association">
         <explicit name="assigned_group">
            <typename name="component_material_relationship"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="component_material_relationship_assignment_item"/>
         </explicit>
         <derived expression="SELF" name="item_with_role">
            <typename name="component_material_relationship_assignment"/>
            <redeclaration entity-ref="role_association"/>
         </derived>
      </entity>
      <entity name="component_mating_constraint_condition" supertypes="shape_aspect">
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect.name"/>
            <unique.attribute attribute="SELF\shape_aspect.of_shape"/>
         </unique>
      </entity>
      <entity name="component_mounting_feature" supertypes="physical_component_feature"/>
      <entity name="component_part_2d_non_planar_geometric_representation_relationship" supertypes="shape_representation_relationship representation_relationship_with_transformation"/>
      <entity name="component_path_shape_aspect" supertypes="shape_aspect">
         <explicit name="location">
            <typename name="multi_or_next_assembly_usage_occurrence"/>
         </explicit>
         <explicit name="component_shape_aspect">
            <typename name="internal_or_reflected_shape_aspect"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="location"/>
            <unique.attribute attribute="component_shape_aspect"/>
         </unique>
      </entity>
      <entity name="component_terminal" super.expression="ONEOF (physical_component_terminal, laminate_component_join_terminal)" supertypes="component_feature"/>
      <entity name="component_termination_passage" supertypes="plated_passage"/>
      <entity name="component_termination_passage_template" supertypes="continuous_template inter_stratum_feature_template"/>
      <entity name="composite_array_shape_aspect" super.expression="ONEOF (linear_composite_array_shape_aspect, rectangular_composite_array_shape_aspect)" supertypes="composite_shape_aspect"/>
      <entity name="composite_array_shape_aspect_link" supertypes="shape_aspect shape_aspect_relationship">
         <where expression="( SELF\shape_aspect_relationship.related_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.relating_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="composite_assembly_sequence_definition" supertypes="product_definition">
         <where expression="( SIZEOF( QUERY ( pdr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PRODUCT_DEFINITION_RELATIONSHIP.'  + 'RELATING_PRODUCT_DEFINITION' ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'NEXT_ASSEMBLY_USAGE_OCCURRENCE' ) IN &#10;               TYPEOF( pdr ) ) ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="composite_assembly_table" supertypes="part_laminate_table"/>
      <entity name="composite_curve" supertypes="bounded_curve">
         <explicit name="segments">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="composite_curve_segment"/>
         </explicit>
         <explicit name="self_intersect">
            <builtintype type="LOGICAL"/>
         </explicit>
         <derived expression="SIZEOF( segments )" name="n_segments">
            <builtintype type="INTEGER"/>
         </derived>
         <derived expression="segments[n_segments].transition &lt;&gt; discontinuous" name="closed_curve">
            <builtintype type="LOGICAL"/>
         </derived>
         <where expression="( ( ( NOT closed_curve ) AND ( SIZEOF( QUERY ( temp &lt;* segments | ( temp.transition = discontinuous ) ) ) = 1 ) ) OR &#10;               ( closed_curve AND ( SIZEOF( QUERY ( temp &lt;* segments | ( temp.transition = discontinuous ) ) ) = 0 ) ) )" label="wr1"/>
      </entity>
      <entity name="composite_curve_on_surface" super.expression="boundary_curve" supertypes="composite_curve">
         <derived expression="get_basis_surface( SELF )" name="basis_surface">
            <aggregate lower="0" type="SET" upper="2"/>
            <typename name="surface"/>
         </derived>
         <where expression="( SIZEOF( basis_surface ) &gt; 0 )" label="wr1"/>
         <where expression="constraints_composite_curve_on_surface( SELF )" label="wr2"/>
      </entity>
      <entity name="composite_curve_segment" supertypes="founded_item">
         <explicit name="transition">
            <typename name="transition_code"/>
         </explicit>
         <explicit name="same_sense">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="parent_curve">
            <typename name="curve"/>
         </explicit>
         <inverse attribute="segments" entity="composite_curve" name="using_curves">
            <inverse.aggregate lower="1" type="BAG" upper="?"/>
         </inverse>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOUNDED_CURVE' IN TYPEOF( parent_curve ) )" label="wr1"/>
      </entity>
      <entity name="composite_curve_transition_locator" supertypes="founded_item">
         <explicit name="basis_curve">
            <typename name="composite_curve"/>
         </explicit>
         <explicit name="transition_index">
            <builtintype type="INTEGER"/>
         </explicit>
         <where expression="( SIZEOF( using_representations( SELF.basis_curve ) * relating_shape_representations_of_extreme_values( SELF ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="composite_group_shape_aspect" supertypes="composite_shape_aspect"/>
      <entity name="composite_hole" supertypes="compound_feature">
         <where expression="( SELF\characterized_object.description IN [ 'counterbore', 'countersunk'] )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) &#10;               AND ( SIZEOF( QUERY ( sar &lt;* csa.component_relationships | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;               sar ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUND_HOLE' IN TYPEOF( sar.&#10;               related_shape_aspect ) ) ) ) ) = 2 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr2"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'countersunk' ) ) OR ( SIZEOF( QUERY ( pds &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) &#10;               AND ( SIZEOF( QUERY ( csa &lt;* USEDIN( pds, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_ASPECT.OF_SHAPE'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) AND ( SIZEOF( QUERY ( sar &lt;* csa.component_relationships | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUND_HOLE'  IN TYPEOF( sar.&#10;               related_shape_aspect ) ) AND ( NOT ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( sar.related_shape_aspect, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'change in diameter occurrence' ) AND ( SIZEOF( QUERY ( fcr2 &lt;* QUERY ( sar2 &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATING_SHAPE_ASPECT'  ) | ( ( sar2.description = 'taper usage' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;               sar2 ) ) ) ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TAPER' IN TYPEOF( fcr2.&#10;               related_shape_aspect ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 1 ) )" label="wr3"/>
      </entity>
      <entity name="composite_material_designation" supertypes="material_designation"/>
      <entity name="composite_shape_aspect" super.expression="ONEOF (continuous_shape_aspect, common_datum, composite_group_shape_aspect)" supertypes="shape_aspect">
         <inverse attribute="relating_shape_aspect" entity="shape_aspect_relationship" name="component_relationships">
            <inverse.aggregate lower="2" type="SET" upper="?"/>
         </inverse>
      </entity>
      <entity name="composite_sheet_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GEOMETRICALLY_BOUNDED_SURFACE_SHAPE_REPRESENTATION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'MANIFOLD_SURFACE_SHAPE_REPRESENTATION'] &#10;               * TYPEOF( SELF ) ) = 1 )" label="wr1"/>
      </entity>
      <entity name="composite_signal_property_relationship" supertypes="property_definition property_definition_relationship">
         <where expression="( SELF\property_definition_relationship.related_property_definition.definition :&lt;&gt;: SELF\&#10;               property_definition_relationship.relating_property_definition.definition )" label="wr1"/>
      </entity>
      <entity name="composite_text" supertypes="geometric_representation_item">
         <explicit name="collected_text">
            <aggregate lower="2" type="SET" upper="?"/>
            <typename name="text_or_character"/>
         </explicit>
         <where expression="acyclic_composite_text( SELF, SELF.collected_text )" label="wr1"/>
      </entity>
      <entity name="composite_text_with_associated_curves" supertypes="composite_text">
         <explicit name="associated_curves">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="curve"/>
         </explicit>
      </entity>
      <entity name="composite_text_with_blanking_box" supertypes="composite_text">
         <explicit name="blanking">
            <typename name="planar_box"/>
         </explicit>
      </entity>
      <entity name="composite_text_with_delineation" supertypes="composite_text">
         <explicit name="delineation">
            <typename name="text_delineation"/>
         </explicit>
      </entity>
      <entity name="composite_text_with_extent" supertypes="composite_text">
         <explicit name="extent">
            <typename name="planar_extent"/>
         </explicit>
      </entity>
      <entity name="composite_unit_shape_aspect" supertypes="composite_shape_aspect"/>
      <entity name="compound_feature" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pds &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( csa.name = &#10;               'compound feature in solid'  ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) ) ) &#10;               = 1 ) ) ) ) = 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) &#10;               AND ( SIZEOF( QUERY ( fcr &lt;* csa.component_relationships | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;               fcr ) ) ) ) ) = 0 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) ) ) &#10;               = 1 ) ) ) ) = 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) &#10;               AND ( SIZEOF( QUERY ( sar &lt;* csa.component_relationships | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.THREAD'  IN TYPEOF( sar.related_shape_aspect ) ) ) ) &#10;               = 0 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) &#10;               AND ( SIZEOF( QUERY ( sar &lt;* csa.component_relationships | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOUND_FEATURE'  IN TYPEOF( sar.&#10;               related_shape_aspect ) ) AND ( sar.related_shape_aspect\characterized_object.name &lt;&gt; SELF\characterized_object.name ) ) ) ) &#10;               = 0 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr6"/>
      </entity>
      <entity name="compound_representation_item" super.expression="ONEOF (point_and_vector, point_path) ANDOR ONEOF (row_representation_item, table_representation_item)" supertypes="representation_item">
         <explicit name="item_element">
            <typename name="compound_item_definition"/>
         </explicit>
      </entity>
      <entity name="compound_shape_representation" supertypes="shape_representation">
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'GEOMETRIC_REPRESENTATION_CONTEXT' ) IN &#10;               TYPEOF( SELF.context_of_items ) ) AND ( SELF.context_of_items\geometric_representation_context.&#10;               coordinate_space_dimension = 3 ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( cbsr_i &lt;* SELF.items | ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'EDGE_BASED_WIREFRAME_MODEL', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'FACE_BASED_SURFACE_MODEL', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'MAPPED_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'AXIS2_PLACEMENT_3D'] * TYPEOF( cbsr_i ) ) &#10;               &lt;&gt; 1 ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( cbsr_i &lt;* SELF.items | ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'EDGE_BASED_WIREFRAME_MODEL', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'FACE_BASED_SURFACE_MODEL', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'MAPPED_ITEM'] * TYPEOF( cbsr_i ) ) = 1 ) ) ) &#10;               &gt; 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( cbsr_i &lt;* SELF.items | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' +&#10;               'MAPPED_ITEM' ) IN TYPEOF( cbsr_i ) ) AND ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'COMPOUND_SHAPE_REPRESENTATION', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'EDGE_BASED_WIREFRAME_SHAPE_REPRESENTATION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'NON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION' ] &#10;               * TYPEOF( cbsr_i\mapped_item.mapping_source ) ) &lt;&gt; 1 ) ) ) ) = 0 )" label="wr4"/>
      </entity>
      <entity name="concat_expression" supertypes="string_expression multiple_arity_generic_expression">
         <explicit name="operands">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="string_expression"/>
            <redeclaration entity-ref="multiple_arity_generic_expression"/>
         </explicit>
      </entity>
      <entity name="concentricity_tolerance" supertypes="geometric_tolerance_with_datum_reference"/>
      <entity name="concept_feature_operator">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="concept_feature_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_product_concept_feature">
            <typename name="product_concept_feature"/>
         </explicit>
         <explicit name="related_product_concept_feature">
            <typename name="product_concept_feature"/>
         </explicit>
      </entity>
      <entity name="concept_feature_relationship_with_condition" supertypes="concept_feature_relationship">
         <explicit name="conditional_operator">
            <typename name="concept_feature_operator"/>
         </explicit>
      </entity>
      <entity name="conditional_concept_feature" supertypes="product_concept_feature">
         <explicit name="condition">
            <typename name="concept_feature_relationship_with_condition"/>
         </explicit>
      </entity>
      <entity name="conductance_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONDUCTANCE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="conductance_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.siemens ) )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="conductive_interconnect_element" super.expression="ONEOF (unrouted_conductive_interconnect_element, conductive_interconnect_element_with_pre_defined_transitions)" supertypes="stratum_feature_template_component"/>
      <entity name="conductive_interconnect_element_terminal_link" supertypes="shape_aspect shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="laminate_component_feature"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="laminate_component_feature"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <where expression="( SELF\shape_aspect_relationship.related_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.relating_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="conductive_interconnect_element_with_pre_defined_transitions" supertypes="conductive_interconnect_element item_identified_representation_usage">
         <derived expression="SELF" name="definition">
            <typename name="property_definition"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </derived>
      </entity>
      <entity name="configurable_item" supertypes="configuration_item">
         <explicit name="item_concept_feature">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="product_concept_feature_association"/>
         </explicit>
      </entity>
      <entity name="configuration_design">
         <explicit name="configuration">
            <typename name="configuration_item"/>
         </explicit>
         <explicit name="design">
            <typename name="configuration_design_item"/>
         </explicit>
         <derived expression="get_name_value( SELF )" name="name">
            <typename name="label"/>
         </derived>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <unique label="ur1">
            <unique.attribute attribute="configuration"/>
            <unique.attribute attribute="design"/>
         </unique>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.'&#10;               + 'NAMED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="configuration_effectivity" supertypes="product_definition_effectivity">
         <explicit name="configuration">
            <typename name="configuration_design"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="configuration"/>
            <unique.attribute attribute="SELF\product_definition_effectivity.usage"/>
            <unique.attribute attribute="SELF\effectivity.id"/>
         </unique>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_USAGE' IN TYPEOF( SELF\&#10;               product_definition_effectivity.usage ) )" label="wr1"/>
      </entity>
      <entity name="configuration_item">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="item_concept">
            <typename name="product_concept"/>
         </explicit>
         <explicit name="purpose" optional="YES">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="configuration_item_hierarchical_relationship" supertypes="configuration_item_relationship"/>
      <entity name="configuration_item_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_configuration_item">
            <typename name="configuration_item"/>
         </explicit>
         <explicit name="related_configuration_item">
            <typename name="configuration_item"/>
         </explicit>
      </entity>
      <entity name="configuration_item_revision_sequence" supertypes="configuration_item_relationship"/>
      <entity name="configured_effectivity_assignment" supertypes="effectivity_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="configured_effectivity_item"/>
         </explicit>
         <where expression="( ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EFFECTIVITY'] * TYPEOF( SELF.&#10;               assigned_effectivity ) ) = 1 ) AND ( SELF.assigned_effectivity.id = 'configuration validity' ) )" label="wr1"/>
         <where expression="( SIZEOF( SELF.items ) = 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION'  IN TYPEOF( i ) ) ) OR ( NOT ( i\product_definition.frame_of_reference.name IN [&#10;               'conceptual definition' , 'part occurrence', 'functional definition', 'alternative definition'] ) ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SELF.role.name IN [ 'design', 'usage'] )" label="wr4"/>
         <where expression="( ( SELF.role.name &lt;&gt; 'design' ) OR ( SIZEOF( QUERY ( i &lt;* SELF.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( i ) ) AND ( i\&#10;               product_definition.frame_of_reference.name = 'part occurrence' ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( ( SELF.role.name &lt;&gt; 'usage' ) OR ( SIZEOF( QUERY ( i &lt;* SELF.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( i ) ) AND ( i\&#10;               product_definition.frame_of_reference.name = 'conceptual definition' ) ) ) ) = 0 ) )" label="wr6"/>
         <where expression="( SELF.role.description IN [ 'exception', 'inherited', 'local'] )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( x &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'EFFECTIVITY_CONTEXT_ASSIGNMENT.ASSIGNED_EFFECTIVITY_ASSIGNMENT'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONFIGURED_EFFECTIVITY_CONTEXT_ASSIGNMENT'  IN&#10;               TYPEOF( x ) ) ) ) = 1 )" label="wr8"/>
      </entity>
      <entity name="configured_effectivity_context_assignment" supertypes="effectivity_context_assignment">
         <explicit name="assigned_effectivity_assignment">
            <typename name="configured_effectivity_assignment"/>
            <redeclaration entity-ref="effectivity_context_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="configured_effectivity_context_item"/>
         </explicit>
         <where expression="( SIZEOF( SELF.items ) = 1 )" label="wr1"/>
      </entity>
      <entity name="conic" super.expression="ONEOF (circle, ellipse, hyperbola, parabola)" supertypes="curve">
         <explicit name="position">
            <typename name="axis2_placement"/>
         </explicit>
      </entity>
      <entity name="conical_stepped_hole_transition" supertypes="geometric_representation_item">
         <explicit name="transition_number">
            <typename name="positive_integer"/>
         </explicit>
         <explicit name="cone_apex_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="cone_base_radius">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="conical_surface" supertypes="elementary_surface">
         <explicit name="radius">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="semi_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( radius &gt;= 0 )" label="wr1"/>
      </entity>
      <entity name="connected_area_component" supertypes="area_component"/>
      <entity name="connected_edge_set" supertypes="topological_representation_item">
         <explicit name="ces_edges">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="edge"/>
         </explicit>
      </entity>
      <entity name="connected_face_set" super.expression="ONEOF (closed_shell, open_shell)" supertypes="topological_representation_item">
         <explicit name="cfs_faces">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="face"/>
         </explicit>
      </entity>
      <entity name="connected_face_sub_set" supertypes="connected_face_set">
         <explicit name="parent_face_set">
            <typename name="connected_face_set"/>
         </explicit>
      </entity>
      <entity name="connection_zone_based_assembly_joint" supertypes="assembly_joint"/>
      <entity name="connection_zone_based_fabrication_joint" supertypes="fabrication_joint"/>
      <entity name="connection_zone_interface_plane_relationship" supertypes="shape_aspect shape_aspect_relationship">
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect.name"/>
         </unique>
      </entity>
      <entity name="connection_zone_map_identification" supertypes="shape_aspect representation_relationship">
         <explicit name="rep_1">
            <typename name="usage_view_connection_zone_terminal_shape_relationship"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="usage_view_connection_zone_terminal_shape_relationship"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <where expression="( SELF\representation_relationship.rep_2 :&lt;&gt;: SELF\representation_relationship.rep_1 )" label="wr1"/>
      </entity>
      <entity name="connector_based_interconnect_definition" supertypes="property_definition">
         <explicit name="definition">
            <typename name="physical_unit_interconnect_definition"/>
            <redeclaration entity-ref="property_definition"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="SELF\property_definition.name"/>
            <unique.attribute attribute="definition"/>
         </unique>
      </entity>
      <entity name="constant_function" supertypes="maths_function generic_literal">
         <explicit name="sole_output">
            <typename name="maths_value"/>
         </explicit>
         <explicit name="source_of_domain">
            <typename name="maths_space_or_function"/>
         </explicit>
         <where expression="no_cyclic_domain_reference( source_of_domain, [SELF] )" label="wr1"/>
         <where expression="expression_is_constant( domain_from( source_of_domain ) )" label="wr2"/>
      </entity>
      <entity name="constrained_kinematic_motion_representation" supertypes="representation_relationship_with_transformation">
         <explicit name="rep_1">
            <typename name="representative_shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="representative_shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' IN TYPEOF( SELF\&#10;               representation_relationship_with_transformation.transformation_operator\item_defined_transformation.&#10;               transform_item_1 ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' &#10;               IN TYPEOF( SELF\representation_relationship_with_transformation.transformation_operator\item_defined_transformation&#10;               .transform_item_2 ) ) )" label="wr1"/>
         <where expression="( ( dimension_of( SELF\representation_relationship_with_transformation.transformation_operator\&#10;               item_defined_transformation.transform_item_1 ) = 3 ) AND ( dimension_of( SELF\&#10;               representation_relationship_with_transformation.transformation_operator\item_defined_transformation.&#10;               transform_item_2 ) = 3 ) )" label="wr2"/>
         <where expression="( ( SELF\representation_relationship.rep_1 IN ( using_representations( SELF\&#10;               representation_relationship_with_transformation.transformation_operator\item_defined_transformation.&#10;               transform_item_1 ) + using_representation_with_mapping( SELF\representation_relationship_with_transformation.&#10;               transformation_operator\item_defined_transformation.transform_item_1 ) ) ) AND ( SELF\representation_relationship.&#10;               rep_2 IN ( using_representations( SELF\representation_relationship_with_transformation.transformation_operator\&#10;               item_defined_transformation.transform_item_2 ) + using_representation_with_mapping( SELF\&#10;               representation_relationship_with_transformation.transformation_operator\item_defined_transformation.&#10;               transform_item_2 ) ) ) )" label="wr3"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.KINEMATIC_PAIR' IN TYPEOF( SELF\&#10;               representation_relationship_with_transformation.transformation_operator ) )" label="wr4"/>
      </entity>
      <entity name="constructive_geometry_representation" supertypes="representation">
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_REPRESENTATION_CONTEXT' IN TYPEOF( &#10;               SELF.context_of_items ) ) AND ( 2 &lt;= SELF.context_of_items\geometric_representation_context.&#10;               coordinate_space_dimension ) AND ( SELF.context_of_items\geometric_representation_context.&#10;               coordinate_space_dimension &lt;= 3 ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( cgr_i &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLACEMENT' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SURFACE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT' ] * TYPEOF( cgr_i ) ) &lt;&gt; 1 ) ) ) &#10;               = 0 )" label="wr2"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'REPRESENTATION_RELATIONSHIP.REP_2'  ) ) &gt; 0 )" label="wr3"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'REPRESENTATION_MAP.'&#10;               + 'MAPPED_REPRESENTATION'  ) ) = 0 )" label="wr4"/>
      </entity>
      <entity name="constructive_geometry_representation_relationship" supertypes="representation_relationship">
         <explicit name="rep_1">
            <typename name="constructive_geometry_representation_or_shape_represenation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="constructive_geometry_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <where expression="( ( SELF.rep_1.context_of_items :=: SELF.rep_2.context_of_items ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_REPRESENTATION_CONTEXT'  IN TYPEOF( &#10;               SELF.rep_1.context_of_items ) ) )" label="wr1"/>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION'  ) IN TYPEOF( SELF ) ) )" label="wr2"/>
      </entity>
      <entity name="contact_ratio_representation" supertypes="representation">
         <where expression="( ( SIZEOF( SELF.items ) = 1 ) AND ( SIZEOF( QUERY ( i &lt;* SELF.items | ( ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'VALUE_RANGE'] * TYPEOF( i ) ) = 1 ) AND &#10;               ( i.name = 'ratio value' ) ) ) ) = 1 ) )" label="wr1"/>
         <where expression="( ( SIZEOF( QUERY ( pdr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PROPERTY_DEFINITION_REPRESENTATION.'  + 'USED_REPRESENTATION' ) | ( pdr\property_definition_representation.name =&#10;               'contact ratio reference' ) ) ) = 1 ) AND ( SIZEOF( QUERY ( pdr &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PROPERTY_DEFINITION_REPRESENTATION.' + &#10;               'USED_REPRESENTATION'  ) | ( ( pdr\property_definition_representation.name = 'contact ratio reference' ) AND ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION' ) IN TYPEOF( pdr\&#10;               property_definition_representation.definition\property_definition.definition ) ) ) ) ) = 1 ) )" label="wr2"/>
         <where expression="( ( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PROPERTY_DEFINITION_REPRESENTATION.'  + 'USED_REPRESENTATION' ) ) = 1 ) AND ( SIZEOF( QUERY ( pdr &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PROPERTY_DEFINITION_REPRESENTATION.' + &#10;               'USED_REPRESENTATION'  ) | ( SIZEOF( QUERY ( gpa &lt;* USEDIN( pdr.definition, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'GENERAL_PROPERTY_ASSOCIATION.' + &#10;               'DERIVED_DEFINITION'  ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GENERAL_PROPERTY'  ) IN TYPEOF( gpa\general_property_association.base_definition ) ) AND ( gpa\&#10;               general_property_association.base_definition\general_property.name = 'surface_condition' ) ) ) ) = 1 ) ) ) = 1 ) )" label="wr3"/>
      </entity>
      <entity name="contact_size_dependent_land" supertypes="land"/>
      <entity name="contacting_feature" supertypes="shape_aspect">
         <where expression="( SELF\shape_aspect.product_definitional = FALSE )" label="wr1"/>
      </entity>
      <entity name="context_dependent_invisibility" supertypes="invisibility">
         <explicit name="presentation_context">
            <typename name="invisibility_context"/>
         </explicit>
      </entity>
      <entity name="context_dependent_kinematic_link_representation">
         <explicit name="representation_relation">
            <typename name="kinematic_link_representation_association"/>
         </explicit>
         <explicit name="represented_product_relation">
            <typename name="product_definition_relationship_kinematics"/>
         </explicit>
      </entity>
      <entity name="context_dependent_over_riding_styled_item" supertypes="over_riding_styled_item">
         <explicit name="style_context">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="style_context_select"/>
         </explicit>
         <where expression="( ( SIZEOF( QUERY ( sc &lt;* SELF.style_context | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'REPRESENTATION_ITEM'  IN TYPEOF( sc ) ) ) ) = 1 ) OR ( SIZEOF( QUERY ( sc &lt;* SELF.style_context | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( sc ) ) OR ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATION_RELATIONSHIP'  IN TYPEOF( sc ) ) ) ) ) &#10;               = SIZEOF( style_context ) ) )" label="wr1"/>
      </entity>
      <entity name="context_dependent_shape_representation">
         <explicit name="representation_relation">
            <typename name="shape_representation_relationship"/>
         </explicit>
         <explicit name="represented_product_relation">
            <typename name="product_definition_shape"/>
         </explicit>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <derived expression="get_name_value( SELF )" name="name">
            <typename name="label"/>
         </derived>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP' IN TYPEOF( SELF&#10;               .represented_product_relation.definition ) )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr2"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.'&#10;               + 'NAMED_ITEM'  ) ) &lt;= 1 )" label="wr3"/>
      </entity>
      <entity name="context_dependent_unit" supertypes="named_unit">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="continuous_shape_aspect" super.expression="ONEOF (between_shape_aspect, all_around_shape_aspect)" supertypes="composite_shape_aspect"/>
      <entity name="continuous_template" supertypes="geometric_template"/>
      <entity name="contract">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="purpose">
            <typename name="text"/>
         </explicit>
         <explicit name="kind">
            <typename name="contract_type"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="contract_assignment">
         <explicit name="assigned_contract">
            <typename name="contract"/>
         </explicit>
         <derived expression="get_role( SELF )" name="role">
            <typename name="object_role"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ROLE_ASSOCIATION.'&#10;               + 'ITEM_WITH_ROLE'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="contract_relationship">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_contract">
            <typename name="contract"/>
         </explicit>
         <explicit name="related_contract">
            <typename name="contract"/>
         </explicit>
      </entity>
      <entity name="contract_type">
         <explicit name="description">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="conversion_based_unit" supertypes="named_unit">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="conversion_factor">
            <typename name="measure_with_unit"/>
         </explicit>
         <where expression="( SELF\named_unit.dimensions = derive_dimensional_exponents( conversion_factor\measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="coordinated_geometric_relationship_with_2d_3d_placement_transformation" supertypes="shape_representation_relationship representation_relationship_with_transformation">
         <explicit name="transformation_operator">
            <typename name="axis_placement_2d_3d_mapping"/>
            <redeclaration entity-ref="representation_relationship_with_transformation"/>
         </explicit>
         <where expression="acyclic_representation_relationship( SELF, [SELF\representation_relationship.rep_2], &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'REPRESENTATION' )" label="wr1"/>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DEFINITIONAL_REPRESENTATION_RELATIONSHIP' &#10;               IN TYPEOF( SELF ) ) )" label="wr2"/>
      </entity>
      <entity name="coordinated_universal_time_offset">
         <explicit name="hour_offset">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="minute_offset" optional="YES">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="sense">
            <typename name="ahead_or_behind"/>
         </explicit>
         <derived expression="NVL( minute_offset, 0 )" name="actual_minute_offset">
            <builtintype type="INTEGER"/>
         </derived>
         <where expression="( ( 0 &lt;= hour_offset ) AND ( hour_offset &lt; 24 ) )" label="wr1"/>
         <where expression="( ( 0 &lt;= actual_minute_offset ) AND ( actual_minute_offset &lt;= 59 ) )" label="wr2"/>
         <where expression="( NOT ( ( ( hour_offset &lt;&gt; 0 ) OR ( actual_minute_offset &lt;&gt; 0 ) ) AND ( sense = exact ) ) )" label="wr3"/>
      </entity>
      <entity name="coordinates_list" supertypes="tessellated_item">
         <explicit name="npoints">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="position_coords">
            <aggregate lower="1" type="LIST" upper="?"/>
            <aggregate lower="3" type="LIST" upper="3"/>
            <builtintype type="REAL"/>
         </explicit>
         <where expression="( npoints = SIZEOF( position_coords ) )" label="wr1"/>
         <where expression="( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPOSITIONED_TESSELLATED_ITEM'] * &#10;               TYPEOF( SELF ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="copy_stratum_technology_occurrence_relationship" supertypes="derived_stratum_technology_occurrence_relationship"/>
      <entity name="cos_function" supertypes="unary_function_call"/>
      <entity name="counterbore_passage_template" supertypes="unsupported_passage_template"/>
      <entity name="countersunk_passage_template" supertypes="unsupported_passage_template"/>
      <entity name="csg_2d_shape_representation" supertypes="shape_representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="csg_2d_shape_select"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SELF.context_of_items\geometric_representation_context.coordinate_space_dimension = 2 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CSG_SOLID' ] * TYPEOF( it ) ) = 1 ) OR ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MAPPED_ITEM'  IN TYPEOF( it ) ) AND ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' +&#10;               'CSG_2D_SHAPE_REPRESENTATION' ) IN TYPEOF( it\mapped_item.mapping_source.mapped_representation ) ) ) ) ) ) &gt;= 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MAPPED_ITEM'  IN TYPEOF( it ) ) AND ( NOT ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CSG_2D_SHAPE_REPRESENTATION' ) IN &#10;               TYPEOF( it\mapped_item.mapping_source.mapped_representation ) ) ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="csg_primitive_solid_2d" supertypes="csg_solid_2d">
         <explicit name="tree_root_expression">
            <typename name="bounded_primitive_2d"/>
            <redeclaration entity-ref="csg_solid"/>
         </explicit>
      </entity>
      <entity name="csg_shape_representation" supertypes="shape_representation">
         <where expression="( SELF.context_of_items\geometric_representation_context.coordinate_space_dimension = 3 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CSG_SOLID' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_REPLICA' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REVOLVED_FACE_SOLID' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EXTRUDED_FACE_SOLID' ] * TYPEOF( it ) ) &lt;&gt; 1 ) ) ) &#10;               = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CSG_SHAPE_REPRESENTATION'  IN TYPEOF( mi\&#10;               mapped_item.mapping_source.mapped_representation ) ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( sr &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_REPLICA'  IN TYPEOF( it ) ) ) | ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CSG_SOLID', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REVOLVED_FACE_SOLID' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EXTRUDED_FACE_SOLID' ] * TYPEOF( sr\&#10;               solid_replica.parent_solid ) ) = 0 ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'AXIS2_PLACEMENT_3D'  IN TYPEOF( it ) ) ) ) ) &gt; 0 )" label="wr5"/>
      </entity>
      <entity name="csg_solid" supertypes="solid_model">
         <explicit name="tree_root_expression">
            <typename name="csg_select"/>
         </explicit>
      </entity>
      <entity name="csg_solid_2d" supertypes="csg_solid">
         <explicit name="tree_root_expression">
            <typename name="csg_select_2d"/>
            <redeclaration entity-ref="csg_solid"/>
         </explicit>
         <where expression="valid_csg_2d_primitives( SELF )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="currency" super.expression="ONEOF (externally_defined_currency, iso4217_currency)" supertypes="context_dependent_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="currency_measure_with_unit" supertypes="measure_with_unit">
         <explicit name="unit_component">
            <typename name="currency"/>
            <redeclaration entity-ref="measure_with_unit"/>
         </explicit>
      </entity>
      <entity name="current_change_element_assignment" supertypes="group_assignment">
         <explicit name="assigned_group">
            <typename name="current_element_assignment_select"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="change_management_object"/>
         </explicit>
      </entity>
      <entity name="curve" super.expression="ONEOF (line, conic, pcurve, surface_curve, offset_curve_2d, offset_curve_3d, curve_replica)" supertypes="geometric_representation_item"/>
      <entity name="curve_based_path" supertypes="path_node">
         <explicit name="path_curve">
            <typename name="curve"/>
         </explicit>
      </entity>
      <entity name="curve_based_path_with_orientation" supertypes="kinematic_path_segment">
         <explicit name="position_curve">
            <typename name="bounded_curve"/>
         </explicit>
         <explicit name="orientation_curve">
            <typename name="bounded_curve"/>
         </explicit>
         <where expression="( TYPEOF( position_curve ) = TYPEOF( orientation_curve ) )" label="wr1"/>
      </entity>
      <entity name="curve_based_path_with_orientation_and_parameters" supertypes="curve_based_path_with_orientation">
         <explicit name="parameters">
            <typename name="path_parameter_representation"/>
         </explicit>
      </entity>
      <entity name="curve_bounded_surface" supertypes="bounded_surface">
         <explicit name="basis_surface">
            <typename name="surface"/>
         </explicit>
         <explicit name="boundaries">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="boundary_curve"/>
         </explicit>
         <explicit name="implicit_outer">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( ( NOT implicit_outer ) OR ( SIZEOF( QUERY ( temp &lt;* boundaries | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OUTER_BOUNDARY_CURVE'  IN TYPEOF( temp ) ) ) ) &#10;               = 0 ) )" label="wr1"/>
         <where expression="( ( NOT implicit_outer ) OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOUNDED_SURFACE' IN &#10;               TYPEOF( basis_surface ) ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( temp &lt;* boundaries | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'OUTER_BOUNDARY_CURVE'  IN TYPEOF( temp ) ) ) ) &lt;= 1 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( temp &lt;* boundaries | ( temp\composite_curve_on_surface.basis_surface[1] &lt;&gt; SELF.basis_surface ) ) ) &#10;               = 0 )" label="wr4"/>
      </entity>
      <entity name="curve_dimension" supertypes="dimension_curve_directed_callout"/>
      <entity name="curve_distance_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="2"/>
            <typename name="curve"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="4"/>
            <typename name="point_curve_or_surface_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="near_points">
            <aggregate lower="0" type="SET" upper="4"/>
            <typename name="near_point_relationship"/>
         </explicit>
         <where expression="( ( SIZEOF( SELF\explicit_constraint.reference_elements ) &gt; 0 ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CDGC_WITH_DIMENSION'  IN TYPEOF( SELF ) ) AND &#10;               ( SIZEOF( SELF\explicit_constraint.constrained_elements ) = 2 ) ) )" label="wr1"/>
         <where expression="( SIZEOF( near_points ) &lt;= SIZEOF( SELF\explicit_constraint.reference_elements ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* near_points | ( NOT ( q\representation_item_relationship.relating_representation_item IN SELF\&#10;               explicit_constraint.reference_elements ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="curve_length_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="bounded_curve"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <where expression="( SIZEOF( SELF\explicit_constraint.reference_elements ) = 0 )" label="wr1"/>
      </entity>
      <entity name="curve_replica" supertypes="curve">
         <explicit name="parent_curve">
            <typename name="curve"/>
         </explicit>
         <explicit name="transformation">
            <typename name="cartesian_transformation_operator"/>
         </explicit>
         <where expression="( transformation.dim = parent_curve.dim )" label="wr1"/>
         <where expression="acyclic_curve_replica( SELF, parent_curve )" label="wr2"/>
      </entity>
      <entity name="curve_segment_set" supertypes="geometric_representation_item">
         <explicit name="segments">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="composite_curve_segment"/>
         </explicit>
      </entity>
      <entity name="curve_smoothness_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="curve_segment_set"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="smoothness">
            <typename name="transition_code"/>
         </explicit>
         <where expression="( SIZEOF( SELF\explicit_constraint.reference_elements ) = 0 )" label="wr1"/>
      </entity>
      <entity name="curve_style" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="curve_font" optional="YES">
            <typename name="curve_font_or_scaled_curve_font_select"/>
         </explicit>
         <explicit name="curve_width" optional="YES">
            <typename name="size_select"/>
         </explicit>
         <explicit name="curve_colour" optional="YES">
            <typename name="colour"/>
         </explicit>
         <where expression="( EXISTS( curve_font ) OR EXISTS( curve_width ) OR EXISTS( curve_colour ) )" label="wr1"/>
      </entity>
      <entity name="curve_style_font" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="pattern_list">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="curve_style_font_pattern"/>
         </explicit>
      </entity>
      <entity name="curve_style_font_and_scaling" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="curve_font">
            <typename name="curve_style_font_select"/>
         </explicit>
         <explicit name="curve_font_scaling">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="curve_style_font_pattern" supertypes="founded_item">
         <explicit name="visible_segment_length">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="invisible_segment_length">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="curve_style_parameters_representation" supertypes="representation"/>
      <entity name="curve_style_parameters_with_ends" supertypes="curve_style_parameters_representation"/>
      <entity name="curve_style_rendering">
         <explicit name="rendering_method">
            <typename name="shading_curve_method"/>
         </explicit>
         <explicit name="rendering_properties">
            <typename name="surface_rendering_properties"/>
         </explicit>
      </entity>
      <entity name="curve_swept_solid_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SWEPT_AREA_SOLID' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SWEPT_DISK_SOLID' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SWEPT_AREA_SOLID' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SWEPT_DISK_SOLID', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' ] * TYPEOF( it ) ) = 1 ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CURVE_SWEPT_SOLID_SHAPE_REPRESENTATION'  IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) ) ) ) &#10;               = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( scsas &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE_SWEPT_AREA_SOLID'  IN TYPEOF( it ) ) )&#10;               | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE' IN TYPEOF( scsas\&#10;               surface_curve_swept_area_solid.directrix ) ) OR ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE'  IN TYPEOF( scsas\&#10;               surface_curve_swept_area_solid.directrix ) ) ) ) ) ) = 0 )" label="wr4"/>
      </entity>
      <entity name="curve_with_excessive_segments" supertypes="overcomplex_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'B_SPLINE_OR_COMPOSITE_CURVE_SELECT' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity name="curve_with_small_curvature_radius" supertypes="geometry_with_local_near_degeneracy">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'POINT_ON_CURVE' ] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="cutout" super.expression="ONEOF (physical_connectivity_interrupting_cutout, plated_cutout, partially_plated_cutout)" supertypes="inter_stratum_feature"/>
      <entity name="cutout_edge_segment" super.expression="plated_cutout_edge_segment" supertypes="inter_stratum_feature shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <where expression="( SELF\shape_aspect_relationship.relating_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.related_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="cylindrical_pair" supertypes="low_order_kinematic_pair">
         <derived expression="FALSE" name="t_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="t_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="r_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
      </entity>
      <entity name="cylindrical_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="cylindrical_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_translation">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="actual_rotation">
            <typename name="plane_angle_measure"/>
         </explicit>
      </entity>
      <entity name="cylindrical_pair_with_range" supertypes="cylindrical_pair">
         <explicit name="lower_limit_actual_translation" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_translation" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="lower_limit_actual_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( ( ( NOT EXISTS( lower_limit_actual_translation ) ) OR ( NOT EXISTS( upper_limit_actual_translation ) ) ) XOR ( &#10;               lower_limit_actual_translation &lt; upper_limit_actual_translation ) )" label="wr1"/>
         <where expression="( ( ( NOT EXISTS( lower_limit_actual_rotation ) ) OR ( NOT EXISTS( upper_limit_actual_rotation ) ) ) XOR ( &#10;               lower_limit_actual_rotation &lt; upper_limit_actual_rotation ) )" label="wr2"/>
      </entity>
      <entity name="cylindrical_surface" supertypes="elementary_surface">
         <explicit name="radius">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="cylindricity_tolerance" supertypes="geometric_tolerance">
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE'  ) IN TYPEOF( SELF ) ) )" label="wr1"/>
      </entity>
      <entity name="data_environment">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="property_definition_representation"/>
         </explicit>
      </entity>
      <entity name="data_quality_assessment_measurement_association">
         <explicit name="assessment_specification">
            <typename name="data_quality_criterion_assessment_association"/>
         </explicit>
         <explicit name="measurement_requirement">
            <typename name="data_quality_criterion_measurement_association"/>
         </explicit>
         <where expression="( SELF.measurement_requirement\representation_item_relationship.relating_representation_item :=: SELF.&#10;               assessment_specification.criterion )" label="wr1"/>
      </entity>
      <entity name="data_quality_assessment_specification">
         <explicit name="description">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="data_quality_criteria_representation" supertypes="representation">
         <where expression="( SIZEOF( QUERY ( q &lt;* SELF\representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DATA_QUALITY_CRITERION' ) IN TYPEOF( q ) ) ) ) &#10;               &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="data_quality_criterion" supertypes="representation_item">
         <where expression="( SIZEOF( QUERY ( q &lt;* bag_to_set( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'REPRESENTATION.ITEMS'  ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DATA_QUALITY_INSPECTION_RESULT_REPRESENTATION'  ) IN TYPEOF( q ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="data_quality_criterion_assessment_association">
         <explicit name="criterion">
            <typename name="data_quality_criterion"/>
         </explicit>
         <explicit name="assessment_specification">
            <typename name="data_quality_assessment_specification"/>
         </explicit>
      </entity>
      <entity name="data_quality_criterion_measurement_association" supertypes="representation_item_relationship">
         <explicit name="relating_representation_item">
            <typename name="data_quality_criterion"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <explicit name="related_representation_item">
            <typename name="data_quality_measurement_requirement"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
      </entity>
      <entity name="data_quality_definition">
         <explicit name="description">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="data_quality_definition_relationship">
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_data_quality_definition">
            <typename name="data_quality_definition"/>
         </explicit>
         <explicit name="related_data_quality_definition">
            <typename name="data_quality_definition"/>
         </explicit>
      </entity>
      <entity name="data_quality_definition_representation_relationship">
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="definition">
            <typename name="data_quality_definition"/>
         </explicit>
         <explicit name="used_representation">
            <typename name="used_quality_representation_select"/>
         </explicit>
      </entity>
      <entity name="data_quality_inspection_criterion_report" supertypes="data_quality_inspection_report">
         <explicit name="statistical_values">
            <aggregate lower="1" type="SET" upper="2"/>
            <typename name="data_quality_inspection_criterion_report_item"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( i1 &lt;* bag_to_set( USEDIN( SELF\data_quality_inspection_report.inspection_result.criterion_inspected, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DATA_QUALITY_REPORT_REQUEST.'&#10;               + 'CRITERION_OF_REPORT_REQUEST'  ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' +&#10;               'SUMMARY_REPORT_REQUEST' ) IN TYPEOF( i1 ) ) ) ) &gt; 0 )" label="wr1"/>
         <where expression="( ( SIZEOF( SELF.statistical_values ) = 1 ) OR ( SELF.statistical_values[1].value_type &lt;&gt; SELF.statistical_values[2].&#10;               value_type ) )" label="wr2"/>
      </entity>
      <entity name="data_quality_inspection_criterion_report_item" supertypes="representation_item">
         <explicit name="statistical_value">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="value_type">
            <typename name="statistical_value_type"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( q &lt;* bag_to_set( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'REPRESENTATION.ITEMS'  ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DATA_QUALITY_CRITERIA_REPRESENTATION'  ) IN TYPEOF( q ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="data_quality_inspection_instance_report" supertypes="data_quality_inspection_report">
         <explicit name="inspected_instances">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="data_quality_inspection_instance_report_item"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( i1 &lt;* bag_to_set( USEDIN( SELF\data_quality_inspection_report.inspection_result.criterion_inspected, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DATA_QUALITY_REPORT_REQUEST.'&#10;               + 'CRITERION_OF_REPORT_REQUEST'  ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' +&#10;               'DETAILED_REPORT_REQUEST' ) IN TYPEOF( i1 ) ) ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="data_quality_inspection_instance_report_item" supertypes="representation_item">
         <explicit name="inspected_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="inspected_element_select"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( q &lt;* bag_to_set( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'REPRESENTATION.ITEMS'  ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DATA_QUALITY_CRITERIA_REPRESENTATION'  ) IN TYPEOF( q ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="data_quality_inspection_report" super.expression="ONEOF (data_quality_inspection_criterion_report, data_quality_inspection_instance_report)" supertypes="representation_item">
         <explicit name="inspection_result">
            <typename name="data_quality_inspection_result"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( q &lt;* bag_to_set( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'REPRESENTATION.ITEMS'  ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DATA_QUALITY_CRITERIA_REPRESENTATION'  ) IN TYPEOF( q ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="data_quality_inspection_result" supertypes="representation_item">
         <explicit name="criterion_inspected">
            <typename name="data_quality_criterion"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( q &lt;* bag_to_set( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'REPRESENTATION.ITEMS'  ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DATA_QUALITY_CRITERIA_REPRESENTATION'  ) IN TYPEOF( q ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="data_quality_inspection_result_representation" supertypes="representation">
         <explicit name="criteria_inspected">
            <typename name="data_quality_criteria_representation"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( q &lt;* SELF\representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DATA_QUALITY_INSPECTION_RESULT' ) IN &#10;               TYPEOF( q ) ) ) ) &gt; 0 )" label="wr1"/>
         <where expression="( SIZEOF( inspected_product_definition( SELF ) ) &gt; 0 )" label="wr2"/>
      </entity>
      <entity name="data_quality_inspection_result_with_judgement" supertypes="data_quality_inspection_result">
         <explicit name="judgement">
            <builtintype type="BOOLEAN"/>
         </explicit>
      </entity>
      <entity name="data_quality_measurement_requirement" supertypes="representation_item">
         <where expression="( SIZEOF( QUERY ( q &lt;* bag_to_set( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'REPRESENTATION.ITEMS'  ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DATA_QUALITY_INSPECTION_RESULT_REPRESENTATION'  ) IN TYPEOF( q ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="data_quality_report_measurement_association" supertypes="representation_item_relationship">
         <explicit name="relating_representation_item">
            <typename name="data_quality_measurement_requirement"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <explicit name="related_representation_item">
            <typename name="data_quality_inspection_report"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="data_quality_report_request" super.expression="ONEOF (summary_report_request, detailed_report_request)">
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="criterion_of_report_request">
            <typename name="data_quality_criterion"/>
         </explicit>
      </entity>
      <entity name="date" super.expression="ONEOF (calendar_date, ordinal_date, week_of_year_and_day_date, year_month)">
         <explicit name="year_component">
            <typename name="year_number"/>
         </explicit>
      </entity>
      <entity name="date_and_time">
         <explicit name="date_component">
            <typename name="date"/>
         </explicit>
         <explicit name="time_component">
            <typename name="local_time"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="date_and_time_assignment">
         <explicit name="assigned_date_and_time">
            <typename name="date_and_time"/>
         </explicit>
         <explicit name="role">
            <typename name="date_time_role"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="date_assignment">
         <explicit name="assigned_date">
            <typename name="date"/>
         </explicit>
         <explicit name="role">
            <typename name="date_role"/>
         </explicit>
      </entity>
      <entity name="date_representation_item" supertypes="representation_item date"/>
      <entity name="date_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="date_time_representation_item" supertypes="representation_item date_and_time"/>
      <entity name="date_time_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="dated_effectivity" supertypes="effectivity">
         <explicit name="effectivity_end_date" optional="YES">
            <typename name="date_time_or_event_occurrence"/>
         </explicit>
         <explicit name="effectivity_start_date" optional="YES">
            <typename name="date_time_or_event_occurrence"/>
         </explicit>
         <where expression="( EXISTS( effectivity_end_date ) OR EXISTS( effectivity_start_date ) )" label="wr1"/>
      </entity>
      <entity name="datum" supertypes="shape_aspect">
         <explicit name="identification">
            <typename name="identifier"/>
         </explicit>
         <inverse attribute="related_shape_aspect" entity="shape_aspect_relationship" name="established_by_relationships">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
         <unique label="ur1">
            <unique.attribute attribute="identification"/>
            <unique.attribute attribute="SELF\shape_aspect.of_shape"/>
         </unique>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMMON_DATUM' IN TYPEOF( SELF ) ) XOR ( &#10;               SIZEOF( QUERY ( x &lt;* SELF\datum.established_by_relationships | ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DATUM_FEATURE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DATUM_TARGET' ] * TYPEOF( x\&#10;               shape_aspect_relationship.relating_shape_aspect ) ) = 1 ) ) ) &gt;= 1 ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( x &lt;* SELF\datum.established_by_relationships | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DATUM_FEATURE'  IN TYPEOF( x\&#10;               shape_aspect_relationship.relating_shape_aspect ) ) ) ) &lt;= 1 )" label="wr2"/>
         <where expression="( SELF\shape_aspect.product_definitional = FALSE )" label="wr3"/>
         <where expression="( SELF\shape_aspect.name = '' )" label="wr4"/>
      </entity>
      <entity name="datum_difference" supertypes="shape_aspect shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="datum"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="datum"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <where expression="( SELF\shape_aspect_relationship.relating_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.related_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="datum_difference_based_model_parameter" supertypes="model_parameter"/>
      <entity name="datum_difference_functional_unit_usage_view_terminal_assignment" supertypes="shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="datum_difference"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="functional_unit_terminal_definition"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
      </entity>
      <entity name="datum_feature" super.expression="ONEOF (dimensional_location_with_datum_feature, dimensional_size_with_datum_feature)" supertypes="shape_aspect">
         <inverse attribute="relating_shape_aspect" entity="shape_aspect_relationship" name="feature_basis_relationship">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
         <where expression="( SIZEOF( QUERY ( sar &lt;* SELF\datum_feature.feature_basis_relationship | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DATUM'  IN TYPEOF( sar\&#10;               shape_aspect_relationship.related_shape_aspect ) ) ) ) = 1 )" label="wr1"/>
         <where expression="( SELF\shape_aspect.product_definitional = TRUE )" label="wr2"/>
      </entity>
      <entity name="datum_feature_callout" supertypes="draughting_callout"/>
      <entity name="datum_reference">
         <explicit name="precedence">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="referenced_datum">
            <typename name="datum"/>
         </explicit>
         <where expression="( precedence &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="datum_reference_compartment" supertypes="general_datum_reference">
         <inverse attribute="constituents" entity="datum_system" name="owner"/>
      </entity>
      <entity name="datum_reference_element" supertypes="general_datum_reference">
         <derived expression="sts_get_general_datum_reference( SELF )" name="owner">
            <typename name="general_datum_reference"/>
         </derived>
         <where expression="( SELF &lt;&gt; owner )" label="wr1"/>
         <where expression="EXISTS( owner )" label="wr2"/>
         <where expression="( SELF\shape_aspect.of_shape = owner\shape_aspect.of_shape )" label="wr3"/>
      </entity>
      <entity name="datum_reference_modifier_with_value">
         <explicit name="modifier_type">
            <typename name="datum_reference_modifier_type"/>
         </explicit>
         <explicit name="modifier_value">
            <typename name="length_measure_with_unit"/>
         </explicit>
         <where expression="( modifier_value\measure_with_unit.value_component &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="datum_system" supertypes="shape_aspect">
         <explicit name="constituents">
            <aggregate lower="1" type="LIST" unique="YES" upper="3"/>
            <typename name="datum_reference_compartment"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect.of_shape"/>
            <unique.attribute attribute="SELF\shape_aspect.name"/>
         </unique>
         <where expression="( SELF\shape_aspect.product_definitional = FALSE )" label="wr1"/>
      </entity>
      <entity name="datum_target" supertypes="shape_aspect">
         <explicit name="target_id">
            <typename name="identifier"/>
         </explicit>
         <inverse attribute="relating_shape_aspect" entity="shape_aspect_relationship" name="target_basis_relationship">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
         <where expression="( SIZEOF( QUERY ( sar &lt;* SELF\datum_target.target_basis_relationship | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DATUM'  IN TYPEOF( sar\&#10;               shape_aspect_relationship.related_shape_aspect ) ) ) ) = 1 )" label="wr1"/>
         <where expression="( SELF\shape_aspect.product_definitional = TRUE )" label="wr2"/>
      </entity>
      <entity name="datum_target_callout" supertypes="draughting_callout"/>
      <entity name="default_attachment_size_based_land_physical_template" supertypes="land_physical_template shape_aspect">
         <derived expression="SELF" name="of_shape">
            <typename name="default_attachment_size_based_land_physical_template"/>
            <redeclaration entity-ref="shape_aspect"/>
         </derived>
      </entity>
      <entity abstract.supertype="YES" name="default_passage_based_land_physical_template" super.expression="ONEOF (default_plated_passage_based_land_physical_template, default_unsupported_passage_based_land_physical_template)" supertypes="land_physical_template"/>
      <entity name="default_plated_passage_based_land_physical_template" supertypes="default_passage_based_land_physical_template"/>
      <entity name="default_tolerance_table" supertypes="representation">
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'DEFAULT_TOLERANCE_TABLE_CELL'  IN TYPEOF( i ) ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( ( SIZEOF( QUERY ( rr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'REPRESENTATION_RELATIONSHIP.REP_1'  ) | ( rr.name &lt; 'general tolerance definition' ) ) ) = 0 ) AND ( SIZEOF( &#10;               QUERY ( rr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'REPRESENTATION_RELATIONSHIP.REP_1'  ) | ( ( rr.name = 'general tolerance definition' ) AND ( rr.rep_2.name &lt; &#10;               'default tolerance'  ) ) ) ) = 0 ) AND ( SIZEOF( USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'REPRESENTATION_RELATIONSHIP.REP_2' ) ) =&#10;               0 ) )" label="wr2"/>
      </entity>
      <entity name="default_tolerance_table_cell" supertypes="compound_representation_item">
         <where expression="( SIZEOF( QUERY ( x &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'REPRESENTATION.ITEMS'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DEFAULT_TOLERANCE_TABLE'  ) IN TYPEOF( x ) ) ) ) = 1 )" label="wr1"/>
         <where expression="default_tolerance_table_cell_wr2( SELF\compound_representation_item.item_element )" label="wr2"/>
         <where expression="default_tolerance_table_cell_wr3( SELF\compound_representation_item.item_element )" label="wr3"/>
         <where expression="default_tolerance_table_cell_wr4( SELF\compound_representation_item.item_element )" label="wr4"/>
         <where expression="default_tolerance_table_cell_wr5( SELF\compound_representation_item.item_element )" label="wr5"/>
      </entity>
      <entity name="default_trace_template" supertypes="trace_template"/>
      <entity name="default_unsupported_passage_based_land_physical_template" supertypes="default_passage_based_land_physical_template"/>
      <entity name="default_value_property_definition_representation" supertypes="property_definition_representation"/>
      <entity name="defined_character_glyph" supertypes="geometric_representation_item">
         <explicit name="definition">
            <typename name="defined_glyph_select"/>
         </explicit>
         <explicit name="placement">
            <typename name="axis2_placement"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="defined_constraint" super.expression="equal_parameter_constraint" supertypes="explicit_constraint"/>
      <entity abstract.supertype="YES" name="defined_function" super.expression="ONEOF (numeric_defined_function, string_defined_function, boolean_defined_function) ANDOR sql_mappable_defined_function"/>
      <entity name="defined_symbol" supertypes="geometric_representation_item">
         <explicit name="definition">
            <typename name="defined_symbol_select"/>
         </explicit>
         <explicit name="target">
            <typename name="symbol_target"/>
         </explicit>
      </entity>
      <entity name="definite_integral_expression" supertypes="quantifier_expression">
         <explicit name="lower_limit_neg_infinity">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="upper_limit_pos_infinity">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <derived expression="SELF\multiple_arity_generic_expression.operands[1]" name="integrand">
            <typename name="generic_expression"/>
         </derived>
         <derived expression="SELF\multiple_arity_generic_expression.operands[2]" name="variable_of_integration">
            <typename name="maths_variable"/>
         </derived>
         <derived expression="[variable_of_integration]" name="variables">
            <aggregate lower="1" type="LIST" unique="YES" upper="1"/>
            <typename name="generic_variable"/>
            <redeclaration entity-ref="quantifier_expression"/>
         </derived>
         <where expression="has_values_space( integrand )" label="wr1"/>
         <where expression="space_is_continuum( values_space_of( integrand ) )" label="wr2"/>
         <where expression="definite_integral_expr_check( SELF\multiple_arity_generic_expression.operands, lower_limit_neg_infinity, &#10;               upper_limit_pos_infinity )" label="wr3"/>
      </entity>
      <entity name="definite_integral_function" supertypes="maths_function unary_generic_expression">
         <explicit name="operand">
            <typename name="maths_function"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
         <explicit name="variable_of_integration">
            <typename name="input_selector"/>
         </explicit>
         <explicit name="lower_limit_neg_infinity">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="upper_limit_pos_infinity">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <derived expression="SELF\unary_generic_expression.operand" name="integrand">
            <typename name="maths_function"/>
         </derived>
         <where expression="space_is_continuum( integrand.range )" label="wr1"/>
         <where expression="definite_integral_check( integrand.domain, variable_of_integration, lower_limit_neg_infinity, upper_limit_pos_infinity )" label="wr2"/>
      </entity>
      <entity name="definitional_representation" supertypes="representation">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARAMETRIC_REPRESENTATION_CONTEXT' IN TYPEOF( &#10;               SELF\representation.context_of_items ) )" label="wr1"/>
      </entity>
      <entity name="definitional_representation_relationship" supertypes="representation_relationship">
         <where expression="acyclic_representation_relationship( SELF, [SELF\representation_relationship.rep_2], &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'REPRESENTATION' )" label="wr1"/>
      </entity>
      <entity name="definitional_representation_relationship_with_same_context" supertypes="definitional_representation_relationship">
         <where expression="( SELF\representation_relationship.rep_1.context_of_items :=: SELF\representation_relationship.rep_2.context_of_items )" label="wr1"/>
      </entity>
      <entity name="degenerate_pcurve" supertypes="point">
         <explicit name="basis_surface">
            <typename name="surface"/>
         </explicit>
         <explicit name="reference_to_curve">
            <typename name="definitional_representation"/>
         </explicit>
         <where expression="( SIZEOF( reference_to_curve\representation.items ) = 1 )" label="wr1"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE' IN TYPEOF( reference_to_curve\&#10;               representation.items[1] ) )" label="wr2"/>
         <where expression="( reference_to_curve\representation.items[1]\geometric_representation_item.dim = 2 )" label="wr3"/>
      </entity>
      <entity name="degenerate_toroidal_surface" supertypes="toroidal_surface">
         <explicit name="select_outer">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( major_radius &lt; minor_radius )" label="wr1"/>
      </entity>
      <entity name="delete_element" supertypes="change_element"/>
      <entity name="dependent_electrical_isolation_removal_component" supertypes="electrical_isolation_laminate_component"/>
      <entity name="dependent_electrical_isolation_removal_template" supertypes="electrical_isolation_removal_template"/>
      <entity name="dependent_thermal_isolation_removal_component" supertypes="thermal_isolation_removal_component"/>
      <entity name="dependent_thermal_isolation_removal_template" supertypes="thermal_isolation_removal_template"/>
      <entity name="derived_laminate_assignment" supertypes="property_definition_relationship"/>
      <entity name="derived_shape_aspect" super.expression="ONEOF (apex, centre_of_symmetry, geometric_alignment, geometric_contact, geometric_intersection, parallel_offset, perpendicular_to, extension, tangent)" supertypes="shape_aspect">
         <inverse attribute="relating_shape_aspect" entity="shape_aspect_deriving_relationship" name="deriving_relationships">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
      </entity>
      <entity name="derived_stratum" supertypes="stratum"/>
      <entity abstract.supertype="YES" name="derived_stratum_technology_occurrence_relationship" super.expression="ONEOF (copy_stratum_technology_occurrence_relationship, inverse_copy_stratum_technology_occurrence_relationship)" supertypes="stratum_technology_occurrence_relationship"/>
      <entity name="derived_unit" super.expression="ONEOF (absorbed_dose_unit, acceleration_unit, radioactivity_unit, area_unit, capacitance_unit, dose_equivalent_unit, electric_charge_unit, conductance_unit, electric_potential_unit, energy_unit, magnetic_flux_density_unit, force_unit, frequency_unit, illuminance_unit, inductance_unit, magnetic_flux_unit, power_unit, pressure_unit, resistance_unit, velocity_unit, volume_unit)">
         <explicit name="elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="derived_unit_element"/>
         </explicit>
         <derived expression="get_name_value( SELF )" name="name">
            <typename name="label"/>
         </derived>
         <where expression="( ( SIZEOF( elements ) &gt; 1 ) OR ( ( SIZEOF( elements ) = 1 ) AND ( elements[1].exponent &lt;&gt; 1 ) ) )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.'&#10;               + 'NAMED_ITEM'  ) ) &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="derived_unit_element">
         <explicit name="unit">
            <typename name="named_unit"/>
         </explicit>
         <explicit name="exponent">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="description_attribute">
         <explicit name="attribute_value">
            <typename name="text"/>
         </explicit>
         <explicit name="described_item">
            <typename name="description_attribute_select"/>
         </explicit>
      </entity>
      <entity name="descriptive_representation_item" super.expression="ONEOF (tagged_text_item, uniform_resource_identifier)" supertypes="representation_item">
         <explicit name="description">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="design_composition_path" supertypes="applied_group_assignment product_definition"/>
      <entity name="design_context" supertypes="product_definition_context">
         <where expression="( SELF.life_cycle_stage = 'design' )" label="wr1"/>
      </entity>
      <entity name="design_layer_stratum" supertypes="stratum"/>
      <entity name="design_make_from_relationship" supertypes="product_definition_relationship"/>
      <entity name="design_specific_stratum_technology_mapping_relationship" supertypes="stratum_technology_mapping_relationship property_definition">
         <explicit name="definition">
            <typename name="library_to_design_stack_model_mapping"/>
            <redeclaration entity-ref="property_definition"/>
         </explicit>
         <derived expression="SELF\property_definition.definition" name="scope">
            <typename name="library_to_design_stack_model_mapping"/>
         </derived>
      </entity>
      <entity name="design_stack_model" supertypes="stratum_stack_model"/>
      <entity name="detailed_report_request" supertypes="data_quality_report_request">
         <explicit name="detailed_report_request_type">
            <typename name="detailed_report_type"/>
         </explicit>
         <explicit name="report_sequence">
            <typename name="preferred_ordering"/>
         </explicit>
      </entity>
      <entity name="detailed_report_request_with_number_of_data" supertypes="detailed_report_request">
         <explicit name="number_of_data">
            <builtintype type="INTEGER"/>
         </explicit>
         <derived expression="measured_element" name="detailed_report_request_type">
            <typename name="detailed_report_type"/>
            <redeclaration entity-ref="detailed_report_request"/>
         </derived>
      </entity>
      <entity name="device_terminal_map" supertypes="shape_aspect shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="packaged_part_terminal"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect_relationship.related_shape_aspect"/>
            <unique.attribute attribute="relating_shape_aspect"/>
         </unique>
      </entity>
      <entity name="diameter_dimension" supertypes="dimension_curve_directed_callout"/>
      <entity name="dielectric_constant_measure_with_unit" supertypes="ratio_measure_with_unit"/>
      <entity name="dielectric_crossover_area" supertypes="shape_aspect shape_aspect_relationship"/>
      <entity name="dielectric_material_passage" supertypes="inter_stratum_feature"/>
      <entity name="digital_analytical_model_port" supertypes="analytical_model_port"/>
      <entity name="digital_analytical_model_scalar_port" supertypes="digital_analytical_model_vector_port analytical_model_scalar_port"/>
      <entity name="digital_analytical_model_vector_port" supertypes="analytical_model_vector_port"/>
      <entity name="dimension_callout" supertypes="draughting_callout">
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LEADER_DIRECTED_CALLOUT' IN TYPEOF( SELF ) ) &#10;               XOR ( SIZEOF( QUERY ( dce_1 &lt;* SELF\draughting_callout.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LEADER_CURVE'  IN TYPEOF( dce_1 ) ) ) ) = 0 ) )" label="wr1"/>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROJECTION_DIRECTED_CALLOUT' IN TYPEOF( SELF ) ) &#10;               XOR ( SIZEOF( QUERY ( dce_1 &lt;* SELF\draughting_callout.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROJECTION_CURVE'  IN TYPEOF( dce_1 ) ) ) ) = &#10;               0 ) )" label="wr2"/>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIMENSION_CURVE_DIRECTED_CALLOUT' IN TYPEOF( &#10;               SELF ) ) XOR ( SIZEOF( QUERY ( dce_1 &lt;* SELF\draughting_callout.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIMENSION_CURVE'  IN TYPEOF( dce_1 ) ) ) ) = 0 ) )" label="wr3"/>
      </entity>
      <entity name="dimension_callout_component_relationship" supertypes="draughting_callout_relationship">
         <where expression="( SELF.name IN [ 'prefix', 'suffix'] )" label="wr1"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STRUCTURED_DIMENSION_CALLOUT' IN TYPEOF( SELF.&#10;               relating_draughting_callout ) )" label="wr2"/>
         <where expression="( SIZEOF( TYPEOF( SELF.related_draughting_callout ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LEADER_DIRECTED_CALLOUT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROJECTION_DIRECTED_CALLOUT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIMENSION_CURVE_DIRECTED_CALLOUT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STRUCTURED_DIMENSION_CALLOUT' ] ) = 0 )" label="wr3"/>
         <where expression="( ( SELF.related_draughting_callout.contents * SELF.relating_draughting_callout.contents ) = SELF.&#10;               related_draughting_callout.contents )" label="wr4"/>
         <where expression="( ( SELF.name = 'prefix' ) AND ( SIZEOF( QUERY ( ato &lt;* QUERY ( con &lt;* SELF.related_draughting_callout.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE'  IN TYPEOF( con ) ) )&#10;               | ( NOT ( ato.name = 'prefix text' ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( ( SELF.name = 'suffix' ) AND ( SIZEOF( QUERY ( ato &lt;* QUERY ( con &lt;* SELF.related_draughting_callout.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE'  IN TYPEOF( con ) ) )&#10;               | ( NOT ( ato.name = 'suffix text' ) ) ) ) = 0 ) )" label="wr6"/>
      </entity>
      <entity name="dimension_callout_relationship" supertypes="draughting_callout_relationship">
         <where expression="( SELF.name IN [ 'primary', 'secondary'] )" label="wr1"/>
         <where expression="( SIZEOF( TYPEOF( SELF.relating_draughting_callout ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANGULAR_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIAMETER_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LEADER_DIRECTED_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINEAR_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORDINATE_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RADIUS_DIMENSION' ] ) &gt;= 1 )" label="wr2"/>
         <where expression="( SIZEOF( TYPEOF( SELF.related_draughting_callout ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIMENSION_CURVE_DIRECTED_CALLOUT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROJECTION_DIRECTED_CALLOUT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LEADER_DIRECTED_CALLOUT' ] ) = 0 )" label="wr3"/>
         <where expression="( ( SELF.related_draughting_callout.contents * SELF.relating_draughting_callout.contents ) = SELF.&#10;               related_draughting_callout.contents )" label="wr4"/>
      </entity>
      <entity name="dimension_curve" supertypes="annotation_curve_occurrence">
         <where expression="( SIZEOF( QUERY ( dct &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'TERMINATOR_SYMBOL.ANNOTATED_CURVE'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'DIMENSION_CURVE_TERMINATOR' ) IN TYPEOF( dct ) ) ) ) &lt;= 2 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( dcdc &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DRAUGHTING_CALLOUT.CONTENTS'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DIMENSION_CURVE_DIRECTED_CALLOUT'  ) IN TYPEOF( dcdc ) ) ) ) &gt;= 1 )" label="wr2"/>
         <where expression="( ( SIZEOF( QUERY ( dct1 &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'TERMINATOR_SYMBOL.ANNOTATED_CURVE'  ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  &#10;               + 'DIMENSION_CURVE_TERMINATOR' ) IN TYPEOF( dct1 ) ) AND ( dct1\dimension_curve_terminator.role = &#10;               dimension_extent_usage.origin ) ) ) ) &lt;= 1 ) AND ( SIZEOF( QUERY ( dct2 &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'TERMINATOR_SYMBOL.ANNOTATED_CURVE' ) | &#10;               ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DIMENSION_CURVE_TERMINATOR' ) IN &#10;               TYPEOF( dct2 ) ) AND ( dct2\dimension_curve_terminator.role = dimension_extent_usage.target ) ) ) ) &lt;= 1 ) )" label="wr3"/>
      </entity>
      <entity name="dimension_curve_directed_callout" supertypes="draughting_callout">
         <where expression="( SIZEOF( QUERY ( d_c &lt;* SELF\draughting_callout.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIMENSION_CURVE'  IN TYPEOF( d_c ) ) ) ) &lt;= 2 )" label="wr1"/>
         <where expression="( SIZEOF( SELF\draughting_callout.contents ) &gt;= 2 )" label="wr2"/>
      </entity>
      <entity name="dimension_curve_terminator" supertypes="terminator_symbol">
         <explicit name="role">
            <typename name="dimension_extent_usage"/>
         </explicit>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIMENSION_CURVE' IN TYPEOF( SELF\&#10;               terminator_symbol.annotated_curve ) )" label="wr1"/>
      </entity>
      <entity name="dimension_curve_terminator_to_projection_curve_associativity" supertypes="annotation_occurrence_associativity">
         <explicit name="relating_annotation_occurrence">
            <typename name="dimension_curve_terminator"/>
            <redeclaration entity-ref="annotation_occurrence_relationship"/>
         </explicit>
         <explicit name="related_annotation_occurrence">
            <typename name="projection_curve"/>
            <redeclaration entity-ref="annotation_occurrence_relationship"/>
         </explicit>
      </entity>
      <entity name="dimension_pair" supertypes="draughting_callout_relationship">
         <where expression="( SELF.name IN [ 'chained', 'parallel'] )" label="wr1"/>
         <where expression="( SIZEOF( TYPEOF( SELF.relating_draughting_callout ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANGULAR_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIAMETER_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINEAR_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORDINATE_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RADIUS_DIMENSION' ] ) = 1 )" label="wr2"/>
         <where expression="( SIZEOF( TYPEOF( SELF.related_draughting_callout ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANGULAR_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIAMETER_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINEAR_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORDINATE_DIMENSION' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RADIUS_DIMENSION' ] ) = 1 )" label="wr3"/>
      </entity>
      <entity name="dimension_related_tolerance_zone_element">
         <explicit name="related_dimension">
            <typename name="dimensional_location"/>
         </explicit>
         <explicit name="related_element">
            <typename name="tolerance_zone_definition"/>
         </explicit>
      </entity>
      <entity name="dimension_text_associativity" supertypes="text_literal mapped_item">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DIMENSION_REPRESENTATION' IN TYPEOF( SELF\&#10;               mapped_item.mapping_source.mapped_representation ) )" label="wr1"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DRAUGHTING_CALLOUT' IN TYPEOF( SELF\mapped_item.&#10;               mapping_target ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( ato &lt;* QUERY ( si &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM.ITEM'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE'  IN TYPEOF( si ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( dc &lt;* USEDIN( ato, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'DRAUGHTING_CALLOUT.CONTENTS' ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'DRAUGHTING_CALLOUT'  IN TYPEOF( dc ) ) ) * [SELF\mapped_item.mapping_target] ) = 1 ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="dimensional_characteristic_representation">
         <explicit name="dimension">
            <typename name="dimensional_characteristic"/>
         </explicit>
         <explicit name="representation">
            <typename name="shape_dimension_representation"/>
         </explicit>
      </entity>
      <entity name="dimensional_exponents">
         <explicit name="length_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="mass_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="time_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="electric_current_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="thermodynamic_temperature_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="amount_of_substance_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="luminous_intensity_exponent">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="dimensional_location" super.expression="ONEOF (angular_location, dimensional_location_with_path)" supertypes="shape_aspect_relationship">
         <where expression="( SELF\shape_aspect_relationship.relating_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.related_shape_aspect )" label="wr1"/>
         <where expression="( SELF\shape_aspect_relationship.relating_shape_aspect.of_shape :=: SELF\shape_aspect_relationship.&#10;               related_shape_aspect.of_shape )" label="wr2"/>
      </entity>
      <entity name="dimensional_location_with_datum_feature" supertypes="datum_feature dimensional_location"/>
      <entity name="dimensional_location_with_path" supertypes="dimensional_location">
         <explicit name="path">
            <typename name="shape_aspect"/>
         </explicit>
      </entity>
      <entity name="dimensional_size" super.expression="ONEOF (angular_size, dimensional_size_with_path)">
         <explicit name="applies_to">
            <typename name="shape_aspect"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <unique label="ur1">
            <unique.attribute attribute="id"/>
            <unique.attribute attribute="applies_to"/>
         </unique>
         <where expression="( applies_to.product_definitional = TRUE )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ID_ATTRIBUTE.'&#10;               + 'IDENTIFIED_ITEM'  ) ) &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="dimensional_size_with_datum_feature" supertypes="datum_feature dimensional_size"/>
      <entity name="dimensional_size_with_path" supertypes="dimensional_size">
         <explicit name="path">
            <typename name="shape_aspect"/>
         </explicit>
      </entity>
      <entity name="direct_stratum_component_join_implementation" supertypes="shape_aspect_relationship"/>
      <entity name="directed_action" supertypes="executed_action">
         <explicit name="directive">
            <typename name="action_directive"/>
         </explicit>
      </entity>
      <entity name="directed_angle" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_shape_aspect_property_definition_representations( SELF ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_shape_aspect_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( pdr.used_representation.items ) = 1 ) ) ) ) = 1 )" label="wr3"/>
         <where expression="( SELF.description IN [ 'punch direction', 'profile normal', 'surface normal'] )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_shape_aspect_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = 'angle' ) &#10;               AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) &#10;               = 2 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr5"/>
      </entity>
      <entity name="directed_dimensional_location" supertypes="dimensional_location"/>
      <entity name="direction" supertypes="geometric_representation_item">
         <explicit name="direction_ratios">
            <aggregate lower="2" type="LIST" upper="3"/>
            <builtintype type="REAL"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( tmp &lt;* direction_ratios | ( tmp &lt;&gt; 0 ) ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="direction_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( SELF.items ) = 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'DIRECTION'  IN TYPEOF( it ) ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="disallowed_assembly_relationship_usage" supertypes="externally_conditioned_data_quality_criterion">
         <where expression="validate_ecdq_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'ASSEMBLY_COMPONENT_USAGE' ] )" label="wr1"/>
      </entity>
      <entity name="disconnected_face_set" supertypes="erroneous_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CONNECTED_FACE_SET' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity abstract.supertype="YES" name="discontinuous_geometry" super.expression="ONEOF (g1_discontinuous_curve, g2_discontinuous_curve, g1_discontinuous_surface, g2_discontinuous_surface)" supertypes="inapt_geometry"/>
      <entity name="div_expression" supertypes="binary_numeric_expression"/>
      <entity name="document">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="kind">
            <typename name="document_type"/>
         </explicit>
         <inverse attribute="represented_document" entity="document_representation_type" name="representation_types">
            <inverse.aggregate lower="0" type="SET" upper="?"/>
         </inverse>
      </entity>
      <entity name="document_file" supertypes="document characterized_object">
         <where expression="( SELF\characterized_object.name = '' )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\characterized_object.description ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( drt &lt;* SELF\document.representation_types | ( drt.name IN [ 'digital', 'physical'] ) ) ) = 1 )" label="wr3"/>
      </entity>
      <entity name="document_identifier" supertypes="group">
         <unique label="ur1">
            <unique.attribute attribute="SELF\group.name"/>
            <unique.attribute attribute="SELF\group.description"/>
         </unique>
      </entity>
      <entity name="document_identifier_assignment" supertypes="group_assignment">
         <explicit name="assigned_group">
            <typename name="document_identifier"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="document_identifier_assigned_item"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="document_product_association">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_document">
            <typename name="document"/>
         </explicit>
         <explicit name="related_product">
            <typename name="product_or_formation_or_definition"/>
         </explicit>
      </entity>
      <entity name="document_product_equivalence" supertypes="document_product_association">
         <where expression="( SELF\document_product_association.name = 'equivalence' )" label="wr1"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT' IN TYPEOF( SELF\&#10;               document_product_association.related_product ) ) ) OR ( ( SELF\document_product_association.relating_document.kind.&#10;               product_data_type = 'configuration controlled document' ) AND ( SIZEOF( QUERY ( prpc &lt;* USEDIN( SELF\&#10;               document_product_association.related_product, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS' ) | ( prpc.name = 'document' ) ) ) = 1 ) ) )" label="wr2"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_FORMATION' IN &#10;               TYPEOF( SELF.related_product ) ) ) OR ( ( SELF\document_product_association.relating_document.kind.&#10;               product_data_type = 'configuration controlled document version' ) AND ( SIZEOF( QUERY ( prpc &lt;* USEDIN( SELF.&#10;               related_product\product_definition_formation.of_product, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  )&#10;               | ( prpc.name = 'document' ) ) ) = 1 ) ) )" label="wr3"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION' IN TYPEOF( SELF.&#10;               related_product ) ) ) OR ( ( SELF\document_product_association.relating_document.kind.product_data_type = &#10;               'configuration controlled document definition'  ) AND ( SIZEOF( QUERY ( prpc &lt;* USEDIN( SELF\&#10;               document_product_association.related_product\product_definition.formation.of_product, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  )&#10;               | ( prpc.name = 'document' ) ) ) = 1 ) ) )" label="wr4"/>
      </entity>
      <entity abstract.supertype="YES" name="document_reference">
         <explicit name="assigned_document">
            <typename name="document"/>
         </explicit>
         <explicit name="source">
            <typename name="label"/>
         </explicit>
         <derived expression="get_role( SELF )" name="role">
            <typename name="object_role"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ROLE_ASSOCIATION.'&#10;               + 'ITEM_WITH_ROLE'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="document_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_document">
            <typename name="document"/>
         </explicit>
         <explicit name="related_document">
            <typename name="document"/>
         </explicit>
      </entity>
      <entity name="document_representation_type">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="represented_document">
            <typename name="document"/>
         </explicit>
      </entity>
      <entity name="document_type">
         <explicit name="product_data_type">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="document_usage_constraint">
         <explicit name="source">
            <typename name="document"/>
         </explicit>
         <explicit name="subject_element">
            <typename name="label"/>
         </explicit>
         <explicit name="subject_element_value">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="document_usage_constraint_assignment">
         <explicit name="assigned_document_usage">
            <typename name="document_usage_constraint"/>
         </explicit>
         <explicit name="role">
            <typename name="document_usage_role"/>
         </explicit>
      </entity>
      <entity name="document_usage_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="documentation_layer_stratum" supertypes="stratum"/>
      <entity name="dose_equivalent_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DOSE_EQUIVALENT_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="dose_equivalent_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.sievert ) )" label="wr1"/>
      </entity>
      <entity name="double_offset_shelled_solid" supertypes="shelled_solid">
         <explicit name="thickness2">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( thickness2 &lt;&gt; 0 )" label="wr1"/>
         <where expression="( SELF\shelled_solid.thickness &lt;&gt; thickness2 )" label="wr2"/>
      </entity>
      <entity name="draped_defined_transformation" supertypes="transformation_with_derived_angle"/>
      <entity name="draughting_annotation_occurrence" supertypes="annotation_occurrence">
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_CURVE_OCCURRENCE' IN &#10;                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( sty &lt;* SELF.styles | ( NOT ( ( SIZEOF( sty.styles ) = 1 ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE'  IN TYPEOF( sty.styles[1] ) ) ) ) ) ) &#10;                = 0 ) )" label="wr1"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_FILL_AREA_OCCURRENCE' IN &#10;                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( sty &lt;* SELF.styles | ( NOT ( ( SIZEOF( sty.styles ) = 1 ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FILL_AREA_STYLE'  IN TYPEOF( sty.styles[1] ) ) ) ) ) ) &#10;                = 0 ) )" label="wr2"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_FILL_AREA_OCCURRENCE' IN &#10;                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( bound &lt;* SELF.item\annotation_fill_area.boundaries | ( NOT ( SIZEOF( &#10;                QUERY ( si &lt;* USEDIN( bound, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'STYLED_ITEM.'&#10;                + 'ITEM'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'ANNOTATION_CURVE_OCCURRENCE'  ) IN TYPEOF( si ) ) ) ) &gt; 0 ) ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_SYMBOL_OCCURRENCE' IN &#10;                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( sty &lt;* SELF.styles | ( NOT ( ( SIZEOF( sty.styles ) = 1 ) AND ( SIZEOF( &#10;                TYPEOF( sty.styles[1] ) * [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SYMBOL_STYLE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NULL_STYLE' ] ) = 1 ) ) ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_SYMBOL_OCCURRENCE' IN &#10;                TYPEOF( SELF ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_SYMBOL' IN &#10;                TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'DRAUGHTING_SYMBOL_REPRESENTATION' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'DRAUGHTING_SUBFIGURE_REPRESENTATION' ] * TYPEOF( SELF.item\mapped_item.mapping_source.mapped_representation ) ) &#10;                = 1 ) )" label="wr5"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN TYPEOF( &#10;                SELF ) ) ) OR ( SIZEOF( QUERY ( sty &lt;* SELF.styles | ( NOT ( ( SIZEOF( sty.styles ) = 1 ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEXT_STYLE'  IN TYPEOF( sty.styles[1] ) ) ) ) ) ) &#10;                = 0 ) )" label="wr6"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN TYPEOF( &#10;                SELF ) ) ) OR ( SIZEOF( TYPEOF( SELF.item ) * [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'COMPOSITE_TEXT' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEXT_LITERAL'] ) = 1 ) )" label="wr7"/>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN &#10;                TYPEOF( SELF ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_TEXT' IN &#10;                TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( QUERY ( tl &lt;* SELF.item\composite_text.collected_text | ( NOT ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEXT_LITERAL'  IN TYPEOF( tl ) ) ) ) ) = 0 ) )" label="wr8"/>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN &#10;                TYPEOF( SELF ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEXT_LITERAL' IN &#10;                TYPEOF( SELF.item ) ) ) ) OR ( SELF.item\text_literal.alignment IN [ 'baseline left', 'baseline centre', &#10;                'baseline right' ] ) )" label="wr9"/>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN &#10;                TYPEOF( SELF ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_TEXT' IN &#10;                TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( QUERY ( tl &lt;* QUERY ( text &lt;* SELF.item\composite_text.collected_text | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEXT_LITERAL'  IN TYPEOF( text ) ) ) | ( NOT &#10;                ( tl\text_literal.alignment IN [ 'baseline left', 'baseline centre', 'baseline right'] ) ) ) ) = 0 ) )" label="wr10"/>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN &#10;                TYPEOF( SELF ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_TEXT' IN &#10;                TYPEOF( SELF.item ) ) ) ) OR check_text_alignment( SELF.item ) )" label="wr11"/>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN &#10;                TYPEOF( SELF ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_TEXT' IN &#10;                TYPEOF( SELF.item ) ) ) ) OR check_text_font( SELF.item ) )" label="wr12"/>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN &#10;                TYPEOF( SELF ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_TEXT' IN &#10;                TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( QUERY ( tl &lt;* QUERY ( text &lt;* SELF.item\composite_text.collected_text | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEXT_LITERAL'  IN TYPEOF( text ) ) ) | ( NOT &#10;                ( SIZEOF( TYPEOF( tl ) * [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'TEXT_LITERAL_WITH_BLANKING_BOX' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'TEXT_LITERAL_WITH_ASSOCIATED_CURVES' ] ) = 0 ) ) ) ) = 0 ) )" label="wr13"/>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN &#10;                TYPEOF( SELF ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'TEXT_LITERAL_WITH_ASSOCIATED_CURVES'  IN TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( QUERY ( crv &lt;* SELF.item\&#10;                text_literal_with_associated_curves.associated_curves | ( NOT ( SIZEOF( QUERY ( si &lt;* USEDIN( crv, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM.ITEM'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_CURVE_OCCURRENCE'  IN TYPEOF( si ) ) ) ) &#10;                &gt; 0 ) ) ) ) = 0 ) )" label="wr14"/>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN &#10;                TYPEOF( SELF ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'COMPOSITE_TEXT_WITH_ASSOCIATED_CURVES'  IN TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( QUERY ( crv &lt;* SELF.item\&#10;                composite_text_with_associated_curves.associated_curves | ( NOT ( SIZEOF( QUERY ( si &lt;* USEDIN( crv, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM.ITEM'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_CURVE_OCCURRENCE'  IN TYPEOF( si ) ) ) ) &#10;                &gt; 0 ) ) ) ) = 0 ) )" label="wr15"/>
         <where expression="( SIZEOF( QUERY ( cs &lt;* QUERY ( sty &lt;* SELF.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE'  IN TYPEOF( sty.styles[1] ) ) )&#10;                | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' IN &#10;                TYPEOF( cs.styles[1]\curve_style.curve_width ) ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POSITIVE_LENGTH_MEASURE'  IN TYPEOF( cs.&#10;                styles[1]\curve_style.curve_width\measure_with_unit.value_component ) ) ) ) ) ) = 0 )" label="wr16"/>
         <where expression="( SIZEOF( QUERY ( fas &lt;* QUERY ( sty &lt;* SELF.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FILL_AREA_STYLE'  IN TYPEOF( sty.styles[1] ) ) )&#10;                | ( NOT ( ( SIZEOF( QUERY ( fs &lt;* fas.styles[1]\fill_area_style.fill_styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FILL_AREA_STYLE_TILES'  IN TYPEOF( fs ) ) ) ) &#10;                &lt;= 1 ) AND ( SIZEOF( QUERY ( fst &lt;* QUERY ( fs &lt;* fas.styles[1]\fill_area_style.fill_styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FILL_AREA_STYLE_TILES'  IN TYPEOF( fs ) ) )&#10;                | ( NOT ( SIZEOF( fst\fill_area_style_tiles.tiles ) = 1 ) ) ) ) = 0 ) ) ) ) ) = 0 )" label="wr17"/>
         <where expression="( SIZEOF( QUERY ( fas &lt;* QUERY ( sty &lt;* SELF.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FILL_AREA_STYLE'  IN TYPEOF( sty.styles[1] ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( fsh &lt;* QUERY ( fs &lt;* fas.styles[1]\fill_area_style.fill_styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FILL_AREA_STYLE_HATCHING'  IN TYPEOF( fs ) ) )&#10;                | ( NOT ( fsh\fill_area_style_hatching.point_of_reference_hatch_line :=: fsh\fill_area_style_hatching.&#10;                pattern_start ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr18"/>
         <where expression="( SIZEOF( QUERY ( ts &lt;* QUERY ( sty &lt;* SELF.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEXT_STYLE'  IN TYPEOF( sty.styles[1] ) ) )&#10;                | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'TEXT_STYLE_WITH_BOX_CHARACTERISTICS'  ) IN TYPEOF( ts.styles[1] ) ) ) ) ) = 0 )" label="wr19"/>
         <where expression="( SIZEOF( QUERY ( ts &lt;* QUERY ( sty &lt;* SELF.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEXT_STYLE_WITH_BOX_CHARACTERISTICS'  IN &#10;                TYPEOF( sty.styles[1] ) ) ) | ( NOT ( SIZEOF( ts.styles[1]\text_style_with_box_characteristics.characteristics ) =&#10;                4 ) ) ) ) = 0 )" label="wr20"/>
      </entity>
      <entity name="draughting_callout" supertypes="geometric_representation_item">
         <explicit name="contents">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="draughting_callout_element"/>
         </explicit>
         <where expression="( ( SIZEOF( QUERY ( l_1 &lt;* SELF\draughting_callout.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LEADER_CURVE'  IN TYPEOF( l_1 ) ) ) ) = 0 ) OR&#10;               ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LEADER_DIRECTED_CALLOUT' IN TYPEOF( SELF ) ) &#10;               AND ( SIZEOF( QUERY ( l_1 &lt;* SELF\draughting_callout.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROJECTION_CURVE'  IN TYPEOF( l_1 ) ) ) ) = 0 ) ) &#10;               OR ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROJECTION_DIRECTED_CALLOUT' IN TYPEOF( &#10;               SELF ) ) AND ( SIZEOF( QUERY ( l_1 &lt;* SELF\draughting_callout.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIMENSION_CURVE'  IN TYPEOF( l_1 ) ) ) ) = 0 ) ) &#10;               OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIMENSION_CURVE_DIRECTED_CALLOUT' IN &#10;               TYPEOF( SELF ) ) )" label="wr1"/>
      </entity>
      <entity name="draughting_callout_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_draughting_callout">
            <typename name="draughting_callout"/>
         </explicit>
         <explicit name="related_draughting_callout">
            <typename name="draughting_callout"/>
         </explicit>
      </entity>
      <entity name="draughting_elements" supertypes="draughting_callout">
         <where expression="( SIZEOF( QUERY ( l_c &lt;* QUERY ( con &lt;* SELF.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LEADER_CURVE'  IN TYPEOF( con ) ) ) | ( NOT ( &#10;               SIZEOF( QUERY ( ldc &lt;* USEDIN( l_c, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DRAUGHTING_CALLOUT.CONTENTS'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'LEADER_DIRECTED_CALLOUT'  IN TYPEOF( ldc ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIMENSION_CURVE_DIRECTED_CALLOUT' IN &#10;               TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( con &lt;* SELF.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROJECTION_CURVE'  IN TYPEOF( con ) ) ) ) &lt;= 2 ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( rc &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'DRAUGHTING_CALLOUT_'  + 'RELATIONSHIP.RELATING_DRAUGHTING_CALLOUT' ) | ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DIMENSION_CALLOUT_RELATIONSHIP' ) IN &#10;               TYPEOF( rc ) ) AND ( rc.name = 'primary' ) ) ) ) &lt;= 1 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( rc &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'DRAUGHTING_CALLOUT_'  + 'RELATIONSHIP.RELATING_DRAUGHTING_CALLOUT' ) | ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DIMENSION_CALLOUT_RELATIONSHIP' ) IN &#10;               TYPEOF( rc ) ) AND ( rc.name = 'secondary' ) ) ) ) &lt;= 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( sec &lt;* QUERY ( rc &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DRAUGHTING_CALLOUT_'  + 'RELATIONSHIP.'&#10;               + 'RELATING_DRAUGHTING_CALLOUT'  ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' +&#10;               'DIMENSION_CALLOUT_RELATIONSHIP' ) IN TYPEOF( rc ) ) AND ( rc.name = 'secondary' ) ) ) | ( NOT ( SIZEOF( &#10;               QUERY ( prim &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'DRAUGHTING_CALLOUT_'  + 'RELATIONSHIP.RELATING_DRAUGHTING_CALLOUT' ) | ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DIMENSION_CALLOUT_RELATIONSHIP' ) IN &#10;               TYPEOF( prim ) ) AND ( prim.name = 'primary' ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr5"/>
      </entity>
      <entity name="draughting_model" supertypes="representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="draughting_model_item_select"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="SELF\representation.name"/>
         </unique>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DRAUGHTING_MODEL' ] * TYPEOF( mi\mapped_item.&#10;               mapping_source.mapped_representation ) ) = 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( smi &lt;* QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( si\styled_item.item ) ) )&#10;               | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION' IN TYPEOF( &#10;               smi\styled_item.item\mapped_item.mapping_source.mapped_representation ) ) AND ( SIZEOF( QUERY ( sty &lt;* smi\&#10;               styled_item.styles | ( NOT ( SIZEOF( QUERY ( psa &lt;* sty.styles | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE'  IN TYPEOF( psa ) ) ) ) ) = 1 ) ) ) ) &#10;               = 1 ) ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="draughting_model_item_association" supertypes="item_identified_representation_usage">
         <explicit name="definition">
            <typename name="draughting_model_item_definition"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </explicit>
         <explicit name="used_representation">
            <typename name="annotation_representation_select"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </explicit>
         <explicit name="identified_item">
            <typename name="draughting_model_item_association_select"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </explicit>
      </entity>
      <entity name="draughting_pre_defined_colour" supertypes="pre_defined_colour">
         <where expression="( SELF.name IN [ 'red', 'green', 'blue', 'yellow', 'magenta', 'cyan', 'black', 'white'] )" label="wr1"/>
      </entity>
      <entity name="draughting_pre_defined_curve_font" supertypes="pre_defined_curve_font">
         <where expression="( SELF.name IN [ 'continuous', 'chain', 'chain double dash', 'dashed', 'dotted'] )" label="wr1"/>
      </entity>
      <entity name="draughting_pre_defined_text_font" supertypes="pre_defined_text_font">
         <where expression="( SELF.name[1 : 8] = 'ISO 3098' )" label="wr1"/>
      </entity>
      <entity name="draughting_subfigure_representation" supertypes="symbol_representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="draughting_subfigure_representation_item"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( item &lt;* SELF\representation.items | ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_OCCURRENCE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DRAUGHTING_CALLOUT' ] * TYPEOF( item ) ) = 1 ) ) ) &#10;               &gt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( srm &lt;* QUERY ( rm &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'REPRESENTATION_MAP.MAPPED_REPRESENTATION' )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SYMBOL_REPRESENTATION_MAP' IN TYPEOF( rm ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( a_s &lt;* QUERY ( mi &lt;* srm.map_usage | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_SYMBOL'  IN TYPEOF( mi ) ) ) | ( &#10;               NOT ( SIZEOF( QUERY ( aso &lt;* USEDIN( a_s, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'STYLED_ITEM.ITEM'  ) | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'ANNOTATION_SUBFIGURE_OCCURRENCE'  IN TYPEOF( aso ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( SELF.context_of_items.representations_in_context ) = 1 )" label="wr3"/>
      </entity>
      <entity name="draughting_symbol_representation" supertypes="symbol_representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="draughting_symbol_representation_item"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="SELF\representation.name"/>
         </unique>
         <where expression="( SIZEOF( QUERY ( item &lt;* SELF\representation.items | ( SIZEOF( TYPEOF( item ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_CURVE_OCCURRENCE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_SYMBOL_OCCURRENCE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_FILL_AREA_OCCURRENCE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' ] ) = 1 ) ) ) &gt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( item &lt;* SELF\representation.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_SUBFIGURE_OCCURRENCE'  IN TYPEOF( &#10;               item ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( rm &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'REPRESENTATION_MAP.MAPPED_REPRESENTATION'  ) | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SYMBOL_REPRESENTATION_MAP'  IN TYPEOF( rm ) ) ) ) ) &#10;               = 0 )" label="wr3"/>
         <where expression="( SIZEOF( SELF.context_of_items.representations_in_context ) = 1 )" label="wr4"/>
      </entity>
      <entity name="draughting_text_literal_with_delineation" supertypes="text_literal_with_delineation">
         <where expression="( SELF.delineation IN [ 'underline', 'overline'] )" label="wr1"/>
      </entity>
      <entity name="draughting_title">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="draughting_titled_item"/>
         </explicit>
         <explicit name="language">
            <typename name="label"/>
         </explicit>
         <explicit name="contents">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="drawing_definition">
         <explicit name="drawing_number">
            <typename name="identifier"/>
         </explicit>
         <explicit name="drawing_type" optional="YES">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="drawing_revision" supertypes="presentation_set">
         <explicit name="revision_identifier">
            <typename name="identifier"/>
         </explicit>
         <explicit name="drawing_identifier">
            <typename name="drawing_definition"/>
         </explicit>
         <explicit name="intended_scale" optional="YES">
            <typename name="text"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="revision_identifier"/>
            <unique.attribute attribute="drawing_identifier"/>
         </unique>
      </entity>
      <entity name="drawing_revision_sequence">
         <explicit name="predecessor">
            <typename name="drawing_revision"/>
         </explicit>
         <explicit name="successor">
            <typename name="drawing_revision"/>
         </explicit>
         <where expression="( predecessor :&lt;&gt;: successor )" label="wr1"/>
      </entity>
      <entity name="drawing_sheet_layout" supertypes="draughting_symbol_representation"/>
      <entity name="drawing_sheet_revision" supertypes="presentation_area">
         <explicit name="revision_identifier">
            <typename name="identifier"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( item &lt;* SELF\representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( item ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DRAWING_SHEET_REVISION'  IN TYPEOF( item\&#10;               mapped_item.mapping_source.mapped_representation ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="drawing_sheet_revision_sequence" supertypes="representation_relationship">
         <where expression="( SELF\representation_relationship.rep_1 :&lt;&gt;: SELF\representation_relationship.rep_2 )" label="wr1"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DRAWING_SHEET_REVISION' IN TYPEOF( SELF\&#10;               representation_relationship.rep_1 ) )" label="wr2"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DRAWING_SHEET_REVISION' IN TYPEOF( SELF\&#10;               representation_relationship.rep_2 ) )" label="wr3"/>
      </entity>
      <entity name="drawing_sheet_revision_usage" supertypes="area_in_set">
         <explicit name="sheet_number">
            <typename name="identifier"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="sheet_number"/>
            <unique.attribute attribute="SELF\area_in_set.in_set"/>
         </unique>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DRAWING_SHEET_REVISION' IN TYPEOF( SELF\&#10;               area_in_set.area ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DRAWING_REVISION' IN&#10;               TYPEOF( SELF\area_in_set.in_set ) ) )" label="wr1"/>
      </entity>
      <entity name="edge" super.expression="ONEOF (edge_curve, oriented_edge, subedge)" supertypes="topological_representation_item">
         <explicit name="edge_start">
            <typename name="vertex"/>
         </explicit>
         <explicit name="edge_end">
            <typename name="vertex"/>
         </explicit>
      </entity>
      <entity name="edge_based_wireframe_model" supertypes="geometric_representation_item">
         <explicit name="ebwm_boundary">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="connected_edge_set"/>
         </explicit>
      </entity>
      <entity name="edge_based_wireframe_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_BASED_WIREFRAME_MODEL' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'EDGE_BASED_WIREFRAME_MODEL' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'] &#10;               * TYPEOF( it ) ) = 1 ) ) ) &gt;= 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( ebwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( eb &lt;* ebwm\edge_based_wireframe_model.ebwm_boundary | ( NOT ( SIZEOF( QUERY ( edges &lt;* eb&#10;               .ces_edges | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_CURVE' IN TYPEOF( &#10;               edges ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( ebwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( eb &lt;* ebwm\edge_based_wireframe_model.ebwm_boundary | ( NOT ( SIZEOF( &#10;               QUERY ( pline_edges &lt;* QUERY ( edges &lt;* eb.ces_edges | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE'  IN TYPEOF( edges\edge_curve.&#10;               edge_geometry ) ) ) | ( NOT ( SIZEOF( pline_edges\edge_curve.edge_geometry\polyline.points ) &gt; 2 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( ebwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( eb &lt;* ebwm\edge_based_wireframe_model.ebwm_boundary | ( NOT ( SIZEOF( QUERY ( edges &lt;* eb&#10;               .ces_edges | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT' IN &#10;               TYPEOF( edges.edge_start ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT' &#10;               IN TYPEOF( edges.edge_end ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( ebwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( eb &lt;* ebwm\edge_based_wireframe_model.ebwm_boundary | ( NOT ( SIZEOF( QUERY ( edges &lt;* eb&#10;               .ces_edges | ( NOT valid_wireframe_edge_curve( edges\edge_curve.edge_geometry ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( ebwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( eb &lt;* ebwm\edge_based_wireframe_model.ebwm_boundary | ( NOT ( SIZEOF( QUERY ( edges &lt;* eb&#10;               .ces_edges | ( NOT ( valid_wireframe_vertex_point( edges.edge_start\vertex_point.vertex_geometry ) AND &#10;               valid_wireframe_vertex_point( edges.edge_end\vertex_point.vertex_geometry ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'EDGE_BASED_WIREFRAME_SHAPE_REPRESENTATION'  ) &#10;               IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SELF.context_of_items\geometric_representation_context.coordinate_space_dimension = 3 )" label="wr9"/>
      </entity>
      <entity abstract.supertype="YES" name="edge_blended_solid" super.expression="track_blended_solid ANDOR ONEOF (solid_with_constant_radius_edge_blend, solid_with_chamfered_edges)" supertypes="modified_solid">
         <explicit name="blended_edges">
            <aggregate lower="1" type="LIST" unique="YES" upper="?"/>
            <typename name="edge_curve"/>
         </explicit>
      </entity>
      <entity name="edge_curve" supertypes="edge geometric_representation_item">
         <explicit name="edge_geometry">
            <typename name="curve"/>
         </explicit>
         <explicit name="same_sense">
            <builtintype type="BOOLEAN"/>
         </explicit>
      </entity>
      <entity name="edge_loop" supertypes="loop path">
         <derived expression="SIZEOF( SELF\path.edge_list )" name="ne">
            <builtintype type="INTEGER"/>
         </derived>
         <where expression="( SELF\path.edge_list[1].edge_start :=: SELF\path.edge_list[ne].edge_end )" label="wr1"/>
      </entity>
      <entity name="edge_round" supertypes="transition_feature">
         <where expression="( ( NOT ( SELF\shape_aspect.description = 'constant radius' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr1"/>
         <where expression="( ( NOT ( SELF\shape_aspect.description = 'constant radius' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( ( NOT ( SIZEOF( impl_rep.used_representation.items ) &gt;= 1 ) ) AND ( &#10;               SIZEOF( impl_rep.used_representation.items ) &lt;= 3 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr2"/>
         <where expression="( ( NOT ( SELF.description = 'constant radius' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'radius' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( ( NOT ( SELF.description = 'constant radius' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'first offset' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( ( NOT ( SELF.description = 'constant radius' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'second offset' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION' IN TYPEOF( pdr&#10;               .used_representation ) ) AND ( pdr.used_representation.name = 'edge round face' ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION' IN TYPEOF( pdr&#10;               .used_representation ) ) AND ( pdr.used_representation.name = 'first face shape' ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION' IN TYPEOF( pdr&#10;               .used_representation ) ) AND ( pdr.used_representation.name = 'second face shape' ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr8"/>
      </entity>
      <entity name="edge_segment_cross_section" supertypes="shape_definition_3d_intersection"/>
      <entity name="edge_segment_vertex" supertypes="shape_aspect">
         <where expression="( SELF\shape_aspect.product_definitional = TRUE )" label="wr1"/>
      </entity>
      <entity name="edge_with_excessive_segments" supertypes="overcomplex_topology_and_geometry_relationship">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'EDGE_CURVE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity name="effectivity" super.expression="ONEOF (serial_numbered_effectivity, dated_effectivity, lot_effectivity, time_interval_based_effectivity)">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <derived expression="get_name_value( SELF )" name="name">
            <typename name="label"/>
         </derived>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.'&#10;               + 'NAMED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr2"/>
      </entity>
      <entity abstract.supertype="YES" name="effectivity_assignment">
         <explicit name="assigned_effectivity">
            <typename name="effectivity"/>
         </explicit>
         <derived expression="get_role( SELF )" name="role">
            <typename name="object_role"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ROLE_ASSOCIATION.'&#10;               + 'ITEM_WITH_ROLE'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="effectivity_context_assignment">
         <explicit name="assigned_effectivity_assignment">
            <typename name="effectivity_assignment"/>
         </explicit>
         <explicit name="role">
            <typename name="effectivity_context_role"/>
         </explicit>
      </entity>
      <entity name="effectivity_context_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="effectivity_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="related_effectivity">
            <typename name="effectivity"/>
         </explicit>
         <explicit name="relating_effectivity">
            <typename name="effectivity"/>
         </explicit>
      </entity>
      <entity name="electric_charge_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELECTRIC_CHARGE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="electric_charge_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.coulomb ) )" label="wr1"/>
      </entity>
      <entity name="electric_current_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELECTRIC_CURRENT_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="electric_current_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 1 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="electric_potential_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELECTRIC_POTENTIAL_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="electric_potential_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.volt ) )" label="wr1"/>
      </entity>
      <entity name="electrical_isolation_laminate_component" supertypes="material_removal_laminate_component"/>
      <entity name="electrical_isolation_removal_template" supertypes="material_removal_feature_template"/>
      <entity name="electrical_network" supertypes="functional_unit"/>
      <entity name="electromagnetic_compatibility_requirement_allocation" super.expression="assembly_shield_allocation" supertypes="requirement_assignment"/>
      <entity name="elementary_brep_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACETED_BREP' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) &#10;                = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MANIFOLD_SOLID_BREP' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'] * &#10;                TYPEOF( it ) ) = 1 ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( SIZEOF( QUERY ( fcs &lt;* csh.cfs_faces | ( NOT ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SURFACE'  IN TYPEOF( fcs ) ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( SIZEOF( QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces&#10;                | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELEMENTARY_SURFACE' IN TYPEOF( fcs\&#10;                face_surface.face_geometry ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( SIZEOF( QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces&#10;                | ( NOT ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fcs.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( NOT ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe.edge_element ) ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( SIZEOF( QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces&#10;                | ( NOT ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fcs.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE' ] * TYPEOF( oe.edge_element\&#10;                edge_curve.edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( SIZEOF( QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces&#10;                | ( NOT ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fcs.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( NOT ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe.edge_start ) ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT' IN TYPEOF( oe.edge_end ) ) ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( SIZEOF( QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces&#10;                | ( NOT ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fcs.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE'  IN TYPEOF( oe.edge_element\&#10;                edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( oe\oriented_edge.edge_element\edge_curve.edge_geometry\polyline.&#10;                points ) &gt;= 3 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_CLOSED_SHELL'  IN TYPEOF( msb\&#10;                manifold_solid_brep.outer ) ) ) ) = 0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( brv &lt;* QUERY ( it &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'BREP_WITH_VOIDS'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* brv\brep_with_voids.voids | csh\&#10;                oriented_closed_shell.orientation ) ) = 0 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELEMENTARY_BREP_SHAPE_REPRESENTATION'  IN &#10;                TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) ) ) ) = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( SIZEOF( QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces&#10;                | ( NOT ( SIZEOF( QUERY ( vlp_fbnds &lt;* QUERY ( bnds &lt;* fcs.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_LOOP'  IN TYPEOF( bnds.bound ) ) ) | &#10;                ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT' IN TYPEOF( vlp_fbnds\&#10;                face_bound.bound\vertex_loop.loop_vertex ) ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT'  IN TYPEOF( vlp_fbnds\&#10;                face_bound.bound\vertex_loop.loop_vertex\vertex_point.vertex_geometry ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 )" label="wr12"/>
      </entity>
      <entity name="elementary_function" supertypes="maths_function generic_literal">
         <explicit name="func_id">
            <typename name="elementary_function_enumerators"/>
         </explicit>
      </entity>
      <entity name="elementary_space" supertypes="maths_space generic_literal">
         <explicit name="space_id">
            <typename name="elementary_space_enumerators"/>
         </explicit>
      </entity>
      <entity name="elementary_surface" super.expression="ONEOF (plane, cylindrical_surface, conical_surface, spherical_surface, toroidal_surface)" supertypes="surface">
         <explicit name="position">
            <typename name="axis2_placement_3d"/>
         </explicit>
      </entity>
      <entity name="ellipse" supertypes="conic">
         <explicit name="semi_axis_1">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="semi_axis_2">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="elliptic_area" supertypes="primitive_2d">
         <explicit name="position">
            <typename name="axis2_placement_2d"/>
         </explicit>
         <explicit name="semi_axis_1">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="semi_axis_2">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="energy_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ENERGY_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="energy_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.joule ) )" label="wr1"/>
      </entity>
      <entity name="entirely_narrow_face" supertypes="topology_related_to_nearly_degenerate_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="width_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACE_SURFACE' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr4"/>
      </entity>
      <entity name="entirely_narrow_solid" supertypes="inapt_manifold_solid_brep">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="width_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MANIFOLD_SOLID_BREP' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr4"/>
      </entity>
      <entity name="entirely_narrow_surface" supertypes="nearly_degenerate_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="width_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'BOUNDED_SURFACE' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr4"/>
      </entity>
      <entity name="entity_assertion" supertypes="fact_type"/>
      <entity name="enum_reference_prefix" supertypes="descriptive_representation_item"/>
      <entity name="environment">
         <explicit name="syntactic_representation">
            <typename name="generic_variable"/>
         </explicit>
         <explicit name="semantics">
            <typename name="variable_semantics"/>
         </explicit>
      </entity>
      <entity name="equal_parameter_constraint" supertypes="defined_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="variational_parameter"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="1"/>
            <typename name="variational_parameter"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <where expression="( SIZEOF( SELF\explicit_constraint.constrained_elements + SELF\explicit_constraint.reference_elements ) &gt;= 2 )" label="wr1"/>
      </entity>
      <entity name="equals_expression" supertypes="binary_boolean_expression"/>
      <entity name="equivalent_stackup_model_definition" supertypes="product_definition product_definition_relationship">
         <explicit name="relating_product_definition">
            <typename name="stratum_stack_model"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </explicit>
         <explicit name="related_product_definition">
            <typename name="stratum_stack_model"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </explicit>
         <derived expression="SELF\product_definition_relationship.related_product_definition" name="equivalent_stackup_model">
            <typename name="stratum_stack_model"/>
         </derived>
         <derived expression="SELF\product_definition_relationship.relating_product_definition" name="primary_stackup_model">
            <typename name="stratum_stack_model"/>
         </derived>
         <where expression="( primary_stackup_model :&lt;&gt;: equivalent_stackup_model )" label="wr1"/>
      </entity>
      <entity name="equivalent_sub_stack_definition" supertypes="product_definition"/>
      <entity name="erroneous_b_spline_curve_definition" supertypes="erroneous_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_CURVE_WITH_KNOTS' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="erroneous_b_spline_surface_definition" supertypes="erroneous_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_SURFACE_WITH_KNOTS' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity abstract.supertype="YES" name="erroneous_data" super.expression="ONEOF (erroneous_topology, erroneous_geometry, erroneous_topology_and_geometry_relationship, erroneous_manifold_solid_brep)" supertypes="shape_data_quality_criterion"/>
      <entity abstract.supertype="YES" name="erroneous_geometry" super.expression="ONEOF (inconsistent_curve_transition_code, erroneous_b_spline_curve_definition, inconsistent_surface_transition_code, erroneous_b_spline_surface_definition)" supertypes="erroneous_data"/>
      <entity abstract.supertype="YES" name="erroneous_manifold_solid_brep" super.expression="ONEOF (wrongly_oriented_void, wrongly_placed_void, intersecting_shells_in_solid, solid_with_wrong_number_of_voids)" supertypes="erroneous_data"/>
      <entity abstract.supertype="YES" name="erroneous_topology" super.expression="ONEOF (open_edge_loop, open_closed_shell, inconsistent_adjacent_face_normals, disconnected_face_set)" supertypes="erroneous_data"/>
      <entity abstract.supertype="YES" name="erroneous_topology_and_geometry_relationship" super.expression="ONEOF (inconsistent_edge_and_curve_directions, inconsistent_face_and_surface_normals, inconsistent_face_and_closed_shell_normals, intersecting_loops_in_face, wrongly_placed_loop)" supertypes="erroneous_data"/>
      <entity name="evaluated_characteristic" supertypes="representation representation_relationship">
         <unique label="ur1">
            <unique.attribute attribute="SELF\representation_relationship.rep_1"/>
            <unique.attribute attribute="SELF\representation_relationship.rep_2"/>
         </unique>
         <where expression="( SELF\representation_relationship.rep_1 &lt;&gt; SELF\representation_relationship.rep_2 )" label="wr1"/>
      </entity>
      <entity name="evaluated_characteristic_of_product_as_individual_test_result" supertypes="evaluated_characteristic"/>
      <entity name="evaluated_degenerate_pcurve" supertypes="degenerate_pcurve">
         <explicit name="equivalent_point">
            <typename name="cartesian_point"/>
         </explicit>
      </entity>
      <entity name="evaluation_product_definition" supertypes="product_definition"/>
      <entity name="event_occurrence">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="event_occurrence_assignment">
         <explicit name="assigned_event_occurrence">
            <typename name="event_occurrence"/>
         </explicit>
         <explicit name="role">
            <typename name="event_occurrence_role"/>
         </explicit>
      </entity>
      <entity name="event_occurrence_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_event">
            <typename name="event_occurrence"/>
         </explicit>
         <explicit name="related_event">
            <typename name="event_occurrence"/>
         </explicit>
      </entity>
      <entity name="event_occurrence_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="excessive_use_of_groups" supertypes="externally_conditioned_data_quality_criterion">
         <where expression="validate_ecdq_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'GROUP' ] )" label="wr1"/>
      </entity>
      <entity name="excessive_use_of_layers" supertypes="externally_conditioned_data_quality_criterion">
         <where expression="validate_ecdq_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRESENTATION_LAYER_ASSIGNMENT' ] )" label="wr1"/>
      </entity>
      <entity name="excessively_high_degree_curve" supertypes="overcomplex_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_CURVE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity name="excessively_high_degree_surface" supertypes="overcomplex_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity name="exclusive_product_concept_feature_category" supertypes="product_concept_feature_category"/>
      <entity name="executed_action" supertypes="action"/>
      <entity name="exp_function" supertypes="unary_function_call"/>
      <entity name="expanded_uncertainty" supertypes="standard_uncertainty">
         <explicit name="coverage_factor">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="explicit_constraint" super.expression="ONEOF (defined_constraint, free_form_constraint)" supertypes="variational_representation_item">
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="representation_item"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="representation_item"/>
         </explicit>
         <where expression="( SIZEOF( constrained_elements * reference_elements ) = 0 )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="explicit_geometric_constraint" super.expression="ONEOF (fixed_element_geometric_constraint, parallel_geometric_constraint, point_distance_geometric_constraint, skew_line_distance_geometric_constraint, curve_distance_geometric_constraint, surface_distance_geometric_constraint, radius_geometric_constraint, curve_length_geometric_constraint, parallel_offset_geometric_constraint, angle_geometric_constraint, perpendicular_geometric_constraint, incidence_geometric_constraint, coaxial_geometric_constraint, tangent_geometric_constraint, symmetry_geometric_constraint, swept_point_curve_geometric_constraint, swept_curve_surface_geometric_constraint, curve_smoothness_geometric_constraint, surface_smoothness_geometric_constraint)" supertypes="defined_constraint geometric_representation_item">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="geometric_representation_item"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="geometric_representation_item"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
      </entity>
      <entity name="explicit_procedural_geometric_representation_item_relationship" supertypes="explicit_procedural_representation_item_relationship">
         <explicit name="relating_representation_item">
            <typename name="procedural_shape_representation_sequence"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <explicit name="related_representation_item">
            <typename name="geometric_representation_item"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROCEDURAL_SHAPE_REPRESENTATION_SEQUENCE' &#10;               IN TYPEOF( SELF\representation_item_relationship.related_representation_item ) ) )" label="wr1"/>
      </entity>
      <entity name="explicit_procedural_representation_item_relationship" supertypes="representation_item_relationship">
         <explicit name="relating_representation_item">
            <typename name="procedural_representation_sequence"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROCEDURAL_REPRESENTATION_SEQUENCE' IN &#10;               TYPEOF( SELF\representation_item_relationship.related_representation_item ) ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* using_representations( SELF\representation_item_relationship.related_representation_item ) | &#10;               item_in_context( SELF\representation_item_relationship.relating_representation_item, q.context_of_items ) ) ) &gt; 0 )" label="wr2"/>
      </entity>
      <entity name="explicit_procedural_representation_relationship" supertypes="representation_relationship">
         <explicit name="rep_1">
            <typename name="procedural_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROCEDURAL_REPRESENTATION' IN TYPEOF( &#10;               SELF\representation_relationship.rep_2 ) ) ) AND ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VARIATIONAL_REPRESENTATION'  IN TYPEOF( SELF\&#10;               representation_relationship.rep_2 ) ) ) )" label="wr1"/>
         <where expression="( SELF\representation_relationship.rep_1.context_of_items :=: SELF\representation_relationship.rep_2.context_of_items )" label="wr2"/>
      </entity>
      <entity name="explicit_procedural_shape_representation_relationship" supertypes="explicit_procedural_representation_relationship">
         <explicit name="rep_1">
            <typename name="procedural_shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="explicit_table_function" super.expression="ONEOF (listed_data, externally_listed_data, linearized_table_function, basic_sparse_matrix)" supertypes="maths_function">
         <explicit name="index_base">
            <typename name="zero_or_one"/>
         </explicit>
         <explicit name="shape">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="positive_integer"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="expression" super.expression="ONEOF (numeric_expression, boolean_expression, string_expression)" supertypes="generic_expression"/>
      <entity name="expression_conversion_based_unit" supertypes="context_dependent_unit variable_semantics">
         <inverse attribute="semantics" entity="environment" name="associated_variable_environment"/>
      </entity>
      <entity name="expression_denoted_function" supertypes="maths_function unary_generic_expression">
         <derived expression="SELF\unary_generic_expression.operand" name="expr">
            <typename name="generic_expression"/>
         </derived>
         <where expression="( ( schema_prefix + 'FUNCTION_SPACE' ) IN TYPEOF( values_space_of( expr ) ) )" label="wr1"/>
      </entity>
      <entity name="expression_extension_numeric" supertypes="measure_with_unit numeric_expression"/>
      <entity name="expression_extension_string" supertypes="measure_with_unit string_expression"/>
      <entity name="expression_extension_to_select">
         <explicit name="type_expression_associated">
            <typename name="expression_extension_select"/>
         </explicit>
      </entity>
      <entity name="extended_tuple_space" supertypes="maths_space generic_literal">
         <explicit name="base">
            <typename name="product_space"/>
         </explicit>
         <explicit name="extender">
            <typename name="maths_space"/>
         </explicit>
         <where expression="( expression_is_constant( base ) AND expression_is_constant( extender ) )" label="wr1"/>
         <where expression="no_cyclic_space_reference( SELF, [] )" label="wr2"/>
         <where expression="( extender &lt;&gt; the_empty_space )" label="wr3"/>
      </entity>
      <entity name="extension" supertypes="derived_shape_aspect">
         <where expression="( SIZEOF( SELF\derived_shape_aspect.deriving_relationships ) = 1 )" label="wr1"/>
      </entity>
      <entity name="extent" supertypes="characterized_object"/>
      <entity name="external_class_library" supertypes="external_source"/>
      <entity abstract.supertype="YES" name="external_identification_assignment" supertypes="identification_assignment">
         <explicit name="source">
            <typename name="external_source"/>
         </explicit>
      </entity>
      <entity name="external_source">
         <explicit name="source_id">
            <typename name="source_item"/>
         </explicit>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="external_source_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_source">
            <typename name="external_source"/>
         </explicit>
         <explicit name="related_source">
            <typename name="external_source"/>
         </explicit>
      </entity>
      <entity name="externally_conditioned_data_quality_criteria_representation" supertypes="data_quality_criteria_representation">
         <where expression="( SIZEOF( QUERY ( q &lt;* SELF\representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;               'EXTERNALLY_CONDITIONED_DATA_QUALITY_CRITERION'  ) IN TYPEOF( q ) ) ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="externally_conditioned_data_quality_criterion" supertypes="data_quality_criterion data_quality_measurement_requirement">
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DATA_QUALITY_CRITERION_ASSESSMENT_ASSOCIATION.'  + 'CRITERION' ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( i1 &lt;* bag_to_set( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'REPRESENTATION_ITEM_RELATIONSHIP.' + 'RELATED_REPRESENTATION_ITEM' ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;               'DATA_QUALITY_CRITERION_MEASUREMENT_ASSOCIATION'  ) IN TYPEOF( i1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( i1 &lt;* bag_to_set( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'REPRESENTATION_ITEM_RELATIONSHIP.' + 'RELATING_REPRESENTATION_ITEM' ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;               'DATA_QUALITY_CRITERION_MEASUREMENT_ASSOCIATION'  ) IN TYPEOF( i1 ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="externally_conditioned_data_quality_inspection_instance_report_item" supertypes="data_quality_inspection_instance_report_item">
         <explicit name="inspected_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="inspected_ecdq_element_select"/>
            <redeclaration entity-ref="data_quality_inspection_instance_report_item"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( i1 &lt;* bag_to_set( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'DATA_QUALITY_INSPECTION_INSTANCE_REPORT.' + 'INSPECTED_INSTANCES' ) ) | ( NOT ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;               'EXTERNALLY_CONDITIONED_DATA_QUALITY_INSPECTION_RESULT'  ) IN TYPEOF( i1.inspection_result ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="externally_conditioned_data_quality_inspection_result" supertypes="data_quality_inspection_result">
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'EXTERNALLY_CONDITIONED_DATA_QUALITY_CRITERION'  ) IN TYPEOF( SELF\data_quality_inspection_result.&#10;               criterion_inspected ) )" label="wr1"/>
      </entity>
      <entity name="externally_conditioned_data_quality_inspection_result_representation" supertypes="data_quality_inspection_result_representation">
         <where expression="( SIZEOF( QUERY ( q &lt;* SELF\representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;               'EXTERNALLY_CONDITIONED_DATA_QUALITY_INSPECTION_RESULT'  ) IN TYPEOF( q ) ) ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="externally_defined_character_glyph" supertypes="externally_defined_item"/>
      <entity name="externally_defined_class" supertypes="class externally_defined_item"/>
      <entity name="externally_defined_colour" supertypes="colour_specification externally_defined_item"/>
      <entity name="externally_defined_context_dependent_unit" supertypes="context_dependent_unit externally_defined_item"/>
      <entity name="externally_defined_conversion_based_unit" supertypes="conversion_based_unit externally_defined_item"/>
      <entity name="externally_defined_currency" supertypes="currency externally_defined_context_dependent_unit"/>
      <entity name="externally_defined_curve_font" supertypes="externally_defined_item"/>
      <entity name="externally_defined_dimension_definition" supertypes="dimensional_size externally_defined_item">
         <where expression="( ( SELF\externally_defined_item.item_id = 'external size dimension' ) AND ( SELF\externally_defined_item.source.&#10;               source_id = 'external size dimension specification' ) )" label="wr1"/>
         <where expression="( 1 &gt;= SIZEOF( QUERY ( adr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'APPLIED_DOCUMENT_REFERENCE.ITEMS'  ) | ( adr.assigned_document.description = &#10;               'external size dimension specification'  ) ) ) )" label="wr2"/>
      </entity>
      <entity name="externally_defined_feature_definition" supertypes="feature_definition externally_defined_item">
         <where expression="( ( ( SELF\characterized_object.description = 'thread' ) AND ( SELF\externally_defined_item.item_id = 'external thread'  ) &#10;                AND ( SELF\externally_defined_item.source.source_id = 'external feature specification' ) ) OR ( ( SELF\&#10;                characterized_object.description = 'gear' ) AND ( SELF\externally_defined_item.item_id = 'external gear' ) AND ( &#10;                SELF\externally_defined_item.source.source_id = 'external feature specification' ) ) OR ( ( SELF\&#10;                characterized_object.description = 'marking' ) AND ( SELF\externally_defined_item.item_id = 'external marking' ) &#10;                AND ( SELF\externally_defined_item.source.source_id = 'external feature specification' ) ) OR ( ( SELF\&#10;                characterized_object.description = 'knurl' ) AND ( SELF\externally_defined_item.item_id = 'external knurl' ) AND &#10;                ( SELF\externally_defined_item.source.source_id = 'external feature specification' ) ) )" label="wr1"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'thread' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( 5 &lt;= SIZEOF( pdr.used_representation.items ) ) AND ( SIZEOF( pdr.&#10;                used_representation.items ) &lt;= 10 ) ) ) ) = 1 ) ) ) = 1 ) )" label="wr2"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'marking' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( pdr.used_representation.items ) = 2 ) ) ) ) = 1 ) ) ) = 1 ) )" label="wr3"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'knurl' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( pdr.used_representation.items ) = 1 ) ) ) ) = 1 ) ) ) = 1 ) )" label="wr4"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'knurl', 'thread'] ) ) OR ( SIZEOF( QUERY ( pds &lt;* &#10;                QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'partial area occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'  + &#10;                'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'applied area usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.APPLIED_AREA' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'marking' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'marking text' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr6"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'thread' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'removal direction' ) AND ( ( it.description = 'internal' ) OR ( it.description = 'external' ) ) ) ) ) &#10;                = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr7"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'thread' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'qualifier' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr8"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'thread' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'hand' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr9"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'thread' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'fit class' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr10"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'thread' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'form' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr11"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'thread' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'major diameter' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr12"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'thread' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RATIO_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;                2 ) AND ( it.name = 'number of threads' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr13"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'fit class 2' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr14"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'nominal size' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr15"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'knurl', 'gear', 'thread'] ) ) OR ( SIZEOF( QUERY ( pds &lt;* &#10;                QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;                QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.'  + 'RELATED_SHAPE_ASPECT' ) | ( ( sar.description = 'applied shape' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) &lt;= 1 ) ) ) ) = 0 ) )" label="wr16"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'gear'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( 10 &lt;= SIZEOF( pdr.used_representation.items ) ) AND ( SIZEOF( pdr.&#10;                used_representation.items ) &gt;= 11 ) ) ) ) = 1 ) ) ) = 1 ) )" label="wr17"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'gear'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RATIO_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;                2 ) AND ( it.name = 'number of teeth' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr18"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'gear'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'reference pressure angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr19"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'gear'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'rake shift factor' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr20"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'gear'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'nominal tooth depth' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr21"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'gear'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'face width' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr22"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'gear'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'tip diameter' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr23"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'gear'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'module or diametral pitch' ) AND ( ( it.description = 'module' ) OR ( it.description = &#10;                'diametral pitch'  ) ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr24"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'gear'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'normal attribute' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr25"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'gear'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'internal or external gear' ) AND ( ( it.description = 'internal' ) OR ( it.description = &#10;                'external'  ) ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr26"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'gear'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'root fillet radius' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr27"/>
      </entity>
      <entity name="externally_defined_general_property" supertypes="general_property externally_defined_item"/>
      <entity name="externally_defined_hatch_style" supertypes="externally_defined_item geometric_representation_item"/>
      <entity name="externally_defined_item">
         <explicit name="item_id">
            <typename name="source_item"/>
         </explicit>
         <explicit name="source">
            <typename name="external_source"/>
         </explicit>
      </entity>
      <entity name="externally_defined_item_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_item">
            <typename name="externally_defined_item"/>
         </explicit>
         <explicit name="related_item">
            <typename name="externally_defined_item"/>
         </explicit>
      </entity>
      <entity name="externally_defined_item_with_multiple_references" supertypes="externally_defined_item">
         <explicit name="references">
            <aggregate lower="1" type="LIST" unique="YES" upper="?"/>
            <typename name="source_item"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="references"/>
         </unique>
         <where expression="( NOT ( SELF\externally_defined_item.item_id IN references ) )" label="wr1"/>
      </entity>
      <entity name="externally_defined_marker" supertypes="externally_defined_symbol pre_defined_marker"/>
      <entity name="externally_defined_physical_network_group" supertypes="physical_network_group"/>
      <entity name="externally_defined_physical_network_group_element_relationship" supertypes="physical_network_group_element_relationship"/>
      <entity name="externally_defined_picture_representation_item" supertypes="picture_representation_item">
         <inverse attribute="items" entity="applied_external_identification_assignment" name="source"/>
         <where expression="( NOT ( SELF\representation_item.name IN pre_defined_picture_representation_types ) )" label="wr1"/>
      </entity>
      <entity name="externally_defined_representation" supertypes="representation externally_defined_item">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="externally_defined_representation_item"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
      </entity>
      <entity name="externally_defined_representation_item" supertypes="representation_item externally_defined_item"/>
      <entity name="externally_defined_string" supertypes="externally_defined_representation_item"/>
      <entity name="externally_defined_style" supertypes="externally_defined_item founded_item"/>
      <entity name="externally_defined_symbol" supertypes="externally_defined_item"/>
      <entity name="externally_defined_terminator_symbol" supertypes="externally_defined_symbol"/>
      <entity name="externally_defined_text_font" supertypes="externally_defined_item"/>
      <entity name="externally_defined_tile" supertypes="externally_defined_item"/>
      <entity name="externally_defined_tile_style" supertypes="externally_defined_item geometric_representation_item"/>
      <entity name="externally_listed_data" supertypes="explicit_table_function generic_literal externally_defined_item">
         <explicit name="value_range">
            <typename name="maths_space"/>
         </explicit>
         <where expression="expression_is_constant( value_range )" label="wr1"/>
      </entity>
      <entity name="extreme_instance">
         <explicit name="locations_of_extreme_value">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="location_of_extreme_value_select"/>
         </explicit>
         <explicit name="measured_value">
            <typename name="measured_value_select"/>
         </explicit>
      </entity>
      <entity name="extreme_patch_width_variation" supertypes="geometry_with_local_irregularity">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RATIO_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RATIO_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'B_SPLINE_SURFACE_KNOT_LOCATOR'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="extruded_area_solid" supertypes="swept_area_solid">
         <explicit name="extruded_direction">
            <typename name="direction"/>
         </explicit>
         <explicit name="depth">
            <typename name="positive_length_measure"/>
         </explicit>
         <where expression="( dot_product( SELF\swept_area_solid.swept_area.basis_surface\elementary_surface.position.p[3], extruded_direction ) &#10;               &lt;&gt; 0 )" label="wr1"/>
      </entity>
      <entity name="extruded_face_solid" supertypes="swept_face_solid">
         <explicit name="extruded_direction">
            <typename name="direction"/>
         </explicit>
         <explicit name="depth">
            <typename name="positive_length_measure"/>
         </explicit>
         <where expression="( dot_product( SELF\swept_face_solid.swept_face.face_geometry\elementary_surface.position.p[3], extruded_direction ) &#10;               &lt;&gt; 0 )" label="wr1"/>
      </entity>
      <entity name="extruded_face_solid_with_draft_angle" supertypes="extruded_face_solid_with_trim_conditions">
         <explicit name="draft_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( draft_angle &lt;&gt; 0 )" label="wr1"/>
      </entity>
      <entity name="extruded_face_solid_with_multiple_draft_angles" supertypes="extruded_face_solid_with_trim_conditions">
         <explicit name="drafted_edges">
            <aggregate lower="2" type="LIST" upper="?"/>
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="edge_curve"/>
         </explicit>
         <explicit name="draft_angles">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( SIZEOF( drafted_edges ) = SIZEOF( draft_angles ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* draft_angles | ( q = 0 ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* drafted_edges | ( SIZEOF( QUERY ( r &lt;* q | ( NOT ( SELF\swept_face_solid.swept_face IN &#10;               using_items( r, [] ) ) ) ) ) &gt; 0 ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="extruded_face_solid_with_trim_conditions" super.expression="ONEOF (extruded_face_solid_with_draft_angle, extruded_face_solid_with_multiple_draft_angles)" supertypes="extruded_face_solid">
         <explicit name="first_trim_condition">
            <typename name="trim_condition_select"/>
         </explicit>
         <explicit name="second_trim_condition">
            <typename name="trim_condition_select"/>
         </explicit>
         <explicit name="first_trim_intent">
            <typename name="trim_intent"/>
         </explicit>
         <explicit name="second_trim_intent">
            <typename name="trim_intent"/>
         </explicit>
         <explicit name="first_offset">
            <typename name="non_negative_length_measure"/>
         </explicit>
         <explicit name="second_offset">
            <typename name="non_negative_length_measure"/>
         </explicit>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE' IN TYPEOF( &#10;               first_trim_condition ) ) OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE'  IN TYPEOF( second_trim_condition ) ) ) )" label="wr1"/>
         <where expression="( NOT ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' IN TYPEOF( &#10;               first_trim_condition ) ) AND ( ( first_trim_intent = trim_intent.offset ) OR ( first_trim_intent = trim_intent.&#10;               up_to_next ) ) ) OR ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' IN &#10;               TYPEOF( second_trim_condition ) ) AND ( ( second_trim_intent = trim_intent.offset ) OR ( second_trim_intent = &#10;               trim_intent.up_to_next ) ) ) ) )" label="wr2"/>
         <where expression="( NOT ( ( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' IN TYPEOF( &#10;               first_trim_condition ) ) ) AND ( ( first_trim_intent = trim_intent.blind ) OR ( first_trim_intent = trim_intent.&#10;               through_all ) ) ) OR ( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' &#10;               IN TYPEOF( second_trim_condition ) ) ) AND ( ( second_trim_intent = trim_intent.blind ) OR ( second_trim_intent = &#10;               trim_intent.through_all ) ) ) ) )" label="wr3"/>
         <where expression="( ( ( ( first_trim_intent = trim_intent.offset ) AND ( first_offset &gt; 0 ) ) XOR ( ( first_trim_intent &lt;&gt; trim_intent.&#10;               offset ) AND ( first_offset = 0 ) ) ) AND ( ( ( second_trim_intent = trim_intent.offset ) AND ( second_offset &gt; 0 ) ) &#10;               XOR ( ( second_trim_intent &lt;&gt; trim_intent.offset ) AND ( second_offset = 0 ) ) ) )" label="wr4"/>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' IN TYPEOF( &#10;               first_trim_condition ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' &#10;               IN TYPEOF( second_trim_condition ) ) AND ( first_trim_condition = second_trim_condition ) ) )" label="wr5"/>
      </entity>
      <entity name="fabrication_joint" supertypes="component_feature_joint">
         <where expression="acyclic_shape_aspect_relationship( SELF, [SELF\shape_aspect_relationship.related_shape_aspect], &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'FABRICATION_JOINT' )" label="wr1"/>
      </entity>
      <entity name="face" super.expression="ONEOF (face_surface, subface, oriented_face)" supertypes="topological_representation_item">
         <explicit name="bounds">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="face_bound"/>
         </explicit>
         <where expression="( NOT mixed_loop_type_set( list_to_set( list_face_loops( SELF ) ) ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( temp &lt;* bounds | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACE_OUTER_BOUND'  IN TYPEOF( temp ) ) ) ) &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="face_based_surface_model" supertypes="geometric_representation_item">
         <explicit name="fbsm_faces">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="connected_face_set"/>
         </explicit>
      </entity>
      <entity name="face_bound" supertypes="topological_representation_item">
         <explicit name="bound">
            <typename name="loop"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
      </entity>
      <entity name="face_outer_bound" supertypes="face_bound"/>
      <entity name="face_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( SELF.items ) &gt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACE_SURFACE'  IN TYPEOF( it ) ) OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'ORIENTED_FACE'  IN TYPEOF( it ) ) ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="face_shape_representation_relationship" supertypes="representation_relationship">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION' IN TYPEOF( SELF.rep_1 ) )" label="wr1"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION' IN TYPEOF( SELF.rep_2 ) )" label="wr2"/>
      </entity>
      <entity name="face_surface" supertypes="face geometric_representation_item">
         <explicit name="face_geometry">
            <typename name="surface"/>
         </explicit>
         <explicit name="same_sense">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_SURFACE' IN TYPEOF( face_geometry ) ) )" label="wr1"/>
      </entity>
      <entity name="face_surface_with_excessive_patches_in_one_direction" supertypes="overcomplex_topology_and_geometry_relationship">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity name="faceted_brep" supertypes="manifold_solid_brep"/>
      <entity name="faceted_brep_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* items | ( NOT ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACETED_BREP' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACETED_BREP' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'] * TYPEOF( it ) ) &#10;               = 1 ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( fbrep &lt;* QUERY ( it &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACETED_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( fbrep ) | ( NOT ( SIZEOF( &#10;               QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces | ( NOT ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SURFACE'  IN TYPEOF( fcs ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE'  IN TYPEOF( fcs\face_surface.&#10;               face_geometry ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT' IN &#10;               TYPEOF( fcs\face_surface.face_geometry\elementary_surface.position.location ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( fbrep &lt;* QUERY ( it &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACETED_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( fbrep ) | ( NOT ( SIZEOF( &#10;               QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces | ( NOT ( SIZEOF( QUERY ( bnds &lt;* fcs.bounds | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_OUTER_BOUND'  IN TYPEOF( bnds ) ) ) ) = 1 ) ) ) ) &#10;               = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_CLOSED_SHELL'  IN TYPEOF( msb\&#10;               manifold_solid_brep.outer ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( brv &lt;* QUERY ( it &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'BREP_WITH_VOIDS'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* brv\brep_with_voids.voids | csh\&#10;               oriented_closed_shell.orientation ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACETED_BREP_SHAPE_REPRESENTATION'  IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) ) ) ) = &#10;               0 )" label="wr7"/>
      </entity>
      <entity name="fact_type" supertypes="property_definition"/>
      <entity name="feature_component_definition" supertypes="characterized_object">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) ) = 1 ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="feature_component_relationship" super.expression="ONEOF (pattern_omit_membership, pattern_offset_membership)" supertypes="shape_aspect_relationship">
         <where expression="( ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_SHAPE_ASPECT', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPLICATE_FEATURE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TRANSITION_FEATURE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MODIFIED_PATTERN' ] * TYPEOF( SELF.&#10;               relating_shape_aspect ) ) = 1 ) OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MACHINING_FEATURE_DEFINITION'  IN TYPEOF( SELF.relating_shape_aspect.of_shape.definition ) ) OR ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION'  IN TYPEOF( SELF&#10;               .relating_shape_aspect.of_shape.definition ) ) )" label="wr1"/>
      </entity>
      <entity name="feature_definition" super.expression="ONEOF (boss, compound_feature, externally_defined_feature_definition, flat_face, gear, marking, outer_round, outside_profile, pocket, protrusion, removal_volume, replicate_feature, revolved_profile, rib_top, round_hole, rounded_end, spherical_cap, step, slot, thread, turned_knurl)" supertypes="characterized_object"/>
      <entity name="feature_definition_with_connection_area" supertypes="shape_feature_definition"/>
      <entity name="feature_for_datum_target_relationship" supertypes="shape_aspect_relationship">
         <explicit name="related_shape_aspect">
            <typename name="datum_target"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="related_shape_aspect"/>
         </unique>
         <where expression="( relating_shape_aspect.of_shape :=: related_shape_aspect.of_shape )" label="wr1"/>
         <where expression="( relating_shape_aspect\shape_aspect.product_definitional = TRUE )" label="wr2"/>
      </entity>
      <entity name="feature_in_panel" supertypes="feature_definition">
         <where expression="( SELF.description IN [ 'pocket', 'boss', 'stairstep'] )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( NOT ( ( 2 &lt;= SIZEOF( pdr.used_representation.items ) ) AND ( SIZEOF( pdr&#10;                .used_representation.items ) &lt;= 3 ) ) ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( NOT ( i.name IN [&#10;                'orientation' , 'base radius', 'target radius'] ) ) ) ) &gt; 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;                'base radius'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;                'target radius'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.name = 'base boundary' ) AND ( sa.description IN [&#10;                'directed angle occurrence' , 'closed profile occurrence'] ) ) ) ) = 1 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.name = 'target boundary' ) AND ( sa.description IN [&#10;                'directed angle occurrence' , 'closed profile occurrence'] ) ) ) ) = 1 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( sa.description = 'directed angle occurrence' ) ) ) &lt;= 1 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.description = 'directed angle occurrence' ) AND ( SIZEOF( &#10;                QUERY ( sar &lt;* USEDIN( sa, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) &#10;                AND ( sar.name = 'directed angle usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTED_ANGLE'  IN TYPEOF( sar.&#10;                relating_shape_aspect ) ) ) ) ) = 1 ) ) ) ) = SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( sa.description =&#10;                'directed angle occurrence' ) ) ) )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.description = 'closed profile occurrence' ) AND ( SIZEOF( &#10;                QUERY ( sar &lt;* USEDIN( sa, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) &#10;                AND ( sar.description = 'profile usage' ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_CLOSED_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NGON_CLOSED_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_CLOSED_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLOSED_PATH_PROFILE' ] * TYPEOF( sar.&#10;                relating_shape_aspect ) ) = 1 ) ) ) ) = 1 ) ) ) ) = SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( sa.&#10;                description = 'closed profile occurrence' ) ) ) )" label="wr10"/>
         <where expression="( ( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;                used_representation ) ) ) ) &lt;= 1 ) AND ( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | &#10;                ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION' IN TYPEOF( pdr.&#10;                used_representation ) ) AND ( NOT ( pdr.used_representation.name = 'target face' ) ) ) ) ) = 0 ) )" label="wr11"/>
         <where expression="( ( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.name = 'target boundary' ) AND ( sa.description = &#10;                'directed angle occurrence'  ) ) ) ) = 0 ) OR ( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( &#10;                SELF ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION' IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 1 ) )" label="wr12"/>
      </entity>
      <entity name="feature_pattern" supertypes="replicate_feature">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( srwp_i &lt;* pdr.used_representation.items | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( srwp_i ) ) ) ) ) &gt; 0 ) ) ) ) &#10;               &gt; 0 ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name = &#10;               'base feature placement'  ) ) ) ) &gt; 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="fiducial" supertypes="laminate_component"/>
      <entity name="fiducial_part_feature" supertypes="part_tooling_feature"/>
      <entity name="fiducial_stratum_feature" supertypes="stratum_feature"/>
      <entity name="fill_area_style" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="fill_styles">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="fill_style_select"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( fill_style &lt;* SELF.fill_styles | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'FILL_AREA_STYLE_COLOUR' ) IN TYPEOF( &#10;               fill_style ) ) ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="fill_area_style_colour">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="fill_colour">
            <typename name="colour"/>
         </explicit>
      </entity>
      <entity name="fill_area_style_hatching" supertypes="geometric_representation_item">
         <explicit name="hatch_line_appearance">
            <typename name="curve_style"/>
         </explicit>
         <explicit name="start_of_next_hatch_line">
            <typename name="one_direction_repeat_factor"/>
         </explicit>
         <explicit name="point_of_reference_hatch_line">
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="pattern_start">
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="hatch_line_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
      </entity>
      <entity name="fill_area_style_tile_coloured_region" supertypes="geometric_representation_item">
         <explicit name="closed_curve">
            <typename name="curve_or_annotation_curve_occurrence"/>
         </explicit>
         <explicit name="region_colour">
            <typename name="colour"/>
         </explicit>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE' IN TYPEOF( closed_curve ) ) ) OR &#10;               ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCLE' IN TYPEOF( closed_curve ) ) OR ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELLIPSE'  IN TYPEOF( closed_curve ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE'  IN TYPEOF( closed_curve ) ) &#10;               AND ( closed_curve\b_spline_curve.closed_curve = TRUE ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_CURVE'  IN TYPEOF( closed_curve ) ) &#10;               AND ( closed_curve\composite_curve.closed_curve = TRUE ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE'  IN TYPEOF( closed_curve ) ) AND ( &#10;               closed_curve\polyline.points[LOINDEX( closed_curve\polyline.points )] = closed_curve\polyline.points[HIINDEX( &#10;               closed_curve\polyline.points )] ) ) )" label="wr1"/>
      </entity>
      <entity name="fill_area_style_tile_curve_with_style" supertypes="geometric_representation_item">
         <explicit name="styled_curve">
            <typename name="annotation_curve_occurrence"/>
         </explicit>
      </entity>
      <entity name="fill_area_style_tile_symbol_with_style" supertypes="geometric_representation_item">
         <explicit name="symbol">
            <typename name="annotation_symbol_occurrence"/>
         </explicit>
      </entity>
      <entity name="fill_area_style_tiles" supertypes="geometric_representation_item">
         <explicit name="tiling_pattern">
            <typename name="two_direction_repeat_factor"/>
         </explicit>
         <explicit name="tiles">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="fill_area_style_tile_shape_select"/>
         </explicit>
         <explicit name="tiling_scale">
            <typename name="positive_ratio_measure"/>
         </explicit>
      </entity>
      <entity name="fill_area_template" supertypes="parametric_template"/>
      <entity name="filled_via" supertypes="via"/>
      <entity name="fillet" supertypes="transition_feature">
         <where expression="( ( NOT ( SELF\shape_aspect.description = 'constant radius' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr1"/>
         <where expression="( ( NOT ( SELF\shape_aspect.description = 'constant radius' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( ( NOT ( SIZEOF( impl_rep.used_representation.items ) &gt;= 1 ) ) AND ( &#10;               SIZEOF( impl_rep.used_representation.items ) &lt;= 3 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr2"/>
         <where expression="( ( NOT ( SELF.description = 'constant radius' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'radius' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( ( NOT ( SELF.description = 'constant radius' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'first offset' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( ( NOT ( SELF.description = 'constant radius' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'second offset' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION' IN TYPEOF( pdr&#10;               .used_representation ) ) AND ( pdr.used_representation.name = 'fillet face' ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION' IN TYPEOF( pdr&#10;               .used_representation ) ) AND ( pdr.used_representation.name = 'first face shape' ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION' IN TYPEOF( pdr&#10;               .used_representation ) ) AND ( pdr.used_representation.name = 'second face shape' ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr8"/>
      </entity>
      <entity name="finite_function" supertypes="maths_function generic_literal">
         <explicit name="pairs">
            <aggregate lower="1" type="SET" upper="?"/>
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="maths_value"/>
         </explicit>
         <where expression="VALUE_UNIQUE( list_selected_components( pairs, 1 ) )" label="wr1"/>
      </entity>
      <entity name="finite_integer_interval" supertypes="maths_space generic_literal">
         <explicit name="min">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="max">
            <builtintype type="INTEGER"/>
         </explicit>
         <derived expression="( max - min ) + 1" name="size">
            <typename name="positive_integer"/>
         </derived>
         <where expression="( min &lt;= max )" label="wr1"/>
      </entity>
      <entity name="finite_real_interval" supertypes="maths_space generic_literal">
         <explicit name="min">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="min_closure">
            <typename name="open_closed"/>
         </explicit>
         <explicit name="max">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="max_closure">
            <typename name="open_closed"/>
         </explicit>
         <where expression="( min &lt; max )" label="wr1"/>
      </entity>
      <entity name="finite_space" supertypes="maths_space generic_literal">
         <explicit name="members">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="maths_value"/>
         </explicit>
         <where expression="VALUE_UNIQUE( members )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( expr &lt;* QUERY ( member &lt;* members | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GENERIC_EXPRESSION'  IN TYPEOF( member ) ) )&#10;               | ( NOT expression_is_constant( expr ) ) ) ) = 0 )" label="wr2"/>
         <where expression="no_cyclic_space_reference( SELF, [] )" label="wr3"/>
      </entity>
      <entity name="fixed_constituent_assembly_constraint" supertypes="assembly_geometric_constraint fixed_element_geometric_constraint">
         <explicit name="fixed_constituent">
            <typename name="representative_shape_representation"/>
         </explicit>
         <where expression="( SELF\explicit_constraint.constrained_elements[1]\geometric_representation_item.dim = 3 )" label="wr1"/>
         <where expression="assembly_leaf( using_product_definition_of_shape_representation( fixed_constituent )[1] )" label="wr2"/>
         <where expression="( ( SIZEOF( SELF\explicit_constraint.constrained_elements ) = 1 ) AND ( SIZEOF( SELF\explicit_constraint.&#10;               reference_elements ) = 0 ) )" label="wr3"/>
         <where expression="( fixed_constituent IN ( using_representations( SELF\explicit_constraint.constrained_elements[1] ) + &#10;               using_representation_with_mapping( SELF\explicit_constraint.constrained_elements[1] ) ) )" label="wr4"/>
      </entity>
      <entity name="fixed_element_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="geometric_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <where expression="( SIZEOF( SELF\explicit_constraint.reference_elements ) = 0 )" label="wr1"/>
      </entity>
      <entity name="fixed_instance_attribute_set" supertypes="variational_representation_item">
         <explicit name="fixed_attributes">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="instance_attribute_reference"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( q &lt;* using_representations( SELF ) | ( SIZEOF( QUERY ( r &lt;* q.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FIXED_INSTANCE_ATTRIBUTE_SET'  IN TYPEOF( r ) ) ) ) &#10;               &gt; 1 ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="flat_face" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION_SHAPE_REPRESENTATION' IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( pdr.used_representation.name = 'removal direction' ) ) ) ) = 1 ) ) ) ) = &#10;               0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'course of travel occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'path feature component usage' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_FEATURE_COMPONENT' IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) AND ( sdr.relating_shape_aspect.description = 'linear' ) AND ( sdr.name = &#10;               'course of travel'  ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'removal boundary occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'profile usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINEAR_PROFILE'  IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) AND ( sdr.name = 'removal boundary' ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'enclosed boundary occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'profile usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_CLOSED_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NGON_CLOSED_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_CLOSED_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLOSED_PATH_PROFILE' ] * TYPEOF( sdr.&#10;               relating_shape_aspect ) ) = 1 ) AND ( sdr.relating_shape_aspect.description = 'boundary' ) ) ) ) = 1 ) ) ) ) &lt;= 1 ) ) ) ) &#10;               = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;               used_representation ) ) AND ( pdr.used_representation.name = 'maximum feature limit' ) ) ) ) &gt;= 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) &#10;               AND ( csa.name = 'uncut volume' ) AND ( SIZEOF( QUERY ( sar &lt;* csa.component_relationships | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;               sar ) ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOSS', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROTRUSION' ] * TYPEOF( sar.&#10;               related_shape_aspect ) ) = 1 ) ) ) ) = 1 ) ) ) ) &lt;= 1 ) ) ) ) = 1 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'removal depth' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
      </entity>
      <entity name="flat_pattern_ply_representation_relationship" supertypes="shape_representation_relationship">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION' IN ( TYPEOF( SELF\&#10;               representation_relationship.rep_1 ) * TYPEOF( SELF\representation_relationship.rep_2 ) ) )" label="wr1"/>
         <where expression="( SELF\representation_relationship.rep_1.context_of_items\geometric_representation_context.coordinate_space_dimension &#10;               = 3 )" label="wr2"/>
      </entity>
      <entity name="flatness_tolerance" supertypes="geometric_tolerance">
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE'  ) IN TYPEOF( SELF ) ) )" label="wr1"/>
      </entity>
      <entity name="footprint_definition" supertypes="generic_footprint_definition"/>
      <entity name="footprint_library_stratum_technology" supertypes="stratum_technology"/>
      <entity name="footprint_occurrence" supertypes="structured_layout_component"/>
      <entity name="footprint_occurrence_product_definition_relationship" supertypes="structured_layout_component_sub_assembly_relationship"/>
      <entity name="force_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FORCE_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="force_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.newton ) )" label="wr1"/>
      </entity>
      <entity name="format_function" supertypes="string_expression binary_generic_expression">
         <derived expression="SELF\binary_generic_expression.operands[1]" name="value_to_format">
            <typename name="generic_expression"/>
         </derived>
         <derived expression="SELF\binary_generic_expression.operands[2]" name="format_string">
            <typename name="generic_expression"/>
         </derived>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NUMERIC_EXPRESSION' IN TYPEOF( value_to_format ) ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STRING_EXPRESSION' IN TYPEOF( &#10;               format_string ) ) )" label="wr1"/>
      </entity>
      <entity name="forward_chaining_rule" supertypes="rule_definition"/>
      <entity name="forward_chaining_rule_premise" supertypes="property_definition property_definition_representation representation"/>
      <entity name="founded_item" super.expression="ONEOF (b_spline_curve_knot_locator, b_spline_curve_segment, b_spline_surface_knot_locator, b_spline_surface_patch, b_spline_surface_strip, boundary_curve_of_b_spline_or_rectangular_composite_surface, box_domain, character_glyph_style_outline, character_glyph_style_stroke, composite_curve_segment, composite_curve_transition_locator, curve_style, curve_style_font, curve_style_font_and_scaling, curve_style_font_pattern, externally_defined_style, fill_area_style, interpolated_configuration_segment, kinematic_path_segment, plane_angle_and_length_pair, plane_angle_and_ratio_pair, point_style, presentation_style_assignment, rectangular_composite_surface_transition_locator, surface_patch, surface_side_style, surface_style_boundary, surface_style_control_grid, surface_style_fill_area, surface_style_parameter_line, surface_style_segmentation_curve, surface_style_silhouette, surface_style_usage, symbol_style, text_style, view_volume) ANDOR ONEOF (character_glyph_style_outline, character_glyph_style_stroke, curve_style, curve_style_font, curve_style_font_and_scaling, curve_style_font_pattern, externally_defined_style, fill_area_style, point_style, presentation_style_assignment, surface_side_style, surface_style_boundary, surface_style_control_grid, surface_style_fill_area, surface_style_parameter_line, surface_style_segmentation_curve, surface_style_silhouette, surface_style_usage, symbol_style, text_style)">
         <derived expression="using_items( SELF, [] )" name="users">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="founded_item_select"/>
         </derived>
         <where expression="( SIZEOF( users ) &gt; 0 )" label="wr1"/>
         <where expression="( NOT ( SELF IN users ) )" label="wr2"/>
      </entity>
      <entity name="free_edge" supertypes="inapt_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CONNECTED_FACE_SET' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'EDGE_CURVE' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( sdqr &lt;* bag_to_set( USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DATA_QUALITY_INSPECTION_RESULT.' + &#10;               'CRITERION_INSPECTED'  ) ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'SHAPE_DATA_QUALITY_INSPECTION_RESULT'  ) IN TYPEOF( sdqr ) ) AND ( SIZEOF( QUERY ( sdqiir &lt;* bag_to_set( USEDIN( &#10;               sdqr, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DATA_QUALITY_INSPECTION_REPORT.' + &#10;               'INSPECTION_RESULT'  ) ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'SHAPE_DATA_QUALITY_INSPECTION_INSTANCE_REPORT'  ) IN TYPEOF( sdqiir ) ) AND ( SIZEOF( QUERY ( sdqiri &lt;* sdqiir.&#10;               inspected_instances | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLOSED_SHELL' IN &#10;               TYPEOF( sdqiri.inspected_elements[1] ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
      </entity>
      <entity name="free_form_assignment" supertypes="free_form_constraint">
         <where expression="( SIZEOF( QUERY ( q &lt;* SELF\free_form_constraint.constrained_elements | ( q IN used_variables( SELF\&#10;               free_form_constraint.constraining_expression ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* SELF\free_form_constraint.reference_elements | ( NOT ( q IN used_variables( SELF\&#10;               free_form_constraint.constraining_expression ) ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( SELF\free_form_constraint.reference_elements ) &gt;= 1 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* SELF\free_form_constraint.constrained_elements | ( NOT compatible_spaces( values_space_of( SELF&#10;               \free_form_constraint.constraining_expression ), q\maths_variable.values_space ) ) ) ) = 0 )" label="wr4"/>
      </entity>
      <entity abstract.supertype="YES" name="free_form_constraint" super.expression="ONEOF (free_form_assignment, free_form_relation)" supertypes="explicit_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="variational_parameter"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="variational_parameter"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="constraining_expression">
            <typename name="expression"/>
         </explicit>
      </entity>
      <entity name="free_form_relation" supertypes="free_form_constraint">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_EXPRESSION' IN TYPEOF( SELF\&#10;               free_form_constraint.constraining_expression ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* ( SELF\free_form_constraint.constrained_elements + SELF\free_form_constraint.reference_elements )&#10;               | ( NOT ( q IN used_variables( SELF\free_form_constraint.constraining_expression ) ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="free_kinematic_motion_representation" supertypes="representation_relationship_with_transformation">
         <explicit name="rep_1">
            <typename name="representative_shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="representative_shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="motion">
            <typename name="kinematic_path"/>
         </explicit>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ITEM_DEFINED_TRANSFORMATION' IN TYPEOF( SELF\&#10;               representation_relationship_with_transformation.transformation_operator ) )" label="wr1"/>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF( SELF&#10;               \representation_relationship_with_transformation.transformation_operator\item_defined_transformation.&#10;               transform_item_1 ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'GEOMETRIC_REPRESENTATION_ITEM'  IN TYPEOF( SELF\representation_relationship_with_transformation.&#10;               transformation_operator\item_defined_transformation.transform_item_2 ) ) )" label="wr2"/>
         <where expression="( ( dimension_of( SELF\representation_relationship_with_transformation.transformation_operator\&#10;               item_defined_transformation.transform_item_1 ) = 3 ) AND ( dimension_of( SELF\&#10;               representation_relationship_with_transformation.transformation_operator\item_defined_transformation.&#10;               transform_item_2 ) = 3 ) )" label="wr3"/>
         <where expression="( ( SELF\representation_relationship.rep_1 IN ( using_representations( SELF\&#10;               representation_relationship_with_transformation.transformation_operator\item_defined_transformation.&#10;               transform_item_1 ) + using_representation_with_mapping( SELF\representation_relationship_with_transformation.&#10;               transformation_operator\item_defined_transformation.transform_item_1 ) ) ) AND ( SELF\representation_relationship.&#10;               rep_2 IN ( using_representations( SELF\representation_relationship_with_transformation.transformation_operator\&#10;               item_defined_transformation.transform_item_2 ) + using_representation_with_mapping( SELF\&#10;               representation_relationship_with_transformation.transformation_operator\item_defined_transformation.&#10;               transform_item_2 ) ) ) )" label="wr4"/>
      </entity>
      <entity name="frequency_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FREQUENCY_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="frequency_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.hertz ) )" label="wr1"/>
      </entity>
      <entity name="frozen_assignment" supertypes="approval_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="change_management_object"/>
         </explicit>
      </entity>
      <entity name="fully_constrained_pair" supertypes="low_order_kinematic_pair">
         <derived expression="FALSE" name="t_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
      </entity>
      <entity name="func" supertypes="compound_representation_item"/>
      <entity name="function_application" supertypes="multiple_arity_generic_expression">
         <explicit name="func">
            <typename name="maths_function_select"/>
         </explicit>
         <explicit name="arguments">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="maths_expression"/>
         </explicit>
         <derived expression="[convert_to_maths_function( func )] &#10;                                                 + convert_to_operands( arguments )" name="operands">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="generic_expression"/>
            <redeclaration entity-ref="multiple_arity_generic_expression"/>
         </derived>
         <where expression="function_applicability( func, arguments )" label="wr1"/>
      </entity>
      <entity name="function_space" supertypes="maths_space generic_literal">
         <explicit name="domain_constraint">
            <typename name="space_constraint_type"/>
         </explicit>
         <explicit name="domain_argument">
            <typename name="maths_space"/>
         </explicit>
         <explicit name="range_constraint">
            <typename name="space_constraint_type"/>
         </explicit>
         <explicit name="range_argument">
            <typename name="maths_space"/>
         </explicit>
         <where expression="( expression_is_constant( domain_argument ) AND expression_is_constant( range_argument ) )" label="wr1"/>
         <where expression="( ( domain_argument &lt;&gt; the_empty_space ) AND ( range_argument &lt;&gt; the_empty_space ) )" label="wr2"/>
         <where expression="( ( domain_constraint &lt;&gt; sc_member ) OR ( NOT member_of( the_empty_space, domain_argument ) ) )" label="wr3"/>
         <where expression="( ( range_constraint &lt;&gt; sc_member ) OR ( NOT member_of( the_empty_space, range_argument ) ) )" label="wr4"/>
         <where expression="( NOT ( any_space_satisfies( domain_constraint, domain_argument ) AND any_space_satisfies( range_constraint, &#10;               range_argument ) ) )" label="wr5"/>
      </entity>
      <entity name="functional_breakdown_context" supertypes="breakdown_context"/>
      <entity name="functional_element_usage" supertypes="breakdown_element_usage"/>
      <entity name="functional_specification" supertypes="representation"/>
      <entity name="functional_specification_definition" supertypes="functional_unit"/>
      <entity name="functional_terminal_group" supertypes="group">
         <unique label="ur1">
            <unique.attribute attribute="SELF\group.name"/>
         </unique>
      </entity>
      <entity name="functional_unit" supertypes="product_definition product_definition_shape">
         <derived expression="SELF" name="definition">
            <typename name="functional_unit"/>
            <redeclaration entity-ref="property_definition"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.'&#10;               + 'NAMED_ITEM'  ) ) = 0 )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\property_definition.description ) )" label="wr2"/>
      </entity>
      <entity name="functional_unit_terminal_definition" supertypes="shape_aspect">
         <explicit name="of_shape">
            <typename name="functional_unit"/>
            <redeclaration entity-ref="shape_aspect"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect.name"/>
            <unique.attribute attribute="of_shape"/>
         </unique>
         <where expression="( SELF\shape_aspect.product_definitional = FALSE )" label="wr1"/>
      </entity>
      <entity name="functionally_defined_transformation">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="g1_discontinuity_between_adjacent_faces" supertypes="non_smooth_geometry_transition_across_edge">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE'  IN value_limit_type( &#10;               SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.&#10;               threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE'  )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CONNECTED_FACE_SET' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'POINT_ON_EDGE_CURVE'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE' ] )" label="wr5"/>
      </entity>
      <entity name="g1_discontinuous_curve" supertypes="discontinuous_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE'  IN value_limit_type( &#10;               SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.&#10;               threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE'  )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_CURVE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'B_SPLINE_CURVE_KNOT_LOCATOR'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity name="g1_discontinuous_surface" supertypes="discontinuous_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE'  IN value_limit_type( &#10;               SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.&#10;               threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE'  )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'B_SPLINE_SURFACE_KNOT_LOCATOR'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE' ] )" label="wr5"/>
      </entity>
      <entity name="g2_discontinuity_between_adjacent_faces" supertypes="non_smooth_geometry_transition_across_edge">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="assessment_specification_2">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
         </explicit>
         <explicit name="flat_curvature_radius_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE'  IN value_limit_type( &#10;               SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.&#10;               threshold ) ) )" label="wr1"/>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( assessment_specification_2\shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RATIO_MEASURE'  IN value_limit_type( &#10;               assessment_specification_2\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr2"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PLANE_ANGLE_AND_RATIO_PAIR'  )" label="wr3"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CONNECTED_FACE_SET' ] )" label="wr4"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'POINT_ON_EDGE_CURVE'] )" label="wr5"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RATIO_MEASURE'] )" label="wr6"/>
      </entity>
      <entity name="g2_discontinuous_curve" supertypes="discontinuous_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="assessment_specification_2">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
         </explicit>
         <explicit name="flat_curvature_radius_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE'  IN value_limit_type( &#10;               SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.&#10;               threshold ) ) )" label="wr1"/>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( assessment_specification_2\shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RATIO_MEASURE'  IN value_limit_type( &#10;               assessment_specification_2\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr2"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PLANE_ANGLE_AND_RATIO_PAIR'  )" label="wr3"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_CURVE' ] )" label="wr4"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'B_SPLINE_CURVE_KNOT_LOCATOR'] )" label="wr5"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr6"/>
      </entity>
      <entity name="g2_discontinuous_surface" supertypes="discontinuous_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="assessment_specification_2">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
         </explicit>
         <explicit name="flat_curvature_radius_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE'  IN value_limit_type( &#10;               SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.&#10;               threshold ) ) )" label="wr1"/>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( assessment_specification_2\shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RATIO_MEASURE'  IN value_limit_type( &#10;               assessment_specification_2\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr2"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PLANE_ANGLE_AND_RATIO_PAIR'  )" label="wr3"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_SURFACE' ] )" label="wr4"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'B_SPLINE_SURFACE_KNOT_LOCATOR'] )" label="wr5"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RATIO_MEASURE'] )" label="wr6"/>
      </entity>
      <entity name="gap_between_adjacent_edges_in_loop" supertypes="geometric_gap_in_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'ORIENTED_EDGE' ] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="gap_between_edge_and_base_surface" supertypes="geometric_gap_in_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'POINT_ON_EDGE_CURVE', 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'POINT_ON_FACE_SURFACE' ] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="gap_between_faces_related_to_an_edge" supertypes="geometric_gap_in_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CONNECTED_FACE_SET' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'POINT_ON_EDGE_CURVE'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="gap_between_pcurves_related_to_an_edge" supertypes="geometric_gap_in_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CONNECTED_FACE_SET' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'POINT_ON_SURFACE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_SURFACE'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="gap_between_vertex_and_base_surface" supertypes="geometric_gap_in_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'VERTEX_POINT' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'POINT_ON_FACE_SURFACE'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="gap_between_vertex_and_edge" supertypes="geometric_gap_in_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'EDGE_CURVE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'VERTEX_POINT' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'POINT_ON_EDGE_CURVE'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="gear" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN&#10;                TYPEOF( pdr.used_representation ) ) AND ( 10 &lt;= SIZEOF( pdr.used_representation.items ) ) AND ( SIZEOF( pdr.&#10;                used_representation.items ) &lt;= 13 ) ) ) ) = 1 ) ) ) = 1 )" label="wr1"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'straight bevel gear', 'helical bevel gear', 'spur gear', &#10;                'helical gear' ] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RATIO_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;                2 ) AND ( it.name = 'number of teeth' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr2"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'straight bevel gear', 'helical bevel gear', 'spur gear', &#10;                'helical gear' ] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'reference pressure angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'straight bevel gear', 'helical bevel gear', 'spur gear', &#10;                'helical gear' ] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'rake shift factor' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'straight bevel gear', 'helical bevel gear', 'spur gear', &#10;                'helical gear' ] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'nominal tooth depth' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'straight bevel gear', 'helical bevel gear', 'spur gear', &#10;                'helical gear' ] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'face width' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr6"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'straight bevel gear', 'helical bevel gear', 'spur gear', &#10;                'helical gear' ] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'tip diameter' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr7"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'straight bevel gear', 'helical bevel gear', 'spur gear', &#10;                'helical gear' ] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'module or diametral pitch' ) AND ( ( it.description = 'module' ) OR ( it.description = &#10;                'diametral pitch'  ) ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr8"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'straight bevel gear', 'helical bevel gear', 'spur gear', &#10;                'helical gear' ] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'internal or external gear' ) AND ( ( it.description = 'internal' ) OR ( it.description = &#10;                'external'  ) ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr9"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'straight bevel gear', 'helical bevel gear', 'spur gear', &#10;                'helical gear' ] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'normal attribute' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr10"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'straight bevel gear', 'helical bevel gear', 'spur gear', &#10;                'helical gear' ] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'root fillet radius' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr11"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'helix gear', 'helical bevel gear'] ) ) OR ( SIZEOF( &#10;                QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'reference helix angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr12"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'helix gear', 'helical bevel gear'] ) ) OR ( SIZEOF( &#10;                QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'gear tooth' ) AND ( ( it.description = 'left hand tooth' ) OR ( it.description = &#10;                'right hand tooth'  ) ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr13"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'straight bevel gear', 'helical bevel gear'] ) ) OR ( SIZEOF( &#10;                QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'tip angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr14"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'straight bevel gear', 'helical bevel gear'] ) ) OR ( SIZEOF( &#10;                QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'root angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr15"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;                QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'applied shape' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) = 1 ) ) ) ) = 0 )" label="wr16"/>
      </entity>
      <entity name="gear_pair" supertypes="low_order_kinematic_pair_with_motion_coupling">
         <explicit name="radius_first_link">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="radius_second_link">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="bevel">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="helical_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="gear_ratio">
            <builtintype type="REAL"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( lr &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) &#10;               = 0 )" label="wr1"/>
      </entity>
      <entity name="gear_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="gear_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_rotation_1">
            <typename name="plane_angle_measure"/>
         </explicit>
         <derived expression="( -actual_rotation_1 ) * SELF\pair_value.applies_to_pair\gear_pair.gear_ratio" name="actual_rotation_2">
            <typename name="plane_angle_measure"/>
         </derived>
      </entity>
      <entity name="gear_pair_with_range" supertypes="gear_pair">
         <explicit name="lower_limit_actual_rotation_1" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation_1" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( ( ( NOT EXISTS( lower_limit_actual_rotation_1 ) ) OR ( NOT EXISTS( upper_limit_actual_rotation_1 ) ) ) XOR ( &#10;               lower_limit_actual_rotation_1 &lt; upper_limit_actual_rotation_1 ) )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="general_datum_reference" super.expression="ONEOF (datum_reference_compartment, datum_reference_element)" supertypes="shape_aspect">
         <explicit name="base">
            <typename name="datum_or_common_datum"/>
         </explicit>
         <explicit name="modifiers" optional="YES">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="datum_reference_modifier"/>
         </explicit>
         <where expression="( SELF\shape_aspect.name = '' )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\shape_aspect.description ) )" label="wr2"/>
         <where expression="( NOT EXISTS( SELF\shape_aspect.id ) )" label="wr3"/>
         <where expression="( SELF\shape_aspect.product_definitional = FALSE )" label="wr4"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DATUM' IN TYPEOF( base ) ) ) OR ( SELF\&#10;               shape_aspect.of_shape = base\shape_aspect.of_shape ) )" label="wr5"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMMON_DATUM_LIST' IN TYPEOF( base ) ) ) &#10;               OR ( SELF\shape_aspect.of_shape = base[1]\shape_aspect.of_shape ) )" label="wr6"/>
      </entity>
      <entity name="general_feature" supertypes="shape_feature_definition">
         <where expression="( ( SIZEOF( get_property_definition_representations( SELF ) ) &lt;= 1 ) AND ( SIZEOF( QUERY ( pdr &lt;* &#10;               get_property_definition_representations( SELF ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) &lt;= 1 ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( sa.description = 'course of travel occurrence' ) ) ) = SIZEOF( &#10;               QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.description = 'course of travel occurrence' ) AND ( SIZEOF( &#10;               QUERY ( sar &lt;* USEDIN( sa, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) &#10;               AND ( sar.name = 'course of travel' ) ) ) ) = 1 ) ) ) ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( sa.description = 'course of travel occurrence' ) ) ) = SIZEOF( &#10;               QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.description = 'course of travel occurrence' ) AND ( SIZEOF( &#10;               QUERY ( sar &lt;* USEDIN( sa, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_FEATURE_COMPONENT' IN TYPEOF( sar.&#10;               relating_shape_aspect ) ) ) ) ) = 1 ) ) ) ) )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( sa.description = 'boundary occurrence' ) ) ) = SIZEOF( &#10;               QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.description = 'boundary occurrence' ) AND ( SIZEOF( &#10;               QUERY ( sar &lt;* USEDIN( sa, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) &#10;               AND ( sar.description = 'profile usage' ) ) ) ) = 1 ) ) ) ) )" label="wr4"/>
         <where expression="( ( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( sa ) ) ) ) &#10;               &lt;= 1 ) AND ( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( sa ) ) AND&#10;               ( sa.name = 'general compound feature' ) AND ( SIZEOF( QUERY ( sar &lt;* USEDIN( sa, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATING_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INSTANCED_FEATURE'  IN TYPEOF( sar.&#10;               related_shape_aspect ) ) ) ) ) &gt;= 2 ) ) ) ) &lt;= 1 ) )" label="wr5"/>
      </entity>
      <entity name="general_linear_function" supertypes="maths_function unary_generic_expression">
         <explicit name="operand">
            <typename name="maths_function"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
         <explicit name="sum_index">
            <typename name="one_or_two"/>
         </explicit>
         <derived expression="SELF\unary_generic_expression.operand" name="mat">
            <typename name="maths_function"/>
         </derived>
         <where expression="function_is_2d_table( mat )" label="wr1"/>
         <where expression="( ( space_dimension( mat.range ) = 1 ) AND subspace_of_es( factor1( mat.range ), es_numbers ) )" label="wr2"/>
      </entity>
      <entity name="general_material_property" supertypes="general_property">
         <where expression="( SIZEOF( QUERY ( gpa &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'GENERAL_PROPERTY_ASSOCIATION.BASE_DEFINITION'  ) | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MATERIAL_PROPERTY'  IN TYPEOF( gpa\&#10;               general_property_association.derived_definition ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="general_property">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="general_property_association">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="base_definition">
            <typename name="general_property"/>
         </explicit>
         <explicit name="derived_definition">
            <typename name="derived_property_select"/>
         </explicit>
         <where expression="( SIZEOF( USEDIN( derived_definition, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GENERAL_PROPERTY_ASSOCIATION.'  + 'DERIVED_DEFINITION' ) ) = 1 )" label="wr1"/>
         <where expression="( derived_definition.name = base_definition.name )" label="wr2"/>
      </entity>
      <entity name="general_property_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_property">
            <typename name="general_property"/>
         </explicit>
         <explicit name="related_property">
            <typename name="general_property"/>
         </explicit>
      </entity>
      <entity name="generated_finite_numeric_space" supertypes="finite_space">
         <explicit name="start_value">
            <typename name="maths_number"/>
         </explicit>
         <explicit name="increment_value">
            <typename name="maths_number"/>
         </explicit>
         <explicit name="increment_number">
            <typename name="positive_integer"/>
         </explicit>
         <derived expression="make_numeric_set( start_value, increment_value, &#10;                                     increment_number )" name="members">
            <aggregate lower="2" type="SET" upper="?"/>
            <typename name="maths_number"/>
            <redeclaration entity-ref="finite_space"/>
         </derived>
         <where expression="( increment_value &lt;&gt; 0 )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="generic_character_glyph_symbol" supertypes="symbol_representation"/>
      <entity abstract.supertype="YES" name="generic_expression" super.expression="ONEOF (simple_generic_expression, unary_generic_expression, binary_generic_expression, multiple_arity_generic_expression)">
         <where expression="is_acyclic( SELF )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="generic_footprint_definition" super.expression="ONEOF (footprint_definition, breakout_footprint_definition)" supertypes="multi_stratum_structured_template"/>
      <entity abstract.supertype="YES" name="generic_laminate_text_component" super.expression="ONEOF (additive_laminate_text_component, material_removal_laminate_text_component)" supertypes="laminate_component"/>
      <entity abstract.supertype="YES" name="generic_literal" supertypes="simple_generic_expression"/>
      <entity abstract.supertype="YES" name="generic_product_definition_reference" super.expression="ONEOF (product_definition_reference, product_definition_reference_with_local_representation)">
         <explicit name="source">
            <typename name="external_source"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="generic_variable" supertypes="simple_generic_expression">
         <inverse attribute="syntactic_representation" entity="environment" name="interpretation"/>
      </entity>
      <entity name="geometric_alignment" supertypes="derived_shape_aspect">
         <where expression="( SIZEOF( SELF\derived_shape_aspect.deriving_relationships ) &gt; 1 )" label="wr1"/>
      </entity>
      <entity name="geometric_contact" supertypes="derived_shape_aspect">
         <where expression="( SIZEOF( SELF\derived_shape_aspect.deriving_relationships ) = 2 )" label="wr1"/>
      </entity>
      <entity name="geometric_curve_set" supertypes="geometric_set">
         <where expression="( SIZEOF( QUERY ( temp &lt;* SELF\geometric_set.elements | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE'  IN TYPEOF( temp ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="geometric_gap_in_topology" super.expression="ONEOF (gap_between_adjacent_edges_in_loop, gap_between_vertex_and_base_surface, gap_between_vertex_and_edge, gap_between_edge_and_base_surface, gap_between_pcurves_related_to_an_edge, gap_between_faces_related_to_an_edge)" supertypes="inapt_topology_and_geometry_relationship"/>
      <entity name="geometric_intersection" supertypes="derived_shape_aspect">
         <where expression="( SIZEOF( SELF\derived_shape_aspect.deriving_relationships ) &gt; 1 )" label="wr1"/>
      </entity>
      <entity name="geometric_item_specific_usage" supertypes="item_identified_representation_usage">
         <explicit name="definition">
            <typename name="geometric_item_specific_usage_select"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </explicit>
         <explicit name="used_representation">
            <typename name="shape_model"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </explicit>
         <explicit name="identified_item">
            <typename name="geometric_model_item"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="definition"/>
         </unique>
      </entity>
      <entity name="geometric_model_element_relationship" supertypes="geometric_representation_item representation_item_relationship">
         <explicit name="relating_representation_item">
            <typename name="geometric_representation_item"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <explicit name="related_representation_item">
            <typename name="geometric_representation_item"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="relating_representation_item"/>
            <unique.attribute attribute="related_representation_item"/>
         </unique>
         <where expression="( SELF\representation_item_relationship.relating_representation_item :&lt;&gt;: SELF\representation_item_relationship.&#10;               related_representation_item )" label="wr1"/>
      </entity>
      <entity name="geometric_representation_context" super.expression="ONEOF (geometric_representation_context_with_parameter, path_parameter_representation_context)" supertypes="representation_context">
         <explicit name="coordinate_space_dimension">
            <typename name="dimension_count"/>
         </explicit>
      </entity>
      <entity name="geometric_representation_context_with_parameter" supertypes="geometric_representation_context">
         <explicit name="parameter_unit" optional="YES">
            <typename name="unit"/>
         </explicit>
      </entity>
      <entity name="geometric_representation_item" super.expression="ONEOF (point, direction, vector, placement, cartesian_transformation_operator, curve, surface, edge_curve, face_surface, poly_loop, vertex_point, solid_model, boolean_result, sphere, right_circular_cone, right_circular_cylinder, torus, block, primitive_2d, right_angular_wedge, volume, half_space_solid, shell_based_surface_model, face_based_surface_model, shell_based_wireframe_model, edge_based_wireframe_model, geometric_set, tessellated_item) ANDOR ONEOF (camera_model, camera_model_d3_multi_clipping_intersection, camera_model_d3_multi_clipping_union, curve, direction, light_source) ANDOR ONEOF (annotation_fill_area, composite_text, curve, defined_character_glyph, defined_symbol, point, symbol_target, text_literal) ANDOR ONEOF (curve, externally_defined_hatch_style, externally_defined_tile_style, fill_area_style_hatching, fill_area_style_tile_coloured_region, fill_area_style_tile_curve_with_style, fill_area_style_tile_symbol_with_style, fill_area_style_tiles, one_direction_repeat_factor, point, vector) ANDOR ONEOF (kinematic_path, placement) ANDOR ONEOF (curve, planar_extent) ANDOR ONEOF (rotation_about_direction, su_parameters)" supertypes="representation_item">
         <derived expression="dimension_of( SELF )" name="dim">
            <typename name="dimension_count"/>
         </derived>
         <where expression="( SIZEOF( QUERY ( using_rep &lt;* using_representations( SELF ) | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_REPRESENTATION_CONTEXT'  IN TYPEOF( &#10;               using_rep.context_of_items ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="geometric_set" supertypes="geometric_representation_item">
         <explicit name="elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="geometric_set_select"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="geometric_template" supertypes="part_template_definition"/>
      <entity abstract.supertype="YES" name="geometric_tolerance" super.expression="geometric_tolerance_with_datum_reference ANDOR geometric_tolerance_with_defined_unit ANDOR ONEOF (geometric_tolerance_with_modifiers, modified_geometric_tolerance) ANDOR unequally_disposed_geometric_tolerance ANDOR ONEOF (cylindricity_tolerance, flatness_tolerance, line_profile_tolerance, position_tolerance, roundness_tolerance, straightness_tolerance, surface_profile_tolerance)">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="magnitude" optional="YES">
            <typename name="length_measure_with_unit"/>
         </explicit>
         <explicit name="toleranced_shape_aspect">
            <typename name="geometric_tolerance_target"/>
         </explicit>
         <derived expression="sts_get_product_definition_shape( toleranced_shape_aspect )" name="controlling_shape">
            <typename name="product_definition_shape"/>
         </derived>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <unique label="ur1">
            <unique.attribute attribute="id"/>
            <unique.attribute attribute="controlling_shape"/>
         </unique>
         <where expression="( magnitude\measure_with_unit.value_component &gt;= 0 )" label="wr1"/>
         <where expression="EXISTS( controlling_shape )" label="wr2"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP' IN TYPEOF( &#10;               toleranced_shape_aspect ) ) ) OR ( toleranced_shape_aspect\shape_aspect_relationship.relating_shape_aspect.of_shape &#10;               :=: toleranced_shape_aspect\shape_aspect_relationship.related_shape_aspect.of_shape ) )" label="wr3"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ID_ATTRIBUTE.'&#10;               + 'IDENTIFIED_ITEM'  ) ) &lt;= 1 )" label="wr4"/>
      </entity>
      <entity name="geometric_tolerance_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_geometric_tolerance">
            <typename name="geometric_tolerance"/>
         </explicit>
         <explicit name="related_geometric_tolerance">
            <typename name="geometric_tolerance"/>
         </explicit>
      </entity>
      <entity name="geometric_tolerance_with_datum_reference" super.expression="ONEOF (angularity_tolerance, circular_runout_tolerance, coaxiality_tolerance, concentricity_tolerance, parallelism_tolerance, perpendicularity_tolerance, symmetry_tolerance, total_runout_tolerance)" supertypes="geometric_tolerance">
         <explicit name="datum_system">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="datum_system_or_reference"/>
         </explicit>
         <where expression="( ( SIZEOF( QUERY ( ds &lt;* datum_system | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DATUM_SYSTEM'  ) IN TYPEOF( ds ) ) ) ) = 0 ) OR ( SIZEOF( datum_system ) = 1 ) )" label="wr1"/>
      </entity>
      <entity name="geometric_tolerance_with_defined_area_unit" supertypes="geometric_tolerance_with_defined_unit">
         <explicit name="area_type">
            <typename name="area_unit_type"/>
         </explicit>
         <explicit name="second_unit_size" optional="YES">
            <typename name="length_measure_with_unit"/>
         </explicit>
         <where expression="( NOT ( EXISTS( second_unit_size ) XOR ( area_type = area_unit_type.rectangular ) ) )" label="wr1"/>
      </entity>
      <entity name="geometric_tolerance_with_defined_unit" supertypes="geometric_tolerance">
         <explicit name="unit_size">
            <typename name="length_measure_with_unit"/>
         </explicit>
         <where expression="( ( 'NUMBER' IN TYPEOF( unit_size\measure_with_unit.value_component ) ) AND ( unit_size\measure_with_unit.&#10;               value_component &gt; 0 ) )" label="wr1"/>
      </entity>
      <entity name="geometric_tolerance_with_maximum_tolerance" supertypes="geometric_tolerance_with_modifiers">
         <explicit name="maximum_upper_tolerance">
            <typename name="length_measure_with_unit"/>
         </explicit>
         <where expression="( ( geometric_tolerance_modifier.maximum_material_requirement IN SELF\geometric_tolerance_with_modifiers.modifiers ) &#10;               OR ( geometric_tolerance_modifier.least_material_requirement IN SELF\geometric_tolerance_with_modifiers.modifiers ) )" label="wr1"/>
         <where expression="( ( maximum_upper_tolerance\measure_with_unit.unit_component = SELF\geometric_tolerance.magnitude\measure_with_unit.&#10;               unit_component ) AND ( maximum_upper_tolerance\measure_with_unit.value_component &gt; SELF\geometric_tolerance.&#10;               magnitude\measure_with_unit.value_component ) )" label="wr2"/>
      </entity>
      <entity name="geometric_tolerance_with_modifiers" supertypes="geometric_tolerance">
         <explicit name="modifiers">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="geometric_tolerance_modifier"/>
         </explicit>
      </entity>
      <entity name="geometrical_tolerance_callout" supertypes="draughting_callout"/>
      <entity name="geometrically_bounded_2d_wireframe_representation" supertypes="shape_representation">
         <where expression="( SELF.context_of_items\geometric_representation_context.coordinate_space_dimension = 2 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( item &lt;* SELF.items | ( NOT ( SIZEOF( TYPEOF( item ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_CURVE_SET' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_2D' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' ] ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( item &lt;* SELF.items | ( SIZEOF( TYPEOF( item ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_CURVE_SET' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' ] ) = 1 ) ) ) &gt;= 1 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( item &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( item ) ) ) | ( NOT ( &#10;               ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GEOMETRICALLY_BOUNDED_2D_WIREFRAME_REPRESENTATION'  ) IN TYPEOF( mi\mapped_item.mapping_source.&#10;               mapped_representation ) ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( gcs &lt;* QUERY ( item &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_CURVE_SET'  IN TYPEOF( item ) ) ) | &#10;               ( NOT ( SIZEOF( QUERY ( elem &lt;* gcs\geometric_set.elements | ( NOT ( SIZEOF( TYPEOF( elem ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCLE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_CURVE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELLIPSE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_CURVE_2D' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TRIMMED_CURVE' ] ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( gcs &lt;* QUERY ( item &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_CURVE_SET'  IN TYPEOF( item ) ) ) | &#10;               ( NOT ( SIZEOF( QUERY ( crv &lt;* QUERY ( elem &lt;* gcs\geometric_set.elements | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE'  IN TYPEOF( elem ) ) ) | ( NOT &#10;               valid_basis_curve_in_2d_wireframe( crv ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( gcs &lt;* QUERY ( item &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_CURVE_SET'  IN TYPEOF( item ) ) ) | &#10;               ( NOT ( SIZEOF( QUERY ( pnt &lt;* QUERY ( elem &lt;* gcs\geometric_set.elements | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT'  IN TYPEOF( elem ) ) ) | ( NOT ( &#10;               SIZEOF( TYPEOF( pnt ) * [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_CURVE' ] ) = 1 ) ) ) ) = 0 ) ) ) ) = &#10;               0 )" label="wr7"/>
      </entity>
      <entity name="geometrically_bounded_surface_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_SET' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'GEOMETRIC_SET' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'] * TYPEOF( it ) ) &#10;               = 1 ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( ( &#10;               ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GEOMETRICALLY_BOUNDED_SURFACE_SHAPE_REPRESENTATION'  ) IN TYPEOF( mi\mapped_item.mapping_source.&#10;               mapped_representation ) ) AND ( SIZEOF( QUERY ( mr_it &lt;* mi\mapped_item.mapping_source.mapped_representation.items&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_SET' IN TYPEOF( mr_it ) ) ) ) &gt; 0 ) ) ) ) ) &#10;               = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( gs &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_SET'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;               SIZEOF( QUERY ( pnt &lt;* QUERY ( gsel &lt;* gs\geometric_set.elements | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT'  IN TYPEOF( gsel ) ) ) | ( NOT &#10;               gbsf_check_point( pnt ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( gs &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_SET'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;               SIZEOF( QUERY ( cv &lt;* QUERY ( gsel &lt;* gs\geometric_set.elements | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE'  IN TYPEOF( gsel ) ) ) | ( NOT &#10;               gbsf_check_curve( cv ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( gs &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_SET'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;               SIZEOF( QUERY ( sf &lt;* QUERY ( gsel &lt;* gs\geometric_set.elements | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE'  IN TYPEOF( gsel ) ) ) | ( NOT &#10;               gbsf_check_surface( sf ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( gs &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_SET'  IN TYPEOF( it ) ) ) | ( &#10;               SIZEOF( QUERY ( gsel &lt;* gs\geometric_set.elements | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE'  IN TYPEOF( gsel ) ) ) ) &gt; 0 ) ) ) &gt; &#10;               0 )" label="wr7"/>
      </entity>
      <entity name="geometrically_bounded_wireframe_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( SIZEOF( TYPEOF( it ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_CURVE_SET' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' ] ) = 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( SIZEOF( TYPEOF( it ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_CURVE_SET' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' ] ) = 1 ) ) ) &gt;= 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( gcs &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_CURVE_SET'  IN TYPEOF( it ) ) ) | ( &#10;               NOT ( SIZEOF( QUERY ( crv &lt;* QUERY ( elem &lt;* gcs\geometric_set.elements | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE'  IN TYPEOF( elem ) ) ) | ( NOT &#10;               valid_geometrically_bounded_wf_curve( crv ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( gcs &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_CURVE_SET'  IN TYPEOF( it ) ) ) | ( &#10;               NOT ( SIZEOF( QUERY ( pnts &lt;* QUERY ( elem &lt;* gcs\geometric_set.elements | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT'  IN TYPEOF( elem ) ) ) | ( NOT &#10;               valid_geometrically_bounded_wf_point( pnts ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( gcs &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_CURVE_SET'  IN TYPEOF( it ) ) ) | ( &#10;               NOT ( SIZEOF( QUERY ( cnc &lt;* QUERY ( elem &lt;* gcs\geometric_set.elements | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC'  IN TYPEOF( elem ) ) ) | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D'  IN TYPEOF( cnc\conic.&#10;               position ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( gcs &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_CURVE_SET'  IN TYPEOF( it ) ) ) | ( &#10;               NOT ( SIZEOF( QUERY ( pline &lt;* QUERY ( elem &lt;* gcs\geometric_set.elements | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE'  IN TYPEOF( elem ) ) ) | ( NOT ( &#10;               SIZEOF( pline\polyline.points ) &gt; 2 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;               'GEOMETRICALLY_BOUNDED_WIREFRAME_SHAPE_REPRESENTATION'  ) IN TYPEOF( mi\mapped_item.mapping_source.&#10;               mapped_representation ) ) ) ) ) = 0 )" label="wr7"/>
      </entity>
      <entity abstract.supertype="YES" name="geometry_with_local_irregularity" super.expression="ONEOF (extreme_patch_width_variation, zero_surface_normal, abrupt_change_of_surface_normal)" supertypes="inapt_geometry"/>
      <entity abstract.supertype="YES" name="geometry_with_local_near_degeneracy" super.expression="ONEOF (curve_with_small_curvature_radius, short_length_curve_segment, surface_with_small_curvature_radius, small_area_surface_patch, narrow_surface_patch, indistinct_surface_knots, indistinct_curve_knots, nearly_degenerate_surface_boundary, nearly_degenerate_surface_patch)" supertypes="inapt_geometry"/>
      <entity name="global_assignment" supertypes="representation_item_relationship"/>
      <entity name="global_uncertainty_assigned_context" supertypes="representation_context">
         <explicit name="uncertainty">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="uncertainty_measure_with_unit"/>
         </explicit>
      </entity>
      <entity name="global_unit_assigned_context" supertypes="representation_context">
         <explicit name="units">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="unit"/>
         </explicit>
      </entity>
      <entity name="ground_fact" supertypes="atomic_formula"/>
      <entity name="group" super.expression="ONEOF (change_group, change_element)">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ID_ATTRIBUTE.'&#10;               + 'IDENTIFIED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="group_assignment" super.expression="ONEOF (current_change_element_assignment, previous_change_element_assignment, change_group_assignment)">
         <explicit name="assigned_group">
            <typename name="group"/>
         </explicit>
         <derived expression="get_role( SELF )" name="role">
            <typename name="object_role"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ROLE_ASSOCIATION.'&#10;               + 'ITEM_WITH_ROLE'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="group_product_definition" supertypes="component_definition"/>
      <entity name="group_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_group">
            <typename name="group"/>
         </explicit>
         <explicit name="related_group">
            <typename name="group"/>
         </explicit>
      </entity>
      <entity name="group_shape_aspect" supertypes="shape_aspect"/>
      <entity name="guided_wave_terminal" supertypes="package_terminal"/>
      <entity name="half_space_2d" supertypes="primitive_2d">
         <explicit name="base_curve">
            <typename name="curve"/>
         </explicit>
         <explicit name="agreement_flag">
            <builtintype type="BOOLEAN"/>
         </explicit>
      </entity>
      <entity name="half_space_solid" supertypes="geometric_representation_item">
         <explicit name="base_surface">
            <typename name="surface"/>
         </explicit>
         <explicit name="agreement_flag">
            <builtintype type="BOOLEAN"/>
         </explicit>
      </entity>
      <entity name="hardness_representation" supertypes="representation">
         <where expression="( ( 2 &lt;= SIZEOF( SELF.items ) ) AND ( SIZEOF( SELF.items ) &lt;= 4 ) AND ( ( SIZEOF( QUERY ( i &lt;* items | ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DESCRIPTIVE_REPRESENTATION_ITEM' ) IN &#10;               TYPEOF( i ) ) AND ( i.name IN [ 'measuring method', 'measuring position'] ) ) ) ) + SIZEOF( QUERY ( i &lt;* items | ( &#10;               ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'VALUE_RANGE'] * TYPEOF( i ) ) = 1 ) AND &#10;               ( i.name IN [ 'depth', 'hardness'] ) ) ) ) ) = SIZEOF( SELF.items ) ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( i.name = 'measuring method' ) ) ) = 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( i.name = 'hardness' ) ) ) = 1 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( i.name = 'measuring position' ) ) ) &lt;= 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( i.name = 'depth' ) ) ) &lt;= 1 )" label="wr5"/>
         <where expression="( ( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PROPERTY_DEFINITION_REPRESENTATION.'  + 'USED_REPRESENTATION' ) ) = 1 ) AND ( SIZEOF( QUERY ( pdr &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PROPERTY_DEFINITION_REPRESENTATION.' + &#10;               'USED_REPRESENTATION'  ) | ( SIZEOF( QUERY ( gpa &lt;* USEDIN( pdr.definition, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'GENERAL_PROPERTY_ASSOCIATION.' + &#10;               'DERIVED_DEFINITION'  ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GENERAL_PROPERTY'  ) IN TYPEOF( gpa.base_definition ) ) AND ( gpa\general_property_association.base_definition\&#10;               general_property.name = 'surface_condition' ) ) ) ) = 1 ) ) ) = 1 ) )" label="wr6"/>
      </entity>
      <entity name="hatch_area_template" supertypes="fill_area_template"/>
      <entity name="hatch_line_element" supertypes="geometric_representation_item representation_item_relationship">
         <explicit name="relating_representation_item">
            <typename name="line"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <explicit name="related_representation_item">
            <typename name="measure_representation_item"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
      </entity>
      <entity name="hidden_element_over_riding_styled_item" supertypes="context_dependent_over_riding_styled_item">
         <explicit name="style_context">
            <aggregate lower="1" type="LIST" upper="1"/>
            <typename name="presentation_view"/>
            <redeclaration entity-ref="context_dependent_over_riding_styled_item"/>
         </explicit>
         <explicit name="item">
            <typename name="camera_image"/>
            <redeclaration entity-ref="styled_item"/>
         </explicit>
         <inverse attribute="items" entity="presentation_view" name="container">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CAMERA_MODEL_D3_WITH_HLHSR' IN TYPEOF( SELF.item&#10;               \mapped_item.mapping_source.mapping_origin ) )" label="wr1"/>
      </entity>
      <entity name="high_degree_axi_symmetric_surface" supertypes="overcomplex_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="approximation_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="high_degree_conic" supertypes="overcomplex_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="approximation_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_CURVE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="high_degree_linear_curve" supertypes="overcomplex_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="approximation_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_CURVE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="high_degree_planar_surface" supertypes="overcomplex_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="approximation_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity abstract.supertype="YES" name="high_order_kinematic_pair" super.expression="ONEOF (linear_flexible_and_planar_curve_pair, point_on_surface_pair, point_on_planar_curve_pair, planar_curve_pair, surface_pair)" supertypes="kinematic_pair">
         <where expression="( SIZEOF( QUERY ( lr &lt;* SELF\kinematic_pair.associated_link_representations_2 | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) &#10;               = 0 )" label="wr1"/>
      </entity>
      <entity name="hole_bottom" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;                of_shape.definition ) )" label="wr1"/>
         <where expression="( SELF.description IN [ 'through', 'flat', 'flat with radius', 'flat with taper', 'spherical', 'conical'] )" label="wr2"/>
         <where expression="( ( NOT ( SELF.description = 'through' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) ) = 0 ) ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( ( NOT ( SELF.description IN [ 'flat with radius', 'flat with taper', 'spherical', 'conical'] ) ) OR ( SIZEOF( &#10;                QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( ( NOT ( SELF.description = 'flat' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 0 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( SELF.description IN [ 'flat with radius', 'spherical'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) )" label="wr6"/>
         <where expression="( ( NOT ( SELF.description = 'flat with taper' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 2 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) )" label="wr7"/>
         <where expression="( ( NOT ( SELF.description = 'conical' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( ( NOT ( SIZEOF( impl_rep.used_representation.items ) &gt;= 1 ) ) AND ( &#10;                SIZEOF( impl_rep.used_representation.items ) &lt;= 2 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr8"/>
         <where expression="( ( SELF.description = 'through' ) OR ( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATING_SHAPE_ASPECT'  ) | ( ( sar.description = 'hole bottom usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( fcr.name IN [ 'hole depth start', 'hole depth end'] ) ) ) &gt;= 1 ) )" label="wr9"/>
         <where expression="( ( NOT ( SELF.description = 'flat with radius' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'corner radius' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr10"/>
         <where expression="( ( NOT ( SELF.description = 'spherical' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'radius' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr11"/>
         <where expression="( ( NOT ( SELF.description = 'conical' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'tip radius' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr12"/>
         <where expression="( ( NOT ( SELF.description = 'conical' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'tip angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr13"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATING_SHAPE_ASPECT'  ) | ( ( sar.description = 'hole bottom usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( ( fcr.related_shape_aspect.description = 'bottom condition occurrence' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUND_HOLE'  IN TYPEOF( fcr.&#10;                related_shape_aspect.of_shape.definition ) ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.HOLE_BOTTOM'  IN TYPEOF( fcr.&#10;                relating_shape_aspect ) ) ) ) ) &gt;= 1 )" label="wr14"/>
         <where expression="( ( NOT ( SELF.description = 'flat with taper' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'final diameter' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr15"/>
         <where expression="( ( NOT ( SELF.description = 'flat with taper' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'taper diameter' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr16"/>
      </entity>
      <entity name="hole_in_panel" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.name = 'hole profile' ) AND ( sa.description = &#10;               'closed profile occurrence'  ) AND ( SIZEOF( QUERY ( sar &lt;* USEDIN( sa, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar.description = 'profile usage' ) AND ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_CLOSED_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NGON_CLOSED_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_CLOSED_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLOSED_PATH_PROFILE' ] * TYPEOF( sar.&#10;               relating_shape_aspect ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr1"/>
         <where expression="( SIZEOF( get_property_definition_representations( SELF ) ) = SIZEOF( QUERY ( pdr &lt;* &#10;               get_property_definition_representations( SELF ) | ( SIZEOF( pdr.used_representation.items ) = 1 ) ) ) )" label="wr2"/>
      </entity>
      <entity name="homogeneous_linear_function" supertypes="maths_function unary_generic_expression">
         <explicit name="operand">
            <typename name="maths_function"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
         <explicit name="sum_index">
            <typename name="one_or_two"/>
         </explicit>
         <derived expression="SELF\unary_generic_expression.operand" name="mat">
            <typename name="maths_function"/>
         </derived>
         <where expression="function_is_2d_table( mat )" label="wr1"/>
         <where expression="( ( space_dimension( mat.range ) = 1 ) AND subspace_of_es( factor1( mat.range ), es_numbers ) )" label="wr2"/>
      </entity>
      <entity name="homokinetic_pair" supertypes="universal_pair">
         <where expression="( NOT EXISTS( SELF.input_skew_angle ) )" label="wr1"/>
      </entity>
      <entity name="hyperbola" supertypes="conic">
         <explicit name="semi_axis">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="semi_imag_axis">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="id_attribute">
         <explicit name="attribute_value">
            <typename name="identifier"/>
         </explicit>
         <explicit name="identified_item">
            <typename name="id_attribute_select"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="identification_assignment">
         <explicit name="assigned_id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="role">
            <typename name="identification_role"/>
         </explicit>
      </entity>
      <entity name="identification_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="illuminance_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ILLUMINANCE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="illuminance_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.lux ) )" label="wr1"/>
      </entity>
      <entity name="impedance_measurement_setup_requirement" supertypes="predefined_requirement_view_definition"/>
      <entity name="impedance_requirement" supertypes="predefined_requirement_view_definition"/>
      <entity name="implicit_explicit_positioned_sketch_relationship" supertypes="representation_item_relationship">
         <explicit name="relating_representation_item">
            <typename name="repositioned_neutral_sketch"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <explicit name="related_representation_item">
            <typename name="positioned_sketch"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( q &lt;* using_representations( SELF\representation_item_relationship.related_representation_item ) | &#10;               item_in_context( SELF\representation_item_relationship.relating_representation_item, q.context_of_items ) ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="implicit_intersection_curve" supertypes="implicit_planar_curve">
         <explicit name="external_surface">
            <typename name="surface"/>
         </explicit>
      </entity>
      <entity name="implicit_model_intersection_curve" supertypes="implicit_planar_curve">
         <explicit name="intersected_model">
            <typename name="surface_or_solid_model"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="implicit_planar_curve" super.expression="ONEOF (implicit_intersection_curve, implicit_projected_curve, implicit_model_intersection_curve, implicit_silhouette_curve)" supertypes="curve auxiliary_geometric_representation_item">
         <explicit name="using_sketch">
            <typename name="positioned_sketch"/>
         </explicit>
         <explicit name="computed_representation">
            <typename name="curve"/>
         </explicit>
         <derived expression="get_plane_of_implicit_geometry( using_sketch )" name="curve_plane">
            <typename name="plane"/>
         </derived>
         <where expression="( SIZEOF( TYPEOF( computed_representation ) * [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'IMPLICIT_PLANAR_CURVE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_REPLICA'] ) &#10;               = 0 )" label="wr1"/>
      </entity>
      <entity name="implicit_planar_intersection_point" supertypes="implicit_point_on_plane">
         <explicit name="external_curve">
            <typename name="curve"/>
         </explicit>
      </entity>
      <entity name="implicit_planar_projection_point" supertypes="implicit_point_on_plane">
         <explicit name="external_point">
            <typename name="point"/>
         </explicit>
         <explicit name="projection_direction">
            <typename name="direction"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="implicit_point_on_plane" super.expression="ONEOF (implicit_planar_intersection_point, implicit_planar_projection_point)" supertypes="point auxiliary_geometric_representation_item">
         <explicit name="using_sketch">
            <typename name="positioned_sketch"/>
         </explicit>
         <explicit name="computed_representation">
            <typename name="cartesian_point"/>
         </explicit>
         <derived expression="get_plane_of_implicit_geometry( using_sketch )" name="plane_of_point">
            <typename name="plane"/>
         </derived>
         <where expression="( ( plane_of_point\elementary_surface.position.location = computed_representation ) XOR ( dot_product( plane_of_point\&#10;               elementary_surface.position.p[3], get_relative_direction_2points( plane_of_point\elementary_surface.position.&#10;               location, computed_representation ) ) = 0 ) )" label="wr1"/>
         <where expression="( SIZEOF( TYPEOF( computed_representation ) * [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'IMPLICIT_POINT_ON_PLANE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_REPLICA'] ) &#10;               = 0 )" label="wr2"/>
      </entity>
      <entity name="implicit_projected_curve" supertypes="implicit_planar_curve">
         <explicit name="external_curve">
            <typename name="curve"/>
         </explicit>
         <explicit name="projection_direction">
            <typename name="direction"/>
         </explicit>
      </entity>
      <entity name="implicit_silhouette_curve" supertypes="implicit_planar_curve">
         <explicit name="silhouetted_model">
            <typename name="surface_or_solid_model"/>
         </explicit>
         <explicit name="view_direction">
            <typename name="direction"/>
         </explicit>
      </entity>
      <entity name="imported_curve_function" supertypes="maths_function generic_literal">
         <explicit name="geometry">
            <typename name="curve"/>
         </explicit>
         <explicit name="parametric_domain">
            <typename name="tuple_space"/>
         </explicit>
         <where expression="expression_is_constant( parametric_domain )" label="wr1"/>
      </entity>
      <entity name="imported_point_function" supertypes="maths_function generic_literal">
         <explicit name="geometry">
            <typename name="point"/>
         </explicit>
      </entity>
      <entity name="imported_surface_function" supertypes="maths_function generic_literal">
         <explicit name="geometry">
            <typename name="surface"/>
         </explicit>
         <explicit name="parametric_domain">
            <typename name="tuple_space"/>
         </explicit>
         <where expression="expression_is_constant( parametric_domain )" label="wr1"/>
      </entity>
      <entity name="imported_volume_function" supertypes="maths_function generic_literal">
         <explicit name="geometry">
            <typename name="volume"/>
         </explicit>
         <explicit name="parametric_domain">
            <typename name="tuple_space"/>
         </explicit>
         <where expression="expression_is_constant( parametric_domain )" label="wr1"/>
      </entity>
      <entity name="inappropriate_element_visibility" supertypes="externally_conditioned_data_quality_criterion">
         <where expression="validate_ecdq_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'STYLED_ITEM' ] )" label="wr1"/>
      </entity>
      <entity name="inappropriate_use_of_layer" supertypes="externally_conditioned_data_quality_criterion">
         <where expression="validate_ecdq_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRESENTATION_LAYER_ASSIGNMENT' ] )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="inapt_data" super.expression="ONEOF (inapt_topology, inapt_geometry, inapt_topology_and_geometry_relationship, inapt_manifold_solid_brep)" supertypes="shape_data_quality_criterion"/>
      <entity abstract.supertype="YES" name="inapt_geometry" super.expression="ONEOF (nearly_degenerate_geometry, discontinuous_geometry, self_intersecting_geometry, geometry_with_local_near_degeneracy, overlapping_geometry, multiply_defined_geometry, geometry_with_local_irregularity, overcomplex_geometry)" supertypes="inapt_data"/>
      <entity abstract.supertype="YES" name="inapt_manifold_solid_brep" super.expression="ONEOF (partly_overlapping_solids, small_volume_solid, multiply_defined_solids, entirely_narrow_solid, solid_with_excessive_number_of_voids)" supertypes="inapt_data"/>
      <entity abstract.supertype="YES" name="inapt_topology" super.expression="ONEOF (free_edge, non_manifold_at_edge, non_manifold_at_vertex, over_used_vertex)" supertypes="inapt_data"/>
      <entity abstract.supertype="YES" name="inapt_topology_and_geometry_relationship" super.expression="ONEOF (topology_related_to_nearly_degenerate_geometry, geometric_gap_in_topology, non_smooth_geometry_transition_across_edge, topology_related_to_self_intersecting_geometry, steep_geometry_transition_across_edge, topology_related_to_overlapping_geometry, topology_related_to_multiply_defined_geometry, overcomplex_topology_and_geometry_relationship)" supertypes="inapt_data"/>
      <entity name="incidence_assembly_constraint" supertypes="binary_assembly_constraint incidence_geometric_constraint"/>
      <entity name="incidence_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="geometric_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="geometric_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="near_points">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="near_point_relationship"/>
         </explicit>
         <where expression="( ( SIZEOF( SELF\explicit_constraint.reference_elements ) &gt; 0 ) OR ( SIZEOF( SELF\explicit_constraint.&#10;               constrained_elements ) = 2 ) )" label="wr1"/>
         <where expression="( SIZEOF( near_points ) &lt;= SIZEOF( SELF\explicit_constraint.reference_elements ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* near_points | ( NOT ( q\representation_item_relationship.relating_representation_item IN SELF\&#10;               explicit_constraint.reference_elements ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="included_text_block" supertypes="mapped_item">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STRUCTURED_TEXT_REPRESENTATION' IN TYPEOF( SELF\&#10;               mapped_item.mapping_source.mapped_representation ) )" label="wr1"/>
      </entity>
      <entity name="inclusion_product_concept_feature" supertypes="conditional_concept_feature">
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'PACKAGE_PRODUCT_CONCEPT_FEATURE' ) &#10;               IN TYPEOF( SELF ) ) )" label="wr1"/>
         <where expression="( ( SIZEOF( QUERY ( cfr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'CONCEPT_FEATURE_RELATIONSHIP.RELATING_PRODUCT_CONCEPT_FEATURE'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;               'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION'  ) IN TYPEOF( cfr ) ) ) ) + SIZEOF( QUERY ( cfr &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CONCEPT_FEATURE_RELATIONSHIP.'&#10;               + 'RELATED_PRODUCT_CONCEPT_FEATURE'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION' ) IN TYPEOF( cfr ) ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SELF.condition.conditional_operator.name = 'implication' )" label="wr3"/>
      </entity>
      <entity name="inconsistent_adjacent_face_normals" supertypes="erroneous_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'CLOSED_OR_OPEN_SHELL_SELECT' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'EDGE_CURVE' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="inconsistent_curve_transition_code" supertypes="erroneous_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="angle_tolerance">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="curvature_ratio_tolerance">
            <typename name="ratio_measure"/>
         </explicit>
         <explicit name="distance_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="flat_curvature_radius_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'COMPOSITE_CURVE' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'COMPOSITE_CURVE_TRANSITION_LOCATOR'] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="inconsistent_edge_and_curve_directions" supertypes="erroneous_topology_and_geometry_relationship">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="distance_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'EDGE_CURVE' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="inconsistent_element_reference" supertypes="externally_conditioned_data_quality_criterion">
         <where expression="validate_ecdq_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'REPRESENTATION_ITEM' ] )" label="wr1"/>
      </entity>
      <entity name="inconsistent_face_and_closed_shell_normals" supertypes="erroneous_topology_and_geometry_relationship">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACE_SURFACE' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="inconsistent_face_and_surface_normals" supertypes="erroneous_topology_and_geometry_relationship">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACE_SURFACE' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="inconsistent_surface_transition_code" supertypes="erroneous_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="angle_tolerance">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="curvature_ratio_tolerance">
            <typename name="ratio_measure"/>
         </explicit>
         <explicit name="distance_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="flat_curvature_radius_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'RECTANGULAR_COMPOSITE_SURFACE' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'RECTANGULAR_COMPOSITE_SURFACE_TRANSITION_LOCATOR'] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="index_expression" supertypes="string_expression binary_generic_expression">
         <derived expression="SELF\binary_generic_expression.operands[1]" name="operand">
            <typename name="generic_expression"/>
         </derived>
         <derived expression="SELF\binary_generic_expression.operands[2]" name="index">
            <typename name="generic_expression"/>
         </derived>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STRING_EXPRESSION' IN TYPEOF( operand ) ) AND &#10;               ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NUMERIC_EXPRESSION' IN TYPEOF( index ) ) )" label="wr1"/>
         <where expression="is_int_expr( index )" label="wr2"/>
      </entity>
      <entity name="indirect_stratum_component_join_implementation" supertypes="plated_inter_stratum_feature"/>
      <entity name="indirectly_selected_elements" supertypes="user_selected_elements">
         <explicit name="indirectly_picked_items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="representation_item"/>
         </explicit>
      </entity>
      <entity name="indirectly_selected_shape_elements" supertypes="indirectly_selected_elements user_selected_shape_elements">
         <explicit name="indirectly_picked_items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="shape_representation_item"/>
            <redeclaration entity-ref="indirectly_selected_elements"/>
         </explicit>
      </entity>
      <entity name="indistinct_curve_knots" supertypes="geometry_with_local_near_degeneracy">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARAMETER_VALUE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARAMETER_VALUE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_CURVE_WITH_KNOTS' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'B_SPLINE_CURVE_KNOT_LOCATOR'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity name="indistinct_surface_knots" supertypes="geometry_with_local_near_degeneracy">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARAMETER_VALUE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARAMETER_VALUE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_SURFACE_WITH_KNOTS' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'B_SPLINE_SURFACE_KNOT_LOCATOR'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity name="inductance_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INDUCTANCE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="inductance_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.henry ) )" label="wr1"/>
      </entity>
      <entity name="information_right" supertypes="action_method"/>
      <entity name="information_usage_right" supertypes="action_method"/>
      <entity name="instance_attribute_reference" supertypes="variable_semantics">
         <explicit name="attribute_name">
            <typename name="attribute_identifier"/>
         </explicit>
         <explicit name="owning_instance">
            <typename name="representation_item"/>
         </explicit>
      </entity>
      <entity name="instance_report_item_with_extreme_instances" supertypes="shape_data_quality_inspection_instance_report_item">
         <explicit name="extreme_instances">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="extreme_instance"/>
         </explicit>
      </entity>
      <entity name="instance_usage_context_assignment" supertypes="product_definition_context">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="instance_usage_context_select"/>
         </explicit>
      </entity>
      <entity name="instanced_feature" supertypes="feature_definition shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION' IN TYPEOF( SELF.of_shape.&#10;               definition ) )" label="wr1"/>
         <where expression="SELF.product_definitional" label="wr2"/>
      </entity>
      <entity name="int_literal" supertypes="literal_number">
         <explicit name="the_value">
            <builtintype type="INTEGER"/>
            <redeclaration entity-ref="literal_number"/>
         </explicit>
      </entity>
      <entity name="int_numeric_variable" supertypes="numeric_variable"/>
      <entity name="int_value_function" supertypes="value_function"/>
      <entity abstract.supertype="YES" name="integer_defined_function" supertypes="numeric_defined_function"/>
      <entity name="integer_interval_from_min" supertypes="maths_space generic_literal">
         <explicit name="min">
            <builtintype type="INTEGER"/>
         </explicit>
      </entity>
      <entity name="integer_interval_to_max" supertypes="maths_space generic_literal">
         <explicit name="max">
            <builtintype type="INTEGER"/>
         </explicit>
      </entity>
      <entity name="integer_representation_item" supertypes="representation_item int_literal"/>
      <entity name="integer_tuple_literal" supertypes="generic_literal">
         <explicit name="lit_value">
            <aggregate lower="1" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
      </entity>
      <entity name="integral_shield" supertypes="laminate_component"/>
      <entity name="inter_stratum_feature" super.expression="ONEOF (cutout, interconnect_module_edge)" supertypes="laminate_component"/>
      <entity abstract.supertype="YES" name="inter_stratum_feature_dependent_land" super.expression="ONEOF (plated_passage_dependent_land, unsupported_passage_dependent_land)" supertypes="land"/>
      <entity name="inter_stratum_feature_edge_segment_template" supertypes="part_template_definition shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <where expression="( SELF\shape_aspect_relationship.relating_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.related_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="inter_stratum_feature_edge_segment_template_with_cross_section" supertypes="inter_stratum_feature_edge_segment_template"/>
      <entity name="inter_stratum_feature_edge_template" supertypes="part_template_definition"/>
      <entity name="inter_stratum_feature_template" super.expression="ONEOF (component_termination_passage_template, unsupported_passage_template, via_template)" supertypes="geometric_template"/>
      <entity name="interconnect_module_component" supertypes="physical_component"/>
      <entity name="interconnect_module_component_surface_feature" supertypes="physical_component_feature"/>
      <entity name="interconnect_module_cutout_segment_surface" supertypes="shape_aspect shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <where expression="( SELF\shape_aspect_relationship.relating_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.related_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="interconnect_module_design_object_category" supertypes="characterized_object"/>
      <entity name="interconnect_module_design_view" super.expression="layered_interconnect_module_design_view" supertypes="physical_unit"/>
      <entity name="interconnect_module_edge" super.expression="ONEOF (partially_plated_interconnect_module_edge, plated_interconnect_module_edge)" supertypes="inter_stratum_feature"/>
      <entity name="interconnect_module_edge_segment" super.expression="ONEOF (plated_interconnect_module_edge_segment, unplated_interconnect_module_edge_segment)" supertypes="inter_stratum_feature shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <where expression="( SELF\shape_aspect_relationship.relating_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.related_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="interconnect_module_edge_segment_surface" supertypes="shape_aspect shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <where expression="( SELF\shape_aspect_relationship.relating_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.related_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="interconnect_module_interface_terminal" supertypes="interconnect_module_terminal"/>
      <entity name="interconnect_module_macro_component" supertypes="physical_component"/>
      <entity name="interconnect_module_macro_component_join_terminal" supertypes="physical_component_terminal"/>
      <entity name="interconnect_module_macro_terminal" supertypes="interconnect_module_terminal"/>
      <entity name="interconnect_module_stratum_based_terminal" supertypes="interconnect_module_terminal"/>
      <entity name="interconnect_module_terminal" super.expression="interconnect_module_interface_terminal ANDOR ONEOF (interconnect_module_interface_terminal, interconnect_module_macro_terminal)" supertypes="shape_aspect"/>
      <entity name="interconnect_module_usage_view" super.expression="layered_interconnect_module_usage_view" supertypes="physical_unit"/>
      <entity name="interconnect_shield_allocation" supertypes="requirement_assignment"/>
      <entity name="interface_access_component_definition" supertypes="laminate_component"/>
      <entity name="interface_access_material_removal_laminate_component" supertypes="material_removal_laminate_component"/>
      <entity name="interface_access_stratum_feature_template_component" supertypes="stratum_feature_template_component"/>
      <entity name="interface_component" supertypes="physical_component"/>
      <entity name="interface_mounted_join" supertypes="shape_aspect_relationship shape_aspect"/>
      <entity name="interface_plane" supertypes="shape_aspect"/>
      <entity name="interfaced_group_component" supertypes="assembly_group_component"/>
      <entity name="interfacial_connection" supertypes="via"/>
      <entity name="internal_probe_access_area" supertypes="probe_access_area"/>
      <entity name="interpolated_configuration_representation" supertypes="representation">
         <explicit name="context_of_items">
            <typename name="geometric_representation_context_with_parameter"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="interpolated_configuration_sequence"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
      </entity>
      <entity name="interpolated_configuration_segment" supertypes="founded_item">
         <explicit name="state">
            <typename name="mechanism_state_representation"/>
         </explicit>
         <explicit name="t_parameter">
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="interpolation">
            <typename name="interpolation_type"/>
         </explicit>
      </entity>
      <entity name="interpolated_configuration_sequence" supertypes="representation_item">
         <explicit name="segments">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="interpolated_configuration_segment"/>
         </explicit>
         <derived expression="SIZEOF( segments )" name="n_segments">
            <builtintype type="INTEGER"/>
         </derived>
         <derived expression="segments[n_segments].interpolation &lt;&gt; discontinuous_interpolation_type" name="closed_interpolation">
            <builtintype type="LOGICAL"/>
         </derived>
         <derived expression="segments[1].state.represented_mechanism" name="configured_mechanism">
            <typename name="mechanism_representation"/>
         </derived>
         <where expression="( SIZEOF( QUERY ( ics &lt;* segments | ( ics.state.represented_mechanism :&lt;&gt;: configured_mechanism ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="intersecting_connected_face_sets" supertypes="topology_related_to_self_intersecting_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="interference_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CONNECTED_FACE_SET' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONNECTED_FACE_SET'] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'POINT_ON_FACE_SURFACE', 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'POINT_ON_FACE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr4"/>
      </entity>
      <entity name="intersecting_loops_in_face" supertypes="erroneous_topology_and_geometry_relationship">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="interference_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE'] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'POINT_ON_EDGE_CURVE', 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'POINT_ON_EDGE_CURVE' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr4"/>
      </entity>
      <entity name="intersecting_shells_in_solid" supertypes="erroneous_manifold_solid_brep">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="interference_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'BREP_WITH_VOIDS' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SURFACE_CURVE' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="intersection_curve" supertypes="surface_curve">
         <where expression="( SIZEOF( SELF\surface_curve.associated_geometry ) = 2 )" label="wr1"/>
         <where expression="( associated_surface( SELF\surface_curve.associated_geometry[1] ) &lt;&gt; associated_surface( SELF\surface_curve.&#10;               associated_geometry[2] ) )" label="wr2"/>
      </entity>
      <entity name="interval_expression" supertypes="boolean_expression multiple_arity_generic_expression">
         <derived expression="SELF\multiple_arity_generic_expression.operands[1]" name="interval_low">
            <typename name="generic_expression"/>
         </derived>
         <derived expression="SELF\multiple_arity_generic_expression.operands[2]" name="interval_item">
            <typename name="generic_expression"/>
         </derived>
         <derived expression="SELF\multiple_arity_generic_expression.operands[3]" name="interval_high">
            <typename name="generic_expression"/>
         </derived>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EXPRESSION' IN TYPEOF( interval_low ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EXPRESSION'  IN TYPEOF( interval_item ) ) AND &#10;               ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EXPRESSION' IN TYPEOF( interval_high ) ) )" label="wr1"/>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STRING_EXPRESSION' IN TYPEOF( SELF.&#10;               interval_low ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STRING_EXPRESSION' IN &#10;               TYPEOF( SELF.interval_high ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'STRING_EXPRESSION'  IN TYPEOF( SELF.interval_item ) ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NUMERIC_EXPRESSION'  IN TYPEOF( SELF.&#10;               interval_low ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NUMERIC_EXPRESSION' IN &#10;               TYPEOF( SELF.interval_item ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'NUMERIC_EXPRESSION'  IN TYPEOF( SELF.interval_high ) ) ) )" label="wr2"/>
      </entity>
      <entity name="inverse_copy_stratum_technology_occurrence_relationship" supertypes="derived_stratum_technology_occurrence_relationship"/>
      <entity name="invisibility">
         <explicit name="invisible_items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="invisible_item"/>
         </explicit>
      </entity>
      <entity name="iso4217_currency" supertypes="currency"/>
      <entity name="item_defined_transformation">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="transform_item_1">
            <typename name="representation_item"/>
         </explicit>
         <explicit name="transform_item_2">
            <typename name="representation_item"/>
         </explicit>
      </entity>
      <entity name="item_identified_representation_usage">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="definition">
            <typename name="item_identified_representation_usage_definition"/>
         </explicit>
         <explicit name="used_representation">
            <typename name="representation"/>
         </explicit>
         <explicit name="identified_item">
            <typename name="item_identified_representation_usage_select"/>
         </explicit>
         <where expression="( SELF.used_representation IN using_representations( SELF.identified_item ) )" label="wr1"/>
      </entity>
      <entity name="item_link_motion_relationship" supertypes="link_motion_relationship">
         <explicit name="rep_1">
            <typename name="shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="item">
            <typename name="geometric_representation_item"/>
         </explicit>
      </entity>
      <entity name="item_restricted_requirement" supertypes="group predefined_requirement_view_definition"/>
      <entity name="joggle" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( NOT ( ( 5 &lt;= SIZEOF( pdr.used_representation.items ) ) AND ( SIZEOF( pdr&#10;                .used_representation.items ) &lt;= 10 ) ) ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( NOT ( i.name IN [&#10;                'orientation' , 'base radius 1', 'base radius 2', 'direction angle 1', 'direction angle 2', 'height', &#10;                'slope angle 1' , 'slope angle 2', 'top radius 1', 'top radius 2'] ) ) ) ) &gt; 0 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;                'direction angle 1'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;                'direction angle 2'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = 'height'  ) &#10;                AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) =&#10;                2 ) ) ) ) = 1 ) ) ) ) &lt;= 1 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;                'slope angle 1'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;                'slope angle 2'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.name = 'defining path' ) AND ( sa.description = &#10;                'path feature component occurrence'  ) AND ( SIZEOF( QUERY ( sar &lt;* USEDIN( sa, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar.description = 'path feature component usage' ) AND &#10;                ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_FEATURE_COMPONENT' IN TYPEOF( sar.&#10;                relating_shape_aspect ) ) AND ( sar.relating_shape_aspect.description = 'linear' ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( sa &lt;* get_shape_aspects( SELF ) | ( ( sa.name = 'termination' ) AND ( sa.description = &#10;                'joggle termination occurrence'  ) AND ( SIZEOF( QUERY ( sar &lt;* USEDIN( sa, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar.name = 'joggle termination usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.JOGGLE_TERMINATION'  IN TYPEOF( sar.&#10;                relating_shape_aspect ) ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;                'base radius 1'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) &lt;= 1 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;                'base radius 2'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) &lt;= 1 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;                'top radius 1'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) &lt;= 1 )" label="wr12"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;                'top radius 2'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) &lt;= 1 )" label="wr13"/>
      </entity>
      <entity name="joggle_termination" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SELF.description IN [ 'value termination', 'face termination'] )" label="wr2"/>
         <where expression="( ( SELF.description = 'value termination' ) XOR ( SIZEOF( QUERY ( pdr &lt;* &#10;               get_shape_aspect_property_definition_representations( SELF ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( ( SELF.description &lt;&gt; 'value termination' ) OR ( SIZEOF( QUERY ( pdr &lt;* &#10;               get_shape_aspect_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( pdr.used_representation.items ) = 2 ) ) ) ) = 1 ) )" label="wr4"/>
         <where expression="( ( SELF.description &lt;&gt; 'value termination' ) OR ( SIZEOF( QUERY ( pdr &lt;* &#10;               get_shape_aspect_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = 'depth' ) &#10;               AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = &#10;               2 ) ) ) ) = 1 ) ) ) ) = 1 ) )" label="wr5"/>
         <where expression="( ( SELF.description &lt;&gt; 'value termination' ) OR ( SIZEOF( QUERY ( pdr &lt;* &#10;               get_shape_aspect_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = 'angle' ) &#10;               AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) &#10;               = 2 ) ) ) ) = 1 ) ) ) ) = 1 ) )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( sar &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'SHAPE_ASPECT_RELATIONSHIP.RELATING_SHAPE_ASPECT'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;               sar ) ) AND ( sar.name = 'joggle termination usage' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.JOGGLE'  IN TYPEOF( sar.related_shape_aspect.&#10;               of_shape.definition ) ) AND ( sar.related_shape_aspect.of_shape.definition\characterized_object.name = 'termination' ) &#10;               AND ( sar.related_shape_aspect.of_shape.definition\characterized_object.description = 'joggle termination occurrence'  ) ) ) ) &#10;               = 1 )" label="wr7"/>
      </entity>
      <entity name="join_shape_aspect" supertypes="shape_aspect"/>
      <entity name="keepout_design_object_category" supertypes="characterized_object"/>
      <entity name="kinematic_analysis_consistency">
         <explicit name="control">
            <typename name="kinematic_control"/>
         </explicit>
         <explicit name="result">
            <typename name="kinematic_analysis_result"/>
         </explicit>
         <where expression="( control.controlled_mechanism :=: result.analysed_mechanism )" label="wr1"/>
      </entity>
      <entity name="kinematic_analysis_result">
         <explicit name="analysed_mechanism">
            <typename name="mechanism_representation"/>
         </explicit>
         <explicit name="result">
            <typename name="kinematic_result"/>
         </explicit>
      </entity>
      <entity name="kinematic_control">
         <explicit name="controlled_mechanism">
            <typename name="mechanism_representation"/>
         </explicit>
         <explicit name="contained_kinematic_programs">
            <typename name="kinematic_analysis_definition"/>
         </explicit>
      </entity>
      <entity name="kinematic_joint" supertypes="edge">
         <explicit name="edge_start">
            <typename name="kinematic_link"/>
            <redeclaration entity-ref="edge"/>
         </explicit>
         <explicit name="edge_end">
            <typename name="kinematic_link"/>
            <redeclaration entity-ref="edge"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="edge_start"/>
            <unique.attribute attribute="edge_end"/>
         </unique>
         <where expression="( edge_start :&lt;&gt;: edge_end )" label="wr1"/>
      </entity>
      <entity name="kinematic_link" supertypes="vertex"/>
      <entity abstract.supertype="YES" name="kinematic_link_representation" super.expression="ONEOF (linear_flexible_link_representation, rigid_link_representation)" supertypes="representation">
         <explicit name="context_of_items">
            <typename name="geometric_representation_context"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="kinematic_link_representation_items"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="represented_link">
            <typename name="kinematic_link"/>
         </explicit>
         <inverse attribute="rep_1" entity="kinematic_link_representation_association" name="associated_shape_representation">
            <inverse.aggregate lower="0" type="SET" upper="1"/>
         </inverse>
      </entity>
      <entity name="kinematic_link_representation_association" supertypes="representation_relationship">
         <explicit name="rep_1">
            <typename name="kinematic_link_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <where expression="( ( SELF\representation_relationship.rep_2.context_of_items :=: SELF\representation_relationship.rep_1.&#10;               context_of_items ) OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION'  IN TYPEOF( SELF ) ) )" label="wr1"/>
      </entity>
      <entity name="kinematic_loop" supertypes="edge_loop">
         <explicit name="edge_list">
            <aggregate lower="1" type="LIST" unique="YES" upper="?"/>
            <typename name="oriented_joint"/>
            <redeclaration entity-ref="path"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="kinematic_pair" super.expression="ONEOF (high_order_kinematic_pair, low_order_kinematic_pair_with_motion_coupling, low_order_kinematic_pair) ANDOR actuated_kinematic_pair" supertypes="geometric_representation_item item_defined_transformation">
         <explicit name="joint">
            <typename name="kinematic_joint"/>
         </explicit>
         <explicit name="transform_item_1">
            <typename name="rigid_placement"/>
            <redeclaration entity-ref="item_defined_transformation"/>
         </explicit>
         <explicit name="transform_item_2">
            <typename name="rigid_placement"/>
            <redeclaration entity-ref="item_defined_transformation"/>
         </explicit>
         <derived expression="sort_link_associations( &#10;                                                 link_representation_associations, TRUE )" name="associated_link_representations_1">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="kinematic_link_representation"/>
         </derived>
         <derived expression="sort_link_associations( &#10;                                                 link_representation_associations, FALSE )" name="associated_link_representations_2">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="kinematic_link_representation"/>
         </derived>
         <derived expression="SELF\representation_item.name" name="name">
            <typename name="label"/>
            <redeclaration entity-ref="item_defined_transformation"/>
         </derived>
         <inverse attribute="transformation_operator" entity="pair_representation_relationship" name="link_representation_associations">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
      </entity>
      <entity abstract.supertype="YES" name="kinematic_path" super.expression="ONEOF (kinematic_path_defined_by_nodes, kinematic_path_defined_by_curves)" supertypes="geometric_representation_item">
         <explicit name="segments">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="kinematic_path_segment"/>
         </explicit>
         <explicit name="t_start">
            <typename name="parameter_value"/>
         </explicit>
         <derived expression="SIZEOF( segments )" name="n_segments">
            <builtintype type="INTEGER"/>
         </derived>
         <derived expression="segments[n_segments].transition &lt;&gt; discontinuous" name="closed_path">
            <builtintype type="LOGICAL"/>
         </derived>
         <where expression="( SIZEOF( QUERY ( using_rep &lt;* using_representations( SELF ) | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'GEOMETRIC_REPRESENTATION_CONTEXT_WITH_PARAMETER'  IN TYPEOF( using_rep.context_of_items ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="kinematic_path_defined_by_curves" supertypes="kinematic_path">
         <explicit name="segments">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="curve_based_path_with_orientation"/>
            <redeclaration entity-ref="kinematic_path"/>
         </explicit>
      </entity>
      <entity name="kinematic_path_defined_by_nodes" supertypes="kinematic_path">
         <explicit name="segments">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="path_node"/>
            <redeclaration entity-ref="kinematic_path"/>
         </explicit>
         <explicit name="placement_start">
            <typename name="placement"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="kinematic_path_segment" super.expression="ONEOF (path_node, curve_based_path_with_orientation)" supertypes="founded_item">
         <explicit name="t_end">
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="transition">
            <typename name="transition_code"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="kinematic_property_definition_representation" super.expression="ONEOF (kinematic_property_topology_representation, kinematic_property_mechanism_representation)" supertypes="property_definition_representation">
         <explicit name="definition">
            <typename name="product_definition_kinematics"/>
            <redeclaration entity-ref="property_definition_representation"/>
         </explicit>
      </entity>
      <entity name="kinematic_property_mechanism_representation" supertypes="kinematic_property_definition_representation">
         <explicit name="used_representation">
            <typename name="mechanism_representation"/>
            <redeclaration entity-ref="property_definition_representation"/>
         </explicit>
         <explicit name="base">
            <typename name="kinematic_link_representation"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( i &lt;* used_representation.items | ( ( base :=: i\representation_relationship.rep_1 ) OR ( base :=: i\&#10;               representation_relationship.rep_2 ) ) ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="kinematic_property_topology_representation" supertypes="kinematic_property_definition_representation">
         <explicit name="used_representation">
            <typename name="kinematic_topology_representation_select"/>
            <redeclaration entity-ref="property_definition_representation"/>
         </explicit>
         <explicit name="base">
            <typename name="kinematic_link"/>
         </explicit>
         <where expression="( used_representation IN using_representations( base ) )" label="wr1"/>
      </entity>
      <entity name="kinematic_topology_directed_structure" supertypes="representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="oriented_joint"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="parent">
            <typename name="kinematic_topology_structure"/>
         </explicit>
         <where expression="( context_of_items :=: parent.context_of_items )" label="wr1"/>
         <where expression="( get_kinematic_joints_from_oriented_joints( items ) &lt;= parent.items )" label="wr2"/>
      </entity>
      <entity name="kinematic_topology_network_structure" supertypes="representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="kinematic_loop"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="parent">
            <typename name="kinematic_topology_structure"/>
         </explicit>
         <where expression="( context_of_items :=: parent.context_of_items )" label="wr1"/>
         <where expression="( get_kinematic_joints_from_kinematic_loops( items ) &lt;= parent.items )" label="wr2"/>
      </entity>
      <entity name="kinematic_topology_structure" supertypes="representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="kinematic_joint"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( item &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_EDGE' &#10;               IN TYPEOF( item ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="kinematic_topology_substructure" supertypes="kinematic_topology_structure">
         <explicit name="parent">
            <typename name="kinematic_topology_structure"/>
         </explicit>
         <where expression="( context_of_items :=: parent.context_of_items )" label="wr1"/>
         <where expression="( SELF\kinematic_topology_structure.items &lt;= parent\kinematic_topology_structure.items )" label="wr2"/>
      </entity>
      <entity name="kinematic_topology_tree_structure" supertypes="kinematic_topology_directed_structure"/>
      <entity name="known_source" supertypes="external_source pre_defined_item"/>
      <entity name="laid_defined_transformation" supertypes="transformation_with_derived_angle"/>
      <entity name="laminate_component" super.expression="ONEOF (material_removal_laminate_component, (stratum_feature_template_component ANDOR probe_access_area), inter_stratum_feature, generic_laminate_text_component, laminate_text_string_component) ANDOR fiducial" supertypes="assembly_component"/>
      <entity name="laminate_component_feature" super.expression="ONEOF (laminate_component_interface_terminal, laminate_component_join_terminal)" supertypes="component_feature"/>
      <entity name="laminate_component_interface_terminal" supertypes="laminate_component_feature"/>
      <entity name="laminate_component_join_terminal" supertypes="laminate_component_feature component_terminal"/>
      <entity name="laminate_group_component_make_from_relationship" supertypes="make_from_usage_option">
         <explicit name="relating_product_definition">
            <typename name="assembly_group_component"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </explicit>
         <explicit name="related_product_definition">
            <typename name="assembly_group_component"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </explicit>
      </entity>
      <entity name="laminate_table" super.expression="ONEOF (part_laminate_table, zone_structural_makeup)" supertypes="product_definition"/>
      <entity name="laminate_text_string_component" supertypes="array_placement_group laminate_component"/>
      <entity name="land" super.expression="ONEOF (contact_size_dependent_land, inter_stratum_feature_dependent_land)" supertypes="stratum_feature_template_component"/>
      <entity name="land_physical_template" super.expression="ONEOF (default_passage_based_land_physical_template, default_attachment_size_based_land_physical_template)" supertypes="stratum_feature_template"/>
      <entity name="land_template_terminal" supertypes="shape_aspect"/>
      <entity name="land_with_join_terminal" supertypes="land laminate_component_join_terminal">
         <derived expression="SELF" name="of_shape">
            <typename name="land_with_join_terminal"/>
            <redeclaration entity-ref="shape_aspect"/>
         </derived>
      </entity>
      <entity name="language" supertypes="group">
         <where expression="( SELF\group.name &lt;&gt; '' )" label="wr1"/>
      </entity>
      <entity name="layer_connection_point" supertypes="shape_aspect">
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect.name"/>
            <unique.attribute attribute="SELF\shape_aspect.of_shape"/>
         </unique>
      </entity>
      <entity name="layer_qualified_layout_spacing_requirement" supertypes="layout_spacing_requirement"/>
      <entity name="layer_stack_region" supertypes="instanced_feature"/>
      <entity name="layered_assembly_module_design_view" supertypes="assembly_module_design_view"/>
      <entity name="layered_assembly_module_usage_view" supertypes="assembly_module_usage_view"/>
      <entity name="layered_assembly_panel_design_view" supertypes="assembly_module_design_view"/>
      <entity name="layered_interconnect_module_design_view" super.expression="layered_interconnect_panel_design_view" supertypes="interconnect_module_design_view"/>
      <entity name="layered_interconnect_module_usage_view" supertypes="interconnect_module_usage_view"/>
      <entity name="layered_interconnect_panel_design_view" supertypes="layered_interconnect_module_design_view"/>
      <entity name="layout_junction" supertypes="shape_aspect"/>
      <entity name="layout_macro_component" supertypes="printed_component"/>
      <entity name="layout_macro_definition" supertypes="layered_interconnect_module_design_view"/>
      <entity name="layout_macro_definition_terminal_to_usage_terminal_assignment" supertypes="shape_aspect shape_aspect_relationship">
         <explicit name="related_shape_aspect">
            <typename name="printed_part_template_terminal"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect.name"/>
         </unique>
      </entity>
      <entity name="layout_macro_floor_plan_template" supertypes="printed_part_template"/>
      <entity name="layout_spacing_contextual_area" supertypes="shape_aspect"/>
      <entity name="layout_spacing_requirement" supertypes="predefined_requirement_view_definition"/>
      <entity name="leader_curve" supertypes="annotation_curve_occurrence">
         <where expression="( SIZEOF( QUERY ( ldc &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DRAUGHTING_CALLOUT.CONTENTS'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'LEADER_DIRECTED_CALLOUT'  ) IN TYPEOF( ldc ) ) ) ) &gt;= 1 )" label="wr1"/>
      </entity>
      <entity name="leader_directed_callout" supertypes="draughting_callout">
         <where expression="( SIZEOF( QUERY ( l_1 &lt;* SELF\draughting_callout.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LEADER_CURVE'  IN TYPEOF( l_1 ) ) ) ) &gt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( SELF\draughting_callout.contents ) &gt;= 2 )" label="wr2"/>
      </entity>
      <entity name="leader_directed_dimension" supertypes="leader_directed_callout">
         <where expression="( SIZEOF( QUERY ( con &lt;* SELF.contents | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'LEADER_CURVE'  IN TYPEOF( con ) ) ) ) = 1 )" label="wr1"/>
      </entity>
      <entity name="leader_terminator" supertypes="terminator_symbol">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LEADER_CURVE' IN TYPEOF( SELF\terminator_symbol.&#10;               annotated_curve ) )" label="wr1"/>
      </entity>
      <entity name="length_function" supertypes="numeric_expression unary_generic_expression">
         <explicit name="operand">
            <typename name="string_expression"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
      </entity>
      <entity name="length_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="length_trimmed_terminal" supertypes="altered_package_terminal"/>
      <entity name="length_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 1 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="library_stack_model" supertypes="stratum_stack_model"/>
      <entity name="library_to_design_stack_model_mapping" supertypes="product_definition_relationship"/>
      <entity name="light_source" super.expression="ONEOF (light_source_ambient, light_source_directional, light_source_positional, light_source_spot)" supertypes="geometric_representation_item">
         <explicit name="light_colour">
            <typename name="colour"/>
         </explicit>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'STYLED_ITEM.ITEM' ) ) &#10;               = 0 )" label="wr1"/>
      </entity>
      <entity name="light_source_ambient" supertypes="light_source"/>
      <entity name="light_source_directional" supertypes="light_source">
         <explicit name="orientation">
            <typename name="direction"/>
         </explicit>
      </entity>
      <entity name="light_source_positional" supertypes="light_source">
         <explicit name="position">
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="constant_attenuation">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="distance_attenuation">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="light_source_spot" supertypes="light_source">
         <explicit name="position">
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="orientation">
            <typename name="direction"/>
         </explicit>
         <explicit name="concentration_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="constant_attenuation">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="distance_attenuation">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="spread_angle">
            <typename name="positive_plane_angle_measure"/>
         </explicit>
      </entity>
      <entity name="like_expression" supertypes="comparison_expression">
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STRING_EXPRESSION' IN TYPEOF( SELF\&#10;               binary_generic_expression.operands[1] ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'STRING_EXPRESSION'  IN TYPEOF( SELF\binary_generic_expression.operands[2] ) ) )" label="wr1"/>
      </entity>
      <entity name="limits_and_fits">
         <explicit name="form_variance">
            <typename name="label"/>
         </explicit>
         <explicit name="zone_variance">
            <typename name="label"/>
         </explicit>
         <explicit name="grade">
            <typename name="label"/>
         </explicit>
         <explicit name="source">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="line" supertypes="curve">
         <explicit name="pnt">
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="dir">
            <typename name="vector"/>
         </explicit>
         <where expression="( dir.dim = pnt.dim )" label="wr1"/>
      </entity>
      <entity name="line_profile_tolerance" supertypes="geometric_tolerance"/>
      <entity name="linear_array_component_definition_link" supertypes="product_definition product_definition_relationship">
         <explicit name="relating_product_definition">
            <typename name="linear_array_placement_group_component"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </explicit>
         <explicit name="related_product_definition">
            <typename name="linear_array_placement_group_component"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </explicit>
         <where expression="( SELF\product_definition_relationship.related_product_definition :&lt;&gt;: SELF\product_definition_relationship.&#10;               relating_product_definition )" label="wr1"/>
         <where expression="acyclic_product_definition_relationship( SELF, [SELF\product_definition_relationship.related_product_definition], &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINEAR_ARRAY_COMPONENT_DEFINITION_LINK'  )" label="wr2"/>
      </entity>
      <entity name="linear_array_placement_group_component" supertypes="array_placement_group"/>
      <entity name="linear_composite_array_shape_aspect" supertypes="composite_array_shape_aspect"/>
      <entity name="linear_composite_array_shape_aspect_link" supertypes="shape_aspect shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="linear_composite_array_shape_aspect"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="linear_composite_array_shape_aspect"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <where expression="( SELF\shape_aspect_relationship.related_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.relating_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="linear_dimension" supertypes="dimension_curve_directed_callout"/>
      <entity name="linear_flexible_and_pinion_pair" supertypes="low_order_kinematic_pair_with_motion_coupling">
         <explicit name="pinion_radius">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( lr &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINEAR_FLEXIBLE_LINK_REPRESENTATION'  IN &#10;               TYPEOF( lr ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="linear_flexible_and_planar_curve_pair" supertypes="high_order_kinematic_pair">
         <explicit name="pair_curve">
            <typename name="curve"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( r &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( pair_curve IN r.items ) ) ) ) =&#10;               0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( lr &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINEAR_FLEXIBLE_LINK_REPRESENTATION'  IN &#10;               TYPEOF( lr ) ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="linear_flexible_link_representation" supertypes="kinematic_link_representation"/>
      <entity name="linear_path" supertypes="path_node">
         <derived expression="continuous" name="transition">
            <typename name="transition_code"/>
            <redeclaration entity-ref="kinematic_path_segment"/>
         </derived>
      </entity>
      <entity name="linear_profile" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 2 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name = &#10;               'orientation'  ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'profile length' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
      </entity>
      <entity name="linearized_table_function" supertypes="explicit_table_function unary_generic_expression">
         <explicit name="operand">
            <typename name="maths_function"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
         <explicit name="first">
            <builtintype type="INTEGER"/>
         </explicit>
         <derived expression="SELF\unary_generic_expression.operand" name="source">
            <typename name="maths_function"/>
         </derived>
         <where expression="function_is_1d_array( source )" label="wr1"/>
         <where expression="member_of( first, source\maths_function.domain )" label="wr2"/>
      </entity>
      <entity name="link_motion_relationship" supertypes="definitional_representation_relationship representation_relationship_with_transformation">
         <explicit name="rep_1">
            <typename name="link_or_shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="link_motion_representation_along_path"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="transformation_operator">
            <typename name="link_motion_transformation"/>
            <redeclaration entity-ref="representation_relationship_with_transformation"/>
         </explicit>
         <where expression="( transformation_operator\item_defined_transformation.transform_item_1 IN rep_1.items )" label="wr1"/>
         <where expression="( transformation_operator\item_defined_transformation.transform_item_2 IN rep_2.items )" label="wr2"/>
      </entity>
      <entity name="link_motion_representation_along_path" super.expression="ONEOF (prescribed_path, resulting_path)" supertypes="representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="kinematic_path"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="context_of_items">
            <typename name="geometric_representation_context_with_parameter"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
      </entity>
      <entity name="link_motion_transformation" supertypes="item_defined_transformation">
         <explicit name="transform_item_1">
            <typename name="rigid_placement"/>
            <redeclaration entity-ref="item_defined_transformation"/>
         </explicit>
         <explicit name="transform_item_2">
            <typename name="kinematic_path"/>
            <redeclaration entity-ref="item_defined_transformation"/>
         </explicit>
      </entity>
      <entity name="listed_data" supertypes="explicit_table_function generic_literal">
         <explicit name="values">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="maths_value"/>
         </explicit>
         <explicit name="value_range">
            <typename name="maths_space"/>
         </explicit>
         <derived expression="[SIZEOF( values )]" name="shape">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="positive_integer"/>
            <redeclaration entity-ref="explicit_table_function"/>
         </derived>
         <where expression="expression_is_constant( value_range )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( val &lt;* values | ( NOT member_of( val, value_range ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="listed_product_space" supertypes="maths_space generic_literal">
         <explicit name="factors">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="maths_space"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( space &lt;* factors | ( NOT expression_is_constant( space ) ) ) ) = 0 )" label="wr1"/>
         <where expression="no_cyclic_space_reference( SELF, [] )" label="wr2"/>
         <where expression="( NOT ( the_empty_space IN factors ) )" label="wr3"/>
      </entity>
      <entity name="literal_conjunction" supertypes="simple_clause"/>
      <entity name="literal_disjunction" supertypes="simple_clause"/>
      <entity abstract.supertype="YES" name="literal_number" super.expression="ONEOF (int_literal, real_literal)" supertypes="simple_numeric_expression generic_literal">
         <explicit name="the_value">
            <builtintype type="NUMBER"/>
         </explicit>
      </entity>
      <entity name="local_linear_stack" supertypes="stratum_sub_stack"/>
      <entity name="local_time">
         <explicit name="hour_component">
            <typename name="hour_in_day"/>
         </explicit>
         <explicit name="minute_component" optional="YES">
            <typename name="minute_in_hour"/>
         </explicit>
         <explicit name="second_component" optional="YES">
            <typename name="second_in_minute"/>
         </explicit>
         <explicit name="zone">
            <typename name="coordinated_universal_time_offset"/>
         </explicit>
         <where expression="valid_time( SELF )" label="wr1"/>
      </entity>
      <entity name="location_in_aggregate_representation_item" supertypes="compound_representation_item">
         <explicit name="item_element">
            <typename name="location_in_aggregate_item"/>
            <redeclaration entity-ref="compound_representation_item"/>
         </explicit>
      </entity>
      <entity name="location_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( SELF.items ) = 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT' &#10;               IN TYPEOF( it ) ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="locator" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( NOT ( ( 2 &lt;= SIZEOF( pdr.used_representation.items ) ) AND ( SIZEOF( pdr.&#10;               used_representation.items ) &lt;= 5 ) ) ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;               'diameter'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;               'tip radius'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) &lt;= 1 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;               'tip angle'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) = 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( i.name = &#10;               'base radius'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) ) &lt;= 1 )" label="wr5"/>
      </entity>
      <entity name="log10_function" supertypes="unary_function_call"/>
      <entity name="log2_function" supertypes="unary_function_call"/>
      <entity name="log_function" supertypes="unary_function_call"/>
      <entity name="logical_literal" supertypes="generic_literal">
         <explicit name="lit_value">
            <builtintype type="LOGICAL"/>
         </explicit>
      </entity>
      <entity name="logical_representation_item" supertypes="representation_item logical_literal"/>
      <entity name="loop" super.expression="ONEOF (vertex_loop, edge_loop, poly_loop)" supertypes="topological_representation_item"/>
      <entity name="loss_tangent_measure_with_unit" supertypes="ratio_measure_with_unit"/>
      <entity name="lot_effectivity" supertypes="effectivity">
         <explicit name="effectivity_lot_id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="effectivity_lot_size">
            <typename name="measure_with_unit"/>
         </explicit>
      </entity>
      <entity name="low_order_kinematic_pair" super.expression="ONEOF (revolute_pair, cylindrical_pair, spherical_pair, spherical_pair_with_pin, planar_pair, unconstrained_pair, fully_constrained_pair, prismatic_pair, universal_pair, low_order_kinematic_pair_with_range)" supertypes="kinematic_pair">
         <explicit name="t_x">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="t_y">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="t_z">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="r_x">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="r_y">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="r_z">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( lr &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( lr &lt;* SELF\kinematic_pair.associated_link_representations_2 | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) &#10;               = 0 )" label="wr2"/>
      </entity>
      <entity name="low_order_kinematic_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="low_order_kinematic_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_translation_x">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="actual_translation_y">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="actual_translation_z">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="actual_rotation_x">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="actual_rotation_y">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="actual_rotation_z">
            <typename name="plane_angle_measure"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="low_order_kinematic_pair_with_motion_coupling" super.expression="ONEOF (gear_pair, linear_flexible_and_pinion_pair, rack_and_pinion_pair, screw_pair)" supertypes="kinematic_pair">
         <where expression="( SIZEOF( QUERY ( lr &lt;* SELF\kinematic_pair.associated_link_representations_2 | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) &#10;               = 0 )" label="wr1"/>
      </entity>
      <entity name="low_order_kinematic_pair_with_range" supertypes="low_order_kinematic_pair">
         <explicit name="lower_limit_actual_rotation_x" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation_x" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="lower_limit_actual_rotation_y" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation_y" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="lower_limit_actual_rotation_z" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation_z" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="lower_limit_actual_translation_x" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_translation_x" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="lower_limit_actual_translation_y" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_translation_y" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="lower_limit_actual_translation_z" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_translation_z" optional="YES">
            <typename name="length_measure"/>
         </explicit>
      </entity>
      <entity name="luminous_flux_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LUMINOUS_FLUX_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="luminous_flux_unit" supertypes="named_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.lumen ) )" label="wr1"/>
      </entity>
      <entity name="luminous_intensity_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LUMINOUS_INTENSITY_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="luminous_intensity_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 1 ) )" label="wr1"/>
      </entity>
      <entity name="magnetic_flux_density_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAGNETIC_FLUX_DENSITY_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="magnetic_flux_density_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.tesla ) )" label="wr1"/>
      </entity>
      <entity name="magnetic_flux_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAGNETIC_FLUX_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="magnetic_flux_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.weber ) )" label="wr1"/>
      </entity>
      <entity name="make_from_connectivity_relationship" supertypes="shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="physical_connectivity_definition"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="physical_connectivity_definition"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
      </entity>
      <entity name="make_from_feature_relationship" supertypes="component_feature_relationship"/>
      <entity name="make_from_functional_unit_terminal_definition_relationship" supertypes="shape_aspect shape_aspect_relationship">
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect_relationship.relating_shape_aspect"/>
            <unique.attribute attribute="SELF\shape_aspect_relationship.related_shape_aspect"/>
         </unique>
         <where expression="( relating_shape_aspect.of_shape :&lt;&gt;: related_shape_aspect.of_shape )" label="wr1"/>
         <where expression="( SELF\shape_aspect.product_definitional = FALSE )" label="wr2"/>
      </entity>
      <entity name="make_from_model_port_relationship" supertypes="representation representation_relationship">
         <explicit name="rep_1">
            <typename name="analytical_model_port"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="analytical_model_port"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="rep_1"/>
            <unique.attribute attribute="rep_2"/>
         </unique>
         <where expression="( rep_1 :&lt;&gt;: rep_2 )" label="wr1"/>
      </entity>
      <entity name="make_from_part_feature_relationship" supertypes="shape_aspect shape_aspect_relationship">
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect_relationship.relating_shape_aspect"/>
            <unique.attribute attribute="SELF\shape_aspect_relationship.related_shape_aspect"/>
         </unique>
         <where expression="( SELF\shape_aspect.product_definitional = FALSE )" label="wr1"/>
      </entity>
      <entity name="make_from_usage_option" supertypes="product_definition_usage">
         <explicit name="ranking">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="ranking_rationale">
            <typename name="text"/>
         </explicit>
         <explicit name="quantity">
            <typename name="measure_with_unit"/>
         </explicit>
         <where expression="( ( NOT ( 'NUMBER' IN TYPEOF( quantity.value_component ) ) ) OR ( quantity.value_component &gt; 0 ) )" label="wr1"/>
      </entity>
      <entity name="manifold_constraining_context_dependent_shape_representation" supertypes="context_dependent_shape_representation representation_relationship"/>
      <entity name="manifold_solid_brep" supertypes="solid_model">
         <explicit name="outer">
            <typename name="closed_shell"/>
         </explicit>
      </entity>
      <entity name="manifold_subsurface_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONNECTED_FACE_SUB_SET' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) &#10;                = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'CONNECTED_FACE_SUB_SET' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'] * &#10;                TYPEOF( it ) ) = 1 ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SUBSURFACE_SHAPE_REPRESENTATION'  IN&#10;                TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( cfss &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONNECTED_FACE_SUB_SET'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OPEN_SHELL' IN TYPEOF( cfss ) ) ) ) ) &#10;                = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( cfss &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONNECTED_FACE_SUB_SET'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONNECTED_FACE_SUB_SET' IN &#10;                TYPEOF( cfss\connected_face_sub_set.parent_face_set ) ) AND ( SIZEOF( QUERY ( fac &lt;* cfss\connected_face_sub_set.&#10;                parent_face_set\connected_face_set.cfs_faces | ( NOT advanced_face_properties( fac ) ) ) ) = 0 ) ) OR ( SIZEOF( &#10;                QUERY ( fac &lt;* cfss\connected_face_sub_set.parent_face_set\connected_face_set.cfs_faces | ( NOT ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_FACE'  IN TYPEOF( fac ) ) ) ) ) = 0 ) ) ) ) ) &#10;                = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( cfss &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONNECTED_FACE_SUB_SET'  IN TYPEOF( it ) ) )&#10;                | ( SIZEOF( QUERY ( fac &lt;* cfss\connected_face_set.cfs_faces | ( NOT advanced_face_properties( fac ) ) ) ) = 0 ) ) ) &#10;                = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( cfss &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONNECTED_FACE_SUB_SET'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( fcs &lt;* cfss\connected_face_set.cfs_faces | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SUBFACE'  IN TYPEOF( fcs ) ) AND ( NOT ( &#10;                SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fcs.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( NOT ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe.edge_element ) ) &#10;                OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SUBEDGE' IN TYPEOF( oe.edge_element ) ) ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( cfss &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONNECTED_FACE_SUB_SET'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( fcs &lt;* cfss\connected_face_set.cfs_faces | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SUBFACE'  IN TYPEOF( fcs ) ) AND ( NOT ( &#10;                SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fcs.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( NOT ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe.edge_start ) ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT' IN TYPEOF( oe.edge_end ) ) ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( cfss &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONNECTED_FACE_SUB_SET'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( fcs &lt;* cfss\connected_face_set.cfs_faces | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SUBFACE'  IN TYPEOF( fcs ) ) AND ( NOT ( &#10;                SIZEOF( QUERY ( bnds &lt;* fcs.bounds | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_LOOP' ] * TYPEOF( bnds.bound ) ) = 1 ) ) ) ) &#10;                = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( cfss &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONNECTED_FACE_SUB_SET'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( fcs &lt;* cfss\connected_face_set.cfs_faces | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SUBFACE'  IN TYPEOF( fcs ) ) AND ( NOT ( &#10;                SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fcs.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE' ] * TYPEOF( oe.edge_element\&#10;                edge_curve.edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( cfss &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONNECTED_FACE_SUB_SET'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( fcs &lt;* cfss\connected_face_set.cfs_faces | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SUBFACE'  IN TYPEOF( fcs ) ) AND ( NOT ( &#10;                SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fcs.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE'  IN TYPEOF( oe.edge_element\&#10;                edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( QUERY ( sc_ag &lt;* oe.edge_element\edge_curve.edge_geometry\&#10;                surface_curve.associated_geometry | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PCURVE'  IN TYPEOF( sc_ag ) ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( cfss &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONNECTED_FACE_SUB_SET'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( fcs &lt;* cfss\connected_face_set.cfs_faces | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SUBFACE'  IN TYPEOF( fcs ) ) AND ( NOT ( &#10;                SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fcs.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE'  IN TYPEOF( oe.edge_element\&#10;                edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( oe\oriented_edge.edge_element\edge_curve.edge_geometry\polyline.&#10;                points ) &gt;= 3 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr12"/>
      </entity>
      <entity name="manifold_surface_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_SURFACE_MODEL' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) &#10;                = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHELL_BASED_SURFACE_MODEL' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'] &#10;                * TYPEOF( it ) ) = 1 ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SURFACE_SHAPE_REPRESENTATION' IN &#10;                TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) AND ( SIZEOF( QUERY ( mr_it &lt;* mi\mapped_item.&#10;                mapping_source.mapped_representation.items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHELL_BASED_SURFACE_MODEL'  IN TYPEOF( mr_it ) ) ) ) &gt; 0 ) ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( sbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sh &lt;* sbsm\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OPEN_SHELL' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_CLOSED_SHELL' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLOSED_SHELL' ] * TYPEOF( sh ) ) = 1 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( sbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* sbsm\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs\&#10;                connected_face_set.cfs_faces | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'FACE_SURFACE'  IN TYPEOF( fa ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( sbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* sbsm\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs\&#10;                connected_face_set.cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR msf_surface_check( fa\face_surface.face_geometry ) ) ) ) ) = 0 ) ) ) ) = &#10;                0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( sbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* sbsm\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs\&#10;                connected_face_set.cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( bnds &lt;* fa.bounds | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_LOOP' ] * TYPEOF( bnds.bound ) ) = 1 ) ) ) ) &#10;                = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( sbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* sbsm\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs\&#10;                connected_face_set.cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds\path.edge_list | ( NOT ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe.edge_element ) ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( sbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* sbsm\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs\&#10;                connected_face_set.cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe_cv &lt;* QUERY ( oe &lt;* elp_fbnds\path.edge_list | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe.edge_element ) ) )&#10;                | ( NOT ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_REPLICA' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_CURVE_3D' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE' ] * TYPEOF( oe_cv.edge_element&#10;                \edge_curve.edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( sbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* sbsm\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs\&#10;                connected_face_set.cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds\path.edge_list | ( NOT msf_curve_check( oe.edge_element\edge_curve.&#10;                edge_geometry ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( sbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* sbsm\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs\&#10;                connected_face_set.cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds\path.edge_list | ( NOT ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe.edge_element.&#10;                edge_start ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT' IN TYPEOF( &#10;                oe.edge_element.edge_end ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( sbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* sbsm\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs\&#10;                connected_face_set.cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds\path.edge_list | ( NOT ( ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DEGENERATE_PCURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_CURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_SURFACE' ] * TYPEOF( oe.edge_element&#10;                .edge_start\vertex_point.vertex_geometry ) ) = 1 ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DEGENERATE_PCURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_CURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_SURFACE' ] * TYPEOF( oe.edge_element&#10;                .edge_end\vertex_point.vertex_geometry ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr12"/>
         <where expression="( SIZEOF( QUERY ( sbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* sbsm\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs\&#10;                connected_face_set.cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( vlp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_LOOP'  IN TYPEOF( bnds.bound ) ) ) | &#10;                ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT' IN TYPEOF( vlp_fbnds\&#10;                vertex_loop.loop_vertex ) ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr13"/>
         <where expression="( SIZEOF( QUERY ( sbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* sbsm\shell_based_surface_model.sbsm_boundary | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs\&#10;                connected_face_set.cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( vlp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_LOOP'  IN TYPEOF( bnds.bound ) ) ) | &#10;                ( NOT ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DEGENERATE_PCURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_CURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_SURFACE' ] * TYPEOF( vlp_fbnds\&#10;                vertex_loop.loop_vertex\vertex_point.vertex_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr14"/>
      </entity>
      <entity name="mapped_item" supertypes="representation_item">
         <explicit name="mapping_source">
            <typename name="representation_map"/>
         </explicit>
         <explicit name="mapping_target">
            <typename name="representation_item"/>
         </explicit>
         <where expression="acyclic_mapped_representation( SELF )" label="wr1"/>
      </entity>
      <entity name="marking" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( 2 &lt;= SIZEOF( pdr.used_representation.items ) ) AND ( SIZEOF( pdr.&#10;               used_representation.items ) &lt;= 6 ) ) ) ) = 1 ) ) ) = 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;               it ) ) AND ( it.name = 'marking text' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;               it ) ) AND ( it.name = 'special instructions' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;               it ) ) AND ( it.name = 'font name' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'character height' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'character spacing' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;               QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_ASPECT_RELATIONSHIP.'  + 'RELATED_SHAPE_ASPECT' ) | ( ( sar.description = 'applied shape' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT' IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) ) ) = 1 ) ) ) = 1 ) ) ) ) = 0 )" label="wr7"/>
      </entity>
      <entity name="mass_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MASS_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="mass_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 1 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="mated_part_relationship" supertypes="group group_assignment product_definition_shape product_definition_relationship shape_aspect">
         <explicit name="items">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="product_definition"/>
         </explicit>
         <derived expression="SELF" name="assigned_group">
            <typename name="mated_part_relationship"/>
            <redeclaration entity-ref="group_assignment"/>
         </derived>
         <derived expression="SELF" name="definition">
            <typename name="mated_part_relationship"/>
            <redeclaration entity-ref="property_definition"/>
         </derived>
         <derived expression="SELF" name="of_shape">
            <typename name="mated_part_relationship"/>
            <redeclaration entity-ref="shape_aspect"/>
         </derived>
      </entity>
      <entity name="material_designation">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="definitions">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="characterized_definition"/>
         </explicit>
      </entity>
      <entity name="material_designation_characterization">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="designation">
            <typename name="material_designation"/>
         </explicit>
         <explicit name="property">
            <typename name="characterized_material_property"/>
         </explicit>
      </entity>
      <entity name="material_designation_with_conductivity_classification" supertypes="material_designation"/>
      <entity name="material_electrical_conductivity_category" supertypes="group"/>
      <entity name="material_property" supertypes="property_definition">
         <unique label="ur1">
            <unique.attribute attribute="SELF\property_definition.name"/>
            <unique.attribute attribute="SELF\property_definition.definition"/>
         </unique>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CHARACTERIZED_OBJECT' IN TYPEOF( SELF\&#10;               property_definition.definition ) ) OR ( SIZEOF( bag_to_set( USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PROPERTY_DEFINITION_REPRESENTATION.'&#10;               + 'DEFINITION'  ) ) - QUERY ( temp &lt;* bag_to_set( USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PROPERTY_DEFINITION_REPRESENTATION.'&#10;               + 'DEFINITION'  ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'MATERIAL_PROPERTY_REPRESENTATION'  ) IN TYPEOF( temp ) ) ) ) = 0 ) )" label="wr1"/>
      </entity>
      <entity name="material_property_representation" supertypes="property_definition_representation">
         <explicit name="dependent_environment">
            <typename name="data_environment"/>
         </explicit>
      </entity>
      <entity name="material_removal_feature_template" supertypes="single_stratum_continuous_template"/>
      <entity name="material_removal_laminate_component" supertypes="laminate_component"/>
      <entity name="material_removal_laminate_text_component" supertypes="generic_laminate_text_component"/>
      <entity name="material_removal_structured_component" supertypes="structured_layout_component"/>
      <entity name="material_removal_structured_template" supertypes="single_stratum_structured_template"/>
      <entity name="maths_enum_literal" supertypes="generic_literal">
         <explicit name="lit_value">
            <typename name="maths_enum_atom"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="maths_function" super.expression="ONEOF (finite_function, constant_function, selector_function, elementary_function, restriction_function, repackaging_function, reindexed_array_function, series_composed_function, parallel_composed_function, explicit_table_function, homogeneous_linear_function, general_linear_function, b_spline_basis, b_spline_function, rationalize_function, partial_derivative_function, definite_integral_function, abstracted_expression_function, expression_denoted_function, imported_point_function, imported_curve_function, imported_surface_function, imported_volume_function, application_defined_function)" supertypes="generic_expression">
         <derived expression="derive_function_domain( SELF )" name="domain">
            <typename name="tuple_space"/>
         </derived>
         <derived expression="derive_function_range( SELF )" name="range">
            <typename name="tuple_space"/>
         </derived>
      </entity>
      <entity abstract.supertype="YES" name="maths_space" super.expression="ONEOF (elementary_space, finite_integer_interval, integer_interval_from_min, integer_interval_to_max, finite_real_interval, real_interval_from_min, real_interval_to_max, cartesian_complex_number_region, polar_complex_number_region, finite_space, uniform_product_space, listed_product_space, extended_tuple_space, function_space)" supertypes="generic_expression"/>
      <entity name="maths_tuple_literal" supertypes="generic_literal">
         <explicit name="lit_value">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="maths_value"/>
         </explicit>
      </entity>
      <entity name="maths_variable" supertypes="generic_variable">
         <explicit name="values_space">
            <typename name="maths_space"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <where expression="expression_is_constant( values_space )" label="wr1"/>
      </entity>
      <entity name="maximum_function" supertypes="multiple_arity_function_call"/>
      <entity name="measure_qualification">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="qualified_measure">
            <typename name="measure_with_unit"/>
         </explicit>
         <explicit name="qualifiers">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="value_qualifier"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( temp &lt;* qualifiers | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRECISION_QUALIFIER'  IN TYPEOF( temp ) ) ) ) &lt; 2 )" label="wr1"/>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATION_ITEM' IN TYPEOF( SELF\&#10;               measure_qualification.qualified_measure ) ) )" label="wr2"/>
      </entity>
      <entity name="measure_representation_item" supertypes="representation_item measure_with_unit"/>
      <entity name="measure_with_unit" super.expression="ONEOF (length_measure_with_unit, mass_measure_with_unit, time_measure_with_unit, electric_current_measure_with_unit, thermodynamic_temperature_measure_with_unit, celsius_temperature_measure_with_unit, amount_of_substance_measure_with_unit, luminous_intensity_measure_with_unit, plane_angle_measure_with_unit, solid_angle_measure_with_unit, area_measure_with_unit, volume_measure_with_unit, ratio_measure_with_unit, acceleration_measure_with_unit, capacitance_measure_with_unit, electric_charge_measure_with_unit, conductance_measure_with_unit, electric_potential_measure_with_unit, energy_measure_with_unit, magnetic_flux_density_measure_with_unit, force_measure_with_unit, frequency_measure_with_unit, illuminance_measure_with_unit, inductance_measure_with_unit, luminous_flux_measure_with_unit, magnetic_flux_measure_with_unit, power_measure_with_unit, pressure_measure_with_unit, resistance_measure_with_unit, velocity_measure_with_unit, absorbed_dose_measure_with_unit, radioactivity_measure_with_unit, dose_equivalent_measure_with_unit)">
         <explicit name="value_component">
            <typename name="measure_value"/>
         </explicit>
         <explicit name="unit_component">
            <typename name="unit"/>
         </explicit>
         <where expression="valid_units( SELF )" label="wr1"/>
      </entity>
      <entity name="mechanical_context" supertypes="product_context">
         <where expression="( SELF.discipline_type = 'mechanical' )" label="wr1"/>
      </entity>
      <entity name="mechanical_design_and_draughting_relationship" supertypes="definitional_representation_relationship_with_same_context">
         <explicit name="rep_1">
            <typename name="mechanical_design_and_draughting_relationship_select"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="mechanical_design_and_draughting_relationship_select"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DRAUGHTING_MODEL' ) IN TYPEOF( &#10;               rep_2 ) ) ) OR ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DRAUGHTING_MODEL' ) IN &#10;               TYPEOF( rep_1 ) ) OR ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'SHAPE_REPRESENTATION'  ) IN TYPEOF( rep_1 ) ) )" label="wr1"/>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION'  ) IN TYPEOF( rep_2 ) ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;               'MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION'  ) IN TYPEOF( rep_1 ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_REPRESENTATION' ) IN TYPEOF( rep_1 ) ) )" label="wr2"/>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'MECHANICAL_DESIGN_SHADED_PRESENTATION_REPRESENTATION'  ) IN TYPEOF( rep_2 ) ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;               'MECHANICAL_DESIGN_SHADED_PRESENTATION_REPRESENTATION'  ) IN TYPEOF( rep_1 ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_REPRESENTATION' ) IN TYPEOF( rep_1 ) ) )" label="wr3"/>
      </entity>
      <entity name="mechanical_design_geometric_presentation_area" supertypes="presentation_area">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="mechanical_design_geometric_presentation_area_items"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( it1 &lt;* SELF.items | ( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MAPPED_ITEM'  IN TYPEOF( it1 ) ) ) OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRESENTATION_VIEW'  IN TYPEOF( it1\mapped_item.mapping_source.mapped_representation ) ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pv &lt;* QUERY ( mi1 &lt;* QUERY ( it1 &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it1 ) ) ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRESENTATION_VIEW'  IN TYPEOF( mi1\mapped_item&#10;               .mapping_source.mapped_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it2 &lt;* pv\mapped_item.mapping_source.&#10;               mapped_representation\representation.items | ( ( NOT ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT'  IN TYPEOF( it2 ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it2 ) ) AND ( NOT ( &#10;               ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'CAMERA_IMAGE_3D_WITH_SCALE' ) IN &#10;               TYPEOF( it2 ) ) ) AND ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRESENTATION_VIEW' &#10;               IN TYPEOF( it2\mapped_item.mapping_source.mapped_representation ) ) ) ) ) ) OR ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CAMERA_IMAGE_3D_WITH_SCALE' ) IN &#10;               TYPEOF( it2 ) ) AND ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION'  ) IN TYPEOF( it2\mapped_item.mapping_source.&#10;               mapped_representation ) ) ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( ( SIZEOF( QUERY ( ps &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PRESENTATION_SIZE.UNIT'  ) | ( ( ps\presentation_size.size.size_in_x &lt;= 0 ) OR ( ps\presentation_size.size.&#10;               size_in_y &lt;= 0 ) ) ) ) = 0 ) AND ( SIZEOF( QUERY ( ais &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'AREA_IN_SET.AREA' ) | ( SIZEOF( &#10;               QUERY ( ps &lt;* USEDIN( ais, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PRESENTATION_SIZE.UNIT'  ) | ( ( ps\presentation_size.size.size_in_x &lt;= 0 ) OR ( ps\presentation_size.size.&#10;               size_in_y &lt;= 0 ) ) ) ) &gt; 0 ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( ( ( SIZEOF( QUERY ( ps &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PRESENTATION_SIZE.UNIT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'AXIS2_PLACEMENT_2D'  ) IN TYPEOF( ps.size.placement ) ) ) ) = 1 ) AND ( SIZEOF( QUERY ( ps &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRESENTATION_SIZE.UNIT' ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'AXIS2_PLACEMENT_3D' ) IN TYPEOF( ps.size&#10;               .placement ) ) ) ) = 0 ) ) OR ( ( SIZEOF( QUERY ( ais &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'AREA_IN_SET.AREA' ) | ( SIZEOF( &#10;               QUERY ( ps &lt;* USEDIN( ais, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PRESENTATION_SIZE.UNIT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'AXIS2_PLACEMENT_2D'  ) IN TYPEOF( ps.size.placement ) ) ) ) = 1 ) ) ) = 1 ) AND ( SIZEOF( QUERY ( ais &lt;* USEDIN( &#10;               SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'AREA_IN_SET.AREA' ) | ( SIZEOF( &#10;               QUERY ( ps &lt;* USEDIN( ais, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PRESENTATION_SIZE.UNIT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'AXIS2_PLACEMENT_3D'  ) IN TYPEOF( ps.size.placement ) ) ) ) = 0 ) ) ) = 1 ) ) )" label="wr4"/>
      </entity>
      <entity name="mechanical_design_geometric_presentation_representation" supertypes="representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="mechanical_design_geometric_presentation_representation_items"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_REPRESENTATION', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;                'MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION' ] * TYPEOF( mi\mapped_item.mapping_source.&#10;                mapped_representation ) ) = 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( smi &lt;* QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( si\styled_item.item ) ) )&#10;                | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_REPRESENTATION' ) IN &#10;                TYPEOF( smi\styled_item.item\mapped_item.mapping_source.mapped_representation ) ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( pss &lt;* psa.styles | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_STYLE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE' ] * TYPEOF( pss ) ) = 1 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psbc &lt;* QUERY ( psa &lt;* si\styled_item.styles | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRESENTATION_STYLE_BY_CONTEXT' ) IN &#10;                TYPEOF( psa ) ) ) | ( NOT ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATION'] * &#10;                TYPEOF( psbc\presentation_style_by_context.style_context ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ps &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_STYLE'  IN TYPEOF( pss ) ) ) | ( NOT ( &#10;                ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'POSITIVE_LENGTH_MEASURE' ) IN &#10;                TYPEOF( ps\point_style.marker_size ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( ps\point_style.marker_colour ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( cs &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE'  IN TYPEOF( pss ) ) ) | ( NOT ( &#10;                ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( cs\curve_style.curve_colour ) ) = 1 ) AND ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( &#10;                cs\curve_style.curve_width ) ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'CURVE_STYLE_FONT' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'DRAUGHTING_PRE_DEFINED_CURVE_FONT' ] * TYPEOF( cs\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SURFACE_SIDE_STYLE' ) IN &#10;                TYPEOF( ssu\surface_style_usage.style ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_PARAMETER_LINE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_CONTROL_GRID', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_SILHOUETTE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_SEGMENTATION_CURVE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_FILL_AREA', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_BOUNDARY'] * TYPEOF( sses ) ) &#10;                = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( sspl &lt;* QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_PARAMETER_LINE' ) IN &#10;                TYPEOF( sses ) ) ) | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE' IN&#10;                TYPEOF( sspl\surface_style_parameter_line.style_of_parameter_lines ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( sspl\surface_style_parameter_line.style_of_parameter_lines\curve_style.curve_colour ) ) = 1 ) AND ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( &#10;                sspl\surface_style_parameter_line.style_of_parameter_lines\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE_FONT' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * &#10;                TYPEOF( sspl\surface_style_parameter_line.style_of_parameter_lines\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( sscg &lt;* QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_CONTROL_GRID' ) IN &#10;                TYPEOF( sses ) ) ) | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE' IN&#10;                TYPEOF( sscg\surface_style_control_grid.style_of_control_grid ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( sscg\surface_style_control_grid.style_of_control_grid\curve_style.curve_colour ) ) = 1 ) AND ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( &#10;                sscg\surface_style_control_grid.style_of_control_grid\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE_FONT' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * &#10;                TYPEOF( sscg\surface_style_control_grid.style_of_control_grid\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( sssh &lt;* QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_SILHOUETTE' ) IN TYPEOF( &#10;                sses ) ) ) | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE' IN &#10;                TYPEOF( sssh\surface_style_silhouette.style_of_silhouette ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( sssh\surface_style_silhouette.style_of_silhouette\curve_style.curve_colour ) ) = 1 ) AND ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( &#10;                sssh\surface_style_silhouette.style_of_silhouette\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE_FONT' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * &#10;                TYPEOF( sssh\surface_style_silhouette.style_of_silhouette\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( sssc &lt;* QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_SEGMENTATION_CURVE' ) IN &#10;                TYPEOF( sses ) ) ) | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE' IN&#10;                TYPEOF( sssc\surface_style_segmentation_curve.style_of_segmentation_curve ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( sssc\surface_style_segmentation_curve.style_of_segmentation_curve\curve_style.curve_colour ) ) = 1 ) AND &#10;                ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'POSITIVE_LENGTH_MEASURE' ) IN &#10;                TYPEOF( sssc\surface_style_segmentation_curve.style_of_segmentation_curve\curve_style.curve_width ) ) AND ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE_FONT', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * &#10;                TYPEOF( sssc\surface_style_segmentation_curve.style_of_segmentation_curve\curve_style.curve_font ) ) = 1 ) ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr12"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( ssbd &lt;* QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_BOUNDARY' ) IN TYPEOF( &#10;                sses ) ) ) | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE' IN &#10;                TYPEOF( ssbd\surface_style_boundary.style_of_boundary ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( ssbd\surface_style_boundary.style_of_boundary\curve_style.curve_colour ) ) = 1 ) AND ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( &#10;                ssbd\surface_style_boundary.style_of_boundary\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE_FONT' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * &#10;                TYPEOF( ssbd\surface_style_boundary.style_of_boundary\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 )" label="wr13"/>
      </entity>
      <entity name="mechanical_design_presentation_representation_with_draughting" supertypes="representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="camera_model_d3"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
      </entity>
      <entity name="mechanical_design_shaded_presentation_area" supertypes="presentation_area">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="mechanical_design_shaded_presentation_area_items"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( it1 &lt;* SELF.items | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'AXIS2_PLACEMENT'  IN TYPEOF( it1 ) ) OR ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MAPPED_ITEM'  IN TYPEOF( it1 ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRESENTATION_VIEW'  IN TYPEOF( it1\mapped_item.mapping_source.mapped_representation ) ) ) ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pv &lt;* QUERY ( mi1 &lt;* QUERY ( it1 &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it1 ) ) ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRESENTATION_VIEW'  IN TYPEOF( mi1\mapped_item&#10;               .mapping_source.mapped_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it2 &lt;* pv\mapped_item.mapping_source.&#10;               mapped_representation\representation.items | ( ( NOT ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT'  IN TYPEOF( it2 ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it2 ) ) AND ( NOT ( &#10;               ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'CAMERA_IMAGE_3D_WITH_SCALE' ) IN &#10;               TYPEOF( it2 ) ) ) AND ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRESENTATION_VIEW' &#10;               IN TYPEOF( it2\mapped_item.mapping_source.mapped_representation ) ) ) ) ) ) OR ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CAMERA_IMAGE_3D_WITH_SCALE' ) IN &#10;               TYPEOF( it2 ) ) AND ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'MECHANICAL_DESIGN_SHADED_PRESENTATION_REPRESENTATION'  ) IN TYPEOF( it2\mapped_item.mapping_source.&#10;               mapped_representation ) ) ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( ( SIZEOF( QUERY ( ps &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PRESENTATION_SIZE.UNIT'  ) | ( NOT ( ( ps\presentation_size.size.size_in_x &gt; 0 ) AND ( ps\presentation_size.size.&#10;               size_in_y &gt; 0 ) ) ) ) ) = 0 ) AND ( SIZEOF( QUERY ( pset &lt;* QUERY ( ais &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'AREA_IN_SET.AREA' ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRESENTATION_SET' ) IN TYPEOF( ais.&#10;               in_set ) ) ) | ( SIZEOF( QUERY ( ps &lt;* USEDIN( pset, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRESENTATION_SIZE.UNIT' ) | ( NOT ( ( ps&#10;               \presentation_size.size.size_in_x &gt; 0 ) AND ( ps\presentation_size.size.size_in_y &gt; 0 ) ) ) ) ) = 0 ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( ( SIZEOF( QUERY ( psize &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PRESENTATION_SIZE.UNIT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'AXIS2_PLACEMENT_2D'  ) IN TYPEOF( psize.size.placement ) ) ) ) = 1 ) AND ( SIZEOF( QUERY ( pset &lt;* &#10;               QUERY ( ais &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'AREA_IN_SET.'&#10;               + 'AREA'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'PRESENTATION_SET' ) IN &#10;               TYPEOF( ais.in_set ) ) ) | ( SIZEOF( QUERY ( psize &lt;* USEDIN( pset, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRESENTATION_SIZE.UNIT' ) | ( NOT ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'AXIS2_PLACEMENT_2D' ) IN TYPEOF( psize.&#10;               size.placement ) ) ) ) ) = 0 ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pv &lt;* QUERY ( mi1 &lt;* QUERY ( it1 &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it1 ) ) ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRESENTATION_VIEW'  IN TYPEOF( mi1\mapped_item&#10;               .mapping_source.mapped_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( ci &lt;* pv\mapped_item.mapping_source.&#10;               mapped_representation\representation.items | ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CAMERA_IMAGE_3D_WITH_SCALE' ) IN &#10;               TYPEOF( ci ) ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'CAMERA_MODEL_D3' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'CAMERA_MODEL_D3_WITH_HLHSR' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'CAMERA_MODEL_WITH_LIGHT_SOURCES' ] * TYPEOF( ci\mapped_item.mapping_source.mapping_origin ) ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr5"/>
      </entity>
      <entity name="mechanical_design_shaded_presentation_representation" supertypes="representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="mechanical_design_shaded_presentation_representation_items"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_REPRESENTATION', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;                'MECHANICAL_DESIGN_SHADED_PRESENTATION_REPRESENTATION' ] * TYPEOF( mi\mapped_item.mapping_source.&#10;                mapped_representation ) ) = 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( smi &lt;* QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( si\styled_item.item ) ) )&#10;                | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_REPRESENTATION' ) IN &#10;                TYPEOF( smi\styled_item.item\mapped_item.mapping_source.mapped_representation ) ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( pss &lt;* psa.styles | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_STYLE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE' ] * TYPEOF( pss ) ) = 1 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psbc &lt;* QUERY ( psa &lt;* si\styled_item.styles | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRESENTATION_STYLE_BY_CONTEXT' ) IN &#10;                TYPEOF( psa ) ) ) | ( NOT ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATION'] * &#10;                TYPEOF( psbc\presentation_style_by_context.style_context ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ps &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_STYLE'  IN TYPEOF( pss ) ) ) | ( NOT ( &#10;                ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MARKER_TYPE' IN TYPEOF( ps\point_style.&#10;                marker ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POSITIVE_LENGTH_MEASURE' IN &#10;                TYPEOF( ps\point_style.marker_size ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( ps\point_style.marker_colour ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( cs &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE'  IN TYPEOF( pss ) ) ) | ( NOT ( &#10;                ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( cs\curve_style.curve_colour ) ) = 1 ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POSITIVE_LENGTH_MEASURE'  IN TYPEOF( cs\&#10;                curve_style.curve_width ) ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;                + 'CURVE_STYLE_FONT', 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'DRAUGHTING_PRE_DEFINED_CURVE_FONT' ] * TYPEOF( cs\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_SIDE_STYLE' IN TYPEOF( ssu\&#10;                surface_style_usage.style ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_PARAMETER_LINE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_CONTROL_GRID', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_SILHOUETTE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_SEGMENTATION_CURVE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_BOUNDARY', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_FILL_AREA', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_RENDERING'] * TYPEOF( &#10;                sses ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( ssfa &lt;* QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_FILL_AREA'  IN TYPEOF( sses ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( fss &lt;* ssfa\surface_style_fill_area.fill_area.fill_styles | ( NOT ( ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'FILL_AREA_STYLE_COLOUR' ) IN TYPEOF( &#10;                fss ) ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( fss\fill_area_style_colour.fill_colour ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) =&#10;                0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( sspl &lt;* QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_PARAMETER_LINE' ) IN &#10;                TYPEOF( sses ) ) ) | ( NOT ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE' &#10;                IN TYPEOF( sspl\surface_style_parameter_line.style_of_parameter_lines ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( sspl\surface_style_parameter_line.style_of_parameter_lines\curve_style.curve_colour ) ) = 1 ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POSITIVE_LENGTH_MEASURE'  IN TYPEOF( sspl\&#10;                surface_style_parameter_line.style_of_parameter_lines\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CURVE_STYLE_FONT', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * &#10;                TYPEOF( sspl\surface_style_parameter_line.style_of_parameter_lines\curve_style.curve_font ) ) = 1 ) ) OR ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE_RENDERING'  IN TYPEOF( sspl\&#10;                surface_style_parameter_line.style_of_parameter_lines ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( sspl\surface_style_parameter_line.style_of_parameter_lines\curve_style_rendering.rendering_properties.&#10;                rendered_colour ) ) = 1 ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( sscg &lt;* QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_CONTROL_GRID' ) IN &#10;                TYPEOF( sses ) ) ) | ( NOT ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE' &#10;                IN TYPEOF( sscg\surface_style_control_grid.style_of_control_grid ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( sscg\surface_style_control_grid.style_of_control_grid\curve_style.curve_colour ) ) = 1 ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POSITIVE_LENGTH_MEASURE'  IN TYPEOF( sscg\&#10;                surface_style_control_grid.style_of_control_grid\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CURVE_STYLE_FONT', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * &#10;                TYPEOF( sscg\surface_style_control_grid.style_of_control_grid\curve_style.curve_font ) ) = 1 ) ) OR ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE_RENDERING'  IN TYPEOF( sscg\&#10;                surface_style_control_grid.style_of_control_grid ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( sscg\surface_style_control_grid.style_of_control_grid\curve_style_rendering.rendering_properties.&#10;                rendered_colour ) ) = 1 ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( sssh &lt;* QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_SILHOUETTE' ) IN TYPEOF( &#10;                sses ) ) ) | ( NOT ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE' IN &#10;                TYPEOF( sssh\surface_style_silhouette.style_of_silhouette ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( sssh\surface_style_silhouette.style_of_silhouette\curve_style.curve_colour ) ) = 1 ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POSITIVE_LENGTH_MEASURE'  IN TYPEOF( sssh\&#10;                surface_style_silhouette.style_of_silhouette\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CURVE_STYLE_FONT', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * &#10;                TYPEOF( sssh\surface_style_silhouette.style_of_silhouette\curve_style.curve_font ) ) = 1 ) ) OR ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE_RENDERING'  IN TYPEOF( sssh\&#10;                surface_style_silhouette.style_of_silhouette ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( sssh\surface_style_silhouette.style_of_silhouette\curve_style_rendering.rendering_properties.&#10;                rendered_colour ) ) = 1 ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr12"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( sssc &lt;* QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_SEGMENTATION_CURVE' ) IN &#10;                TYPEOF( sses ) ) ) | ( NOT ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE' &#10;                IN TYPEOF( sssc\surface_style_segmentation_curve.style_of_segmentation_curve ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( sssc\surface_style_segmentation_curve.style_of_segmentation_curve\curve_style.curve_colour ) ) = 1 ) AND &#10;                ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POSITIVE_LENGTH_MEASURE' IN TYPEOF( sssc\&#10;                surface_style_segmentation_curve.style_of_segmentation_curve\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CURVE_STYLE_FONT', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * &#10;                TYPEOF( sssc\surface_style_segmentation_curve.style_of_segmentation_curve\curve_style.curve_font ) ) = 1 ) ) OR ( &#10;                ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE_RENDERING' IN TYPEOF( sssc\&#10;                surface_style_segmentation_curve.style_of_segmentation_curve ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( sssc\surface_style_segmentation_curve.style_of_segmentation_curve\curve_style_rendering.&#10;                rendering_properties.rendered_colour ) ) = 1 ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr13"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( ssbd &lt;* QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_BOUNDARY' ) IN TYPEOF( &#10;                sses ) ) ) | ( NOT ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE' IN &#10;                TYPEOF( ssbd\surface_style_boundary.style_of_boundary ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( ssbd\surface_style_boundary.style_of_boundary\curve_style.curve_colour ) ) = 1 ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POSITIVE_LENGTH_MEASURE'  IN TYPEOF( ssbd\&#10;                surface_style_boundary.style_of_boundary\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CURVE_STYLE_FONT', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * &#10;                TYPEOF( ssbd\surface_style_boundary.style_of_boundary\curve_style.curve_font ) ) = 1 ) ) OR ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE_RENDERING'  IN TYPEOF( ssbd\&#10;                surface_style_boundary.style_of_boundary ) ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( ssbd\surface_style_boundary.style_of_boundary\curve_style_rendering.rendering_properties.rendered_colour ) ) &#10;                = 1 ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr14"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( ssre &lt;* QUERY ( sses &lt;* ssu\surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_RENDERING' ) IN TYPEOF( &#10;                sses ) ) ) | ( NOT ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COLOUR_RGB', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * &#10;                TYPEOF( ssre\surface_style_rendering.surface_colour ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr15"/>
      </entity>
      <entity name="mechanism_representation" supertypes="representation">
         <explicit name="context_of_items">
            <typename name="geometric_representation_context"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="pair_representation_relationship"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="represented_topology">
            <typename name="kinematic_topology_representation_select"/>
         </explicit>
         <derived expression="collect_joints( items )" name="represented_joints">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="kinematic_joint"/>
         </derived>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.KINEMATIC_TOPOLOGY_STRUCTURE' IN TYPEOF( &#10;               represented_topology ) ) AND ( represented_joints :=: represented_topology.items ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.KINEMATIC_TOPOLOGY_DIRECTED_STRUCTURE'  IN &#10;               TYPEOF( represented_topology ) ) AND ( represented_joints :=: get_kinematic_joints_from_oriented_joints( &#10;               represented_topology.items ) ) ) OR ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'KINEMATIC_TOPOLOGY_NETWORK_STRUCTURE'  IN TYPEOF( represented_topology ) ) AND ( represented_joints :=: &#10;               get_kinematic_joints_from_kinematic_loops( represented_topology.items ) ) ) )" label="wr1"/>
      </entity>
      <entity name="mechanism_state_representation" supertypes="representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="pair_value"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="represented_mechanism">
            <typename name="mechanism_representation"/>
         </explicit>
         <derived expression="represented_mechanism.context_of_items" name="context_of_items">
            <typename name="geometric_representation_context"/>
            <redeclaration entity-ref="representation"/>
         </derived>
      </entity>
      <entity name="min_and_major_ply_orientation_basis" supertypes="representation_item_relationship geometric_representation_item">
         <explicit name="relating_representation_item">
            <typename name="axis2_placement_3d"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <explicit name="related_representation_item">
            <typename name="axis2_placement_3d"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <derived expression="SELF\representation_item_relationship.related_representation_item" name="major_orientation_basis">
            <typename name="axis2_placement_3d"/>
         </derived>
         <derived expression="SELF\representation_item_relationship.relating_representation_item" name="minor_orientation_basis">
            <typename name="axis2_placement_3d"/>
         </derived>
      </entity>
      <entity name="minimally_defined_bare_die_terminal" super.expression="bare_die_terminal" supertypes="shape_aspect">
         <explicit name="of_shape">
            <typename name="bare_die"/>
            <redeclaration entity-ref="shape_aspect"/>
         </explicit>
      </entity>
      <entity name="minimally_defined_connector" supertypes="packaged_part"/>
      <entity name="minimum_function" supertypes="multiple_arity_function_call"/>
      <entity name="minus_expression" supertypes="binary_numeric_expression"/>
      <entity name="minus_function" supertypes="unary_function_call"/>
      <entity name="mod_expression" supertypes="binary_numeric_expression"/>
      <entity name="model_parameter" super.expression="ONEOF (datum_difference_based_model_parameter, schema_based_model_parameter)" supertypes="general_property"/>
      <entity name="model_parameter_with_unit" supertypes="model_parameter">
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SCHEMA_BASED_MODEL_PARAMETER' IN TYPEOF( &#10;               SELF ) ) )" label="wr1"/>
      </entity>
      <entity name="modified_geometric_tolerance" supertypes="geometric_tolerance">
         <explicit name="modifier">
            <typename name="limit_condition"/>
         </explicit>
      </entity>
      <entity name="modified_pattern" supertypes="shape_aspect">
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATING_SHAPE_ASPECT'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) ) | ( ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPLICATE_FEATURE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INSTANCED_FEATURE' ] * TYPEOF( fcr.&#10;               related_shape_aspect.of_shape.definition ) ) &gt;= 1 ) AND ( fcr.description = 'base shape' ) ) ) ) = 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATING_SHAPE_ASPECT'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) ) | ( ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_PATTERN' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN' ] * TYPEOF( fcr.&#10;               related_shape_aspect.of_shape.definition ) ) = 1 ) AND ( fcr.description = 'base pattern' ) ) ) ) = 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( sar &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_ASPECT_RELATIONSHIP.RELATING_SHAPE_ASPECT'  ) | ( SIZEOF( QUERY ( msar &lt;* USEDIN( sar.&#10;               related_shape_aspect, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATTERN_OFFSET_MEMBERSHIP' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATTERN_OMIT_MEMBERSHIP' ] * TYPEOF( sar ) ) =&#10;               1 ) AND ( sar.description = 'modified pattern' ) AND ( sar :&lt;&gt;: msar ) ) ) ) &gt;= 1 ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity abstract.supertype="YES" name="modified_solid" super.expression="ONEOF (edge_blended_solid, sculptured_solid, shelled_solid, modified_solid_with_placed_configuration)" supertypes="solid_model">
         <explicit name="rationale">
            <typename name="text"/>
         </explicit>
         <explicit name="base_solid">
            <typename name="base_solid_select"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="modified_solid_with_placed_configuration" super.expression="ONEOF (solid_with_depression, solid_with_protrusion, solid_with_shape_element_pattern)" supertypes="modified_solid">
         <explicit name="placing">
            <typename name="axis2_placement_3d"/>
         </explicit>
      </entity>
      <entity name="modify_element" supertypes="change_element"/>
      <entity name="moments_of_inertia_representation" supertypes="representation">
         <where expression="( ( SIZEOF( SELF.items ) = 1 ) AND ( SIZEOF( QUERY ( i &lt;* SELF.items | ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'COMPOUND_REPRESENTATION_ITEM' ) IN &#10;               TYPEOF( i ) ) AND ( i.name = 'moments of inertia matrix' ) ) ) ) = 1 ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'COMPOUND_REPRESENTATION_ITEM'  ) IN TYPEOF( i ) ) AND ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'LIST_REPRESENTATION_ITEM' ) IN TYPEOF( i&#10;               \compound_representation_item.item_element ) ) AND value_range_aggregate_rep_item( i\compound_representation_item.&#10;               item_element ) ) ) ) = 1 )" label="wr2"/>
      </entity>
      <entity name="mounting_restriction_area" supertypes="shape_aspect"/>
      <entity name="mounting_restriction_volume" supertypes="shape_aspect"/>
      <entity name="mult_expression" supertypes="multiple_arity_numeric_expression"/>
      <entity name="multi_language_attribute_assignment" supertypes="attribute_value_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="multi_language_attribute_item"/>
         </explicit>
         <derived expression="language_indication[1]\attribute_classification_assignment.assigned_class" name="translation_language">
            <typename name="language"/>
         </derived>
         <inverse attribute="items" entity="attribute_language_assignment" name="language_indication">
            <inverse.aggregate lower="1" type="SET" upper="1"/>
         </inverse>
         <where expression="( SELF\attribute_value_assignment.role.name = 'alternate language' )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( ala &lt;* language_indication | ( ( ala\attribute_classification_assignment.attribute_name = &#10;               'attribute_value'  ) AND ( ala\attribute_classification_assignment.role.name = 'translated' ) ) ) ) = 1 )" label="wr2"/>
         <where expression="( SELF\attribute_value_assignment.attribute_name &lt;&gt; '' )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( ci &lt;* items | ( SIZEOF( QUERY ( ata &lt;* USEDIN( ci, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.ITEMS'  )&#10;               | ( ( ata\attribute_value_assignment.attribute_name = SELF\attribute_value_assignment.attribute_name ) AND ( ata.&#10;               translation_language :=: translation_language ) ) ) ) &gt; 1 ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( ci &lt;* items | ( SIZEOF( QUERY ( ata &lt;* USEDIN( ci, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS'  ) | ( ( &#10;               ata\attribute_classification_assignment.role.name = 'primary' ) AND ( ata\attribute_classification_assignment.&#10;               attribute_name = SELF\attribute_value_assignment.attribute_name ) AND ( ata\attribute_classification_assignment.&#10;               assigned_class :=: translation_language ) ) ) ) &gt; 0 ) ) ) = 0 )" label="wr5"/>
      </entity>
      <entity name="multi_layer_component_definition" supertypes="laminate_component"/>
      <entity name="multi_layer_material_removal_laminate_component" supertypes="material_removal_laminate_component"/>
      <entity name="multi_layer_stratum_feature_template_component" supertypes="stratum_feature_template_component"/>
      <entity name="multi_level_reference_designator" supertypes="assembly_component_usage">
         <explicit name="location">
            <aggregate lower="1" type="LIST" unique="YES" upper="?"/>
            <typename name="next_assembly_usage_occurrence"/>
         </explicit>
         <derived expression="location[1]\&#10;                                                 product_definition_relationship.relating_product_definition" name="relating_product_definition">
            <typename name="product_definition"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </derived>
         <derived expression="location[HIINDEX( &#10;                                                 location )]\product_definition_relationship.related_product_definition" name="related_product_definition">
            <typename name="product_definition_or_reference"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </derived>
         <derived expression="SELF\product_definition_relationship.&#10;                                                 related_product_definition" name="leaf">
            <typename name="product_definition_or_reference"/>
         </derived>
         <derived expression="SELF\product_definition_relationship.&#10;                                                 relating_product_definition" name="root">
            <typename name="product_definition"/>
         </derived>
         <where expression="unambiguously_specified_multi_level_reference_designator( location )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( cp &lt;* location | ( NOT EXISTS( cp\assembly_component_usage.reference_designator ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="multi_stratum_printed_component" supertypes="printed_component structured_layout_component"/>
      <entity name="multi_stratum_printed_part_template" supertypes="structured_printed_part_template multi_stratum_structured_template"/>
      <entity name="multi_stratum_special_symbol_component" supertypes="structured_layout_component"/>
      <entity name="multi_stratum_special_symbol_template" supertypes="multi_stratum_structured_template special_symbol_template"/>
      <entity abstract.supertype="YES" name="multi_stratum_structured_template" super.expression="ONEOF (padstack_definition, multi_stratum_special_symbol_template) ANDOR stratum_stack_dependent_template ANDOR ONEOF (padstack_definition, generic_footprint_definition, multi_stratum_special_symbol_template)" supertypes="structured_template"/>
      <entity abstract.supertype="YES" name="multiple_arity_boolean_expression" super.expression="ONEOF (and_expression, or_expression)" supertypes="boolean_expression multiple_arity_generic_expression">
         <explicit name="operands">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="boolean_expression"/>
            <redeclaration entity-ref="multiple_arity_generic_expression"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="multiple_arity_function_call" super.expression="ONEOF (maximum_function, minimum_function)" supertypes="multiple_arity_numeric_expression"/>
      <entity abstract.supertype="YES" name="multiple_arity_generic_expression" supertypes="generic_expression">
         <explicit name="operands">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="generic_expression"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="multiple_arity_numeric_expression" super.expression="ONEOF (plus_expression, mult_expression, multiple_arity_function_call)" supertypes="numeric_expression multiple_arity_generic_expression">
         <explicit name="operands">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="numeric_expression"/>
            <redeclaration entity-ref="multiple_arity_generic_expression"/>
         </explicit>
      </entity>
      <entity name="multiply_defined_cartesian_points" supertypes="multiply_defined_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CARTESIAN_POINT' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="multiply_defined_curves" supertypes="multiply_defined_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="multiply_defined_directions" supertypes="multiply_defined_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE'  IN value_limit_type( &#10;               SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.&#10;               threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE'  )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity name="multiply_defined_edges" supertypes="topology_related_to_multiply_defined_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'EDGE_CURVE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_CURVE'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="multiply_defined_faces" supertypes="topology_related_to_multiply_defined_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACE_SURFACE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SURFACE'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity abstract.supertype="YES" name="multiply_defined_geometry" super.expression="ONEOF (multiply_defined_curves, multiply_defined_surfaces, multiply_defined_cartesian_points, multiply_defined_directions, multiply_defined_placements)" supertypes="inapt_geometry"/>
      <entity name="multiply_defined_placements" supertypes="multiply_defined_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="assessment_specification_2">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( assessment_specification_2\shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE'  IN value_limit_type( &#10;               assessment_specification_2\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr2"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PLANE_ANGLE_AND_LENGTH_PAIR'  )" label="wr3"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT' ] )" label="wr4"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr5"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( sdqr &lt;* bag_to_set( USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DATA_QUALITY_INSPECTION_RESULT.' + &#10;               'CRITERION_INSPECTED'  ) ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'SHAPE_DATA_QUALITY_INSPECTION_RESULT'  ) IN TYPEOF( sdqr ) ) AND ( SIZEOF( QUERY ( sdqiir &lt;* bag_to_set( USEDIN( &#10;               sdqr, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DATA_QUALITY_INSPECTION_REPORT.' + &#10;               'INSPECTION_RESULT'  ) ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'SHAPE_DATA_QUALITY_INSPECTION_INSTANCE_REPORT'  ) IN TYPEOF( sdqiir ) ) AND ( SIZEOF( QUERY ( sdqiri &lt;* sdqiir.&#10;               inspected_instances | ( TYPEOF( sdqiri.inspected_elements[1] ) &lt;&gt; TYPEOF( sdqiri.inspected_elements[2] ) ) ) ) = 0 ) ) ) ) &#10;               = 0 ) ) ) ) = 0 )" label="wr7"/>
      </entity>
      <entity name="multiply_defined_solids" supertypes="inapt_manifold_solid_brep">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MANIFOLD_SOLID_BREP' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="multiply_defined_surfaces" supertypes="multiply_defined_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="multiply_defined_vertices" supertypes="topology_related_to_multiply_defined_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'VERTEX_POINT' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity abstract.supertype="YES" name="name_assignment">
         <explicit name="assigned_name">
            <typename name="label"/>
         </explicit>
         <derived expression="get_role( SELF )" name="role">
            <typename name="object_role"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ROLE_ASSOCIATION.'&#10;               + 'ITEM_WITH_ROLE'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="name_attribute">
         <explicit name="attribute_value">
            <typename name="label"/>
         </explicit>
         <explicit name="named_item">
            <typename name="name_attribute_select"/>
         </explicit>
      </entity>
      <entity name="named_unit" super.expression="ONEOF (si_unit, conversion_based_unit, context_dependent_unit) ANDOR ONEOF (length_unit, mass_unit, time_unit, electric_current_unit, thermodynamic_temperature_unit, amount_of_substance_unit, luminous_flux_unit, luminous_intensity_unit, plane_angle_unit, solid_angle_unit, ratio_unit)">
         <explicit name="dimensions">
            <typename name="dimensional_exponents"/>
         </explicit>
      </entity>
      <entity name="narrow_surface_patch" supertypes="geometry_with_local_near_degeneracy">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="width_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_SURFACE' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'B_SPLINE_SURFACE_PATCH'] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr4"/>
      </entity>
      <entity name="near_point_relationship" supertypes="representation_item_relationship">
         <explicit name="relating_representation_item">
            <typename name="curve_or_surface_constraint_element"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <explicit name="related_representation_item">
            <typename name="point"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="nearly_degenerate_geometry" super.expression="ONEOF (small_area_surface, short_length_curve, entirely_narrow_surface)" supertypes="inapt_geometry"/>
      <entity name="nearly_degenerate_surface_boundary" supertypes="geometry_with_local_near_degeneracy">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_VALUE_RANGE' ) IN &#10;               TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.&#10;               threshold ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' IN &#10;               value_limit_type( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'B_SPLINE_OR_RECTANGULAR_COMPOSITE_SURFACE_SELECT' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'BOUNDARY_CURVE_OF_B_SPLINE_OR_RECTANGULAR_COMPOSITE_SURFACE'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="nearly_degenerate_surface_patch" supertypes="geometry_with_local_near_degeneracy">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_VALUE_RANGE' ) IN &#10;               TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.&#10;               threshold ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' IN &#10;               value_limit_type( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'B_SPLINE_SURFACE_PATCH'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="network_node_definition" supertypes="product_definition"/>
      <entity name="neutral_sketch_representation" supertypes="shape_representation">
         <explicit name="neutral_sketch_semantics">
            <typename name="curves_or_area"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="sketch_element_select"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( q &lt;* items | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'GEOMETRIC_REPRESENTATION_ITEM'  IN TYPEOF( q ) ) AND ( q\geometric_representation_item.dim = 3 ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="next_assembly_usage_occurrence" supertypes="assembly_component_usage">
         <unique label="ur1">
            <unique.attribute attribute="SELF\assembly_component_usage.reference_designator"/>
            <unique.attribute attribute="SELF\product_definition_relationship.relating_product_definition"/>
         </unique>
      </entity>
      <entity name="next_assembly_usage_occurrence_relationship" supertypes="next_assembly_usage_occurrence product_definition_occurrence_relationship">
         <derived expression="SELF" name="occurrence_usage">
            <typename name="next_assembly_usage_occurrence_relationship"/>
            <redeclaration entity-ref="product_definition_occurrence_relationship"/>
         </derived>
      </entity>
      <entity name="ngon_closed_profile" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( ( SIZEOF( impl_rep.used_representation.items ) &gt;= 3 ) AND ( &#10;               SIZEOF( impl_rep.used_representation.items ) &lt;= 4 ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( srwp_i &lt;* pdr.used_representation.items | ( ( srwp_i.name &#10;               = 'orientation' ) OR ( srwp_i.name = 'number of sides' ) OR ( srwp_i.name = 'circumscribed diameter' ) OR ( srwp_i.&#10;               name = 'corner radius' ) OR ( srwp_i.name = 'diameter across flats' ) ) ) ) = SIZEOF( pdr.used_representation.items ) ) ) ) ) &#10;               = 1 ) ) ) = 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name = &#10;               'orientation'  ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' IN TYPEOF( it\&#10;               measure_with_unit.value_component ) ) AND ( it.name = 'number of sides' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name IN [ 'circumscribed diameter', 'diameter across flats'] ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'corner radius' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
      </entity>
      <entity name="non_agreed_accuracy_parameter_usage" supertypes="externally_conditioned_data_quality_criterion">
         <where expression="validate_ecdq_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'GLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT' ] )" label="wr1"/>
      </entity>
      <entity name="non_agreed_scale_usage" supertypes="externally_conditioned_data_quality_criterion">
         <where expression="validate_ecdq_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CARTESIAN_TRANSFORMATION_OPERATOR_3D' ] )" label="wr1"/>
      </entity>
      <entity name="non_agreed_unit_usage" supertypes="externally_conditioned_data_quality_criterion">
         <where expression="validate_ecdq_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'GLOBAL_UNIT_ASSIGNED_CONTEXT' ] )" label="wr1"/>
      </entity>
      <entity name="non_conductive_base_blind_via" supertypes="blind_via"/>
      <entity name="non_conductive_cross_section_template" supertypes="part_template_definition"/>
      <entity name="non_manifold_at_edge" supertypes="inapt_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CONNECTED_FACE_SET' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'EDGE_CURVE' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="non_manifold_at_vertex" supertypes="inapt_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CONNECTED_FACE_SET' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'VERTEX_POINT' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="non_manifold_surface_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BASED_SURFACE_MODEL' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) &#10;                = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'FACE_BASED_SURFACE_MODEL' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'] &#10;                * TYPEOF( it ) ) = 1 ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'NON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION'  ) IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) &#10;                AND ( SIZEOF( QUERY ( mr_it &lt;* mi\mapped_item.mapping_source.mapped_representation.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( mr_it ) ) ) ) &#10;                &gt; 0 ) ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( fbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs.&#10;                cfs_faces | ( NOT ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SURFACE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_FACE' ] * TYPEOF( fa ) ) = 1 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( fbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( QUERY ( f_sf &lt;* &#10;                QUERY ( fa &lt;* cfs.cfs_faces | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SURFACE' &#10;                IN TYPEOF( fa ) ) ) | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_FACE' &#10;                IN TYPEOF( f_sf ) ) OR nmsf_surface_check( f_sf\face_surface.face_geometry ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( fbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( QUERY ( o_fa &lt;* &#10;                QUERY ( fa &lt;* cfs.cfs_faces | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_FACE' &#10;                IN TYPEOF( fa ) ) ) | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_FACE' &#10;                IN TYPEOF( o_fa\oriented_face.face_element ) ) OR nmsf_surface_check( o_fa\oriented_face.face_element\face_surface&#10;                .face_geometry ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( fbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs.&#10;                cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_FACE' IN &#10;                TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( bnds &lt;* fa.bounds | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_LOOP' ] * TYPEOF( bnds.bound ) ) = 1 ) ) ) ) &#10;                = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( fbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs.&#10;                cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_FACE' IN &#10;                TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds\path.edge_list | ( NOT ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe.edge_element ) ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( fbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs.&#10;                cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_FACE' IN &#10;                TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe_cv &lt;* QUERY ( oe &lt;* elp_fbnds\path.edge_list | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe.edge_element ) ) )&#10;                | ( NOT ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_REPLICA' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_CURVE_3D' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE' ] * TYPEOF( oe_cv.edge_element&#10;                \edge_curve.edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( fbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs.&#10;                cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_FACE' IN &#10;                TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds\path.edge_list | ( NOT nmsf_curve_check( oe.edge_element\edge_curve.&#10;                edge_geometry ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( fbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs.&#10;                cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_FACE' IN &#10;                TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds\path.edge_list | ( NOT ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe.edge_element.&#10;                edge_start ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT' IN TYPEOF( &#10;                oe.edge_element.edge_end ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( fbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs.&#10;                cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_FACE' IN &#10;                TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( &#10;                NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds\path.edge_list | ( NOT ( ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DEGENERATE_PCURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_CURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_SURFACE' ] * TYPEOF( oe.edge_element&#10;                .edge_start\vertex_point.vertex_geometry ) ) = 1 ) AND ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DEGENERATE_PCURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_CURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_SURFACE' ] * TYPEOF( oe.edge_element&#10;                .edge_end\vertex_point.vertex_geometry ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr12"/>
         <where expression="( SIZEOF( QUERY ( fbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs.&#10;                cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_FACE' IN &#10;                TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( vlp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_LOOP'  IN TYPEOF( bnds.bound ) ) ) | &#10;                ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT' IN TYPEOF( vlp_fbnds\&#10;                vertex_loop.loop_vertex ) ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr13"/>
         <where expression="( SIZEOF( QUERY ( fbsm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( cfs &lt;* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( QUERY ( fa &lt;* cfs.&#10;                cfs_faces | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_FACE' IN &#10;                TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( vlp_fbnds &lt;* QUERY ( bnds &lt;* fa.bounds | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_LOOP'  IN TYPEOF( bnds.bound ) ) ) | &#10;                ( NOT ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DEGENERATE_PCURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_CURVE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_SURFACE' ] * TYPEOF( vlp_fbnds\&#10;                vertex_loop.loop_vertex\vertex_point.vertex_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr14"/>
      </entity>
      <entity name="non_referenced_coordinate_system" supertypes="externally_conditioned_data_quality_criterion">
         <where expression="validate_ecdq_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'AXIS2_PLACEMENT_3D' ] )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="non_smooth_geometry_transition_across_edge" super.expression="ONEOF (g1_discontinuity_between_adjacent_faces, g2_discontinuity_between_adjacent_faces)" supertypes="inapt_topology_and_geometry_relationship"/>
      <entity name="non_uniform_zone_definition" supertypes="tolerance_zone_definition"/>
      <entity name="not_expression" supertypes="unary_boolean_expression">
         <explicit name="operand">
            <typename name="boolean_expression"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
      </entity>
      <entity name="null_representation_item" supertypes="representation_item"/>
      <entity abstract.supertype="YES" name="numeric_defined_function" super.expression="ONEOF (integer_defined_function, real_defined_function)" supertypes="numeric_expression defined_function"/>
      <entity abstract.supertype="YES" name="numeric_expression" super.expression="ONEOF (simple_numeric_expression, unary_numeric_expression, binary_numeric_expression, multiple_arity_numeric_expression, length_function, value_function, numeric_defined_function)" supertypes="expression">
         <derived expression="is_int_expr( SELF )" name="is_int">
            <builtintype type="BOOLEAN"/>
         </derived>
         <derived expression="is_sql_mappable( SELF )" name="sql_mappable">
            <builtintype type="BOOLEAN"/>
         </derived>
      </entity>
      <entity name="numeric_variable" super.expression="ONEOF (int_numeric_variable, real_numeric_variable)" supertypes="simple_numeric_expression variable">
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INT_NUMERIC_VARIABLE' IN TYPEOF( SELF ) ) OR &#10;               ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REAL_NUMERIC_VARIABLE' IN TYPEOF( SELF ) ) )" label="wr1"/>
      </entity>
      <entity name="object_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="odd_function" supertypes="unary_boolean_expression">
         <explicit name="operand">
            <typename name="numeric_expression"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
         <where expression="is_int_expr( operand )" label="wr1"/>
      </entity>
      <entity name="offset_curve_2d" supertypes="curve">
         <explicit name="basis_curve">
            <typename name="curve"/>
         </explicit>
         <explicit name="distance">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="self_intersect">
            <builtintype type="LOGICAL"/>
         </explicit>
         <where expression="( basis_curve.dim = 2 )" label="wr1"/>
      </entity>
      <entity name="offset_curve_3d" supertypes="curve">
         <explicit name="basis_curve">
            <typename name="curve"/>
         </explicit>
         <explicit name="distance">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="self_intersect">
            <builtintype type="LOGICAL"/>
         </explicit>
         <explicit name="ref_direction">
            <typename name="direction"/>
         </explicit>
         <where expression="( ( basis_curve.dim = 3 ) AND ( ref_direction.dim = 3 ) )" label="wr1"/>
      </entity>
      <entity name="offset_surface" supertypes="surface">
         <explicit name="basis_surface">
            <typename name="surface"/>
         </explicit>
         <explicit name="distance">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="self_intersect">
            <builtintype type="LOGICAL"/>
         </explicit>
      </entity>
      <entity name="one_direction_repeat_factor" supertypes="geometric_representation_item">
         <explicit name="repeat_factor">
            <typename name="vector"/>
         </explicit>
      </entity>
      <entity name="open_closed_shell" supertypes="erroneous_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CLOSED_SHELL' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'EDGE_CURVE' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="open_edge_loop" supertypes="erroneous_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'ORIENTED_EDGE' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="open_path_profile" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name = &#10;               'orientation'  ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_SHAPE_REPRESENTATION' IN TYPEOF( pdr.&#10;               used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION' IN TYPEOF( &#10;               pdr.used_representation ) ) AND ( pdr.used_representation.name = 'profile limit' ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr6"/>
      </entity>
      <entity name="open_shell" supertypes="connected_face_set"/>
      <entity name="operational_requirement_relationship" supertypes="property_definition product_definition_relationship"/>
      <entity name="or_expression" supertypes="multiple_arity_boolean_expression"/>
      <entity name="ordinal_date" supertypes="date">
         <explicit name="day_component">
            <typename name="day_in_year_number"/>
         </explicit>
         <where expression="( ( ( NOT leap_year( SELF.year_component ) ) AND ( 1 &lt;= day_component ) AND ( day_component &lt;= 365 ) ) OR ( &#10;               leap_year( SELF.year_component ) AND ( 1 &lt;= day_component ) AND ( day_component &lt;= 366 ) ) )" label="wr1"/>
      </entity>
      <entity name="ordinate_dimension" supertypes="projection_directed_callout"/>
      <entity name="organization">
         <explicit name="id" optional="YES">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="organization_assignment">
         <explicit name="assigned_organization">
            <typename name="organization"/>
         </explicit>
         <explicit name="role">
            <typename name="organization_role"/>
         </explicit>
      </entity>
      <entity name="organization_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_organization">
            <typename name="organization"/>
         </explicit>
         <explicit name="related_organization">
            <typename name="organization"/>
         </explicit>
      </entity>
      <entity name="organization_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="organizational_address" supertypes="address">
         <explicit name="organizations">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="organization"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="organizational_project">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="responsible_organizations">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="organization"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ID_ATTRIBUTE.'&#10;               + 'IDENTIFIED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="organizational_project_assignment">
         <explicit name="assigned_organizational_project">
            <typename name="organizational_project"/>
         </explicit>
         <explicit name="role">
            <typename name="organizational_project_role"/>
         </explicit>
      </entity>
      <entity name="organizational_project_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_organizational_project">
            <typename name="organizational_project"/>
         </explicit>
         <explicit name="related_organizational_project">
            <typename name="organizational_project"/>
         </explicit>
      </entity>
      <entity name="organizational_project_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="oriented_closed_shell" supertypes="closed_shell">
         <explicit name="closed_shell_element">
            <typename name="closed_shell"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <derived expression="conditional_reverse( SELF.orientation, SELF.&#10;                                             closed_shell_element.cfs_faces )" name="cfs_faces">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="face"/>
            <redeclaration entity-ref="connected_face_set"/>
         </derived>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_CLOSED_SHELL' IN TYPEOF( SELF.&#10;               closed_shell_element ) ) )" label="wr1"/>
      </entity>
      <entity name="oriented_edge" supertypes="edge">
         <explicit name="edge_element">
            <typename name="edge"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <derived expression="boolean_choose( SELF.orientation, SELF.edge_element.edge_start, SELF.edge_element.&#10;                                edge_end )" name="edge_start">
            <typename name="vertex"/>
            <redeclaration entity-ref="edge"/>
         </derived>
         <derived expression="boolean_choose( SELF.orientation, SELF.edge_element.edge_end, SELF.edge_element.&#10;                                edge_start )" name="edge_end">
            <typename name="vertex"/>
            <redeclaration entity-ref="edge"/>
         </derived>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_EDGE' IN TYPEOF( SELF.&#10;               edge_element ) ) )" label="wr1"/>
      </entity>
      <entity name="oriented_face" supertypes="face">
         <explicit name="face_element">
            <typename name="face"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <derived expression="conditional_reverse( SELF.orientation, SELF.face_element.bounds )" name="bounds">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="face_bound"/>
            <redeclaration entity-ref="face"/>
         </derived>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_FACE' IN TYPEOF( SELF.&#10;               face_element ) ) )" label="wr1"/>
      </entity>
      <entity name="oriented_joint" supertypes="oriented_edge">
         <explicit name="edge_element">
            <typename name="kinematic_joint"/>
            <redeclaration entity-ref="oriented_edge"/>
         </explicit>
      </entity>
      <entity name="oriented_open_shell" supertypes="open_shell">
         <explicit name="open_shell_element">
            <typename name="open_shell"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <derived expression="conditional_reverse( SELF.orientation, SELF.open_shell_element.&#10;                                             cfs_faces )" name="cfs_faces">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="face"/>
            <redeclaration entity-ref="connected_face_set"/>
         </derived>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_OPEN_SHELL' IN TYPEOF( SELF.&#10;               open_shell_element ) ) )" label="wr1"/>
      </entity>
      <entity name="oriented_path" supertypes="path">
         <explicit name="path_element">
            <typename name="path"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <derived expression="conditional_reverse( SELF.orientation, SELF.path_element.&#10;                               edge_list )" name="edge_list">
            <aggregate lower="1" type="LIST" unique="YES" upper="?"/>
            <typename name="oriented_edge"/>
            <redeclaration entity-ref="path"/>
         </derived>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_PATH' IN TYPEOF( SELF.&#10;               path_element ) ) )" label="wr1"/>
      </entity>
      <entity name="oriented_surface" supertypes="surface">
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
      </entity>
      <entity name="outer_boundary_curve" supertypes="boundary_curve"/>
      <entity name="outer_round" supertypes="feature_definition">
         <where expression="( ( NOT ( SELF\characterized_object.description = 'outer diameter' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( pdr.used_representation.items ) = 3 ) ) ) ) = 1 ) ) ) = 1 ) )" label="wr1"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'outer diameter to shoulder' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( &#10;               SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' ) | ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( 2 &lt;= SIZEOF( pdr.used_representation.items ) ) AND ( SIZEOF( pdr.&#10;               used_representation.items ) &lt;= 3 ) ) ) ) = 1 ) ) ) = 1 ) )" label="wr2"/>
         <where expression="( SELF\characterized_object.description IN [ 'outer diameter', 'outer diameter to shoulder'] )" label="wr3"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'outer diameter' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'length' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'diameter' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'outer diameter to shoulder' ) ) OR ( SIZEOF( QUERY ( pds &lt;* &#10;               QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'v-shape boundary occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'profile usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VEE_PROFILE'  IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) AND ( sdr.relating_shape_aspect.description = 'v-shape' ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) =&#10;               0 ) )" label="wr6"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'outer diameter' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* &#10;               USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'reduced size occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'taper usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TAPER'  IN TYPEOF( sdr.relating_shape_aspect ) ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OUTER_ROUND' IN TYPEOF( sdr.&#10;               related_shape_aspect.of_shape.definition ) ) AND ( sdr.name = 'reduced size' ) ) ) ) = 1 ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) )" label="wr7"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'outer diameter to shoulder' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( &#10;               SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' ) | ( &#10;               NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'length' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr8"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'outer diameter to shoulder' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( &#10;               SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' ) | ( &#10;               NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'feature length' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr9"/>
      </entity>
      <entity name="outside_profile" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN&#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( pdr.used_representation.items ) = 1 ) ) ) ) = 1 ) ) ) = 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( sa_occ.&#10;                description IN [ 'boundary occurrence', 'non-planar boundary occurrence', 'partial circular boundary occurrence', &#10;                'closed circular boundary occurrence' , 'open rectangular boundary occurrence', &#10;                'closed rectangular boundary occurrence' ] ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( ( NOT ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( sa_occ.&#10;                description = 'boundary occurrence' ) ) ) = 1 ) ) ) ) = 0 ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( &#10;                SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;                QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_CLOSED_PROFILE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NGON_CLOSED_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_CLOSED_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLOSED_PATH_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SQUARE_U_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARTIAL_CIRCULAR_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUNDED_U_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINEAR_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VEE_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEE_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OPEN_PATH_PROFILE' ] * TYPEOF( sdr.&#10;                relating_shape_aspect ) ) = 1 ) AND ( sdr.relating_shape_aspect.description = 'outside boundary' ) ) ) ) = 1 ) ) ) &#10;                = 1 ) ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( ( NOT ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( sa_occ.&#10;                description IN [ 'complex boundary occurrence', 'partial circular boundary occurrence', &#10;                'closed circular boundary occurrence' , 'open rectangular boundary occurrence', &#10;                'closed rectangular boundary occurrence' ] ) ) ) = 1 ) ) ) ) = 0 ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* &#10;                USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( NOT ( SIZEOF( &#10;                QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile floor usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROFILE_FLOOR' IN TYPEOF( &#10;                sdr.relating_shape_aspect ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'OUTSIDE_PROFILE'  IN TYPEOF( sdr.related_shape_aspect.of_shape.definition ) ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = &#10;                0 ) )" label="wr4"/>
         <where expression="( ( NOT ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( sa_occ.&#10;                description IN [ 'outside boundary', 'complex boundary occurrence', 'partial circular boundary occurrence', &#10;                'closed circular boundary occurrence' , 'open rectangular boundary occurrence', &#10;                'closed rectangular boundary occurrence' ] ) ) ) = 1 ) ) ) ) = 0 ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* &#10;                USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;                QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'path feature component usage' ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP' IN TYPEOF( &#10;                sar ) ) ) ) | ( ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PATH_FEATURE_COMPONENT' ] * TYPEOF( sdr.relating_shape_aspect ) ) = 1 ) AND ( sdr.name = 'profile swept shape' ) &#10;                AND ( sdr.relating_shape_aspect.description = 'linear' ) ) ) ) = 1 ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( sa_occ.&#10;                description = 'complex boundary occurrence' ) ) ) = 1 ) ) ) ) = 0 ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* &#10;                USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;                QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_CLOSED_PROFILE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NGON_CLOSED_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_CLOSED_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLOSED_PATH_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SQUARE_U_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARTIAL_CIRCULAR_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUNDED_U_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VEE_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEE_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINEAR_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OPEN_PATH_PROFILE' ] * TYPEOF( sdr.&#10;                relating_shape_aspect ) ) = 1 ) ) ) = 1 ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr6"/>
         <where expression="( ( NOT ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( sa_occ.&#10;                description = 'partial circular boundary occurrence' ) ) ) = 1 ) ) ) ) = 0 ) ) OR ( SIZEOF( QUERY ( pds &lt;* &#10;                QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;                QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARTIAL_CIRCULAR_PROFILE' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr7"/>
         <where expression="( ( NOT ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( sa_occ.&#10;                description = 'closed circular boundary occurrence' ) ) ) = 1 ) ) ) ) = 0 ) ) OR ( SIZEOF( QUERY ( pds &lt;* &#10;                QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;                QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_CLOSED_PROFILE' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr8"/>
         <where expression="( ( NOT ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( sa_occ.&#10;                description = 'open rectangular boundary occurrence' ) ) ) = 1 ) ) ) ) = 0 ) ) OR ( SIZEOF( QUERY ( pds &lt;* &#10;                QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;                QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SQUARE_U_PROFILE' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr9"/>
         <where expression="( ( NOT ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( sa_occ.&#10;                description = 'closed rectangular boundary occurrence' ) ) ) = 1 ) ) ) ) = 0 ) ) OR ( SIZEOF( QUERY ( pds &lt;* &#10;                QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;                QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_CLOSED_PROFILE' IN TYPEOF( sdr&#10;                .relating_shape_aspect ) ) ) ) = 1 ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr10"/>
         <where expression="( ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( sa_occ.&#10;                description IN [ 'boundary occurrence', 'complex boundary occurrence', 'partial circular boundary occurrence', &#10;                'closed circular boundary occurrence' , 'open rectangular boundary occurrence', &#10;                'closed rectangular boundary occurrence' ] ) ) ) = 1 ) ) ) ) = 0 ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION_SHAPE_REPRESENTATION'  IN TYPEOF( &#10;                pdr.used_representation ) ) AND ( pdr.used_representation.name = 'removal direction' ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;                used_representation ) ) AND ( pdr.used_representation.name = 'maximum feature limit' ) ) ) ) &gt;= 0 )" label="wr12"/>
      </entity>
      <entity name="over_riding_styled_item" supertypes="styled_item">
         <explicit name="over_ridden_style">
            <typename name="styled_item"/>
         </explicit>
      </entity>
      <entity name="over_used_vertex" supertypes="inapt_topology">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'VERTEX_POINT' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity abstract.supertype="YES" name="overcomplex_geometry" super.expression="ONEOF (excessively_high_degree_curve, excessively_high_degree_surface, surface_with_excessive_patches_in_one_direction, curve_with_excessive_segments, high_degree_linear_curve, high_degree_planar_surface, high_degree_conic, high_degree_axi_symmetric_surface)" supertypes="inapt_geometry"/>
      <entity abstract.supertype="YES" name="overcomplex_topology_and_geometry_relationship" super.expression="ONEOF (unused_patches, edge_with_excessive_segments, face_surface_with_excessive_patches_in_one_direction)" supertypes="inapt_topology_and_geometry_relationship"/>
      <entity abstract.supertype="YES" name="overlapping_geometry" super.expression="ONEOF (partly_overlapping_curves, partly_overlapping_surfaces)" supertypes="inapt_geometry"/>
      <entity name="package" supertypes="physical_unit"/>
      <entity name="package_body" supertypes="shape_aspect"/>
      <entity name="package_body_bottom_surface" supertypes="package_body_surface"/>
      <entity name="package_body_edge_segment_surface" supertypes="shape_aspect shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="edge_segment_vertex"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <where expression="( SELF\shape_aspect_relationship.relating_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.related_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="package_body_edge_surface" supertypes="package_body_surface"/>
      <entity abstract.supertype="YES" name="package_body_surface" super.expression="ONEOF (package_body_top_surface, package_body_edge_surface, package_body_bottom_surface)" supertypes="shape_aspect"/>
      <entity name="package_body_top_surface" supertypes="package_body_surface"/>
      <entity name="package_footprint_relationship_definition" supertypes="part_template_definition"/>
      <entity name="package_product_concept_feature" supertypes="product_concept_feature">
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'CONDITIONAL_CONCEPT_FEATURE' ) IN &#10;               TYPEOF( SELF ) ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( cfr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'CONCEPT_FEATURE_RELATIONSHIP.'  + 'RELATING_PRODUCT_CONCEPT_FEATURE' ) | ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;               'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION'  ) IN TYPEOF( cfr ) ) AND ( SIZEOF( QUERY ( ipcf &lt;* USEDIN( cfr, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CONDITIONAL_CONCEPT_FEATURE.' + &#10;               'CONDITION'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'INCLUSION_PRODUCT_CONCEPT_FEATURE'  ) IN TYPEOF( ipcf ) ) ) ) = 1 ) ) ) ) &gt; 0 )" label="wr2"/>
      </entity>
      <entity name="package_terminal" super.expression="guided_wave_terminal ANDOR primary_reference_terminal" supertypes="placed_feature"/>
      <entity name="package_terminal_template_definition" supertypes="part_feature_template_definition"/>
      <entity name="packaged_component" supertypes="physical_component"/>
      <entity name="packaged_connector" supertypes="packaged_part"/>
      <entity name="packaged_connector_component" supertypes="interface_component packaged_component"/>
      <entity name="packaged_connector_terminal_relationship" supertypes="shape_aspect shape_aspect_relationship"/>
      <entity name="packaged_part" super.expression="ONEOF (minimally_defined_connector, packaged_connector)" supertypes="physical_unit"/>
      <entity name="packaged_part_terminal" supertypes="shape_aspect"/>
      <entity name="padstack_definition" super.expression="passage_padstack_definition" supertypes="multi_stratum_structured_template"/>
      <entity name="padstack_occurrence" supertypes="structured_layout_component"/>
      <entity name="padstack_occurrence_product_definition_relationship" supertypes="property_definition next_assembly_usage_occurrence_relationship">
         <where expression="( SELF\product_definition_relationship.related_product_definition :&lt;&gt;: SELF\product_definition_relationship.&#10;               relating_product_definition )" label="wr1"/>
      </entity>
      <entity name="pair_representation_relationship" supertypes="geometric_representation_item representation_relationship_with_transformation">
         <explicit name="rep_1">
            <typename name="kinematic_link_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="kinematic_link_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="transformation_operator">
            <typename name="kinematic_pair"/>
            <redeclaration entity-ref="representation_relationship_with_transformation"/>
         </explicit>
         <where expression="( transformation_operator\item_defined_transformation.transform_item_1 IN rep_1.items )" label="wr1"/>
         <where expression="( transformation_operator\item_defined_transformation.transform_item_2 IN rep_2.items )" label="wr2"/>
         <where expression="( rep_1\kinematic_link_representation.represented_link = transformation_operator\kinematic_pair.joint.edge_start )" label="wr3"/>
         <where expression="( rep_2\kinematic_link_representation.represented_link = transformation_operator\kinematic_pair.joint.edge_end )" label="wr4"/>
      </entity>
      <entity abstract.supertype="YES" name="pair_value" super.expression="ONEOF (sliding_surface_pair_value, rolling_surface_pair_value, revolute_pair_value, prismatic_pair_value, screw_pair_value, cylindrical_pair_value, spherical_pair_value, sliding_curve_pair_value, rolling_curve_pair_value, gear_pair_value, rack_and_pinion_pair_value, universal_pair_value, planar_pair_value, unconstrained_pair_value, point_on_surface_pair_value, point_on_planar_curve_pair_value, low_order_kinematic_pair_value)" supertypes="geometric_representation_item">
         <explicit name="applies_to_pair">
            <typename name="kinematic_pair"/>
         </explicit>
      </entity>
      <entity name="parabola" supertypes="conic">
         <explicit name="focal_dist">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( focal_dist &lt;&gt; 0 )" label="wr1"/>
      </entity>
      <entity name="parallel_assembly_constraint" supertypes="binary_assembly_constraint parallel_geometric_constraint"/>
      <entity name="parallel_assembly_constraint_with_dimension" supertypes="parallel_assembly_constraint pgc_with_dimension"/>
      <entity name="parallel_composed_function" supertypes="maths_function multiple_arity_generic_expression">
         <explicit name="source_of_domain">
            <typename name="maths_space_or_function"/>
         </explicit>
         <explicit name="prep_functions">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="maths_function"/>
         </explicit>
         <explicit name="final_function">
            <typename name="maths_function_select"/>
         </explicit>
         <derived expression="convert_to_operands_prcmfn( &#10;                                                 source_of_domain, prep_functions, final_function )" name="operands">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="generic_expression"/>
            <redeclaration entity-ref="multiple_arity_generic_expression"/>
         </derived>
         <where expression="no_cyclic_domain_reference( source_of_domain, [SELF] )" label="wr1"/>
         <where expression="expression_is_constant( domain_from( source_of_domain ) )" label="wr2"/>
         <where expression="parallel_composed_function_domain_check( domain_from( source_of_domain ), prep_functions )" label="wr3"/>
         <where expression="parallel_composed_function_composability_check( prep_functions, final_function )" label="wr4"/>
      </entity>
      <entity name="parallel_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="linear_geometry_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="1"/>
            <typename name="linear_geometry_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
      </entity>
      <entity name="parallel_offset" supertypes="derived_shape_aspect">
         <explicit name="offset">
            <typename name="measure_with_unit"/>
         </explicit>
         <where expression="( SIZEOF( SELF\derived_shape_aspect.deriving_relationships ) = 1 )" label="wr1"/>
      </entity>
      <entity name="parallel_offset_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="curve_or_surface_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="1"/>
            <typename name="curve_or_surface_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="offset_type">
            <typename name="parallel_offset_type"/>
         </explicit>
         <where expression="( NOT ( ( ( offset_type = curve_2d_offset ) OR ( offset_type = curve_3d_offset ) ) AND ( SIZEOF( QUERY ( q &lt;* ( SELF\&#10;               explicit_constraint.constrained_elements + SELF\explicit_constraint.reference_elements ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE'  IN TYPEOF( q ) ) ) ) &gt; 0 ) ) )" label="wr1"/>
         <where expression="( NOT ( ( offset_type = surface_offset ) AND ( SIZEOF( QUERY ( q &lt;* ( SELF\explicit_constraint.constrained_elements + &#10;               SELF\explicit_constraint.reference_elements ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE'  IN TYPEOF( q ) ) ) ) &gt; 0 ) ) )" label="wr2"/>
      </entity>
      <entity name="parallelism_tolerance" supertypes="geometric_tolerance_with_datum_reference"/>
      <entity name="parameter_assignment" supertypes="property_definition_representation representation">
         <explicit name="definition">
            <typename name="parameter_assignment_select"/>
            <redeclaration entity-ref="property_definition_representation"/>
         </explicit>
      </entity>
      <entity name="parameter_assignment_override" supertypes="representation representation_relationship">
         <explicit name="rep_1">
            <typename name="parameter_assignment"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="parameter_assignment"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="rep_1"/>
            <unique.attribute attribute="rep_2"/>
         </unique>
         <where expression="( SELF\representation_relationship.rep_1 &lt;&gt; SELF\representation_relationship.rep_2 )" label="wr1"/>
      </entity>
      <entity name="parametric_representation_context" supertypes="representation_context"/>
      <entity abstract.supertype="YES" name="parametric_template" super.expression="ONEOF (fill_area_template, teardrop_template, trace_template)" supertypes="part_template_definition"/>
      <entity name="part_connected_terminals_definition" supertypes="shape_aspect">
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect.name"/>
         </unique>
      </entity>
      <entity name="part_connected_terminals_definition_domain" supertypes="shape_aspect"/>
      <entity name="part_connected_terminals_element" supertypes="shape_aspect shape_aspect_relationship"/>
      <entity name="part_connected_terminals_layout_topology_requirement_assignment" supertypes="requirement_assignment"/>
      <entity name="part_connected_terminals_structure_definition" supertypes="part_connected_terminals_definition"/>
      <entity name="part_feature_template_definition" supertypes="shape_feature_definition group">
         <where expression="( SELF\group.name = SELF\characterized_object.name )" label="wr1"/>
         <where expression="( SELF\group.description = SELF\characterized_object.description )" label="wr2"/>
      </entity>
      <entity name="part_interface_access_feature" supertypes="shape_aspect"/>
      <entity name="part_laminate_table" super.expression="ONEOF (composite_assembly_table, ply_laminate_table)" supertypes="laminate_table"/>
      <entity name="part_mating_feature" supertypes="shape_aspect"/>
      <entity name="part_mounting_feature" supertypes="shape_aspect"/>
      <entity name="part_string_template" supertypes="part_template_definition"/>
      <entity name="part_template_definition" super.expression="ONEOF (printed_part_template, non_conductive_cross_section_template) ANDOR ONEOF (geometric_template, parametric_template, part_string_template, part_text_template, single_stratum_template, stratum_stack_model) ANDOR ONEOF ((ONEOF (printed_part_template, special_symbol_template) ANDOR geometric_template), non_conductive_cross_section_template, part_string_template, parametric_template, part_text_template, stratum_stack_model, stratum_sub_stack)" supertypes="product_definition product_definition_shape">
         <derived expression="SELF" name="definition">
            <typename name="part_template_definition"/>
            <redeclaration entity-ref="property_definition"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.'&#10;               + 'NAMED_ITEM'  ) ) = 0 )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\property_definition.description ) )" label="wr2"/>
      </entity>
      <entity name="part_template_keepout_shape_allocation_to_stratum_stack" supertypes="characterized_object property_definition">
         <derived expression="SELF" name="definition">
            <typename name="part_template_keepout_shape_allocation_to_stratum_stack"/>
            <redeclaration entity-ref="property_definition"/>
         </derived>
      </entity>
      <entity name="part_terminal_external_reference" supertypes="shape_aspect"/>
      <entity name="part_text_template" supertypes="part_template_definition"/>
      <entity name="part_tooling_feature" super.expression="ONEOF (fiducial_part_feature, tool_registration_mark) ANDOR test_point_part_feature" supertypes="shape_aspect">
         <where expression="( SELF\shape_aspect.product_definitional = TRUE )" label="wr1"/>
      </entity>
      <entity name="partial_circular_profile" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) &gt;= 3 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name = &#10;               'orientation'  ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'radius' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;               = 2 ) AND ( it.name = 'sweep angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION' IN TYPEOF( &#10;               pdr.used_representation ) ) AND ( pdr.used_representation.name = 'profile limit' ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr7"/>
      </entity>
      <entity name="partial_derivative_expression" supertypes="unary_generic_expression">
         <explicit name="d_variables">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="maths_variable"/>
         </explicit>
         <explicit name="extension">
            <typename name="extension_options"/>
         </explicit>
         <derived expression="SELF\unary_generic_expression.operand" name="derivand">
            <typename name="generic_expression"/>
         </derived>
         <where expression="has_values_space( derivand )" label="wr1"/>
         <where expression="space_is_continuum( values_space_of( derivand ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( vbl &lt;* d_variables | ( ( NOT subspace_of( values_space_of( vbl ), the_reals ) ) AND ( NOT &#10;               subspace_of( values_space_of( vbl ), the_complex_numbers ) ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="partial_derivative_function" supertypes="maths_function unary_generic_expression">
         <explicit name="operand">
            <typename name="maths_function"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
         <explicit name="d_variables">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="input_selector"/>
         </explicit>
         <explicit name="extension">
            <typename name="extension_options"/>
         </explicit>
         <derived expression="SELF\unary_generic_expression.operand" name="derivand">
            <typename name="maths_function"/>
         </derived>
         <where expression="space_is_continuum( derivand.range )" label="wr1"/>
         <where expression="partial_derivative_check( derivand.domain, d_variables )" label="wr2"/>
      </entity>
      <entity name="partial_document_with_structured_text_representation_assignment" supertypes="applied_document_usage_constraint_assignment characterized_object"/>
      <entity name="partially_plated_cutout" supertypes="cutout"/>
      <entity name="partially_plated_interconnect_module_edge" supertypes="interconnect_module_edge"/>
      <entity name="partly_overlapping_curves" supertypes="overlapping_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="interference_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'TRIMMED_CURVE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TRIMMED_CURVE'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="partly_overlapping_edges" supertypes="topology_related_to_overlapping_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="interference_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'EDGE_CURVE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_CURVE'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SUBEDGE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SUBEDGE'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="partly_overlapping_faces" supertypes="topology_related_to_overlapping_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="interference_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACE_SURFACE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SURFACE'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SUBFACE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SUBFACE'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="partly_overlapping_solids" supertypes="inapt_manifold_solid_brep">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="interference_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MANIFOLD_SOLID_BREP' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SUBFACE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SUBFACE'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="partly_overlapping_surfaces" supertypes="overlapping_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="interference_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CURVE_BOUNDED_SURFACE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CURVE_BOUNDED_SURFACE' ] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="passage_deposition_material_identification" supertypes="material_designation">
         <explicit name="definitions">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="passage_technology"/>
            <redeclaration entity-ref="material_designation"/>
         </explicit>
      </entity>
      <entity name="passage_filling_material_identification" supertypes="material_designation">
         <explicit name="definitions">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="passage_technology"/>
            <redeclaration entity-ref="material_designation"/>
         </explicit>
      </entity>
      <entity name="passage_padstack_definition" supertypes="padstack_definition"/>
      <entity name="passage_technology" supertypes="characterized_object product_definition_shape">
         <derived expression="SELF" name="definition">
            <typename name="characterized_definition"/>
            <redeclaration entity-ref="property_definition"/>
         </derived>
         <unique label="ur1">
            <unique.attribute attribute="SELF\characterized_object.name"/>
         </unique>
      </entity>
      <entity name="passage_technology_allocation_to_stack_model" supertypes="stratum_sub_stack"/>
      <entity name="passage_terminal_based_fabrication_joint_link" supertypes="shape_aspect shape_aspect_relationship"/>
      <entity name="path" super.expression="ONEOF (edge_loop, oriented_path)" supertypes="topological_representation_item">
         <explicit name="edge_list">
            <aggregate lower="1" type="LIST" unique="YES" upper="?"/>
            <typename name="oriented_edge"/>
         </explicit>
         <where expression="path_head_to_tail( SELF )" label="wr1"/>
      </entity>
      <entity name="path_area_with_parameters" supertypes="complex_area mapped_item">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE' IN TYPEOF( SELF\mapped_item.&#10;               mapping_target ) )" label="wr1"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE_PARAMETERS_REPRESENTATION' IN &#10;               TYPEOF( SELF\mapped_item.mapping_source\representation_map.mapped_representation ) )" label="wr2"/>
         <where expression="( SELF\mapped_item.mapping_source\representation_map.mapping_origin\representation_item.name = 'curve width' )" label="wr3"/>
      </entity>
      <entity name="path_feature_component" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;                of_shape.definition ) )" label="wr1"/>
         <where expression="( SELF.description IN [ 'partial circular', 'complete circular', 'linear', 'complex'] )" label="wr2"/>
         <where expression="( ( NOT ( SELF.description = 'complex' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name =&#10;                'orientation' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( ( NOT ( SELF.description = 'partial circular' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 3 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( SELF.description = 'partial circular' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'radius' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr6"/>
         <where expression="( ( NOT ( SELF.description = 'partial circular' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'sweep angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr7"/>
         <where expression="( ( NOT ( SELF.description = 'complete circular' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 2 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) )" label="wr8"/>
         <where expression="( ( NOT ( SELF.description = 'complete circular' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'radius' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr9"/>
         <where expression="( ( NOT ( SELF.description = 'linear' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 2 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) )" label="wr10"/>
         <where expression="( ( NOT ( SELF.description = 'linear' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'distance' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr11"/>
         <where expression="( ( NOT ( SELF.description = 'linear' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION_SHAPE_REPRESENTATION'  IN TYPEOF( &#10;                pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr12"/>
         <where expression="( ( NOT ( SELF.description = 'complex' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;                used_representation ) ) AND ( pdr.used_representation.name = 'sweep path' ) AND ( SIZEOF( QUERY ( srwp_i &lt;* pdr.&#10;                used_representation.items | ( srwp_i.name = 'profile shape' ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr13"/>
      </entity>
      <entity abstract.supertype="YES" name="path_node" super.expression="ONEOF (point_to_point_path, circular_path, linear_path, curve_based_path)" supertypes="kinematic_path_segment">
         <explicit name="placement_end">
            <typename name="placement"/>
         </explicit>
      </entity>
      <entity name="path_parameter_representation" supertypes="definitional_representation">
         <explicit name="context_of_items">
            <typename name="path_parameter_representation_context"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="bounded_curve"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SELF\representation.context_of_items\geometric_representation_context.coordinate_space_dimension = 2 )" label="wr1"/>
      </entity>
      <entity name="path_parameter_representation_context" supertypes="geometric_representation_context parametric_representation_context"/>
      <entity name="path_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( SELF.items ) &gt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'BOUNDED_CURVE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_CURVE', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH' ] * TYPEOF( i ) ) = 1 ) ) ) &gt;= 1 )" label="wr2"/>
      </entity>
      <entity name="pattern_offset_membership" supertypes="feature_component_relationship">
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF.relating_shape_aspect, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'  + &#10;                'RELATING_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar :&lt;&gt;: SELF ) ) ) | ( SIZEOF( QUERY ( pdr &lt;* &#10;                QUERY ( pd &lt;* USEDIN( fcr.related_shape_aspect.of_shape, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_PATTERN', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN' ] * TYPEOF( pdr.&#10;                definition ) ) = 1 ) ) ) = 0 ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF.related_shape_aspect, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar :&lt;&gt;: SELF ) ) ) | ( ( fcr.description = &#10;                'modified pattern'  ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MODIFIED_PATTERN' &#10;                IN TYPEOF( fcr.relating_shape_aspect ) ) ) ) ) &gt;= 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF.related_shape_aspect, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar :&lt;&gt;: SELF ) ) ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MODIFIED_PATTERN'  IN TYPEOF( fcr.&#10;                relating_shape_aspect ) ) AND ( NOT ( SIZEOF( QUERY ( modfcr &lt;* QUERY ( modsar &lt;* USEDIN( fcr.&#10;                relating_shape_aspect, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.RELATING_SHAPE_ASPECT'  ) | ( ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_PATTERN' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN' ] * TYPEOF( modsar.&#10;                related_shape_aspect.of_shape.definition ) ) = 1 ) AND ( modsar :&lt;&gt;: fcr ) ) ) | ( NOT ( modfcr.&#10;                related_shape_aspect.of_shape.definition :=: SELF.relating_shape_aspect.of_shape.definition ) ) ) ) = 0 ) ) ) ) ) &#10;                = 0 )" label="wr3"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN' IN TYPEOF( SELF.&#10;                relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) ) = 2 ) ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_PATTERN' IN TYPEOF( SELF.&#10;                relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) ) = 1 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_PATTERN' IN TYPEOF( SELF.&#10;                relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( NOT ( SIZEOF( pdr.used_representation.items ) = 2 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) )" label="wr6"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_PATTERN' IN TYPEOF( SELF.&#10;                relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' IN TYPEOF( it\&#10;                measure_with_unit.value_component ) ) AND ( it.name = 'index number' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr7"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_PATTERN' IN TYPEOF( SELF.&#10;                relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT'  IN TYPEOF( it ) ) &#10;                AND ( it.name = 'offset' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr8"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN' IN TYPEOF( SELF.&#10;                relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 3 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) )" label="wr9"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN' IN TYPEOF( SELF.&#10;                relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' IN TYPEOF( it\&#10;                measure_with_unit.value_component ) ) AND ( it.name = 'row index' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr10"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN' IN TYPEOF( SELF.&#10;                relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' IN TYPEOF( it\&#10;                measure_with_unit.value_component ) ) AND ( it.name = 'column index' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr11"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN' IN TYPEOF( SELF.&#10;                relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT'  IN TYPEOF( it ) ) &#10;                AND ( it.name = 'offset distance' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr12"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN' IN TYPEOF( SELF.&#10;                relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION_SHAPE_REPRESENTATION'  IN TYPEOF( &#10;                pdr.used_representation ) ) AND ( pdr.used_representation.name = 'offset direction' ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr13"/>
      </entity>
      <entity name="pattern_omit_membership" supertypes="feature_component_relationship">
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF.relating_shape_aspect, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'  + &#10;               'RELATING_SHAPE_ASPECT'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar :&lt;&gt;: SELF ) ) ) | ( SIZEOF( QUERY ( pdr &lt;* &#10;               QUERY ( pd &lt;* USEDIN( fcr.related_shape_aspect.of_shape, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_PATTERN', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN' ] * TYPEOF( pdr.&#10;               definition ) ) = 1 ) ) ) = 0 ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF.related_shape_aspect, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP' IN &#10;               TYPEOF( sar ) ) AND ( sar :&lt;&gt;: SELF ) ) ) | ( ( fcr.description = 'modified pattern' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MODIFIED_PATTERN'  IN TYPEOF( fcr.&#10;               relating_shape_aspect ) ) ) ) ) &gt;= 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF.related_shape_aspect, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP' IN &#10;               TYPEOF( sar ) ) AND ( sar :&lt;&gt;: SELF ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MODIFIED_PATTERN'  IN TYPEOF( fcr.relating_shape_aspect ) ) AND ( NOT ( SIZEOF( QUERY ( modfcr &lt;* &#10;               QUERY ( modsar &lt;* USEDIN( fcr.relating_shape_aspect, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATING_SHAPE_ASPECT'  ) | ( ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CIRCULAR_PATTERN' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN'] *&#10;               TYPEOF( modsar.related_shape_aspect.of_shape.definition ) ) = 1 ) AND ( modsar :&lt;&gt;: fcr ) ) ) | ( NOT ( modfcr.&#10;               related_shape_aspect.of_shape.definition :=: SELF.relating_shape_aspect.of_shape.definition ) ) ) ) = 0 ) ) ) ) ) =&#10;               0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) ) = 1 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_PATTERN' IN TYPEOF( SELF.&#10;               relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( NOT ( SIZEOF( pdr.used_representation.items ) = 1 ) ) ) ) &#10;               = 0 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_PATTERN' IN TYPEOF( SELF.&#10;               relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' IN TYPEOF( it\&#10;               measure_with_unit.value_component ) ) AND ( it.name = 'index number' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr6"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN' IN TYPEOF( SELF.&#10;               relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( NOT ( SIZEOF( pdr.used_representation.items ) = 2 ) ) ) ) &#10;               = 0 ) ) ) ) = 0 ) )" label="wr7"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN' IN TYPEOF( SELF.&#10;               relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' IN TYPEOF( it\&#10;               measure_with_unit.value_component ) ) AND ( it.name = 'row index' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr8"/>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_PATTERN' IN TYPEOF( SELF.&#10;               relating_shape_aspect.of_shape.definition ) ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF.related_shape_aspect, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' IN TYPEOF( it\&#10;               measure_with_unit.value_component ) ) AND ( it.name = 'column index' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr9"/>
      </entity>
      <entity name="pcurve" supertypes="curve">
         <explicit name="basis_surface">
            <typename name="surface"/>
         </explicit>
         <explicit name="reference_to_curve">
            <typename name="definitional_representation"/>
         </explicit>
         <where expression="( SIZEOF( reference_to_curve\representation.items ) = 1 )" label="wr1"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE' IN TYPEOF( reference_to_curve\&#10;               representation.items[1] ) )" label="wr2"/>
         <where expression="( reference_to_curve\representation.items[1]\geometric_representation_item.dim = 2 )" label="wr3"/>
      </entity>
      <entity name="pdgc_with_dimension" supertypes="point_distance_geometric_constraint">
         <explicit name="distance_value">
            <typename name="non_negative_length_measure"/>
         </explicit>
      </entity>
      <entity name="percentage_laminate_table" supertypes="zone_structural_makeup"/>
      <entity name="perpendicular_assembly_constraint" supertypes="binary_assembly_constraint perpendicular_geometric_constraint"/>
      <entity name="perpendicular_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="linear_geometry_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="2"/>
            <typename name="linear_geometry_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <where expression="( NOT ( ( SIZEOF( SELF\explicit_constraint.reference_elements ) = 2 ) AND ( NOT ( ( SIZEOF( QUERY ( q &lt;* ( SELF\&#10;               explicit_constraint.constrained_elements + SELF\explicit_constraint.reference_elements ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE'  IN TYPEOF( q ) ) ) ) = SIZEOF( SELF\&#10;               explicit_constraint.reference_elements + SELF\explicit_constraint.constrained_elements ) ) XOR ( SIZEOF( &#10;               QUERY ( q &lt;* ( SELF\explicit_constraint.constrained_elements + SELF\explicit_constraint.reference_elements ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE'  IN TYPEOF( q ) ) ) ) = SIZEOF( SELF\&#10;               explicit_constraint.reference_elements + SELF\explicit_constraint.constrained_elements ) ) ) ) ) )" label="wr1"/>
         <where expression="( ( SIZEOF( SELF\explicit_constraint.reference_elements ) &gt; 0 ) OR ( SIZEOF( SELF\explicit_constraint.&#10;               constrained_elements ) IN [2, 3] ) )" label="wr2"/>
         <where expression="( ( NOT ( ( SIZEOF( SELF\explicit_constraint.reference_elements ) = 0 ) AND ( SIZEOF( SELF\explicit_constraint.&#10;               constrained_elements ) = 3 ) ) ) AND ( NOT ( ( SIZEOF( QUERY ( q &lt;* SELF\explicit_constraint.constrained_elements&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE' IN TYPEOF( q ) ) ) ) = 3 ) XOR ( &#10;               SIZEOF( QUERY ( q &lt;* SELF\explicit_constraint.constrained_elements | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE'  IN TYPEOF( q ) ) ) ) = 3 ) ) ) )" label="wr3"/>
      </entity>
      <entity name="perpendicular_to" supertypes="derived_shape_aspect">
         <where expression="( SIZEOF( SELF\derived_shape_aspect.deriving_relationships ) = 1 )" label="wr1"/>
      </entity>
      <entity name="perpendicularity_tolerance" supertypes="geometric_tolerance_with_datum_reference"/>
      <entity name="person">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="last_name" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="first_name" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="middle_names" optional="YES">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="label"/>
         </explicit>
         <explicit name="prefix_titles" optional="YES">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="label"/>
         </explicit>
         <explicit name="suffix_titles" optional="YES">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="label"/>
         </explicit>
         <where expression="( EXISTS( last_name ) OR EXISTS( first_name ) )" label="wr1"/>
      </entity>
      <entity name="person_and_organization">
         <explicit name="the_person">
            <typename name="person"/>
         </explicit>
         <explicit name="the_organization">
            <typename name="organization"/>
         </explicit>
         <derived expression="get_name_value( SELF )" name="name">
            <typename name="label"/>
         </derived>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.'&#10;               + 'NAMED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="person_and_organization_address" supertypes="organizational_address personal_address">
         <explicit name="organizations">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="organization"/>
            <redeclaration entity-ref="organizational_address"/>
         </explicit>
         <explicit name="people">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="person"/>
            <redeclaration entity-ref="personal_address"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( pao &lt;* USEDIN( SELF\personal_address.people[1], &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PERSON_AND_ORGANIZATION.THE_PERSON'  ) | ( pao&#10;               .the_organization :=: SELF\organizational_address.organizations[1] ) ) ) = 1 )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="person_and_organization_assignment">
         <explicit name="assigned_person_and_organization">
            <typename name="person_and_organization"/>
         </explicit>
         <explicit name="role">
            <typename name="person_and_organization_role"/>
         </explicit>
      </entity>
      <entity name="person_and_organization_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="personal_address" supertypes="address">
         <explicit name="people">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="person"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="pgc_with_dimension" supertypes="parallel_geometric_constraint">
         <explicit name="distance_value">
            <typename name="non_negative_length_measure"/>
         </explicit>
         <explicit name="negative_direction">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( ( SIZEOF( SELF\explicit_constraint.reference_elements ) = 1 ) OR ( SIZEOF( SELF\explicit_constraint.&#10;               constrained_elements ) = 2 ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* ( SELF\explicit_constraint.reference_elements + SELF\explicit_constraint.constrained_elements )&#10;               | ( SIZEOF( TYPEOF( q ) * [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VECTOR' ] ) &gt; 0 ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="physical_breakdown_context" supertypes="breakdown_context"/>
      <entity name="physical_component" super.expression="ONEOF (assembly_module_component, assembly_module_macro_component, bare_die_component, cable_component, interconnect_module_component, interconnect_module_macro_component, packaged_component, routed_interconnect_component, routed_physical_component, sequential_laminate_stackup_component) ANDOR ONEOF (packaged_component, routed_physical_component)" supertypes="assembly_component"/>
      <entity name="physical_component_feature" super.expression="ONEOF (physical_component_terminal, physical_component_interface_terminal)" supertypes="component_feature"/>
      <entity name="physical_component_interface_terminal" supertypes="physical_component_feature"/>
      <entity name="physical_component_terminal" super.expression="ONEOF (assembly_module_macro_component_join_terminal, interconnect_module_macro_component_join_terminal)" supertypes="component_terminal physical_component_feature"/>
      <entity name="physical_connectivity_definition" supertypes="shape_aspect">
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect.name"/>
            <unique.attribute attribute="SELF\shape_aspect.of_shape"/>
         </unique>
      </entity>
      <entity name="physical_connectivity_definition_domain" supertypes="property_definition"/>
      <entity name="physical_connectivity_element" supertypes="shape_aspect_relationship shape_aspect"/>
      <entity name="physical_connectivity_interrupting_cutout" supertypes="cutout"/>
      <entity name="physical_connectivity_layout_topology_link" supertypes="group_relationship"/>
      <entity name="physical_connectivity_layout_topology_node" supertypes="group"/>
      <entity name="physical_connectivity_layout_topology_requirement" supertypes="predefined_requirement_view_definition group"/>
      <entity name="physical_connectivity_layout_topology_requirement_assignment" supertypes="requirement_assignment"/>
      <entity name="physical_element_usage" supertypes="breakdown_element_usage"/>
      <entity name="physical_network" supertypes="shape_aspect"/>
      <entity abstract.supertype="YES" name="physical_network_group" super.expression="ONEOF (pre_defined_physical_network_group, externally_defined_physical_network_group)" supertypes="group"/>
      <entity abstract.supertype="YES" name="physical_network_group_element_relationship" super.expression="ONEOF (pre_defined_physical_network_group_element_relationship, externally_defined_physical_network_group_element_relationship)" supertypes="group_relationship"/>
      <entity name="physical_network_supporting_inter_stratum_feature" supertypes="plated_inter_stratum_feature"/>
      <entity name="physical_node_branch_requirement_to_implementing_component_allocation" supertypes="shape_aspect_relationship shape_aspect">
         <explicit name="related_shape_aspect">
            <typename name="physical_connectivity_element"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="of_shape">
            <typename name="assembly_component"/>
            <redeclaration entity-ref="shape_aspect"/>
         </explicit>
         <explicit name="relating_shape_aspect">
            <typename name="part_connected_terminals_element"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <derived expression="SELF\shape_aspect.of_shape" name="implementation_component">
            <typename name="assembly_component"/>
         </derived>
         <derived expression="SELF\shape_aspect_relationship.&#10;                                            relating_shape_aspect" name="part_element">
            <typename name="part_connected_terminals_element"/>
         </derived>
         <derived expression="SELF\shape_aspect_relationship.related_shape_aspect" name="physical_node_branch_requirement">
            <typename name="physical_connectivity_element"/>
         </derived>
      </entity>
      <entity name="physical_node_requirement_to_implementing_component_allocation" supertypes="shape_aspect_relationship shape_aspect">
         <explicit name="relating_shape_aspect">
            <typename name="physical_connectivity_definition"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <where expression="acyclic_shape_aspect_relationship( SELF, [SELF\shape_aspect_relationship.related_shape_aspect], &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;               'PHYSICAL_NODE_REQUIREMENT_TO_IMPLEMENTING_COMPONENT_ALLOCATION'  )" label="wr1"/>
      </entity>
      <entity name="physical_shield" supertypes="physical_component"/>
      <entity name="physical_unit" super.expression="ONEOF (bare_die, package, packaged_part, assembly_module_design_view, interconnect_module_design_view) ANDOR ONEOF (package, bare_die, cable_usage_view, packaged_part)" supertypes="product_definition product_definition_shape">
         <derived expression="SELF" name="definition">
            <typename name="physical_unit"/>
            <redeclaration entity-ref="property_definition"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.'&#10;               + 'NAMED_ITEM'  ) ) = 0 )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\property_definition.description ) )" label="wr2"/>
      </entity>
      <entity name="physical_unit_interconnect_definition" supertypes="product_definition"/>
      <entity name="physical_unit_keepout_shape_allocation_to_stratum_stack" supertypes="representation representation_relationship"/>
      <entity name="physical_unit_keepout_shape_allocation_to_stratum_technology" supertypes="representation"/>
      <entity name="physical_unit_network_definition" supertypes="physical_unit"/>
      <entity name="picture_representation" supertypes="presentation_view">
         <explicit name="items">
            <aggregate lower="2" type="SET" upper="?"/>
            <typename name="picture_representation_item_select"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <inverse attribute="unit" entity="presentation_size" name="size"/>
         <where expression="( SIZEOF( QUERY ( item &lt;* items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM' &#10;               IN TYPEOF( item ) ) ) ) = 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( se &lt;* QUERY ( item &lt;* SELF.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM'  IN TYPEOF( item ) ) ) | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PICTURE_REPRESENTATION_ITEM'  IN TYPEOF( se\&#10;               styled_item.item ) ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity abstract.supertype="YES" name="picture_representation_item" super.expression="ONEOF (externally_defined_picture_representation_item, predefined_picture_representation_item)" supertypes="bytes_representation_item"/>
      <entity name="placed_datum_target_feature" supertypes="datum_target">
         <derived expression="get_shape_aspect_property_definition_representations( SELF )" name="representation_associations">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="property_definition_representation"/>
         </derived>
         <where expression="( SELF.description IN [ 'point', 'line', 'rectangle', 'circle', 'circular curve'] )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* representation_associations | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 )" label="wr2"/>
         <where expression="valid_datum_target_parameters( SELF )" label="wr3"/>
      </entity>
      <entity name="placed_feature" supertypes="shape_aspect"/>
      <entity name="placement" super.expression="ONEOF (axis1_placement, axis2_placement_2d, axis2_placement_3d)" supertypes="geometric_representation_item">
         <explicit name="location">
            <typename name="cartesian_point"/>
         </explicit>
      </entity>
      <entity name="planar_box" supertypes="planar_extent">
         <explicit name="placement">
            <typename name="axis2_placement"/>
         </explicit>
      </entity>
      <entity name="planar_closed_path_shape_representation_with_parameters" supertypes="planar_path_shape_representation_with_parameters"/>
      <entity name="planar_curve_pair" super.expression="ONEOF (sliding_curve_pair, rolling_curve_pair) ANDOR planar_curve_pair_range" supertypes="high_order_kinematic_pair">
         <explicit name="curve_1">
            <typename name="curve"/>
         </explicit>
         <explicit name="curve_2">
            <typename name="curve"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( r &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( curve_1 IN r.items ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( r &lt;* SELF\kinematic_pair.associated_link_representations_2 | ( NOT ( curve_2 IN r.items ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( lr &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) &#10;               = 0 )" label="wr3"/>
      </entity>
      <entity name="planar_curve_pair_range" supertypes="planar_curve_pair">
         <explicit name="range_on_curve_1">
            <typename name="trimmed_curve"/>
         </explicit>
         <explicit name="range_on_curve_2">
            <typename name="trimmed_curve"/>
         </explicit>
         <where expression="( SELF\planar_curve_pair.curve_1 :=: range_on_curve_1.basis_curve )" label="wr1"/>
         <where expression="( SELF\planar_curve_pair.curve_2 :=: range_on_curve_2.basis_curve )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( r &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( range_on_curve_1 IN r.items ) ) ) ) &#10;               = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( r &lt;* SELF\kinematic_pair.associated_link_representations_2 | ( NOT ( range_on_curve_2 IN r.items ) ) ) ) &#10;               = 0 )" label="wr4"/>
      </entity>
      <entity name="planar_extent" supertypes="geometric_representation_item">
         <explicit name="size_in_x">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="size_in_y">
            <typename name="length_measure"/>
         </explicit>
      </entity>
      <entity name="planar_pair" supertypes="low_order_kinematic_pair">
         <derived expression="TRUE" name="t_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="t_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="r_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
      </entity>
      <entity name="planar_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="planar_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_rotation">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="actual_translation_x">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="actual_translation_y">
            <typename name="length_measure"/>
         </explicit>
      </entity>
      <entity name="planar_pair_with_range" supertypes="planar_pair">
         <explicit name="lower_limit_actual_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="lower_limit_actual_translation_x" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_translation_x" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="lower_limit_actual_translation_y" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_translation_y" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( NOT EXISTS( lower_limit_actual_rotation ) ) OR ( NOT EXISTS( upper_limit_actual_rotation ) ) ) XOR ( &#10;               lower_limit_actual_rotation &lt; upper_limit_actual_rotation ) )" label="wr1"/>
         <where expression="( ( ( NOT EXISTS( lower_limit_actual_translation_x ) ) OR ( NOT EXISTS( upper_limit_actual_translation_x ) ) ) XOR ( &#10;               lower_limit_actual_translation_x &lt; upper_limit_actual_translation_x ) )" label="wr2"/>
         <where expression="( ( ( NOT EXISTS( lower_limit_actual_translation_y ) ) OR ( NOT EXISTS( upper_limit_actual_translation_y ) ) ) XOR ( &#10;               lower_limit_actual_translation_y &lt; upper_limit_actual_translation_y ) )" label="wr3"/>
      </entity>
      <entity name="planar_path_shape_representation_with_parameters" supertypes="single_area_csg_2d_shape_representation"/>
      <entity name="planar_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( SELF.items ) = 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE' IN &#10;               TYPEOF( it ) ) ) ) = 1 )" label="wr2"/>
      </entity>
      <entity name="plane" supertypes="elementary_surface"/>
      <entity name="plane_angle_and_length_pair" supertypes="founded_item">
         <explicit name="plane_angle_value">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="length_value">
            <typename name="length_measure"/>
         </explicit>
      </entity>
      <entity name="plane_angle_and_ratio_pair" supertypes="founded_item">
         <explicit name="plane_angle_value">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="ratio_value">
            <typename name="ratio_measure"/>
         </explicit>
      </entity>
      <entity name="plane_angle_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="plane_angle_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="plated_conductive_base_blind_via" supertypes="blind_via"/>
      <entity name="plated_cutout" supertypes="cutout plated_inter_stratum_feature"/>
      <entity name="plated_cutout_edge_segment" supertypes="cutout_edge_segment plated_inter_stratum_feature"/>
      <entity name="plated_inter_stratum_feature" super.expression="ONEOF (plated_cutout_edge_segment, plated_interconnect_module_edge_segment, plated_passage)" supertypes="inter_stratum_feature"/>
      <entity name="plated_interconnect_module_edge" supertypes="interconnect_module_edge plated_inter_stratum_feature"/>
      <entity name="plated_interconnect_module_edge_segment" supertypes="interconnect_module_edge_segment plated_inter_stratum_feature"/>
      <entity name="plated_passage" super.expression="ONEOF (component_termination_passage, via)" supertypes="plated_inter_stratum_feature"/>
      <entity name="plated_passage_dependent_land" supertypes="inter_stratum_feature_dependent_land"/>
      <entity name="plus_expression" supertypes="multiple_arity_numeric_expression"/>
      <entity name="plus_minus_tolerance">
         <explicit name="range">
            <typename name="tolerance_method_definition"/>
         </explicit>
         <explicit name="toleranced_dimension">
            <typename name="dimensional_characteristic"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="toleranced_dimension"/>
         </unique>
      </entity>
      <entity name="ply_laminate_sequence_definition" supertypes="product_definition">
         <where expression="( SIZEOF( QUERY ( pdr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PRODUCT_DEFINITION_RELATIONSHIP.'  + 'RELATING_PRODUCT_DEFINITION' ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'NEXT_ASSEMBLY_USAGE_OCCURRENCE' ) IN &#10;               TYPEOF( pdr ) ) ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="ply_laminate_table" supertypes="part_laminate_table"/>
      <entity name="pocket" supertypes="feature_definition">
         <where expression="( SELF\characterized_object.description IN [ 'closed rectangular', 'open rectangular', 'complex', 'circular cutout', &#10;                'complex cutout' , 'recess'] )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'pocket depth occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'path feature component usage' ) AND ( sar.name = &#10;                'pocket depth'  ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_FEATURE_COMPONENT'  IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) AND ( sdr.relating_shape_aspect.description = 'linear' ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) =&#10;                0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 1 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN&#10;                TYPEOF( pdr.used_representation ) ) AND ( 1 &lt;= SIZEOF( pdr.used_representation.items ) ) AND ( SIZEOF( pdr.&#10;                used_representation.items ) &lt;= 2 ) ) ) ) = 1 ) ) ) = 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN&#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( srwp_i &lt;* pdr.used_representation.items | ( ( srwp_i.&#10;                name = 'orientation' ) OR ( srwp_i.name = 'fillet radius' ) ) ) ) = SIZEOF( pdr.used_representation.items ) ) ) ) ) &#10;                = 1 ) ) ) = 1 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'fillet radius' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'complex', 'non-circular cutout', 'recess'] ) ) OR ( SIZEOF( &#10;                QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'boundary occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_CLOSED_PROFILE', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NGON_CLOSED_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_CLOSED_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLOSED_PATH_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SQUARE_U_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARTIAL_CIRCULAR_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUNDED_U_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VEE_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEE_PROFILE' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OPEN_PATH_PROFILE' ] * TYPEOF( sdr.&#10;                relating_shape_aspect ) ) = 1 ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr7"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'closed rectangular' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* &#10;                USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'closed boundary occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_CLOSED_PROFILE' IN TYPEOF( sdr&#10;                .relating_shape_aspect ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr8"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'open rectangular' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* &#10;                USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'open boundary occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SQUARE_U_PROFILE' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'bottom condition occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'pocket bottom usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POCKET_BOTTOM' IN TYPEOF( &#10;                sdr.relating_shape_aspect ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POCKET' IN&#10;                TYPEOF( sdr.related_shape_aspect.of_shape.definition ) ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'complex', 'non-circular cutout', 'recess'] ) ) OR ( SIZEOF( &#10;                QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'change in boundary occurrence' ) AND ( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATING_SHAPE_ASPECT'  ) | ( ( sar.description = 'taper usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TAPER' IN TYPEOF( fcr.&#10;                relating_shape_aspect ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POCKET' IN &#10;                TYPEOF( fcr.related_shape_aspect.of_shape.definition ) ) AND ( fcr.related_shape_aspect.description IN [&#10;                'angle taper' , 'directed taper'] ) ) ) ) = 1 ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) )" label="wr11"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'circular cutout' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* &#10;                USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'enclosed boundary occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_CLOSED_PROFILE' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr12"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'circular cutout', 'complex cutout'] ) ) OR ( SIZEOF( &#10;                QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'bottom condition occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'pocket bottom usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POCKET_BOTTOM' IN TYPEOF( &#10;                sdr.relating_shape_aspect ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POCKET' IN&#10;                TYPEOF( sdr.related_shape_aspect.of_shape.definition ) ) AND ( sdr.relating_shape_aspect.description = 'through' ) ) ) ) &#10;                = 1 ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr13"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'recess' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'bottom condition occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'pocket bottom usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POCKET_BOTTOM' IN TYPEOF( &#10;                sdr.relating_shape_aspect ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POCKET' IN&#10;                TYPEOF( sdr.related_shape_aspect.of_shape.definition ) ) AND ( sdr.relating_shape_aspect.description IN [ 'planar', &#10;                'complex' ] ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr14"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;                used_representation ) ) AND ( pdr.used_representation.name = 'maximum feature limit' ) ) ) ) &gt;= 0 )" label="wr15"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'closed rectangular', 'open rectangular', 'complex', 'recess'] ) ) &#10;                OR ( SIZEOF( QUERY ( pds &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) &#10;                AND ( csa.name = 'uncut volume' ) AND ( SIZEOF( QUERY ( sar &lt;* csa.component_relationships | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOSS', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROTRUSION' ] * TYPEOF( sar.&#10;                related_shape_aspect ) ) = 1 ) ) ) ) = 1 ) ) ) ) &lt;= 1 ) ) ) ) = 1 ) )" label="wr16"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'closed rectangular', 'open rectangular'] ) ) OR ( SIZEOF( &#10;                QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'change in boundary occurrence' ) AND ( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATING_SHAPE_ASPECT'  ) | ( ( sar.description = 'taper usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TAPER' IN TYPEOF( fcr.&#10;                relating_shape_aspect ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POCKET' IN &#10;                TYPEOF( fcr.related_shape_aspect.of_shape.definition ) ) AND ( fcr.related_shape_aspect.description IN [&#10;                'angle taper' , 'directed taper'] ) ) ) ) &gt;= 1 ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) )" label="wr17"/>
      </entity>
      <entity name="pocket_bottom" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;                of_shape.definition ) )" label="wr1"/>
         <where expression="( SELF.description IN [ 'planar', 'complex', 'through'] )" label="wr2"/>
         <where expression="( ( NOT ( SELF.description = 'planar' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION_SHAPE_REPRESENTATION'  IN TYPEOF( &#10;                pdr.used_representation ) ) AND ( pdr.used_representation.name = 'floor normal' ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( ( NOT ( SELF.description = 'planar' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LOCATION_SHAPE_REPRESENTATION'  IN TYPEOF( &#10;                pdr.used_representation ) ) AND ( pdr.used_representation.name = 'floor location' ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( ( NOT ( SELF.description = 'complex' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;                used_representation ) ) AND ( pdr.used_representation.name = 'floor face' ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( SELF.description IN [ 'planar', 'complex'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr6"/>
         <where expression="( ( NOT ( SELF.description IN [ 'planar', 'complex'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) )" label="wr7"/>
         <where expression="( ( NOT ( SELF.description = 'through' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr8"/>
         <where expression="( ( NOT ( SELF.description IN [ 'planar', 'complex'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'radius' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATING_SHAPE_ASPECT'  ) | ( ( sar.description = 'pocket bottom usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( ( fcr.related_shape_aspect.description = 'bottom condition occurrence' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POCKET'  IN TYPEOF( fcr.related_shape_aspect.&#10;                of_shape.definition ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POCKET_BOTTOM' &#10;                IN TYPEOF( fcr.relating_shape_aspect ) ) ) ) ) &gt;= 1 )" label="wr10"/>
         <where expression="( ( NOT ( SELF.description IN [ 'planar', 'complex'] ) ) OR ( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATING_SHAPE_ASPECT'  ) | ( ( sar.description = 'pocket bottom usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( ( fcr.related_shape_aspect.description = 'bottom condition occurrence' ) AND ( fcr.&#10;                related_shape_aspect.name IN [ 'pocket depth start', 'pocket depth end'] ) ) ) ) = 0 ) )" label="wr11"/>
      </entity>
      <entity name="pogc_with_dimension" supertypes="parallel_offset_geometric_constraint">
         <explicit name="offset_value">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="offset_direction_constrained">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( ( SIZEOF( SELF\explicit_constraint.reference_elements ) = 1 ) OR ( SIZEOF( SELF\explicit_constraint.&#10;               constrained_elements ) = 2 ) )" label="wr1"/>
         <where expression="( ( NOT ( offset_direction_constrained = TRUE ) ) AND ( ( offset_type = curve_2d_offset ) OR ( offset_type = &#10;               surface_offset ) ) )" label="wr2"/>
      </entity>
      <entity name="point" super.expression="ONEOF (cartesian_point, point_on_curve, point_on_surface, point_replica, degenerate_pcurve)" supertypes="geometric_representation_item"/>
      <entity name="point_and_vector" supertypes="compound_representation_item geometric_representation_item">
         <explicit name="item_element">
            <typename name="point_and_vector_members"/>
            <redeclaration entity-ref="compound_representation_item"/>
         </explicit>
      </entity>
      <entity name="point_distance_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="point"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="4"/>
            <typename name="point_curve_or_surface_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <where expression="( ( SIZEOF( SELF\explicit_constraint.reference_elements ) &gt; 0 ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PDGC_WITH_DIMENSION'  IN TYPEOF( SELF ) ) AND &#10;               ( SIZEOF( SELF\explicit_constraint.constrained_elements ) = 2 ) ) )" label="wr1"/>
      </entity>
      <entity name="point_on_curve" supertypes="point">
         <explicit name="basis_curve">
            <typename name="curve"/>
         </explicit>
         <explicit name="point_parameter">
            <typename name="parameter_value"/>
         </explicit>
      </entity>
      <entity name="point_on_edge_curve" supertypes="point_on_curve">
         <explicit name="basis_edge_curve">
            <typename name="edge_curve"/>
         </explicit>
         <derived expression="SELF.basis_edge_curve.edge_geometry" name="basis_curve">
            <typename name="curve"/>
            <redeclaration entity-ref="point_on_curve"/>
         </derived>
         <where expression="( SIZEOF( using_representations( SELF.basis_edge_curve ) * relating_shape_representations_of_extreme_values( SELF ) ) &#10;               &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="point_on_face_surface" supertypes="point_on_surface">
         <explicit name="basis_face_surface">
            <typename name="face_surface"/>
         </explicit>
         <derived expression="SELF.basis_face_surface.face_geometry" name="basis_surface">
            <typename name="surface"/>
            <redeclaration entity-ref="point_on_surface"/>
         </derived>
         <where expression="( SIZEOF( using_representations( SELF.basis_face_surface ) * relating_shape_representations_of_extreme_values( SELF ) ) &#10;               &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="point_on_planar_curve_pair" supertypes="high_order_kinematic_pair">
         <explicit name="pair_curve">
            <typename name="curve"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( r &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( pair_curve IN r.items ) ) ) ) =&#10;               0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( lr &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) &#10;               = 0 )" label="wr2"/>
      </entity>
      <entity name="point_on_planar_curve_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="point_on_planar_curve_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_point_on_curve">
            <typename name="point_on_curve"/>
         </explicit>
         <explicit name="input_orientation">
            <typename name="spatial_rotation"/>
         </explicit>
         <derived expression="convert_spatial_to_ypr_rotation( SELF\pair_value.applies_to_pair, input_orientation )" name="actual_orientation">
            <typename name="ypr_rotation"/>
         </derived>
         <where expression="( SELF\pair_value.applies_to_pair\point_on_planar_curve_pair.pair_curve :=: actual_point_on_curve.basis_curve )" label="wr1"/>
      </entity>
      <entity name="point_on_planar_curve_pair_with_range" supertypes="point_on_planar_curve_pair">
         <explicit name="range_on_pair_curve">
            <typename name="trimmed_curve"/>
         </explicit>
         <explicit name="lower_limit_yaw" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_yaw" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="lower_limit_pitch" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_pitch" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="lower_limit_roll" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_roll" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( ( ( NOT EXISTS( lower_limit_pitch ) ) OR ( NOT EXISTS( upper_limit_pitch ) ) ) XOR ( lower_limit_pitch &lt; &#10;               upper_limit_pitch ) )" label="wr1"/>
         <where expression="( ( ( NOT EXISTS( lower_limit_yaw ) ) OR ( NOT EXISTS( upper_limit_yaw ) ) ) XOR ( lower_limit_yaw &lt; upper_limit_yaw ) )" label="wr2"/>
         <where expression="( ( ( NOT EXISTS( lower_limit_roll ) ) OR ( NOT EXISTS( upper_limit_roll ) ) ) XOR ( lower_limit_roll &lt; &#10;               upper_limit_roll ) )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( r &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( range_on_pair_curve IN r.items ) ) ) ) &#10;               = 0 )" label="wr4"/>
      </entity>
      <entity name="point_on_surface" supertypes="point">
         <explicit name="basis_surface">
            <typename name="surface"/>
         </explicit>
         <explicit name="point_parameter_u">
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="point_parameter_v">
            <typename name="parameter_value"/>
         </explicit>
      </entity>
      <entity name="point_on_surface_pair" supertypes="high_order_kinematic_pair">
         <explicit name="pair_surface">
            <typename name="surface"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( r &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( pair_surface IN r.items ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( lr &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) &#10;               = 0 )" label="wr2"/>
      </entity>
      <entity name="point_on_surface_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="point_on_surface_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_point_on_surface">
            <typename name="point_on_surface"/>
         </explicit>
         <explicit name="input_orientation">
            <typename name="spatial_rotation"/>
         </explicit>
         <derived expression="convert_spatial_to_ypr_rotation( SELF\pair_value.applies_to_pair, input_orientation )" name="actual_orientation">
            <typename name="ypr_rotation"/>
         </derived>
         <where expression="( SELF\pair_value.applies_to_pair\point_on_surface_pair.pair_surface :=: actual_point_on_surface.basis_surface )" label="wr1"/>
      </entity>
      <entity name="point_on_surface_pair_with_range" supertypes="point_on_surface_pair">
         <explicit name="range_on_pair_surface">
            <typename name="rectangular_trimmed_surface"/>
         </explicit>
         <explicit name="lower_limit_yaw" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_yaw" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="lower_limit_pitch" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_pitch" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="lower_limit_roll" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_roll" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( ( ( NOT EXISTS( lower_limit_pitch ) ) OR ( NOT EXISTS( upper_limit_pitch ) ) ) XOR ( lower_limit_pitch &lt; &#10;               upper_limit_pitch ) )" label="wr1"/>
         <where expression="( ( ( NOT EXISTS( lower_limit_yaw ) ) OR ( NOT EXISTS( upper_limit_yaw ) ) ) XOR ( lower_limit_yaw &lt; upper_limit_yaw ) )" label="wr2"/>
         <where expression="( ( ( NOT EXISTS( lower_limit_roll ) ) OR ( NOT EXISTS( upper_limit_roll ) ) ) XOR ( lower_limit_roll &lt; &#10;               upper_limit_roll ) )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( r &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( range_on_pair_surface IN r.&#10;               items ) ) ) ) = 0 )" label="wr4"/>
      </entity>
      <entity name="point_path" supertypes="compound_representation_item geometric_representation_item">
         <explicit name="item_element">
            <typename name="point_path_members"/>
            <redeclaration entity-ref="compound_representation_item"/>
         </explicit>
      </entity>
      <entity name="point_placement_shape_representation" supertypes="shape_representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="point_placement_shape_representation_item"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'COMPOUND_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'] &#10;               * TYPEOF( i ) ) = 1 ) ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="point_replica" supertypes="point">
         <explicit name="parent_pt">
            <typename name="point"/>
         </explicit>
         <explicit name="transformation">
            <typename name="cartesian_transformation_operator"/>
         </explicit>
         <where expression="( transformation.dim = parent_pt.dim )" label="wr1"/>
         <where expression="acyclic_point_replica( SELF, parent_pt )" label="wr2"/>
      </entity>
      <entity name="point_style" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="marker">
            <typename name="marker_select"/>
         </explicit>
         <explicit name="marker_size">
            <typename name="size_select"/>
         </explicit>
         <explicit name="marker_colour">
            <typename name="colour"/>
         </explicit>
      </entity>
      <entity name="point_to_point_path" supertypes="path_node">
         <derived expression="discontinuous" name="transition">
            <typename name="transition_code"/>
            <redeclaration entity-ref="kinematic_path_segment"/>
         </derived>
      </entity>
      <entity name="polar_complex_number_region" supertypes="maths_space generic_literal">
         <explicit name="centre">
            <typename name="complex_number_literal"/>
         </explicit>
         <explicit name="distance_constraint">
            <typename name="real_interval"/>
         </explicit>
         <explicit name="direction_constraint">
            <typename name="finite_real_interval"/>
         </explicit>
         <where expression="( min_exists( distance_constraint ) AND ( real_min( distance_constraint ) &gt;= 0 ) )" label="wr1"/>
         <where expression="( ( ( -PI ) &lt;= direction_constraint.min ) AND ( direction_constraint.min &lt; PI ) )" label="wr2"/>
         <where expression="( ( direction_constraint.max - direction_constraint.min ) &lt;= ( 2 * PI ) )" label="wr3"/>
         <where expression="( ( ( direction_constraint.max - direction_constraint.min ) &lt; ( 2 * PI ) ) OR ( direction_constraint.min_closure = &#10;               open ) )" label="wr4"/>
         <where expression="( ( ( direction_constraint.max - direction_constraint.min ) &lt; ( 2 * PI ) ) OR ( direction_constraint.max_closure = &#10;               open ) OR ( direction_constraint.min = ( -PI ) ) )" label="wr5"/>
         <where expression="( ( real_min( distance_constraint ) &gt; 0 ) OR max_exists( distance_constraint ) OR ( ( direction_constraint.max - &#10;               direction_constraint.min ) &lt; ( 2 * PI ) ) OR ( direction_constraint.max_closure = open ) )" label="wr6"/>
      </entity>
      <entity name="poly_loop" supertypes="loop geometric_representation_item">
         <explicit name="polygon">
            <aggregate lower="3" type="LIST" unique="YES" upper="?"/>
            <typename name="cartesian_point"/>
         </explicit>
      </entity>
      <entity name="polygonal_area" supertypes="primitive_2d">
         <explicit name="bounds">
            <aggregate lower="3" type="LIST" unique="YES" upper="?"/>
            <typename name="cartesian_point"/>
         </explicit>
      </entity>
      <entity name="polyline" supertypes="bounded_curve">
         <explicit name="points">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="cartesian_point"/>
         </explicit>
      </entity>
      <entity name="port_variable" super.expression="ONEOF (across_port_variable, through_port_variable, transform_port_variable)" supertypes="representation representation_item"/>
      <entity name="position_tolerance" supertypes="geometric_tolerance"/>
      <entity name="positioned_sketch" supertypes="geometric_representation_item">
         <explicit name="sketch_basis">
            <typename name="sketch_basis_select"/>
         </explicit>
         <explicit name="auxiliary_elements">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="auxiliary_geometric_representation_item"/>
         </explicit>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_BOUNDED_SURFACE' IN TYPEOF( &#10;               sketch_basis ) ) AND ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE' IN TYPEOF( &#10;               sketch_basis\curve_bounded_surface.basis_surface ) ) ) ) )" label="wr1"/>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SURFACE' IN TYPEOF( sketch_basis ) ) &#10;               AND ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE' IN TYPEOF( sketch_basis\&#10;               face_surface.face_geometry ) ) ) ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* auxiliary_elements | ( SIZEOF( TYPEOF( q ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE' ] ) = 0 ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* auxiliary_elements | ( q\geometric_representation_item.dim &lt;&gt; 3 ) ) ) = 0 )" label="wr4"/>
      </entity>
      <entity name="power_expression" supertypes="binary_numeric_expression"/>
      <entity name="power_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POWER_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="power_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.watt ) )" label="wr1"/>
      </entity>
      <entity name="pre_defined_character_glyph" supertypes="pre_defined_item"/>
      <entity name="pre_defined_colour" supertypes="pre_defined_item colour"/>
      <entity name="pre_defined_curve_font" supertypes="pre_defined_item"/>
      <entity name="pre_defined_dimension_symbol" supertypes="pre_defined_symbol">
         <where expression="( SELF.name IN [ 'arc length', 'conical taper', 'counterbore', 'countersink', 'depth', 'diameter', 'plus minus', &#10;               'radius' , 'slope', 'spherical diameter', 'spherical radius', 'square'] )" label="wr1"/>
      </entity>
      <entity name="pre_defined_geometrical_tolerance_symbol" supertypes="pre_defined_symbol">
         <where expression="( SELF.name IN [ 'angularity', 'basic dimension', 'blanked datum reference', 'circular runout', 'circularity', &#10;               'concentricity' , 'cylindricity', 'datum target identification', 'diameter', 'filled datum reference', 'flatness', &#10;               'least material condition' , 'maximum material condition', 'parallelism', 'perpendicularity', 'position', &#10;               'profile of a line' , 'profile of a surface', 'projected tolerance zone', 'regardless of feature size', &#10;               'straightness' , 'symmetry', 'total runout'] )" label="wr1"/>
      </entity>
      <entity name="pre_defined_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="pre_defined_marker" supertypes="pre_defined_item"/>
      <entity name="pre_defined_parallel_datum_axis_symbol_3d_2d_relationship" supertypes="shape_definition_3d_intersection"/>
      <entity name="pre_defined_perpendicular_datum_axis_symbol_3d_2d_relationship" supertypes="shape_definition_3d_intersection"/>
      <entity name="pre_defined_perpendicular_datum_plane_symbol_3d_2d_relationship" supertypes="shape_definition_3d_intersection"/>
      <entity name="pre_defined_physical_network_group" supertypes="physical_network_group"/>
      <entity name="pre_defined_physical_network_group_element_relationship" supertypes="physical_network_group_element_relationship"/>
      <entity name="pre_defined_point_marker_symbol" supertypes="pre_defined_marker pre_defined_symbol">
         <where expression="( SELF.name IN [ 'asterisk', 'circle', 'dot', 'plus', 'square', 'triangle', 'x'] )" label="wr1"/>
      </entity>
      <entity name="pre_defined_surface_condition_symbol" supertypes="pre_defined_symbol">
         <where expression="( SELF.name IN [ '000', '010', '020', '030', '040', '050', '060', '070', '001', '011', '021', '031', '041', '051', '061' , &#10;               '071' , '100', '110', '120', '130', '140', '150', '160', '170', '101', '111', '121', '131', '141', '151', '161', &#10;               '171' , '200', '210', '220', '230', '240', '250', '260', '270', '201', '211', '221', '231', '241', '251', '261', &#10;               '271' ] )" label="wr1"/>
      </entity>
      <entity name="pre_defined_surface_side_style" supertypes="pre_defined_item"/>
      <entity name="pre_defined_symbol" supertypes="pre_defined_item"/>
      <entity name="pre_defined_terminator_symbol" supertypes="pre_defined_symbol">
         <where expression="( SELF.name IN [ 'blanked arrow', 'blanked box', 'blanked dot', 'blanked triangle', 'dimension origin', 'filled arrow', &#10;               'filled box' , 'filled dot', 'integral symbol', 'open arrow', 'slash', 'unfilled arrow', 'unfilled triangle', &#10;               'filled triangle' ] )" label="wr1"/>
      </entity>
      <entity name="pre_defined_text_font" supertypes="pre_defined_item"/>
      <entity name="pre_defined_tile" supertypes="pre_defined_item"/>
      <entity name="precision_qualifier">
         <explicit name="precision_value">
            <builtintype type="INTEGER"/>
         </explicit>
      </entity>
      <entity name="predefined_picture_representation_item" supertypes="picture_representation_item">
         <where expression="( SELF\representation_item.name IN pre_defined_picture_representation_types )" label="wr1"/>
      </entity>
      <entity name="predefined_requirement_view_definition" super.expression="ONEOF (assembly_spacing_requirement, assembly_group_spacing_requirement, item_restricted_requirement, layout_spacing_requirement) ANDOR ONEOF (assembly_spacing_requirement, assembly_group_spacing_requirement, item_restricted_requirement)" supertypes="product_definition"/>
      <entity name="prescribed_path" supertypes="link_motion_representation_along_path">
         <explicit name="controlling_joints" optional="YES">
            <aggregate lower="1" type="SET" upper="6"/>
            <typename name="kinematic_joint"/>
         </explicit>
      </entity>
      <entity name="presentation_area" supertypes="presentation_representation">
         <where expression="( ( SIZEOF( QUERY ( ais &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'AREA_IN_SET.AREA'  ) | ( SIZEOF( USEDIN( ais, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  &#10;               + 'PRESENTATION_SIZE.UNIT' ) ) = 1 ) ) ) &gt; 0 ) OR ( SIZEOF( USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRESENTATION_SIZE.UNIT' ) ) = 1 ) )" label="wr1"/>
      </entity>
      <entity name="presentation_layer_assignment">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="assigned_items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="layered_item"/>
         </explicit>
      </entity>
      <entity name="presentation_representation" super.expression="ONEOF (presentation_area, presentation_view)" supertypes="representation">
         <explicit name="context_of_items">
            <typename name="geometric_representation_context"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SELF\representation.context_of_items\geometric_representation_context.coordinate_space_dimension = 2 )" label="wr1"/>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRESENTATION_AREA' IN TYPEOF( SELF ) ) OR ( &#10;               SIZEOF( QUERY ( prr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'REPRESENTATION_RELATIONSHIP.REP_2'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRESENTATION_REPRESENTATION'  IN TYPEOF( prr\representation_relationship.rep_1 ) ) ) ) &gt; 0 ) OR ( SIZEOF( &#10;               QUERY ( rm &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'REPRESENTATION_MAP.'  + 'MAPPED_REPRESENTATION' ) | ( SIZEOF( QUERY ( mi &lt;* USEDIN( rm, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'MAPPED_ITEM.' + 'MAPPING_SOURCE' ) | ( &#10;               SIZEOF( QUERY ( rep &lt;* using_representations( mi ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRESENTATION_REPRESENTATION' ) IN &#10;               TYPEOF( rep ) ) ) ) &gt; 0 ) ) ) &gt; 0 ) ) ) &gt; 0 ) )" label="wr2"/>
      </entity>
      <entity name="presentation_set">
         <inverse attribute="in_set" entity="area_in_set" name="areas">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
      </entity>
      <entity name="presentation_size">
         <explicit name="unit">
            <typename name="presentation_size_assignment_select"/>
         </explicit>
         <explicit name="size">
            <typename name="planar_box"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="unit"/>
         </unique>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRESENTATION_REPRESENTATION' IN TYPEOF( SELF&#10;               .unit ) ) AND item_in_context( SELF.size, SELF.unit\representation.context_of_items ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_IN_SET'  IN TYPEOF( SELF.unit ) ) AND ( &#10;               SIZEOF( QUERY ( ais &lt;* SELF.unit\area_in_set.in_set.areas | ( NOT item_in_context( SELF.size, ais.area\&#10;               representation.context_of_items ) ) ) ) = 0 ) ) )" label="wr1"/>
      </entity>
      <entity name="presentation_style_assignment" supertypes="founded_item">
         <explicit name="styles">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="presentation_style_select"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( style1 &lt;* SELF.styles | ( NOT ( SIZEOF( QUERY ( style2 &lt;* ( SELF.styles - style1 ) | ( NOT ( ( &#10;               TYPEOF( style1 ) &lt;&gt; TYPEOF( style2 ) ) OR ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SURFACE_STYLE_USAGE', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'EXTERNALLY_DEFINED_STYLE'] * TYPEOF( &#10;               style1 ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( style1 &lt;* SELF.styles | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SURFACE_STYLE_USAGE'  IN TYPEOF( style1 ) ) ) ) &lt;= 2 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( style1 &lt;* SELF.styles | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SURFACE_STYLE_USAGE'  IN TYPEOF( style1 ) ) AND ( SIZEOF( QUERY ( style2 &lt;* ( SELF.styles - style1 ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( style2 ) ) &#10;               AND ( ( style1\surface_style_usage.side = both ) OR ( style2\surface_style_usage.side = both ) OR ( style1\&#10;               surface_style_usage.side = style2\surface_style_usage.side ) ) ) ) ) &gt; 0 ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="presentation_style_by_context" supertypes="presentation_style_assignment">
         <explicit name="style_context">
            <typename name="style_context_select"/>
         </explicit>
      </entity>
      <entity name="presentation_view" supertypes="presentation_representation"/>
      <entity abstract.supertype="YES" name="presented_item"/>
      <entity name="presented_item_representation">
         <explicit name="presentation">
            <typename name="presentation_representation_select"/>
         </explicit>
         <explicit name="item">
            <typename name="presented_item"/>
         </explicit>
      </entity>
      <entity name="pressure_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRESSURE_UNIT' IN TYPEOF( SELF\measure_with_unit&#10;               .unit_component ) )" label="wr1"/>
      </entity>
      <entity name="pressure_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.pascal ) )" label="wr1"/>
      </entity>
      <entity name="previous_change_element_assignment" supertypes="group_assignment">
         <explicit name="assigned_group">
            <typename name="previous_element_assignment_select"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="change_management_object"/>
         </explicit>
      </entity>
      <entity name="primary_orientation_feature" supertypes="shape_aspect">
         <where expression="( SELF\shape_aspect.product_definitional = TRUE )" label="wr1"/>
      </entity>
      <entity name="primary_reference_terminal" supertypes="package_terminal"/>
      <entity name="primary_stratum_indicator_symbol" supertypes="single_stratum_special_symbol_component"/>
      <entity name="primitive_2d" super.expression="ONEOF (circular_area, elliptic_area, rectangular_area, polygonal_area, half_space_2d)" supertypes="geometric_representation_item">
         <where expression="( SELF\geometric_representation_item.dim = 2 )" label="wr1"/>
      </entity>
      <entity name="primitive_2d_with_inner_boundary" supertypes="complex_area compound_representation_item">
         <derived expression="SELF\compound_representation_item.item_element" name="inner_boundary">
            <typename name="compound_inner_area_boundary"/>
         </derived>
         <where expression="( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_AREA', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELLIPTIC_AREA' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_AREA' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYGONAL_AREA' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_WITH_OUTER_BOUNDARY' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_AREA_WITH_PARAMETERS' ] * TYPEOF( SELF ) ) &#10;               &gt; 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( inner &lt;* inner_boundary | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRIMITIVE_2D_WITH_INNER_BOUNDARY'  IN TYPEOF( inner ) ) ) ) = 0 )" label="wr2"/>
         <where expression="open_path_based_inner_boundary( inner_boundary )" label="wr3"/>
      </entity>
      <entity abstract.supertype="YES" name="printed_component" super.expression="ONEOF (single_stratum_printed_component, basic_multi_stratum_printed_component, multi_stratum_printed_component)" supertypes="assembly_component"/>
      <entity name="printed_connector_component" supertypes="printed_component"/>
      <entity name="printed_connector_template" supertypes="printed_part_template"/>
      <entity name="printed_connector_template_terminal_relationship" supertypes="shape_aspect shape_aspect_relationship">
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect_relationship.relating_shape_aspect"/>
            <unique.attribute attribute="SELF\shape_aspect_relationship.related_shape_aspect"/>
         </unique>
         <where expression="( SELF\shape_aspect_relationship.relating_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.related_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="printed_part_cross_section_template" supertypes="printed_part_template"/>
      <entity name="printed_part_cross_section_template_terminal" supertypes="printed_part_template_terminal"/>
      <entity abstract.supertype="YES" name="printed_part_template" super.expression="ONEOF (basic_multi_stratum_printed_part_template, structured_printed_part_template) ANDOR printed_connector_template" supertypes="part_template_definition"/>
      <entity name="printed_part_template_connected_terminals_definition" supertypes="shape_aspect">
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect.name"/>
         </unique>
      </entity>
      <entity name="printed_part_template_material" supertypes="product_definition"/>
      <entity name="printed_part_template_material_link" supertypes="shape_aspect shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="template_material_cross_section_boundary"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="template_material_cross_section_boundary"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="related_shape_aspect"/>
            <unique.attribute attribute="relating_shape_aspect"/>
         </unique>
         <where expression="( SELF\shape_aspect_relationship.related_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.relating_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="printed_part_template_terminal" super.expression="printed_part_cross_section_template_terminal ANDOR structured_printed_part_template_terminal" supertypes="shape_aspect"/>
      <entity name="printed_part_template_terminal_connection_zone_category" supertypes="group"/>
      <entity name="printed_tiebar_template" supertypes="structured_printed_part_template"/>
      <entity name="prismatic_pair" supertypes="low_order_kinematic_pair">
         <derived expression="TRUE" name="t_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
      </entity>
      <entity name="prismatic_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="prismatic_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_translation">
            <typename name="length_measure"/>
         </explicit>
      </entity>
      <entity name="prismatic_pair_with_range" supertypes="prismatic_pair">
         <explicit name="lower_limit_actual_translation" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_translation" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( NOT EXISTS( lower_limit_actual_translation ) ) OR ( NOT EXISTS( upper_limit_actual_translation ) ) ) XOR ( &#10;               lower_limit_actual_translation &lt; upper_limit_actual_translation ) )" label="wr1"/>
      </entity>
      <entity name="probe_access_area" supertypes="laminate_component shape_aspect">
         <derived expression="SELF" name="of_shape">
            <typename name="probe_access_area"/>
            <redeclaration entity-ref="shape_aspect"/>
         </derived>
      </entity>
      <entity name="procedural_representation" supertypes="representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="procedural_representation_sequence"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
      </entity>
      <entity name="procedural_representation_sequence" supertypes="representation_item">
         <explicit name="elements">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="representation_item"/>
         </explicit>
         <explicit name="suppressed_items">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="representation_item"/>
         </explicit>
         <explicit name="rationale">
            <typename name="text"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( q &lt;* suppressed_items | ( NOT ( q IN elements ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="procedural_shape_representation" supertypes="procedural_representation shape_representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="procedural_shape_representation_sequence"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
      </entity>
      <entity name="procedural_shape_representation_sequence" supertypes="geometric_representation_item procedural_representation_sequence">
         <explicit name="elements">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="shape_representation_item"/>
            <redeclaration entity-ref="procedural_representation_sequence"/>
         </explicit>
      </entity>
      <entity name="process_operation" supertypes="action_method">
         <where expression="( SIZEOF( QUERY ( amr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'ACTION_METHOD_RELATIONSHIP.'  + 'RELATING_METHOD' ) | ( ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROCESS_OPERATION'  IN TYPEOF( amr\&#10;               action_method_relationship.related_method ) ) ) OR ( SELF :=: amr\action_method_relationship.related_method ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( amr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'ACTION_METHOD_RELATIONSHIP.'  + 'RELATED_METHOD' ) | ( ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROCESS_OPERATION'  IN TYPEOF( amr\&#10;               action_method_relationship.relating_method ) ) ) OR ( SELF :=: amr\action_method_relationship.relating_method ) ) ) ) &#10;               = 0 )" label="wr2"/>
      </entity>
      <entity name="process_plan" supertypes="action">
         <where expression="( SIZEOF( QUERY ( ar &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'ACTION_RELATIONSHIP.RELATED_ACTION'  ) | ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROCESS_PLAN' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_PROCESS_PLAN' ] * TYPEOF( ar.&#10;               relating_action ) ) &lt;&gt; 1 ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( ar &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'ACTION_RELATIONSHIP.RELATING_ACTION'  ) | ( ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROCESS_PLAN' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_PROCESS_PLAN' ] * TYPEOF( ar.&#10;               related_action ) ) = 1 ) OR ( ( ar.name = 'process operation occurrence' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROCESS_OPERATION'  IN TYPEOF( ar.&#10;               related_action.chosen_method ) ) ) ) ) ) = SIZEOF( USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'ACTION_RELATIONSHIP.RELATING_ACTION' ) ) )" label="wr2"/>
      </entity>
      <entity name="process_product_association">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="defined_product">
            <typename name="characterized_product_definition"/>
         </explicit>
         <explicit name="process">
            <typename name="product_definition_process"/>
         </explicit>
      </entity>
      <entity name="process_property_association">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="process">
            <typename name="property_process"/>
         </explicit>
         <explicit name="property_or_shape">
            <typename name="property_or_shape_select"/>
         </explicit>
      </entity>
      <entity name="product">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="frame_of_reference">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="product_context"/>
         </explicit>
      </entity>
      <entity name="product_as_planned" supertypes="product_definition_formation"/>
      <entity name="product_category">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ID_ATTRIBUTE.'&#10;               + 'IDENTIFIED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="product_category_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="category">
            <typename name="product_category"/>
         </explicit>
         <explicit name="sub_category">
            <typename name="product_category"/>
         </explicit>
         <where expression="acyclic_product_category_relationship( SELF, [SELF.sub_category] )" label="wr1"/>
      </entity>
      <entity name="product_class" supertypes="product_concept characterized_object"/>
      <entity name="product_concept">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="market_context">
            <typename name="product_concept_context"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="id"/>
         </unique>
      </entity>
      <entity name="product_concept_context" supertypes="application_context_element">
         <explicit name="market_segment_type">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="product_concept_feature">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="product_concept_feature_association">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="concept">
            <typename name="product_concept"/>
         </explicit>
         <explicit name="feature">
            <typename name="product_concept_feature"/>
         </explicit>
      </entity>
      <entity name="product_concept_feature_category" supertypes="group">
         <where expression="( SIZEOF( QUERY ( aga &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GROUP_ASSIGNMENT.ASSIGNED_GROUP'  ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'APPLIED_GROUP_ASSIGNMENT' ) IN TYPEOF( aga ) ) AND ( ( aga\group_assignment.role\object_role.name &lt;&gt; &#10;               'specification category member'  ) OR ( SIZEOF( QUERY ( i &lt;* aga\applied_group_assignment.items | ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_CONCEPT_FEATURE' ) IN TYPEOF( i ) ) &#10;               AND ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'CONDITIONAL_CONCEPT_FEATURE' ) &#10;               IN TYPEOF( i ) ) ) ) ) ) &lt;&gt; SIZEOF( aga\applied_group_assignment.items ) ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="product_concept_feature_category_usage" supertypes="group_assignment">
         <explicit name="assigned_group">
            <typename name="product_concept_feature_category"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="category_usage_item"/>
         </explicit>
         <where expression="( SELF.role.name IN [ 'mandatory category usage', 'optional category usage'] )" label="wr1"/>
      </entity>
      <entity name="product_concept_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_product_concept">
            <typename name="product_concept"/>
         </explicit>
         <explicit name="related_product_concept">
            <typename name="product_concept"/>
         </explicit>
      </entity>
      <entity name="product_context" supertypes="application_context_element">
         <explicit name="discipline_type">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="product_data_and_data_quality_relationship">
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="product_data">
            <typename name="product_definition"/>
         </explicit>
         <explicit name="data_quality">
            <typename name="data_quality_definition"/>
         </explicit>
      </entity>
      <entity name="product_definition" super.expression="ONEOF (composite_assembly_sequence_definition, laminate_table, ply_laminate_sequence_definition) ANDOR ONEOF (physical_unit, stratum)">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="formation">
            <typename name="product_definition_formation"/>
         </explicit>
         <explicit name="frame_of_reference">
            <typename name="product_definition_context"/>
         </explicit>
         <derived expression="get_name_value( SELF )" name="name">
            <typename name="label"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.'&#10;               + 'NAMED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="product_definition_context" supertypes="application_context_element">
         <explicit name="life_cycle_stage">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="product_definition_context_association">
         <explicit name="definition">
            <typename name="product_definition"/>
         </explicit>
         <explicit name="frame_of_reference">
            <typename name="product_definition_context"/>
         </explicit>
         <explicit name="role">
            <typename name="product_definition_context_role"/>
         </explicit>
      </entity>
      <entity name="product_definition_context_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="product_definition_effectivity" supertypes="effectivity">
         <explicit name="usage">
            <typename name="product_definition_relationship"/>
         </explicit>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'EFFECTIVITY_ASSIGNMENT.ASSIGNED_EFFECTIVITY'  ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="product_definition_element_relationship" supertypes="group"/>
      <entity name="product_definition_formation">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="of_product">
            <typename name="product"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="id"/>
            <unique.attribute attribute="of_product"/>
         </unique>
      </entity>
      <entity name="product_definition_formation_relationship">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_product_definition_formation">
            <typename name="product_definition_formation"/>
         </explicit>
         <explicit name="related_product_definition_formation">
            <typename name="product_definition_formation"/>
         </explicit>
      </entity>
      <entity name="product_definition_formation_with_specified_source" supertypes="product_definition_formation">
         <explicit name="make_or_buy">
            <typename name="source"/>
         </explicit>
      </entity>
      <entity name="product_definition_group_assignment" supertypes="group_assignment">
         <explicit name="assigned_group">
            <typename name="product_definition_element_relationship"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="product_definition_or_product_definition_relationship"/>
         </explicit>
      </entity>
      <entity name="product_definition_kinematics" supertypes="property_definition">
         <explicit name="definition">
            <typename name="product_definition"/>
            <redeclaration entity-ref="property_definition"/>
         </explicit>
         <inverse attribute="definition" entity="kinematic_property_definition_representation" name="representation_relation"/>
         <unique label="ur1">
            <unique.attribute attribute="definition"/>
         </unique>
      </entity>
      <entity name="product_definition_occurrence_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="occurrence">
            <typename name="product_definition"/>
         </explicit>
         <explicit name="occurrence_usage">
            <typename name="assembly_component_usage"/>
         </explicit>
         <where expression="( occurrence_usage.relating_product_definition :&lt;&gt;: occurrence )" label="wr1"/>
         <where expression="( occurrence_usage.related_product_definition :&lt;&gt;: occurrence )" label="wr2"/>
         <where expression="( occurrence.formation :=: occurrence_usage.related_product_definition.formation )" label="wr3"/>
      </entity>
      <entity name="product_definition_process" supertypes="action">
         <explicit name="identification">
            <typename name="identifier"/>
         </explicit>
         <inverse attribute="process" entity="process_product_association" name="product_definitions">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
      </entity>
      <entity name="product_definition_reference" supertypes="generic_product_definition_reference">
         <explicit name="product_id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="product_definition_formation_id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="product_definition_id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="id_owning_organization_name" optional="YES">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="product_definition_reference_with_local_representation" supertypes="generic_product_definition_reference product_definition"/>
      <entity name="product_definition_relationship">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_product_definition">
            <typename name="product_definition_or_reference"/>
         </explicit>
         <explicit name="related_product_definition">
            <typename name="product_definition_or_reference"/>
         </explicit>
      </entity>
      <entity name="product_definition_relationship_kinematics" supertypes="property_definition">
         <explicit name="definition">
            <typename name="product_definition_relationship"/>
            <redeclaration entity-ref="property_definition"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="definition"/>
         </unique>
      </entity>
      <entity name="product_definition_resource" supertypes="action_resource product_definition">
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'REQUIREMENT_FOR_ACTION_RESOURCE.RESOURCES'  ) ) &gt; 0 )" label="wr1"/>
         <where expression="( SELF.frame_of_reference.name IN [ 'part definition', 'part occurrence', 'physical occurrence'] )" label="wr2"/>
      </entity>
      <entity name="product_definition_shape" supertypes="property_definition">
         <unique label="ur1">
            <unique.attribute attribute="SELF\property_definition.definition"/>
         </unique>
         <where expression="( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CHARACTERIZED_PRODUCT_DEFINITION', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CHARACTERIZED_OBJECT' ] * TYPEOF( SELF\&#10;               property_definition.definition ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="product_definition_substitute">
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="context_relationship">
            <typename name="product_definition_relationship"/>
         </explicit>
         <explicit name="substitute_definition">
            <typename name="product_definition"/>
         </explicit>
         <derived expression="get_name_value( SELF )" name="name">
            <typename name="label"/>
         </derived>
         <where expression="( context_relationship.related_product_definition :&lt;&gt;: substitute_definition )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.'&#10;               + 'NAMED_ITEM'  ) ) &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="product_definition_usage" super.expression="ONEOF (make_from_usage_option, assembly_component_usage)" supertypes="product_definition_relationship">
         <unique label="ur1">
            <unique.attribute attribute="SELF\product_definition_relationship.id"/>
            <unique.attribute attribute="SELF\product_definition_relationship.relating_product_definition"/>
            <unique.attribute attribute="SELF\product_definition_relationship.related_product_definition"/>
         </unique>
         <where expression="acyclic_product_definition_relationship( SELF, [SELF\product_definition_relationship.related_product_definition], &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_USAGE'  )" label="wr1"/>
      </entity>
      <entity name="product_definition_with_associated_documents" supertypes="product_definition">
         <explicit name="documentation_ids">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="document"/>
         </explicit>
      </entity>
      <entity name="product_design_to_individual" supertypes="product_relationship">
         <derived expression="SELF\product_relationship.related_product" name="individual_product">
            <typename name="product"/>
         </derived>
         <derived expression="SELF\product_relationship.relating_product" name="product_design">
            <typename name="product"/>
         </derived>
      </entity>
      <entity name="product_design_version_to_individual" supertypes="product_definition_formation_relationship">
         <derived expression="SELF\product_definition_formation_relationship.&#10;                                  related_product_definition_formation" name="individual_product">
            <typename name="product_definition_formation"/>
         </derived>
         <derived expression="SELF\product_definition_formation_relationship.&#10;                                  relating_product_definition_formation" name="product_design_version">
            <typename name="product_definition_formation"/>
         </derived>
      </entity>
      <entity name="product_identification" supertypes="configuration_item characterized_object">
         <explicit name="item_concept">
            <typename name="product_class"/>
            <redeclaration entity-ref="configuration_item"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( cd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CONFIGURATION_DESIGN.CONFIGURATION'  ) | ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION_FORMATION' ) IN &#10;               TYPEOF( cd.design ) ) AND ( SIZEOF( QUERY ( prpc &lt;* USEDIN( cd.design\product_definition_formation.of_product, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  )&#10;               | ( prpc.name IN [ 'part', 'raw material', 'tool'] ) ) ) &gt; 0 ) ) ) ) &lt;= 1 )" label="wr1"/>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'CONFIGURABLE_ITEM' ) IN TYPEOF( &#10;               SELF ) ) ) XOR ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'PRODUCT_SPECIFICATION' ) &#10;               IN TYPEOF( SELF ) ) )" label="wr2"/>
      </entity>
      <entity name="product_material_composition_relationship" supertypes="product_definition_relationship">
         <explicit name="class">
            <typename name="label"/>
         </explicit>
         <explicit name="constituent_amount">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="characterized_product_composition_value"/>
         </explicit>
         <explicit name="composition_basis">
            <typename name="label"/>
         </explicit>
         <explicit name="determination_method">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="product_planned_to_realized" supertypes="product_definition_formation_relationship">
         <derived expression="SELF\product_definition_formation_relationship.&#10;                            relating_product_definition_formation" name="planned_product">
            <typename name="product_definition_formation"/>
         </derived>
         <derived expression="SELF\product_definition_formation_relationship.&#10;                            related_product_definition_formation" name="realized_product">
            <typename name="product_definition_formation"/>
         </derived>
      </entity>
      <entity name="product_process_plan" supertypes="product_definition_process">
         <where expression="( SIZEOF( QUERY ( ar &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'ACTION_RELATIONSHIP.RELATED_ACTION'  ) | ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROCESS_PLAN' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_PROCESS_PLAN' ] * TYPEOF( ar.&#10;               relating_action ) ) &lt;&gt; 1 ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( ar &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'ACTION_RELATIONSHIP.RELATING_ACTION'  ) | ( ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROCESS_PLAN' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_PROCESS_PLAN' ] * TYPEOF( ar.&#10;               related_action ) ) = 1 ) OR ( ( ar.name = 'process operation occurrence' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROCESS_OPERATION'  IN TYPEOF( ar.&#10;               related_action.chosen_method ) ) ) ) ) ) = SIZEOF( USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'ACTION_RELATIONSHIP.RELATING_ACTION' ) ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( ppa &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PROCESS_PRODUCT_ASSOCIATION.PROCESS'  ) | ( ( ppa.name &lt;&gt; 'produced output' ) OR ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( ppa.&#10;               defined_product ) ) ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="product_related_product_category" supertypes="product_category">
         <explicit name="products">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="product"/>
         </explicit>
      </entity>
      <entity name="product_relationship">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_product">
            <typename name="product"/>
         </explicit>
         <explicit name="related_product">
            <typename name="product"/>
         </explicit>
      </entity>
      <entity name="product_specific_parameter_value_assignment" supertypes="characterized_object product_related_product_category"/>
      <entity name="product_specification" supertypes="product_identification configurable_item"/>
      <entity name="profile_floor" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;                of_shape.definition ) )" label="wr1"/>
         <where expression="( SELF.description IN [ 'planar', 'complex', 'through'] )" label="wr2"/>
         <where expression="( ( NOT ( SELF.description IN [ 'planar', 'complex'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( ( NOT ( SELF.description IN [ 'planar', 'complex'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( ( NOT ( SIZEOF( impl_rep.used_representation.items ) &gt;= 1 ) ) AND ( &#10;                SIZEOF( impl_rep.used_representation.items ) &lt;= 2 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( ( NOT ( SELF.description = 'through' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( SELF.description IN [ 'planar', 'complex'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'radius' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATING_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile floor usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OUTSIDE_PROFILE' IN TYPEOF( &#10;                fcr.related_shape_aspect.of_shape.definition ) ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROFILE_FLOOR'  IN TYPEOF( fcr.&#10;                relating_shape_aspect ) ) ) ) ) &gt;= 1 )" label="wr7"/>
         <where expression="( ( NOT ( SELF.description IN [ 'planar', 'complex'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'shape profile floor orientation' ) AND ( it.description IN [ 'shape profile start', &#10;                'shape profile end' ] ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr8"/>
         <where expression="( ( NOT ( SELF.description = 'complex' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;                used_representation ) ) AND ( pdr.used_representation.name = 'floor' ) ) ) ) = 1 ) ) ) ) = 1 ) )" label="wr9"/>
         <where expression="( ( NOT ( SELF.description = 'planar' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;                used_representation ) ) AND ( pdr.used_representation.name = 'floor' ) ) ) ) = 1 ) ) ) ) = 1 ) )" label="wr10"/>
      </entity>
      <entity name="projected_zone_definition" supertypes="tolerance_zone_definition">
         <explicit name="projection_end">
            <typename name="shape_aspect"/>
         </explicit>
         <explicit name="projected_length">
            <typename name="length_measure_with_unit"/>
         </explicit>
         <where expression="( ( 'NUMBER' IN TYPEOF( projected_length\measure_with_unit.value_component ) ) AND ( projected_length\&#10;               measure_with_unit.value_component &gt; 0 ) )" label="wr1"/>
         <where expression="( derive_dimensional_exponents( projected_length\measure_with_unit.unit_component ) = dimensional_exponents( 1, 0, 0, &#10;               0, 0, 0, 0 ) )" label="wr2"/>
      </entity>
      <entity name="projected_zone_definition_with_offset" supertypes="projected_zone_definition">
         <explicit name="offset">
            <typename name="length_measure_with_unit"/>
         </explicit>
      </entity>
      <entity name="projection_curve" supertypes="annotation_curve_occurrence"/>
      <entity name="projection_directed_callout" supertypes="draughting_callout">
         <where expression="( SIZEOF( QUERY ( p_1 &lt;* SELF\draughting_callout.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROJECTION_CURVE'  IN TYPEOF( p_1 ) ) ) ) &lt;= 2 )" label="wr1"/>
         <where expression="( SIZEOF( SELF\draughting_callout.contents ) &gt;= 2 )" label="wr2"/>
      </entity>
      <entity name="promissory_usage_occurrence" supertypes="assembly_component_usage"/>
      <entity name="property_definition" super.expression="ONEOF (stratum_technology_occurrence_relationship, stratum_technology_occurrence) ANDOR ONEOF (product_definition_kinematics, product_definition_relationship_kinematics, product_definition_shape)">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="definition">
            <typename name="characterized_definition"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ID_ATTRIBUTE.'&#10;               + 'IDENTIFIED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="property_definition_relationship" super.expression="ONEOF (stratum_technology_occurrence_relationship, stratum_technology_swap_relationship)">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_property_definition">
            <typename name="property_definition"/>
         </explicit>
         <explicit name="related_property_definition">
            <typename name="property_definition"/>
         </explicit>
      </entity>
      <entity name="property_definition_representation">
         <explicit name="definition">
            <typename name="represented_definition"/>
         </explicit>
         <explicit name="used_representation">
            <typename name="representation"/>
         </explicit>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <derived expression="get_name_value( SELF )" name="name">
            <typename name="label"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.'&#10;               + 'NAMED_ITEM'  ) ) &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="property_process" supertypes="action">
         <explicit name="identification">
            <typename name="identifier"/>
         </explicit>
         <inverse attribute="process" entity="process_property_association" name="properties">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
      </entity>
      <entity name="protocol_physical_layer_definition" supertypes="product_definition"/>
      <entity name="protocol_physical_layer_definition_with_characterization" supertypes="protocol_physical_layer_definition"/>
      <entity name="protocol_requirement_allocation_to_part_terminal" supertypes="requirement_assignment"/>
      <entity name="protrusion" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'shape volume occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'volume shape usage' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;               | ( sdr.relating_shape_aspect.description = 'volume shape' ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;               used_representation ) ) AND ( pdr.used_representation.name = 'maximum feature limit' ) ) ) ) &gt;= 0 )" label="wr3"/>
      </entity>
      <entity name="qualified_representation_item" supertypes="representation_item">
         <explicit name="qualifiers">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="value_qualifier"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( temp &lt;* qualifiers | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRECISION_QUALIFIER'  IN TYPEOF( temp ) ) ) ) &lt; 2 )" label="wr1"/>
      </entity>
      <entity name="qualitative_uncertainty" supertypes="uncertainty_qualifier">
         <explicit name="uncertainty_value">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="quantified_assembly_component_usage" supertypes="assembly_component_usage">
         <explicit name="quantity">
            <typename name="measure_with_unit"/>
         </explicit>
         <where expression="( ( NOT ( 'NUMBER' IN TYPEOF( quantity.value_component ) ) ) OR ( quantity.value_component &gt; 0 ) )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="quantifier_expression" supertypes="multiple_arity_generic_expression">
         <explicit name="variables">
            <aggregate lower="1" type="LIST" unique="YES" upper="?"/>
            <typename name="generic_variable"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( vrbl &lt;* variables | ( NOT ( vrbl IN SELF\multiple_arity_generic_expression.operands ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( vrbl &lt;* variables | ( NOT ( ( schema_prefix + 'BOUND_VARIABLE_SEMANTICS' ) IN TYPEOF( vrbl.&#10;               interpretation.semantics ) ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="quasi_uniform_curve" supertypes="b_spline_curve"/>
      <entity name="quasi_uniform_surface" supertypes="b_spline_surface"/>
      <entity name="rack_and_pinion_pair" supertypes="low_order_kinematic_pair_with_motion_coupling">
         <explicit name="pinion_radius">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( lr &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) &#10;               = 0 )" label="wr1"/>
      </entity>
      <entity name="rack_and_pinion_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="rack_and_pinion_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_displacement">
            <typename name="length_measure"/>
         </explicit>
         <derived expression="0" name="actual_rotation">
            <typename name="plane_angle_measure"/>
         </derived>
      </entity>
      <entity name="rack_and_pinion_pair_with_range" supertypes="rack_and_pinion_pair">
         <explicit name="lower_limit_rack_displacement" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="upper_limit_rack_displacement" optional="YES">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( ( NOT EXISTS( lower_limit_rack_displacement ) ) OR ( NOT EXISTS( upper_limit_rack_displacement ) ) ) XOR ( &#10;               lower_limit_rack_displacement &lt; upper_limit_rack_displacement ) )" label="wr1"/>
      </entity>
      <entity name="radioactivity_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RADIOACTIVITY_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="radioactivity_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.becquerel ) )" label="wr1"/>
      </entity>
      <entity name="radius_dimension" supertypes="dimension_curve_directed_callout">
         <where expression="( SIZEOF( QUERY ( con &lt;* SELF.contents | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROJECTION_CURVE'  IN TYPEOF( con ) ) ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="radius_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="radial_geometry_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <where expression="( SIZEOF( SELF\explicit_constraint.reference_elements ) = 0 )" label="wr1"/>
      </entity>
      <entity name="range_characteristic" supertypes="representation descriptive_representation_item">
         <where expression="( NOT ( SELF\representation.name IN [ 'tolerance', 'minimum tolerance', 'maximum tolerance', 'nominal tolerance', &#10;               'plus minus tolerance' , 'symmetrical tolerance', 'statistical tolerance'] ) )" label="wr1"/>
      </entity>
      <entity name="ratio_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RATIO_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="ratio_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="rational_b_spline_curve" supertypes="b_spline_curve">
         <explicit name="weights_data">
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="REAL"/>
         </explicit>
         <derived expression="list_to_array( weights_data, 0, &#10;                   upper_index_on_control_points )" name="weights">
            <aggregate lower="0" type="ARRAY" upper="upper_index_on_control_points"/>
            <builtintype type="REAL"/>
         </derived>
         <where expression="( SIZEOF( weights_data ) = SIZEOF( SELF\b_spline_curve.control_points_list ) )" label="wr1"/>
         <where expression="curve_weights_positive( SELF )" label="wr2"/>
      </entity>
      <entity name="rational_b_spline_surface" supertypes="b_spline_surface">
         <explicit name="weights_data">
            <aggregate lower="2" type="LIST" upper="?"/>
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="REAL"/>
         </explicit>
         <derived expression="make_array_of_array( weights_data, 0, u_upper, 0, v_upper )" name="weights">
            <aggregate lower="0" type="ARRAY" upper="u_upper"/>
            <aggregate lower="0" type="ARRAY" upper="v_upper"/>
            <builtintype type="REAL"/>
         </derived>
         <where expression="( ( SIZEOF( weights_data ) = SIZEOF( SELF\b_spline_surface.control_points_list ) ) AND ( SIZEOF( weights_data[1] ) = &#10;               SIZEOF( SELF\b_spline_surface.control_points_list[1] ) ) )" label="wr1"/>
         <where expression="surface_weights_positive( SELF )" label="wr2"/>
      </entity>
      <entity name="rational_representation_item" supertypes="representation_item slash_expression">
         <where expression="( SIZEOF( QUERY ( operand &lt;* SELF\binary_generic_expression.operands | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INT_LITERAL'  IN TYPEOF( operand ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="rationalize_function" supertypes="maths_function unary_generic_expression">
         <explicit name="operand">
            <typename name="maths_function"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
         <derived expression="SELF\unary_generic_expression.operand" name="fun">
            <typename name="maths_function"/>
         </derived>
         <where expression="( ( space_dimension( fun.domain ) = 1 ) AND ( space_dimension( fun.range ) = 1 ) )" label="wr1"/>
         <where expression="number_tuple_subspace_check( factor1( fun.range ) )" label="wr2"/>
         <where expression="( space_dimension( factor1( fun.range ) ) &gt; 1 )" label="wr3"/>
      </entity>
      <entity abstract.supertype="YES" name="real_defined_function" supertypes="numeric_defined_function"/>
      <entity name="real_interval_from_min" supertypes="maths_space generic_literal">
         <explicit name="min">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="min_closure">
            <typename name="open_closed"/>
         </explicit>
      </entity>
      <entity name="real_interval_to_max" supertypes="maths_space generic_literal">
         <explicit name="max">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="max_closure">
            <typename name="open_closed"/>
         </explicit>
      </entity>
      <entity name="real_literal" supertypes="literal_number">
         <explicit name="the_value">
            <builtintype type="REAL"/>
            <redeclaration entity-ref="literal_number"/>
         </explicit>
      </entity>
      <entity name="real_numeric_variable" supertypes="numeric_variable"/>
      <entity name="real_representation_item" supertypes="representation_item real_literal"/>
      <entity name="real_tuple_literal" supertypes="generic_literal">
         <explicit name="lit_value">
            <aggregate lower="1" type="LIST" upper="?"/>
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="rectangular_area" supertypes="primitive_2d">
         <explicit name="position">
            <typename name="axis2_placement_2d"/>
         </explicit>
         <explicit name="x">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="y">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="rectangular_array_placement_group_component" supertypes="array_placement_group"/>
      <entity name="rectangular_closed_profile" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( ( SIZEOF( impl_rep.used_representation.items ) &gt;= 3 ) AND ( &#10;               SIZEOF( impl_rep.used_representation.items ) &lt;= 4 ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( srwp_i &lt;* pdr.used_representation.items | ( ( srwp_i.name &#10;               = 'orientation' ) OR ( srwp_i.name = 'length' ) OR ( srwp_i.name = 'width' ) OR ( srwp_i.name = 'corner radius' ) ) ) ) &#10;               = SIZEOF( pdr.used_representation.items ) ) ) ) ) = 1 ) ) ) = 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name = &#10;               'orientation'  ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'width' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'length' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'corner radius' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
      </entity>
      <entity name="rectangular_composite_array_shape_aspect" supertypes="composite_array_shape_aspect"/>
      <entity name="rectangular_composite_surface" supertypes="bounded_surface">
         <explicit name="segments">
            <aggregate lower="1" type="LIST" upper="?"/>
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="surface_patch"/>
         </explicit>
         <derived expression="SIZEOF( segments )" name="n_u">
            <builtintype type="INTEGER"/>
         </derived>
         <derived expression="SIZEOF( segments[1] )" name="n_v">
            <builtintype type="INTEGER"/>
         </derived>
         <where expression="( SIZEOF( QUERY ( s &lt;* segments | ( n_v &lt;&gt; SIZEOF( s ) ) ) ) = 0 )" label="wr1"/>
         <where expression="constraints_rectangular_composite_surface( SELF )" label="wr2"/>
      </entity>
      <entity name="rectangular_composite_surface_transition_locator" supertypes="founded_item">
         <explicit name="basis_surface">
            <typename name="rectangular_composite_surface"/>
         </explicit>
         <explicit name="surface_parameter">
            <typename name="u_or_v_parameter"/>
         </explicit>
         <explicit name="u_transition_index">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="v_transition_index">
            <builtintype type="INTEGER"/>
         </explicit>
         <where expression="( SIZEOF( using_representations( SELF.basis_surface ) * relating_shape_representations_of_extreme_values( SELF ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="rectangular_pattern" supertypes="replicate_feature">
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;                QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.'  + 'RELATING_SHAPE_ASPECT' ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;                sar ) ) ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT' IN TYPEOF( sdr.&#10;                related_shape_aspect ) ) ) ) = 1 ) ) ) &lt;= 5 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION_SHAPE_REPRESENTATION' IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( pdr.used_representation.name = 'row layout direction' ) ) ) ) = 1 ) ) ) ) &#10;                = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION_SHAPE_REPRESENTATION' IN &#10;                TYPEOF( pdr.used_representation ) ) AND ( pdr.used_representation.name = 'column layout direction' ) ) ) ) = 1 ) ) ) ) &#10;                = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 5 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' IN TYPEOF( it\&#10;                measure_with_unit.value_component ) ) AND ( it.name = 'number of rows' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' IN TYPEOF( it\&#10;                measure_with_unit.value_component ) ) AND ( it.name = 'number of columns' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'row spacing' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'column spacing' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name =&#10;                'orientation' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr10"/>
      </entity>
      <entity name="rectangular_trimmed_surface" supertypes="bounded_surface">
         <explicit name="basis_surface">
            <typename name="surface"/>
         </explicit>
         <explicit name="u1">
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="u2">
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="v1">
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="v2">
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="usense">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="vsense">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( u1 &lt;&gt; u2 )" label="wr1"/>
         <where expression="( v1 &lt;&gt; v2 )" label="wr2"/>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELEMENTARY_SURFACE' IN TYPEOF( basis_surface ) ) &#10;               AND ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE' IN TYPEOF( basis_surface ) ) ) ) &#10;               OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_OF_REVOLUTION' IN TYPEOF( &#10;               basis_surface ) ) OR ( usense = ( u2 &gt; u1 ) ) )" label="wr3"/>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SPHERICAL_SURFACE' IN TYPEOF( basis_surface ) ) &#10;               OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TOROIDAL_SURFACE' IN TYPEOF( basis_surface ) ) &#10;               OR ( vsense = ( v2 &gt; v1 ) ) )" label="wr4"/>
      </entity>
      <entity name="reference_composition_path" supertypes="applied_group_assignment product_definition"/>
      <entity name="reference_graphic_registration_mark" supertypes="shape_aspect">
         <where expression="( SELF\shape_aspect.product_definitional = FALSE )" label="wr1"/>
      </entity>
      <entity name="referenced_modified_datum" supertypes="datum_reference">
         <explicit name="modifier">
            <typename name="limit_condition"/>
         </explicit>
      </entity>
      <entity name="region_based_derived_pattern" supertypes="shape_aspect"/>
      <entity name="reindexed_array_function" supertypes="maths_function unary_generic_expression">
         <explicit name="operand">
            <typename name="maths_function"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
         <explicit name="starting_indices">
            <aggregate lower="1" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <where expression="function_is_array( SELF\unary_generic_expression.operand )" label="wr1"/>
         <where expression="( SIZEOF( starting_indices ) = SIZEOF( shape_of_array( SELF\unary_generic_expression.operand ) ) )" label="wr2"/>
      </entity>
      <entity name="relative_event_occurrence" supertypes="event_occurrence">
         <explicit name="base_event">
            <typename name="event_occurrence"/>
         </explicit>
         <explicit name="offset">
            <typename name="time_measure_with_unit"/>
         </explicit>
      </entity>
      <entity name="removal_volume" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'shape volume occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'  + &#10;               'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'volume shape usage' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;               | ( sdr.relating_shape_aspect.description = 'volume shape' ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="rep_item_group" supertypes="group representation_item">
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PRESENTATION_LAYER_ASSIGNMENT.'  + 'ASSIGNED_ITEMS' ) ) &gt; 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( r &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'REPRESENTATION.'  + 'ITEMS' ) | ( r.name = 'group representation' ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( ga &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GROUP_ASSIGNMENT.'  + 'ASSIGNED_GROUP' ) | ( ga.role.name &lt;&gt; 'group membership' ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'GEOMETRIC_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'TOPOLOGICAL_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'MAPPED_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'STYLED_ITEM'] * TYPEOF( SELF ) ) = 1 )" label="wr4"/>
      </entity>
      <entity name="repackaging_function" supertypes="maths_function unary_generic_expression">
         <explicit name="operand">
            <typename name="maths_function"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
         <explicit name="input_repack">
            <typename name="repackage_options"/>
         </explicit>
         <explicit name="output_repack">
            <typename name="repackage_options"/>
         </explicit>
         <explicit name="selected_output">
            <typename name="nonnegative_integer"/>
         </explicit>
         <where expression="( ( input_repack &lt;&gt; ro_wrap_as_tuple ) OR ( ( space_dimension( operand.domain ) = 1 ) AND ( ( schema_prefix + &#10;               'TUPLE_SPACE'  ) IN TYPEOF( factor1( operand.domain ) ) ) ) )" label="wr1"/>
         <where expression="( ( output_repack &lt;&gt; ro_unwrap_tuple ) OR ( ( space_dimension( operand.range ) = 1 ) AND ( ( schema_prefix + &#10;               'TUPLE_SPACE'  ) IN TYPEOF( factor1( operand.range ) ) ) ) )" label="wr2"/>
         <where expression="( selected_output &lt;= space_dimension( repackage( operand.range, output_repack ) ) )" label="wr3"/>
      </entity>
      <entity name="reparametrised_composite_curve_segment" supertypes="composite_curve_segment">
         <explicit name="param_length">
            <typename name="parameter_value"/>
         </explicit>
         <where expression="( param_length &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="replicate_feature" super.expression="ONEOF (circular_pattern, rectangular_pattern, feature_pattern)" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'  + &#10;               'RELATING_SHAPE_ASPECT'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) ) | ( ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPLICATE_FEATURE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INSTANCED_FEATURE' ] * TYPEOF( fcr.&#10;               related_shape_aspect ) ) &gt;= 1 ) AND ( fcr.name = 'pattern basis' ) ) ) ) = 1 )" label="wr2"/>
         <where expression="( ( SIZEOF( QUERY ( sar &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_ASPECT_RELATIONSHIP.'  + 'RELATING_SHAPE_ASPECT' ) | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;               sar ) ) ) ) ) + SIZEOF( QUERY ( sar &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'  + &#10;               'RELATED_SHAPE_ASPECT'  ) | ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="repositioned_neutral_sketch" supertypes="mapped_item geometric_representation_item">
         <derived expression="SELF\mapped_item.mapping_source" name="map">
            <typename name="representation_map"/>
         </derived>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NEUTRAL_SKETCH_REPRESENTATION' IN TYPEOF( map.&#10;               mapped_representation ) )" label="wr1"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_2D' IN TYPEOF( map.&#10;               mapping_origin ) )" label="wr2"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' IN TYPEOF( SELF\mapped_item.&#10;               mapping_target ) )" label="wr3"/>
      </entity>
      <entity name="repositioned_tessellated_item" supertypes="tessellated_item">
         <explicit name="location">
            <typename name="axis2_placement_3d"/>
         </explicit>
         <where expression="( NOT ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TESSELLATED_CURVE_SET', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TESSELLATED_GEOMETRIC_SET' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TESSELLATED_POINT_SET' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TESSELLATED_SURFACE_SET' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TESSELLATED_SHELL' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TESSELLATED_SOLID' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TESSELLATED_WIRE' ] * TYPEOF( SELF ) ) = 0 ) )" label="wr1"/>
      </entity>
      <entity name="representation" super.expression="ONEOF (interpolated_configuration_representation, link_motion_representation_along_path) ANDOR ONEOF (kinematic_link_representation, kinematic_topology_structure, kinematic_topology_directed_structure, kinematic_topology_network_structure, mechanism_representation, shape_representation) ANDOR ONEOF (kinematic_topology_structure, kinematic_topology_directed_structure, kinematic_topology_network_structure)">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="representation_item"/>
         </explicit>
         <explicit name="context_of_items">
            <typename name="representation_context"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ID_ATTRIBUTE.'&#10;               + 'IDENTIFIED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="representation_context">
         <explicit name="context_identifier">
            <typename name="identifier"/>
         </explicit>
         <explicit name="context_type">
            <typename name="text"/>
         </explicit>
         <inverse attribute="context_of_items" entity="representation" name="representations_in_context">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
      </entity>
      <entity name="representation_item" super.expression="ONEOF (binary_representation_item, compound_representation_item, mapped_item, value_representation_item) ANDOR ONEOF (boolean_representation_item, date_representation_item, date_time_representation_item, integer_representation_item, logical_representation_item, rational_representation_item, real_representation_item) ANDOR ONEOF (mapped_item, styled_item)">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <where expression="( SIZEOF( using_representations( SELF ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="representation_item_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_representation_item">
            <typename name="representation_item"/>
         </explicit>
         <explicit name="related_representation_item">
            <typename name="representation_item"/>
         </explicit>
      </entity>
      <entity name="representation_map">
         <explicit name="mapping_origin">
            <typename name="representation_item"/>
         </explicit>
         <explicit name="mapped_representation">
            <typename name="representation"/>
         </explicit>
         <inverse attribute="mapping_source" entity="mapped_item" name="map_usage">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
         <where expression="item_in_context( SELF.mapping_origin, SELF.mapped_representation.context_of_items )" label="wr1"/>
      </entity>
      <entity name="representation_proxy_item" supertypes="representation_item"/>
      <entity name="representation_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="rep_1">
            <typename name="representation"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="representation"/>
         </explicit>
      </entity>
      <entity name="representation_relationship_with_transformation" supertypes="representation_relationship">
         <explicit name="transformation_operator">
            <typename name="transformation"/>
         </explicit>
         <where expression="( SELF\representation_relationship.rep_1.context_of_items :&lt;&gt;: SELF\representation_relationship.rep_2.context_of_items )" label="wr1"/>
      </entity>
      <entity name="representative_shape_representation" supertypes="shape_representation">
         <where expression="( unique_in_product_definition( SELF ) OR unique_in_shape_aspect( SELF ) )" label="wr1"/>
      </entity>
      <entity name="requirement_assigned_object" supertypes="group_assignment">
         <explicit name="assigned_group">
            <typename name="requirement_assignment"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="requirement_assigned_item"/>
         </explicit>
      </entity>
      <entity name="requirement_assignment" supertypes="characterized_object group"/>
      <entity name="requirement_for_action_resource" supertypes="action_resource_requirement">
         <explicit name="resources">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="action_resource"/>
         </explicit>
      </entity>
      <entity name="requirement_source" supertypes="group"/>
      <entity name="requirement_view_definition_relationship" supertypes="product_definition_relationship"/>
      <entity name="resistance_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RESISTANCE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="resistance_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.ohm ) )" label="wr1"/>
      </entity>
      <entity name="resource_property">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="resource">
            <typename name="characterized_resource_definition"/>
         </explicit>
      </entity>
      <entity name="resource_property_representation">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="property">
            <typename name="resource_property"/>
         </explicit>
         <explicit name="representation">
            <typename name="representation"/>
         </explicit>
      </entity>
      <entity name="resource_requirement_type">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="restriction_function" supertypes="maths_function unary_generic_expression">
         <explicit name="operand">
            <typename name="maths_space"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
      </entity>
      <entity name="resulting_path" supertypes="link_motion_representation_along_path">
         <explicit name="controlling_joints">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="kinematic_joint"/>
         </explicit>
      </entity>
      <entity name="retention" supertypes="action">
         <where expression="( SIZEOF( QUERY ( aa &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'ACTION_ASSIGNMENT.ASSIGNED_ACTION'  ) | ( ( 'ACTIVITY.APPLIED_ACTION_ASSIGNMENT' IN TYPEOF( aa ) ) AND ( aa.role.&#10;               name = 'retention' ) ) ) ) &gt;= 1 )" label="wr1"/>
         <where expression="( ( SIZEOF( QUERY ( atia &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'APPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS'  ) | ( atia.role.name = 'minimum retention period' ) ) ) = 1 ) AND ( &#10;               SIZEOF( QUERY ( atia &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'APPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS'  ) | ( atia.role.name = 'maximum retention period' ) ) ) = 1 ) AND ( &#10;               SIZEOF( QUERY ( atia1 &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'APPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS'  ) | ( ( atia1.role.name = 'minimum retention period' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TIME_INTERVAL_WITH_BOUNDS'  IN TYPEOF( atia1.&#10;               assigned_time_interval ) ) AND ( EXISTS( atia1.assigned_time_interval\time_interval_with_bounds.secondary_bound ) &#10;               OR EXISTS( atia1.assigned_time_interval\time_interval_with_bounds.duration ) ) AND ( SIZEOF( QUERY ( atia2 &lt;* &#10;               USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'APPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS'  ) | ( ( atia2.role.name = 'maximum retention period' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TIME_INTERVAL_WITH_BOUNDS'  IN TYPEOF( atia2.&#10;               assigned_time_interval ) ) AND ( EXISTS( atia2.assigned_time_interval\time_interval_with_bounds.secondary_bound ) &#10;               OR EXISTS( atia2.assigned_time_interval\time_interval_with_bounds.duration ) ) AND ( atia1.assigned_time_interval\&#10;               time_interval_with_bounds.primary_bound :=: atia2.assigned_time_interval\time_interval_with_bounds.primary_bound ) ) ) ) &#10;               = 1 ) ) ) ) = 1 ) )" label="wr2"/>
         <where expression="( ( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ACTION_RELATIONSHIP.'&#10;               + 'RELATING_ACTION'  ) ) + SIZEOF( USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'ACTION_RELATIONSHIP.RELATED_ACTION' ) ) ) &#10;               = 0 )" label="wr3"/>
      </entity>
      <entity name="revolute_pair" supertypes="low_order_kinematic_pair">
         <derived expression="FALSE" name="t_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="r_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
      </entity>
      <entity name="revolute_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="revolute_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_rotation">
            <typename name="plane_angle_measure"/>
         </explicit>
      </entity>
      <entity name="revolute_pair_with_range" supertypes="revolute_pair">
         <explicit name="lower_limit_actual_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( ( ( NOT EXISTS( lower_limit_actual_rotation ) ) OR ( NOT EXISTS( upper_limit_actual_rotation ) ) ) XOR ( &#10;               lower_limit_actual_rotation &lt; upper_limit_actual_rotation ) )" label="wr1"/>
      </entity>
      <entity name="revolved_area_solid" supertypes="swept_area_solid">
         <explicit name="axis">
            <typename name="axis1_placement"/>
         </explicit>
         <explicit name="angle">
            <typename name="plane_angle_measure"/>
         </explicit>
         <derived expression="representation_item( '' ) || geometric_representation_item(  ) || curve(  ) || line( axis.location, &#10;                     representation_item( '' ) || geometric_representation_item(  ) || vector( axis.z, 1 ) )" name="axis_line">
            <typename name="line"/>
         </derived>
      </entity>
      <entity name="revolved_face_solid" supertypes="swept_face_solid">
         <explicit name="axis">
            <typename name="axis1_placement"/>
         </explicit>
         <explicit name="angle">
            <typename name="plane_angle_measure"/>
         </explicit>
         <derived expression="representation_item( '' ) || geometric_representation_item(  ) || curve(  ) || line( axis.location, &#10;                     representation_item( '' ) || geometric_representation_item(  ) || vector( axis.z, 1 ) )" name="axis_line">
            <typename name="line"/>
         </derived>
      </entity>
      <entity name="revolved_face_solid_with_trim_conditions" supertypes="revolved_face_solid">
         <explicit name="first_trim_condition">
            <typename name="trim_condition_select"/>
         </explicit>
         <explicit name="second_trim_condition">
            <typename name="trim_condition_select"/>
         </explicit>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' IN TYPEOF( &#10;               first_trim_condition ) ) OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' &#10;               IN TYPEOF( second_trim_condition ) ) ) )" label="wr1"/>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE' IN TYPEOF( &#10;               first_trim_condition ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE'  IN TYPEOF( second_trim_condition ) ) AND ( first_trim_condition = second_trim_condition ) ) )" label="wr2"/>
      </entity>
      <entity name="revolved_profile" supertypes="feature_definition">
         <where expression="( SELF\characterized_object.description IN [ 'groove', 'flat', 'round', 'open profile'] )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 2 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'radius' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION_SHAPE_REPRESENTATION'  IN TYPEOF( &#10;               pdr.used_representation ) ) AND ( pdr.used_representation.name = 'removal direction' ) ) ) ) = 1 )" label="wr4"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'open profile' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* &#10;               USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'outer edge shape occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'profile usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OPEN_PATH_PROFILE'  IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) AND ( sdr.relating_shape_aspect.description = 'outer edge shape' ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) &#10;               = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'flat' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'flat edge shape occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'profile usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINEAR_PROFILE'  IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) AND ( sdr.relating_shape_aspect.description = 'flat edge shape' ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) &#10;               = 0 ) )" label="wr6"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'round' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'rounded edge shape occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'profile usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARTIAL_CIRCULAR_PROFILE'  IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) AND ( sdr.relating_shape_aspect.description = 'rounded edge shape' ) ) ) ) = 1 ) ) ) ) = &#10;               1 ) ) ) ) = 0 ) )" label="wr7"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'groove' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'sweep occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'profile usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SQUARE_U_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARTIAL_CIRCULAR_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUNDED_U_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VEE_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEE_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OPEN_PATH_PROFILE' ] * TYPEOF( sdr.&#10;               relating_shape_aspect ) ) = 1 ) AND ( sdr.relating_shape_aspect.description = 'sweep' ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) &#10;               = 0 ) )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;               used_representation ) ) AND ( pdr.used_representation.name = 'maximum feature limit' ) ) ) ) &gt;= 0 )" label="wr9"/>
      </entity>
      <entity name="rgc_with_dimension" supertypes="radius_geometric_constraint">
         <explicit name="radius_value">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="rib_top" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'rib top condition occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'rib top usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIB_TOP_FLOOR'  IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIB_TOP' IN &#10;               TYPEOF( sdr.related_shape_aspect.of_shape.definition ) ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION_SHAPE_REPRESENTATION' IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( pdr.used_representation.name = 'removal direction' ) ) ) ) = 1 ) ) ) ) = &#10;               1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;               used_representation ) ) AND ( pdr.used_representation.name = 'maximum feature limit' ) ) ) ) &gt;= 0 )" label="wr3"/>
      </entity>
      <entity name="rib_top_floor" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SELF.description IN [ 'planar', 'complex'] )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;               + 'RELATING_SHAPE_ASPECT'  ) | ( ( sar.description = 'rib top usage' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;               sar ) ) ) ) | ( ( fcr.related_shape_aspect.description = 'rib top condition occurrence' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIB_TOP'  IN TYPEOF( fcr.related_shape_aspect.&#10;               of_shape.definition ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIB_TOP_FLOOR' IN&#10;               TYPEOF( fcr.relating_shape_aspect ) ) ) ) ) &gt;= 1 )" label="wr3"/>
         <where expression="( ( NOT ( SELF.description = 'complex' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;               used_representation ) ) AND ( pdr.used_representation.name = 'rib top face' ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( ( NOT ( SELF.description = 'planar' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;               used_representation ) ) AND ( pdr.used_representation.name = 'rib top face' ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( SELF.description = 'planar' ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'boundary occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'profile usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_CLOSED_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NGON_CLOSED_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_CLOSED_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLOSED_PATH_PROFILE' ] * TYPEOF( sdr.&#10;               relating_shape_aspect ) ) = 1 ) AND ( sdr.relating_shape_aspect.description = 'rib top floor boundary' ) ) ) ) = 1 ) ) ) ) &#10;               = 1 ) ) ) ) = 0 ) )" label="wr6"/>
      </entity>
      <entity name="right_angular_wedge" supertypes="geometric_representation_item">
         <explicit name="position">
            <typename name="axis2_placement_3d"/>
         </explicit>
         <explicit name="x">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="y">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="z">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="ltx">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( 0 &lt;= ltx ) AND ( ltx &lt; x ) )" label="wr1"/>
      </entity>
      <entity name="right_circular_cone" supertypes="geometric_representation_item">
         <explicit name="position">
            <typename name="axis1_placement"/>
         </explicit>
         <explicit name="height">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="radius">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="semi_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( radius &gt;= 0 )" label="wr1"/>
      </entity>
      <entity name="right_circular_cylinder" supertypes="geometric_representation_item">
         <explicit name="position">
            <typename name="axis1_placement"/>
         </explicit>
         <explicit name="height">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="radius">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="right_to_usage_association" supertypes="action_method_relationship">
         <explicit name="relating_method">
            <typename name="information_usage_right"/>
            <redeclaration entity-ref="action_method_relationship"/>
         </explicit>
         <explicit name="related_method">
            <typename name="information_right"/>
            <redeclaration entity-ref="action_method_relationship"/>
         </explicit>
         <derived expression="SELF\action_method_relationship.related_method" name="right_applied">
            <typename name="information_right"/>
         </derived>
         <derived expression="SELF\action_method_relationship.relating_method" name="right_usage">
            <typename name="information_usage_right"/>
         </derived>
      </entity>
      <entity name="rigid_link_representation" supertypes="kinematic_link_representation"/>
      <entity name="rigid_subsketch" supertypes="subsketch"/>
      <entity name="role_association">
         <explicit name="role">
            <typename name="object_role"/>
         </explicit>
         <explicit name="item_with_role">
            <typename name="role_select"/>
         </explicit>
      </entity>
      <entity name="rolling_curve_pair" supertypes="planar_curve_pair"/>
      <entity name="rolling_curve_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="rolling_curve_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_point_on_curve_1">
            <typename name="point_on_curve"/>
         </explicit>
         <where expression="( SELF\pair_value.applies_to_pair\planar_curve_pair.curve_1 :=: actual_point_on_curve_1.basis_curve )" label="wr1"/>
      </entity>
      <entity name="rolling_surface_pair" supertypes="surface_pair"/>
      <entity name="rolling_surface_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="rolling_surface_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_point_on_surface">
            <typename name="point_on_surface"/>
         </explicit>
         <explicit name="actual_rotation">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( SELF\pair_value.applies_to_pair\surface_pair.surface_1 :=: actual_point_on_surface.basis_surface )" label="wr1"/>
      </entity>
      <entity name="rotation_about_direction" supertypes="geometric_representation_item">
         <explicit name="direction_of_axis">
            <typename name="direction"/>
         </explicit>
         <explicit name="rotation_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( SIZEOF( direction_of_axis.direction_ratios ) = 3 )" label="wr1"/>
      </entity>
      <entity name="round_hole" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'diameter occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'profile usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_CLOSED_PROFILE'  IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) AND ( sdr.name = 'diameter' ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'hole depth occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'path feature component usage' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_FEATURE_COMPONENT' IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) AND ( sdr.name = 'hole depth' ) AND ( sdr.relating_shape_aspect.description = 'linear' ) ) ) ) &#10;               = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'bottom condition occurrence' ) AND ( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'hole bottom usage' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;               sar ) ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.HOLE_BOTTOM' IN TYPEOF( fcr.&#10;               relating_shape_aspect ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUND_HOLE' IN &#10;               TYPEOF( fcr.related_shape_aspect.of_shape.definition ) ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'change in diameter occurrence' ) AND ( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'taper usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TAPER'  IN TYPEOF( fcr.relating_shape_aspect ) ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUND_HOLE' IN TYPEOF( fcr.&#10;               related_shape_aspect.of_shape.definition ) ) ) ) ) = 1 ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 )" label="wr5"/>
      </entity>
      <entity name="rounded_end" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'partial circular boundary occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'profile usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARTIAL_CIRCULAR_PROFILE'  IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'course of travel occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'path feature component usage' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_FEATURE_COMPONENT' IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) AND ( sdr.relating_shape_aspect.description = 'linear' ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = &#10;               0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;               used_representation ) ) AND ( pdr.used_representation.name = 'maximum feature limit' ) ) ) ) &gt;= 0 )" label="wr4"/>
      </entity>
      <entity name="rounded_u_profile" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( ( NOT ( SIZEOF( impl_rep.used_representation.items ) &gt;= 1 ) ) AND ( &#10;               SIZEOF( impl_rep.used_representation.items ) &lt;= 2 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( srwp_i &lt;* pdr.used_representation.items | ( ( srwp_i.name &#10;               = 'orientation' ) OR ( srwp_i.name = 'depth' ) ) ) ) = SIZEOF( pdr.used_representation.items ) ) ) ) ) = 1 ) ) ) = &#10;               1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'width' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION' IN TYPEOF( &#10;               pdr.used_representation ) ) AND ( pdr.used_representation.name = 'profile limit' ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'depth' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
      </entity>
      <entity name="roundness_tolerance" supertypes="geometric_tolerance">
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE'  ) IN TYPEOF( SELF ) ) )" label="wr1"/>
      </entity>
      <entity name="routed_interconnect_component" supertypes="item_identified_representation_usage physical_component"/>
      <entity name="routed_physical_component" supertypes="item_identified_representation_usage physical_component"/>
      <entity name="routed_physical_shield" supertypes="physical_shield routed_physical_component"/>
      <entity name="routed_shield" supertypes="integral_shield"/>
      <entity name="routed_transmission_line" supertypes="assembly_component"/>
      <entity name="row_representation_item" supertypes="compound_representation_item">
         <explicit name="item_element">
            <typename name="list_representation_item"/>
            <redeclaration entity-ref="compound_representation_item"/>
         </explicit>
      </entity>
      <entity name="row_value" supertypes="compound_representation_item"/>
      <entity name="row_variable" supertypes="abstract_variable"/>
      <entity name="rule_action" supertypes="action"/>
      <entity name="rule_condition" supertypes="atomic_formula"/>
      <entity name="rule_definition" supertypes="rule_software_definition"/>
      <entity name="rule_set" supertypes="rule_software_definition"/>
      <entity name="rule_set_group" supertypes="rule_software_definition"/>
      <entity name="rule_software_definition" supertypes="product_definition"/>
      <entity name="rule_superseded_assignment" supertypes="action_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="rule_superseded_item"/>
         </explicit>
      </entity>
      <entity name="rule_supersedence" supertypes="rule_action"/>
      <entity name="ruled_surface_swept_area_solid" supertypes="surface_curve_swept_area_solid">
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_SURFACE' IN TYPEOF( SELF.&#10;               reference_surface ) ) AND ( SELF.reference_surface\b_spline_surface.u_degree = 1 ) )" label="wr1"/>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( SELF.directrix ) ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE'  IN TYPEOF( SELF.directrix\&#10;               surface_curve.curve_3d ) ) AND ( SELF.directrix\surface_curve.curve_3d\b_spline_curve.degree = SELF.&#10;               reference_surface\b_spline_surface.v_degree ) ) )" label="wr2"/>
      </entity>
      <entity name="runout_zone_definition" supertypes="tolerance_zone_definition">
         <explicit name="orientation">
            <typename name="runout_zone_orientation"/>
         </explicit>
      </entity>
      <entity name="runout_zone_orientation">
         <explicit name="angle">
            <typename name="plane_angle_measure_with_unit"/>
         </explicit>
      </entity>
      <entity name="runout_zone_orientation_reference_direction" supertypes="runout_zone_orientation">
         <explicit name="orientation_defining_relationship">
            <typename name="shape_aspect_relationship"/>
         </explicit>
      </entity>
      <entity name="satisfied_requirement" supertypes="group_assignment">
         <explicit name="assigned_group">
            <typename name="satisfies_requirement"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="product_definition"/>
         </explicit>
      </entity>
      <entity name="satisfies_requirement" supertypes="group"/>
      <entity name="satisfying_item" supertypes="group_assignment">
         <explicit name="assigned_group">
            <typename name="satisfies_requirement"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="requirement_satisfaction_item"/>
         </explicit>
      </entity>
      <entity name="scalar_terminal_definition_link" supertypes="shape_aspect shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="functional_unit_terminal_definition"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="SELF\shape_aspect_relationship.related_shape_aspect"/>
            <unique.attribute attribute="relating_shape_aspect"/>
         </unique>
         <where expression="( SELF\shape_aspect_relationship.related_shape_aspect :&lt;&gt;: SELF\shape_aspect_relationship.relating_shape_aspect )" label="wr1"/>
      </entity>
      <entity name="scalar_variable" supertypes="abstract_variable"/>
      <entity name="schema_based_model_parameter" supertypes="model_parameter"/>
      <entity name="screw_pair" supertypes="low_order_kinematic_pair_with_motion_coupling">
         <explicit name="pitch">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( lr &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) &#10;               = 0 )" label="wr1"/>
      </entity>
      <entity name="screw_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="screw_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_rotation">
            <typename name="plane_angle_measure"/>
         </explicit>
         <derived expression="( SELF\pair_value.applies_to_pair\screw_pair.pitch * &#10;                              plane_angle_for_pair_in_radian( SELF\pair_value.applies_to_pair, actual_rotation ) ) / ( 2 * PI )" name="actual_translation">
            <typename name="length_measure"/>
         </derived>
      </entity>
      <entity name="screw_pair_with_range" supertypes="screw_pair">
         <explicit name="lower_limit_actual_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( ( ( NOT EXISTS( lower_limit_actual_rotation ) ) OR ( NOT EXISTS( upper_limit_actual_rotation ) ) ) XOR ( &#10;               lower_limit_actual_rotation &lt; upper_limit_actual_rotation ) )" label="wr1"/>
      </entity>
      <entity name="sculptured_solid" supertypes="modified_solid">
         <explicit name="sculpturing_element">
            <typename name="generalized_surface_select"/>
         </explicit>
         <explicit name="positive_side">
            <builtintype type="BOOLEAN"/>
         </explicit>
      </entity>
      <entity name="sdgc_with_dimension" supertypes="surface_distance_geometric_constraint">
         <explicit name="distance_value">
            <typename name="non_negative_length_measure"/>
         </explicit>
      </entity>
      <entity name="seam_curve" supertypes="surface_curve">
         <where expression="( SIZEOF( SELF\surface_curve.associated_geometry ) = 2 )" label="wr1"/>
         <where expression="( associated_surface( SELF\surface_curve.associated_geometry[1] ) = associated_surface( SELF\surface_curve.&#10;               associated_geometry[2] ) )" label="wr2"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( SELF\surface_curve.&#10;               associated_geometry[1] ) )" label="wr3"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( SELF\surface_curve.&#10;               associated_geometry[2] ) )" label="wr4"/>
      </entity>
      <entity name="seating_plane" supertypes="shape_aspect"/>
      <entity name="secondary_orientation_feature" supertypes="shape_aspect">
         <where expression="( SELF.product_definitional = TRUE )" label="wr1"/>
      </entity>
      <entity name="security_classification">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="purpose">
            <typename name="text"/>
         </explicit>
         <explicit name="security_level">
            <typename name="security_classification_level"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="security_classification_assignment">
         <explicit name="assigned_security_classification">
            <typename name="security_classification"/>
         </explicit>
         <derived expression="get_role( SELF )" name="role">
            <typename name="object_role"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ROLE_ASSOCIATION.'&#10;               + 'ITEM_WITH_ROLE'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="security_classification_level">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="selector_function" supertypes="maths_function generic_literal">
         <explicit name="selector">
            <typename name="input_selector"/>
         </explicit>
         <explicit name="source_of_domain">
            <typename name="maths_space_or_function"/>
         </explicit>
         <where expression="no_cyclic_domain_reference( source_of_domain, [SELF] )" label="wr1"/>
         <where expression="expression_is_constant( domain_from( source_of_domain ) )" label="wr2"/>
      </entity>
      <entity name="self_intersecting_curve" supertypes="self_intersecting_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="arc_length_separation_factor">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="interference_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE'] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'POINT_ON_CURVE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_CURVE'] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr4"/>
      </entity>
      <entity abstract.supertype="YES" name="self_intersecting_geometry" super.expression="ONEOF (self_intersecting_curve, self_intersecting_surface)" supertypes="inapt_geometry"/>
      <entity name="self_intersecting_loop" supertypes="topology_related_to_self_intersecting_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="arc_length_distance_factor">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="interference_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'POINT_ON_EDGE_CURVE', 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'POINT_ON_EDGE_CURVE' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr4"/>
      </entity>
      <entity name="self_intersecting_shell" supertypes="topology_related_to_self_intersecting_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="geodesic_separation_factor">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="interference_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CONNECTED_FACE_SET' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'POINT_ON_FACE_SURFACE', 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'POINT_ON_FACE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr4"/>
      </entity>
      <entity name="self_intersecting_surface" supertypes="self_intersecting_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <explicit name="geodesic_separation_factor">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="interference_tolerance">
            <typename name="length_measure"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE'] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'POINT_ON_SURFACE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_SURFACE'] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr4"/>
      </entity>
      <entity name="sequential_laminate_passage_based_fabrication_joint" supertypes="shape_aspect"/>
      <entity name="sequential_laminate_stackup_component" supertypes="physical_component"/>
      <entity name="sequential_laminate_stackup_definition" supertypes="product_definition"/>
      <entity name="serial_numbered_effectivity" supertypes="effectivity">
         <explicit name="effectivity_start_id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="effectivity_end_id" optional="YES">
            <typename name="identifier"/>
         </explicit>
      </entity>
      <entity name="series_composed_function" supertypes="maths_function multiple_arity_generic_expression">
         <explicit name="operands">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="maths_function"/>
            <redeclaration entity-ref="multiple_arity_generic_expression"/>
         </explicit>
         <where expression="composable_sequence( SELF\multiple_arity_generic_expression.operands )" label="wr1"/>
      </entity>
      <entity name="shape_aspect" super.expression="ONEOF (minimally_defined_bare_die_terminal, assembly_module_terminal, cable_terminal, interconnect_module_terminal, packaged_part_terminal) ANDOR ONEOF (minimally_defined_bare_die_terminal, assembly_module_terminal, cable_terminal, packaged_part_terminal) ANDOR ONEOF (package_body, primary_orientation_feature, secondary_orientation_feature, tertiary_orientation_feature) ANDOR ONEOF (contacting_feature, datum, datum_feature, datum_target, datum_system, general_datum_reference) ANDOR ONEOF (seating_plane, reference_graphic_registration_mark, mounting_restriction_area, mounting_restriction_volume)">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="of_shape">
            <typename name="product_definition_shape"/>
         </explicit>
         <explicit name="product_definitional">
            <builtintype type="LOGICAL"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <unique label="ur1">
            <unique.attribute attribute="id"/>
            <unique.attribute attribute="of_shape"/>
         </unique>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ID_ATTRIBUTE.'&#10;               + 'IDENTIFIED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="shape_aspect_associativity" supertypes="shape_aspect_relationship">
         <where expression="SELF.relating_shape_aspect.product_definitional" label="wr1"/>
         <where expression="( NOT SELF.related_shape_aspect.product_definitional )" label="wr2"/>
      </entity>
      <entity name="shape_aspect_deriving_relationship" supertypes="shape_aspect_relationship">
         <explicit name="relating_shape_aspect">
            <typename name="derived_shape_aspect"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </explicit>
      </entity>
      <entity name="shape_aspect_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_shape_aspect">
            <typename name="shape_aspect"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="shape_aspect"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'ID_ATTRIBUTE.'&#10;               + 'IDENTIFIED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="shape_aspect_relationship_representation_association">
         <explicit name="represented_shape_aspect_relationship">
            <typename name="shape_aspect_relationship"/>
         </explicit>
         <explicit name="representing_representation_relationship">
            <typename name="representation_relationship"/>
         </explicit>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATIVE_SHAPE_REPRESENTATION' IN &#10;               TYPEOF( representing_representation_relationship\representation_relationship.rep_1 ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATIVE_SHAPE_REPRESENTATION'  IN &#10;               TYPEOF( representing_representation_relationship\representation_relationship.rep_2 ) ) )" label="wr1"/>
         <where expression="( ( represented_shape_aspect_relationship.relating_shape_aspect IN using_shape_aspect_of_shape_representation( &#10;               representing_representation_relationship.rep_1 ) ) AND ( represented_shape_aspect_relationship.related_shape_aspect &#10;               IN using_shape_aspect_of_shape_representation( representing_representation_relationship.rep_2 ) ) )" label="wr2"/>
         <where expression="( ( find_representative_shape_representation_of_product_definition( using_product_definition_of_shape_aspect( &#10;               represented_shape_aspect_relationship.relating_shape_aspect ) ).context_of_items :=: &#10;               find_representative_shape_representation_of_shape_aspect( represented_shape_aspect_relationship.&#10;               relating_shape_aspect ).context_of_items ) AND ( find_representative_shape_representation_of_product_definition( &#10;               using_product_definition_of_shape_aspect( represented_shape_aspect_relationship.related_shape_aspect ) ).&#10;               context_of_items :=: find_representative_shape_representation_of_shape_aspect( &#10;               represented_shape_aspect_relationship.related_shape_aspect ).context_of_items ) )" label="wr3"/>
         <where expression="( using_product_definition_of_shape_aspect( represented_shape_aspect_relationship.relating_shape_aspect ) :&lt;&gt;: &#10;               using_product_definition_of_shape_aspect( represented_shape_aspect_relationship.related_shape_aspect ) )" label="wr4"/>
         <where expression="( find_assembly_root( [using_product_definition_of_shape_aspect( represented_shape_aspect_relationship.&#10;               relating_shape_aspect )] ) :=: find_assembly_root( [using_product_definition_of_shape_aspect( &#10;               represented_shape_aspect_relationship.related_shape_aspect )] ) )" label="wr5"/>
      </entity>
      <entity name="shape_criteria_representation_with_accuracy" supertypes="shape_data_quality_criteria_representation">
         <explicit name="required_general_accuracy">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="shape_measurement_accuracy"/>
         </explicit>
      </entity>
      <entity name="shape_data_quality_assessment_by_logical_test" supertypes="data_quality_assessment_specification"/>
      <entity name="shape_data_quality_assessment_by_numerical_test" supertypes="data_quality_assessment_specification">
         <explicit name="threshold">
            <typename name="shape_data_quality_value_limit_type_select"/>
         </explicit>
      </entity>
      <entity name="shape_data_quality_criteria_representation" supertypes="data_quality_criteria_representation">
         <where expression="( SIZEOF( QUERY ( q &lt;* SELF\representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_DATA_QUALITY_CRITERION' ) IN &#10;               TYPEOF( q ) ) ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="shape_data_quality_criterion" super.expression="ONEOF (erroneous_data, inapt_data)" supertypes="data_quality_criterion data_quality_measurement_requirement">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_specification_select"/>
         </explicit>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DATA_QUALITY_CRITERION_ASSESSMENT_ASSOCIATION.'  + 'CRITERION' ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( i1 &lt;* bag_to_set( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'REPRESENTATION_ITEM_RELATIONSHIP.' + 'RELATED_REPRESENTATION_ITEM' ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;               'DATA_QUALITY_CRITERION_MEASUREMENT_ASSOCIATION'  ) IN TYPEOF( i1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( i1 &lt;* bag_to_set( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'REPRESENTATION_ITEM_RELATIONSHIP.' + 'RELATING_REPRESENTATION_ITEM' ) ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;               'DATA_QUALITY_CRITERION_MEASUREMENT_ASSOCIATION'  ) IN TYPEOF( i1 ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="shape_data_quality_criterion_and_accuracy_association">
         <explicit name="required_specific_accuracy">
            <typename name="shape_measurement_accuracy"/>
         </explicit>
         <explicit name="shape_data_quality_criterion">
            <typename name="shape_data_quality_criterion"/>
         </explicit>
      </entity>
      <entity name="shape_data_quality_inspected_shape_and_result_relationship" supertypes="shape_representation_relationship">
         <explicit name="rep_1">
            <typename name="shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="shape_data_quality_inspection_result_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <where expression="( SIZEOF( using_product_definition_of_shape_representation( SELF.rep_1 ) * bag_to_set( inspected_product_definition( &#10;               SELF.rep_2 ) ) ) &gt; 0 )" label="wr1"/>
         <where expression="( SELF.rep_1\representation.context_of_items :=: SELF.rep_2\representation.context_of_items )" label="wr2"/>
      </entity>
      <entity name="shape_data_quality_inspection_criterion_report" supertypes="data_quality_inspection_criterion_report">
         <explicit name="representative_measured_value">
            <typename name="measured_value_select"/>
         </explicit>
      </entity>
      <entity name="shape_data_quality_inspection_instance_report" supertypes="data_quality_inspection_instance_report">
         <explicit name="inspected_instances">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="shape_data_quality_inspection_instance_report_item"/>
            <redeclaration entity-ref="data_quality_inspection_instance_report"/>
         </explicit>
      </entity>
      <entity name="shape_data_quality_inspection_instance_report_item" supertypes="data_quality_inspection_instance_report_item">
         <explicit name="inspected_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="inspected_shape_element_select"/>
            <redeclaration entity-ref="data_quality_inspection_instance_report_item"/>
         </explicit>
         <explicit name="measured_value">
            <typename name="measured_value_select"/>
         </explicit>
      </entity>
      <entity name="shape_data_quality_inspection_result" supertypes="data_quality_inspection_result">
         <explicit name="criterion_inspected">
            <typename name="shape_data_quality_criterion"/>
            <redeclaration entity-ref="data_quality_inspection_result"/>
         </explicit>
      </entity>
      <entity name="shape_data_quality_inspection_result_representation" supertypes="data_quality_inspection_result_representation">
         <where expression="( SIZEOF( QUERY ( q &lt;* SELF\representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_DATA_QUALITY_INSPECTION_RESULT' ) &#10;               IN TYPEOF( q ) ) ) ) &gt; 0 )" label="wr1"/>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_REPRESENTATION_CONTEXT' IN TYPEOF( &#10;               SELF\representation.context_of_items ) )" label="wr2"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'SHAPE_DATA_QUALITY_INSPECTED_SHAPE_AND_RESULT_RELATIONSHIP.'  + 'REP_2' ) ) &gt; 0 )" label="wr3"/>
      </entity>
      <entity name="shape_data_quality_lower_value_limit" supertypes="shape_data_quality_value_limit">
         <where expression="( SELF\qualified_representation_item.qualifiers[1].name = 'minimum' )" label="wr1"/>
      </entity>
      <entity name="shape_data_quality_upper_value_limit" supertypes="shape_data_quality_value_limit">
         <where expression="( SELF\qualified_representation_item.qualifiers[1].name = 'maximum' )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="shape_data_quality_value_limit" super.expression="ONEOF (shape_data_quality_upper_value_limit, shape_data_quality_lower_value_limit)" supertypes="measure_representation_item qualified_representation_item"/>
      <entity name="shape_data_quality_value_range" supertypes="compound_representation_item">
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SET_REPRESENTATION_ITEM' IN TYPEOF( SELF\&#10;               compound_representation_item.item_element ) ) AND ( SIZEOF( SELF\compound_representation_item.item_element ) = 2 ) &#10;               AND ( ( SIZEOF( QUERY ( i1 &lt;* SELF\compound_representation_item.item_element | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i1 ) ) ) ) &#10;               = 2 ) OR ( SIZEOF( QUERY ( i2 &lt;* SELF\compound_representation_item.item_element | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VALUE_REPRESENTATION_ITEM'  IN TYPEOF( i2 ) ) ) ) &#10;               = 2 ) ) )" label="wr1"/>
         <where expression="( ( SIZEOF( QUERY ( i &lt;* SELF\compound_representation_item.item_element | ( i.name = 'upper limit' ) ) ) = 1 ) AND ( &#10;               SIZEOF( QUERY ( i &lt;* SELF\compound_representation_item.item_element | ( i.name = 'lower limit' ) ) ) = 1 ) )" label="wr2"/>
         <where expression="( ( SIZEOF( QUERY ( i1 &lt;* SELF\compound_representation_item.item_element | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i1 ) ) &#10;               AND ( SIZEOF( QUERY ( i2 &lt;* SELF\compound_representation_item.item_element | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i2 ) ) &#10;               AND ( i1 :&lt;&gt;: i2 ) AND ( i1\measure_with_unit.unit_component :=: i2\measure_with_unit.unit_component ) ) ) ) = 1 ) ) ) ) &#10;               = 2 ) OR ( SIZEOF( QUERY ( i1 &lt;* SELF\compound_representation_item.item_element | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VALUE_REPRESENTATION_ITEM'  IN TYPEOF( i1 ) ) &#10;               AND ( SIZEOF( QUERY ( i2 &lt;* SELF\compound_representation_item.item_element | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VALUE_REPRESENTATION_ITEM'  IN TYPEOF( i2 ) ) &#10;               AND ( i1 :&lt;&gt;: i2 ) AND ( TYPEOF( i1\value_representation_item.value_component ) = TYPEOF( i2\&#10;               value_representation_item.value_component ) ) ) ) ) = 1 ) ) ) ) = 2 ) )" label="wr3"/>
      </entity>
      <entity name="shape_defining_relationship" supertypes="shape_aspect_relationship"/>
      <entity name="shape_definition_3d_intersection" super.expression="ONEOF (edge_segment_cross_section, pre_defined_parallel_datum_axis_symbol_3d_2d_relationship, pre_defined_perpendicular_datum_axis_symbol_3d_2d_relationship, pre_defined_perpendicular_datum_plane_symbol_3d_2d_relationship) ANDOR ONEOF (pre_defined_parallel_datum_axis_symbol_3d_2d_relationship, pre_defined_perpendicular_datum_axis_symbol_3d_2d_relationship, pre_defined_perpendicular_datum_plane_symbol_3d_2d_relationship)" supertypes="representation shape_representation_relationship representation_relationship_with_transformation">
         <explicit name="transformation_operator">
            <typename name="item_defined_transformation"/>
            <redeclaration entity-ref="representation_relationship_with_transformation"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="SELF\representation_relationship.rep_1"/>
            <unique.attribute attribute="SELF\representation_relationship.rep_2"/>
         </unique>
         <where expression="( SELF\representation_relationship.rep_1 :&lt;&gt;: SELF\representation_relationship.rep_2 )" label="wr1"/>
      </entity>
      <entity name="shape_definition_representation" supertypes="property_definition_representation">
         <explicit name="definition">
            <typename name="property_definition"/>
            <redeclaration entity-ref="property_definition_representation"/>
         </explicit>
         <explicit name="used_representation">
            <typename name="shape_representation"/>
            <redeclaration entity-ref="property_definition_representation"/>
         </explicit>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( &#10;               definition ) ) OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINITION' IN &#10;               TYPEOF( definition\property_definition.definition ) ) )" label="wr1"/>
      </entity>
      <entity name="shape_dimension_representation" supertypes="shape_representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="shape_dimension_representation_item"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
      </entity>
      <entity name="shape_feature_definition" supertypes="feature_definition"/>
      <entity name="shape_formed_terminal" supertypes="altered_package_terminal"/>
      <entity name="shape_inspection_result_accuracy_association">
         <explicit name="applied_specific_accuracy">
            <typename name="shape_measurement_accuracy"/>
         </explicit>
         <explicit name="shape_data_quality_result">
            <typename name="shape_data_quality_inspection_result"/>
         </explicit>
      </entity>
      <entity name="shape_inspection_result_representation_with_accuracy" supertypes="shape_data_quality_inspection_result_representation">
         <explicit name="applied_general_accuracy">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="shape_measurement_accuracy"/>
         </explicit>
      </entity>
      <entity name="shape_measurement_accuracy">
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="range">
            <typename name="shape_data_quality_value_limit_type_select"/>
         </explicit>
      </entity>
      <entity name="shape_representation" supertypes="representation"/>
      <entity name="shape_representation_relationship" supertypes="representation_relationship">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION' IN ( TYPEOF( SELF\&#10;               representation_relationship.rep_1 ) + TYPEOF( SELF\representation_relationship.rep_2 ) ) )" label="wr1"/>
      </entity>
      <entity name="shape_representation_with_parameters" supertypes="shape_representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="shape_representation_with_parameters_items"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
      </entity>
      <entity name="shape_summary_request_with_representative_value" supertypes="summary_report_request"/>
      <entity name="shell_based_surface_model" supertypes="geometric_representation_item">
         <explicit name="sbsm_boundary">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="shell"/>
         </explicit>
         <where expression="constraints_geometry_shell_based_surface_model( SELF )" label="wr1"/>
      </entity>
      <entity name="shell_based_wireframe_model" supertypes="geometric_representation_item">
         <explicit name="sbwm_boundary">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="shell"/>
         </explicit>
         <where expression="constraints_geometry_shell_based_wireframe_model( SELF )" label="wr1"/>
      </entity>
      <entity name="shell_based_wireframe_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( SIZEOF( [&#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_WIREFRAME_MODEL' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' , &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) &#10;                = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHELL_BASED_WIREFRAME_MODEL' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'] &#10;                * TYPEOF( it ) ) = 1 ) ) ) &gt;= 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( sbwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( ws &lt;* QUERY ( sb &lt;* sbwm\shell_based_wireframe_model.sbwm_boundary | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.WIRE_SHELL'  IN TYPEOF( sb ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( eloop &lt;* QUERY ( wsb &lt;* ws\wire_shell.wire_shell_extent | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( wsb ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( el &lt;* eloop\path.edge_list | ( NOT ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_CURVE'  IN TYPEOF( el.edge_element ) ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( sbwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( ws &lt;* QUERY ( sb &lt;* sbwm\shell_based_wireframe_model.sbwm_boundary | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.WIRE_SHELL'  IN TYPEOF( sb ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( eloop &lt;* QUERY ( wsb &lt;* ws\wire_shell.wire_shell_extent | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( wsb ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( pline_el &lt;* QUERY ( el &lt;* eloop\path.edge_list | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE'  IN TYPEOF( el.edge_element\&#10;                edge_curve.edge_geometry ) ) ) | ( NOT ( SIZEOF( pline_el.edge_element\edge_curve.edge_geometry\polyline.points ) &#10;                &gt; 2 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( sbwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( ws &lt;* QUERY ( sb &lt;* sbwm\shell_based_wireframe_model.sbwm_boundary | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.WIRE_SHELL'  IN TYPEOF( sb ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( eloop &lt;* QUERY ( wsb &lt;* ws\wire_shell.wire_shell_extent | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( wsb ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( el &lt;* eloop\path.edge_list | ( NOT valid_wireframe_edge_curve( el.edge_element\edge_curve.&#10;                edge_geometry ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( sbwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( ws &lt;* QUERY ( sb &lt;* sbwm\shell_based_wireframe_model.sbwm_boundary | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.WIRE_SHELL'  IN TYPEOF( sb ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( eloop &lt;* QUERY ( wsb &lt;* ws\wire_shell.wire_shell_extent | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( wsb ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( el &lt;* eloop\path.edge_list | ( NOT ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT'  IN TYPEOF( el.edge_element.&#10;                edge_start ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT' IN TYPEOF( &#10;                el.edge_element.edge_end ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( sbwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( ws &lt;* QUERY ( sb &lt;* sbwm\shell_based_wireframe_model.sbwm_boundary | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.WIRE_SHELL'  IN TYPEOF( sb ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( eloop &lt;* QUERY ( wsb &lt;* ws\wire_shell.wire_shell_extent | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'  IN TYPEOF( wsb ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( el &lt;* eloop\path.edge_list | ( NOT ( valid_wireframe_vertex_point( el.edge_element.edge_start\&#10;                vertex_point.vertex_geometry ) AND valid_wireframe_vertex_point( el.edge_element.edge_end\vertex_point.&#10;                vertex_geometry ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( sbwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( ws &lt;* QUERY ( sb &lt;* sbwm\shell_based_wireframe_model.sbwm_boundary | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.WIRE_SHELL'  IN TYPEOF( sb ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( vloop &lt;* QUERY ( wsb &lt;* ws\wire_shell.wire_shell_extent | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_LOOP'  IN TYPEOF( wsb ) ) ) | ( NOT ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT'  IN TYPEOF( vloop\vertex_loop.&#10;                loop_vertex ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( sbwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( ws &lt;* QUERY ( sb &lt;* sbwm\shell_based_wireframe_model.sbwm_boundary | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.WIRE_SHELL'  IN TYPEOF( sb ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( vloop &lt;* QUERY ( wsb &lt;* ws\wire_shell.wire_shell_extent | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_LOOP'  IN TYPEOF( wsb ) ) ) | ( NOT &#10;                valid_wireframe_vertex_point( vloop\vertex_loop.loop_vertex\vertex_point.vertex_geometry ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( sbwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( vs &lt;* QUERY ( sb &lt;* sbwm\shell_based_wireframe_model.sbwm_boundary | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_SHELL'  IN TYPEOF( sb ) ) ) | ( NOT ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_POINT'  IN TYPEOF( vs\vertex_shell.&#10;                vertex_shell_extent.loop_vertex ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( sbwm &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_WIREFRAME_MODEL'  IN TYPEOF( it ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( vs &lt;* QUERY ( sb &lt;* sbwm\shell_based_wireframe_model.sbwm_boundary | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_SHELL'  IN TYPEOF( sb ) ) ) | ( NOT &#10;                valid_wireframe_vertex_point( vs\vertex_shell.vertex_shell_extent.loop_vertex\vertex_point.vertex_geometry ) ) ) ) &#10;                = 0 ) ) ) ) = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( &#10;                ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'SHELL_BASED_WIREFRAME_SHAPE_REPRESENTATION'  ) IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) ) ) ) &#10;                = 0 )" label="wr12"/>
         <where expression="( SELF.context_of_items\geometric_representation_context.coordinate_space_dimension = 3 )" label="wr13"/>
      </entity>
      <entity name="shelled_solid" super.expression="ONEOF (double_offset_shelled_solid, complex_shelled_solid)" supertypes="modified_solid">
         <explicit name="deleted_face_set">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="face_surface"/>
         </explicit>
         <explicit name="thickness">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( thickness &lt;&gt; 0 )" label="wr1"/>
      </entity>
      <entity name="short_length_curve" supertypes="nearly_degenerate_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="short_length_curve_segment" supertypes="geometry_with_local_near_degeneracy">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_CURVE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'B_SPLINE_CURVE_SEGMENT'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="short_length_edge" supertypes="topology_related_to_nearly_degenerate_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'EDGE_CURVE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="si_absorbed_dose_unit" supertypes="absorbed_dose_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.gray )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_capacitance_unit" supertypes="capacitance_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.farad )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_conductance_unit" supertypes="conductance_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.siemens )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_dose_equivalent_unit" supertypes="dose_equivalent_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.sievert )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_electric_charge_unit" supertypes="electric_charge_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.coulomb )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_electric_potential_unit" supertypes="electric_potential_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.volt )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_energy_unit" supertypes="energy_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.joule )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_force_unit" supertypes="force_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.newton )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_frequency_unit" supertypes="frequency_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.hertz )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_illuminance_unit" supertypes="illuminance_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.lux )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_inductance_unit" supertypes="inductance_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.henry )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_magnetic_flux_density_unit" supertypes="magnetic_flux_density_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.tesla )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_magnetic_flux_unit" supertypes="magnetic_flux_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.weber )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_power_unit" supertypes="power_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.watt )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_pressure_unit" supertypes="pressure_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.pascal )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_radioactivity_unit" supertypes="radioactivity_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.becquerel )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_resistance_unit" supertypes="resistance_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.ohm )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_unit" supertypes="named_unit">
         <explicit name="prefix" optional="YES">
            <typename name="si_prefix"/>
         </explicit>
         <explicit name="name">
            <typename name="si_unit_name"/>
         </explicit>
         <derived expression="dimensions_for_si_unit( name )" name="dimensions">
            <typename name="dimensional_exponents"/>
            <redeclaration entity-ref="named_unit"/>
         </derived>
         <where expression="( ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MASS_UNIT' IN TYPEOF( SELF ) ) AND ( &#10;               SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DERIVED_UNIT_ELEMENT.UNIT' ) ) &#10;               &gt; 0 ) ) ) OR ( prefix = si_prefix.kilo ) )" label="wr1"/>
      </entity>
      <entity name="signal" supertypes="characterized_object"/>
      <entity name="signal_category" supertypes="group"/>
      <entity abstract.supertype="YES" name="simple_boolean_expression" super.expression="ONEOF (boolean_literal, boolean_variable)" supertypes="boolean_expression simple_generic_expression"/>
      <entity name="simple_clause" supertypes="compound_representation_item"/>
      <entity abstract.supertype="YES" name="simple_generic_expression" super.expression="ONEOF (generic_literal, generic_variable)" supertypes="generic_expression"/>
      <entity abstract.supertype="YES" name="simple_numeric_expression" super.expression="ONEOF (literal_number, numeric_variable)" supertypes="numeric_expression simple_generic_expression"/>
      <entity abstract.supertype="YES" name="simple_string_expression" super.expression="ONEOF (string_literal, string_variable)" supertypes="string_expression simple_generic_expression"/>
      <entity name="simultaneous_constraint_group" supertypes="variational_representation_item">
         <explicit name="constraint_group">
            <aggregate lower="2" type="SET" upper="?"/>
            <typename name="constraint_group_member"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( q &lt;* using_representations( SELF ) | ( SIZEOF( QUERY ( r &lt;* q.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SIMULTANEOUS_CONSTRAINT_GROUP'  IN TYPEOF( r ) ) &#10;               AND ( SIZEOF( QUERY ( s &lt;* constraint_group | ( ( s IN r\simultaneous_constraint_group.constraint_group ) AND ( &#10;               NOT ( r :=: SELF ) ) ) ) ) &gt; 0 ) ) ) ) &gt; 0 ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* using_representations( constraint_group[1] ) | ( SIZEOF( QUERY ( r &lt;* constraint_group | &#10;               item_in_context( r, q.context_of_items ) ) ) = SIZEOF( constraint_group ) ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* constraint_group | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'EXPLICIT_CONSTRAINT'  IN TYPEOF( q ) ) AND ( SIZEOF( QUERY ( r &lt;* q.constrained_elements | ( SIZEOF( &#10;               QUERY ( s &lt;* constraint_group | ( r IN s.reference_elements ) ) ) &gt; 0 ) ) ) &gt; 0 ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="sin_function" supertypes="unary_function_call"/>
      <entity name="single_area_csg_2d_shape_representation" supertypes="csg_2d_shape_representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="csg_2d_area_select"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' &#10;               IN TYPEOF( it ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CSG_SOLID_2D'  IN TYPEOF( it ) ) ) ) = 1 )" label="wr2"/>
      </entity>
      <entity name="single_boundary_csg_2d_shape_representation" supertypes="single_area_csg_2d_shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CSG_PRIMITIVE_SOLID_2D'  IN TYPEOF( it ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRIMITIVE_2D_WITH_INNER_BOUNDARY'  IN TYPEOF( &#10;               it\csg_primitive_solid_2d.tree_root_expression ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="single_property_is_definition" supertypes="property_definition">
         <explicit name="definition">
            <typename name="product_definition"/>
            <redeclaration entity-ref="property_definition"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="definition"/>
         </unique>
      </entity>
      <entity abstract.supertype="YES" name="single_stratum_continuous_template" super.expression="ONEOF (stratum_feature_template, material_removal_feature_template)" supertypes="continuous_template single_stratum_template"/>
      <entity name="single_stratum_printed_component" supertypes="printed_component structured_layout_component"/>
      <entity name="single_stratum_printed_part_template" supertypes="structured_printed_part_template single_stratum_structured_template"/>
      <entity name="single_stratum_special_symbol_component" super.expression="primary_stratum_indicator_symbol" supertypes="structured_layout_component"/>
      <entity name="single_stratum_special_symbol_template" supertypes="single_stratum_structured_template special_symbol_template"/>
      <entity abstract.supertype="YES" name="single_stratum_structured_template" super.expression="ONEOF (material_removal_structured_template, single_stratum_special_symbol_template)" supertypes="structured_template single_stratum_template"/>
      <entity abstract.supertype="YES" name="single_stratum_template" super.expression="single_stratum_continuous_template" supertypes="part_template_definition"/>
      <entity name="skew_line_distance_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="2"/>
            <typename name="line"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="1"/>
            <typename name="line"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="distance_value">
            <typename name="non_negative_length_measure"/>
         </explicit>
         <where expression="( SIZEOF( SELF\explicit_constraint.constrained_elements + SELF\explicit_constraint.reference_elements ) = 2 )" label="wr1"/>
      </entity>
      <entity name="slash_expression" supertypes="binary_numeric_expression"/>
      <entity name="sliding_curve_pair" supertypes="planar_curve_pair"/>
      <entity name="sliding_curve_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="sliding_curve_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_point_on_curve_1">
            <typename name="point_on_curve"/>
         </explicit>
         <explicit name="actual_point_on_curve_2">
            <typename name="point_on_curve"/>
         </explicit>
         <where expression="( SELF\pair_value.applies_to_pair\planar_curve_pair.curve_1 :=: actual_point_on_curve_1.basis_curve )" label="wr1"/>
         <where expression="( SELF\pair_value.applies_to_pair\planar_curve_pair.curve_2 :=: actual_point_on_curve_2.basis_curve )" label="wr2"/>
      </entity>
      <entity name="sliding_surface_pair" supertypes="surface_pair"/>
      <entity name="sliding_surface_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="sliding_surface_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_point_on_surface_1">
            <typename name="point_on_surface"/>
         </explicit>
         <explicit name="actual_point_on_surface_2">
            <typename name="point_on_surface"/>
         </explicit>
         <explicit name="actual_rotation">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( SELF\pair_value.applies_to_pair\surface_pair.surface_1 :=: actual_point_on_surface_1.basis_surface )" label="wr1"/>
         <where expression="( SELF\pair_value.applies_to_pair\surface_pair.surface_2 :=: actual_point_on_surface_2.basis_surface )" label="wr2"/>
      </entity>
      <entity name="slot" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'swept shape occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'  + &#10;               'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'profile usage' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;               | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SQUARE_U_PROFILE', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARTIAL_CIRCULAR_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUNDED_U_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VEE_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEE_PROFILE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OPEN_PATH_PROFILE' ] * TYPEOF( sdr.&#10;               relating_shape_aspect ) ) = 1 ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'course of travel occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'  + &#10;               'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'path feature component usage' ) AND ( sar.name = &#10;               'course of travel'  ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_FEATURE_COMPONENT'  IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'end condition occurrence' ) AND ( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'slot end usage' ) AND ( sar.name IN [ 'course of travel start', 'course of travel end'] ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP' IN &#10;               TYPEOF( sar ) ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SLOT_END' IN TYPEOF( &#10;               fcr.relating_shape_aspect ) ) AND ( fcr.relating_shape_aspect.description IN [ 'open', 'radiused', 'flat', 'woodruff' ] ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SLOT' IN TYPEOF( fcr.related_shape_aspect&#10;               .of_shape.definition ) ) ) ) ) = 1 ) ) ) ) = 2 ) OR ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'end condition occurrence' ) AND ( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'slot end usage' ) AND ( sar.name IN [ 'course of travel start', 'course of travel end'] ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP' IN &#10;               TYPEOF( sar ) ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SLOT_END' IN TYPEOF( &#10;               fcr.relating_shape_aspect ) ) AND ( fcr.relating_shape_aspect.description IN [ 'loop'] ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SLOT'  IN TYPEOF( fcr.related_shape_aspect.&#10;               of_shape.definition ) ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( ( NOT ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'end condition occurrence' ) AND ( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'slot end usage' ) AND ( sar.name IN [ 'course of travel start', 'course of travel end'] ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP' IN &#10;               TYPEOF( sar ) ) ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SLOT_END' IN TYPEOF( &#10;               fcr.relating_shape_aspect ) ) AND ( fcr.relating_shape_aspect.description IN [ 'loop'] ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SLOT'  IN TYPEOF( fcr.related_shape_aspect.&#10;               of_shape.definition ) ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 ) ) OR ( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( &#10;               SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'course of travel occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'path feature component usage' ) AND ( sar.name = 'course of travel' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_FEATURE_COMPONENT' IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) AND ( sdr.relating_shape_aspect.description IN [ 'complex', 'complete circular'] ) ) ) ) &#10;               = 1 ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;               used_representation ) ) AND ( pdr.used_representation.name = 'maximum feature limit' ) ) ) ) &gt;= 0 )" label="wr6"/>
      </entity>
      <entity name="slot_end" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;                of_shape.definition ) )" label="wr1"/>
         <where expression="( SELF.description IN [ 'open', 'radiused', 'flat', 'woodruff', 'loop'] )" label="wr2"/>
         <where expression="( ( NOT ( SELF.description IN [ 'open', 'radiused', 'loop'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr3"/>
         <where expression="( ( NOT ( SELF.description IN [ 'flat', 'woodruff'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr4"/>
         <where expression="( ( NOT ( SELF.description IN [ 'flat'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 2 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( SELF.description = 'flat' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'first radius' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr6"/>
         <where expression="( ( NOT ( SELF.description = 'flat' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'second radius' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr7"/>
         <where expression="( ( NOT ( SELF.description = 'woodruff' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT'  IN TYPEOF( it ) ) &#10;                AND ( it.name = 'radius' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr8"/>
         <where expression="( ( NOT ( SELF.description IN [ 'woodruff'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( fcr &lt;* QUERY ( sar &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'  + &#10;                'RELATING_SHAPE_ASPECT'  ) | ( ( sar.description = 'slot end usage' ) AND ( sar.name IN [ 'course of travel start', &#10;                'course of travel end' ] ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( ( fcr.related_shape_aspect.description = &#10;                'end condition occurrence'  ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SLOT' IN &#10;                TYPEOF( fcr.related_shape_aspect.of_shape.definition ) ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SLOT_END'  IN TYPEOF( fcr.&#10;                relating_shape_aspect ) ) ) ) ) &gt;= 1 )" label="wr10"/>
      </entity>
      <entity name="small_area_face" supertypes="topology_related_to_nearly_degenerate_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="small_area_surface" supertypes="nearly_degenerate_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="small_area_surface_patch" supertypes="geometry_with_local_near_degeneracy">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'B_SPLINE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'B_SPLINE_SURFACE_PATCH'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="small_volume_solid" supertypes="inapt_manifold_solid_brep">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VOLUME_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VOLUME_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MANIFOLD_SOLID_BREP' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VOLUME_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="smeared_material_definition" supertypes="zone_structural_makeup"/>
      <entity name="snowball_template" supertypes="teardrop_template"/>
      <entity name="software_for_data_quality_check">
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="software_name">
            <typename name="text"/>
         </explicit>
         <explicit name="software_version">
            <typename name="text"/>
         </explicit>
         <explicit name="data_quality">
            <typename name="data_quality_definition_representation_relationship"/>
         </explicit>
      </entity>
      <entity name="solid_angle_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_ANGLE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="solid_angle_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="solid_character_glyph_2d_symbol" supertypes="generic_character_glyph_symbol csg_2d_shape_representation"/>
      <entity name="solid_curve_font" supertypes="pre_defined_curve_font"/>
      <entity name="solid_model" super.expression="ONEOF (csg_solid, manifold_solid_brep, swept_face_solid, swept_area_solid, swept_disk_solid, solid_replica)" supertypes="geometric_representation_item"/>
      <entity name="solid_replica" supertypes="solid_model">
         <explicit name="parent_solid">
            <typename name="solid_model"/>
         </explicit>
         <explicit name="transformation">
            <typename name="cartesian_transformation_operator_3d"/>
         </explicit>
         <where expression="acyclic_solid_replica( SELF, parent_solid )" label="wr1"/>
         <where expression="( parent_solid\geometric_representation_item.dim = 3 )" label="wr2"/>
      </entity>
      <entity name="solid_with_angle_based_chamfer" supertypes="solid_with_chamfered_edges">
         <explicit name="offset_distance">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="left_offset">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="offset_angle">
            <typename name="positive_plane_angle_measure"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="solid_with_chamfered_edges" super.expression="ONEOF (solid_with_single_offset_chamfer, solid_with_double_offset_chamfer, solid_with_angle_based_chamfer)" supertypes="edge_blended_solid"/>
      <entity name="solid_with_circular_pattern" super.expression="solid_with_incomplete_circular_pattern" supertypes="solid_with_shape_element_pattern">
         <explicit name="replicate_count">
            <typename name="positive_integer"/>
         </explicit>
         <explicit name="angular_spacing">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="radial_alignment">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="reference_point">
            <typename name="point"/>
         </explicit>
      </entity>
      <entity name="solid_with_circular_pocket" supertypes="solid_with_pocket">
         <explicit name="pocket_radius">
            <typename name="positive_length_measure"/>
         </explicit>
         <where expression="( SELF\solid_with_pocket.floor_blend_radius &lt;= pocket_radius )" label="wr1"/>
      </entity>
      <entity name="solid_with_circular_protrusion" supertypes="solid_with_protrusion">
         <explicit name="protrusion_radius">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="solid_with_conical_bottom_round_hole" supertypes="solid_with_stepped_round_hole">
         <explicit name="semi_apex_angle">
            <typename name="positive_plane_angle_measure"/>
         </explicit>
         <explicit name="tip_radius">
            <typename name="non_negative_length_measure"/>
         </explicit>
         <where expression="( tip_radius &lt; SELF\solid_with_stepped_round_hole.segment_radii[segments] )" label="wr1"/>
      </entity>
      <entity name="solid_with_constant_radius_edge_blend" supertypes="edge_blended_solid">
         <explicit name="radius">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="solid_with_curved_slot" supertypes="solid_with_slot">
         <explicit name="slot_centreline">
            <typename name="bounded_curve"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="solid_with_depression" super.expression="solid_with_through_depression ANDOR ONEOF (solid_with_hole, solid_with_pocket, solid_with_slot, solid_with_groove)" supertypes="modified_solid_with_placed_configuration">
         <explicit name="depth">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="solid_with_double_offset_chamfer" supertypes="solid_with_chamfered_edges">
         <explicit name="left_offset_distance">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="right_offset_distance">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="solid_with_excessive_number_of_voids" supertypes="inapt_manifold_solid_brep">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'MANIFOLD_SOLID_BREP' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity name="solid_with_flat_bottom_round_hole" supertypes="solid_with_stepped_round_hole">
         <explicit name="fillet_radius">
            <typename name="non_negative_length_measure"/>
         </explicit>
         <where expression="( fillet_radius &lt; SELF\solid_with_stepped_round_hole.segment_radii[segments] )" label="wr1"/>
      </entity>
      <entity name="solid_with_general_pocket" supertypes="solid_with_pocket">
         <explicit name="profile">
            <typename name="positioned_sketch"/>
         </explicit>
         <explicit name="reference_point">
            <typename name="point"/>
         </explicit>
         <where expression="( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_BOUNDED_SURFACE', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SURFACE' ] * TYPEOF( profile.sketch_basis ) ) &#10;               = 1 )" label="wr1"/>
         <where expression="( profile IN using_items( reference_point, [] ) )" label="wr2"/>
      </entity>
      <entity name="solid_with_general_protrusion" supertypes="solid_with_protrusion">
         <explicit name="profile">
            <typename name="positioned_sketch"/>
         </explicit>
         <explicit name="reference_point">
            <typename name="point"/>
         </explicit>
         <where expression="( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_BOUNDED_SURFACE', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SURFACE' ] * TYPEOF( profile.sketch_basis ) ) &#10;               = 1 )" label="wr1"/>
         <where expression="( profile IN using_items( reference_point, [] ) )" label="wr2"/>
      </entity>
      <entity name="solid_with_groove" supertypes="solid_with_depression">
         <explicit name="groove_radius">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="groove_width">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="draft_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="floor_fillet_radius">
            <typename name="non_negative_length_measure"/>
         </explicit>
         <explicit name="external_groove">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_WITH_THROUGH_DEPRESSION' IN TYPEOF( &#10;               SELF ) ) )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="solid_with_hole" super.expression="solid_with_stepped_round_hole" supertypes="solid_with_depression"/>
      <entity name="solid_with_incomplete_circular_pattern" supertypes="solid_with_circular_pattern">
         <explicit name="omitted_instances">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="positive_integer"/>
         </explicit>
         <where expression="( SIZEOF( omitted_instances ) &lt; SELF\solid_with_circular_pattern.replicate_count )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* omitted_instances | ( q &gt; SELF\solid_with_circular_pattern.replicate_count ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="solid_with_incomplete_rectangular_pattern" supertypes="solid_with_rectangular_pattern">
         <explicit name="omitted_instances">
            <aggregate lower="1" type="SET" upper="?"/>
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="positive_integer"/>
         </explicit>
         <where expression="( NOT ( [1, 1] IN omitted_instances ) )" label="wr1"/>
         <where expression="( SIZEOF( omitted_instances ) &lt; ( ( SELF\solid_with_rectangular_pattern.row_count * SELF\&#10;               solid_with_rectangular_pattern.column_count ) - 1 ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* omitted_instances | ( ( q[1] &gt; SELF\solid_with_rectangular_pattern.row_count ) OR ( q[2] &gt; SELF&#10;               \solid_with_rectangular_pattern.column_count ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity abstract.supertype="YES" name="solid_with_pocket" super.expression="ONEOF (solid_with_rectangular_pocket, solid_with_circular_pocket, solid_with_general_pocket)" supertypes="solid_with_depression">
         <explicit name="floor_blend_radius">
            <typename name="non_negative_length_measure"/>
         </explicit>
         <explicit name="draft_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="solid_with_protrusion" super.expression="ONEOF (solid_with_circular_protrusion, solid_with_rectangular_protrusion, solid_with_general_protrusion)" supertypes="modified_solid_with_placed_configuration">
         <explicit name="protrusion_height">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="protrusion_draft_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
      </entity>
      <entity name="solid_with_rectangular_pattern" super.expression="solid_with_incomplete_rectangular_pattern" supertypes="solid_with_shape_element_pattern">
         <explicit name="row_count">
            <typename name="positive_integer"/>
         </explicit>
         <explicit name="column_count">
            <typename name="positive_integer"/>
         </explicit>
         <explicit name="row_spacing">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="column_spacing">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( ( row_count * column_count ) &gt; 1 )" label="wr1"/>
      </entity>
      <entity name="solid_with_rectangular_pocket" supertypes="solid_with_pocket">
         <explicit name="pocket_length">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="pocket_width">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="corner_radius">
            <typename name="non_negative_length_measure"/>
         </explicit>
         <where expression="( ( corner_radius &lt; ( pocket_width / 2 ) ) AND ( corner_radius &lt; ( pocket_length / 2 ) ) )" label="wr1"/>
      </entity>
      <entity name="solid_with_rectangular_protrusion" supertypes="solid_with_protrusion">
         <explicit name="protrusion_length">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="protrusion_width">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="protrusion_corner_radius">
            <typename name="non_negative_length_measure"/>
         </explicit>
         <where expression="( ( protrusion_corner_radius &lt;= ( protrusion_width / 2 ) ) AND ( protrusion_corner_radius &lt;= ( protrusion_length / 2 ) ) )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="solid_with_shape_element_pattern" super.expression="ONEOF (solid_with_circular_pattern, solid_with_rectangular_pattern)" supertypes="modified_solid_with_placed_configuration">
         <explicit name="replicated_element">
            <typename name="modified_solid_with_placed_configuration"/>
         </explicit>
      </entity>
      <entity name="solid_with_single_offset_chamfer" supertypes="solid_with_chamfered_edges">
         <explicit name="offset_distance">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="solid_with_slot" super.expression="ONEOF (solid_with_trapezoidal_section_slot, solid_with_tee_section_slot) AND ONEOF (solid_with_straight_slot, solid_with_curved_slot)" supertypes="solid_with_depression">
         <explicit name="slot_width">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="closed_ends">
            <aggregate lower="2" type="LIST" upper="2"/>
            <builtintype type="LOGICAL"/>
         </explicit>
         <explicit name="end_exit_faces">
            <aggregate lower="2" type="LIST" upper="2"/>
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="face_surface"/>
         </explicit>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_WITH_THROUGH_DEPRESSION' IN &#10;               TYPEOF( SELF ) ) AND ( closed_ends = [FALSE, FALSE] ) ) )" label="wr1"/>
         <where expression="( NOT ( ( ( closed_ends[1] = TRUE ) AND ( SIZEOF( end_exit_faces[1] ) &lt;&gt; 0 ) ) OR ( ( closed_ends[2] = TRUE ) AND ( &#10;               SIZEOF( end_exit_faces[2] ) &lt;&gt; 0 ) ) ) )" label="wr2"/>
      </entity>
      <entity name="solid_with_spherical_bottom_round_hole" supertypes="solid_with_stepped_round_hole">
         <explicit name="sphere_radius">
            <typename name="positive_length_measure"/>
         </explicit>
         <where expression="( sphere_radius &gt;= SELF\solid_with_stepped_round_hole.segment_radii[segments] )" label="wr1"/>
      </entity>
      <entity name="solid_with_stepped_round_hole" super.expression="solid_with_stepped_round_hole_and_conical_transitions ANDOR ONEOF (solid_with_flat_bottom_round_hole, solid_with_conical_bottom_round_hole, solid_with_spherical_bottom_round_hole)" supertypes="solid_with_hole">
         <explicit name="segments">
            <typename name="positive_integer"/>
         </explicit>
         <explicit name="segment_radii">
            <aggregate lower="1" type="LIST" upper="segments"/>
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="segment_depths">
            <aggregate lower="1" type="LIST" upper="segments"/>
            <typename name="positive_length_measure"/>
         </explicit>
         <derived expression="compute_total_depth( SELF )" name="depth">
            <typename name="positive_length_measure"/>
            <redeclaration entity-ref="solid_with_depression"/>
         </derived>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_WITH_THROUGH_DEPRESSION' IN &#10;               TYPEOF( SELF ) ) AND ( SIZEOF( TYPEOF( SELF ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_WITH_FLAT_BOTTOM_ROUND_HOLE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_WITH_FLAT_BOTTOM_ROUND_HOLE' ] ) &lt;&gt; 0 ) ) )" label="wr1"/>
      </entity>
      <entity name="solid_with_stepped_round_hole_and_conical_transitions" supertypes="solid_with_stepped_round_hole">
         <explicit name="conical_transitions">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="conical_stepped_hole_transition"/>
         </explicit>
         <where expression="( SIZEOF( conical_transitions ) &lt;= ( SELF\solid_with_stepped_round_hole.segments + 1 ) )" label="wr1"/>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_WITH_THROUGH_DEPRESSION' IN TYPEOF( SELF ) ) &#10;               XOR ( SIZEOF( conical_transitions ) &lt;= SELF\solid_with_stepped_round_hole.segments ) )" label="wr2"/>
         <where expression="validate_countersink_radii( SELF )" label="wr3"/>
      </entity>
      <entity name="solid_with_straight_slot" supertypes="solid_with_slot">
         <explicit name="slot_length">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="solid_with_tee_section_slot" supertypes="solid_with_slot">
         <explicit name="tee_section_width">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="collar_depth">
            <typename name="positive_length_measure"/>
         </explicit>
         <where expression="( collar_depth &lt; SELF\solid_with_depression.depth )" label="wr1"/>
         <where expression="( tee_section_width &gt; SELF\solid_with_slot.slot_width )" label="wr2"/>
      </entity>
      <entity name="solid_with_through_depression" supertypes="solid_with_depression">
         <explicit name="exit_faces">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="face_surface"/>
         </explicit>
         <where expression="( SIZEOF( TYPEOF( SELF ) * [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_WITH_HOLE', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_WITH_POCKET' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_WITH_SLOT' ] ) = 1 )" label="wr1"/>
      </entity>
      <entity name="solid_with_trapezoidal_section_slot" supertypes="solid_with_slot">
         <explicit name="draft_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="floor_fillet_radius">
            <typename name="non_negative_length_measure"/>
         </explicit>
      </entity>
      <entity name="solid_with_variable_radius_edge_blend" supertypes="track_blended_solid">
         <explicit name="point_list">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="point"/>
         </explicit>
         <explicit name="radius_list">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="edge_function_list">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="blend_radius_variation_type"/>
         </explicit>
         <where expression="( SIZEOF( point_list ) = SIZEOF( radius_list ) )" label="wr1"/>
         <where expression="( SIZEOF( edge_function_list ) = ( SIZEOF( radius_list ) - 1 ) )" label="wr2"/>
         <where expression="( NOT ( ( point_list[1] = point_list[HIINDEX( point_list )] ) AND ( NOT ( radius_list[1] = radius_list[HIINDEX( &#10;               radius_list )] ) ) ) )" label="wr3"/>
      </entity>
      <entity name="solid_with_wrong_number_of_voids" supertypes="erroneous_manifold_solid_brep">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'BREP_WITH_VOIDS' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="source_for_requirement" supertypes="group_assignment">
         <explicit name="assigned_group">
            <typename name="requirement_source"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="requirement_source_item"/>
         </explicit>
      </entity>
      <entity name="sourced_requirement" supertypes="group_assignment">
         <explicit name="assigned_group">
            <typename name="requirement_source"/>
            <redeclaration entity-ref="group_assignment"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="product_definition"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="special_symbol_template" super.expression="ONEOF (single_stratum_special_symbol_template, multi_stratum_special_symbol_template)" supertypes="part_template_definition"/>
      <entity name="specification_definition" supertypes="product_definition"/>
      <entity name="specified_higher_usage_occurrence" supertypes="assembly_component_usage">
         <explicit name="upper_usage">
            <typename name="assembly_component_usage"/>
         </explicit>
         <explicit name="next_usage">
            <typename name="next_assembly_usage_occurrence"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="upper_usage"/>
            <unique.attribute attribute="next_usage"/>
         </unique>
         <where expression="( SELF :&lt;&gt;: upper_usage )" label="wr1"/>
         <where expression="( SELF\product_definition_relationship.relating_product_definition :=: upper_usage.relating_product_definition )" label="wr2"/>
         <where expression="( SELF\product_definition_relationship.related_product_definition :=: next_usage.related_product_definition )" label="wr3"/>
         <where expression="( ( upper_usage.related_product_definition :=: next_usage.relating_product_definition ) OR ( SIZEOF( QUERY ( pdr &lt;* &#10;               USEDIN( upper_usage.related_product_definition, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION_RELATIONSHIP.'  + 'RELATED_PRODUCT_DEFINITION' ) | ( pdr.relating_product_definition :=: &#10;               next_usage.relating_product_definition ) ) ) = 1 ) )" label="wr4"/>
         <where expression="( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NEXT_ASSEMBLY_USAGE_OCCURRENCE', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SPECIFIED_HIGHER_USAGE_OCCURRENCE' ] * &#10;               TYPEOF( upper_usage ) ) = 1 )" label="wr5"/>
      </entity>
      <entity name="sphere" supertypes="geometric_representation_item">
         <explicit name="radius">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="centre">
            <typename name="point"/>
         </explicit>
      </entity>
      <entity name="spherical_cap" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 3 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'radius' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;               = 2 ) AND ( it.name = 'internal angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="spherical_pair" supertypes="low_order_kinematic_pair">
         <derived expression="FALSE" name="t_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="r_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="r_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="r_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
      </entity>
      <entity name="spherical_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="spherical_pair_select"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="input_orientation">
            <typename name="spatial_rotation"/>
         </explicit>
         <derived expression="convert_spatial_to_ypr_rotation( SELF\pair_value.applies_to_pair, input_orientation )" name="actual_orientation">
            <typename name="ypr_rotation"/>
         </derived>
      </entity>
      <entity name="spherical_pair_with_pin" supertypes="low_order_kinematic_pair">
         <derived expression="FALSE" name="t_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="r_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="r_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
      </entity>
      <entity name="spherical_pair_with_pin_and_range" supertypes="spherical_pair_with_pin">
         <explicit name="lower_limit_yaw" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_yaw" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="lower_limit_roll" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_roll" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( ( ( NOT EXISTS( lower_limit_yaw ) ) OR ( NOT EXISTS( upper_limit_yaw ) ) ) XOR ( lower_limit_yaw &lt; upper_limit_yaw ) )" label="wr1"/>
         <where expression="( ( ( NOT EXISTS( lower_limit_roll ) ) OR ( NOT EXISTS( upper_limit_roll ) ) ) XOR ( lower_limit_roll &lt; &#10;               upper_limit_roll ) )" label="wr2"/>
      </entity>
      <entity name="spherical_pair_with_range" supertypes="spherical_pair">
         <explicit name="lower_limit_yaw" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_yaw" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="lower_limit_pitch" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_pitch" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="lower_limit_roll" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_roll" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( ( ( NOT EXISTS( lower_limit_yaw ) ) OR ( NOT EXISTS( upper_limit_yaw ) ) ) XOR ( lower_limit_yaw &lt; upper_limit_yaw ) )" label="wr1"/>
         <where expression="( ( ( NOT EXISTS( lower_limit_pitch ) ) OR ( NOT EXISTS( upper_limit_pitch ) ) ) XOR ( lower_limit_pitch &lt; &#10;               upper_limit_pitch ) )" label="wr2"/>
         <where expression="( ( ( NOT EXISTS( lower_limit_roll ) ) OR ( NOT EXISTS( upper_limit_roll ) ) ) XOR ( lower_limit_roll &lt; &#10;               upper_limit_roll ) )" label="wr3"/>
      </entity>
      <entity name="spherical_surface" supertypes="elementary_surface">
         <explicit name="radius">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="sql_mappable_defined_function" supertypes="defined_function"/>
      <entity name="square_root_function" supertypes="unary_function_call"/>
      <entity name="square_u_profile" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;                of_shape.definition ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( ( NOT ( SIZEOF( impl_rep.used_representation.items ) &gt;= 4 ) ) AND ( &#10;                SIZEOF( impl_rep.used_representation.items ) &lt;= 7 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN&#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( srwp_i &lt;* pdr.used_representation.items | ( ( srwp_i.&#10;                name = 'orientation' ) OR ( srwp_i.name = 'width' ) OR ( srwp_i.name = 'first angle' ) OR ( srwp_i.name = &#10;                'second angle'  ) OR ( srwp_i.name = 'first radius' ) OR ( srwp_i.name = 'second radius' ) OR ( srwp_i.name = &#10;                'profile limit'  ) OR ( srwp_i.name = 'depth' ) ) ) ) = SIZEOF( pdr.used_representation.items ) ) ) ) ) = 1 ) ) ) &#10;                = 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name =&#10;                'orientation' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'width' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'first radius' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'second radius' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'first angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'second angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION' IN TYPEOF( &#10;                pdr.used_representation ) ) AND ( pdr.used_representation.name = 'profile limit' ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'depth' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr12"/>
      </entity>
      <entity name="standard_uncertainty" super.expression="expanded_uncertainty" supertypes="uncertainty_qualifier">
         <explicit name="uncertainty_value">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="start_request" supertypes="action_request_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="start_request_item"/>
         </explicit>
      </entity>
      <entity name="start_work" supertypes="action_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="work_item"/>
         </explicit>
      </entity>
      <entity name="steep_angle_between_adjacent_edges" supertypes="steep_geometry_transition_across_edge">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE'  IN value_limit_type( &#10;               SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.&#10;               threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE'  )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_LOOP'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'ORIENTED_EDGE' ] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE' ] )" label="wr5"/>
      </entity>
      <entity name="steep_angle_between_adjacent_faces" supertypes="steep_geometry_transition_across_edge">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE'  IN value_limit_type( &#10;               SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.&#10;               threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE'  )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CONNECTED_FACE_SET' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'POINT_ON_EDGE_CURVE'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE' ] )" label="wr5"/>
      </entity>
      <entity abstract.supertype="YES" name="steep_geometry_transition_across_edge" super.expression="ONEOF (steep_angle_between_adjacent_edges, steep_angle_between_adjacent_faces)" supertypes="inapt_topology_and_geometry_relationship"/>
      <entity name="step" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'course of travel occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'path feature component usage' ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_FEATURE_COMPONENT' IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) AND ( sdr.relating_shape_aspect.description = 'linear' ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = &#10;               0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;               | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;               description = 'removal boundary occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  )&#10;               | ( ( sar.description = 'profile usage' ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) ) | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VEE_PROFILE'  IN TYPEOF( sdr.&#10;               relating_shape_aspect ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( SELF ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;               used_representation ) ) AND ( pdr.used_representation.name = 'maximum feature limit' ) ) ) ) &gt;= 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa &lt;* USEDIN( pds, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) &#10;               AND ( csa.name = 'uncut volume' ) AND ( SIZEOF( QUERY ( sar &lt;* csa.component_relationships | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( &#10;               sar ) ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOSS', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROTRUSION' ] * TYPEOF( sar.&#10;               related_shape_aspect ) ) = 1 ) ) ) ) = 1 ) ) ) ) &lt;= 1 ) ) ) ) = 1 )" label="wr5"/>
      </entity>
      <entity name="straightness_tolerance" supertypes="geometric_tolerance">
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE'  ) IN TYPEOF( SELF ) ) )" label="wr1"/>
      </entity>
      <entity name="stratum" super.expression="ONEOF (documentation_layer_stratum, design_layer_stratum)" supertypes="product_definition product_definition_shape">
         <derived expression="SELF" name="definition">
            <typename name="stratum"/>
            <redeclaration entity-ref="property_definition"/>
         </derived>
         <unique label="ur1">
            <unique.attribute attribute="SELF\product_definition.id"/>
            <unique.attribute attribute="SELF\product_definition.formation"/>
         </unique>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.'&#10;               + 'NAMED_ITEM'  ) ) = 0 )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\property_definition.description ) )" label="wr2"/>
      </entity>
      <entity name="stratum_feature" super.expression="fiducial_stratum_feature" supertypes="shape_aspect"/>
      <entity name="stratum_feature_based_derived_pattern" supertypes="characterized_object property_definition_relationship"/>
      <entity name="stratum_feature_conductive_join" supertypes="product_definition_relationship"/>
      <entity name="stratum_feature_template" supertypes="single_stratum_continuous_template"/>
      <entity name="stratum_feature_template_component" super.expression="ONEOF (area_component, conductive_interconnect_element) ANDOR ONEOF (area_component, conductive_interconnect_element, land)" supertypes="laminate_component"/>
      <entity name="stratum_feature_template_component_with_stratum_feature" supertypes="stratum_feature_template_component stratum_feature shape_aspect_relationship">
         <derived expression="SELF" name="related_shape_aspect">
            <typename name="stratum_feature_template_component_with_stratum_feature"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </derived>
         <derived expression="SELF" name="relating_shape_aspect">
            <typename name="stratum_feature_template_component_with_stratum_feature"/>
            <redeclaration entity-ref="shape_aspect_relationship"/>
         </derived>
         <where expression="( SELF\shape_aspect_relationship.name = 'implementation' )" label="wr1"/>
      </entity>
      <entity name="stratum_specific_template_location" supertypes="assembly_component_usage property_definition"/>
      <entity name="stratum_stack_dependent_template" supertypes="multi_stratum_structured_template"/>
      <entity abstract.supertype="YES" name="stratum_stack_model" supertypes="part_template_definition"/>
      <entity abstract.supertype="YES" name="stratum_sub_stack" super.expression="ONEOF (local_linear_stack, passage_technology_allocation_to_stack_model)" supertypes="part_template_definition"/>
      <entity name="stratum_surface" supertypes="shape_aspect"/>
      <entity name="stratum_surface_technology" supertypes="shape_aspect">
         <explicit name="of_shape">
            <typename name="stratum_technology"/>
            <redeclaration entity-ref="shape_aspect"/>
         </explicit>
         <derived expression="SELF\shape_aspect.of_shape" name="associated_technology">
            <typename name="stratum_technology"/>
         </derived>
      </entity>
      <entity name="stratum_technology" supertypes="characterized_object product_definition_shape">
         <derived expression="SELF" name="definition">
            <typename name="characterized_definition"/>
            <redeclaration entity-ref="property_definition"/>
         </derived>
         <unique label="ur1">
            <unique.attribute attribute="SELF\characterized_object.name"/>
         </unique>
      </entity>
      <entity name="stratum_technology_mapping_relationship" supertypes="property_definition_relationship"/>
      <entity name="stratum_technology_occurrence" supertypes="property_definition"/>
      <entity name="stratum_technology_occurrence_feature_constraint" supertypes="stratum_technology_occurrence_relationship"/>
      <entity name="stratum_technology_occurrence_link" supertypes="stratum_technology_occurrence_relationship"/>
      <entity abstract.supertype="YES" name="stratum_technology_occurrence_relationship" super.expression="ONEOF (derived_stratum_technology_occurrence_relationship, stratum_technology_occurrence_link, stratum_technology_occurrence_feature_constraint, stratum_technology_occurrence_swap_relationship)" supertypes="property_definition property_definition_relationship"/>
      <entity name="stratum_technology_occurrence_swap_relationship" supertypes="stratum_technology_occurrence_relationship"/>
      <entity name="stratum_technology_swap_relationship" supertypes="property_definition_relationship"/>
      <entity abstract.supertype="YES" name="string_defined_function" supertypes="defined_function string_expression"/>
      <entity abstract.supertype="YES" name="string_expression" super.expression="ONEOF (simple_string_expression, index_expression, substring_expression, concat_expression, format_function, string_defined_function)" supertypes="expression"/>
      <entity name="string_literal" supertypes="simple_string_expression generic_literal">
         <explicit name="the_value">
            <builtintype type="STRING"/>
         </explicit>
      </entity>
      <entity name="string_variable" supertypes="simple_string_expression variable"/>
      <entity name="structured_dimension_callout" supertypes="draughting_callout">
         <where expression="( SIZEOF( TYPEOF( SELF ) * [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DATUM_FEATURE_CALLOUT', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DATUM_TARGET_CALLOUT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRICAL_TOLERANCE_CALLOUT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LEADER_DIRECTED_CALLOUT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROJECTION_DIRECTED_CALLOUT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIMENSION_CURVE_DIRECTED_CALLOUT' ] ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( ato &lt;* QUERY ( con &lt;* SELF.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE'  IN TYPEOF( con ) ) )&#10;               | ( NOT ( ato.name IN [ 'dimension value', 'tolerance value', 'unit text', 'prefix text', 'suffix text'] ) ) ) ) = &#10;               0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( ato &lt;* QUERY ( con &lt;* SELF.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE'  IN TYPEOF( con ) ) )&#10;               | ( ato.name = 'dimension value' ) ) ) &gt;= 1 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( dcr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DRAUGHTING_CALLOUT_RELATIONSHIP.'  + 'RELATING_DRAUGHTING_CALLOUT' ) | ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DIMENSION_CALLOUT_COMPONENT_RELATIONSHIP' ) &#10;               IN TYPEOF( dcr ) ) AND ( dcr.name = 'prefix' ) ) ) ) &lt;= 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( dcr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DRAUGHTING_CALLOUT_RELATIONSHIP.'  + 'RELATING_DRAUGHTING_CALLOUT' ) | ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DIMENSION_CALLOUT_COMPONENT_RELATIONSHIP' ) &#10;               IN TYPEOF( dcr ) ) AND ( dcr.name = 'suffix' ) ) ) ) &lt;= 1 )" label="wr5"/>
         <where expression="( ( NOT ( SIZEOF( QUERY ( ato &lt;* QUERY ( con &lt;* SELF.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE'  IN TYPEOF( con ) ) )&#10;               | ( ato.name = 'prefix text' ) ) ) &gt; 0 ) ) OR ( SIZEOF( QUERY ( dcr &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_CALLOUT_RELATIONSHIP.' + &#10;               'RELATING_DRAUGHTING_CALLOUT'  ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DIMENSION_CALLOUT_COMPONENT_RELATIONSHIP'  ) IN TYPEOF( dcr ) ) AND ( dcr.name = 'prefix' ) ) ) ) = 1 ) )" label="wr6"/>
         <where expression="( ( NOT ( SIZEOF( QUERY ( ato &lt;* QUERY ( con &lt;* SELF.contents | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_OCCURRENCE'  IN TYPEOF( con ) ) )&#10;               | ( ato.name = 'suffix text' ) ) ) &gt; 0 ) ) OR ( SIZEOF( QUERY ( dcr &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DRAUGHTING_CALLOUT_RELATIONSHIP.' + &#10;               'RELATING_DRAUGHTING_CALLOUT'  ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DIMENSION_CALLOUT_COMPONENT_RELATIONSHIP'  ) IN TYPEOF( dcr ) ) AND ( dcr.name = 'suffix' ) ) ) ) = 1 ) )" label="wr7"/>
      </entity>
      <entity name="structured_inter_stratum_feature_template" supertypes="inter_stratum_feature_template stratum_stack_dependent_template"/>
      <entity abstract.supertype="YES" name="structured_layout_component" super.expression="ONEOF (footprint_occurrence, material_removal_structured_component, multi_stratum_special_symbol_component, padstack_occurrence, single_stratum_special_symbol_component) ANDOR ONEOF (footprint_occurrence, material_removal_structured_component, multi_stratum_printed_component, multi_stratum_special_symbol_component, padstack_occurrence, single_stratum_printed_component, single_stratum_special_symbol_component)" supertypes="assembly_group_component"/>
      <entity name="structured_layout_component_sub_assembly_relationship" super.expression="footprint_occurrence_product_definition_relationship" supertypes="next_assembly_usage_occurrence_relationship">
         <where expression="( SELF\product_definition_relationship.related_product_definition :&lt;&gt;: SELF\product_definition_relationship.&#10;               relating_product_definition )" label="wr1"/>
      </entity>
      <entity name="structured_layout_component_sub_assembly_relationship_with_component" supertypes="structured_layout_component_sub_assembly_relationship assembly_component">
         <derived expression="SELF" name="related_product_definition">
            <typename name="assembly_component"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </derived>
      </entity>
      <entity abstract.supertype="YES" name="structured_printed_part_template" super.expression="ONEOF (single_stratum_printed_part_template, multi_stratum_printed_part_template)" supertypes="printed_part_template structured_template"/>
      <entity name="structured_printed_part_template_terminal" supertypes="printed_part_template_terminal"/>
      <entity abstract.supertype="YES" name="structured_template" super.expression="ONEOF (single_stratum_structured_template, multi_stratum_structured_template)" supertypes="geometric_template"/>
      <entity name="structured_text_composition" supertypes="compound_representation_item"/>
      <entity name="structured_text_representation" supertypes="representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="string_representation_item_select"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
      </entity>
      <entity name="styled_item" supertypes="representation_item">
         <explicit name="styles">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="presentation_style_assignment"/>
         </explicit>
         <explicit name="item">
            <typename name="styled_item_target"/>
         </explicit>
         <where expression="( ( SIZEOF( SELF.styles ) = 1 ) XOR ( SIZEOF( QUERY ( pres_style &lt;* SELF.styles | ( NOT ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRESENTATION_STYLE_BY_CONTEXT' ) IN &#10;               TYPEOF( pres_style ) ) ) ) ) = 0 ) )" label="wr1"/>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STYLED_ITEM' IN TYPEOF( item ) ) )" label="wr2"/>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' IN TYPEOF( item ) ) OR ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM'  IN TYPEOF( &#10;               item ) ) OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'CONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM'  IN TYPEOF( SELF ) ) )" label="wr3"/>
      </entity>
      <entity name="su_parameters" supertypes="geometric_representation_item">
         <explicit name="a">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="alpha">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="b">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="beta">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="c">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="gamma">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( SELF\geometric_representation_item.dim = 3 )" label="wr1"/>
      </entity>
      <entity name="subedge" supertypes="edge">
         <explicit name="parent_edge">
            <typename name="edge"/>
         </explicit>
      </entity>
      <entity name="subface" supertypes="face">
         <explicit name="parent_face">
            <typename name="face"/>
         </explicit>
         <where expression="( NOT mixed_loop_type_set( list_to_set( list_face_loops( SELF ) ) + list_to_set( list_face_loops( parent_face ) ) ) )" label="wr1"/>
      </entity>
      <entity name="subsketch" supertypes="geometric_representation_item">
         <explicit name="subsketch_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="sketch_element_select"/>
         </explicit>
         <explicit name="owning_sketch">
            <typename name="sketch_type_select"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NEUTRAL_SKETCH_REPRESENTATION' IN TYPEOF( &#10;               owning_sketch ) ) AND ( SIZEOF( QUERY ( q &lt;* subsketch_elements | ( NOT ( owning_sketch IN using_representations( q ) ) ) ) ) &#10;               = 0 ) ) XOR ( ( SIZEOF( TYPEOF( owning_sketch ) * [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POSITIONED_SKETCH' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SUBSKETCH' ] ) = 1 ) AND ( SIZEOF( &#10;               QUERY ( q &lt;* subsketch_elements | ( NOT ( owning_sketch IN using_items( q, [] ) ) ) ) ) = 0 ) ) )" label="wr1"/>
      </entity>
      <entity name="substring_expression" supertypes="string_expression multiple_arity_generic_expression">
         <derived expression="SELF\multiple_arity_generic_expression.operands[1]" name="operand">
            <typename name="generic_expression"/>
         </derived>
         <derived expression="SELF\multiple_arity_generic_expression.operands[2]" name="index1">
            <typename name="generic_expression"/>
         </derived>
         <derived expression="SELF\multiple_arity_generic_expression.operands[3]" name="index2">
            <typename name="generic_expression"/>
         </derived>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STRING_EXPRESSION' IN TYPEOF( operand ) ) AND &#10;               ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NUMERIC_EXPRESSION' IN TYPEOF( index1 ) ) AND&#10;               ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NUMERIC_EXPRESSION' IN TYPEOF( index2 ) ) )" label="wr1"/>
         <where expression="( SIZEOF( SELF\multiple_arity_generic_expression.operands ) = 3 )" label="wr2"/>
         <where expression="is_int_expr( index1 )" label="wr3"/>
         <where expression="is_int_expr( index2 )" label="wr4"/>
      </entity>
      <entity name="summary_report_request" supertypes="data_quality_report_request">
         <explicit name="summary_report_request_type">
            <typename name="summary_report_type"/>
         </explicit>
      </entity>
      <entity name="supplied_part_relationship" supertypes="product_definition_relationship"/>
      <entity name="surface" super.expression="ONEOF (elementary_surface, swept_surface, bounded_surface, offset_surface, surface_replica)" supertypes="geometric_representation_item"/>
      <entity name="surface_condition_callout" supertypes="draughting_callout">
         <where expression="( SIZEOF( QUERY ( c &lt;* SELF.contents | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'ANNOTATION_CURVE_OCCURRENCE', 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'ANNOTATION_SYMBOL_OCCURRENCE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'ANNOTATION_TEXT_OCCURRENCE' ] * TYPEOF( c ) ) &lt;&gt; 1 ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="surface_curve" super.expression="ONEOF (intersection_curve, seam_curve) ANDOR bounded_surface_curve" supertypes="curve">
         <explicit name="curve_3d">
            <typename name="curve"/>
         </explicit>
         <explicit name="associated_geometry">
            <aggregate lower="1" type="LIST" upper="2"/>
            <typename name="pcurve_or_surface"/>
         </explicit>
         <explicit name="master_representation">
            <typename name="preferred_surface_curve_representation"/>
         </explicit>
         <derived expression="get_basis_surface( SELF )" name="basis_surface">
            <aggregate lower="1" type="SET" upper="2"/>
            <typename name="surface"/>
         </derived>
         <where expression="( curve_3d.dim = 3 )" label="wr1"/>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( associated_geometry[1] ) ) &#10;               OR ( master_representation &lt;&gt; pcurve_s1 ) )" label="wr2"/>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( associated_geometry[2] ) ) &#10;               OR ( master_representation &lt;&gt; pcurve_s2 ) )" label="wr3"/>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( curve_3d ) ) )" label="wr4"/>
      </entity>
      <entity name="surface_curve_swept_area_solid" supertypes="swept_area_solid">
         <explicit name="directrix">
            <typename name="curve"/>
         </explicit>
         <explicit name="start_param">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="end_param">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="reference_surface">
            <typename name="surface"/>
         </explicit>
         <where expression="( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE' IN TYPEOF( directrix ) ) ) &#10;               OR ( reference_surface IN directrix\surface_curve.basis_surface ) )" label="wr1"/>
      </entity>
      <entity name="surface_distance_assembly_constraint_with_dimension" supertypes="binary_assembly_constraint sdgc_with_dimension"/>
      <entity name="surface_distance_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="2"/>
            <typename name="surface"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="4"/>
            <typename name="point_curve_or_surface_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="near_points">
            <aggregate lower="0" type="SET" upper="4"/>
            <typename name="near_point_relationship"/>
         </explicit>
         <where expression="( ( SIZEOF( SELF\explicit_constraint.reference_elements ) &gt; 0 ) OR ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SDGC_WITH_DIMENSION'  IN TYPEOF( SELF ) ) AND &#10;               ( SIZEOF( SELF\explicit_constraint.constrained_elements ) = 2 ) ) )" label="wr1"/>
         <where expression="( SIZEOF( near_points ) &lt;= SIZEOF( SELF\explicit_constraint.reference_elements ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* near_points | ( NOT ( q\representation_item_relationship.relating_representation_item IN SELF\&#10;               explicit_constraint.reference_elements ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="surface_of_linear_extrusion" supertypes="swept_surface">
         <explicit name="extrusion_axis">
            <typename name="vector"/>
         </explicit>
      </entity>
      <entity name="surface_of_revolution" supertypes="swept_surface">
         <explicit name="axis_position">
            <typename name="axis1_placement"/>
         </explicit>
         <derived expression="representation_item( '' ) || geometric_representation_item(  ) || curve(  ) || line( axis_position.&#10;                     location, representation_item( '' ) || geometric_representation_item(  ) || vector( axis_position.z, 1 ) )" name="axis_line">
            <typename name="line"/>
         </derived>
      </entity>
      <entity abstract.supertype="YES" name="surface_pair" super.expression="ONEOF (sliding_surface_pair, rolling_surface_pair) ANDOR surface_pair_with_range" supertypes="high_order_kinematic_pair">
         <explicit name="surface_1">
            <typename name="surface"/>
         </explicit>
         <explicit name="surface_2">
            <typename name="surface"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( r &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( surface_1 IN r.items ) ) ) ) = &#10;               0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( r &lt;* SELF\kinematic_pair.associated_link_representations_2 | ( NOT ( surface_2 IN r.items ) ) ) ) = &#10;               0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( lr &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) &#10;               = 0 )" label="wr3"/>
      </entity>
      <entity name="surface_pair_with_range" supertypes="surface_pair">
         <explicit name="range_on_surface_1">
            <typename name="rectangular_trimmed_surface"/>
         </explicit>
         <explicit name="range_on_surface_2">
            <typename name="rectangular_trimmed_surface"/>
         </explicit>
         <explicit name="lower_limit_actual_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( SELF\surface_pair.surface_1 :=: range_on_surface_1.basis_surface )" label="wr1"/>
         <where expression="( SELF\surface_pair.surface_2 :=: range_on_surface_2.basis_surface )" label="wr2"/>
         <where expression="( ( ( NOT EXISTS( lower_limit_actual_rotation ) ) OR ( NOT EXISTS( upper_limit_actual_rotation ) ) ) XOR ( &#10;               lower_limit_actual_rotation &lt; upper_limit_actual_rotation ) )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( r &lt;* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( range_on_surface_1 IN r.items ) ) ) ) &#10;               = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( r &lt;* SELF\kinematic_pair.associated_link_representations_2 | ( NOT ( range_on_surface_2 IN r.items ) ) ) ) &#10;               = 0 )" label="wr5"/>
      </entity>
      <entity name="surface_patch" supertypes="founded_item">
         <explicit name="parent_surface">
            <typename name="bounded_surface"/>
         </explicit>
         <explicit name="u_transition">
            <typename name="transition_code"/>
         </explicit>
         <explicit name="v_transition">
            <typename name="transition_code"/>
         </explicit>
         <explicit name="u_sense">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="v_sense">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <inverse attribute="segments" entity="rectangular_composite_surface" name="using_surfaces">
            <inverse.aggregate lower="1" type="BAG" upper="?"/>
         </inverse>
         <where expression="( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_BOUNDED_SURFACE' IN TYPEOF( &#10;               parent_surface ) ) )" label="wr1"/>
      </entity>
      <entity name="surface_patch_set" supertypes="geometric_representation_item">
         <explicit name="patches">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="surface_patch"/>
         </explicit>
      </entity>
      <entity name="surface_prepped_terminal" supertypes="altered_package_terminal"/>
      <entity name="surface_profile_tolerance" supertypes="geometric_tolerance"/>
      <entity name="surface_rendering_properties">
         <explicit name="rendered_colour">
            <typename name="colour"/>
         </explicit>
      </entity>
      <entity name="surface_replica" supertypes="surface">
         <explicit name="parent_surface">
            <typename name="surface"/>
         </explicit>
         <explicit name="transformation">
            <typename name="cartesian_transformation_operator_3d"/>
         </explicit>
         <where expression="acyclic_surface_replica( SELF, parent_surface )" label="wr1"/>
      </entity>
      <entity name="surface_side_style" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="styles">
            <aggregate lower="1" type="SET" upper="7"/>
            <typename name="surface_style_element_select"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( style1 &lt;* SELF.styles | ( SIZEOF( QUERY ( style2 &lt;* ( SELF.styles - style1 ) | ( TYPEOF( style1 ) = &#10;               TYPEOF( style2 ) ) ) ) &gt; 0 ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="surface_smoothness_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="surface_patch_set"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="u_smoothness">
            <typename name="transition_code"/>
         </explicit>
         <explicit name="v_smoothness">
            <typename name="transition_code"/>
         </explicit>
         <where expression="( SIZEOF( SELF\explicit_constraint.reference_elements ) = 0 )" label="wr1"/>
      </entity>
      <entity name="surface_style_boundary" supertypes="founded_item">
         <explicit name="style_of_boundary">
            <typename name="curve_or_render"/>
         </explicit>
      </entity>
      <entity name="surface_style_control_grid" supertypes="founded_item">
         <explicit name="style_of_control_grid">
            <typename name="curve_or_render"/>
         </explicit>
      </entity>
      <entity name="surface_style_fill_area" supertypes="founded_item">
         <explicit name="fill_area">
            <typename name="fill_area_style"/>
         </explicit>
      </entity>
      <entity name="surface_style_parameter_line" supertypes="founded_item">
         <explicit name="style_of_parameter_lines">
            <typename name="curve_or_render"/>
         </explicit>
         <explicit name="direction_counts">
            <aggregate lower="1" type="SET" upper="2"/>
            <typename name="direction_count_select"/>
         </explicit>
         <where expression="( ( HIINDEX( SELF.direction_counts ) = 1 ) XOR ( TYPEOF( SELF.direction_counts[1] ) &lt;&gt; TYPEOF( SELF.direction_counts[2] ) ) )" label="wr1"/>
      </entity>
      <entity name="surface_style_reflectance_ambient">
         <explicit name="ambient_reflectance">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="surface_style_reflectance_ambient_diffuse" supertypes="surface_style_reflectance_ambient">
         <explicit name="diffuse_reflectance">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="surface_style_reflectance_ambient_diffuse_specular" supertypes="surface_style_reflectance_ambient_diffuse">
         <explicit name="specular_reflectance">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="specular_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="specular_colour">
            <typename name="colour"/>
         </explicit>
      </entity>
      <entity name="surface_style_rendering">
         <explicit name="rendering_method">
            <typename name="shading_surface_method"/>
         </explicit>
         <explicit name="surface_colour">
            <typename name="colour"/>
         </explicit>
      </entity>
      <entity name="surface_style_rendering_with_properties" supertypes="surface_style_rendering">
         <explicit name="properties">
            <aggregate lower="1" type="SET" upper="2"/>
            <typename name="rendering_properties_select"/>
         </explicit>
         <where expression="( ( HIINDEX( SELF.properties ) = 1 ) XOR ( TYPEOF( SELF.properties[1] ) &lt;&gt; TYPEOF( SELF.properties[2] ) ) )" label="wr1"/>
      </entity>
      <entity name="surface_style_segmentation_curve" supertypes="founded_item">
         <explicit name="style_of_segmentation_curve">
            <typename name="curve_or_render"/>
         </explicit>
      </entity>
      <entity name="surface_style_silhouette" supertypes="founded_item">
         <explicit name="style_of_silhouette">
            <typename name="curve_or_render"/>
         </explicit>
      </entity>
      <entity name="surface_style_transparent">
         <explicit name="transparency">
            <builtintype type="REAL"/>
         </explicit>
         <where expression="( ( 0 &lt;= transparency ) AND ( transparency &lt;= 1 ) )" label="wr1"/>
      </entity>
      <entity name="surface_style_usage" supertypes="founded_item">
         <explicit name="side">
            <typename name="surface_side"/>
         </explicit>
         <explicit name="style">
            <typename name="surface_side_style_select"/>
         </explicit>
      </entity>
      <entity name="surface_texture_representation" supertypes="representation">
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'MEASURE_REPRESENTATION_ITEM', 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'VALUE_RANGE' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DESCRIPTIVE_REPRESENTATION_ITEM' ] * TYPEOF( i ) ) &lt;&gt; 1 ) ) ) = 0 )" label="wr1"/>
         <where expression="( ( SIZEOF( QUERY ( i &lt;* SELF.items | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'DESCRIPTIVE_REPRESENTATION_ITEM'  ) IN TYPEOF( i ) ) ) ) = 1 ) AND ( SIZEOF( QUERY ( i &lt;* SELF.items | ( ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DESCRIPTIVE_REPRESENTATION_ITEM' ) IN &#10;               TYPEOF( i ) ) AND ( i.name = 'measuring method' ) ) ) ) = 1 ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'MEASURE_REPRESENTATION_ITEM', 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'VALUE_RANGE' ] * TYPEOF( i ) ) = 1 ) ) ) &gt; 0 )" label="wr3"/>
         <where expression="( ( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'REPRESENTATION_RELATIONSHIP.'  + 'REP_1' ) ) &lt;= 1 ) AND ( SIZEOF( USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'REPRESENTATION_RELATIONSHIP.' + 'REP_2' ) ) &#10;               = 0 ) AND ( SIZEOF( QUERY ( rr &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  &#10;               + 'REPRESENTATION_RELATIONSHIP.' + 'REP_1' ) | ( rr.rep_2.name = 'measuring direction' ) ) ) = SIZEOF( USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'REPRESENTATION_RELATIONSHIP.' + 'REP_1' ) ) ) )" label="wr4"/>
         <where expression="( ( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PROPERTY_DEFINITION_REPRESENTATION.'  + 'USED_REPRESENTATION' ) ) = 1 ) AND ( SIZEOF( QUERY ( pdr &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PROPERTY_DEFINITION_REPRESENTATION.' + &#10;               'USED_REPRESENTATION'  ) | ( SIZEOF( QUERY ( gpa &lt;* USEDIN( pdr.definition, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'GENERAL_PROPERTY_ASSOCIATION.' + &#10;               'DERIVED_DEFINITION'  ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GENERAL_PROPERTY'  ) IN TYPEOF( gpa.base_definition ) ) AND ( gpa\general_property_association.base_definition\&#10;               general_property.name = 'surface_condition' ) ) ) ) = 1 ) ) ) = 1 ) )" label="wr5"/>
      </entity>
      <entity name="surface_with_excessive_patches_in_one_direction" supertypes="overcomplex_geometry">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'B_SPLINE_OR_RECTANGULAR_COMPOSITE_SURFACE_SELECT' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity name="surface_with_small_curvature_radius" supertypes="geometry_with_local_near_degeneracy">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'POINT_ON_SURFACE' ] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr5"/>
      </entity>
      <entity name="surfaced_open_shell" supertypes="open_shell">
         <where expression="( SIZEOF( QUERY ( q &lt;* SELF\connected_face_set.cfs_faces | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SURFACE'  IN TYPEOF( q ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="swept_area_solid" super.expression="ONEOF (revolved_area_solid, extruded_area_solid, surface_curve_swept_area_solid)" supertypes="solid_model">
         <explicit name="swept_area">
            <typename name="curve_bounded_surface"/>
         </explicit>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE' IN TYPEOF( swept_area.basis_surface ) )" label="wr1"/>
      </entity>
      <entity name="swept_curve_surface_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="surface"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="swept_surface_or_solid"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
      </entity>
      <entity name="swept_disk_solid" supertypes="solid_model">
         <explicit name="directrix">
            <typename name="curve"/>
         </explicit>
         <explicit name="radius">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="inner_radius" optional="YES">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="start_param">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="end_param">
            <builtintype type="REAL"/>
         </explicit>
         <where expression="( directrix.dim = 3 )" label="wr1"/>
         <where expression="( ( NOT EXISTS( inner_radius ) ) OR ( radius &gt; inner_radius ) )" label="wr2"/>
      </entity>
      <entity name="swept_face_solid" super.expression="ONEOF (extruded_face_solid, revolved_face_solid)" supertypes="solid_model">
         <explicit name="swept_face">
            <typename name="face_surface"/>
         </explicit>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE' IN TYPEOF( swept_face.face_geometry ) )" label="wr1"/>
      </entity>
      <entity name="swept_point_curve_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="curve"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="swept_face_solid"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
      </entity>
      <entity name="swept_surface" super.expression="ONEOF (surface_of_linear_extrusion, surface_of_revolution)" supertypes="surface">
         <explicit name="swept_curve">
            <typename name="curve"/>
         </explicit>
      </entity>
      <entity name="symbol" supertypes="representation_item"/>
      <entity name="symbol_colour">
         <explicit name="colour_of_symbol">
            <typename name="colour"/>
         </explicit>
      </entity>
      <entity name="symbol_representation" supertypes="representation"/>
      <entity name="symbol_representation_map" supertypes="representation_map">
         <explicit name="mapped_representation">
            <typename name="symbol_representation"/>
            <redeclaration entity-ref="representation_map"/>
         </explicit>
         <explicit name="mapping_origin">
            <typename name="axis2_placement"/>
            <redeclaration entity-ref="representation_map"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( mi &lt;* SELF\representation_map.map_usage | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_SYMBOL'  IN TYPEOF( mi ) ) ) ) ) = &#10;               0 )" label="wr1"/>
      </entity>
      <entity name="symbol_style" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="style_of_symbol">
            <typename name="symbol_style_select"/>
         </explicit>
      </entity>
      <entity name="symbol_target" supertypes="geometric_representation_item">
         <explicit name="placement">
            <typename name="axis2_placement"/>
         </explicit>
         <explicit name="x_scale">
            <typename name="positive_ratio_measure"/>
         </explicit>
         <explicit name="y_scale">
            <typename name="positive_ratio_measure"/>
         </explicit>
      </entity>
      <entity name="symmetric_shape_aspect" supertypes="shape_aspect">
         <inverse attribute="related_shape_aspect" entity="shape_aspect_deriving_relationship" name="basis_relationships">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
      </entity>
      <entity name="symmetry_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="2" type="SET" upper="2"/>
            <typename name="geometric_representation_item"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="mirror_element">
            <typename name="linear_geometry_constraint_element"/>
         </explicit>
         <where expression="( SIZEOF( SELF\explicit_constraint.reference_elements ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( TYPEOF( mirror_element ) * [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VECTOR' ] ) = 0 )" label="wr2"/>
         <where expression="( NOT ( ( SELF\geometric_representation_item.dim = 2 ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE'  IN TYPEOF( mirror_element ) ) ) )" label="wr3"/>
      </entity>
      <entity name="symmetry_tolerance" supertypes="geometric_tolerance_with_datum_reference"/>
      <entity name="table_representation_item" supertypes="compound_representation_item">
         <where expression="( SIZEOF( QUERY ( itet &lt;* SELF\compound_representation_item.item_element | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROW_REPRESENTATION_ITEM'  IN TYPEOF( itet ) ) ) ) ) &#10;               = 0 )" label="wr1"/>
      </entity>
      <entity name="tactile_appearance_representation" supertypes="representation">
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'MEASURE_REPRESENTATION_ITEM', 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'VALUE_RANGE' ] * TYPEOF( i ) ) &lt;&gt; 1 ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( name = 'depth' ) ) ) &lt;= 1 )" label="wr2"/>
         <where expression="( ( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'PROPERTY_DEFINITION_REPRESENTATION.'  + 'USED_REPRESENTATION' ) ) = 1 ) AND ( SIZEOF( QUERY ( pdr &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PROPERTY_DEFINITION_REPRESENTATION.' + &#10;               'USED_REPRESENTATION'  ) | ( SIZEOF( QUERY ( gpa &lt;* USEDIN( pdr.definition, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'GENERAL_PROPERTY_ASSOCIATION.' + &#10;               'DERIVED_DEFINITION'  ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'GENERAL_PROPERTY'  ) IN TYPEOF( gpa.base_definition ) ) AND ( gpa\general_property_association.base_definition\&#10;               general_property.name = 'surface_condition' ) ) ) ) = 1 ) ) ) = 1 ) )" label="wr3"/>
      </entity>
      <entity name="tagged_text_format" supertypes="representation_context"/>
      <entity name="tagged_text_item" supertypes="descriptive_representation_item"/>
      <entity name="tan_function" supertypes="unary_function_call"/>
      <entity name="tangent" supertypes="derived_shape_aspect">
         <where expression="( SIZEOF( SELF\derived_shape_aspect.deriving_relationships ) = 1 )" label="wr1"/>
      </entity>
      <entity name="tangent_assembly_constraint" supertypes="binary_assembly_constraint tangent_geometric_constraint"/>
      <entity name="tangent_geometric_constraint" supertypes="explicit_geometric_constraint">
         <explicit name="constrained_elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="curve_or_surface_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="reference_elements">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="curve_or_surface_constraint_element"/>
            <redeclaration entity-ref="explicit_constraint"/>
         </explicit>
         <explicit name="near_points">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="near_point_relationship"/>
         </explicit>
         <explicit name="tangent_contact">
            <typename name="tangent_contact_type"/>
         </explicit>
         <where expression="( ( SIZEOF( SELF\explicit_constraint.reference_elements ) &gt; 0 ) OR ( SIZEOF( SELF\explicit_constraint.&#10;               constrained_elements ) = 2 ) )" label="wr1"/>
         <where expression="( NOT ( ( SELF\geometric_representation_item.dim = 2 ) AND ( tangent_contact = surface_contact ) ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* near_points | ( NOT ( q\representation_item_relationship.relating_representation_item IN SELF\&#10;               explicit_constraint.reference_elements ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="taper" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;               of_shape.definition ) )" label="wr1"/>
         <where expression="( SELF.description IN [ 'angle taper', 'diameter taper', 'directed taper'] )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr4"/>
         <where expression="( ( NOT ( SELF.description = 'angle taper' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;               = 2 ) AND ( it.name = 'taper angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr5"/>
         <where expression="( ( NOT ( SELF.description = 'diameter taper' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'final diameter' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr6"/>
         <where expression="( ( NOT ( SELF.description = 'directed taper' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;               = 2 ) AND ( it.name = 'angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr7"/>
         <where expression="( ( NOT ( SELF.description = 'directed taper' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;               SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION_SHAPE_REPRESENTATION'  IN TYPEOF( &#10;               pdr.used_representation ) ) AND ( pdr.used_representation.name = 'direction' ) ) ) ) = 1 ) ) ) ) = 0 ) )" label="wr8"/>
      </entity>
      <entity name="teardrop_by_angle_template" supertypes="teardrop_template"/>
      <entity name="teardrop_by_length_template" supertypes="teardrop_template"/>
      <entity abstract.supertype="YES" name="teardrop_template" super.expression="ONEOF (snowball_template, teardrop_by_angle_template, teardrop_by_length_template)" supertypes="parametric_template single_stratum_template"/>
      <entity name="tee_profile" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;                of_shape.definition ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( ( NOT ( SIZEOF( impl_rep.used_representation.items ) &gt;= 9 ) ) AND ( &#10;                SIZEOF( impl_rep.used_representation.items ) &lt;= 10 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN&#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( srwp_i &lt;* pdr.used_representation.items | ( ( srwp_i.&#10;                name = 'orientation' ) OR ( srwp_i.name = 'width' ) OR ( srwp_i.name = 'depth' ) OR ( srwp_i.name = &#10;                'cross bar width'  ) OR ( srwp_i.name = 'cross bar depth' ) OR ( srwp_i.name = 'first offset' ) OR ( srwp_i.name &#10;                = 'second offset' ) OR ( srwp_i.name = 'first angle' ) OR ( srwp_i.name = 'second angle' ) OR ( srwp_i.name = &#10;                'radius'  ) ) ) ) = SIZEOF( pdr.used_representation.items ) ) ) ) ) = 1 ) ) ) = 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name =&#10;                'orientation' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'width' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'depth' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'cross bar width' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'cross bar depth' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'first offset' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'second offset' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'first angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr12"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'second angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr13"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'radius' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr14"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION' IN TYPEOF( &#10;                pdr.used_representation ) ) AND ( pdr.used_representation.name = 'profile limit' ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr15"/>
      </entity>
      <entity name="template_material_cross_section_boundary" supertypes="shape_aspect"/>
      <entity name="terminator_symbol" supertypes="annotation_symbol_occurrence">
         <explicit name="annotated_curve">
            <typename name="annotation_curve_occurrence"/>
         </explicit>
      </entity>
      <entity name="tertiary_orientation_feature" supertypes="shape_aspect">
         <where expression="( SELF.product_definitional = TRUE )" label="wr1"/>
      </entity>
      <entity name="tessellated_annotation_occurrence" supertypes="annotation_occurrence">
         <explicit name="item">
            <typename name="tessellated_geometric_set"/>
            <redeclaration entity-ref="styled_item"/>
         </explicit>
      </entity>
      <entity name="tessellated_connecting_edge" supertypes="tessellated_edge">
         <explicit name="smooth">
            <builtintype type="LOGICAL"/>
         </explicit>
         <explicit name="face1">
            <typename name="tessellated_face"/>
         </explicit>
         <explicit name="face2">
            <typename name="tessellated_face"/>
         </explicit>
         <explicit name="line_strip_face1">
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="line_strip_face2">
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <where expression="( SIZEOF( line_strip_face1 ) = SIZEOF( line_strip_face2 ) )" label="wr1"/>
         <where expression="( SIZEOF( line_strip_face1 ) = SIZEOF( SELF\tessellated_edge.line_strip ) )" label="wr2"/>
      </entity>
      <entity name="tessellated_curve_set" supertypes="tessellated_item">
         <explicit name="coordinates">
            <typename name="coordinates_list"/>
         </explicit>
         <explicit name="line_strips">
            <aggregate lower="1" type="LIST" upper="?"/>
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
      </entity>
      <entity name="tessellated_edge" supertypes="tessellated_structured_item">
         <explicit name="coordinates">
            <typename name="coordinates_list"/>
         </explicit>
         <explicit name="geometric_link" optional="YES">
            <typename name="edge_or_curve"/>
         </explicit>
         <explicit name="line_strip">
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="tessellated_face" super.expression="ONEOF (triangulated_face, complex_triangulated_face)" supertypes="tessellated_structured_item">
         <explicit name="coordinates">
            <typename name="coordinates_list"/>
         </explicit>
         <explicit name="pnmax">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="normals">
            <aggregate lower="0" type="LIST" upper="?"/>
            <aggregate lower="3" type="LIST" upper="3"/>
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="geometric_link" optional="YES">
            <typename name="face_or_surface"/>
         </explicit>
         <where expression="( ( SIZEOF( normals ) = 0 ) OR ( SIZEOF( normals ) = 1 ) OR ( SIZEOF( normals ) = pnmax ) )" label="wr1"/>
      </entity>
      <entity name="tessellated_geometric_set" supertypes="tessellated_item">
         <explicit name="children">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="tessellated_item"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="tessellated_item" super.expression="ONEOF (coordinates_list, tessellated_solid, tessellated_shell, tessellated_wire, tessellated_geometric_set, tessellated_curve_set, tessellated_point_set, tessellated_surface_set, tessellated_structured_item)" supertypes="geometric_representation_item">
         <where expression="( SIZEOF( QUERY ( using_rep &lt;* using_representations( SELF ) | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TESSELLATED_SHAPE_REPRESENTATION'  IN TYPEOF( &#10;               using_rep ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="tessellated_point_set" supertypes="tessellated_item">
         <explicit name="coordinates">
            <typename name="coordinates_list"/>
         </explicit>
         <explicit name="point_list">
            <aggregate lower="1" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
      </entity>
      <entity name="tessellated_shape_representation" supertypes="shape_representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="tessellated_item"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GLOBAL_UNIT_ASSIGNED_CONTEXT' IN TYPEOF( SELF\&#10;               representation.context_of_items ) )" label="wr1"/>
      </entity>
      <entity name="tessellated_shell" supertypes="tessellated_item">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="tessellated_structured_item"/>
         </explicit>
         <explicit name="topological_link" optional="YES">
            <typename name="connected_face_set"/>
         </explicit>
      </entity>
      <entity name="tessellated_solid" supertypes="tessellated_item">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="tessellated_structured_item"/>
         </explicit>
         <explicit name="geometric_link" optional="YES">
            <typename name="manifold_solid_brep"/>
         </explicit>
      </entity>
      <entity name="tessellated_structured_item" super.expression="ONEOF (tessellated_face, tessellated_edge, tessellated_vertex)" supertypes="tessellated_item"/>
      <entity abstract.supertype="YES" name="tessellated_surface_set" super.expression="ONEOF (triangulated_surface_set, complex_triangulated_surface_set)" supertypes="tessellated_item">
         <explicit name="coordinates">
            <typename name="coordinates_list"/>
         </explicit>
         <explicit name="pnmax">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="normals">
            <aggregate lower="0" type="LIST" upper="?"/>
            <aggregate lower="3" type="LIST" upper="3"/>
            <builtintype type="REAL"/>
         </explicit>
         <where expression="( ( SIZEOF( normals ) = 0 ) OR ( SIZEOF( normals ) = 1 ) OR ( SIZEOF( normals ) = pnmax ) )" label="wr1"/>
      </entity>
      <entity name="tessellated_vertex" supertypes="tessellated_structured_item">
         <explicit name="coordinates">
            <typename name="coordinates_list"/>
         </explicit>
         <explicit name="topological_link" optional="YES">
            <typename name="vertex_point"/>
         </explicit>
         <explicit name="point_index">
            <builtintype type="INTEGER"/>
         </explicit>
      </entity>
      <entity name="tessellated_wire" supertypes="tessellated_item">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="tessellated_edge_or_vertex"/>
         </explicit>
         <explicit name="geometric_model_link" optional="YES">
            <typename name="path_or_composite_curve"/>
         </explicit>
      </entity>
      <entity name="test_method_based_parameter_assignment" supertypes="parameter_assignment"/>
      <entity name="test_point_part_feature" supertypes="part_tooling_feature"/>
      <entity name="text_font">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <inverse attribute="font" entity="character_glyph_font_usage" name="glyphs">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
      </entity>
      <entity name="text_font_family">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <inverse attribute="family" entity="text_font_in_family" name="fonts">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
      </entity>
      <entity name="text_font_in_family">
         <explicit name="font">
            <typename name="text_font"/>
         </explicit>
         <explicit name="family">
            <typename name="text_font_family"/>
         </explicit>
      </entity>
      <entity name="text_literal" supertypes="geometric_representation_item">
         <explicit name="literal">
            <typename name="presentable_text"/>
         </explicit>
         <explicit name="placement">
            <typename name="axis2_placement"/>
         </explicit>
         <explicit name="alignment">
            <typename name="text_alignment"/>
         </explicit>
         <explicit name="path">
            <typename name="text_path"/>
         </explicit>
         <explicit name="font">
            <typename name="font_select"/>
         </explicit>
      </entity>
      <entity name="text_literal_with_associated_curves" supertypes="text_literal">
         <explicit name="associated_curves">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="curve"/>
         </explicit>
      </entity>
      <entity name="text_literal_with_blanking_box" supertypes="text_literal">
         <explicit name="blanking">
            <typename name="planar_box"/>
         </explicit>
      </entity>
      <entity name="text_literal_with_delineation" supertypes="text_literal">
         <explicit name="delineation">
            <typename name="text_delineation"/>
         </explicit>
      </entity>
      <entity name="text_literal_with_extent" supertypes="text_literal">
         <explicit name="extent">
            <typename name="planar_extent"/>
         </explicit>
      </entity>
      <entity name="text_string_representation" supertypes="representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="text_string_representation_item"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( item &lt;* SELF\representation.items | ( NOT ( SIZEOF( [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEXT_LITERAL' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_TEXT_CHARACTER' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DEFINED_CHARACTER_GLYPH' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_TEXT' ] * TYPEOF( item ) ) = 0 ) ) ) ) &#10;               &gt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( a2p &lt;* QUERY ( item &lt;* SELF\representation.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT'  IN TYPEOF( item ) ) ) | ( &#10;               NOT ( ( SIZEOF( QUERY ( at &lt;* QUERY ( item &lt;* SELF\representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'ANNOTATION_TEXT' ) IN TYPEOF( item ) ) )&#10;               | ( at\mapped_item.mapping_target :=: a2p ) ) ) &gt;= 1 ) OR ( SIZEOF( QUERY ( atc &lt;* QUERY ( item &lt;* SELF\&#10;               representation.items | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;               'ANNOTATION_TEXT_CHARACTER'  ) IN TYPEOF( item ) ) ) | ( atc\mapped_item.mapping_target :=: a2p ) ) ) &gt;= 1 ) ) ) ) ) &#10;               = 0 )" label="wr2"/>
      </entity>
      <entity name="text_style" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="character_appearance">
            <typename name="character_style_select"/>
         </explicit>
      </entity>
      <entity name="text_style_for_defined_font">
         <explicit name="text_colour">
            <typename name="colour"/>
         </explicit>
      </entity>
      <entity name="text_style_with_box_characteristics" supertypes="text_style">
         <explicit name="characteristics">
            <aggregate lower="1" type="SET" upper="4"/>
            <typename name="box_characteristic_select"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( c1 &lt;* SELF.characteristics | ( SIZEOF( QUERY ( c2 &lt;* ( SELF.characteristics - c1 ) | ( TYPEOF( c1 ) &#10;               = TYPEOF( c2 ) ) ) ) &gt; 0 ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="text_style_with_mirror" supertypes="text_style">
         <explicit name="mirror_placement">
            <typename name="axis2_placement"/>
         </explicit>
      </entity>
      <entity name="text_style_with_spacing" supertypes="text_style">
         <explicit name="character_spacing">
            <typename name="character_spacing_select"/>
         </explicit>
      </entity>
      <entity name="thermal_component" supertypes="assembly_component"/>
      <entity name="thermal_feature" supertypes="shape_aspect"/>
      <entity name="thermal_isolation_removal_component" supertypes="material_removal_structured_component"/>
      <entity name="thermal_isolation_removal_template" supertypes="material_removal_structured_template"/>
      <entity name="thermal_network" supertypes="functional_unit"/>
      <entity name="thermal_network_node_definition" supertypes="network_node_definition"/>
      <entity name="thermal_requirement_allocation" supertypes="requirement_assignment"/>
      <entity name="thermal_resistance_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.THERMAL_RESISTANCE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="thermal_resistance_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensional_exponents( -1, -1, -3, 0, 1, 0, 0 ) )" label="wr1"/>
      </entity>
      <entity name="thermodynamic_temperature_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.THERMODYNAMIC_TEMPERATURE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="thermodynamic_temperature_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 1 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="thickened_face_solid" supertypes="solid_model">
         <explicit name="base_element">
            <typename name="generalized_surface_select"/>
         </explicit>
         <explicit name="offset1">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="offset2">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE' IN TYPEOF( base_element ) ) AND&#10;               ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOUNDED_SURFACE' IN TYPEOF( &#10;               base_element ) ) ) ) )" label="wr1"/>
         <where expression="( offset1 &lt;&gt; offset2 )" label="wr2"/>
      </entity>
      <entity name="thickness_laminate_table" supertypes="zone_structural_makeup"/>
      <entity name="thread" supertypes="feature_definition">
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN&#10;                TYPEOF( pdr.used_representation ) ) AND ( 8 &lt;= SIZEOF( pdr.used_representation.items ) ) AND ( SIZEOF( pdr.&#10;                used_representation.items ) &lt;= 11 ) ) ) ) = 1 ) ) ) = 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'major diameter' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'minor diameter' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'pitch diameter' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RATIO_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;                2 ) AND ( it.name = 'number of threads' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'fit class' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'form' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'hand' ) AND ( it.description IN [ 'left', 'right'] ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'qualifier' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'thread side' ) AND ( ( it.description = 'internal' ) OR ( it.description = 'external' ) ) ) ) ) &#10;                = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'crest' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'partial area occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'applied area usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.APPLIED_AREA' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr12"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;                QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'applied shape' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) = 1 ) ) ) ) = 0 )" label="wr13"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'fit class 2' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr14"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'nominal size' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr15"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'thread runout' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'thread runout usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.THREAD_RUNOUT' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) &lt;= 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr16"/>
      </entity>
      <entity name="thread_runout" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( SELF.&#10;               of_shape ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( impl_rep.used_representation.items ) = 3 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( srwp_i &lt;* pdr.used_representation.items | ( NOT ( srwp_i.&#10;               name IN [ 'length of runout', 'pitch or dimension', 'included or extra'] ) ) ) ) &gt; 0 ) ) ) ) = 0 ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) =&#10;               2 ) AND ( it.name = 'length of runout' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) &lt;= 1 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;               it ) ) AND ( it.name = 'pitch or dimension' ) AND ( it.description IN [ 'pitch', 'pitch or dimension'] ) ) ) ) = 1 ) ) ) ) &#10;               = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;               | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;               TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;               it ) ) AND ( it.name = 'included or extra' ) AND ( it.description IN [ 'included', 'extra'] ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) &#10;               = 0 )" label="wr7"/>
      </entity>
      <entity name="through_port_variable" supertypes="port_variable"/>
      <entity name="tiebar_printed_component" supertypes="printed_component structured_layout_component"/>
      <entity name="tile_area_template" supertypes="fill_area_template"/>
      <entity name="time_interval">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="time_interval_assignment">
         <explicit name="assigned_time_interval">
            <typename name="time_interval"/>
         </explicit>
         <explicit name="role">
            <typename name="time_interval_role"/>
         </explicit>
      </entity>
      <entity name="time_interval_based_effectivity" supertypes="effectivity">
         <explicit name="effectivity_period">
            <typename name="time_interval"/>
         </explicit>
      </entity>
      <entity name="time_interval_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_time_interval">
            <typename name="time_interval"/>
         </explicit>
         <explicit name="related_time_interval">
            <typename name="time_interval"/>
         </explicit>
      </entity>
      <entity name="time_interval_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="time_interval_with_bounds" supertypes="time_interval">
         <explicit name="primary_bound" optional="YES">
            <typename name="date_time_or_event_occurrence"/>
         </explicit>
         <explicit name="secondary_bound" optional="YES">
            <typename name="date_time_or_event_occurrence"/>
         </explicit>
         <explicit name="duration" optional="YES">
            <typename name="time_measure_with_unit"/>
         </explicit>
         <where expression="( EXISTS( primary_bound ) OR EXISTS( secondary_bound ) )" label="wr1"/>
         <where expression="( NOT ( EXISTS( primary_bound ) AND EXISTS( secondary_bound ) AND EXISTS( duration ) ) )" label="wr2"/>
         <where expression="( EXISTS( primary_bound ) AND ( NOT EXISTS( secondary_bound ) ) AND ( ( NOT EXISTS( duration ) ) OR &#10;               duration_is_positive( duration ) ) )" label="wr3"/>
         <where expression="( EXISTS( secondary_bound ) AND ( NOT EXISTS( primary_bound ) ) AND EXISTS( duration ) AND duration_is_negative( &#10;               duration ) )" label="wr4"/>
      </entity>
      <entity name="time_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TIME_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="time_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 1 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="tolerance_value">
         <explicit name="lower_bound">
            <typename name="measure_with_unit"/>
         </explicit>
         <explicit name="upper_bound">
            <typename name="measure_with_unit"/>
         </explicit>
         <derived expression="upper_bound\measure_with_unit.value_component" name="ubvc">
            <builtintype type="REAL"/>
         </derived>
         <derived expression="lower_bound\measure_with_unit.value_component" name="lbvc">
            <builtintype type="REAL"/>
         </derived>
         <where expression="( ubvc &gt; lbvc )" label="wr1"/>
         <where expression="( upper_bound\measure_with_unit.unit_component = lower_bound\measure_with_unit.unit_component )" label="wr2"/>
      </entity>
      <entity name="tolerance_zone" supertypes="shape_aspect">
         <explicit name="defining_tolerance">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="tolerance_zone_target"/>
         </explicit>
         <explicit name="form">
            <typename name="tolerance_zone_form"/>
         </explicit>
      </entity>
      <entity name="tolerance_zone_definition" super.expression="ONEOF (projected_zone_definition, non_uniform_zone_definition, runout_zone_definition)">
         <explicit name="zone">
            <typename name="tolerance_zone"/>
         </explicit>
         <explicit name="boundaries">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="shape_aspect"/>
         </explicit>
      </entity>
      <entity name="tolerance_zone_form">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="tool_registration_mark" supertypes="part_tooling_feature"/>
      <entity name="topological_representation_item" super.expression="ONEOF (vertex, edge, face_bound, face, vertex_shell, wire_shell, connected_edge_set, connected_face_set, (loop ANDOR path))" supertypes="representation_item"/>
      <entity abstract.supertype="YES" name="topology_related_to_multiply_defined_geometry" super.expression="ONEOF (multiply_defined_faces, multiply_defined_vertices, multiply_defined_edges)" supertypes="inapt_topology_and_geometry_relationship"/>
      <entity abstract.supertype="YES" name="topology_related_to_nearly_degenerate_geometry" super.expression="ONEOF (short_length_edge, small_area_face, entirely_narrow_face)" supertypes="inapt_topology_and_geometry_relationship"/>
      <entity abstract.supertype="YES" name="topology_related_to_overlapping_geometry" super.expression="ONEOF (partly_overlapping_faces, partly_overlapping_edges)" supertypes="inapt_topology_and_geometry_relationship"/>
      <entity abstract.supertype="YES" name="topology_related_to_self_intersecting_geometry" super.expression="ONEOF (self_intersecting_loop, self_intersecting_shell, intersecting_connected_face_sets)" supertypes="inapt_topology_and_geometry_relationship"/>
      <entity name="toroidal_surface" supertypes="elementary_surface">
         <explicit name="major_radius">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="minor_radius">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="torus" supertypes="geometric_representation_item">
         <explicit name="position">
            <typename name="axis1_placement"/>
         </explicit>
         <explicit name="major_radius">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="minor_radius">
            <typename name="positive_length_measure"/>
         </explicit>
         <where expression="( major_radius &gt; minor_radius )" label="wr1"/>
      </entity>
      <entity name="total_runout_tolerance" supertypes="geometric_tolerance_with_datum_reference"/>
      <entity name="trace_template" super.expression="default_trace_template" supertypes="parametric_template"/>
      <entity abstract.supertype="YES" name="track_blended_solid" supertypes="edge_blended_solid">
         <where expression="check_continuous_edges( SELF\edge_blended_solid.blended_edges )" label="wr1"/>
      </entity>
      <entity name="track_blended_solid_with_end_conditions" supertypes="track_blended_solid">
         <explicit name="end_conditions">
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="blend_end_condition_select"/>
         </explicit>
         <where expression="( SIZEOF( TYPEOF( SELF ) * [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'SOLID_WITH_CHAMFERED_EDGES' ] ) = 1 )" label="wr1"/>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX' IN TYPEOF( end_conditions[1] ) ) &#10;               AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX' IN TYPEOF( end_conditions[2] ) ) ) )" label="wr2"/>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX' IN TYPEOF( end_conditions[1] ) ) &#10;               AND ( NOT ( ( end_conditions[1] :=: SELF\edge_blended_solid.blended_edges[1].edge_start ) XOR ( end_conditions[1] &#10;               :=: SELF\edge_blended_solid.blended_edges[1].edge_end ) ) ) ) )" label="wr3"/>
         <where expression="( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX' IN TYPEOF( end_conditions[2] ) ) &#10;               AND ( NOT ( ( end_conditions[2] :=: SELF\edge_blended_solid.blended_edges[HIINDEX( SELF\edge_blended_solid.&#10;               blended_edges )].edge_start ) XOR ( end_conditions[2] :=: SELF\edge_blended_solid.blended_edges[HIINDEX( SELF\&#10;               edge_blended_solid.blended_edges )].edge_end ) ) ) ) )" label="wr4"/>
      </entity>
      <entity name="transform_port_variable" supertypes="port_variable"/>
      <entity name="transformation_with_derived_angle" super.expression="ONEOF (draped_defined_transformation, laid_defined_transformation)" supertypes="item_defined_transformation">
         <explicit name="transform_item_1">
            <typename name="angle_direction_reference_with_a2p3d_select"/>
            <redeclaration entity-ref="item_defined_transformation"/>
         </explicit>
         <explicit name="transform_item_2">
            <typename name="axis2_placement_3d"/>
            <redeclaration entity-ref="item_defined_transformation"/>
         </explicit>
         <derived expression="derive_angle( SELF\item_defined_transformation.transform_item_1, SELF\&#10;                             item_defined_transformation.transform_item_2 )" name="orientation_angle">
            <typename name="plane_angle_measure"/>
         </derived>
         <where expression="( ( SELF\item_defined_transformation.transform_item_1\axis2_placement_3d.p[3].direction_ratios[1] = SELF\&#10;               item_defined_transformation.transform_item_2\axis2_placement_3d.p[3].direction_ratios[1] ) AND ( SELF\&#10;               item_defined_transformation.transform_item_1\axis2_placement_3d.p[3].direction_ratios[2] = SELF\&#10;               item_defined_transformation.transform_item_2\axis2_placement_3d.p[3].direction_ratios[2] ) AND ( SELF\&#10;               item_defined_transformation.transform_item_1\axis2_placement_3d.p[3].direction_ratios[3] = SELF\&#10;               item_defined_transformation.transform_item_2\axis2_placement_3d.p[3].direction_ratios[3] ) )" label="wr1"/>
      </entity>
      <entity name="transition_feature" super.expression="ONEOF (chamfer, edge_round, fillet)" supertypes="shape_aspect">
         <where expression="( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOUND_FEATURE' ] * TYPEOF( SELF.of_shape.&#10;               definition ) ) = 1 )" label="wr1"/>
         <where expression="( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CHAMFER', &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_ROUND' , &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FILLET' ] * TYPEOF( SELF ) ) = 1 )" label="wr2"/>
      </entity>
      <entity name="triangulated_face" supertypes="tessellated_face">
         <explicit name="pnindex">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="triangles">
            <aggregate lower="1" type="LIST" upper="?"/>
            <aggregate lower="3" type="LIST" upper="3"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <where expression="( ( SIZEOF( pnindex ) = 0 ) OR ( SIZEOF( pnindex ) = SELF\tessellated_face.pnmax ) )" label="wr1"/>
         <where expression="( NOT ( ( SIZEOF( pnindex ) = 0 ) AND ( SELF\tessellated_face.pnmax &lt;&gt; coordinates.npoints ) ) )" label="wr2"/>
      </entity>
      <entity name="triangulated_surface_set" supertypes="tessellated_surface_set">
         <explicit name="pnindex">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="triangles">
            <aggregate lower="1" type="LIST" upper="?"/>
            <aggregate lower="3" type="LIST" upper="3"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <where expression="( ( SIZEOF( pnindex ) = 0 ) OR ( SIZEOF( pnindex ) = SELF\tessellated_surface_set.pnmax ) )" label="wr1"/>
         <where expression="( NOT ( ( SIZEOF( pnindex ) = 0 ) AND ( SELF\tessellated_surface_set.pnmax &lt;&gt; coordinates.npoints ) ) )" label="wr2"/>
      </entity>
      <entity name="trimmed_curve" supertypes="bounded_curve">
         <explicit name="basis_curve">
            <typename name="curve"/>
         </explicit>
         <explicit name="trim_1">
            <aggregate lower="1" type="SET" upper="2"/>
            <typename name="trimming_select"/>
         </explicit>
         <explicit name="trim_2">
            <aggregate lower="1" type="SET" upper="2"/>
            <typename name="trimming_select"/>
         </explicit>
         <explicit name="sense_agreement">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="master_representation">
            <typename name="trimming_preference"/>
         </explicit>
         <where expression="( ( HIINDEX( trim_1 ) = 1 ) OR ( TYPEOF( trim_1[1] ) &lt;&gt; TYPEOF( trim_1[2] ) ) )" label="wr1"/>
         <where expression="( ( HIINDEX( trim_2 ) = 1 ) OR ( TYPEOF( trim_2[1] ) &lt;&gt; TYPEOF( trim_2[2] ) ) )" label="wr2"/>
      </entity>
      <entity name="turned_knurl" supertypes="feature_definition">
         <where expression="( SELF\characterized_object.description IN [ 'diamond', 'diagonal', 'straight'] )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN&#10;                TYPEOF( pdr.used_representation ) ) AND ( 6 &lt;= SIZEOF( pdr.used_representation.items ) ) AND ( SIZEOF( pdr.&#10;                used_representation.items ) &lt;= 9 ) ) ) ) = 1 ) ) ) = 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' IN TYPEOF( it\&#10;                measure_with_unit.value_component ) ) AND ( it.name = 'number of teeth' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'major diameter' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'nominal diameter' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'tooth depth' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'root fillet' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'diametral pitch' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( ( NOT ( SELF\characterized_object.description IN [ 'diamond', 'diagonal'] ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( &#10;                SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION' ) | ( &#10;                NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'helix angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr9"/>
         <where expression="( ( NOT ( SELF\characterized_object.description = 'diagonal' ) ) OR ( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;                SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( &#10;                it ) ) AND ( it.name = 'helix hand' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( sa_occ.&#10;                description = 'partial area occurrence' ) AND ( SIZEOF( QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'&#10;                + 'RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'applied area usage' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.APPLIED_AREA' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( pds &lt;* QUERY ( pd &lt;* USEDIN( SELF, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) )&#10;                | ( NOT ( SIZEOF( QUERY ( sa_occ &lt;* USEDIN( pds, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( SIZEOF( &#10;                QUERY ( sdr &lt;* QUERY ( sar &lt;* USEDIN( sa_occ, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'SHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT'  ) | ( ( sar.description = 'applied shape' ) AND ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) ) )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT' IN TYPEOF( sdr.&#10;                relating_shape_aspect ) ) ) ) = 1 ) ) ) = 1 ) ) ) ) = 0 )" label="wr12"/>
      </entity>
      <entity name="two_direction_repeat_factor" supertypes="one_direction_repeat_factor">
         <explicit name="second_repeat_factor">
            <typename name="vector"/>
         </explicit>
      </entity>
      <entity name="type_qualifier">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="unary_boolean_expression" super.expression="ONEOF (not_expression, odd_function)" supertypes="boolean_expression unary_generic_expression"/>
      <entity abstract.supertype="YES" name="unary_function_call" super.expression="ONEOF (abs_function, minus_function, sin_function, cos_function, tan_function, asin_function, acos_function, exp_function, log_function, log2_function, log10_function, square_root_function)" supertypes="unary_numeric_expression"/>
      <entity abstract.supertype="YES" name="unary_generic_expression" supertypes="generic_expression">
         <explicit name="operand">
            <typename name="generic_expression"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="unary_numeric_expression" supertypes="numeric_expression unary_generic_expression">
         <explicit name="operand">
            <typename name="numeric_expression"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
      </entity>
      <entity name="unbound_parameter_environment" supertypes="environment">
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.UNBOUND_VARIATIONAL_PARAMETER' IN TYPEOF( SELF&#10;               \environment.syntactic_representation ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'UNBOUND_VARIATIONAL_PARAMETER_SEMANTICS'  IN TYPEOF( SELF\environment.semantics ) ) )" label="wr1"/>
      </entity>
      <entity name="unbound_variational_parameter" supertypes="variational_parameter">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.UNBOUND_PARAMETER_ENVIRONMENT' IN TYPEOF( SELF\&#10;               generic_variable.interpretation ) )" label="wr1"/>
      </entity>
      <entity name="unbound_variational_parameter_semantics" supertypes="variable_semantics"/>
      <entity name="uncertainty_assigned_representation" supertypes="representation">
         <explicit name="uncertainty">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="uncertainty_measure_with_unit"/>
         </explicit>
      </entity>
      <entity name="uncertainty_measure_with_unit" supertypes="measure_with_unit">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <where expression="valid_measure_value( SELF\measure_with_unit.value_component )" label="wr1"/>
      </entity>
      <entity name="uncertainty_qualifier" super.expression="ONEOF (standard_uncertainty, qualitative_uncertainty)">
         <explicit name="measure_name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="unconstrained_pair" supertypes="low_order_kinematic_pair">
         <derived expression="TRUE" name="t_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="t_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="t_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="r_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="r_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="r_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
      </entity>
      <entity name="unconstrained_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="unconstrained_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="actual_placement">
            <typename name="axis2_placement_3d"/>
         </explicit>
      </entity>
      <entity name="unequally_disposed_geometric_tolerance" supertypes="geometric_tolerance">
         <explicit name="displacement">
            <typename name="length_measure_with_unit"/>
         </explicit>
         <where expression="( ( 'NUMBER' IN TYPEOF( SELF\geometric_tolerance_with_defined_unit.unit_size\measure_with_unit.value_component ) ) AND&#10;               ( SELF\geometric_tolerance_with_defined_unit.unit_size\measure_with_unit.value_component &gt; 0 ) )" label="wr1"/>
      </entity>
      <entity name="uniform_curve" supertypes="b_spline_curve"/>
      <entity name="uniform_product_space" supertypes="maths_space generic_literal">
         <explicit name="base">
            <typename name="maths_space"/>
         </explicit>
         <explicit name="exponent">
            <typename name="positive_integer"/>
         </explicit>
         <where expression="expression_is_constant( base )" label="wr1"/>
         <where expression="no_cyclic_space_reference( SELF, [] )" label="wr2"/>
         <where expression="( base &lt;&gt; the_empty_space )" label="wr3"/>
      </entity>
      <entity name="uniform_resource_identifier" supertypes="descriptive_representation_item"/>
      <entity name="uniform_surface" supertypes="b_spline_surface"/>
      <entity name="universal_pair" supertypes="low_order_kinematic_pair">
         <explicit name="input_skew_angle" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <derived expression="FALSE" name="t_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="t_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="r_x">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="FALSE" name="r_y">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="TRUE" name="r_z">
            <builtintype type="BOOLEAN"/>
            <redeclaration entity-ref="low_order_kinematic_pair"/>
         </derived>
         <derived expression="NVL( input_skew_angle, 0 )" name="skew_angle">
            <typename name="plane_angle_measure"/>
         </derived>
         <where expression="( COS( plane_angle_for_pair_in_radian( SELF, skew_angle ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="universal_pair_value" supertypes="pair_value">
         <explicit name="applies_to_pair">
            <typename name="universal_pair"/>
            <redeclaration entity-ref="pair_value"/>
         </explicit>
         <explicit name="first_rotation_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="second_rotation_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
      </entity>
      <entity name="universal_pair_with_range" supertypes="universal_pair">
         <explicit name="lower_limit_first_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_first_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="lower_limit_second_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="upper_limit_second_rotation" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( ( ( NOT EXISTS( lower_limit_first_rotation ) ) OR ( NOT EXISTS( upper_limit_first_rotation ) ) ) XOR ( &#10;               lower_limit_first_rotation &lt; upper_limit_first_rotation ) )" label="wr1"/>
         <where expression="( ( ( NOT EXISTS( lower_limit_second_rotation ) ) OR ( NOT EXISTS( upper_limit_second_rotation ) ) ) XOR ( &#10;               lower_limit_second_rotation &lt; upper_limit_second_rotation ) )" label="wr2"/>
      </entity>
      <entity name="unplated_cutout_edge_segment" supertypes="cutout_edge_segment"/>
      <entity name="unplated_interconnect_module_edge_segment" supertypes="interconnect_module_edge_segment"/>
      <entity name="unrouted_conductive_interconnect_element" supertypes="conductive_interconnect_element"/>
      <entity name="unsupported_passage" supertypes="inter_stratum_feature"/>
      <entity name="unsupported_passage_dependent_land" supertypes="inter_stratum_feature_dependent_land"/>
      <entity name="unsupported_passage_template" super.expression="ONEOF (counterbore_passage_template, countersunk_passage_template, blind_passage_template)" supertypes="continuous_template inter_stratum_feature_template"/>
      <entity name="unused_patches" supertypes="overcomplex_topology_and_geometry_relationship">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE'  IN value_limit_type( SELF\&#10;               shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COUNT_MEASURE' )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACE_SURFACE' ] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;               + 'B_SPLINE_SURFACE_STRIP'] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr5"/>
      </entity>
      <entity name="unused_shape_element" supertypes="externally_conditioned_data_quality_criterion">
         <where expression="validate_ecdq_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'REPRESENTATION_ITEM' ] )" label="wr1"/>
      </entity>
      <entity name="usage_association" supertypes="action_method_relationship">
         <explicit name="relating_method">
            <typename name="information_usage_right"/>
            <redeclaration entity-ref="action_method_relationship"/>
         </explicit>
         <explicit name="related_method">
            <typename name="information_usage_right"/>
            <redeclaration entity-ref="action_method_relationship"/>
         </explicit>
         <derived expression="SELF\action_method_relationship.related_method" name="related">
            <typename name="information_usage_right"/>
         </derived>
         <derived expression="SELF\action_method_relationship.relating_method" name="relating">
            <typename name="information_usage_right"/>
         </derived>
      </entity>
      <entity name="usage_concept_usage_relationship" supertypes="mapped_item item_identified_representation_usage">
         <explicit name="used_representation">
            <typename name="shape_representation"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </explicit>
         <explicit name="definition">
            <typename name="shape_aspect"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </explicit>
         <derived expression="SELF" name="identified_item">
            <typename name="usage_concept_usage_relationship"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </derived>
         <where expression="( SELF IN SELF\item_identified_representation_usage.used_representation.items )" label="wr1"/>
      </entity>
      <entity name="usage_view_connection_zone_terminal_shape_relationship" supertypes="representation representation_relationship_with_transformation">
         <explicit name="rep_1">
            <typename name="shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="rep_1"/>
            <unique.attribute attribute="rep_2"/>
         </unique>
         <where expression="( SELF\representation_relationship.rep_1 &lt;&gt; SELF\representation_relationship.rep_2 )" label="wr1"/>
      </entity>
      <entity name="user_defined_curve_font" supertypes="curve_style_font mapped_item"/>
      <entity name="user_defined_marker" supertypes="mapped_item pre_defined_marker"/>
      <entity name="user_defined_terminator_symbol" supertypes="mapped_item pre_defined_symbol"/>
      <entity name="user_selected_elements" supertypes="representation_item">
         <explicit name="picked_items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="representation_item"/>
         </explicit>
      </entity>
      <entity name="user_selected_shape_elements" supertypes="user_selected_elements">
         <explicit name="picked_items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="shape_representation_item"/>
            <redeclaration entity-ref="user_selected_elements"/>
         </explicit>
      </entity>
      <entity name="valid_range_property_definition_representation" supertypes="property_definition_representation"/>
      <entity name="value_format_type_qualifier">
         <explicit name="format_type">
            <typename name="value_format_type"/>
         </explicit>
      </entity>
      <entity name="value_function" super.expression="int_value_function" supertypes="numeric_expression unary_generic_expression">
         <explicit name="operand">
            <typename name="string_expression"/>
            <redeclaration entity-ref="unary_generic_expression"/>
         </explicit>
      </entity>
      <entity name="value_range" supertypes="compound_representation_item">
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SET_REPRESENTATION_ITEM' ) IN TYPEOF( &#10;               item_element ) ) AND value_range_wr1( item_element ) )" label="wr1"/>
         <where expression="value_range_wr2( item_element )" label="wr2"/>
         <where expression="value_range_wr3( item_element )" label="wr3"/>
      </entity>
      <entity name="value_representation_item" supertypes="representation_item">
         <explicit name="value_component">
            <typename name="measure_value"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( rep &lt;* using_representations( SELF ) | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GLOBAL_UNIT_ASSIGNED_CONTEXT'  IN TYPEOF( rep.&#10;               context_of_items ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="variable" super.expression="ONEOF (numeric_variable, boolean_variable, string_variable)" supertypes="generic_variable"/>
      <entity name="variable_expression" supertypes="variable_semantics">
         <explicit name="property_associated">
            <typename name="property_variable_rep_select"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="variable_semantics"/>
      <entity name="variational_current_representation_relationship" supertypes="representation_relationship">
         <explicit name="rep_1">
            <typename name="variational_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="current_result">
            <typename name="representation"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="current_result"/>
         </unique>
         <where expression="( QUERY ( q &lt;* SELF\representation_relationship.rep_1.items | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VARIATIONAL_REPRESENTATION_ITEM'  IN TYPEOF( q ) ) ) ) &#10;               = SELF\representation_relationship.rep_2.items )" label="wr1"/>
         <where expression="( SELF\representation_relationship.rep_1.context_of_items :=: SELF\representation_relationship.rep_2.context_of_items )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* SELF\representation_relationship.rep_2.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VARIATIONAL_REPRESENTATION_ITEM'  IN TYPEOF( q ) ) ) ) &#10;               = 0 )" label="wr3"/>
         <where expression="( ( TYPEOF( SELF\representation_relationship.rep_1 ) - TYPEOF( SELF\representation_relationship.rep_2 ) ) = [&#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VARIATIONAL_REPRESENTATION' ] )" label="wr4"/>
         <where expression="( current_result :=: SELF\representation_relationship.rep_2 )" label="wr5"/>
      </entity>
      <entity abstract.supertype="YES" name="variational_parameter" super.expression="ONEOF (bound_variational_parameter, unbound_variational_parameter)" supertypes="variational_representation_item maths_variable">
         <explicit name="parameter_description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="parameter_current_value">
            <typename name="maths_value"/>
         </explicit>
         <where expression="member_of( parameter_current_value, SELF\maths_variable.values_space )" label="wr1"/>
         <where expression="( SELF\maths_variable.name = SELF\representation_item.name )" label="wr2"/>
      </entity>
      <entity name="variational_representation" supertypes="representation">
         <inverse attribute="rep_1" entity="variational_current_representation_relationship" name="cm_link"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* SELF\representation.items | ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VARIATIONAL_REPRESENTATION_ITEM'  IN TYPEOF( q ) ) ) ) &#10;               &gt; 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* ( SELF\representation.items - cm_link.rep_2.items ) | invalidate_vrep_item( q ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity abstract.supertype="YES" name="variational_representation_item" super.expression="auxiliary_geometric_representation_item" supertypes="representation_item">
         <where expression="( SIZEOF( QUERY ( q &lt;* using_representations( SELF ) | ( NOT ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VARIATIONAL_REPRESENTATION'  IN TYPEOF( q ) ) ) ) ) &#10;               = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( q &lt;* using_representations( SELF ) | ( NOT ( SELF IN q.items ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="vector" supertypes="geometric_representation_item">
         <explicit name="orientation">
            <typename name="direction"/>
         </explicit>
         <explicit name="magnitude">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( magnitude &gt;= 0 )" label="wr1"/>
      </entity>
      <entity name="vector_style" supertypes="curve_style pre_defined_terminator_symbol"/>
      <entity name="vee_profile" supertypes="shape_aspect">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FEATURE_COMPONENT_DEFINITION' IN TYPEOF( SELF.&#10;                of_shape.definition ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) ) = 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( ( NOT ( SIZEOF( impl_rep.used_representation.items ) &gt;= 3 ) ) AND ( &#10;                SIZEOF( impl_rep.used_representation.items ) &lt;= 6 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN&#10;                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( srwp_i &lt;* pdr.used_representation.items | ( ( srwp_i.&#10;                name = 'orientation' ) OR ( srwp_i.name = 'profile angle' ) OR ( srwp_i.name = 'tilt angle' ) OR ( srwp_i.name = &#10;                'profile radius'  ) OR ( srwp_i.name = 'first length' ) OR ( srwp_i.name = 'second length' ) ) ) ) = SIZEOF( pdr.&#10;                used_representation.items ) ) ) ) ) = 1 ) ) ) = 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name =&#10;                'orientation' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' IN TYPEOF( it\&#10;                measure_with_unit.value_component ) ) AND ( it.name = 'profile radius' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'profile angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM', &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE_WITH_UNIT' ] * TYPEOF( it ) ) &#10;                = 2 ) AND ( it.name = 'tilt angle' ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION' IN TYPEOF( &#10;                pdr.used_representation ) ) AND ( pdr.used_representation.name = 'profile limit' ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' IN TYPEOF( it\&#10;                measure_with_unit.value_component ) ) AND ( it.name = 'first length' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;                + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;                | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;                TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( it ) ) &#10;                AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' IN TYPEOF( it\&#10;                measure_with_unit.value_component ) ) AND ( it.name = 'second length' ) ) ) ) &lt;= 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr11"/>
      </entity>
      <entity name="velocity_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VELOCITY_UNIT' IN TYPEOF( SELF\measure_with_unit&#10;               .unit_component ) )" label="wr1"/>
      </entity>
      <entity name="velocity_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensional_exponents( 1, 0, -1, 0, 0, 0, 0 ) )" label="wr1"/>
      </entity>
      <entity name="versioned_action_request">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="version" optional="YES">
            <typename name="label"/>
         </explicit>
         <explicit name="purpose">
            <typename name="text"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="versioned_action_request_relationship">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_versioned_action_request">
            <typename name="versioned_action_request"/>
         </explicit>
         <explicit name="related_versioned_action_request">
            <typename name="versioned_action_request"/>
         </explicit>
      </entity>
      <entity name="vertex" supertypes="topological_representation_item"/>
      <entity name="vertex_loop" supertypes="loop">
         <explicit name="loop_vertex">
            <typename name="vertex"/>
         </explicit>
      </entity>
      <entity name="vertex_point" supertypes="vertex geometric_representation_item">
         <explicit name="vertex_geometry">
            <typename name="point"/>
         </explicit>
      </entity>
      <entity name="vertex_shell" supertypes="topological_representation_item">
         <explicit name="vertex_shell_extent">
            <typename name="vertex_loop"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="via" super.expression="filled_via ANDOR ONEOF (blind_via, buried_via, interfacial_connection)" supertypes="plated_passage"/>
      <entity name="via_template" supertypes="continuous_template inter_stratum_feature_template"/>
      <entity name="view_volume" supertypes="founded_item">
         <explicit name="projection_type">
            <typename name="central_or_parallel"/>
         </explicit>
         <explicit name="projection_point">
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="view_plane_distance">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="front_plane_distance">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="front_plane_clipping">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="back_plane_distance">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="back_plane_clipping">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="view_volume_sides_clipping">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="view_window">
            <typename name="planar_box"/>
         </explicit>
         <inverse attribute="perspective_of_volume" entity="camera_model_d3" name="camera_usages">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
         <where expression="( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_2D' IN TYPEOF( SELF\&#10;               view_volume.view_window.placement ) ) OR ( dot_product( representation_item( ' ' ) || &#10;               geometric_representation_item(  ) || direction( [0, 0, 1] ), SELF.view_window\planar_box.placement\&#10;               axis2_placement_3d.p[3] ) = 1 ) )" label="wr1"/>
         <where expression="( view_plane_distance = view_window.placement\placement.location.coordinates[3] )" label="wr2"/>
      </entity>
      <entity name="visual_appearance_representation" supertypes="representation">
         <where expression="( ( 3 &lt;= SIZEOF( SELF.items ) ) AND ( SIZEOF( SELF.items ) &lt;= 9 ) AND ( ( SIZEOF( QUERY ( i &lt;* items | ( ( ( &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DESCRIPTIVE_REPRESENTATION_ITEM' ) IN &#10;                TYPEOF( i ) ) AND ( i.name IN [ 'colour id', 'colour name', 'lustre', 'pattern', 'transparency', 'orientation'] ) ) ) ) &#10;                + SIZEOF( QUERY ( i &lt;* items | ( ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' &#10;                + 'MEASURE_REPRESENTATION_ITEM', 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'VALUE_RANGE' ] * TYPEOF( i ) ) = 1 ) AND ( i.name IN [ 'refraction index', 'opacity'] ) ) ) ) + SIZEOF( &#10;                QUERY ( i &lt;* items | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DOCUMENT_FILE' ) &#10;                IN TYPEOF( i ) ) AND ( i.name IN [ 'texture map'] ) ) ) ) ) = SIZEOF( SELF.items ) ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( i.name = 'colour id' ) ) ) = 1 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( i.name = 'lustre' ) ) ) = 1 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( i.name = 'colour name' ) ) ) &lt;= 1 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( i.name = 'pattern' ) ) ) &lt;= 1 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( i.name = 'transparency' ) ) ) &lt;= 1 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( i.name = 'texture map' ) ) ) &lt;= 1 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( i.name = 'refraction index' ) ) ) &lt;= 1 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( i.name = 'opacity' ) ) ) &lt;= 1 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( i &lt;* SELF.items | ( i.name = 'orientation' ) ) ) &lt;= 1 )" label="wr10"/>
         <where expression="( ( SIZEOF( USEDIN( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'PROPERTY_DEFINITION_REPRESENTATION.'  + 'USED_REPRESENTATION' ) ) = 1 ) AND ( SIZEOF( QUERY ( pdr &lt;* USEDIN( &#10;                SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'PROPERTY_DEFINITION_REPRESENTATION.' &#10;                + 'USED_REPRESENTATION' ) | ( SIZEOF( QUERY ( gpa &lt;* USEDIN( pdr.definition, &#10;                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'GENERAL_PROPERTY_ASSOCIATION.' + &#10;                'DERIVED_DEFINITION'  ) | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;                'GENERAL_PROPERTY'  ) IN TYPEOF( gpa.base_definition ) ) AND ( gpa\general_property_association.base_definition\&#10;                general_property.name = 'surface_condition' ) ) ) ) = 1 ) ) ) = 1 ) )" label="wr11"/>
      </entity>
      <entity name="visual_orientation_feature" supertypes="shape_aspect"/>
      <entity name="volume" supertypes="geometric_representation_item">
         <where expression="( SELF\geometric_representation_item.dim = 3 )" label="wr1"/>
      </entity>
      <entity name="volume_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VOLUME_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="volume_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensional_exponents( 3, 0, 0, 0, 0, 0, 0 ) )" label="wr1"/>
      </entity>
      <entity name="week_of_year_and_day_date" supertypes="date">
         <explicit name="week_component">
            <typename name="week_in_year_number"/>
         </explicit>
         <explicit name="day_component" optional="YES">
            <typename name="day_in_week_number"/>
         </explicit>
         <where expression="( ( NOT leap_year( SELF\date.year_component ) ) OR ( ( 1 &lt;= ( day_component + ( 7 * ( week_component - 1 ) ) ) ) AND &#10;               ( ( day_component + ( 7 * ( week_component - 1 ) ) ) &lt;= 366 ) ) )" label="wr1"/>
         <where expression="( leap_year( SELF\date.year_component ) OR ( ( 1 &lt;= ( day_component + ( 7 * ( week_component - 1 ) ) ) ) AND ( ( &#10;               day_component + ( 7 * ( week_component - 1 ) ) ) &lt;= 365 ) ) )" label="wr2"/>
      </entity>
      <entity name="wire_shell" supertypes="topological_representation_item">
         <explicit name="wire_shell_extent">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="loop"/>
         </explicit>
         <where expression="( NOT mixed_loop_type_set( wire_shell_extent ) )" label="wr1"/>
      </entity>
      <entity name="wire_terminal" supertypes="package_terminal"/>
      <entity name="wire_terminal_template_definition" supertypes="package_terminal_template_definition"/>
      <entity name="wrong_element_name" supertypes="externally_conditioned_data_quality_criterion">
         <where expression="validate_ecdq_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'REPRESENTATION_ITEM' ] )" label="wr1"/>
      </entity>
      <entity name="wrongly_oriented_void" supertypes="erroneous_manifold_solid_brep">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'BREP_WITH_VOIDS' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'ORIENTED_CLOSED_SHELL' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="wrongly_placed_loop" supertypes="erroneous_topology_and_geometry_relationship">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE'] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'FACE_BOUND' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE'] )" label="wr4"/>
      </entity>
      <entity name="wrongly_placed_void" supertypes="erroneous_manifold_solid_brep">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_logical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_VALUE' )" label="wr1"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'BREP_WITH_VOIDS' ] )" label="wr2"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'ORIENTED_CLOSED_SHELL' ] )" label="wr3"/>
         <where expression="validate_accuracy_types( SELF, [] )" label="wr4"/>
      </entity>
      <entity name="xor_expression" supertypes="binary_boolean_expression">
         <explicit name="operands">
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="boolean_expression"/>
            <redeclaration entity-ref="binary_generic_expression"/>
         </explicit>
      </entity>
      <entity name="year_month" supertypes="date">
         <explicit name="month_component">
            <typename name="month_in_year_number"/>
         </explicit>
      </entity>
      <entity name="zero_surface_normal" supertypes="geometry_with_local_irregularity">
         <explicit name="assessment_specification">
            <typename name="shape_data_quality_assessment_by_numerical_test"/>
            <redeclaration entity-ref="shape_data_quality_criterion"/>
         </explicit>
         <where expression="( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT' ) &#10;               IN TYPEOF( SELF\shape_data_quality_criterion.assessment_specification\&#10;               shape_data_quality_assessment_by_numerical_test.threshold ) ) AND ( &#10;               'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE'  IN value_limit_type( &#10;               SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.&#10;               threshold ) ) )" label="wr1"/>
         <where expression="validate_measured_data_type( SELF, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE'  )" label="wr2"/>
         <where expression="validate_inspected_elements_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE'] )" label="wr3"/>
         <where expression="validate_locations_of_extreme_value_type( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'POINT_ON_SURFACE' ] )" label="wr4"/>
         <where expression="validate_accuracy_types( SELF, [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;               + 'PLANE_ANGLE_MEASURE' ] )" label="wr5"/>
      </entity>
      <entity name="zone_structural_makeup" super.expression="ONEOF ((smeared_material_definition AND thickness_laminate_table), (smeared_material_definition AND percentage_laminate_table), thickness_laminate_table, percentage_laminate_table, smeared_material_definition)" supertypes="laminate_table"/>
      <rule appliesto="product_definition_formation" name="alternative_solution_requires_solution_definition">
         <algorithm>LOCAL
      solution_versions : SET OF product_definition_formation := [];
    END_LOCAL;
    solution_versions := QUERY ( pdf &lt;* product_definition_formation | ( SIZEOF( QUERY ( prpc &lt;* USEDIN( pdf.of_product, 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS' ) | 
        ( prpc.name = 'alternative solution' ) ) ) = 1 ) );</algorithm>
         <where expression="( SIZEOF( QUERY ( pdf &lt;* solution_versions | ( SIZEOF( QUERY ( pd &lt;* USEDIN( pdf, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION.FORMATION' ) | ( pd.&#10;             frame_of_reference.name = 'alternative definition' ) ) ) &lt;&gt; 1 ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="application_context" name="ap210_electronic_assembly_interconnect_and_packaging_design_mim_dot_application_protocol_definition_required">
         <where expression="( SIZEOF( QUERY ( ac &lt;* application_context | ( SIZEOF( QUERY ( apd &lt;* USEDIN( ac, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.APPLICATION_PROTOCOL_DEFINITION.APPLICATION'  )&#10;             | ( apd.application_interpreted_model_schema_name = 'ap242_managed_model_based_3d_engineering' ) ) ) &gt; 0 ) ) ) &gt; 0 )" label="wr1"/>
      </rule>
      <rule appliesto="application_context" name="application_protocol_definition_required">
         <where expression="SIZEOF( QUERY ( ac &lt;* application_context | ( SIZEOF( QUERY ( apd &lt;* USEDIN( ac, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.APPLICATION_PROTOCOL_DEFINITION.APPLICATION'  )&#10;             | &#10;            (( apd.application_interpreted_model_schema_name = 'ap242_managed_model_based_3d_engineering' ) OR&#10;             (  apd.application_interpreted_model_schema_name = 'ap210_electronic_assembly_interconnect_and_packaging_design'))&#10;             ) ) &#10;             &gt; 0 ) ) ) &gt; 0" label="wr1"/>
      </rule>
      <rule appliesto="area_component" name="area_component_shape_constraint">
         <where expression="( SIZEOF( QUERY ( ac &lt;* area_component | ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( ac, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;             | ( NOT ( ( NOT ( pdr\property_definition_representation.used_representation\representation.id = 'ac2dsm' ) ) OR ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SINGLE_AREA_CSG_2D_SHAPE_REPRESENTATION'  IN &#10;             TYPEOF( pdr\property_definition_representation.used_representation ) ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( ac &lt;* area_component | ( ( NOT apeaid_is_base( ac ) ) OR ( NOT ( SIZEOF( QUERY ( pdr &lt;* USEDIN( ac, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;             | ( NOT ( ( NOT ( pdr\property_definition_representation.used_representation\representation.id = 'ac2dsm' ) ) OR ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SINGLE_BOUNDARY_CSG_2D_SHAPE_REPRESENTATION'  IN&#10;             TYPEOF( pdr\property_definition_representation.used_representation ) ) ) ) ) ) = 0 ) ) ) ) ) = 0 )" label="wr2"/>
      </rule>
      <rule appliesto="product_definition_formation" name="breakdown_element_requires_product_definition">
         <where expression="( SIZEOF( QUERY ( pdf &lt;* product_definition_formation | ( ( SIZEOF( QUERY ( prpc &lt;* USEDIN( pdf.of_product, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  ) | &#10;             ( prpc.name = 'functionality' ) ) ) = 1 ) AND ( SIZEOF( QUERY ( pd &lt;* USEDIN( pdf, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION.FORMATION'  ) | ( pd.&#10;             frame_of_reference.name = 'functional definition' ) ) ) &lt; 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pdf &lt;* product_definition_formation | ( ( SIZEOF( QUERY ( prpc &lt;* USEDIN( pdf.of_product, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  ) | &#10;             ( prpc.name = 'conceptual design' ) ) ) = 1 ) AND ( SIZEOF( QUERY ( pd &lt;* USEDIN( pdf, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION.FORMATION'  ) | ( pd.&#10;             frame_of_reference.name = 'conceptual definition' ) ) ) &lt; 1 ) ) ) ) = 0 )" label="wr2"/>
      </rule>
      <rule appliesto="global_unit_assigned_context geometric_representation_context" name="cartesian_coordinate_system_constraint">
         <algorithm>LOCAL
      guac_inst : SET OF global_unit_assigned_context := QUERY ( guac &lt;* global_unit_assigned_context | ( ( 
                   'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'GEOMETRIC_REPRESENTATION_CONTEXT' ) 
                   IN TYPEOF( guac ) ) );
    END_LOCAL;</algorithm>
         <where expression="( SIZEOF( QUERY ( guac &lt;* guac_inst | ( NOT ( SIZEOF( guac.units ) &lt;= 3 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( guac &lt;* guac_inst | ( NOT ( ( SIZEOF( QUERY ( u &lt;* guac.units | ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_UNIT'  IN TYPEOF( u ) ) ) ) = 1 ) AND ( &#10;             SIZEOF( QUERY ( u &lt;* guac.units | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;             'PLANE_ANGLE_UNIT'  ) IN TYPEOF( u ) ) ) ) = 1 ) AND ( SIZEOF( QUERY ( u &lt;* guac.units | ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SOLID_ANGLE_UNIT' ) IN TYPEOF( u ) ) ) ) &#10;             &lt;= 1 ) ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( grc &lt;* guac_inst | ( NOT ( ( grc\geometric_representation_context.coordinate_space_dimension = 2 ) OR &#10;             ( grc\geometric_representation_context.coordinate_space_dimension = 3 ) ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( guac &lt;* guac_inst | ( NOT ( SIZEOF( QUERY ( u &lt;* guac.units | ( NOT ( ( NOT ( ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PLANE_ANGLE_UNIT' ) IN TYPEOF( u ) ) AND &#10;             ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'CONVERSION_BASED_UNIT' ) IN TYPEOF( u ) ) &#10;             AND ( u\conversion_based_unit.name = 'degree' ) ) ) OR ( ( ABS( u\conversion_based_unit.conversion_factor\&#10;             measure_with_unit.value_component - 0.0174532925 ) &lt;= 0.001 ) AND ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PLANE_ANGLE_MEASURE_WITH_UNIT' ) IN &#10;             TYPEOF( u\conversion_based_unit.conversion_factor ) ) ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
      </rule>
      <rule appliesto="chamfer_offset property_definition_representation" name="chamfer_offset_requires_faces">
         <where expression="( SIZEOF( QUERY ( co &lt;* chamfer_offset | ( NOT ( 1 = SIZEOF( QUERY ( pdr &lt;* property_definition_representation | ( ( pdr&#10;             \property_definition_representation.definition\property_definition.definition = co ) AND ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;             used_representation ) ) AND ( ( ( pdr\property_definition_representation.definition\property_definition.definition.&#10;             description = 'first offset' ) AND ( pdr.used_representation.name = 'first face shape' ) ) OR ( ( pdr\&#10;             property_definition_representation.definition\property_definition.definition.description = 'second offset' ) AND ( &#10;             pdr.used_representation.name = 'second face shape' ) ) ) ) ) ) ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="chamfer property_definition_representation" name="chamfer_requires_faces">
         <where expression="( SIZEOF( QUERY ( cf &lt;* chamfer | ( NOT ( 1 = SIZEOF( QUERY ( pdr &lt;* property_definition_representation | ( ( pdr\&#10;             property_definition_representation.definition\property_definition.definition = cf ) AND ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;             used_representation ) ) AND ( pdr.used_representation.name = 'chamfer face' ) ) ) ) ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="cartesian_point direction representation_context geometric_representation_context" name="compatible_dimension">
         <where expression="( SIZEOF( QUERY ( x &lt;* cartesian_point | ( SIZEOF( QUERY ( y &lt;* geometric_representation_context | ( item_in_context( x, &#10;             y ) AND ( HIINDEX( x.coordinates ) &lt;&gt; y.coordinate_space_dimension ) ) ) ) &gt; 0 ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( x &lt;* direction | ( SIZEOF( QUERY ( y &lt;* geometric_representation_context | ( item_in_context( x, y ) &#10;             AND ( HIINDEX( x.direction_ratios ) &lt;&gt; y.coordinate_space_dimension ) ) ) ) &gt; 0 ) ) ) = 0 )" label="wr2"/>
      </rule>
      <rule appliesto="composite_assembly_sequence_definition next_assembly_usage_occurrence product_related_product_category" name="component_class_for_assembly_select">
         <algorithm>LOCAL
      i     : INTEGER := 0;
      j     : INTEGER := 0;
      k     : INTEGER := 0;
      dkuhr : LOGICAL := TRUE;
      nnauo : INTEGER := 0;
      nprpc : INTEGER := 0;
      rp    : product;
    END_LOCAL;
    REPEAT i := LOINDEX( composite_assembly_sequence_definition ) TO HIINDEX( composite_assembly_sequence_definition ) BY 1;
      nnauo := 0;
      REPEAT j := LOINDEX( next_assembly_usage_occurrence ) TO HIINDEX( next_assembly_usage_occurrence ) BY 1;
        IF composite_assembly_sequence_definition[i] = next_assembly_usage_occurrence[j].relating_product_definition THEN
          rp := next_assembly_usage_occurrence[j].related_product_definition.formation.of_product;
          nprpc := 0;
          REPEAT k := LOINDEX( product_related_product_category ) TO HIINDEX( product_related_product_category ) BY 1;
            IF ( rp IN product_related_product_category[k].products ) AND ( product_related_product_category[k].name IN [ 'ply', 
                'ply laminate' , 'filament laminate', 'processed core', 'composite assembly'] ) THEN
              nprpc := nprpc + 1;
            END_IF;
          END_REPEAT;
          IF nprpc = 1 THEN
            nnauo := nnauo + 1;
          ELSE
            dkuhr := FALSE;
            ESCAPE;
          END_IF;
        END_IF;
      END_REPEAT;
      IF dkuhr = FALSE THEN
        ESCAPE;
      END_IF;
      IF nnauo = 0 THEN
        dkuhr := FALSE;
        ESCAPE;
      END_IF;
    END_REPEAT;</algorithm>
         <where expression="dkuhr" label="wr1"/>
      </rule>
      <rule appliesto="global_uncertainty_assigned_context qualified_representation_item uncertainty_assigned_representation" name="consistent_uncertainty">
         <where expression="( SIZEOF( QUERY ( guac &lt;* global_uncertainty_assigned_context | ( SIZEOF( QUERY ( u1 &lt;* guac.uncertainty | ( SIZEOF( &#10;             QUERY ( u2 &lt;* guac.uncertainty | ( u2.name = u1.name ) ) ) &gt; 1 ) ) ) &gt; 0 ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( uar &lt;* uncertainty_assigned_representation | ( SIZEOF( QUERY ( u1 &lt;* uar.uncertainty | ( SIZEOF( &#10;             QUERY ( u2 &lt;* uar.uncertainty | ( u2.name = u1.name ) ) ) &gt; 1 ) ) ) &gt; 0 ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( qri &lt;* qualified_representation_item | ( SIZEOF( QUERY ( u1 &lt;* qri.qualifiers | ( ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'UNCERTAINTY_QUALIFIER' ) IN TYPEOF( u1 ) ) &#10;             AND ( SIZEOF( QUERY ( u2 &lt;* qri.qualifiers | ( ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'UNCERTAINTY_QUALIFIER' ) IN TYPEOF( u2 ) ) &#10;             AND ( u2\uncertainty_qualifier.measure_name = u1\uncertainty_qualifier.measure_name ) ) ) ) &gt; 1 ) ) ) ) &gt; 0 ) ) ) = 0 )" label="wr3"/>
      </rule>
      <rule appliesto="product_definition" name="constraint_definition_requires_constraint_category">
         <algorithm>LOCAL
      constraint_definitions : SET OF product_definition := [];
    END_LOCAL;
    constraint_definitions := QUERY ( pd &lt;* product_definition | ( pd.frame_of_reference.name = 'design constraint definition' ) );</algorithm>
         <where expression="( SIZEOF( QUERY ( pd &lt;* constraint_definitions | ( SIZEOF( QUERY ( prpc &lt;* USEDIN( pd.formation.of_product, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  ) | &#10;             ( prpc.name = 'requirement' ) ) ) = 0 ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="product_definition_formation" name="design_constraint_requires_product_definition">
         <where expression="( SIZEOF( QUERY ( pdf &lt;* product_definition_formation | ( ( SIZEOF( QUERY ( prpc &lt;* USEDIN( pdf.of_product, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  ) | &#10;             ( prpc.name = 'requirement' ) ) ) &gt; 0 ) AND ( SIZEOF( QUERY ( pd &lt;* USEDIN( pdf, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION.FORMATION'  ) | ( pd.&#10;             frame_of_reference.name = 'design constraint definition' ) ) ) &lt; 1 ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="applied_document_reference product_definition_context_association role_association" name="dimensioning_data_requires_document">
         <algorithm>LOCAL
      adr    : SET OF applied_document_reference := QUERY ( adr &lt;* applied_document_reference | ( ( adr\document_reference.
                assigned_document\document.kind\document_type.product_data_type = 'Standards Document' ) AND ( ( adr\
                document_reference.assigned_document\document.id = 'ASME Y14.41-2003' ) OR ( adr\document_reference.
                assigned_document\document.id = 'ASME Y14.5M-1994' ) OR ( adr\document_reference.assigned_document\document.id = 
                'ISO 1101: 2004'  ) ) ) );
      pdca   : SET OF product_definition_context_association := QUERY ( pdca &lt;* product_definition_context_association | ( ( pdca
                \product_definition_context_association.role\product_definition_context_role.name = 'additional context' ) AND ( 
                pdca\product_definition_context_association.frame_of_reference\application_context_element.name = 
                'Geometric Dimensioning and Tolerancing Product Specification'  ) ) );
      ra     : SET OF role_association := QUERY ( ra &lt;* role_association | ( ra\role_association.role\object_role.name = 
                'dimensioning standard'  ) );
      ra1    : SET OF role_association := [];
      pdpdca : SET OF product_definition := [];
      pdadr  : SET OF product_definition := [];
      pass   : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT i := 1 TO HIINDEX( pdca ) BY 1;
      pdpdca := pdpdca + pdca[i]\product_definition_context_association.definition;
    END_REPEAT;
    REPEAT i := 1 TO HIINDEX( adr ) BY 1;
      ra1 := bag_to_set( USEDIN( adr[i], 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROLE_ASSOCIATION.'
          + 'ITEM_WITH_ROLE'  ) );
      IF ( ra1 * ra ) &lt;&gt; ra1 THEN
        pass := FALSE;
      END_IF;
      REPEAT j := 1 TO HIINDEX( adr[i]\applied_document_reference.items ) BY 1;
        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION' IN TYPEOF( adr[i]\
            applied_document_reference.items[j] ) THEN
          pdadr := pdadr + adr[i]\applied_document_reference.items[j];
        END_IF;
      END_REPEAT;
    END_REPEAT;</algorithm>
         <where expression="pass" label="wr1"/>
         <where expression="( pdpdca = pdadr )" label="wr2"/>
      </rule>
      <rule appliesto="draughting_model" name="draughting_model_items_constraint">
         <where expression="( SIZEOF( QUERY ( dm &lt;* draughting_model | ( NOT ( SIZEOF( QUERY ( it1 &lt;* dm\representation.items | ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANNOTATION_OCCURRENCE'  IN TYPEOF( it1 ) ) AND &#10;             ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'DRAUGHTING_ANNOTATION_OCCURRENCE' ) &#10;             IN TYPEOF( it1 ) ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( dm &lt;* draughting_model | ( NOT ( SIZEOF( QUERY ( it1 &lt;* dm\representation.items | ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DRAUGHTING_CALLOUT'  IN TYPEOF( it1 ) ) AND ( &#10;             NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DRAUGHTING_ELEMENTS' IN TYPEOF( it1 ) ) ) ) ) ) &#10;             = 0 ) ) ) ) = 0 )" label="wr2"/>
      </rule>
      <rule appliesto="edge_round property_definition_representation" name="edge_round_requires_faces">
         <where expression="( 0 = SIZEOF( QUERY ( er &lt;* edge_round | ( NOT ( 1 = SIZEOF( QUERY ( pdr &lt;* property_definition_representation | ( ( pdr&#10;             \property_definition_representation.definition\property_definition.definition = er ) AND ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;             used_representation ) ) AND ( pdr.used_representation.name = 'edge round face' ) ) ) ) ) ) ) ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( er &lt;* edge_round | ( NOT ( 1 = SIZEOF( QUERY ( pdr &lt;* property_definition_representation | ( ( pdr\&#10;             property_definition_representation.definition\property_definition.definition = er ) AND ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;             used_representation ) ) AND ( pdr.used_representation.name = 'first face shape' ) ) ) ) ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( er &lt;* edge_round | ( NOT ( 1 = SIZEOF( QUERY ( pdr &lt;* property_definition_representation | ( ( pdr\&#10;             property_definition_representation.definition\property_definition.definition = er ) AND ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;             used_representation ) ) AND ( pdr.used_representation.name = 'second face shape' ) ) ) ) ) ) ) ) = 0 )" label="wr3"/>
      </rule>
      <rule appliesto="applied_external_identification_assignment" name="external_version_assignments_are_valid">
         <where expression="( SIZEOF( QUERY ( aia &lt;* applied_external_identification_assignment | ( NOT external_version_assignment_is_valid( aia ) ) ) ) &#10;             = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="feature_definition" name="machining_feature_definition_constraints">
         <algorithm>LOCAL
      mfds : SET OF feature_definition := [];
    END_LOCAL;
    mfds := QUERY ( temp &lt;* feature_definition | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
        + 'MACHINING_FEATURE_DEFINITION'  IN TYPEOF( temp ) ) );</algorithm>
         <where expression="( SIZEOF( QUERY ( mfd &lt;* mfds | ( NOT ( SIZEOF( QUERY ( pdr &lt;* get_property_definition_representations( mfd ) | ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN &#10;             TYPEOF( pdr.used_representation ) ) ) ) &lt;= 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( mfd &lt;* mfds | ( NOT ( SIZEOF( QUERY ( pd &lt;* USEDIN( mfd, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( NOT ( &#10;             SIZEOF( QUERY ( impl_rep &lt;* QUERY ( pdr &lt;* USEDIN( pd, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )&#10;             | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN &#10;             TYPEOF( pdr.used_representation ) ) ) | ( NOT ( SIZEOF( QUERY ( it &lt;* impl_rep.used_representation.items | ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT'  IN TYPEOF( it ) ) AND ( it.name = &#10;             'orientation'  ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( mfd &lt;* mfds | ( NOT ( ( NOT ( SIZEOF( [&#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUND_HOLE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOSS' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OUTSIDE_PROFILE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REMOVAL_VOLUME' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FLAT_FACE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POCKET' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROTRUSION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RIB_TOP' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUNDED_END' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SLOT' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STEP' ] * TYPEOF( mfds ) ) = 1 ) ) OR ( SIZEOF( &#10;             QUERY ( pdr &lt;* get_property_definition_representations( mfd ) | ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.&#10;             used_representation ) ) AND ( pdr.used_representation.name = 'maximum feature limit' ) ) ) ) &gt;= 0 ) ) ) ) ) = 0 )" label="wr3"/>
      </rule>
      <rule appliesto="instanced_feature" name="machining_feature_life_cycle">
         <where expression="( SIZEOF( QUERY ( mf &lt;* instanced_feature | ( NOT ( mf.of_shape.definition.frame_of_reference.life_cycle_stage = &#10;             'manufacturing planning'  ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="shape_aspect" name="material_for_coating_layer">
         <algorithm>LOCAL
      coating_layers : SET OF shape_aspect := [];
    END_LOCAL;
    coating_layers := QUERY ( r &lt;* shape_aspect | ( r.name = 'coating layer' ) );</algorithm>
         <where expression="( SIZEOF( QUERY ( r &lt;* coating_layers | ( SIZEOF( USEDIN( r, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MATERIAL_DESIGNATION.DEFINITIONS'  ) ) &lt;&gt; 1 ) ) ) &#10;             = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="pre_defined_surface_side_style" name="not_instantiable_pre_defined_surface_side_style">
         <where expression="( SIZEOF( pre_defined_surface_side_style ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="externally_defined_general_property" name="plib_property_reference_requires_name_scope">
         <algorithm>LOCAL
      known_sourced_properties : SET OF externally_defined_general_property;
    END_LOCAL;
    known_sourced_properties := QUERY ( edc &lt;* externally_defined_general_property | ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.KNOWN_SOURCE'  IN TYPEOF( edc.source ) ) );</algorithm>
         <where expression="( SIZEOF( QUERY ( edgp &lt;* known_sourced_properties | ( SIZEOF( QUERY ( edir &lt;* USEDIN( edgp, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EXTERNALLY_DEFINED_ITEM_RELATIONSHIP.'&#10;             + 'RELATING_ITEM'  ) | ( ( edir.name = 'name scope' ) AND ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EXTERNALLY_DEFINED_CLASS'  IN TYPEOF( edir.&#10;             related_item ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.KNOWN_SOURCE' IN TYPEOF( &#10;             edir.related_item.source ) ) ) ) ) &lt;&gt; 1 ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="externally_defined_general_property" name="plib_property_reference_requires_version">
         <algorithm>LOCAL
      plib_properties : SET OF externally_defined_general_property := [];
    END_LOCAL;
    plib_properties := QUERY ( edgp &lt;* externally_defined_general_property | ( ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.KNOWN_SOURCE'  IN TYPEOF( edgp.source ) ) AND ( ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.KNOWN_SOURCE'  + '.NAME' ) = 'ISO 13584 library' ) ) );</algorithm>
         <where expression="( SIZEOF( QUERY ( edgp &lt;* plib_properties | ( SIZEOF( QUERY ( edir &lt;* USEDIN( edgp, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT.ITEMS'  )&#10;             | ( edir.role.name = 'version' ) ) ) &lt;&gt; 1 ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="ply_laminate_sequence_definition next_assembly_usage_occurrence product_related_product_category" name="ply_reference">
         <algorithm>LOCAL
      i     : INTEGER;
      j     : INTEGER;
      k     : INTEGER;
      dkuhr : LOGICAL := TRUE;
      nnauo : INTEGER;
      nprpc : INTEGER := 0;
      rp    : product;
    END_LOCAL;
    REPEAT i := LOINDEX( ply_laminate_sequence_definition ) TO HIINDEX( ply_laminate_sequence_definition ) BY 1;
      nnauo := 0;
      REPEAT j := LOINDEX( next_assembly_usage_occurrence ) TO HIINDEX( next_assembly_usage_occurrence ) BY 1;
        IF ply_laminate_sequence_definition[i] = next_assembly_usage_occurrence[j].relating_product_definition THEN
          rp := next_assembly_usage_occurrence[j].related_product_definition.formation.of_product;
          nprpc := 0;
          REPEAT k := LOINDEX( product_related_product_category ) TO HIINDEX( product_related_product_category ) BY 1;
            IF ( product_related_product_category[k].name = 'ply' ) AND ( rp IN product_related_product_category[k].products )
                THEN
              nprpc := nprpc + 1;
            END_IF;
          END_REPEAT;
          IF nprpc = 1 THEN
            nnauo := nnauo + 1;
          ELSE
            dkuhr := FALSE;
            ESCAPE;
          END_IF;
        END_IF;
      END_REPEAT;
      IF dkuhr = FALSE THEN
        ESCAPE;
      END_IF;
      IF nnauo = 0 THEN
        dkuhr := FALSE;
        ESCAPE;
      END_IF;
    END_REPEAT;</algorithm>
         <where expression="dkuhr" label="wr1"/>
      </rule>
      <rule appliesto="product_related_product_category make_from_usage_option" name="ply_stock_material_select">
         <algorithm>LOCAL
      i     : INTEGER;
      j     : INTEGER;
      k     : INTEGER;
      kp    : INTEGER;
      dkuhr : LOGICAL;
      nmfuo : INTEGER;
      nprpc : INTEGER := 0;
      rp    : product;
    END_LOCAL;
    dkuhr := TRUE;
    REPEAT kp := LOINDEX( product_related_product_category ) TO HIINDEX( product_related_product_category ) BY 1;
      IF product_related_product_category[kp].name = 'ply' THEN
        REPEAT i := LOINDEX( product_related_product_category[kp].products ) TO HIINDEX( product_related_product_category[kp].
            products ) BY 1;
          nmfuo := 0;
          REPEAT j := LOINDEX( make_from_usage_option ) TO HIINDEX( make_from_usage_option ) BY 1;
            rp := make_from_usage_option[j].related_product_definition.formation.of_product;
            IF product_related_product_category[kp].products[i] = rp THEN
              REPEAT k := LOINDEX( product_related_product_category ) TO HIINDEX( product_related_product_category ) BY 1;
                IF ( rp IN product_related_product_category[k].products ) AND ( product_related_product_category[k].name IN [
                    'isotropic material' , 'filament assembly', 'discontinuous fiber assembly'] ) THEN
                  nprpc := nprpc + 1;
                END_IF;
              END_REPEAT;
              IF nprpc = 1 THEN
                nmfuo := nmfuo + 1;
              ELSE
                dkuhr := FALSE;
                ESCAPE;
              END_IF;
            END_IF;
          END_REPEAT;
          IF dkuhr = FALSE THEN
            ESCAPE;
          END_IF;
          IF nmfuo &lt;&gt; 1 THEN
            dkuhr := FALSE;
            ESCAPE;
          END_IF;
        END_REPEAT;
      END_IF;
    END_REPEAT;</algorithm>
         <where expression="dkuhr" label="wr1"/>
      </rule>
      <rule appliesto="product_concept_feature" name="product_concept_feature_requires_category">
         <where expression="( SIZEOF( QUERY ( pcf &lt;* product_concept_feature | ( ( SIZEOF( [&#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'INCLUSION_PRODUCT_CONCEPT_FEATURE', &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CONDITIONAL_CONCEPT_FEATURE'] * TYPEOF( &#10;             pcf ) ) = 0 ) AND ( SIZEOF( QUERY ( aga &lt;* USEDIN( pcf, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'APPLIED_GROUP_ASSIGNMENT.' + 'ITEMS' ) | &#10;             ( ( aga\group_assignment.role\object_role.name = 'specification category member' ) AND ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_CONCEPT_FEATURE_CATEGORY' ) IN &#10;             TYPEOF( aga.assigned_group ) ) ) ) ) &lt;&gt; 1 ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="product_definition_relationship" name="product_definition_replacement_requires_effectivity_assignment">
         <where expression="( SIZEOF( QUERY ( pdr &lt;* product_definition_relationship | ( ( pdr.name = 'definition replacement' ) AND ( SIZEOF( &#10;             USEDIN( pdr, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.APPLIED_EFFECTIVITY_ASSIGNMENT.ITEMS' ) ) &#10;             = 0 ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="product_definition" name="restrict_alternative_definition">
         <algorithm>LOCAL
      solution_definitions : SET OF product_definition := [];
    END_LOCAL;
    solution_definitions := QUERY ( pd &lt;* product_definition | ( pd.frame_of_reference.name = 'alternative definition' ) );</algorithm>
         <where expression="( SIZEOF( QUERY ( pd &lt;* solution_definitions | ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION_RELATIONSHIP.'&#10;             + 'RELATED_PRODUCT_DEFINITION'  ) | ( pdr.name = 'solution alternative definition' ) ) ) &lt;&gt; 1 ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* solution_definitions | ( NOT ( pd.name IN [ 'technical', 'supplier', 'technical supplier', ''] ) ) ) ) &#10;             = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* solution_definitions | ( ( pd.name IN [ 'supplier', 'technical supplier'] ) AND ( SIZEOF( &#10;             QUERY ( aoa &lt;* USEDIN( pd.formation, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;             'APPLIED_ORGANIZATION_ASSIGNMENT.ITEMS'  ) | ( aoa.role.name = 'supplier' ) ) ) &lt;&gt; 1 ) ) ) ) = 0 )" label="wr3"/>
      </rule>
      <rule appliesto="product_definition" name="restrict_assembly_category">
         <algorithm>LOCAL
      assembly_definitions : SET OF product_definition := [];
    END_LOCAL;
    assembly_definitions := QUERY ( pd &lt;* product_definition | ( SIZEOF( QUERY ( pdca &lt;* USEDIN( pd, 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_CONTEXT_ASSOCIATION.DEFINITION'  )
        | ( pdca.frame_of_reference.name = 'assembly definition' ) ) ) &gt; 0 ) );</algorithm>
         <where expression="( SIZEOF( QUERY ( pd &lt;* assembly_definitions | ( NOT ( 'assembly' IN categories_of_product( pd.formation.of_product ) ) ) ) ) &#10;             = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="representation" name="restrict_centre_of_mass_representation">
         <where expression="( SIZEOF( QUERY ( r &lt;* representation | ( ( r.name = 'centre of mass' ) AND ( ( SIZEOF( r.items ) &lt;&gt; 1 ) OR ( SIZEOF( &#10;             QUERY ( i &lt;* r.items | ( ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'POINT' ) IN &#10;             TYPEOF( i ) ) AND ( i.name = 'centre point' ) ) ) ) &lt;&gt; 1 ) ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="applied_classification_assignment" name="restrict_classification_assignments">
         <where expression="( SIZEOF( QUERY ( aia &lt;* applied_classification_assignment | ( NOT class_assignment_is_valid( aia ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="product_definition" name="restrict_collection_category">
         <algorithm>LOCAL
      collection_definitions : SET OF product_definition := [];
    END_LOCAL;
    collection_definitions := QUERY ( pd &lt;* product_definition | ( SIZEOF( QUERY ( pdca &lt;* USEDIN( pd, 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION_CONTEXT_ASSOCIATION.'
        + 'DEFINITION'  ) | ( pdca.frame_of_reference.name = 'collection definition' ) ) ) &gt; 0 ) );</algorithm>
         <where expression="( SIZEOF( QUERY ( pd &lt;* collection_definitions | ( NOT ( 'collection' IN categories_of_product( pd.formation.of_product ) ) ) ) ) &#10;             = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="concept_feature_operator" name="restrict_concept_feature_operator">
         <where expression="( SIZEOF( QUERY ( cfo &lt;* concept_feature_operator | ( NOT ( cfo.name IN [ 'and', 'or', 'oneof', 'not', 'implication'] ) ) ) ) &#10;             = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( cfo &lt;* concept_feature_operator | ( ( cfo.name = 'implication' ) AND ( SIZEOF( QUERY ( cfrwc &lt;* &#10;             USEDIN( cfo, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;             'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION.'  + 'CONDITIONAL_OPERATOR' ) | ( SIZEOF( QUERY ( ccf &lt;* USEDIN( cfrwc, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CONDITIONAL_CONCEPT_FEATURE.CONDITION' )&#10;             | ( NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'INCLUSION_PRODUCT_CONCEPT_FEATURE'  ) &#10;             IN TYPEOF( ccf ) ) ) ) ) &gt; 0 ) ) ) &gt; 0 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( cfo &lt;* concept_feature_operator | ( ( cfo.name = 'not' ) AND ( SIZEOF( QUERY ( cfrwc &lt;* USEDIN( cfo, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + &#10;             'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION.CONDITIONAL_OPERATOR'  ) | ( cfrwc.related_product_concept_feature :&lt;&gt;:&#10;             cfrwc.relating_product_concept_feature ) ) ) &gt; 0 ) ) ) ) = 0 )" label="wr3"/>
      </rule>
      <rule appliesto="configuration_design" name="restrict_configuration_design_for_class_breakdown_association">
         <where expression="( SIZEOF( QUERY ( cd &lt;* configuration_design | ( ( cd.name = 'functionality' ) AND ( ( NOT ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( cd.design ) ) ) &#10;             OR ( cd.design\product_definition.frame_of_reference.name &lt;&gt; 'functional definition' ) ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( cd &lt;* configuration_design | ( ( cd.name = 'realization' ) AND ( ( NOT ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( cd.design ) ) ) &#10;             OR ( cd.design\product_definition.frame_of_reference.name &lt;&gt; 'conceptual definition' ) ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( cd &lt;* configuration_design | ( ( cd.name IN [ 'functionality', 'realization'] ) AND ( NOT ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_CLASS'  IN TYPEOF( cd.configuration.&#10;             item_concept ) ) ) ) ) ) = 0 )" label="wr3"/>
      </rule>
      <rule appliesto="configuration_design" name="restrict_configuration_design_for_design_constraint">
         <where expression="( SIZEOF( QUERY ( cd &lt;* configuration_design | ( ( cd.name = 'design constraint usage' ) AND ( ( NOT ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( cd.design ) ) ) &#10;             OR ( cd.design\product_definition.frame_of_reference.name &lt;&gt; 'design constraint definition' ) ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="group_relationship" name="restrict_group_relationship_for_classification_hierarchy">
         <where expression="( SIZEOF( QUERY ( gr &lt;* group_relationship | ( ( gr\group_relationship.name = 'class hierarchy' ) AND ( ( NOT ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLASS'  IN TYPEOF( gr\group_relationship.&#10;             related_group ) ) ) OR ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLASS' IN TYPEOF( &#10;             gr\group_relationship.relating_group ) ) ) ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="group_relationship" name="restrict_group_relationship_for_specification_category">
         <where expression="( SIZEOF( QUERY ( gr &lt;* group_relationship | ( ( gr.name = 'specification category hierarchy' ) AND ( ( NOT ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_CONCEPT_FEATURE_CATEGORY'  IN TYPEOF( gr&#10;             .related_group ) ) ) OR ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;             + 'PRODUCT_CONCEPT_FEATURE_CATEGORY'  IN TYPEOF( gr.relating_group ) ) ) ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="attribute_language_assignment" name="restrict_language_assignment_per_attribute">
         <where expression="( SIZEOF( QUERY ( ala1 &lt;* attribute_language_assignment | ( SIZEOF( QUERY ( it &lt;* ala1.items | ( SIZEOF( &#10;             QUERY ( ala2 &lt;* USEDIN( it, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;             + 'ATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS'  ) | ( ( ala1\attribute_classification_assignment.attribute_name = ala2\&#10;             attribute_classification_assignment.attribute_name ) AND ( ala1\attribute_classification_assignment.assigned_class &#10;             :=: ala2\attribute_classification_assignment.assigned_class ) ) ) ) &gt; 1 ) ) ) &gt; 0 ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="product_definition" name="restrict_part_occurrence">
         <algorithm>LOCAL
      part_occurrences : SET OF product_definition := QUERY ( pd &lt;* product_definition | ( pd.frame_of_reference.name = 
                          'part occurrence'  ) );
    END_LOCAL;</algorithm>
         <where expression="( SIZEOF( QUERY ( pd &lt;* part_occurrences | ( NOT ( pd.name IN [ 'single instance', 'selected instance', &#10;             'quantified instance' , 'specified instance'] ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* part_occurrences | ( ( SIZEOF( QUERY ( pdr &lt;* USEDIN( pd, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION_RELATIONSHIP.'&#10;             + 'RELATED_PRODUCT_DEFINITION'  ) | ( pdr.name = 'definition usage' ) ) ) &lt;&gt; 1 ) AND ( SIZEOF( QUERY ( cd &lt;* &#10;             USEDIN( pd, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'CONFIGURATION_DESIGN.DESIGN' )&#10;             | ( ( cd.name = 'occurrence usage definition' ) AND ( NOT ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_IDENTIFICATION' ) IN TYPEOF( cd.&#10;             configuration ) ) ) ) ) ) &lt;&gt; 1 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* part_occurrences | ( ( SIZEOF( QUERY ( cd &lt;* USEDIN( pd, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION_RELATIONSHIP.'&#10;             + 'RELATED_PRODUCT_DEFINITION'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;             'PRODUCT_DEFINITION_USAGE'  ) IN TYPEOF( cd ) ) ) ) = 0 ) AND ( SIZEOF( USEDIN( pd, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION_OCCURRENCE_RELATIONSHIP.'&#10;             + 'OCCURRENCE'  ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* part_occurrences | ( ( pd.name = 'selected instance' ) AND ( NOT &#10;             valid_selected_instance_representation( pd ) ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* part_occurrences | ( ( pd.name = 'quantified instance' ) AND ( SIZEOF( QUERY ( ppd &lt;* USEDIN( pd, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PROPERTY_DEFINITION.DEFINITION' ) | ( ( &#10;             ppd.name = 'occurrence quantity' ) AND ( SIZEOF( QUERY ( pdr &lt;* USEDIN( ppd, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PROPERTY_DEFINITION_REPRESENTATION.'&#10;             + 'DEFINITION'  ) | ( ( pdr.used_representation.name = 'quantity' ) AND ( SIZEOF( pdr.used_representation.items ) = &#10;             1 ) AND ( SIZEOF( QUERY ( i &lt;* pdr.used_representation.items | ( ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'MEASURE_REPRESENTATION_ITEM' ) IN TYPEOF( &#10;             i ) ) AND ( i.name = 'quantity measure' ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( pd &lt;* part_occurrences | ( ( pd.name = 'specified instance' ) AND ( SIZEOF( QUERY ( pdor &lt;* USEDIN( pd, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION_OCCURRENCE_RELATIONSHIP.'&#10;             + 'OCCURRENCE'  ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + &#10;             'SPECIFIED_HIGHER_USAGE_OCCURRENCE'  ) IN TYPEOF( pdor.occurrence_usage ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
      </rule>
      <rule appliesto="product_definition" name="restrict_part_occurrence_category">
         <algorithm>LOCAL
      part_occurrences : SET OF product_definition := QUERY ( pd &lt;* product_definition | ( pd.frame_of_reference.name = 
                          'part occurrence'  ) );
    END_LOCAL;</algorithm>
         <where expression="( SIZEOF( QUERY ( pd &lt;* part_occurrences | ( SIZEOF( QUERY ( prpc &lt;* USEDIN( pd.formation.of_product, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  ) | &#10;             ( prpc.name IN [ 'part', 'raw material', 'tool'] ) ) ) = 0 ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="product_definition_relationship" name="restrict_product_definitions_for_base_element">
         <where expression="( SIZEOF( QUERY ( pdr &lt;* product_definition_relationship | ( ( pdr.name = 'solution alternative definition' ) AND ( ( &#10;             NOT ( pdr.relating_product_definition.frame_of_reference.name IN [ 'alternative definition', 'functional definition', &#10;             'conceptual definition' ] ) ) OR ( pdr.related_product_definition.frame_of_reference.name &lt;&gt; 'alternative definition' ) ) ) ) ) &#10;             = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="product_definition_relationship" name="restrict_product_definitions_for_collection">
         <where expression="( SIZEOF( QUERY ( pdr &lt;* product_definition_relationship | ( ( pdr.name = 'collection membership' ) AND ( ( pdr.&#10;             relating_product_definition.frame_of_reference.name &lt;&gt; 'part definition' ) OR ( pdr.related_product_definition.&#10;             frame_of_reference.name &lt;&gt; 'part occurrence' ) OR ( SIZEOF( QUERY ( pdca &lt;* USEDIN( pdr.relating_product_definition, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION_CONTEXT_ASSOCIATION.'&#10;             + 'DEFINITION'  ) | ( ( pdca.role.name = 'part definition type' ) AND ( pdca.frame_of_reference.name = &#10;             'collection definition'  ) ) ) ) = 0 ) ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="product_definition_relationship" name="restrict_product_definitions_for_definition_usage">
         <where expression="( SIZEOF( QUERY ( pdr &lt;* product_definition_relationship | ( ( pdr.name = 'definition usage' ) AND ( ( pdr.&#10;             relating_product_definition.frame_of_reference.name &lt;&gt; 'part definition' ) OR ( pdr.related_product_definition.&#10;             frame_of_reference.name &lt;&gt; 'part occurrence' ) ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="product_definition_relationship" name="restrict_product_definitions_for_design_constraint_association">
         <where expression="( SIZEOF( QUERY ( pdr &lt;* product_definition_relationship | ( ( pdr.name = 'design constraint association' ) AND ( ( pdr.&#10;             relating_product_definition.frame_of_reference.name &lt;&gt; 'design constraint definition' ) OR ( NOT ( pdr.&#10;             related_product_definition.frame_of_reference.name IN [ 'alternative definition', 'functional definition', &#10;             'conceptual definition' ] ) ) ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="product_definition_relationship" name="restrict_product_definitions_for_part_definition_relationship">
         <where expression="( SIZEOF( QUERY ( pdr &lt;* product_definition_relationship | ( ( pdr.name IN [ 'geometrical relationship', &#10;             'definition replacement' ] ) AND ( ( pdr.relating_product_definition.frame_of_reference.name &lt;&gt; 'part definition' ) &#10;             OR ( pdr.related_product_definition.frame_of_reference.name &lt;&gt; 'part definition' ) ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="property_definition_representation" name="restrict_representation_for_surface_condition">
         <where expression="( SIZEOF( QUERY ( pdr &lt;* property_definition_representation | ( NOT surface_condition_correlation( pdr.definition, pdr.&#10;             used_representation ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="representation" name="restrict_treatment_result">
         <algorithm>LOCAL
      treatment_results : SET OF representation := [];
    END_LOCAL;
    treatment_results := QUERY ( r &lt;* representation | ( r.name = 'treatment result' ) );</algorithm>
         <where expression="( ( SIZEOF( QUERY ( r &lt;* treatment_results | ( SIZEOF( r.items ) &gt; 2 ) ) ) = 0 ) AND ( SIZEOF( QUERY ( r &lt;* &#10;             treatment_results | ( SIZEOF( QUERY ( i &lt;* r.items | ( NOT ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DESCRIPTIVE_REPRESENTATION_ITEM' ) IN &#10;             TYPEOF( i ) ) ) ) ) &gt; 0 ) ) ) = 0 ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( r &lt;* treatment_results | ( SIZEOF( QUERY ( i &lt;* r.items | ( i.name = 'result' ) ) ) = 0 ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( r &lt;* treatment_results | ( SIZEOF( QUERY ( i &lt;* r.items | ( i.name = 'purpose' ) ) ) &gt; 1 ) ) ) = 0 )" label="wr3"/>
      </rule>
      <rule appliesto="assembly_component_usage" name="selected_instance_usage_requires_representation">
         <algorithm>LOCAL
      selected_instance_usages : SET OF assembly_component_usage := QUERY ( acr &lt;* assembly_component_usage | ( acr.name = 
                                  'selected instance usage'  ) );
    END_LOCAL;</algorithm>
         <where expression="( SIZEOF( QUERY ( acr &lt;* selected_instance_usages | ( NOT valid_selected_instance_representation( acr ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="shape_representation" name="shape_representation_requires_origin">
         <where expression="( SIZEOF( QUERY ( sr &lt;* shape_representation | ( NOT ( ( SIZEOF( QUERY ( it &lt;* sr\representation.items | ( ( ( it\&#10;             representation_item.name = 'origin' ) OR ( it\representation_item.name = 'orientation' ) ) AND ( ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'AXIS2_PLACEMENT_2D' ) IN TYPEOF( it ) ) OR&#10;             ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'AXIS2_PLACEMENT_2D' ) IN TYPEOF( it ) ) ) ) ) ) &#10;             = 1 ) OR ( SIZEOF( QUERY ( it &lt;* sr\representation.items | ( ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'STYLED_ITEM' ) IN TYPEOF( it ) ) ) ) &gt;= 1 ) &#10;             OR ( SIZEOF( QUERY ( it &lt;* sr\representation.items | ( ( ( it\representation_item.name = 'origin' ) OR ( it\&#10;             representation_item.name = 'orientation' ) ) AND ( ( sr\representation.name = 'zone shape' ) OR ( sr.context_of_items&#10;             \representation_context.context_type = 'connection zone colour' ) ) ) ) ) = 0 ) ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="product_definition" name="solution_definition_requires_solution_category">
         <algorithm>LOCAL
      solution_definitions : SET OF product_definition := [];
    END_LOCAL;
    solution_definitions := QUERY ( pd &lt;* product_definition | ( pd.frame_of_reference.name = 'alternative definition' ) );</algorithm>
         <where expression="( SIZEOF( QUERY ( pd &lt;* solution_definitions | ( SIZEOF( QUERY ( prpc &lt;* USEDIN( pd.formation.of_product, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS' )&#10;             | ( prpc.name = 'alternative solution' ) ) ) = 0 ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="curve" name="spline_curve_population_constraint">
         <where expression="( SIZEOF( QUERY ( cu &lt;* curve | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE' IN&#10;             TYPEOF( cu ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="styled_item" name="styled_curve">
         <where expression="( SIZEOF( QUERY ( si &lt;* styled_item | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE' IN &#10;             TYPEOF( si.item ) ) AND ( SIZEOF( QUERY ( psa &lt;* si.styles | ( SIZEOF( QUERY ( cs &lt;* psa.styles | ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_STYLE'  IN TYPEOF( cs ) ) ) ) &gt; 0 ) ) ) &lt;&gt;&#10;             1 ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="geometric_tolerance" name="subtype_exclusiveness_geometric_tolerance">
         <where expression="( SIZEOF( QUERY ( gt &lt;* geometric_tolerance | ( NOT type_check_function( gt, [&#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ANGULARITY_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_RUNOUT_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COAXIALITY_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONCENTRICITY_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CYLINDRICITY_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FLATNESS_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE_PROFILE_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARALLELISM_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PERPENDICULARITY_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POSITION_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ROUNDNESS_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STRAIGHTNESS_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_PROFILE_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SYMMETRY_TOLERANCE' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TOTAL_RUNOUT_TOLERANCE' ], 2 ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="representation_item" name="subtype_exclusiveness_representation_item">
         <where expression="( SIZEOF( QUERY ( cri &lt;* representation_item | ( NOT type_check_function( cri, [&#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VALUE_REPRESENTATION_ITEM' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOUND_REPRESENTATION_ITEM' ], 3 ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="shape_representation" name="subtype_mandatory_shape_representation">
         <where expression="( SIZEOF( QUERY ( sr &lt;* shape_representation | ( NOT ( ( SIZEOF( [&#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_BREP_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACETED_BREP_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SURFACE_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MANIFOLD_SUBSURFACE_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE_BASED_WIREFRAME_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL_BASED_WIREFRAME_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;             + 'GEOMETRICALLY_BOUNDED_SURFACE_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;             + 'GEOMETRICALLY_BOUNDED_WIREFRAME_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BEVELED_SHEET_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_SHEET_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOUND_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CSG_2D_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CSG_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_SWEPT_SOLID_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELEMENTARY_BREP_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;             + 'GEOMETRICALLY_BOUNDED_2D_WIREFRAME_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LOCATION_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NEUTRAL_SKETCH_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROCEDURAL_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATIVE_SHAPE_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DIMENSION_REPRESENTATION' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TESSELLATED_SHAPE_REPRESENTATION' ] * TYPEOF( sr ) ) &#10;             = 1 ) OR ( SIZEOF( QUERY ( it &lt;* sr\representation.items | ( NOT ( &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AXIS2_PLACEMENT_3D'  IN TYPEOF( it ) ) ) ) ) = 0 ) &#10;             OR ( SIZEOF( QUERY ( sdr &lt;* QUERY ( pdr &lt;* USEDIN( sr, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.'  + &#10;             'USED_REPRESENTATION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'&#10;             + 'SHAPE_DEFINITION_REPRESENTATION'  IN TYPEOF( pdr ) ) ) | ( NOT ( SIZEOF( [&#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT' , &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT_RELATIONSHIP' ] * TYPEOF( sdr.&#10;             definition ) ) = 1 ) ) ) ) = 0 ) ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="externally_defined_text_font pre_defined_text_font" name="text_font_usage">
         <where expression="( SIZEOF( QUERY ( pdtf &lt;* pre_defined_text_font | ( SIZEOF( USEDIN( pdtf, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEXT_LITERAL.FONT'  ) ) = 0 ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( edtf &lt;* externally_defined_text_font | ( SIZEOF( USEDIN( edtf, &#10;             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TEXT_LITERAL.FONT'  ) ) = 0 ) ) ) = 0 )" label="wr2"/>
      </rule>
      <rule appliesto="tolerance_zone_form" name="tolerance_zone_form_name_constraint">
         <algorithm>LOCAL
      names : SET OF STRING := [ 'within a circle', 'between two concentric circles', 'between two equidistant curves', 
               'within a cylinder' , 'between two coaxial cylinders', 'between two equidistant surfaces', 'non uniform', 
               'cylindrical or circular' , 'spherical', 'unknown'];
      pass  : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( tolerance_zone_form ) BY 1 WHILE pass;
      pass := tolerance_zone_form[i].name IN names;
    END_REPEAT;</algorithm>
         <where expression="pass" label="wr1"/>
      </rule>
      <rule appliesto="transition_feature" name="transition_feature_life_cycle">
         <where expression="( SIZEOF( QUERY ( tf &lt;* transition_feature | ( NOT ( tf.of_shape.definition.frame_of_reference.life_cycle_stage = &#10;             'manufacturing planning'  ) ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="transition_feature" name="transition_feature_on_part_boundary">
         <where expression="( SIZEOF( QUERY ( tf &lt;* transition_feature | ( NOT tf.product_definitional ) ) ) = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="datum_system" name="unique_datum_system">
         <algorithm>LOCAL
      pass : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( datum_system ) BY 1;
      REPEAT j := 1 TO SIZEOF( datum_system ) BY 1;
        IF i &lt;&gt; j THEN
          IF datum_system[i]\datum_system.constituents = datum_system[j]\datum_system.constituents THEN
            pass := FALSE;
          END_IF;
        END_IF;
      END_REPEAT;
    END_REPEAT;</algorithm>
         <where expression="pass" label="wr1"/>
      </rule>
      <rule appliesto="product_definition_shape dimensional_location dimensional_size shape_aspect shape_aspect_relationship" name="unique_gdt_element_id_constraint">
         <algorithm>LOCAL
      bss  : BAG OF STRING := [];
      ds   : SET OF dimensional_size := QUERY ( ds &lt;* dimensional_size | EXISTS( ds\dimensional_size.id ) );
      sa   : SET OF shape_aspect := QUERY ( sa &lt;* shape_aspect | EXISTS( sa\shape_aspect.id ) );
      sar  : SET OF shape_aspect_relationship := QUERY ( sar &lt;* shape_aspect_relationship | EXISTS( sar\shape_aspect_relationship
              .id ) );
      ssa  : SET OF shape_aspect := [];
      pass : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT ii := 1 TO SIZEOF( product_definition_shape ) BY 1 WHILE pass;
      bss := [];
      ssa := bag_to_set( USEDIN( product_definition_shape[ii], 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_ASPECT.' + 'OF_SHAPE' ) );
      REPEAT i := 1 TO SIZEOF( ds ) BY 1;
        IF ds[i]\dimensional_size.applies_to IN ssa THEN
          bss := bss + ds[i]\dimensional_size.id;
        END_IF;
      END_REPEAT;
      REPEAT i := 1 TO SIZEOF( sa ) BY 1;
        IF sa[i] IN ssa THEN
          bss := bss + sa[i]\shape_aspect.id;
        END_IF;
      END_REPEAT;
      REPEAT i := 1 TO SIZEOF( sar ) BY 1;
        IF sar[i]\shape_aspect_relationship.relating_shape_aspect IN ssa THEN
          bss := bss + sar[i]\shape_aspect_relationship.id;
        END_IF;
      END_REPEAT;
      IF SIZEOF( bag_to_set( bss ) ) &lt;&gt; SIZEOF( bss ) THEN
        pass := FALSE;
      END_IF;
    END_REPEAT;</algorithm>
         <where expression="pass" label="wr1"/>
      </rule>
      <rule appliesto="product_definition_context" name="valid_product_and_manufacturing_information_view_contexts">
         <algorithm>LOCAL
      design_view_contexts                                 : SET OF product_definition_context := QUERY ( pdc &lt;* 
                                                              product_definition_context | ( pdc.life_cycle_stage = 'design' ) );
      gdt_representation_view_contexts                     : SET OF product_definition_context := QUERY ( pdc &lt;* 
                                                              product_definition_context | ( pdc.frame_of_reference.application = 
                                                              'geometrical dimensioning and tolerancing representation'  ) );
      machining_feature_view_contexts                      : SET OF product_definition_context := QUERY ( pdc &lt;* 
                                                              product_definition_context | ( pdc.frame_of_reference.application = 
                                                              'machining feature'  ) );
      material_specification_view_contexts                 : SET OF product_definition_context := QUERY ( pdc &lt;* 
                                                              product_definition_context | ( pdc.frame_of_reference.application = 
                                                              'material specification'  ) );
      model_based_3d_annotation_presentation_view_contexts : SET OF product_definition_context := QUERY ( pdc &lt;* 
                                                              product_definition_context | ( pdc.frame_of_reference.application = 
                                                              'model based 3D annotation presentation'  ) );
      model_based_view_contexts                            : SET OF product_definition_context := QUERY ( pdc &lt;* 
                                                              product_definition_context | ( pdc.frame_of_reference.application = 
                                                              'model based product geometry'  ) );
      process_state_view_contexts                          : SET OF product_definition_context := QUERY ( pdc &lt;* 
                                                              product_definition_context | ( pdc.frame_of_reference.application = 
                                                              'process state'  ) );
      surface_finish_view_contexts                         : SET OF product_definition_context := QUERY ( pdc &lt;* 
                                                              product_definition_context | ( pdc.frame_of_reference.application = 
                                                              'surface finish'  ) );
      additional_view_contexts                             : SET OF product_definition_context := 
                                                              gdt_representation_view_contexts + machining_feature_view_contexts +
                                                              material_specification_view_contexts + 
                                                              model_based_3d_annotation_presentation_view_contexts + 
                                                              process_state_view_contexts + surface_finish_view_contexts;
      need_initial_model_based_view_contexts               : SET OF product_definition_context := 
                                                              gdt_representation_view_contexts + 
                                                              model_based_3d_annotation_presentation_view_contexts;
    END_LOCAL;</algorithm>
         <where expression="( SIZEOF( gdt_representation_view_contexts * design_view_contexts ) = SIZEOF( gdt_representation_view_contexts ) )" label="wr1"/>
         <where expression="( SIZEOF( machining_feature_view_contexts * design_view_contexts ) = SIZEOF( machining_feature_view_contexts ) )" label="wr2"/>
         <where expression="( SIZEOF( material_specification_view_contexts * design_view_contexts ) = SIZEOF( material_specification_view_contexts ) )" label="wr3"/>
         <where expression="( SIZEOF( model_based_3d_annotation_presentation_view_contexts * design_view_contexts ) = SIZEOF( &#10;              model_based_3d_annotation_presentation_view_contexts ) )" label="wr4"/>
         <where expression="( SIZEOF( model_based_view_contexts * design_view_contexts ) = SIZEOF( model_based_view_contexts ) )" label="wr5"/>
         <where expression="( SIZEOF( process_state_view_contexts * design_view_contexts ) = SIZEOF( process_state_view_contexts ) )" label="wr6"/>
         <where expression="( SIZEOF( surface_finish_view_contexts * design_view_contexts ) = SIZEOF( surface_finish_view_contexts ) )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( mbvc &lt;* model_based_view_contexts | ( SIZEOF( USEDIN( mbvc, &#10;              'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_CONTEXT_ASSOCIATION.'&#10;              + 'FRAME_OF_REFERENCE'  ) ) = 0 ) ) ) = SIZEOF( model_based_view_contexts ) )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( avc &lt;* additional_view_contexts | ( SIZEOF( USEDIN( avc, &#10;              'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION.FRAME_OF_REFERENCE'  ) ) = 0 ) ) ) &#10;              = SIZEOF( additional_view_contexts ) )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( nimbvc &lt;* need_initial_model_based_view_contexts | ( NOT ( SIZEOF( QUERY ( pdca &lt;* USEDIN( nimbvc, &#10;              'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_CONTEXT_ASSOCIATION.'&#10;              + 'FRAME_OF_REFERENCE'  ) | ( pdca\product_definition_context_association.definition\product_definition.&#10;              frame_of_reference IN model_based_view_contexts ) ) ) = SIZEOF( need_initial_model_based_view_contexts ) ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( gdt_pdc &lt;* gdt_representation_view_contexts | ( SIZEOF( [ 'ISO 1101', 'ASME Y14.5'] * &#10;              get_associated_mandatory_document_ids( gdt_pdc ) ) = 0 ) ) ) = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( mb3d_pdc &lt;* model_based_3d_annotation_presentation_view_contexts | ( SIZEOF( [ 'ISO 1101', 'ISO 16792', &#10;              'ASME Y14.41' , 'ASME Y14.5'] * get_associated_mandatory_document_ids( mb3d_pdc ) ) = 0 ) ) ) = 0 )" label="wr12"/>
      </rule>
      <rule appliesto="abstracted_expression_function action_method_role action_resource_type application_defined_function atom_based_literal attribute_value_role b_spline_basis b_spline_function basic_sparse_matrix binary_literal camera_model_d2 cartesian_complex_number_region cartesian_transformation_operator complex_number_literal concept_feature_relationship concept_feature_relationship_with_condition constant_function definite_integral_expression definite_integral_function edge_blended_solid effectivity_context_role elementary_function event_occurrence_role explicit_procedural_representation_item_relationship explicit_table_function expression_denoted_function extended_tuple_space externally_listed_data finite_function founded_item function_application function_space general_linear_function homogeneous_linear_function imported_curve_function imported_point_function imported_surface_function imported_volume_function indirectly_selected_elements integer_tuple_literal linearized_table_function listed_data maths_enum_literal maths_function maths_tuple_literal modified_solid_with_placed_configuration one_direction_repeat_factor oriented_open_shell oriented_path parallel_composed_function partial_derivative_expression partial_derivative_function polar_complex_number_region procedural_representation procedural_representation_sequence product_definition_effectivity quantifier_expression rationalize_function real_tuple_literal reindexed_array_function repackaging_function restriction_function runout_zone_orientation selector_function series_composed_function solid_with_depression solid_with_hole solid_with_pocket solid_with_protrusion solid_with_shape_element_pattern solid_with_slot swept_area_solid symbol_target two_direction_repeat_factor user_selected_elements volume" name="validate_dependently_instantiable_entity_data_types">
         <algorithm>LOCAL
      number_of_input_instances : INTEGER;
      previous_in_chain         : LIST OF GENERIC := [];
      set_of_input_types        : SET OF STRING := [];
      all_instances             : SET OF GENERIC := [];
    END_LOCAL;
    all_instances := all_instances + abstracted_expression_function;
    all_instances := all_instances + action_method_role;
    all_instances := all_instances + action_resource_type;
    all_instances := all_instances + application_defined_function;
    all_instances := all_instances + atom_based_literal;
    all_instances := all_instances + attribute_value_role;
    all_instances := all_instances + b_spline_basis;
    all_instances := all_instances + b_spline_function;
    all_instances := all_instances + basic_sparse_matrix;
    all_instances := all_instances + binary_literal;
    all_instances := all_instances + camera_model_d2;
    all_instances := all_instances + cartesian_complex_number_region;
    all_instances := all_instances + cartesian_transformation_operator;
    all_instances := all_instances + complex_number_literal;
    all_instances := all_instances + concept_feature_relationship;
    all_instances := all_instances + concept_feature_relationship_with_condition;
    all_instances := all_instances + constant_function;
    all_instances := all_instances + definite_integral_expression;
    all_instances := all_instances + definite_integral_function;
    all_instances := all_instances + edge_blended_solid;
    all_instances := all_instances + effectivity_context_role;
    all_instances := all_instances + elementary_function;
    all_instances := all_instances + event_occurrence_role;
    all_instances := all_instances + explicit_procedural_representation_item_relationship;
    all_instances := all_instances + explicit_table_function;
    all_instances := all_instances + expression_denoted_function;
    all_instances := all_instances + extended_tuple_space;
    all_instances := all_instances + externally_listed_data;
    all_instances := all_instances + finite_function;
    all_instances := all_instances + founded_item;
    all_instances := all_instances + function_application;
    all_instances := all_instances + function_space;
    all_instances := all_instances + general_linear_function;
    all_instances := all_instances + homogeneous_linear_function;
    all_instances := all_instances + imported_curve_function;
    all_instances := all_instances + imported_point_function;
    all_instances := all_instances + imported_surface_function;
    all_instances := all_instances + imported_volume_function;
    all_instances := all_instances + indirectly_selected_elements;
    all_instances := all_instances + integer_tuple_literal;
    all_instances := all_instances + linearized_table_function;
    all_instances := all_instances + listed_data;
    all_instances := all_instances + maths_enum_literal;
    all_instances := all_instances + maths_function;
    all_instances := all_instances + maths_tuple_literal;
    all_instances := all_instances + modified_solid_with_placed_configuration;
    all_instances := all_instances + one_direction_repeat_factor;
    all_instances := all_instances + oriented_open_shell;
    all_instances := all_instances + oriented_path;
    all_instances := all_instances + parallel_composed_function;
    all_instances := all_instances + partial_derivative_expression;
    all_instances := all_instances + partial_derivative_function;
    all_instances := all_instances + polar_complex_number_region;
    all_instances := all_instances + procedural_representation;
    all_instances := all_instances + procedural_representation_sequence;
    all_instances := all_instances + product_definition_effectivity;
    all_instances := all_instances + quantifier_expression;
    all_instances := all_instances + rationalize_function;
    all_instances := all_instances + real_tuple_literal;
    all_instances := all_instances + reindexed_array_function;
    all_instances := all_instances + repackaging_function;
    all_instances := all_instances + restriction_function;
    all_instances := all_instances + runout_zone_orientation;
    all_instances := all_instances + selector_function;
    all_instances := all_instances + series_composed_function;
    all_instances := all_instances + solid_with_depression;
    all_instances := all_instances + solid_with_hole;
    all_instances := all_instances + solid_with_pocket;
    all_instances := all_instances + solid_with_protrusion;
    all_instances := all_instances + solid_with_shape_element_pattern;
    all_instances := all_instances + solid_with_slot;
    all_instances := all_instances + swept_area_solid;
    all_instances := all_instances + symbol_target;
    all_instances := all_instances + two_direction_repeat_factor;
    all_instances := all_instances + user_selected_elements;
    all_instances := all_instances + volume;
    number_of_input_instances := SIZEOF( all_instances );
    REPEAT i := 1 TO number_of_input_instances BY 1;
      set_of_input_types := set_of_input_types + TYPEOF( all_instances[i] );
    END_REPEAT;</algorithm>
         <where expression="dependently_instantiated( all_instances, set_of_input_types, previous_in_chain )" label="wr1"/>
      </rule>
      <function name="acyclic">
         <parameter name="arg1">
            <typename name="generic_expression"/>
         </parameter>
         <parameter name="arg2">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="generic_expression"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      result : BOOLEAN := TRUE;
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SIMPLE_GENERIC_EXPRESSION' IN TYPEOF( arg1 ) THEN
      RETURN( TRUE );
    END_IF;
    IF arg1 IN arg2 THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.UNARY_GENERIC_EXPRESSION' IN TYPEOF( arg1 ) THEN
      RETURN( acyclic( arg1\unary_generic_expression.operand, arg2 + [arg1] ) );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BINARY_GENERIC_EXPRESSION' IN TYPEOF( arg1 ) THEN
      RETURN( acyclic( arg1\binary_generic_expression.operands[1], arg2 + [arg1] ) AND acyclic( arg1\binary_generic_expression.
          operands[2], arg2 + [arg1] ) );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MULTIPLE_ARITY_GENERIC_EXPRESSION' IN TYPEOF( arg1 )
        THEN
      result := TRUE;
      REPEAT i := 1 TO SIZEOF( arg1\multiple_arity_generic_expression.operands ) BY 1;
        result := result AND acyclic( arg1\multiple_arity_generic_expression.operands[i], arg2 + [arg1] );
      END_REPEAT;
      RETURN( result );
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="acyclic_composite_text">
         <parameter name="start_composite">
            <typename name="composite_text"/>
         </parameter>
         <parameter name="child_text">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="text_or_character"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      i                     : INTEGER;
      local_composite_text  : SET [0 : ?] OF composite_text;
      local_annotation_text : SET [0 : ?] OF annotation_text;
      local_children        : SET [0 : ?] OF text_or_character;
    END_LOCAL;
    local_composite_text := QUERY ( child &lt;* child_text | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
        + 'COMPOSITE_TEXT'  IN TYPEOF( child ) ) );
    IF SIZEOF( local_composite_text ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( local_composite_text ) BY 1;
        IF start_composite :=: local_composite_text[i] THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    END_IF;
    local_children := child_text;
    IF SIZEOF( local_composite_text ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( local_composite_text ) BY 1;
        local_children := local_children + local_composite_text[i].collected_text;
      END_REPEAT;
    END_IF;
    local_annotation_text := QUERY ( child &lt;* child_text | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
        + 'ANNOTATION_TEXT'  IN TYPEOF( child ) ) );
    IF SIZEOF( local_annotation_text ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( local_annotation_text ) BY 1;
        local_children := local_children + QUERY ( item &lt;* local_annotation_text[i]\mapped_item.mapping_source.
            mapped_representation.items | ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
            + 'ANNOTATION_TEXT' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_TEXT'] * TYPEOF( 
            item ) ) &gt; 0 ) );
      END_REPEAT;
    END_IF;
    IF local_children :&lt;&gt;: child_text THEN
      RETURN( acyclic_composite_text( start_composite, local_children ) );
    ELSE
      RETURN( TRUE );
    END_IF;</algorithm>
      </function>
      <function name="acyclic_curve_replica">
         <parameter name="rep">
            <typename name="curve_replica"/>
         </parameter>
         <parameter name="parent">
            <typename name="curve"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_REPLICA' IN TYPEOF( parent ) ) THEN
      RETURN( TRUE );
    END_IF;
    IF parent :=: rep THEN
      RETURN( FALSE );
    ELSE
      RETURN( acyclic_curve_replica( rep, parent\curve_replica.parent_curve ) );
    END_IF;</algorithm>
      </function>
      <function name="acyclic_mapped_representation">
         <parameter name="mi">
            <typename name="mapped_item"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      rms : SET OF representation_map;
      mis : SET OF mapped_item;
      rs1 : SET OF representation;
      rs2 : SET OF representation;
    END_LOCAL;
    rs1 := using_representations( mi );
    rs2 := [];
    REPEAT WHILE SIZEOF( rs1 ) &gt; 0;
      REPEAT i := 1 TO HIINDEX( rs1 ) BY 1;
        rms := bag_to_set( USEDIN( rs1[i], 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
            + 'REPRESENTATION_MAP.MAPPED_REPRESENTATION'  ) );
        IF SIZEOF( rms ) &gt; 0 THEN
          REPEAT j := 1 TO HIINDEX( rms ) BY 1;
            mis := bag_to_set( USEDIN( rms[i], 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM.'
                + 'MAPPING_SOURCE'  ) );
            IF SIZEOF( mis ) &gt; 0 THEN
              REPEAT j := 1 TO HIINDEX( mis ) BY 1;
                IF mis[i] :=: mi THEN
                  RETURN( FALSE );
                END_IF;
                rs2 := rs2 + using_representations( mis[i] );
              END_REPEAT;
            END_IF;
          END_REPEAT;
        END_IF;
      END_REPEAT;
      rs1 := rs2;
      rs2 := [];
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="acyclic_point_replica">
         <parameter name="rep">
            <typename name="point_replica"/>
         </parameter>
         <parameter name="parent">
            <typename name="point"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_REPLICA' IN TYPEOF( parent ) ) THEN
      RETURN( TRUE );
    END_IF;
    IF parent :=: rep THEN
      RETURN( FALSE );
    ELSE
      RETURN( acyclic_point_replica( rep, parent\point_replica.parent_pt ) );
    END_IF;</algorithm>
      </function>
      <function name="acyclic_product_category_relationship">
         <parameter name="relation">
            <typename name="product_category_relationship"/>
         </parameter>
         <parameter name="children">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="product_category"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      x              : SET OF product_category_relationship;
      local_children : SET OF product_category;
    END_LOCAL;
    REPEAT i := 1 TO HIINDEX( children ) BY 1;
      IF relation.category :=: children[i] THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    x := bag_to_set( USEDIN( relation.category, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
        'PRODUCT_CATEGORY_RELATIONSHIP.SUB_CATEGORY'  ) );
    local_children := children + relation.category;
    IF SIZEOF( x ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( x ) BY 1;
        IF NOT acyclic_product_category_relationship( x[i], local_children ) THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="acyclic_product_definition_relationship">
         <parameter name="relation">
            <typename name="product_definition_relationship"/>
         </parameter>
         <parameter name="relatives">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="product_definition_or_reference"/>
         </parameter>
         <parameter name="specific_relation">
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      x : SET OF product_definition_relationship;
    END_LOCAL;
    IF relation.relating_product_definition IN relatives THEN
      RETURN( FALSE );
    END_IF;
    x := QUERY ( pd &lt;* bag_to_set( USEDIN( relation.relating_product_definition, 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION_RELATIONSHIP.' + 
        'RELATED_PRODUCT_DEFINITION'  ) ) | ( specific_relation IN TYPEOF( pd ) ) );
    REPEAT i := 1 TO HIINDEX( x ) BY 1;
      IF NOT acyclic_product_definition_relationship( x[i], relatives + relation.relating_product_definition, specific_relation )
          THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="acyclic_representation_relationship">
         <parameter name="relation">
            <typename name="representation_relationship"/>
         </parameter>
         <parameter name="relatives">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="representation"/>
         </parameter>
         <parameter name="specific_relation">
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      x : SET OF representation_relationship;
    END_LOCAL;
    IF relation.rep_1 IN relatives THEN
      RETURN( FALSE );
    END_IF;
    x := QUERY ( r &lt;* bag_to_set( USEDIN( relation.rep_1, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' +
        'REPRESENTATION_RELATIONSHIP.' + 'REP_2' ) ) | ( specific_relation IN TYPEOF( r ) ) );
    REPEAT i := 1 TO HIINDEX( x ) BY 1;
      IF NOT acyclic_representation_relationship( x[i], relatives + relation.rep_1, specific_relation ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="acyclic_shape_aspect_relationship">
         <parameter name="relation">
            <typename name="shape_aspect_relationship"/>
         </parameter>
         <parameter name="relatives">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="shape_aspect"/>
         </parameter>
         <parameter name="specific_relation">
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      x : SET OF shape_aspect_relationship;
    END_LOCAL;
    IF relation.relating_shape_aspect IN relatives THEN
      RETURN( FALSE );
    END_IF;
    x := QUERY ( sa &lt;* bag_to_set( USEDIN( relation.relating_shape_aspect, 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_ASPECT_RELATIONSHIP.' + 
        'RELATED_SHAPE_ASPECT'  ) ) | ( specific_relation IN TYPEOF( sa ) ) );
    REPEAT i := 1 TO HIINDEX( x ) BY 1;
      IF NOT acyclic_shape_aspect_relationship( x[i], relatives + relation.relating_shape_aspect, specific_relation ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="acyclic_solid_replica">
         <parameter name="rep">
            <typename name="solid_replica"/>
         </parameter>
         <parameter name="parent">
            <typename name="solid_model"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_REPLICA' IN TYPEOF( parent ) ) THEN
      RETURN( TRUE );
    END_IF;
    IF parent :=: rep THEN
      RETURN( FALSE );
    ELSE
      RETURN( acyclic_solid_replica( rep, parent\solid_replica.parent_solid ) );
    END_IF;</algorithm>
      </function>
      <function name="acyclic_surface_replica">
         <parameter name="rep">
            <typename name="surface_replica"/>
         </parameter>
         <parameter name="parent">
            <typename name="surface"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_REPLICA' IN TYPEOF( parent ) ) THEN
      RETURN( TRUE );
    END_IF;
    IF parent :=: rep THEN
      RETURN( FALSE );
    ELSE
      RETURN( acyclic_surface_replica( rep, parent\surface_replica.parent_surface ) );
    END_IF;</algorithm>
      </function>
      <function name="advanced_face_properties">
         <parameter name="testface">
            <typename name="face"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ADVANCED_FACE' IN TYPEOF( testface ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SUBFACE' IN TYPEOF( testface ) THEN
      RETURN( advanced_face_properties( testface\subface.parent_face ) );
    ELSE
      RETURN( FALSE );
    END_IF;</algorithm>
      </function>
      <function name="all_members_of_es">
         <parameter name="sv">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="maths_value"/>
         </parameter>
         <parameter name="es">
            <typename name="elementary_space_enumerators"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>CONSTANT
      base_types : SET OF STRING :=
                    [ 'NUMBER' , 
                      'COMPLEX_NUMBER_LITERAL' , 
                      'REAL' , 
                      'INTEGER' , 
                      'LOGICAL' , 
                      'BOOLEAN' , 
                      'STRING' , 
                      'BINARY' , 
                      'MATHS_SPACE' , 
                      'MATHS_FUNCTION' , 
                      'LIST' , 
                      'ELEMENTARY_SPACE_ENUMERATORS' , 
                      'ORDERING_TYPE' , 
                      'LOWER_UPPER' , 
                      'SYMMETRY_TYPE' , 
                      'ELEMENTARY_FUNCTION_ENUMERATORS' , 
                      'OPEN_CLOSED' , 
                      'SPACE_CONSTRAINT_TYPE' , 
                      'REPACKAGE_OPTIONS' , 
                      'EXTENSION_OPTIONS' ];
    END_CONSTANT;

    LOCAL
      v        : maths_value;
      key_type : STRING := '';
      types    : SET OF STRING;
      ge       : generic_expression;
      cum      : LOGICAL := TRUE;
      vspc     : maths_space;
    END_LOCAL;
    IF ( NOT EXISTS( sv ) ) OR ( NOT EXISTS( es ) ) THEN
      RETURN( FALSE );
    END_IF;
    CASE es OF
      es_numbers        :         key_type := 'NUMBER';
      es_complex_numbers :         key_type := 'COMPLEX_NUMBER_LITERAL';
      es_reals          :         key_type := 'REAL';
      es_integers       :         key_type := 'INTEGER';
      es_logicals       :         key_type := 'LOGICAL';
      es_booleans       :         key_type := 'BOOLEAN';
      es_strings        :         key_type := 'STRING';
      es_binarys        :         key_type := 'BINARY';
      es_maths_spaces   :         key_type := 'MATHS_SPACE';
      es_maths_functions :         key_type := 'MATHS_FUNCTION';
      es_generics       :         RETURN( TRUE );
      END_CASE;
    REPEAT i := 1 TO SIZEOF( sv ) BY 1;
      IF NOT EXISTS( sv[i] ) THEN
        RETURN( FALSE );
      END_IF;
      v := simplify_maths_value( sv[i] );
      types := stripped_typeof( v );
      IF key_type IN types THEN
        SKIP;
      END_IF;
      IF ( es = es_numbers ) AND ( 'COMPLEX_NUMBER_LITERAL' IN types ) THEN
        SKIP;
      END_IF;
      IF SIZEOF( base_types * types ) &gt; 0 THEN
        RETURN( FALSE );
      END_IF;
      ge := v;
      IF has_values_space( ge ) THEN
        vspc := values_space_of( ge );
        IF NOT subspace_of_es( vspc, es ) THEN
          IF NOT compatible_spaces( vspc, make_elementary_space( es ) ) THEN
            RETURN( FALSE );
          END_IF;
          cum := UNKNOWN;
        END_IF;
      ELSE
        cum := UNKNOWN;
      END_IF;
      IF cum = FALSE THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( cum );</algorithm>
      </function>
      <function name="any_space_satisfies">
         <parameter name="sc">
            <typename name="space_constraint_type"/>
         </parameter>
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      spc_id : elementary_space_enumerators;
    END_LOCAL;
    IF ( sc = sc_equal ) OR ( NOT ( 'ELEMENTARY_SPACE' IN stripped_typeof( spc ) ) ) THEN
      RETURN( FALSE );
    END_IF;
    spc_id := spc\elementary_space.space_id;
    IF sc = sc_subspace THEN
      RETURN( bool( spc_id = es_generics ) );
    END_IF;
    IF sc = sc_member THEN
      RETURN( bool( ( spc_id = es_generics ) OR ( spc_id = es_maths_spaces ) ) );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="apeaid_is_base">
         <parameter name="input">
            <typename name="area_component"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      pd : SET OF property_definition := bag_to_set( QUERY ( pd &lt;* USEDIN( input, 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( pd\
            property_definition.name = 'is base' ) ) );
    END_LOCAL;
    RETURN( pd[1].description = 'true' );</algorithm>
      </function>
      <function name="aspect_ratio">
         <parameter name="p">
            <typename name="planar_box"/>
         </parameter>
         <typename name="positive_ratio_measure"/>
         <algorithm>IF ( p.size_in_x &gt; 0 ) AND ( p.size_in_y &gt; 0 ) THEN
      RETURN( p.size_in_x / p.size_in_y );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="assembly_leaf">
         <parameter name="item">
            <typename name="product_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      local_relation  : SET OF assembly_component_usage := [];
      local_relation2 : BAG OF assembly_component_usage := [];
    END_LOCAL;
    local_relation2 := local_relation2 + QUERY ( pdr &lt;* USEDIN( item, 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.'
        + 'RELATING_PRODUCT_DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
        + 'ASSEMBLY_COMPONENT_USAGE'  IN TYPEOF( pdr ) ) );
    local_relation := bag_to_set( local_relation2 );
    IF SIZEOF( local_relation ) = 0 THEN
      RETURN( TRUE );
    ELSE
      RETURN( FALSE );
    END_IF;</algorithm>
      </function>
      <function name="assembly_root">
         <parameter name="item">
            <typename name="product_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF SIZEOF( QUERY ( pdr &lt;* USEDIN( item, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
        + 'PRODUCT_DEFINITION_RELATIONSHIP.'  + 'RELATED_PRODUCT_DEFINITION' ) | ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ASSEMBLY_COMPONENT_USAGE'  IN TYPEOF( pdr ) ) ) ) = 0
        THEN
      RETURN( TRUE );
    ELSE
      RETURN( FALSE );
    END_IF;</algorithm>
      </function>
      <function name="assoc_product_space">
         <parameter name="ts1">
            <typename name="tuple_space"/>
         </parameter>
         <parameter name="ts2">
            <typename name="tuple_space"/>
         </parameter>
         <typename name="tuple_space"/>
         <algorithm>LOCAL
      types1  : SET OF STRING := stripped_typeof( ts1 );
      types2  : SET OF STRING := stripped_typeof( ts2 );
      up1     : uniform_product_space := make_uniform_product_space( the_reals, 1 );
      up2     : uniform_product_space := make_uniform_product_space( the_reals, 1 );
      lp1     : listed_product_space := the_zero_tuple_space;
      lp2     : listed_product_space := the_zero_tuple_space;
      lps     : listed_product_space := the_zero_tuple_space;
      et1     : extended_tuple_space := the_tuples;
      et2     : extended_tuple_space := the_tuples;
      ets     : extended_tuple_space := the_tuples;
      use_up1 : BOOLEAN;
      use_up2 : BOOLEAN;
      use_lp1 : BOOLEAN;
      use_lp2 : BOOLEAN;
      factors : LIST OF maths_space := [];
      tspace  : tuple_space;
    END_LOCAL;
    IF 'UNIFORM_PRODUCT_SPACE' IN types1 THEN
      up1 := ts1;
      use_up1 := TRUE;
      use_lp1 := FALSE;
    ELSE
      IF 'LISTED_PRODUCT_SPACE' IN types1 THEN
        lp1 := ts1;
        use_up1 := FALSE;
        use_lp1 := TRUE;
      ELSE
        IF NOT ( 'EXTENDED_TUPLE_SPACE' IN types1 ) THEN
          RETURN( ? );
        END_IF;
        et1 := ts1;
        use_up1 := FALSE;
        use_lp1 := FALSE;
      END_IF;
    END_IF;
    IF 'UNIFORM_PRODUCT_SPACE' IN types2 THEN
      up2 := ts2;
      use_up2 := TRUE;
      use_lp2 := FALSE;
    ELSE
      IF 'LISTED_PRODUCT_SPACE' IN types2 THEN
        lp2 := ts2;
        use_up2 := FALSE;
        use_lp2 := TRUE;
      ELSE
        IF NOT ( 'EXTENDED_TUPLE_SPACE' IN types2 ) THEN
          RETURN( ? );
        END_IF;
        et2 := ts2;
        use_up2 := FALSE;
        use_lp2 := FALSE;
      END_IF;
    END_IF;
    IF use_up1 THEN
      IF use_up2 THEN
        IF up1.base = up2.base THEN
          tspace := make_uniform_product_space( up1.base, up1.exponent + up2.exponent );
        ELSE
          factors := [up1.base : 0, up2.base : 0];
          tspace := make_listed_product_space( factors );
        END_IF;
      ELSE
        IF use_lp2 THEN
          factors := [up1.base : 0];
          factors := factors + lp2.factors;
          tspace := make_listed_product_space( factors );
        ELSE
          tspace := assoc_product_space( up1, et2.base );
          tspace := make_extended_tuple_space( tspace, et2.extender );
        END_IF;
      END_IF;
    ELSE
      IF use_lp1 THEN
        IF use_up2 THEN
          factors := [up2.base : 0];
          factors := lp1.factors + factors;
          tspace := make_listed_product_space( factors );
        ELSE
          IF use_lp2 THEN
            tspace := make_listed_product_space( lp1.factors + lp2.factors );
          ELSE
            tspace := assoc_product_space( lp1, et2.base );
            tspace := make_extended_tuple_space( tspace, et2.extender );
          END_IF;
        END_IF;
      ELSE
        IF use_up2 THEN
          IF et1.extender = up2.base THEN
            tspace := assoc_product_space( et1.base, up2 );
            tspace := make_extended_tuple_space( tspace, et1.extender );
          ELSE
            RETURN( ? );
          END_IF;
        ELSE
          IF use_lp2 THEN
            factors := lp2.factors;
            REPEAT i := 1 TO SIZEOF( factors ) BY 1;
              IF et1.extender &lt;&gt; factors[i] THEN
                RETURN( ? );
              END_IF;
            END_REPEAT;
            tspace := assoc_product_space( et1.base, lp2 );
            tspace := make_extended_tuple_space( tspace, et1.extender );
          ELSE
            IF et1.extender = et2.extender THEN
              tspace := assoc_product_space( et1, et2.base );
            ELSE
              RETURN( ? );
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( tspace );</algorithm>
      </function>
      <function name="associated_surface">
         <parameter name="arg">
            <typename name="pcurve_or_surface"/>
         </parameter>
         <typename name="surface"/>
         <algorithm>LOCAL
      surf : surface;
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( arg ) THEN
      surf := arg\pcurve.basis_surface;
    ELSE
      surf := arg;
    END_IF;
    RETURN( surf );</algorithm>
      </function>
      <function name="atan2">
         <parameter name="y">
            <builtintype type="REAL"/>
         </parameter>
         <parameter name="x">
            <builtintype type="REAL"/>
         </parameter>
         <builtintype type="REAL"/>
         <algorithm>LOCAL
      r : REAL;
    END_LOCAL;
    IF ( y = 0 ) AND ( x = 0 ) THEN
      RETURN( ? );
    END_IF;
    r := ATAN( y, x );
    IF x &lt; 0 THEN
      IF y &lt; 0 THEN
        r := r - PI;
      ELSE
        r := r + PI;
      END_IF;
    END_IF;
    RETURN( r );</algorithm>
      </function>
      <function name="bag_to_set">
         <parameter name="the_bag">
            <aggregate lower="0" type="BAG" upper="?"/>
            <builtintype type="GENERIC" typelabel="intype"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <builtintype type="GENERIC" typelabel="intype"/>
         <algorithm>LOCAL
      the_set : SET OF GENERIC:intype := [];
    END_LOCAL;
    IF SIZEOF( the_bag ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( the_bag ) BY 1;
        the_set := the_set + the_bag[i];
      END_REPEAT;
    END_IF;
    RETURN( the_set );</algorithm>
      </function>
      <function name="base_axis">
         <parameter name="dim">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="axis1">
            <typename name="direction"/>
         </parameter>
         <parameter name="axis2">
            <typename name="direction"/>
         </parameter>
         <parameter name="axis3">
            <typename name="direction"/>
         </parameter>
         <aggregate lower="2" type="LIST" upper="3"/>
         <typename name="direction"/>
         <algorithm>LOCAL
      u      : LIST [2 : 3] OF direction;
      factor : REAL;
      d1     : direction;
      d2     : direction;
    END_LOCAL;
    IF dim = 3 THEN
      d1 := NVL( normalise( axis3 ), dummy_gri || direction( [0, 0, 1] ) );
      d2 := first_proj_axis( d1, axis1 );
      u := [d2, second_proj_axis( d1, d2, axis2 ), d1];
    ELSE
      IF EXISTS( axis1 ) THEN
        d1 := normalise( axis1 );
        u := [d1, orthogonal_complement( d1 )];
        IF EXISTS( axis2 ) THEN
          factor := dot_product( axis2, u[2] );
          IF factor &lt; 0 THEN
            u[2].direction_ratios[1] := -u[2].direction_ratios[1];
            u[2].direction_ratios[2] := -u[2].direction_ratios[2];
          END_IF;
        END_IF;
      ELSE
        IF EXISTS( axis2 ) THEN
          d1 := normalise( axis2 );
          u := [orthogonal_complement( d1 ), d1];
          u[1].direction_ratios[1] := -u[1].direction_ratios[1];
          u[1].direction_ratios[2] := -u[1].direction_ratios[2];
        ELSE
          u := [dummy_gri || direction( [1, 0] ), dummy_gri || direction( [0, 1] )];
        END_IF;
      END_IF;
    END_IF;
    RETURN( u );</algorithm>
      </function>
      <function name="bool">
         <parameter name="lgcl">
            <builtintype type="LOGICAL"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF NOT EXISTS( lgcl ) THEN
      RETURN( FALSE );
    END_IF;
    IF lgcl &lt;&gt; TRUE THEN
      RETURN( FALSE );
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="boolean_choose">
         <parameter name="b">
            <builtintype type="BOOLEAN"/>
         </parameter>
         <parameter name="choice1">
            <builtintype type="GENERIC" typelabel="item"/>
         </parameter>
         <parameter name="choice2">
            <builtintype type="GENERIC" typelabel="item"/>
         </parameter>
         <builtintype type="GENERIC" typelabel="item"/>
         <algorithm>IF b THEN
      RETURN( choice1 );
    ELSE
      RETURN( choice2 );
    END_IF;</algorithm>
      </function>
      <function name="build_2axes">
         <parameter name="ref_direction">
            <typename name="direction"/>
         </parameter>
         <aggregate lower="2" type="LIST" upper="2"/>
         <typename name="direction"/>
         <algorithm>LOCAL
      d : direction := NVL( normalise( ref_direction ), dummy_gri || direction( [1, 0] ) );
    END_LOCAL;
    RETURN( [d, orthogonal_complement( d )] );</algorithm>
      </function>
      <function name="build_axes">
         <parameter name="axis">
            <typename name="direction"/>
         </parameter>
         <parameter name="ref_direction">
            <typename name="direction"/>
         </parameter>
         <aggregate lower="3" type="LIST" upper="3"/>
         <typename name="direction"/>
         <algorithm>LOCAL
      d1 : direction;
      d2 : direction;
    END_LOCAL;
    d1 := NVL( normalise( axis ), dummy_gri || direction( [0, 0, 1] ) );
    d2 := first_proj_axis( d1, ref_direction );
    RETURN( [d2, normalise( cross_product( d1, d2 ) )\vector.orientation, d1] );</algorithm>
      </function>
      <function name="categories_of_product">
         <parameter name="obj">
            <typename name="product"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <builtintype type="STRING"/>
         <algorithm>LOCAL
      category_assignments : BAG OF product_category;
      categories           : SET OF STRING := [];
    END_LOCAL;
    category_assignments := USEDIN( obj, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
        'PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  );
    REPEAT i := LOINDEX( category_assignments ) TO HIINDEX( category_assignments ) BY 1;
      categories := categories + category_assignments[i].name;
    END_REPEAT;
    RETURN( categories );</algorithm>
      </function>
      <function name="cc_design_person_and_organization_correlation">
         <parameter name="e">
            <typename name="cc_design_person_and_organization_assignment"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      po_role : STRING;
    END_LOCAL;
    po_role := e\person_and_organization_assignment.role.name;
    CASE po_role OF
      'request_recipient'   :         IF SIZEOF( e.items ) &lt;&gt; SIZEOF( QUERY ( x &lt;* e.items | ( SIZEOF( [
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CHANGE_REQUEST', 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'START_REQUEST'] * TYPEOF( x ) ) = 1 ) ) )
            THEN
          RETURN( FALSE );
        END_IF;
      'initiator'           :         IF SIZEOF( e.items ) &lt;&gt; SIZEOF( QUERY ( x &lt;* e.items | ( SIZEOF( [
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CHANGE_REQUEST', 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'START_REQUEST', 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'START_WORK', 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CHANGE'] * TYPEOF( x ) ) = 1 ) ) ) THEN
          RETURN( FALSE );
        END_IF;
      'creator'             :         IF SIZEOF( e.items ) &lt;&gt; SIZEOF( QUERY ( x &lt;* e.items | ( SIZEOF( [
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION_FORMATION', 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION'] * TYPEOF( x ) ) = 1 ) ) )
            THEN
          RETURN( FALSE );
        END_IF;
      'part_supplier'       :         IF SIZEOF( e.items ) &lt;&gt; SIZEOF( QUERY ( x &lt;* e.items | ( ( 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION_FORMATION' ) IN TYPEOF( 
            x ) ) ) ) THEN
          RETURN( FALSE );
        END_IF;
      'design_supplier'     :         IF SIZEOF( e.items ) &lt;&gt; SIZEOF( QUERY ( x &lt;* e.items | ( ( 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'PRODUCT_DEFINITION_FORMATION' ) IN TYPEOF( 
            x ) ) ) ) THEN
          RETURN( FALSE );
        END_IF;
      'design_owner'        :         IF SIZEOF( e.items ) &lt;&gt; SIZEOF( QUERY ( x &lt;* e.items | ( 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT'  IN TYPEOF( x ) ) ) ) THEN
          RETURN( FALSE );
        END_IF;
      'configuration_manager' :         IF SIZEOF( e.items ) &lt;&gt; SIZEOF( QUERY ( x &lt;* e.items | ( ( 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'CONFIGURATION_ITEM' ) IN TYPEOF( x ) ) ) )
            THEN
          RETURN( FALSE );
        END_IF;
      'contractor'          :         IF SIZEOF( e.items ) &lt;&gt; SIZEOF( QUERY ( x &lt;* e.items | ( 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONTRACT'  IN TYPEOF( x ) ) ) ) THEN
          RETURN( FALSE );
        END_IF;
      'classification_officer' :         IF SIZEOF( e.items ) &lt;&gt; SIZEOF( QUERY ( x &lt;* e.items | ( ( 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SECURITY_CLASSIFICATION' ) IN TYPEOF( x ) ) ) )
            THEN
          RETURN( FALSE );
        END_IF;
      OTHERWISE             :         RETURN( TRUE );
      END_CASE;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="check_continuous_edges">
         <parameter name="edges">
            <aggregate lower="0" type="LIST" unique="YES" upper="?"/>
            <typename name="edge_curve"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      i           : INTEGER;
      next_vertex : vertex;
    END_LOCAL;
    IF SIZEOF( edges ) = 1 THEN
      RETURN( TRUE );
    END_IF;
    IF ( edges[2].edge_start :=: edges[1].edge_end ) XOR ( edges[2].edge_start :=: edges[1].edge_start ) THEN
      next_vertex := edges[2].edge_end;
    ELSE
      IF ( edges[2].edge_end :=: edges[1].edge_end ) XOR ( edges[2].edge_end :=: edges[1].edge_start ) THEN
        next_vertex := edges[2].edge_start;
      ELSE
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF SIZEOF( edges ) = 2 THEN
      RETURN( TRUE );
    END_IF;
    REPEAT i := 3 TO HIINDEX( edges ) BY 1;
      IF edges[i].edge_start :=: next_vertex THEN
        next_vertex := edges[i].edge_end;
      ELSE
        IF edges[i].edge_end :=: next_vertex THEN
          next_vertex := edges[i].edge_start;
        ELSE
          RETURN( FALSE );
        END_IF;
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="check_curve_planarity">
         <parameter name="checked_curve">
            <typename name="curve"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      crv    : curve := checked_curve;
      i      : INTEGER;
      j      : INTEGER;
      result : BOOLEAN := FALSE;
    END_LOCAL;
    IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC', 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE' ] * TYPEOF( crv ) ) &gt; 0 THEN
      result := TRUE;
    ELSE
      IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TRIMMED_CURVE' IN TYPEOF( crv ) ) AND 
          check_curve_planarity( crv\trimmed_curve.basis_curve ) THEN
        result := TRUE;
      ELSE
        IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( crv ) ) AND ( 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE'  IN TYPEOF( crv\pcurve.basis_surface ) )
            THEN
          result := TRUE;
        ELSE
          IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE' IN TYPEOF( crv ) THEN

            BEGIN
              REPEAT j := 1 TO HIINDEX( crv\surface_curve.basis_surface ) BY 1;
                IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE' IN TYPEOF( crv\surface_curve.
                    basis_surface[j] ) THEN
                  result := TRUE;
                END_IF;
              END_REPEAT;
            END;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="check_sparse_index_domain">
         <parameter name="idxdom">
            <typename name="tuple_space"/>
         </parameter>
         <parameter name="base">
            <typename name="zero_or_one"/>
         </parameter>
         <parameter name="shape">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="positive_integer"/>
         </parameter>
         <parameter name="order">
            <typename name="ordering_type"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      mthspc   : maths_space;
      interval : finite_integer_interval;
      i        : INTEGER;
    END_LOCAL;
    mthspc := factor1( idxdom );
    interval := mthspc;
    IF order = by_rows THEN
      i := 1;
    ELSE
      i := 2;
    END_IF;
    RETURN( bool( ( interval.min &lt;= base ) AND ( interval.max &gt;= ( base + shape[i] ) ) ) );</algorithm>
      </function>
      <function name="check_sparse_index_to_loc">
         <parameter name="index_range">
            <typename name="tuple_space"/>
         </parameter>
         <parameter name="loc_domain">
            <typename name="tuple_space"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      temp         : maths_space;
      idx_rng_itvl : finite_integer_interval;
      loc_dmn_itvl : finite_integer_interval;
    END_LOCAL;
    temp := factor1( index_range );
    IF ( schema_prefix + 'TUPLE_SPACE' ) IN TYPEOF( temp ) THEN
      temp := factor1( temp );
    END_IF;
    IF NOT ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN TYPEOF( temp ) ) THEN
      RETURN( FALSE );
    END_IF;
    idx_rng_itvl := temp;
    temp := factor1( loc_domain );
    IF ( schema_prefix + 'TUPLE_SPACE' ) IN TYPEOF( temp ) THEN
      temp := factor1( temp );
    END_IF;
    IF NOT ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN TYPEOF( temp ) ) THEN
      RETURN( FALSE );
    END_IF;
    loc_dmn_itvl := temp;
    RETURN( bool( ( loc_dmn_itvl.min &lt;= idx_rng_itvl.min ) AND ( idx_rng_itvl.max &lt;= ( loc_dmn_itvl.max + 1 ) ) ) );</algorithm>
      </function>
      <function name="check_sparse_loc_range">
         <parameter name="locrng">
            <typename name="tuple_space"/>
         </parameter>
         <parameter name="base">
            <typename name="zero_or_one"/>
         </parameter>
         <parameter name="shape">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="positive_integer"/>
         </parameter>
         <parameter name="order">
            <typename name="ordering_type"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      mthspc   : maths_space;
      interval : finite_integer_interval;
      i        : INTEGER;
    END_LOCAL;
    IF space_dimension( locrng ) &lt;&gt; 1 THEN
      RETURN( FALSE );
    END_IF;
    mthspc := factor1( locrng );
    IF NOT ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN TYPEOF( mthspc ) ) THEN
      RETURN( FALSE );
    END_IF;
    interval := mthspc;
    IF order = by_rows THEN
      i := 2;
    ELSE
      i := 1;
    END_IF;
    RETURN( bool( ( interval.min &gt;= base ) AND ( interval.max &lt;= ( ( base + shape[i] ) - 1 ) ) ) );</algorithm>
      </function>
      <function name="check_text_alignment">
         <parameter name="ct">
            <typename name="composite_text"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      a : SET OF text_alignment := [];
    END_LOCAL;
    REPEAT i := 1 TO HIINDEX( ct.collected_text ) BY 1;
      a := a + [ct.collected_text[i]\text_literal.alignment];
    END_REPEAT;
    RETURN( SIZEOF( a ) = 1 );</algorithm>
      </function>
      <function name="check_text_font">
         <parameter name="ct">
            <typename name="composite_text"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      f : SET OF font_select := [];
    END_LOCAL;
    REPEAT i := 1 TO HIINDEX( ct.collected_text ) BY 1;
      f := f + [ct.collected_text[i]\text_literal.font];
    END_REPEAT;
    RETURN( SIZEOF( f ) &lt;= 1 );</algorithm>
      </function>
      <function name="class_assignment_is_valid">
         <parameter name="aia">
            <typename name="applied_classification_assignment"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      item : classification_item;
      role : classification_role;
    END_LOCAL;
    role := aia\classification_assignment.role;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLASS_SYSTEM' IN TYPEOF( aia\classification_assignment
        .assigned_class ) THEN
      IF role\classification_role.name &lt;&gt; 'class system membership' THEN
        RETURN( FALSE );
      END_IF;
      REPEAT i := LOINDEX( aia\applied_classification_assignment.items ) TO HIINDEX( aia\applied_classification_assignment.items )
          BY 1;
        item := aia\applied_classification_assignment.items[i];
        IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CHARACTERIZED_CLASS'] * TYPEOF( item ) ) 
            = 0 THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CHARACTERIZED_CLASS' IN TYPEOF( aia\
        classification_assignment.assigned_class ) THEN
      IF NOT ( role\classification_role.name IN [ 'definitional', 'non-definitional', ''] ) THEN
        RETURN( FALSE );
      END_IF;
      REPEAT i := LOINDEX( aia\applied_classification_assignment.items ) TO HIINDEX( aia\applied_classification_assignment.items )
          BY 1;
        item := aia\applied_classification_assignment.items[i];
        IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLASSIFIED_ITEM'] * TYPEOF( item ) ) = 0
            THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    END_IF;
    IF role\classification_role.name = 'definitional' THEN
      IF NOT ( SIZEOF( QUERY ( it &lt;* aia\applied_classification_assignment.items | ( NOT ( SIZEOF( [
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT' , 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_FORMATION' , 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION' ] * TYPEOF( it ) ) = 1 ) ) ) ) 
          = 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="closed_shell_reversed">
         <parameter name="a_shell">
            <typename name="closed_shell"/>
         </parameter>
         <typename name="oriented_closed_shell"/>
         <algorithm>LOCAL
      the_reverse : oriented_closed_shell;
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_CLOSED_SHELL' IN TYPEOF( a_shell ) THEN
      the_reverse := dummy_tri || connected_face_set( a_shell\connected_face_set.cfs_faces ) || closed_shell(  ) || 
          oriented_closed_shell( a_shell\oriented_closed_shell.closed_shell_element, NOT a_shell\oriented_closed_shell.orientation );
    ELSE
      the_reverse := dummy_tri || connected_face_set( a_shell\connected_face_set.cfs_faces ) || closed_shell(  ) || 
          oriented_closed_shell( a_shell, FALSE );
    END_IF;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="collect_joints">
         <parameter name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="pair_representation_relationship"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="kinematic_joint"/>
         <algorithm>LOCAL
      result : SET OF kinematic_joint := [];
    END_LOCAL;
    REPEAT i := 1 TO HIINDEX( items ) BY 1;
      result := result + items[i].transformation_operator.joint;
    END_REPEAT;
    RETURN( result );</algorithm>
      </function>
      <function name="compare_basis_and_coef">
         <parameter name="basis">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="b_spline_basis"/>
         </parameter>
         <parameter name="coef">
            <typename name="maths_function"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      shape : LIST OF positive_integer;
    END_LOCAL;
    IF ( NOT EXISTS( basis ) ) OR ( NOT EXISTS( coef ) ) THEN
      RETURN( FALSE );
    END_IF;
    shape := shape_of_array( coef );
    IF NOT EXISTS( shape ) THEN
      RETURN( FALSE );
    END_IF;
    IF SIZEOF( shape ) &lt; SIZEOF( basis ) THEN
      RETURN( FALSE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( basis ) BY 1;
      IF ( basis[i].num_basis = shape[i] ) &lt;&gt; TRUE THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="compatible_complex_number_regions">
         <parameter name="sp1">
            <typename name="maths_space"/>
         </parameter>
         <parameter name="sp2">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      typenames   : SET OF STRING := stripped_typeof( sp1 );
      crgn1       : cartesian_complex_number_region;
      crgn2       : cartesian_complex_number_region;
      prgn1       : polar_complex_number_region;
      prgn2       : polar_complex_number_region;
      prgn1c2     : polar_complex_number_region;
      prgn2c1     : polar_complex_number_region;
      sp1_is_crgn : BOOLEAN;
      sp2_is_crgn : BOOLEAN;
    END_LOCAL;
    IF 'CARTESIAN_COMPLEX_NUMBER_REGION' IN typenames THEN
      sp1_is_crgn := TRUE;
      crgn1 := sp1;
    ELSE
      IF 'POLAR_COMPLEX_NUMBER_REGION' IN typenames THEN
        sp1_is_crgn := FALSE;
        prgn1 := sp1;
      ELSE
        RETURN( TRUE );
      END_IF;
    END_IF;
    typenames := stripped_typeof( sp2 );
    IF 'CARTESIAN_COMPLEX_NUMBER_REGION' IN typenames THEN
      sp2_is_crgn := TRUE;
      crgn2 := sp2;
    ELSE
      IF 'POLAR_COMPLEX_NUMBER_REGION' IN typenames THEN
        sp2_is_crgn := FALSE;
        prgn2 := sp2;
      ELSE
        RETURN( TRUE );
      END_IF;
    END_IF;
    IF sp1_is_crgn AND sp2_is_crgn THEN
      RETURN( compatible_intervals( crgn1.real_constraint, crgn2.real_constraint ) AND compatible_intervals( crgn1.
          imag_constraint, crgn2.imag_constraint ) );
    END_IF;
    IF ( NOT sp1_is_crgn ) AND ( NOT sp2_is_crgn ) AND ( prgn1.centre.real_part = prgn2.centre.real_part ) AND ( prgn1.centre.
        imag_part = prgn2.centre.imag_part ) THEN
      IF NOT compatible_intervals( prgn1.distance_constraint, prgn2.distance_constraint ) THEN
        RETURN( FALSE );
      END_IF;
      IF compatible_intervals( prgn1.direction_constraint, prgn2.direction_constraint ) THEN
        RETURN( TRUE );
      END_IF;
      IF ( prgn1.direction_constraint.max &gt; PI ) AND ( prgn2.direction_constraint.max &lt; PI ) THEN
        RETURN( compatible_intervals( prgn2.direction_constraint, make_finite_real_interval( -PI, open, prgn1.
            direction_constraint.max - ( 2 * PI ), prgn1.direction_constraint.max_closure ) ) );
      END_IF;
      IF ( prgn2.direction_constraint.max &gt; PI ) AND ( prgn1.direction_constraint.max &lt; PI ) THEN
        RETURN( compatible_intervals( prgn1.direction_constraint, make_finite_real_interval( -PI, open, prgn2.
            direction_constraint.max - ( 2 * PI ), prgn2.direction_constraint.max_closure ) ) );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF sp1_is_crgn AND ( NOT sp2_is_crgn ) THEN
      crgn2 := enclose_pregion_in_cregion( prgn2 );
      prgn1 := enclose_cregion_in_pregion( crgn1, prgn2.centre );
      RETURN( compatible_complex_number_regions( crgn1, crgn2 ) AND compatible_complex_number_regions( prgn1, prgn2 ) );
    END_IF;
    IF ( NOT sp1_is_crgn ) AND sp2_is_crgn THEN
      crgn1 := enclose_pregion_in_cregion( prgn1 );
      prgn2 := enclose_cregion_in_pregion( crgn2, prgn1.centre );
      RETURN( compatible_complex_number_regions( crgn1, crgn2 ) AND compatible_complex_number_regions( prgn1, prgn2 ) );
    END_IF;
    prgn1c2 := enclose_pregion_in_pregion( prgn1, prgn2.centre );
    prgn2c1 := enclose_pregion_in_pregion( prgn2, prgn1.centre );
    RETURN( compatible_complex_number_regions( prgn1, prgn2c1 ) AND compatible_complex_number_regions( prgn1c2, prgn2 ) );</algorithm>
      </function>
      <function name="compatible_es_values">
         <parameter name="esval1">
            <typename name="elementary_space_enumerators"/>
         </parameter>
         <parameter name="esval2">
            <typename name="elementary_space_enumerators"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      esval1_is_numeric : LOGICAL;
      esval2_is_numeric : LOGICAL;
    END_LOCAL;
    IF ( esval1 = esval2 ) OR ( esval1 = es_generics ) OR ( esval2 = es_generics ) THEN
      RETURN( TRUE );
    END_IF;
    esval1_is_numeric := ( esval1 &gt;= es_numbers ) AND ( esval1 &lt;= es_integers );
    esval2_is_numeric := ( esval2 &gt;= es_numbers ) AND ( esval2 &lt;= es_integers );
    IF ( esval1_is_numeric AND ( esval2 = es_numbers ) ) OR ( esval2_is_numeric AND ( esval1 = es_numbers ) ) THEN
      RETURN( TRUE );
    END_IF;
    IF esval1_is_numeric XOR esval2_is_numeric THEN
      RETURN( FALSE );
    END_IF;
    IF ( ( esval1 = es_logicals ) AND ( esval2 = es_booleans ) ) OR ( ( esval1 = es_booleans ) AND ( esval2 = es_logicals ) )
        THEN
      RETURN( TRUE );
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="compatible_intervals">
         <parameter name="sp1">
            <typename name="maths_space"/>
         </parameter>
         <parameter name="sp2">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      amin : REAL;
      amax : REAL;
    END_LOCAL;
    IF min_exists( sp1 ) AND max_exists( sp2 ) THEN
      amin := real_min( sp1 );
      amax := real_max( sp2 );
      IF amin &gt; amax THEN
        RETURN( FALSE );
      END_IF;
      IF amin = amax THEN
        RETURN( min_included( sp1 ) AND max_included( sp2 ) );
      END_IF;
    END_IF;
    IF min_exists( sp2 ) AND max_exists( sp1 ) THEN
      amin := real_min( sp2 );
      amax := real_max( sp1 );
      IF amin &gt; amax THEN
        RETURN( FALSE );
      END_IF;
      IF amin = amax THEN
        RETURN( min_included( sp2 ) AND max_included( sp1 ) );
      END_IF;
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="compatible_spaces">
         <parameter name="sp1">
            <typename name="maths_space"/>
         </parameter>
         <parameter name="sp2">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      types1 : SET OF STRING := stripped_typeof( sp1 );
      types2 : SET OF STRING := stripped_typeof( sp2 );
      lgcl   : LOGICAL := UNKNOWN;
      m      : INTEGER;
      n      : INTEGER;
      s1     : maths_space;
      s2     : maths_space;
    END_LOCAL;
    IF 'FINITE_SPACE' IN types1 THEN
      REPEAT i := 1 TO SIZEOF( sp1\finite_space.members ) BY 1;
        lgcl := member_of( sp1\finite_space.members[i], sp2 );
        IF lgcl &lt;&gt; FALSE THEN
          RETURN( TRUE );
        END_IF;
      END_REPEAT;
      RETURN( FALSE );
    END_IF;
    IF 'FINITE_SPACE' IN types2 THEN
      REPEAT i := 1 TO SIZEOF( sp2\finite_space.members ) BY 1;
        lgcl := member_of( sp2\finite_space.members[i], sp1 );
        IF lgcl &lt;&gt; FALSE THEN
          RETURN( TRUE );
        END_IF;
      END_REPEAT;
      RETURN( FALSE );
    END_IF;
    IF 'ELEMENTARY_SPACE' IN types1 THEN
      IF sp1\elementary_space.space_id = es_generics THEN
        RETURN( TRUE );
      END_IF;
      IF 'ELEMENTARY_SPACE' IN types2 THEN
        RETURN( compatible_es_values( sp1\elementary_space.space_id, sp2\elementary_space.space_id ) );
      END_IF;
      IF ( 'FINITE_INTEGER_INTERVAL' IN types2 ) OR ( 'INTEGER_INTERVAL_FROM_MIN' IN types2 ) OR ( 'INTEGER_INTERVAL_TO_MAX' IN 
          types2 ) THEN
        RETURN( compatible_es_values( sp1\elementary_space.space_id, es_integers ) );
      END_IF;
      IF ( 'FINITE_REAL_INTERVAL' IN types2 ) OR ( 'REAL_INTERVAL_FROM_MIN' IN types2 ) OR ( 'REAL_INTERVAL_TO_MAX' IN types2 )
          THEN
        RETURN( compatible_es_values( sp1\elementary_space.space_id, es_reals ) );
      END_IF;
      IF ( 'CARTESIAN_COMPLEX_NUMBER_REGION' IN types2 ) OR ( 'POLAR_COMPLEX_NUMBER_REGION' IN types2 ) THEN
        RETURN( compatible_es_values( sp1\elementary_space.space_id, es_complex_numbers ) );
      END_IF;
      IF 'TUPLE_SPACE' IN types2 THEN
        RETURN( FALSE );
      END_IF;
      IF 'FUNCTION_SPACE' IN types2 THEN
        RETURN( bool( sp1\elementary_space.space_id = es_maths_functions ) );
      END_IF;
      RETURN( TRUE );
    END_IF;
    IF 'ELEMENTARY_SPACE' IN types2 THEN
      IF sp2\elementary_space.space_id = es_generics THEN
        RETURN( TRUE );
      END_IF;
      IF ( 'FINITE_INTEGER_INTERVAL' IN types1 ) OR ( 'INTEGER_INTERVAL_FROM_MIN' IN types1 ) OR ( 'INTEGER_INTERVAL_TO_MAX' IN 
          types1 ) THEN
        RETURN( compatible_es_values( sp2\elementary_space.space_id, es_integers ) );
      END_IF;
      IF ( 'FINITE_REAL_INTERVAL' IN types1 ) OR ( 'REAL_INTERVAL_FROM_MIN' IN types1 ) OR ( 'REAL_INTERVAL_TO_MAX' IN types1 )
          THEN
        RETURN( compatible_es_values( sp2\elementary_space.space_id, es_reals ) );
      END_IF;
      IF ( 'CARTESIAN_COMPLEX_NUMBER_REGION' IN types1 ) OR ( 'POLAR_COMPLEX_NUMBER_REGION' IN types1 ) THEN
        RETURN( compatible_es_values( sp2\elementary_space.space_id, es_complex_numbers ) );
      END_IF;
      IF 'TUPLE_SPACE' IN types1 THEN
        RETURN( FALSE );
      END_IF;
      IF 'FUNCTION_SPACE' IN types1 THEN
        RETURN( bool( sp2\elementary_space.space_id = es_maths_functions ) );
      END_IF;
      RETURN( TRUE );
    END_IF;
    IF subspace_of_es( sp1, es_integers ) THEN
      IF subspace_of_es( sp2, es_integers ) THEN
        RETURN( compatible_intervals( sp1, sp2 ) );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF subspace_of_es( sp2, es_integers ) THEN
      RETURN( FALSE );
    END_IF;
    IF subspace_of_es( sp1, es_reals ) THEN
      IF subspace_of_es( sp2, es_reals ) THEN
        RETURN( compatible_intervals( sp1, sp2 ) );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF subspace_of_es( sp2, es_reals ) THEN
      RETURN( FALSE );
    END_IF;
    IF subspace_of_es( sp1, es_complex_numbers ) THEN
      IF subspace_of_es( sp2, es_complex_numbers ) THEN
        RETURN( compatible_complex_number_regions( sp1, sp2 ) );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF subspace_of_es( sp2, es_complex_numbers ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'UNIFORM_PRODUCT_SPACE' IN types1 THEN
      IF 'UNIFORM_PRODUCT_SPACE' IN types2 THEN
        IF sp1\uniform_product_space.exponent &lt;&gt; sp2\uniform_product_space.exponent THEN
          RETURN( FALSE );
        END_IF;
        RETURN( compatible_spaces( sp1\uniform_product_space.base, sp2\uniform_product_space.base ) );
      END_IF;
      IF 'LISTED_PRODUCT_SPACE' IN types2 THEN
        n := SIZEOF( sp2\listed_product_space.factors );
        IF sp1\uniform_product_space.exponent &lt;&gt; n THEN
          RETURN( FALSE );
        END_IF;
        REPEAT i := 1 TO n BY 1;
          IF NOT compatible_spaces( sp1\uniform_product_space.base, sp2\listed_product_space.factors[i] ) THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
        RETURN( TRUE );
      END_IF;
      IF 'EXTENDED_TUPLE_SPACE' IN types2 THEN
        m := sp1\uniform_product_space.exponent;
        n := space_dimension( sp2\extended_tuple_space.base );
        IF m &lt; n THEN
          RETURN( FALSE );
        END_IF;
        IF m = n THEN
          RETURN( compatible_spaces( sp1, sp2\extended_tuple_space.base ) );
        END_IF;
        RETURN( compatible_spaces( sp1, assoc_product_space( sp2\extended_tuple_space.base, make_uniform_product_space( sp2\
            extended_tuple_space.extender, m - n ) ) ) );
      END_IF;
      IF 'FUNCTION_SPACE' IN types2 THEN
        RETURN( FALSE );
      END_IF;
      RETURN( TRUE );
    END_IF;
    IF 'LISTED_PRODUCT_SPACE' IN types1 THEN
      n := SIZEOF( sp1\listed_product_space.factors );
      IF 'UNIFORM_PRODUCT_SPACE' IN types2 THEN
        IF n &lt;&gt; sp2\uniform_product_space.exponent THEN
          RETURN( FALSE );
        END_IF;
        REPEAT i := 1 TO n BY 1;
          IF NOT compatible_spaces( sp2\uniform_product_space.base, sp1\listed_product_space.factors[i] ) THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
        RETURN( TRUE );
      END_IF;
      IF 'LISTED_PRODUCT_SPACE' IN types2 THEN
        IF n &lt;&gt; SIZEOF( sp2\listed_product_space.factors ) THEN
          RETURN( FALSE );
        END_IF;
        REPEAT i := 1 TO n BY 1;
          IF NOT compatible_spaces( sp1\listed_product_space.factors[i], sp2\listed_product_space.factors[i] ) THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
        RETURN( TRUE );
      END_IF;
      IF 'EXTENDED_TUPLE_SPACE' IN types2 THEN
        m := space_dimension( sp2\extended_tuple_space.base );
        IF n &lt; m THEN
          RETURN( FALSE );
        END_IF;
        IF n = m THEN
          RETURN( compatible_spaces( sp1, sp2\extended_tuple_space.base ) );
        END_IF;
        RETURN( compatible_spaces( sp1, assoc_product_space( sp2\extended_tuple_space.base, make_uniform_product_space( sp2\
            extended_tuple_space.extender, n - m ) ) ) );
      END_IF;
      IF ( schema_prefix + 'FUNCTION_SPACE' ) IN types2 THEN
        RETURN( FALSE );
      END_IF;
      RETURN( TRUE );
    END_IF;
    IF 'EXTENDED_TUPLE_SPACE' IN types1 THEN
      IF ( 'UNIFORM_PRODUCT_SPACE' IN types2 ) OR ( 'LISTED_PRODUCT_SPACE' IN types2 ) THEN
        RETURN( compatible_spaces( sp2, sp1 ) );
      END_IF;
      IF 'EXTENDED_TUPLE_SPACE' IN types2 THEN
        IF NOT compatible_spaces( sp1\extended_tuple_space.extender, sp2\extended_tuple_space.extender ) THEN
          RETURN( FALSE );
        END_IF;
        n := space_dimension( sp1\extended_tuple_space.base );
        m := space_dimension( sp2\extended_tuple_space.base );
        IF n &lt; m THEN
          RETURN( compatible_spaces( assoc_product_space( sp1\extended_tuple_space.base, make_uniform_product_space( sp1\
              extended_tuple_space.extender, m - n ) ), sp2\extended_tuple_space.base ) );
        END_IF;
        IF n = m THEN
          RETURN( compatible_spaces( sp1\extended_tuple_space.base, sp2\extended_tuple_space.base ) );
        END_IF;
        IF n &gt; m THEN
          RETURN( compatible_spaces( sp1\extended_tuple_space.base, assoc_product_space( sp2\extended_tuple_space.base, 
              make_uniform_product_space( sp2\extended_tuple_space.extender, n - m ) ) ) );
        END_IF;
      END_IF;
      IF 'FUNCTION_SPACE' IN types2 THEN
        RETURN( FALSE );
      END_IF;
      RETURN( TRUE );
    END_IF;
    IF 'FUNCTION_SPACE' IN types1 THEN
      IF 'FUNCTION_SPACE' IN types2 THEN
        s1 := sp1\function_space.domain_argument;
        s2 := sp2\function_space.domain_argument;
        CASE sp1\function_space.domain_constraint OF
          sc_equal   : 
            BEGIN
              CASE sp2\function_space.domain_constraint OF
                sc_equal   :                   lgcl := subspace_of( s1, s2 ) AND subspace_of( s2, s1 );
                sc_subspace :                   lgcl := subspace_of( s1, s2 );
                sc_member  :                   lgcl := member_of( s1, s2 );
                END_CASE;
            END;
          sc_subspace : 
            BEGIN
              CASE sp2\function_space.domain_constraint OF
                sc_equal   :                   lgcl := subspace_of( s2, s1 );
                sc_subspace :                   lgcl := compatible_spaces( s1, s2 );
                sc_member  :                   lgcl := UNKNOWN;
                END_CASE;
            END;
          sc_member  : 
            BEGIN
              CASE sp2\function_space.domain_constraint OF
                sc_equal   :                   lgcl := member_of( s2, s1 );
                sc_subspace :                   lgcl := UNKNOWN;
                sc_member  :                   lgcl := compatible_spaces( s1, s2 );
                END_CASE;
            END;
          END_CASE;
        IF lgcl = FALSE THEN
          RETURN( FALSE );
        END_IF;
        s1 := sp1\function_space.range_argument;
        s2 := sp2\function_space.range_argument;
        CASE sp1\function_space.range_constraint OF
          sc_equal   : 
            BEGIN
              CASE sp2\function_space.range_constraint OF
                sc_equal   :                   lgcl := subspace_of( s1, s2 ) AND subspace_of( s2, s1 );
                sc_subspace :                   lgcl := subspace_of( s1, s2 );
                sc_member  :                   lgcl := member_of( s1, s2 );
                END_CASE;
            END;
          sc_subspace : 
            BEGIN
              CASE sp2\function_space.range_constraint OF
                sc_equal   :                   lgcl := subspace_of( s2, s1 );
                sc_subspace :                   lgcl := compatible_spaces( s1, s2 );
                sc_member  :                   lgcl := UNKNOWN;
                END_CASE;
            END;
          sc_member  : 
            BEGIN
              CASE sp2\function_space.range_constraint OF
                sc_equal   :                   lgcl := member_of( s2, s1 );
                sc_subspace :                   lgcl := UNKNOWN;
                sc_member  :                   lgcl := compatible_spaces( s1, s2 );
                END_CASE;
            END;
          END_CASE;
        IF lgcl = FALSE THEN
          RETURN( FALSE );
        END_IF;
        RETURN( TRUE );
      END_IF;
      RETURN( TRUE );
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="composable_sequence">
         <parameter name="operands">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="maths_function"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>REPEAT i := 1 TO SIZEOF( operands ) - 1 BY 1;
      IF NOT compatible_spaces( operands[i].range, operands[i + 1].domain ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="compute_total_depth">
         <parameter name="swsrh">
            <typename name="solid_with_stepped_round_hole"/>
         </parameter>
         <typename name="positive_length_measure"/>
         <algorithm>LOCAL
      i  : positive_integer;
      n  : positive_integer := swsrh.segments;
      td : positive_length_measure := swsrh.segment_depths[1];
    END_LOCAL;
    IF n = 1 THEN
      RETURN( td );
    ELSE
      REPEAT i := 2 TO n BY 1;
        td := td + swsrh.segment_depths[i];
      END_REPEAT;
    END_IF;
    RETURN( td );</algorithm>
      </function>
      <function name="conditional_reverse">
         <parameter name="p">
            <builtintype type="BOOLEAN"/>
         </parameter>
         <parameter name="an_item">
            <typename name="reversible_topology"/>
         </parameter>
         <typename name="reversible_topology"/>
         <algorithm>IF p THEN
      RETURN( an_item );
    ELSE
      RETURN( topology_reversed( an_item ) );
    END_IF;</algorithm>
      </function>
      <function name="constraints_composite_curve_on_surface">
         <parameter name="c">
            <typename name="composite_curve_on_surface"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      n_segments : INTEGER := SIZEOF( c.segments );
    END_LOCAL;
    REPEAT k := 1 TO n_segments BY 1;
      IF ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( c\composite_curve.
          segments[k].parent_curve ) ) ) AND ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'SURFACE_CURVE'  IN TYPEOF( c\composite_curve.segments[k].parent_curve ) ) ) AND ( NOT ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_CURVE_ON_SURFACE'  IN TYPEOF( c\
          composite_curve.segments[k].parent_curve ) ) ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="constraints_geometry_shell_based_surface_model">
         <parameter name="m">
            <typename name="shell_based_surface_model"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      result : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT j := 1 TO SIZEOF( m.sbsm_boundary ) BY 1;
      IF ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OPEN_SHELL' IN TYPEOF( m.sbsm_boundary[j] ) ) ) 
          AND ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLOSED_SHELL' IN TYPEOF( m.sbsm_boundary
          [j] ) ) ) THEN
        result := FALSE;
        RETURN( result );
      END_IF;
    END_REPEAT;
    RETURN( result );</algorithm>
      </function>
      <function name="constraints_geometry_shell_based_wireframe_model">
         <parameter name="m">
            <typename name="shell_based_wireframe_model"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      result : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT j := 1 TO SIZEOF( m.sbwm_boundary ) BY 1;
      IF ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.WIRE_SHELL' IN TYPEOF( m.sbwm_boundary[j] ) ) ) 
          AND ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VERTEX_SHELL' IN TYPEOF( m.sbwm_boundary
          [j] ) ) ) THEN
        result := FALSE;
        RETURN( result );
      END_IF;
    END_REPEAT;
    RETURN( result );</algorithm>
      </function>
      <function name="constraints_param_b_spline">
         <parameter name="degree">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="up_knots">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="up_cp">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="knot_mult">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="knots">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="parameter_value"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      result : BOOLEAN := TRUE;
      k      : INTEGER;
      sum    : INTEGER;
    END_LOCAL;
    sum := knot_mult[1];
    REPEAT i := 2 TO up_knots BY 1;
      sum := sum + knot_mult[i];
    END_REPEAT;
    IF ( degree &lt; 1 ) OR ( up_knots &lt; 2 ) OR ( up_cp &lt; degree ) OR ( sum &lt;&gt; ( degree + up_cp + 2 ) ) THEN
      result := FALSE;
      RETURN( result );
    END_IF;
    k := knot_mult[1];
    IF ( k &lt; 1 ) OR ( k &gt; ( degree + 1 ) ) THEN
      result := FALSE;
      RETURN( result );
    END_IF;
    REPEAT i := 2 TO up_knots BY 1;
      IF ( knot_mult[i] &lt; 1 ) OR ( knots[i] &lt;= knots[i - 1] ) THEN
        result := FALSE;
        RETURN( result );
      END_IF;
      k := knot_mult[i];
      IF ( i &lt; up_knots ) AND ( k &gt; degree ) THEN
        result := FALSE;
        RETURN( result );
      END_IF;
      IF ( i = up_knots ) AND ( k &gt; ( degree + 1 ) ) THEN
        result := FALSE;
        RETURN( result );
      END_IF;
    END_REPEAT;
    RETURN( result );</algorithm>
      </function>
      <function name="constraints_rectangular_composite_surface">
         <parameter name="s">
            <typename name="rectangular_composite_surface"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>REPEAT i := 1 TO s.n_u BY 1;
      REPEAT j := 1 TO s.n_v BY 1;
        IF NOT ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_SURFACE' IN TYPEOF( s.segments[i]
            [j].parent_surface ) ) OR ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
            + 'RECTANGULAR_TRIMMED_SURFACE'  IN TYPEOF( s.segments[i][j].parent_surface ) ) ) THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    END_REPEAT;
    REPEAT i := 1 TO s.n_u - 1 BY 1;
      REPEAT j := 1 TO s.n_v BY 1;
        IF s.segments[i][j].u_transition = discontinuous THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    END_REPEAT;
    REPEAT i := 1 TO s.n_u BY 1;
      REPEAT j := 1 TO s.n_v - 1 BY 1;
        IF s.segments[i][j].v_transition = discontinuous THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="control_characters_free">
         <parameter name="s">
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      ch : STRING;
    END_LOCAL;
    REPEAT i := 1 TO LENGTH( s ) BY 1;
      ch := s[i];
      IF ( ch = '\x9' ) OR ( ch = '\xA' ) OR ( ch = '\xD' ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="convert_spatial_to_ypr_rotation">
         <parameter name="pair">
            <typename name="kinematic_pair"/>
         </parameter>
         <parameter name="rotation">
            <typename name="spatial_rotation"/>
         </parameter>
         <typename name="ypr_rotation"/>
         <algorithm>LOCAL
      axis       : direction;
      angle      : plane_angle_measure;
      conv_angle : plane_angle_measure;
      ya         : plane_angle_measure;
      pa         : plane_angle_measure;
      ra         : plane_angle_measure;
      ucf        : REAL;
      dx         : REAL;
      dy         : REAL;
      dz         : REAL;
      s_a        : REAL;
      c_a        : REAL;
      rotmat     : ARRAY [1 : 3] OF ARRAY [1 : 3] OF REAL;
      cm1        : REAL;
      s_y        : REAL;
      c_y        : REAL;
      s_r        : REAL;
      c_r        : REAL;
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.YPR_ROTATION' IN TYPEOF( rotation ) THEN
      RETURN( rotation );
    END_IF;
    axis := normalise( rotation\rotation_about_direction.direction_of_axis );
    angle := rotation\rotation_about_direction.rotation_angle;
    IF angle = 0 THEN
      RETURN( [0, 0, 0] );
    END_IF;
    dx := axis.direction_ratios[1];
    dy := axis.direction_ratios[2];
    dz := axis.direction_ratios[3];
    conv_angle := plane_angle_for_pair_in_radian( pair, angle );
    IF NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE' IN TYPEOF( conv_angle ) )
        THEN
      RETURN( ? );
    END_IF;
    ucf := angle / conv_angle;
    s_a := SIN( conv_angle );
    c_a := COS( conv_angle );
    IF ( dy = 0 ) AND ( ( dx * dz ) = 0 ) THEN
      REPEAT WHILE conv_angle &lt;= ( -PI );
        conv_angle := conv_angle + ( 2 * PI );
      END_REPEAT;
      REPEAT WHILE conv_angle &gt; PI;
        conv_angle := conv_angle - ( 2 * PI );
      END_REPEAT;
      ya := ucf * conv_angle;
      IF conv_angle &lt;&gt; PI THEN
        ra := -ya;
      ELSE
        ra := ya;
      END_IF;
      IF dx &lt;&gt; 0 THEN
        IF dx &gt; 0 THEN
          RETURN( [0, 0, ya] );
        ELSE
          RETURN( [0, 0, ra] );
        END_IF;
      ELSE
        IF dz &gt; 0 THEN
          RETURN( [ya, 0, 0] );
        ELSE
          RETURN( [ra, 0, 0] );
        END_IF;
      END_IF;
    END_IF;
    IF ( dy &lt;&gt; 0 ) AND ( dx = 0 ) AND ( dz = 0 ) THEN
      IF c_a &gt;= 0 THEN
        ya := 0;
        ra := 0;
      ELSE
        ya := ucf * PI;
        ra := ya;
      END_IF;
      pa := ucf * ATAN( s_a, ABS( c_a ) );
      IF dy &lt; 0 THEN
        pa := -pa;
      END_IF;
      RETURN( [ya, pa, ra] );
    END_IF;
    cm1 := 1 - c_a;
    rotmat := [[( dx * dx * cm1 ) + c_a, ( dx * dy * cm1 ) - ( dz * s_a ), ( dx * dz * cm1 ) + ( dy * s_a )], [( dx * dy * cm1 ) 
        + ( dz * s_a ), ( dy * dy * cm1 ) + c_a, ( dy * dz * cm1 ) - ( dx * s_a )], [( dx * dz * cm1 ) - ( dy * s_a ), ( dy * dz *
        cm1 ) + ( dx * s_a ), ( dz * dz * cm1 ) + c_a]];
    IF ABS( rotmat[1][3] ) = 1 THEN

      BEGIN
        IF rotmat[1][3] = 1 THEN
          pa := 0.5 * PI;
        ELSE
          pa := ( -0.5 ) * PI;
        END_IF;
        ra := 0;
        ya := ATAN( rotmat[2][1], rotmat[2][2] );
        IF rotmat[2][2] &lt; 0 THEN
          IF ya &lt;= 0 THEN
            ya := ya + PI;
          ELSE
            ya := ya - PI;
          END_IF;
        END_IF;
      END;
    ELSE

      BEGIN
        ya := ATAN( -rotmat[1][2], rotmat[1][1] );
        IF rotmat[1][1] &lt; 0 THEN
          IF ya &lt;= 0 THEN
            ya := ya + PI;
          ELSE
            ya := ya - PI;
          END_IF;
        END_IF;
        ra := ATAN( -rotmat[2][3], rotmat[3][3] );
        IF rotmat[3][3] &lt; 0 THEN
          IF ra &lt;= 0 THEN
            ra := ra + PI;
          ELSE
            ra := ra - PI;
          END_IF;
        END_IF;
        s_y := SIN( ya );
        c_y := COS( ya );
        s_r := SIN( ra );
        c_r := COS( ra );
        IF ( ABS( s_y ) &gt; ABS( c_y ) ) AND ( ABS( s_y ) &gt; ABS( s_r ) ) AND ( ABS( s_y ) &gt; ABS( c_r ) ) THEN
          cm1 := ( -rotmat[1][2] ) / s_y;
        ELSE
          IF ( ABS( c_y ) &gt; ABS( s_r ) ) AND ( ABS( c_y ) &gt; ABS( c_r ) ) THEN
            cm1 := rotmat[1][1] / c_y;
          ELSE
            IF ABS( s_r ) &gt; ABS( c_r ) THEN
              cm1 := ( -rotmat[2][3] ) / s_r;
            ELSE
              cm1 := rotmat[3][3] / c_r;
            END_IF;
          END_IF;
        END_IF;
        pa := ATAN( rotmat[1][3], cm1 );
      END;
    END_IF;
    ya := ya * ucf;
    pa := pa * ucf;
    ra := ra * ucf;
    RETURN( [ya, pa, ra] );</algorithm>
      </function>
      <function name="convert_to_literal">
         <parameter name="val">
            <typename name="maths_atom"/>
         </parameter>
         <typename name="generic_literal"/>
         <algorithm>LOCAL
      types : SET OF STRING := TYPEOF( val );
    END_LOCAL;
    IF 'INTEGER' IN types THEN
      RETURN( make_int_literal( val ) );
    END_IF;
    IF 'REAL' IN types THEN
      RETURN( make_real_literal( val ) );
    END_IF;
    IF 'BOOLEAN' IN types THEN
      RETURN( make_boolean_literal( val ) );
    END_IF;
    IF 'STRING' IN types THEN
      RETURN( make_string_literal( val ) );
    END_IF;
    IF 'LOGICAL' IN types THEN
      RETURN( make_logical_literal( val ) );
    END_IF;
    IF 'BINARY' IN types THEN
      RETURN( make_binary_literal( val ) );
    END_IF;
    IF ( schema_prefix + 'MATHS_ENUM_ATOM' ) IN types THEN
      RETURN( make_maths_enum_literal( val ) );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="convert_to_maths_function">
         <parameter name="func">
            <typename name="maths_function_select"/>
         </parameter>
         <typename name="maths_function"/>
         <algorithm>LOCAL
      efenum : elementary_function_enumerators;
      mthfun : maths_function;
    END_LOCAL;
    IF ( schema_prefix + 'MATHS_FUNCTION' ) IN TYPEOF( func ) THEN
      mthfun := func;
    ELSE
      efenum := func;
      mthfun := make_elementary_function( efenum );
    END_IF;
    RETURN( mthfun );</algorithm>
      </function>
      <function name="convert_to_maths_value">
         <parameter name="val">
            <builtintype type="GENERIC" typelabel="g"/>
         </parameter>
         <typename name="maths_value"/>
         <algorithm>LOCAL
      types : SET OF STRING := TYPEOF( val );
      ival  : maths_integer;
      rval  : maths_real;
      nval  : maths_number;
      tfval : maths_boolean;
      lval  : maths_logical;
      sval  : maths_string;
      bval  : maths_binary;
      tval  : maths_tuple := the_empty_maths_tuple;
      mval  : maths_value;
    END_LOCAL;
    IF ( schema_prefix + 'MATHS_VALUE' ) IN types THEN
      RETURN( val );
    END_IF;
    IF 'INTEGER' IN types THEN
      ival := val;
      RETURN( ival );
    END_IF;
    IF 'REAL' IN types THEN
      rval := val;
      RETURN( rval );
    END_IF;
    IF 'NUMBER' IN types THEN
      nval := val;
      RETURN( nval );
    END_IF;
    IF 'BOOLEAN' IN types THEN
      tfval := val;
      RETURN( tfval );
    END_IF;
    IF 'LOGICAL' IN types THEN
      lval := val;
      RETURN( lval );
    END_IF;
    IF 'STRING' IN types THEN
      sval := val;
      RETURN( sval );
    END_IF;
    IF 'BINARY' IN types THEN
      bval := val;
      RETURN( bval );
    END_IF;
    IF 'LIST' IN types THEN
      REPEAT i := 1 TO SIZEOF( val ) BY 1;
        mval := convert_to_maths_value( val[i] );
        IF NOT EXISTS( mval ) THEN
          RETURN( ? );
        END_IF;
        INSERT( tval, mval, i - 1 );
      END_REPEAT;
      RETURN( tval );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="convert_to_operand">
         <parameter name="val">
            <typename name="maths_value"/>
         </parameter>
         <typename name="generic_expression"/>
         <algorithm>LOCAL
      types : SET OF STRING := stripped_typeof( val );
    END_LOCAL;
    IF 'GENERIC_EXPRESSION' IN types THEN
      RETURN( val );
    END_IF;
    IF 'MATHS_ATOM' IN types THEN
      RETURN( convert_to_literal( val ) );
    END_IF;
    IF 'ATOM_BASED_VALUE' IN types THEN
      RETURN( make_atom_based_literal( val ) );
    END_IF;
    IF 'MATHS_TUPLE' IN types THEN
      RETURN( make_maths_tuple_literal( val ) );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="convert_to_operands">
         <parameter name="values">
            <aggregate type="AGGREGATE"/>
            <typename name="maths_value"/>
         </parameter>
         <aggregate lower="0" type="LIST" upper="?"/>
         <typename name="generic_expression"/>
         <algorithm>LOCAL
      operands : LIST OF generic_expression := [];
      loc      : INTEGER := 0;
    END_LOCAL;
    IF NOT EXISTS( values ) THEN
      RETURN( ? );
    END_IF;
    REPEAT i := LOINDEX( values ) TO HIINDEX( values ) BY 1;
      INSERT( operands, convert_to_operand( values[i] ), loc );
      loc := loc + 1;
    END_REPEAT;
    RETURN( operands );</algorithm>
      </function>
      <function name="convert_to_operands_prcmfn">
         <parameter name="srcdom">
            <typename name="maths_space_or_function"/>
         </parameter>
         <parameter name="prepfun">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="maths_function"/>
         </parameter>
         <parameter name="finfun">
            <typename name="maths_function_select"/>
         </parameter>
         <aggregate lower="2" type="LIST" upper="?"/>
         <typename name="generic_expression"/>
         <algorithm>LOCAL
      operands : LIST OF generic_expression := [];
    END_LOCAL;
    INSERT( operands, srcdom, 0 );
    REPEAT i := 1 TO SIZEOF( prepfun ) BY 1;
      INSERT( operands, prepfun[i], i );
    END_REPEAT;
    INSERT( operands, convert_to_maths_function( finfun ), SIZEOF( prepfun ) + 1 );
    RETURN( operands );</algorithm>
      </function>
      <function name="cross_product">
         <parameter name="arg1">
            <typename name="direction"/>
         </parameter>
         <parameter name="arg2">
            <typename name="direction"/>
         </parameter>
         <typename name="vector"/>
         <algorithm>LOCAL
      mag    : REAL;
      res    : direction;
      v1     : LIST [3 : 3] OF REAL;
      v2     : LIST [3 : 3] OF REAL;
      result : vector;
    END_LOCAL;
    IF ( NOT EXISTS( arg1 ) ) OR ( arg1.dim = 2 ) OR ( NOT EXISTS( arg2 ) ) OR ( arg2.dim = 2 ) THEN
      RETURN( ? );
    ELSE

      BEGIN
        v1 := normalise( arg1 ).direction_ratios;
        v2 := normalise( arg2 ).direction_ratios;
        res := dummy_gri || direction( [( v1[2] * v2[3] ) - ( v1[3] * v2[2] ), ( v1[3] * v2[1] ) - ( v1[1] * v2[3] ), ( v1[1] * 
            v2[2] ) - ( v1[2] * v2[1] )] );
        mag := 0;
        REPEAT i := 1 TO 3 BY 1;
          mag := mag + ( res.direction_ratios[i] * res.direction_ratios[i] );
        END_REPEAT;
        IF mag &gt; 0 THEN
          result := dummy_gri || vector( res, SQRT( mag ) );
        ELSE
          result := dummy_gri || vector( arg1, 0 );
        END_IF;
        RETURN( result );
      END;
    END_IF;</algorithm>
      </function>
      <function name="curve_weights_positive">
         <parameter name="b">
            <typename name="rational_b_spline_curve"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      result : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT i := 0 TO b.upper_index_on_control_points BY 1;
      IF b.weights[i] &lt;= 0 THEN
        result := FALSE;
        RETURN( result );
      END_IF;
    END_REPEAT;
    RETURN( result );</algorithm>
      </function>
      <function name="default_tolerance_table_cell_wr2">
         <parameter name="agg">
            <typename name="compound_item_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>BEGIN
      IF SIZEOF( agg ) &lt;= 5 THEN
        RETURN( TRUE );
      ELSE
        RETURN( FALSE );
      END_IF;
    END;</algorithm>
      </function>
      <function name="default_tolerance_table_cell_wr3">
         <parameter name="agg">
            <typename name="compound_item_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>BEGIN
      IF ( SIZEOF( QUERY ( i &lt;* agg | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) AND ( i\representation_item.name = 'significant number of digits' ) ) ) ) 
          = 1 ) OR ( ( SIZEOF( QUERY ( i &lt;* agg | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) AND ( i\representation_item.name = 'lower limit' ) ) ) ) = 1 ) AND ( 
          SIZEOF( QUERY ( i &lt;* agg | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) AND ( i\representation_item.name = 'upper limit' ) ) ) ) = 1 ) )
          THEN
        RETURN( TRUE );
      ELSE
        RETURN( FALSE );
      END_IF;
    END;</algorithm>
      </function>
      <function name="default_tolerance_table_cell_wr4">
         <parameter name="agg">
            <typename name="compound_item_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>BEGIN
      IF ( SIZEOF( QUERY ( i &lt;* agg | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) AND ( i\representation_item.name = 'plus minus tolerance value' ) ) ) ) 
          = 1 ) OR ( ( SIZEOF( QUERY ( i &lt;* agg | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) AND ( i\representation_item.name = 'lower tolerance value' ) ) ) ) = 
          1 ) AND ( SIZEOF( QUERY ( i &lt;* agg | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) AND ( i\representation_item.name = 'upper tolerance value' ) ) ) ) = 
          1 ) ) THEN
        RETURN( TRUE );
      ELSE
        RETURN( FALSE );
      END_IF;
    END;</algorithm>
      </function>
      <function name="default_tolerance_table_cell_wr5">
         <parameter name="agg">
            <typename name="compound_item_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>BEGIN
      IF ( SIZEOF( QUERY ( i &lt;* agg | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) ) ) &lt;= 1 ) AND ( SIZEOF( QUERY ( i &lt;* agg | ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) ) ) 
          = SIZEOF( QUERY ( i &lt;* agg | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) AND ( i\representation_item.name = 'cell description' ) ) ) ) )
          THEN
        RETURN( TRUE );
      ELSE
        RETURN( FALSE );
      END_IF;
    END;</algorithm>
      </function>
      <function name="definite_integral_check">
         <parameter name="domain">
            <typename name="tuple_space"/>
         </parameter>
         <parameter name="vrblint">
            <typename name="input_selector"/>
         </parameter>
         <parameter name="lowerinf">
            <builtintype type="BOOLEAN"/>
         </parameter>
         <parameter name="upperinf">
            <builtintype type="BOOLEAN"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      domn : tuple_space := domain;
      fspc : maths_space;
      dim  : nonnegative_integer;
      k    : positive_integer;
    END_LOCAL;
    IF ( space_dimension( domain ) = 1 ) AND ( ( schema_prefix + 'TUPLE_SPACE' ) IN TYPEOF( factor1( domain ) ) ) THEN
      domn := factor1( domain );
    END_IF;
    dim := space_dimension( domn );
    k := vrblint;
    IF k &gt; dim THEN
      RETURN( FALSE );
    END_IF;
    fspc := factor_space( domn, k );
    IF NOT ( ( schema_prefix + 'REAL_INTERVAL' ) IN TYPEOF( fspc ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF lowerinf AND min_exists( fspc ) THEN
      RETURN( FALSE );
    END_IF;
    IF upperinf AND max_exists( fspc ) THEN
      RETURN( FALSE );
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="definite_integral_expr_check">
         <parameter name="operands">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="generic_expression"/>
         </parameter>
         <parameter name="lowerinf">
            <builtintype type="BOOLEAN"/>
         </parameter>
         <parameter name="upperinf">
            <builtintype type="BOOLEAN"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      nops : INTEGER := 2;
      vspc : maths_space;
      dim  : nonnegative_integer;
      k    : positive_integer;
      bspc : maths_space;
    END_LOCAL;
    IF NOT lowerinf THEN
      nops := nops + 1;
    END_IF;
    IF NOT upperinf THEN
      nops := nops + 1;
    END_IF;
    IF SIZEOF( operands ) &lt;&gt; nops THEN
      RETURN( FALSE );
    END_IF;
    IF NOT ( 'GENERIC_VARIABLE' IN stripped_typeof( operands[2] ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF NOT has_values_space( operands[2] ) THEN
      RETURN( FALSE );
    END_IF;
    vspc := values_space_of( operands[2] );
    IF NOT ( 'REAL_INTERVAL' IN stripped_typeof( vspc ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF lowerinf THEN
      IF min_exists( vspc ) THEN
        RETURN( FALSE );
      END_IF;
      k := 3;
    ELSE
      IF NOT has_values_space( operands[3] ) THEN
        RETURN( FALSE );
      END_IF;
      bspc := values_space_of( operands[3] );
      IF NOT compatible_spaces( bspc, vspc ) THEN
        RETURN( FALSE );
      END_IF;
      k := 4;
    END_IF;
    IF upperinf THEN
      IF max_exists( vspc ) THEN
        RETURN( FALSE );
      END_IF;
    ELSE
      IF NOT has_values_space( operands[k] ) THEN
        RETURN( FALSE );
      END_IF;
      bspc := values_space_of( operands[k] );
      IF NOT compatible_spaces( bspc, vspc ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="dependently_instantiated">
         <parameter name="set_of_input_instances">
            <aggregate lower="0" type="SET" upper="?"/>
            <builtintype type="GENERIC" typelabel="igen"/>
         </parameter>
         <parameter name="set_of_input_types">
            <aggregate lower="0" type="SET" upper="?"/>
            <builtintype type="STRING"/>
         </parameter>
         <parameter name="previous_in_chain">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="GENERIC" typelabel="cgen"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      number_of_input_instances     : INTEGER;
      number_of_referring_instances : INTEGER;
      bag_of_referring_instances    : BAG OF GENERIC:igen := [];
      dependently_instantiated_flag : BOOLEAN;
      previous_in_chain_plus        : LIST OF GENERIC:cgen := [];
      result                        : BOOLEAN := TRUE;
      set_of_types                  : SET OF STRING := [];
    END_LOCAL;
    IF EXISTS( set_of_input_instances ) THEN
      number_of_input_instances := SIZEOF( set_of_input_instances );
      set_of_input_types := set_of_input_types + 'GENERIC';
      REPEAT i := 1 TO number_of_input_instances BY 1;
        bag_of_referring_instances := USEDIN( set_of_input_instances[i], '' );
        IF EXISTS( bag_of_referring_instances ) THEN
          number_of_referring_instances := SIZEOF( bag_of_referring_instances );
          dependently_instantiated_flag := FALSE;
          REPEAT j := 1 TO number_of_referring_instances BY 1;
            set_of_types := TYPEOF( bag_of_referring_instances[j] );
            IF set_of_types &lt;= set_of_input_types THEN
              IF NOT ( bag_of_referring_instances[j] IN previous_in_chain ) THEN
                previous_in_chain_plus := previous_in_chain + set_of_input_instances[i];
                IF dependently_instantiated( [bag_of_referring_instances[j]], set_of_input_types, previous_in_chain_plus ) THEN
                  dependently_instantiated_flag := TRUE;
                  ESCAPE;
                ELSE
                  SKIP;
                END_IF;
              END_IF;
            ELSE
              dependently_instantiated_flag := TRUE;
              ESCAPE;
            END_IF;
          END_REPEAT;
          IF NOT dependently_instantiated_flag THEN
            RETURN( FALSE );
          END_IF;
        ELSE
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    ELSE
      RETURN( FALSE );
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="derive_angle">
         <parameter name="placement_1">
            <typename name="axis2_placement_3d"/>
         </parameter>
         <parameter name="placement_2">
            <typename name="axis2_placement_3d"/>
         </parameter>
         <typename name="plane_angle_measure"/>
         <algorithm>LOCAL
      v1     : direction;
      v2     : direction;
      mag_v1 : REAL;
      mag_v2 : REAL;
      theta  : plane_angle_measure;
    END_LOCAL;
    v1 := placement_1.p[1];
    v2 := placement_2.p[1];
    mag_v1 := SQRT( ( v1.direction_ratios[1] * v1.direction_ratios[1] ) + ( v1.direction_ratios[2] * v1.direction_ratios[2] ) );
    mag_v2 := SQRT( ( v2.direction_ratios[1] * v2.direction_ratios[1] ) + ( v2.direction_ratios[2] * v2.direction_ratios[2] ) );
    IF ( mag_v1 = 0 ) OR ( mag_v2 = 0 ) THEN
      theta := 0;
      RETURN( theta );
    END_IF;
    theta := ACOS( ( ( v1.direction_ratios[1] * v2.direction_ratios[1] ) + ( v1.direction_ratios[2] * v2.direction_ratios[2] ) ) 
        / ( mag_v1 * mag_v2 ) );
    RETURN( theta );</algorithm>
      </function>
      <function name="derive_definite_integral_domain">
         <parameter name="igrl">
            <typename name="definite_integral_function"/>
         </parameter>
         <typename name="tuple_space"/>
         <algorithm>FUNCTION process_product_space(
                 spc : product_space;
                 idx, prefix : INTEGER;
                 vdomn : maths_space
             ) : product_space;

      LOCAL
        uspc    : uniform_product_space;
        expnt   : INTEGER;
        factors : LIST OF maths_space;
      END_LOCAL;
      IF ( schema_prefix + 'UNIFORM_PRODUCT_SPACE' ) IN TYPEOF( spc ) THEN
        uspc := spc;
        expnt := uspc.exponent + prefix;
        IF idx &lt;= uspc.exponent THEN
          expnt := expnt - 1;
        END_IF;
        IF expnt = 0 THEN
          RETURN( make_listed_product_space( [] ) );
        ELSE
          RETURN( make_uniform_product_space( uspc.base, expnt ) );
        END_IF;
      ELSE
        factors := spc\listed_product_space.factors;
        IF idx &lt;= SIZEOF( factors ) THEN
          REMOVE( factors, idx );
        END_IF;
        IF prefix &gt; 0 THEN
          INSERT( factors, vdomn, 0 );
          IF prefix &gt; 1 THEN
            INSERT( factors, vdomn, 0 );
          END_IF;
        END_IF;
        RETURN( make_listed_product_space( factors ) );
      END_IF;

    END_FUNCTION;

    LOCAL
      idomn  : tuple_space := igrl.integrand.domain;
      types  : SET OF STRING := TYPEOF( idomn );
      idx    : INTEGER := igrl.variable_of_integration;
      tupled : BOOLEAN := bool( ( space_dimension( idomn ) = 1 ) AND ( ( schema_prefix + 'TUPLE_SPACE' ) IN types ) );
      prefix : INTEGER := 0;
      espc   : extended_tuple_space;
      vdomn  : maths_space;
    END_LOCAL;
    IF tupled THEN
      idomn := factor1( idomn );
      types := TYPEOF( idomn );
    END_IF;
    IF igrl.lower_limit_neg_infinity THEN
      prefix := prefix + 1;
    END_IF;
    IF igrl.upper_limit_pos_infinity THEN
      prefix := prefix + 1;
    END_IF;
    vdomn := factor_space( idomn, idx );
    IF ( schema_prefix + 'EXTENDED_TUPLE_SPACE' ) IN types THEN
      espc := idomn;
      idomn := make_extended_tuple_space( process_product_space( espc.base, idx, prefix, vdomn ), espc.extender );
    ELSE
      idomn := process_product_space( idomn, idx, prefix, vdomn );
    END_IF;
    IF tupled THEN
      RETURN( one_tuples_of( idomn ) );
    ELSE
      RETURN( idomn );
    END_IF;</algorithm>
      </function>
      <function name="derive_dimensional_exponents">
         <parameter name="x">
            <typename name="unit"/>
         </parameter>
         <typename name="dimensional_exponents"/>
         <algorithm>LOCAL
      result : dimensional_exponents := dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 );
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DERIVED_UNIT' IN TYPEOF( x ) THEN
      REPEAT i := LOINDEX( x\derived_unit.elements ) TO HIINDEX( x\derived_unit.elements ) BY 1;
        result.length_exponent := result.length_exponent + ( x\derived_unit.elements[i]\derived_unit_element.exponent * x\
            derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.length_exponent );
        result.mass_exponent := result.mass_exponent + ( x\derived_unit.elements[i]\derived_unit_element.exponent * x\
            derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.mass_exponent );
        result.time_exponent := result.time_exponent + ( x\derived_unit.elements[i]\derived_unit_element.exponent * x\
            derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.time_exponent );
        result.electric_current_exponent := result.electric_current_exponent + ( x\derived_unit.elements[i]\derived_unit_element.
            exponent * x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.electric_current_exponent );
        result.thermodynamic_temperature_exponent := result.thermodynamic_temperature_exponent + ( x\derived_unit.elements[i]\
            derived_unit_element.exponent * x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.
            thermodynamic_temperature_exponent );
        result.amount_of_substance_exponent := result.amount_of_substance_exponent + ( x\derived_unit.elements[i]\
            derived_unit_element.exponent * x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.
            amount_of_substance_exponent );
        result.luminous_intensity_exponent := result.luminous_intensity_exponent + ( x\derived_unit.elements[i]\
            derived_unit_element.exponent * x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.
            luminous_intensity_exponent );
      END_REPEAT;
    ELSE
      result := x\named_unit.dimensions;
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="derive_elementary_function_domain">
         <parameter name="ef_val">
            <typename name="elementary_function_enumerators"/>
         </parameter>
         <typename name="tuple_space"/>
         <algorithm>IF NOT EXISTS( ef_val ) THEN
      RETURN( ? );
    END_IF;
    CASE ef_val OF
      ef_and            :         RETURN( make_extended_tuple_space( the_zero_tuple_space, the_logicals ) );
      ef_or             :         RETURN( make_extended_tuple_space( the_zero_tuple_space, the_logicals ) );
      ef_not            :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_xor            :         RETURN( make_uniform_product_space( the_logicals, 2 ) );
      ef_negate_i       :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_add_i          :         RETURN( the_integer_tuples );
      ef_subtract_i     :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_multiply_i     :         RETURN( the_integer_tuples );
      ef_divide_i       :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_mod_i          :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_exponentiate_i :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_eq_i           :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_ne_i           :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_gt_i           :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_lt_i           :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_ge_i           :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_le_i           :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_abs_i          :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_if_i           :         RETURN( make_listed_product_space( [the_logicals, the_integers, the_integers] ) );
      ef_negate_r       :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_reciprocal_r   :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_add_r          :         RETURN( the_real_tuples );
      ef_subtract_r     :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_multiply_r     :         RETURN( the_real_tuples );
      ef_divide_r       :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_mod_r          :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_exponentiate_r :         RETURN( make_listed_product_space( [the_nonnegative_reals, the_reals] ) );
      ef_exponentiate_ri :         RETURN( make_listed_product_space( [the_reals, the_integers] ) );
      ef_eq_r           :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_ne_r           :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_gt_r           :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_lt_r           :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_ge_r           :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_le_r           :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_abs_r          :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_acos_r         :         RETURN( make_uniform_product_space( the_neg1_one_interval, 1 ) );
      ef_asin_r         :         RETURN( make_uniform_product_space( the_neg1_one_interval, 1 ) );
      ef_atan2_r        :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_cos_r          :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_exp_r          :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_ln_r           :         RETURN( make_uniform_product_space( the_nonnegative_reals, 1 ) );
      ef_log2_r         :         RETURN( make_uniform_product_space( the_nonnegative_reals, 1 ) );
      ef_log10_r        :         RETURN( make_uniform_product_space( the_nonnegative_reals, 1 ) );
      ef_sin_r          :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_sqrt_r         :         RETURN( make_uniform_product_space( the_nonnegative_reals, 1 ) );
      ef_tan_r          :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_if_r           :         RETURN( make_listed_product_space( [the_logicals, the_reals, the_reals] ) );
      ef_negate_c       :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_reciprocal_c   :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_add_c          :         RETURN( the_complex_tuples );
      ef_subtract_c     :         RETURN( make_uniform_product_space( the_complex_numbers, 2 ) );
      ef_multiply_c     :         RETURN( the_complex_tuples );
      ef_divide_c       :         RETURN( make_uniform_product_space( the_complex_numbers, 2 ) );
      ef_exponentiate_c :         RETURN( make_uniform_product_space( the_complex_numbers, 2 ) );
      ef_exponentiate_ci :         RETURN( make_listed_product_space( [the_complex_numbers, the_integers] ) );
      ef_eq_c           :         RETURN( make_uniform_product_space( the_complex_numbers, 2 ) );
      ef_ne_c           :         RETURN( make_uniform_product_space( the_complex_numbers, 2 ) );
      ef_conjugate_c    :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_abs_c          :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_arg_c          :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_cos_c          :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_exp_c          :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_ln_c           :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_sin_c          :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_sqrt_c         :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_tan_c          :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_if_c           :         RETURN( make_listed_product_space( [the_logicals, the_complex_numbers, the_complex_numbers] ) );
      ef_subscript_s    :         RETURN( make_listed_product_space( [the_strings, the_integers] ) );
      ef_eq_s           :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_ne_s           :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_gt_s           :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_lt_s           :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_ge_s           :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_le_s           :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_subsequence_s  :         RETURN( make_listed_product_space( [the_strings, the_integers, the_integers] ) );
      ef_concat_s       :         RETURN( make_extended_tuple_space( the_zero_tuple_space, the_strings ) );
      ef_size_s         :         RETURN( make_uniform_product_space( the_strings, 1 ) );
      ef_format         :         RETURN( make_listed_product_space( [the_numbers, the_strings] ) );
      ef_value          :         RETURN( make_uniform_product_space( the_strings, 1 ) );
      ef_like           :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_if_s           :         RETURN( make_listed_product_space( [the_logicals, the_strings, the_strings] ) );
      ef_subscript_b    :         RETURN( make_listed_product_space( [the_binarys, the_integers] ) );
      ef_eq_b           :         RETURN( make_uniform_product_space( the_binarys, 2 ) );
      ef_ne_b           :         RETURN( make_uniform_product_space( the_binarys, 2 ) );
      ef_gt_b           :         RETURN( make_uniform_product_space( the_binarys, 2 ) );
      ef_lt_b           :         RETURN( make_uniform_product_space( the_binarys, 2 ) );
      ef_ge_b           :         RETURN( make_uniform_product_space( the_binarys, 2 ) );
      ef_le_b           :         RETURN( make_uniform_product_space( the_binarys, 2 ) );
      ef_subsequence_b  :         RETURN( make_listed_product_space( [the_binarys, the_integers, the_integers] ) );
      ef_concat_b       :         RETURN( make_extended_tuple_space( the_zero_tuple_space, the_binarys ) );
      ef_size_b         :         RETURN( make_uniform_product_space( the_binarys, 1 ) );
      ef_if_b           :         RETURN( make_listed_product_space( [the_logicals, the_binarys, the_binarys] ) );
      ef_subscript_t    :         RETURN( make_listed_product_space( [the_tuples, the_integers] ) );
      ef_eq_t           :         RETURN( make_uniform_product_space( the_tuples, 2 ) );
      ef_ne_t           :         RETURN( make_uniform_product_space( the_tuples, 2 ) );
      ef_concat_t       :         RETURN( make_extended_tuple_space( the_zero_tuple_space, the_tuples ) );
      ef_size_t         :         RETURN( make_uniform_product_space( the_tuples, 1 ) );
      ef_entuple        :         RETURN( the_tuples );
      ef_detuple        :         RETURN( make_uniform_product_space( the_generics, 1 ) );
      ef_insert         :         RETURN( make_listed_product_space( [the_tuples, the_generics, the_integers] ) );
      ef_remove         :         RETURN( make_listed_product_space( [the_tuples, the_integers] ) );
      ef_if_t           :         RETURN( make_listed_product_space( [the_logicals, the_tuples, the_tuples] ) );
      ef_sum_it         :         RETURN( make_uniform_product_space( the_integer_tuples, 1 ) );
      ef_product_it     :         RETURN( make_uniform_product_space( the_integer_tuples, 1 ) );
      ef_add_it         :         RETURN( make_extended_tuple_space( the_integer_tuples, the_integer_tuples ) );
      ef_subtract_it    :         RETURN( make_uniform_product_space( the_integer_tuples, 2 ) );
      ef_scalar_mult_it :         RETURN( make_listed_product_space( [the_integers, the_integer_tuples] ) );
      ef_dot_prod_it    :         RETURN( make_uniform_product_space( the_integer_tuples, 2 ) );
      ef_sum_rt         :         RETURN( make_uniform_product_space( the_real_tuples, 1 ) );
      ef_product_rt     :         RETURN( make_uniform_product_space( the_real_tuples, 1 ) );
      ef_add_rt         :         RETURN( make_extended_tuple_space( the_real_tuples, the_real_tuples ) );
      ef_subtract_rt    :         RETURN( make_uniform_product_space( the_real_tuples, 2 ) );
      ef_scalar_mult_rt :         RETURN( make_listed_product_space( [the_reals, the_real_tuples] ) );
      ef_dot_prod_rt    :         RETURN( make_uniform_product_space( the_real_tuples, 2 ) );
      ef_norm_rt        :         RETURN( make_uniform_product_space( the_real_tuples, 1 ) );
      ef_sum_ct         :         RETURN( make_uniform_product_space( the_complex_tuples, 1 ) );
      ef_product_ct     :         RETURN( make_uniform_product_space( the_complex_tuples, 1 ) );
      ef_add_ct         :         RETURN( make_extended_tuple_space( the_complex_tuples, the_complex_tuples ) );
      ef_subtract_ct    :         RETURN( make_uniform_product_space( the_complex_tuples, 2 ) );
      ef_scalar_mult_ct :         RETURN( make_listed_product_space( [the_complex_numbers, the_complex_tuples] ) );
      ef_dot_prod_ct    :         RETURN( make_uniform_product_space( the_complex_tuples, 2 ) );
      ef_norm_ct        :         RETURN( make_uniform_product_space( the_complex_tuples, 1 ) );
      ef_if             :         RETURN( make_listed_product_space( [the_logicals, the_generics, the_generics] ) );
      ef_ensemble       :         RETURN( the_tuples );
      ef_member_of      :         RETURN( make_listed_product_space( [the_generics, the_maths_spaces] ) );
      OTHERWISE         :         RETURN( ? );
      END_CASE;</algorithm>
      </function>
      <function name="derive_elementary_function_range">
         <parameter name="ef_val">
            <typename name="elementary_function_enumerators"/>
         </parameter>
         <typename name="tuple_space"/>
         <algorithm>IF NOT EXISTS( ef_val ) THEN
      RETURN( ? );
    END_IF;
    CASE ef_val OF
      ef_and            :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_or             :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_not            :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_xor            :         RETURN( make_uniform_product_space( the_logicals, 2 ) );
      ef_negate_i       :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_add_i          :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_subtract_i     :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_multiply_i     :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_divide_i       :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_mod_i          :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_exponentiate_i :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_eq_i           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_ne_i           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_gt_i           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_lt_i           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_ge_i           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_le_i           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_abs_i          :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_if_i           :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_negate_r       :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_reciprocal_r   :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_add_r          :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_subtract_r     :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_multiply_r     :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_divide_r       :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_mod_r          :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_exponentiate_r :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_exponentiate_ri :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_eq_r           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_ne_r           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_gt_r           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_lt_r           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_ge_r           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_le_r           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_abs_r          :         RETURN( make_uniform_product_space( the_nonnegative_reals, 1 ) );
      ef_acos_r         :         RETURN( make_uniform_product_space( the_zero_pi_interval, 1 ) );
      ef_asin_r         :         RETURN( make_uniform_product_space( the_neghalfpi_halfpi_interval, 1 ) );
      ef_atan2_r        :         RETURN( make_uniform_product_space( the_negpi_pi_interval, 1 ) );
      ef_cos_r          :         RETURN( make_uniform_product_space( the_neg1_one_interval, 1 ) );
      ef_exp_r          :         RETURN( make_uniform_product_space( the_nonnegative_reals, 1 ) );
      ef_ln_r           :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_log2_r         :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_log10_r        :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_sin_r          :         RETURN( make_uniform_product_space( the_neg1_one_interval, 1 ) );
      ef_sqrt_r         :         RETURN( make_uniform_product_space( the_nonnegative_reals, 1 ) );
      ef_tan_r          :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_if_r           :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_negate_c       :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_reciprocal_c   :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_add_c          :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_subtract_c     :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_multiply_c     :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_divide_c       :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_exponentiate_c :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_exponentiate_ci :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_eq_c           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_ne_c           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_conjugate_c    :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_abs_c          :         RETURN( make_uniform_product_space( the_nonnegative_reals, 1 ) );
      ef_arg_c          :         RETURN( make_uniform_product_space( the_negpi_pi_interval, 1 ) );
      ef_cos_c          :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_exp_c          :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_ln_c           :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_sin_c          :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_sqrt_c         :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_tan_c          :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_if_c           :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_subscript_s    :         RETURN( make_uniform_product_space( the_strings, 1 ) );
      ef_eq_s           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_ne_s           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_gt_s           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_lt_s           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_ge_s           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_le_s           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_subsequence_s  :         RETURN( make_uniform_product_space( the_strings, 1 ) );
      ef_concat_s       :         RETURN( make_uniform_product_space( the_strings, 1 ) );
      ef_size_s         :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_format         :         RETURN( make_uniform_product_space( the_strings, 1 ) );
      ef_value          :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_like           :         RETURN( make_uniform_product_space( the_booleans, 1 ) );
      ef_if_s           :         RETURN( make_uniform_product_space( the_strings, 1 ) );
      ef_subscript_b    :         RETURN( make_uniform_product_space( the_binarys, 1 ) );
      ef_eq_b           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_ne_b           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_gt_b           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_lt_b           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_ge_b           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_le_b           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_subsequence_b  :         RETURN( make_uniform_product_space( the_binarys, 1 ) );
      ef_concat_b       :         RETURN( make_uniform_product_space( the_binarys, 1 ) );
      ef_size_b         :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_if_b           :         RETURN( make_uniform_product_space( the_binarys, 1 ) );
      ef_subscript_t    :         RETURN( make_uniform_product_space( the_generics, 1 ) );
      ef_eq_t           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_ne_t           :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_concat_t       :         RETURN( make_uniform_product_space( the_tuples, 1 ) );
      ef_size_t         :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_entuple        :         RETURN( make_uniform_product_space( the_tuples, 1 ) );
      ef_detuple        :         RETURN( the_tuples );
      ef_insert         :         RETURN( make_uniform_product_space( the_tuples, 1 ) );
      ef_remove         :         RETURN( make_uniform_product_space( the_tuples, 1 ) );
      ef_if_t           :         RETURN( make_uniform_product_space( the_tuples, 1 ) );
      ef_sum_it         :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_product_it     :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_add_it         :         RETURN( make_uniform_product_space( the_integer_tuples, 1 ) );
      ef_subtract_it    :         RETURN( make_uniform_product_space( the_integer_tuples, 1 ) );
      ef_scalar_mult_it :         RETURN( make_uniform_product_space( the_integer_tuples, 1 ) );
      ef_dot_prod_it    :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_sum_rt         :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_product_rt     :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_add_rt         :         RETURN( make_uniform_product_space( the_real_tuples, 1 ) );
      ef_subtract_rt    :         RETURN( make_uniform_product_space( the_real_tuples, 1 ) );
      ef_scalar_mult_rt :         RETURN( make_uniform_product_space( the_real_tuples, 1 ) );
      ef_dot_prod_rt    :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_norm_rt        :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_sum_ct         :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_product_ct     :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_add_ct         :         RETURN( make_uniform_product_space( the_complex_tuples, 1 ) );
      ef_subtract_ct    :         RETURN( make_uniform_product_space( the_complex_tuples, 1 ) );
      ef_scalar_mult_ct :         RETURN( make_uniform_product_space( the_complex_tuples, 1 ) );
      ef_dot_prod_ct    :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_norm_ct        :         RETURN( make_uniform_product_space( the_nonnegative_reals, 1 ) );
      ef_if             :         RETURN( make_uniform_product_space( the_generics, 1 ) );
      ef_ensemble       :         RETURN( make_uniform_product_space( the_maths_spaces, 1 ) );
      ef_member_of      :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      OTHERWISE         :         RETURN( ? );
      END_CASE;</algorithm>
      </function>
      <function name="derive_finite_function_domain">
         <parameter name="pairs">
            <aggregate lower="1" type="SET" upper="?"/>
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="maths_value"/>
         </parameter>
         <typename name="tuple_space"/>
         <algorithm>LOCAL
      result : SET OF maths_value := [];
    END_LOCAL;
    result := result + list_selected_components( pairs, 1 );
    RETURN( one_tuples_of( make_finite_space( result ) ) );</algorithm>
      </function>
      <function name="derive_finite_function_range">
         <parameter name="pairs">
            <aggregate lower="1" type="SET" upper="?"/>
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="maths_value"/>
         </parameter>
         <typename name="tuple_space"/>
         <algorithm>LOCAL
      result : SET OF maths_value := [];
    END_LOCAL;
    result := result + list_selected_components( pairs, 2 );
    RETURN( one_tuples_of( make_finite_space( result ) ) );</algorithm>
      </function>
      <function name="derive_function_domain">
         <parameter name="func">
            <typename name="maths_function"/>
         </parameter>
         <typename name="tuple_space"/>
         <algorithm>LOCAL
      typenames  : SET OF STRING := stripped_typeof( func );
      tspace     : tuple_space := make_listed_product_space( [] );
      shape      : LIST OF positive_integer;
      sidxs      : LIST OF INTEGER := [0];
      itvl       : finite_integer_interval;
      factors    : LIST OF finite_integer_interval := [];
      is_uniform : BOOLEAN := TRUE;
    END_LOCAL;
    IF 'FINITE_FUNCTION' IN typenames THEN
      RETURN( derive_finite_function_domain( func\finite_function.pairs ) );
    END_IF;
    IF 'CONSTANT_FUNCTION' IN typenames THEN
      RETURN( domain_from( func\constant_function.source_of_domain ) );
    END_IF;
    IF 'SELECTOR_FUNCTION' IN typenames THEN
      RETURN( domain_from( func\selector_function.source_of_domain ) );
    END_IF;
    IF 'ELEMENTARY_FUNCTION' IN typenames THEN
      RETURN( derive_elementary_function_domain( func\elementary_function.func_id ) );
    END_IF;
    IF 'RESTRICTION_FUNCTION' IN typenames THEN
      RETURN( one_tuples_of( func\restriction_function.operand ) );
    END_IF;
    IF 'REPACKAGING_FUNCTION' IN typenames THEN
      IF func\repackaging_function.input_repack = ro_nochange THEN
        RETURN( func\repackaging_function.operand.domain );
      END_IF;
      IF func\repackaging_function.input_repack = ro_wrap_as_tuple THEN
        RETURN( factor1( func\repackaging_function.operand.domain ) );
      END_IF;
      IF func\repackaging_function.input_repack = ro_unwrap_tuple THEN
        RETURN( one_tuples_of( func\repackaging_function.operand.domain ) );
      END_IF;
      RETURN( ? );
    END_IF;
    IF 'REINDEXED_ARRAY_FUNCTION' IN typenames THEN
      shape := shape_of_array( func\unary_generic_expression.operand );
      sidxs := func\reindexed_array_function.starting_indices;
      REPEAT i := 1 TO SIZEOF( shape ) BY 1;
        itvl := make_finite_integer_interval( sidxs[i], ( sidxs[i] + shape[i] ) - 1 );
        INSERT( factors, itvl, i - 1 );
        IF shape[i] &lt;&gt; shape[1] THEN
          is_uniform := FALSE;
        END_IF;
      END_REPEAT;
      IF is_uniform THEN
        RETURN( make_uniform_product_space( factors[1], SIZEOF( shape ) ) );
      END_IF;
      RETURN( make_listed_product_space( factors ) );
    END_IF;
    IF 'SERIES_COMPOSED_FUNCTION' IN typenames THEN
      RETURN( func\series_composed_function.operands[1].domain );
    END_IF;
    IF 'PARALLEL_COMPOSED_FUNCTION' IN typenames THEN
      RETURN( domain_from( func\parallel_composed_function.source_of_domain ) );
    END_IF;
    IF 'EXPLICIT_TABLE_FUNCTION' IN typenames THEN
      shape := func\explicit_table_function.shape;
      sidxs[1] := func\explicit_table_function.index_base;
      REPEAT i := 1 TO SIZEOF( shape ) BY 1;
        itvl := make_finite_integer_interval( sidxs[1], ( sidxs[1] + shape[i] ) - 1 );
        INSERT( factors, itvl, i - 1 );
        IF shape[i] &lt;&gt; shape[1] THEN
          is_uniform := FALSE;
        END_IF;
      END_REPEAT;
      IF is_uniform THEN
        RETURN( make_uniform_product_space( factors[1], SIZEOF( shape ) ) );
      END_IF;
      RETURN( make_listed_product_space( factors ) );
    END_IF;
    IF 'HOMOGENEOUS_LINEAR_FUNCTION' IN typenames THEN
      RETURN( one_tuples_of( make_uniform_product_space( factor1( func\homogeneous_linear_function.mat.range ), func\
          homogeneous_linear_function.mat\explicit_table_function.shape[func\homogeneous_linear_function.sum_index] ) ) );
    END_IF;
    IF 'GENERAL_LINEAR_FUNCTION' IN typenames THEN
      RETURN( one_tuples_of( make_uniform_product_space( factor1( func\general_linear_function.mat.range ), func\
          general_linear_function.mat\explicit_table_function.shape[func\general_linear_function.sum_index] - 1 ) ) );
    END_IF;
    IF 'B_SPLINE_BASIS' IN typenames THEN
      RETURN( one_tuples_of( make_finite_real_interval( func\b_spline_basis.repeated_knots[func\b_spline_basis.order], closed, 
          func\b_spline_basis.repeated_knots[func\b_spline_basis.num_basis + 1], closed ) ) );
    END_IF;
    IF 'B_SPLINE_FUNCTION' IN typenames THEN
      REPEAT i := 1 TO SIZEOF( func\b_spline_function.basis ) BY 1;
        tspace := assoc_product_space( tspace, func\b_spline_function.basis[i].domain );
      END_REPEAT;
      RETURN( one_tuples_of( tspace ) );
    END_IF;
    IF 'RATIONALIZE_FUNCTION' IN typenames THEN
      RETURN( func\rationalize_function.fun.domain );
    END_IF;
    IF 'PARTIAL_DERIVATIVE_FUNCTION' IN typenames THEN
      RETURN( func\partial_derivative_function.derivand.domain );
    END_IF;
    IF 'DEFINITE_INTEGRAL_FUNCTION' IN typenames THEN
      RETURN( derive_definite_integral_domain( func ) );
    END_IF;
    IF 'ABSTRACTED_EXPRESSION_FUNCTION' IN typenames THEN
      REPEAT i := 1 TO SIZEOF( func\abstracted_expression_function.variables ) BY 1;
        tspace := assoc_product_space( tspace, one_tuples_of( values_space_of( func\abstracted_expression_function.variables[i] ) ) );
      END_REPEAT;
      RETURN( tspace );
    END_IF;
    IF 'EXPRESSION_DENOTED_FUNCTION' IN typenames THEN
      RETURN( values_space_of( func\expression_denoted_function.expr )\function_space.domain_argument );
    END_IF;
    IF 'IMPORTED_POINT_FUNCTION' IN typenames THEN
      RETURN( one_tuples_of( make_listed_product_space( [] ) ) );
    END_IF;
    IF 'IMPORTED_CURVE_FUNCTION' IN typenames THEN
      RETURN( func\imported_curve_function.parametric_domain );
    END_IF;
    IF 'IMPORTED_SURFACE_FUNCTION' IN typenames THEN
      RETURN( func\imported_surface_function.parametric_domain );
    END_IF;
    IF 'IMPORTED_VOLUME_FUNCTION' IN typenames THEN
      RETURN( func\imported_volume_function.parametric_domain );
    END_IF;
    IF 'APPLICATION_DEFINED_FUNCTION' IN typenames THEN
      RETURN( func\application_defined_function.explicit_domain );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="derive_function_range">
         <parameter name="func">
            <typename name="maths_function"/>
         </parameter>
         <typename name="tuple_space"/>
         <algorithm>LOCAL
      typenames : SET OF STRING := stripped_typeof( func );
      tspace    : tuple_space := make_listed_product_space( [] );
      m         : nonnegative_integer := 0;
      n         : nonnegative_integer := 0;
      temp      : INTEGER := 0;
    END_LOCAL;
    IF 'FINITE_FUNCTION' IN typenames THEN
      RETURN( derive_finite_function_range( func\finite_function.pairs ) );
    END_IF;
    IF 'CONSTANT_FUNCTION' IN typenames THEN
      RETURN( one_tuples_of( make_finite_space( [func\constant_function.sole_output] ) ) );
    END_IF;
    IF 'SELECTOR_FUNCTION' IN typenames THEN
      tspace := func.domain;
      IF ( space_dimension( tspace ) = 1 ) AND ( ( schema_prefix + 'TUPLE_SPACE' ) IN TYPEOF( tspace ) ) THEN
        tspace := factor1( tspace );
      END_IF;
      RETURN( one_tuples_of( factor_space( tspace, func\selector_function.selector ) ) );
    END_IF;
    IF 'ELEMENTARY_FUNCTION' IN typenames THEN
      RETURN( derive_elementary_function_range( func\elementary_function.func_id ) );
    END_IF;
    IF 'RESTRICTION_FUNCTION' IN typenames THEN
      RETURN( one_tuples_of( func\restriction_function.operand ) );
    END_IF;
    IF 'REPACKAGING_FUNCTION' IN typenames THEN
      tspace := func\repackaging_function.operand.range;
      IF func\repackaging_function.output_repack = ro_wrap_as_tuple THEN
        tspace := one_tuples_of( tspace );
      END_IF;
      IF func\repackaging_function.output_repack = ro_unwrap_tuple THEN
        tspace := factor1( tspace );
      END_IF;
      IF func\repackaging_function.selected_output &gt; 0 THEN
        tspace := one_tuples_of( factor_space( tspace, func\repackaging_function.selected_output ) );
      END_IF;
      RETURN( tspace );
    END_IF;
    IF 'REINDEXED_ARRAY_FUNCTION' IN typenames THEN
      RETURN( func\unary_generic_expression.operand\maths_function.range );
    END_IF;
    IF 'SERIES_COMPOSED_FUNCTION' IN typenames THEN
      RETURN( func\series_composed_function.operands[SIZEOF( func\series_composed_function.operands )].range );
    END_IF;
    IF 'PARALLEL_COMPOSED_FUNCTION' IN typenames THEN
      RETURN( func\parallel_composed_function.final_function.range );
    END_IF;
    IF 'EXPLICIT_TABLE_FUNCTION' IN typenames THEN
      IF 'LISTED_REAL_DATA' IN typenames THEN
        RETURN( one_tuples_of( the_reals ) );
      END_IF;
      IF 'LISTED_INTEGER_DATA' IN typenames THEN
        RETURN( one_tuples_of( the_integers ) );
      END_IF;
      IF 'LISTED_LOGICAL_DATA' IN typenames THEN
        RETURN( one_tuples_of( the_logicals ) );
      END_IF;
      IF 'LISTED_STRING_DATA' IN typenames THEN
        RETURN( one_tuples_of( the_strings ) );
      END_IF;
      IF 'LISTED_COMPLEX_NUMBER_DATA' IN typenames THEN
        RETURN( one_tuples_of( the_complex_numbers ) );
      END_IF;
      IF 'LISTED_DATA' IN typenames THEN
        RETURN( one_tuples_of( func\listed_data.value_range ) );
      END_IF;
      IF 'EXTERNALLY_LISTED_DATA' IN typenames THEN
        RETURN( one_tuples_of( func\externally_listed_data.value_range ) );
      END_IF;
      IF 'LINEARIZED_TABLE_FUNCTION' IN typenames THEN
        RETURN( func\linearized_table_function.source.range );
      END_IF;
      IF 'BASIC_SPARSE_MATRIX' IN typenames THEN
        RETURN( func\basic_sparse_matrix.val.range );
      END_IF;
      RETURN( ? );
    END_IF;
    IF 'HOMOGENEOUS_LINEAR_FUNCTION' IN typenames THEN
      RETURN( one_tuples_of( make_uniform_product_space( factor1( func\homogeneous_linear_function.mat.range ), func\
          homogeneous_linear_function.mat\explicit_table_function.shape[3 - func\homogeneous_linear_function.sum_index] ) ) );
    END_IF;
    IF 'GENERAL_LINEAR_FUNCTION' IN typenames THEN
      RETURN( one_tuples_of( make_uniform_product_space( factor1( func\general_linear_function.mat.range ), func\
          general_linear_function.mat\explicit_table_function.shape[3 - func\general_linear_function.sum_index] ) ) );
    END_IF;
    IF 'B_SPLINE_BASIS' IN typenames THEN
      RETURN( one_tuples_of( make_uniform_product_space( the_reals, func\b_spline_basis.num_basis ) ) );
    END_IF;
    IF 'B_SPLINE_FUNCTION' IN typenames THEN
      tspace := factor1( func\b_spline_function.coef.domain );
      m := SIZEOF( func\b_spline_function.basis );
      n := space_dimension( tspace );
      IF m = n THEN
        RETURN( one_tuples_of( the_reals ) );
      END_IF;
      IF m = ( n - 1 ) THEN
        RETURN( one_tuples_of( make_uniform_product_space( the_reals, factor_space( tspace, n )\finite_integer_interval.size ) ) );
      END_IF;
      tspace := extract_factors( tspace, m + 1, n );
      RETURN( one_tuples_of( make_function_space( sc_equal, tspace, sc_subspace, number_superspace_of( func\b_spline_function.
          coef.range ) ) ) );
    END_IF;
    IF 'RATIONALIZE_FUNCTION' IN typenames THEN
      tspace := factor1( func\rationalize_function.fun.range );
      n := space_dimension( tspace );
      RETURN( one_tuples_of( make_uniform_product_space( number_superspace_of( factor1( tspace ) ), n - 1 ) ) );
    END_IF;
    IF 'PARTIAL_DERIVATIVE_FUNCTION' IN typenames THEN
      RETURN( drop_numeric_constraints( func\partial_derivative_function.derivand.range ) );
    END_IF;
    IF 'DEFINITE_INTEGRAL_FUNCTION' IN typenames THEN
      RETURN( drop_numeric_constraints( func\definite_integral_function.integrand.range ) );
    END_IF;
    IF 'ABSTRACTED_EXPRESSION_FUNCTION' IN typenames THEN
      RETURN( one_tuples_of( values_space_of( func\abstracted_expression_function.expr ) ) );
    END_IF;
    IF 'EXPRESSION_DENOTED_FUNCTION' IN typenames THEN
      RETURN( values_space_of( func\expression_denoted_function.expr )\function_space.range_argument );
    END_IF;
    IF 'IMPORTED_POINT_FUNCTION' IN typenames THEN
      temp := dimension_of( func\imported_point_function.geometry );
      RETURN( one_tuples_of( make_uniform_product_space( the_reals, temp ) ) );
    END_IF;
    IF 'IMPORTED_CURVE_FUNCTION' IN typenames THEN
      temp := dimension_of( func\imported_curve_function.geometry );
      RETURN( one_tuples_of( make_uniform_product_space( the_reals, temp ) ) );
    END_IF;
    IF 'IMPORTED_SURFACE_FUNCTION' IN typenames THEN
      temp := dimension_of( func\imported_surface_function.geometry );
      RETURN( one_tuples_of( make_uniform_product_space( the_reals, temp ) ) );
    END_IF;
    IF 'IMPORTED_VOLUME_FUNCTION' IN typenames THEN
      temp := dimension_of( func\imported_volume_function.geometry );
      RETURN( one_tuples_of( make_uniform_product_space( the_reals, temp ) ) );
    END_IF;
    IF 'APPLICATION_DEFINED_FUNCTION' IN typenames THEN
      RETURN( func\application_defined_function.explicit_range );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="dimension_of">
         <parameter name="item">
            <typename name="geometric_representation_item"/>
         </parameter>
         <typename name="dimension_count"/>
         <algorithm>LOCAL
      x   : SET OF representation;
      y   : representation_context;
      dim : dimension_count;
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT' IN TYPEOF( item ) THEN
      dim := SIZEOF( item\cartesian_point.coordinates );
      RETURN( dim );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIRECTION' IN TYPEOF( item ) THEN
      dim := SIZEOF( item\direction.direction_ratios );
      RETURN( dim );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VECTOR' IN TYPEOF( item ) THEN
      dim := SIZEOF( item\vector.orientation\direction.direction_ratios );
      RETURN( dim );
    END_IF;
    x := using_representations( item );
    IF SIZEOF( x ) &gt; 0 THEN
      y := x[1].context_of_items;
      dim := y\geometric_representation_context.coordinate_space_dimension;
      RETURN( dim );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="dimensions_for_si_unit">
         <parameter name="n">
            <typename name="si_unit_name"/>
         </parameter>
         <typename name="dimensional_exponents"/>
         <algorithm>CASE n OF
      metre         :         RETURN( dimensional_exponents( 1, 0, 0, 0, 0, 0, 0 ) );
      gram          :         RETURN( dimensional_exponents( 0, 1, 0, 0, 0, 0, 0 ) );
      second        :         RETURN( dimensional_exponents( 0, 0, 1, 0, 0, 0, 0 ) );
      ampere        :         RETURN( dimensional_exponents( 0, 0, 0, 1, 0, 0, 0 ) );
      kelvin        :         RETURN( dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 ) );
      mole          :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 1, 0 ) );
      candela       :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 ) );
      radian        :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) );
      steradian     :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) );
      hertz         :         RETURN( dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 ) );
      newton        :         RETURN( dimensional_exponents( 1, 1, -2, 0, 0, 0, 0 ) );
      pascal        :         RETURN( dimensional_exponents( -1, 1, -2, 0, 0, 0, 0 ) );
      joule         :         RETURN( dimensional_exponents( 2, 1, -2, 0, 0, 0, 0 ) );
      watt          :         RETURN( dimensional_exponents( 2, 1, -3, 0, 0, 0, 0 ) );
      coulomb       :         RETURN( dimensional_exponents( 0, 0, 1, 1, 0, 0, 0 ) );
      volt          :         RETURN( dimensional_exponents( 2, 1, -3, -1, 0, 0, 0 ) );
      farad         :         RETURN( dimensional_exponents( -2, -1, 4, 2, 0, 0, 0 ) );
      ohm           :         RETURN( dimensional_exponents( 2, 1, -3, -2, 0, 0, 0 ) );
      siemens       :         RETURN( dimensional_exponents( -2, -1, 3, 2, 0, 0, 0 ) );
      weber         :         RETURN( dimensional_exponents( 2, 1, -2, -1, 0, 0, 0 ) );
      tesla         :         RETURN( dimensional_exponents( 0, 1, -2, -1, 0, 0, 0 ) );
      henry         :         RETURN( dimensional_exponents( 2, 1, -2, -2, 0, 0, 0 ) );
      degree_celsius :         RETURN( dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 ) );
      lumen         :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 ) );
      lux           :         RETURN( dimensional_exponents( -2, 0, 0, 0, 0, 0, 1 ) );
      becquerel     :         RETURN( dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 ) );
      gray          :         RETURN( dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 ) );
      sievert       :         RETURN( dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 ) );
      OTHERWISE     :         RETURN( ? );
      END_CASE;</algorithm>
      </function>
      <function name="domain_from">
         <parameter name="ref">
            <typename name="maths_space_or_function"/>
         </parameter>
         <typename name="tuple_space"/>
         <algorithm>LOCAL
      typenames : SET OF STRING := stripped_typeof( ref );
      func      : maths_function;
    END_LOCAL;
    IF NOT EXISTS( ref ) THEN
      RETURN( ? );
    END_IF;
    IF 'TUPLE_SPACE' IN typenames THEN
      RETURN( ref );
    END_IF;
    IF 'MATHS_SPACE' IN typenames THEN
      RETURN( one_tuples_of( ref ) );
    END_IF;
    func := ref;
    IF 'CONSTANT_FUNCTION' IN typenames THEN
      RETURN( domain_from( func\constant_function.source_of_domain ) );
    END_IF;
    IF 'SELECTOR_FUNCTION' IN typenames THEN
      RETURN( domain_from( func\selector_function.source_of_domain ) );
    END_IF;
    IF 'PARALLEL_COMPOSED_FUNCTION' IN typenames THEN
      RETURN( domain_from( func\parallel_composed_function.source_of_domain ) );
    END_IF;
    RETURN( func.domain );</algorithm>
      </function>
      <function name="dot_product">
         <parameter name="arg1">
            <typename name="direction"/>
         </parameter>
         <parameter name="arg2">
            <typename name="direction"/>
         </parameter>
         <builtintype type="REAL"/>
         <algorithm>LOCAL
      scalar : REAL;
      vec1   : direction;
      vec2   : direction;
      ndim   : INTEGER;
    END_LOCAL;
    IF ( NOT EXISTS( arg1 ) ) OR ( NOT EXISTS( arg2 ) ) THEN
      scalar := ?;
    ELSE
      IF arg1.dim &lt;&gt; arg2.dim THEN
        scalar := ?;
      ELSE

        BEGIN
          vec1 := normalise( arg1 );
          vec2 := normalise( arg2 );
          ndim := arg1.dim;
          scalar := 0;
          REPEAT i := 1 TO ndim BY 1;
            scalar := scalar + ( vec1.direction_ratios[i] * vec2.direction_ratios[i] );
          END_REPEAT;
        END;
      END_IF;
    END_IF;
    RETURN( scalar );</algorithm>
      </function>
      <function name="drop_numeric_constraints">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <typename name="maths_space"/>
         <algorithm>LOCAL
      typenames : SET OF STRING := stripped_typeof( spc );
      tspc      : listed_product_space;
      factors   : LIST OF maths_space := [];
      xspc      : extended_tuple_space;
    END_LOCAL;
    IF 'UNIFORM_PRODUCT_SPACE' IN typenames THEN
      RETURN( make_uniform_product_space( drop_numeric_constraints( spc\uniform_product_space.base ), spc\uniform_product_space.
          exponent ) );
    END_IF;
    IF 'LISTED_PRODUCT_SPACE' IN typenames THEN
      tspc := spc;
      REPEAT i := 1 TO SIZEOF( tspc.factors ) BY 1;
        INSERT( factors, drop_numeric_constraints( tspc.factors[i] ), i - 1 );
      END_REPEAT;
      RETURN( make_listed_product_space( factors ) );
    END_IF;
    IF 'EXTENDED_TUPLE_SPACE' IN typenames THEN
      xspc := spc;
      RETURN( make_extended_tuple_space( drop_numeric_constraints( xspc.base ), drop_numeric_constraints( xspc.extender ) ) );
    END_IF;
    IF subspace_of_es( spc, es_numbers ) THEN
      RETURN( number_superspace_of( spc ) );
    END_IF;
    RETURN( spc );</algorithm>
      </function>
      <function name="duration_is_negative">
         <parameter name="duration">
            <typename name="time_measure_with_unit"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF duration\measure_with_unit.value_component &lt; 0 THEN
      RETURN( TRUE );
    ELSE
      RETURN( FALSE );
    END_IF;</algorithm>
      </function>
      <function name="duration_is_positive">
         <parameter name="duration">
            <typename name="time_measure_with_unit"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF duration\measure_with_unit.value_component &gt; 0 THEN
      RETURN( TRUE );
    ELSE
      RETURN( FALSE );
    END_IF;</algorithm>
      </function>
      <function name="edge_reversed">
         <parameter name="an_edge">
            <typename name="edge"/>
         </parameter>
         <typename name="oriented_edge"/>
         <algorithm>LOCAL
      the_reverse : oriented_edge;
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_EDGE' IN TYPEOF( an_edge ) THEN
      the_reverse := dummy_tri || edge( an_edge.edge_end, an_edge.edge_start ) || oriented_edge( an_edge\oriented_edge.
          edge_element, NOT an_edge\oriented_edge.orientation );
    ELSE
      the_reverse := dummy_tri || edge( an_edge.edge_end, an_edge.edge_start ) || oriented_edge( an_edge, FALSE );
    END_IF;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="enclose_cregion_in_pregion">
         <parameter name="crgn">
            <typename name="cartesian_complex_number_region"/>
         </parameter>
         <parameter name="centre">
            <typename name="complex_number_literal"/>
         </parameter>
         <typename name="polar_complex_number_region"/>
         <algorithm>FUNCTION angle(
                 a : REAL
             ) : REAL;
      REPEAT WHILE a &gt; PI;
        a := a - ( 2 * PI );
      END_REPEAT;
      REPEAT WHILE a &lt;= ( -PI );
        a := a + ( 2 * PI );
      END_REPEAT;
      RETURN( a );

    END_FUNCTION;

    FUNCTION strictly_in(
                 z : REAL;
                 zitv : real_interval
             ) : LOGICAL;
      RETURN( ( ( NOT min_exists( zitv ) ) OR ( z &gt; real_min( zitv ) ) ) AND ( ( NOT max_exists( zitv ) ) OR ( z &lt; real_max( zitv ) ) ) );

    END_FUNCTION;

    PROCEDURE angle_minmax(
                  ab, a : REAL;
                  a_in : BOOLEAN;
                  VAR amin, amax : REAL;
                  VAR amin_in, amax_in : BOOLEAN      );
      a := angle( a - ab );
      IF amin = a THEN
        amin_in := amin_in OR a_in;
      END_IF;
      IF amin &gt; a THEN
        amin := a;
        amin_in := a_in;
      END_IF;
      IF amax = a THEN
        amax_in := amax_in OR a_in;
      END_IF;
      IF amax &lt; a THEN
        amax := a;
        amax_in := a_in;
      END_IF;

    END_PROCEDURE;

    PROCEDURE range_max(
                  r : REAL;
                  incl : BOOLEAN;
                  VAR rmax : REAL;
                  VAR rmax_in : BOOLEAN      );
      IF rmax = r THEN
        rmax_in := rmax_in OR incl;
      END_IF;
      IF rmax &lt; r THEN
        rmax := r;
        rmax_in := incl;
      END_IF;

    END_PROCEDURE;

    PROCEDURE range_min(
                  r : REAL;
                  incl : BOOLEAN;
                  VAR rmin : REAL;
                  VAR rmin_in : BOOLEAN      );
      IF rmin = r THEN
        rmin_in := rmin_in OR incl;
      END_IF;
      IF ( rmin &lt; 0 ) OR ( rmin &gt; r ) THEN
        rmin := r;
        rmin_in := incl;
      END_IF;

    END_PROCEDURE;

    LOCAL
      xitv        : real_interval;
      yitv        : real_interval;
      is_xmin     : BOOLEAN;
      is_xmax     : BOOLEAN;
      is_ymin     : BOOLEAN;
      is_ymax     : BOOLEAN;
      xmin        : REAL := 0;
      xmax        : REAL := 0;
      ymin        : REAL := 0;
      ymax        : REAL := 0;
      xc          : REAL := 0;
      yc          : REAL := 0;
      xmin_in     : BOOLEAN := FALSE;
      xmax_in     : BOOLEAN := FALSE;
      ymin_in     : BOOLEAN := FALSE;
      ymax_in     : BOOLEAN := FALSE;
      rmin        : REAL := -1;
      rmax        : REAL := -1;
      amin        : REAL := 4;
      amax        : REAL := -4;
      rmax_exists : BOOLEAN := TRUE;
      outside     : BOOLEAN := TRUE;
      rmin_in     : BOOLEAN := FALSE;
      rmax_in     : BOOLEAN := FALSE;
      amin_in     : BOOLEAN := FALSE;
      amax_in     : BOOLEAN := FALSE;
      ab          : REAL := 0;
      a           : REAL := 0;
      r           : REAL := 0;
      incl        : BOOLEAN;
      ritv        : real_interval;
      aitv        : finite_real_interval;
      minclo      : open_closed := open;
      maxclo      : open_closed := open;
    END_LOCAL;
    IF ( NOT EXISTS( crgn ) ) OR ( NOT EXISTS( centre ) ) THEN
      RETURN( ? );
    END_IF;
    xitv := crgn.real_constraint;
    yitv := crgn.imag_constraint;
    xc := centre.real_part;
    yc := centre.imag_part;
    is_xmin := min_exists( xitv );
    is_xmax := max_exists( xitv );
    is_ymin := min_exists( yitv );
    is_ymax := max_exists( yitv );
    IF is_xmin THEN
      xmin := real_min( xitv );
      xmin_in := min_included( xitv );
    END_IF;
    IF is_xmax THEN
      xmax := real_max( xitv );
      xmax_in := max_included( xitv );
    END_IF;
    IF is_ymin THEN
      ymin := real_min( yitv );
      ymin_in := min_included( yitv );
    END_IF;
    IF is_ymax THEN
      ymax := real_max( yitv );
      ymax_in := max_included( yitv );
    END_IF;
    rmax_exists := is_xmin AND is_xmax AND is_ymin AND is_ymax;
    IF is_xmin AND ( xc &lt;= xmin ) THEN
      ab := 0;
    ELSE
      IF is_ymin AND ( yc &lt;= ymin ) THEN
        ab := 0.5 * PI;
      ELSE
        IF is_ymax AND ( yc &gt;= ymax ) THEN
          ab := ( -0.5 ) * PI;
        ELSE
          IF is_xmax AND ( xc &gt;= xmax ) THEN
            ab := PI;
          ELSE
            outside := FALSE;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    IF ( NOT outside ) AND ( NOT rmax_exists ) THEN
      RETURN( ? );
    END_IF;
    IF is_xmin AND ( xc &lt;= xmin ) AND strictly_in( yc, yitv ) THEN
      rmin := xmin - xc;
      rmin_in := xmin_in;
    ELSE
      IF is_ymin AND ( yc &lt;= ymin ) AND strictly_in( xc, xitv ) THEN
        rmin := ymin - yc;
        rmin_in := ymin_in;
      ELSE
        IF is_ymax AND ( yc &gt;= ymax ) AND strictly_in( xc, xitv ) THEN
          rmin := yc - ymax;
          rmin_in := ymax_in;
        ELSE
          IF is_xmax AND ( xc &gt;= xmax ) AND strictly_in( yc, yitv ) THEN
            rmin := xc - xmax;
            rmin_in := xmax_in;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    IF is_xmin THEN
      IF is_ymin THEN
        r := SQRT( ( ( xmin - xc ) ** 2 ) + ( ( ymin - yc ) ** 2 ) );
        incl := xmin_in AND ymin_in;
        IF rmax_exists THEN
          range_max( r, incl, rmax, rmax_in );
        END_IF;
        IF outside THEN
          IF r &gt; 0 THEN
            range_min( r, incl, rmin, rmin_in );
            a := angle( atan2( ymin - yc, xmin - xc ) - ab );
            IF xc = xmin THEN
              incl := xmin_in;
            END_IF;
            IF yc = ymin THEN
              incl := ymin_in;
            END_IF;
            angle_minmax( ab, a, incl, amin, amax, amin_in, amax_in );
          ELSE
            rmin := 0;
            rmin_in := xmin_in AND ymin_in;
            amin := angle( 0 - ab );
            amin_in := ymin_in;
            amax := angle( ( 0.5 * PI ) - ab );
            amax_in := xmin_in;
          END_IF;
        END_IF;
      ELSE
        IF xc &lt;= xmin THEN
          angle_minmax( ab, ( -0.5 ) * PI, ( xc = xmin ) AND xmin_in, amin, amax, amin_in, amax_in );
        END_IF;
      END_IF;
      IF ( NOT is_ymax ) AND ( xc &lt;= xmin ) THEN
        angle_minmax( ab, 0.5 * PI, ( xc = xmin ) AND xmin_in, amin, amax, amin_in, amax_in );
      END_IF;
    END_IF;
    IF is_ymin THEN
      IF is_xmax THEN
        r := SQRT( ( ( xmax - xc ) ** 2 ) + ( ( ymin - yc ) ** 2 ) );
        incl := xmax_in AND ymin_in;
        IF rmax_exists THEN
          range_max( r, incl, rmax, rmax_in );
        END_IF;
        IF outside THEN
          IF r &gt; 0 THEN
            range_min( r, incl, rmin, rmin_in );
            a := angle( atan2( ymin - yc, xmax - xc ) - ab );
            IF xc = xmax THEN
              incl := xmax_in;
            END_IF;
            IF yc = ymin THEN
              incl := ymin_in;
            END_IF;
            angle_minmax( ab, a, incl, amin, amax, amin_in, amax_in );
          ELSE
            rmin := 0;
            rmin_in := xmax_in AND ymin_in;
            amin := angle( ( 0.5 * PI ) - ab );
            amin_in := ymin_in;
            amax := angle( PI - ab );
            amax_in := xmax_in;
          END_IF;
        END_IF;
      ELSE
        IF yc &lt;= ymin THEN
          angle_minmax( ab, 0, ( yc = ymin ) AND ymin_in, amin, amax, amin_in, amax_in );
        END_IF;
      END_IF;
      IF ( NOT is_xmin ) AND ( yc &lt;= ymin ) THEN
        angle_minmax( ab, PI, ( yc = ymin ) AND ymin_in, amin, amax, amin_in, amax_in );
      END_IF;
    END_IF;
    IF is_xmax THEN
      IF is_ymax THEN
        r := SQRT( ( ( xmax - xc ) ** 2 ) + ( ( ymax - yc ) ** 2 ) );
        incl := xmax_in AND ymax_in;
        IF rmax_exists THEN
          range_max( r, incl, rmax, rmax_in );
        END_IF;
        IF outside THEN
          IF r &gt; 0 THEN
            range_min( r, incl, rmin, rmin_in );
            a := angle( atan2( ymax - yc, xmax - xc ) - ab );
            IF xc = xmax THEN
              incl := xmax_in;
            END_IF;
            IF yc = ymax THEN
              incl := ymax_in;
            END_IF;
            angle_minmax( ab, a, incl, amin, amax, amin_in, amax_in );
          ELSE
            rmin := 0;
            rmin_in := xmax_in AND ymax_in;
            amin := angle( ( -PI ) - ab );
            amin_in := ymax_in;
            amax := angle( ( ( -0.5 ) * PI ) - ab );
            amax_in := xmax_in;
          END_IF;
        END_IF;
      ELSE
        IF xc &gt;= xmax THEN
          angle_minmax( ab, 0.5 * PI, ( xc = xmax ) AND xmax_in, amin, amax, amin_in, amax_in );
        END_IF;
      END_IF;
      IF ( NOT is_ymin ) AND ( xc &gt;= xmax ) THEN
        angle_minmax( ab, ( -0.5 ) * PI, ( xc = xmax ) AND xmax_in, amin, amax, amin_in, amax_in );
      END_IF;
    END_IF;
    IF is_ymax THEN
      IF is_xmin THEN
        r := SQRT( ( ( xmin - xc ) ** 2 ) + ( ( ymax - yc ) ** 2 ) );
        incl := xmin_in AND ymax_in;
        IF rmax_exists THEN
          range_max( r, incl, rmax, rmax_in );
        END_IF;
        IF outside THEN
          IF r &gt; 0 THEN
            range_min( r, incl, rmin, rmin_in );
            a := angle( atan2( ymax - yc, xmin - xc ) - ab );
            IF xc = xmin THEN
              incl := xmin_in;
            END_IF;
            IF yc = ymax THEN
              incl := ymax_in;
            END_IF;
            angle_minmax( ab, a, incl, amin, amax, amin_in, amax_in );
          ELSE
            rmin := 0;
            rmin_in := xmin_in AND ymax_in;
            amin := angle( ( 0.5 * PI ) - ab );
            amin_in := ymax_in;
            amax := angle( PI - ab );
            amax_in := xmin_in;
          END_IF;
        END_IF;
      ELSE
        IF yc &gt;= ymax THEN
          angle_minmax( ab, PI, ( yc = ymax ) AND ymax_in, amin, amax, amin_in, amax_in );
        END_IF;
      END_IF;
      IF ( NOT is_xmax ) AND ( yc &gt;= ymax ) THEN
        angle_minmax( ab, 0, ( yc = ymax ) AND ymax_in, amin, amax, amin_in, amax_in );
      END_IF;
    END_IF;
    IF outside THEN
      amin := angle( amin + ab );
      IF amin = PI THEN
        amin := -PI;
      END_IF;
      amax := angle( amax + ab );
      IF amax &lt;= amin THEN
        amax := amax + ( 2 * PI );
      END_IF;
    ELSE
      amin := -PI;
      amin_in := FALSE;
      amax := PI;
      amax_in := FALSE;
    END_IF;
    IF amin_in THEN
      minclo := closed;
    END_IF;
    IF amax_in THEN
      maxclo := closed;
    END_IF;
    aitv := make_finite_real_interval( amin, minclo, amax, maxclo );
    minclo := open;
    IF rmin_in THEN
      minclo := closed;
    END_IF;
    IF rmax_exists THEN
      maxclo := open;
      IF rmax_in THEN
        maxclo := closed;
      END_IF;
      ritv := make_finite_real_interval( rmin, minclo, rmax, maxclo );
    ELSE
      ritv := make_real_interval_from_min( rmin, minclo );
    END_IF;
    RETURN( make_polar_complex_number_region( centre, ritv, aitv ) );</algorithm>
      </function>
      <function name="enclose_pregion_in_cregion">
         <parameter name="prgn">
            <typename name="polar_complex_number_region"/>
         </parameter>
         <typename name="cartesian_complex_number_region"/>
         <algorithm>PROCEDURE nearest_good_direction(
                  acart : REAL;
                  aitv : finite_real_interval;
                  VAR a : REAL;
                  VAR a_in : BOOLEAN      );
      a := acart;
      a_in := TRUE;
      IF a &lt; aitv.min THEN
        IF ( a + ( 2 * PI ) ) &lt; aitv.max THEN
          RETURN;
        END_IF;
        IF ( a + ( 2 * PI ) ) = aitv.max THEN
          a_in := max_included( aitv );
          RETURN;
        END_IF;
      ELSE
        IF a = aitv.min THEN
          a_in := min_included( aitv );
          RETURN;
        ELSE
          IF a &lt; aitv.max THEN
            RETURN;
          ELSE
            IF a = aitv.max THEN
              a_in := max_included( aitv );
              RETURN;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
      IF COS( acart - aitv.max ) &gt;= COS( acart - aitv.min ) THEN
        a := aitv.max;
        a_in := max_included( aitv );
      ELSE
        a := aitv.min;
        a_in := min_included( aitv );
      END_IF;

    END_PROCEDURE;

    LOCAL
      xc          : REAL := 0;
      yc          : REAL := 0;
      xmin        : REAL := 0;
      xmax        : REAL := 0;
      ymin        : REAL := 0;
      ymax        : REAL := 0;
      ritv        : real_interval;
      xitv        : real_interval;
      yitv        : real_interval;
      aitv        : finite_real_interval;
      xmin_exists : BOOLEAN;
      xmax_exists : BOOLEAN;
      ymin_exists : BOOLEAN;
      ymax_exists : BOOLEAN;
      xmin_in     : BOOLEAN := FALSE;
      xmax_in     : BOOLEAN := FALSE;
      ymin_in     : BOOLEAN := FALSE;
      ymax_in     : BOOLEAN := FALSE;
      a           : REAL := 0;
      r           : REAL := 0;
      a_in        : BOOLEAN := FALSE;
      min_clo     : open_closed := open;
      max_clo     : open_closed := open;
    END_LOCAL;
    IF NOT EXISTS( prgn ) THEN
      RETURN( ? );
    END_IF;
    xc := prgn.centre.real_part;
    yc := prgn.centre.imag_part;
    ritv := prgn.distance_constraint;
    aitv := prgn.direction_constraint;
    nearest_good_direction( PI, aitv, a, a_in );
    IF COS( a ) &gt;= 0 THEN
      xmin_exists := TRUE;
      xmin := xc + ( real_min( ritv ) * COS( a ) );
      xmin_in := a_in AND ( min_included( ritv ) OR ( COS( a ) = 0 ) );
    ELSE
      IF max_exists( ritv ) THEN
        xmin_exists := TRUE;
        xmin := xc + ( real_max( ritv ) * COS( a ) );
        xmin_in := a_in AND max_included( ritv );
      ELSE
        xmin_exists := FALSE;
      END_IF;
    END_IF;
    nearest_good_direction( 0, aitv, a, a_in );
    IF COS( a ) &lt;= 0 THEN
      xmax_exists := TRUE;
      xmax := xc + ( real_min( ritv ) * COS( a ) );
      xmax_in := a_in AND ( min_included( ritv ) OR ( COS( a ) = 0 ) );
    ELSE
      IF max_exists( ritv ) THEN
        xmax_exists := TRUE;
        xmax := xc + ( real_max( ritv ) * COS( a ) );
        xmax_in := a_in AND max_included( ritv );
      ELSE
        xmax_exists := FALSE;
      END_IF;
    END_IF;
    nearest_good_direction( ( -0.5 ) * PI, aitv, a, a_in );
    IF SIN( a ) &gt;= 0 THEN
      ymin_exists := TRUE;
      ymin := yc + ( real_min( ritv ) * SIN( a ) );
      ymin_in := a_in AND ( min_included( ritv ) OR ( SIN( a ) = 0 ) );
    ELSE
      IF max_exists( ritv ) THEN
        ymin_exists := TRUE;
        ymin := yc + ( real_max( ritv ) * SIN( a ) );
        ymin_in := a_in AND max_included( ritv );
      ELSE
        ymin_exists := FALSE;
      END_IF;
    END_IF;
    nearest_good_direction( 0.5 * PI, aitv, a, a_in );
    IF SIN( a ) &lt;= 0 THEN
      ymax_exists := TRUE;
      ymax := yc + ( real_min( ritv ) * SIN( a ) );
      ymax_in := a_in AND ( min_included( ritv ) OR ( SIN( a ) = 0 ) );
    ELSE
      IF max_exists( ritv ) THEN
        ymax_exists := TRUE;
        ymax := yc + ( real_max( ritv ) * SIN( a ) );
        ymax_in := a_in AND max_included( ritv );
      ELSE
        ymax_exists := FALSE;
      END_IF;
    END_IF;
    IF NOT ( xmin_exists OR xmax_exists OR ymin_exists OR ymax_exists ) THEN
      RETURN( ? );
    END_IF;
    IF xmin_exists THEN
      IF xmin_in THEN
        min_clo := closed;
      ELSE
        min_clo := open;
      END_IF;
      IF xmax_exists THEN
        IF xmax_in THEN
          max_clo := closed;
        ELSE
          max_clo := open;
        END_IF;
        xitv := make_finite_real_interval( xmin, min_clo, xmax, max_clo );
      ELSE
        xitv := make_real_interval_from_min( xmin, min_clo );
      END_IF;
    ELSE
      IF xmax_exists THEN
        IF xmax_in THEN
          max_clo := closed;
        ELSE
          max_clo := open;
        END_IF;
        xitv := make_real_interval_to_max( xmax, max_clo );
      ELSE
        xitv := the_reals;
      END_IF;
    END_IF;
    IF ymin_exists THEN
      IF ymin_in THEN
        min_clo := closed;
      ELSE
        min_clo := open;
      END_IF;
      IF ymax_exists THEN
        IF ymax_in THEN
          max_clo := closed;
        ELSE
          max_clo := open;
        END_IF;
        yitv := make_finite_real_interval( ymin, min_clo, ymax, max_clo );
      ELSE
        yitv := make_real_interval_from_min( ymin, min_clo );
      END_IF;
    ELSE
      IF ymax_exists THEN
        IF ymax_in THEN
          max_clo := closed;
        ELSE
          max_clo := open;
        END_IF;
        yitv := make_real_interval_to_max( ymax, max_clo );
      ELSE
        yitv := the_reals;
      END_IF;
    END_IF;
    RETURN( make_cartesian_complex_number_region( xitv, yitv ) );</algorithm>
      </function>
      <function name="enclose_pregion_in_pregion">
         <parameter name="prgn">
            <typename name="polar_complex_number_region"/>
         </parameter>
         <parameter name="centre">
            <typename name="complex_number_literal"/>
         </parameter>
         <typename name="polar_complex_number_region"/>
         <algorithm>FUNCTION angle(
                 a : REAL
             ) : REAL;
      REPEAT WHILE a &gt; PI;
        a := a - ( 2 * PI );
      END_REPEAT;
      REPEAT WHILE a &lt;= ( -PI );
        a := a + ( 2 * PI );
      END_REPEAT;
      RETURN( a );

    END_FUNCTION;

    FUNCTION strictly_in(
                 a : REAL;
                 aitv : finite_real_interval
             ) : LOGICAL;
      a := angle( a );
      RETURN( ( ( aitv.min &lt; a ) AND ( a &lt; aitv.max ) ) OR ( ( aitv.min &lt; ( a + ( 2 * PI ) ) ) AND ( ( a + ( 2 * PI ) ) &lt; aitv.
          max ) ) );

    END_FUNCTION;

    PROCEDURE angle_range(
                  VAR amin, amax : REAL      );
      amin := angle( amin );
      IF amin = PI THEN
        amin := -PI;
      END_IF;
      amax := angle( amax );
      IF amax &lt;= amin THEN
        amax := amax + ( 2 * PI );
      END_IF;

    END_PROCEDURE;

    PROCEDURE find_aminmax(
                  ab, a0, a1, a2, a3 : REAL;
                  in0, in1, in2, in3 : BOOLEAN;
                  VAR amin, amax : REAL;
                  VAR amin_in, amax_in : BOOLEAN      );

      LOCAL
        a : REAL;
      END_LOCAL;
      amin := angle( a0 - ab );
      amin_in := in0;
      amax := amin;
      amax_in := in0;
      a := angle( a1 - ab );
      IF a = amin THEN
        amin_in := amin_in OR in1;
      END_IF;
      IF a &lt; amin THEN
        amin := a;
        amin_in := in1;
      END_IF;
      IF a = amax THEN
        amax_in := amax_in OR in1;
      END_IF;
      IF a &gt; amax THEN
        amax := a;
        amax_in := in1;
      END_IF;
      a := angle( a2 - ab );
      IF a = amin THEN
        amin_in := amin_in OR in2;
      END_IF;
      IF a &lt; amin THEN
        amin := a;
        amin_in := in2;
      END_IF;
      IF a = amax THEN
        amax_in := amax_in OR in2;
      END_IF;
      IF a &gt; amax THEN
        amax := a;
        amax_in := in2;
      END_IF;
      a := angle( a3 - ab );
      IF a = amin THEN
        amin_in := amin_in OR in3;
      END_IF;
      IF a &lt; amin THEN
        amin := a;
        amin_in := in3;
      END_IF;
      IF a = amax THEN
        amax_in := amax_in OR in3;
      END_IF;
      IF a &gt; amax THEN
        amax := a;
        amax_in := in3;
      END_IF;
      amin := amin + ab;
      amax := amax + ab;
      angle_range( amin, amax );

    END_PROCEDURE;

    LOCAL
      ritp    : real_interval;
      ritv    : real_interval;
      aitp    : finite_real_interval;
      aitv    : finite_real_interval;
      xp      : REAL := 0;
      yp      : REAL := 0;
      xc      : REAL := 0;
      yc      : REAL := 0;
      rmax    : REAL := 0;
      rmin    : REAL := 0;
      amin    : REAL := 0;
      amax    : REAL := 0;
      rc      : REAL := 0;
      acp     : REAL := 0;
      apc     : REAL := 0;
      rmax_in : BOOLEAN := FALSE;
      rmin_in : BOOLEAN := FALSE;
      amin_in : BOOLEAN := FALSE;
      amax_in : BOOLEAN := FALSE;
      rmxp    : REAL := 0;
      rmnp    : REAL := 0;
      x       : REAL := 0;
      y       : REAL := 0;
      r       : REAL := 0;
      a       : REAL := 0;
      ab      : REAL := 0;
      r0      : REAL := 0;
      a0      : REAL := 0;
      r1      : REAL := 0;
      a1      : REAL := 0;
      r2      : REAL := 0;
      a2      : REAL := 0;
      r3      : REAL := 0;
      a3      : REAL := 0;
      in0     : BOOLEAN := FALSE;
      in1     : BOOLEAN := FALSE;
      in2     : BOOLEAN := FALSE;
      in3     : BOOLEAN := FALSE;
      inn     : BOOLEAN := FALSE;
      minclo  : open_closed := open;
      maxclo  : open_closed := open;
    END_LOCAL;
    IF ( NOT EXISTS( prgn ) ) OR ( NOT EXISTS( centre ) ) THEN
      RETURN( ? );
    END_IF;
    xp := prgn.centre.real_part;
    yp := prgn.centre.imag_part;
    ritp := prgn.distance_constraint;
    aitp := prgn.direction_constraint;
    xc := centre.real_part;
    yc := centre.imag_part;
    IF ( xc = xp ) AND ( yc = yp ) THEN
      RETURN( prgn );
    END_IF;
    rc := SQRT( ( ( xp - xc ) ** 2 ) + ( ( yp - yc ) ** 2 ) );
    acp := atan2( yp - yc, xp - xc );
    apc := atan2( yc - yp, xc - xp );
    rmnp := real_min( ritp );
    IF max_exists( ritp ) THEN
      rmxp := real_max( ritp );
      IF ( aitp.max - aitp.min ) = ( 2 * PI ) THEN
        inn := NOT max_included( aitp );
        a := angle( aitp.min );
        rmax := rc + rmxp;
        rmax_in := max_included( ritp );
        IF inn AND ( acp = a ) THEN
          rmax_in := FALSE;
        END_IF;
        IF rc &gt; rmxp THEN
          a0 := ASIN( rmxp / rc );
          amin := angle( acp - a0 );
          amin_in := max_included( ritp );
          IF amin = PI THEN
            amin := -PI;
          END_IF;
          amax := angle( acp + a0 );
          amax_in := amin_in;
          IF amax &lt; amin THEN
            amax := amax + ( 2 * PI );
          END_IF;
          rmin := rc - rmxp;
          rmin_in := amin_in;
          IF inn THEN
            IF apc = a THEN
              rmin_in := FALSE;
            END_IF;
            IF angle( amin + ( 0.5 * PI ) ) = a THEN
              amin_in := FALSE;
            END_IF;
            IF angle( amax - ( 0.5 * PI ) ) = a THEN
              amax_in := FALSE;
            END_IF;
          END_IF;
        ELSE
          IF rc = rmxp THEN
            amin := angle( acp - ( 0.5 * PI ) );
            amin_in := FALSE;
            IF amin = PI THEN
              amin := -PI;
            END_IF;
            amax := angle( acp + ( 0.5 * PI ) );
            amax_in := FALSE;
            IF amax &lt; amin THEN
              amax := amax + ( 2 * PI );
            END_IF;
            rmin := 0;
            rmin_in := max_included( ritp );
            IF inn AND ( apc = a ) THEN
              rmin_in := FALSE;
            END_IF;
          ELSE
            IF rc &gt; rmnp THEN
              IF inn AND ( apc = a ) THEN
                rmin := 0;
                rmin_in := FALSE;
                amin := aitp.min;
                amin_in := FALSE;
                amax := aitp.max;
                amax_in := FALSE;
              ELSE
                rmin := 0;
                rmin_in := TRUE;
                amin := -PI;
                amin_in := FALSE;
                amax := PI;
                amax_in := TRUE;
              END_IF;
            ELSE
              rmin := rmnp - rc;
              rmin_in := min_included( ritp );
              amin := -PI;
              amin_in := FALSE;
              amax := PI;
              amax_in := TRUE;
              IF inn THEN
                IF apc = a THEN
                  rmin_in := FALSE;
                  amin := aitp.min;
                  amin_in := FALSE;
                  amax := aitp.max;
                  amax_in := FALSE;
                ELSE
                  IF acp = a THEN
                    amin := aitp.min;
                    amin_in := FALSE;
                    amax := aitp.max;
                    amax_in := FALSE;
                  END_IF;
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      ELSE
        x := ( xp + ( rmxp * COS( aitp.min ) ) ) - xc;
        y := ( yp + ( rmxp * SIN( aitp.min ) ) ) - yc;
        r0 := SQRT( ( x ** 2 ) + ( y ** 2 ) );
        in0 := max_included( ritp ) AND min_included( aitp );
        IF r0 &lt;&gt; 0 THEN
          a0 := atan2( y, x );
        END_IF;
        x := ( xp + ( rmxp * COS( aitp.max ) ) ) - xc;
        y := ( yp + ( rmxp * SIN( aitp.max ) ) ) - yc;
        r1 := SQRT( ( x ** 2 ) + ( y ** 2 ) );
        in1 := max_included( ritp ) AND max_included( aitp );
        IF r1 &lt;&gt; 0 THEN
          a1 := atan2( y, x );
        END_IF;
        x := ( xp + ( rmnp * COS( aitp.max ) ) ) - xc;
        y := ( yp + ( rmnp * SIN( aitp.max ) ) ) - yc;
        r2 := SQRT( ( x ** 2 ) + ( y ** 2 ) );
        in2 := min_included( ritp ) AND max_included( aitp );
        IF r2 &lt;&gt; 0 THEN
          a2 := atan2( y, x );
        ELSE
          a2 := a1;
          in2 := in1;
        END_IF;
        IF r1 = 0 THEN
          a1 := a2;
          in1 := in2;
        END_IF;
        x := ( xp + ( rmnp * COS( aitp.min ) ) ) - xc;
        y := ( yp + ( rmnp * SIN( aitp.min ) ) ) - yc;
        r3 := SQRT( ( x ** 2 ) + ( y ** 2 ) );
        in3 := min_included( ritp ) AND min_included( aitp );
        IF r3 &lt;&gt; 0 THEN
          a3 := atan2( y, x );
        ELSE
          a3 := a0;
          in3 := in0;
        END_IF;
        IF r0 = 0 THEN
          a0 := a3;
          in0 := in3;
        END_IF;
        IF rmnp = 0 THEN
          in2 := min_included( ritp );
          in3 := in2;
        END_IF;
        IF ( apc = angle( aitp.min ) ) OR ( acp = angle( aitp.min ) ) THEN
          in0 := min_included( aitp );
          in3 := in0;
        ELSE
          IF ( apc = angle( aitp.max ) ) OR ( acp = angle( aitp.max ) ) THEN
            in1 := max_included( aitp );
            in2 := in1;
          END_IF;
        END_IF;
        IF strictly_in( acp, aitp ) THEN
          rmax := rc + rmxp;
          rmax_in := max_included( ritp );
        ELSE
          rmax := r0;
          rmax_in := in0;
          IF rmax = r1 THEN
            rmax_in := rmax_in OR in1;
          END_IF;
          IF rmax &lt; r1 THEN
            rmax := r1;
            rmax_in := in1;
          END_IF;
          IF rmax = r2 THEN
            rmax_in := rmax_in OR in2;
          END_IF;
          IF rmax &lt; r2 THEN
            rmax := r2;
            rmax_in := in2;
          END_IF;
          IF rmax = r3 THEN
            rmax_in := rmax_in OR in3;
          END_IF;
          IF rmax &lt; r3 THEN
            rmax := r3;
            rmax_in := in3;
          END_IF;
        END_IF;
        IF strictly_in( apc, aitp ) THEN
          IF rc &gt;= rmxp THEN
            rmin := rc - rmxp;
            rmin_in := max_included( ritp );
          ELSE
            IF rc &lt;= rmnp THEN
              rmin := rmnp - rc;
              rmin_in := min_included( ritp );
            ELSE
              rmin := 0;
              rmin_in := TRUE;
            END_IF;
          END_IF;
        ELSE
          rmin := r0;
          rmin_in := in0;
          a := apc - aitp.min;
          r := rc * COS( a );
          IF ( rmnp &lt; r ) AND ( r &lt; rmxp ) THEN
            rmin := rc * SIN( ABS( a ) );
            rmin_in := min_included( aitp );
          END_IF;
          a := apc - aitp.max;
          r := rc * COS( a );
          IF ( rmnp &lt; r ) AND ( r &lt; rmxp ) THEN
            r := rc * SIN( ABS( a ) );
            inn := max_included( aitp );
            IF r = rmin THEN
              rmin_in := rmin_in OR inn;
            END_IF;
            IF r &lt; rmin THEN
              rmin := r;
              rmin_in := inn;
            END_IF;
          END_IF;
          IF r1 = rmin THEN
            rmin_in := rmin_in OR in1;
          END_IF;
          IF r1 &lt; rmin THEN
            rmin := r1;
            rmin_in := in1;
          END_IF;
          IF r2 = rmin THEN
            rmin_in := rmin_in OR in2;
          END_IF;
          IF r2 &lt; rmin THEN
            rmin := r2;
            rmin_in := in2;
          END_IF;
          IF r3 = rmin THEN
            rmin_in := rmin_in OR in3;
          END_IF;
          IF r3 &lt; rmin THEN
            rmin := r3;
            rmin_in := in3;
          END_IF;
        END_IF;
        IF rc &gt;= rmxp THEN
          ab := acp;
          find_aminmax( ab, a0, a1, a2, a3, in0, in1, in2, in3, amin, amax, amin_in, amax_in );
          a := ACOS( rmxp / rc );
          IF strictly_in( apc - a, aitp ) THEN
            amin := ab - ASIN( rmxp / rc );
            amin_in := max_included( ritp );
          END_IF;
          IF strictly_in( apc + a, aitp ) THEN
            amax := ab + ASIN( rmxp / rc );
            amax_in := max_included( ritp );
          END_IF;
          angle_range( amin, amax );
        ELSE
          IF rc &gt; rmnp THEN
            ab := angle( 0.5 * ( aitp.min + aitp.max ) );
            find_aminmax( ab, a0, a1, a2, a3, in0, in1, in2, in3, amin, amax, amin_in, amax_in );
          ELSE
            ab := angle( 0.5 * ( aitp.min + aitp.max ) );
            a0 := angle( a0 - ab );
            a1 := angle( a1 - ab );
            a2 := angle( a2 - ab );
            a3 := angle( a3 - ab );
            IF a3 &gt; a2 THEN
              a2 := a2 + ( 2 * PI );
            END_IF;
            IF a0 &gt; a1 THEN
              a0 := a0 + ( 2 * PI );
            END_IF;
            IF a3 &lt; a0 THEN
              amin := a3;
              amin_in := in3;
            ELSE
              amin := a0;
              amin_in := in0;
            END_IF;
            IF a2 &gt; a1 THEN
              amax := a2;
              amax_in := in2;
            ELSE
              amax := a1;
              amax_in := in1;
            END_IF;
            IF ( ( amax - amin ) &gt; ( 2 * PI ) ) OR ( ( ( amax - amin ) = ( 2 * PI ) ) AND ( amin_in OR amax_in ) ) THEN
              amin := -PI;
              amin_in := FALSE;
              amax := PI;
              amax_in := TRUE;
            ELSE
              amin := amin + ab;
              amax := amax + ab;
              angle_range( amin, amax );
            END_IF;
          END_IF;
        END_IF;
      END_IF;
      IF rmin_in THEN
        minclo := closed;
      END_IF;
      IF rmax_in THEN
        maxclo := closed;
      END_IF;
      ritv := make_finite_real_interval( rmin, minclo, rmax, maxclo );
    ELSE
      IF ( rc &gt; rmnp ) AND strictly_in( apc, aitp ) THEN
        RETURN( ? );
      END_IF;
      IF ( aitp.max - aitp.min ) = ( 2 * PI ) THEN
        a := angle( aitp.min );
        IF rc &gt; rmnp THEN
          IF max_included( aitp ) THEN
            RETURN( ? );
          END_IF;
          rmin := 0;
          rmin_in := FALSE;
          amin := aitp.min;
          amin_in := FALSE;
          amax := aitp.max;
          amax_in := FALSE;
        ELSE
          rmin := rmnp - rc;
          rmin_in := min_included( ritp );
          amin := -PI;
          amin_in := FALSE;
          amax := PI;
          amax_in := TRUE;
          IF NOT max_included( aitp ) THEN
            IF apc = a THEN
              rmin_in := FALSE;
              amin := aitp.min;
              amin_in := FALSE;
              amax := aitp.max;
              amax_in := FALSE;
            ELSE
              IF acp = a THEN
                amin := aitp.min;
                amin_in := FALSE;
                amax := aitp.max;
                amax_in := FALSE;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      ELSE
        a0 := angle( aitp.min );
        in0 := FALSE;
        a1 := angle( aitp.max );
        in1 := FALSE;
        x := ( xp + ( rmnp * COS( aitp.max ) ) ) - xc;
        y := ( yp + ( rmnp * SIN( aitp.max ) ) ) - yc;
        r2 := SQRT( ( x ** 2 ) + ( y ** 2 ) );
        in2 := min_included( ritp ) AND max_included( aitp );
        IF r2 &lt;&gt; 0 THEN
          a2 := atan2( y, x );
        ELSE
          a2 := a1;
          in2 := in1;
        END_IF;
        x := ( xp + ( rmnp * COS( aitp.min ) ) ) - xc;
        y := ( yp + ( rmnp * SIN( aitp.min ) ) ) - yc;
        r3 := SQRT( ( x ** 2 ) + ( y ** 2 ) );
        in3 := min_included( ritp ) AND min_included( aitp );
        IF r3 &lt;&gt; 0 THEN
          a3 := atan2( y, x );
        ELSE
          a3 := a0;
          in3 := in0;
        END_IF;
        IF rmnp = 0 THEN
          in2 := min_included( ritp );
          in3 := in2;
        END_IF;
        IF ( apc = angle( aitp.min ) ) OR ( acp = angle( aitp.min ) ) THEN
          in0 := min_included( aitp );
          in3 := in0;
        ELSE
          IF ( apc = angle( aitp.max ) ) OR ( acp = angle( aitp.max ) ) THEN
            in1 := max_included( aitp );
            in2 := in1;
          END_IF;
        END_IF;
        IF strictly_in( apc, aitp ) THEN
          rmin := rmnp - rc;
          rmin_in := min_included( ritp );
        ELSE
          rmin := r2;
          rmin_in := in2;
          a := apc - aitp.min;
          r := rc * COS( a );
          IF rmnp &lt; r THEN
            rmin := rc * SIN( ABS( a ) );
            rmin_in := min_included( aitp );
          END_IF;
          a := apc - aitp.max;
          r := rc * COS( a );
          IF rmnp &lt; r THEN
            r := rc * SIN( ABS( a ) );
            inn := max_included( aitp );
            IF r = rmin THEN
              rmin_in := rmin_in OR inn;
            END_IF;
            IF r &lt; rmin THEN
              rmin := r;
              rmin_in := inn;
            END_IF;
          END_IF;
          IF r3 = rmin THEN
            rmin_in := rmin_in OR in3;
          END_IF;
          IF r3 &lt; rmin THEN
            rmin := r3;
            rmin_in := in3;
          END_IF;
        END_IF;
        ab := angle( 0.5 * ( aitp.min + aitp.max ) );
        IF rc &gt; rmnp THEN
          find_aminmax( ab, a0, a1, a2, a3, in0, in1, in2, in3, amin, amax, amin_in, amax_in );
        ELSE
          a0 := angle( a0 - ab );
          a1 := angle( a1 - ab );
          a2 := angle( a2 - ab );
          a3 := angle( a3 - ab );
          IF a3 &gt; a2 THEN
            a2 := a2 + ( 2 * PI );
          END_IF;
          IF a0 &gt; a1 THEN
            a0 := a0 + ( 2 * PI );
          END_IF;
          IF a3 &lt; a0 THEN
            amin := a3;
            amin_in := in3;
          ELSE
            amin := a0;
            amin_in := in0;
          END_IF;
          IF a2 &gt; a1 THEN
            amax := a2;
            amax_in := in2;
          ELSE
            amax := a1;
            amax_in := in1;
          END_IF;
          IF ( ( amax - amin ) &gt; ( 2 * PI ) ) OR ( ( ( amax - amin ) = ( 2 * PI ) ) AND ( amin_in OR amax_in ) ) THEN
            amin := -PI;
            amin_in := FALSE;
            amax := PI;
            amax_in := TRUE;
            IF ( rmin = 0 ) AND rmin_in THEN
              RETURN( ? );
            END_IF;
          ELSE
            amin := amin + ab;
            amax := amax + ab;
            angle_range( amin, amax );
          END_IF;
        END_IF;
      END_IF;
      IF rmin_in THEN
        minclo := closed;
      END_IF;
      ritv := make_real_interval_from_min( rmin, minclo );
    END_IF;
    minclo := open;
    maxclo := open;
    IF amin_in THEN
      minclo := closed;
    END_IF;
    IF amax_in THEN
      maxclo := closed;
    END_IF;
    aitv := make_finite_real_interval( amin, minclo, amax, maxclo );
    RETURN( make_polar_complex_number_region( centre, ritv, aitv ) );</algorithm>
      </function>
      <function name="equal_cregion_pregion">
         <parameter name="crgn">
            <typename name="cartesian_complex_number_region"/>
         </parameter>
         <parameter name="prgn">
            <typename name="polar_complex_number_region"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      arng : REAL;
      amin : REAL;
      xc   : REAL;
      yc   : REAL;
      aitv : real_interval;
      xitv : real_interval;
      yitv : real_interval;
      c_in : BOOLEAN;
    END_LOCAL;
    IF ( NOT EXISTS( crgn ) ) OR ( NOT EXISTS( prgn ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF max_exists( prgn.distance_constraint ) THEN
      RETURN( FALSE );
    END_IF;
    IF real_min( prgn.distance_constraint ) &lt;&gt; 0 THEN
      RETURN( FALSE );
    END_IF;
    c_in := min_included( prgn.distance_constraint );
    aitv := prgn.direction_constraint;
    amin := aitv.min;
    arng := aitv.max - amin;
    xc := prgn.centre.real_part;
    yc := prgn.centre.imag_part;
    xitv := crgn.real_constraint;
    yitv := crgn.imag_constraint;
    IF arng = ( 0.5 * PI ) THEN
      IF amin = 0 THEN
        RETURN( ( NOT max_exists( xitv ) ) AND ( NOT max_exists( yitv ) ) AND min_exists( xitv ) AND min_exists( yitv ) AND ( 
            real_min( xitv ) = xc ) AND ( real_min( yitv ) = yc ) AND ( ( c_in AND min_included( aitv ) AND max_included( aitv ) 
            AND min_included( xitv ) AND min_included( yitv ) ) OR ( ( NOT c_in ) AND ( NOT min_included( aitv ) ) AND 
            max_included( aitv ) AND min_included( xitv ) AND ( NOT min_included( yitv ) ) ) OR ( ( NOT c_in ) AND min_included( 
            aitv ) AND ( NOT max_included( aitv ) ) AND ( NOT min_included( xitv ) ) AND min_included( yitv ) ) OR ( ( NOT c_in ) 
            AND ( NOT min_included( aitv ) ) AND ( NOT max_included( aitv ) ) AND ( NOT min_included( xitv ) ) AND ( NOT 
            min_included( yitv ) ) ) ) );
      END_IF;
      IF amin = ( 0.5 * PI ) THEN
        RETURN( max_exists( xitv ) AND ( NOT max_exists( yitv ) ) AND ( NOT min_exists( xitv ) ) AND min_exists( yitv ) AND ( 
            real_max( xitv ) = xc ) AND ( real_min( yitv ) = yc ) AND ( ( c_in AND min_included( aitv ) AND max_included( aitv ) 
            AND max_included( xitv ) AND min_included( yitv ) ) OR ( ( NOT c_in ) AND ( NOT min_included( aitv ) ) AND 
            max_included( aitv ) AND max_included( xitv ) AND ( NOT min_included( yitv ) ) ) OR ( ( NOT c_in ) AND min_included( 
            aitv ) AND ( NOT max_included( aitv ) ) AND ( NOT max_included( xitv ) ) AND min_included( yitv ) ) OR ( ( NOT c_in ) 
            AND ( NOT min_included( aitv ) ) AND ( NOT max_included( aitv ) ) AND ( NOT max_included( xitv ) ) AND ( NOT 
            min_included( yitv ) ) ) ) );
      END_IF;
      IF amin = ( -PI ) THEN
        RETURN( max_exists( xitv ) AND max_exists( yitv ) AND ( NOT min_exists( xitv ) ) AND ( NOT min_exists( yitv ) ) AND ( 
            real_max( xitv ) = xc ) AND ( real_max( yitv ) = yc ) AND ( ( c_in AND min_included( aitv ) AND max_included( aitv ) 
            AND max_included( xitv ) AND max_included( yitv ) ) OR ( ( NOT c_in ) AND ( NOT min_included( aitv ) ) AND 
            max_included( aitv ) AND max_included( xitv ) AND ( NOT max_included( yitv ) ) ) OR ( ( NOT c_in ) AND min_included( 
            aitv ) AND ( NOT max_included( aitv ) ) AND ( NOT max_included( xitv ) ) AND max_included( yitv ) ) OR ( ( NOT c_in ) 
            AND ( NOT min_included( aitv ) ) AND ( NOT max_included( aitv ) ) AND ( NOT max_included( xitv ) ) AND ( NOT 
            max_included( yitv ) ) ) ) );
      END_IF;
      IF amin = ( ( -0.5 ) * PI ) THEN
        RETURN( ( NOT max_exists( xitv ) ) AND max_exists( yitv ) AND min_exists( xitv ) AND ( NOT min_exists( yitv ) ) AND ( 
            real_min( xitv ) = xc ) AND ( real_max( yitv ) = yc ) AND ( ( c_in AND min_included( aitv ) AND max_included( aitv ) 
            AND min_included( xitv ) AND max_included( yitv ) ) OR ( ( NOT c_in ) AND ( NOT min_included( aitv ) ) AND 
            max_included( aitv ) AND min_included( xitv ) AND ( NOT max_included( yitv ) ) ) OR ( ( NOT c_in ) AND min_included( 
            aitv ) AND ( NOT max_included( aitv ) ) AND ( NOT min_included( xitv ) ) AND max_included( yitv ) ) OR ( ( NOT c_in ) 
            AND ( NOT min_included( aitv ) ) AND ( NOT max_included( aitv ) ) AND ( NOT min_included( xitv ) ) AND ( NOT 
            max_included( yitv ) ) ) ) );
      END_IF;
    END_IF;
    IF arng = PI THEN
      IF amin = 0 THEN
        RETURN( ( NOT max_exists( xitv ) ) AND ( NOT max_exists( yitv ) ) AND ( NOT min_exists( xitv ) ) AND min_exists( yitv ) 
            AND ( real_min( yitv ) = yc ) AND ( ( c_in AND min_included( aitv ) AND max_included( aitv ) AND min_included( yitv ) ) 
            OR ( ( NOT c_in ) AND ( NOT min_included( aitv ) ) AND ( NOT max_included( aitv ) ) AND ( NOT min_included( yitv ) ) ) ) );
      END_IF;
      IF amin = ( 0.5 * PI ) THEN
        RETURN( max_exists( xitv ) AND ( NOT max_exists( yitv ) ) AND ( NOT min_exists( xitv ) ) AND ( NOT min_exists( yitv ) ) 
            AND ( real_max( xitv ) = xc ) AND ( ( c_in AND min_included( aitv ) AND max_included( aitv ) AND max_included( xitv ) ) 
            OR ( ( NOT c_in ) AND ( NOT min_included( aitv ) ) AND ( NOT max_included( aitv ) ) AND ( NOT max_included( xitv ) ) ) ) );
      END_IF;
      IF amin = ( -PI ) THEN
        RETURN( ( NOT max_exists( xitv ) ) AND max_exists( yitv ) AND ( NOT min_exists( xitv ) ) AND ( NOT min_exists( yitv ) ) 
            AND ( real_max( yitv ) = yc ) AND ( ( c_in AND min_included( aitv ) AND max_included( aitv ) AND max_included( yitv ) ) 
            OR ( ( NOT c_in ) AND ( NOT min_included( aitv ) ) AND ( NOT max_included( aitv ) ) AND ( NOT max_included( yitv ) ) ) ) );
      END_IF;
      IF amin = ( ( -0.5 ) * PI ) THEN
        RETURN( ( NOT max_exists( xitv ) ) AND ( NOT max_exists( yitv ) ) AND min_exists( xitv ) AND ( NOT min_exists( yitv ) ) 
            AND ( real_min( xitv ) = xc ) AND ( ( c_in AND min_included( aitv ) AND max_included( aitv ) AND min_included( xitv ) ) 
            OR ( ( NOT c_in ) AND ( NOT min_included( aitv ) ) AND ( NOT max_included( aitv ) ) AND ( NOT min_included( xitv ) ) ) ) );
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="equal_maths_functions">
         <parameter name="fun1">
            <typename name="maths_function"/>
         </parameter>
         <parameter name="fun2">
            <typename name="maths_function"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      cum : LOGICAL;
    END_LOCAL;
    IF fun1 = fun2 THEN
      RETURN( TRUE );
    END_IF;
    cum := equal_maths_spaces( fun1.domain, fun2.domain );
    IF cum = FALSE THEN
      RETURN( FALSE );
    END_IF;
    cum := cum AND equal_maths_spaces( fun1.range, fun2.range );
    IF cum = FALSE THEN
      RETURN( FALSE );
    END_IF;
    RETURN( UNKNOWN );</algorithm>
      </function>
      <function name="equal_maths_spaces">
         <parameter name="spc1">
            <typename name="maths_space"/>
         </parameter>
         <parameter name="spc2">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      spc1types : SET OF STRING := stripped_typeof( spc1 );
      spc2types : SET OF STRING := stripped_typeof( spc2 );
      set1      : SET OF maths_value;
      set2      : SET OF maths_value;
      cum       : LOGICAL := TRUE;
      base      : maths_space;
      expnt     : INTEGER;
      factors   : LIST OF maths_space;
      factors2  : LIST OF maths_space;
      fs1       : function_space;
      fs2       : function_space;
      cum2      : LOGICAL;
    END_LOCAL;
    IF spc1 = spc2 THEN
      RETURN( TRUE );
    END_IF;
    IF 'FINITE_SPACE' IN spc1types THEN
      set1 := spc1\finite_space.members;
      IF 'FINITE_SPACE' IN spc2types THEN
        set2 := spc2\finite_space.members;
        REPEAT i := 1 TO SIZEOF( set1 ) BY 1;
          cum := cum AND member_of( set1[i], spc2 );
          IF cum = FALSE THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
        IF cum = TRUE THEN
          REPEAT i := 1 TO SIZEOF( set2 ) BY 1;
            cum := cum AND member_of( set2[i], spc1 );
            IF cum = FALSE THEN
              RETURN( FALSE );
            END_IF;
          END_REPEAT;
        END_IF;
        RETURN( cum );
      END_IF;
      IF 'FINITE_INTEGER_INTERVAL' IN spc2types THEN
        set2 := [];
        REPEAT i := spc2\finite_integer_interval.min TO spc2\finite_integer_interval.max BY 1;
          set2 := set2 + [i];
        END_REPEAT;
        RETURN( equal_maths_spaces( spc1, make_finite_space( set2 ) ) );
      END_IF;
    END_IF;
    IF ( 'FINITE_INTEGER_INTERVAL' IN spc1types ) AND ( 'FINITE_SPACE' IN spc2types ) THEN
      set1 := [];
      REPEAT i := spc1\finite_integer_interval.min TO spc1\finite_integer_interval.max BY 1;
        set1 := set1 + [i];
      END_REPEAT;
      RETURN( equal_maths_spaces( make_finite_space( set1 ), spc2 ) );
    END_IF;
    IF ( 'CARTESIAN_COMPLEX_NUMBER_REGION' IN spc1types ) AND ( 'POLAR_COMPLEX_NUMBER_REGION' IN spc2types ) THEN
      RETURN( equal_cregion_pregion( spc1, spc2 ) );
    END_IF;
    IF ( 'POLAR_COMPLEX_NUMBER_REGION' IN spc1types ) AND ( 'CARTESIAN_COMPLEX_NUMBER_REGION' IN spc2types ) THEN
      RETURN( equal_cregion_pregion( spc2, spc1 ) );
    END_IF;
    IF 'UNIFORM_PRODUCT_SPACE' IN spc1types THEN
      base := spc1\uniform_product_space.base;
      expnt := spc1\uniform_product_space.exponent;
      IF 'UNIFORM_PRODUCT_SPACE' IN spc2types THEN
        IF expnt &lt;&gt; spc2\uniform_product_space.exponent THEN
          RETURN( FALSE );
        END_IF;
        RETURN( equal_maths_spaces( base, spc2\uniform_product_space.base ) );
      END_IF;
      IF 'LISTED_PRODUCT_SPACE' IN spc2types THEN
        factors := spc2\listed_product_space.factors;
        IF expnt &lt;&gt; SIZEOF( factors ) THEN
          RETURN( FALSE );
        END_IF;
        REPEAT i := 1 TO SIZEOF( factors ) BY 1;
          cum := cum AND equal_maths_spaces( base, factors[i] );
          IF cum = FALSE THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
        RETURN( cum );
      END_IF;
    END_IF;
    IF 'LISTED_PRODUCT_SPACE' IN spc1types THEN
      factors := spc1\listed_product_space.factors;
      IF 'UNIFORM_PRODUCT_SPACE' IN spc2types THEN
        IF spc2\uniform_product_space.exponent &lt;&gt; SIZEOF( factors ) THEN
          RETURN( FALSE );
        END_IF;
        base := spc2\uniform_product_space.base;
        REPEAT i := 1 TO SIZEOF( factors ) BY 1;
          cum := cum AND equal_maths_spaces( base, factors[i] );
          IF cum = FALSE THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
        RETURN( cum );
      END_IF;
      IF 'LISTED_PRODUCT_SPACE' IN spc2types THEN
        factors2 := spc2\listed_product_space.factors;
        IF SIZEOF( factors ) &lt;&gt; SIZEOF( factors2 ) THEN
          RETURN( FALSE );
        END_IF;
        REPEAT i := 1 TO SIZEOF( factors ) BY 1;
          cum := cum AND equal_maths_spaces( factors[i], factors2[i] );
          IF cum = FALSE THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
        RETURN( cum );
      END_IF;
    END_IF;
    IF ( 'EXTENDED_TUPLE_SPACE' IN spc1types ) AND ( 'EXTENDED_TUPLE_SPACE' IN spc2types ) THEN
      RETURN( equal_maths_spaces( spc1\extended_tuple_space.extender, spc2\extended_tuple_space.extender ) AND 
          equal_maths_spaces( spc1\extended_tuple_space.base, spc2\extended_tuple_space.base ) );
    END_IF;
    IF ( 'FUNCTION_SPACE' IN spc1types ) AND ( 'FUNCTION_SPACE' IN spc2types ) THEN
      fs1 := spc1;
      fs2 := spc2;
      IF fs1.domain_constraint &lt;&gt; fs2.domain_constraint THEN
        IF ( fs1.domain_constraint = sc_equal ) OR ( fs2.domain_constraint = sc_equal ) THEN
          RETURN( FALSE );
        END_IF;
        IF fs1.domain_constraint &lt;&gt; sc_subspace THEN
          fs1 := spc2;
          fs2 := spc1;
        END_IF;
        IF ( fs1.domain_constraint &lt;&gt; sc_subspace ) OR ( fs2.domain_constraint &lt;&gt; sc_member ) THEN
          RETURN( UNKNOWN );
        END_IF;
        IF any_space_satisfies( fs1.domain_constraint, fs1.domain_argument ) &lt;&gt; any_space_satisfies( fs2.domain_constraint, fs2.
            domain_argument ) THEN
          RETURN( FALSE );
        END_IF;
        IF NOT ( 'FINITE_SPACE' IN stripped_typeof( fs2.domain_argument ) ) THEN
          RETURN( FALSE );
        END_IF;
        IF SIZEOF( [ 'FINITE_SPACE', 'FINITE_INTEGER_INTERVAL'] * stripped_typeof( fs1.domain_argument ) ) = 0 THEN
          RETURN( FALSE );
        END_IF;
        RETURN( UNKNOWN );
      END_IF;
      cum := equal_maths_spaces( fs1.domain_argument, fs2.domain_argument );
      IF cum = FALSE THEN
        RETURN( FALSE );
      END_IF;
      IF fs1.range_constraint &lt;&gt; fs2.range_constraint THEN
        IF ( fs1.range_constraint = sc_equal ) OR ( fs2.range_constraint = sc_equal ) THEN
          RETURN( FALSE );
        END_IF;
        IF fs1.range_constraint &lt;&gt; sc_subspace THEN
          fs1 := spc2;
          fs2 := spc1;
        END_IF;
        IF ( fs1.range_constraint &lt;&gt; sc_subspace ) OR ( fs2.range_constraint &lt;&gt; sc_member ) THEN
          RETURN( UNKNOWN );
        END_IF;
        IF any_space_satisfies( fs1.range_constraint, fs1.range_argument ) &lt;&gt; any_space_satisfies( fs2.range_constraint, fs2.
            range_argument ) THEN
          RETURN( FALSE );
        END_IF;
        IF NOT ( 'FINITE_SPACE' IN stripped_typeof( fs2.range_argument ) ) THEN
          RETURN( FALSE );
        END_IF;
        IF SIZEOF( [ 'FINITE_SPACE', 'FINITE_INTEGER_INTERVAL'] * stripped_typeof( fs1.range_argument ) ) = 0 THEN
          RETURN( FALSE );
        END_IF;
        RETURN( UNKNOWN );
      END_IF;
      cum := cum AND equal_maths_spaces( fs1.range_argument, fs2.range_argument );
      RETURN( cum );
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="equal_maths_values">
         <parameter name="val1">
            <typename name="maths_value"/>
         </parameter>
         <parameter name="val2">
            <typename name="maths_value"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>FUNCTION mem_of_vs(
                 val1, val2 : maths_value
             ) : LOGICAL;
      IF NOT has_values_space( val2 ) THEN
        RETURN( UNKNOWN );
      END_IF;
      IF NOT member_of( val1, values_space_of( val2 ) ) THEN
        RETURN( FALSE );
      END_IF;
      RETURN( UNKNOWN );

    END_FUNCTION;

    LOCAL
      types1 : SET OF STRING;
      types2 : SET OF STRING;
      list1  : LIST OF maths_value;
      list2  : LIST OF maths_value;
      cum    : LOGICAL := TRUE;
    END_LOCAL;
    IF ( NOT EXISTS( val1 ) ) OR ( NOT EXISTS( val2 ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF val1 = val2 THEN
      RETURN( TRUE );
    END_IF;
    types1 := stripped_typeof( val1 );
    types2 := stripped_typeof( val2 );
    IF ( 'MATHS_ATOM' IN types1 ) OR ( 'COMPLEX_NUMBER_LITERAL' IN types1 ) THEN
      IF 'MATHS_ATOM' IN types2 THEN
        RETURN( FALSE );
      END_IF;
      IF 'COMPLEX_NUMBER_LITERAL' IN types2 THEN
        RETURN( FALSE );
      END_IF;
      IF 'LIST' IN types2 THEN
        RETURN( FALSE );
      END_IF;
      IF 'MATHS_SPACE' IN types2 THEN
        RETURN( FALSE );
      END_IF;
      IF 'MATHS_FUNCTION' IN types2 THEN
        RETURN( FALSE );
      END_IF;
      IF 'GENERIC_EXPRESSION' IN types2 THEN
        RETURN( mem_of_vs( val1, val2 ) );
      END_IF;
      RETURN( UNKNOWN );
    END_IF;
    IF ( 'MATHS_ATOM' IN types2 ) OR ( 'COMPLEX_NUMBER_LITERAL' IN types2 ) THEN
      RETURN( equal_maths_values( val2, val1 ) );
    END_IF;
    IF 'LIST' IN types1 THEN
      IF 'LIST' IN types2 THEN
        list1 := val1;
        list2 := val2;
        IF SIZEOF( list1 ) &lt;&gt; SIZEOF( list2 ) THEN
          RETURN( FALSE );
        END_IF;
        REPEAT i := 1 TO SIZEOF( list1 ) BY 1;
          cum := cum AND equal_maths_values( list1[i], list2[i] );
          IF cum = FALSE THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
        RETURN( cum );
      END_IF;
      IF 'MATHS_SPACE' IN types2 THEN
        RETURN( FALSE );
      END_IF;
      IF 'MATHS_FUNCTION' IN types2 THEN
        RETURN( FALSE );
      END_IF;
      IF 'GENERIC_EXPRESSION' IN types2 THEN
        RETURN( mem_of_vs( val1, val2 ) );
      END_IF;
      RETURN( UNKNOWN );
    END_IF;
    IF 'LIST' IN types2 THEN
      RETURN( equal_maths_values( val2, val1 ) );
    END_IF;
    IF 'MATHS_SPACE' IN types1 THEN
      IF 'MATHS_SPACE' IN types2 THEN
        RETURN( equal_maths_spaces( val1, val2 ) );
      END_IF;
      IF 'MATHS_FUNCTION' IN types2 THEN
        RETURN( FALSE );
      END_IF;
      IF 'GENERIC_EXPRESSION' IN types2 THEN
        RETURN( mem_of_vs( val1, val2 ) );
      END_IF;
      RETURN( UNKNOWN );
    END_IF;
    IF 'MATHS_SPACE' IN types2 THEN
      RETURN( equal_maths_values( val2, val1 ) );
    END_IF;
    IF 'MATHS_FUNCTION' IN types1 THEN
      IF 'MATHS_FUNCTION' IN types2 THEN
        RETURN( equal_maths_functions( val1, val2 ) );
      END_IF;
      IF 'GENERIC_EXPRESSION' IN types2 THEN
        RETURN( mem_of_vs( val1, val2 ) );
      END_IF;
      RETURN( UNKNOWN );
    END_IF;
    IF 'MATHS_FUNCTION' IN types2 THEN
      RETURN( equal_maths_values( val2, val1 ) );
    END_IF;
    IF ( 'GENERIC_EXPRESSION' IN types1 ) AND ( 'GENERIC_EXPRESSION' IN types2 ) THEN
      IF ( NOT has_values_space( val1 ) ) OR ( NOT has_values_space( val2 ) ) THEN
        RETURN( UNKNOWN );
      END_IF;
      IF NOT compatible_spaces( values_space_of( val1 ), values_space_of( val2 ) ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    RETURN( UNKNOWN );</algorithm>
      </function>
      <function name="es_subspace_of_es">
         <parameter name="es1">
            <typename name="elementary_space_enumerators"/>
         </parameter>
         <parameter name="es2">
            <typename name="elementary_space_enumerators"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF ( NOT EXISTS( es1 ) ) OR ( NOT EXISTS( es2 ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF es1 = es2 THEN
      RETURN( TRUE );
    END_IF;
    IF es2 = es_generics THEN
      RETURN( TRUE );
    END_IF;
    IF ( es1 = es_booleans ) AND ( es2 = es_logicals ) THEN
      RETURN( TRUE );
    END_IF;
    IF ( es2 = es_numbers ) AND ( ( es1 = es_complex_numbers ) OR ( es1 = es_reals ) OR ( es1 = es_integers ) ) THEN
      RETURN( TRUE );
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="expression_is_constant">
         <parameter name="expr">
            <typename name="generic_expression"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>RETURN( bool( SIZEOF( free_variables_of( expr ) ) = 0 ) );</algorithm>
      </function>
      <function name="external_version_assignment_is_valid">
         <parameter name="aia">
            <typename name="applied_external_identification_assignment"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      item : external_identification_item;
      role : identification_role;
    END_LOCAL;
    role := aia.role;
    IF role.name = 'version' THEN
      REPEAT i := LOINDEX( aia\applied_external_identification_assignment.items ) TO HIINDEX( aia\
          applied_external_identification_assignment.items ) BY 1;
        item := aia\applied_external_identification_assignment.items[i];
        IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EXTERNALLY_DEFINED_GENERAL_PROPERTY'] * 
            TYPEOF( item ) ) = 0 THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
      RETURN( TRUE );
    ELSE
      RETURN( TRUE );
    END_IF;</algorithm>
      </function>
      <function name="extract_factors">
         <parameter name="tspace">
            <typename name="tuple_space"/>
         </parameter>
         <parameter name="m">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="n">
            <builtintype type="INTEGER"/>
         </parameter>
         <typename name="tuple_space"/>
         <algorithm>LOCAL
      tsp : tuple_space := the_zero_tuple_space;
    END_LOCAL;
    REPEAT i := m TO n BY 1;
      tsp := assoc_product_space( tsp, factor_space( tspace, i ) );
    END_REPEAT;
    RETURN( tsp );</algorithm>
      </function>
      <function name="face_bound_reversed">
         <parameter name="a_face_bound">
            <typename name="face_bound"/>
         </parameter>
         <typename name="face_bound"/>
         <algorithm>LOCAL
      the_reverse : face_bound;
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_OUTER_BOUND' IN TYPEOF( a_face_bound ) THEN
      the_reverse := dummy_tri || face_bound( a_face_bound\face_bound.bound, NOT a_face_bound\face_bound.orientation ) || 
          face_outer_bound(  );
    ELSE
      the_reverse := dummy_tri || face_bound( a_face_bound.bound, NOT a_face_bound.orientation );
    END_IF;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="face_reversed">
         <parameter name="a_face">
            <typename name="face"/>
         </parameter>
         <typename name="oriented_face"/>
         <algorithm>LOCAL
      the_reverse : oriented_face;
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_FACE' IN TYPEOF( a_face ) THEN
      the_reverse := dummy_tri || face( set_of_topology_reversed( a_face.bounds ) ) || oriented_face( a_face\oriented_face.
          face_element, NOT a_face\oriented_face.orientation );
    ELSE
      the_reverse := dummy_tri || face( set_of_topology_reversed( a_face.bounds ) ) || oriented_face( a_face, FALSE );
    END_IF;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="factor1">
         <parameter name="tspace">
            <typename name="tuple_space"/>
         </parameter>
         <typename name="maths_space"/>
         <algorithm>LOCAL
      typenames : SET OF STRING := TYPEOF( tspace );
    END_LOCAL;
    IF ( schema_prefix + 'UNIFORM_PRODUCT_SPACE' ) IN typenames THEN
      RETURN( tspace\uniform_product_space.base );
    END_IF;
    IF ( schema_prefix + 'LISTED_PRODUCT_SPACE' ) IN typenames THEN
      RETURN( tspace\listed_product_space.factors[1] );
    END_IF;
    IF ( schema_prefix + 'EXTENDED_TUPLE_SPACE' ) IN typenames THEN
      RETURN( factor1( tspace\extended_tuple_space.base ) );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="factor_space">
         <parameter name="tspace">
            <typename name="tuple_space"/>
         </parameter>
         <parameter name="idx">
            <typename name="positive_integer"/>
         </parameter>
         <typename name="maths_space"/>
         <algorithm>LOCAL
      typenames : SET OF STRING := TYPEOF( tspace );
    END_LOCAL;
    IF ( schema_prefix + 'UNIFORM_PRODUCT_SPACE' ) IN typenames THEN
      IF idx &lt;= tspace\uniform_product_space.exponent THEN
        RETURN( tspace\uniform_product_space.base );
      END_IF;
      RETURN( ? );
    END_IF;
    IF ( schema_prefix + 'LISTED_PRODUCT_SPACE' ) IN typenames THEN
      IF idx &lt;= SIZEOF( tspace\listed_product_space.factors ) THEN
        RETURN( tspace\listed_product_space.factors[idx] );
      END_IF;
      RETURN( ? );
    END_IF;
    IF ( schema_prefix + 'EXTENDED_TUPLE_SPACE' ) IN typenames THEN
      IF idx &lt;= space_dimension( tspace\extended_tuple_space.base ) THEN
        RETURN( factor_space( tspace\extended_tuple_space.base, idx ) );
      END_IF;
      RETURN( tspace\extended_tuple_space.extender );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="find_assembly_root">
         <parameter name="constituent">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="product_definition"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="product_definition"/>
         <algorithm>LOCAL
      local_relation  : SET OF assembly_component_usage := [];
      local_relation2 : BAG OF assembly_component_usage := [];
      local_parent    : SET OF product_definition := [];
      root            : SET OF product_definition;
      i               : INTEGER := 0;
      j               : INTEGER := 0;
    END_LOCAL;
    IF ( SIZEOF( constituent ) = 1 ) AND assembly_root( constituent[1] ) THEN
      RETURN( [constituent[1]] );
    ELSE
      IF SIZEOF( constituent ) = 0 THEN
        RETURN( [] );
      ELSE
        REPEAT j := 1 TO HIINDEX( constituent ) BY 1;
          local_relation2 := local_relation2 + QUERY ( pdr &lt;* USEDIN( constituent[j], 
              'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.'  + 
              'RELATED_PRODUCT_DEFINITION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
              + 'ASSEMBLY_COMPONENT_USAGE'  IN TYPEOF( pdr ) ) );
        END_REPEAT;
        local_relation := bag_to_set( local_relation2 );
        IF SIZEOF( local_relation ) = 0 THEN
          IF SIZEOF( constituent ) = 1 THEN
            RETURN( [constituent[1]] );
          ELSE
            RETURN( [] );
          END_IF;
        ELSE
          REPEAT i := 1 TO HIINDEX( local_relation ) BY 1;
            REPEAT j := 1 TO HIINDEX( constituent ) BY 1;
              IF local_relation[i].relating_product_definition &lt;&gt; constituent[j] THEN
                local_parent := local_parent + local_relation[i].relating_product_definition;
              END_IF;
            END_REPEAT;
          END_REPEAT;
          IF ( SIZEOF( local_parent ) = 1 ) AND assembly_root( local_parent[1] ) THEN
            RETURN( [local_parent[1]] );
          ELSE
            IF SIZEOF( local_parent ) = 0 THEN
              RETURN( [] );
            ELSE
              root := find_assembly_root( local_parent );
              IF SIZEOF( root ) = 1 THEN
                RETURN( root );
              ELSE
                IF SIZEOF( root ) = 0 THEN
                  RETURN( [] );
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( [] );</algorithm>
      </function>
      <function name="find_representative_shape_representation_of_product_definition">
         <parameter name="item">
            <typename name="product_definition"/>
         </parameter>
         <typename name="shape_representation"/>
         <algorithm>LOCAL
      local_s_r : SET OF shape_representation := [];
    END_LOCAL;
    local_s_r := QUERY ( z &lt;* find_shape_representation_of_product_definition( item ) | ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATIVE_SHAPE_REPRESENTATION'  IN TYPEOF( z ) ) );
    IF SIZEOF( local_s_r ) = 1 THEN
      RETURN( local_s_r[1] );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="find_representative_shape_representation_of_shape_aspect">
         <parameter name="item">
            <typename name="shape_aspect"/>
         </parameter>
         <typename name="shape_representation"/>
         <algorithm>LOCAL
      local_s_r : SET OF shape_representation := [];
    END_LOCAL;
    local_s_r := QUERY ( z &lt;* find_shape_representation_of_shape_aspect( item ) | ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATIVE_SHAPE_REPRESENTATION'  IN TYPEOF( z ) ) );
    IF SIZEOF( local_s_r ) = 1 THEN
      RETURN( local_s_r[1] );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="find_shape_representation_of_product_definition">
         <parameter name="item">
            <typename name="product_definition"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="shape_representation"/>
         <algorithm>LOCAL
      local_p_d_s  : SET OF product_definition_shape := [];
      local_p_d_s2 : BAG OF product_definition_shape := [];
      local_s_d_r  : SET OF shape_definition_representation := [];
      local_s_d_r2 : BAG OF shape_definition_representation := [];
      local_s_r    : SET OF shape_representation := [];
      i            : INTEGER;
    END_LOCAL;
    local_p_d_s2 := local_p_d_s2 + QUERY ( pd &lt;* USEDIN( item, 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) );
    local_p_d_s := bag_to_set( local_p_d_s2 );
    REPEAT i := 1 TO HIINDEX( local_p_d_s ) BY 1;
      local_s_d_r2 := local_s_d_r2 + QUERY ( pdr &lt;* USEDIN( local_p_d_s[i], 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )
          | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINITION_REPRESENTATION' IN TYPEOF( pdr ) ) );
    END_REPEAT;
    local_s_d_r := bag_to_set( local_s_d_r2 );
    REPEAT i := 1 TO HIINDEX( local_s_d_r ) BY 1;
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION' IN TYPEOF( local_s_d_r[i].
          used_representation ) THEN
        local_s_r := local_s_r + local_s_d_r[i].used_representation;
      END_IF;
    END_REPEAT;
    RETURN( local_s_r );</algorithm>
      </function>
      <function name="find_shape_representation_of_shape_aspect">
         <parameter name="item">
            <typename name="shape_aspect"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="shape_representation"/>
         <algorithm>LOCAL
      local_p_d    : SET OF property_definition := [];
      local_s_d_r  : SET OF shape_definition_representation := [];
      local_s_d_r2 : BAG OF shape_definition_representation := [];
      local_s_r    : SET OF shape_representation := [];
      i            : INTEGER;
    END_LOCAL;
    local_p_d := bag_to_set( USEDIN( item, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
        + 'PROPERTY_DEFINITION.DEFINITION'  ) );
    REPEAT i := 1 TO HIINDEX( local_p_d ) BY 1;
      local_s_d_r2 := local_s_d_r2 + QUERY ( pdr &lt;* USEDIN( local_p_d[i], 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  )
          | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINITION_REPRESENTATION' IN TYPEOF( pdr ) ) );
    END_REPEAT;
    local_s_d_r := bag_to_set( local_s_d_r2 );
    REPEAT i := 1 TO HIINDEX( local_s_d_r ) BY 1;
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_REPRESENTATION' IN TYPEOF( local_s_d_r[i].
          used_representation ) THEN
        local_s_r := local_s_r + local_s_d_r[i].used_representation;
      END_IF;
    END_REPEAT;
    RETURN( local_s_r );</algorithm>
      </function>
      <function name="first_proj_axis">
         <parameter name="z_axis">
            <typename name="direction"/>
         </parameter>
         <parameter name="arg">
            <typename name="direction"/>
         </parameter>
         <typename name="direction"/>
         <algorithm>LOCAL
      x_axis : direction;
      v      : direction;
      z      : direction;
      x_vec  : vector;
    END_LOCAL;
    IF NOT EXISTS( z_axis ) THEN
      RETURN( ? );
    ELSE
      z := normalise( z_axis );
      IF NOT EXISTS( arg ) THEN
        IF ( z.direction_ratios &lt;&gt; [1, 0, 0] ) AND ( z.direction_ratios &lt;&gt; [-1, 0, 0] ) THEN
          v := dummy_gri || direction( [1, 0, 0] );
        ELSE
          v := dummy_gri || direction( [0, 1, 0] );
        END_IF;
      ELSE
        IF arg.dim &lt;&gt; 3 THEN
          RETURN( ? );
        END_IF;
        IF cross_product( arg, z ).magnitude = 0 THEN
          RETURN( ? );
        ELSE
          v := normalise( arg );
        END_IF;
      END_IF;
      x_vec := scalar_times_vector( dot_product( v, z ), z );
      x_axis := vector_difference( v, x_vec ).orientation;
      x_axis := normalise( x_axis );
    END_IF;
    RETURN( x_axis );</algorithm>
      </function>
      <function name="free_variables_of">
         <parameter name="expr">
            <typename name="generic_expression"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="generic_variable"/>
         <algorithm>LOCAL
      typenames : SET OF STRING := stripped_typeof( expr );
      result    : SET OF generic_variable := [];
      exprs     : LIST OF generic_expression := [];
    END_LOCAL;
    IF 'GENERIC_LITERAL' IN typenames THEN
      RETURN( result );
    END_IF;
    IF 'GENERIC_VARIABLE' IN typenames THEN
      result := result + expr;
      RETURN( result );
    END_IF;
    IF 'QUANTIFIER_EXPRESSION' IN typenames THEN
      exprs := QUERY ( ge &lt;* expr\multiple_arity_generic_expression.operands | ( NOT ( ge IN expr\quantifier_expression.variables ) ) );
      REPEAT i := 1 TO SIZEOF( exprs ) BY 1;
        result := result + free_variables_of( exprs[i] );
      END_REPEAT;
      REPEAT i := 1 TO SIZEOF( expr\quantifier_expression.variables ) BY 1;
        result := result - expr\quantifier_expression.variables[i];
      END_REPEAT;
      RETURN( result );
    END_IF;
    IF 'UNARY_GENERIC_EXPRESSION' IN typenames THEN
      RETURN( free_variables_of( expr\unary_generic_expression.operand ) );
    END_IF;
    IF 'BINARY_GENERIC_EXPRESSION' IN typenames THEN
      result := free_variables_of( expr\binary_generic_expression.operands[1] );
      RETURN( result + free_variables_of( expr\binary_generic_expression.operands[2] ) );
    END_IF;
    IF 'MULTIPLE_ARITY_GENERIC_EXPRESSION' IN typenames THEN
      REPEAT i := 1 TO SIZEOF( expr\multiple_arity_generic_expression.operands ) BY 1;
        result := result + free_variables_of( expr\multiple_arity_generic_expression.operands[i] );
      END_REPEAT;
      RETURN( result );
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="function_applicability">
         <parameter name="func">
            <typename name="maths_function_select"/>
         </parameter>
         <parameter name="arguments">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="maths_value"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      domain       : tuple_space := convert_to_maths_function( func ).domain;
      domain_types : SET OF STRING := TYPEOF( domain );
      narg         : positive_integer := SIZEOF( arguments );
      arg          : generic_expression;
    END_LOCAL;
    IF ( schema_prefix + 'PRODUCT_SPACE' ) IN domain_types THEN
      IF space_dimension( domain ) &lt;&gt; narg THEN
        RETURN( FALSE );
      END_IF;
    ELSE
      IF ( schema_prefix + 'EXTENDED_TUPLE_SPACE' ) IN domain_types THEN
        IF space_dimension( domain ) &gt; narg THEN
          RETURN( FALSE );
        END_IF;
      ELSE
        RETURN( FALSE );
      END_IF;
    END_IF;
    REPEAT i := 1 TO narg BY 1;
      arg := convert_to_operand( arguments[i] );
      IF NOT has_values_space( arg ) THEN
        RETURN( FALSE );
      END_IF;
      IF NOT compatible_spaces( factor_space( domain, i ), values_space_of( arg ) ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="function_is_1d_array">
         <parameter name="func">
            <typename name="maths_function"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      temp : maths_space;
    END_LOCAL;
    IF NOT EXISTS( func ) THEN
      RETURN( FALSE );
    END_IF;
    IF space_dimension( func.domain ) &lt;&gt; 1 THEN
      RETURN( FALSE );
    END_IF;
    temp := factor1( func.domain );
    IF ( schema_prefix + 'PRODUCT_SPACE' ) IN TYPEOF( temp ) THEN
      IF space_dimension( temp ) &lt;&gt; 1 THEN
        RETURN( FALSE );
      END_IF;
      temp := factor1( temp );
    END_IF;
    IF ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN TYPEOF( temp ) THEN
      RETURN( TRUE );
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="function_is_1d_table">
         <parameter name="func">
            <typename name="maths_function"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      temp : maths_space;
      itvl : finite_integer_interval;
    END_LOCAL;
    IF NOT EXISTS( func ) THEN
      RETURN( FALSE );
    END_IF;
    IF space_dimension( func.domain ) &lt;&gt; 1 THEN
      RETURN( FALSE );
    END_IF;
    temp := factor1( func.domain );
    IF ( schema_prefix + 'PRODUCT_SPACE' ) IN TYPEOF( temp ) THEN
      IF space_dimension( temp ) &lt;&gt; 1 THEN
        RETURN( FALSE );
      END_IF;
      temp := factor1( temp );
    END_IF;
    IF ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN TYPEOF( temp ) THEN
      itvl := temp;
      RETURN( bool( ( itvl.min = 0 ) OR ( itvl.min = 1 ) ) );
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="function_is_2d_table">
         <parameter name="func">
            <typename name="maths_function"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      temp   : maths_space;
      pspace : product_space;
      itvl1  : finite_integer_interval;
      itvl2  : finite_integer_interval;
    END_LOCAL;
    IF NOT EXISTS( func ) THEN
      RETURN( FALSE );
    END_IF;
    IF space_dimension( func.domain ) &lt;&gt; 1 THEN
      RETURN( FALSE );
    END_IF;
    temp := factor1( func.domain );
    IF NOT ( 'PRODUCT_SPACE' IN stripped_typeof( temp ) ) THEN
      RETURN( FALSE );
    END_IF;
    pspace := temp;
    IF space_dimension( pspace ) &lt;&gt; 2 THEN
      RETURN( FALSE );
    END_IF;
    temp := factor1( pspace );
    IF NOT ( 'FINITE_INTEGER_INTERVAL' IN stripped_typeof( temp ) ) THEN
      RETURN( FALSE );
    END_IF;
    itvl1 := temp;
    temp := factor_space( pspace, 2 );
    IF NOT ( 'FINITE_INTEGER_INTERVAL' IN stripped_typeof( temp ) ) THEN
      RETURN( FALSE );
    END_IF;
    itvl2 := temp;
    RETURN( bool( ( itvl1.min = itvl2.min ) AND ( ( itvl1.min = 0 ) OR ( itvl1.min = 1 ) ) ) );</algorithm>
      </function>
      <function name="function_is_array">
         <parameter name="func">
            <typename name="maths_function"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      tspace : tuple_space;
      temp   : maths_space;
    END_LOCAL;
    IF NOT EXISTS( func ) THEN
      RETURN( FALSE );
    END_IF;
    tspace := func.domain;
    IF ( space_dimension( tspace ) = 1 ) AND ( ( schema_prefix + 'TUPLE_SPACE' ) IN TYPEOF( factor1( tspace ) ) ) THEN
      tspace := factor1( tspace );
    END_IF;
    IF NOT ( ( schema_prefix + 'PRODUCT_SPACE' ) IN TYPEOF( tspace ) ) THEN
      RETURN( FALSE );
    END_IF;
    REPEAT i := 1 TO space_dimension( tspace ) BY 1;
      temp := factor_space( tspace, i );
      IF NOT ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN TYPEOF( temp ) ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="function_is_table">
         <parameter name="func">
            <typename name="maths_function"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      tspace : tuple_space;
      temp   : maths_space;
      base   : INTEGER;
    END_LOCAL;
    IF NOT EXISTS( func ) THEN
      RETURN( FALSE );
    END_IF;
    tspace := func.domain;
    IF ( space_dimension( tspace ) = 1 ) AND ( ( schema_prefix + 'TUPLE_SPACE' ) IN TYPEOF( factor1( tspace ) ) ) THEN
      tspace := factor1( tspace );
    END_IF;
    IF NOT ( ( schema_prefix + 'PRODUCT_SPACE' ) IN TYPEOF( tspace ) ) THEN
      RETURN( FALSE );
    END_IF;
    temp := factor1( tspace );
    IF NOT ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN TYPEOF( temp ) ) THEN
      RETURN( FALSE );
    END_IF;
    base := temp\finite_integer_interval.min;
    IF ( base &lt;&gt; 0 ) AND ( base &lt;&gt; 1 ) THEN
      RETURN( FALSE );
    END_IF;
    REPEAT i := 2 TO space_dimension( tspace ) BY 1;
      temp := factor_space( tspace, i );
      IF NOT ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN TYPEOF( temp ) ) THEN
        RETURN( FALSE );
      END_IF;
      IF temp\finite_integer_interval.min &lt;&gt; base THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="gbsf_check_curve">
         <parameter name="cv">
            <typename name="representation_item"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOUNDED_CURVE', 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_REPLICA' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_CURVE_3D' ] * TYPEOF( cv ) ) &gt; 1 THEN
      RETURN( FALSE );
    END_IF;
    IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCLE', 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELLIPSE' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TRIMMED_CURVE' ] * TYPEOF( cv ) ) = 1 THEN
      RETURN( TRUE );
    ELSE
      IF ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE' IN TYPEOF( cv ) ) AND ( cv\
          b_spline_curve.self_intersect = FALSE ) ) OR ( cv\b_spline_curve.self_intersect = UNKNOWN ) THEN
        RETURN( TRUE );
      ELSE
        IF ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_CURVE' IN TYPEOF( cv ) ) AND ( cv\
            composite_curve.self_intersect = FALSE ) ) OR ( cv\composite_curve.self_intersect = UNKNOWN ) THEN
          RETURN( SIZEOF( QUERY ( seg &lt;* cv\composite_curve.segments | ( NOT gbsf_check_curve( seg.parent_curve ) ) ) ) = 0 );
        ELSE
          IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_REPLICA' IN TYPEOF( cv ) THEN
            RETURN( gbsf_check_curve( cv\curve_replica.parent_curve ) );
          ELSE
            IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_CURVE_3D' IN TYPEOF( cv ) ) AND ( ( 
                cv\offset_curve_3d.self_intersect = FALSE ) OR ( cv\offset_curve_3d.self_intersect = UNKNOWN ) ) AND ( NOT ( 
                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE'  IN TYPEOF( cv\offset_curve_3d.
                basis_curve ) ) ) THEN
              RETURN( gbsf_check_curve( cv\offset_curve_3d.basis_curve ) );
            ELSE
              IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( cv ) THEN
                RETURN( gbsf_check_curve( cv\pcurve.reference_to_curve\representation.items[1] ) AND gbsf_check_surface( cv\
                    pcurve.basis_surface ) );
              ELSE
                IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE' IN TYPEOF( cv ) THEN
                  IF SIZEOF( cv\polyline.points ) &gt;= 3 THEN
                    RETURN( TRUE );
                  END_IF;
                ELSE
                  IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE' IN TYPEOF( cv ) THEN
                    IF gbsf_check_curve( cv\surface_curve.curve_3d ) THEN
                      REPEAT i := 1 TO SIZEOF( cv\surface_curve.associated_geometry ) BY 1;
                        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE' IN TYPEOF( cv\
                            surface_curve.associated_geometry[i] ) THEN
                          IF NOT gbsf_check_surface( cv\surface_curve.associated_geometry[i] ) THEN
                            RETURN( FALSE );
                          END_IF;
                        ELSE
                          IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( cv\
                              surface_curve.associated_geometry[i] ) THEN
                            IF NOT gbsf_check_curve( cv\surface_curve.associated_geometry[i] ) THEN
                              RETURN( FALSE );
                            END_IF;
                          END_IF;
                        END_IF;
                      END_REPEAT;
                      RETURN( TRUE );
                    END_IF;
                  END_IF;
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="gbsf_check_point">
         <parameter name="pnt">
            <typename name="point"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT' IN TYPEOF( pnt ) THEN
      RETURN( TRUE );
    ELSE
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_CURVE' IN TYPEOF( pnt ) THEN
        RETURN( gbsf_check_curve( pnt\point_on_curve.basis_curve ) );
      ELSE
        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_SURFACE' IN TYPEOF( pnt ) THEN
          RETURN( gbsf_check_surface( pnt\point_on_surface.basis_surface ) );
        ELSE
          IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DEGENERATE_PCURVE' IN TYPEOF( pnt ) THEN
            RETURN( gbsf_check_curve( pnt\degenerate_pcurve.reference_to_curve\representation.items[1] ) AND gbsf_check_surface( 
                pnt\degenerate_pcurve.basis_surface ) );
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="gbsf_check_surface">
         <parameter name="sf">
            <typename name="surface"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_SURFACE' IN TYPEOF( sf ) ) AND ( sf\
        b_spline_surface.self_intersect = FALSE ) ) OR ( sf\b_spline_surface.self_intersect = UNKNOWN ) THEN
      RETURN( TRUE );
    ELSE
      IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SPHERICAL_SURFACE', 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TOROIDAL_SURFACE' , 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_BOUNDED_SURFACE' , 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_TRIMMED_SURFACE' ] * TYPEOF( sf ) ) = 1
          THEN
        RETURN( TRUE );
      ELSE
        IF ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_SURFACE' IN TYPEOF( sf ) ) AND ( sf\
            offset_surface.self_intersect = FALSE ) ) OR ( sf\offset_surface.self_intersect = UNKNOWN ) THEN
          RETURN( gbsf_check_surface( sf\offset_surface.basis_surface ) );
        ELSE
          IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_COMPOSITE_SURFACE' IN TYPEOF( sf )
              THEN
            REPEAT i := 1 TO SIZEOF( sf\rectangular_composite_surface.segments ) BY 1;
              REPEAT j := 1 TO SIZEOF( sf\rectangular_composite_surface.segments[i] ) BY 1;
                IF NOT gbsf_check_surface( sf\rectangular_composite_surface.segments[i][j].parent_surface ) THEN
                  RETURN( FALSE );
                END_IF;
              END_REPEAT;
            END_REPEAT;
            RETURN( TRUE );
          ELSE
            IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_REPLICA' IN TYPEOF( sf ) THEN
              RETURN( gbsf_check_surface( sf\surface_replica.parent_surface ) );
            ELSE
              IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_OF_REVOLUTION' IN TYPEOF( sf ) THEN
                RETURN( gbsf_check_curve( sf\swept_surface.swept_curve ) );
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="get_associated_mandatory_document_ids">
         <parameter name="pdc">
            <typename name="product_definition_context"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <builtintype type="STRING"/>
         <algorithm>LOCAL
      result        : SET OF STRING := [];
      adrs_raw      : SET OF applied_document_reference := bag_to_set( USEDIN( pdc, 
                       'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.APPLIED_DOCUMENT_REFERENCE.ITEMS'  ) );
      adrs_filtered : SET OF applied_document_reference := [];
      ras           : SET OF role_association;
      dpas          : SET OF document_product_association;
    END_LOCAL;
    REPEAT i := 1 TO HIINDEX( adrs_raw ) BY 1;
      IF adrs_raw[i]\document_reference.role\object_role.name = 'mandatory' THEN
        adrs_filtered := adrs_filtered + adrs_raw[i];
      END_IF;
    END_REPEAT;
    REPEAT i := 1 TO HIINDEX( adrs_filtered ) BY 1;
      dpas := bag_to_set( USEDIN( adrs_filtered[i]\document_reference.assigned_document, 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DOCUMENT_PRODUCT_ASSOCIATION.RELATING_DOCUMENT'  ) );
      REPEAT j := 1 TO HIINDEX( dpas ) BY 1;
        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DOCUMENT_PRODUCT_EQUIVALENCE' IN TYPEOF( dpas[j] )
            THEN
          IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_FORMATION' IN TYPEOF( dpas[j]
              \document_product_association.related_product ) THEN
            result := result + dpas[j]\document_product_association.related_product\product_definition_formation.of_product\
                product.id;
          END_IF;
          IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT' IN TYPEOF( dpas[j].related_product )
              THEN
            result := result + dpas[j]\document_product_association.related_product\product.id;
          END_IF;
        END_IF;
      END_REPEAT;
    END_REPEAT;
    RETURN( result );</algorithm>
      </function>
      <function name="get_basis_surface">
         <parameter name="c">
            <typename name="curve_on_surface"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="2"/>
         <typename name="surface"/>
         <algorithm>LOCAL
      surfs : SET [0 : 2] OF surface;
      n     : INTEGER;
    END_LOCAL;
    surfs := [];
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( c ) THEN
      surfs := [c\pcurve.basis_surface];
    ELSE
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE' IN TYPEOF( c ) THEN
        n := SIZEOF( c\surface_curve.associated_geometry );
        REPEAT i := 1 TO n BY 1;
          surfs := surfs + associated_surface( c\surface_curve.associated_geometry[i] );
        END_REPEAT;
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_CURVE_ON_SURFACE' IN TYPEOF( c ) THEN
      n := SIZEOF( c\composite_curve.segments );
      surfs := get_basis_surface( c\composite_curve.segments[1].parent_curve );
      IF n &gt; 1 THEN
        REPEAT i := 2 TO n BY 1;
          surfs := surfs * get_basis_surface( c\composite_curve.segments[i].parent_curve );
        END_REPEAT;
      END_IF;
    END_IF;
    RETURN( surfs );</algorithm>
      </function>
      <function name="get_description_value">
         <parameter name="obj">
            <typename name="description_attribute_select"/>
         </parameter>
         <typename name="text"/>
         <algorithm>LOCAL
      description_bag : BAG OF description_attribute := USEDIN( obj, 
                         'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DESCRIPTION_ATTRIBUTE.' + 
                         'DESCRIBED_ITEM'  );
    END_LOCAL;
    IF SIZEOF( description_bag ) = 1 THEN
      RETURN( description_bag[1].attribute_value );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="get_directed_link">
         <parameter name="nodes">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="representation"/>
         </parameter>
         <parameter name="undirected_link">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="chained_representation_link"/>
         </parameter>
         <aggregate lower="0" type="LIST" upper="?"/>
         <typename name="representation_relationship"/>
         <algorithm>LOCAL
      directed_link : LIST OF representation_relationship := [];
    END_LOCAL;
    IF ( SIZEOF( nodes ) &lt;&gt; ( SIZEOF( undirected_link ) + 1 ) ) OR ( VALUE_UNIQUE( nodes ) = FALSE ) THEN
      RETURN( ? );
    END_IF;
    REPEAT i := 1 TO SIZEOF( undirected_link ) BY 1;
      CASE TRUE OF
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATION_CONTEXT' IN TYPEOF( undirected_link[i] ) : 
          BEGIN
            IF ( nodes[i]\representation.context_of_items :=: undirected_link[i] ) AND ( nodes[i + 1]\representation.
                context_of_items :=: undirected_link[i] ) THEN
              INSERT( directed_link, representation_relationship( '', '', nodes[i + 1], nodes[i] ), i - 1 );
            ELSE
              RETURN( ? );
            END_IF;
          END;
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATION_RELATIONSHIP' IN TYPEOF( 
            undirected_link[i] )            : 
          BEGIN
            IF ( ( nodes[i] :=: undirected_link[i]\representation_relationship.rep_1 ) AND ( nodes[i + 1] :=: undirected_link[i]\
                representation_relationship.rep_2 ) ) OR ( ( nodes[i] :=: undirected_link[i]\representation_relationship.rep_2 ) 
                AND ( nodes[i + 1] :=: undirected_link[i]\representation_relationship.rep_1 ) ) THEN
              INSERT( directed_link, representation_relationship( '', '', nodes[i + 1], nodes[i] ), i - 1 );
            ELSE
              RETURN( ? );
            END_IF;
          END;
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM' IN TYPEOF( undirected_link[i] ) : 
          BEGIN
            IF ( nodes[i] IN using_representations( undirected_link[i] ) ) AND ( nodes[i + 1] :=: undirected_link[i]\mapped_item.
                mapping_source\representation_map.mapped_representation ) THEN
              INSERT( directed_link, representation_relationship( '', '', nodes[i + 1], nodes[i] ), i - 1 );
            ELSE
              RETURN( ? );
            END_IF;
          END;
        OTHERWISE                          :           RETURN( ? );
        END_CASE;
    END_REPEAT;
    IF VALUE_UNIQUE( directed_link ) = FALSE THEN
      RETURN( ? );
    END_IF;
    RETURN( directed_link );</algorithm>
      </function>
      <function name="get_id_value">
         <parameter name="obj">
            <typename name="id_attribute_select"/>
         </parameter>
         <typename name="identifier"/>
         <algorithm>LOCAL
      id_bag : BAG OF id_attribute := USEDIN( obj, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
                'ID_ATTRIBUTE.'  + 'IDENTIFIED_ITEM' );
    END_LOCAL;
    IF SIZEOF( id_bag ) = 1 THEN
      RETURN( id_bag[1].attribute_value );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="get_kinematic_joints_from_kinematic_loops">
         <parameter name="kls">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="kinematic_loop"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="kinematic_joint"/>
         <algorithm>LOCAL
      result : SET OF oriented_joint := [];
    END_LOCAL;
    IF SIZEOF( kls ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( kls ) BY 1;
        result := result + kls[i].edge_list;
      END_REPEAT;
    END_IF;
    RETURN( get_kinematic_joints_from_oriented_joints( result ) );</algorithm>
      </function>
      <function name="get_kinematic_joints_from_oriented_joints">
         <parameter name="ors">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="oriented_joint"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="kinematic_joint"/>
         <algorithm>LOCAL
      result : SET OF kinematic_joint := [];
    END_LOCAL;
    IF SIZEOF( ors ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( ors ) BY 1;
        result := result + ors[i].edge_element;
      END_REPEAT;
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="get_name_value">
         <parameter name="obj">
            <typename name="name_attribute_select"/>
         </parameter>
         <typename name="label"/>
         <algorithm>LOCAL
      name_bag : BAG OF name_attribute := USEDIN( obj, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
                  'NAME_ATTRIBUTE.'  + 'NAMED_ITEM' );
    END_LOCAL;
    IF SIZEOF( name_bag ) = 1 THEN
      RETURN( name_bag[1].attribute_value );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="get_plane_of_implicit_geometry">
         <parameter name="ps">
            <typename name="positioned_sketch"/>
         </parameter>
         <typename name="plane"/>
         <algorithm>LOCAL
      sb     : sketch_basis_select := ps.sketch_basis;
      result : plane := ?;
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_SURFACE' IN TYPEOF( sb ) THEN
      result := sb\face_surface.face_geometry;
    ELSE
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_BOUNDED_SURFACE' IN TYPEOF( sb ) THEN
        result := sb\curve_bounded_surface.basis_surface;
      ELSE
        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANAR_CURVE_SELECT' IN TYPEOF( sb ) THEN

          BEGIN
            IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC' IN TYPEOF( sb ) THEN
              result := dummy_gri || surface(  ) || elementary_surface( sb\conic.position ) || plane(  );
            END_IF;
            IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TRIMMED_CURVE' IN TYPEOF( sb ) THEN

              BEGIN
                result := get_plane_of_implicit_geometry( dummy_gri || positioned_sketch( sb\trimmed_curve.basis_curve, [] ) );
              END;
            END_IF;
            IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( sb ) THEN
              result := sb\pcurve.basis_surface;
            END_IF;
            IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE' IN TYPEOF( sb ) THEN

              BEGIN
                IF ( SIZEOF( sb\surface_curve.basis_surface ) = 1 ) AND ( 
                    'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE'  IN TYPEOF( sb\surface_curve.
                    basis_surface[1] ) ) THEN
                  result := sb\surface_curve.basis_surface[1];
                ELSE
                  IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE' IN TYPEOF( sb\surface_curve.
                      basis_surface[1] ) ) AND ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE' IN 
                      TYPEOF( sb\surface_curve.basis_surface[2] ) ) THEN
                    result := ?;
                  ELSE
                    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE' IN TYPEOF( sb\surface_curve.
                        basis_surface[1] ) THEN
                      result := sb\surface_curve.basis_surface[1];
                    ELSE
                      result := sb\surface_curve.basis_surface[2];
                    END_IF;
                  END_IF;
                END_IF;
              END;
            END_IF;
          END;
        END_IF;
      END_IF;
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="get_property_definition_representations">
         <parameter name="c_def_instance">
            <typename name="characterized_definition"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="property_definition_representation"/>
         <algorithm>LOCAL
      pd_set  : SET OF property_definition := [];
      pdr_set : SET OF property_definition_representation := [];
    END_LOCAL;
    pd_set := bag_to_set( USEDIN( c_def_instance, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
        + 'PROPERTY_DEFINITION.DEFINITION'  ) );
    IF SIZEOF( pd_set ) &lt; 1 THEN
      RETURN( pdr_set );
    END_IF;
    REPEAT i := 1 TO HIINDEX( pd_set ) BY 1;
      pdr_set := pdr_set + bag_to_set( USEDIN( pd_set[i], 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) );
    END_REPEAT;
    RETURN( pdr_set );</algorithm>
      </function>
      <function name="get_relative_direction_2points">
         <parameter name="cp1">
            <typename name="cartesian_point"/>
         </parameter>
         <parameter name="cp2">
            <typename name="cartesian_point"/>
         </parameter>
         <typename name="direction"/>
         <algorithm>LOCAL
      d1        : REAL;
      d2        : REAL;
      d3        : REAL;
      magnitude : REAL;
      result    : direction := ?;
    END_LOCAL;
    IF ( cp1.dim &lt;&gt; 3 ) OR ( cp2.dim &lt;&gt; 3 ) THEN
      RETURN( result );
    ELSE

      BEGIN
        d1 := cp2.coordinates[1] - cp1.coordinates[1];
        d2 := cp2.coordinates[2] - cp1.coordinates[2];
        d3 := cp2.coordinates[3] - cp1.coordinates[3];
        magnitude := SQRT( ( d1 * d1 ) + ( d2 * d2 ) + ( d3 * d3 ) );
        IF magnitude = 0 THEN
          RETURN( result );
        END_IF;
        result := dummy_gri || direction( [d1, d2, d3] );
      END;
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="get_role">
         <parameter name="obj">
            <typename name="role_select"/>
         </parameter>
         <typename name="object_role"/>
         <algorithm>LOCAL
      role_bag : BAG OF role_association := USEDIN( obj, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
                  'ROLE_ASSOCIATION.'  + 'ITEM_WITH_ROLE' );
    END_LOCAL;
    IF SIZEOF( role_bag ) = 1 THEN
      RETURN( role_bag[1].role );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="get_shape_aspect_property_definition_representations">
         <parameter name="s_a_instance">
            <typename name="shape_aspect"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="property_definition_representation"/>
         <algorithm>LOCAL
      pd_set  : SET OF property_definition := [];
      pdr_set : SET OF property_definition_representation := [];
    END_LOCAL;
    pd_set := bag_to_set( USEDIN( s_a_instance, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
        + 'PROPERTY_DEFINITION.DEFINITION'  ) );
    IF SIZEOF( pd_set ) &lt; 1 THEN
      RETURN( pdr_set );
    END_IF;
    REPEAT i := 1 TO HIINDEX( pd_set ) BY 1;
      pdr_set := pdr_set + QUERY ( pdr &lt;* USEDIN( pd_set[i], 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' 
          + 'PROPERTY_DEFINITION_REPRESENTATION.' + 'DEFINITION' ) | ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_DEFINITION_REPRESENTATION'  IN TYPEOF( pdr ) ) );
    END_REPEAT;
    RETURN( pdr_set );</algorithm>
      </function>
      <function name="get_shape_aspects">
         <parameter name="c_def_instance">
            <typename name="characterized_definition"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="shape_aspect"/>
         <algorithm>LOCAL
      pd_set  : SET OF product_definition_shape := [];
      pdr_set : SET OF shape_aspect := [];
    END_LOCAL;
    pd_set := bag_to_set( QUERY ( pd &lt;* USEDIN( c_def_instance, 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION.DEFINITION'  ) | ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) );
    IF SIZEOF( pd_set ) &lt; 1 THEN
      RETURN( pdr_set );
    END_IF;
    REPEAT i := 1 TO HIINDEX( pd_set ) BY 1;
      pdr_set := pdr_set + bag_to_set( USEDIN( pd_set[i], 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'SHAPE_ASPECT.OF_SHAPE'  ) );
    END_REPEAT;
    RETURN( pdr_set );</algorithm>
      </function>
      <function name="has_values_space">
         <parameter name="expr">
            <typename name="generic_expression"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      typenames : SET OF STRING := stripped_typeof( expr );
    END_LOCAL;
    IF 'EXPRESSION' IN typenames THEN
      RETURN( bool( ( 'NUMERIC_EXPRESSION' IN typenames ) OR ( 'STRING_EXPRESSION' IN typenames ) OR ( 'BOOLEAN_EXPRESSION' IN 
          typenames ) ) );
    END_IF;
    IF 'MATHS_FUNCTION' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'FUNCTION_APPLICATION' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'MATHS_SPACE' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'MATHS_VARIABLE' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'DEPENDENT_VARIABLE_DEFINITION' IN typenames THEN
      RETURN( has_values_space( expr\unary_generic_expression.operand ) );
    END_IF;
    IF 'COMPLEX_NUMBER_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'LOGICAL_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'BINARY_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'MATHS_ENUM_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'REAL_TUPLE_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'INTEGER_TUPLE_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'ATOM_BASED_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'MATHS_TUPLE_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'PARTIAL_DERIVATIVE_EXPRESSION' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'DEFINITE_INTEGRAL_EXPRESSION' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="inspected_product_definition">
         <parameter name="dqir">
            <typename name="data_quality_inspection_result_representation"/>
         </parameter>
         <aggregate lower="0" type="BAG" upper="?"/>
         <typename name="product_definition"/>
         <algorithm>LOCAL
      dqdr  : BAG OF data_quality_definition_representation_relationship := [];
      pdqdr : BAG OF product_data_and_data_quality_relationship := [];
      pd    : BAG OF product_definition := [];
    END_LOCAL;
    dqdr := USEDIN( dqir, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
        'DATA_QUALITY_DEFINITION_REPRESENTATION_RELATIONSHIP.'  + 'USED_REPRESENTATION' );
    REPEAT i := 1 TO SIZEOF( dqdr ) BY 1;
      pdqdr := USEDIN( dqdr[i].definition, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
          'PRODUCT_DATA_AND_DATA_QUALITY_RELATIONSHIP.'  + 'DATA_QUALITY' );
      REPEAT j := 1 TO SIZEOF( pdqdr ) BY 1;
        pd := pd + pdqdr[j].product_data;
      END_REPEAT;
    END_REPEAT;
    RETURN( pd );</algorithm>
      </function>
      <function name="invalidate_vrep_item">
         <parameter name="item">
            <typename name="variational_representation_item"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      reps : SET [1 : ?] OF representation := using_representations( item );
      svri : SET [1 : ?] OF variational_representation_item;
      iar  : instance_attribute_reference;
      i    : INTEGER;
      n    : INTEGER := HIINDEX( reps );
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOUND_VARIATIONAL_PARAMETER' IN TYPEOF( item ) THEN
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INSTANCE_ATTRIBUTE_REFERENCE' IN TYPEOF( item\
          generic_variable.interpretation\environment.semantics ) THEN

        BEGIN
          iar := item\generic_variable.interpretation\environment.semantics;
          IF reps &lt;&gt; using_representations( iar\instance_attribute_reference.owning_instance ) THEN
            RETURN( TRUE );
          END_IF;
        END;
      ELSE
        RETURN( TRUE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.UNBOUND_VARIATIONAL_PARAMETER' IN TYPEOF( item ) THEN

      BEGIN
        REPEAT i := 1 TO n BY 1;
          svri := QUERY ( q &lt;* reps[i]\representation.items | ( 
              'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FREE_FORM_CONSTRAINT'  IN TYPEOF( q ) ) );
          IF SIZEOF( QUERY ( r &lt;* svri | ( item IN ( r\free_form_constraint.reference_elements + r\free_form_constraint.
              constrained_elements ) ) ) ) = 0 THEN
            RETURN( TRUE );
          END_IF;
        END_REPEAT;
      END;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FIXED_INSTANCE_ATTRIBUTE_SET' IN TYPEOF( item ) THEN
      REPEAT i := 1 TO SIZEOF( item\fixed_instance_attribute_set.fixed_attributes ) BY 1;
        IF reps &lt;&gt; using_representations( item\fixed_instance_attribute_set.fixed_attributes[i]\instance_attribute_reference.
            owning_instance ) THEN
          RETURN( TRUE );
        END_IF;
      END_REPEAT;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EXPLICIT_CONSTRAINT' IN TYPEOF( item ) THEN
      IF SIZEOF( QUERY ( q &lt;* ( item\explicit_constraint.reference_elements + item\explicit_constraint.constrained_elements ) | 
          ( reps &lt;&gt; using_representations( q ) ) ) ) &gt; 0 THEN
        RETURN( TRUE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AUXILIARY_GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF( 
        item ) THEN

      BEGIN
        REPEAT i := 1 TO n BY 1;
          svri := QUERY ( q &lt;* reps[i]\representation.items | ( 
              'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EXPLICIT_GEOMETRIC_CONSTRAINT'  IN TYPEOF( q ) ) );
          IF SIZEOF( QUERY ( r &lt;* svri | ( item IN r\explicit_geometric_constraint.reference_elements ) ) ) = 0 THEN
            RETURN( TRUE );
          END_IF;
        END_REPEAT;
      END;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="is_acyclic">
         <parameter name="arg">
            <typename name="generic_expression"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>RETURN( acyclic( arg, [] ) );</algorithm>
      </function>
      <function name="is_int_expr">
         <parameter name="arg">
            <typename name="numeric_expression"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INT_LITERAL' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REAL_LITERAL' IN TYPEOF( arg ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INT_NUMERIC_VARIABLE' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REAL_NUMERIC_VARIABLE' IN TYPEOF( arg ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ABS_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( is_int_expr( arg\unary_numeric_expression.operand ) );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MINUS_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( is_int_expr( arg\unary_numeric_expression.operand ) );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SIN_FUNCTION' IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COS_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TAN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ASIN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ACOS_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ATAN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EXP_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LOG_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LOG2_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LOG10_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SQUARE_ROOT_FUNCTION'  IN TYPEOF( arg ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLUS_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MULT_EXPRESSION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAXIMUM_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MINIMUM_FUNCTION'  IN TYPEOF( arg ) ) THEN
      REPEAT i := 1 TO SIZEOF( arg\multiple_arity_numeric_expression.operands ) BY 1;
        IF NOT is_int_expr( arg\multiple_arity_numeric_expression.operands[i] ) THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
      RETURN( TRUE );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MINUS_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POWER_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      RETURN( is_int_expr( arg\binary_numeric_expression.operands[1] ) AND is_int_expr( arg\binary_numeric_expression.operands[2] ) );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIV_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MOD_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SLASH_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VALUE_FUNCTION' IN TYPEOF( arg ) THEN
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INT_VALUE_FUNCTION' IN TYPEOF( arg ) THEN
        RETURN( TRUE );
      ELSE
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INTEGER_DEFINED_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REAL_DEFINED_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_DEFINED_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STRING_DEFINED_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( FALSE );
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="is_sql_mappable">
         <parameter name="arg">
            <typename name="expression"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SIMPLE_NUMERIC_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SQL_MAPPABLE_DEFINED_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MINUS_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( is_sql_mappable( arg\unary_numeric_expression.operand ) );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ABS_FUNCTION' IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SIN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COS_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TAN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ASIN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ACOS_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ATAN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EXP_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LOG_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LOG2_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LOG10_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SQUARE_ROOT_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VALUE_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_FUNCTION'  IN TYPEOF( arg ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLUS_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MULT_EXPRESSION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAXIMUM_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MINIMUM_FUNCTION'  IN TYPEOF( arg ) ) THEN
      REPEAT i := 1 TO SIZEOF( arg\multiple_arity_numeric_expression.operands ) BY 1;
        IF NOT is_sql_mappable( arg\multiple_arity_numeric_expression.operands[i] ) THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
      RETURN( TRUE );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MINUS_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SLASH_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      RETURN( is_sql_mappable( arg\binary_numeric_expression.operands[1] ) AND is_sql_mappable( arg\binary_numeric_expression.
          operands[2] ) );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIV_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MOD_EXPRESSION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POWER_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SIMPLE_BOOLEAN_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NOT_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( is_sql_mappable( arg\unary_generic_expression.operand ) );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ODD_FUNCTION' IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.XOR_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AND_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OR_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      REPEAT i := 1 TO SIZEOF( arg\multiple_arity_boolean_expression.operands ) BY 1;
        IF NOT is_sql_mappable( arg\multiple_arity_boolean_expression.operands[i] ) THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
      RETURN( TRUE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EQUALS_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( is_sql_mappable( arg\binary_generic_expression.operands[1] ) AND is_sql_mappable( arg\binary_generic_expression.
          operands[2] ) );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPARISON_EQUAL' IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPARISON_GREATER'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPARISON_GREATER_EQUAL'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPARISON_LESS'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPARISON_LESS_EQUAL'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPARISON_NOT_EQUAL'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LIKE_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      RETURN( is_sql_mappable( arg\comparison_expression.operands[1] ) AND is_sql_mappable( arg\comparison_expression.operands[2] ) );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INTERVAL_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( is_sql_mappable( arg\interval_expression.interval_low ) AND is_sql_mappable( arg\interval_expression.interval_high ) 
          AND is_sql_mappable( arg\interval_expression.interval_item ) );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.NUMERIC_DEFINED_FUNCTION' IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_DEFINED_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.STRING_DEFINED_FUNCTION'  IN TYPEOF( arg ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SIMPLE_STRING_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INDEX_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SUBSTRING_EXPRESSION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONCAT_EXPRESSION'  IN TYPEOF( arg ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FORMAT_FUNCTION'  IN TYPEOF( arg ) ) THEN
      RETURN( FALSE );
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="item_in_context">
         <parameter name="item">
            <typename name="representation_item"/>
         </parameter>
         <parameter name="cntxt">
            <typename name="representation_context"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      y : BAG OF representation_item;
    END_LOCAL;
    IF SIZEOF( USEDIN( item, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATION.ITEMS' ) * cntxt.
        representations_in_context ) &gt; 0 THEN
      RETURN( TRUE );
    ELSE
      y := QUERY ( z &lt;* USEDIN( item, '' ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'REPRESENTATION_ITEM'  IN TYPEOF( z ) ) );
      IF SIZEOF( y ) &gt; 0 THEN
        REPEAT i := 1 TO HIINDEX( y ) BY 1;
          IF item_in_context( y[i], cntxt ) THEN
            RETURN( TRUE );
          END_IF;
        END_REPEAT;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="leap_year">
         <parameter name="year">
            <typename name="year_number"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF ( ( ( year MOD 4 ) = 0 ) AND ( ( year MOD 100 ) &lt;&gt; 0 ) ) OR ( ( year MOD 400 ) = 0 ) THEN
      RETURN( TRUE );
    ELSE
      RETURN( FALSE );
    END_IF;</algorithm>
      </function>
      <function name="list_face_loops">
         <parameter name="f">
            <typename name="face"/>
         </parameter>
         <aggregate lower="0" type="LIST" upper="?"/>
         <typename name="loop"/>
         <algorithm>LOCAL
      loops : LIST [0 : ?] OF loop := [];
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( f.bounds ) BY 1;
      loops := loops + f.bounds[i].bound;
    END_REPEAT;
    RETURN( loops );</algorithm>
      </function>
      <function name="list_of_topology_reversed">
         <parameter name="a_list">
            <typename name="list_of_reversible_topology_item"/>
         </parameter>
         <typename name="list_of_reversible_topology_item"/>
         <algorithm>LOCAL
      the_reverse : list_of_reversible_topology_item;
    END_LOCAL;
    the_reverse := [];
    REPEAT i := 1 TO SIZEOF( a_list ) BY 1;
      the_reverse := topology_reversed( a_list[i] ) + the_reverse;
    END_REPEAT;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="list_selected_components">
         <parameter name="aggr">
            <aggregate type="AGGREGATE"/>
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="maths_value"/>
         </parameter>
         <parameter name="k">
            <typename name="positive_integer"/>
         </parameter>
         <aggregate lower="0" type="LIST" upper="?"/>
         <typename name="maths_value"/>
         <algorithm>LOCAL
      result : LIST OF maths_value := [];
      j      : INTEGER := 0;
    END_LOCAL;
    REPEAT i := LOINDEX( aggr ) TO HIINDEX( aggr ) BY 1;
      IF k &lt;= SIZEOF( aggr[i] ) THEN
        INSERT( result, aggr[i][k], j );
        j := j + 1;
      END_IF;
    END_REPEAT;
    RETURN( result );</algorithm>
      </function>
      <function name="list_to_array">
         <parameter name="lis">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="GENERIC" typelabel="t"/>
         </parameter>
         <parameter name="low">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="u">
            <builtintype type="INTEGER"/>
         </parameter>
         <aggregate lower="low" type="ARRAY" upper="u"/>
         <builtintype type="GENERIC" typelabel="t"/>
         <algorithm>LOCAL
      n   : INTEGER;
      res : ARRAY [low : u] OF GENERIC:t;
    END_LOCAL;
    n := SIZEOF( lis );
    IF n &lt;&gt; ( ( u - low ) + 1 ) THEN
      RETURN( ? );
    ELSE
      res := [lis[1] : 0];
      REPEAT i := 2 TO n BY 1;
        res[( low + i ) - 1] := lis[i];
      END_REPEAT;
      RETURN( res );
    END_IF;</algorithm>
      </function>
      <function name="list_to_set">
         <parameter name="l">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="GENERIC" typelabel="t"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <builtintype type="GENERIC" typelabel="t"/>
         <algorithm>LOCAL
      s : SET OF GENERIC:t := [];
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( l ) BY 1;
      s := s + l[i];
    END_REPEAT;
    RETURN( s );</algorithm>
      </function>
      <function name="make_array_of_array">
         <parameter name="lis">
            <aggregate lower="1" type="LIST" upper="?"/>
            <aggregate lower="1" type="LIST" upper="?"/>
            <builtintype type="GENERIC" typelabel="t"/>
         </parameter>
         <parameter name="low1">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="u1">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="low2">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="u2">
            <builtintype type="INTEGER"/>
         </parameter>
         <aggregate lower="low1" type="ARRAY" upper="u1"/>
         <aggregate lower="low2" type="ARRAY" upper="u2"/>
         <builtintype type="GENERIC" typelabel="t"/>
         <algorithm>LOCAL
      res : ARRAY [low1 : u1] OF ARRAY [low2 : u2] OF GENERIC:t;
    END_LOCAL;
    IF ( ( u1 - low1 ) + 1 ) &lt;&gt; SIZEOF( lis ) THEN
      RETURN( ? );
    END_IF;
    IF ( ( u2 - low2 ) + 1 ) &lt;&gt; SIZEOF( lis[1] ) THEN
      RETURN( ? );
    END_IF;
    res := [list_to_array( lis[1], low2, u2 ) : 0];
    REPEAT i := 2 TO HIINDEX( lis ) BY 1;
      IF ( ( u2 - low2 ) + 1 ) &lt;&gt; SIZEOF( lis[i] ) THEN
        RETURN( ? );
      END_IF;
      res[( low1 + i ) - 1] := list_to_array( lis[i], low2, u2 );
    END_REPEAT;
    RETURN( res );</algorithm>
      </function>
      <function name="make_atom_based_literal">
         <parameter name="lit_value">
            <typename name="atom_based_value"/>
         </parameter>
         <typename name="atom_based_literal"/>
         <algorithm>RETURN( atom_based_literal( lit_value ) || generic_literal(  ) || simple_generic_expression(  ) || generic_expression(  ) );</algorithm>
      </function>
      <function name="make_binary_literal">
         <parameter name="lit_value">
            <builtintype type="BINARY"/>
         </parameter>
         <typename name="binary_literal"/>
         <algorithm>RETURN( binary_literal( lit_value ) || generic_literal(  ) || simple_generic_expression(  ) || generic_expression(  ) );</algorithm>
      </function>
      <function name="make_boolean_literal">
         <parameter name="lit_value">
            <builtintype type="BOOLEAN"/>
         </parameter>
         <typename name="boolean_literal"/>
         <algorithm>RETURN( boolean_literal( lit_value ) || simple_boolean_expression(  ) || boolean_expression(  ) || expression(  ) || 
        generic_expression(  ) || simple_generic_expression(  ) || generic_literal(  ) );</algorithm>
      </function>
      <function name="make_cartesian_complex_number_region">
         <parameter name="real_constraint">
            <typename name="real_interval"/>
         </parameter>
         <parameter name="imag_constraint">
            <typename name="real_interval"/>
         </parameter>
         <typename name="cartesian_complex_number_region"/>
         <algorithm>RETURN( cartesian_complex_number_region( real_constraint, imag_constraint ) || maths_space(  ) || generic_expression(  ) || 
        generic_literal(  ) || simple_generic_expression(  ) );</algorithm>
      </function>
      <function name="make_complex_number_literal">
         <parameter name="rpart">
            <builtintype type="REAL"/>
         </parameter>
         <parameter name="ipart">
            <builtintype type="REAL"/>
         </parameter>
         <typename name="complex_number_literal"/>
         <algorithm>RETURN( complex_number_literal( rpart, ipart ) || generic_literal(  ) || simple_generic_expression(  ) || 
        generic_expression(  ) );</algorithm>
      </function>
      <function name="make_elementary_function">
         <parameter name="func_id">
            <typename name="elementary_function_enumerators"/>
         </parameter>
         <typename name="elementary_function"/>
         <algorithm>RETURN( elementary_function( func_id ) || maths_function(  ) || generic_expression(  ) || generic_literal(  ) || 
        simple_generic_expression(  ) );</algorithm>
      </function>
      <function name="make_elementary_space">
         <parameter name="space_id">
            <typename name="elementary_space_enumerators"/>
         </parameter>
         <typename name="elementary_space"/>
         <algorithm>RETURN( elementary_space( space_id ) || maths_space(  ) || generic_expression(  ) || generic_literal(  ) || 
        simple_generic_expression(  ) );</algorithm>
      </function>
      <function name="make_extended_tuple_space">
         <parameter name="base">
            <typename name="product_space"/>
         </parameter>
         <parameter name="extender">
            <typename name="maths_space"/>
         </parameter>
         <typename name="extended_tuple_space"/>
         <algorithm>RETURN( extended_tuple_space( base, extender ) || maths_space(  ) || generic_expression(  ) || generic_literal(  ) || 
        simple_generic_expression(  ) );</algorithm>
      </function>
      <function name="make_finite_integer_interval">
         <parameter name="min">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="max">
            <builtintype type="INTEGER"/>
         </parameter>
         <typename name="finite_integer_interval"/>
         <algorithm>RETURN( finite_integer_interval( min, max ) || maths_space(  ) || generic_expression(  ) || generic_literal(  ) || 
        simple_generic_expression(  ) );</algorithm>
      </function>
      <function name="make_finite_real_interval">
         <parameter name="min">
            <builtintype type="REAL"/>
         </parameter>
         <parameter name="minclo">
            <typename name="open_closed"/>
         </parameter>
         <parameter name="max">
            <builtintype type="REAL"/>
         </parameter>
         <parameter name="maxclo">
            <typename name="open_closed"/>
         </parameter>
         <typename name="finite_real_interval"/>
         <algorithm>RETURN( finite_real_interval( min, minclo, max, maxclo ) || maths_space(  ) || generic_expression(  ) || generic_literal(  ) 
        || simple_generic_expression(  ) );</algorithm>
      </function>
      <function name="make_finite_space">
         <parameter name="members">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="maths_value"/>
         </parameter>
         <typename name="finite_space"/>
         <algorithm>RETURN( finite_space( members ) || maths_space(  ) || generic_expression(  ) || generic_literal(  ) || 
        simple_generic_expression(  ) );</algorithm>
      </function>
      <function name="make_function_application">
         <parameter name="afunction">
            <typename name="maths_function_select"/>
         </parameter>
         <parameter name="arguments">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="maths_value"/>
         </parameter>
         <typename name="function_application"/>
         <algorithm>RETURN( function_application( afunction, arguments ) || multiple_arity_generic_expression( convert_to_maths_function( 
        afunction ) + convert_to_operands( arguments ) ) || generic_expression(  ) );</algorithm>
      </function>
      <function name="make_function_space">
         <parameter name="domain_constraint">
            <typename name="space_constraint_type"/>
         </parameter>
         <parameter name="domain_argument">
            <typename name="maths_space"/>
         </parameter>
         <parameter name="range_constraint">
            <typename name="space_constraint_type"/>
         </parameter>
         <parameter name="range_argument">
            <typename name="maths_space"/>
         </parameter>
         <typename name="function_space"/>
         <algorithm>RETURN( function_space( domain_constraint, domain_argument, range_constraint, range_argument ) || maths_space(  ) || 
        generic_expression(  ) || generic_literal(  ) || simple_generic_expression(  ) );</algorithm>
      </function>
      <function name="make_int_literal">
         <parameter name="lit_value">
            <builtintype type="INTEGER"/>
         </parameter>
         <typename name="int_literal"/>
         <algorithm>RETURN( int_literal(  ) || literal_number( lit_value ) || simple_numeric_expression(  ) || numeric_expression(  ) || 
        expression(  ) || generic_expression(  ) || simple_generic_expression(  ) || generic_literal(  ) );</algorithm>
      </function>
      <function name="make_listed_product_space">
         <parameter name="factors">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="maths_space"/>
         </parameter>
         <typename name="listed_product_space"/>
         <algorithm>RETURN( listed_product_space( factors ) || maths_space(  ) || generic_expression(  ) || generic_literal(  ) || 
        simple_generic_expression(  ) );</algorithm>
      </function>
      <function name="make_logical_literal">
         <parameter name="lit_value">
            <builtintype type="LOGICAL"/>
         </parameter>
         <typename name="logical_literal"/>
         <algorithm>RETURN( logical_literal( lit_value ) || generic_literal(  ) || simple_generic_expression(  ) || generic_expression(  ) );</algorithm>
      </function>
      <function name="make_maths_enum_literal">
         <parameter name="lit_value">
            <typename name="maths_enum_atom"/>
         </parameter>
         <typename name="maths_enum_literal"/>
         <algorithm>RETURN( maths_enum_literal( lit_value ) || generic_literal(  ) || simple_generic_expression(  ) || generic_expression(  ) );</algorithm>
      </function>
      <function name="make_maths_tuple_literal">
         <parameter name="lit_value">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="maths_value"/>
         </parameter>
         <typename name="maths_tuple_literal"/>
         <algorithm>RETURN( maths_tuple_literal( lit_value ) || generic_literal(  ) || simple_generic_expression(  ) || generic_expression(  ) );</algorithm>
      </function>
      <function name="make_numeric_set">
         <parameter name="start">
            <typename name="maths_number"/>
         </parameter>
         <parameter name="delta">
            <typename name="maths_number"/>
         </parameter>
         <parameter name="incs">
            <typename name="positive_integer"/>
         </parameter>
         <aggregate lower="2" type="SET" upper="?"/>
         <typename name="maths_number"/>
         <algorithm>LOCAL
      i           : INTEGER;
      numeric_set : SET [2 : ?] OF maths_number := [start, start + delta];
    END_LOCAL;
    IF incs &gt; 1 THEN
      REPEAT i := 2 TO incs BY 1;
        numeric_set := numeric_set + start + ( i * delta );
      END_REPEAT;
    END_IF;
    RETURN( numeric_set );</algorithm>
      </function>
      <function name="make_parallel_composed_function">
         <parameter name="srcdom">
            <typename name="maths_space_or_function"/>
         </parameter>
         <parameter name="prepfuncs">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="maths_function"/>
         </parameter>
         <parameter name="finfunc">
            <typename name="maths_function_select"/>
         </parameter>
         <typename name="parallel_composed_function"/>
         <algorithm>RETURN( parallel_composed_function( srcdom, prepfuncs, finfunc ) || maths_function(  ) || generic_expression(  ) || 
        multiple_arity_generic_expression( convert_to_operands_prcmfn( srcdom, prepfuncs, finfunc ) ) );</algorithm>
      </function>
      <function name="make_polar_complex_number_region">
         <parameter name="centre">
            <typename name="complex_number_literal"/>
         </parameter>
         <parameter name="dis_constraint">
            <typename name="real_interval"/>
         </parameter>
         <parameter name="dir_constraint">
            <typename name="finite_real_interval"/>
         </parameter>
         <typename name="polar_complex_number_region"/>
         <algorithm>RETURN( polar_complex_number_region( centre, dis_constraint, dir_constraint ) || maths_space(  ) || generic_expression(  ) ||
        generic_literal(  ) || simple_generic_expression(  ) );</algorithm>
      </function>
      <function name="make_real_interval_from_min">
         <parameter name="min">
            <builtintype type="REAL"/>
         </parameter>
         <parameter name="minclo">
            <typename name="open_closed"/>
         </parameter>
         <typename name="real_interval_from_min"/>
         <algorithm>RETURN( real_interval_from_min( min, minclo ) || maths_space(  ) || generic_expression(  ) || generic_literal(  ) || 
        simple_generic_expression(  ) );</algorithm>
      </function>
      <function name="make_real_interval_to_max">
         <parameter name="max">
            <builtintype type="REAL"/>
         </parameter>
         <parameter name="maxclo">
            <typename name="open_closed"/>
         </parameter>
         <typename name="real_interval_to_max"/>
         <algorithm>RETURN( real_interval_to_max( max, maxclo ) || maths_space(  ) || generic_expression(  ) || generic_literal(  ) || 
        simple_generic_expression(  ) );</algorithm>
      </function>
      <function name="make_real_literal">
         <parameter name="lit_value">
            <builtintype type="REAL"/>
         </parameter>
         <typename name="real_literal"/>
         <algorithm>RETURN( real_literal(  ) || literal_number( lit_value ) || simple_numeric_expression(  ) || numeric_expression(  ) || 
        expression(  ) || generic_expression(  ) || simple_generic_expression(  ) || generic_literal(  ) );</algorithm>
      </function>
      <function name="make_string_literal">
         <parameter name="lit_value">
            <builtintype type="STRING"/>
         </parameter>
         <typename name="string_literal"/>
         <algorithm>RETURN( string_literal( lit_value ) || simple_string_expression(  ) || string_expression(  ) || expression(  ) || 
        generic_expression(  ) || simple_generic_expression(  ) || generic_literal(  ) );</algorithm>
      </function>
      <function name="make_uniform_product_space">
         <parameter name="base">
            <typename name="maths_space"/>
         </parameter>
         <parameter name="exponent">
            <typename name="positive_integer"/>
         </parameter>
         <typename name="uniform_product_space"/>
         <algorithm>RETURN( uniform_product_space( base, exponent ) || maths_space(  ) || generic_expression(  ) || generic_literal(  ) || 
        simple_generic_expression(  ) );</algorithm>
      </function>
      <function name="max_exists">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      types : SET OF STRING := TYPEOF( spc );
    END_LOCAL;
    RETURN( bool( ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN types ) OR ( ( schema_prefix + 'INTEGER_INTERVAL_TO_MAX' ) 
        IN types ) OR ( ( schema_prefix + 'FINITE_REAL_INTERVAL' ) IN types ) OR ( ( schema_prefix + 'REAL_INTERVAL_TO_MAX' ) IN 
        types ) ) );</algorithm>
      </function>
      <function name="max_included">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      types : SET OF STRING := TYPEOF( spc );
    END_LOCAL;
    IF ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN types ) OR ( ( schema_prefix + 'INTEGER_INTERVAL_TO_MAX' ) IN types )
        THEN
      RETURN( TRUE );
    END_IF;
    IF ( schema_prefix + 'FINITE_REAL_INTERVAL' ) IN types THEN
      RETURN( bool( spc\finite_real_interval.max_closure = closed ) );
    END_IF;
    IF ( schema_prefix + 'REAL_INTERVAL_TO_MAX' ) IN types THEN
      RETURN( bool( spc\real_interval_to_max.max_closure = closed ) );
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="member_of">
         <parameter name="val">
            <builtintype type="GENERIC" typelabel="g"/>
         </parameter>
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>FUNCTION fedex(
                 val : AGGREGATE OF GENERIC:x;
                 i : INTEGER
             ) : GENERIC:x;
      RETURN( val[i] );

    END_FUNCTION;

    LOCAL
      v         : maths_value := simplify_maths_value( convert_to_maths_value( val ) );
      vtypes    : SET OF STRING := stripped_typeof( v );
      s         : maths_space := simplify_maths_space( spc );
      stypes    : SET OF STRING := stripped_typeof( s );
      tmp_int   : INTEGER;
      tmp_real  : REAL;
      tmp_cmplx : complex_number_literal;
      lgcl      : LOGICAL;
      cum       : LOGICAL;
      vspc      : maths_space;
      sspc      : maths_space;
      smem      : SET OF maths_value;
      factors   : LIST OF maths_space;
    END_LOCAL;
    IF NOT EXISTS( s ) THEN
      RETURN( FALSE );
    END_IF;
    IF NOT EXISTS( v ) THEN
      RETURN( s = the_generics );
    END_IF;
    IF ( 'GENERIC_EXPRESSION' IN vtypes ) AND ( NOT ( 'MATHS_SPACE' IN vtypes ) ) AND ( NOT ( 'MATHS_FUNCTION' IN vtypes ) ) AND 
        ( NOT ( 'COMPLEX_NUMBER_LITERAL' IN vtypes ) ) THEN
      IF has_values_space( v ) THEN
        vspc := values_space_of( v );
        IF subspace_of( vspc, s ) THEN
          RETURN( TRUE );
        END_IF;
        IF NOT compatible_spaces( vspc, s ) THEN
          RETURN( FALSE );
        END_IF;
        RETURN( UNKNOWN );
      END_IF;
      RETURN( UNKNOWN );
    END_IF;
    IF 'ELEMENTARY_SPACE' IN stypes THEN
      CASE s\elementary_space.space_id OF
        es_numbers        :           RETURN( ( 'NUMBER' IN vtypes ) OR ( 'COMPLEX_NUMBER_LITERAL' IN vtypes ) );
        es_complex_numbers :           RETURN( 'COMPLEX_NUMBER_LITERAL' IN vtypes );
        es_reals          :           RETURN( ( 'REAL' IN vtypes ) AND ( NOT ( 'INTEGER' IN vtypes ) ) );
        es_integers       :           RETURN( 'INTEGER' IN vtypes );
        es_logicals       :           RETURN( 'LOGICAL' IN vtypes );
        es_booleans       :           RETURN( 'BOOLEAN' IN vtypes );
        es_strings        :           RETURN( 'STRING' IN vtypes );
        es_binarys        :           RETURN( 'BINARY' IN vtypes );
        es_maths_spaces   :           RETURN( 'MATHS_SPACE' IN vtypes );
        es_maths_functions :           RETURN( 'MATHS_FUNCTION' IN vtypes );
        es_generics       :           RETURN( TRUE );
        END_CASE;
    END_IF;
    IF 'FINITE_INTEGER_INTERVAL' IN stypes THEN
      IF 'INTEGER' IN vtypes THEN
        tmp_int := v;
        RETURN( ( s\finite_integer_interval.min &lt;= tmp_int ) AND ( tmp_int &lt;= s\finite_integer_interval.max ) );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'INTEGER_INTERVAL_FROM_MIN' IN stypes THEN
      IF 'INTEGER' IN vtypes THEN
        tmp_int := v;
        RETURN( s\integer_interval_from_min.min &lt;= tmp_int );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'INTEGER_INTERVAL_TO_MAX' IN stypes THEN
      IF 'INTEGER' IN vtypes THEN
        tmp_int := v;
        RETURN( tmp_int &lt;= s\integer_interval_to_max.max );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'FINITE_REAL_INTERVAL' IN stypes THEN
      IF ( 'REAL' IN vtypes ) AND ( NOT ( 'INTEGER' IN vtypes ) ) THEN
        tmp_real := v;
        IF s\finite_real_interval.min_closure = closed THEN
          IF s\finite_real_interval.max_closure = closed THEN
            RETURN( ( s\finite_real_interval.min &lt;= tmp_real ) AND ( tmp_real &lt;= s\finite_real_interval.max ) );
          ELSE
            RETURN( ( s\finite_real_interval.min &lt;= tmp_real ) AND ( tmp_real &lt; s\finite_real_interval.max ) );
          END_IF;
        ELSE
          IF s\finite_real_interval.max_closure = closed THEN
            RETURN( ( s\finite_real_interval.min &lt; tmp_real ) AND ( tmp_real &lt;= s\finite_real_interval.max ) );
          ELSE
            RETURN( ( s\finite_real_interval.min &lt; tmp_real ) AND ( tmp_real &lt; s\finite_real_interval.max ) );
          END_IF;
        END_IF;
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'REAL_INTERVAL_FROM_MIN' IN stypes THEN
      IF ( 'REAL' IN vtypes ) AND ( NOT ( 'INTEGER' IN vtypes ) ) THEN
        tmp_real := v;
        IF s\real_interval_from_min.min_closure = closed THEN
          RETURN( s\real_interval_from_min.min &lt;= tmp_real );
        ELSE
          RETURN( s\real_interval_from_min.min &lt; tmp_real );
        END_IF;
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'REAL_INTERVAL_TO_MAX' IN stypes THEN
      IF ( 'REAL' IN vtypes ) AND ( NOT ( 'INTEGER' IN vtypes ) ) THEN
        tmp_real := v;
        IF s\real_interval_to_max.max_closure = closed THEN
          RETURN( tmp_real &lt;= s\real_interval_to_max.max );
        ELSE
          RETURN( tmp_real &lt; s\real_interval_to_max.max );
        END_IF;
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'CARTESIAN_COMPLEX_NUMBER_REGION' IN stypes THEN
      IF 'COMPLEX_NUMBER_LITERAL' IN vtypes THEN
        RETURN( member_of( v\complex_number_literal.real_part, s\cartesian_complex_number_region.real_constraint ) AND 
            member_of( v\complex_number_literal.imag_part, s\cartesian_complex_number_region.imag_constraint ) );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'POLAR_COMPLEX_NUMBER_REGION' IN stypes THEN
      IF 'COMPLEX_NUMBER_LITERAL' IN vtypes THEN
        tmp_cmplx := v;
        tmp_cmplx.real_part := tmp_cmplx.real_part - s\polar_complex_number_region.centre.real_part;
        tmp_cmplx.imag_part := tmp_cmplx.imag_part - s\polar_complex_number_region.centre.imag_part;
        tmp_real := SQRT( ( tmp_cmplx.real_part ** 2 ) + ( tmp_cmplx.imag_part ** 2 ) );
        IF NOT member_of( tmp_real, s\polar_complex_number_region.distance_constraint ) THEN
          RETURN( FALSE );
        END_IF;
        IF tmp_real = 0 THEN
          RETURN( TRUE );
        END_IF;
        tmp_real := atan2( tmp_cmplx.imag_part, tmp_cmplx.real_part );
        RETURN( member_of( tmp_real, s\polar_complex_number_region.direction_constraint ) OR member_of( tmp_real + ( 2 * PI ), s\
            polar_complex_number_region.direction_constraint ) );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'FINITE_SPACE' IN stypes THEN
      smem := s\finite_space.members;
      cum := FALSE;
      REPEAT i := 1 TO SIZEOF( smem ) BY 1;
        cum := cum OR equal_maths_values( v, smem[i] );
        IF cum = TRUE THEN
          RETURN( TRUE );
        END_IF;
      END_REPEAT;
      RETURN( cum );
    END_IF;
    IF 'UNIFORM_PRODUCT_SPACE' IN stypes THEN
      IF 'LIST' IN vtypes THEN
        IF SIZEOF( v ) = s\uniform_product_space.exponent THEN
          sspc := s\uniform_product_space.base;
          cum := TRUE;
          REPEAT i := 1 TO SIZEOF( v ) BY 1;
            cum := cum AND member_of( v[i], sspc );
            IF cum = FALSE THEN
              RETURN( FALSE );
            END_IF;
          END_REPEAT;
          RETURN( cum );
        END_IF;
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'LISTED_PRODUCT_SPACE' IN stypes THEN
      IF 'LIST' IN vtypes THEN
        factors := s\listed_product_space.factors;
        IF SIZEOF( v ) = SIZEOF( factors ) THEN
          cum := TRUE;
          REPEAT i := 1 TO SIZEOF( v ) BY 1;
            cum := cum AND member_of( v[i], factors[i] );
            IF cum = FALSE THEN
              RETURN( FALSE );
            END_IF;
          END_REPEAT;
          RETURN( cum );
        END_IF;
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'EXTENDED_TUPLE_SPACE' IN stypes THEN
      IF 'LIST' IN vtypes THEN
        sspc := s\extended_tuple_space.base;
        tmp_int := space_dimension( sspc );
        IF SIZEOF( v ) &gt;= tmp_int THEN
          cum := TRUE;
          REPEAT i := 1 TO tmp_int BY 1;
            cum := cum AND member_of( v[i], factor_space( sspc, i ) );
            IF cum = FALSE THEN
              RETURN( FALSE );
            END_IF;
          END_REPEAT;
          sspc := s\extended_tuple_space.extender;
          REPEAT i := tmp_int + 1 TO SIZEOF( v ) BY 1;
            cum := cum AND member_of( v[i], sspc );
            IF cum = FALSE THEN
              RETURN( FALSE );
            END_IF;
          END_REPEAT;
          RETURN( cum );
        END_IF;
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'FUNCTION_SPACE' IN stypes THEN
      IF 'MATHS_FUNCTION' IN vtypes THEN
        vspc := v\maths_function.domain;
        sspc := s\function_space.domain_argument;
        CASE s\function_space.domain_constraint OF
          sc_equal   :             cum := equal_maths_spaces( vspc, sspc );
          sc_subspace :             cum := subspace_of( vspc, sspc );
          sc_member  :             cum := member_of( vspc, sspc );
          END_CASE;
        IF cum = FALSE THEN
          RETURN( FALSE );
        END_IF;
        vspc := v\maths_function.range;
        sspc := s\function_space.range_argument;
        CASE s\function_space.range_constraint OF
          sc_equal   :             cum := cum AND equal_maths_spaces( vspc, sspc );
          sc_subspace :             cum := cum AND subspace_of( vspc, sspc );
          sc_member  :             cum := cum AND member_of( vspc, sspc );
          END_CASE;
        RETURN( cum );
      END_IF;
      RETURN( FALSE );
    END_IF;
    RETURN( UNKNOWN );</algorithm>
      </function>
      <function name="min_exists">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      types : SET OF STRING := TYPEOF( spc );
    END_LOCAL;
    RETURN( bool( ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN types ) OR ( ( schema_prefix + 'INTEGER_INTERVAL_FROM_MIN' ) 
        IN types ) OR ( ( schema_prefix + 'FINITE_REAL_INTERVAL' ) IN types ) OR ( ( schema_prefix + 'REAL_INTERVAL_FROM_MIN' ) IN
        types ) ) );</algorithm>
      </function>
      <function name="min_included">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      types : SET OF STRING := TYPEOF( spc );
    END_LOCAL;
    IF ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN types ) OR ( ( schema_prefix + 'INTEGER_INTERVAL_FROM_MIN' ) IN types )
        THEN
      RETURN( TRUE );
    END_IF;
    IF ( schema_prefix + 'FINITE_REAL_INTERVAL' ) IN types THEN
      RETURN( bool( spc\finite_real_interval.min_closure = closed ) );
    END_IF;
    IF ( schema_prefix + 'REAL_INTERVAL_FROM_MIN' ) IN types THEN
      RETURN( bool( spc\real_interval_from_min.min_closure = closed ) );
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="mixed_loop_type_set">
         <parameter name="l">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="loop"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      poly_loop_type : LOGICAL;
    END_LOCAL;
    IF SIZEOF( l ) &lt;= 1 THEN
      RETURN( FALSE );
    END_IF;
    poly_loop_type := 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLY_LOOP' IN TYPEOF( l[1] );
    REPEAT i := 2 TO SIZEOF( l ) BY 1;
      IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLY_LOOP' IN TYPEOF( l[i] ) ) &lt;&gt; poly_loop_type
          THEN
        RETURN( TRUE );
      END_IF;
    END_REPEAT;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="msb_shells">
         <parameter name="brep">
            <typename name="manifold_solid_brep"/>
         </parameter>
         <aggregate lower="1" type="SET" upper="?"/>
         <typename name="closed_shell"/>
         <algorithm>LOCAL
      return_set : SET [1 : ?] OF closed_shell := [brep.outer];
    END_LOCAL;
    IF SIZEOF( QUERY ( msbtype &lt;* TYPEOF( brep ) | ( msbtype LIKE '*BREP_WITH_VOIDS' ) ) ) &gt;= 1 THEN
      return_set := return_set + brep\brep_with_voids.voids;
    END_IF;
    RETURN( return_set );</algorithm>
      </function>
      <function name="msf_curve_check">
         <parameter name="cv">
            <typename name="representation_item"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOUNDED_CURVE', 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_REPLICA' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_CURVE_3D' ] * TYPEOF( cv ) ) &gt; 1 THEN
      RETURN( FALSE );
    END_IF;
    IF ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE' IN TYPEOF( cv ) ) AND ( cv\
        b_spline_curve.self_intersect = FALSE ) ) OR ( cv\b_spline_curve.self_intersect = UNKNOWN ) THEN
      RETURN( TRUE );
    ELSE
      IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC', 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE' ] * TYPEOF( cv ) ) = 1 THEN
        RETURN( TRUE );
      ELSE
        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_REPLICA' IN TYPEOF( cv ) THEN
          RETURN( msf_curve_check( cv\curve_replica.parent_curve ) );
        ELSE
          IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_CURVE_3D' IN TYPEOF( cv ) ) AND ( ( cv\
              offset_curve_3d.self_intersect = FALSE ) OR ( cv\offset_curve_3d.self_intersect = UNKNOWN ) ) AND ( NOT ( 
              'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE'  IN TYPEOF( cv\offset_curve_3d.
              basis_curve ) ) ) THEN
            RETURN( msf_curve_check( cv\offset_curve_3d.basis_curve ) );
          ELSE
            IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( cv ) THEN
              RETURN( msf_curve_check( cv\pcurve.reference_to_curve\representation.items[1] ) AND msf_surface_check( cv\pcurve.
                  basis_surface ) );
            ELSE
              IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE' IN TYPEOF( cv ) THEN
                IF msf_curve_check( cv\surface_curve.curve_3d ) THEN
                  REPEAT i := 1 TO SIZEOF( cv\surface_curve.associated_geometry ) BY 1;
                    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE' IN TYPEOF( cv\surface_curve.
                        associated_geometry[i] ) THEN
                      IF NOT msf_surface_check( cv\surface_curve.associated_geometry[i] ) THEN
                        RETURN( FALSE );
                      END_IF;
                    ELSE
                      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( cv\surface_curve.
                          associated_geometry[i] ) THEN
                        IF NOT msf_curve_check( cv\surface_curve.associated_geometry[i] ) THEN
                          RETURN( FALSE );
                        END_IF;
                      END_IF;
                    END_IF;
                  END_REPEAT;
                  RETURN( TRUE );
                END_IF;
              ELSE
                IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE' IN TYPEOF( cv ) THEN
                  IF SIZEOF( cv\polyline.points ) &gt;= 3 THEN
                    RETURN( TRUE );
                  END_IF;
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="msf_surface_check">
         <parameter name="surf">
            <typename name="surface"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELEMENTARY_SURFACE' IN TYPEOF( surf ) THEN
      RETURN( TRUE );
    ELSE
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SWEPT_SURFACE' IN TYPEOF( surf ) THEN
        RETURN( msf_curve_check( surf\swept_surface.swept_curve ) );
      ELSE
        IF ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_SURFACE' IN TYPEOF( surf ) ) AND ( surf
            \offset_surface.self_intersect = FALSE ) ) OR ( surf\offset_surface.self_intersect = UNKNOWN ) THEN
          RETURN( msf_surface_check( surf\offset_surface.basis_surface ) );
        ELSE
          IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_REPLICA' IN TYPEOF( surf ) THEN
            RETURN( msf_surface_check( surf\surface_replica.parent_surface ) );
          ELSE
            IF ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_SURFACE' IN TYPEOF( surf ) ) AND 
                ( surf\b_spline_surface.self_intersect = FALSE ) ) OR ( surf\b_spline_surface.self_intersect = UNKNOWN ) THEN
              RETURN( TRUE );
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="nmsf_curve_check">
         <parameter name="cv">
            <typename name="representation_item"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOUNDED_CURVE', 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_REPLICA' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_CURVE_3D' ] * TYPEOF( cv ) ) &gt; 1 THEN
      RETURN( FALSE );
    ELSE
      IF ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE' IN TYPEOF( cv ) ) AND ( cv\
          b_spline_curve.self_intersect = FALSE ) ) OR ( cv\b_spline_curve.self_intersect = UNKNOWN ) THEN
        RETURN( TRUE );
      ELSE
        IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC', 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE' ] * TYPEOF( cv ) ) = 1 THEN
          RETURN( TRUE );
        ELSE
          IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_REPLICA' IN TYPEOF( cv ) THEN
            RETURN( nmsf_curve_check( cv\curve_replica.parent_curve ) );
          ELSE
            IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_CURVE_3D' IN TYPEOF( cv ) ) AND ( ( 
                cv\offset_curve_3d.self_intersect = FALSE ) OR ( cv\offset_curve_3d.self_intersect = UNKNOWN ) ) AND ( NOT ( 
                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE'  IN TYPEOF( cv\offset_curve_3d.
                basis_curve ) ) ) THEN
              RETURN( nmsf_curve_check( cv\offset_curve_3d.basis_curve ) );
            ELSE
              IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( cv ) THEN
                RETURN( nmsf_curve_check( cv\pcurve.reference_to_curve\representation.items[1] ) AND nmsf_surface_check( cv\
                    pcurve.basis_surface ) );
              ELSE
                IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_CURVE' IN TYPEOF( cv ) THEN
                  IF nmsf_curve_check( cv\surface_curve.curve_3d ) THEN
                    REPEAT i := 1 TO SIZEOF( cv\surface_curve.associated_geometry ) BY 1;
                      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE' IN TYPEOF( cv\surface_curve
                          .associated_geometry[i] ) THEN
                        IF NOT nmsf_surface_check( cv\surface_curve.associated_geometry[i] ) THEN
                          RETURN( FALSE );
                        END_IF;
                      ELSE
                        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PCURVE' IN TYPEOF( cv\
                            surface_curve.associated_geometry[i] ) THEN
                          IF NOT nmsf_curve_check( cv\surface_curve.associated_geometry[i] ) THEN
                            RETURN( FALSE );
                          END_IF;
                        END_IF;
                      END_IF;
                    END_REPEAT;
                    RETURN( TRUE );
                  END_IF;
                ELSE
                  IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE' IN TYPEOF( cv ) THEN
                    IF SIZEOF( cv\polyline.points ) &gt;= 3 THEN
                      RETURN( TRUE );
                    END_IF;
                  END_IF;
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="nmsf_surface_check">
         <parameter name="surf">
            <typename name="surface"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELEMENTARY_SURFACE' IN TYPEOF( surf ) THEN
      RETURN( TRUE );
    ELSE
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SWEPT_SURFACE' IN TYPEOF( surf ) THEN
        RETURN( nmsf_curve_check( surf\swept_surface.swept_curve ) );
      ELSE
        IF ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_SURFACE' IN TYPEOF( surf ) ) AND ( surf
            \offset_surface.self_intersect = FALSE ) ) OR ( surf\offset_surface.self_intersect = UNKNOWN ) THEN
          RETURN( nmsf_surface_check( surf\offset_surface.basis_surface ) );
        ELSE
          IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SURFACE_REPLICA' IN TYPEOF( surf ) THEN
            RETURN( nmsf_surface_check( surf\surface_replica.parent_surface ) );
          ELSE
            IF ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_SURFACE' IN TYPEOF( surf ) ) AND 
                ( surf\b_spline_surface.self_intersect = FALSE ) ) OR ( surf\b_spline_surface.self_intersect = UNKNOWN ) THEN
              RETURN( TRUE );
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="no_cyclic_domain_reference">
         <parameter name="ref">
            <typename name="maths_space_or_function"/>
         </parameter>
         <parameter name="used">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="maths_function"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      typenames : SET OF STRING := TYPEOF( ref );
      func      : maths_function;
    END_LOCAL;
    IF ( NOT EXISTS( ref ) ) OR ( NOT EXISTS( used ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF ( schema_prefix + 'MATHS_SPACE' ) IN typenames THEN
      RETURN( TRUE );
    END_IF;
    func := ref;
    IF func IN used THEN
      RETURN( FALSE );
    END_IF;
    IF ( schema_prefix + 'CONSTANT_FUNCTION' ) IN typenames THEN
      RETURN( no_cyclic_domain_reference( func\constant_function.source_of_domain, used + [func] ) );
    END_IF;
    IF ( schema_prefix + 'SELECTOR_FUNCTION' ) IN typenames THEN
      RETURN( no_cyclic_domain_reference( func\selector_function.source_of_domain, used + [func] ) );
    END_IF;
    IF ( schema_prefix + 'PARALLEL_COMPOSED_FUNCTION' ) IN typenames THEN
      RETURN( no_cyclic_domain_reference( func\parallel_composed_function.source_of_domain, used + [func] ) );
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="no_cyclic_space_reference">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <parameter name="refs">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      types     : SET OF STRING;
      refs_plus : SET OF maths_space;
    END_LOCAL;
    IF spc IN refs THEN
      RETURN( FALSE );
    END_IF;
    types := TYPEOF( spc );
    refs_plus := refs + spc;
    IF ( schema_prefix + 'FINITE_SPACE' ) IN types THEN
      RETURN( bool( SIZEOF( QUERY ( sp &lt;* QUERY ( mem &lt;* spc\finite_space.members | ( ( schema_prefix + 'MATHS_SPACE' ) IN 
          TYPEOF( mem ) ) ) | ( NOT no_cyclic_space_reference( sp, refs_plus ) ) ) ) = 0 ) );
    END_IF;
    IF ( schema_prefix + 'UNIFORM_PRODUCT_SPACE' ) IN types THEN
      RETURN( no_cyclic_space_reference( spc\uniform_product_space.base, refs_plus ) );
    END_IF;
    IF ( schema_prefix + 'LISTED_PRODUCT_SPACE' ) IN types THEN
      RETURN( bool( SIZEOF( QUERY ( fac &lt;* spc\listed_product_space.factors | ( NOT no_cyclic_space_reference( fac, refs_plus ) ) ) ) 
          = 0 ) );
    END_IF;
    IF ( schema_prefix + 'EXTENDED_TUPLE_SPACE' ) IN types THEN
      RETURN( no_cyclic_space_reference( spc\extended_tuple_space.base, refs_plus ) AND no_cyclic_space_reference( spc\
          extended_tuple_space.extender, refs_plus ) );
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="nondecreasing">
         <parameter name="lr">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="REAL"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF NOT EXISTS( lr ) THEN
      RETURN( FALSE );
    END_IF;
    REPEAT j := 2 TO SIZEOF( lr ) BY 1;
      IF lr[j] &lt; lr[j - 1] THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="normalise">
         <parameter name="arg">
            <typename name="vector_or_direction"/>
         </parameter>
         <typename name="vector_or_direction"/>
         <algorithm>LOCAL
      ndim   : INTEGER;
      v      : direction := dummy_gri || direction( [1, 0, 0] );
      result : vector_or_direction;
      vec    : vector := dummy_gri || vector( v, 1 );
      mag    : REAL;
    END_LOCAL;
    IF NOT EXISTS( arg ) THEN
      result := ?;
    ELSE
      ndim := arg.dim;
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VECTOR' IN TYPEOF( arg ) THEN

        BEGIN
          v := dummy_gri || direction( arg\vector.orientation.direction_ratios );
          IF arg\vector.magnitude = 0 THEN
            RETURN( ? );
          ELSE
            vec := dummy_gri || vector( v, 1 );
          END_IF;
        END;
      ELSE
        v := dummy_gri || direction( arg.direction_ratios );
      END_IF;
      mag := 0;
      REPEAT i := 1 TO ndim BY 1;
        mag := mag + ( v.direction_ratios[i] * v.direction_ratios[i] );
      END_REPEAT;
      IF mag &gt; 0 THEN
        mag := SQRT( mag );
        REPEAT i := 1 TO ndim BY 1;
          v.direction_ratios[i] := v.direction_ratios[i] / mag;
        END_REPEAT;
        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VECTOR' IN TYPEOF( arg ) THEN
          vec.orientation := v;
          result := vec;
        ELSE
          result := v;
        END_IF;
      ELSE
        RETURN( ? );
      END_IF;
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="number_superspace_of">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <typename name="elementary_space"/>
         <algorithm>IF subspace_of_es( spc, es_integers ) THEN
      RETURN( the_integers );
    END_IF;
    IF subspace_of_es( spc, es_reals ) THEN
      RETURN( the_reals );
    END_IF;
    IF subspace_of_es( spc, es_complex_numbers ) THEN
      RETURN( the_complex_numbers );
    END_IF;
    IF subspace_of_es( spc, es_numbers ) THEN
      RETURN( the_numbers );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="number_tuple_subspace_check">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      types   : SET OF STRING := stripped_typeof( spc );
      factors : LIST OF maths_space;
      cum     : LOGICAL := TRUE;
    END_LOCAL;
    IF 'UNIFORM_PRODUCT_SPACE' IN types THEN
      RETURN( subspace_of_es( spc\uniform_product_space.base, es_numbers ) );
    END_IF;
    IF 'LISTED_PRODUCT_SPACE' IN types THEN
      factors := spc\listed_product_space.factors;
      REPEAT i := 1 TO SIZEOF( factors ) BY 1;
        cum := cum AND subspace_of_es( factors[i], es_numbers );
      END_REPEAT;
      RETURN( cum );
    END_IF;
    IF 'EXTENDED_TUPLE_SPACE' IN types THEN
      cum := subspace_of_es( spc\extended_tuple_space.extender, es_numbers );
      cum := cum AND number_tuple_subspace_check( spc\extended_tuple_space.base );
      RETURN( cum );
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="one_tuples_of">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <typename name="tuple_space"/>
         <algorithm>RETURN( make_uniform_product_space( spc, 1 ) );</algorithm>
      </function>
      <function name="open_path_based_inner_boundary">
         <parameter name="input">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="primitive_2d"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      pass : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( input ) BY 1;
      IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH_AREA_WITH_PARAMETERS' IN TYPEOF( input[i] ) ) 
          AND ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCLE' IN TYPEOF( input[i]\mapped_item.
          mapping_source\representation_map.mapping_origin ) ) OR ( ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_CURVE'  IN TYPEOF( input[i]\mapped_item.
          mapping_source\representation_map.mapping_origin ) ) AND ( input[i]\mapped_item.mapping_source\representation_map.
          mapping_origin\composite_curve.closed_curve = TRUE ) ) ) THEN
        pass := FALSE;
      END_IF;
    END_REPEAT;
    RETURN( pass );</algorithm>
      </function>
      <function name="open_shell_reversed">
         <parameter name="a_shell">
            <typename name="open_shell"/>
         </parameter>
         <typename name="oriented_open_shell"/>
         <algorithm>LOCAL
      the_reverse : oriented_open_shell;
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_OPEN_SHELL' IN TYPEOF( a_shell ) THEN
      the_reverse := dummy_tri || connected_face_set( a_shell\connected_face_set.cfs_faces ) || open_shell(  ) || 
          oriented_open_shell( a_shell\oriented_open_shell.open_shell_element, NOT a_shell\oriented_open_shell.orientation );
    ELSE
      the_reverse := dummy_tri || connected_face_set( a_shell\connected_face_set.cfs_faces ) || open_shell(  ) || 
          oriented_open_shell( a_shell, FALSE );
    END_IF;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="orthogonal_complement">
         <parameter name="vec">
            <typename name="direction"/>
         </parameter>
         <typename name="direction"/>
         <algorithm>LOCAL
      result : direction;
    END_LOCAL;
    IF ( vec.dim &lt;&gt; 2 ) OR ( NOT EXISTS( vec ) ) THEN
      RETURN( ? );
    ELSE
      result := dummy_gri || direction( [-vec.direction_ratios[2], vec.direction_ratios[1]] );
      RETURN( result );
    END_IF;</algorithm>
      </function>
      <function name="parallel_composed_function_composability_check">
         <parameter name="funcs">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="maths_function"/>
         </parameter>
         <parameter name="final">
            <typename name="maths_function_select"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      tplsp  : tuple_space := the_zero_tuple_space;
      finfun : maths_function := convert_to_maths_function( final );
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( funcs ) BY 1;
      tplsp := assoc_product_space( tplsp, funcs[i].range );
    END_REPEAT;
    RETURN( compatible_spaces( tplsp, finfun.domain ) );</algorithm>
      </function>
      <function name="parallel_composed_function_domain_check">
         <parameter name="comdom">
            <typename name="tuple_space"/>
         </parameter>
         <parameter name="funcs">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="maths_function"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>REPEAT i := 1 TO SIZEOF( funcs ) BY 1;
      IF NOT compatible_spaces( comdom, funcs[i].domain ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="partial_derivative_check">
         <parameter name="domain">
            <typename name="tuple_space"/>
         </parameter>
         <parameter name="d_vars">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="input_selector"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      domn : tuple_space := domain;
      fspc : maths_space;
      dim  : INTEGER;
      k    : INTEGER;
    END_LOCAL;
    IF ( space_dimension( domain ) = 1 ) AND ( ( schema_prefix + 'TUPLE_SPACE' ) IN TYPEOF( factor1( domain ) ) ) THEN
      domn := factor1( domain );
    END_IF;
    dim := space_dimension( domn );
    REPEAT i := 1 TO SIZEOF( d_vars ) BY 1;
      k := d_vars[i];
      IF k &gt; dim THEN
        RETURN( FALSE );
      END_IF;
      fspc := factor_space( domn, k );
      IF ( NOT subspace_of_es( fspc, es_reals ) ) AND ( NOT subspace_of_es( fspc, es_complex_numbers ) ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="path_head_to_tail">
         <parameter name="a_path">
            <typename name="path"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      n : INTEGER;
      p : LOGICAL := TRUE;
    END_LOCAL;
    n := SIZEOF( a_path.edge_list );
    REPEAT i := 2 TO n BY 1;
      p := p AND ( a_path.edge_list[i - 1].edge_end :=: a_path.edge_list[i].edge_start );
    END_REPEAT;
    RETURN( p );</algorithm>
      </function>
      <function name="path_reversed">
         <parameter name="a_path">
            <typename name="path"/>
         </parameter>
         <typename name="oriented_path"/>
         <algorithm>LOCAL
      the_reverse : oriented_path;
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ORIENTED_PATH' IN TYPEOF( a_path ) THEN
      the_reverse := dummy_tri || path( list_of_topology_reversed( a_path.edge_list ) ) || oriented_path( a_path\oriented_path.
          path_element, NOT a_path\oriented_path.orientation );
    ELSE
      the_reverse := dummy_tri || path( list_of_topology_reversed( a_path.edge_list ) ) || oriented_path( a_path, FALSE );
    END_IF;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="plane_angle_for_pair_in_radian">
         <parameter name="pair">
            <typename name="kinematic_pair"/>
         </parameter>
         <parameter name="angle">
            <typename name="plane_angle_measure"/>
         </parameter>
         <typename name="plane_angle_measure"/>
         <algorithm>LOCAL
      converted_angle : plane_angle_measure := angle;
      link_rep        : kinematic_link_representation := representation_of_link( pair.joint.edge_start );
      link_cntxt      : representation_context;
      pa_units        : SET OF unit := [];
      pau             : unit;
    END_LOCAL;
    link_cntxt := link_rep\representation.context_of_items;
    IF NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GLOBAL_UNIT_ASSIGNED_CONTEXT' IN TYPEOF( 
        link_cntxt ) ) THEN
      RETURN( ? );
    END_IF;
    pa_units := QUERY ( unit &lt;* link_cntxt\global_unit_assigned_context.units | ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_UNIT'  IN TYPEOF( unit ) ) );
    IF SIZEOF( pa_units ) &lt;&gt; 1 THEN
      RETURN( ? );
    END_IF;
    pau := pa_units[1];
    IF ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SI_UNIT' IN TYPEOF( pau ) ) ) AND ( NOT ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONVERSION_BASED_UNIT'  IN TYPEOF( pau ) ) ) THEN
      RETURN( ? );
    END_IF;
    REPEAT WHILE 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONVERSION_BASED_UNIT' IN TYPEOF( pau );
      converted_angle := converted_angle * pau\conversion_based_unit.conversion_factor.value_component;
      pau := pau\conversion_based_unit.conversion_factor.unit_component;
      IF ( ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SI_UNIT' IN TYPEOF( pau ) ) ) AND ( NOT ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONVERSION_BASED_UNIT'  IN TYPEOF( pau ) ) ) ) OR 
          ( NOT ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_UNIT' IN TYPEOF( pau ) ) ) THEN
        RETURN( ? );
      END_IF;
    END_REPEAT;
    IF pau\si_unit.name &lt;&gt; si_unit_name.radian THEN
      RETURN( ? );
    END_IF;
    CASE pau\si_unit.prefix OF
      si_prefix.exa  :         RETURN( 1.e+18 * converted_angle );
      si_prefix.peta :         RETURN( 1.e+15 * converted_angle );
      si_prefix.tera :         RETURN( 1.e+12 * converted_angle );
      si_prefix.giga :         RETURN( 1000000000 * converted_angle );
      si_prefix.mega :         RETURN( 1000000 * converted_angle );
      si_prefix.kilo :         RETURN( 1000 * converted_angle );
      si_prefix.hecto :         RETURN( 100 * converted_angle );
      si_prefix.deca :         RETURN( 10 * converted_angle );
      si_prefix.deci :         RETURN( 0.1 * converted_angle );
      si_prefix.centi :         RETURN( 0.01 * converted_angle );
      si_prefix.milli :         RETURN( 0.001 * converted_angle );
      si_prefix.micro :         RETURN( 1.e-06 * converted_angle );
      si_prefix.nano :         RETURN( 1.e-09 * converted_angle );
      si_prefix.pico :         RETURN( 1.e-12 * converted_angle );
      si_prefix.femto :         RETURN( 1.e-15 * converted_angle );
      si_prefix.atto :         RETURN( 1.e-18 * converted_angle );
      OTHERWISE      :         RETURN( converted_angle );
      END_CASE;</algorithm>
      </function>
      <function name="real_max">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="REAL"/>
         <algorithm>LOCAL
      types : SET OF STRING := TYPEOF( spc );
    END_LOCAL;
    IF ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN types THEN
      RETURN( spc\finite_integer_interval.max );
    END_IF;
    IF ( schema_prefix + 'INTEGER_INTERVAL_TO_MAX' ) IN types THEN
      RETURN( spc\integer_interval_to_max.max );
    END_IF;
    IF ( schema_prefix + 'FINITE_REAL_INTERVAL' ) IN types THEN
      RETURN( spc\finite_real_interval.max );
    END_IF;
    IF ( schema_prefix + 'REAL_INTERVAL_TO_MAX' ) IN types THEN
      RETURN( spc\real_interval_to_max.max );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="real_min">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="REAL"/>
         <algorithm>LOCAL
      types : SET OF STRING := TYPEOF( spc );
    END_LOCAL;
    IF ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN types THEN
      RETURN( spc\finite_integer_interval.min );
    END_IF;
    IF ( schema_prefix + 'INTEGER_INTERVAL_FROM_MIN' ) IN types THEN
      RETURN( spc\integer_interval_from_min.min );
    END_IF;
    IF ( schema_prefix + 'FINITE_REAL_INTERVAL' ) IN types THEN
      RETURN( spc\finite_real_interval.min );
    END_IF;
    IF ( schema_prefix + 'REAL_INTERVAL_FROM_MIN' ) IN types THEN
      RETURN( spc\real_interval_from_min.min );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="relating_shape_representations_of_extreme_values">
         <parameter name="item">
            <typename name="location_of_extreme_value_select"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="shape_representation"/>
         <algorithm>LOCAL
      results : SET OF shape_representation := [];
      exti    : SET OF extreme_instance := [];
      ii_ei   : SET OF instance_report_item_with_extreme_instances := [];
      sdiir   : SET OF shape_data_quality_inspection_instance_report := [];
      sdqr    : SET OF shape_data_quality_inspection_result_representation := [];
      sdisr   : SET OF shape_data_quality_inspected_shape_and_result_relationship := [];
    END_LOCAL;
    exti := exti + bag_to_set( USEDIN( item, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
        'EXTREME_INSTANCE.'  + 'LOCATIONS_OF_EXTREME_VALUE' ) );
    REPEAT i := 1 TO HIINDEX( exti ) BY 1;
      ii_ei := ii_ei + bag_to_set( USEDIN( exti[i], 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
          'INSTANCE_REPORT_ITEM_WITH_EXTREME_INSTANCES.'  + 'EXTREME_INSTANCES' ) );
    END_REPEAT;
    REPEAT i := 1 TO HIINDEX( ii_ei ) BY 1;
      sdiir := sdiir + bag_to_set( USEDIN( ii_ei[i], 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
          'SHAPE_DATA_QUALITY_INSPECTION_INSTANCE_REPORT.'  + 'INSPECTED_INSTANCES' ) );
    END_REPEAT;
    REPEAT i := 1 TO HIINDEX( sdiir ) BY 1;
      sdqr := sdqr + QUERY ( i1 &lt;* bag_to_set( USEDIN( sdiir[i].inspection_result, 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATION.ITEMS'  ) ) | ( ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 
          'SHAPE_DATA_QUALITY_INSPECTION_RESULT_REPRESENTATION'  ) IN TYPEOF( i1 ) ) );
    END_REPEAT;
    REPEAT i := 1 TO HIINDEX( sdqr ) BY 1;
      sdisr := sdisr + bag_to_set( USEDIN( sdqr[i], 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
          'SHAPE_DATA_QUALITY_INSPECTED_SHAPE_AND_RESULT_RELATIONSHIP.'  + 'REP_2' ) );
    END_REPEAT;
    REPEAT i := 1 TO HIINDEX( sdisr ) BY 1;
      results := results + sdisr[i].rep_1;
    END_REPEAT;
    RETURN( results );</algorithm>
      </function>
      <function name="remove_first">
         <parameter name="alist">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="GENERIC" typelabel="gen"/>
         </parameter>
         <aggregate lower="0" type="LIST" upper="?"/>
         <builtintype type="GENERIC" typelabel="gen"/>
         <algorithm>LOCAL
      blist : LIST OF GENERIC:gen := alist;
    END_LOCAL;
    IF SIZEOF( blist ) &gt; 0 THEN
      REMOVE( blist, 1 );
    END_IF;
    RETURN( blist );</algorithm>
      </function>
      <function name="repackage">
         <parameter name="tspace">
            <typename name="tuple_space"/>
         </parameter>
         <parameter name="repckg">
            <typename name="repackage_options"/>
         </parameter>
         <typename name="tuple_space"/>
         <algorithm>CASE repckg OF
      ro_nochange     :         RETURN( tspace );
      ro_wrap_as_tuple :         RETURN( one_tuples_of( tspace ) );
      ro_unwrap_tuple :         RETURN( factor1( tspace ) );
      OTHERWISE       :         RETURN( ? );
      END_CASE;</algorithm>
      </function>
      <function name="representation_of_link">
         <parameter name="link">
            <typename name="kinematic_link"/>
         </parameter>
         <typename name="kinematic_link_representation"/>
         <algorithm>RETURN( ? );</algorithm>
      </function>
      <function name="scalar_times_vector">
         <parameter name="scalar">
            <builtintype type="REAL"/>
         </parameter>
         <parameter name="vec">
            <typename name="vector_or_direction"/>
         </parameter>
         <typename name="vector"/>
         <algorithm>LOCAL
      v      : direction;
      mag    : REAL;
      result : vector;
    END_LOCAL;
    IF ( NOT EXISTS( scalar ) ) OR ( NOT EXISTS( vec ) ) THEN
      RETURN( ? );
    ELSE
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VECTOR' IN TYPEOF( vec ) THEN
        v := dummy_gri || direction( vec\vector.orientation.direction_ratios );
        mag := scalar * vec\vector.magnitude;
      ELSE
        v := dummy_gri || direction( vec.direction_ratios );
        mag := scalar;
      END_IF;
      IF mag &lt; 0 THEN
        REPEAT i := 1 TO SIZEOF( v.direction_ratios ) BY 1;
          v.direction_ratios[i] := -v.direction_ratios[i];
        END_REPEAT;
        mag := -mag;
      END_IF;
      result := dummy_gri || vector( normalise( v ), mag );
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="second_proj_axis">
         <parameter name="z_axis">
            <typename name="direction"/>
         </parameter>
         <parameter name="x_axis">
            <typename name="direction"/>
         </parameter>
         <parameter name="arg">
            <typename name="direction"/>
         </parameter>
         <typename name="direction"/>
         <algorithm>LOCAL
      y_axis : vector;
      v      : direction;
      temp   : vector;
    END_LOCAL;
    IF NOT EXISTS( arg ) THEN
      v := dummy_gri || direction( [0, 1, 0] );
    ELSE
      v := arg;
    END_IF;
    temp := scalar_times_vector( dot_product( v, z_axis ), z_axis );
    y_axis := vector_difference( v, temp );
    temp := scalar_times_vector( dot_product( v, x_axis ), x_axis );
    y_axis := vector_difference( y_axis, temp );
    y_axis := normalise( y_axis );
    RETURN( y_axis.orientation );</algorithm>
      </function>
      <function name="set_of_topology_reversed">
         <parameter name="a_set">
            <typename name="set_of_reversible_topology_item"/>
         </parameter>
         <typename name="set_of_reversible_topology_item"/>
         <algorithm>LOCAL
      the_reverse : set_of_reversible_topology_item;
    END_LOCAL;
    the_reverse := [];
    REPEAT i := 1 TO SIZEOF( a_set ) BY 1;
      the_reverse := the_reverse + topology_reversed( a_set[i] );
    END_REPEAT;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="shape_of_array">
         <parameter name="func">
            <typename name="maths_function"/>
         </parameter>
         <aggregate lower="0" type="LIST" upper="?"/>
         <typename name="positive_integer"/>
         <algorithm>LOCAL
      tspace : tuple_space;
      temp   : maths_space;
      result : LIST OF positive_integer := [];
    END_LOCAL;
    IF ( schema_prefix + 'EXPLICIT_TABLE_FUNCTION' ) IN TYPEOF( func ) THEN
      RETURN( func\explicit_table_function.shape );
    END_IF;
    tspace := func.domain;
    IF ( space_dimension( tspace ) = 1 ) AND ( ( schema_prefix + 'TUPLE_SPACE' ) IN TYPEOF( factor1( tspace ) ) ) THEN
      tspace := factor1( tspace );
    END_IF;
    REPEAT i := 1 TO space_dimension( tspace ) BY 1;
      temp := factor_space( tspace, i );
      IF NOT ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN TYPEOF( temp ) ) THEN
        RETURN( ? );
      END_IF;
      INSERT( result, temp\finite_integer_interval.size, i - 1 );
    END_REPEAT;
    RETURN( result );</algorithm>
      </function>
      <function name="shell_reversed">
         <parameter name="a_shell">
            <typename name="shell"/>
         </parameter>
         <typename name="shell"/>
         <algorithm>IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OPEN_SHELL' IN TYPEOF( a_shell ) THEN
      RETURN( open_shell_reversed( a_shell ) );
    ELSE
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CLOSED_SHELL' IN TYPEOF( a_shell ) THEN
        RETURN( closed_shell_reversed( a_shell ) );
      ELSE
        RETURN( ? );
      END_IF;
    END_IF;</algorithm>
      </function>
      <function name="simplify_function_application">
         <parameter name="expr">
            <typename name="function_application"/>
         </parameter>
         <typename name="maths_value"/>
         <algorithm>FUNCTION ctmv(
                 x : GENERIC:g
             ) : maths_value;
      RETURN( convert_to_maths_value( x ) );

    END_FUNCTION;

    FUNCTION good_t(
                 v : maths_value;
                 tn : STRING
             ) : BOOLEAN;

      LOCAL
        tpl : LIST OF maths_value;
      END_LOCAL;
      IF 'LIST' IN TYPEOF( v ) THEN
        tpl := v;
        REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
          IF NOT ( tn IN TYPEOF( tpl[i] ) ) THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
        RETURN( TRUE );
      END_IF;
      RETURN( FALSE );

    END_FUNCTION;

    FUNCTION makec(
                 x, y : REAL
             ) : complex_number_literal;
      RETURN( make_complex_number_literal( x, y ) );

    END_FUNCTION;

    PROCEDURE parts(
                  c : complex_number_literal;
                  VAR x, y : REAL      );
      x := c.real_part;
      y := c.imag_part;

    END_PROCEDURE;

    CONSTANT
      cnlit : STRING :=
               schema_prefix 
                 +
                 'COMPLEX_NUMBER_LITERAL' ;
    END_CONSTANT;

    LOCAL
      types         : SET OF STRING := stripped_typeof( expr.func );
      ef_val        : elementary_function_enumerators;
      is_elementary : BOOLEAN := FALSE;
      v             : maths_value;
      v1            : maths_value;
      v2            : maths_value;
      v3            : maths_value;
      vlist         : LIST OF maths_value := [];
      gexpr         : generic_expression;
      pairs         : SET [1 : ?] OF LIST [2 : 2] OF maths_value;
      boo           : BOOLEAN;
      lgc           : LOGICAL;
      cum           : LOGICAL;
      j             : INTEGER;
      k             : INTEGER;
      n             : INTEGER;
      p             : REAL;
      q             : REAL;
      r             : REAL;
      s             : REAL;
      t             : REAL;
      u             : REAL;
      str           : STRING;
      st2           : STRING;
      bin           : BINARY;
      bi2           : BINARY;
      tpl           : LIST OF maths_value;
      tp2           : LIST OF maths_value;
      mem           : SET OF maths_value := [];
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( expr.arguments ) BY 1;
      v := simplify_maths_value( expr.arguments[i] );
      INSERT( vlist, v, i - 1 );
    END_REPEAT;
    IF SIZEOF( vlist ) &gt;= 1 THEN
      v1 := vlist[1];
    END_IF;
    IF SIZEOF( vlist ) &gt;= 2 THEN
      v2 := vlist[2];
    END_IF;
    IF SIZEOF( vlist ) &gt;= 3 THEN
      v3 := vlist[3];
    END_IF;
    IF 'ELEMENTARY_FUNCTION_ENUMERATORS' IN types THEN
      ef_val := expr.func;
      is_elementary := TRUE;
    END_IF;
    IF 'ELEMENTARY_FUNCTION' IN types THEN
      ef_val := expr.func\elementary_function.func_id;
      is_elementary := TRUE;
    END_IF;
    IF is_elementary THEN
      CASE ef_val OF
        ef_and            : 
          BEGIN
            cum := TRUE;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF 'LOGICAL' IN TYPEOF( vlist[i] ) THEN
                lgc := vlist[i];
                cum := cum AND lgc;
                IF lgc = FALSE THEN
                  RETURN( ctmv( FALSE ) );
                END_IF;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( cum ) );
            END_IF;
            IF cum &lt;&gt; TRUE THEN
              INSERT( vlist, ctmv( cum ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_or             : 
          BEGIN
            cum := FALSE;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF 'LOGICAL' IN TYPEOF( vlist[i] ) THEN
                lgc := vlist[i];
                cum := cum OR lgc;
                IF lgc = TRUE THEN
                  RETURN( ctmv( TRUE ) );
                END_IF;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( cum ) );
            END_IF;
            IF cum &lt;&gt; FALSE THEN
              INSERT( vlist, ctmv( cum ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_not            :           IF 'LOGICAL' IN TYPEOF( v1 ) THEN
            lgc := v1;
            RETURN( ctmv( NOT lgc ) );
          END_IF;
        ef_xor            : 
          BEGIN
            IF 'LOGICAL' IN TYPEOF( v1 ) THEN
              lgc := v1;
              IF 'LOGICAL' IN TYPEOF( v2 ) THEN
                cum := v2;
                RETURN( ctmv( lgc XOR cum ) );
              ELSE
                IF lgc = FALSE THEN
                  RETURN( ctmv( v2 ) );
                ELSE
                  IF lgc = UNKNOWN THEN
                    RETURN( ctmv( UNKNOWN ) );
                  ELSE
                    RETURN( make_function_application( ef_not, [v2] ) );
                  END_IF;
                END_IF;
              END_IF;
            ELSE
              IF 'LOGICAL' IN TYPEOF( v2 ) THEN
                lgc := v2;
                IF lgc = FALSE THEN
                  RETURN( ctmv( v1 ) );
                ELSE
                  IF lgc = UNKNOWN THEN
                    RETURN( ctmv( UNKNOWN ) );
                  ELSE
                    RETURN( make_function_application( ef_not, [v1] ) );
                  END_IF;
                END_IF;
              END_IF;
            END_IF;
          END;
        ef_negate_i       :           IF 'INTEGER' IN TYPEOF( v1 ) THEN
            j := v1;
            RETURN( ctmv( -j ) );
          END_IF;
        ef_add_i          : 
          BEGIN
            j := 0;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF 'INTEGER' IN TYPEOF( vlist[i] ) THEN
                k := vlist[i];
                j := j + k;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( j ) );
            END_IF;
            IF j &lt;&gt; 0 THEN
              INSERT( vlist, ctmv( j ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_subtract_i     :           IF ( 'INTEGER' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            j := v1;
            k := v2;
            RETURN( ctmv( j - k ) );
          END_IF;
        ef_multiply_i     : 
          BEGIN
            j := 1;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF 'INTEGER' IN TYPEOF( vlist[i] ) THEN
                k := vlist[i];
                j := j * k;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( j ) );
            END_IF;
            IF j &lt;&gt; 1 THEN
              INSERT( vlist, ctmv( j ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_divide_i       :           IF ( 'INTEGER' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            j := v1;
            k := v2;
            RETURN( ctmv( j DIV k ) );
          END_IF;
        ef_mod_i          :           IF ( 'INTEGER' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            j := v1;
            k := v2;
            RETURN( ctmv( j MOD k ) );
          END_IF;
        ef_exponentiate_i :           IF ( 'INTEGER' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            j := v1;
            k := v2;
            n := 1;
            REPEAT i := 1 TO ABS( k ) BY 1;
              n := n * j;
            END_REPEAT;
            IF k &lt; 0 THEN
              n := 1 DIV n;
            END_IF;
            RETURN( ctmv( n ) );
          END_IF;
        ef_eq_i           :           IF ( 'INTEGER' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            j := v1;
            k := v2;
            RETURN( ctmv( j = k ) );
          END_IF;
        ef_ne_i           :           IF ( 'INTEGER' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            j := v1;
            k := v2;
            RETURN( ctmv( j &lt;&gt; k ) );
          END_IF;
        ef_gt_i           :           IF ( 'INTEGER' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            j := v1;
            k := v2;
            RETURN( ctmv( j &gt; k ) );
          END_IF;
        ef_lt_i           :           IF ( 'INTEGER' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            j := v1;
            k := v2;
            RETURN( ctmv( j &lt; k ) );
          END_IF;
        ef_ge_i           :           IF ( 'INTEGER' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            j := v1;
            k := v2;
            RETURN( ctmv( j &gt;= k ) );
          END_IF;
        ef_le_i           :           IF ( 'INTEGER' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            j := v1;
            k := v2;
            RETURN( ctmv( j &lt;= k ) );
          END_IF;
        ef_abs_i          :           IF 'INTEGER' IN TYPEOF( v1 ) THEN
            j := v1;
            RETURN( ctmv( ABS( j ) ) );
          END_IF;
        ef_max_i          : 
          BEGIN
            boo := FALSE;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF 'INTEGER' IN TYPEOF( vlist[i] ) THEN
                IF boo THEN
                  k := vlist[i];
                  IF k &gt; j THEN
                    j := k;
                  END_IF;
                ELSE
                  j := vlist[i];
                  boo := TRUE;
                END_IF;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( j ) );
            END_IF;
            IF boo THEN
              INSERT( vlist, ctmv( j ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_min_i          : 
          BEGIN
            boo := FALSE;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF 'INTEGER' IN TYPEOF( vlist[i] ) THEN
                IF boo THEN
                  k := vlist[i];
                  IF k &lt; j THEN
                    j := k;
                  END_IF;
                ELSE
                  j := vlist[i];
                  boo := TRUE;
                END_IF;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( j ) );
            END_IF;
            IF boo THEN
              INSERT( vlist, ctmv( j ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_negate_r       :           IF 'REAL' IN TYPEOF( v1 ) THEN
            r := v1;
            RETURN( ctmv( -r ) );
          END_IF;
        ef_reciprocal_r   :           IF 'REAL' IN TYPEOF( v1 ) THEN
            r := v1;
            RETURN( ctmv( 1 / r ) );
          END_IF;
        ef_add_r          : 
          BEGIN
            r := 0;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF 'REAL' IN TYPEOF( vlist[i] ) THEN
                s := vlist[i];
                r := r + s;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( r ) );
            END_IF;
            IF r &lt;&gt; 0 THEN
              INSERT( vlist, ctmv( r ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_subtract_r     :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND ( 'REAL' IN TYPEOF( v2 ) ) THEN
            r := v1;
            s := v2;
            RETURN( ctmv( r - s ) );
          END_IF;
        ef_multiply_r     : 
          BEGIN
            r := 1;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF 'REAL' IN TYPEOF( vlist[i] ) THEN
                s := vlist[i];
                r := r * s;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( r ) );
            END_IF;
            IF r &lt;&gt; 1 THEN
              INSERT( vlist, ctmv( r ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_divide_r       :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND ( 'REAL' IN TYPEOF( v2 ) ) THEN
            r := v1;
            s := v2;
            RETURN( ctmv( r / s ) );
          END_IF;
        ef_mod_r          :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND ( 'REAL' IN TYPEOF( v2 ) ) THEN
            r := v1;
            s := v2;
            t := r / s;
            j := t DIV 1;
            IF ( t &lt; 0 ) AND ( j &lt;&gt; t ) THEN
              j := j - 1;
            END_IF;
            RETURN( ctmv( r - ( j * s ) ) );
          END_IF;
        ef_exponentiate_r :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND ( 'REAL' IN TYPEOF( v2 ) ) THEN
            r := v1;
            s := v2;
            RETURN( ctmv( r ** s ) );
          END_IF;
        ef_exponentiate_ri :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            r := v1;
            k := v2;
            t := 1;
            REPEAT i := 1 TO ABS( k ) BY 1;
              t := t * r;
            END_REPEAT;
            IF k &lt; 0 THEN
              t := 1 / t;
            END_IF;
            RETURN( ctmv( t ) );
          END_IF;
        ef_eq_r           :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND ( 'REAL' IN TYPEOF( v2 ) ) THEN
            r := v1;
            s := v2;
            RETURN( ctmv( r = s ) );
          END_IF;
        ef_ne_r           :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND ( 'REAL' IN TYPEOF( v2 ) ) THEN
            r := v1;
            s := v2;
            RETURN( ctmv( r &lt;&gt; s ) );
          END_IF;
        ef_gt_r           :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND ( 'REAL' IN TYPEOF( v2 ) ) THEN
            r := v1;
            s := v2;
            RETURN( ctmv( r &gt; s ) );
          END_IF;
        ef_lt_r           :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND ( 'REAL' IN TYPEOF( v2 ) ) THEN
            r := v1;
            s := v2;
            RETURN( ctmv( r &lt; s ) );
          END_IF;
        ef_ge_r           :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND ( 'REAL' IN TYPEOF( v2 ) ) THEN
            r := v1;
            s := v2;
            RETURN( ctmv( r &gt;= s ) );
          END_IF;
        ef_le_r           :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND ( 'REAL' IN TYPEOF( v2 ) ) THEN
            r := v1;
            s := v2;
            RETURN( ctmv( r &lt;= s ) );
          END_IF;
        ef_abs_r          :           IF 'REAL' IN TYPEOF( v1 ) THEN
            r := v1;
            RETURN( ctmv( ABS( r ) ) );
          END_IF;
        ef_max_r          : 
          BEGIN
            boo := FALSE;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF 'REAL' IN TYPEOF( vlist[i] ) THEN
                IF boo THEN
                  s := vlist[i];
                  IF s &gt; r THEN
                    r := s;
                  END_IF;
                ELSE
                  r := vlist[i];
                  boo := TRUE;
                END_IF;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( r ) );
            END_IF;
            IF boo THEN
              INSERT( vlist, ctmv( r ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_min_r          : 
          BEGIN
            boo := FALSE;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF 'REAL' IN TYPEOF( vlist[i] ) THEN
                IF boo THEN
                  s := vlist[i];
                  IF s &lt; r THEN
                    r := s;
                  END_IF;
                ELSE
                  r := vlist[i];
                  boo := TRUE;
                END_IF;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( r ) );
            END_IF;
            IF boo THEN
              INSERT( vlist, ctmv( r ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_acos_r         :           IF 'REAL' IN TYPEOF( v1 ) THEN
            r := v1;
            RETURN( ctmv( ACOS( r ) ) );
          END_IF;
        ef_asin_r         :           IF 'REAL' IN TYPEOF( v1 ) THEN
            r := v1;
            RETURN( ctmv( ASIN( r ) ) );
          END_IF;
        ef_atan2_r        :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND ( 'REAL' IN TYPEOF( v2 ) ) THEN
            r := v1;
            s := v2;
            RETURN( ctmv( atan2( r, s ) ) );
          END_IF;
        ef_cos_r          :           IF 'REAL' IN TYPEOF( v1 ) THEN
            r := v1;
            RETURN( ctmv( COS( r ) ) );
          END_IF;
        ef_exp_r          :           IF 'REAL' IN TYPEOF( v1 ) THEN
            r := v1;
            RETURN( ctmv( EXP( r ) ) );
          END_IF;
        ef_ln_r           :           IF 'REAL' IN TYPEOF( v1 ) THEN
            r := v1;
            RETURN( ctmv( LOG( r ) ) );
          END_IF;
        ef_log2_r         :           IF 'REAL' IN TYPEOF( v1 ) THEN
            r := v1;
            RETURN( ctmv( LOG2( r ) ) );
          END_IF;
        ef_log10_r        :           IF 'REAL' IN TYPEOF( v1 ) THEN
            r := v1;
            RETURN( ctmv( LOG10( r ) ) );
          END_IF;
        ef_sin_r          :           IF 'REAL' IN TYPEOF( v1 ) THEN
            r := v1;
            RETURN( ctmv( SIN( r ) ) );
          END_IF;
        ef_sqrt_r         :           IF 'REAL' IN TYPEOF( v1 ) THEN
            r := v1;
            RETURN( ctmv( SQRT( r ) ) );
          END_IF;
        ef_tan_r          :           IF 'REAL' IN TYPEOF( v1 ) THEN
            r := v1;
            RETURN( ctmv( TAN( r ) ) );
          END_IF;
        ef_form_c         :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND ( 'REAL' IN TYPEOF( v2 ) ) THEN
            r := v1;
            s := v2;
            RETURN( makec( r, s ) );
          END_IF;
        ef_rpart_c        :           IF cnlit IN TYPEOF( v1 ) THEN
            RETURN( ctmv( v1\complex_number_literal.real_part ) );
          END_IF;
        ef_ipart_c        :           IF cnlit IN TYPEOF( v1 ) THEN
            RETURN( ctmv( v1\complex_number_literal.imag_part ) );
          END_IF;
        ef_negate_c       :           IF cnlit IN TYPEOF( v1 ) THEN
            parts( v1, p, q );
            RETURN( makec( -p, -q ) );
          END_IF;
        ef_reciprocal_c   :           IF cnlit IN TYPEOF( v1 ) THEN
            parts( v1, p, q );
            t := ( p * p ) + ( q * q );
            RETURN( makec( p / t, ( -q ) / t ) );
          END_IF;
        ef_add_c          : 
          BEGIN
            p := 0;
            q := 0;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF cnlit IN TYPEOF( vlist[i] ) THEN
                parts( vlist[i], r, s );
                p := p + r;
                q := q + s;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( makec( p, q ) );
            END_IF;
            IF ( ( p * p ) + ( q * q ) ) &lt;&gt; 0 THEN
              INSERT( vlist, makec( p, q ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_subtract_c     :           IF ( cnlit IN TYPEOF( v1 ) ) AND ( cnlit IN TYPEOF( v2 ) ) THEN
            parts( v1, p, q );
            parts( v2, r, s );
            RETURN( makec( p - r, q - s ) );
          END_IF;
        ef_multiply_c     : 
          BEGIN
            p := 1;
            q := 0;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF cnlit IN TYPEOF( vlist[i] ) THEN
                parts( vlist[i], r, s );
                p := ( p * r ) - ( q * s );
                q := ( p * s ) + ( q * r );
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( makec( p, q ) );
            END_IF;
            IF ( p &lt;&gt; 1 ) OR ( q &lt;&gt; 0 ) THEN
              INSERT( vlist, makec( p, q ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_divide_c       :           IF ( cnlit IN TYPEOF( v1 ) ) AND ( cnlit IN TYPEOF( v2 ) ) THEN
            parts( v1, p, q );
            parts( v2, r, s );
            t := ( r * r ) + ( s * s );
            RETURN( makec( ( ( p * r ) + ( q * s ) ) / t, ( ( q * r ) - ( p * s ) ) / t ) );
          END_IF;
        ef_exponentiate_c :           IF ( cnlit IN TYPEOF( v1 ) ) AND ( cnlit IN TYPEOF( v2 ) ) THEN
            parts( v1, p, q );
            parts( v2, r, s );
            t := 0.5 * LOG( ( p * p ) + ( q * q ) );
            u := atan2( q, p );
            p := ( r * t ) - ( s * u );
            q := ( r * u ) + ( s * t );
            r := EXP( p );
            RETURN( makec( r * COS( q ), r * SIN( q ) ) );
          END_IF;
        ef_exponentiate_ci :           IF ( cnlit IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            parts( v1, p, q );
            k := v2;
            r := 1;
            s := 0;
            REPEAT i := 1 TO ABS( k ) BY 1;
              r := ( p * r ) - ( q * s );
              s := ( p * s ) + ( q * r );
            END_REPEAT;
            IF k &lt; 0 THEN
              t := ( r * r ) + ( s * s );
              r := r / t;
              s := ( -s ) / t;
            END_IF;
            RETURN( makec( r, s ) );
          END_IF;
        ef_eq_c           :           IF ( cnlit IN TYPEOF( v1 ) ) AND ( cnlit IN TYPEOF( v2 ) ) THEN
            parts( v1, p, q );
            parts( v2, r, s );
            RETURN( ctmv( ( p = r ) AND ( q = s ) ) );
          END_IF;
        ef_ne_c           :           IF ( cnlit IN TYPEOF( v1 ) ) AND ( cnlit IN TYPEOF( v2 ) ) THEN
            parts( v1, p, q );
            parts( v2, r, s );
            RETURN( ctmv( ( p &lt;&gt; r ) OR ( q &lt;&gt; s ) ) );
          END_IF;
        ef_conjugate_c    :           IF cnlit IN TYPEOF( v1 ) THEN
            parts( v1, p, q );
            RETURN( makec( p, -q ) );
          END_IF;
        ef_abs_c          :           IF cnlit IN TYPEOF( v1 ) THEN
            parts( v1, p, q );
            RETURN( ctmv( SQRT( ( p * p ) + ( q * q ) ) ) );
          END_IF;
        ef_arg_c          :           IF cnlit IN TYPEOF( v1 ) THEN
            parts( v1, p, q );
            RETURN( ctmv( atan2( q, p ) ) );
          END_IF;
        ef_cos_c          :           IF cnlit IN TYPEOF( v1 ) THEN
            parts( v1, p, q );
            t := 0.5 * EXP( -q );
            u := 0.5 * EXP( q );
            RETURN( makec( ( t + u ) * COS( p ), ( t - u ) * SIN( p ) ) );
          END_IF;
        ef_exp_c          :           IF cnlit IN TYPEOF( v1 ) THEN
            parts( v1, p, q );
            RETURN( makec( EXP( p ) * COS( q ), EXP( p ) * SIN( q ) ) );
          END_IF;
        ef_ln_c           :           IF cnlit IN TYPEOF( v1 ) THEN
            parts( v1, p, q );
            RETURN( makec( 0.5 * LOG( ( p * p ) + ( q * q ) ), atan2( q, p ) ) );
          END_IF;
        ef_sin_c          :           IF cnlit IN TYPEOF( v1 ) THEN
            parts( v1, p, q );
            t := 0.5 * EXP( -q );
            u := 0.5 * EXP( q );
            RETURN( makec( ( t + u ) * SIN( p ), ( u - t ) * COS( p ) ) );
          END_IF;
        ef_sqrt_c         :           IF cnlit IN TYPEOF( v1 ) THEN
            parts( v1, p, q );
            t := SQRT( SQRT( ( p * p ) + ( q * q ) ) );
            u := 0.5 * atan2( q, p );
            RETURN( makec( t * COS( u ), t * SIN( u ) ) );
          END_IF;
        ef_tan_c          :           IF cnlit IN TYPEOF( v1 ) THEN
            parts( v1, p, q );
            t := EXP( 2 * q ) + EXP( ( -2 ) * q ) + ( 2 * COS( 2 * p ) );
            RETURN( makec( ( 2 * SIN( 2 * p ) ) / t, ( EXP( ( -2 ) * q ) - EXP( 2 * q ) ) / t ) );
          END_IF;
        ef_subscript_s    :           IF ( 'STRING' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            str := v1;
            k := v2;
            RETURN( ctmv( str[k] ) );
          END_IF;
        ef_eq_s           :           IF ( 'STRING' IN TYPEOF( v1 ) ) AND ( 'STRING' IN TYPEOF( v2 ) ) THEN
            str := v1;
            st2 := v2;
            RETURN( ctmv( str = st2 ) );
          END_IF;
        ef_ne_s           :           IF ( 'STRING' IN TYPEOF( v1 ) ) AND ( 'STRING' IN TYPEOF( v2 ) ) THEN
            str := v1;
            st2 := v2;
            RETURN( ctmv( str &lt;&gt; st2 ) );
          END_IF;
        ef_gt_s           :           IF ( 'STRING' IN TYPEOF( v1 ) ) AND ( 'STRING' IN TYPEOF( v2 ) ) THEN
            str := v1;
            st2 := v2;
            RETURN( ctmv( str &gt; st2 ) );
          END_IF;
        ef_lt_s           :           IF ( 'STRING' IN TYPEOF( v1 ) ) AND ( 'STRING' IN TYPEOF( v2 ) ) THEN
            str := v1;
            st2 := v2;
            RETURN( ctmv( str &lt; st2 ) );
          END_IF;
        ef_ge_s           :           IF ( 'STRING' IN TYPEOF( v1 ) ) AND ( 'STRING' IN TYPEOF( v2 ) ) THEN
            str := v1;
            st2 := v2;
            RETURN( ctmv( str &gt;= st2 ) );
          END_IF;
        ef_le_s           :           IF ( 'STRING' IN TYPEOF( v1 ) ) AND ( 'STRING' IN TYPEOF( v2 ) ) THEN
            str := v1;
            st2 := v2;
            RETURN( ctmv( str &lt;= st2 ) );
          END_IF;
        ef_subsequence_s  :           IF ( 'STRING' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) AND ( 'INTEGER' IN 
              TYPEOF( v3 ) ) THEN
            str := v1;
            j := v2;
            k := v3;
            RETURN( ctmv( str[j : k] ) );
          END_IF;
        ef_concat_s       : 
          BEGIN
            str := '';
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF 'STRING' IN TYPEOF( vlist[i] ) THEN
                st2 := vlist[i];
                str := str + st2;
                REMOVE( vlist, i );
              ELSE
                IF str &lt;&gt; '' THEN
                  INSERT( vlist, ctmv( str ), i );
                  str := '';
                END_IF;
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( str ) );
            END_IF;
            IF str &lt;&gt; '' THEN
              INSERT( vlist, ctmv( str ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_size_s         :           IF 'STRING' IN TYPEOF( v1 ) THEN
            str := v1;
            RETURN( ctmv( LENGTH( str ) ) );
          END_IF;
        ef_format         :           IF ( 'NUMBER' IN TYPEOF( v1 ) ) AND ( 'STRING' IN TYPEOF( v2 ) ) THEN
            RETURN( ctmv( FORMAT( v1, v2 ) ) );
          END_IF;
        ef_value          :           IF 'STRING' IN TYPEOF( v1 ) THEN
            str := v1;
            RETURN( ctmv( VALUE( str ) ) );
          END_IF;
        ef_like           :           IF ( 'STRING' IN TYPEOF( v1 ) ) AND ( 'STRING' IN TYPEOF( v2 ) ) THEN
            RETURN( ctmv( v1 LIKE v2 ) );
          END_IF;
        ef_subscript_b    :           IF ( 'BINARY' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            bin := v1;
            k := v2;
            RETURN( ctmv( bin[k] ) );
          END_IF;
        ef_eq_b           :           IF ( 'BINARY' IN TYPEOF( v1 ) ) AND ( 'BINARY' IN TYPEOF( v2 ) ) THEN
            bin := v1;
            bi2 := v2;
            RETURN( ctmv( bin = bi2 ) );
          END_IF;
        ef_ne_b           :           IF ( 'BINARY' IN TYPEOF( v1 ) ) AND ( 'BINARY' IN TYPEOF( v2 ) ) THEN
            bin := v1;
            bi2 := v2;
            RETURN( ctmv( bin &lt;&gt; bi2 ) );
          END_IF;
        ef_gt_b           :           IF ( 'BINARY' IN TYPEOF( v1 ) ) AND ( 'BINARY' IN TYPEOF( v2 ) ) THEN
            bin := v1;
            bi2 := v2;
            RETURN( ctmv( bin &gt; bi2 ) );
          END_IF;
        ef_lt_b           :           IF ( 'BINARY' IN TYPEOF( v1 ) ) AND ( 'BINARY' IN TYPEOF( v2 ) ) THEN
            bin := v1;
            bi2 := v2;
            RETURN( ctmv( bin &lt; bi2 ) );
          END_IF;
        ef_ge_b           :           IF ( 'BINARY' IN TYPEOF( v1 ) ) AND ( 'BINARY' IN TYPEOF( v2 ) ) THEN
            bin := v1;
            bi2 := v2;
            RETURN( ctmv( bin &gt;= bi2 ) );
          END_IF;
        ef_le_b           :           IF ( 'BINARY' IN TYPEOF( v1 ) ) AND ( 'BINARY' IN TYPEOF( v2 ) ) THEN
            bin := v1;
            bi2 := v2;
            RETURN( ctmv( bin &lt;= bi2 ) );
          END_IF;
        ef_subsequence_b  :           IF ( 'BINARY' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) AND ( 'INTEGER' IN 
              TYPEOF( v3 ) ) THEN
            bin := v1;
            j := v2;
            k := v3;
            RETURN( ctmv( bin[j : k] ) );
          END_IF;
        ef_concat_b       : 
          BEGIN
            boo := FALSE;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF 'BINARY' IN TYPEOF( vlist[i] ) THEN
                IF boo THEN
                  bi2 := vlist[i];
                  bin := bin + bi2;
                ELSE
                  bin := vlist[i];
                  boo := TRUE;
                END_IF;
                REMOVE( vlist, i );
              ELSE
                IF boo THEN
                  INSERT( vlist, ctmv( bin ), i );
                  boo := FALSE;
                END_IF;
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( bin ) );
            END_IF;
            IF boo THEN
              INSERT( vlist, ctmv( bin ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_size_b         :           IF 'BINARY' IN TYPEOF( v1 ) THEN
            bin := v1;
            RETURN( ctmv( BLENGTH( bin ) ) );
          END_IF;
        ef_subscript_t    :           IF ( 'LIST' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            tpl := v1;
            k := v2;
            RETURN( ctmv( tpl[k] ) );
          END_IF;
        ef_eq_t           :           IF ( 'LIST' IN TYPEOF( v1 ) ) AND ( 'LIST' IN TYPEOF( v2 ) ) THEN
            lgc := equal_maths_values( v1, v2 );
            IF lgc &lt;&gt; UNKNOWN THEN
              RETURN( ctmv( lgc ) );
            END_IF;
          END_IF;
        ef_ne_t           :           IF ( 'LIST' IN TYPEOF( v1 ) ) AND ( 'LIST' IN TYPEOF( v2 ) ) THEN
            lgc := equal_maths_values( v1, v2 );
            IF lgc &lt;&gt; UNKNOWN THEN
              RETURN( ctmv( NOT lgc ) );
            END_IF;
          END_IF;
        ef_concat_t       : 
          BEGIN
            tpl := [];
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF 'STRING' IN TYPEOF( vlist[i] ) THEN
                tp2 := vlist[i];
                tpl := tpl + tp2;
                REMOVE( vlist, i );
              ELSE
                IF SIZEOF( tpl ) &lt;&gt; 0 THEN
                  INSERT( vlist, ctmv( tpl ), i );
                  tpl := [];
                END_IF;
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( tpl ) );
            END_IF;
            IF SIZEOF( tpl ) &lt;&gt; 0 THEN
              INSERT( vlist, ctmv( tpl ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_size_t         :           IF 'LIST' IN TYPEOF( v1 ) THEN
            tpl := v1;
            RETURN( ctmv( SIZEOF( tpl ) ) );
          END_IF;
        ef_entuple        :           RETURN( ctmv( vlist ) );
        ef_detuple        :           IF 'LIST' IN TYPEOF( v1 ) THEN
            tpl := v1;
            RETURN( ctmv( tpl[1] ) );
          END_IF;
        ef_insert         :           IF ( 'LIST' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v3 ) ) THEN
            tpl := v1;
            k := v3;
            INSERT( tpl, v2, k );
            RETURN( ctmv( tpl ) );
          END_IF;
        ef_remove         :           IF ( 'LIST' IN TYPEOF( v1 ) ) AND ( 'INTEGER' IN TYPEOF( v2 ) ) THEN
            tpl := v1;
            k := v2;
            REMOVE( tpl, k );
            RETURN( ctmv( tpl ) );
          END_IF;
        ef_sum_it         :           IF good_t( v1, 'INTEGER' ) THEN
            tpl := v1;
            j := 0;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              j := j + tpl[i];
            END_REPEAT;
            RETURN( ctmv( j ) );
          END_IF;
        ef_product_it     :           IF good_t( v1, 'INTEGER' ) THEN
            tpl := v1;
            j := 1;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              j := j * tpl[i];
            END_REPEAT;
            RETURN( ctmv( j ) );
          END_IF;
        ef_add_it         : 
          BEGIN
            boo := FALSE;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF good_t( vlist[i], 'INTEGER' ) THEN
                IF NOT boo THEN
                  tpl := vlist[i];
                  boo := TRUE;
                ELSE
                  tp2 := vlist[i];
                  IF SIZEOF( tpl ) &lt;&gt; SIZEOF( tp2 ) THEN
                    RETURN( ? );
                  END_IF;
                  REPEAT l := 1 TO SIZEOF( tpl ) BY 1;
                    tpl[j] := tpl[j] + tp2[j];
                  END_REPEAT;
                END_IF;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( tpl ) );
            END_IF;
            IF boo THEN
              INSERT( vlist, ctmv( tpl ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_subtract_it    :           IF good_t( v1, 'INTEGER' ) AND good_t( v2, 'INTEGER' ) THEN
            tpl := v1;
            tp2 := v2;
            IF SIZEOF( tpl ) &lt;&gt; SIZEOF( tp2 ) THEN
              RETURN( ? );
            END_IF;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              tpl[i] := tpl[i] - tp2[i];
            END_REPEAT;
            RETURN( ctmv( tpl ) );
          END_IF;
        ef_scalar_mult_it :           IF ( 'INTEGER' IN TYPEOF( v1 ) ) AND good_t( v2, 'INTEGER' ) THEN
            j := v1;
            tpl := v2;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              tpl[i] := j * tpl[i];
            END_REPEAT;
            RETURN( ctmv( tpl ) );
          END_IF;
        ef_dot_prod_it    :           IF good_t( v1, 'INTEGER' ) AND good_t( v2, 'INTEGER' ) THEN
            tpl := v1;
            tp2 := v2;
            j := 0;
            IF SIZEOF( tpl ) &lt;&gt; SIZEOF( tp2 ) THEN
              RETURN( ? );
            END_IF;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              j := j + ( tpl[i] * tp2[i] );
            END_REPEAT;
            RETURN( ctmv( j ) );
          END_IF;
        ef_sum_rt         :           IF good_t( v1, 'REAL' ) THEN
            tpl := v1;
            r := 0;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              r := r + tpl[i];
            END_REPEAT;
            RETURN( ctmv( r ) );
          END_IF;
        ef_product_rt     :           IF good_t( v1, 'REAL' ) THEN
            tpl := v1;
            r := 1;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              r := r * tpl[i];
            END_REPEAT;
            RETURN( ctmv( r ) );
          END_IF;
        ef_add_rt         : 
          BEGIN
            boo := FALSE;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF good_t( vlist[i], 'REAL' ) THEN
                IF NOT boo THEN
                  tpl := vlist[i];
                  boo := TRUE;
                ELSE
                  tp2 := vlist[i];
                  IF SIZEOF( tpl ) &lt;&gt; SIZEOF( tp2 ) THEN
                    RETURN( ? );
                  END_IF;
                  REPEAT l := 1 TO SIZEOF( tpl ) BY 1;
                    tpl[j] := tpl[j] + tp2[j];
                  END_REPEAT;
                END_IF;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( tpl ) );
            END_IF;
            IF boo THEN
              INSERT( vlist, ctmv( tpl ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_subtract_rt    :           IF good_t( v1, 'REAL' ) AND good_t( v2, 'REAL' ) THEN
            tpl := v1;
            tp2 := v2;
            IF SIZEOF( tpl ) &lt;&gt; SIZEOF( tp2 ) THEN
              RETURN( ? );
            END_IF;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              tpl[i] := tpl[i] - tp2[i];
            END_REPEAT;
            RETURN( ctmv( tpl ) );
          END_IF;
        ef_scalar_mult_rt :           IF ( 'REAL' IN TYPEOF( v1 ) ) AND good_t( v2, 'REAL' ) THEN
            r := v1;
            tpl := v2;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              tpl[i] := r * tpl[i];
            END_REPEAT;
            RETURN( ctmv( tpl ) );
          END_IF;
        ef_dot_prod_rt    :           IF good_t( v1, 'REAL' ) AND good_t( v2, 'REAL' ) THEN
            tpl := v1;
            tp2 := v2;
            r := 0;
            IF SIZEOF( tpl ) &lt;&gt; SIZEOF( tp2 ) THEN
              RETURN( ? );
            END_IF;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              r := r + ( tpl[i] * tp2[i] );
            END_REPEAT;
            RETURN( ctmv( r ) );
          END_IF;
        ef_norm_rt        :           IF good_t( v1, 'REAL' ) THEN
            tpl := v1;
            r := 0;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              r := r + ( tpl[i] * tpl[i] );
            END_REPEAT;
            RETURN( ctmv( SQRT( r ) ) );
          END_IF;
        ef_sum_ct         :           IF good_t( v1, cnlit ) THEN
            tpl := v1;
            p := 0;
            q := 0;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              parts( tpl[i], r, s );
              p := p + r;
              q := q + s;
            END_REPEAT;
            RETURN( makec( p, q ) );
          END_IF;
        ef_product_ct     :           IF good_t( v1, cnlit ) THEN
            tpl := v1;
            p := 1;
            q := 0;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              parts( tpl[i], r, s );
              p := ( p * r ) - ( q * s );
              q := ( p * s ) + ( q * r );
            END_REPEAT;
            RETURN( makec( p, q ) );
          END_IF;
        ef_add_ct         : 
          BEGIN
            boo := FALSE;
            REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
              IF good_t( vlist[i], cnlit ) THEN
                IF NOT boo THEN
                  tpl := vlist[i];
                  boo := TRUE;
                ELSE
                  tp2 := vlist[i];
                  IF SIZEOF( tpl ) &lt;&gt; SIZEOF( tp2 ) THEN
                    RETURN( ? );
                  END_IF;
                  REPEAT l := 1 TO SIZEOF( tpl ) BY 1;
                    parts( tpl[j], p, q );
                    parts( tp2[j], r, s );
                    tpl[j] := makec( p + r, q + s );
                  END_REPEAT;
                END_IF;
                REMOVE( vlist, i );
              END_IF;
            END_REPEAT;
            IF SIZEOF( vlist ) = 0 THEN
              RETURN( ctmv( tpl ) );
            END_IF;
            IF boo THEN
              INSERT( vlist, ctmv( tpl ), 0 );
            END_IF;
            IF SIZEOF( vlist ) = 1 THEN
              RETURN( vlist[1] );
            END_IF;
          END;
        ef_subtract_ct    :           IF good_t( v1, cnlit ) AND good_t( v2, cnlit ) THEN
            tpl := v1;
            tp2 := v2;
            IF SIZEOF( tpl ) &lt;&gt; SIZEOF( tp2 ) THEN
              RETURN( ? );
            END_IF;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              parts( tpl[i], p, q );
              parts( tp2[i], r, s );
              tpl[i] := makec( p - r, q - s );
            END_REPEAT;
            RETURN( ctmv( tpl ) );
          END_IF;
        ef_scalar_mult_ct :           IF ( cnlit IN TYPEOF( v1 ) ) AND good_t( v2, cnlit ) THEN
            parts( v1, p, q );
            tpl := v2;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              parts( tpl[i], r, s );
              tpl[i] := makec( ( p * r ) - ( q * s ), ( p * s ) + ( q * r ) );
            END_REPEAT;
            RETURN( ctmv( tpl ) );
          END_IF;
        ef_dot_prod_ct    :           IF good_t( v1, cnlit ) AND good_t( v2, cnlit ) THEN
            tpl := v1;
            tp2 := v2;
            t := 0;
            u := 0;
            IF SIZEOF( tpl ) &lt;&gt; SIZEOF( tp2 ) THEN
              RETURN( ? );
            END_IF;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              parts( tpl[i], p, q );
              parts( tp2[i], r, s );
              t := t + ( p * r ) + ( q * s );
              u := ( u + ( q * r ) ) - ( p * s );
            END_REPEAT;
            RETURN( makec( t, u ) );
          END_IF;
        ef_norm_ct        :           IF good_t( v1, cnlit ) THEN
            tpl := v1;
            r := 0;
            REPEAT i := 1 TO SIZEOF( tpl ) BY 1;
              parts( tpl[i], p, q );
              r := r + ( p * p ) + ( q * q );
            END_REPEAT;
            RETURN( ctmv( SQRT( r ) ) );
          END_IF;
        ef_if             :           IF 'LOGICAL' IN TYPEOF( v1 ) THEN
            lgc := v1;
            IF lgc THEN
              RETURN( v2 );
            ELSE
              RETURN( v3 );
            END_IF;
          END_IF;
        ef_if_i           :           IF 'LOGICAL' IN TYPEOF( v1 ) THEN
            lgc := v1;
            IF lgc THEN
              RETURN( v2 );
            ELSE
              RETURN( v3 );
            END_IF;
          END_IF;
        ef_if_r           :           IF 'LOGICAL' IN TYPEOF( v1 ) THEN
            lgc := v1;
            IF lgc THEN
              RETURN( v2 );
            ELSE
              RETURN( v3 );
            END_IF;
          END_IF;
        ef_if_c           :           IF 'LOGICAL' IN TYPEOF( v1 ) THEN
            lgc := v1;
            IF lgc THEN
              RETURN( v2 );
            ELSE
              RETURN( v3 );
            END_IF;
          END_IF;
        ef_if_s           :           IF 'LOGICAL' IN TYPEOF( v1 ) THEN
            lgc := v1;
            IF lgc THEN
              RETURN( v2 );
            ELSE
              RETURN( v3 );
            END_IF;
          END_IF;
        ef_if_b           :           IF 'LOGICAL' IN TYPEOF( v1 ) THEN
            lgc := v1;
            IF lgc THEN
              RETURN( v2 );
            ELSE
              RETURN( v3 );
            END_IF;
          END_IF;
        ef_if_t           :           IF 'LOGICAL' IN TYPEOF( v1 ) THEN
            lgc := v1;
            IF lgc THEN
              RETURN( v2 );
            ELSE
              RETURN( v3 );
            END_IF;
          END_IF;
        ef_ensemble       :           RETURN( make_finite_space( mem + vlist ) );
        ef_member_of      :           IF ( schema_prefix + 'MATHS_SPACE' ) IN TYPEOF( v2 ) THEN
            lgc := member_of( v1, v2 );
            IF lgc &lt;&gt; UNKNOWN THEN
              RETURN( ctmv( lgc ) );
            END_IF;
          END_IF;
        END_CASE;
      RETURN( make_function_application( expr.func, vlist ) );
    END_IF;
    IF 'ABSTRACTED_EXPRESSION_FUNCTION' IN types THEN
      gexpr := substitute( expr.func\abstracted_expression_function.expr, expr.func\quantifier_expression.variables, vlist );
      RETURN( simplify_generic_expression( gexpr ) );
    END_IF;
    IF 'FINITE_FUNCTION' IN types THEN
      pairs := expr.func\finite_function.pairs;
      REPEAT i := 1 TO SIZEOF( pairs ) BY 1;
        IF equal_maths_values( vlist[1], pairs[i][1] ) THEN
          RETURN( simplify_maths_value( pairs[i][2] ) );
        END_IF;
      END_REPEAT;
      RETURN( make_function_application( expr.func, vlist ) );
    END_IF;
    RETURN( expr );</algorithm>
      </function>
      <function name="simplify_generic_expression">
         <parameter name="expr">
            <typename name="generic_expression"/>
         </parameter>
         <typename name="maths_value"/>
         <algorithm>FUNCTION make_number_literal(
                 nmb : NUMBER
             ) : generic_literal;
      IF 'INTEGER' IN TYPEOF( nmb ) THEN
        RETURN( make_int_literal( nmb ) );
      END_IF;
      RETURN( make_real_literal( nmb ) );

    END_FUNCTION;

    FUNCTION restore_binary(
                 expr : binary_generic_expression;
                 opd1, opd2 : generic_expression
             ) : generic_expression;
      expr.operands[1] := opd1;
      expr.operands[2] := opd2;
      RETURN( expr );

    END_FUNCTION;

    FUNCTION restore_mulary(
                 expr : multiple_arity_generic_expression;
                 ops : LIST OF generic_expression
             ) : generic_expression;
      expr.operands := ops;
      RETURN( expr );

    END_FUNCTION;

    FUNCTION restore_unary(
                 expr : unary_generic_expression;
                 opnd : generic_expression
             ) : generic_expression;
      expr.operand := opnd;
      RETURN( expr );

    END_FUNCTION;

    LOCAL
      types  : SET OF STRING := stripped_typeof( expr );
      v1     : maths_value;
      v2     : maths_value;
      vlist  : LIST OF maths_value := [];
      op1    : generic_expression;
      op2    : generic_expression;
      oplist : LIST OF generic_expression := [];
      opnds  : LIST [2 : ?] OF generic_expression;
      n      : INTEGER;
      m      : INTEGER;
      finfun : maths_function_select;
      boo    : BOOLEAN;
      str    : STRING;
      nmb    : NUMBER;
    END_LOCAL;
    IF 'INT_LITERAL' IN types THEN
      RETURN( convert_to_maths_value( expr\int_literal.the_value ) );
    END_IF;
    IF 'REAL_LITERAL' IN types THEN
      RETURN( convert_to_maths_value( expr\real_literal.the_value ) );
    END_IF;
    IF 'BOOLEAN_LITERAL' IN types THEN
      RETURN( convert_to_maths_value( expr\boolean_literal.the_value ) );
    END_IF;
    IF 'STRING_LITERAL' IN types THEN
      RETURN( convert_to_maths_value( expr\string_literal.the_value ) );
    END_IF;
    IF 'COMPLEX_NUMBER_LITERAL' IN types THEN
      RETURN( expr );
    END_IF;
    IF 'LOGICAL_LITERAL' IN types THEN
      RETURN( convert_to_maths_value( expr\logical_literal.lit_value ) );
    END_IF;
    IF 'BINARY_LITERAL' IN types THEN
      RETURN( convert_to_maths_value( expr\binary_literal.lit_value ) );
    END_IF;
    IF 'MATHS_ENUM_LITERAL' IN types THEN
      RETURN( expr\maths_enum_literal.lit_value );
    END_IF;
    IF 'REAL_TUPLE_LITERAL' IN types THEN
      RETURN( convert_to_maths_value( expr\real_tuple_literal.lit_value ) );
    END_IF;
    IF 'INTEGER_TUPLE_LITERAL' IN types THEN
      RETURN( convert_to_maths_value( expr\integer_tuple_literal.lit_value ) );
    END_IF;
    IF 'ATOM_BASED_LITERAL' IN types THEN
      RETURN( expr\atom_based_literal.lit_value );
    END_IF;
    IF 'MATHS_TUPLE_LITERAL' IN types THEN
      RETURN( convert_to_maths_value( expr\maths_tuple_literal.lit_value ) );
    END_IF;
    IF 'MATHS_SPACE' IN types THEN
      RETURN( simplify_maths_space( expr ) );
    END_IF;
    IF 'FUNCTION_APPLICATION' IN types THEN
      RETURN( simplify_function_application( expr ) );
    END_IF;
    IF 'UNARY_GENERIC_EXPRESSION' IN types THEN
      v1 := simplify_generic_expression( expr\unary_generic_expression.operand );
      op1 := convert_to_operand( v1 );
    END_IF;
    IF 'BINARY_GENERIC_EXPRESSION' IN types THEN
      v1 := simplify_generic_expression( expr\binary_generic_expression.operands[1] );
      op1 := convert_to_operand( v1 );
      v2 := simplify_generic_expression( expr\binary_generic_expression.operands[2] );
      op2 := convert_to_operand( v2 );
    END_IF;
    IF 'MULTIPLE_ARITY_GENERIC_EXPRESSION' IN types THEN
      opnds := expr\multiple_arity_generic_expression.operands;
      REPEAT i := 1 TO SIZEOF( opnds ) BY 1;
        v1 := simplify_generic_expression( opnds[i] );
        INSERT( vlist, v1, i - 1 );
        INSERT( oplist, convert_to_operand( v1 ), i - 1 );
      END_REPEAT;
    END_IF;
    IF 'PARALLEL_COMPOSED_FUNCTION' IN types THEN
      v1 := vlist[1];
      n := SIZEOF( vlist );
      finfun := vlist[n];
      REMOVE( vlist, n );
      REMOVE( vlist, 1 );
      RETURN( make_parallel_composed_function( v1, vlist, finfun ) );
    END_IF;
    IF ( 'ABS_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( ABS( v1 ) ) );
    END_IF;
    IF ( 'ACOS_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( ACOS( v1 ) ) );
    END_IF;
    IF 'AND_EXPRESSION' IN types THEN
      REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
        IF 'BOOLEAN' IN TYPEOF( vlist[i] ) THEN
          boo := vlist[i];
          IF NOT boo THEN
            RETURN( convert_to_maths_value( FALSE ) );
          END_IF;
          REMOVE( oplist, i );
        END_IF;
      END_REPEAT;
      IF SIZEOF( oplist ) = 0 THEN
        RETURN( convert_to_maths_value( TRUE ) );
      END_IF;
      IF SIZEOF( oplist ) = 1 THEN
        RETURN( oplist[1] );
      END_IF;
    END_IF;
    IF ( 'ASIN_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( ASIN( v1 ) ) );
    END_IF;
    IF ( 'ATAN_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) AND ( 'NUMBER' IN TYPEOF( v2 ) ) THEN
      RETURN( convert_to_maths_value( ATAN( v1, v2 ) ) );
    END_IF;
    IF ( 'COMPARISON_EXPRESSION' IN types ) AND ( ( ( 'NUMBER' IN TYPEOF( v1 ) ) AND ( 'NUMBER' IN TYPEOF( v2 ) ) ) OR ( ( 'STRING'  
        IN TYPEOF( v1 ) ) AND ( 'STRING' IN TYPEOF( v2 ) ) ) OR ( ( 'BOOLEAN' IN TYPEOF( v1 ) ) AND ( 'BOOLEAN' IN TYPEOF( v2 ) ) ) )
        THEN
      IF 'COMPARISON_EQUAL' IN types THEN
        boo := bool( v1 = v2 );
      ELSE
        IF 'COMPARISON_GREATER' IN types THEN
          boo := bool( v1 &gt; v2 );
        ELSE
          IF 'COMPARISON_GREATER_EQUAL' IN types THEN
            boo := bool( v1 &gt;= v2 );
          ELSE
            IF 'COMPARISON_LESS' IN types THEN
              boo := bool( v1 &lt; v2 );
            ELSE
              IF 'COMPARISON_LESS_EQUAL' IN types THEN
                boo := bool( v1 &lt;= v2 );
              ELSE
                IF 'COMPARISON_NOT_EQUAL' IN types THEN
                  boo := bool( v1 &lt;&gt; v2 );
                ELSE
                  IF 'LIKE_EXPRESSION' IN types THEN
                    boo := bool( v1 LIKE v2 );
                  ELSE
                    RETURN( ? );
                  END_IF;
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
      RETURN( convert_to_maths_value( boo ) );
    END_IF;
    IF 'CONCAT_EXPRESSION' IN types THEN
      str := '';
      REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
        IF 'STRING' IN TYPEOF( vlist[i] ) THEN
          str := vlist[i] + str;
          REMOVE( oplist, i );
        ELSE
          IF LENGTH( str ) &gt; 0 THEN
            INSERT( oplist, make_string_literal( str ), i );
            str := '';
          END_IF;
        END_IF;
      END_REPEAT;
      IF SIZEOF( oplist ) = 0 THEN
        RETURN( convert_to_maths_value( str ) );
      END_IF;
      IF LENGTH( str ) &gt; 0 THEN
        INSERT( oplist, make_string_literal( str ), 0 );
      END_IF;
      IF SIZEOF( oplist ) = 1 THEN
        RETURN( oplist[1] );
      END_IF;
    END_IF;
    IF ( 'COS_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( COS( v1 ) ) );
    END_IF;
    IF ( 'DIV_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) AND ( 'NUMBER' IN TYPEOF( v2 ) ) THEN
      RETURN( convert_to_maths_value( v1 DIV v2 ) );
    END_IF;
    IF 'EQUALS_EXPRESSION' IN types THEN
      opnds := expr\binary_generic_expression.operands;
      RETURN( convert_to_maths_value( opnds[1] :=: opnds[2] ) );
    END_IF;
    IF ( 'EXP_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( EXP( v1 ) ) );
    END_IF;
    IF ( 'FORMAT_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) AND ( 'STRING' IN TYPEOF( v2 ) ) THEN
      RETURN( convert_to_maths_value( FORMAT( v1, v2 ) ) );
    END_IF;
    IF ( 'INDEX_EXPRESSION' IN types ) AND ( 'STRING' IN TYPEOF( v1 ) ) AND ( 'NUMBER' IN TYPEOF( v2 ) ) THEN
      str := v1;
      n := v2;
      RETURN( convert_to_maths_value( str[n] ) );
    END_IF;
    IF ( 'INT_VALUE_EXPRESSION' IN types ) AND ( 'STRING' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( VALUE( v1 ) ) );
    END_IF;
    IF 'INTERVAL_EXPRESSION' IN types THEN
      str := '';
      IF 'NUMBER' IN TYPEOF( vlist[1] ) THEN
        str := 'NUMBER';
      END_IF;
      IF 'STRING' IN TYPEOF( vlist[1] ) THEN
        str := 'STRING';
      END_IF;
      IF 'BOOLEAN' IN TYPEOF( vlist[1] ) THEN
        str := 'BOOLEAN';
      END_IF;
      IF ( LENGTH( str ) &gt; 0 ) AND ( str IN TYPEOF( vlist[2] ) ) AND ( str IN TYPEOF( vlist[3] ) ) THEN
        RETURN( convert_to_maths_value( ( vlist[1] &lt;= vlist[2] ) AND ( vlist[2] &lt;= vlist[3] ) ) );
      END_IF;
    END_IF;
    IF ( 'LENGTH_EXPRESSION' IN types ) AND ( 'STRING' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( LENGTH( v1 ) ) );
    END_IF;
    IF ( 'LOG_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( LOG( v1 ) ) );
    END_IF;
    IF ( 'LOG10_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( LOG10( v1 ) ) );
    END_IF;
    IF ( 'LOG2_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( LOG2( v1 ) ) );
    END_IF;
    IF 'MAXIMUM_EXPRESSION' IN types THEN
      boo := FALSE;
      REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
        IF 'NUMBER' IN TYPEOF( vlist[i] ) THEN
          IF boo THEN
            IF nmb &lt; vlist[i] THEN
              nmb := vlist[i];
            END_IF;
          ELSE
            nmb := vlist[i];
            boo := TRUE;
          END_IF;
          REMOVE( oplist, i );
        END_IF;
      END_REPEAT;
      IF SIZEOF( oplist ) = 0 THEN
        RETURN( convert_to_maths_value( nmb ) );
      END_IF;
      IF boo THEN
        INSERT( oplist, make_number_literal( nmb ), 0 );
      END_IF;
    END_IF;
    IF 'MINIMUM_EXPRESSION' IN types THEN
      boo := FALSE;
      REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
        IF 'NUMBER' IN TYPEOF( vlist[i] ) THEN
          IF boo THEN
            IF nmb &gt; vlist[i] THEN
              nmb := vlist[i];
            END_IF;
          ELSE
            nmb := vlist[i];
            boo := TRUE;
          END_IF;
          REMOVE( oplist, i );
        END_IF;
      END_REPEAT;
      IF SIZEOF( oplist ) = 0 THEN
        RETURN( convert_to_maths_value( nmb ) );
      END_IF;
      IF boo THEN
        INSERT( oplist, make_number_literal( nmb ), 0 );
      END_IF;
    END_IF;
    IF ( 'MINUS_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) AND ( 'NUMBER' IN TYPEOF( v2 ) ) THEN
      RETURN( convert_to_maths_value( v1 - v2 ) );
    END_IF;
    IF ( 'MOD_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) AND ( 'NUMBER' IN TYPEOF( v2 ) ) THEN
      RETURN( convert_to_maths_value( v1 MOD v2 ) );
    END_IF;
    IF 'MULT_EXPRESSION' IN types THEN
      nmb := 1;
      REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
        IF 'NUMBER' IN TYPEOF( vlist[i] ) THEN
          nmb := nmb * vlist[i];
          REMOVE( oplist, i );
        END_IF;
      END_REPEAT;
      IF SIZEOF( oplist ) = 0 THEN
        RETURN( convert_to_maths_value( nmb ) );
      END_IF;
      IF nmb &lt;&gt; 1 THEN
        INSERT( oplist, make_number_literal( nmb ), 0 );
      END_IF;
      IF SIZEOF( oplist ) = 1 THEN
        RETURN( oplist[1] );
      END_IF;
    END_IF;
    IF ( 'NOT_EXPRESSION' IN types ) AND ( 'BOOLEAN' IN TYPEOF( v1 ) ) THEN
      boo := v1;
      RETURN( convert_to_maths_value( NOT boo ) );
    END_IF;
    IF ( 'ODD_EXPRESSION' IN types ) AND ( 'INTEGER' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( ODD( v1 ) ) );
    END_IF;
    IF 'OR_EXPRESSION' IN types THEN
      REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
        IF 'BOOLEAN' IN TYPEOF( vlist[i] ) THEN
          boo := vlist[i];
          IF boo THEN
            RETURN( convert_to_maths_value( TRUE ) );
          END_IF;
          REMOVE( oplist, i );
        END_IF;
      END_REPEAT;
      IF SIZEOF( oplist ) = 0 THEN
        RETURN( convert_to_maths_value( FALSE ) );
      END_IF;
      IF SIZEOF( oplist ) = 1 THEN
        RETURN( oplist[1] );
      END_IF;
    END_IF;
    IF 'PLUS_EXPRESSION' IN types THEN
      nmb := 0;
      REPEAT i := SIZEOF( vlist ) TO 1 BY -1;
        IF 'NUMBER' IN TYPEOF( vlist[i] ) THEN
          nmb := nmb + vlist[i];
          REMOVE( oplist, i );
        END_IF;
      END_REPEAT;
      IF SIZEOF( oplist ) = 0 THEN
        RETURN( convert_to_maths_value( nmb ) );
      END_IF;
      IF nmb &lt;&gt; 0 THEN
        INSERT( oplist, make_number_literal( nmb ), 0 );
      END_IF;
      IF SIZEOF( oplist ) = 1 THEN
        RETURN( oplist[1] );
      END_IF;
    END_IF;
    IF ( 'POWER_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) AND ( 'NUMBER' IN TYPEOF( v2 ) ) THEN
      RETURN( convert_to_maths_value( v1 ** v2 ) );
    END_IF;
    IF ( 'SIN_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( SIN( v1 ) ) );
    END_IF;
    IF ( 'SLASH_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) AND ( 'NUMBER' IN TYPEOF( v2 ) ) THEN
      RETURN( convert_to_maths_value( v1 / v2 ) );
    END_IF;
    IF ( 'SQUARE_ROOT_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( SQRT( v1 ) ) );
    END_IF;
    IF ( 'SUBSTRING_EXPRESSION' IN types ) AND ( 'STRING' IN TYPEOF( vlist[1] ) ) AND ( 'NUMBER' IN TYPEOF( vlist[2] ) ) AND ( 
        'NUMBER'  IN TYPEOF( vlist[3] ) ) THEN
      str := vlist[1];
      n := vlist[2];
      m := vlist[3];
      RETURN( convert_to_maths_value( str[n : m] ) );
    END_IF;
    IF ( 'TAN_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( TAN( v1 ) ) );
    END_IF;
    IF ( 'UNARY_MINUS_EXPRESSION' IN types ) AND ( 'NUMBER' IN TYPEOF( v1 ) ) THEN
      nmb := v1;
      RETURN( convert_to_maths_value( -nmb ) );
    END_IF;
    IF ( 'VALUE_EXPRESSION' IN types ) AND ( 'STRING' IN TYPEOF( v1 ) ) THEN
      RETURN( convert_to_maths_value( VALUE( v1 ) ) );
    END_IF;
    IF ( 'XOR_EXPRESSION' IN types ) AND ( 'BOOLEAN' IN TYPEOF( v1 ) ) AND ( 'BOOLEAN' IN TYPEOF( v2 ) ) THEN
      RETURN( convert_to_maths_value( v1 XOR v2 ) );
    END_IF;
    IF 'UNARY_GENERIC_EXPRESSION' IN types THEN
      RETURN( restore_unary( expr, op1 ) );
    END_IF;
    IF 'BINARY_GENERIC_EXPRESSION' IN types THEN
      RETURN( restore_binary( expr, op1, op2 ) );
    END_IF;
    IF 'MULTIPLE_ARITY_GENERIC_EXPRESSION' IN types THEN
      RETURN( restore_mulary( expr, oplist ) );
    END_IF;
    RETURN( expr );</algorithm>
      </function>
      <function name="simplify_maths_space">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <typename name="maths_space"/>
         <algorithm>LOCAL
      stypes   : SET OF STRING := stripped_typeof( spc );
      sset     : SET OF maths_value;
      zset     : SET OF maths_value := [];
      zval     : maths_value;
      zspc     : maths_space;
      zallint  : BOOLEAN := TRUE;
      zint     : INTEGER;
      zmin     : INTEGER;
      zmax     : INTEGER;
      factors  : LIST OF maths_space;
      zfactors : LIST OF maths_space := [];
      rspc     : maths_space;
    END_LOCAL;
    IF 'FINITE_SPACE' IN stypes THEN
      sset := spc\finite_space.members;
      REPEAT i := 1 TO SIZEOF( sset ) BY 1;
        zval := simplify_maths_value( sset[i] );
        zset := zset + [zval];
        IF zallint AND ( 'INTEGER' IN TYPEOF( zval ) ) THEN
          zint := zval;
          IF i = 1 THEN
            zmin := zint;
            zmax := zint;
          ELSE
            IF zint &lt; zmin THEN
              zmin := zint;
            END_IF;
            IF zint &gt; zmax THEN
              zmax := zint;
            END_IF;
          END_IF;
        ELSE
          zallint := FALSE;
        END_IF;
      END_REPEAT;
      IF zallint AND ( SIZEOF( zset ) = ( ( zmax - zmin ) + 1 ) ) THEN
        RETURN( make_finite_integer_interval( zmin, zmax ) );
      END_IF;
      RETURN( make_finite_space( zset ) );
    END_IF;
    IF 'UNIFORM_PRODUCT_SPACE' IN stypes THEN
      zspc := simplify_maths_space( spc\uniform_product_space.base );
      RETURN( make_uniform_product_space( zspc, spc\uniform_product_space.exponent ) );
    END_IF;
    IF 'LISTED_PRODUCT_SPACE' IN stypes THEN
      factors := spc\listed_product_space.factors;
      REPEAT i := 1 TO SIZEOF( factors ) BY 1;
        INSERT( zfactors, simplify_maths_space( factors[i] ), i - 1 );
      END_REPEAT;
      RETURN( make_listed_product_space( zfactors ) );
    END_IF;
    IF 'EXTENDED_TUPLE_SPACE' IN stypes THEN
      zspc := simplify_maths_space( spc\extended_tuple_space.base );
      rspc := simplify_maths_space( spc\extended_tuple_space.extender );
      RETURN( make_extended_tuple_space( zspc, rspc ) );
    END_IF;
    IF 'FUNCTION_SPACE' IN stypes THEN
      zspc := simplify_maths_space( spc\function_space.domain_argument );
      rspc := simplify_maths_space( spc\function_space.range_argument );
      RETURN( make_function_space( spc\function_space.domain_constraint, zspc, spc\function_space.range_constraint, rspc ) );
    END_IF;
    RETURN( spc );</algorithm>
      </function>
      <function name="simplify_maths_value">
         <parameter name="val">
            <typename name="maths_value"/>
         </parameter>
         <typename name="maths_value"/>
         <algorithm>LOCAL
      vtypes : SET OF STRING := stripped_typeof( val );
      vlist  : LIST OF maths_value;
      nlist  : LIST OF maths_value := [];
    END_LOCAL;
    IF 'GENERIC_EXPRESSION' IN vtypes THEN
      RETURN( simplify_generic_expression( val ) );
    END_IF;
    IF 'LIST' IN vtypes THEN
      vlist := val;
      REPEAT i := 1 TO SIZEOF( vlist ) BY 1;
        INSERT( nlist, simplify_maths_value( vlist[i] ), i - 1 );
      END_REPEAT;
      RETURN( convert_to_maths_value( nlist ) );
    END_IF;
    RETURN( val );</algorithm>
      </function>
      <function name="singleton_member_of">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <typename name="maths_value"/>
         <algorithm>LOCAL
      types : SET OF STRING := stripped_typeof( spc );
    END_LOCAL;
    IF 'FINITE_SPACE' IN types THEN
      IF SIZEOF( spc\finite_space.members ) = 1 THEN
        RETURN( spc\finite_space.members[1] );
      END_IF;
      RETURN( ? );
    END_IF;
    IF 'FINITE_INTEGER_INTERVAL' IN types THEN
      IF spc\finite_integer_interval.size = 1 THEN
        RETURN( spc\finite_integer_interval.min );
      END_IF;
      RETURN( ? );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="sort_link_associations">
         <parameter name="aprr">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="pair_representation_relationship"/>
         </parameter>
         <parameter name="one_not_two">
            <builtintype type="BOOLEAN"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="kinematic_link_representation"/>
         <algorithm>LOCAL
      result : SET OF kinematic_link_representation := [];
    END_LOCAL;
    IF one_not_two THEN
      REPEAT i := 1 TO HIINDEX( aprr ) BY 1;
        result := result + aprr[i].rep_1;
      END_REPEAT;
    ELSE
      REPEAT i := 1 TO HIINDEX( aprr ) BY 1;
        result := result + aprr[i].rep_2;
      END_REPEAT;
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="space_dimension">
         <parameter name="tspace">
            <typename name="tuple_space"/>
         </parameter>
         <typename name="nonnegative_integer"/>
         <algorithm>LOCAL
      types : SET OF STRING := TYPEOF( tspace );
    END_LOCAL;
    IF ( schema_prefix + 'UNIFORM_PRODUCT_SPACE' ) IN types THEN
      RETURN( tspace\uniform_product_space.exponent );
    END_IF;
    IF ( schema_prefix + 'LISTED_PRODUCT_SPACE' ) IN types THEN
      RETURN( SIZEOF( tspace\listed_product_space.factors ) );
    END_IF;
    IF ( schema_prefix + 'EXTENDED_TUPLE_SPACE' ) IN types THEN
      RETURN( space_dimension( tspace\extended_tuple_space.base ) );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="space_is_continuum">
         <parameter name="space">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      typenames : SET OF STRING := TYPEOF( space );
      factors   : LIST OF maths_space;
    END_LOCAL;
    IF NOT EXISTS( space ) THEN
      RETURN( FALSE );
    END_IF;
    IF subspace_of_es( space, es_reals ) OR subspace_of_es( space, es_complex_numbers ) THEN
      RETURN( TRUE );
    END_IF;
    IF ( schema_prefix + 'UNIFORM_PRODUCT_SPACE' ) IN typenames THEN
      RETURN( space_is_continuum( space\uniform_product_space.base ) );
    END_IF;
    IF ( schema_prefix + 'LISTED_PRODUCT_SPACE' ) IN typenames THEN
      factors := space\listed_product_space.factors;
      IF SIZEOF( factors ) = 0 THEN
        RETURN( FALSE );
      END_IF;
      REPEAT i := 1 TO SIZEOF( factors ) BY 1;
        IF NOT space_is_continuum( factors[i] ) THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
      RETURN( TRUE );
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="space_is_singleton">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      types : SET OF STRING := stripped_typeof( spc );
    END_LOCAL;
    IF 'FINITE_SPACE' IN types THEN
      RETURN( bool( SIZEOF( spc\finite_space.members ) = 1 ) );
    END_IF;
    IF 'FINITE_INTEGER_INTERVAL' IN types THEN
      RETURN( bool( spc\finite_integer_interval.size = 1 ) );
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="stripped_typeof">
         <parameter name="arg">
            <builtintype type="GENERIC" typelabel="g"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <builtintype type="STRING"/>
         <algorithm>LOCAL
      types  : SET OF STRING := TYPEOF( arg );
      stypes : SET OF STRING := [];
      n      : INTEGER := LENGTH( schema_prefix );
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( types ) BY 1;
      IF types[i][1 : n] = schema_prefix THEN
        stypes := stypes + types[i][n + 1 : LENGTH( types[i] )];
      ELSE
        stypes := stypes + types[i];
      END_IF;
    END_REPEAT;
    RETURN( stypes );</algorithm>
      </function>
      <function name="sts_get_general_datum_reference">
         <parameter name="input">
            <typename name="datum_reference_element"/>
         </parameter>
         <typename name="general_datum_reference"/>
         <algorithm>LOCAL
      general_datum_reference_bag : BAG OF general_datum_reference := USEDIN( input, 
                                     'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 
                                     'GENERAL_DATUM_REFERENCE.'  + 'BASE' );
    END_LOCAL;
    IF SIZEOF( general_datum_reference_bag ) = 1 THEN
      RETURN( general_datum_reference_bag[1] );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="sts_get_product_definition_shape">
         <parameter name="input">
            <typename name="geometric_tolerance_target"/>
         </parameter>
         <typename name="product_definition_shape"/>
         <algorithm>CASE TRUE OF
      'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIMENSIONAL_LOCATION' IN TYPEOF( input ) :         RETURN
            ( input\shape_aspect_relationship.relating_shape_aspect\shape_aspect.of_shape );
      'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DIMENSIONAL_SIZE' IN TYPEOF( input ) :         RETURN( 
            input\dimensional_size.applies_to\shape_aspect.of_shape );
      'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( input ) :         RETURN
            ( input );
      'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT' IN TYPEOF( input ) :         RETURN( 
            input\shape_aspect.of_shape );
      OTHERWISE                            :         RETURN( ? );
      END_CASE;</algorithm>
      </function>
      <function name="subspace_of">
         <parameter name="space1">
            <typename name="maths_space"/>
         </parameter>
         <parameter name="space2">
            <typename name="maths_space"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      spc1   : maths_space := simplify_maths_space( space1 );
      spc2   : maths_space := simplify_maths_space( space2 );
      types1 : SET OF STRING := stripped_typeof( spc1 );
      types2 : SET OF STRING := stripped_typeof( spc2 );
      lgcl   : LOGICAL;
      cum    : LOGICAL;
      es_val : elementary_space_enumerators;
      bnd1   : REAL;
      bnd2   : REAL;
      n      : INTEGER;
      sp1    : maths_space;
      sp2    : maths_space;
      prgn1  : polar_complex_number_region;
      prgn2  : polar_complex_number_region;
      aitv   : finite_real_interval;
    END_LOCAL;
    IF ( NOT EXISTS( spc1 ) ) OR ( NOT EXISTS( spc2 ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF spc2 = the_generics THEN
      RETURN( TRUE );
    END_IF;
    IF 'ELEMENTARY_SPACE' IN types1 THEN
      IF NOT ( 'ELEMENTARY_SPACE' IN types2 ) THEN
        RETURN( FALSE );
      END_IF;
      es_val := spc2\elementary_space.space_id;
      IF spc1\elementary_space.space_id = es_val THEN
        RETURN( TRUE );
      END_IF;
      CASE spc1\elementary_space.space_id OF
        es_numbers        :           RETURN( FALSE );
        es_complex_numbers :           RETURN( es_val = es_numbers );
        es_reals          :           RETURN( es_val = es_numbers );
        es_integers       :           RETURN( es_val = es_numbers );
        es_logicals       :           RETURN( FALSE );
        es_booleans       :           RETURN( es_val = es_logicals );
        es_strings        :           RETURN( FALSE );
        es_binarys        :           RETURN( FALSE );
        es_maths_spaces   :           RETURN( FALSE );
        es_maths_functions :           RETURN( FALSE );
        es_generics       :           RETURN( FALSE );
        END_CASE;
      RETURN( UNKNOWN );
    END_IF;
    IF 'FINITE_INTEGER_INTERVAL' IN types1 THEN
      cum := TRUE;
      REPEAT i := spc1\finite_integer_interval.min TO spc1\finite_integer_interval.max BY 1;
        cum := cum AND member_of( i, spc2 );
        IF cum = FALSE THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
      RETURN( cum );
    END_IF;
    IF 'INTEGER_INTERVAL_FROM_MIN' IN types1 THEN
      IF 'ELEMENTARY_SPACE' IN types2 THEN
        es_val := spc2\elementary_space.space_id;
        RETURN( ( es_val = es_numbers ) OR ( es_val = es_integers ) );
      END_IF;
      IF 'INTEGER_INTERVAL_FROM_MIN' IN types2 THEN
        RETURN( spc1\integer_interval_from_min.min &gt;= spc2\integer_interval_from_min.min );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'INTEGER_INTERVAL_TO_MAX' IN types1 THEN
      IF 'ELEMENTARY_SPACE' IN types2 THEN
        es_val := spc2\elementary_space.space_id;
        RETURN( ( es_val = es_numbers ) OR ( es_val = es_integers ) );
      END_IF;
      IF 'INTEGER_INTERVAL_TO_MAX' IN types2 THEN
        RETURN( spc1\integer_interval_to_max.max &lt;= spc2\integer_interval_to_max.max );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'FINITE_REAL_INTERVAL' IN types1 THEN
      IF 'ELEMENTARY_SPACE' IN types2 THEN
        es_val := spc2\elementary_space.space_id;
        RETURN( ( es_val = es_numbers ) OR ( es_val = es_reals ) );
      END_IF;
      IF ( 'FINITE_REAL_INTERVAL' IN types2 ) OR ( 'REAL_INTERVAL_FROM_MIN' IN types2 ) OR ( 'REAL_INTERVAL_TO_MAX' IN types2 )
          THEN
        IF min_exists( spc2 ) THEN
          bnd1 := spc1\finite_real_interval.min;
          bnd2 := real_min( spc2 );
          IF ( bnd1 &lt; bnd2 ) OR ( ( bnd1 = bnd2 ) AND min_included( spc1 ) AND ( NOT min_included( spc2 ) ) ) THEN
            RETURN( FALSE );
          END_IF;
        END_IF;
        IF max_exists( spc2 ) THEN
          bnd1 := spc1\finite_real_interval.max;
          bnd2 := real_max( spc2 );
          IF ( bnd1 &gt; bnd2 ) OR ( ( bnd1 = bnd2 ) AND max_included( spc1 ) AND ( NOT max_included( spc2 ) ) ) THEN
            RETURN( FALSE );
          END_IF;
        END_IF;
        RETURN( TRUE );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'REAL_INTERVAL_FROM_MIN' IN types1 THEN
      IF 'ELEMENTARY_SPACE' IN types2 THEN
        es_val := spc2\elementary_space.space_id;
        RETURN( ( es_val = es_numbers ) OR ( es_val = es_reals ) );
      END_IF;
      IF 'REAL_INTERVAL_FROM_MIN' IN types2 THEN
        bnd1 := spc1\real_interval_from_min.min;
        bnd2 := spc2\real_interval_from_min.min;
        RETURN( ( bnd2 &lt; bnd1 ) OR ( ( bnd2 = bnd1 ) AND ( min_included( spc2 ) OR ( NOT min_included( spc1 ) ) ) ) );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'REAL_INTERVAL_TO_MAX' IN types1 THEN
      IF 'ELEMENTARY_SPACE' IN types2 THEN
        es_val := spc2\elementary_space.space_id;
        RETURN( ( es_val = es_numbers ) OR ( es_val = es_reals ) );
      END_IF;
      IF 'REAL_INTERVAL_TO_MAX' IN types2 THEN
        bnd1 := spc1\real_interval_to_max.max;
        bnd2 := spc2\real_interval_to_max.max;
        RETURN( ( bnd2 &gt; bnd1 ) OR ( ( bnd2 = bnd1 ) AND ( max_included( spc2 ) OR ( NOT max_included( spc1 ) ) ) ) );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'CARTESIAN_COMPLEX_NUMBER_REGION' IN types1 THEN
      IF 'ELEMENTARY_SPACE' IN types2 THEN
        es_val := spc2\elementary_space.space_id;
        RETURN( ( es_val = es_numbers ) OR ( es_val = es_complex_numbers ) );
      END_IF;
      IF 'CARTESIAN_COMPLEX_NUMBER_REGION' IN types2 THEN
        RETURN( subspace_of( spc1\cartesian_complex_number_region.real_constraint, spc2\cartesian_complex_number_region.
            real_constraint ) AND subspace_of( spc1\cartesian_complex_number_region.imag_constraint, spc2\
            cartesian_complex_number_region.imag_constraint ) );
      END_IF;
      IF 'POLAR_COMPLEX_NUMBER_REGION' IN types2 THEN
        RETURN( subspace_of( enclose_cregion_in_pregion( spc1, spc2\polar_complex_number_region.centre ), spc2 ) );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'POLAR_COMPLEX_NUMBER_REGION' IN types1 THEN
      IF 'ELEMENTARY_SPACE' IN types2 THEN
        es_val := spc2\elementary_space.space_id;
        RETURN( ( es_val = es_numbers ) OR ( es_val = es_complex_numbers ) );
      END_IF;
      IF 'CARTESIAN_COMPLEX_NUMBER_REGION' IN types2 THEN
        RETURN( subspace_of( enclose_pregion_in_cregion( spc1 ), spc2 ) );
      END_IF;
      IF 'POLAR_COMPLEX_NUMBER_REGION' IN types2 THEN
        prgn1 := spc1;
        prgn2 := spc2;
        IF prgn1.centre = prgn2.centre THEN
          IF prgn2.direction_constraint.max &gt; PI THEN
            aitv := make_finite_real_interval( -PI, open, prgn2.direction_constraint.max - ( 2 * PI ), prgn2.direction_constraint
                .max_closure );
            RETURN( subspace_of( prgn1.distance_constraint, prgn2.distance_constraint ) AND ( subspace_of( prgn1.
                direction_constraint, prgn2.direction_constraint ) OR subspace_of( prgn1.direction_constraint, aitv ) ) );
          ELSE
            RETURN( subspace_of( prgn1.distance_constraint, prgn2.distance_constraint ) AND subspace_of( prgn1.
                direction_constraint, prgn2.direction_constraint ) );
          END_IF;
        END_IF;
        RETURN( subspace_of( enclose_pregion_in_pregion( prgn1, prgn2.centre ), prgn2 ) );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'FINITE_SPACE' IN types1 THEN
      cum := TRUE;
      REPEAT i := 1 TO SIZEOF( spc1\finite_space.members ) BY 1;
        cum := cum AND member_of( spc1\finite_space.members[i], spc2 );
        IF cum = FALSE THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
      RETURN( cum );
    END_IF;
    IF 'PRODUCT_SPACE' IN types1 THEN
      IF 'PRODUCT_SPACE' IN types2 THEN
        IF space_dimension( spc1 ) = space_dimension( spc2 ) THEN
          cum := TRUE;
          REPEAT i := 1 TO space_dimension( spc1 ) BY 1;
            cum := cum AND subspace_of( factor_space( spc1, i ), factor_space( spc2, i ) );
            IF cum = FALSE THEN
              RETURN( FALSE );
            END_IF;
          END_REPEAT;
          RETURN( cum );
        END_IF;
      END_IF;
      IF 'EXTENDED_TUPLE_SPACE' IN types2 THEN
        IF space_dimension( spc1 ) &gt;= space_dimension( spc2 ) THEN
          cum := TRUE;
          REPEAT i := 1 TO space_dimension( spc1 ) BY 1;
            cum := cum AND subspace_of( factor_space( spc1, i ), factor_space( spc2, i ) );
            IF cum = FALSE THEN
              RETURN( FALSE );
            END_IF;
          END_REPEAT;
          RETURN( cum );
        END_IF;
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'EXTENDED_TUPLE_SPACE' IN types1 THEN
      IF 'EXTENDED_TUPLE_SPACE' IN types2 THEN
        n := space_dimension( spc1 );
        IF n &lt; space_dimension( spc2 ) THEN
          n := space_dimension( spc2 );
        END_IF;
        cum := TRUE;
        REPEAT i := 1 TO n + 1 BY 1;
          cum := cum AND subspace_of( factor_space( spc1, i ), factor_space( spc2, i ) );
          IF cum = FALSE THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
        RETURN( cum );
      END_IF;
      RETURN( FALSE );
    END_IF;
    IF 'FUNCTION_SPACE' IN types1 THEN
      IF 'ELEMENTARY_SPACE' IN types2 THEN
        RETURN( spc2\elementary_space.space_id = es_maths_functions );
      END_IF;
      IF 'FUNCTION_SPACE' IN types2 THEN
        cum := TRUE;
        sp1 := spc1\function_space.domain_argument;
        sp2 := spc2\function_space.domain_argument;
        CASE spc1\function_space.domain_constraint OF
          sc_equal   : 
            BEGIN
              CASE spc2\function_space.domain_constraint OF
                sc_equal   :                   cum := cum AND equal_maths_spaces( sp1, sp2 );
                sc_subspace :                   cum := cum AND subspace_of( sp1, sp2 );
                sc_member  :                   cum := cum AND member_of( sp1, sp2 );
                END_CASE;
            END;
          sc_subspace : 
            BEGIN
              CASE spc2\function_space.domain_constraint OF
                sc_equal   :                   RETURN( FALSE );
                sc_subspace :                   cum := cum AND subspace_of( sp1, sp2 );
                sc_member  : 
                  BEGIN
                    IF NOT member_of( sp1, sp2 ) THEN
                      RETURN( FALSE );
                    END_IF;
                    cum := UNKNOWN;
                  END;
                END_CASE;
            END;
          sc_member  : 
            BEGIN
              CASE spc2\function_space.domain_constraint OF
                sc_equal   :                   cum := cum AND space_is_singleton( sp1 ) AND equal_maths_spaces( 
                      singleton_member_of( sp1 ), sp2 );
                sc_subspace : 
                  BEGIN
                    IF NOT member_of( sp2, sp1 ) THEN
                      RETURN( FALSE );
                    END_IF;
                    cum := UNKNOWN;
                  END;
                sc_member  :                   cum := cum AND subspace_of( sp1, sp2 );
                END_CASE;
            END;
          END_CASE;
        IF cum = FALSE THEN
          RETURN( FALSE );
        END_IF;
        sp1 := spc1\function_space.range_argument;
        sp2 := spc2\function_space.range_argument;
        CASE spc1\function_space.range_constraint OF
          sc_equal   : 
            BEGIN
              CASE spc2\function_space.range_constraint OF
                sc_equal   :                   cum := cum AND equal_maths_spaces( sp1, sp2 );
                sc_subspace :                   cum := cum AND subspace_of( sp1, sp2 );
                sc_member  :                   cum := cum AND member_of( sp1, sp2 );
                END_CASE;
            END;
          sc_subspace : 
            BEGIN
              CASE spc2\function_space.domain_constraint OF
                sc_equal   :                   RETURN( FALSE );
                sc_subspace :                   cum := cum AND subspace_of( sp1, sp2 );
                sc_member  : 
                  BEGIN
                    IF NOT member_of( sp1, sp2 ) THEN
                      RETURN( FALSE );
                    END_IF;
                    cum := UNKNOWN;
                  END;
                END_CASE;
            END;
          sc_member  : 
            BEGIN
              CASE spc2\function_space.domain_constraint OF
                sc_equal   :                   cum := cum AND space_is_singleton( sp1 ) AND equal_maths_spaces( 
                      singleton_member_of( sp1 ), sp2 );
                sc_subspace : 
                  BEGIN
                    IF NOT member_of( sp2, sp1 ) THEN
                      RETURN( FALSE );
                    END_IF;
                    cum := UNKNOWN;
                  END;
                sc_member  :                   cum := cum AND subspace_of( sp1, sp2 );
                END_CASE;
            END;
          END_CASE;
        RETURN( cum );
      END_IF;
      RETURN( FALSE );
    END_IF;
    RETURN( UNKNOWN );</algorithm>
      </function>
      <function name="subspace_of_es">
         <parameter name="spc">
            <typename name="maths_space"/>
         </parameter>
         <parameter name="es">
            <typename name="elementary_space_enumerators"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      types : SET OF STRING := stripped_typeof( spc );
    END_LOCAL;
    IF ( NOT EXISTS( spc ) ) OR ( NOT EXISTS( es ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'ELEMENTARY_SPACE' IN types THEN
      RETURN( es_subspace_of_es( spc\elementary_space.space_id, es ) );
    END_IF;
    IF 'FINITE_SPACE' IN types THEN
      RETURN( all_members_of_es( spc\finite_space.members, es ) );
    END_IF;
    CASE es OF
      es_numbers        :         RETURN( ( 'FINITE_INTEGER_INTERVAL' IN types ) OR ( 'INTEGER_INTERVAL_FROM_MIN' IN types ) OR 
            ( 'INTEGER_INTERVAL_TO_MAX' IN types ) OR ( 'FINITE_REAL_INTERVAL' IN types ) OR ( 'REAL_INTERVAL_FROM_MIN' IN types ) 
            OR ( 'REAL_INTERVAL_TO_MAX' IN types ) OR ( 'CARTESIAN_COMPLEX_NUMBER_REGION' IN types ) OR ( 
            'POLAR_COMPLEX_NUMBER_REGION'  IN types ) );
      es_complex_numbers :         RETURN( ( 'CARTESIAN_COMPLEX_NUMBER_REGION' IN types ) OR ( 'POLAR_COMPLEX_NUMBER_REGION' IN 
            types ) );
      es_reals          :         RETURN( ( 'FINITE_REAL_INTERVAL' IN types ) OR ( 'REAL_INTERVAL_FROM_MIN' IN types ) OR ( 
            'REAL_INTERVAL_TO_MAX'  IN types ) );
      es_integers       :         RETURN( ( 'FINITE_INTEGER_INTERVAL' IN types ) OR ( 'INTEGER_INTERVAL_FROM_MIN' IN types ) OR 
            ( 'INTEGER_INTERVAL_TO_MAX' IN types ) );
      es_logicals       :         RETURN( FALSE );
      es_booleans       :         RETURN( FALSE );
      es_strings        :         RETURN( FALSE );
      es_binarys        :         RETURN( FALSE );
      es_maths_spaces   :         RETURN( FALSE );
      es_maths_functions :         RETURN( 'FUNCTION_SPACE' IN types );
      es_generics       :         RETURN( TRUE );
      END_CASE;
    RETURN( UNKNOWN );</algorithm>
      </function>
      <function name="substitute">
         <parameter name="expr">
            <typename name="generic_expression"/>
         </parameter>
         <parameter name="vars">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="generic_variable"/>
         </parameter>
         <parameter name="vals">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="maths_value"/>
         </parameter>
         <typename name="generic_expression"/>
         <algorithm>LOCAL
      types  : SET OF STRING := stripped_typeof( expr );
      opnds  : LIST OF generic_expression;
      op1    : generic_expression;
      op2    : generic_expression;
      qvars  : LIST OF generic_variable;
      srcdom : maths_space_or_function;
      prpfun : LIST [1 : ?] OF maths_function;
      finfun : maths_function_select;
    END_LOCAL;
    IF SIZEOF( vars ) &lt;&gt; SIZEOF( vals ) THEN
      RETURN( ? );
    END_IF;
    IF 'GENERIC_LITERAL' IN types THEN
      RETURN( expr );
    END_IF;
    IF 'GENERIC_VARIABLE' IN types THEN
      REPEAT i := 1 TO SIZEOF( vars ) BY 1;
        IF expr :=: vars[i] THEN
          RETURN( vals[i] );
        END_IF;
      END_REPEAT;
      RETURN( expr );
    END_IF;
    IF 'QUANTIFIER_EXPRESSION' IN types THEN
      qvars := expr\quantifier_expression.variables;
      REPEAT i := SIZEOF( vars ) TO 1 BY -1;
        IF vars[i] IN qvars THEN
          REMOVE( vars, i );
          REMOVE( vals, i );
        END_IF;
      END_REPEAT;
      opnds := expr\multiple_arity_generic_expression.operands;
      REPEAT i := 1 TO SIZEOF( opnds ) BY 1;
        IF NOT ( opnds[i] IN qvars ) THEN
          expr\multiple_arity_generic_expression.operands[i] := substitute( opnds[i], vars, vals );
        END_IF;
      END_REPEAT;
      RETURN( expr );
    END_IF;
    IF 'UNARY_GENERIC_EXPRESSION' IN types THEN
      op1 := expr\unary_generic_expression.operand;
      expr\unary_generic_expression.operand := substitute( op1, vars, vals );
    END_IF;
    IF 'BINARY_GENERIC_EXPRESSION' IN types THEN
      op1 := expr\binary_generic_expression.operands[1];
      expr\binary_generic_expression.operands[1] := substitute( op1, vars, vals );
      op2 := expr\binary_generic_expression.operands[2];
      expr\binary_generic_expression.operands[2] := substitute( op2, vars, vals );
    END_IF;
    IF 'PARALLEL_COMPOSED_FUNCTION' IN types THEN
      srcdom := expr\parallel_composed_function.source_of_domain;
      prpfun := expr\parallel_composed_function.prep_functions;
      finfun := expr\parallel_composed_function.final_function;
      srcdom := substitute( srcdom, vars, vals );
      REPEAT i := 1 TO SIZEOF( prpfun ) BY 1;
        prpfun[i] := substitute( prpfun[i], vars, vals );
      END_REPEAT;
      IF 'MATHS_FUNCTION' IN stripped_typeof( finfun ) THEN
        finfun := substitute( finfun, vars, vals );
      END_IF;
      RETURN( make_parallel_composed_function( srcdom, prpfun, finfun ) );
    END_IF;
    IF 'MULTIPLE_ARITY_GENERIC_EXPRESSION' IN types THEN
      opnds := expr\multiple_arity_generic_expression.operands;
      REPEAT i := 1 TO SIZEOF( opnds ) BY 1;
        expr\multiple_arity_generic_expression.operands[i] := substitute( opnds[i], vars, vals );
      END_REPEAT;
    END_IF;
    RETURN( expr );</algorithm>
      </function>
      <function name="surface_condition_correlation">
         <parameter name="pd">
            <typename name="property_definition"/>
         </parameter>
         <parameter name="rep">
            <typename name="representation"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>CASE pd.name OF
      'visual appearance' :         RETURN( pd.name = rep.name );
      'tactile appearance' :         RETURN( pd.name = rep.name );
      'contact ratio' :         RETURN( pd.name = rep.name );
      'hardness'     :         RETURN( pd.name = rep.name );
      'treatment result' :         RETURN( pd.name = rep.name );
      'surface texture' :         RETURN( pd.name = rep.name );
      OTHERWISE      :         RETURN( UNKNOWN );
      END_CASE;</algorithm>
      </function>
      <function name="surface_weights_positive">
         <parameter name="b">
            <typename name="rational_b_spline_surface"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      result : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT i := 0 TO b.u_upper BY 1;
      REPEAT j := 0 TO b.v_upper BY 1;
        IF b.weights[i][j] &lt;= 0 THEN
          result := FALSE;
          RETURN( result );
        END_IF;
      END_REPEAT;
    END_REPEAT;
    RETURN( result );</algorithm>
      </function>
      <function name="topology_reversed">
         <parameter name="an_item">
            <typename name="reversible_topology"/>
         </parameter>
         <typename name="reversible_topology"/>
         <algorithm>IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.EDGE' IN TYPEOF( an_item ) THEN
      RETURN( edge_reversed( an_item ) );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PATH' IN TYPEOF( an_item ) THEN
      RETURN( path_reversed( an_item ) );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE_BOUND' IN TYPEOF( an_item ) THEN
      RETURN( face_bound_reversed( an_item ) );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FACE' IN TYPEOF( an_item ) THEN
      RETURN( face_reversed( an_item ) );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHELL' IN TYPEOF( an_item ) THEN
      RETURN( shell_reversed( an_item ) );
    END_IF;
    IF 'SET' IN TYPEOF( an_item ) THEN
      RETURN( set_of_topology_reversed( an_item ) );
    END_IF;
    IF 'LIST' IN TYPEOF( an_item ) THEN
      RETURN( list_of_topology_reversed( an_item ) );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="type_check_function">
         <parameter name="the_type">
            <builtintype type="GENERIC"/>
         </parameter>
         <parameter name="sub_names">
            <aggregate lower="0" type="SET" upper="?"/>
            <builtintype type="STRING"/>
         </parameter>
         <parameter name="criterion">
            <builtintype type="INTEGER"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>IF ( NOT EXISTS( the_type ) ) OR ( SIZEOF( sub_names ) = 0 ) THEN
      RETURN( UNKNOWN );
    ELSE
      CASE criterion OF
        0        :           RETURN( SIZEOF( sub_names * TYPEOF( the_type ) ) &gt; 0 );
        1        :           RETURN( SIZEOF( sub_names * TYPEOF( the_type ) ) = 0 );
        2        :           RETURN( SIZEOF( sub_names * TYPEOF( the_type ) ) = 1 );
        3        :           RETURN( SIZEOF( sub_names * TYPEOF( the_type ) ) &lt;= 1 );
        OTHERWISE  :           RETURN( UNKNOWN );
        END_CASE;
    END_IF;</algorithm>
      </function>
      <function name="unambiguously_specified_multi_level_reference_designator">
         <parameter name="links">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="next_assembly_usage_occurrence"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>REPEAT i := 1 TO SIZEOF( links ) - 1 BY 1;
      CASE TRUE OF
        ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION' IN TYPEOF( links[i]\
            product_definition_relationship.relating_product_definition ) ) AND ( 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( links[i]\
            product_definition_relationship.related_product_definition ) ) AND ( 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( links[i + 1]\
            product_definition_relationship.relating_product_definition ) ) : 
          BEGIN
            IF NOT ( ( links[i]\product_definition_relationship.related_product_definition :=: links[i + 1]\
                product_definition_relationship.relating_product_definition ) OR ( ( SIZEOF( QUERY ( pdr &lt;* USEDIN( links[i]\
                product_definition_relationship.related_product_definition, 
                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.'  + 
                'RELATED_PRODUCT_DEFINITION'  ) | ( pdr\product_definition_relationship.relating_product_definition :=: links[i +
                1]\product_definition_relationship.relating_product_definition ) ) ) = 1 ) AND ( links[i]\
                product_definition_relationship.related_product_definition\product_definition.formation\
                product_definition_formation.of_product :=: links[i + 1]\product_definition_relationship.
                relating_product_definition\product_definition.formation\product_definition_formation.of_product ) ) ) THEN
              RETURN( FALSE );
            END_IF;
          END;
        ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_REFERENCE' IN TYPEOF( links[i]\
            product_definition_relationship.related_product_definition ) ) AND ( 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_REFERENCE'  IN TYPEOF( links[i 
            + 1]\product_definition_relationship.relating_product_definition ) ) : 
          BEGIN
            IF NOT ( ( links[i]\product_definition_relationship.related_product_definition :=: links[i + 1]\
                product_definition_relationship.relating_product_definition ) OR ( ( SIZEOF( QUERY ( pdr &lt;* USEDIN( links[i]\
                product_definition_relationship.related_product_definition, 
                'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.'  + 
                'RELATED_PRODUCT_DEFINITION'  ) | ( pdr\product_definition_relationship.relating_product_definition :=: links[i +
                1]\product_definition_relationship.relating_product_definition ) ) ) = 1 ) AND ( links[i]\
                product_definition_relationship.related_product_definition\product_definition_reference.product_id = links[i + 1]\
                product_definition_relationship.relating_product_definition\product_definition_reference.product_id ) AND ( links[
                i]\product_definition_relationship.related_product_definition\product_definition_reference.
                id_owning_organization_name = links[i + 1]\product_definition_relationship.relating_product_definition\
                product_definition_reference.id_owning_organization_name ) AND ( links[i]\product_definition_relationship.
                related_product_definition\product_definition_reference.product_definition_id &lt;&gt; links[i + 1]\
                product_definition_relationship.relating_product_definition\product_definition_reference.product_definition_id ) ) )
                THEN
              RETURN( FALSE );
            END_IF;
          END;
        ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION_REFERENCE' IN TYPEOF( links[i]\
            product_definition_relationship.relating_product_definition ) ) AND ( 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( links[i]\
            product_definition_relationship.related_product_definition ) ) :           RETURN( FALSE );
        OTHERWISE                          :           RETURN( FALSE );
        END_CASE;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="unique_in_product_definition">
         <parameter name="item">
            <typename name="representative_shape_representation"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      local_p_d : SET OF product_definition := [];
      local_s_r : SET OF shape_representation := [];
      i         : INTEGER;
      j         : INTEGER;
    END_LOCAL;
    local_p_d := using_product_definition_of_shape_representation( item );
    IF SIZEOF( local_p_d ) &lt;&gt; 1 THEN
      RETURN( FALSE );
    ELSE
      REPEAT i := 1 TO HIINDEX( local_p_d ) BY 1;
        local_s_r := find_shape_representation_of_product_definition( local_p_d[i] );
        REPEAT j := 1 TO HIINDEX( local_s_r ) BY 1;
          IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATIVE_SHAPE_REPRESENTATION' IN 
              TYPEOF( local_s_r[j] ) ) AND ( local_s_r[j] :&lt;&gt;: item ) THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
      END_REPEAT;
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="unique_in_shape_aspect">
         <parameter name="item">
            <typename name="representative_shape_representation"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      local_s_a : SET OF shape_aspect := [];
      local_s_r : SET OF shape_representation := [];
      i         : INTEGER;
      j         : INTEGER;
    END_LOCAL;
    local_s_a := using_shape_aspect_of_shape_representation( item );
    IF SIZEOF( local_s_a ) &lt;&gt; 1 THEN
      RETURN( FALSE );
    ELSE
      REPEAT i := 1 TO HIINDEX( local_s_a ) BY 1;
        local_s_r := find_shape_representation_of_shape_aspect( local_s_a[i] );
        REPEAT j := 1 TO HIINDEX( local_s_r ) BY 1;
          IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATIVE_SHAPE_REPRESENTATION' IN 
              TYPEOF( local_s_r[j] ) ) AND ( local_s_r[j] :&lt;&gt;: item ) THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
      END_REPEAT;
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="used_variables">
         <parameter name="arg">
            <typename name="generic_expression"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="generic_variable"/>
         <algorithm>LOCAL
      result : SET OF generic_variable := [];
    END_LOCAL;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.GENERIC_VARIABLE' IN TYPEOF( arg ) THEN
      RETURN( [arg] );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.UNARY_GENERIC_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( used_variables( arg\unary_generic_expression.operand ) );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BINARY_GENERIC_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( used_variables( arg\binary_generic_expression.operands[1] ) + used_variables( arg\binary_generic_expression.
          operands[2] ) );
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MULTIPLE_ARITY_GENERIC_EXPRESSION' IN TYPEOF( arg )
        THEN
      REPEAT i := 1 TO SIZEOF( arg\multiple_arity_generic_expression.operands ) BY 1;
        result := result + used_variables( arg\multiple_arity_generic_expression.operands[i] );
      END_REPEAT;
      RETURN( result );
    END_IF;
    RETURN( [] );</algorithm>
      </function>
      <function name="using_items">
         <parameter name="item">
            <typename name="founded_item_select"/>
         </parameter>
         <parameter name="checked_items">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="founded_item_select"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="founded_item_select"/>
         <algorithm>LOCAL
      new_check_items : SET OF founded_item_select;
      result_items    : SET OF founded_item_select;
      next_items      : SET OF founded_item_select;
    END_LOCAL;
    result_items := [];
    new_check_items := checked_items + item;
    next_items := QUERY ( z &lt;* bag_to_set( USEDIN( item, '' ) ) | ( ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATION_ITEM'  IN TYPEOF( z ) ) OR ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FOUNDED_ITEM'  IN TYPEOF( z ) ) ) );
    IF SIZEOF( next_items ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( next_items ) BY 1;
        IF NOT ( next_items[i] IN new_check_items ) THEN
          result_items := result_items + next_items[i] + using_items( next_items[i], new_check_items );
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN( result_items );</algorithm>
      </function>
      <function name="using_product_definition_of_shape_aspect">
         <parameter name="item">
            <typename name="shape_aspect"/>
         </parameter>
         <typename name="product_definition"/>
         <algorithm>IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION' IN TYPEOF( item.of_shape.
        definition ) THEN
      RETURN( item.of_shape.definition );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="using_product_definition_of_shape_representation">
         <parameter name="item">
            <typename name="shape_representation"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="product_definition"/>
         <algorithm>LOCAL
      local_s_d_r : SET OF shape_definition_representation := [];
      local_p_d   : SET OF product_definition := [];
      i           : INTEGER;
    END_LOCAL;
    local_s_d_r := QUERY ( i1 &lt;* bag_to_set( USEDIN( item, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' 
        + 'PROPERTY_DEFINITION_REPRESENTATION.USED_REPRESENTATION' ) ) | ( ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_DEFINITION_REPRESENTATION' ) IN TYPEOF( 
        i1 ) ) );
    REPEAT i := 1 TO HIINDEX( local_s_d_r ) BY 1;
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION' IN TYPEOF( local_s_d_r[i]\
          property_definition_representation.definition ) THEN
        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRODUCT_DEFINITION' IN TYPEOF( local_s_d_r[i]\
            property_definition_representation.definition\property_definition.definition ) THEN
          local_p_d := local_p_d + local_s_d_r[i]\property_definition_representation.definition\property_definition.definition;
        END_IF;
      END_IF;
    END_REPEAT;
    RETURN( local_p_d );</algorithm>
      </function>
      <function name="using_representation_with_mapping">
         <parameter name="item">
            <typename name="representation_item"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="representation"/>
         <algorithm>LOCAL
      results                  : SET OF representation := [];
      local_results            : SET OF representation := [];
      local_representation_map : SET OF representation_map := [];
      intermediate_items       : SET OF representation_item := [];
      i                        : INTEGER;
      j                        : INTEGER;
    END_LOCAL;
    local_results := QUERY ( z &lt;* using_representations( item ) | ( SIZEOF( USEDIN( z, 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATION_MAP.'  + 'MAPPED_REPRESENTATION' ) ) &gt;
        0 ) );
    IF SIZEOF( local_results ) = 0 THEN
      RETURN( [] );
    ELSE
      REPEAT i := 1 TO HIINDEX( local_results ) BY 1;
        local_representation_map := local_representation_map + bag_to_set( USEDIN( local_results[i], 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATION_MAP.MAPPED_REPRESENTATION'  ) );
      END_REPEAT;
      REPEAT i := 1 TO HIINDEX( local_representation_map ) BY 1;
        intermediate_items := intermediate_items + bag_to_set( USEDIN( local_representation_map[i], 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAPPED_ITEM.MAPPING_SOURCE'  ) );
      END_REPEAT;
      REPEAT j := 1 TO HIINDEX( intermediate_items ) BY 1;
        results := results + bag_to_set( using_representation_with_mapping( intermediate_items[j] ) );
      END_REPEAT;
    END_IF;
    RETURN( results );</algorithm>
      </function>
      <function name="using_representations">
         <parameter name="item">
            <typename name="founded_item_select"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="representation"/>
         <algorithm>LOCAL
      results            : SET OF representation;
      result_bag         : BAG OF representation;
      intermediate_items : SET OF founded_item_select;
    END_LOCAL;
    results := [];
    result_bag := USEDIN( item, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.REPRESENTATION.ITEMS' );
    IF SIZEOF( result_bag ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( result_bag ) BY 1;
        results := results + result_bag[i];
      END_REPEAT;
    END_IF;
    intermediate_items := using_items( item, [] );
    IF SIZEOF( intermediate_items ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( intermediate_items ) BY 1;
        result_bag := USEDIN( intermediate_items[i], 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
            + 'REPRESENTATION.ITEMS'  );
        IF SIZEOF( result_bag ) &gt; 0 THEN
          REPEAT j := 1 TO HIINDEX( result_bag ) BY 1;
            results := results + result_bag[j];
          END_REPEAT;
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN( results );</algorithm>
      </function>
      <function name="using_shape_aspect_of_shape_representation">
         <parameter name="item">
            <typename name="shape_representation"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="shape_aspect"/>
         <algorithm>LOCAL
      local_s_d_r  : SET OF shape_definition_representation := [];
      local_s_d_r2 : BAG OF shape_definition_representation := [];
      local_s_a    : SET OF shape_aspect := [];
      i            : INTEGER;
    END_LOCAL;
    local_s_d_r2 := local_s_d_r2 + QUERY ( pdr &lt;* USEDIN( item, 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.'
        + 'USED_REPRESENTATION'  ) | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
        + 'SHAPE_DEFINITION_REPRESENTATION'  IN TYPEOF( pdr ) ) );
    local_s_d_r := bag_to_set( local_s_d_r2 );
    REPEAT i := 1 TO HIINDEX( local_s_d_r ) BY 1;
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SHAPE_ASPECT' IN TYPEOF( local_s_d_r[i]\
          property_definition_representation.definition\property_definition.definition ) THEN
        local_s_a := local_s_a + local_s_d_r[i]\property_definition_representation.definition\property_definition.definition;
      END_IF;
    END_REPEAT;
    RETURN( local_s_a );</algorithm>
      </function>
      <function name="valid_2d_wireframe_edge_curve">
         <parameter name="crv">
            <typename name="curve"/>
         </parameter>
         <parameter name="schma">
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF SIZEOF( [schma + '.LINE', schma + '.B_SPLINE_CURVE', schma + '.CIRCLE', schma + '.HYPERBOLA', schma + '.ELLIPSE', schma + 
        '.PARABOLA' , schma + '.POLYLINE'] * TYPEOF( crv ) ) = 1 THEN
      RETURN( TRUE );
    ELSE
      IF ( schma + '.CURVE_REPLICA' ) IN TYPEOF( crv ) THEN
        RETURN( valid_2d_wireframe_edge_curve( crv\curve_replica.parent_curve, schma ) );
      ELSE
        IF ( schma + '.OFFSET_CURVE_2D' ) IN TYPEOF( crv ) THEN
          RETURN( valid_2d_wireframe_edge_curve( crv\offset_curve_2d.basis_curve, schma ) );
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="valid_basis_curve_in_2d_wireframe">
         <parameter name="crv">
            <typename name="curve"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE', 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELLIPSE' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCLE' ] * TYPEOF( crv ) ) = 1 THEN
      RETURN( TRUE );
    ELSE
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TRIMMED_CURVE' IN TYPEOF( crv ) THEN
        IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE', 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARABOLA' , 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.HYPERBOLA' ] * TYPEOF( crv\trimmed_curve.
            basis_curve ) ) = 1 THEN
          RETURN( TRUE );
        ELSE
          RETURN( valid_basis_curve_in_2d_wireframe( crv\trimmed_curve.basis_curve ) );
        END_IF;
      ELSE
        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_CURVE_2D' IN TYPEOF( crv ) THEN
          RETURN( valid_basis_curve_in_2d_wireframe( crv\offset_curve_2d.basis_curve ) );
        ELSE
          IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_REPLICA' IN TYPEOF( crv ) THEN
            RETURN( valid_basis_curve_in_2d_wireframe( crv\curve_replica.parent_curve ) );
          ELSE
            IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_CURVE' IN TYPEOF( crv ) THEN
              RETURN( SIZEOF( QUERY ( ccs &lt;* crv\composite_curve.segments | ( NOT valid_basis_curve_in_2d_wireframe( ccs.
                  parent_curve ) ) ) ) = 0 );
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="valid_calendar_date">
         <parameter name="date">
            <typename name="calendar_date"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>CASE date.month_component OF
      1 :         RETURN( ( 1 &lt;= date.day_component ) AND ( date.day_component &lt;= 31 ) );
      2 : 
        BEGIN
          IF leap_year( date.year_component ) THEN
            RETURN( ( 1 &lt;= date.day_component ) AND ( date.day_component &lt;= 29 ) );
          ELSE
            RETURN( ( 1 &lt;= date.day_component ) AND ( date.day_component &lt;= 28 ) );
          END_IF;
        END;
      3 :         RETURN( ( 1 &lt;= date.day_component ) AND ( date.day_component &lt;= 31 ) );
      4 :         RETURN( ( 1 &lt;= date.day_component ) AND ( date.day_component &lt;= 30 ) );
      5 :         RETURN( ( 1 &lt;= date.day_component ) AND ( date.day_component &lt;= 31 ) );
      6 :         RETURN( ( 1 &lt;= date.day_component ) AND ( date.day_component &lt;= 30 ) );
      7 :         RETURN( ( 1 &lt;= date.day_component ) AND ( date.day_component &lt;= 31 ) );
      8 :         RETURN( ( 1 &lt;= date.day_component ) AND ( date.day_component &lt;= 31 ) );
      9 :         RETURN( ( 1 &lt;= date.day_component ) AND ( date.day_component &lt;= 30 ) );
      10 :         RETURN( ( 1 &lt;= date.day_component ) AND ( date.day_component &lt;= 31 ) );
      11 :         RETURN( ( 1 &lt;= date.day_component ) AND ( date.day_component &lt;= 30 ) );
      12 :         RETURN( ( 1 &lt;= date.day_component ) AND ( date.day_component &lt;= 31 ) );
      END_CASE;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="valid_csg_2d_primitives">
         <parameter name="input">
            <typename name="csg_solid_2d"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>CASE TRUE OF
      'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRIMITIVE_2D' IN TYPEOF( input\csg_solid_2d.
          tree_root_expression )            : 
        BEGIN
          IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCULAR_AREA', 
              'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPLEX_AREA' , 
              'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELLIPTIC_AREA' , 
              'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYGONAL_AREA' , 
              'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRIMITIVE_2D_WITH_INNER_BOUNDARY' , 
              'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RECTANGULAR_AREA' ] * TYPEOF( input\
              csg_solid_2d.tree_root_expression ) ) &gt; 0 THEN
            RETURN( TRUE );
          ELSE
            RETURN( FALSE );
          END_IF;
        END;
      'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.BOOLEAN_RESULT_2D' IN TYPEOF( input\csg_solid_2d.
          tree_root_expression )            :         RETURN( valid_csg_2d_primitives( input\csg_solid_2d.tree_root_expression\
            boolean_result_2d.first_operand ) AND valid_csg_2d_primitives( input\csg_solid_2d.tree_root_expression\
            boolean_result_2d.second_operand ) );
      'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.HALF_SPACE_2D' IN TYPEOF( input\csg_solid_2d.
          tree_root_expression )            :         RETURN( TRUE );
      OTHERWISE                            :         RETURN( FALSE );
      END_CASE;</algorithm>
      </function>
      <function name="valid_datum_target_parameters">
         <parameter name="pdf">
            <typename name="placed_datum_target_feature"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      rep_set                   : SET OF representation := [];
      parameter_representations : SET OF representation;
    END_LOCAL;
    REPEAT i := 1 TO HIINDEX( pdf.representation_associations ) BY 1;
      rep_set := rep_set + pdf.representation_associations[i].used_representation;
    END_REPEAT;
    parameter_representations := QUERY ( rep &lt;* rep_set | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
        + 'SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN TYPEOF( rep ) ) );
    IF SIZEOF( QUERY ( srwp &lt;* parameter_representations | ( SIZEOF( QUERY ( i &lt;* srwp.items | ( ( i.name = 'orientation' ) AND 
        ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLACEMENT' IN TYPEOF( i ) ) ) ) ) = 1 ) ) ) &lt;&gt; 1
        THEN
      RETURN( FALSE );
    END_IF;
    CASE pdf\shape_aspect.description OF
      'point'       :         RETURN( SIZEOF( QUERY ( srwp &lt;* parameter_representations | ( SIZEOF( srwp.items ) = 1 ) ) ) = 1 );
      'circle'      :         RETURN( ( SIZEOF( QUERY ( srwp &lt;* parameter_representations | ( SIZEOF( srwp.items ) = 2 ) ) ) = 1 ) 
            AND ( SIZEOF( QUERY ( srwp &lt;* parameter_representations | ( SIZEOF( QUERY ( i &lt;* srwp.items | ( ( i.name = 
            'target diameter'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
            + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
            + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) = 1 ) );
      'circular curve' :         RETURN( ( SIZEOF( QUERY ( srwp &lt;* parameter_representations | ( SIZEOF( srwp.items ) = 2 ) ) ) =
            1 ) AND ( SIZEOF( QUERY ( srwp &lt;* parameter_representations | ( SIZEOF( QUERY ( i &lt;* srwp.items | ( ( i.name = 
            'target diameter'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
            + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
            + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) = 1 ) );
      'line'        :         RETURN( SIZEOF( QUERY ( srwp &lt;* parameter_representations | ( SIZEOF( QUERY ( i &lt;* srwp.items | ( 
            ( i.name = 'target length' ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
            + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
            + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) = 1 );
      'rectangle'   :         RETURN( ( SIZEOF( QUERY ( srwp &lt;* parameter_representations | ( SIZEOF( srwp.items ) = 3 ) ) ) = 1 ) 
            AND ( SIZEOF( QUERY ( srwp &lt;* parameter_representations | ( SIZEOF( QUERY ( i &lt;* srwp.items | ( ( i.name = 
            'target length'  ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
            + 'MEASURE_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
            + 'LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) = 1 ) ) ) = 1 ) AND ( SIZEOF( QUERY ( srwp &lt;* 
            parameter_representations | ( SIZEOF( QUERY ( i &lt;* srwp.items | ( ( i.name = 'target width' ) AND ( SIZEOF( [
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM' , 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) 
            = 1 ) ) ) = 1 ) );
      OTHERWISE     :         RETURN( FALSE );
      END_CASE;</algorithm>
      </function>
      <function name="valid_geometrically_bounded_wf_curve">
         <parameter name="crv">
            <typename name="curve"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE', 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELLIPSE' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CIRCLE' ] * TYPEOF( crv ) ) = 1 THEN
      RETURN( TRUE );
    ELSE
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TRIMMED_CURVE' IN TYPEOF( crv ) THEN
        IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE', 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PARABOLA' , 
            'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.HYPERBOLA' ] * TYPEOF( crv\trimmed_curve.
            basis_curve ) ) = 1 THEN
          RETURN( TRUE );
        ELSE
          RETURN( valid_geometrically_bounded_wf_curve( crv\trimmed_curve.basis_curve ) );
        END_IF;
      ELSE
        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_CURVE_3D' IN TYPEOF( crv ) THEN
          RETURN( valid_geometrically_bounded_wf_curve( crv\offset_curve_3d.basis_curve ) );
        ELSE
          IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_REPLICA' IN TYPEOF( crv ) THEN
            RETURN( valid_geometrically_bounded_wf_curve( crv\curve_replica.parent_curve ) );
          ELSE
            IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.COMPOSITE_CURVE' IN TYPEOF( crv ) THEN
              RETURN( SIZEOF( QUERY ( ccs &lt;* crv\composite_curve.segments | ( NOT valid_geometrically_bounded_wf_curve( ccs.
                  parent_curve ) ) ) ) = 0 );
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="valid_geometrically_bounded_wf_point">
         <parameter name="pnt">
            <typename name="point"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT' IN TYPEOF( pnt ) THEN
      RETURN( TRUE );
    ELSE
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_ON_CURVE' IN TYPEOF( pnt ) THEN
        RETURN( valid_geometrically_bounded_wf_curve( pnt\point_on_curve.basis_curve ) );
      ELSE
        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_REPLICA' IN TYPEOF( pnt ) THEN
          RETURN( valid_geometrically_bounded_wf_point( pnt\point_replica.parent_pt ) );
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="valid_measure_value">
         <parameter name="m">
            <typename name="measure_value"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'REAL' IN TYPEOF( m ) THEN
      RETURN( m &gt; 0 );
    ELSE
      IF 'INTEGER' IN TYPEOF( m ) THEN
        RETURN( m &gt; 0 );
      ELSE
        RETURN( TRUE );
      END_IF;
    END_IF;</algorithm>
      </function>
      <function name="valid_selected_instance_representation">
         <parameter name="pd">
            <typename name="product_definition_or_assembly_relationship"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      properties                          : SET OF property_definition := bag_to_set( QUERY ( prd &lt;* USEDIN( pd, 
                                             'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
                                             + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( prd.name = 'occurrence selection' ) ) );
      property_definition_representations : SET OF property_definition_representation := bag_to_set( QUERY ( pdr &lt;* USEDIN( 
                                             properties[1], 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
                                             + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( pdr.used_representation.
                                             name = 'selection criteria' ) ) );
      selected_representation             : representation;
    END_LOCAL;
    IF SIZEOF( properties ) &lt;&gt; 1 THEN
      RETURN( FALSE );
    END_IF;
    IF SIZEOF( property_definition_representations ) &lt;&gt; 1 THEN
      RETURN( FALSE );
    END_IF;
    selected_representation := property_definition_representations[1]\property_definition_representation.used_representation;
    IF ( SIZEOF( selected_representation\representation.items ) &lt; 1 ) OR ( SIZEOF( selected_representation\representation.items ) 
        &gt; 2 ) THEN
      RETURN( FALSE );
    END_IF;
    IF SIZEOF( QUERY ( i &lt;* selected_representation\representation.items | ( ( SIZEOF( [
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VALUE_RANGE' ] * TYPEOF( i ) ) = 1 ) AND ( i.name = 
        'selection quantity'  ) ) ) ) &lt;&gt; 1 THEN
      RETURN( FALSE );
    END_IF;
    IF SIZEOF( QUERY ( i &lt;* selected_representation\representation.items | ( ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) 
        AND ( i.name = 'selection control' ) ) ) ) &gt; 1 THEN
      RETURN( FALSE );
    END_IF;
    IF ( SIZEOF( QUERY ( i &lt;* selected_representation\representation.items | ( ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) 
        AND ( i.name = 'selection control' ) ) ) ) = 0 ) AND ( SIZEOF( QUERY ( i &lt;* selected_representation\representation.items
        | ( ( i.name = 'selection quantity' ) AND ( SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
        + 'QUALIFIED_REPRESENTATION_ITEM' , 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VALUE_RANGE'] * 
        TYPEOF( i ) ) = 0 ) ) ) ) &gt; 0 ) THEN
      RETURN( FALSE );
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="valid_time">
         <parameter name="time">
            <typename name="local_time"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF EXISTS( time.second_component ) THEN
      RETURN( EXISTS( time.minute_component ) );
    ELSE
      RETURN( TRUE );
    END_IF;</algorithm>
      </function>
      <function name="valid_units">
         <parameter name="m">
            <typename name="measure_with_unit"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LENGTH_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 1, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MASS_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 1, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.TIME_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 1, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELECTRIC_CURRENT_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.THERMODYNAMIC_TEMPERATURE_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CELSIUS_TEMPERATURE_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AMOUNT_OF_SUBSTANCE_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 1, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LUMINOUS_INTENSITY_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PLANE_ANGLE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.SOLID_ANGLE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.AREA_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VOLUME_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 3, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RATIO_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POSITIVE_LENGTH_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 1, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POSITIVE_PLANE_ANGLE_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ACCELERATION_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 1, 0, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CAPACITANCE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( -2, -1, 4, 2, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELECTRIC_CHARGE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 1, 1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONDUCTANCE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( -2, -1, 3, 2, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ELECTRIC_POTENTIAL_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 1, -3, -1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ENERGY_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 1, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FORCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 1, 1, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.FREQUENCY_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ILLUMINANCE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( -2, 0, 0, 0, 0, 0, 1 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.INDUCTANCE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 1, -2, -2, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LUMINOUS_FLUX_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAGNETIC_FLUX_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 1, -2, -1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MAGNETIC_FLUX_DENSITY_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 1, -2, -1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POWER_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 1, -3, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.PRESSURE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( -1, 1, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RESISTANCE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 1, -3, -2, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VELOCITY_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 1, 0, -1, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.RADIOACTIVITY_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.ABSORBED_DOSE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.DOSE_EQUIVALENT_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="valid_wireframe_edge_curve">
         <parameter name="crv">
            <typename name="curve"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF SIZEOF( [ 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.LINE', 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CONIC' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.B_SPLINE_CURVE' , 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POLYLINE' ] * TYPEOF( crv ) ) = 1 THEN
      RETURN( TRUE );
    ELSE
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CURVE_REPLICA' IN TYPEOF( crv ) THEN
        RETURN( valid_wireframe_edge_curve( crv\curve_replica.parent_curve ) );
      ELSE
        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.OFFSET_CURVE_3D' IN TYPEOF( crv ) THEN
          RETURN( valid_wireframe_edge_curve( crv\offset_curve_3d.basis_curve ) );
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="valid_wireframe_vertex_point">
         <parameter name="pnt">
            <typename name="point"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.CARTESIAN_POINT' IN TYPEOF( pnt ) THEN
      RETURN( TRUE );
    ELSE
      IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.POINT_REPLICA' IN TYPEOF( pnt ) THEN
        RETURN( valid_wireframe_vertex_point( pnt\point_replica.parent_pt ) );
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="validate_accuracy_types">
         <parameter name="ei">
            <typename name="shape_data_quality_criterion"/>
         </parameter>
         <parameter name="type_list">
            <aggregate lower="0" type="BAG" upper="?"/>
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      sdqca   : BAG OF shape_data_quality_criterion_and_accuracy_association := [];
      sma     : BAG OF shape_measurement_accuracy := [];
      sdqir   : SET OF shape_data_quality_inspection_result := [];
      scraa   : BAG OF shape_inspection_result_accuracy_association := [];
      t_logic : BOOLEAN;
    END_LOCAL;
    sdqca := USEDIN( ei, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
        'SHAPE_DATA_QUALITY_CRITERION_AND_ACCURACY_ASSOCIATION.'  + 'SHAPE_DATA_QUALITY_CRITERION' );
    IF SIZEOF( sdqca ) &lt;&gt; 0 THEN
      REPEAT i := 1 TO SIZEOF( sdqca ) BY 1;
        sma := sma + sdqca[i].required_specific_accuracy;
      END_REPEAT;
      IF SIZEOF( type_list ) &lt; SIZEOF( sma ) THEN
        RETURN( FALSE );
      END_IF;
      REPEAT i := 1 TO SIZEOF( sma ) BY 1;
        t_logic := FALSE;
        REPEAT j := 1 TO SIZEOF( type_list ) BY 1;
          IF type_list[j] IN value_limit_type( sma[i].range ) THEN
            t_logic := TRUE;
            ESCAPE;
          END_IF;
        END_REPEAT;
        IF NOT t_logic THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    END_IF;
    sdqir := QUERY ( q &lt;* bag_to_set( USEDIN( ei, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
        'DATA_QUALITY_INSPECTION_RESULT.'  + 'CRITERION_INSPECTED' ) ) | ( ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_DATA_QUALITY_INSPECTION_RESULT' ) IN 
        TYPEOF( q ) ) );
    IF SIZEOF( sdqir ) = 0 THEN
      RETURN( TRUE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( sdqir ) BY 1;
      scraa := USEDIN( sdqir[i], 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
          'SHAPE_INSPECTION_RESULT_ACCURACY_ASSOCIATION.'  + 'SHAPE_DATA_QUALITY_RESULT' );
      IF SIZEOF( scraa ) &lt;&gt; 0 THEN
        sma := [];
        REPEAT j := 1 TO SIZEOF( scraa ) BY 1;
          sma := sma + scraa[j].applied_specific_accuracy;
        END_REPEAT;
        IF SIZEOF( type_list ) &lt; SIZEOF( sma ) THEN
          RETURN( FALSE );
        END_IF;
        REPEAT j := 1 TO SIZEOF( sma ) BY 1;
          t_logic := FALSE;
          REPEAT k := 1 TO SIZEOF( type_list ) BY 1;
            IF type_list[k] IN value_limit_type( sma[j].range ) THEN
              t_logic := TRUE;
              ESCAPE;
            END_IF;
          END_REPEAT;
          IF NOT t_logic THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="validate_attribute_id">
         <parameter name="attid">
            <typename name="attribute_identifier"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>CONSTANT
      letters     : SET [52 : 52] OF STRING :=
                     [ 'a' , 
                       'b' , 
                       'c' , 
                       'd' , 
                       'e' , 
                       'f' , 
                       'g' , 
                       'h' , 
                       'i' , 
                       'j' , 
                       'k' , 
                       'l' , 
                       'm' , 
                       'n' , 
                       'o' , 
                       'p' , 
                       'q' , 
                       'r' , 
                       's' , 
                       't' , 
                       'u' , 
                       'v' , 
                       'w' , 
                       'x' , 
                       'y' , 
                       'z' , 
                       'A' , 
                       'B' , 
                       'C' , 
                       'D' , 
                       'E' , 
                       'F' , 
                       'G' , 
                       'H' , 
                       'I' , 
                       'J' , 
                       'K' , 
                       'L' , 
                       'M' , 
                       'N' , 
                       'O' , 
                       'P' , 
                       'Q' , 
                       'R' , 
                       'S' , 
                       'T' , 
                       'U' , 
                       'V' , 
                       'W' , 
                       'X' , 
                       'Y' , 
                       'Z' ];
      numbers_etc : SET [15 : 15] OF STRING :=
                     [ '0' , 
                       '1' , 
                       '2' , 
                       '3' , 
                       '4' , 
                       '5' , 
                       '6' , 
                       '7' , 
                       '8' , 
                       '9' , 
                       '_' , 
                       '[' , 
                       ']' , 
                       '.' , 
                       '\' ];
      valid_chars : SET [67 : 67] OF STRING :=
                     letters 
                       +
                       numbers_etc;
    END_CONSTANT;

    LOCAL
      id_length : INTEGER := LENGTH( attid );
      id_valid  : BOOLEAN := TRUE;
      i         : INTEGER;
    END_LOCAL;
    IF NOT ( attid[1] IN letters ) THEN
      id_valid := FALSE;
    END_IF;
    REPEAT i := 2 TO id_length BY 1 WHILE id_valid = TRUE;
      IF NOT ( attid[i] IN valid_chars ) THEN
        id_valid := FALSE;
      END_IF;
    END_REPEAT;
    RETURN( id_valid );</algorithm>
      </function>
      <function name="validate_countersink_radii">
         <parameter name="cskhole">
            <typename name="solid_with_stepped_round_hole_and_conical_transitions"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      i       : INTEGER;
      j       : INTEGER;
      n       : INTEGER := 1 + cskhole\solid_with_stepped_round_hole.segments;
      smaller : positive_length_measure;
      larger  : positive_length_measure;
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( cskhole.conical_transitions ) BY 1;
      IF ( ( cskhole.conical_transitions[i].transition_number = 1 ) AND ( cskhole.conical_transitions[i].cone_apex_angle &lt; 0 ) ) 
          XOR ( ( cskhole.conical_transitions[i].transition_number = n ) AND ( cskhole.conical_transitions[i].cone_apex_angle &gt; 0 ) )
          THEN
        RETURN( FALSE );
      ELSE
        IF ( cskhole.conical_transitions[i].transition_number &lt;&gt; 1 ) AND ( cskhole.conical_transitions[i].transition_number &lt;&gt; n )
            THEN

          BEGIN
            j := cskhole.conical_transitions[i].transition_number;
            IF cskhole\solid_with_stepped_round_hole.segment_radii[j] &gt; cskhole\solid_with_stepped_round_hole.segment_radii[j - 1]
                THEN

              BEGIN
                IF cskhole.conical_transitions[i].cone_apex_angle &gt; 0 THEN
                  RETURN( FALSE );
                END_IF;
                larger := cskhole\solid_with_stepped_round_hole.segment_radii[j];
                smaller := cskhole\solid_with_stepped_round_hole.segment_radii[j - 1];
              END;
            ELSE

              BEGIN
                IF cskhole.conical_transitions[i].cone_apex_angle &lt; 0 THEN
                  RETURN( FALSE );
                END_IF;
                larger := cskhole\solid_with_stepped_round_hole.segment_radii[j - 1];
                smaller := cskhole\solid_with_stepped_round_hole.segment_radii[j];
              END;
            END_IF;
            IF ( cskhole.conical_transitions[i].cone_base_radius &gt; larger ) OR ( cskhole.conical_transitions[i].cone_base_radius 
                &lt; smaller ) THEN
              RETURN( FALSE );
            END_IF;
          END;
        END_IF;
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="validate_ecdq_inspected_elements_type">
         <parameter name="ei">
            <typename name="externally_conditioned_data_quality_criterion"/>
         </parameter>
         <parameter name="type_list">
            <aggregate lower="0" type="BAG" upper="?"/>
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      sdqir       : SET OF externally_conditioned_data_quality_inspection_result := [];
      dir         : SET OF data_quality_inspection_instance_report := [];
      sdiri       : SET OF externally_conditioned_data_quality_inspection_instance_report_item := [];
      t_type_list : BAG OF STRING := [];
    END_LOCAL;
    sdqir := QUERY ( q &lt;* bag_to_set( USEDIN( ei, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
        'DATA_QUALITY_INSPECTION_RESULT.'  + 'CRITERION_INSPECTED' ) ) | ( ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 
        'EXTERNALLY_CONDITIONED_DATA_QUALITY_INSPECTION_RESULT'  ) IN TYPEOF( q ) ) );
    IF SIZEOF( sdqir ) = 0 THEN
      RETURN( TRUE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( sdqir ) BY 1;
      dir := dir + QUERY ( q &lt;* bag_to_set( USEDIN( sdqir[i], 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  
          + 'DATA_QUALITY_INSPECTION_REPORT.' + 'INSPECTION_RESULT' ) ) | ( ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DATA_QUALITY_INSPECTION_INSTANCE_REPORT' ) IN
          TYPEOF( q ) ) );
    END_REPEAT;
    IF SIZEOF( dir ) = 0 THEN
      RETURN( TRUE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( dir ) BY 1;
      sdiri := sdiri + QUERY ( q &lt;* dir[i].inspected_instances | ( ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 
          'EXTERNALLY_CONDITIONED_DATA_QUALITY_INSPECTION_INSTANCE_REPORT_ITEM'  ) IN TYPEOF( q ) ) );
    END_REPEAT;
    IF SIZEOF( sdiri ) = 0 THEN
      RETURN( TRUE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( sdiri ) BY 1;
      IF SIZEOF( sdiri[i].inspected_elements ) &lt;&gt; SIZEOF( type_list ) THEN
        RETURN( FALSE );
      END_IF;
      t_type_list := type_list;
      REPEAT j := 1 TO SIZEOF( sdiri[i].inspected_elements ) BY 1;
        REPEAT k := 1 TO SIZEOF( t_type_list ) BY 1;
          IF t_type_list[k] IN TYPEOF( sdiri[i].inspected_elements[j] ) THEN
            t_type_list := t_type_list - t_type_list[k];
            ESCAPE;
          END_IF;
        END_REPEAT;
      END_REPEAT;
      IF SIZEOF( t_type_list ) &gt; 0 THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="validate_inspected_elements_type">
         <parameter name="ei">
            <typename name="shape_data_quality_criterion"/>
         </parameter>
         <parameter name="type_list">
            <aggregate lower="0" type="BAG" upper="?"/>
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      sdqir       : SET OF shape_data_quality_inspection_result := [];
      sdir        : SET OF shape_data_quality_inspection_instance_report := [];
      sdiri       : SET OF shape_data_quality_inspection_instance_report_item := [];
      t_type_list : BAG OF STRING := [];
    END_LOCAL;
    sdqir := QUERY ( q &lt;* bag_to_set( USEDIN( ei, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
        'DATA_QUALITY_INSPECTION_RESULT.'  + 'CRITERION_INSPECTED' ) ) | ( ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_DATA_QUALITY_INSPECTION_RESULT' ) IN 
        TYPEOF( q ) ) );
    IF SIZEOF( sdqir ) = 0 THEN
      RETURN( TRUE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( sdqir ) BY 1;
      sdir := sdir + QUERY ( q &lt;* bag_to_set( USEDIN( sdqir[i], 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DATA_QUALITY_INSPECTION_REPORT.' + 
          'INSPECTION_RESULT'  ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
          'SHAPE_DATA_QUALITY_INSPECTION_INSTANCE_REPORT'  ) IN TYPEOF( q ) ) );
    END_REPEAT;
    IF SIZEOF( sdir ) = 0 THEN
      RETURN( TRUE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( sdir ) BY 1;
      sdiri := sdiri + QUERY ( q &lt;* sdir[i].inspected_instances | ( ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 
          'SHAPE_DATA_QUALITY_INSPECTION_INSTANCE_REPORT_ITEM'  ) IN TYPEOF( q ) ) );
    END_REPEAT;
    IF SIZEOF( sdiri ) = 0 THEN
      RETURN( TRUE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( sdiri ) BY 1;
      IF SIZEOF( sdiri[i].inspected_elements ) &lt;&gt; SIZEOF( type_list ) THEN
        RETURN( FALSE );
      END_IF;
      t_type_list := type_list;
      REPEAT j := 1 TO SIZEOF( sdiri[i].inspected_elements ) BY 1;
        REPEAT k := 1 TO SIZEOF( t_type_list ) BY 1;
          IF t_type_list[k] IN TYPEOF( sdiri[i].inspected_elements[j] ) THEN
            t_type_list := t_type_list - t_type_list[k];
            ESCAPE;
          END_IF;
        END_REPEAT;
      END_REPEAT;
      IF SIZEOF( t_type_list ) &gt; 0 THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="validate_locations_of_extreme_value_type">
         <parameter name="ei">
            <typename name="shape_data_quality_criterion"/>
         </parameter>
         <parameter name="type_list">
            <aggregate lower="0" type="BAG" upper="?"/>
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      sdqir       : SET OF shape_data_quality_inspection_result := [];
      sdir        : SET OF shape_data_quality_inspection_instance_report := [];
      sdei        : SET OF instance_report_item_with_extreme_instances := [];
      t_type_list : BAG OF STRING := [];
    END_LOCAL;
    sdqir := QUERY ( q &lt;* bag_to_set( USEDIN( ei, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
        'DATA_QUALITY_INSPECTION_RESULT.'  + 'CRITERION_INSPECTED' ) ) | ( ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_DATA_QUALITY_INSPECTION_RESULT' ) IN 
        TYPEOF( q ) ) );
    IF SIZEOF( sdqir ) = 0 THEN
      RETURN( TRUE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( sdqir ) BY 1;
      sdir := sdir + QUERY ( q &lt;* bag_to_set( USEDIN( sdqir[i], 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DATA_QUALITY_INSPECTION_REPORT.' + 
          'INSPECTION_RESULT'  ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
          'SHAPE_DATA_QUALITY_INSPECTION_INSTANCE_REPORT'  ) IN TYPEOF( q ) ) );
    END_REPEAT;
    REPEAT i := 1 TO SIZEOF( sdir ) BY 1;
      sdei := sdei + QUERY ( q &lt;* sdir[i].inspected_instances | ( ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'INSTANCE_REPORT_ITEM_WITH_EXTREME_INSTANCES' ) 
          IN TYPEOF( q ) ) );
    END_REPEAT;
    IF SIZEOF( sdei ) = 0 THEN
      RETURN( TRUE );
    END_IF;
    IF ( SIZEOF( type_list ) = 0 ) AND ( SIZEOF( sdei ) &lt;&gt; 0 ) THEN
      RETURN( FALSE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( sdei ) BY 1;
      REPEAT j := 1 TO SIZEOF( sdei[i].extreme_instances ) BY 1;
        IF SIZEOF( sdei[i].extreme_instances[j].locations_of_extreme_value ) &lt;&gt; SIZEOF( type_list ) THEN
          RETURN( FALSE );
        END_IF;
        t_type_list := type_list;
        REPEAT k := 1 TO SIZEOF( sdei[i].extreme_instances[j].locations_of_extreme_value ) BY 1;
          REPEAT l := 1 TO SIZEOF( t_type_list ) BY 1;
            IF t_type_list[l] IN TYPEOF( sdei[i].extreme_instances[j].locations_of_extreme_value[k] ) THEN
              t_type_list := t_type_list - t_type_list[l];
              ESCAPE;
            END_IF;
          END_REPEAT;
        END_REPEAT;
        IF SIZEOF( t_type_list ) &gt; 0 THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="validate_measured_data_type">
         <parameter name="ei">
            <typename name="shape_data_quality_criterion"/>
         </parameter>
         <parameter name="type_string">
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      sdqir : SET OF shape_data_quality_inspection_result := [];
      sdcr  : SET OF shape_data_quality_inspection_criterion_report := [];
      sdir  : SET OF shape_data_quality_inspection_instance_report := [];
      sdii  : SET OF shape_data_quality_inspection_instance_report_item := [];
      sdei  : BAG OF instance_report_item_with_extreme_instances := [];
    END_LOCAL;
    sdqir := QUERY ( q &lt;* bag_to_set( USEDIN( ei, 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
        'DATA_QUALITY_INSPECTION_RESULT.'  + 'CRITERION_INSPECTED' ) ) | ( ( 
        'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'SHAPE_DATA_QUALITY_INSPECTION_RESULT' ) IN 
        TYPEOF( q ) ) );
    IF SIZEOF( sdqir ) = 0 THEN
      RETURN( TRUE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( sdqir ) BY 1;
      sdcr := sdcr + QUERY ( q &lt;* bag_to_set( USEDIN( sdqir[i], 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DATA_QUALITY_INSPECTION_REPORT.' + 
          'INSPECTION_RESULT'  ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
          'SHAPE_DATA_QUALITY_INSPECTION_CRITERION_REPORT'  ) IN TYPEOF( q ) ) );
    END_REPEAT;
    REPEAT i := 1 TO SIZEOF( sdqir ) BY 1;
      sdir := sdir + QUERY ( q &lt;* bag_to_set( USEDIN( sdqir[i], 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'DATA_QUALITY_INSPECTION_REPORT.' + 
          'INSPECTION_RESULT'  ) ) | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
          'SHAPE_DATA_QUALITY_INSPECTION_INSTANCE_REPORT'  ) IN TYPEOF( q ) ) );
    END_REPEAT;
    IF ( SIZEOF( sdcr ) = 0 ) AND ( SIZEOF( sdir ) = 0 ) THEN
      RETURN( TRUE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( sdir ) BY 1;
      sdii := sdii + QUERY ( q &lt;* sdir[i].inspected_instances | ( ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 
          'SHAPE_DATA_QUALITY_INSPECTION_INSTANCE_REPORT_ITEM'  ) IN TYPEOF( q ) ) );
    END_REPEAT;
    REPEAT i := 1 TO SIZEOF( sdir ) BY 1;
      sdei := sdei + QUERY ( q &lt;* sdir[i].inspected_instances | ( ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'  + 'INSTANCE_REPORT_ITEM_WITH_EXTREME_INSTANCES' ) 
          IN TYPEOF( q ) ) );
    END_REPEAT;
    REPEAT i := 1 TO SIZEOF( sdcr ) BY 1;
      IF NOT ( type_string IN TYPEOF( sdcr[i].representative_measured_value ) ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    REPEAT i := 1 TO SIZEOF( sdii ) BY 1;
      IF NOT ( type_string IN TYPEOF( sdii[i].measured_value ) ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    REPEAT i := 1 TO SIZEOF( sdei ) BY 1;
      REPEAT j := 1 TO SIZEOF( sdei[i].extreme_instances ) BY 1;
        IF NOT ( type_string IN TYPEOF( sdei[i].extreme_instances[j].measured_value ) ) THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="value_limit_type">
         <parameter name="iv">
            <typename name="shape_data_quality_value_limit_type_select"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <builtintype type="STRING"/>
         <algorithm>LOCAL
      retval : SET OF STRING := [];
    END_LOCAL;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_VALUE_RANGE' ) IN TYPEOF( iv )
        THEN
      retval := TYPEOF( iv\compound_representation_item.item_element[1].value_component );
    END_IF;
    IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'SHAPE_DATA_QUALITY_VALUE_LIMIT' ) IN TYPEOF( iv )
        THEN
      IF ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 'MEASURE_WITH_UNIT' ) IN TYPEOF( iv ) THEN
        retval := TYPEOF( iv\measure_with_unit.value_component );
      END_IF;
    END_IF;
    RETURN( retval );</algorithm>
      </function>
      <function name="value_range_aggregate_rep_item">
         <parameter name="agg">
            <aggregate type="AGGREGATE"/>
            <typename name="representation_item"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>BEGIN
      IF SIZEOF( QUERY ( i1 &lt;* agg | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.' + 
          'MEASURE_REPRESENTATION_ITEM'  ) IN TYPEOF( i1 ) ) ) ) = 6 THEN
        RETURN( TRUE );
      ELSE
        RETURN( FALSE );
      END_IF;
    END;</algorithm>
      </function>
      <function name="value_range_wr1">
         <parameter name="agg">
            <typename name="compound_item_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>BEGIN
      IF ( SIZEOF( agg ) = 2 ) AND ( ( SIZEOF( QUERY ( i1 &lt;* agg | ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i1 ) ) ) ) 
          = 2 ) OR ( SIZEOF( QUERY ( i2 &lt;* agg | ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'VALUE_REPRESENTATION_ITEM'  IN TYPEOF( i2 ) ) ) ) = 2 ) ) THEN
        RETURN( TRUE );
      ELSE
        RETURN( FALSE );
      END_IF;
    END;</algorithm>
      </function>
      <function name="value_range_wr2">
         <parameter name="agg">
            <typename name="compound_item_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>BEGIN
      IF ( SIZEOF( QUERY ( i &lt;* agg | ( i\representation_item.name = 'upper limit' ) ) ) = 1 ) AND ( SIZEOF( QUERY ( i &lt;* agg | 
          ( i\representation_item.name = 'lower limit' ) ) ) = 1 ) THEN
        RETURN( TRUE );
      ELSE
        RETURN( FALSE );
      END_IF;
    END;</algorithm>
      </function>
      <function name="value_range_wr3">
         <parameter name="agg">
            <typename name="compound_item_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>BEGIN
      IF SIZEOF( QUERY ( i1 &lt;* agg | ( ( 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.'
          + 'MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i1 ) ) AND ( SIZEOF( QUERY ( i2 &lt;* agg | ( ( 
          'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i2 ) ) AND
          ( i1 :&lt;&gt;: i2 ) AND ( i1\measure_with_unit.unit_component :=: i2\measure_with_unit.unit_component ) ) ) ) = 1 ) ) ) ) = 2
          THEN
        RETURN( TRUE );
      ELSE
        RETURN( FALSE );
      END_IF;
    END;</algorithm>
      </function>
      <function name="values_space_of">
         <parameter name="expr">
            <typename name="generic_expression"/>
         </parameter>
         <typename name="maths_space"/>
         <algorithm>LOCAL
      e_prefix  : STRING := 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.';
      typenames : SET OF STRING := TYPEOF( expr );
    END_LOCAL;
    IF ( schema_prefix + 'MATHS_VARIABLE' ) IN typenames THEN
      RETURN( expr\maths_variable.values_space );
    END_IF;
    IF ( e_prefix + 'EXPRESSION' ) IN typenames THEN
      IF ( e_prefix + 'NUMERIC_EXPRESSION' ) IN typenames THEN
        IF expr\numeric_expression.is_int THEN
          IF ( e_prefix + 'INT_LITERAL' ) IN typenames THEN
            RETURN( make_finite_space( [expr\int_literal.the_value] ) );
          ELSE
            RETURN( the_integers );
          END_IF;
        ELSE
          IF ( e_prefix + 'REAL_LITERAL' ) IN typenames THEN
            RETURN( make_finite_space( [expr\real_literal.the_value] ) );
          ELSE
            RETURN( the_reals );
          END_IF;
        END_IF;
      END_IF;
      IF ( e_prefix + 'BOOLEAN_EXPRESSION' ) IN typenames THEN
        IF ( e_prefix + 'BOOLEAN_LITERAL' ) IN typenames THEN
          RETURN( make_finite_space( [expr\boolean_literal.the_value] ) );
        ELSE
          RETURN( the_booleans );
        END_IF;
      END_IF;
      IF ( e_prefix + 'STRING_EXPRESSION' ) IN typenames THEN
        IF ( e_prefix + 'STRING_LITERAL' ) IN typenames THEN
          RETURN( make_finite_space( [expr\string_literal.the_value] ) );
        ELSE
          RETURN( the_strings );
        END_IF;
      END_IF;
      RETURN( ? );
    END_IF;
    IF ( schema_prefix + 'MATHS_FUNCTION' ) IN typenames THEN
      IF expression_is_constant( expr ) THEN
        RETURN( make_finite_space( [expr] ) );
      ELSE
        RETURN( make_function_space( sc_equal, expr\maths_function.domain, sc_equal, expr\maths_function.range ) );
      END_IF;
    END_IF;
    IF ( schema_prefix + 'FUNCTION_APPLICATION' ) IN typenames THEN
      RETURN( expr\function_application.func.range );
    END_IF;
    IF ( schema_prefix + 'MATHS_SPACE' ) IN typenames THEN
      IF expression_is_constant( expr ) THEN
        RETURN( make_finite_space( [expr] ) );
      ELSE
        RETURN( make_elementary_space( es_maths_spaces ) );
      END_IF;
    END_IF;
    IF ( schema_prefix + 'DEPENDENT_VARIABLE_DEFINITION' ) IN typenames THEN
      RETURN( values_space_of( expr\unary_generic_expression.operand ) );
    END_IF;
    IF ( schema_prefix + 'COMPLEX_NUMBER_LITERAL' ) IN typenames THEN
      RETURN( make_finite_space( [expr] ) );
    END_IF;
    IF ( schema_prefix + 'LOGICAL_LITERAL' ) IN typenames THEN
      RETURN( make_finite_space( [expr\logical_literal.lit_value] ) );
    END_IF;
    IF ( schema_prefix + 'BINARY_LITERAL' ) IN typenames THEN
      RETURN( make_finite_space( [expr\binary_literal.lit_value] ) );
    END_IF;
    IF ( schema_prefix + 'MATHS_ENUM_LITERAL' ) IN typenames THEN
      RETURN( make_finite_space( [expr\maths_enum_literal.lit_value] ) );
    END_IF;
    IF ( schema_prefix + 'REAL_TUPLE_LITERAL' ) IN typenames THEN
      RETURN( make_finite_space( [expr\real_tuple_literal.lit_value] ) );
    END_IF;
    IF ( schema_prefix + 'INTEGER_TUPLE_LITERAL' ) IN typenames THEN
      RETURN( make_finite_space( [expr\integer_tuple_literal.lit_value] ) );
    END_IF;
    IF ( schema_prefix + 'ATOM_BASED_LITERAL' ) IN typenames THEN
      RETURN( make_finite_space( [expr\atom_based_literal.lit_value] ) );
    END_IF;
    IF ( schema_prefix + 'MATHS_TUPLE_LITERAL' ) IN typenames THEN
      RETURN( make_finite_space( [expr\maths_tuple_literal.lit_value] ) );
    END_IF;
    IF ( schema_prefix + 'PARTIAL_DERIVATIVE_EXPRESSION' ) IN typenames THEN
      RETURN( drop_numeric_constraints( values_space_of( expr\partial_derivative_expression.derivand ) ) );
    END_IF;
    IF ( schema_prefix + 'DEFINITE_INTEGRAL_EXPRESSION' ) IN typenames THEN
      RETURN( drop_numeric_constraints( values_space_of( expr\definite_integral_expression.integrand ) ) );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="vector_difference">
         <parameter name="arg1">
            <typename name="vector_or_direction"/>
         </parameter>
         <parameter name="arg2">
            <typename name="vector_or_direction"/>
         </parameter>
         <typename name="vector"/>
         <algorithm>LOCAL
      result : vector;
      res    : direction;
      vec1   : direction;
      vec2   : direction;
      mag    : REAL;
      mag1   : REAL;
      mag2   : REAL;
      ndim   : INTEGER;
    END_LOCAL;
    IF ( NOT EXISTS( arg1 ) ) OR ( NOT EXISTS( arg2 ) ) OR ( arg1.dim &lt;&gt; arg2.dim ) THEN
      RETURN( ? );
    ELSE

      BEGIN
        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VECTOR' IN TYPEOF( arg1 ) THEN
          mag1 := arg1\vector.magnitude;
          vec1 := arg1\vector.orientation;
        ELSE
          mag1 := 1;
          vec1 := arg1;
        END_IF;
        IF 'AP210_ELECTRONIC_ASSEMBLY_INTERCONNECT_AND_PACKAGING_DESIGN_MIM_LF.VECTOR' IN TYPEOF( arg2 ) THEN
          mag2 := arg2\vector.magnitude;
          vec2 := arg2\vector.orientation;
        ELSE
          mag2 := 1;
          vec2 := arg2;
        END_IF;
        vec1 := normalise( vec1 );
        vec2 := normalise( vec2 );
        ndim := SIZEOF( vec1.direction_ratios );
        mag := 0;
        res := dummy_gri || direction( vec1.direction_ratios );
        REPEAT i := 1 TO ndim BY 1;
          res.direction_ratios[i] := ( mag1 * vec1.direction_ratios[i] ) - ( mag2 * vec2.direction_ratios[i] );
          mag := mag + ( res.direction_ratios[i] * res.direction_ratios[i] );
        END_REPEAT;
        IF mag &gt; 0 THEN
          result := dummy_gri || vector( res, SQRT( mag ) );
        ELSE
          result := dummy_gri || vector( vec1, 0 );
        END_IF;
      END;
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="ypr_index">
         <parameter name="ypr">
            <typename name="ypr_enumeration"/>
         </parameter>
         <builtintype type="INTEGER"/>
         <algorithm>CASE ypr OF
      yaw  :         RETURN( 1 );
      pitch :         RETURN( 2 );
      roll :         RETURN( 3 );
      END_CASE;
    RETURN( ? );</algorithm>
      </function>
   </schema>
</express>
