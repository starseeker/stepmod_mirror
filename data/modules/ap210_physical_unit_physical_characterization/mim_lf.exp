(* ===================================================================================== *)
(* Long form schema generated by PDTec LongformGenerator V 3.1-15 *)
(* generated at 2006-10-24 13:22:32 *)
(* ===================================================================================== *)


SCHEMA AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF;
 
(* Original schemas: 
  schema = action_schema ;
  schema = activity_method_assignment_mim ;
  schema = activity_method_mim ;
  schema = activity_mim ;
  schema = advanced_boundary_representation_mim ;
  schema = aic_advanced_brep ;
  schema = aic_curve_swept_solid ;
  schema = aic_draughting_annotation ;
  schema = aic_faceted_brep ;
  schema = aic_geometric_tolerances ;
  schema = aic_geometrically_bounded_2d_wireframe ;
  schema = aic_geometrically_bounded_surface ;
  schema = aic_manifold_subsurface ;
  schema = aic_manifold_surface ;
  schema = aic_topologically_bounded_surface ;
  schema = alias_identification_mim ;
  schema = altered_package_mim ;
  schema = altered_part_mim ;
  schema = analytical_model_mim ;
  schema = ap210_assembly_functional_interface_requirements_mim ;
  schema = ap210_assembly_functional_requirements_mim ;
  schema = ap210_assembly_physical_design_mim ;
  schema = ap210_assembly_physical_interface_requirements_mim ;
  schema = ap210_assembly_physical_requirements_mim ;
  schema = ap210_assembly_requirement_allocation_mim ;
  schema = ap210_assembly_technology_constraints_mim ;
  schema = ap210_connection_zone_based_model_extraction_mim ;
  schema = ap210_datum_difference_based_model_definition_mim ;
  schema = ap210_device_functional_and_physical_characterization_mim ;
  schema = ap210_electronic_assembly_interconnect_and_packaging_design_mim ;
  schema = ap210_functional_decomposition_mim ;
  schema = ap210_functional_requirement_allocation_mim ;
  schema = ap210_functional_specification_mim ;
  schema = ap210_interconnect_design_for_microwave_mim ;
  schema = ap210_interconnect_design_mim ;
  schema = ap210_interconnect_functional_requirements_mim ;
  schema = ap210_interconnect_physical_requirements_mim ;
  schema = ap210_interconnect_requirement_allocation_mim ;
  schema = ap210_interconnect_technology_constraints_mim ;
  schema = ap210_laminate_assembly_design_mim ;
  schema = ap210_package_functional_and_physical_characterization_mim ;
  schema = ap210_packaged_part_white_box_model_mim ;
  schema = ap210_physical_unit_physical_characterization_mim ;
  schema = ap210_printed_part_functional_and_physical_characterization_mim ;
  schema = ap210_production_rule_mim ;
  schema = application_context_schema ;
  schema = approval_mim ;
  schema = approval_schema ;
  schema = area_2d_mim ;
  schema = assembly_2d_shape_mim ;
  schema = assembly_3d_shape_mim ;
  schema = assembly_component_placement_requirements_mim ;
  schema = assembly_functional_interface_requirement_mim ;
  schema = assembly_module_design_mim ;
  schema = assembly_module_macro_definition_mim ;
  schema = assembly_module_usage_view_mim ;
  schema = assembly_module_with_cable_component_2d_mim ;
  schema = assembly_module_with_cable_component_3d_mim ;
  schema = assembly_module_with_cable_component_mim ;
  schema = assembly_module_with_interconnect_component_mim ;
  schema = assembly_module_with_macro_component_mim ;
  schema = assembly_module_with_packaged_connector_component_mim ;
  schema = assembly_module_with_subassembly_mim ;
  schema = assembly_physical_interface_requirement_mim ;
  schema = assembly_physical_requirement_allocation_mim ;
  schema = assembly_structure_mim ;
  schema = assembly_technology_mim ;
  schema = attribute_classification_mim ;
  schema = bare_die_mim ;
  schema = basic_attribute_schema ;
  schema = basic_curve_mim ;
  schema = basic_geometry_mim ;
  schema = cable_mim ;
  schema = certification_mim ;
  schema = certification_schema ;
  schema = characteristic_mim ;
  schema = characterizable_object_mim ;
  schema = chemical_substance_mim ;
  schema = class_mim ;
  schema = classification_assignment_mim ;
  schema = classification_schema ;
  schema = classification_with_attributes_mim ;
  schema = colour_mim ;
  schema = component_feature_mim ;
  schema = component_grouping_mim ;
  schema = conductivity_material_aspects_mim ;
  schema = configuration_effectivity_mim ;
  schema = configuration_item_mim ;
  schema = configuration_management_schema ;
  schema = connectivity_allocation_to_physical_network_mim ;
  schema = construction_geometry_mim ;
  schema = constructive_solid_geometry_2d_mim ;
  schema = contextual_shape_positioning_mim ;
  schema = contract_mim ;
  schema = contract_schema ;
  schema = curve_swept_solid_mim ;
  schema = date_time_assignment_mim ;
  schema = date_time_mim ;
  schema = date_time_schema ;
  schema = datum_difference_based_model_mim ;
  schema = default_tolerance_mim ;
  schema = derived_shape_element_mim ;
  schema = design_management_mim ;
  schema = design_product_data_management_mim ;
  schema = design_specific_assignment_to_assembly_usage_view_mim ;
  schema = design_specific_assignment_to_interconnect_usage_view_mim ;
  schema = device_marking_mim ;
  schema = dimension_tolerance_mim ;
  schema = discrete_shield_mim ;
  schema = document_and_version_identification_mim ;
  schema = document_assignment_mim ;
  schema = document_definition_mim ;
  schema = document_management_mim ;
  schema = document_properties_mim ;
  schema = document_schema ;
  schema = document_structure_mim ;
  schema = draughting_element_schema ;
  schema = edge_shape_feature_mim ;
  schema = effectivity_application_mim ;
  schema = effectivity_mim ;
  schema = effectivity_schema ;
  schema = electrical_network_definition_mim ;
  schema = elemental_geometric_shape_mim ;
  schema = event_assignment_mim ;
  schema = event_mim ;
  schema = experience_schema ;
  schema = extended_basic_geometry_mim ;
  schema = extended_geometric_tolerance_mim ;
  schema = extended_measure_representation_mim ;
  schema = external_class_mim ;
  schema = external_item_identification_assignment_mim ;
  schema = external_model_mim ;
  schema = external_reference_schema ;
  schema = fabrication_joint_mim ;
  schema = fabrication_requirement_mim ;
  schema = fabrication_technology_mim ;
  schema = faceted_boundary_representation_mim ;
  schema = feature_and_connection_zone_mim ;
  schema = file_identification_mim ;
  schema = fill_area_style_mim ;
  schema = footprint_definition_mim ;
  schema = foundation_representation_mim ;
  schema = functional_assignment_to_part_mim ;
  schema = functional_decomposition_to_assembly_design_mim ;
  schema = functional_decomposition_to_design_mim ;
  schema = functional_decomposition_to_interconnect_design_mim ;
  schema = 
  functional_decomposition_with_nodal_representation_to_packaged_mapping_mim ;
  schema = functional_specification_mim ;
  schema = functional_unit_requirement_allocation_mim ;
  schema = functional_usage_view_mim ;
  schema = generic_material_aspects_mim ;
  schema = generic_product_occurrence_mim ;
  schema = geometric_model_schema ;
  schema = geometric_tolerance_mim ;
  schema = geometrically_bounded_surface_mim ;
  schema = geometry_schema ;
  schema = group_mim ;
  schema = group_schema ;
  schema = identification_assignment_mim ;
  schema = incomplete_data_reference_mechanism_mim ;
  schema = independent_property_mim ;
  schema = independent_property_representation_mim ;
  schema = information_product_mim ;
  schema = integral_shield_mim ;
  schema = interconnect_2d_shape_mim ;
  schema = interconnect_module_connection_routing_mim ;
  schema = interconnect_module_to_assembly_module_relationship_mim ;
  schema = interconnect_module_usage_view_mim ;
  schema = interconnect_module_with_macros_mim ;
  schema = interconnect_non_planar_shape_mim ;
  schema = interconnect_physical_requirement_allocation_mim ;
  schema = interconnect_placement_requirements_mim ;
  schema = interface_component_mim ;
  schema = iso13584_generic_expressions_schema ;
  schema = item_definition_structure_mim ;
  schema = land_mim ;
  schema = layered_2d_shape_mim ;
  schema = layered_3d_shape_mim ;
  schema = layered_interconnect_module_2d_design_mim ;
  schema = layered_interconnect_module_3d_design_mim ;
  schema = layered_interconnect_module_design_mim ;
  schema = layered_interconnect_module_with_printed_component_design_mim ;
  schema = layout_macro_definition_mim ;
  schema = location_schema ;
  schema = management_resource_information_mim ;
  schema = management_resources_schema ;
  schema = manifold_subsurface_mim ;
  schema = manifold_surface_mim ;
  schema = material_property_definition_schema ;
  schema = material_property_representation_schema ;
  schema = measure_representation_mim ;
  schema = measure_schema ;
  schema = model_parameter_mim ;
  schema = multi_linguism_mim ;
  schema = name_assignment_mim ;
  schema = network_functional_design_view_mim ;
  schema = non_feature_shape_element_mim ;
  schema = package_mim ;
  schema = packaged_connector_model_mim ;
  schema = packaged_part_black_box_model_mim ;
  schema = packaged_part_white_box_model_mim ;
  schema = part_and_version_identification_mim ;
  schema = part_definition_relationship_mim ;
  schema = part_external_reference_mim ;
  schema = part_feature_function_mim ;
  schema = part_feature_grouping_mim ;
  schema = part_feature_location_mim ;
  schema = part_occurrence_mim ;
  schema = part_template_2d_shape_mim ;
  schema = part_template_3d_shape_mim ;
  schema = part_template_extension_mim ;
  schema = part_template_non_planar_shape_mim ;
  schema = part_template_shape_with_parameters_mim ;
  schema = part_view_definition_mim ;
  schema = person_organization_assignment_mim ;
  schema = person_organization_mim ;
  schema = person_organization_schema ;
  schema = physical_component_feature_mim ;
  schema = physical_connectivity_definition_mim ;
  schema = physical_layout_template_mim ;
  schema = physical_node_requirement_to_implementing_component_allocation_mim ;
  schema = physical_unit_2d_design_view_mim ;
  schema = physical_unit_2d_shape_mim ;
  schema = physical_unit_3d_design_view_mim ;
  schema = physical_unit_3d_shape_mim ;
  schema = physical_unit_design_view_mim ;
  schema = physical_unit_interconnect_definition_mim ;
  schema = physical_unit_non_planar_design_view_mim ;
  schema = physical_unit_shape_with_parameters_mim ;
  schema = physical_unit_usage_view_mim ;
  schema = planned_characteristic_mim ;
  schema = plib_class_reference_mim ;
  schema = pre_defined_datum_2d_symbol_mim ;
  schema = pre_defined_datum_3d_symbol_mim ;
  schema = pre_defined_datum_symbol_mim ;
  schema = pre_defined_product_data_management_specializations_mim ;
  schema = presentation_appearance_schema ;
  schema = presentation_definition_schema ;
  schema = presentation_organization_schema ;
  schema = presentation_resource_schema ;
  schema = printed_physical_layout_template_mim ;
  schema = process_property_assignment_mim ;
  schema = process_property_representation_schema ;
  schema = process_property_schema ;
  schema = product_categorization_mim ;
  schema = product_class_mim ;
  schema = product_concept_identification_mim ;
  schema = product_concept_schema ;
  schema = product_data_management_mim ;
  schema = product_definition_schema ;
  schema = product_identification_extension_mim ;
  schema = product_identification_mim ;
  schema = product_property_definition_schema ;
  schema = product_property_representation_schema ;
  schema = product_replacement_mim ;
  schema = product_structure_mim ;
  schema = product_structure_schema ;
  schema = product_version_mim ;
  schema = product_version_relationship_mim ;
  schema = product_view_definition_mim ;
  schema = product_view_definition_properties_mim ;
  schema = product_view_definition_relationship_mim ;
  schema = production_rule_mim ;
  schema = project_mim ;
  schema = property_assignment_mim ;
  schema = qualifications_schema ;
  schema = qualified_measure_schema ;
  schema = representation_schema ;
  schema = requirement_assignment_mim ;
  schema = requirement_decomposition_mim ;
  schema = requirement_identification_and_version_mim ;
  schema = requirement_view_definition_mim ;
  schema = requirement_view_definition_relationship_mim ;
  schema = security_classification_mim ;
  schema = security_classification_schema ;
  schema = sequential_laminate_assembly_design_mim ;
  schema = shape_aspect_definition_schema ;
  schema = shape_composition_mim ;
  schema = shape_dimension_schema ;
  schema = shape_feature_mim ;
  schema = shape_parameters_mim ;
  schema = shape_property_assignment_mim ;
  schema = shape_tolerance_schema ;
  schema = signal_mim ;
  schema = single_part_representation_mim ;
  schema = software_mim ;
  schema = specification_document_mim ;
  schema = specified_product_mim ;
  schema = stratum_non_planar_shape_mim ;
  schema = styled_curve_mim ;
  schema = support_resource_schema ;
  schema = tagged_text_representation_mim ;
  schema = test_requirement_allocation_mim ;
  schema = test_select_product_mim ;
  schema = text_appearance_mim ;
  schema = text_representation_mim ;
  schema = thermal_network_definition_mim ;
  schema = time_interval_assignment_mim ;
  schema = time_interval_mim ;
  schema = topology_schema ;
  schema = value_with_unit_extension_mim ;
  schema = value_with_unit_mim ;
  schema = via_component_mim ;
  schema = wireframe_2d_mim ;
  schema = work_order_mim ;
  schema = work_request_mim ;
*)
 
CONSTANT
  dummy_gri : geometric_representation_item := representation_item('')||
  geometric_representation_item(); (* declared in: geometry_schema *)
END_CONSTANT;
 
TYPE action_items = SELECT 
  (configuration_effectivity, product_definition, product_definition_formation
  , product_definition_relationship);
END_TYPE; (* declared in: activity_mim *)
 
TYPE action_method_items = SELECT 
  (product, product_definition_formation, 
  test_method_based_parameter_assignment);
END_TYPE; (* declared in: activity_method_assignment_mim *)
 
TYPE action_request_item = SELECT 
  (product_definition, product_definition_formation, 
  product_definition_relationship, property_definition, 
  versioned_action_request);
END_TYPE; (* declared in: work_request_mim *)
 
TYPE ahead_or_behind = ENUMERATION OF 
  (ahead, exact, behind);
END_TYPE; (* declared in: date_time_schema *)
 
TYPE aliasable_item = SELECT 
  (approval_status, contract, document_file, organization, product, 
  product_definition, product_definition_formation, 
  security_classification_level);
END_TYPE; (* declared in: alias_identification_mim *)
 
TYPE amount_of_substance_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE approval_item = SELECT 
  (action, action_directive, applied_action_assignment, certification, 
  configuration_effectivity, configuration_item, contract, date, 
  directed_action, document, effectivity, executed_action, 
  general_property_relationship, group, group_relationship, product, 
  product_definition, product_definition_formation, 
  product_definition_formation_relationship, product_definition_relationship, 
  representation, requirement_assignment, security_classification, 
  shape_aspect_relationship, versioned_action_request);
END_TYPE; (* declared in: approval_mim *)
 
TYPE area_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE attribute_classification_item = SELECT 
  (action_directive, action_method, action_property, 
  action_property_representation, action_relationship, action_request_solution
  , action_request_status, alternate_product_relationship, 
  applied_action_assignment, applied_action_request_assignment, 
  applied_approval_assignment, applied_certification_assignment, 
  applied_document_reference, applied_document_usage_constraint_assignment, 
  applied_effectivity_assignment, applied_event_occurrence_assignment, 
  applied_external_identification_assignment, applied_identification_assignment
  , applied_organization_assignment, applied_organizational_project_assignment
  , applied_person_and_organization_assignment, approval, 
  approval_person_organization, approval_relationship, approval_status, 
  certification, context_dependent_unit, contract, date_and_time_assignment, 
  date_assignment, derived_unit, descriptive_representation_item, document_file
  , document_relationship, effectivity, event_occurrence_relationship, 
  executed_action, general_property, general_property_relationship, group, 
  group_relationship, language, measure_representation_item, measure_with_unit
  , named_unit, organization_relationship, organizational_address, 
  organizational_project_relationship, person_and_organization, 
  person_and_organization_address, product, product_category, product_concept, 
  product_concept_context, product_definition, product_definition_context, 
  product_definition_formation, product_definition_formation_relationship, 
  product_definition_relationship, property_definition, 
  property_definition_relationship, property_definition_representation, 
  representation, representation_context, representation_item, 
  security_classification, time_interval_relationship, 
  uncertainty_measure_with_unit, versioned_action_request);
END_TYPE; (* declared in: attribute_classification_mim *)
 
TYPE attribute_language_item = SELECT 
  (applied_document_reference, applied_document_usage_constraint_assignment, 
  applied_external_identification_assignment, 
  applied_organizational_project_assignment, approval, approval_relationship, 
  approval_status, attribute_value_assignment, certification, 
  certification_type, contract, date_role, date_time_role, 
  document_relationship, document_usage_role, external_source, 
  identification_role, multi_language_attribute_assignment, object_role, 
  organization_relationship, organizational_project, 
  organizational_project_relationship, organizational_project_role, 
  person_and_organization, product, product_category, product_definition, 
  product_definition_formation, product_definition_relationship);
END_TYPE; (* declared in: multi_linguism_mim *)
 
TYPE attribute_type = SELECT 
  (label, text);
END_TYPE; (* declared in: management_resources_schema *)
 
TYPE axis2_placement = SELECT 
  (axis2_placement_2d, axis2_placement_3d);
END_TYPE; (* declared in: geometry_schema *)
 
TYPE b_spline_curve_form = ENUMERATION OF 
  (polyline_form, circular_arc, elliptic_arc, parabolic_arc, hyperbolic_arc, 
  unspecified);
END_TYPE; (* declared in: geometry_schema *)
 
TYPE boolean_operand = SELECT 
  (solid_model, csg_primitive, boolean_result, half_space_2d);
END_TYPE; (* declared in: geometric_model_schema *)
 
TYPE boolean_operand_2d = SELECT 
  (primitive_2d, boolean_result_2d, half_space_2d);
END_TYPE; (* declared in: constructive_solid_geometry_2d_mim *)
 
TYPE boolean_operator = ENUMERATION OF 
  (union, intersection, difference);
END_TYPE; (* declared in: geometric_model_schema *)
 
TYPE category_usage_item = SELECT 
  (product_class);
END_TYPE; (* declared in: product_class_mim *)
 
TYPE celsius_temperature_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE certification_item = SELECT 
  (alternate_product_relationship, make_from_usage_option, 
  product_definition_formation, product_definition_formation_relationship);
END_TYPE; (* declared in: certification_mim *)
 
TYPE characterized_action_definition = SELECT 
  (action, action_method, action_method_relationship, action_relationship);
END_TYPE; (* declared in: process_property_schema *)
 
TYPE characterized_definition = SELECT 
  (characterized_object, characterized_product_definition, shape_definition);
END_TYPE; (* declared in: product_property_definition_schema *)
 
TYPE characterized_material_property = SELECT 
  (material_property_representation);
END_TYPE; (* declared in: material_property_definition_schema *)
 
TYPE characterized_product_definition = SELECT 
  (product_definition, product_definition_relationship);
END_TYPE; (* declared in: product_property_definition_schema *)
 
TYPE classification_item = SELECT 
  (action, action_directive, action_method, action_property, 
  action_relationship, action_request_solution, action_request_status, address
  , alternate_product_relationship, applied_action_assignment, 
  applied_action_request_assignment, applied_approval_assignment, 
  applied_certification_assignment, applied_contract_assignment, 
  applied_date_and_time_assignment, applied_date_assignment, 
  applied_document_reference, applied_document_usage_constraint_assignment, 
  applied_effectivity_assignment, applied_event_occurrence_assignment, 
  applied_external_identification_assignment, applied_identification_assignment
  , applied_organization_assignment, applied_organizational_project_assignment
  , applied_person_and_organization_assignment, 
  applied_security_classification_assignment, approval, 
  approval_person_organization, approval_relationship, approval_status, 
  assembly_component_usage_substitute, calendar_date, certification, 
  characterized_class, characterized_object, class, configuration_item, 
  context_dependent_unit, contract, conversion_based_unit, date_and_time, 
  date_and_time_assignment, date_assignment, derived_unit, 
  descriptive_representation_item, directed_action, document_file, 
  document_relationship, effectivity, event_occurrence, executed_action, 
  general_property, general_property_relationship, group, 
  identification_assignment, language, material_designation, 
  measure_representation_item, measure_with_unit, 
  multi_language_attribute_assignment, named_unit, organization, 
  organization_relationship, organizational_address, organizational_project, 
  organizational_project_relationship, person, person_and_organization_address
  , product, product_category, product_concept, product_definition, 
  product_definition_context, product_definition_formation, 
  product_definition_formation_relationship, product_definition_relationship, 
  property_definition, property_definition_representation, representation, 
  representation_context, representation_item, security_classification, 
  uncertainty_measure_with_unit, versioned_action_request);
END_TYPE; (* declared in: classification_assignment_mim *)
 
TYPE compound_inner_area_boundary = SELECT 
  (set_inner_area_boundary);
END_TYPE; (* declared in: constructive_solid_geometry_2d_mim *)
 
TYPE compound_item_definition = SELECT 
  (list_representation_item, set_representation_item);
END_TYPE; (* declared in: representation_schema *)
 
TYPE configuration_design_item = SELECT 
  (product_definition, product_definition_formation);
END_TYPE; (* declared in: configuration_management_schema *)
 
TYPE context_dependent_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE contract_item = SELECT 
  (action_directive, alternate_product_relationship, directed_action, 
  organization, person_and_organization, product, product_definition_formation)
  ;
END_TYPE; (* declared in: contract_mim *)
 
TYPE count_measure = NUMBER;
END_TYPE; (* declared in: measure_schema *)
 
TYPE csg_2d_area_select = SELECT 
  (axis2_placement_2d, csg_primitive_solid_2d);
END_TYPE; (* declared in: constructive_solid_geometry_2d_mim *)
 
TYPE csg_2d_shape_select = SELECT 
  (mapped_item, axis2_placement_2d, csg_solid_2d);
END_TYPE; (* declared in: constructive_solid_geometry_2d_mim *)
 
TYPE csg_primitive = SELECT 
  (primitive_2d);
END_TYPE; (* declared in: geometric_model_schema *)
 
TYPE csg_select = SELECT 
  (boolean_result, csg_primitive);
END_TYPE; (* declared in: geometric_model_schema *)
 
TYPE csg_select_2d = SELECT 
  (primitive_2d, boolean_result_2d);
END_TYPE; (* declared in: constructive_solid_geometry_2d_mim *)
 
TYPE date_and_time_item = SELECT 
  (action, action_directive, applied_action_assignment, 
  applied_organization_assignment, applied_person_and_organization_assignment, 
  applied_security_classification_assignment, approval_person_organization, 
  certification, contract, directed_action, document, document_file, 
  event_occurrence, executed_action, organizational_project, product_definition
  , product_definition_formation, product_definition_relationship, rule_action
  , security_classification, versioned_action_request);
END_TYPE; (* declared in: date_time_assignment_mim *)
 
TYPE date_item = SELECT 
  (action, action_directive, applied_action_assignment, 
  applied_organization_assignment, applied_person_and_organization_assignment, 
  applied_security_classification_assignment, approval_person_organization, 
  certification, contract, directed_action, document, document_file, 
  event_occurrence, executed_action, organizational_project, product_definition
  , product_definition_formation, product_definition_relationship, 
  security_classification, versioned_action_request);
END_TYPE; (* declared in: date_time_assignment_mim *)
 
TYPE date_time_or_event_occurrence = SELECT 
  (date_time_select, event_occurrence);
END_TYPE; (* declared in: date_time_schema *)
 
TYPE date_time_select = SELECT 
  (date, date_and_time, local_time);
END_TYPE; (* declared in: date_time_schema *)
 
TYPE day_in_month_number = INTEGER;
WHERE
  wr1 : {1 <= SELF <= 31};
END_TYPE; (* declared in: date_time_schema *)
 
TYPE derived_property_select = SELECT 
  (action_property, property_definition);
END_TYPE; (* declared in: product_property_definition_schema *)
 
TYPE description_attribute_select = SELECT 
  (action_request_solution, application_context, approval_role, 
  configuration_design, context_dependent_shape_representation, date_role, 
  date_time_role, effectivity, external_source, organization_role, 
  person_and_organization, person_and_organization_role, 
  property_definition_representation, representation);
END_TYPE; (* declared in: basic_attribute_schema *)
 
TYPE descriptive_measure = STRING;
END_TYPE; (* declared in: measure_schema *)
 
TYPE dimension_count = INTEGER;
WHERE
  wr1 : SELF > 0;
END_TYPE; (* declared in: geometry_schema *)
 
TYPE document_identifier_assigned_item = SELECT 
  (document);
END_TYPE; (* declared in: specification_document_mim *)
 
TYPE document_reference_item = SELECT 
  (action_method, analytical_model_definition, 
  applied_external_identification_assignment, assembly_component_usage, 
  characterized_class, characterized_object, configuration_item, 
  descriptive_representation_item, executed_action, externally_defined_item, 
  group, group_relationship, material_designation, measure_representation_item
  , model_parameter, predefined_requirement_view_definition, product, 
  product_category, product_definition, product_definition_formation, 
  product_definition_formation_relationship, property_definition, 
  representation, representation_item, rule_set, shape_aspect, 
  shape_aspect_relationship, versioned_action_request);
END_TYPE; (* declared in: document_assignment_mim *)
 
TYPE effectivity_item = SELECT 
  (product_definition, product_definition_formation, 
  product_definition_relationship);
END_TYPE; (* declared in: effectivity_application_mim *)
 
TYPE electric_current_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE event_occurrence_item = SELECT 
  (organizational_project);
END_TYPE; (* declared in: event_assignment_mim *)
 
TYPE external_identification_item = SELECT 
  (action_relationship, action_request_status, applied_organization_assignment
  , applied_person_and_organization_assignment, approval, approval_status, 
  composite_signal_property_relationship, date_and_time_assignment, 
  date_assignment, digital_analytical_model_vector_port, document_file, 
  externally_defined_class, functional_specification, organizational_address, 
  product_definition, property_definition, security_classification, 
  shape_representation, signal, versioned_action_request);
END_TYPE; (* declared in: external_item_identification_assignment_mim *)
 
TYPE founded_item_select = SELECT 
  (founded_item, representation_item);
END_TYPE; (* declared in: representation_schema *)
 
TYPE geometric_set_select = SELECT 
  (point, curve, surface);
END_TYPE; (* declared in: geometric_model_schema *)
 
TYPE groupable_item = SELECT 
  (component_functional_unit, group_relationship, network_node_definition, 
  package_product_concept_feature, predefined_requirement_view_definition, 
  product_concept_feature, product_definition, product_definition_formation, 
  property_definition_representation, representation, representation_item, 
  shape_aspect, shape_aspect_relationship);
WHERE
  wr1 : NOT ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.GROUP' IN 
    TYPEOF(SELF));
END_TYPE; (* declared in: group_mim *)
 
TYPE hour_in_day = INTEGER;
WHERE
  wr1 : {0 <= SELF < 24};
END_TYPE; (* declared in: date_time_schema *)
 
TYPE id_attribute_select = SELECT 
  (action, address, application_context, group, organizational_project, 
  product_category, property_definition, representation, shape_aspect, 
  shape_aspect_relationship);
END_TYPE; (* declared in: basic_attribute_schema *)
 
TYPE identification_item = SELECT 
  (aliasable_item, approval_status, characterized_class, class, 
  configuration_item, contract, document_file, group, group_relationship, 
  material_designation, organization, person_and_organization, product, 
  product_category, product_class, product_concept, product_concept_feature, 
  product_definition, product_definition_formation, product_identification, 
  rule_set, security_classification_level, shape_aspect_relationship, 
  shape_representation);
END_TYPE; (* declared in: identification_assignment_mim *)
 
TYPE identifier = STRING;
END_TYPE; (* declared in: support_resource_schema *)
 
TYPE knot_type = ENUMERATION OF 
  (uniform_knots, quasi_uniform_knots, piecewise_bezier_knots, unspecified);
END_TYPE; (* declared in: geometry_schema *)
 
TYPE label = STRING;
END_TYPE; (* declared in: support_resource_schema *)
 
TYPE length_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE list_representation_item =  LIST [1:?] OF representation_item;
END_TYPE; (* declared in: representation_schema *)
 
TYPE luminous_intensity_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE mass_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE measure_value = SELECT 
  (amount_of_substance_measure, area_measure, celsius_temperature_measure, 
  context_dependent_measure, count_measure, descriptive_measure, 
  electric_current_measure, length_measure, luminous_intensity_measure, 
  mass_measure, numeric_measure, parameter_value, plane_angle_measure, 
  positive_length_measure, positive_plane_angle_measure, positive_ratio_measure
  , ratio_measure, solid_angle_measure, thermodynamic_temperature_measure, 
  time_measure, volume_measure);
END_TYPE; (* declared in: measure_schema *)
 
TYPE minute_in_hour = INTEGER;
WHERE
  wr1 : {0 <= SELF <= 59};
END_TYPE; (* declared in: date_time_schema *)
 
TYPE model_parameter_assigned_item = SELECT 
  (unit);
END_TYPE; (* declared in: model_parameter_mim *)
 
TYPE month_in_year_number = INTEGER;
WHERE
  wr1 : {1 <= SELF <= 12};
END_TYPE; (* declared in: date_time_schema *)
 
TYPE multi_language_attribute_item = SELECT 
  (applied_document_reference, applied_document_usage_constraint_assignment, 
  applied_external_identification_assignment, 
  applied_organizational_project_assignment, approval, approval_relationship, 
  approval_status, certification, certification_type, contract, date_role, 
  date_time_role, document_relationship, document_usage_role, external_source, 
  identification_role, object_role, organization_relationship, 
  organizational_project, organizational_project_relationship, 
  organizational_project_role, person_and_organization, product, 
  product_category, product_definition, product_definition_formation, 
  product_definition_relationship);
END_TYPE; (* declared in: multi_linguism_mim *)
 
TYPE name_attribute_select = SELECT 
  (action_request_solution, address, configuration_design, 
  context_dependent_shape_representation, derived_unit, effectivity, 
  person_and_organization, product_definition, 
  property_definition_representation);
END_TYPE; (* declared in: basic_attribute_schema *)
 
TYPE name_item = SELECT 
  (assembly_component_usage, external_class_library, group, group_relationship
  , product, product_definition);
END_TYPE; (* declared in: name_assignment_mim *)
 
TYPE numeric_measure = NUMBER;
END_TYPE; (* declared in: measure_schema *)
 
TYPE organization_item = SELECT 
  (action, action_directive, applied_action_assignment, 
  applied_classification_assignment, applied_identification_assignment, 
  applied_security_classification_assignment, approval, class, 
  configuration_item, contract, document_file, executed_action, product, 
  product_definition, product_definition_formation, 
  product_definition_formation_relationship, rule_action, 
  security_classification, versioned_action_request);
END_TYPE; (* declared in: person_organization_assignment_mim *)
 
TYPE parameter_value = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE person_and_organization_item = SELECT 
  (action, action_directive, applied_action_assignment, 
  applied_classification_assignment, applied_identification_assignment, 
  applied_security_classification_assignment, approval, configuration_item, 
  contract, document_file, executed_action, person_and_organization, product, 
  product_definition, product_definition_formation, 
  product_definition_formation_relationship, rule_action, 
  security_classification, versioned_action_request);
END_TYPE; (* declared in: person_organization_assignment_mim *)
 
TYPE person_organization_select = SELECT 
  (organization, person, person_and_organization);
END_TYPE; (* declared in: person_organization_schema *)
 
TYPE plane_angle_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE positive_length_measure = length_measure;
WHERE
  wr1 : SELF > 0.0;
END_TYPE; (* declared in: measure_schema *)
 
TYPE positive_plane_angle_measure = plane_angle_measure;
WHERE
  wr1 : SELF > 0.0;
END_TYPE; (* declared in: measure_schema *)
 
TYPE positive_ratio_measure = ratio_measure;
WHERE
  wr1 : SELF > 0.0;
END_TYPE; (* declared in: measure_schema *)
 
TYPE product_definition_or_assembly_relationship = SELECT 
  (assembly_component_usage, product_definition);
END_TYPE; (* declared in: part_occurrence_mim *)
 
TYPE product_or_formation_or_definition = SELECT 
  (product, product_definition_formation, product_definition);
END_TYPE; (* declared in: document_schema *)
 
TYPE project_item = SELECT 
  (executed_action, product_concept);
END_TYPE; (* declared in: project_mim *)
 
TYPE ratio_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE represented_definition = SELECT 
  (general_property, property_definition, property_definition_relationship, 
  shape_aspect, shape_aspect_relationship);
END_TYPE; (* declared in: product_property_representation_schema *)
 
TYPE requirement_assigned_item = SELECT 
  (component_functional_unit, configuration_item, 
  descriptive_representation_item, group, group_relationship, 
  group_shape_aspect, physical_unit, predefined_requirement_view_definition, 
  product, product_definition, product_definition_formation, 
  product_definition_relationship, representation, shape_aspect, 
  shape_representation);
END_TYPE; (* declared in: requirement_assignment_mim *)
 
TYPE requirement_source_item = SELECT 
  (characterized_object, group, group_relationship, product, product_definition
  , product_definition_formation, product_definition_relationship, shape_aspect
  );
END_TYPE; (* declared in: requirement_assignment_mim *)
 
TYPE role_select = SELECT 
  (action_assignment, action_request_assignment, approval_assignment, 
  approval_date_time, certification_assignment, contract_assignment, 
  document_reference, effectivity_assignment, group_assignment, name_assignment
  , security_classification_assignment);
END_TYPE; (* declared in: basic_attribute_schema *)
 
TYPE rule_superseded_item = SELECT 
  (product_definition_formation);
END_TYPE; (* declared in: production_rule_mim *)
 
TYPE second_in_minute = REAL;
WHERE
  wr1 : {0 <= SELF <= 60.0};
END_TYPE; (* declared in: date_time_schema *)
 
TYPE security_classification_item = SELECT 
  (assembly_component_usage, document, document_file, make_from_usage_option, 
  product, product_definition, product_definition_formation);
END_TYPE; (* declared in: security_classification_mim *)
 
TYPE set_inner_area_boundary = SET [1:?] OF primitive_2d;
END_TYPE; (* declared in: constructive_solid_geometry_2d_mim *)
 
TYPE set_representation_item = SET [1:?] OF representation_item;
END_TYPE; (* declared in: representation_schema *)
 
TYPE shape_definition = SELECT 
  (product_definition_shape, shape_aspect, shape_aspect_relationship);
END_TYPE; (* declared in: product_property_definition_schema *)
 
TYPE si_prefix = ENUMERATION OF 
  (exa, peta, tera, giga, mega, kilo, hecto, deca, deci, centi, milli, micro, 
  nano, pico, femto, atto);
END_TYPE; (* declared in: measure_schema *)
 
TYPE si_unit_name = ENUMERATION OF 
  (metre, gram, second, ampere, kelvin, mole, candela, radian, steradian, hertz
  , newton, pascal, joule, watt, coulomb, volt, farad, ohm, siemens, weber, 
  tesla, henry, degree_celsius, lumen, lux, becquerel, gray, sievert);
END_TYPE; (* declared in: measure_schema *)
 
TYPE solid_angle_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE source = ENUMERATION OF 
  (made, bought, not_known);
END_TYPE; (* declared in: product_definition_schema *)
 
TYPE source_item = SELECT 
  (identifier);
END_TYPE; (* declared in: external_reference_schema *)
 
TYPE string_representation_item_select = SELECT 
  (descriptive_representation_item, included_text_block, 
  structured_text_composition);
END_TYPE; (* declared in: tagged_text_representation_mim *)
 
TYPE text = STRING;
END_TYPE; (* declared in: support_resource_schema *)
 
TYPE thermodynamic_temperature_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE time_interval_item = SELECT 
  (action);
END_TYPE; (* declared in: time_interval_assignment_mim *)
 
TYPE time_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE transformation = SELECT 
  (item_defined_transformation, functionally_defined_transformation);
END_TYPE; (* declared in: representation_schema *)
 
TYPE transition_code = ENUMERATION OF 
  (discontinuous, continuous, cont_same_gradient, 
  cont_same_gradient_same_curvature);
END_TYPE; (* declared in: geometry_schema *)
 
TYPE trimming_preference = ENUMERATION OF 
  (cartesian, parameter, unspecified);
END_TYPE; (* declared in: geometry_schema *)
 
TYPE trimming_select = SELECT 
  (cartesian_point, parameter_value);
END_TYPE; (* declared in: geometry_schema *)
 
TYPE unit = SELECT 
  (derived_unit, named_unit);
END_TYPE; (* declared in: measure_schema *)
 
TYPE value_qualifier = SELECT 
  (precision_qualifier, type_qualifier, uncertainty_qualifier);
END_TYPE; (* declared in: qualified_measure_schema *)
 
TYPE vector_or_direction = SELECT 
  (vector, direction);
END_TYPE; (* declared in: geometry_schema *)
 
TYPE volume_measure = REAL;
END_TYPE; (* declared in: measure_schema *)
 
TYPE year_number = INTEGER;
END_TYPE; (* declared in: date_time_schema *)
 
ENTITY absorbed_dose_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    absorbed_dose_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = gray;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY abstract_variable
SUBTYPE OF (property_definition, property_definition_representation, 
representation, representation_item);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY across_port_variable
SUBTYPE OF (port_variable);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY action;
  name : label;
  description :  OPTIONAL text;
  chosen_method : action_method;
DERIVE
  id : identifier := get_id_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ID_ATTRIBUTE.IDENTIFIED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: action_schema *)
 
ENTITY action_assignment ABSTRACT SUPERTYPE;
  assigned_action : action;
DERIVE
  role : object_role := get_role(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ROLE_ASSOCIATION.ITEM_WITH_ROLE'
    )) <= 1;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY action_directive;
  name : label;
  description :  OPTIONAL text;
  analysis : text;
  comment : text;
  requests : SET [1:?] OF versioned_action_request;
END_ENTITY; (* declared in: action_schema *)
 
ENTITY action_method;
  name : label;
  description :  OPTIONAL text;
  consequence : text;
  purpose : text;
END_ENTITY; (* declared in: action_schema *)
 
ENTITY action_method_assignment ABSTRACT SUPERTYPE;
  assigned_action_method : action_method;
  role : action_method_role;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY action_method_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_method : action_method;
  related_method : action_method;
END_ENTITY; (* declared in: action_schema *)
 
ENTITY action_method_role;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY action_property;
  name : label;
  description : text;
  definition : characterized_action_definition;
END_ENTITY; (* declared in: process_property_schema *)
 
ENTITY action_property_representation;
  name : label;
  description : text;
  property : action_property;
  representation : representation;
END_ENTITY; (* declared in: process_property_representation_schema *)
 
ENTITY action_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_action : action;
  related_action : action;
END_ENTITY; (* declared in: action_schema *)
 
ENTITY action_request_assignment ABSTRACT SUPERTYPE;
  assigned_action_request : versioned_action_request;
DERIVE
  role : object_role := get_role(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ROLE_ASSOCIATION.ITEM_WITH_ROLE'
    )) <= 1;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY action_request_solution;
  method : action_method;
  request : versioned_action_request;
DERIVE
  description : text := get_description_value(SELF);
  name : label := get_name_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
  wr2 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.NAME_ATTRIBUTE.NAMED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: action_schema *)
 
ENTITY action_request_status;
  status : label;
  assigned_request : versioned_action_request;
END_ENTITY; (* declared in: action_schema *)
 
ENTITY action_status;
  status : label;
  assigned_action : executed_action;
END_ENTITY; (* declared in: action_schema *)
 
ENTITY activity_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    activity_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = becquerel;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY address;
  internal_location :  OPTIONAL label;
  street_number :  OPTIONAL label;
  street :  OPTIONAL label;
  postal_box :  OPTIONAL label;
  town :  OPTIONAL label;
  region :  OPTIONAL label;
  postal_code :  OPTIONAL label;
  country :  OPTIONAL label;
  facsimile_number :  OPTIONAL label;
  telephone_number :  OPTIONAL label;
  electronic_mail_address :  OPTIONAL label;
  telex_number :  OPTIONAL label;
DERIVE
  name : label := get_name_value(SELF);
  url : identifier := get_id_value(SELF);
WHERE
  wr1 : EXISTS(internal_location) OR EXISTS(street_number) OR EXISTS(street) OR
     EXISTS(postal_box) OR EXISTS(town) OR EXISTS(region) OR EXISTS(postal_code
    ) OR EXISTS(country) OR EXISTS(facsimile_number) OR EXISTS(telephone_number
    ) OR EXISTS(electronic_mail_address) OR EXISTS(telex_number);
END_ENTITY; (* declared in: person_organization_schema *)
 
ENTITY alternate_product_relationship;
  name : label;
  definition :  OPTIONAL text;
  alternate : product;
  base : product;
  basis : text;
UNIQUE
  ur1 : alternate, base;
WHERE
  wr1 : alternate :<>: base;
END_ENTITY; (* declared in: product_structure_schema *)
 
ENTITY amount_of_substance_measure_with_unit
SUBTYPE OF (measure_with_unit);
WHERE
  wr1 : 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.AMOUNT_OF_SUBSTANCE_UNIT'
     IN TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY amount_of_substance_unit
SUBTYPE OF (named_unit);
WHERE
  wr1 : (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit
    .dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.
    time_exponent = 0.0) AND (SELF\named_unit.dimensions.
    electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.
    thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.
    amount_of_substance_exponent = 1.0) AND (SELF\named_unit.dimensions.
    luminous_intensity_exponent = 0.0);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY analog_analytical_model_port
SUBTYPE OF (analytical_model_port);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY analog_port_variable
SUBTYPE OF (representation, representation_item);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY analytical_model
SUBTYPE OF (representation);
UNIQUE
  ur1 : SELF\representation.name;
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY analytical_model_definition
SUBTYPE OF (product_definition);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY analytical_model_make_from_relationship
SUBTYPE OF (product_definition_relationship);
  SELF\product_definition_relationship.relating_product_definition : 
  analytical_model_definition;
  SELF\product_definition_relationship.related_product_definition : 
  analytical_model_definition;
UNIQUE
  ur1 : SELF\product_definition_relationship.relating_product_definition, SELF\
    product_definition_relationship.related_product_definition;
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY analytical_model_parameter
SUBTYPE OF (model_parameter);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY analytical_model_port
SUPERTYPE OF (analytical_model_vector_port ANDOR ONEOF (
analog_analytical_model_port, digital_analytical_model_port))
SUBTYPE OF (representation);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY analytical_model_port_assignment
SUBTYPE OF (property_definition_representation, representation_relationship);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY analytical_model_scalar_port
SUBTYPE OF (analytical_model_vector_port);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY analytical_model_vector_port
SUBTYPE OF (analytical_model_port, compound_representation_item);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY analytical_representation
SUBTYPE OF (representation);
UNIQUE
  ur1 : SELF\representation.name;
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY apex
SUBTYPE OF (derived_shape_aspect);
END_ENTITY; (* declared in: shape_aspect_definition_schema *)
 
ENTITY application_context;
  application : label;
DERIVE
  description : text := get_description_value(SELF);
  id : identifier := get_id_value(SELF);
INVERSE
  context_elements : SET [1:?] OF application_context_element FOR 
  frame_of_reference;
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
  wr2 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ID_ATTRIBUTE.IDENTIFIED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: application_context_schema *)
 
ENTITY application_context_element
SUPERTYPE OF (ONEOF (product_concept_context, product_context, 
product_definition_context));
  name : label;
  frame_of_reference : application_context;
END_ENTITY; (* declared in: application_context_schema *)
 
ENTITY application_context_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_context : application_context;
  related_context : application_context;
END_ENTITY; (* declared in: application_context_schema *)
 
ENTITY application_protocol_definition;
  status : label;
  application_interpreted_model_schema_name : label;
  application_protocol_year : year_number;
  application : application_context;
END_ENTITY; (* declared in: application_context_schema *)
 
ENTITY applied_action_assignment
SUBTYPE OF (action_assignment);
  items : SET [1:?] OF action_items;
END_ENTITY; (* declared in: activity_mim *)
 
ENTITY applied_action_method_assignment
SUBTYPE OF (action_method_assignment);
  items : SET [1:?] OF action_method_items;
END_ENTITY; (* declared in: activity_method_assignment_mim *)
 
ENTITY applied_action_request_assignment
SUBTYPE OF (action_request_assignment);
  items : SET [1:?] OF action_request_item;
END_ENTITY; (* declared in: work_request_mim *)
 
ENTITY applied_approval_assignment
SUBTYPE OF (approval_assignment);
  items : SET [1:?] OF approval_item;
END_ENTITY; (* declared in: approval_mim *)
 
ENTITY applied_attribute_classification_assignment
SUBTYPE OF (attribute_classification_assignment);
  SELF\attribute_classification_assignment.assigned_class : class;
  items : SET [1:?] OF attribute_classification_item;
END_ENTITY; (* declared in: attribute_classification_mim *)
 
ENTITY applied_certification_assignment
SUBTYPE OF (certification_assignment);
  items : SET [1:?] OF certification_item;
END_ENTITY; (* declared in: certification_mim *)
 
ENTITY applied_classification_assignment
SUBTYPE OF (classification_assignment);
  items : SET [1:?] OF classification_item;
END_ENTITY; (* declared in: classification_assignment_mim *)
 
ENTITY applied_contract_assignment
SUBTYPE OF (contract_assignment);
  items : SET [1:?] OF contract_item;
END_ENTITY; (* declared in: contract_mim *)
 
ENTITY applied_date_and_time_assignment
SUBTYPE OF (date_and_time_assignment);
  items : SET [1:?] OF date_and_time_item;
END_ENTITY; (* declared in: date_time_assignment_mim *)
 
ENTITY applied_date_assignment
SUBTYPE OF (date_assignment);
  items : SET [1:?] OF date_item;
END_ENTITY; (* declared in: date_time_assignment_mim *)
 
ENTITY applied_document_reference
SUBTYPE OF (document_reference);
  items : SET [1:?] OF document_reference_item;
END_ENTITY; (* declared in: document_assignment_mim *)
 
ENTITY applied_document_usage_constraint_assignment
SUBTYPE OF (document_usage_constraint_assignment);
  items : SET [1:?] OF document_reference_item;
END_ENTITY; (* declared in: document_assignment_mim *)
 
ENTITY applied_effectivity_assignment
SUBTYPE OF (effectivity_assignment);
  items : SET [1:?] OF effectivity_item;
END_ENTITY; (* declared in: effectivity_application_mim *)
 
ENTITY applied_event_occurrence_assignment
SUBTYPE OF (event_occurrence_assignment);
  items : SET [1:?] OF event_occurrence_item;
END_ENTITY; (* declared in: event_assignment_mim *)
 
ENTITY applied_external_identification_assignment
SUBTYPE OF (external_identification_assignment);
  items : SET [1:?] OF external_identification_item;
END_ENTITY; (* declared in: external_item_identification_assignment_mim *)
 
ENTITY applied_group_assignment
SUBTYPE OF (group_assignment);
  items : SET [1:?] OF groupable_item;
END_ENTITY; (* declared in: group_mim *)
 
ENTITY applied_identification_assignment
SUBTYPE OF (identification_assignment);
  items : SET [1:?] OF identification_item;
END_ENTITY; (* declared in: identification_assignment_mim *)
 
ENTITY applied_name_assignment
SUBTYPE OF (name_assignment);
  item : name_item;
END_ENTITY; (* declared in: name_assignment_mim *)
 
ENTITY applied_organization_assignment
SUBTYPE OF (organization_assignment);
  items : SET [1:?] OF organization_item;
END_ENTITY; (* declared in: person_organization_assignment_mim *)
 
ENTITY applied_organizational_project_assignment
SUBTYPE OF (organizational_project_assignment);
  items : SET [1:?] OF project_item;
END_ENTITY; (* declared in: project_mim *)
 
ENTITY applied_person_and_organization_assignment
SUBTYPE OF (person_and_organization_assignment);
  items : SET [1:?] OF person_and_organization_item;
END_ENTITY; (* declared in: person_organization_assignment_mim *)
 
ENTITY applied_security_classification_assignment
SUBTYPE OF (security_classification_assignment);
  items : SET [1:?] OF security_classification_item;
END_ENTITY; (* declared in: security_classification_mim *)
 
ENTITY applied_time_interval_assignment
SUBTYPE OF (time_interval_assignment);
  items : SET OF time_interval_item;
END_ENTITY; (* declared in: time_interval_assignment_mim *)
 
ENTITY approval;
  status : approval_status;
  level : label;
END_ENTITY; (* declared in: approval_schema *)
 
ENTITY approval_assignment ABSTRACT SUPERTYPE;
  assigned_approval : approval;
DERIVE
  role : object_role := get_role(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ROLE_ASSOCIATION.ITEM_WITH_ROLE'
    )) <= 1;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY approval_date_time;
  date_time : date_time_select;
  dated_approval : approval;
DERIVE
  role : object_role := get_role(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ROLE_ASSOCIATION.ITEM_WITH_ROLE'
    )) <= 1;
END_ENTITY; (* declared in: approval_schema *)
 
ENTITY approval_person_organization;
  person_organization : person_organization_select;
  authorized_approval : approval;
  role : approval_role;
END_ENTITY; (* declared in: approval_schema *)
 
ENTITY approval_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_approval : approval;
  related_approval : approval;
END_ENTITY; (* declared in: approval_schema *)
 
ENTITY approval_role;
  role : label;
DERIVE
  description : text := get_description_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: approval_schema *)
 
ENTITY approval_status;
  name : label;
END_ENTITY; (* declared in: approval_schema *)
 
ENTITY area_measure_with_unit
SUBTYPE OF (measure_with_unit);
WHERE
  wr1 : 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.AREA_UNIT' IN 
    TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY area_unit
SUBTYPE OF (named_unit);
WHERE
  wr1 : (SELF\named_unit.dimensions.length_exponent = 2.0) AND (SELF\named_unit
    .dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.
    time_exponent = 0.0) AND (SELF\named_unit.dimensions.
    electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.
    thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.
    amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.
    luminous_intensity_exponent = 0.0);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY area_with_outer_boundary
SUBTYPE OF (complex_area, half_space_2d);
  SELF\half_space_2d.base_curve : composite_curve;
END_ENTITY; (* declared in: constructive_solid_geometry_2d_mim *)
 
ENTITY assembly_component_usage
SUPERTYPE OF (ONEOF (next_assembly_usage_occurrence, 
specified_higher_usage_occurrence, promissory_usage_occurrence))
SUBTYPE OF (product_definition_usage);
  reference_designator :  OPTIONAL identifier;
END_ENTITY; (* declared in: product_structure_schema *)
 
ENTITY assembly_component_usage_substitute;
  name : label;
  definition :  OPTIONAL text;
  base : assembly_component_usage;
  substitute : assembly_component_usage;
UNIQUE
  ur1 : base, substitute;
WHERE
  wr1 : base.relating_product_definition :=: substitute.
    relating_product_definition;
  wr2 : base :<>: substitute;
END_ENTITY; (* declared in: product_structure_schema *)
 
ENTITY assigned_requirement
SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : requirement_assignment;
  items : SET [1:1] OF product_definition;
END_ENTITY; (* declared in: requirement_assignment_mim *)
 
ENTITY atomic_formula
SUBTYPE OF (compound_representation_item);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY attribute_assertion
SUBTYPE OF (fact_type, property_definition_representation, representation);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY attribute_classification_assignment ABSTRACT SUPERTYPE;
  assigned_class : group;
  attribute_name : label;
  role : classification_role;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY attribute_language_assignment
SUBTYPE OF (attribute_classification_assignment);
  SELF\attribute_classification_assignment.assigned_class : language;
  items : SET [1:?] OF attribute_language_item;
WHERE
  wr1 : SELF\attribute_classification_assignment.role.name IN ['primary', 
    'translated'];
  wr2 : SELF\attribute_classification_assignment.attribute_name <> '';
END_ENTITY; (* declared in: multi_linguism_mim *)
 
ENTITY attribute_value_assignment ABSTRACT SUPERTYPE;
  attribute_name : label;
  attribute_value : attribute_type;
  role : attribute_value_role;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY attribute_value_role;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY axis2_placement_2d
SUBTYPE OF (placement);
  ref_direction :  OPTIONAL direction;
DERIVE
  p :  LIST [2:2] OF direction := build_2axes(ref_direction);
WHERE
  wr1 : SELF\geometric_representation_item.dim = 2;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY axis2_placement_3d
SUBTYPE OF (placement);
  axis :  OPTIONAL direction;
  ref_direction :  OPTIONAL direction;
DERIVE
  p :  LIST [3:3] OF direction := build_axes(axis, ref_direction);
WHERE
  wr1 : SELF\placement.location.dim = 3;
  wr2 : NOT EXISTS(axis) OR (axis.dim = 3);
  wr3 : NOT EXISTS(ref_direction) OR (ref_direction.dim = 3);
  wr4 : NOT EXISTS(axis) OR NOT EXISTS(ref_direction) OR (cross_product(axis, 
    ref_direction).magnitude > 0.0);
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY b_spline_curve
SUPERTYPE OF (ONEOF (uniform_curve, b_spline_curve_with_knots, 
quasi_uniform_curve, bezier_curve) ANDOR rational_b_spline_curve)
SUBTYPE OF (bounded_curve);
  degree : INTEGER;
  control_points_list :  LIST [2:?] OF cartesian_point;
  curve_form : b_spline_curve_form;
  closed_curve : LOGICAL;
  self_intersect : LOGICAL;
DERIVE
  upper_index_on_control_points : INTEGER := SIZEOF(control_points_list) - 1;
  control_points :  ARRAY [0 : upper_index_on_control_points] OF 
  cartesian_point := list_to_array(control_points_list, 0, 
  upper_index_on_control_points);
WHERE
  wr1 : ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.UNIFORM_CURVE' 
    IN TYPEOF(SELF)) OR (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.QUASI_UNIFORM_CURVE' 
    IN TYPEOF(SELF)) OR (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.BEZIER_CURVE' IN 
    TYPEOF(SELF)) OR (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.B_SPLINE_CURVE_WITH_KNOTS'
     IN TYPEOF(SELF));
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY b_spline_curve_with_knots
SUBTYPE OF (b_spline_curve);
  knot_multiplicities :  LIST [2:?] OF INTEGER;
  knots :  LIST [2:?] OF parameter_value;
  knot_spec : knot_type;
DERIVE
  upper_index_on_knots : INTEGER := SIZEOF(knots);
WHERE
  wr1 : constraints_param_b_spline(degree, upper_index_on_knots, 
    upper_index_on_control_points, knot_multiplicities, knots);
  wr2 : SIZEOF(knot_multiplicities) = upper_index_on_knots;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY back_chaining_rule
SUBTYPE OF (rule_definition);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY back_chaining_rule_body
SUBTYPE OF (property_definition, property_definition_representation, 
representation);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY bezier_curve
SUBTYPE OF (b_spline_curve);
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY binary_generic_expression ABSTRACT SUPERTYPE
SUBTYPE OF (generic_expression);
  operands :  LIST [2:2] OF generic_expression;
END_ENTITY; (* declared in: iso13584_generic_expressions_schema *)
 
ENTITY boolean_result
SUBTYPE OF (geometric_representation_item);
  operator : boolean_operator;
  first_operand : boolean_operand;
  second_operand : boolean_operand;
END_ENTITY; (* declared in: geometric_model_schema *)
 
ENTITY boolean_result_2d
SUBTYPE OF (boolean_result);
  SELF\boolean_result.first_operand : boolean_operand_2d;
  SELF\boolean_result.second_operand : boolean_operand_2d;
END_ENTITY; (* declared in: constructive_solid_geometry_2d_mim *)
 
ENTITY bounded_curve
SUPERTYPE OF (ONEOF (polyline, b_spline_curve, trimmed_curve, composite_curve))
SUBTYPE OF (curve);
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY bus_element_link
SUBTYPE OF (product_definition, product_definition_relationship);
UNIQUE
  ur1 : SELF\product_definition_relationship.related_product_definition, SELF\
    product_definition_relationship.relating_product_definition;
WHERE
  wr1 : SELF\product_definition_relationship.related_product_definition :<>: 
    SELF\product_definition_relationship.relating_product_definition;
END_ENTITY; (* declared in: network_functional_design_view_mim *)
 
ENTITY bus_structural_definition
SUBTYPE OF (product_definition);
END_ENTITY; (* declared in: network_functional_design_view_mim *)
 
ENTITY calendar_date
SUBTYPE OF (date);
  day_component : day_in_month_number;
  month_component : month_in_year_number;
WHERE
  wr1 : valid_calendar_date(SELF);
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY capacitance_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    capacitance_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = farad;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY cartesian_point
SUBTYPE OF (point);
  coordinates :  LIST [1:3] OF length_measure;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY cartesian_transformation_operator
SUPERTYPE OF (ONEOF (cartesian_transformation_operator_2d, 
cartesian_transformation_operator_3d))
SUBTYPE OF (geometric_representation_item, functionally_defined_transformation)
  ;
  axis1 :  OPTIONAL direction;
  axis2 :  OPTIONAL direction;
  local_origin : cartesian_point;
  scale :  OPTIONAL REAL;
DERIVE
  scl : REAL := NVL(scale, 1.0);
WHERE
  wr1 : scl > 0.0;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY cartesian_transformation_operator_2d
SUBTYPE OF (cartesian_transformation_operator);
DERIVE
  u :  LIST [2:2] OF direction := base_axis(2, SELF\
  cartesian_transformation_operator.axis1, SELF\
  cartesian_transformation_operator.axis2, ?);
WHERE
  wr1 : SELF\geometric_representation_item.dim = 2;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY cartesian_transformation_operator_3d
SUBTYPE OF (cartesian_transformation_operator);
  axis3 :  OPTIONAL direction;
DERIVE
  u :  LIST [3:3] OF direction := base_axis(3, SELF\
  cartesian_transformation_operator.axis1, SELF\
  cartesian_transformation_operator.axis2, axis3);
WHERE
  wr1 : SELF\geometric_representation_item.dim = 3;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY category_model_parameter
SUBTYPE OF (model_parameter, property_definition);
DERIVE
  SELF\property_definition.definition : characterized_definition := SELF;
END_ENTITY; (* declared in: model_parameter_mim *)
 
ENTITY celsius_temperature_measure_with_unit
SUBTYPE OF (measure_with_unit);
WHERE
  wr1 : 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.THERMODYNAMIC_TEMPERATURE_UNIT'
     IN TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY centre_of_symmetry
SUBTYPE OF (derived_shape_aspect);
WHERE
  wr1 : SIZEOF(QUERY(sadr <* SELF\derived_shape_aspect.deriving_relationships
     | NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.SYMMETRIC_SHAPE_ASPECT'
     IN TYPEOF(sadr\shape_aspect_relationship.related_shape_aspect)))) = 0;
END_ENTITY; (* declared in: shape_aspect_definition_schema *)
 
ENTITY certification;
  name : label;
  purpose : text;
  kind : certification_type;
END_ENTITY; (* declared in: certification_schema *)
 
ENTITY certification_assignment ABSTRACT SUPERTYPE;
  assigned_certification : certification;
DERIVE
  role : object_role := get_role(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ROLE_ASSOCIATION.ITEM_WITH_ROLE'
    )) <= 1;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY certification_type;
  description : label;
END_ENTITY; (* declared in: certification_schema *)
 
ENTITY characteristic_type
SUBTYPE OF (group);
END_ENTITY; (* declared in: characteristic_mim *)
 
ENTITY characterized_class
SUBTYPE OF (characterized_object, class);
END_ENTITY; (* declared in: classification_with_attributes_mim *)
 
ENTITY characterized_object;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: product_property_definition_schema *)
 
ENTITY circle
SUBTYPE OF (conic);
  radius : positive_length_measure;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY circular_area
SUBTYPE OF (primitive_2d);
  centre : cartesian_point;
  radius : positive_length_measure;
END_ENTITY; (* declared in: geometric_model_schema *)
 
ENTITY class
SUBTYPE OF (group);
END_ENTITY; (* declared in: classification_schema *)
 
ENTITY class_by_extension
SUBTYPE OF (class);
END_ENTITY; (* declared in: classification_schema *)
 
ENTITY class_by_intension
SUBTYPE OF (class);
END_ENTITY; (* declared in: classification_schema *)
 
ENTITY class_system
SUBTYPE OF (group);
END_ENTITY; (* declared in: classification_with_attributes_mim *)
 
ENTITY classification_assignment ABSTRACT SUPERTYPE;
  assigned_class : group;
  role : classification_role;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY classification_role;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY complex_area
ABSTRACT SUPERTYPE OF (area_with_outer_boundary)
SUBTYPE OF (primitive_2d);
END_ENTITY; (* declared in: constructive_solid_geometry_2d_mim *)
 
ENTITY complex_clause
SUBTYPE OF (compound_representation_item);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY complex_conjunctive_clause
SUBTYPE OF (complex_clause);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY complex_disjunctive_clause
SUBTYPE OF (complex_clause);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY component_functional_terminal
SUBTYPE OF (shape_aspect);
END_ENTITY; (* declared in: network_functional_design_view_mim *)
 
ENTITY component_functional_unit
SUBTYPE OF (product_definition);
END_ENTITY; (* declared in: network_functional_design_view_mim *)
 
ENTITY composite_array_shape_aspect
SUPERTYPE OF (ONEOF (linear_composite_array_shape_aspect, 
rectangular_composite_array_shape_aspect))
SUBTYPE OF (composite_shape_aspect);
END_ENTITY; (* declared in: part_feature_grouping_mim *)
 
ENTITY composite_array_shape_aspect_link
SUBTYPE OF (shape_aspect, shape_aspect_relationship);
WHERE
  wr1 : SELF\shape_aspect_relationship.related_shape_aspect :<>: SELF\
    shape_aspect_relationship.relating_shape_aspect;
END_ENTITY; (* declared in: part_feature_grouping_mim *)
 
ENTITY composite_curve
SUBTYPE OF (bounded_curve);
  segments :  LIST [1:?] OF composite_curve_segment;
  self_intersect : LOGICAL;
DERIVE
  n_segments : INTEGER := SIZEOF(segments);
  closed_curve : LOGICAL := segments[n_segments].transition <> discontinuous;
WHERE
  wr1 : NOT closed_curve AND (SIZEOF(QUERY(temp <* segments | temp.transition
     = discontinuous)) = 1) OR closed_curve AND (SIZEOF(QUERY(temp <* segments
     | temp.transition = discontinuous)) = 0);
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY composite_curve_segment
SUBTYPE OF (founded_item);
  transition : transition_code;
  same_sense : BOOLEAN;
  parent_curve : curve;
INVERSE
  using_curves : BAG [1:?] OF composite_curve FOR segments;
WHERE
  wr1 : 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.BOUNDED_CURVE' IN
     TYPEOF(parent_curve);
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY composite_group_shape_aspect
SUBTYPE OF (composite_shape_aspect);
END_ENTITY; (* declared in: shape_composition_mim *)
 
ENTITY composite_shape_aspect
SUBTYPE OF (shape_aspect);
INVERSE
  component_relationships : SET [2:?] OF shape_aspect_relationship FOR 
  relating_shape_aspect;
END_ENTITY; (* declared in: shape_aspect_definition_schema *)
 
ENTITY composite_signal_property_relationship
SUBTYPE OF (property_definition, property_definition_relationship);
WHERE
  wr1 : SELF\property_definition_relationship.related_property_definition.
    definition :<>: SELF\property_definition_relationship.
    relating_property_definition.definition;
END_ENTITY; (* declared in: signal_mim *)
 
ENTITY composite_unit_shape_aspect
SUBTYPE OF (composite_shape_aspect);
END_ENTITY; (* declared in: shape_composition_mim *)
 
ENTITY compound_representation_item
SUBTYPE OF (representation_item);
  item_element : compound_item_definition;
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY concept_feature_operator;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: product_concept_schema *)
 
ENTITY concept_feature_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_product_concept_feature : product_concept_feature;
  related_product_concept_feature : product_concept_feature;
END_ENTITY; (* declared in: product_concept_schema *)
 
ENTITY concept_feature_relationship_with_condition
SUBTYPE OF (concept_feature_relationship);
  conditional_operator : concept_feature_operator;
END_ENTITY; (* declared in: product_concept_schema *)
 
ENTITY conditional_concept_feature
SUBTYPE OF (product_concept_feature);
  condition : concept_feature_relationship_with_condition;
END_ENTITY; (* declared in: product_concept_schema *)
 
ENTITY conductance_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    conductance_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = siemens;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY configurable_item
SUBTYPE OF (configuration_item);
  item_concept_feature : SET [1:?] OF product_concept_feature_association;
END_ENTITY; (* declared in: configuration_management_schema *)
 
ENTITY configuration_design;
  configuration : configuration_item;
  design : configuration_design_item;
DERIVE
  name : label := get_name_value(SELF);
  description : text := get_description_value(SELF);
UNIQUE
  ur1 : configuration, design;
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.NAME_ATTRIBUTE.NAMED_ITEM'
    )) <= 1;
  wr2 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: configuration_management_schema *)
 
ENTITY configuration_effectivity
SUBTYPE OF (product_definition_effectivity);
  configuration : configuration_design;
UNIQUE
  ur1 : configuration, usage, id;
WHERE
  wr1 : 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION_USAGE'
     IN TYPEOF(SELF\product_definition_effectivity.usage);
END_ENTITY; (* declared in: configuration_management_schema *)
 
ENTITY configuration_item;
  id : identifier;
  name : label;
  description :  OPTIONAL text;
  item_concept : product_concept;
  purpose :  OPTIONAL label;
END_ENTITY; (* declared in: configuration_management_schema *)
 
ENTITY conic
SUPERTYPE OF (ONEOF (circle, ellipse, hyperbola, parabola))
SUBTYPE OF (curve);
  position : axis2_placement;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY connection_zone_interface_plane_relationship
SUBTYPE OF (shape_aspect, shape_aspect_relationship);
UNIQUE
  ur1 : SELF\shape_aspect_relationship.name;
END_ENTITY; (* declared in: feature_and_connection_zone_mim *)
 
ENTITY connection_zone_map_identification
SUBTYPE OF (shape_aspect, representation_relationship);
  SELF\representation_relationship.rep_1 : 
  usage_view_connection_zone_terminal_shape_relationship;
  SELF\representation_relationship.rep_2 : 
  usage_view_connection_zone_terminal_shape_relationship;
WHERE
  wr1 : SELF\representation_relationship.rep_2 :<>: SELF\
    representation_relationship.rep_1;
END_ENTITY; (* declared in: physical_unit_usage_view_mim *)
 
ENTITY context_dependent_shape_representation;
  representation_relation : shape_representation_relationship;
  represented_product_relation : product_definition_shape;
DERIVE
  description : text := get_description_value(SELF);
  name : label := get_name_value(SELF);
WHERE
  wr1 : 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP'
     IN TYPEOF(SELF.represented_product_relation.definition);
  wr2 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
  wr3 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.NAME_ATTRIBUTE.NAMED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: product_property_representation_schema *)
 
ENTITY context_dependent_unit
SUBTYPE OF (named_unit);
  name : label;
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY contract;
  name : label;
  purpose : text;
  kind : contract_type;
END_ENTITY; (* declared in: contract_schema *)
 
ENTITY contract_assignment ABSTRACT SUPERTYPE;
  assigned_contract : contract;
DERIVE
  role : object_role := get_role(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ROLE_ASSOCIATION.ITEM_WITH_ROLE'
    )) <= 1;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY contract_type;
  description : label;
END_ENTITY; (* declared in: contract_schema *)
 
ENTITY conversion_based_unit
SUBTYPE OF (named_unit);
  name : label;
  conversion_factor : measure_with_unit;
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY coordinated_universal_time_offset;
  hour_offset : INTEGER;
  minute_offset :  OPTIONAL INTEGER;
  sense : ahead_or_behind;
DERIVE
  actual_minute_offset : INTEGER := NVL(minute_offset, 0);
WHERE
  wr1 : {0 <= hour_offset < 24};
  wr2 : {0 <= actual_minute_offset <= 59};
  wr3 : NOT (((hour_offset <> 0) OR (actual_minute_offset <> 0)) AND (sense = 
    exact));
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY csg_2d_shape_representation
SUBTYPE OF (shape_representation);
  SELF\representation.items : SET [1:?] OF csg_2d_shape_select;
WHERE
  wr1 : SELF.context_of_items\geometric_representation_context.
    coordinate_space_dimension = 2;
  wr2 : SIZEOF(QUERY(it <* SELF.items | (SIZEOF([
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CSG_SOLID'] * TYPEOF(
    it)) = 1) OR (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MAPPED_ITEM' IN 
    TYPEOF(it)) AND ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'CSG_2D_SHAPE_REPRESENTATION' IN TYPEOF(it\mapped_item.mapping_source.
    mapped_representation)))) >= 1;
  wr3 : SIZEOF(QUERY(it <* SELF.items | (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MAPPED_ITEM' IN 
    TYPEOF(it)) AND NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'CSG_2D_SHAPE_REPRESENTATION' IN TYPEOF(it\mapped_item.mapping_source.
    mapped_representation)))) = 0;
END_ENTITY; (* declared in: constructive_solid_geometry_2d_mim *)
 
ENTITY csg_primitive_solid_2d
SUBTYPE OF (csg_solid_2d);
  SELF\csg_solid.tree_root_expression : primitive_2d;
END_ENTITY; (* declared in: constructive_solid_geometry_2d_mim *)
 
ENTITY csg_solid
SUBTYPE OF (solid_model);
  tree_root_expression : csg_select;
END_ENTITY; (* declared in: geometric_model_schema *)
 
ENTITY csg_solid_2d
SUBTYPE OF (csg_solid);
  SELF\csg_solid.tree_root_expression : csg_select_2d;
END_ENTITY; (* declared in: constructive_solid_geometry_2d_mim *)
 
ENTITY curve
SUPERTYPE OF (ONEOF (line, conic, offset_curve_2d, curve_replica))
SUBTYPE OF (geometric_representation_item);
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY curve_replica
SUBTYPE OF (curve);
  parent_curve : curve;
  transformation : cartesian_transformation_operator;
WHERE
  wr1 : transformation.dim = parent_curve.dim;
  wr2 : acyclic_curve_replica(SELF, parent_curve);
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY data_environment;
  name : label;
  description : text;
  elements : SET [1:?] OF property_definition_representation;
END_ENTITY; (* declared in: material_property_representation_schema *)
 
ENTITY date
SUPERTYPE OF (calendar_date);
  year_component : year_number;
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY date_and_time;
  date_component : date;
  time_component : local_time;
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY date_and_time_assignment ABSTRACT SUPERTYPE;
  assigned_date_and_time : date_and_time;
  role : date_time_role;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY date_assignment ABSTRACT SUPERTYPE;
  assigned_date : date;
  role : date_role;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY date_role;
  name : label;
DERIVE
  description : text := get_description_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY date_time_role;
  name : label;
DERIVE
  description : text := get_description_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY dated_effectivity
SUBTYPE OF (effectivity);
  effectivity_end_date :  OPTIONAL date_time_or_event_occurrence;
  effectivity_start_date : date_time_or_event_occurrence;
END_ENTITY; (* declared in: effectivity_schema *)
 
ENTITY definitional_representation
SUBTYPE OF (representation);
WHERE
  wr1 : 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PARAMETRIC_REPRESENTATION_CONTEXT'
     IN TYPEOF(SELF\representation.context_of_items);
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY definitional_representation_relationship
SUBTYPE OF (representation_relationship);
WHERE
  wr1 : acyclic_representation_relationship(SELF, [SELF\
    representation_relationship.rep_2], 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 'REPRESENTATION')
    ;
END_ENTITY; (* declared in: extended_basic_geometry_mim *)
 
ENTITY degenerate_pcurve
SUBTYPE OF (point);
  basis_surface : surface;
  reference_to_curve : definitional_representation;
WHERE
  wr1 : SIZEOF(reference_to_curve\representation.items) = 1;
  wr2 : 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CURVE' IN TYPEOF(
    reference_to_curve\representation.items[1]);
  wr3 : reference_to_curve\representation.items[1]\
    geometric_representation_item.dim = 2;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY derived_shape_aspect
SUPERTYPE OF (ONEOF (apex, centre_of_symmetry, geometric_alignment, 
geometric_intersection, parallel_offset, perpendicular_to, extension, tangent))
SUBTYPE OF (shape_aspect);
INVERSE
  deriving_relationships : SET [1:?] OF shape_aspect_relationship FOR 
  relating_shape_aspect;
WHERE
  wr1 : SIZEOF(QUERY(dr <* SELF\derived_shape_aspect.deriving_relationships | 
    NOT ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'SHAPE_ASPECT_DERIVING_RELATIONSHIP' IN TYPEOF(dr)))) = 0;
END_ENTITY; (* declared in: shape_aspect_definition_schema *)
 
ENTITY derived_unit;
  elements : SET [1:?] OF derived_unit_element;
DERIVE
  name : label := get_name_value(SELF);
WHERE
  wr1 : (SIZEOF(elements) > 1) OR (SIZEOF(elements) = 1) AND (elements[1].
    exponent <> 1.0);
  wr2 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.NAME_ATTRIBUTE.NAMED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY derived_unit_element;
  unit : named_unit;
  exponent : REAL;
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY description_attribute;
  attribute_value : text;
  described_item : description_attribute_select;
END_ENTITY; (* declared in: basic_attribute_schema *)
 
ENTITY descriptive_representation_item
SUBTYPE OF (representation_item);
  description : text;
END_ENTITY; (* declared in: qualified_measure_schema *)
 
ENTITY digital_analytical_model_port
SUBTYPE OF (analytical_model_port);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY digital_analytical_model_scalar_port
SUBTYPE OF (digital_analytical_model_vector_port, analytical_model_scalar_port)
  ;
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY digital_analytical_model_vector_port
SUBTYPE OF (analytical_model_vector_port);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY dimensional_exponents;
  length_exponent : REAL;
  mass_exponent : REAL;
  time_exponent : REAL;
  electric_current_exponent : REAL;
  thermodynamic_temperature_exponent : REAL;
  amount_of_substance_exponent : REAL;
  luminous_intensity_exponent : REAL;
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY dimensional_location
SUBTYPE OF (shape_aspect_relationship);
END_ENTITY; (* declared in: shape_dimension_schema *)
 
ENTITY directed_action
SUBTYPE OF (executed_action);
  directive : action_directive;
END_ENTITY; (* declared in: action_schema *)
 
ENTITY direction
SUBTYPE OF (geometric_representation_item);
  direction_ratios :  LIST [2:3] OF REAL;
WHERE
  wr1 : SIZEOF(QUERY(tmp <* direction_ratios | tmp <> 0.0)) > 0;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY document;
  id : identifier;
  name : label;
  description :  OPTIONAL text;
  kind : document_type;
INVERSE
  representation_types : SET OF document_representation_type FOR 
  represented_document;
END_ENTITY; (* declared in: document_schema *)
 
ENTITY document_file
SUBTYPE OF (document, characterized_object);
WHERE
  wr1 : SELF\characterized_object.name = '';
  wr2 : NOT EXISTS(SELF\characterized_object.description);
  wr3 : SIZEOF(QUERY(drt <* SELF\document.representation_types | drt.name IN [
    'digital', 'physical'])) = 1;
END_ENTITY; (* declared in: file_identification_mim *)
 
ENTITY document_identifier
SUBTYPE OF (group);
UNIQUE
  ur1 : SELF\group.name, SELF\group.description;
END_ENTITY; (* declared in: specification_document_mim *)
 
ENTITY document_identifier_assignment
SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : document_identifier;
  items : SET [1:?] OF document_identifier_assigned_item;
END_ENTITY; (* declared in: specification_document_mim *)
 
ENTITY document_product_association;
  name : label;
  description :  OPTIONAL text;
  relating_document : document;
  related_product : product_or_formation_or_definition;
END_ENTITY; (* declared in: document_schema *)
 
ENTITY document_product_equivalence
SUBTYPE OF (document_product_association);
WHERE
  wr1 : SELF\document_product_association.name = 'equivalence';
  wr2 : NOT ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT' IN 
    TYPEOF(SELF\document_product_association.related_product)) OR (SELF\
    document_product_association.relating_document.kind.product_data_type = 
    'configuration controlled document') AND (SIZEOF(QUERY(prpc <* USEDIN(SELF\
    document_product_association.related_product, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'
    ) | prpc.name = 'document')) = 1);
  wr3 : NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION_FORMATION'
     IN TYPEOF(SELF.related_product)) OR (SELF\document_product_association.
    relating_document.kind.product_data_type = 
    'configuration controlled document version') AND (SIZEOF(QUERY(prpc <* 
    USEDIN(SELF.related_product\product_definition_formation.of_product, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'
    ) | prpc.name = 'document')) = 1);
  wr4 : NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION' 
    IN TYPEOF(SELF.related_product)) OR (SELF\document_product_association.
    relating_document.kind.product_data_type = 
    'configuration controlled document definition') AND (SIZEOF(QUERY(prpc <* 
    USEDIN(SELF\document_product_association.related_product\product_definition
    .formation.of_product, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'
    ) | prpc.name = 'document')) = 1);
END_ENTITY; (* declared in: document_assignment_mim *)
 
ENTITY document_reference ABSTRACT SUPERTYPE;
  assigned_document : document;
  source : label;
DERIVE
  role : object_role := get_role(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ROLE_ASSOCIATION.ITEM_WITH_ROLE'
    )) <= 1;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY document_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_document : document;
  related_document : document;
END_ENTITY; (* declared in: document_schema *)
 
ENTITY document_representation_type;
  name : label;
  represented_document : document;
END_ENTITY; (* declared in: document_schema *)
 
ENTITY document_type;
  product_data_type : label;
END_ENTITY; (* declared in: document_schema *)
 
ENTITY document_usage_constraint;
  source : document;
  subject_element : label;
  subject_element_value : text;
END_ENTITY; (* declared in: document_schema *)
 
ENTITY document_usage_constraint_assignment ABSTRACT SUPERTYPE;
  assigned_document_usage : document_usage_constraint;
  role : document_usage_role;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY document_usage_role;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY dose_equivalent_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    dose_equivalent_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = sievert;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY effectivity
SUPERTYPE OF (ONEOF (serial_numbered_effectivity, dated_effectivity, 
lot_effectivity, time_interval_based_effectivity));
  id : identifier;
DERIVE
  name : label := get_name_value(SELF);
  description : text := get_description_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.NAME_ATTRIBUTE.NAMED_ITEM'
    )) <= 1;
  wr2 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: effectivity_schema *)
 
ENTITY effectivity_assignment ABSTRACT SUPERTYPE;
  assigned_effectivity : effectivity;
DERIVE
  role : object_role := get_role(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ROLE_ASSOCIATION.ITEM_WITH_ROLE'
    )) <= 1;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY effectivity_relationship;
  name : label;
  description :  OPTIONAL text;
  related_effectivity : effectivity;
  relating_effectivity : effectivity;
END_ENTITY; (* declared in: effectivity_schema *)
 
ENTITY electric_charge_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    electric_charge_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = coulomb;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY electric_current_measure_with_unit
SUBTYPE OF (measure_with_unit);
WHERE
  wr1 : 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ELECTRIC_CURRENT_UNIT'
     IN TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY electric_current_unit
SUBTYPE OF (named_unit);
WHERE
  wr1 : (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit
    .dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.
    time_exponent = 0.0) AND (SELF\named_unit.dimensions.
    electric_current_exponent = 1.0) AND (SELF\named_unit.dimensions.
    thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.
    amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.
    luminous_intensity_exponent = 0.0);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY electromotive_force_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    electromotive_force_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = volt;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY elementary_surface
SUPERTYPE OF (plane)
SUBTYPE OF (surface);
  position : axis2_placement_3d;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY ellipse
SUBTYPE OF (conic);
  semi_axis_1 : positive_length_measure;
  semi_axis_2 : positive_length_measure;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY elliptic_area
SUBTYPE OF (primitive_2d);
  position : axis2_placement_2d;
  semi_axis_1 : positive_length_measure;
  semi_axis_2 : positive_length_measure;
END_ENTITY; (* declared in: geometric_model_schema *)
 
ENTITY energy_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    energy_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = joule;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY entity_assertion
SUBTYPE OF (fact_type);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY enum_reference_prefix
SUBTYPE OF (descriptive_representation_item);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY environment;
  syntactic_representation : generic_variable;
  semantics : variable_semantics;
END_ENTITY; (* declared in: iso13584_generic_expressions_schema *)
 
ENTITY event_occurrence;
  id : identifier;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY event_occurrence_assignment ABSTRACT SUPERTYPE;
  assigned_event_occurrence : event_occurrence;
  role : event_occurrence_role;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY event_occurrence_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_event : event_occurrence;
  related_event : event_occurrence;
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY event_occurrence_role;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY exclusive_product_concept_feature_category
SUBTYPE OF (product_concept_feature_category);
END_ENTITY; (* declared in: product_class_mim *)
 
ENTITY executed_action
SUBTYPE OF (action);
END_ENTITY; (* declared in: action_schema *)
 
ENTITY expanded_uncertainty
SUBTYPE OF (standard_uncertainty);
  coverage_factor : REAL;
END_ENTITY; (* declared in: qualified_measure_schema *)
 
ENTITY expression_conversion_based_unit
SUBTYPE OF (context_dependent_unit, variable_semantics);
INVERSE
  associated_variable_environment : environment FOR semantics;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY extension
SUBTYPE OF (derived_shape_aspect);
WHERE
  wr1 : SIZEOF(SELF\derived_shape_aspect.deriving_relationships) = 1;
END_ENTITY; (* declared in: shape_aspect_definition_schema *)
 
ENTITY extent
SUBTYPE OF (characterized_object);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY external_class_library
SUBTYPE OF (external_source);
END_ENTITY; (* declared in: external_class_mim *)
 
ENTITY external_identification_assignment ABSTRACT SUPERTYPE
SUBTYPE OF (identification_assignment);
  source : external_source;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY external_source;
  source_id : source_item;
DERIVE
  description : text := get_description_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: external_reference_schema *)
 
ENTITY externally_defined_class
SUBTYPE OF (class, externally_defined_item);
END_ENTITY; (* declared in: external_class_mim *)
 
ENTITY externally_defined_item;
  item_id : source_item;
  source : external_source;
END_ENTITY; (* declared in: external_reference_schema *)
 
ENTITY fact_type
SUBTYPE OF (property_definition);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY force_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    force_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = newton;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY forward_chaining_rule
SUBTYPE OF (rule_definition);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY forward_chaining_rule_premise
SUBTYPE OF (property_definition, property_definition_representation, 
representation);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY founded_item;
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY frequency_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    frequency_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = hertz;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY func
SUBTYPE OF (compound_representation_item);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY functional_specification
SUBTYPE OF (representation);
END_ENTITY; (* declared in: functional_specification_mim *)
 
ENTITY functional_specification_definition
SUBTYPE OF (functional_unit);
END_ENTITY; (* declared in: functional_specification_mim *)
 
ENTITY functional_terminal_group
SUBTYPE OF (group);
UNIQUE
  ur1 : SELF\group.name;
END_ENTITY; (* declared in: functional_usage_view_mim *)
 
ENTITY functional_unit
SUBTYPE OF (product_definition);
END_ENTITY; (* declared in: functional_usage_view_mim *)
 
ENTITY functional_unit_terminal_definition
SUBTYPE OF (shape_aspect);
WHERE
  wr1 : 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'FUNCTIONAL_UNIT' IN TYPEOF(SELF.of_shape.definition);
END_ENTITY; (* declared in: functional_usage_view_mim *)
 
ENTITY functionally_defined_transformation;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY general_material_property
SUBTYPE OF (general_property);
WHERE
  wr1 : SIZEOF(QUERY(gpa <* USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.GENERAL_PROPERTY_ASSOCIATION.BASE_DEFINITION'
    ) | NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MATERIAL_PROPERTY' IN
     TYPEOF(gpa.derived_definition)))) = 0;
END_ENTITY; (* declared in: generic_material_aspects_mim *)
 
ENTITY general_property;
  id : identifier;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: product_property_definition_schema *)
 
ENTITY general_property_association;
  name : label;
  description :  OPTIONAL text;
  base_definition : general_property;
  derived_definition : derived_property_select;
WHERE
  wr1 : SIZEOF(USEDIN(derived_definition, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.GENERAL_PROPERTY_ASSOCIATION.DERIVED_DEFINITION'
    )) = 1;
  wr2 : derived_definition.name = base_definition.name;
END_ENTITY; (* declared in: product_property_definition_schema *)
 
ENTITY general_property_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_property : general_property;
  related_property : general_property;
END_ENTITY; (* declared in: product_property_definition_schema *)
 
ENTITY generic_expression
ABSTRACT SUPERTYPE OF (ONEOF (simple_generic_expression, 
unary_generic_expression, binary_generic_expression, 
multiple_arity_generic_expression));
WHERE
  wr1 : is_acyclic(SELF);
END_ENTITY; (* declared in: iso13584_generic_expressions_schema *)
 
ENTITY generic_literal ABSTRACT SUPERTYPE
SUBTYPE OF (simple_generic_expression);
END_ENTITY; (* declared in: iso13584_generic_expressions_schema *)
 
ENTITY generic_variable ABSTRACT SUPERTYPE
SUBTYPE OF (simple_generic_expression);
INVERSE
  interpretation : environment FOR syntactic_representation;
END_ENTITY; (* declared in: iso13584_generic_expressions_schema *)
 
ENTITY geometric_alignment
SUBTYPE OF (derived_shape_aspect);
WHERE
  wr1 : SIZEOF(SELF\derived_shape_aspect.deriving_relationships) > 1;
END_ENTITY; (* declared in: shape_aspect_definition_schema *)
 
ENTITY geometric_curve_set
SUBTYPE OF (geometric_set);
WHERE
  wr1 : SIZEOF(QUERY(temp <* SELF\geometric_set.elements | 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.SURFACE' IN TYPEOF(
    temp))) = 0;
END_ENTITY; (* declared in: geometric_model_schema *)
 
ENTITY geometric_intersection
SUBTYPE OF (derived_shape_aspect);
WHERE
  wr1 : SIZEOF(SELF\derived_shape_aspect.deriving_relationships) > 1;
END_ENTITY; (* declared in: shape_aspect_definition_schema *)
 
ENTITY geometric_model_element_relationship
SUBTYPE OF (geometric_representation_item, representation_item_relationship);
UNIQUE
  ur1 : SELF\representation_item_relationship.relating_representation_item, 
    SELF\representation_item_relationship.related_representation_item;
WHERE
  wr1 : SELF\representation_item_relationship.relating_representation_item
     :<>: SELF\representation_item_relationship.related_representation_item;
END_ENTITY; (* declared in: extended_basic_geometry_mim *)
 
ENTITY geometric_representation_context
SUBTYPE OF (representation_context);
  coordinate_space_dimension : dimension_count;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY geometric_representation_item
SUPERTYPE OF (ONEOF (point, direction, vector, placement, 
cartesian_transformation_operator, curve, surface, solid_model, boolean_result
, primitive_2d, half_space_2d, geometric_set))
SUBTYPE OF (representation_item);
DERIVE
  dim : dimension_count := dimension_of(SELF);
WHERE
  wr1 : SIZEOF(QUERY(using_rep <* using_representations(SELF) | NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.GEOMETRIC_REPRESENTATION_CONTEXT'
     IN TYPEOF(using_rep.context_of_items)))) = 0;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY geometric_set
SUPERTYPE OF (geometric_curve_set)
SUBTYPE OF (geometric_representation_item);
  elements : SET [1:?] OF geometric_set_select;
END_ENTITY; (* declared in: geometric_model_schema *)
 
ENTITY geometrically_bounded_2d_wireframe_representation
SUBTYPE OF (shape_representation);
WHERE
  wr1 : SELF.context_of_items\geometric_representation_context.
    coordinate_space_dimension = 2;
  wr2 : SIZEOF(QUERY(item <* SELF.items | NOT (SIZEOF(TYPEOF(item) * [
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.GEOMETRIC_CURVE_SET'
    , 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.AXIS2_PLACEMENT_2D'
    , 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MAPPED_ITEM']) = 1)
    )) = 0;
  wr3 : SIZEOF(QUERY(item <* SELF.items | SIZEOF(TYPEOF(item) * [
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.GEOMETRIC_CURVE_SET'
    , 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MAPPED_ITEM']) = 1)
    ) >= 1;
  wr4 : SIZEOF(QUERY(mi <* QUERY(item <* SELF.items | 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MAPPED_ITEM' IN 
    TYPEOF(item)) | NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'GEOMETRICALLY_BOUNDED_2D_WIREFRAME_REPRESENTATION' IN TYPEOF(mi\
    mapped_item.mapping_source.mapped_representation)))) = 0;
  wr5 : SIZEOF(QUERY(gcs <* QUERY(item <* SELF.items | 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.GEOMETRIC_CURVE_SET' 
    IN TYPEOF(item)) | NOT (SIZEOF(QUERY(elem <* gcs\geometric_set.elements | 
    NOT (SIZEOF(TYPEOF(elem) * [
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.B_SPLINE_CURVE', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CIRCLE', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.COMPOSITE_CURVE', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ELLIPSE', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.OFFSET_CURVE_2D', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.POINT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.POLYLINE', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.TRIMMED_CURVE']) = 1)
    )) = 0))) = 0;
  wr6 : SIZEOF(QUERY(gcs <* QUERY(item <* SELF.items | 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.GEOMETRIC_CURVE_SET' 
    IN TYPEOF(item)) | NOT (SIZEOF(QUERY(crv <* QUERY(elem <* gcs\geometric_set
    .elements | 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CURVE' IN
     TYPEOF(elem)) | NOT valid_basis_curve_in_2d_wireframe(crv))) = 0))) = 0;
  wr7 : SIZEOF(QUERY(gcs <* QUERY(item <* SELF.items | 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.GEOMETRIC_CURVE_SET' 
    IN TYPEOF(item)) | NOT (SIZEOF(QUERY(pnt <* QUERY(elem <* gcs\geometric_set
    .elements | 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.POINT' IN
     TYPEOF(elem)) | NOT (SIZEOF(TYPEOF(pnt) * [
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CARTESIAN_POINT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.POINT_ON_CURVE']) = 1
    ))) = 0))) = 0;
  wr8 : SIZEOF(QUERY(gcs <* QUERY(item <* SELF.items | 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.GEOMETRIC_CURVE_SET' 
    IN TYPEOF(item)) | NOT (SIZEOF(QUERY(pl <* QUERY(elem <* gcs\geometric_set.
    elements | 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.POLYLINE' 
    IN TYPEOF(elem)) | NOT (SIZEOF(pl\polyline.points) > 2))) = 0))) = 0;
END_ENTITY; (* declared in: aic_geometrically_bounded_2d_wireframe *)
 
ENTITY global_assignment
SUBTYPE OF (representation_item_relationship);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY global_uncertainty_assigned_context
SUBTYPE OF (representation_context);
  uncertainty : SET [1:?] OF uncertainty_measure_with_unit;
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY global_unit_assigned_context
SUBTYPE OF (representation_context);
  units : SET [1:?] OF unit;
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY ground_fact
SUBTYPE OF (atomic_formula);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY group;
  name : label;
  description :  OPTIONAL text;
DERIVE
  id : identifier := get_id_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ID_ATTRIBUTE.IDENTIFIED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: group_schema *)
 
ENTITY group_assignment ABSTRACT SUPERTYPE;
  assigned_group : group;
DERIVE
  role : object_role := get_role(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ROLE_ASSOCIATION.ITEM_WITH_ROLE'
    )) <= 1;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY group_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_group : group;
  related_group : group;
END_ENTITY; (* declared in: group_schema *)
 
ENTITY group_shape_aspect
SUBTYPE OF (shape_aspect);
END_ENTITY; (* declared in: non_feature_shape_element_mim *)
 
ENTITY half_space_2d
SUBTYPE OF (geometric_representation_item);
  base_curve : curve;
  agreement_flag : BOOLEAN;
END_ENTITY; (* declared in: geometric_model_schema *)
 
ENTITY hyperbola
SUBTYPE OF (conic);
  semi_axis : positive_length_measure;
  semi_imag_axis : positive_length_measure;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY id_attribute;
  attribute_value : identifier;
  identified_item : id_attribute_select;
END_ENTITY; (* declared in: basic_attribute_schema *)
 
ENTITY identification_assignment ABSTRACT SUPERTYPE;
  assigned_id : identifier;
  role : identification_role;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY identification_role;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY illuminance_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    illuminance_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = lux;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY included_text_block
SUBTYPE OF (mapped_item);
WHERE
  wr1 : 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.STRUCTURED_TEXT_REPRESENTATION'
     IN TYPEOF(SELF\mapped_item.mapping_source.mapped_representation);
END_ENTITY; (* declared in: tagged_text_representation_mim *)
 
ENTITY inclusion_product_concept_feature
SUBTYPE OF (conditional_concept_feature);
WHERE
  wr1 : NOT ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'PACKAGE_PRODUCT_CONCEPT_FEATURE' IN TYPEOF(SELF));
  wr2 : SIZEOF(QUERY(cfr <* USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CONCEPT_FEATURE_RELATIONSHIP.RELATING_PRODUCT_CONCEPT_FEATURE'
    ) | 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION' IN TYPEOF(cfr))) + SIZEOF(
    QUERY(cfr <* USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CONCEPT_FEATURE_RELATIONSHIP.RELATED_PRODUCT_CONCEPT_FEATURE'
    ) | 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION' IN TYPEOF(cfr))) = 0;
  wr3 : SELF.condition.conditional_operator.name = 'implication';
END_ENTITY; (* declared in: product_class_mim *)
 
ENTITY inductance_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    inductance_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = henry;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY instanced_feature
SUBTYPE OF (shape_aspect, shape_feature_definition);
WHERE
  wr1 : 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION' 
    IN TYPEOF(SELF\shape_aspect.of_shape.definition);
  wr2 : SELF\shape_aspect.product_definitional;
END_ENTITY; (* declared in: shape_feature_mim *)
 
ENTITY interface_plane
SUBTYPE OF (shape_aspect);
END_ENTITY; (* declared in: non_feature_shape_element_mim *)
 
ENTITY item_defined_transformation;
  name : label;
  description :  OPTIONAL text;
  transform_item_1 : representation_item;
  transform_item_2 : representation_item;
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY item_identified_representation_usage;
  name : label;
  description :  OPTIONAL text;
  definition : represented_definition;
  used_representation : representation;
  identified_item : representation_item;
WHERE
  wr1 : SELF.used_representation IN using_representations(SELF.identified_item)
    ;
END_ENTITY; (* declared in: product_property_representation_schema *)
 
ENTITY keepout_design_object_category
SUBTYPE OF (characterized_object);
END_ENTITY; (* declared in: shape_parameters_mim *)
 
ENTITY known_source
SUBTYPE OF (external_source, pre_defined_item);
END_ENTITY; (* declared in: plib_class_reference_mim *)
 
ENTITY language
SUBTYPE OF (group);
WHERE
  wr1 : SELF\group.name <> '';
END_ENTITY; (* declared in: multi_linguism_mim *)
 
ENTITY length_measure_with_unit
SUBTYPE OF (measure_with_unit);
WHERE
  wr1 : 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.LENGTH_UNIT' IN 
    TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY length_unit
SUBTYPE OF (named_unit);
WHERE
  wr1 : (SELF\named_unit.dimensions.length_exponent = 1.0) AND (SELF\named_unit
    .dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.
    time_exponent = 0.0) AND (SELF\named_unit.dimensions.
    electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.
    thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.
    amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.
    luminous_intensity_exponent = 0.0);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY line
SUBTYPE OF (curve);
  pnt : cartesian_point;
  dir : vector;
WHERE
  wr1 : dir.dim = pnt.dim;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY linear_composite_array_shape_aspect
SUBTYPE OF (composite_array_shape_aspect);
END_ENTITY; (* declared in: part_feature_grouping_mim *)
 
ENTITY linear_composite_array_shape_aspect_link
SUBTYPE OF (shape_aspect, shape_aspect_relationship);
  SELF\shape_aspect_relationship.relating_shape_aspect : 
  linear_composite_array_shape_aspect;
  SELF\shape_aspect_relationship.related_shape_aspect : 
  linear_composite_array_shape_aspect;
WHERE
  wr1 : SELF\shape_aspect_relationship.related_shape_aspect :<>: SELF\
    shape_aspect_relationship.relating_shape_aspect;
END_ENTITY; (* declared in: part_feature_grouping_mim *)
 
ENTITY literal_conjunction
SUBTYPE OF (simple_clause);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY literal_disjunction
SUBTYPE OF (simple_clause);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY local_time;
  hour_component : hour_in_day;
  minute_component :  OPTIONAL minute_in_hour;
  second_component :  OPTIONAL second_in_minute;
  zone : coordinated_universal_time_offset;
WHERE
  wr1 : valid_time(SELF);
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY location_shape_representation
SUBTYPE OF (shape_representation);
WHERE
  wr1 : SIZEOF(SELF.items) = 1;
  wr2 : SIZEOF(QUERY(i <* SELF.items | 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 'POINT' IN TYPEOF
    (i))) = 1;
END_ENTITY; (* declared in: feature_and_connection_zone_mim *)
 
ENTITY lot_effectivity
SUBTYPE OF (effectivity);
  effectivity_lot_id : identifier;
  effectivity_lot_size : measure_with_unit;
END_ENTITY; (* declared in: effectivity_schema *)
 
ENTITY luminous_flux_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    luminous_flux_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = lumen;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY luminous_intensity_measure_with_unit
SUBTYPE OF (measure_with_unit);
WHERE
  wr1 : 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.LUMINOUS_INTENSITY_UNIT'
     IN TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY luminous_intensity_unit
SUBTYPE OF (named_unit);
WHERE
  wr1 : (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit
    .dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.
    time_exponent = 0.0) AND (SELF\named_unit.dimensions.
    electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.
    thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.
    amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.
    luminous_intensity_exponent = 1.0);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY magnetic_flux_density_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    magnetic_flux_density_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = tesla;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY magnetic_flux_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    magnetic_flux_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = weber;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY make_from_functional_unit_terminal_definition_relationship
SUBTYPE OF (shape_aspect, shape_aspect_relationship);
UNIQUE
  ur1 : SELF\shape_aspect_relationship.relating_shape_aspect, SELF\
    shape_aspect_relationship.related_shape_aspect;
WHERE
  wr1 : relating_shape_aspect.of_shape :<>: related_shape_aspect.of_shape;
  wr2 : SELF\shape_aspect.product_definitional = FALSE;
END_ENTITY; (* declared in: functional_usage_view_mim *)
 
ENTITY make_from_model_port_relationship
SUBTYPE OF (representation, representation_relationship);
  SELF\representation_relationship.rep_1 : analytical_model_port;
  SELF\representation_relationship.rep_2 : analytical_model_port;
UNIQUE
  ur1 : SELF\representation_relationship.rep_1, SELF\
    representation_relationship.rep_2;
WHERE
  wr1 : rep_1 :<>: rep_2;
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY make_from_part_feature_relationship
SUBTYPE OF (shape_aspect, shape_aspect_relationship);
UNIQUE
  ur1 : SELF\shape_aspect_relationship.relating_shape_aspect, SELF\
    shape_aspect_relationship.related_shape_aspect;
WHERE
  wr1 : SELF\shape_aspect.product_definitional = FALSE;
END_ENTITY; (* declared in: physical_unit_usage_view_mim *)
 
ENTITY make_from_usage_option
SUBTYPE OF (product_definition_usage);
  ranking : INTEGER;
  ranking_rationale : text;
  quantity : measure_with_unit;
WHERE
  wr1 : NOT ('NUMBER' IN TYPEOF(quantity.value_component)) OR (quantity.
    value_component > 0);
END_ENTITY; (* declared in: product_structure_schema *)
 
ENTITY mapped_item
SUBTYPE OF (representation_item);
  mapping_source : representation_map;
  mapping_target : representation_item;
WHERE
  wr1 : acyclic_mapped_representation(using_representations(SELF), [SELF]);
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY mass_measure_with_unit
SUBTYPE OF (measure_with_unit);
WHERE
  wr1 : 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MASS_UNIT' IN 
    TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY mass_unit
SUBTYPE OF (named_unit);
WHERE
  wr1 : (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit
    .dimensions.mass_exponent = 1.0) AND (SELF\named_unit.dimensions.
    time_exponent = 0.0) AND (SELF\named_unit.dimensions.
    electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.
    thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.
    amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.
    luminous_intensity_exponent = 0.0);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY material_designation;
  name : label;
  definitions : SET [1:?] OF characterized_definition;
END_ENTITY; (* declared in: material_property_definition_schema *)
 
ENTITY material_designation_characterization;
  name : label;
  description : text;
  designation : material_designation;
  property : characterized_material_property;
END_ENTITY; (* declared in: material_property_definition_schema *)
 
ENTITY material_designation_with_conductivity_classification
SUBTYPE OF (material_designation);
END_ENTITY; (* declared in: conductivity_material_aspects_mim *)
 
ENTITY material_electrical_conductivity_category
SUBTYPE OF (group);
END_ENTITY; (* declared in: requirement_decomposition_mim *)
 
ENTITY material_property
SUBTYPE OF (property_definition);
UNIQUE
  ur1 : SELF\property_definition.name, SELF\property_definition.definition;
WHERE
  wr1 : (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CHARACTERIZED_OBJECT'
     IN TYPEOF(SELF\property_definition.definition)) OR (SIZEOF(bag_to_set(
    USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'
    )) - QUERY(temp <* bag_to_set(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'
    )) | 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'MATERIAL_PROPERTY_REPRESENTATION' IN TYPEOF(temp))) = 0);
END_ENTITY; (* declared in: material_property_definition_schema *)
 
ENTITY material_property_representation
SUBTYPE OF (property_definition_representation);
  dependent_environment : data_environment;
END_ENTITY; (* declared in: material_property_representation_schema *)
 
ENTITY measure_qualification;
  name : label;
  description : text;
  qualified_measure : measure_with_unit;
  qualifiers : SET [1:?] OF value_qualifier;
WHERE
  wr1 : SIZEOF(QUERY(temp <* qualifiers | 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRECISION_QUALIFIER' 
    IN TYPEOF(temp))) < 2;
END_ENTITY; (* declared in: qualified_measure_schema *)
 
ENTITY measure_representation_item
SUBTYPE OF (representation_item, measure_with_unit);
END_ENTITY; (* declared in: qualified_measure_schema *)
 
ENTITY measure_with_unit
SUPERTYPE OF (ONEOF (length_measure_with_unit, mass_measure_with_unit, 
time_measure_with_unit, electric_current_measure_with_unit, 
thermodynamic_temperature_measure_with_unit, 
celsius_temperature_measure_with_unit, amount_of_substance_measure_with_unit, 
luminous_intensity_measure_with_unit, plane_angle_measure_with_unit, 
solid_angle_measure_with_unit, area_measure_with_unit, volume_measure_with_unit
, ratio_measure_with_unit));
  value_component : measure_value;
  unit_component : unit;
WHERE
  wr1 : valid_units(SELF);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY model_parameter
SUPERTYPE OF (ONEOF (analytical_model_parameter, category_model_parameter))
SUBTYPE OF (descriptive_representation_item, group_assignment, general_property
);
  items :  OPTIONAL SET [1:1] OF model_parameter_assigned_item;
END_ENTITY; (* declared in: model_parameter_mim *)
 
ENTITY multi_language_attribute_assignment
SUBTYPE OF (attribute_value_assignment);
  items : SET [1:?] OF multi_language_attribute_item;
DERIVE
  translation_language : language := language_indication[1]\
  attribute_classification_assignment.assigned_class;
INVERSE
  language_indication : SET [1:1] OF attribute_language_assignment FOR items;
WHERE
  wr1 : SELF\attribute_value_assignment.role.name = 'alternate language';
  wr2 : SIZEOF(QUERY(ala <* language_indication | (ala\
    attribute_classification_assignment.attribute_name = 'attribute_value') AND
     (ala\attribute_classification_assignment.role.name = 'translated'))) = 1;
  wr3 : SELF\attribute_value_assignment.attribute_name <> '';
  wr4 : SIZEOF(QUERY(ci <* items | SIZEOF(QUERY(ata <* USEDIN(ci, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.ITEMS'
    ) | (ata\attribute_value_assignment.attribute_name = SELF\
    attribute_value_assignment.attribute_name) AND (ata.translation_language
     :=: translation_language))) > 1)) = 0;
  wr5 : SIZEOF(QUERY(ci <* items | SIZEOF(QUERY(ata <* USEDIN(ci, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS'
    ) | (ata\attribute_classification_assignment.role.name = 'primary') AND (
    ata\attribute_classification_assignment.attribute_name = SELF\
    attribute_value_assignment.attribute_name) AND (ata\
    attribute_classification_assignment.assigned_class :=: translation_language
    ))) > 0)) = 0;
END_ENTITY; (* declared in: multi_linguism_mim *)
 
ENTITY multiple_arity_generic_expression ABSTRACT SUPERTYPE
SUBTYPE OF (generic_expression);
  operands :  LIST [2:?] OF generic_expression;
END_ENTITY; (* declared in: iso13584_generic_expressions_schema *)
 
ENTITY name_assignment ABSTRACT SUPERTYPE;
  assigned_name : label;
DERIVE
  role : object_role := get_role(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ROLE_ASSOCIATION.ITEM_WITH_ROLE'
    )) <= 1;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY name_attribute;
  attribute_value : label;
  named_item : name_attribute_select;
END_ENTITY; (* declared in: basic_attribute_schema *)
 
ENTITY named_unit
SUPERTYPE OF (ONEOF (si_unit, conversion_based_unit, context_dependent_unit)
 ANDOR ONEOF (length_unit, mass_unit, time_unit, electric_current_unit, 
thermodynamic_temperature_unit, amount_of_substance_unit, 
luminous_intensity_unit, plane_angle_unit, solid_angle_unit, area_unit, 
volume_unit, ratio_unit));
  dimensions : dimensional_exponents;
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY network_node_definition
SUBTYPE OF (product_definition);
END_ENTITY; (* declared in: network_functional_design_view_mim *)
 
ENTITY next_assembly_usage_occurrence
SUBTYPE OF (assembly_component_usage);
END_ENTITY; (* declared in: product_structure_schema *)
 
ENTITY object_role;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: basic_attribute_schema *)
 
ENTITY offset_curve_2d
SUBTYPE OF (curve);
  basis_curve : curve;
  distance : length_measure;
  self_intersect : LOGICAL;
WHERE
  wr1 : basis_curve.dim = 2;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY operational_requirement_occurrence_relationship
SUBTYPE OF (property_definition, product_definition_relationship);
END_ENTITY; (* declared in: requirement_decomposition_mim *)
 
ENTITY organization;
  id :  OPTIONAL identifier;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: person_organization_schema *)
 
ENTITY organization_assignment ABSTRACT SUPERTYPE;
  assigned_organization : organization;
  role : organization_role;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY organization_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_organization : organization;
  related_organization : organization;
END_ENTITY; (* declared in: person_organization_schema *)
 
ENTITY organization_role;
  name : label;
DERIVE
  description : text := get_description_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: person_organization_schema *)
 
ENTITY organizational_address
SUBTYPE OF (address);
  organizations : SET [1:?] OF organization;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: person_organization_schema *)
 
ENTITY organizational_project;
  name : label;
  description :  OPTIONAL text;
  responsible_organizations : SET [1:?] OF organization;
DERIVE
  id : identifier := get_id_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ID_ATTRIBUTE.IDENTIFIED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: person_organization_schema *)
 
ENTITY organizational_project_assignment ABSTRACT SUPERTYPE;
  assigned_organizational_project : organizational_project;
  role : organizational_project_role;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY organizational_project_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_organizational_project : organizational_project;
  related_organizational_project : organizational_project;
END_ENTITY; (* declared in: person_organization_schema *)
 
ENTITY organizational_project_role;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY oriented_surface
SUBTYPE OF (surface);
  orientation : BOOLEAN;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY package_product_concept_feature
SUBTYPE OF (product_concept_feature);
WHERE
  wr1 : NOT ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'CONDITIONAL_CONCEPT_FEATURE' IN TYPEOF(SELF));
  wr2 : SIZEOF(QUERY(cfr <* USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CONCEPT_FEATURE_RELATIONSHIP.RELATING_PRODUCT_CONCEPT_FEATURE'
    ) | ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION' IN TYPEOF(cfr)) AND (SIZEOF(
    QUERY(ipcf <* USEDIN(cfr, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CONDITIONAL_CONCEPT_FEATURE.CONDITION'
    ) | 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'INCLUSION_PRODUCT_CONCEPT_FEATURE' IN TYPEOF(ipcf))) = 1))) > 0;
END_ENTITY; (* declared in: product_class_mim *)
 
ENTITY parabola
SUBTYPE OF (conic);
  focal_dist : length_measure;
WHERE
  wr1 : focal_dist <> 0.0;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY parallel_offset
SUBTYPE OF (derived_shape_aspect);
  offset : measure_with_unit;
WHERE
  wr1 : SIZEOF(SELF\derived_shape_aspect.deriving_relationships) = 1;
END_ENTITY; (* declared in: shape_aspect_definition_schema *)
 
ENTITY parameter_assignment
SUBTYPE OF (parameter_assignment_representation, 
property_definition_representation);
END_ENTITY; (* declared in: model_parameter_mim *)
 
ENTITY parameter_assignment_override
SUBTYPE OF (representation, representation_relationship);
  SELF\representation_relationship.rep_1 : parameter_assignment_representation;
  SELF\representation_relationship.rep_2 : parameter_assignment_representation;
UNIQUE
  ur1 : SELF\representation_relationship.rep_1, SELF\
    representation_relationship.rep_2;
WHERE
  wr1 : SELF\representation_relationship.rep_1 <> SELF\
    representation_relationship.rep_2;
END_ENTITY; (* declared in: model_parameter_mim *)
 
ENTITY parameter_assignment_representation
SUBTYPE OF (representation);
END_ENTITY; (* declared in: model_parameter_mim *)
 
ENTITY parametric_representation_context
SUBTYPE OF (representation_context);
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY part_feature_template_definition
SUBTYPE OF (shape_feature_definition, group);
WHERE
  wr1 : SELF\group.name = SELF\characterized_object.name;
  wr2 : SELF\group.description = SELF\characterized_object.description;
END_ENTITY; (* declared in: physical_unit_usage_view_mim *)
 
ENTITY partial_document_with_structured_text_representation_assignment
SUBTYPE OF (applied_document_usage_constraint_assignment, characterized_object)
  ;
END_ENTITY; (* declared in: specification_document_mim *)
 
ENTITY perpendicular_to
SUBTYPE OF (derived_shape_aspect);
WHERE
  wr1 : SIZEOF(SELF\derived_shape_aspect.deriving_relationships) = 1;
END_ENTITY; (* declared in: shape_aspect_definition_schema *)
 
ENTITY person;
  id : identifier;
  last_name :  OPTIONAL label;
  first_name :  OPTIONAL label;
  middle_names :  OPTIONAL  LIST [1:?] OF label;
  prefix_titles :  OPTIONAL  LIST [1:?] OF label;
  suffix_titles :  OPTIONAL  LIST [1:?] OF label;
WHERE
  wr1 : EXISTS(last_name) OR EXISTS(first_name);
END_ENTITY; (* declared in: person_organization_schema *)
 
ENTITY person_and_organization;
  the_person : person;
  the_organization : organization;
DERIVE
  name : label := get_name_value(SELF);
  description : text := get_description_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.NAME_ATTRIBUTE.NAMED_ITEM'
    )) <= 1;
  wr2 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: person_organization_schema *)
 
ENTITY person_and_organization_address
SUBTYPE OF (organizational_address, personal_address);
  SELF\organizational_address.organizations : SET [1:1] OF organization;
  SELF\personal_address.people : SET [1:1] OF person;
WHERE
  wr1 : SIZEOF(QUERY(pao <* USEDIN(SELF\personal_address.people[1], 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PERSON_AND_ORGANIZATION.THE_PERSON'
    ) | pao.the_organization :=: SELF\organizational_address.organizations[1]))
     = 1;
END_ENTITY; (* declared in: person_organization_mim *)
 
ENTITY person_and_organization_assignment ABSTRACT SUPERTYPE;
  assigned_person_and_organization : person_and_organization;
  role : person_and_organization_role;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY person_and_organization_role;
  name : label;
DERIVE
  description : text := get_description_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: person_organization_schema *)
 
ENTITY personal_address
SUBTYPE OF (address);
  people : SET [1:?] OF person;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: person_organization_schema *)
 
ENTITY physical_unit
SUBTYPE OF (product_definition, product_definition_shape);
END_ENTITY; (* declared in: physical_unit_usage_view_mim *)
 
ENTITY placed_feature
SUBTYPE OF (shape_aspect);
END_ENTITY; (* declared in: shape_feature_mim *)
 
ENTITY placement
SUPERTYPE OF (ONEOF (axis2_placement_2d, axis2_placement_3d))
SUBTYPE OF (geometric_representation_item);
  location : cartesian_point;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY plane
SUBTYPE OF (elementary_surface);
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY plane_angle_measure_with_unit
SUBTYPE OF (measure_with_unit);
WHERE
  wr1 : 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PLANE_ANGLE_UNIT'
     IN TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY plane_angle_unit
SUBTYPE OF (named_unit);
WHERE
  wr1 : (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit
    .dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.
    time_exponent = 0.0) AND (SELF\named_unit.dimensions.
    electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.
    thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.
    amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.
    luminous_intensity_exponent = 0.0);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY point
SUPERTYPE OF (ONEOF (cartesian_point, point_on_curve, point_on_surface, 
degenerate_pcurve))
SUBTYPE OF (geometric_representation_item);
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY point_on_curve
SUBTYPE OF (point);
  basis_curve : curve;
  point_parameter : parameter_value;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY point_on_surface
SUBTYPE OF (point);
  basis_surface : surface;
  point_parameter_u : parameter_value;
  point_parameter_v : parameter_value;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY polar_complex_number_literal
SUBTYPE OF (generic_literal);
  radius : REAL;
  angle : REAL;
WHERE
  wr1 : radius >= 0;
  wr2 : {0 <= angle < 2 * PI};
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY polygonal_area
SUBTYPE OF (primitive_2d);
  bounds :  LIST [3:?] OF UNIQUE cartesian_point;
END_ENTITY; (* declared in: geometric_model_schema *)
 
ENTITY polyline
SUBTYPE OF (bounded_curve);
  points :  LIST [2:?] OF cartesian_point;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY port_variable
SUPERTYPE OF (ONEOF (across_port_variable, through_port_variable, 
transform_port_variable))
SUBTYPE OF (representation, representation_item);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY power_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    power_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = watt;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY pre_defined_item;
  name : label;
END_ENTITY; (* declared in: external_reference_schema *)
 
ENTITY precision_qualifier;
  precision_value : INTEGER;
END_ENTITY; (* declared in: qualified_measure_schema *)
 
ENTITY predefined_requirement_view_definition
SUBTYPE OF (product_definition);
END_ENTITY; (* declared in: requirement_decomposition_mim *)
 
ENTITY pressure_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    pressure_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = pascal;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY primitive_2d
SUPERTYPE OF (ONEOF (circular_area, elliptic_area, rectangular_area, 
polygonal_area))
SUBTYPE OF (geometric_representation_item);
WHERE
  wr1 : SELF\geometric_representation_item.dim = 2;
END_ENTITY; (* declared in: geometric_model_schema *)
 
ENTITY primitive_2d_with_inner_boundary
SUBTYPE OF (primitive_2d, compound_representation_item);
  SELF\compound_representation_item.item_element : compound_inner_area_boundary
  ;
DERIVE
  inner_boundary : compound_inner_area_boundary := SELF\
  compound_representation_item.item_element;
WHERE
  wr1 : SIZEOF([
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CIRCULAR_AREA', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ELLIPTIC_AREA', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.RECTANGULAR_AREA', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.POLYGONAL_AREA', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.COMPLEX_AREA'] * 
    TYPEOF(SELF)) > 0;
  wr2 : SIZEOF(QUERY(inner <* item_element | 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRIMITIVE_2D_WITH_INNER_BOUNDARY'
     IN TYPEOF(inner))) = 0;
END_ENTITY; (* declared in: constructive_solid_geometry_2d_mim *)
 
ENTITY product;
  id : identifier;
  name : label;
  description :  OPTIONAL text;
  frame_of_reference : SET [1:?] OF product_context;
END_ENTITY; (* declared in: product_definition_schema *)
 
ENTITY product_category;
  name : label;
  description :  OPTIONAL text;
DERIVE
  id : identifier := get_id_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ID_ATTRIBUTE.IDENTIFIED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: product_definition_schema *)
 
ENTITY product_category_relationship;
  name : label;
  description :  OPTIONAL text;
  category : product_category;
  sub_category : product_category;
WHERE
  wr1 : acyclic_product_category_relationship(SELF, [SELF.sub_category]);
END_ENTITY; (* declared in: product_definition_schema *)
 
ENTITY product_class
SUBTYPE OF (product_concept, characterized_object);
END_ENTITY; (* declared in: product_class_mim *)
 
ENTITY product_concept;
  id : identifier;
  name : label;
  description :  OPTIONAL text;
  market_context : product_concept_context;
UNIQUE
  ur1 : id;
END_ENTITY; (* declared in: product_concept_schema *)
 
ENTITY product_concept_context
SUBTYPE OF (application_context_element);
  market_segment_type : label;
END_ENTITY; (* declared in: application_context_schema *)
 
ENTITY product_concept_feature;
  id : identifier;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: product_concept_schema *)
 
ENTITY product_concept_feature_association;
  name : label;
  description :  OPTIONAL text;
  concept : product_concept;
  feature : product_concept_feature;
END_ENTITY; (* declared in: product_concept_schema *)
 
ENTITY product_concept_feature_category
SUBTYPE OF (group);
WHERE
  wr1 : SIZEOF(QUERY(aga <* USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.GROUP_ASSIGNMENT.ASSIGNED_GROUP'
    ) | ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'APPLIED_GROUP_ASSIGNMENT' IN TYPEOF(aga)) AND ((aga.role.name <> 
    'specification category member') OR (SIZEOF(QUERY(i <* aga.items | (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'PRODUCT_CONCEPT_FEATURE' IN TYPEOF(i)) AND NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'CONDITIONAL_CONCEPT_FEATURE' IN TYPEOF(i)))) <> SIZEOF(aga.items))))) = 0;
END_ENTITY; (* declared in: product_class_mim *)
 
ENTITY product_concept_feature_category_usage
SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : product_concept_feature_category;
  items : SET [1:?] OF category_usage_item;
WHERE
  wr1 : SELF.role.name IN ['mandatory category usage', 
    'optional category usage'];
END_ENTITY; (* declared in: product_class_mim *)
 
ENTITY product_concept_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_product_concept : product_concept;
  related_product_concept : product_concept;
END_ENTITY; (* declared in: product_concept_schema *)
 
ENTITY product_context
SUBTYPE OF (application_context_element);
  discipline_type : label;
END_ENTITY; (* declared in: application_context_schema *)
 
ENTITY product_definition;
  id : identifier;
  description :  OPTIONAL text;
  formation : product_definition_formation;
  frame_of_reference : product_definition_context;
DERIVE
  name : label := get_name_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.NAME_ATTRIBUTE.NAMED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: product_definition_schema *)
 
ENTITY product_definition_context
SUBTYPE OF (application_context_element);
  life_cycle_stage : label;
END_ENTITY; (* declared in: application_context_schema *)
 
ENTITY product_definition_context_association;
  definition : product_definition;
  frame_of_reference : product_definition_context;
  role : product_definition_context_role;
END_ENTITY; (* declared in: product_definition_schema *)
 
ENTITY product_definition_context_role;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: product_definition_schema *)
 
ENTITY product_definition_effectivity
SUBTYPE OF (effectivity);
  usage : product_definition_relationship;
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.EFFECTIVITY_ASSIGNMENT.ASSIGNED_EFFECTIVITY'
    )) = 0;
END_ENTITY; (* declared in: product_definition_schema *)
 
ENTITY product_definition_formation;
  id : identifier;
  description :  OPTIONAL text;
  of_product : product;
UNIQUE
  ur1 : id, of_product;
END_ENTITY; (* declared in: product_definition_schema *)
 
ENTITY product_definition_formation_relationship;
  id : identifier;
  name : label;
  description :  OPTIONAL text;
  relating_product_definition_formation : product_definition_formation;
  related_product_definition_formation : product_definition_formation;
END_ENTITY; (* declared in: product_definition_schema *)
 
ENTITY product_definition_formation_with_specified_source
SUBTYPE OF (product_definition_formation);
  make_or_buy : source;
END_ENTITY; (* declared in: product_definition_schema *)
 
ENTITY product_definition_occurrence_relationship;
  name : label;
  description :  OPTIONAL text;
  occurrence : product_definition;
  occurrence_usage : assembly_component_usage;
WHERE
  wr1 : occurrence_usage.relating_product_definition :<>: occurrence;
  wr2 : occurrence_usage.related_product_definition :<>: occurrence;
  wr3 : occurrence.formation :=: occurrence_usage.related_product_definition.
    formation;
END_ENTITY; (* declared in: product_structure_schema *)
 
ENTITY product_definition_relationship;
  id : identifier;
  name : label;
  description :  OPTIONAL text;
  relating_product_definition : product_definition;
  related_product_definition : product_definition;
END_ENTITY; (* declared in: product_definition_schema *)
 
ENTITY product_definition_shape
SUBTYPE OF (property_definition);
UNIQUE
  ur1 : SELF\property_definition.definition;
WHERE
  wr1 : SIZEOF([
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CHARACTERIZED_PRODUCT_DEFINITION'
    , 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CHARACTERIZED_OBJECT'
    ] * TYPEOF(SELF\property_definition.definition)) > 0;
END_ENTITY; (* declared in: product_property_definition_schema *)
 
ENTITY product_definition_usage
SUPERTYPE OF (ONEOF (make_from_usage_option, assembly_component_usage))
SUBTYPE OF (product_definition_relationship);
UNIQUE
  ur1 : SELF\product_definition_relationship.id, SELF\
    product_definition_relationship.relating_product_definition, SELF\
    product_definition_relationship.related_product_definition;
WHERE
  wr1 : acyclic_product_definition_relationship(SELF, [SELF\
    product_definition_relationship.related_product_definition], 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION_USAGE'
    );
END_ENTITY; (* declared in: product_structure_schema *)
 
ENTITY product_definition_with_associated_documents
SUBTYPE OF (product_definition);
  documentation_ids : SET [1:?] OF document;
END_ENTITY; (* declared in: product_definition_schema *)
 
ENTITY product_identification
SUBTYPE OF (configuration_item, characterized_object);
  SELF\configuration_item.item_concept : product_class;
WHERE
  wr1 : SIZEOF(QUERY(cd <* USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CONFIGURATION_DESIGN.CONFIGURATION'
    ) | ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'PRODUCT_DEFINITION_FORMATION' IN TYPEOF(cd.design)) AND (SIZEOF(QUERY(prpc
     <* USEDIN(cd.design\product_definition_formation.of_product, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'
    ) | prpc.name IN ['part', 'raw material', 'tool'])) > 0))) <= 1;
  wr2 : NOT ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'CONFIGURABLE_ITEM' IN TYPEOF(SELF)) XOR (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'PRODUCT_SPECIFICATION' IN TYPEOF(SELF));
END_ENTITY; (* declared in: specified_product_mim *)
 
ENTITY product_related_product_category
SUBTYPE OF (product_category);
  products : SET [1:?] OF product;
END_ENTITY; (* declared in: product_definition_schema *)
 
ENTITY product_specific_parameter_value_assignment
SUBTYPE OF (characterized_object, product_related_product_category);
END_ENTITY; (* declared in: model_parameter_mim *)
 
ENTITY product_specification
SUBTYPE OF (product_identification, configurable_item);
END_ENTITY; (* declared in: specified_product_mim *)
 
ENTITY promissory_usage_occurrence
SUBTYPE OF (assembly_component_usage);
END_ENTITY; (* declared in: product_structure_schema *)
 
ENTITY property_definition;
  name : label;
  description :  OPTIONAL text;
  definition : characterized_definition;
DERIVE
  id : identifier := get_id_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ID_ATTRIBUTE.IDENTIFIED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: product_property_definition_schema *)
 
ENTITY property_definition_relationship;
  name : label;
  description : text;
  relating_property_definition : property_definition;
  related_property_definition : property_definition;
END_ENTITY; (* declared in: material_property_definition_schema *)
 
ENTITY property_definition_representation;
  definition : represented_definition;
  used_representation : representation;
DERIVE
  description : text := get_description_value(SELF);
  name : label := get_name_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
  wr2 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.NAME_ATTRIBUTE.NAMED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: product_property_representation_schema *)
 
ENTITY qualified_representation_item
SUBTYPE OF (representation_item);
  qualifiers : SET [1:?] OF value_qualifier;
WHERE
  wr1 : SIZEOF(QUERY(temp <* qualifiers | 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRECISION_QUALIFIER' 
    IN TYPEOF(temp))) < 2;
END_ENTITY; (* declared in: qualified_measure_schema *)
 
ENTITY qualitative_uncertainty
SUBTYPE OF (uncertainty_qualifier);
  uncertainty_value : text;
END_ENTITY; (* declared in: qualified_measure_schema *)
 
ENTITY quantified_assembly_component_usage
SUBTYPE OF (assembly_component_usage);
  quantity : measure_with_unit;
WHERE
  wr1 : NOT ('NUMBER' IN TYPEOF(quantity.value_component)) OR (quantity.
    value_component > 0);
END_ENTITY; (* declared in: product_structure_schema *)
 
ENTITY quasi_uniform_curve
SUBTYPE OF (b_spline_curve);
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY range_characteristic
SUBTYPE OF (representation, descriptive_representation_item);
END_ENTITY; (* declared in: characteristic_mim *)
 
ENTITY ratio_measure_with_unit
SUBTYPE OF (measure_with_unit);
WHERE
  wr1 : 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.RATIO_UNIT' IN 
    TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY ratio_unit
SUBTYPE OF (named_unit);
WHERE
  wr1 : (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit
    .dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.
    time_exponent = 0.0) AND (SELF\named_unit.dimensions.
    electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.
    thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.
    amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.
    luminous_intensity_exponent = 0.0);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY rational_b_spline_curve
SUBTYPE OF (b_spline_curve);
  weights_data :  LIST [2:?] OF REAL;
DERIVE
  weights :  ARRAY [0 : upper_index_on_control_points] OF REAL := list_to_array
  (weights_data, 0, upper_index_on_control_points);
WHERE
  wr1 : SIZEOF(weights_data) = SIZEOF(SELF\b_spline_curve.control_points_list);
  wr2 : curve_weights_positive(SELF);
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY rectangular_area
SUBTYPE OF (primitive_2d);
  position : axis2_placement_2d;
  x : positive_length_measure;
  y : positive_length_measure;
END_ENTITY; (* declared in: geometric_model_schema *)
 
ENTITY rectangular_composite_array_shape_aspect
SUBTYPE OF (composite_array_shape_aspect);
END_ENTITY; (* declared in: part_feature_grouping_mim *)
 
ENTITY reference_graphic_registration_mark
SUBTYPE OF (shape_aspect);
WHERE
  wr1 : SELF\shape_aspect.product_definitional = FALSE;
END_ENTITY; (* declared in: non_feature_shape_element_mim *)
 
ENTITY relative_event_occurrence
SUBTYPE OF (event_occurrence);
  base_event : event_occurrence;
  offset : time_measure_with_unit;
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY representation;
  name : label;
  items : SET [1:?] OF representation_item;
  context_of_items : representation_context;
DERIVE
  id : identifier := get_id_value(SELF);
  description : text := get_description_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ID_ATTRIBUTE.IDENTIFIED_ITEM'
    )) <= 1;
  wr2 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY representation_context;
  context_identifier : identifier;
  context_type : text;
INVERSE
  representations_in_context : SET [1:?] OF representation FOR context_of_items
  ;
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY representation_item;
  name : label;
WHERE
  wr1 : SIZEOF(using_representations(SELF)) > 0;
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY representation_item_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_representation_item : representation_item;
  related_representation_item : representation_item;
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY representation_map;
  mapping_origin : representation_item;
  mapped_representation : representation;
INVERSE
  map_usage : SET [1:?] OF mapped_item FOR mapping_source;
WHERE
  wr1 : item_in_context(SELF.mapping_origin, SELF.mapped_representation.
    context_of_items);
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY representation_relationship;
  name : label;
  description :  OPTIONAL text;
  rep_1 : representation;
  rep_2 : representation;
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY representation_relationship_with_transformation
SUBTYPE OF (representation_relationship);
  transformation_operator : transformation;
WHERE
  wr1 : SELF\representation_relationship.rep_1.context_of_items :<>: SELF\
    representation_relationship.rep_2.context_of_items;
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY requirement_assigned_object
SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : requirement_assignment;
  items : SET [1:1] OF requirement_assigned_item;
END_ENTITY; (* declared in: requirement_assignment_mim *)
 
ENTITY requirement_assignment
SUBTYPE OF (characterized_object, group);
END_ENTITY; (* declared in: requirement_assignment_mim *)
 
ENTITY requirement_definition
SUBTYPE OF (product_definition);
END_ENTITY; (* declared in: requirement_decomposition_mim *)
 
ENTITY requirement_source
SUBTYPE OF (group);
END_ENTITY; (* declared in: requirement_assignment_mim *)
 
ENTITY requirement_view_definition_relationship
SUBTYPE OF (product_definition_relationship);
END_ENTITY; (* declared in: requirement_decomposition_mim *)
 
ENTITY resistance_measure_with_unit
SUBTYPE OF (measure_with_unit);
  SELF\measure_with_unit.unit_component : si_unit;
  SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\measure_with_unit||SELF\
    resistance_measure_with_unit)) = 0;
  wr2 : SELF\measure_with_unit.unit_component\si_unit.name = ohm;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY role_association;
  role : object_role;
  item_with_role : role_select;
END_ENTITY; (* declared in: basic_attribute_schema *)
 
ENTITY row_representation_item
SUBTYPE OF (compound_representation_item);
  SELF\compound_representation_item.item_element : list_representation_item;
END_ENTITY; (* declared in: characteristic_mim *)
 
ENTITY row_value
SUBTYPE OF (compound_representation_item);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY row_variable
SUBTYPE OF (abstract_variable);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY rule_action
SUBTYPE OF (action);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY rule_condition
SUBTYPE OF (atomic_formula);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY rule_definition
SUBTYPE OF (rule_software_definition);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY rule_set
SUBTYPE OF (rule_software_definition);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY rule_set_group
SUBTYPE OF (rule_software_definition);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY rule_software_definition
SUBTYPE OF (product_definition);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY rule_superseded_assignment
SUBTYPE OF (action_assignment);
  items : SET [1:?] OF rule_superseded_item;
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY rule_supersedence
SUBTYPE OF (rule_action);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY scalar_terminal_definition_link
SUBTYPE OF (shape_aspect, shape_aspect_relationship);
  SELF\shape_aspect_relationship.relating_shape_aspect : 
  functional_unit_terminal_definition;
UNIQUE
  ur1 : related_shape_aspect, relating_shape_aspect;
WHERE
  wr1 : SELF\shape_aspect_relationship.related_shape_aspect :<>: SELF\
    shape_aspect_relationship.relating_shape_aspect;
END_ENTITY; (* declared in: functional_usage_view_mim *)
 
ENTITY scalar_variable
SUBTYPE OF (abstract_variable);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY scattering_parameter
SUBTYPE OF (polar_complex_number_literal);
WHERE
  wr1 : SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\polar_complex_number_literal||SELF\
    scattering_parameter)) = 0;
END_ENTITY; (* declared in: value_with_unit_extension_mim *)
 
ENTITY schema_based_model_parameter
SUBTYPE OF (model_parameter);
END_ENTITY; (* declared in: model_parameter_mim *)
 
ENTITY seating_plane
SUBTYPE OF (shape_aspect);
END_ENTITY; (* declared in: non_feature_shape_element_mim *)
 
ENTITY security_classification;
  name : label;
  purpose : text;
  security_level : security_classification_level;
END_ENTITY; (* declared in: security_classification_schema *)
 
ENTITY security_classification_assignment ABSTRACT SUPERTYPE;
  assigned_security_classification : security_classification;
DERIVE
  role : object_role := get_role(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ROLE_ASSOCIATION.ITEM_WITH_ROLE'
    )) <= 1;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY security_classification_level;
  name : label;
END_ENTITY; (* declared in: security_classification_schema *)
 
ENTITY serial_numbered_effectivity
SUBTYPE OF (effectivity);
  effectivity_start_id : identifier;
  effectivity_end_id :  OPTIONAL identifier;
END_ENTITY; (* declared in: effectivity_schema *)
 
ENTITY shape_aspect;
  name : label;
  description :  OPTIONAL text;
  of_shape : product_definition_shape;
  product_definitional : LOGICAL;
DERIVE
  id : identifier := get_id_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ID_ATTRIBUTE.IDENTIFIED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: product_property_definition_schema *)
 
ENTITY shape_aspect_deriving_relationship
SUBTYPE OF (shape_aspect_relationship);
WHERE
  wr1 : 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DERIVED_SHAPE_ASPECT'
     IN TYPEOF(SELF\shape_aspect_relationship.relating_shape_aspect);
END_ENTITY; (* declared in: shape_aspect_definition_schema *)
 
ENTITY shape_aspect_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_shape_aspect : shape_aspect;
  related_shape_aspect : shape_aspect;
DERIVE
  id : identifier := get_id_value(SELF);
WHERE
  wr1 : SIZEOF(USEDIN(SELF, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ID_ATTRIBUTE.IDENTIFIED_ITEM'
    )) <= 1;
END_ENTITY; (* declared in: product_property_definition_schema *)
 
ENTITY shape_definition_representation
SUBTYPE OF (property_definition_representation);
WHERE
  wr1 : (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION_SHAPE'
     IN TYPEOF(SELF.definition)) OR (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.SHAPE_DEFINITION' IN 
    TYPEOF(SELF.definition.definition));
  wr2 : 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.SHAPE_REPRESENTATION'
     IN TYPEOF(SELF.used_representation);
END_ENTITY; (* declared in: product_property_representation_schema *)
 
ENTITY shape_feature_definition
SUBTYPE OF (characterized_object);
END_ENTITY; (* declared in: shape_feature_mim *)
 
ENTITY shape_representation
SUBTYPE OF (representation);
END_ENTITY; (* declared in: product_property_representation_schema *)
 
ENTITY shape_representation_relationship
SUBTYPE OF (representation_relationship);
WHERE
  wr1 : 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.SHAPE_REPRESENTATION'
     IN TYPEOF(SELF\representation_relationship.rep_1) + TYPEOF(SELF\
    representation_relationship.rep_2);
END_ENTITY; (* declared in: product_property_representation_schema *)
 
ENTITY si_unit
SUBTYPE OF (named_unit);
  prefix :  OPTIONAL si_prefix;
  name : si_unit_name;
DERIVE
  SELF\named_unit.dimensions : dimensional_exponents := dimensions_for_si_unit(
  name);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY signal
SUBTYPE OF (characterized_object);
END_ENTITY; (* declared in: signal_mim *)
 
ENTITY signal_category
SUBTYPE OF (group);
END_ENTITY; (* declared in: signal_mim *)
 
ENTITY simple_clause
SUBTYPE OF (compound_representation_item);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY simple_generic_expression
ABSTRACT SUPERTYPE OF (ONEOF (generic_literal, generic_variable))
SUBTYPE OF (generic_expression);
END_ENTITY; (* declared in: iso13584_generic_expressions_schema *)
 
ENTITY single_area_csg_2d_shape_representation
SUBTYPE OF (csg_2d_shape_representation);
  SELF\representation.items : SET [1:?] OF csg_2d_area_select;
WHERE
  wr1 : SIZEOF(QUERY(it <* SELF.items | 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MAPPED_ITEM' IN 
    TYPEOF(it))) = 0;
  wr2 : SIZEOF(QUERY(it <* SELF.items | 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CSG_SOLID_2D' IN 
    TYPEOF(it))) = 1;
END_ENTITY; (* declared in: constructive_solid_geometry_2d_mim *)
 
ENTITY single_boundary_csg_2d_shape_representation
SUBTYPE OF (single_area_csg_2d_shape_representation);
WHERE
  wr1 : SIZEOF(QUERY(it <* SELF.items | (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CSG_PRIMITIVE_SOLID_2D'
     IN TYPEOF(it)) AND NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRIMITIVE_2D_WITH_INNER_BOUNDARY'
     IN TYPEOF(it\csg_primitive_solid_2d.tree_root_expression)))) = 0;
END_ENTITY; (* declared in: constructive_solid_geometry_2d_mim *)
 
ENTITY solid_angle_measure_with_unit
SUBTYPE OF (measure_with_unit);
WHERE
  wr1 : 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.SOLID_ANGLE_UNIT'
     IN TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY solid_angle_unit
SUBTYPE OF (named_unit);
WHERE
  wr1 : (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit
    .dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.
    time_exponent = 0.0) AND (SELF\named_unit.dimensions.
    electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.
    thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.
    amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.
    luminous_intensity_exponent = 0.0);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY solid_model
SUPERTYPE OF (csg_solid)
SUBTYPE OF (geometric_representation_item);
END_ENTITY; (* declared in: geometric_model_schema *)
 
ENTITY source_for_requirement
SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : requirement_source;
  items : SET [1:1] OF requirement_source_item;
END_ENTITY; (* declared in: requirement_assignment_mim *)
 
ENTITY sourced_requirement
SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : requirement_source;
  items : SET [1:1] OF product_definition;
END_ENTITY; (* declared in: requirement_assignment_mim *)
 
ENTITY specification_definition
SUBTYPE OF (product_definition);
END_ENTITY; (* declared in: specification_document_mim *)
 
ENTITY specified_higher_usage_occurrence
SUBTYPE OF (assembly_component_usage);
  upper_usage : assembly_component_usage;
  next_usage : next_assembly_usage_occurrence;
UNIQUE
  ur1 : upper_usage, next_usage;
WHERE
  wr1 : SELF :<>: upper_usage;
  wr2 : SELF\product_definition_relationship.relating_product_definition :=: 
    upper_usage.relating_product_definition;
  wr3 : SELF\product_definition_relationship.related_product_definition :=: 
    next_usage.related_product_definition;
  wr4 : (upper_usage.related_product_definition :=: next_usage.
    relating_product_definition) OR (SIZEOF(QUERY(pdr <* USEDIN(upper_usage.
    related_product_definition, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION'
    ) | pdr.relating_product_definition :=: next_usage.
    relating_product_definition)) = 1);
  wr5 : SIZEOF([
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.NEXT_ASSEMBLY_USAGE_OCCURRENCE'
    , 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.SPECIFIED_HIGHER_USAGE_OCCURRENCE'
    ] * TYPEOF(upper_usage)) = 1;
END_ENTITY; (* declared in: product_structure_schema *)
 
ENTITY standard_uncertainty
SUPERTYPE OF (expanded_uncertainty)
SUBTYPE OF (uncertainty_qualifier);
  uncertainty_value : REAL;
END_ENTITY; (* declared in: qualified_measure_schema *)
 
ENTITY structured_text_composition
SUBTYPE OF (compound_representation_item);
END_ENTITY; (* declared in: tagged_text_representation_mim *)
 
ENTITY structured_text_representation
SUBTYPE OF (representation);
  SELF\representation.items : SET [1:?] OF string_representation_item_select;
END_ENTITY; (* declared in: tagged_text_representation_mim *)
 
ENTITY surface
SUPERTYPE OF (elementary_surface)
SUBTYPE OF (geometric_representation_item);
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY symbol
SUBTYPE OF (representation_item);
END_ENTITY; (* declared in: production_rule_mim *)
 
ENTITY table_representation_item
SUBTYPE OF (compound_representation_item, characterized_object);
WHERE
  wr1 : SIZEOF(QUERY(itet <* SELF\compound_representation_item.item_element | 
    NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ROW_REPRESENTATION_ITEM'
     IN TYPEOF(itet)))) = 0;
END_ENTITY; (* declared in: characteristic_mim *)
 
ENTITY tagged_text_format
SUBTYPE OF (representation_context);
END_ENTITY; (* declared in: tagged_text_representation_mim *)
 
ENTITY tagged_text_item
SUBTYPE OF (descriptive_representation_item);
END_ENTITY; (* declared in: tagged_text_representation_mim *)
 
ENTITY tangent
SUBTYPE OF (derived_shape_aspect);
WHERE
  wr1 : SIZEOF(SELF\derived_shape_aspect.deriving_relationships) = 1;
END_ENTITY; (* declared in: shape_aspect_definition_schema *)
 
ENTITY test_method_based_parameter_assignment
SUBTYPE OF (parameter_assignment);
END_ENTITY; (* declared in: model_parameter_mim *)
 
ENTITY thermodynamic_temperature_measure_with_unit
SUBTYPE OF (measure_with_unit);
WHERE
  wr1 : 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.THERMODYNAMIC_TEMPERATURE_UNIT'
     IN TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY thermodynamic_temperature_unit
SUBTYPE OF (named_unit);
WHERE
  wr1 : (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit
    .dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.
    time_exponent = 0.0) AND (SELF\named_unit.dimensions.
    electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.
    thermodynamic_temperature_exponent = 1.0) AND (SELF\named_unit.dimensions.
    amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.
    luminous_intensity_exponent = 0.0);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY through_port_variable
SUBTYPE OF (port_variable);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY time_interval;
  id : identifier;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY time_interval_assignment ABSTRACT SUPERTYPE;
  assigned_time_interval : time_interval;
  role : time_interval_role;
END_ENTITY; (* declared in: management_resources_schema *)
 
ENTITY time_interval_based_effectivity
SUBTYPE OF (effectivity);
  effectivity_period : time_interval;
END_ENTITY; (* declared in: effectivity_schema *)
 
ENTITY time_interval_relationship;
  name : label;
  description :  OPTIONAL text;
  relating_time_interval : time_interval;
  related_time_interval : time_interval;
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY time_interval_role;
  name : label;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY time_interval_with_bounds
SUBTYPE OF (time_interval);
  primary_bound :  OPTIONAL date_time_or_event_occurrence;
  secondary_bound :  OPTIONAL date_time_or_event_occurrence;
  duration :  OPTIONAL time_measure_with_unit;
WHERE
  wr1 : NOT (EXISTS(secondary_bound) AND EXISTS(duration));
  wr2 : EXISTS(primary_bound) OR EXISTS(secondary_bound);
END_ENTITY; (* declared in: date_time_schema *)
 
ENTITY time_measure_with_unit
SUBTYPE OF (measure_with_unit);
WHERE
  wr1 : 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.TIME_UNIT' IN 
    TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY time_unit
SUBTYPE OF (named_unit);
WHERE
  wr1 : (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit
    .dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.
    time_exponent = 1.0) AND (SELF\named_unit.dimensions.
    electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.
    thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.
    amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.
    luminous_intensity_exponent = 0.0);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY transform_port_variable
SUBTYPE OF (port_variable);
END_ENTITY; (* declared in: analytical_model_mim *)
 
ENTITY trimmed_curve
SUBTYPE OF (bounded_curve);
  basis_curve : curve;
  trim_1 : SET [1:2] OF trimming_select;
  trim_2 : SET [1:2] OF trimming_select;
  sense_agreement : BOOLEAN;
  master_representation : trimming_preference;
WHERE
  wr1 : (HIINDEX(trim_1) = 1) OR (TYPEOF(trim_1[1]) <> TYPEOF(trim_1[2]));
  wr2 : (HIINDEX(trim_2) = 1) OR (TYPEOF(trim_2[1]) <> TYPEOF(trim_2[2]));
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY type_qualifier;
  name : label;
END_ENTITY; (* declared in: qualified_measure_schema *)
 
ENTITY unary_generic_expression ABSTRACT SUPERTYPE
SUBTYPE OF (generic_expression);
  operand : generic_expression;
END_ENTITY; (* declared in: iso13584_generic_expressions_schema *)
 
ENTITY uncertainty_measure_with_unit
SUBTYPE OF (measure_with_unit);
  name : label;
  description :  OPTIONAL text;
WHERE
  wr1 : valid_measure_value(SELF\measure_with_unit.value_component);
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY uncertainty_qualifier
SUPERTYPE OF (ONEOF (standard_uncertainty, qualitative_uncertainty));
  measure_name : label;
  description : text;
END_ENTITY; (* declared in: qualified_measure_schema *)
 
ENTITY uniform_curve
SUBTYPE OF (b_spline_curve);
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY uniform_resource_identifier
SUBTYPE OF (descriptive_representation_item);
END_ENTITY; (* declared in: tagged_text_representation_mim *)
 
ENTITY usage_concept_usage_relationship
SUBTYPE OF (mapped_item, item_identified_representation_usage);
  SELF\item_identified_representation_usage.used_representation : 
  shape_representation;
  SELF\item_identified_representation_usage.definition : shape_aspect;
DERIVE
  SELF\item_identified_representation_usage.identified_item : 
  representation_item := SELF;
WHERE
  wr1 : SELF IN SELF\item_identified_representation_usage.used_representation.
    items;
END_ENTITY; (* declared in: part_feature_location_mim *)
 
ENTITY usage_view_connection_zone_terminal_shape_relationship
SUBTYPE OF (representation, representation_relationship_with_transformation);
  SELF\representation_relationship.rep_1 : shape_representation;
  SELF\representation_relationship.rep_2 : shape_representation;
UNIQUE
  ur1 : SELF\representation_relationship.rep_1, SELF\
    representation_relationship.rep_2;
WHERE
  wr1 : SELF\representation_relationship.rep_1 <> SELF\
    representation_relationship.rep_2;
END_ENTITY; (* declared in: physical_unit_usage_view_mim *)
 
ENTITY value_range
SUBTYPE OF (compound_representation_item);
WHERE
  wr1 : ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'SET_REPRESENTATION_ITEM' IN TYPEOF(item_element)) AND value_range_wr1(
    item_element);
  wr2 : value_range_wr2(item_element);
  wr3 : value_range_wr3(item_element);
END_ENTITY; (* declared in: extended_measure_representation_mim *)
 
ENTITY value_representation_item
SUBTYPE OF (representation_item);
  value_component : measure_value;
WHERE
  wr1 : SIZEOF(QUERY(rep <* using_representations(SELF) | NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.GLOBAL_UNIT_ASSIGNED_CONTEXT'
     IN TYPEOF(rep.context_of_items)))) = 0;
END_ENTITY; (* declared in: representation_schema *)
 
ENTITY variable_semantics ABSTRACT SUPERTYPE;
END_ENTITY; (* declared in: iso13584_generic_expressions_schema *)
 
ENTITY vector
SUBTYPE OF (geometric_representation_item);
  orientation : direction;
  magnitude : length_measure;
WHERE
  wr1 : magnitude >= 0.0;
END_ENTITY; (* declared in: geometry_schema *)
 
ENTITY versioned_action_request;
  id : identifier;
  version : label;
  purpose : text;
  description :  OPTIONAL text;
END_ENTITY; (* declared in: action_schema *)
 
ENTITY volume_measure_with_unit
SUBTYPE OF (measure_with_unit);
WHERE
  wr1 : 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.VOLUME_UNIT' IN 
    TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY; (* declared in: measure_schema *)
 
ENTITY volume_unit
SUBTYPE OF (named_unit);
WHERE
  wr1 : (SELF\named_unit.dimensions.length_exponent = 3.000000) AND (SELF\
    named_unit.dimensions.mass_exponent = 0.000000) AND (SELF\named_unit.
    dimensions.time_exponent = 0.000000) AND (SELF\named_unit.dimensions.
    electric_current_exponent = 0.000000) AND (SELF\named_unit.dimensions.
    thermodynamic_temperature_exponent = 0.000000) AND (SELF\named_unit.
    dimensions.amount_of_substance_exponent = 0.000000) AND (SELF\named_unit.
    dimensions.luminous_intensity_exponent = 0.000000);
END_ENTITY; (* declared in: measure_schema *)
 
FUNCTION acyclic(arg1 : generic_expression; arg2 : SET OF generic_expression)
   : BOOLEAN;
LOCAL
  result : BOOLEAN;
END_LOCAL;
  IF 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.SIMPLE_GENERIC_EXPRESSION'
   IN TYPEOF(arg1) THEN
    RETURN (TRUE);
  END_IF;
  IF arg1 IN arg2 THEN
    RETURN (FALSE);
  END_IF;
  IF 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.UNARY_GENERIC_EXPRESSION'
   IN TYPEOF(arg1) THEN
    RETURN (acyclic(arg1\unary_generic_expression.operand, arg2 + [arg1]));
  END_IF;
  IF 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.BINARY_GENERIC_EXPRESSION'
   IN TYPEOF(arg1) THEN
    RETURN (acyclic(arg1\binary_generic_expression.operands[1], arg2 + [arg1]) 
    AND acyclic(arg1\binary_generic_expression.operands[2], arg2 + [arg1]));
  END_IF;
  IF 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MULTIPLE_ARITY_GENERIC_EXPRESSION'
   IN TYPEOF(arg1) THEN
    result := TRUE;
    REPEAT i := 1 TO SIZEOF(arg1\multiple_arity_generic_expression.operands);
      result := result AND acyclic(arg1\multiple_arity_generic_expression.
      operands[i], arg2 + [arg1]);
    END_REPEAT;
    RETURN (result);
  END_IF;
END_FUNCTION; (* declared in: iso13584_generic_expressions_schema *)
 
FUNCTION acyclic_curve_replica(rep : curve_replica; parent : curve) : BOOLEAN;
  IF NOT ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CURVE_REPLICA' 
  IN TYPEOF(parent)) THEN
    RETURN (TRUE);
  END_IF;
  IF parent :=: rep THEN
    RETURN (FALSE);
  ELSE
    RETURN (acyclic_curve_replica(rep, parent\curve_replica.parent_curve));
  END_IF;
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION acyclic_mapped_representation(parent_set : SET OF representation; 
  children_set : SET OF representation_item) : BOOLEAN;
LOCAL
  x : SET OF representation_item;
  y : SET OF representation_item;
END_LOCAL;
  x := QUERY(z <* children_set | 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MAPPED_ITEM' IN TYPEOF(
  z));
  IF SIZEOF(x) > 0 THEN
    REPEAT i := 1 TO HIINDEX(x);
      IF x[i]\mapped_item.mapping_source.mapped_representation IN parent_set
       THEN
        RETURN (FALSE);
      END_IF;
      IF NOT acyclic_mapped_representation(parent_set + x[i]\mapped_item.
      mapping_source.mapped_representation, x[i]\mapped_item.mapping_source.
      mapped_representation.items) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;
  x := children_set - x;
  IF SIZEOF(x) > 0 THEN
    REPEAT i := 1 TO HIINDEX(x);
      y := QUERY(z <* bag_to_set(USEDIN(x[i], '')) | 
      'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.REPRESENTATION_ITEM'
       IN TYPEOF(z));
      IF NOT acyclic_mapped_representation(parent_set, y) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;
  RETURN (TRUE);
END_FUNCTION; (* declared in: representation_schema *)
 
FUNCTION acyclic_product_category_relationship(relation : 
  product_category_relationship; children : SET OF product_category) : BOOLEAN;
LOCAL
  x : SET OF product_category_relationship;
  local_children : SET OF product_category;
END_LOCAL;
  REPEAT i := 1 TO HIINDEX(children);
    IF relation.category :=: children[i] THEN
      RETURN (FALSE);
    END_IF;
  END_REPEAT;
  x := bag_to_set(USEDIN(relation.category, 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_CATEGORY_RELATIONSHIP.SUB_CATEGORY'
  ));
  local_children := children + relation.category;
  IF SIZEOF(x) > 0 THEN
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_product_category_relationship(x[i], local_children) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;
  RETURN (TRUE);
END_FUNCTION; (* declared in: product_definition_schema *)
 
FUNCTION acyclic_product_definition_relationship(relation : 
  product_definition_relationship; relatives : SET [1:?] OF product_definition
  ; specific_relation : STRING) : BOOLEAN;
LOCAL
  x : SET OF product_definition_relationship;
END_LOCAL;
  IF relation.relating_product_definition IN relatives THEN
    RETURN (FALSE);
  END_IF;
  x := QUERY(pd <* bag_to_set(USEDIN(relation.relating_product_definition, 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION'
  )) | specific_relation IN TYPEOF(pd));
  REPEAT i := 1 TO HIINDEX(x);
    IF NOT acyclic_product_definition_relationship(x[i], relatives + relation.
    relating_product_definition, specific_relation) THEN
      RETURN (FALSE);
    END_IF;
  END_REPEAT;
  RETURN (TRUE);
END_FUNCTION; (* declared in: product_definition_schema *)
 
FUNCTION acyclic_representation_relationship(relation : 
  representation_relationship; relatives : SET [1:?] OF representation; 
  specific_relation : STRING) : BOOLEAN;
LOCAL
  x : SET OF representation_relationship;
END_LOCAL;
  IF relation.rep_1 IN relatives THEN
    RETURN (FALSE);
  END_IF;
  x := QUERY(r <* bag_to_set(USEDIN(relation.rep_1, 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.REPRESENTATION_RELATIONSHIP.REP_2'
  )) | specific_relation IN TYPEOF(r));
  REPEAT i := 1 TO HIINDEX(x);
    IF NOT acyclic_representation_relationship(x[i], relatives + relation.rep_1
    , specific_relation) THEN
      RETURN (FALSE);
    END_IF;
  END_REPEAT;
  RETURN (TRUE);
END_FUNCTION; (* declared in: extended_basic_geometry_mim *)
 
FUNCTION bag_to_set(the_bag :  BAG  OF GENERIC : intype) : SET OF GENERIC : 
  intype;
LOCAL
  the_set : SET OF GENERIC : intype := [];
END_LOCAL;
  IF SIZEOF(the_bag) > 0 THEN
    REPEAT i := 1 TO HIINDEX(the_bag);
      the_set := the_set + the_bag[i];
    END_REPEAT;
  END_IF;
  RETURN (the_set);
END_FUNCTION; (* declared in: support_resource_schema *)
 
FUNCTION base_axis(dim : INTEGER; axis1 : direction; axis2 : direction; axis3
   : direction) :  LIST [2:3] OF direction;
LOCAL
  u :  LIST [2:3] OF direction;
  factor : REAL;
  d1 : direction;
  d2 : direction;
END_LOCAL;
  IF dim = 3 THEN
    d1 := NVL(normalise(axis3), dummy_gri||direction([0.0, 0.0, 1.0]));
    d2 := first_proj_axis(d1, axis1);
    u := [d2, second_proj_axis(d1, d2, axis2), d1];
  ELSE
    IF EXISTS(axis1) THEN
      d1 := normalise(axis1);
      u := [d1, orthogonal_complement(d1)];
      IF EXISTS(axis2) THEN
        factor := dot_product(axis2, u[2]);
        IF factor < 0.0 THEN
          u[2].direction_ratios[1] := -u[2].direction_ratios[1];
          u[2].direction_ratios[2] := -u[2].direction_ratios[2];
        END_IF;
      END_IF;
    ELSE
      IF EXISTS(axis2) THEN
        d1 := normalise(axis2);
        u := [orthogonal_complement(d1), d1];
        u[1].direction_ratios[1] := -u[1].direction_ratios[1];
        u[1].direction_ratios[2] := -u[1].direction_ratios[2];
      ELSE
        u := [dummy_gri||direction([1.0, 0.0]), dummy_gri||direction([0.0, 1.0]
        )];
      END_IF;
    END_IF;
  END_IF;
  RETURN (u);
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION build_2axes(ref_direction : direction) :  LIST [2:2] OF direction;
LOCAL
  d : direction := NVL(normalise(ref_direction), dummy_gri||direction([1.0, 0.0
  ]));
END_LOCAL;
  RETURN ([d, orthogonal_complement(d)]);
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION build_axes(axis : direction; ref_direction : direction) :  LIST [3:3]
   OF direction;
LOCAL
  d1 : direction;
  d2 : direction;
END_LOCAL;
  d1 := NVL(normalise(axis), dummy_gri||direction([0.0, 0.0, 1.0]));
  d2 := first_proj_axis(d1, ref_direction);
  RETURN ([d2, normalise(cross_product(d1, d2)).orientation, d1]);
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION categories_of_product(obj : product) : SET OF STRING;
LOCAL
  category_assignments :  BAG  OF product_category;
  categories : SET OF STRING := [];
  i : INTEGER;
END_LOCAL;
  category_assignments := USEDIN(obj, 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'
  );
  REPEAT i := LOINDEX(category_assignments) TO HIINDEX(category_assignments);
    categories := categories + category_assignments[i].name;
  END_REPEAT;
  RETURN (categories);
END_FUNCTION; (* declared in: single_part_representation_mim *)
 
FUNCTION class_assignment_is_valid(aia : applied_classification_assignment) : 
  BOOLEAN;
LOCAL
  item : classification_item;
  role : classification_role;
END_LOCAL;
  role := aia.role;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 'CLASS_SYSTEM' 
  IN TYPEOF(aia.assigned_class) THEN
    IF role.name <> 'class system membership' THEN
      RETURN (FALSE);
    END_IF;
    REPEAT i := LOINDEX(aia.items) TO HIINDEX(aia.items);
      item := aia.items[i];
      IF SIZEOF(['AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
      'CLASS_SYSTEM_ITEM'] * TYPEOF(item)) = 0 THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
  'CHARACTERIZED_CLASS' IN TYPEOF(aia.assigned_class) THEN
    IF NOT (role.name IN ['definitional', 'non-definitional', '']) THEN
      RETURN (FALSE);
    END_IF;
    REPEAT i := LOINDEX(aia.items) TO HIINDEX(aia.items);
      item := aia.items[i];
      IF SIZEOF(['AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
      'CLASSIFIED_ITEM'] * TYPEOF(item)) = 0 THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;
  RETURN (TRUE);
END_FUNCTION; (* declared in: classification_with_attributes_mim *)
 
FUNCTION constraints_param_b_spline(degree : INTEGER; up_knots : INTEGER; up_cp
   : INTEGER; knot_mult : LIST OF INTEGER; knots : LIST OF parameter_value) : 
  BOOLEAN;
LOCAL
  result : BOOLEAN := TRUE;
  k : INTEGER;
  sum : INTEGER;
END_LOCAL;
  sum := knot_mult[1];
  REPEAT i := 2 TO up_knots;
    sum := sum + knot_mult[i];
  END_REPEAT;
  IF (degree < 1) OR (up_knots < 2) OR (up_cp < degree) OR (sum <> degree + 
  up_cp + 2) THEN
    result := FALSE;
    RETURN (result);
  END_IF;
  k := knot_mult[1];
  IF (k < 1) OR (k > degree + 1) THEN
    result := FALSE;
    RETURN (result);
  END_IF;
  REPEAT i := 2 TO up_knots;
    IF (knot_mult[i] < 1) OR (knots[i] <= knots[i - 1]) THEN
      result := FALSE;
      RETURN (result);
    END_IF;
    k := knot_mult[i];
    IF (i < up_knots) AND (k > degree) THEN
      result := FALSE;
      RETURN (result);
    END_IF;
    IF (i = up_knots) AND (k > degree + 1) THEN
      result := FALSE;
      RETURN (result);
    END_IF;
  END_REPEAT;
  RETURN (result);
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION cross_product(arg1 : direction; arg2 : direction) : vector;
LOCAL
  mag : REAL;
  res : direction;
  v1 :  LIST [3:3] OF REAL;
  v2 :  LIST [3:3] OF REAL;
  result : vector;
END_LOCAL;
  IF NOT EXISTS(arg1) OR (arg1.dim = 2) OR NOT EXISTS(arg2) OR (arg2.dim = 2)
   THEN
    RETURN (?);
  ELSE
    v1 := normalise(arg1).direction_ratios;
    v2 := normalise(arg2).direction_ratios;
    res := dummy_gri||direction([v1[2] * v2[3] - v1[3] * v2[2], v1[3] * v2[1]
     - v1[1] * v2[3], v1[1] * v2[2] - v1[2] * v2[1]]);
    mag := 0.0;
    REPEAT i := 1 TO 3;
      mag := mag + res.direction_ratios[i] * res.direction_ratios[i];
    END_REPEAT;
    IF mag > 0.0 THEN
      result := dummy_gri||vector(res, SQRT(mag));
    ELSE
      result := dummy_gri||vector(arg1, 0.0);
    END_IF;
    RETURN (result);
  END_IF;
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION curve_weights_positive(b : rational_b_spline_curve) : BOOLEAN;
LOCAL
  result : BOOLEAN := TRUE;
END_LOCAL;
  REPEAT i := 0 TO b.upper_index_on_control_points;
    IF b.weights[i] <= 0.0 THEN
      result := FALSE;
      RETURN (result);
    END_IF;
  END_REPEAT;
  RETURN (result);
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION dependently_instantiated(set_of_input_instances : SET OF GENERIC; 
  set_of_input_types : SET OF STRING; previous_in_chain : LIST OF GENERIC) : 
  BOOLEAN;
   (* generated by longform-generator *)
LOCAL
  number_of_input_instances : INTEGER;
  number_of_referring_instances : INTEGER;
  bag_of_referring_instances :  BAG  OF GENERIC := [];
  dependently_instantiated_flag : BOOLEAN;
  previous_in_chain_plus : LIST OF GENERIC := [];
  recursion : BOOLEAN;
  result : BOOLEAN := TRUE;
  set_of_types : SET OF STRING := [];
END_LOCAL;
  IF EXISTS(set_of_input_instances) THEN
    number_of_input_instances := SIZEOF(set_of_input_instances);
    set_of_input_types := set_of_input_types + 'GENERIC';
    REPEAT i := 1 TO number_of_input_instances;
      bag_of_referring_instances := USEDIN(set_of_input_instances[i], '');
      IF EXISTS(bag_of_referring_instances) THEN
        number_of_referring_instances := SIZEOF(bag_of_referring_instances);
        dependently_instantiated_flag := FALSE;
        REPEAT j := 1 TO number_of_referring_instances;
          set_of_types := TYPEOF(bag_of_referring_instances[j]);
          IF set_of_types <= set_of_input_types THEN
            IF EXISTS(previous_in_chain) THEN
              recursion := TRUE;
              REPEAT k := 1 TO SIZEOF(previous_in_chain);
                IF previous_in_chain[k] :=: bag_of_referring_instances[j] THEN
                  recursion := FALSE;
                  ESCAPE;
                END_IF;
              END_REPEAT;
            END_IF;
            IF recursion THEN
              previous_in_chain_plus := previous_in_chain + 
              set_of_input_instances[i];
              IF dependently_instantiated([bag_of_referring_instances[j]], 
              set_of_input_types, previous_in_chain_plus) THEN
                dependently_instantiated_flag := TRUE;
                ESCAPE;
              ELSE
                SKIP;
              END_IF;
            END_IF;
          ELSE
            dependently_instantiated_flag := TRUE;
            ESCAPE;
          END_IF;
        END_REPEAT;
        IF NOT dependently_instantiated_flag THEN
          RETURN (FALSE);
        END_IF;
      ELSE
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  ELSE
    RETURN (FALSE);
  END_IF;
  RETURN (TRUE);
END_FUNCTION;
 
FUNCTION derive_dimensional_exponents(x : unit) : dimensional_exponents;
LOCAL
  result : dimensional_exponents := dimensional_exponents(0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0);
END_LOCAL;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DERIVED_UNIT' IN 
  TYPEOF(x) THEN
    REPEAT i := LOINDEX(x.elements) TO HIINDEX(x.elements);
      result.length_exponent := result.length_exponent + x.elements[i].exponent
       * x.elements[i].unit.dimensions.length_exponent;
      result.mass_exponent := result.mass_exponent + x.elements[i].exponent * x
      .elements[i].unit.dimensions.mass_exponent;
      result.time_exponent := result.time_exponent + x.elements[i].exponent * x
      .elements[i].unit.dimensions.time_exponent;
      result.electric_current_exponent := result.electric_current_exponent + x.
      elements[i].exponent * x.elements[i].unit.dimensions.
      electric_current_exponent;
      result.thermodynamic_temperature_exponent := result.
      thermodynamic_temperature_exponent + x.elements[i].exponent * x.elements[
      i].unit.dimensions.thermodynamic_temperature_exponent;
      result.amount_of_substance_exponent := result.
      amount_of_substance_exponent + x.elements[i].exponent * x.elements[i].
      unit.dimensions.amount_of_substance_exponent;
      result.luminous_intensity_exponent := result.luminous_intensity_exponent
       + x.elements[i].exponent * x.elements[i].unit.dimensions.
      luminous_intensity_exponent;
    END_REPEAT;
  ELSE
    result := x.dimensions;
  END_IF;
  RETURN (result);
END_FUNCTION; (* declared in: measure_schema *)
 
FUNCTION dimension_of(item : geometric_representation_item) : dimension_count;
LOCAL
  x : SET OF representation;
  y : representation_context;
  dim : dimension_count;
END_LOCAL;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CARTESIAN_POINT' IN 
  TYPEOF(item) THEN
    dim := SIZEOF(item\cartesian_point.coordinates);
    RETURN (dim);
  END_IF;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DIRECTION' IN TYPEOF
  (item) THEN
    dim := SIZEOF(item\direction.direction_ratios);
    RETURN (dim);
  END_IF;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.VECTOR' IN TYPEOF(
  item) THEN
    dim := SIZEOF(item\vector.orientation\direction.direction_ratios);
    RETURN (dim);
  END_IF;
  x := using_representations(item);
  y := x[1].context_of_items;
  dim := y\geometric_representation_context.coordinate_space_dimension;
  RETURN (dim);
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION dimensions_for_si_unit(n : si_unit_name) : dimensional_exponents;
  CASE n OF 
     metre : 
    RETURN (dimensional_exponents(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
     gram : 
    RETURN (dimensional_exponents(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0));
     second : 
    RETURN (dimensional_exponents(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0));
     ampere : 
    RETURN (dimensional_exponents(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0));
     kelvin : 
    RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0));
     mole : 
    RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0));
     candela : 
    RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0));
     radian : 
    RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
     steradian : 
    RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
     hertz : 
    RETURN (dimensional_exponents(0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0));
     newton : 
    RETURN (dimensional_exponents(1.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0));
     pascal : 
    RETURN (dimensional_exponents(-1.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0));
     joule : 
    RETURN (dimensional_exponents(2.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0));
     watt : 
    RETURN (dimensional_exponents(2.0, 1.0, -3.0, 0.0, 0.0, 0.0, 0.0));
     coulomb : 
    RETURN (dimensional_exponents(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0));
     volt : 
    RETURN (dimensional_exponents(2.0, 1.0, -3.0, -1.0, 0.0, 0.0, 0.0));
     farad : 
    RETURN (dimensional_exponents(-2.0, -1.0, 4.0, 1.0, 0.0, 0.0, 0.0));
     ohm : 
    RETURN (dimensional_exponents(2.0, 1.0, -3.0, -2.0, 0.0, 0.0, 0.0));
     siemens : 
    RETURN (dimensional_exponents(-2.0, -1.0, 3.0, 2.0, 0.0, 0.0, 0.0));
     weber : 
    RETURN (dimensional_exponents(2.0, 1.0, -2.0, -1.0, 0.0, 0.0, 0.0));
     tesla : 
    RETURN (dimensional_exponents(0.0, 1.0, -2.0, -1.0, 0.0, 0.0, 0.0));
     henry : 
    RETURN (dimensional_exponents(2.0, 1.0, -2.0, -2.0, 0.0, 0.0, 0.0));
     degree_celsius : 
    RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0));
     lumen : 
    RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0));
     lux : 
    RETURN (dimensional_exponents(-2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0));
     becquerel : 
    RETURN (dimensional_exponents(0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0));
     gray : 
    RETURN (dimensional_exponents(2.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0));
     sievert : 
    RETURN (dimensional_exponents(2.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0));
    OTHERWISE  : RETURN (?);
  END_CASE;
END_FUNCTION; (* declared in: measure_schema *)
 
FUNCTION dot_product(arg1 : direction; arg2 : direction) : REAL;
LOCAL
  scalar : REAL;
  vec1 : direction;
  vec2 : direction;
  ndim : INTEGER;
END_LOCAL;
  IF NOT EXISTS(arg1) OR NOT EXISTS(arg2) THEN
    scalar := ?;
  ELSE
    IF arg1.dim <> arg2.dim THEN
      scalar := ?;
    ELSE
      vec1 := normalise(arg1);
      vec2 := normalise(arg2);
      ndim := arg1.dim;
      scalar := 0.0;
      REPEAT i := 1 TO ndim;
        scalar := scalar + vec1.direction_ratios[i] * vec2.direction_ratios[i];
      END_REPEAT;
    END_IF;
  END_IF;
  RETURN (scalar);
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION first_proj_axis(z_axis : direction; arg : direction) : direction;
LOCAL
  x_axis : direction;
  v : direction;
  z : direction;
  x_vec : vector;
END_LOCAL;
  IF NOT EXISTS(z_axis) THEN
    RETURN (?);
  ELSE
    z := normalise(z_axis);
    IF NOT EXISTS(arg) THEN
      IF (z.direction_ratios <> [1.0, 0.0, 0.0]) AND (z.direction_ratios <> [-
      1.0, 0.0, 0.0]) THEN
        v := dummy_gri||direction([1.0, 0.0, 0.0]);
      ELSE
        v := dummy_gri||direction([0.0, 1.0, 0.0]);
      END_IF;
    ELSE
      IF arg.dim <> 3 THEN
        RETURN (?);
      END_IF;
      IF cross_product(arg, z).magnitude = 0.0 THEN
        RETURN (?);
      ELSE
        v := normalise(arg);
      END_IF;
    END_IF;
    x_vec := scalar_times_vector(dot_product(v, z), z);
    x_axis := vector_difference(v, x_vec).orientation;
    x_axis := normalise(x_axis);
  END_IF;
  RETURN (x_axis);
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION get_description_value(obj : description_attribute_select) : text;
LOCAL
  description_bag :  BAG  OF description_attribute := USEDIN(obj, 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'
  );
END_LOCAL;
  IF SIZEOF(description_bag) = 1 THEN
    RETURN (description_bag[1].attribute_value);
  ELSE
    RETURN (?);
  END_IF;
END_FUNCTION; (* declared in: basic_attribute_schema *)
 
FUNCTION get_id_value(obj : id_attribute_select) : identifier;
LOCAL
  id_bag :  BAG  OF id_attribute := USEDIN(obj, 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ID_ATTRIBUTE.IDENTIFIED_ITEM'
  );
END_LOCAL;
  IF SIZEOF(id_bag) = 1 THEN
    RETURN (id_bag[1].attribute_value);
  ELSE
    RETURN (?);
  END_IF;
END_FUNCTION; (* declared in: basic_attribute_schema *)
 
FUNCTION get_name_value(obj : name_attribute_select) : label;
LOCAL
  name_bag :  BAG  OF name_attribute := USEDIN(obj, 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.NAME_ATTRIBUTE.NAMED_ITEM'
  );
END_LOCAL;
  IF SIZEOF(name_bag) = 1 THEN
    RETURN (name_bag[1].attribute_value);
  ELSE
    RETURN (?);
  END_IF;
END_FUNCTION; (* declared in: basic_attribute_schema *)
 
FUNCTION get_role(obj : role_select) : object_role;
LOCAL
  role_bag :  BAG  OF role_association := USEDIN(obj, 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ROLE_ASSOCIATION.ITEM_WITH_ROLE'
  );
END_LOCAL;
  IF SIZEOF(role_bag) = 1 THEN
    RETURN (role_bag[1].role);
  ELSE
    RETURN (?);
  END_IF;
END_FUNCTION; (* declared in: basic_attribute_schema *)
 
FUNCTION is_acyclic(arg : generic_expression) : BOOLEAN;
  RETURN (acyclic(arg, []));
END_FUNCTION; (* declared in: iso13584_generic_expressions_schema *)
 
FUNCTION item_in_context(item : representation_item; cntxt : 
  representation_context) : BOOLEAN;
LOCAL
  y :  BAG  OF representation_item;
END_LOCAL;
  IF SIZEOF(USEDIN(item, 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.REPRESENTATION.ITEMS')
   * cntxt.representations_in_context) > 0 THEN
    RETURN (TRUE);
  ELSE
    y := QUERY(z <* USEDIN(item, '') | 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.REPRESENTATION_ITEM' 
    IN TYPEOF(z));
    IF SIZEOF(y) > 0 THEN
      REPEAT i := 1 TO HIINDEX(y);
        IF item_in_context(y[i], cntxt) THEN
          RETURN (TRUE);
        END_IF;
      END_REPEAT;
    END_IF;
  END_IF;
  RETURN (FALSE);
END_FUNCTION; (* declared in: representation_schema *)
 
FUNCTION leap_year(year : year_number) : BOOLEAN;
  IF (year MOD 4 = 0) AND (year MOD 100 <> 0) OR (year MOD 400 = 0) THEN
    RETURN (TRUE);
  ELSE
    RETURN (FALSE);
  END_IF;
END_FUNCTION; (* declared in: date_time_schema *)
 
FUNCTION list_to_array(lis : LIST OF GENERIC : t; low : INTEGER; u : INTEGER)
   :  ARRAY [low:u] OF GENERIC : t;
LOCAL
  n : INTEGER;
  res :  ARRAY [low:u] OF GENERIC : t;
END_LOCAL;
  n := SIZEOF(lis);
  IF n <> u - low + 1 THEN
    RETURN (?);
  ELSE
    res := [lis[1] : n];
    REPEAT i := 2 TO n;
      res[low + i - 1] := lis[i];
    END_REPEAT;
    RETURN (res);
  END_IF;
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION normalise(arg : vector_or_direction) : vector_or_direction;
LOCAL
  ndim : INTEGER;
  v : direction;
  result : vector_or_direction;
  vec : vector;
  mag : REAL;
END_LOCAL;
  IF NOT EXISTS(arg) THEN
    result := ?;
  ELSE
    ndim := arg.dim;
    IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.VECTOR' IN TYPEOF(
    arg) THEN
      v := dummy_gri||direction(arg.orientation.direction_ratios);
      IF arg.magnitude = 0.0 THEN
        RETURN (?);
      ELSE
        vec := dummy_gri||vector(v, 1.0);
      END_IF;
    ELSE
      v := dummy_gri||direction(arg.direction_ratios);
    END_IF;
    mag := 0.0;
    REPEAT i := 1 TO ndim;
      mag := mag + v.direction_ratios[i] * v.direction_ratios[i];
    END_REPEAT;
    IF mag > 0.0 THEN
      mag := SQRT(mag);
      REPEAT i := 1 TO ndim;
        v.direction_ratios[i] := v.direction_ratios[i]/mag;
      END_REPEAT;
      IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.VECTOR' IN 
      TYPEOF(arg) THEN
        vec.orientation := v;
        result := vec;
      ELSE
        result := v;
      END_IF;
    ELSE
      RETURN (?);
    END_IF;
  END_IF;
  RETURN (result);
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION orthogonal_complement(vec : direction) : direction;
LOCAL
  result : direction;
END_LOCAL;
  IF (vec.dim <> 2) OR NOT EXISTS(vec) THEN
    RETURN (?);
  ELSE
    result := dummy_gri||direction([-vec.direction_ratios[2], vec.
    direction_ratios[1]]);
    RETURN (result);
  END_IF;
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION scalar_times_vector(scalar : REAL; vec : vector_or_direction) : vector
  ;
LOCAL
  v : direction;
  mag : REAL;
  result : vector;
END_LOCAL;
  IF NOT EXISTS(scalar) OR NOT EXISTS(vec) THEN
    RETURN (?);
  ELSE
    IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.VECTOR' IN TYPEOF(
    vec) THEN
      v := dummy_gri||direction(vec.orientation.direction_ratios);
      mag := scalar * vec.magnitude;
    ELSE
      v := dummy_gri||direction(vec.direction_ratios);
      mag := scalar;
    END_IF;
    IF mag < 0.0 THEN
      REPEAT i := 1 TO SIZEOF(v.direction_ratios);
        v.direction_ratios[i] := -v.direction_ratios[i];
      END_REPEAT;
      mag := -mag;
    END_IF;
    result := dummy_gri||vector(normalise(v), mag);
  END_IF;
  RETURN (result);
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION second_proj_axis(z_axis : direction; x_axis : direction; arg : 
  direction) : direction;
LOCAL
  y_axis : vector;
  v : direction;
  temp : vector;
END_LOCAL;
  IF NOT EXISTS(arg) THEN
    v := dummy_gri||direction([0.0, 1.0, 0.0]);
  ELSE
    v := arg;
  END_IF;
  temp := scalar_times_vector(dot_product(v, z_axis), z_axis);
  y_axis := vector_difference(v, temp);
  temp := scalar_times_vector(dot_product(v, x_axis), x_axis);
  y_axis := vector_difference(y_axis, temp);
  y_axis := normalise(y_axis);
  RETURN (y_axis.orientation);
END_FUNCTION; (* declared in: geometry_schema *)
 
FUNCTION type_check_function(the_type : GENERIC; sub_names : SET OF STRING; 
  criterion : INTEGER) : LOGICAL;
  IF NOT EXISTS(the_type) OR NOT ({0 <= criterion <= 3}) OR (SIZEOF(sub_names)
   = 0) THEN
    RETURN (UNKNOWN);
  ELSE
    CASE criterion OF 
       0 : 
      RETURN (SIZEOF(sub_names * TYPEOF(the_type)) > 0);
       1 : 
      RETURN (SIZEOF(sub_names * TYPEOF(the_type)) = 0);
       2 : 
      RETURN (SIZEOF(sub_names * TYPEOF(the_type)) = 1);
       3 : 
      RETURN (SIZEOF(sub_names * TYPEOF(the_type)) <= 1);
    END_CASE;
  END_IF;
END_FUNCTION; (* declared in: support_resource_schema *)
 
FUNCTION using_items(item : founded_item_select; checked_items : SET OF 
  founded_item_select) : SET OF founded_item_select;
LOCAL
  new_check_items : SET OF founded_item_select;
  result_items : SET OF founded_item_select;
  next_items : SET OF founded_item_select;
END_LOCAL;
  result_items := [];
  new_check_items := checked_items + item;
  next_items := QUERY(z <* bag_to_set(USEDIN(item, '')) | (
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.REPRESENTATION_ITEM' IN
   TYPEOF(z)) OR (
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.FOUNDED_ITEM' IN TYPEOF
  (z)));
  IF SIZEOF(next_items) > 0 THEN
    REPEAT i := 1 TO HIINDEX(next_items);
      IF NOT (next_items[i] IN new_check_items) THEN
        result_items := result_items + next_items[i] + using_items(next_items[i
        ], new_check_items);
      END_IF;
    END_REPEAT;
  END_IF;
  RETURN (result_items);
END_FUNCTION; (* declared in: representation_schema *)
 
FUNCTION using_representations(item : founded_item_select) : SET OF 
  representation;
LOCAL
  results : SET OF representation;
  result_bag :  BAG  OF representation;
  intermediate_items : SET OF founded_item_select;
END_LOCAL;
  results := [];
  result_bag := USEDIN(item, 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.REPRESENTATION.ITEMS');
  IF SIZEOF(result_bag) > 0 THEN
    REPEAT i := 1 TO HIINDEX(result_bag);
      results := results + result_bag[i];
    END_REPEAT;
  END_IF;
  intermediate_items := using_items(item, []);
  IF SIZEOF(intermediate_items) > 0 THEN
    REPEAT i := 1 TO HIINDEX(intermediate_items);
      result_bag := USEDIN(intermediate_items[i], 
      'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.REPRESENTATION.ITEMS'
      );
      IF SIZEOF(result_bag) > 0 THEN
        REPEAT j := 1 TO HIINDEX(result_bag);
          results := results + result_bag[j];
        END_REPEAT;
      END_IF;
    END_REPEAT;
  END_IF;
  RETURN (results);
END_FUNCTION; (* declared in: representation_schema *)
 
FUNCTION valid_basis_curve_in_2d_wireframe(crv : curve) : BOOLEAN;
  IF SIZEOF(['AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.POLYLINE', 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.B_SPLINE_CURVE', 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ELLIPSE', 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CIRCLE'] * TYPEOF(crv))
   = 1 THEN
    RETURN (TRUE);
  ELSE
    IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.TRIMMED_CURVE' IN 
    TYPEOF(crv) THEN
      IF SIZEOF(['AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.LINE', 
      'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PARABOLA', 
      'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.HYPERBOLA'] * 
      TYPEOF(crv\trimmed_curve.basis_curve)) = 1 THEN
        RETURN (TRUE);
      ELSE
        RETURN (valid_basis_curve_in_2d_wireframe(crv\trimmed_curve.basis_curve
        ));
      END_IF;
    ELSE
      IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.OFFSET_CURVE_2D'
       IN TYPEOF(crv) THEN
        RETURN (valid_basis_curve_in_2d_wireframe(crv\offset_curve_2d.
        basis_curve));
      ELSE
        IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CURVE_REPLICA'
         IN TYPEOF(crv) THEN
          RETURN (valid_basis_curve_in_2d_wireframe(crv\curve_replica.
          parent_curve));
        ELSE
          IF 
          'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.COMPOSITE_CURVE'
           IN TYPEOF(crv) THEN
            RETURN (SIZEOF(QUERY(ccs <* crv\composite_curve.segments | NOT 
            valid_basis_curve_in_2d_wireframe(ccs.parent_curve))) = 0);
          END_IF;
        END_IF;
      END_IF;
    END_IF;
  END_IF;
  RETURN (FALSE);
END_FUNCTION; (* declared in: aic_geometrically_bounded_2d_wireframe *)
 
FUNCTION valid_calendar_date(date : calendar_date) : LOGICAL;
  CASE date.month_component OF 
     1 : 
    RETURN ({1 <= date.day_component <= 31});
     2 : 
      BEGIN
        IF leap_year(date.year_component) THEN
          RETURN ({1 <= date.day_component <= 29});
        ELSE
          RETURN ({1 <= date.day_component <= 28});
        END_IF;
      END;
     3 : 
    RETURN ({1 <= date.day_component <= 31});
     4 : 
    RETURN ({1 <= date.day_component <= 30});
     5 : 
    RETURN ({1 <= date.day_component <= 31});
     6 : 
    RETURN ({1 <= date.day_component <= 30});
     7 : 
    RETURN ({1 <= date.day_component <= 31});
     8 : 
    RETURN ({1 <= date.day_component <= 31});
     9 : 
    RETURN ({1 <= date.day_component <= 30});
     10 : 
    RETURN ({1 <= date.day_component <= 31});
     11 : 
    RETURN ({1 <= date.day_component <= 30});
     12 : 
    RETURN ({1 <= date.day_component <= 31});
  END_CASE;
  RETURN (FALSE);
END_FUNCTION; (* declared in: date_time_schema *)
 
FUNCTION valid_measure_value(m : measure_value) : BOOLEAN;
  IF 'REAL' IN TYPEOF(m) THEN
    RETURN (m > 0.0);
  ELSE
    IF 'INTEGER' IN TYPEOF(m) THEN
      RETURN (m > 0);
    ELSE
      RETURN (TRUE);
    END_IF;
  END_IF;
END_FUNCTION; (* declared in: representation_schema *)
 
FUNCTION valid_selected_instance_representation(pd : 
  product_definition_or_assembly_relationship) : LOGICAL;
LOCAL
  properties : SET OF property_definition := bag_to_set(QUERY(prd <* USEDIN(pd
  , 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PROPERTY_DEFINITION.DEFINITION'
  ) | prd.name = 'occurrence selection'));
  property_definition_representations : SET OF 
  property_definition_representation := bag_to_set(QUERY(pdr <* USEDIN(
  properties[1], 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'
  ) | pdr.used_representation.name = 'selection criteria'));
  selected_representation : representation;
END_LOCAL;
  IF SIZEOF(properties) <> 1 THEN
    RETURN (FALSE);
  END_IF;
  IF SIZEOF(property_definition_representations) <> 1 THEN
    RETURN (FALSE);
  END_IF;
  selected_representation := property_definition_representations[1]\
  property_definition_representation.used_representation;
  IF (SIZEOF(selected_representation\representation.items) < 1) OR (SIZEOF(
  selected_representation\representation.items) > 2) THEN
    RETURN (FALSE);
  END_IF;
  IF SIZEOF(QUERY(i <* selected_representation\representation.items | (SIZEOF([
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MEASURE_REPRESENTATION_ITEM'
  , 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.VALUE_RANGE'] * 
  TYPEOF(i)) = 1) AND (i.name = 'selection quantity'))) <> 1 THEN
    RETURN (FALSE);
  END_IF;
  IF SIZEOF(QUERY(i <* selected_representation\representation.items | (
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'
   IN TYPEOF(i)) AND (i.name = 'selection control'))) > 1 THEN
    RETURN (FALSE);
  END_IF;
  IF (SIZEOF(QUERY(i <* selected_representation\representation.items | (
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'
   IN TYPEOF(i)) AND (i.name = 'selection control'))) = 0) AND (SIZEOF(QUERY(i
   <* selected_representation\representation.items | (i.name = 
  'selection quantity') AND (SIZEOF([
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.QUALIFIED_REPRESENTATION_ITEM'
  , 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.VALUE_RANGE'] * 
  TYPEOF(i)) = 0))) > 0) THEN
    RETURN (FALSE);
  END_IF;
  RETURN (TRUE);
END_FUNCTION; (* declared in: part_occurrence_mim *)
 
FUNCTION valid_time(time : local_time) : BOOLEAN;
  IF EXISTS(time.second_component) THEN
    RETURN (EXISTS(time.minute_component));
  ELSE
    RETURN (TRUE);
  END_IF;
END_FUNCTION; (* declared in: date_time_schema *)
 
FUNCTION valid_units(m : measure_with_unit) : BOOLEAN;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.LENGTH_MEASURE' IN 
  TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MASS_MEASURE' IN 
  TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.TIME_MEASURE' IN 
  TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ELECTRIC_CURRENT_MEASURE'
   IN TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.THERMODYNAMIC_TEMPERATURE_MEASURE'
   IN TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CELSIUS_TEMPERATURE_MEASURE'
   IN TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.AMOUNT_OF_SUBSTANCE_MEASURE'
   IN TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.LUMINOUS_INTENSITY_MEASURE'
   IN TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PLANE_ANGLE_MEASURE'
   IN TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.SOLID_ANGLE_MEASURE'
   IN TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.AREA_MEASURE' IN 
  TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.VOLUME_MEASURE' IN 
  TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.RATIO_MEASURE' IN 
  TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.POSITIVE_LENGTH_MEASURE'
   IN TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.POSITIVE_PLANE_ANGLE_MEASURE'
   IN TYPEOF(m.value_component) THEN
    IF derive_dimensional_exponents(m.unit_component) <> dimensional_exponents(
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  RETURN (TRUE);
END_FUNCTION; (* declared in: measure_schema *)
 
FUNCTION value_range_wr1(agg : compound_item_definition) : BOOLEAN;
  IF (SIZEOF(agg) = 2) AND ((SIZEOF(QUERY(i1 <* agg | 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MEASURE_REPRESENTATION_ITEM'
   IN TYPEOF(i1))) = 2) OR (SIZEOF(QUERY(i2 <* agg | 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.VALUE_REPRESENTATION_ITEM'
   IN TYPEOF(i2))) = 2)) THEN
    RETURN (TRUE);
  ELSE
    RETURN (FALSE);
  END_IF;
END_FUNCTION; (* declared in: extended_measure_representation_mim *)
 
FUNCTION value_range_wr2(agg : compound_item_definition) : BOOLEAN;
  IF (SIZEOF(QUERY(i <* agg | i.name = 'upper limit')) = 1) AND (SIZEOF(QUERY(i
   <* agg | i.name = 'lower limit')) = 1) THEN
    RETURN (TRUE);
  ELSE
    RETURN (FALSE);
  END_IF;
END_FUNCTION; (* declared in: extended_measure_representation_mim *)
 
FUNCTION value_range_wr3(agg : compound_item_definition) : BOOLEAN;
  IF SIZEOF(QUERY(i1 <* agg | (
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MEASURE_REPRESENTATION_ITEM'
   IN TYPEOF(i1)) AND (SIZEOF(QUERY(i2 <* agg | (
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MEASURE_REPRESENTATION_ITEM'
   IN TYPEOF(i2)) AND (i1 :<>: i2) AND (i1\measure_with_unit.unit_component
   :=: i2\measure_with_unit.unit_component))) = 1))) = 2 THEN
    RETURN (TRUE);
  ELSE
    RETURN (FALSE);
  END_IF;
END_FUNCTION; (* declared in: extended_measure_representation_mim *)
 
FUNCTION vector_difference(arg1 : vector_or_direction; arg2 : 
  vector_or_direction) : vector;
LOCAL
  result : vector;
  res : direction;
  vec1 : direction;
  vec2 : direction;
  mag : REAL;
  mag1 : REAL;
  mag2 : REAL;
  ndim : INTEGER;
END_LOCAL;
  IF NOT EXISTS(arg1) OR NOT EXISTS(arg2) OR (arg1.dim <> arg2.dim) THEN
    RETURN (?);
  ELSE
    IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.VECTOR' IN TYPEOF(
    arg1) THEN
      mag1 := arg1.magnitude;
      vec1 := arg1.orientation;
    ELSE
      mag1 := 1.0;
      vec1 := arg1;
    END_IF;
    IF 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.VECTOR' IN TYPEOF(
    arg2) THEN
      mag2 := arg2.magnitude;
      vec2 := arg2.orientation;
    ELSE
      mag2 := 1.0;
      vec2 := arg2;
    END_IF;
    vec1 := normalise(vec1);
    vec2 := normalise(vec2);
    ndim := SIZEOF(vec1.direction_ratios);
    mag := 0.0;
    res := dummy_gri||direction(vec1.direction_ratios);
    REPEAT i := 1 TO ndim;
      res.direction_ratios[i] := mag1 * vec1.direction_ratios[i] + mag2 * vec2.
      direction_ratios[i];
      mag := mag + res.direction_ratios[i] * res.direction_ratios[i];
    END_REPEAT;
    IF mag > 0.0 THEN
      result := dummy_gri||vector(res, SQRT(mag));
    ELSE
      result := dummy_gri||vector(vec1, 0.0);
    END_IF;
  END_IF;
  RETURN (result);
END_FUNCTION; (* declared in: geometry_schema *)
 
RULE compatible_dimension FOR (cartesian_point, direction, 
  representation_context, geometric_representation_context);
WHERE
  wr1 : SIZEOF(QUERY(x <* cartesian_point | SIZEOF(QUERY(y <* 
    geometric_representation_context | item_in_context(x, y) AND (HIINDEX(x.
    coordinates) <> y.coordinate_space_dimension))) > 0)) = 0;
  wr2 : SIZEOF(QUERY(x <* direction | SIZEOF(QUERY(y <* 
    geometric_representation_context | item_in_context(x, y) AND (HIINDEX(x.
    direction_ratios) <> y.coordinate_space_dimension))) > 0)) = 0;
END_RULE; (* declared in: geometry_schema *)
 
RULE product_concept_feature_requires_category FOR (product_concept_feature);
WHERE
  wr1 : SIZEOF(QUERY(pcf <* product_concept_feature | (SIZEOF([
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'INCLUSION_PRODUCT_CONCEPT_FEATURE', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'CONDITIONAL_CONCEPT_FEATURE'] * TYPEOF(pcf)) = 0) AND (SIZEOF(QUERY(aga
     <* USEDIN(pcf, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.APPLIED_GROUP_ASSIGNMENT.ITEMS'
    ) | (aga.role.name = 'specification category member') AND (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'PRODUCT_CONCEPT_FEATURE_CATEGORY' IN TYPEOF(aga.assigned_group)))) <> 1)))
     = 0;
END_RULE; (* declared in: product_class_mim *)
 
RULE product_definition_replacement_requires_effectivity_assignment FOR (
  product_definition_relationship);
WHERE
  wr1 : SIZEOF(QUERY(pdr <* product_definition_relationship | (pdr.name = 
    'definition replacement') AND (SIZEOF(USEDIN(pdr, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.APPLIED_EFFECTIVITY_ASSIGNMENT.ITEMS'
    )) = 0))) = 0;
END_RULE; (* declared in: item_definition_structure_mim *)
 
RULE restrict_assembly_category FOR (product_definition);
LOCAL
  assembly_definitions : SET OF product_definition := [];
END_LOCAL;
  assembly_definitions := QUERY(pd <* product_definition | SIZEOF(QUERY(pdca
   <* USEDIN(pd, 
  'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION_CONTEXT_ASSOCIATION.DEFINITION'
  ) | pdca.frame_of_reference.name = 'assembly definition')) > 0);
WHERE
  wr1 : SIZEOF(QUERY(pd <* assembly_definitions | NOT ('assembly' IN 
    categories_of_product(pd.formation.of_product)))) = 0;
END_RULE; (* declared in: item_definition_structure_mim *)
 
RULE restrict_classification_assignments FOR (applied_classification_assignment
  );
WHERE
  wr1 : SIZEOF(QUERY(aia <* applied_classification_assignment | NOT 
    class_assignment_is_valid(aia))) = 0;
END_RULE; (* declared in: classification_with_attributes_mim *)
 
RULE restrict_concept_feature_operator FOR (concept_feature_operator);
WHERE
  wr1 : SIZEOF(QUERY(cfo <* concept_feature_operator | NOT (cfo.name IN ['and'
    , 'or', 'oneof', 'not', 'implication']))) = 0;
  wr2 : SIZEOF(QUERY(cfo <* concept_feature_operator | (cfo.name = 
    'implication') AND (SIZEOF(QUERY(cfrwc <* USEDIN(cfo, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION.CONDITIONAL_OPERATOR'
    ) | SIZEOF(QUERY(ccf <* USEDIN(cfrwc, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CONDITIONAL_CONCEPT_FEATURE.CONDITION'
    ) | NOT ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'INCLUSION_PRODUCT_CONCEPT_FEATURE' IN TYPEOF(ccf)))) > 0)) > 0))) = 0;
  wr3 : SIZEOF(QUERY(cfo <* concept_feature_operator | (cfo.name = 'not') AND (
    SIZEOF(QUERY(cfrwc <* USEDIN(cfo, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION.CONDITIONAL_OPERATOR'
    ) | cfrwc.related_product_concept_feature :<>: cfrwc.
    relating_product_concept_feature)) > 0))) = 0;
END_RULE; (* declared in: product_class_mim *)
 
RULE restrict_group_relationship_for_classification_hierarchy FOR (
  group_relationship);
WHERE
  wr1 : SIZEOF(QUERY(gr <* group_relationship | (gr.name = 'class hierarchy') 
    AND (NOT ('AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CLASS' IN 
    TYPEOF(gr.related_group)) OR NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CLASS' IN TYPEOF(gr.
    relating_group))))) = 0;
END_RULE; (* declared in: classification_with_attributes_mim *)
 
RULE restrict_group_relationship_for_specification_category FOR (
  group_relationship);
WHERE
  wr1 : SIZEOF(QUERY(gr <* group_relationship | (gr.name = 
    'specification category hierarchy') AND (NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_CONCEPT_FEATURE_CATEGORY'
     IN TYPEOF(gr.related_group)) OR NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_CONCEPT_FEATURE_CATEGORY'
     IN TYPEOF(gr.relating_group))))) = 0;
END_RULE; (* declared in: product_class_mim *)
 
RULE restrict_language_assignment_per_attribute FOR (
  attribute_language_assignment);
WHERE
  wr1 : SIZEOF(QUERY(ala1 <* attribute_language_assignment | SIZEOF(QUERY(it
     <* ala1.items | SIZEOF(QUERY(ala2 <* USEDIN(it, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.ATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS'
    ) | (ala1\attribute_classification_assignment.attribute_name = ala2\
    attribute_classification_assignment.attribute_name) AND (ala1\
    attribute_classification_assignment.assigned_class :=: ala2\
    attribute_classification_assignment.assigned_class))) > 1)) > 0)) = 0;
END_RULE; (* declared in: multi_linguism_mim *)
 
RULE restrict_part_occurrence FOR (product_definition);
LOCAL
  part_occurrences : SET OF product_definition := QUERY(pd <* 
  product_definition | pd.frame_of_reference.name = 'part occurrence');
END_LOCAL;
WHERE
  wr1 : SIZEOF(QUERY(pd <* part_occurrences | NOT (pd.name IN [
    'single instance', 'selected instance', 'quantified instance', 
    'specified instance']))) = 0;
  wr2 : SIZEOF(QUERY(pd <* part_occurrences | (SIZEOF(QUERY(pdr <* USEDIN(pd, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION'
    ) | pdr.name = 'definition usage')) <> 1) AND (SIZEOF(QUERY(cd <* USEDIN(pd
    , 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.CONFIGURATION_DESIGN.DESIGN'
    ) | (cd.name = 'occurrence usage definition') AND NOT (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'PRODUCT_IDENTIFICATION' IN TYPEOF(cd.configuration)))) <> 1))) = 0;
  wr3 : SIZEOF(QUERY(pd <* part_occurrences | (SIZEOF(QUERY(cd <* USEDIN(pd, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION'
    ) | 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'PRODUCT_DEFINITION_USAGE' IN TYPEOF(cd))) = 0) AND (SIZEOF(USEDIN(pd, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION_OCCURRENCE_RELATIONSHIP.OCCURRENCE'
    )) = 0))) = 0;
  wr4 : SIZEOF(QUERY(pd <* part_occurrences | (pd.name = 'selected instance') 
    AND NOT valid_selected_instance_representation(pd))) = 0;
  wr5 : SIZEOF(QUERY(pd <* part_occurrences | (pd.name = 'quantified instance')
     AND (SIZEOF(QUERY(ppd <* USEDIN(pd, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PROPERTY_DEFINITION.DEFINITION'
    ) | (ppd.name = 'occurrence quantity') AND (SIZEOF(QUERY(pdr <* USEDIN(ppd
    , 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'
    ) | (pdr.used_representation.name = 'quantity') AND (SIZEOF(pdr.
    used_representation.items) = 1) AND (SIZEOF(QUERY(i <* pdr.
    used_representation.items | (
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'MEASURE_REPRESENTATION_ITEM' IN TYPEOF(i)) AND (i.name = 
    'quantity measure'))) = 1))) = 1))) = 0))) = 0;
  wr6 : SIZEOF(QUERY(pd <* part_occurrences | (pd.name = 'specified instance') 
    AND (SIZEOF(QUERY(pdor <* USEDIN(pd, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_DEFINITION_OCCURRENCE_RELATIONSHIP.OCCURRENCE'
    ) | 'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'SPECIFIED_HIGHER_USAGE_OCCURRENCE' IN TYPEOF(pdor.occurrence_usage))) = 0)
    )) = 0;
END_RULE; (* declared in: part_occurrence_mim *)
 
RULE restrict_part_occurrence_category FOR (product_definition);
LOCAL
  part_occurrences : SET OF product_definition := QUERY(pd <* 
  product_definition | pd.frame_of_reference.name = 'part occurrence');
END_LOCAL;
WHERE
  wr1 : SIZEOF(QUERY(pd <* part_occurrences | SIZEOF(QUERY(prpc <* USEDIN(pd.
    formation.of_product, 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'
    ) | prpc.name IN ['part', 'raw material', 'tool'])) = 0)) = 0;
END_RULE; (* declared in: part_occurrence_mim *)
 
RULE restrict_product_definitions_for_definition_usage FOR (
  product_definition_relationship);
WHERE
  wr1 : SIZEOF(QUERY(pdr <* product_definition_relationship | (pdr.name = 
    'definition usage') AND ((pdr.relating_product_definition.
    frame_of_reference.name <> 'part definition') OR (pdr.
    related_product_definition.frame_of_reference.name <> 'part occurrence'))))
     = 0;
END_RULE; (* declared in: part_occurrence_mim *)
 
RULE restrict_product_definitions_for_part_definition_relationship FOR (
  product_definition_relationship);
WHERE
  wr1 : SIZEOF(QUERY(pdr <* product_definition_relationship | (pdr.name IN [
    'geometrical relationship', 'definition replacement']) AND ((pdr.
    relating_product_definition.frame_of_reference.name <> 'part definition') 
    OR (pdr.related_product_definition.frame_of_reference.name <> 
    'part definition')))) = 0;
END_RULE; (* declared in: item_definition_structure_mim *)
 
RULE selected_instance_usage_requires_representation FOR (
  assembly_component_usage);
LOCAL
  selected_instance_usages : SET OF assembly_component_usage := QUERY(acr <* 
  assembly_component_usage | acr.name = 'selected instance usage');
END_LOCAL;
WHERE
  wr1 : SIZEOF(QUERY(acr <* selected_instance_usages | NOT 
    valid_selected_instance_representation(acr))) = 0;
END_RULE; (* declared in: part_occurrence_mim *)
 
RULE subtype_exclusive_measure_with_unit FOR (measure_with_unit);
WHERE
  wr1 : SIZEOF(QUERY(mwu <* measure_with_unit | NOT (SIZEOF([
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'ABSORBED_DOSE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'ACTIVITY_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'AMOUNT_OF_SUBSTANCE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'AREA_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'CAPACITANCE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'CELSIUS_TEMPERATURE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'CONDUCTANCE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'DOSE_EQUIVALENT_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'ELECTRIC_CHARGE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'ELECTRIC_CURRENT_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'ELECTROMOTIVE_FORCE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'ENERGY_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'FORCE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'FREQUENCY_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'ILLUMINANCE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'INDUCTANCE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'LENGTH_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'LUMINOUS_FLUX_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'LUMINOUS_INTENSITY_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'MAGNETIC_FLUX_DENSITY_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'MAGNETIC_FLUX_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'MASS_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'PLANE_ANGLE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'POWER_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'PRESSURE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'RATIO_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'RESISTANCE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'SOLID_ANGLE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'THERMODYNAMIC_TEMPERATURE_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'TIME_MEASURE_WITH_UNIT', 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.' + 
    'VOLUME_MEASURE_WITH_UNIT'] * TYPEOF(mwu)) <= 1))) = 0;
END_RULE; (* declared in: value_with_unit_extension_mim *)
 
RULE subtype_exclusiveness_representation_item FOR (representation_item);
WHERE
  wr1 : SIZEOF(QUERY(cri <* representation_item | NOT type_check_function(cri, 
    [
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.MEASURE_REPRESENTATION_ITEM'
    , 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.VALUE_REPRESENTATION_ITEM'
    , 
    'AP210_PHYSICAL_UNIT_PHYSICAL_CHARACTERIZATION_MIM_LF.COMPOUND_REPRESENTATION_ITEM'
    ], 3))) = 0;
END_RULE; (* declared in: extended_measure_representation_mim *)
 
RULE validate_dependently_instantiable_entity_data_types FOR (
  action_method_role, application_context, attribute_value_role, b_spline_curve
  , binary_generic_expression, bounded_curve, cartesian_transformation_operator
  , concept_feature_relationship, concept_feature_relationship_with_condition, 
  conic, definitional_representation, elementary_surface, event_occurrence_role
  , generic_expression, generic_variable, local_time, 
  multiple_arity_generic_expression, placement, point, product_context, 
  product_definition_context_role, product_definition_effectivity, 
  simple_generic_expression, solid_model, unary_generic_expression);
   (* generated by longform-generator *)
LOCAL
  number_of_input_instances : INTEGER;
  previous_in_chain : LIST OF GENERIC := [];
  set_of_input_types : SET OF STRING := [];
  all_instances : SET OF GENERIC := [];
END_LOCAL;
  all_instances := unary_generic_expression + solid_model + 
  simple_generic_expression + product_definition_effectivity + 
  product_definition_context_role + product_context + point + placement + 
  multiple_arity_generic_expression + local_time + generic_variable + 
  generic_expression + event_occurrence_role + elementary_surface + 
  definitional_representation + conic + 
  concept_feature_relationship_with_condition + concept_feature_relationship + 
  cartesian_transformation_operator + bounded_curve + binary_generic_expression
   + b_spline_curve + attribute_value_role + application_context + 
  action_method_role;
  number_of_input_instances := SIZEOF(all_instances);
  REPEAT i := 1 TO number_of_input_instances;
    set_of_input_types := set_of_input_types + TYPEOF(all_instances[i]);
  END_REPEAT;
WHERE
  wr1 : dependently_instantiated(all_instances, set_of_input_types, 
    previous_in_chain);
END_RULE;
 
END_SCHEMA;
