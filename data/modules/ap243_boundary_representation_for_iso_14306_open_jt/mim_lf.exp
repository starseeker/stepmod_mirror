(* This file was generated by the EXPRESS Pretty Printer exppp,
part of STEPcode (formerly NIST's SCL). exppp version:
git commit id: v0.7-239-g6b10d90, build timestamp 02 Oct 2013 21:07

WARNING: If you modify this file and want to save the changes,
delete this comment block or else the file will be rewritten
the next time exppp processes this schema. *)

(*
   This schema produced from Tom Thurman's long form generation on
   09092013 by Keith Hunten on October 4, 2013 
*)

SCHEMA Ap243_boundary_representation_for_iso_14306_open_jt_mim_lf;

  CONSTANT
    dummy_gri : geometric_representation_item :=
                 representation_item( '' ) || geometric_representation_item(  );
    dummy_tri : topological_representation_item :=
                 representation_item( '' ) || topological_representation_item(  );
  END_CONSTANT;

  TYPE absorbed_dose_measure = REAL;
  END_TYPE;

  TYPE acceleration_measure = REAL;
  END_TYPE;

  TYPE amount_of_substance_measure = REAL;
  END_TYPE;

  TYPE annotation_symbol_occurrence_item = SELECT
    ( annotation_symbol,
     defined_symbol );
  END_TYPE;

  TYPE area_measure = REAL;
  END_TYPE;

  TYPE axis2_placement = SELECT
    ( axis2_placement_2d,
     axis2_placement_3d );
  END_TYPE;

  TYPE b_spline_curve_form = ENUMERATION OF
    ( polyline_form,
     circular_arc,
     elliptic_arc,
     parabolic_arc,
     hyperbolic_arc,
     unspecified );
  END_TYPE;

  TYPE b_spline_surface_form = ENUMERATION OF
    ( plane_surf,
     cylindrical_surf,
     conical_surf,
     spherical_surf,
     toroidal_surf,
     surf_of_revolution,
     ruled_surf,
     generalised_cone,
     quadric_surf,
     surf_of_linear_extrusion,
     unspecified );
  END_TYPE;

  TYPE capacitance_measure = REAL;
  END_TYPE;

  TYPE celsius_temperature_measure = REAL;
  END_TYPE;

  TYPE chained_representation_link = SELECT
    ( mapped_item,
     representation_context,
     representation_relationship );
  END_TYPE;

  TYPE characterized_definition = SELECT
    ( characterized_object,
     characterized_product_definition,
     shape_definition );
  END_TYPE;

  TYPE characterized_product_definition = SELECT
    ( product_definition,
     product_definition_relationship );
  END_TYPE;

  TYPE conductance_measure = REAL;
  END_TYPE;

  TYPE context_dependent_measure = REAL;
  END_TYPE;

  TYPE count_measure = NUMBER;
  END_TYPE;

  TYPE curve_font_or_scaled_curve_font_select = SELECT
    ( curve_style_font_select,
     curve_style_font_and_scaling );
  END_TYPE;

  TYPE curve_on_surface = SELECT
    ( composite_curve_on_surface,
     pcurve,
     surface_curve );
  END_TYPE;

  TYPE curve_or_annotation_curve_occurrence = SELECT
    ( curve,
     annotation_curve_occurrence );
  END_TYPE;

  TYPE curve_or_curve_set = SELECT
    ( curve );
  END_TYPE;

  TYPE curve_or_render = SELECT
    ( curve_style );
  END_TYPE;

  TYPE curve_style_font_select = SELECT
    ( curve_style_font,
     pre_defined_curve_font,
     externally_defined_curve_font );
  END_TYPE;

  TYPE defined_symbol_select = SELECT
    ( pre_defined_symbol,
     externally_defined_symbol );
  END_TYPE;

  TYPE derived_property_select = SELECT
    ( property_definition );
  END_TYPE;

  TYPE description_attribute_select = SELECT
    ( application_context,
     external_source,
     property_definition_representation,
     representation );
  END_TYPE;

  TYPE descriptive_measure = STRING;
  END_TYPE;

  TYPE dimension_count = INTEGER;
  WHERE
    wr1: ( SELF > 0 );
  END_TYPE;

  TYPE direction_count_select = SELECT
    ( u_direction_count,
     v_direction_count );
  END_TYPE;

  TYPE dose_equivalent_measure = REAL;
  END_TYPE;

  TYPE electric_charge_measure = REAL;
  END_TYPE;

  TYPE electric_current_measure = REAL;
  END_TYPE;

  TYPE electric_potential_measure = REAL;
  END_TYPE;

  TYPE energy_measure = REAL;
  END_TYPE;

  TYPE external_identification_item = SELECT
    ( document_file,
     generic_product_definition_reference,
     trimmed_curve );
  END_TYPE;

  TYPE fill_area_style_tile_shape_select = SELECT
    ( fill_area_style_tile_curve_with_style,
     fill_area_style_tile_coloured_region,
     fill_area_style_tile_symbol_with_style,
     pre_defined_tile,
     externally_defined_tile );
  END_TYPE;

  TYPE fill_style_select = SELECT
    ( fill_area_style_colour,
     externally_defined_tile_style,
     fill_area_style_tiles,
     externally_defined_hatch_style,
     fill_area_style_hatching );
  END_TYPE;

  TYPE force_measure = REAL;
  END_TYPE;

  TYPE founded_item_select = SELECT
    ( founded_item,
     representation_item );
  END_TYPE;

  TYPE frequency_measure = REAL;
  END_TYPE;

  TYPE geometric_item_specific_usage_select = SELECT
    ( shape_aspect,
     shape_aspect_relationship );
  END_TYPE;

  TYPE geometric_model_item = SELECT
    ( geometric_representation_item );
  END_TYPE;

  TYPE groupable_item = SELECT
    ( geometric_representation_item,
     mapped_item,
     shape_representation_relationship,
     styled_item,
     topological_representation_item );
  WHERE
    wr1: ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.GROUP' IN TYPEOF( SELF ) ) );
  END_TYPE;

  TYPE id_attribute_select = SELECT
    ( application_context,
     group,
     property_definition,
     representation,
     shape_aspect,
     shape_aspect_relationship );
  END_TYPE;

  TYPE identification_item = SELECT
    ( document_file,
     representation,
     shape_representation );
  END_TYPE;

  TYPE identifier = STRING;
  END_TYPE;

  TYPE illuminance_measure = REAL;
  END_TYPE;

  TYPE inductance_measure = REAL;
  END_TYPE;

  TYPE invisible_item = SELECT
    ( presentation_layer_assignment,
     representation,
     styled_item );
  END_TYPE;

  TYPE item_identified_representation_usage_definition = SELECT
    ( represented_definition );
  END_TYPE;

  TYPE item_identified_representation_usage_select = SELECT
    ( representation_item );
  END_TYPE;

  TYPE knot_type = ENUMERATION OF
    ( uniform_knots,
     quasi_uniform_knots,
     piecewise_bezier_knots,
     unspecified );
  END_TYPE;

  TYPE label = STRING;
  END_TYPE;

  TYPE layered_item = SELECT
    ( representation_item );
  END_TYPE;

  TYPE length_measure = REAL;
  END_TYPE;

  TYPE list_of_reversible_topology_item = LIST [0 : ?] OF reversible_topology_item;
  END_TYPE;

  TYPE luminous_flux_measure = REAL;
  END_TYPE;

  TYPE luminous_intensity_measure = REAL;
  END_TYPE;

  TYPE magnetic_flux_density_measure = REAL;
  END_TYPE;

  TYPE magnetic_flux_measure = REAL;
  END_TYPE;

  TYPE marker_select = SELECT
    ( marker_type,
     pre_defined_marker );
  END_TYPE;

  TYPE marker_type = ENUMERATION OF
    ( dot,
     x,
     plus,
     asterisk,
     ring,
     square,
     triangle );
  END_TYPE;

  TYPE mass_measure = REAL;
  END_TYPE;

  TYPE measure_value = SELECT
    ( absorbed_dose_measure,
     dose_equivalent_measure,
     radioactivity_measure,
     acceleration_measure,
     amount_of_substance_measure,
     area_measure,
     celsius_temperature_measure,
     context_dependent_measure,
     count_measure,
     descriptive_measure,
     capacitance_measure,
     electric_charge_measure,
     conductance_measure,
     electric_current_measure,
     electric_potential_measure,
     energy_measure,
     magnetic_flux_density_measure,
     force_measure,
     frequency_measure,
     illuminance_measure,
     inductance_measure,
     length_measure,
     luminous_flux_measure,
     luminous_intensity_measure,
     magnetic_flux_measure,
     mass_measure,
     numeric_measure,
     non_negative_length_measure,
     parameter_value,
     plane_angle_measure,
     positive_length_measure,
     positive_plane_angle_measure,
     positive_ratio_measure,
     power_measure,
     pressure_measure,
     ratio_measure,
     resistance_measure,
     solid_angle_measure,
     thermodynamic_temperature_measure,
     time_measure,
     velocity_measure,
     volume_measure );
  END_TYPE;

  TYPE mechanical_design_geometric_presentation_representation_items = SELECT
    ( axis2_placement,
     mapped_item,
     styled_item );
  END_TYPE;

  TYPE name_attribute_select = SELECT
    ( derived_unit,
     product_definition,
     property_definition_representation );
  END_TYPE;

  TYPE non_negative_length_measure = length_measure;
  WHERE
    wr1: ( SELF >= 0 );
  END_TYPE;

  TYPE numeric_measure = NUMBER;
  END_TYPE;

  TYPE parameter_value = REAL;
  END_TYPE;

  TYPE pcurve_or_surface = SELECT
    ( pcurve,
     surface );
  END_TYPE;

  TYPE plane_angle_measure = REAL;
  END_TYPE;

  TYPE positive_length_measure = non_negative_length_measure;
  WHERE
    wr1: ( SELF > 0 );
  END_TYPE;

  TYPE positive_plane_angle_measure = plane_angle_measure;
  WHERE
    wr1: ( SELF > 0 );
  END_TYPE;

  TYPE positive_ratio_measure = ratio_measure;
  WHERE
    wr1: ( SELF > 0 );
  END_TYPE;

  TYPE power_measure = REAL;
  END_TYPE;

  TYPE preferred_surface_curve_representation = ENUMERATION OF
    ( curve_3d,
     pcurve_s1,
     pcurve_s2 );
  END_TYPE;

  TYPE presentation_style_select = SELECT
    ( point_style,
     curve_style,
     surface_style_usage,
     fill_area_style,
     externally_defined_style );
  END_TYPE;

  TYPE pressure_measure = REAL;
  END_TYPE;

  TYPE product_definition_or_reference = SELECT
    ( product_definition,
     generic_product_definition_reference );
  END_TYPE;

  TYPE radioactivity_measure = REAL;
  END_TYPE;

  TYPE ratio_measure = REAL;
  END_TYPE;

  TYPE represented_definition = SELECT
    ( general_property,
     property_definition,
     shape_aspect,
     shape_aspect_relationship );
  END_TYPE;

  TYPE resistance_measure = REAL;
  END_TYPE;

  TYPE reversible_topology = SELECT
    ( reversible_topology_item,
     list_of_reversible_topology_item,
     set_of_reversible_topology_item );
  END_TYPE;

  TYPE reversible_topology_item = SELECT
    ( edge,
     path,
     face,
     face_bound,
     closed_shell,
     open_shell );
  END_TYPE;

  TYPE role_select = SELECT
    ( group_assignment );
  END_TYPE;

  TYPE set_of_reversible_topology_item = SET [0 : ?] OF reversible_topology_item;
  END_TYPE;

  TYPE shading_surface_method = ENUMERATION OF
    ( constant_shading,
     colour_shading,
     dot_shading,
     normal_shading );
  END_TYPE;

  TYPE shape_definition = SELECT
    ( product_definition_shape,
     shape_aspect,
     shape_aspect_relationship );
  END_TYPE;

  TYPE shape_model = SELECT
    ( shape_representation );
  END_TYPE;

  TYPE shell = SELECT
    ( open_shell,
     closed_shell );
  END_TYPE;

  TYPE si_prefix = ENUMERATION OF
    ( exa,
     peta,
     tera,
     giga,
     mega,
     kilo,
     hecto,
     deca,
     deci,
     centi,
     milli,
     micro,
     nano,
     pico,
     femto,
     atto );
  END_TYPE;

  TYPE si_unit_name = ENUMERATION OF
    ( metre,
     gram,
     second,
     ampere,
     kelvin,
     mole,
     candela,
     radian,
     steradian,
     hertz,
     newton,
     pascal,
     joule,
     watt,
     coulomb,
     volt,
     farad,
     ohm,
     siemens,
     weber,
     tesla,
     henry,
     degree_celsius,
     lumen,
     lux,
     becquerel,
     gray,
     sievert );
  END_TYPE;

  TYPE size_select = SELECT
    ( positive_length_measure,
     measure_with_unit,
     descriptive_measure );
  END_TYPE;

  TYPE solid_angle_measure = REAL;
  END_TYPE;

  TYPE source_item = SELECT
    ( identifier );
  END_TYPE;

  TYPE style_context_select = SELECT
    ( group,
     presentation_layer_assignment,
     representation,
     representation_item,
     representation_relationship );
  END_TYPE;

  TYPE styled_item_target = SELECT
    ( geometric_representation_item,
     mapped_item,
     representation );
  END_TYPE;

  TYPE surface_side = ENUMERATION OF
    ( positive,
     negative,
     both );
  END_TYPE;

  TYPE surface_side_style_select = SELECT
    ( surface_side_style,
     pre_defined_surface_side_style );
  END_TYPE;

  TYPE surface_style_element_select = SELECT
    ( surface_style_fill_area,
     surface_style_boundary,
     surface_style_silhouette,
     surface_style_segmentation_curve,
     surface_style_control_grid,
     surface_style_parameter_line,
     surface_style_rendering );
  END_TYPE;

  TYPE text = STRING;
  END_TYPE;

  TYPE thermodynamic_temperature_measure = REAL;
  END_TYPE;

  TYPE time_measure = REAL;
  END_TYPE;

  TYPE transition_code = ENUMERATION OF
    ( discontinuous,
     continuous,
     cont_same_gradient,
     cont_same_gradient_same_curvature );
  END_TYPE;

  TYPE trimming_preference = ENUMERATION OF
    ( cartesian,
     parameter,
     unspecified );
  END_TYPE;

  TYPE trimming_select = SELECT
    ( cartesian_point,
     parameter_value );
  END_TYPE;

  TYPE u_direction_count = INTEGER;
  WHERE
    wr1: ( SELF > 1 );
  END_TYPE;

  TYPE unit = SELECT
    ( derived_unit,
     named_unit );
  END_TYPE;

  TYPE v_direction_count = INTEGER;
  WHERE
    wr1: ( SELF > 1 );
  END_TYPE;

  TYPE vector_or_direction = SELECT
    ( direction,
     vector );
  END_TYPE;

  TYPE velocity_measure = REAL;
  END_TYPE;

  TYPE volume_measure = REAL;
  END_TYPE;

  ENTITY absorbed_dose_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ABSORBED_DOSE_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY absorbed_dose_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.gray ) );
  END_ENTITY;

  ENTITY acceleration_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ACCELERATION_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY acceleration_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensional_exponents( 1, 0, -2, 0, 0, 0, 0 ) );
  END_ENTITY;

  ENTITY advanced_brep_shape_representation
    SUBTYPE OF ( shape_representation );
    WHERE
      wr1: ( SIZEOF( QUERY ( it <* SELF.items | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'MANIFOLD_SOLID_BREP' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACETED_BREP', 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM' , 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) = 0 );
      wr2: ( SIZEOF( QUERY ( it <* SELF.items | ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'MANIFOLD_SOLID_BREP' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM'] * TYPEOF( it ) ) 
               = 1 ) ) ) > 0 );
      wr3: ( SIZEOF( QUERY ( msb <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh <* msb_shells( msb ) | ( NOT ( SIZEOF( 
               QUERY ( fcs <* csh\connected_face_set.cfs_faces | ( NOT ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ADVANCED_FACE'  IN TYPEOF( fcs ) ) ) ) ) = 0 ) ) ) ) =
               0 ) ) ) ) = 0 );
      wr4: ( SIZEOF( QUERY ( msb <* QUERY ( it <* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'ORIENTED_CLOSED_SHELL'  IN TYPEOF( msb\manifold_solid_brep.outer ) ) ) ) = 0 );
      wr5: ( SIZEOF( QUERY ( brv <* QUERY ( it <* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'BREP_WITH_VOIDS'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh <* brv\brep_with_voids.voids | csh\
               oriented_closed_shell.orientation ) ) = 0 ) ) ) ) = 0 );
      wr6: ( SIZEOF( QUERY ( mi <* QUERY ( it <* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'ADVANCED_BREP_SHAPE_REPRESENTATION'  IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) ) ) ) =
               0 );
  END_ENTITY;

  ENTITY advanced_face
    SUBTYPE OF ( face_surface );
    WHERE
      wr1 : ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELEMENTARY_SURFACE', 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.B_SPLINE_SURFACE' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SWEPT_SURFACE' ] * TYPEOF( face_geometry ) ) = 1 );
      wr2 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( 
                NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_CURVE' IN TYPEOF( oe\oriented_edge.
                edge_element ) ) ) ) ) = 0 ) ) ) ) = 0 );
      wr3 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( 
                NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LINE', 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CONIC' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SURFACE_CURVE' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.B_SPLINE_CURVE' ] * TYPEOF( oe.edge_element\
                edge_curve.edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr4 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( 
                NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_POINT' IN TYPEOF( oe\edge.edge_start ) ) 
                AND ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CARTESIAN_POINT' IN TYPEOF( oe\edge.edge_start\
                vertex_point.vertex_geometry ) ) AND ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_POINT' 
                IN TYPEOF( oe\edge.edge_end ) ) AND ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CARTESIAN_POINT' 
                IN TYPEOF( oe\edge.edge_end\vertex_point.vertex_geometry ) ) ) ) ) ) = 0 ) ) ) ) = 0 );
      wr5 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'ORIENTED_PATH'  IN TYPEOF( elp_fbnds.bound ) ) ) ) = 0 );
      wr6 : ( ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SWEPT_SURFACE' IN TYPEOF( face_geometry ) ) ) 
                OR ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LINE', 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CONIC' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.B_SPLINE_CURVE' ] * TYPEOF( face_geometry\
                swept_surface.swept_curve ) ) = 1 ) );
      wr7 : ( SIZEOF( QUERY ( vlp_fbnds <* QUERY ( bnds <* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'VERTEX_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( NOT ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_POINT'  IN TYPEOF( vlp_fbnds\face_bound.bound\
                vertex_loop.loop_vertex ) ) AND ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CARTESIAN_POINT' IN 
                TYPEOF( vlp_fbnds\face_bound.bound\vertex_loop.loop_vertex\vertex_point.vertex_geometry ) ) ) ) ) ) = 0 );
      wr8 : ( SIZEOF( QUERY ( bnd <* bounds | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'EDGE_LOOP' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_LOOP'] * TYPEOF( bnd.bound ) ) 
                = 1 ) ) ) ) = 0 );
      wr9 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SURFACE_CURVE'  IN TYPEOF( oe\oriented_edge.
                edge_element\edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( QUERY ( sc_ag <* oe.edge_element\edge_curve.
                edge_geometry\surface_curve.associated_geometry | ( NOT ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE'  IN TYPEOF( sc_ag ) ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) 
                = 0 );
      wr10: ( ( ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SWEPT_SURFACE' IN TYPEOF( face_geometry ) ) ) 
                OR ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE' IN TYPEOF( face_geometry\
                swept_surface.swept_curve ) ) ) OR ( SIZEOF( face_geometry\swept_surface.swept_curve\polyline.points ) >= 3 ) ) 
                AND ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( NOT ( 
                SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE'  IN TYPEOF( oe\oriented_edge.edge_element\
                edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( oe\oriented_edge.edge_element\edge_curve.edge_geometry\polyline.
                points ) >= 3 ) ) ) ) ) = 0 ) ) ) ) = 0 ) );
  END_ENTITY;

  ENTITY amount_of_substance_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AMOUNT_OF_SUBSTANCE_UNIT' IN TYPEOF( SELF\
               measure_with_unit.unit_component ) );
  END_ENTITY;

  ENTITY amount_of_substance_unit
    SUBTYPE OF ( named_unit );
    WHERE
      wr1: ( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\
               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( 
               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.
               amount_of_substance_exponent = 1 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) );
  END_ENTITY;

  ENTITY annotation_curve_occurrence
    SUBTYPE OF ( annotation_occurrence );
      SELF\styled_item.item  : curve_or_curve_set;
  END_ENTITY;

  ENTITY annotation_occurrence
    SUPERTYPE OF ( ONEOF ( annotation_curve_occurrence, annotation_symbol_occurrence ) )
    SUBTYPE OF ( styled_item );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF( SELF ) );
      wr2: ( SIZEOF( QUERY ( reps <* using_representations( SELF ) | ( NOT ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ANNOTATION_REPRESENTATION_SELECT'  IN TYPEOF( reps ) ) ) ) ) 
               = 0 );
  END_ENTITY;

  ENTITY annotation_symbol
    SUBTYPE OF ( mapped_item );
      SELF\mapped_item.mapping_source  : symbol_representation_map;
      SELF\mapped_item.mapping_target  : symbol_target;
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY annotation_symbol_occurrence
    SUBTYPE OF ( annotation_occurrence );
      SELF\styled_item.item  : annotation_symbol_occurrence_item;
  END_ENTITY;

  ENTITY application_context;
      application  : label;
    DERIVE
      description  : text := get_description_value( SELF );
      id           : identifier := get_id_value( SELF );
    INVERSE
      context_elements : SET [1 : ?] OF application_context_element FOR frame_of_reference;
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'
               + 'DESCRIBED_ITEM'  ) ) <= 1 );
      wr2: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM' ) ) 
               <= 1 );
  END_ENTITY;

  ENTITY application_context_element
    SUPERTYPE OF ( ONEOF ( product_context, product_definition_context ) );
      name                : label;
      frame_of_reference  : application_context;
  END_ENTITY;

  ENTITY applied_external_identification_assignment
    SUBTYPE OF ( external_identification_assignment );
      items  : SET [1 : ?] OF external_identification_item;
  END_ENTITY;

  ENTITY applied_group_assignment
    SUBTYPE OF ( group_assignment );
      items  : SET [1 : ?] OF groupable_item;
  END_ENTITY;

  ENTITY applied_identification_assignment
    SUBTYPE OF ( identification_assignment );
      items  : SET [1 : ?] OF identification_item;
  END_ENTITY;

  ENTITY area_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AREA_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY area_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensional_exponents( 2, 0, 0, 0, 0, 0, 0 ) );
  END_ENTITY;

  ENTITY assembly_component_usage
    SUPERTYPE OF ( quantified_assembly_component_usage ANDOR ONEOF ( multi_level_reference_designator, 
        next_assembly_usage_occurrence, promissory_usage_occurrence, specified_higher_usage_occurrence ) )
    SUBTYPE OF ( product_definition_usage );
      reference_designator  : OPTIONAL identifier;
  END_ENTITY;

  ENTITY axis1_placement
    SUBTYPE OF ( placement );
      axis  : OPTIONAL direction;
    DERIVE
      z  : direction := NVL( normalise( axis ), dummy_gri || direction( [0, 0, 1] ) );
    WHERE
      wr1: ( SELF\geometric_representation_item.dim = 3 );
  END_ENTITY;

  ENTITY axis2_placement_2d
    SUBTYPE OF ( placement );
      ref_direction  : OPTIONAL direction;
    DERIVE
      p  : LIST [2 : 2] OF direction := build_2axes( ref_direction );
    WHERE
      wr1: ( SELF\geometric_representation_item.dim = 2 );
  END_ENTITY;

  ENTITY axis2_placement_3d
    SUBTYPE OF ( placement );
      axis           : OPTIONAL direction;
      ref_direction  : OPTIONAL direction;
    DERIVE
      p  : LIST [3 : 3] OF direction := build_axes( axis, ref_direction );
    WHERE
      wr1: ( SELF\placement.location.dim = 3 );
      wr2: ( ( NOT EXISTS( axis ) ) OR ( axis.dim = 3 ) );
      wr3: ( ( NOT EXISTS( ref_direction ) ) OR ( ref_direction.dim = 3 ) );
      wr4: ( ( NOT EXISTS( axis ) ) OR ( NOT EXISTS( ref_direction ) ) OR ( cross_product( axis, ref_direction ).magnitude > 0 ) );
  END_ENTITY;

  ENTITY b_spline_curve
    SUPERTYPE OF ( ONEOF ( uniform_curve, b_spline_curve_with_knots, quasi_uniform_curve, bezier_curve ) ANDOR 
        rational_b_spline_curve )
    SUBTYPE OF ( bounded_curve );
      degree               : INTEGER;
      control_points_list  : LIST [2 : ?] OF cartesian_point;
      curve_form           : b_spline_curve_form;
      closed_curve         : LOGICAL;
      self_intersect       : LOGICAL;
    DERIVE
      upper_index_on_control_points  : INTEGER := SIZEOF( control_points_list ) - 1;
      control_points                 : ARRAY [0 : upper_index_on_control_points] OF cartesian_point := list_to_array( 
                                         control_points_list, 0, upper_index_on_control_points );
    WHERE
      wr1: ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.UNIFORM_CURVE' IN TYPEOF( SELF ) ) OR ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.QUASI_UNIFORM_CURVE'  IN TYPEOF( SELF ) ) OR ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.BEZIER_CURVE'  IN TYPEOF( SELF ) ) OR ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.B_SPLINE_CURVE_WITH_KNOTS'  IN TYPEOF( SELF ) ) );
  END_ENTITY;

  ENTITY b_spline_curve_with_knots
    SUBTYPE OF ( b_spline_curve );
      knot_multiplicities  : LIST [2 : ?] OF INTEGER;
      knots                : LIST [2 : ?] OF parameter_value;
      knot_spec            : knot_type;
    DERIVE
      upper_index_on_knots  : INTEGER := SIZEOF( knots );
    WHERE
      wr1: constraints_param_b_spline( degree, upper_index_on_knots, upper_index_on_control_points, knot_multiplicities, knots );
      wr2: ( SIZEOF( knot_multiplicities ) = upper_index_on_knots );
  END_ENTITY;

  ENTITY b_spline_surface
    SUPERTYPE OF ( ONEOF ( b_spline_surface_with_knots, uniform_surface, quasi_uniform_surface, bezier_surface ) ANDOR 
        rational_b_spline_surface )
    SUBTYPE OF ( bounded_surface );
      u_degree             : INTEGER;
      v_degree             : INTEGER;
      control_points_list  : LIST [2 : ?] OF LIST [2 : ?] OF cartesian_point;
      surface_form         : b_spline_surface_form;
      u_closed             : LOGICAL;
      v_closed             : LOGICAL;
      self_intersect       : LOGICAL;
    DERIVE
      u_upper         : INTEGER := SIZEOF( control_points_list ) - 1;
      v_upper         : INTEGER := SIZEOF( control_points_list[1] ) - 1;
      control_points  : ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF cartesian_point := make_array_of_array( control_points_list, 
                          0, u_upper, 0, v_upper );
    WHERE
      wr1: ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.UNIFORM_SURFACE' IN TYPEOF( SELF ) ) OR ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.QUASI_UNIFORM_SURFACE'  IN TYPEOF( SELF ) ) OR ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.BEZIER_SURFACE'  IN TYPEOF( SELF ) ) OR ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.B_SPLINE_SURFACE_WITH_KNOTS'  IN TYPEOF( SELF ) ) );
  END_ENTITY;

  ENTITY b_spline_surface_with_knots
    SUBTYPE OF ( b_spline_surface );
      u_multiplicities  : LIST [2 : ?] OF INTEGER;
      v_multiplicities  : LIST [2 : ?] OF INTEGER;
      u_knots           : LIST [2 : ?] OF parameter_value;
      v_knots           : LIST [2 : ?] OF parameter_value;
      knot_spec         : knot_type;
    DERIVE
      knot_u_upper  : INTEGER := SIZEOF( u_knots );
      knot_v_upper  : INTEGER := SIZEOF( v_knots );
    WHERE
      wr1: constraints_param_b_spline( SELF\b_spline_surface.u_degree, knot_u_upper, SELF\b_spline_surface.u_upper, 
               u_multiplicities, u_knots );
      wr2: constraints_param_b_spline( SELF\b_spline_surface.v_degree, knot_v_upper, SELF\b_spline_surface.v_upper, 
               v_multiplicities, v_knots );
      wr3: ( SIZEOF( u_multiplicities ) = knot_u_upper );
      wr4: ( SIZEOF( v_multiplicities ) = knot_v_upper );
  END_ENTITY;

  ENTITY bezier_curve
    SUBTYPE OF ( b_spline_curve );
  END_ENTITY;

  ENTITY bezier_surface
    SUBTYPE OF ( b_spline_surface );
  END_ENTITY;

  ENTITY bounded_curve
    SUPERTYPE OF ( ONEOF ( polyline, b_spline_curve, trimmed_curve, composite_curve ) )
    SUBTYPE OF ( curve );
  END_ENTITY;

  ENTITY bounded_surface
    SUBTYPE OF ( surface );
  END_ENTITY;

  ENTITY brep_with_voids
    SUBTYPE OF ( manifold_solid_brep );
      voids  : SET [1 : ?] OF oriented_closed_shell;
  END_ENTITY;

  ENTITY capacitance_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CAPACITANCE_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY capacitance_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.farad ) );
  END_ENTITY;

  ENTITY cartesian_point
    SUBTYPE OF ( point );
      coordinates  : LIST [1 : 3] OF length_measure;
  END_ENTITY;

  ENTITY cartesian_transformation_operator
    SUPERTYPE OF ( ONEOF ( cartesian_transformation_operator_2d, cartesian_transformation_operator_3d ) )
    SUBTYPE OF ( functionally_defined_transformation, geometric_representation_item );
      axis1         : OPTIONAL direction;
      axis2         : OPTIONAL direction;
      local_origin  : cartesian_point;
      scale         : OPTIONAL REAL;
    DERIVE
      scl  : REAL := NVL( scale, 1 );
    WHERE
      wr1: ( scl > 0 );
  END_ENTITY;

  ENTITY cartesian_transformation_operator_2d
    SUBTYPE OF ( cartesian_transformation_operator );
    DERIVE
      u  : LIST [2 : 2] OF direction := base_axis( 2, SELF\cartesian_transformation_operator.axis1, SELF\
             cartesian_transformation_operator.axis2, ? );
    WHERE
      wr1: ( SELF\geometric_representation_item.dim = 2 );
  END_ENTITY;

  ENTITY cartesian_transformation_operator_3d
    SUBTYPE OF ( cartesian_transformation_operator );
      axis3  : OPTIONAL direction;
    DERIVE
      u  : LIST [3 : 3] OF direction := base_axis( 3, SELF\cartesian_transformation_operator.axis1, SELF\
             cartesian_transformation_operator.axis2, axis3 );
    WHERE
      wr1: ( SELF\geometric_representation_item.dim = 3 );
  END_ENTITY;

  ENTITY celsius_temperature_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.THERMODYNAMIC_TEMPERATURE_UNIT' IN TYPEOF( SELF\
               measure_with_unit.unit_component ) );
  END_ENTITY;

  ENTITY chain_based_geometric_item_specific_usage
    SUBTYPE OF ( geometric_item_specific_usage, chain_based_item_identified_representation_usage );
  END_ENTITY;

  ENTITY chain_based_item_identified_representation_usage
    SUBTYPE OF ( item_identified_representation_usage );
      nodes            : LIST [2 : ?] OF UNIQUE representation;
      undirected_link  : LIST [1 : ?] OF chained_representation_link;
    DERIVE
      root                                   : representation := nodes[1];
      SELF\item_identified_representation_usage.used_representation : representation := nodes[HIINDEX( nodes )];
      directed_link                          : LIST [1 : ?] OF representation_relationship := get_directed_link( nodes, 
                                                 undirected_link );
      leaf                                   : representation := SELF\item_identified_representation_usage.used_representation;
    WHERE
      wr1: EXISTS( directed_link );
  END_ENTITY;

  ENTITY characterized_object;
      name         : label;
      description  : OPTIONAL text;
  END_ENTITY;

  ENTITY circle
    SUBTYPE OF ( conic );
      radius  : positive_length_measure;
  END_ENTITY;

  ENTITY closed_shell
    SUBTYPE OF ( connected_face_set );
  END_ENTITY;

  ENTITY colour;
  END_ENTITY;

  ENTITY colour_rgb
    SUBTYPE OF ( colour_specification );
      red    : REAL;
      green  : REAL;
      blue   : REAL;
    WHERE
      wr1: ( ( 0 <= red ) AND ( red <= 1 ) );
      wr2: ( ( 0 <= green ) AND ( green <= 1 ) );
      wr3: ( ( 0 <= blue ) AND ( blue <= 1 ) );
  END_ENTITY;

  ENTITY colour_specification
    SUBTYPE OF ( colour );
      name  : label;
  END_ENTITY;

  ENTITY composite_curve
    SUBTYPE OF ( bounded_curve );
      segments        : LIST [1 : ?] OF composite_curve_segment;
      self_intersect  : LOGICAL;
    DERIVE
      n_segments    : INTEGER := SIZEOF( segments );
      closed_curve  : LOGICAL := segments[n_segments].transition <> discontinuous;
    WHERE
      wr1: ( ( ( NOT closed_curve ) AND ( SIZEOF( QUERY ( temp <* segments | ( temp.transition = discontinuous ) ) ) = 1 ) ) OR 
               ( closed_curve AND ( SIZEOF( QUERY ( temp <* segments | ( temp.transition = discontinuous ) ) ) = 0 ) ) );
  END_ENTITY;

  ENTITY composite_curve_on_surface
    SUBTYPE OF ( composite_curve );
    DERIVE
      basis_surface  : SET [0 : 2] OF surface := get_basis_surface( SELF );
    WHERE
      wr1: ( SIZEOF( basis_surface ) > 0 );
      wr2: constraints_composite_curve_on_surface( SELF );
  END_ENTITY;

  ENTITY composite_curve_segment
    SUBTYPE OF ( founded_item );
      transition    : transition_code;
      same_sense    : BOOLEAN;
      parent_curve  : curve;
    INVERSE
      using_curves : BAG [1 : ?] OF composite_curve FOR segments;
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.BOUNDED_CURVE' IN TYPEOF( parent_curve ) );
  END_ENTITY;

  ENTITY conductance_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CONDUCTANCE_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY conductance_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.siemens ) );
  END_ENTITY;

  ENTITY conic
    SUPERTYPE OF ( ONEOF ( circle, ellipse, hyperbola, parabola ) )
    SUBTYPE OF ( curve );
      position  : axis2_placement;
  END_ENTITY;

  ENTITY conical_surface
    SUBTYPE OF ( elementary_surface );
      radius      : length_measure;
      semi_angle  : plane_angle_measure;
    WHERE
      wr1: ( radius >= 0 );
  END_ENTITY;

  ENTITY connected_edge_set
    SUBTYPE OF ( topological_representation_item );
      ces_edges  : SET [1 : ?] OF edge;
  END_ENTITY;

  ENTITY connected_face_set
    SUPERTYPE OF ( ONEOF ( closed_shell, open_shell ) )
    SUBTYPE OF ( topological_representation_item );
      cfs_faces  : SET [1 : ?] OF face;
  END_ENTITY;

  ENTITY context_dependent_over_riding_styled_item
    SUBTYPE OF ( over_riding_styled_item );
      style_context  : LIST [1 : ?] OF style_context_select;
    WHERE
      wr1: ( ( SIZEOF( QUERY ( sc <* SELF.style_context | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'REPRESENTATION_ITEM'  IN TYPEOF( sc ) ) ) ) = 1 ) OR ( SIZEOF( QUERY ( sc <* SELF.style_context | ( ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM'  IN TYPEOF( sc ) ) OR ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION_RELATIONSHIP'  IN TYPEOF( sc ) ) ) ) ) 
               = SIZEOF( style_context ) ) );
  END_ENTITY;

  ENTITY context_dependent_unit
    SUBTYPE OF ( named_unit );
      name  : label;
  END_ENTITY;

  ENTITY conversion_based_unit
    SUBTYPE OF ( named_unit );
      name               : label;
      conversion_factor  : measure_with_unit;
    WHERE
      wr1: ( SELF\named_unit.dimensions = derive_dimensional_exponents( conversion_factor\measure_with_unit.unit_component ) );
  END_ENTITY;

  ENTITY curve
    SUPERTYPE OF ( ONEOF ( line, conic, pcurve, surface_curve ) )
    SUBTYPE OF ( geometric_representation_item );
  END_ENTITY;

  ENTITY curve_style
    SUBTYPE OF ( founded_item );
      name          : label;
      curve_font    : curve_font_or_scaled_curve_font_select;
      curve_width   : size_select;
      curve_colour  : colour;
  END_ENTITY;

  ENTITY curve_style_font
    SUBTYPE OF ( founded_item );
      name          : label;
      pattern_list  : LIST [1 : ?] OF curve_style_font_pattern;
  END_ENTITY;

  ENTITY curve_style_font_and_scaling
    SUBTYPE OF ( founded_item );
      name                : label;
      curve_font          : curve_style_font_select;
      curve_font_scaling  : REAL;
  END_ENTITY;

  ENTITY curve_style_font_pattern
    SUBTYPE OF ( founded_item );
      visible_segment_length    : positive_length_measure;
      invisible_segment_length  : positive_length_measure;
  END_ENTITY;

  ENTITY cylindrical_surface
    SUBTYPE OF ( elementary_surface );
      radius  : positive_length_measure;
  END_ENTITY;

  ENTITY defined_symbol
    SUBTYPE OF ( geometric_representation_item );
      definition  : defined_symbol_select;
      target      : symbol_target;
  END_ENTITY;

  ENTITY definitional_representation
    SUBTYPE OF ( representation );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PARAMETRIC_REPRESENTATION_CONTEXT' IN TYPEOF( SELF\
               representation.context_of_items ) );
  END_ENTITY;

  ENTITY definitional_representation_relationship
    SUBTYPE OF ( representation_relationship );
    WHERE
      wr1: acyclic_representation_relationship( SELF, [SELF\representation_relationship.rep_2], 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'REPRESENTATION' );
  END_ENTITY;

  ENTITY degenerate_toroidal_surface
    SUBTYPE OF ( toroidal_surface );
      select_outer  : BOOLEAN;
    WHERE
      wr1: ( major_radius < minor_radius );
  END_ENTITY;

  ENTITY derived_unit
    SUPERTYPE OF ( ONEOF ( absorbed_dose_unit, acceleration_unit, radioactivity_unit, area_unit, capacitance_unit, 
        dose_equivalent_unit, electric_charge_unit, conductance_unit, electric_potential_unit, energy_unit, 
        magnetic_flux_density_unit, force_unit, frequency_unit, illuminance_unit, inductance_unit, magnetic_flux_unit, power_unit, 
        pressure_unit, resistance_unit, velocity_unit, volume_unit ) );
      elements  : SET [1 : ?] OF derived_unit_element;
    DERIVE
      name  : label := get_name_value( SELF );
    WHERE
      wr1: ( ( SIZEOF( elements ) > 1 ) OR ( ( SIZEOF( elements ) = 1 ) AND ( elements[1].exponent <> 1 ) ) );
      wr2: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'NAME_ATTRIBUTE.NAMED_ITEM' ) ) 
               <= 1 );
  END_ENTITY;

  ENTITY derived_unit_element;
      unit      : named_unit;
      exponent  : REAL;
  END_ENTITY;

  ENTITY description_attribute;
      attribute_value  : text;
      described_item   : description_attribute_select;
  END_ENTITY;

  ENTITY descriptive_representation_item
    SUBTYPE OF ( representation_item );
      description  : text;
  END_ENTITY;

  ENTITY dimensional_exponents;
      length_exponent                     : REAL;
      mass_exponent                       : REAL;
      time_exponent                       : REAL;
      electric_current_exponent           : REAL;
      thermodynamic_temperature_exponent  : REAL;
      amount_of_substance_exponent        : REAL;
      luminous_intensity_exponent         : REAL;
  END_ENTITY;

  ENTITY direction
    SUBTYPE OF ( geometric_representation_item );
      direction_ratios  : LIST [2 : 3] OF REAL;
    WHERE
      wr1: ( SIZEOF( QUERY ( tmp <* direction_ratios | ( tmp <> 0 ) ) ) > 0 );
  END_ENTITY;

  ENTITY document;
      id           : identifier;
      name         : label;
      description  : OPTIONAL text;
      kind         : document_type;
    INVERSE
      representation_types : SET [0 : ?] OF document_representation_type FOR represented_document;
  END_ENTITY;

  ENTITY document_file
    SUBTYPE OF ( document, characterized_object );
    WHERE
      wr1: ( SELF\characterized_object.name = '' );
      wr2: ( NOT EXISTS( SELF\characterized_object.description ) );
      wr3: ( SIZEOF( QUERY ( drt <* SELF\document.representation_types | ( drt.name IN [ 'digital', 'physical'] ) ) ) = 1 );
  END_ENTITY;

  ENTITY document_representation_type;
      name                  : label;
      represented_document  : document;
  END_ENTITY;

  ENTITY document_type;
      product_data_type  : label;
  END_ENTITY;

  ENTITY dose_equivalent_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.DOSE_EQUIVALENT_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY dose_equivalent_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.sievert ) );
  END_ENTITY;

  ENTITY draughting_pre_defined_colour
    SUBTYPE OF ( pre_defined_colour );
    WHERE
      wr1: ( SELF.name IN [ 'red', 'green', 'blue', 'yellow', 'magenta', 'cyan', 'black', 'white'] );
  END_ENTITY;

  ENTITY draughting_pre_defined_curve_font
    SUBTYPE OF ( pre_defined_curve_font );
    WHERE
      wr1: ( SELF.name IN [ 'continuous', 'chain', 'chain double dash', 'dashed', 'dotted'] );
  END_ENTITY;

  ENTITY edge
    SUPERTYPE OF ( ONEOF ( edge_curve, oriented_edge ) )
    SUBTYPE OF ( topological_representation_item );
      edge_start  : vertex;
      edge_end    : vertex;
  END_ENTITY;

  ENTITY edge_curve
    SUBTYPE OF ( edge, geometric_representation_item );
      edge_geometry  : curve;
      same_sense     : BOOLEAN;
  END_ENTITY;

  ENTITY edge_loop
    SUBTYPE OF ( loop, path );
    DERIVE
      ne  : INTEGER := SIZEOF( SELF\path.edge_list );
    WHERE
      wr1: ( SELF\path.edge_list[1].edge_start :=: SELF\path.edge_list[ne].edge_end );
  END_ENTITY;

  ENTITY electric_charge_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELECTRIC_CHARGE_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY electric_charge_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.coulomb ) );
  END_ENTITY;

  ENTITY electric_current_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELECTRIC_CURRENT_UNIT' IN TYPEOF( SELF\measure_with_unit
               .unit_component ) );
  END_ENTITY;

  ENTITY electric_current_unit
    SUBTYPE OF ( named_unit );
    WHERE
      wr1: ( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\
               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 1 ) AND ( 
               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.
               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) );
  END_ENTITY;

  ENTITY electric_potential_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELECTRIC_POTENTIAL_UNIT' IN TYPEOF( SELF\
               measure_with_unit.unit_component ) );
  END_ENTITY;

  ENTITY electric_potential_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.volt ) );
  END_ENTITY;

  ENTITY elementary_brep_shape_representation
    SUBTYPE OF ( shape_representation );
    WHERE
      wr1 : ( SIZEOF( QUERY ( it <* SELF.items | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'MANIFOLD_SOLID_BREP' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACETED_BREP', 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) = 
                0 );
      wr2 : ( SIZEOF( QUERY ( it <* SELF.items | ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'MANIFOLD_SOLID_BREP' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM'] * TYPEOF( it ) ) 
                = 1 ) ) ) > 0 );
      wr3 : ( SIZEOF( QUERY ( msb <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh <* msb_shells( msb ) | ( NOT ( 
                SIZEOF( QUERY ( fcs <* csh.cfs_faces | ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'FACE_SURFACE'  IN TYPEOF( fcs ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr4 : ( SIZEOF( QUERY ( msb <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh <* msb_shells( msb ) | ( NOT ( 
                SIZEOF( QUERY ( fcs <* csh\connected_face_set.cfs_faces | ( NOT ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELEMENTARY_SURFACE'  IN TYPEOF( fcs\face_surface.
                face_geometry ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr5 : ( SIZEOF( QUERY ( msb <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh <* msb_shells( msb ) | ( NOT ( 
                SIZEOF( QUERY ( fcs <* csh\connected_face_set.cfs_faces | ( NOT ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fcs
                .bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | 
                ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( NOT ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe.edge_element ) ) ) ) ) = 0 ) ) ) ) 
                = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr6 : ( SIZEOF( QUERY ( msb <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh <* msb_shells( msb ) | ( NOT ( 
                SIZEOF( QUERY ( fcs <* csh\connected_face_set.cfs_faces | ( NOT ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fcs
                .bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | 
                ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( NOT ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LINE' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CONIC' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE' ] * TYPEOF( oe.edge_element\edge_curve.
                edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr7 : ( SIZEOF( QUERY ( msb <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh <* msb_shells( msb ) | ( NOT ( 
                SIZEOF( QUERY ( fcs <* csh\connected_face_set.cfs_faces | ( NOT ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fcs
                .bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | 
                ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( NOT ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe.edge_start ) ) AND ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe.edge_end ) ) ) ) ) ) = 0 ) ) ) ) 
                = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr8 : ( SIZEOF( QUERY ( msb <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh <* msb_shells( msb ) | ( NOT ( 
                SIZEOF( QUERY ( fcs <* csh\connected_face_set.cfs_faces | ( NOT ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fcs
                .bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | 
                ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE'  IN TYPEOF( oe.edge_element\edge_curve.
                edge_geometry ) ) AND ( NOT ( SIZEOF( oe\oriented_edge.edge_element\edge_curve.edge_geometry\polyline.points ) >= 
                3 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr9 : ( SIZEOF( QUERY ( msb <* QUERY ( it <* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'ORIENTED_CLOSED_SHELL'  IN TYPEOF( msb\manifold_solid_brep.outer ) ) ) ) = 0 );
      wr10: ( SIZEOF( QUERY ( brv <* QUERY ( it <* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'BREP_WITH_VOIDS'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh <* brv\brep_with_voids.voids | csh\
                oriented_closed_shell.orientation ) ) = 0 ) ) ) ) = 0 );
      wr11: ( SIZEOF( QUERY ( mi <* QUERY ( it <* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'ELEMENTARY_BREP_SHAPE_REPRESENTATION'  IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) ) ) ) 
                = 0 );
      wr12: ( SIZEOF( QUERY ( msb <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh <* msb_shells( msb ) | ( NOT ( 
                SIZEOF( QUERY ( fcs <* csh\connected_face_set.cfs_faces | ( NOT ( SIZEOF( QUERY ( vlp_fbnds <* QUERY ( bnds <* fcs
                .bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_LOOP' IN TYPEOF( bnds.bound ) ) )
                | ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_POINT' IN TYPEOF( vlp_fbnds\
                face_bound.bound\vertex_loop.loop_vertex ) ) AND ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'CARTESIAN_POINT'  IN TYPEOF( vlp_fbnds\face_bound.bound\vertex_loop.loop_vertex\vertex_point.vertex_geometry ) ) ) ) ) ) 
                = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
  END_ENTITY;

  ENTITY elementary_surface
    SUPERTYPE OF ( ONEOF ( plane, cylindrical_surface, conical_surface, spherical_surface, toroidal_surface ) )
    SUBTYPE OF ( surface );
      position  : axis2_placement_3d;
  END_ENTITY;

  ENTITY ellipse
    SUBTYPE OF ( conic );
      semi_axis_1  : positive_length_measure;
      semi_axis_2  : positive_length_measure;
  END_ENTITY;

  ENTITY energy_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ENERGY_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY energy_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.joule ) );
  END_ENTITY;

  ENTITY external_identification_assignment
    ABSTRACT SUPERTYPE
    SUBTYPE OF ( identification_assignment );
      source  : external_source;
  END_ENTITY;

  ENTITY external_source;
      source_id  : source_item;
    DERIVE
      description  : text := get_description_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'
               + 'DESCRIBED_ITEM'  ) ) <= 1 );
  END_ENTITY;

  ENTITY externally_defined_colour
    SUBTYPE OF ( colour_specification, externally_defined_item );
  END_ENTITY;

  ENTITY externally_defined_curve_font
    SUBTYPE OF ( externally_defined_item );
  END_ENTITY;

  ENTITY externally_defined_hatch_style
    SUBTYPE OF ( externally_defined_item, geometric_representation_item );
  END_ENTITY;

  ENTITY externally_defined_item;
      item_id  : source_item;
      source   : external_source;
  END_ENTITY;

  ENTITY externally_defined_marker
    SUBTYPE OF ( externally_defined_symbol, pre_defined_marker );
  END_ENTITY;

  ENTITY externally_defined_style
    SUBTYPE OF ( externally_defined_item, founded_item );
  END_ENTITY;

  ENTITY externally_defined_symbol
    SUBTYPE OF ( externally_defined_item );
  END_ENTITY;

  ENTITY externally_defined_terminator_symbol
    SUBTYPE OF ( externally_defined_symbol );
  END_ENTITY;

  ENTITY externally_defined_text_font
    SUBTYPE OF ( externally_defined_item );
  END_ENTITY;

  ENTITY externally_defined_tile
    SUBTYPE OF ( externally_defined_item );
  END_ENTITY;

  ENTITY externally_defined_tile_style
    SUBTYPE OF ( externally_defined_item, geometric_representation_item );
  END_ENTITY;

  ENTITY face
    SUPERTYPE OF ( ONEOF ( face_surface, oriented_face ) )
    SUBTYPE OF ( topological_representation_item );
      bounds  : SET [1 : ?] OF face_bound;
    WHERE
      wr1: ( NOT mixed_loop_type_set( list_to_set( list_face_loops( SELF ) ) ) );
      wr2: ( SIZEOF( QUERY ( temp <* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACE_OUTER_BOUND' IN 
               TYPEOF( temp ) ) ) ) <= 1 );
  END_ENTITY;

  ENTITY face_bound
    SUBTYPE OF ( topological_representation_item );
      bound        : loop;
      orientation  : BOOLEAN;
  END_ENTITY;

  ENTITY face_outer_bound
    SUBTYPE OF ( face_bound );
  END_ENTITY;

  ENTITY face_surface
    SUBTYPE OF ( face, geometric_representation_item );
      face_geometry  : surface;
      same_sense     : BOOLEAN;
    WHERE
      wr1: ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_SURFACE' IN TYPEOF( face_geometry ) ) );
  END_ENTITY;

  ENTITY faceted_brep
    SUBTYPE OF ( manifold_solid_brep );
  END_ENTITY;

  ENTITY faceted_brep_shape_representation
    SUBTYPE OF ( shape_representation );
    WHERE
      wr1: ( SIZEOF( QUERY ( it <* items | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'FACETED_BREP' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM', 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) = 0 );
      wr2: ( SIZEOF( QUERY ( it <* items | ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACETED_BREP', 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM' ] * TYPEOF( it ) ) = 1 ) ) ) > 0 );
      wr3: ( SIZEOF( QUERY ( fbrep <* QUERY ( it <* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'FACETED_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh <* msb_shells( fbrep ) | ( NOT ( SIZEOF( 
               QUERY ( fcs <* csh\connected_face_set.cfs_faces | ( NOT ( ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACE_SURFACE'  IN TYPEOF( fcs ) ) AND ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PLANE'  IN TYPEOF( fcs\face_surface.face_geometry ) ) 
               AND ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CARTESIAN_POINT' IN TYPEOF( fcs\face_surface.
               face_geometry\elementary_surface.position.location ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr4: ( SIZEOF( QUERY ( fbrep <* QUERY ( it <* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'FACETED_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh <* msb_shells( fbrep ) | ( NOT ( SIZEOF( 
               QUERY ( fcs <* csh\connected_face_set.cfs_faces | ( NOT ( SIZEOF( QUERY ( bnds <* fcs.bounds | ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACE_OUTER_BOUND'  IN TYPEOF( bnds ) ) ) ) = 1 ) ) ) ) 
               = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr5: ( SIZEOF( QUERY ( msb <* QUERY ( it <* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'ORIENTED_CLOSED_SHELL'  IN TYPEOF( msb\manifold_solid_brep.outer ) ) ) ) = 0 );
      wr6: ( SIZEOF( QUERY ( brv <* QUERY ( it <* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'BREP_WITH_VOIDS'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh <* brv\brep_with_voids.voids | csh\
               oriented_closed_shell.orientation ) ) = 0 ) ) ) ) = 0 );
      wr7: ( SIZEOF( QUERY ( mi <* QUERY ( it <* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'FACETED_BREP_SHAPE_REPRESENTATION'  IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) ) ) ) = 
               0 );
  END_ENTITY;

  ENTITY fill_area_style
    SUBTYPE OF ( founded_item );
      name         : label;
      fill_styles  : SET [1 : ?] OF fill_style_select;
    WHERE
      wr1: ( SIZEOF( QUERY ( fill_style <* SELF.fill_styles | ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' +
               'FILL_AREA_STYLE_COLOUR' ) IN TYPEOF( fill_style ) ) ) ) <= 1 );
  END_ENTITY;

  ENTITY fill_area_style_colour;
      name         : label;
      fill_colour  : colour;
  END_ENTITY;

  ENTITY fill_area_style_hatching
    SUBTYPE OF ( geometric_representation_item );
      hatch_line_appearance          : curve_style;
      start_of_next_hatch_line       : one_direction_repeat_factor;
      point_of_reference_hatch_line  : cartesian_point;
      pattern_start                  : cartesian_point;
      hatch_line_angle               : plane_angle_measure;
  END_ENTITY;

  ENTITY fill_area_style_tile_coloured_region
    SUBTYPE OF ( geometric_representation_item );
      closed_curve   : curve_or_annotation_curve_occurrence;
      region_colour  : colour;
    WHERE
      wr1: ( ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE' IN TYPEOF( closed_curve ) ) ) OR ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CIRCLE'  IN TYPEOF( closed_curve ) ) OR ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELLIPSE'  IN TYPEOF( closed_curve ) ) OR ( ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.B_SPLINE_CURVE'  IN TYPEOF( closed_curve ) ) AND ( 
               closed_curve\b_spline_curve.closed_curve = TRUE ) ) OR ( ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COMPOSITE_CURVE'  IN TYPEOF( closed_curve ) ) AND ( 
               closed_curve\composite_curve.closed_curve = TRUE ) ) OR ( ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE'  IN TYPEOF( closed_curve ) ) AND ( 
               closed_curve\polyline.points[LOINDEX( closed_curve\polyline.points )] = closed_curve\polyline.points[HIINDEX( 
               closed_curve\polyline.points )] ) ) );
  END_ENTITY;

  ENTITY fill_area_style_tile_curve_with_style
    SUBTYPE OF ( geometric_representation_item );
      styled_curve  : annotation_curve_occurrence;
  END_ENTITY;

  ENTITY fill_area_style_tile_symbol_with_style
    SUBTYPE OF ( geometric_representation_item );
      symbol  : annotation_symbol_occurrence;
  END_ENTITY;

  ENTITY fill_area_style_tiles
    SUBTYPE OF ( geometric_representation_item );
      tiling_pattern  : two_direction_repeat_factor;
      tiles           : SET [1 : ?] OF fill_area_style_tile_shape_select;
      tiling_scale    : positive_ratio_measure;
  END_ENTITY;

  ENTITY force_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FORCE_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY force_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.newton ) );
  END_ENTITY;

  ENTITY founded_item
    SUPERTYPE OF ( ONEOF ( curve_style, curve_style_font, curve_style_font_and_scaling, curve_style_font_pattern, 
        externally_defined_style, fill_area_style, point_style, presentation_style_assignment, surface_side_style, 
        surface_style_boundary, surface_style_control_grid, surface_style_fill_area, surface_style_parameter_line, 
        surface_style_segmentation_curve, surface_style_silhouette, surface_style_usage ) );
    DERIVE
      users  : SET [0 : ?] OF founded_item_select := using_items( SELF, [] );
    WHERE
      wr1: ( SIZEOF( users ) > 0 );
      wr2: ( NOT ( SELF IN users ) );
  END_ENTITY;

  ENTITY frequency_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FREQUENCY_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY frequency_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.hertz ) );
  END_ENTITY;

  ENTITY functionally_defined_transformation;
      name         : label;
      description  : OPTIONAL text;
  END_ENTITY;

  ENTITY general_property;
      id           : identifier;
      name         : label;
      description  : OPTIONAL text;
  END_ENTITY;

  ENTITY general_property_association;
      name                : label;
      description         : OPTIONAL text;
      base_definition     : general_property;
      derived_definition  : derived_property_select;
    WHERE
      wr1: ( SIZEOF( USEDIN( derived_definition, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
               'GENERAL_PROPERTY_ASSOCIATION.'  + 'DERIVED_DEFINITION' ) ) = 1 );
      wr2: ( derived_definition.name = base_definition.name );
  END_ENTITY;

  ENTITY general_property_relationship;
      name               : label;
      description        : OPTIONAL text;
      relating_property  : general_property;
      related_property   : general_property;
  END_ENTITY;

  ENTITY generic_product_definition_reference
    ABSTRACT SUPERTYPE OF ( ONEOF ( product_definition_reference, product_definition_reference_with_local_representation ) );
      source  : external_source;
  END_ENTITY;

  ENTITY geometric_item_specific_usage
    SUBTYPE OF ( item_identified_representation_usage );
      SELF\item_identified_representation_usage.definition : geometric_item_specific_usage_select;
      SELF\item_identified_representation_usage.used_representation : shape_model;
      SELF\item_identified_representation_usage.identified_item : geometric_model_item;
    UNIQUE
      ur1 : SELF\item_identified_representation_usage.definition;
  END_ENTITY;

  ENTITY geometric_model_element_relationship
    SUBTYPE OF ( geometric_representation_item, representation_item_relationship );
      SELF\representation_item_relationship.relating_representation_item : geometric_representation_item;
      SELF\representation_item_relationship.related_representation_item : geometric_representation_item;
    UNIQUE
      ur1 : relating_representation_item, related_representation_item;
    WHERE
      wr1: ( SELF\representation_item_relationship.relating_representation_item :<>: SELF\representation_item_relationship.
               related_representation_item );
  END_ENTITY;

  ENTITY geometric_representation_context
    SUBTYPE OF ( representation_context );
      coordinate_space_dimension  : dimension_count;
  END_ENTITY;

  ENTITY geometric_representation_item
    SUPERTYPE OF ( ONEOF ( point, direction, vector, placement, cartesian_transformation_operator, curve, surface, edge_curve, 
        face_surface, poly_loop, vertex_point, solid_model ) ANDOR ONEOF ( curve, defined_symbol, point, symbol_target ) ANDOR 
        ONEOF ( curve, externally_defined_hatch_style, externally_defined_tile_style, fill_area_style_hatching, 
        fill_area_style_tile_coloured_region, fill_area_style_tile_curve_with_style, fill_area_style_tile_symbol_with_style, 
        fill_area_style_tiles, one_direction_repeat_factor, point, vector ) ANDOR ONEOF ( curve, planar_extent ) )
    SUBTYPE OF ( representation_item );
    DERIVE
      dim  : dimension_count := dimension_of( SELF );
    WHERE
      wr1: ( SIZEOF( QUERY ( using_rep <* using_representations( SELF ) | ( NOT ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.GEOMETRIC_REPRESENTATION_CONTEXT'  IN TYPEOF( 
               using_rep.context_of_items ) ) ) ) ) = 0 );
  END_ENTITY;

  ENTITY global_uncertainty_assigned_context
    SUBTYPE OF ( representation_context );
      uncertainty  : SET [1 : ?] OF uncertainty_measure_with_unit;
  END_ENTITY;

  ENTITY global_unit_assigned_context
    SUBTYPE OF ( representation_context );
      units  : SET [1 : ?] OF unit;
  END_ENTITY;

  ENTITY group;
      name         : label;
      description  : OPTIONAL text;
    DERIVE
      id  : identifier := get_id_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM' ) ) 
               <= 1 );
  END_ENTITY;

  ENTITY group_assignment
    ABSTRACT SUPERTYPE;
      assigned_group  : group;
    DERIVE
      role  : object_role := get_role( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ROLE_ASSOCIATION.'
               + 'ITEM_WITH_ROLE'  ) ) <= 1 );
  END_ENTITY;

  ENTITY group_relationship;
      name            : label;
      description     : OPTIONAL text;
      relating_group  : group;
      related_group   : group;
  END_ENTITY;

  ENTITY hyperbola
    SUBTYPE OF ( conic );
      semi_axis       : positive_length_measure;
      semi_imag_axis  : positive_length_measure;
  END_ENTITY;

  ENTITY id_attribute;
      attribute_value  : identifier;
      identified_item  : id_attribute_select;
  END_ENTITY;

  ENTITY identification_assignment
    ABSTRACT SUPERTYPE;
      assigned_id  : identifier;
      role         : identification_role;
  END_ENTITY;

  ENTITY identification_role;
      name         : label;
      description  : OPTIONAL text;
  END_ENTITY;

  ENTITY illuminance_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ILLUMINANCE_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY illuminance_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.lux ) );
  END_ENTITY;

  ENTITY inductance_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.INDUCTANCE_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY inductance_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.henry ) );
  END_ENTITY;

  ENTITY invisibility;
      invisible_items  : SET [1 : ?] OF invisible_item;
  END_ENTITY;

  ENTITY item_defined_transformation;
      name              : label;
      description       : OPTIONAL text;
      transform_item_1  : representation_item;
      transform_item_2  : representation_item;
  END_ENTITY;

  ENTITY item_identified_representation_usage;
      name                 : label;
      description          : OPTIONAL text;
      definition           : item_identified_representation_usage_definition;
      used_representation  : representation;
      identified_item      : item_identified_representation_usage_select;
    WHERE
      wr1: ( SELF.used_representation IN using_representations( SELF.identified_item ) );
  END_ENTITY;

  ENTITY length_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LENGTH_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY length_unit
    SUBTYPE OF ( named_unit );
    WHERE
      wr1: ( ( SELF\named_unit.dimensions.length_exponent = 1 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\
               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( 
               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.
               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) );
  END_ENTITY;

  ENTITY line
    SUBTYPE OF ( curve );
      pnt  : cartesian_point;
      dir  : vector;
    WHERE
      wr1: ( dir.dim = pnt.dim );
  END_ENTITY;

  ENTITY loop
    SUPERTYPE OF ( ONEOF ( vertex_loop, edge_loop, poly_loop ) )
    SUBTYPE OF ( topological_representation_item );
  END_ENTITY;

  ENTITY luminous_flux_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LUMINOUS_FLUX_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY luminous_flux_unit
    SUBTYPE OF ( named_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.lumen ) );
  END_ENTITY;

  ENTITY luminous_intensity_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LUMINOUS_INTENSITY_UNIT' IN TYPEOF( SELF\
               measure_with_unit.unit_component ) );
  END_ENTITY;

  ENTITY luminous_intensity_unit
    SUBTYPE OF ( named_unit );
    WHERE
      wr1: ( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\
               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( 
               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.
               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 1 ) );
  END_ENTITY;

  ENTITY magnetic_flux_density_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAGNETIC_FLUX_DENSITY_UNIT' IN TYPEOF( SELF\
               measure_with_unit.unit_component ) );
  END_ENTITY;

  ENTITY magnetic_flux_density_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.tesla ) );
  END_ENTITY;

  ENTITY magnetic_flux_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAGNETIC_FLUX_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY magnetic_flux_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.weber ) );
  END_ENTITY;

  ENTITY manifold_solid_brep
    SUBTYPE OF ( solid_model );
      outer  : closed_shell;
  END_ENTITY;

  ENTITY mapped_item
    SUBTYPE OF ( representation_item );
      mapping_source  : representation_map;
      mapping_target  : representation_item;
    WHERE
      wr1: acyclic_mapped_representation( SELF );
  END_ENTITY;

  ENTITY mass_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MASS_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY mass_unit
    SUBTYPE OF ( named_unit );
    WHERE
      wr1: ( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 1 ) AND ( SELF\
               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( 
               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.
               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) );
  END_ENTITY;

  ENTITY measure_representation_item
    SUBTYPE OF ( representation_item, measure_with_unit );
  END_ENTITY;

  ENTITY measure_with_unit
    SUPERTYPE OF ( ONEOF ( length_measure_with_unit, mass_measure_with_unit, time_measure_with_unit, 
        electric_current_measure_with_unit, thermodynamic_temperature_measure_with_unit, celsius_temperature_measure_with_unit, 
        amount_of_substance_measure_with_unit, luminous_intensity_measure_with_unit, plane_angle_measure_with_unit, 
        solid_angle_measure_with_unit, area_measure_with_unit, volume_measure_with_unit, ratio_measure_with_unit, 
        acceleration_measure_with_unit, capacitance_measure_with_unit, electric_charge_measure_with_unit, 
        conductance_measure_with_unit, electric_potential_measure_with_unit, energy_measure_with_unit, 
        magnetic_flux_density_measure_with_unit, force_measure_with_unit, frequency_measure_with_unit, 
        illuminance_measure_with_unit, inductance_measure_with_unit, luminous_flux_measure_with_unit, 
        magnetic_flux_measure_with_unit, power_measure_with_unit, pressure_measure_with_unit, resistance_measure_with_unit, 
        velocity_measure_with_unit, absorbed_dose_measure_with_unit, radioactivity_measure_with_unit, 
        dose_equivalent_measure_with_unit ) );
      value_component  : measure_value;
      unit_component   : unit;
    WHERE
      wr1: valid_units( SELF );
  END_ENTITY;

  ENTITY mechanical_design_geometric_presentation_representation
    SUBTYPE OF ( representation );
      SELF\representation.items  : SET [1 : ?] OF mechanical_design_geometric_presentation_representation_items;
    WHERE
      wr1 : ( SIZEOF( QUERY ( mi <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SHAPE_REPRESENTATION', 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 
                'MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION' ] * TYPEOF( mi\mapped_item.mapping_source.
                mapped_representation ) ) = 1 ) ) ) ) = 0 );
      wr2 : ( SIZEOF( QUERY ( smi <* QUERY ( si <* QUERY ( it <* SELF.items | ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM'  IN TYPEOF( si\styled_item.item ) ) ) | 
                ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'SHAPE_REPRESENTATION' ) IN TYPEOF( smi\
                styled_item.item\mapped_item.mapping_source.mapped_representation ) ) ) ) ) = 0 );
      wr3 : ( SIZEOF( QUERY ( si <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa <* si\styled_item.styles | ( NOT ( SIZEOF( 
                QUERY ( pss <* psa.styles | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'POINT_STYLE' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE', 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SURFACE_STYLE_USAGE' ] * TYPEOF( pss ) ) = 1 ) ) ) ) 
                = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr4 : ( SIZEOF( QUERY ( si <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psbc <* QUERY ( psa <* si\styled_item.styles | ( 
                ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'PRESENTATION_STYLE_BY_CONTEXT' ) IN TYPEOF( psa ) ) )
                | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'REPRESENTATION_ITEM', 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION' ] * TYPEOF( psbc\
                presentation_style_by_context.style_context ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr5 : ( SIZEOF( QUERY ( si <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa <* si\styled_item.styles | ( NOT ( SIZEOF( 
                QUERY ( ps <* QUERY ( pss <* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'POINT_STYLE'  IN TYPEOF( pss ) ) ) | ( NOT ( ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' 
                + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( ps\point_style.marker_size ) ) AND ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( ps\
                point_style.marker_colour ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr6 : ( SIZEOF( QUERY ( si <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa <* si\styled_item.styles | ( NOT ( SIZEOF( 
                QUERY ( cs <* QUERY ( pss <* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'CURVE_STYLE'  IN TYPEOF( pss ) ) ) | ( NOT ( ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( cs\
                curve_style.curve_colour ) ) = 1 ) AND ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
                'POSITIVE_LENGTH_MEASURE'  ) IN TYPEOF( cs\curve_style.curve_width ) ) AND ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE_FONT' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * TYPEOF( 
                cs\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr7 : ( SIZEOF( QUERY ( si <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa <* si\styled_item.styles | ( NOT ( SIZEOF( 
                QUERY ( ssu <* QUERY ( pss <* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SURFACE_SIDE_STYLE' ) IN TYPEOF( ssu\
                surface_style_usage.style ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr8 : ( SIZEOF( QUERY ( si <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa <* si\styled_item.styles | ( NOT ( SIZEOF( 
                QUERY ( ssu <* QUERY ( pss <* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( SIZEOF( QUERY ( sses <* ssu\surface_style_usage.style\
                surface_side_style.styles | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
                'SURFACE_STYLE_PARAMETER_LINE' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
                'SURFACE_STYLE_CONTROL_GRID' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
                'SURFACE_STYLE_SILHOUETTE' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
                'SURFACE_STYLE_SEGMENTATION_CURVE' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
                'SURFACE_STYLE_FILL_AREA' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
                'SURFACE_STYLE_BOUNDARY' ] * TYPEOF( sses ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr9 : ( SIZEOF( QUERY ( si <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa <* si\styled_item.styles | ( NOT ( SIZEOF( 
                QUERY ( ssu <* QUERY ( pss <* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( SIZEOF( QUERY ( sspl <* QUERY ( sses <* ssu\
                surface_style_usage.style\surface_side_style.styles | ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SURFACE_STYLE_PARAMETER_LINE' ) IN TYPEOF( sses ) ) )
                | ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE' IN TYPEOF( sspl\
                surface_style_parameter_line.style_of_parameter_lines ) ) AND ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( sspl\
                surface_style_parameter_line.style_of_parameter_lines\curve_style.curve_colour ) ) = 1 ) AND ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( sspl\
                surface_style_parameter_line.style_of_parameter_lines\curve_style.curve_width ) ) AND ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE_FONT' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * TYPEOF( 
                sspl\surface_style_parameter_line.style_of_parameter_lines\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 
                0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr10: ( SIZEOF( QUERY ( si <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa <* si\styled_item.styles | ( NOT ( SIZEOF( 
                QUERY ( ssu <* QUERY ( pss <* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( SIZEOF( QUERY ( sscg <* QUERY ( sses <* ssu\
                surface_style_usage.style\surface_side_style.styles | ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SURFACE_STYLE_CONTROL_GRID' ) IN TYPEOF( sses ) ) )
                | ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE' IN TYPEOF( sscg\
                surface_style_control_grid.style_of_control_grid ) ) AND ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( sscg\
                surface_style_control_grid.style_of_control_grid\curve_style.curve_colour ) ) = 1 ) AND ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( sscg\
                surface_style_control_grid.style_of_control_grid\curve_style.curve_width ) ) AND ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE_FONT' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * TYPEOF( 
                sscg\surface_style_control_grid.style_of_control_grid\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) 
                = 0 ) ) ) ) = 0 );
      wr11: ( SIZEOF( QUERY ( si <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa <* si\styled_item.styles | ( NOT ( SIZEOF( 
                QUERY ( ssu <* QUERY ( pss <* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( SIZEOF( QUERY ( sssh <* QUERY ( sses <* ssu\
                surface_style_usage.style\surface_side_style.styles | ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SURFACE_STYLE_SILHOUETTE' ) IN TYPEOF( sses ) ) )
                | ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE' IN TYPEOF( sssh\
                surface_style_silhouette.style_of_silhouette ) ) AND ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( sssh\
                surface_style_silhouette.style_of_silhouette\curve_style.curve_colour ) ) = 1 ) AND ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( sssh\
                surface_style_silhouette.style_of_silhouette\curve_style.curve_width ) ) AND ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE_FONT' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * TYPEOF( 
                sssh\surface_style_silhouette.style_of_silhouette\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) 
                = 0 ) ) ) ) = 0 );
      wr12: ( SIZEOF( QUERY ( si <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa <* si\styled_item.styles | ( NOT ( SIZEOF( 
                QUERY ( ssu <* QUERY ( pss <* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( SIZEOF( QUERY ( sssc <* QUERY ( sses <* ssu\
                surface_style_usage.style\surface_side_style.styles | ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SURFACE_STYLE_SEGMENTATION_CURVE' ) IN TYPEOF( 
                sses ) ) ) | ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE' IN TYPEOF( sssc\
                surface_style_segmentation_curve.style_of_segmentation_curve ) ) AND ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( sssc\
                surface_style_segmentation_curve.style_of_segmentation_curve\curve_style.curve_colour ) ) = 1 ) AND ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( sssc\
                surface_style_segmentation_curve.style_of_segmentation_curve\curve_style.curve_width ) ) AND ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE_FONT' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * TYPEOF( 
                sssc\surface_style_segmentation_curve.style_of_segmentation_curve\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) 
                = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr13: ( SIZEOF( QUERY ( si <* QUERY ( it <* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa <* si\styled_item.styles | ( NOT ( SIZEOF( 
                QUERY ( ssu <* QUERY ( pss <* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( SIZEOF( QUERY ( ssbd <* QUERY ( sses <* ssu\
                surface_style_usage.style\surface_side_style.styles | ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SURFACE_STYLE_BOUNDARY' ) IN TYPEOF( sses ) ) )
                | ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE' IN TYPEOF( ssbd\
                surface_style_boundary.style_of_boundary ) ) AND ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( ssbd\
                surface_style_boundary.style_of_boundary\curve_style.curve_colour ) ) = 1 ) AND ( ( 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( ssbd\
                surface_style_boundary.style_of_boundary\curve_style.curve_width ) ) AND ( SIZEOF( [
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE_FONT' , 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * TYPEOF( 
                ssbd\surface_style_boundary.style_of_boundary\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) 
                = 0 );
  END_ENTITY;

  ENTITY multi_level_reference_designator
    SUBTYPE OF ( assembly_component_usage );
      location  : LIST [1 : ?] OF UNIQUE next_assembly_usage_occurrence;
    DERIVE
      SELF\product_definition_relationship.relating_product_definition : product_definition := location[1]\
                                                 product_definition_relationship.relating_product_definition;
      SELF\product_definition_relationship.related_product_definition : product_definition_or_reference := location[HIINDEX( 
                                                 location )]\product_definition_relationship.related_product_definition;
      leaf                                   : product_definition_or_reference := SELF\product_definition_relationship.
                                                 related_product_definition;
      root                                   : product_definition := SELF\product_definition_relationship.
                                                 relating_product_definition;
    WHERE
      wr1: unambiguously_specified_multi_level_reference_designator( location );
      wr2: ( SIZEOF( QUERY ( cp <* location | ( NOT EXISTS( cp\assembly_component_usage.reference_designator ) ) ) ) = 0 );
  END_ENTITY;

  ENTITY name_attribute;
      attribute_value  : label;
      named_item       : name_attribute_select;
  END_ENTITY;

  ENTITY named_unit
    SUPERTYPE OF ( ONEOF ( si_unit, conversion_based_unit, context_dependent_unit ) ANDOR ONEOF ( length_unit, mass_unit, 
        time_unit, electric_current_unit, thermodynamic_temperature_unit, amount_of_substance_unit, luminous_flux_unit, 
        luminous_intensity_unit, plane_angle_unit, solid_angle_unit, ratio_unit ) );
      dimensions  : dimensional_exponents;
  END_ENTITY;

  ENTITY next_assembly_usage_occurrence
    SUBTYPE OF ( assembly_component_usage );
    UNIQUE
      ur1 : reference_designator, relating_product_definition;
  END_ENTITY;

  ENTITY object_role;
      name         : label;
      description  : OPTIONAL text;
  END_ENTITY;

  ENTITY one_direction_repeat_factor
    SUBTYPE OF ( geometric_representation_item );
      repeat_factor  : vector;
  END_ENTITY;

  ENTITY open_shell
    SUBTYPE OF ( connected_face_set );
  END_ENTITY;

  ENTITY oriented_closed_shell
    SUBTYPE OF ( closed_shell );
      closed_shell_element  : closed_shell;
      orientation           : BOOLEAN;
    DERIVE
      SELF\connected_face_set.cfs_faces  : SET [1 : ?] OF face := conditional_reverse( SELF.orientation, SELF.
                                             closed_shell_element.cfs_faces );
    WHERE
      wr1: ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_CLOSED_SHELL' IN TYPEOF( SELF.
               closed_shell_element ) ) );
  END_ENTITY;

  ENTITY oriented_edge
    SUBTYPE OF ( edge );
      edge_element  : edge;
      orientation   : BOOLEAN;
    DERIVE
      SELF\edge.edge_start  : vertex := boolean_choose( SELF.orientation, SELF.edge_element.edge_start, SELF.edge_element.
                                edge_end );
      SELF\edge.edge_end    : vertex := boolean_choose( SELF.orientation, SELF.edge_element.edge_end, SELF.edge_element.
                                edge_start );
    WHERE
      wr1: ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_EDGE' IN TYPEOF( SELF.edge_element ) ) );
  END_ENTITY;

  ENTITY oriented_face
    SUBTYPE OF ( face );
      face_element  : face;
      orientation   : BOOLEAN;
    DERIVE
      SELF\face.bounds  : SET [1 : ?] OF face_bound := conditional_reverse( SELF.orientation, SELF.face_element.bounds );
    WHERE
      wr1: ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_FACE' IN TYPEOF( SELF.face_element ) ) );
  END_ENTITY;

  ENTITY oriented_open_shell
    SUBTYPE OF ( open_shell );
      open_shell_element  : open_shell;
      orientation         : BOOLEAN;
    DERIVE
      SELF\connected_face_set.cfs_faces  : SET [1 : ?] OF face := conditional_reverse( SELF.orientation, SELF.open_shell_element.
                                             cfs_faces );
    WHERE
      wr1: ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_OPEN_SHELL' IN TYPEOF( SELF.
               open_shell_element ) ) );
  END_ENTITY;

  ENTITY oriented_path
    SUBTYPE OF ( path );
      path_element  : path;
      orientation   : BOOLEAN;
    DERIVE
      SELF\path.edge_list  : LIST [1 : ?] OF UNIQUE oriented_edge := conditional_reverse( SELF.orientation, SELF.path_element.
                               edge_list );
    WHERE
      wr1: ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_PATH' IN TYPEOF( SELF.path_element ) ) );
  END_ENTITY;

  ENTITY oriented_surface
    SUBTYPE OF ( surface );
      orientation  : BOOLEAN;
  END_ENTITY;

  ENTITY over_riding_styled_item
    SUBTYPE OF ( styled_item );
      over_ridden_style  : styled_item;
  END_ENTITY;

  ENTITY parabola
    SUBTYPE OF ( conic );
      focal_dist  : length_measure;
    WHERE
      wr1: ( focal_dist <> 0 );
  END_ENTITY;

  ENTITY parametric_representation_context
    SUBTYPE OF ( representation_context );
  END_ENTITY;

  ENTITY path
    SUPERTYPE OF ( ONEOF ( edge_loop, oriented_path ) )
    SUBTYPE OF ( topological_representation_item );
      edge_list  : LIST [1 : ?] OF UNIQUE oriented_edge;
    WHERE
      wr1: path_head_to_tail( SELF );
  END_ENTITY;

  ENTITY pcurve
    SUBTYPE OF ( curve );
      basis_surface       : surface;
      reference_to_curve  : definitional_representation;
    WHERE
      wr1: ( SIZEOF( reference_to_curve\representation.items ) = 1 );
      wr2: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE' IN TYPEOF( reference_to_curve\representation.
               items[1] ) );
      wr3: ( reference_to_curve\representation.items[1]\geometric_representation_item.dim = 2 );
  END_ENTITY;

  ENTITY placement
    SUPERTYPE OF ( ONEOF ( axis1_placement, axis2_placement_2d, axis2_placement_3d ) )
    SUBTYPE OF ( geometric_representation_item );
      location  : cartesian_point;
  END_ENTITY;

  ENTITY planar_box
    SUBTYPE OF ( planar_extent );
      placement  : axis2_placement;
  END_ENTITY;

  ENTITY planar_extent
    SUBTYPE OF ( geometric_representation_item );
      size_in_x  : length_measure;
      size_in_y  : length_measure;
  END_ENTITY;

  ENTITY plane
    SUBTYPE OF ( elementary_surface );
  END_ENTITY;

  ENTITY plane_angle_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PLANE_ANGLE_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY plane_angle_unit
    SUBTYPE OF ( named_unit );
    WHERE
      wr1: ( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\
               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( 
               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.
               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) );
  END_ENTITY;

  ENTITY point
    SUPERTYPE OF ( ONEOF ( cartesian_point, point_on_curve, point_on_surface ) )
    SUBTYPE OF ( geometric_representation_item );
  END_ENTITY;

  ENTITY point_on_curve
    SUBTYPE OF ( point );
      basis_curve      : curve;
      point_parameter  : parameter_value;
  END_ENTITY;

  ENTITY point_on_surface
    SUBTYPE OF ( point );
      basis_surface      : surface;
      point_parameter_u  : parameter_value;
      point_parameter_v  : parameter_value;
  END_ENTITY;

  ENTITY point_style
    SUBTYPE OF ( founded_item );
      name           : label;
      marker         : marker_select;
      marker_size    : size_select;
      marker_colour  : colour;
  END_ENTITY;

  ENTITY poly_loop
    SUBTYPE OF ( loop, geometric_representation_item );
      polygon  : LIST [3 : ?] OF UNIQUE cartesian_point;
  END_ENTITY;

  ENTITY polyline
    SUBTYPE OF ( bounded_curve );
      points  : LIST [2 : ?] OF cartesian_point;
  END_ENTITY;

  ENTITY power_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POWER_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY power_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.watt ) );
  END_ENTITY;

  ENTITY pre_defined_colour
    SUBTYPE OF ( pre_defined_item, colour );
  END_ENTITY;

  ENTITY pre_defined_curve_font
    SUBTYPE OF ( pre_defined_item );
  END_ENTITY;

  ENTITY pre_defined_item;
      name  : label;
  END_ENTITY;

  ENTITY pre_defined_marker
    SUBTYPE OF ( pre_defined_item );
  END_ENTITY;

  ENTITY pre_defined_point_marker_symbol
    SUBTYPE OF ( pre_defined_marker, pre_defined_symbol );
    WHERE
      wr1: ( SELF.name IN [ 'asterisk', 'circle', 'dot', 'plus', 'square', 'triangle', 'x'] );
  END_ENTITY;

  ENTITY pre_defined_surface_side_style
    SUBTYPE OF ( pre_defined_item );
  END_ENTITY;

  ENTITY pre_defined_symbol
    SUBTYPE OF ( pre_defined_item );
  END_ENTITY;

  ENTITY pre_defined_terminator_symbol
    SUBTYPE OF ( pre_defined_symbol );
    WHERE
      wr1: ( SELF.name IN [ 'blanked arrow', 'blanked box', 'blanked dot', 'blanked triangle', 'dimension origin', 'filled arrow', 
               'filled box' , 'filled dot', 'integral symbol', 'open arrow', 'slash', 'unfilled arrow', 'unfilled triangle', 
               'filled triangle' ] );
  END_ENTITY;

  ENTITY pre_defined_tile
    SUBTYPE OF ( pre_defined_item );
  END_ENTITY;

  ENTITY presentation_layer_assignment;
      name            : label;
      description     : text;
      assigned_items  : SET [1 : ?] OF layered_item;
  END_ENTITY;

  ENTITY presentation_style_assignment
    SUBTYPE OF ( founded_item );
      styles  : SET [1 : ?] OF presentation_style_select;
    WHERE
      wr1: ( SIZEOF( QUERY ( style1 <* SELF.styles | ( NOT ( SIZEOF( QUERY ( style2 <* ( SELF.styles - style1 ) | ( NOT ( ( 
               TYPEOF( style1 ) <> TYPEOF( style2 ) ) OR ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' 
               + 'SURFACE_STYLE_USAGE', 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'EXTERNALLY_DEFINED_STYLE'] 
               * TYPEOF( style1 ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 );
      wr2: ( SIZEOF( QUERY ( style1 <* SELF.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'SURFACE_STYLE_USAGE'  IN TYPEOF( style1 ) ) ) ) <= 2 );
      wr3: ( SIZEOF( QUERY ( style1 <* SELF.styles | ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'SURFACE_STYLE_USAGE'  IN TYPEOF( style1 ) ) AND ( SIZEOF( QUERY ( style2 <* ( SELF.styles - style1 ) | ( ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( style2 ) ) AND ( ( 
               style1\surface_style_usage.side = both ) OR ( style2\surface_style_usage.side = both ) OR ( style1\
               surface_style_usage.side = style2\surface_style_usage.side ) ) ) ) ) > 0 ) ) ) ) = 0 );
  END_ENTITY;

  ENTITY presentation_style_by_context
    SUBTYPE OF ( presentation_style_assignment );
      style_context  : style_context_select;
  END_ENTITY;

  ENTITY pressure_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRESSURE_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY pressure_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.pascal ) );
  END_ENTITY;

  ENTITY product;
      id                  : identifier;
      name                : label;
      description         : OPTIONAL text;
      frame_of_reference  : SET [1 : ?] OF product_context;
  END_ENTITY;

  ENTITY product_context
    SUBTYPE OF ( application_context_element );
      discipline_type  : label;
  END_ENTITY;

  ENTITY product_definition;
      id                  : identifier;
      description         : OPTIONAL text;
      formation           : product_definition_formation;
      frame_of_reference  : product_definition_context;
    DERIVE
      name  : label := get_name_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'NAME_ATTRIBUTE.NAMED_ITEM' ) ) 
               <= 1 );
  END_ENTITY;

  ENTITY product_definition_context
    SUBTYPE OF ( application_context_element );
      life_cycle_stage  : label;
  END_ENTITY;

  ENTITY product_definition_context_association;
      definition          : product_definition;
      frame_of_reference  : product_definition_context;
      role                : product_definition_context_role;
  END_ENTITY;

  ENTITY product_definition_context_role;
      name         : label;
      description  : OPTIONAL text;
  END_ENTITY;

  ENTITY product_definition_formation;
      id           : identifier;
      description  : OPTIONAL text;
      of_product   : product;
    UNIQUE
      ur1 : id, of_product;
  END_ENTITY;

  ENTITY product_definition_reference
    SUBTYPE OF ( generic_product_definition_reference );
      product_id                       : identifier;
      product_definition_formation_id  : identifier;
      product_definition_id            : identifier;
      id_owning_organization_name      : OPTIONAL label;
  END_ENTITY;

  ENTITY product_definition_reference_with_local_representation
    SUBTYPE OF ( generic_product_definition_reference, product_definition );
  END_ENTITY;

  ENTITY product_definition_relationship;
      id                           : identifier;
      name                         : label;
      description                  : OPTIONAL text;
      relating_product_definition  : product_definition_or_reference;
      related_product_definition   : product_definition_or_reference;
  END_ENTITY;

  ENTITY product_definition_shape
    SUBTYPE OF ( property_definition );
    UNIQUE
      ur1 : definition;
    WHERE
      wr1: ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CHARACTERIZED_PRODUCT_DEFINITION', 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CHARACTERIZED_OBJECT' ] * TYPEOF( SELF\
               property_definition.definition ) ) > 0 );
  END_ENTITY;

  ENTITY product_definition_usage
    SUBTYPE OF ( product_definition_relationship );
    UNIQUE
      ur1 : id, relating_product_definition, related_product_definition;
    WHERE
      wr1: acyclic_product_definition_relationship( SELF, [SELF\product_definition_relationship.related_product_definition], 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_USAGE'  );
  END_ENTITY;

  ENTITY promissory_usage_occurrence
    SUBTYPE OF ( assembly_component_usage );
  END_ENTITY;

  ENTITY property_definition;
      name         : label;
      description  : OPTIONAL text;
      definition   : characterized_definition;
    DERIVE
      id  : identifier := get_id_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM' ) ) 
               <= 1 );
  END_ENTITY;

  ENTITY property_definition_representation;
      definition           : represented_definition;
      used_representation  : representation;
    DERIVE
      description  : text := get_description_value( SELF );
      name         : label := get_name_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'
               + 'DESCRIBED_ITEM'  ) ) <= 1 );
      wr2: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'NAME_ATTRIBUTE.NAMED_ITEM' ) ) 
               <= 1 );
  END_ENTITY;

  ENTITY quantified_assembly_component_usage
    SUBTYPE OF ( assembly_component_usage );
      quantity  : measure_with_unit;
    WHERE
      wr1: ( ( NOT ( 'NUMBER' IN TYPEOF( quantity.value_component ) ) ) OR ( quantity.value_component > 0 ) );
  END_ENTITY;

  ENTITY quasi_uniform_curve
    SUBTYPE OF ( b_spline_curve );
  END_ENTITY;

  ENTITY quasi_uniform_surface
    SUBTYPE OF ( b_spline_surface );
  END_ENTITY;

  ENTITY radioactivity_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.RADIOACTIVITY_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY radioactivity_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.becquerel ) );
  END_ENTITY;

  ENTITY ratio_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.RATIO_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY ratio_unit
    SUBTYPE OF ( named_unit );
    WHERE
      wr1: ( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\
               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( 
               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.
               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) );
  END_ENTITY;

  ENTITY rational_b_spline_curve
    SUBTYPE OF ( b_spline_curve );
      weights_data  : LIST [2 : ?] OF REAL;
    DERIVE
      weights  : ARRAY [0 : upper_index_on_control_points] OF REAL := list_to_array( weights_data, 0, 
                   upper_index_on_control_points );
    WHERE
      wr1: ( SIZEOF( weights_data ) = SIZEOF( SELF\b_spline_curve.control_points_list ) );
      wr2: curve_weights_positive( SELF );
  END_ENTITY;

  ENTITY rational_b_spline_surface
    SUBTYPE OF ( b_spline_surface );
      weights_data  : LIST [2 : ?] OF LIST [2 : ?] OF REAL;
    DERIVE
      weights  : ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF REAL := make_array_of_array( weights_data, 0, u_upper, 0, v_upper );
    WHERE
      wr1: ( ( SIZEOF( weights_data ) = SIZEOF( SELF\b_spline_surface.control_points_list ) ) AND ( SIZEOF( weights_data[1] ) = 
               SIZEOF( SELF\b_spline_surface.control_points_list[1] ) ) );
      wr2: surface_weights_positive( SELF );
  END_ENTITY;

  ENTITY rep_item_group
    SUBTYPE OF ( group, representation_item );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'PRESENTATION_LAYER_ASSIGNMENT.'  
               + 'ASSIGNED_ITEMS' ) ) > 0 );
      wr2: ( SIZEOF( QUERY ( r <* USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'REPRESENTATION.' 
               + 'ITEMS' ) | ( r.name = 'group representation' ) ) ) > 0 );
      wr3: ( SIZEOF( QUERY ( ga <* USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
               'GROUP_ASSIGNMENT.'  + 'ASSIGNED_GROUP' ) | ( ga.role.name <> 'group membership' ) ) ) = 0 );
      wr4: ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'GEOMETRIC_REPRESENTATION_ITEM', 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'TOPOLOGICAL_REPRESENTATION_ITEM', 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'MAPPED_ITEM', 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'STYLED_ITEM'] * TYPEOF( SELF ) ) = 1 );
  END_ENTITY;

  ENTITY representation;
      name              : label;
      items             : SET [1 : ?] OF representation_item;
      context_of_items  : representation_context;
    DERIVE
      id           : identifier := get_id_value( SELF );
      description  : text := get_description_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM' ) ) 
               <= 1 );
      wr2: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'
               + 'DESCRIBED_ITEM'  ) ) <= 1 );
  END_ENTITY;

  ENTITY representation_context;
      context_identifier  : identifier;
      context_type        : text;
    INVERSE
      representations_in_context : SET [1 : ?] OF representation FOR context_of_items;
  END_ENTITY;

  ENTITY representation_item
    SUPERTYPE OF ( ONEOF ( mapped_item, value_representation_item ) ANDOR ONEOF ( mapped_item, styled_item ) );
      name  : label;
    WHERE
      wr1: ( SIZEOF( using_representations( SELF ) ) > 0 );
  END_ENTITY;

  ENTITY representation_item_relationship;
      name                          : label;
      description                   : OPTIONAL text;
      relating_representation_item  : representation_item;
      related_representation_item   : representation_item;
  END_ENTITY;

  ENTITY representation_map;
      mapping_origin         : representation_item;
      mapped_representation  : representation;
    INVERSE
      map_usage : SET [1 : ?] OF mapped_item FOR mapping_source;
    WHERE
      wr1: item_in_context( SELF.mapping_origin, SELF.mapped_representation.context_of_items );
  END_ENTITY;

  ENTITY representation_relationship;
      name         : label;
      description  : OPTIONAL text;
      rep_1        : representation;
      rep_2        : representation;
  END_ENTITY;

  ENTITY resistance_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.RESISTANCE_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY resistance_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.ohm ) );
  END_ENTITY;

  ENTITY role_association;
      role            : object_role;
      item_with_role  : role_select;
  END_ENTITY;

  ENTITY shape_aspect;
      name                  : label;
      description           : OPTIONAL text;
      of_shape              : product_definition_shape;
      product_definitional  : LOGICAL;
    DERIVE
      id  : identifier := get_id_value( SELF );
    UNIQUE
      ur1 : id, of_shape;
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM' ) ) 
               <= 1 );
  END_ENTITY;

  ENTITY shape_aspect_relationship;
      name                   : label;
      description            : OPTIONAL text;
      relating_shape_aspect  : shape_aspect;
      related_shape_aspect   : shape_aspect;
    DERIVE
      id  : identifier := get_id_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM' ) ) 
               <= 1 );
  END_ENTITY;

  ENTITY shape_definition_representation
    SUBTYPE OF ( property_definition_representation );
      SELF\property_definition_representation.definition : property_definition;
      SELF\property_definition_representation.used_representation : shape_representation;
    WHERE
      wr1: ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( definition ) ) OR
               ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SHAPE_DEFINITION' IN TYPEOF( definition\
               property_definition.definition ) ) );
  END_ENTITY;

  ENTITY shape_representation
    SUBTYPE OF ( representation );
  END_ENTITY;

  ENTITY shape_representation_relationship
    SUBTYPE OF ( representation_relationship );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SHAPE_REPRESENTATION' IN ( TYPEOF( SELF\
               representation_relationship.rep_1 ) + TYPEOF( SELF\representation_relationship.rep_2 ) ) );
  END_ENTITY;

  ENTITY si_absorbed_dose_unit
    SUBTYPE OF ( absorbed_dose_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.gray );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_capacitance_unit
    SUBTYPE OF ( capacitance_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.farad );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_conductance_unit
    SUBTYPE OF ( conductance_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.siemens );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_dose_equivalent_unit
    SUBTYPE OF ( dose_equivalent_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.sievert );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_electric_charge_unit
    SUBTYPE OF ( electric_charge_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.coulomb );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_electric_potential_unit
    SUBTYPE OF ( electric_potential_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.volt );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_energy_unit
    SUBTYPE OF ( energy_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.joule );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_force_unit
    SUBTYPE OF ( force_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.newton );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_frequency_unit
    SUBTYPE OF ( frequency_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.hertz );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_illuminance_unit
    SUBTYPE OF ( illuminance_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.lux );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_inductance_unit
    SUBTYPE OF ( inductance_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.henry );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_magnetic_flux_density_unit
    SUBTYPE OF ( magnetic_flux_density_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.tesla );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_magnetic_flux_unit
    SUBTYPE OF ( magnetic_flux_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.weber );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_power_unit
    SUBTYPE OF ( power_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.watt );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_pressure_unit
    SUBTYPE OF ( pressure_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.pascal );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_radioactivity_unit
    SUBTYPE OF ( radioactivity_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.becquerel );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_resistance_unit
    SUBTYPE OF ( resistance_unit, si_unit );
    WHERE
      wr1: ( SELF\si_unit.name = si_unit_name.ohm );
      wr2: ( NOT EXISTS( SELF\derived_unit.name ) );
  END_ENTITY;

  ENTITY si_unit
    SUBTYPE OF ( named_unit );
      prefix  : OPTIONAL si_prefix;
      name    : si_unit_name;
    DERIVE
      SELF\named_unit.dimensions  : dimensional_exponents := dimensions_for_si_unit( name );
    WHERE
      wr1: ( ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MASS_UNIT' IN TYPEOF( SELF ) ) AND ( SIZEOF( 
               USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.DERIVED_UNIT_ELEMENT.UNIT' ) ) > 0 ) ) ) 
               OR ( prefix = si_prefix.kilo ) );
  END_ENTITY;

  ENTITY solid_angle_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SOLID_ANGLE_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY solid_angle_unit
    SUBTYPE OF ( named_unit );
    WHERE
      wr1: ( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\
               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( 
               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.
               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) );
  END_ENTITY;

  ENTITY solid_curve_font
    SUBTYPE OF ( pre_defined_curve_font );
  END_ENTITY;

  ENTITY solid_model
    SUBTYPE OF ( geometric_representation_item );
  END_ENTITY;

  ENTITY specified_higher_usage_occurrence
    SUBTYPE OF ( assembly_component_usage );
      upper_usage  : assembly_component_usage;
      next_usage   : next_assembly_usage_occurrence;
    UNIQUE
      ur1 : upper_usage, next_usage;
    WHERE
      wr1: ( SELF :<>: upper_usage );
      wr2: ( SELF\product_definition_relationship.relating_product_definition :=: upper_usage.relating_product_definition );
      wr3: ( SELF\product_definition_relationship.related_product_definition :=: next_usage.related_product_definition );
      wr4: ( ( upper_usage.related_product_definition :=: next_usage.relating_product_definition ) OR ( SIZEOF( QUERY ( pdr <* 
               USEDIN( upper_usage.related_product_definition, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
               + 'PRODUCT_DEFINITION_RELATIONSHIP.'  + 'RELATED_PRODUCT_DEFINITION' ) | ( pdr.relating_product_definition :=: 
               next_usage.relating_product_definition ) ) ) = 1 ) );
      wr5: ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.NEXT_ASSEMBLY_USAGE_OCCURRENCE', 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SPECIFIED_HIGHER_USAGE_OCCURRENCE' ] * TYPEOF( 
               upper_usage ) ) = 1 );
  END_ENTITY;

  ENTITY spherical_surface
    SUBTYPE OF ( elementary_surface );
      radius  : positive_length_measure;
  END_ENTITY;

  ENTITY styled_item
    SUBTYPE OF ( representation_item );
      styles  : SET [1 : ?] OF presentation_style_assignment;
      item    : styled_item_target;
    WHERE
      wr1: ( ( SIZEOF( SELF.styles ) = 1 ) XOR ( SIZEOF( QUERY ( pres_style <* SELF.styles | ( NOT ( ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'PRESENTATION_STYLE_BY_CONTEXT' ) IN TYPEOF( 
               pres_style ) ) ) ) ) = 0 ) );
      wr2: ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.STYLED_ITEM' IN TYPEOF( item ) ) );
      wr3: ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM' IN TYPEOF( item ) ) OR ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM'  IN TYPEOF( item ) ) OR
               ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM' IN 
               TYPEOF( SELF ) ) );
  END_ENTITY;

  ENTITY surface
    SUPERTYPE OF ( ONEOF ( elementary_surface, swept_surface, bounded_surface ) )
    SUBTYPE OF ( geometric_representation_item );
  END_ENTITY;

  ENTITY surface_curve
    SUBTYPE OF ( curve );
      curve_3d               : curve;
      associated_geometry    : LIST [1 : 2] OF pcurve_or_surface;
      master_representation  : preferred_surface_curve_representation;
    DERIVE
      basis_surface  : SET [1 : 2] OF surface := get_basis_surface( SELF );
    WHERE
      wr1: ( curve_3d.dim = 3 );
      wr2: ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE' IN TYPEOF( associated_geometry[1] ) ) OR ( 
               master_representation <> pcurve_s1 ) );
      wr3: ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE' IN TYPEOF( associated_geometry[2] ) ) OR ( 
               master_representation <> pcurve_s2 ) );
      wr4: ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE' IN TYPEOF( curve_3d ) ) );
  END_ENTITY;

  ENTITY surface_of_linear_extrusion
    SUBTYPE OF ( swept_surface );
      extrusion_axis  : vector;
  END_ENTITY;

  ENTITY surface_of_revolution
    SUBTYPE OF ( swept_surface );
      axis_position  : axis1_placement;
    DERIVE
      axis_line  : line := representation_item( '' ) || geometric_representation_item(  ) || curve(  ) || line( axis_position.
                     location, representation_item( '' ) || geometric_representation_item(  ) || vector( axis_position.z, 1 ) );
  END_ENTITY;

  ENTITY surface_side_style
    SUBTYPE OF ( founded_item );
      name    : label;
      styles  : SET [1 : 7] OF surface_style_element_select;
    WHERE
      wr1: ( SIZEOF( QUERY ( style1 <* SELF.styles | ( SIZEOF( QUERY ( style2 <* ( SELF.styles - style1 ) | ( TYPEOF( style1 ) = 
               TYPEOF( style2 ) ) ) ) > 0 ) ) ) = 0 );
  END_ENTITY;

  ENTITY surface_style_boundary
    SUBTYPE OF ( founded_item );
      style_of_boundary  : curve_or_render;
  END_ENTITY;

  ENTITY surface_style_control_grid
    SUBTYPE OF ( founded_item );
      style_of_control_grid  : curve_or_render;
  END_ENTITY;

  ENTITY surface_style_fill_area
    SUBTYPE OF ( founded_item );
      fill_area  : fill_area_style;
  END_ENTITY;

  ENTITY surface_style_parameter_line
    SUBTYPE OF ( founded_item );
      style_of_parameter_lines  : curve_or_render;
      direction_counts          : SET [1 : 2] OF direction_count_select;
    WHERE
      wr1: ( ( HIINDEX( SELF.direction_counts ) = 1 ) XOR ( TYPEOF( SELF.direction_counts[1] ) <> TYPEOF( SELF.direction_counts[2] ) ) );
  END_ENTITY;

  ENTITY surface_style_rendering;
      rendering_method  : shading_surface_method;
      surface_colour    : colour;
  END_ENTITY;

  ENTITY surface_style_segmentation_curve
    SUBTYPE OF ( founded_item );
      style_of_segmentation_curve  : curve_or_render;
  END_ENTITY;

  ENTITY surface_style_silhouette
    SUBTYPE OF ( founded_item );
      style_of_silhouette  : curve_or_render;
  END_ENTITY;

  ENTITY surface_style_usage
    SUBTYPE OF ( founded_item );
      side   : surface_side;
      style  : surface_side_style_select;
  END_ENTITY;

  ENTITY swept_surface
    SUPERTYPE OF ( ONEOF ( surface_of_linear_extrusion, surface_of_revolution ) )
    SUBTYPE OF ( surface );
      swept_curve  : curve;
  END_ENTITY;

  ENTITY symbol_representation
    SUBTYPE OF ( representation );
  END_ENTITY;

  ENTITY symbol_representation_map
    SUBTYPE OF ( representation_map );
      SELF\representation_map.mapped_representation : symbol_representation;
      SELF\representation_map.mapping_origin : axis2_placement;
    WHERE
      wr1: ( SIZEOF( QUERY ( mi <* SELF\representation_map.map_usage | ( NOT ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ANNOTATION_SYMBOL'  IN TYPEOF( mi ) ) ) ) ) = 0 );
  END_ENTITY;

  ENTITY symbol_target
    SUBTYPE OF ( geometric_representation_item );
      placement  : axis2_placement;
      x_scale    : positive_ratio_measure;
      y_scale    : positive_ratio_measure;
  END_ENTITY;

  ENTITY thermodynamic_temperature_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.THERMODYNAMIC_TEMPERATURE_UNIT' IN TYPEOF( SELF\
               measure_with_unit.unit_component ) );
  END_ENTITY;

  ENTITY thermodynamic_temperature_unit
    SUBTYPE OF ( named_unit );
    WHERE
      wr1: ( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\
               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( 
               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 1 ) AND ( SELF\named_unit.dimensions.
               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) );
  END_ENTITY;

  ENTITY time_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.TIME_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY time_unit
    SUBTYPE OF ( named_unit );
    WHERE
      wr1: ( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\
               named_unit.dimensions.time_exponent = 1 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( 
               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.
               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) );
  END_ENTITY;

  ENTITY topological_representation_item
    SUPERTYPE OF ( ONEOF ( vertex, edge, face_bound, face, connected_edge_set, connected_face_set, loop ANDOR path ) )
    SUBTYPE OF ( representation_item );
  END_ENTITY;

  ENTITY toroidal_surface
    SUBTYPE OF ( elementary_surface );
      major_radius  : positive_length_measure;
      minor_radius  : positive_length_measure;
  END_ENTITY;

  ENTITY trimmed_curve
    SUBTYPE OF ( bounded_curve );
      basis_curve            : curve;
      trim_1                 : SET [1 : 2] OF trimming_select;
      trim_2                 : SET [1 : 2] OF trimming_select;
      sense_agreement        : BOOLEAN;
      master_representation  : trimming_preference;
    WHERE
      wr1: ( ( HIINDEX( trim_1 ) = 1 ) OR ( TYPEOF( trim_1[1] ) <> TYPEOF( trim_1[2] ) ) );
      wr2: ( ( HIINDEX( trim_2 ) = 1 ) OR ( TYPEOF( trim_2[1] ) <> TYPEOF( trim_2[2] ) ) );
  END_ENTITY;

  ENTITY two_direction_repeat_factor
    SUBTYPE OF ( one_direction_repeat_factor );
      second_repeat_factor  : vector;
  END_ENTITY;

  ENTITY uncertainty_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
      name         : label;
      description  : OPTIONAL text;
    WHERE
      wr1: valid_measure_value( SELF\measure_with_unit.value_component );
  END_ENTITY;

  ENTITY uniform_curve
    SUBTYPE OF ( b_spline_curve );
  END_ENTITY;

  ENTITY uniform_surface
    SUBTYPE OF ( b_spline_surface );
  END_ENTITY;

  ENTITY user_defined_curve_font
    SUBTYPE OF ( curve_style_font, mapped_item );
  END_ENTITY;

  ENTITY user_defined_marker
    SUBTYPE OF ( mapped_item, pre_defined_marker );
  END_ENTITY;

  ENTITY user_defined_terminator_symbol
    SUBTYPE OF ( mapped_item, pre_defined_symbol );
  END_ENTITY;

  ENTITY value_representation_item
    SUBTYPE OF ( representation_item );
      value_component  : measure_value;
    WHERE
      wr1: ( SIZEOF( QUERY ( rep <* using_representations( SELF ) | ( NOT ( 
               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.GLOBAL_UNIT_ASSIGNED_CONTEXT'  IN TYPEOF( rep.
               context_of_items ) ) ) ) ) = 0 );
  END_ENTITY;

  ENTITY vector
    SUBTYPE OF ( geometric_representation_item );
      orientation  : direction;
      magnitude    : length_measure;
    WHERE
      wr1: ( magnitude >= 0 );
  END_ENTITY;

  ENTITY vector_style
    SUBTYPE OF ( curve_style, pre_defined_terminator_symbol );
  END_ENTITY;

  ENTITY velocity_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VELOCITY_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY velocity_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensional_exponents( 1, 0, -1, 0, 0, 0, 0 ) );
  END_ENTITY;

  ENTITY vertex
    SUBTYPE OF ( topological_representation_item );
  END_ENTITY;

  ENTITY vertex_loop
    SUBTYPE OF ( loop );
      loop_vertex  : vertex;
  END_ENTITY;

  ENTITY vertex_point
    SUBTYPE OF ( vertex, geometric_representation_item );
      vertex_geometry  : point;
  END_ENTITY;

  ENTITY volume_measure_with_unit
    SUBTYPE OF ( measure_with_unit );
    WHERE
      wr1: ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VOLUME_UNIT' IN TYPEOF( SELF\measure_with_unit.
               unit_component ) );
  END_ENTITY;

  ENTITY volume_unit
    SUBTYPE OF ( derived_unit );
    WHERE
      wr1: ( derive_dimensional_exponents( SELF ) = dimensional_exponents( 3, 0, 0, 0, 0, 0, 0 ) );
  END_ENTITY;

  RULE compatible_dimension FOR ( cartesian_point, direction, representation_context, geometric_representation_context );

  WHERE
    wr1: ( SIZEOF( QUERY ( x <* cartesian_point | ( SIZEOF( QUERY ( y <* geometric_representation_context | ( item_in_context( x, 
             y ) AND ( HIINDEX( x.coordinates ) <> y.coordinate_space_dimension ) ) ) ) > 0 ) ) ) = 0 );
    wr2: ( SIZEOF( QUERY ( x <* direction | ( SIZEOF( QUERY ( y <* geometric_representation_context | ( item_in_context( x, y ) 
             AND ( HIINDEX( x.direction_ratios ) <> y.coordinate_space_dimension ) ) ) ) > 0 ) ) ) = 0 );

  END_RULE;

  RULE styled_curve FOR ( styled_item );

  WHERE
    wr1: ( SIZEOF( QUERY ( si <* styled_item | ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE' IN TYPEOF( 
             si.item ) ) AND ( SIZEOF( QUERY ( psa <* si.styles | ( SIZEOF( QUERY ( cs <* psa.styles | ( 
             'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE'  IN TYPEOF( cs ) ) ) ) > 0 ) ) ) <> 1 ) ) ) ) 
             = 0 );

  END_RULE;

  RULE validate_dependently_instantiable_entity_data_types FOR ( annotation_curve_occurrence, annotation_occurrence, 
             annotation_symbol_occurrence, application_context, application_context_element, cartesian_transformation_operator, 
             document_type, fill_area_style, founded_item, functionally_defined_transformation, identification_role, object_role, 
             one_direction_repeat_factor, open_shell, oriented_face, oriented_open_shell, oriented_path, placement, planar_extent, 
             point, product_context, product_definition_context_role, role_association, symbol_representation, 
             symbol_representation_map, symbol_target, two_direction_repeat_factor );

    LOCAL
      previous_in_chain         : LIST OF GENERIC := [];
      number_of_input_instances : INTEGER;
      all_instances             : SET OF GENERIC := [];
      set_of_input_types        : SET OF STRING := [];
    END_LOCAL;
    all_instances := all_instances + annotation_curve_occurrence;
    all_instances := all_instances + annotation_occurrence;
    all_instances := all_instances + annotation_symbol_occurrence;
    all_instances := all_instances + application_context;
    all_instances := all_instances + application_context_element;
    all_instances := all_instances + cartesian_transformation_operator;
    all_instances := all_instances + document_type;
    all_instances := all_instances + fill_area_style;
    all_instances := all_instances + founded_item;
    all_instances := all_instances + functionally_defined_transformation;
    all_instances := all_instances + identification_role;
    all_instances := all_instances + object_role;
    all_instances := all_instances + one_direction_repeat_factor;
    all_instances := all_instances + open_shell;
    all_instances := all_instances + oriented_face;
    all_instances := all_instances + oriented_open_shell;
    all_instances := all_instances + oriented_path;
    all_instances := all_instances + placement;
    all_instances := all_instances + planar_extent;
    all_instances := all_instances + point;
    all_instances := all_instances + product_context;
    all_instances := all_instances + product_definition_context_role;
    all_instances := all_instances + role_association;
    all_instances := all_instances + symbol_representation;
    all_instances := all_instances + symbol_representation_map;
    all_instances := all_instances + symbol_target;
    all_instances := all_instances + two_direction_repeat_factor;
    number_of_input_instances := SIZEOF( all_instances );
    REPEAT i := 1 TO number_of_input_instances BY 1;
      set_of_input_types := set_of_input_types + TYPEOF( all_instances[i] );
    END_REPEAT;

  WHERE
    wr1: dependently_instantiated( all_instances, set_of_input_types, previous_in_chain );

  END_RULE;

  FUNCTION acyclic_mapped_representation(
               mi : mapped_item
           ) : BOOLEAN;

    LOCAL
      mis : SET OF mapped_item;
      rms : SET OF representation_map;
      rs1 : SET OF representation;
      rs2 : SET OF representation;
    END_LOCAL;
    rs1 := using_representations( mi );
    rs2 := [];
    REPEAT WHILE SIZEOF( rs1 ) > 0;
      REPEAT i := 1 TO HIINDEX( rs1 ) BY 1;
        rms := bag_to_set( USEDIN( rs1[i], 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION_MAP.'
            + 'MAPPED_REPRESENTATION'  ) );
        IF SIZEOF( rms ) > 0 THEN
          REPEAT j := 1 TO HIINDEX( rms ) BY 1;
            mis := bag_to_set( USEDIN( rms[i], 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM.'
                + 'MAPPING_SOURCE'  ) );
            IF SIZEOF( mis ) > 0 THEN
              REPEAT j := 1 TO HIINDEX( mis ) BY 1;
                IF mis[i] :=: mi THEN
                  RETURN( FALSE );
                END_IF;
                rs2 := rs2 + using_representations( mis[i] );
              END_REPEAT;
            END_IF;
          END_REPEAT;
        END_IF;
      END_REPEAT;
      rs1 := rs2;
      rs2 := [];
    END_REPEAT;
    RETURN( TRUE );

  END_FUNCTION;

  FUNCTION acyclic_product_definition_relationship(
               relation : product_definition_relationship;
               relatives : SET [1 : ?] OF product_definition_or_reference;
               specific_relation : STRING
           ) : BOOLEAN;

    LOCAL
      x : SET OF product_definition_relationship;
    END_LOCAL;
    IF relation.relating_product_definition IN relatives THEN
      RETURN( FALSE );
    END_IF;
    x := QUERY ( pd <* bag_to_set( USEDIN( relation.relating_product_definition, 
        'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'PRODUCT_DEFINITION_RELATIONSHIP.' + 
        'RELATED_PRODUCT_DEFINITION'  ) ) | ( specific_relation IN TYPEOF( pd ) ) );
    REPEAT i := 1 TO HIINDEX( x ) BY 1;
      IF NOT acyclic_product_definition_relationship( x[i], relatives + relation.relating_product_definition, specific_relation )
          THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );

  END_FUNCTION;

  FUNCTION acyclic_representation_relationship(
               relation : representation_relationship;
               relatives : SET [1 : ?] OF representation;
               specific_relation : STRING
           ) : BOOLEAN;

    LOCAL
      x : SET OF representation_relationship;
    END_LOCAL;
    IF relation.rep_1 IN relatives THEN
      RETURN( FALSE );
    END_IF;
    x := QUERY ( r <* bag_to_set( USEDIN( relation.rep_1, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
        'REPRESENTATION_RELATIONSHIP.'  + 'REP_2' ) ) | ( specific_relation IN TYPEOF( r ) ) );
    REPEAT i := 1 TO HIINDEX( x ) BY 1;
      IF NOT acyclic_representation_relationship( x[i], relatives + relation.rep_1, specific_relation ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );

  END_FUNCTION;

  FUNCTION associated_surface(
               arg : pcurve_or_surface
           ) : surface;

    LOCAL
      surf : surface;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE' IN TYPEOF( arg ) THEN
      surf := arg\pcurve.basis_surface;
    ELSE
      surf := arg;
    END_IF;
    RETURN( surf );

  END_FUNCTION;

  FUNCTION bag_to_set(
               the_bag : BAG OF GENERIC:intype
           ) : SET OF GENERIC:intype;

    LOCAL
      the_set : SET OF GENERIC:intype := [];
    END_LOCAL;
    IF SIZEOF( the_bag ) > 0 THEN
      REPEAT i := 1 TO HIINDEX( the_bag ) BY 1;
        the_set := the_set + the_bag[i];
      END_REPEAT;
    END_IF;
    RETURN( the_set );

  END_FUNCTION;

  FUNCTION base_axis(
               dim : INTEGER;
               axis1, axis2, axis3 : direction
           ) : LIST [2 : 3] OF direction;

    LOCAL
      u      : LIST [2 : 3] OF direction;
      d1     : direction;
      d2     : direction;
      factor : REAL;
    END_LOCAL;
    IF dim = 3 THEN
      d1 := NVL( normalise( axis3 ), dummy_gri || direction( [0, 0, 1] ) );
      d2 := first_proj_axis( d1, axis1 );
      u := [d2, second_proj_axis( d1, d2, axis2 ), d1];
    ELSE
      IF EXISTS( axis1 ) THEN
        d1 := normalise( axis1 );
        u := [d1, orthogonal_complement( d1 )];
        IF EXISTS( axis2 ) THEN
          factor := dot_product( axis2, u[2] );
          IF factor < 0 THEN
            u[2].direction_ratios[1] := -u[2].direction_ratios[1];
            u[2].direction_ratios[2] := -u[2].direction_ratios[2];
          END_IF;
        END_IF;
      ELSE
        IF EXISTS( axis2 ) THEN
          d1 := normalise( axis2 );
          u := [orthogonal_complement( d1 ), d1];
          u[1].direction_ratios[1] := -u[1].direction_ratios[1];
          u[1].direction_ratios[2] := -u[1].direction_ratios[2];
        ELSE
          u := [dummy_gri || direction( [1, 0] ), dummy_gri || direction( [0, 1] )];
        END_IF;
      END_IF;
    END_IF;
    RETURN( u );

  END_FUNCTION;

  FUNCTION boolean_choose(
               b : BOOLEAN;
               choice1, choice2 : GENERIC:item
           ) : GENERIC:item;
    IF b THEN
      RETURN( choice1 );
    ELSE
      RETURN( choice2 );
    END_IF;

  END_FUNCTION;

  FUNCTION build_2axes(
               ref_direction : direction
           ) : LIST [2 : 2] OF direction;

    LOCAL
      d : direction := NVL( normalise( ref_direction ), dummy_gri || direction( [1, 0] ) );
    END_LOCAL;
    RETURN( [d, orthogonal_complement( d )] );

  END_FUNCTION;

  FUNCTION build_axes(
               axis, ref_direction : direction
           ) : LIST [3 : 3] OF direction;

    LOCAL
      d1 : direction;
      d2 : direction;
    END_LOCAL;
    d1 := NVL( normalise( axis ), dummy_gri || direction( [0, 0, 1] ) );
    d2 := first_proj_axis( d1, ref_direction );
    RETURN( [d2, normalise( cross_product( d1, d2 ) )\vector.orientation, d1] );

  END_FUNCTION;

  FUNCTION closed_shell_reversed(
               a_shell : closed_shell
           ) : oriented_closed_shell;

    LOCAL
      the_reverse : oriented_closed_shell;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_CLOSED_SHELL' IN TYPEOF( a_shell ) THEN
      the_reverse := dummy_tri || connected_face_set( a_shell\connected_face_set.cfs_faces ) || closed_shell(  ) || 
          oriented_closed_shell( a_shell\oriented_closed_shell.closed_shell_element, NOT a_shell\oriented_closed_shell.orientation );
    ELSE
      the_reverse := dummy_tri || connected_face_set( a_shell\connected_face_set.cfs_faces ) || closed_shell(  ) || 
          oriented_closed_shell( a_shell, FALSE );
    END_IF;
    RETURN( the_reverse );

  END_FUNCTION;

  FUNCTION conditional_reverse(
               p : BOOLEAN;
               an_item : reversible_topology
           ) : reversible_topology;
    IF p THEN
      RETURN( an_item );
    ELSE
      RETURN( topology_reversed( an_item ) );
    END_IF;

  END_FUNCTION;

  FUNCTION constraints_composite_curve_on_surface(
               c : composite_curve_on_surface
           ) : BOOLEAN;

    LOCAL
      n_segments : INTEGER := SIZEOF( c.segments );
    END_LOCAL;
    REPEAT k := 1 TO n_segments BY 1;
      IF ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE' IN TYPEOF( c\composite_curve.segments[k].
          parent_curve ) ) ) AND ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SURFACE_CURVE' IN TYPEOF( c\
          composite_curve.segments[k].parent_curve ) ) ) AND ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
          + 'COMPOSITE_CURVE_ON_SURFACE'  IN TYPEOF( c\composite_curve.segments[k].parent_curve ) ) ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );

  END_FUNCTION;

  FUNCTION constraints_param_b_spline(
               degree : INTEGER;
               up_knots : INTEGER;
               up_cp : INTEGER;
               knot_mult : LIST [0 : ?] OF INTEGER;
               knots : LIST [0 : ?] OF parameter_value
           ) : BOOLEAN;

    LOCAL
      k      : INTEGER;
      sum    : INTEGER;
      result : BOOLEAN := TRUE;
    END_LOCAL;
    sum := knot_mult[1];
    REPEAT i := 2 TO up_knots BY 1;
      sum := sum + knot_mult[i];
    END_REPEAT;
    IF ( degree < 1 ) OR ( up_knots < 2 ) OR ( up_cp < degree ) OR ( sum <> ( degree + up_cp + 2 ) ) THEN
      result := FALSE;
      RETURN( result );
    END_IF;
    k := knot_mult[1];
    IF ( k < 1 ) OR ( k > ( degree + 1 ) ) THEN
      result := FALSE;
      RETURN( result );
    END_IF;
    REPEAT i := 2 TO up_knots BY 1;
      IF ( knot_mult[i] < 1 ) OR ( knots[i] <= knots[i - 1] ) THEN
        result := FALSE;
        RETURN( result );
      END_IF;
      k := knot_mult[i];
      IF ( i < up_knots ) AND ( k > degree ) THEN
        result := FALSE;
        RETURN( result );
      END_IF;
      IF ( i = up_knots ) AND ( k > ( degree + 1 ) ) THEN
        result := FALSE;
        RETURN( result );
      END_IF;
    END_REPEAT;
    RETURN( result );

  END_FUNCTION;

  FUNCTION cross_product(
               arg1, arg2 : direction
           ) : vector;

    LOCAL
      v2     : LIST [3 : 3] OF REAL;
      v1     : LIST [3 : 3] OF REAL;
      mag    : REAL;
      res    : direction;
      result : vector;
    END_LOCAL;
    IF ( NOT EXISTS( arg1 ) ) OR ( arg1.dim = 2 ) OR ( NOT EXISTS( arg2 ) ) OR ( arg2.dim = 2 ) THEN
      RETURN( ? );
    ELSE

      BEGIN
        v1 := normalise( arg1 ).direction_ratios;
        v2 := normalise( arg2 ).direction_ratios;
        res := dummy_gri || direction( [( v1[2] * v2[3] ) - ( v1[3] * v2[2] ), ( v1[3] * v2[1] ) - ( v1[1] * v2[3] ), ( v1[1] * 
            v2[2] ) - ( v1[2] * v2[1] )] );
        mag := 0;
        REPEAT i := 1 TO 3 BY 1;
          mag := mag + ( res.direction_ratios[i] * res.direction_ratios[i] );
        END_REPEAT;
        IF mag > 0 THEN
          result := dummy_gri || vector( res, SQRT( mag ) );
        ELSE
          result := dummy_gri || vector( arg1, 0 );
        END_IF;
        RETURN( result );
      END;
    END_IF;

  END_FUNCTION;

  FUNCTION curve_weights_positive(
               b : rational_b_spline_curve
           ) : BOOLEAN;

    LOCAL
      result : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT i := 0 TO b.upper_index_on_control_points BY 1;
      IF b.weights[i] <= 0 THEN
        result := FALSE;
        RETURN( result );
      END_IF;
    END_REPEAT;
    RETURN( result );

  END_FUNCTION;

  FUNCTION dependently_instantiated(
               set_of_input_instances : SET OF GENERIC:igen;
               set_of_input_types : SET OF STRING;
               previous_in_chain : LIST OF GENERIC:cgen
           ) : BOOLEAN;

    LOCAL
      dependently_instantiated_flag : BOOLEAN;
      number_of_referring_instances : INTEGER;
      bag_of_referring_instances    : BAG OF GENERIC:igen := [];
      set_of_types                  : SET OF STRING := [];
      number_of_input_instances     : INTEGER;
      previous_in_chain_plus        : LIST OF GENERIC:cgen := [];
      result                        : BOOLEAN := TRUE;
    END_LOCAL;
    IF EXISTS( set_of_input_instances ) THEN
      number_of_input_instances := SIZEOF( set_of_input_instances );
      set_of_input_types := set_of_input_types + 'GENERIC';
      REPEAT i := 1 TO number_of_input_instances BY 1;
        bag_of_referring_instances := USEDIN( set_of_input_instances[i], '' );
        IF EXISTS( bag_of_referring_instances ) THEN
          number_of_referring_instances := SIZEOF( bag_of_referring_instances );
          dependently_instantiated_flag := FALSE;
          REPEAT j := 1 TO number_of_referring_instances BY 1;
            set_of_types := TYPEOF( bag_of_referring_instances[j] );
            IF set_of_types <= set_of_input_types THEN
              IF NOT ( bag_of_referring_instances[j] IN previous_in_chain ) THEN
                previous_in_chain_plus := previous_in_chain + set_of_input_instances[i];
                IF dependently_instantiated( [bag_of_referring_instances[j]], set_of_input_types, previous_in_chain_plus ) THEN
                  dependently_instantiated_flag := TRUE;
                  ESCAPE;
                ELSE
                  SKIP;
                END_IF;
              END_IF;
            ELSE
              dependently_instantiated_flag := TRUE;
              ESCAPE;
            END_IF;
          END_REPEAT;
          IF NOT dependently_instantiated_flag THEN
            RETURN( FALSE );
          END_IF;
        ELSE
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    ELSE
      RETURN( FALSE );
    END_IF;
    RETURN( TRUE );

  END_FUNCTION;

  FUNCTION derive_dimensional_exponents(
               x : unit
           ) : dimensional_exponents;

    LOCAL
      result : dimensional_exponents := dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 );
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.DERIVED_UNIT' IN TYPEOF( x ) THEN
      REPEAT i := LOINDEX( x\derived_unit.elements ) TO HIINDEX( x\derived_unit.elements ) BY 1;
        result.length_exponent := result.length_exponent + ( x\derived_unit.elements[i]\derived_unit_element.exponent * x\
            derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.length_exponent );
        result.mass_exponent := result.mass_exponent + ( x\derived_unit.elements[i]\derived_unit_element.exponent * x\
            derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.mass_exponent );
        result.time_exponent := result.time_exponent + ( x\derived_unit.elements[i]\derived_unit_element.exponent * x\
            derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.time_exponent );
        result.electric_current_exponent := result.electric_current_exponent + ( x\derived_unit.elements[i]\derived_unit_element.
            exponent * x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.electric_current_exponent );
        result.thermodynamic_temperature_exponent := result.thermodynamic_temperature_exponent + ( x\derived_unit.elements[i]\
            derived_unit_element.exponent * x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.
            thermodynamic_temperature_exponent );
        result.amount_of_substance_exponent := result.amount_of_substance_exponent + ( x\derived_unit.elements[i]\
            derived_unit_element.exponent * x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.
            amount_of_substance_exponent );
        result.luminous_intensity_exponent := result.luminous_intensity_exponent + ( x\derived_unit.elements[i]\
            derived_unit_element.exponent * x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.
            luminous_intensity_exponent );
      END_REPEAT;
    ELSE
      result := x\named_unit.dimensions;
    END_IF;
    RETURN( result );

  END_FUNCTION;

  FUNCTION dimension_of(
               item : geometric_representation_item
           ) : dimension_count;

    LOCAL
      x   : SET OF representation;
      y   : representation_context;
      dim : dimension_count;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CARTESIAN_POINT' IN TYPEOF( item ) THEN
      dim := SIZEOF( item\cartesian_point.coordinates );
      RETURN( dim );
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.DIRECTION' IN TYPEOF( item ) THEN
      dim := SIZEOF( item\direction.direction_ratios );
      RETURN( dim );
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VECTOR' IN TYPEOF( item ) THEN
      dim := SIZEOF( item\vector.orientation\direction.direction_ratios );
      RETURN( dim );
    END_IF;
    x := using_representations( item );
    IF SIZEOF( x ) > 0 THEN
      y := x[1].context_of_items;
      dim := y\geometric_representation_context.coordinate_space_dimension;
      RETURN( dim );
    ELSE
      RETURN( ? );
    END_IF;

  END_FUNCTION;

  FUNCTION dimensions_for_si_unit(
               n : si_unit_name
           ) : dimensional_exponents;
    CASE n OF
      metre         :         RETURN( dimensional_exponents( 1, 0, 0, 0, 0, 0, 0 ) );
      gram          :         RETURN( dimensional_exponents( 0, 1, 0, 0, 0, 0, 0 ) );
      second        :         RETURN( dimensional_exponents( 0, 0, 1, 0, 0, 0, 0 ) );
      ampere        :         RETURN( dimensional_exponents( 0, 0, 0, 1, 0, 0, 0 ) );
      kelvin        :         RETURN( dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 ) );
      mole          :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 1, 0 ) );
      candela       :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 ) );
      radian        :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) );
      steradian     :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) );
      hertz         :         RETURN( dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 ) );
      newton        :         RETURN( dimensional_exponents( 1, 1, -2, 0, 0, 0, 0 ) );
      pascal        :         RETURN( dimensional_exponents( -1, 1, -2, 0, 0, 0, 0 ) );
      joule         :         RETURN( dimensional_exponents( 2, 1, -2, 0, 0, 0, 0 ) );
      watt          :         RETURN( dimensional_exponents( 2, 1, -3, 0, 0, 0, 0 ) );
      coulomb       :         RETURN( dimensional_exponents( 0, 0, 1, 1, 0, 0, 0 ) );
      volt          :         RETURN( dimensional_exponents( 2, 1, -3, -1, 0, 0, 0 ) );
      farad         :         RETURN( dimensional_exponents( -2, -1, 4, 2, 0, 0, 0 ) );
      ohm           :         RETURN( dimensional_exponents( 2, 1, -3, -2, 0, 0, 0 ) );
      siemens       :         RETURN( dimensional_exponents( -2, -1, 3, 2, 0, 0, 0 ) );
      weber         :         RETURN( dimensional_exponents( 2, 1, -2, -1, 0, 0, 0 ) );
      tesla         :         RETURN( dimensional_exponents( 0, 1, -2, -1, 0, 0, 0 ) );
      henry         :         RETURN( dimensional_exponents( 2, 1, -2, -2, 0, 0, 0 ) );
      degree_celsius :         RETURN( dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 ) );
      lumen         :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 ) );
      lux           :         RETURN( dimensional_exponents( -2, 0, 0, 0, 0, 0, 1 ) );
      becquerel     :         RETURN( dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 ) );
      gray          :         RETURN( dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 ) );
      sievert       :         RETURN( dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 ) );
      OTHERWISE     :         RETURN( ? );
      END_CASE;

  END_FUNCTION;

  FUNCTION dot_product(
               arg1, arg2 : direction
           ) : REAL;

    LOCAL
      ndim   : INTEGER;
      scalar : REAL;
      vec1   : direction;
      vec2   : direction;
    END_LOCAL;
    IF ( NOT EXISTS( arg1 ) ) OR ( NOT EXISTS( arg2 ) ) THEN
      scalar := ?;
    ELSE
      IF arg1.dim <> arg2.dim THEN
        scalar := ?;
      ELSE

        BEGIN
          vec1 := normalise( arg1 );
          vec2 := normalise( arg2 );
          ndim := arg1.dim;
          scalar := 0;
          REPEAT i := 1 TO ndim BY 1;
            scalar := scalar + ( vec1.direction_ratios[i] * vec2.direction_ratios[i] );
          END_REPEAT;
        END;
      END_IF;
    END_IF;
    RETURN( scalar );

  END_FUNCTION;

  FUNCTION edge_reversed(
               an_edge : edge
           ) : oriented_edge;

    LOCAL
      the_reverse : oriented_edge;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_EDGE' IN TYPEOF( an_edge ) THEN
      the_reverse := dummy_tri || edge( an_edge.edge_end, an_edge.edge_start ) || oriented_edge( an_edge\oriented_edge.
          edge_element, NOT an_edge\oriented_edge.orientation );
    ELSE
      the_reverse := dummy_tri || edge( an_edge.edge_end, an_edge.edge_start ) || oriented_edge( an_edge, FALSE );
    END_IF;
    RETURN( the_reverse );

  END_FUNCTION;

  FUNCTION face_bound_reversed(
               a_face_bound : face_bound
           ) : face_bound;

    LOCAL
      the_reverse : face_bound;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACE_OUTER_BOUND' IN TYPEOF( a_face_bound ) THEN
      the_reverse := dummy_tri || face_bound( a_face_bound\face_bound.bound, NOT a_face_bound\face_bound.orientation ) || 
          face_outer_bound(  );
    ELSE
      the_reverse := dummy_tri || face_bound( a_face_bound.bound, NOT a_face_bound.orientation );
    END_IF;
    RETURN( the_reverse );

  END_FUNCTION;

  FUNCTION face_reversed(
               a_face : face
           ) : oriented_face;

    LOCAL
      the_reverse : oriented_face;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_FACE' IN TYPEOF( a_face ) THEN
      the_reverse := dummy_tri || face( set_of_topology_reversed( a_face.bounds ) ) || oriented_face( a_face\oriented_face.
          face_element, NOT a_face\oriented_face.orientation );
    ELSE
      the_reverse := dummy_tri || face( set_of_topology_reversed( a_face.bounds ) ) || oriented_face( a_face, FALSE );
    END_IF;
    RETURN( the_reverse );

  END_FUNCTION;

  FUNCTION first_proj_axis(
               z_axis, arg : direction
           ) : direction;

    LOCAL
      x_vec  : vector;
      v      : direction;
      z      : direction;
      x_axis : direction;
    END_LOCAL;
    IF NOT EXISTS( z_axis ) THEN
      RETURN( ? );
    ELSE
      z := normalise( z_axis );
      IF NOT EXISTS( arg ) THEN
        IF ( z.direction_ratios <> [1, 0, 0] ) AND ( z.direction_ratios <> [-1, 0, 0] ) THEN
          v := dummy_gri || direction( [1, 0, 0] );
        ELSE
          v := dummy_gri || direction( [0, 1, 0] );
        END_IF;
      ELSE
        IF arg.dim <> 3 THEN
          RETURN( ? );
        END_IF;
        IF cross_product( arg, z ).magnitude = 0 THEN
          RETURN( ? );
        ELSE
          v := normalise( arg );
        END_IF;
      END_IF;
      x_vec := scalar_times_vector( dot_product( v, z ), z );
      x_axis := vector_difference( v, x_vec ).orientation;
      x_axis := normalise( x_axis );
    END_IF;
    RETURN( x_axis );

  END_FUNCTION;

  FUNCTION get_basis_surface(
               c : curve_on_surface
           ) : SET [0 : 2] OF surface;

    LOCAL
      surfs : SET [0 : 2] OF surface;
      n     : INTEGER;
    END_LOCAL;
    surfs := [];
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE' IN TYPEOF( c ) THEN
      surfs := [c\pcurve.basis_surface];
    ELSE
      IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SURFACE_CURVE' IN TYPEOF( c ) THEN
        n := SIZEOF( c\surface_curve.associated_geometry );
        REPEAT i := 1 TO n BY 1;
          surfs := surfs + associated_surface( c\surface_curve.associated_geometry[i] );
        END_REPEAT;
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COMPOSITE_CURVE_ON_SURFACE' IN TYPEOF( c ) THEN
      n := SIZEOF( c\composite_curve.segments );
      surfs := get_basis_surface( c\composite_curve.segments[1].parent_curve );
      IF n > 1 THEN
        REPEAT i := 2 TO n BY 1;
          surfs := surfs * get_basis_surface( c\composite_curve.segments[i].parent_curve );
        END_REPEAT;
      END_IF;
    END_IF;
    RETURN( surfs );

  END_FUNCTION;

  FUNCTION get_description_value(
               obj : description_attribute_select
           ) : text;

    LOCAL
      description_bag : BAG OF description_attribute := USEDIN( obj, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' 
                         + 'DESCRIPTION_ATTRIBUTE.' + 'DESCRIBED_ITEM' );
    END_LOCAL;
    IF SIZEOF( description_bag ) = 1 THEN
      RETURN( description_bag[1].attribute_value );
    ELSE
      RETURN( ? );
    END_IF;

  END_FUNCTION;

  FUNCTION get_directed_link(
               nodes : LIST OF representation;
               undirected_link : LIST OF chained_representation_link
           ) : LIST OF representation_relationship;

    LOCAL
      directed_link : LIST OF representation_relationship := [];
    END_LOCAL;
    IF ( SIZEOF( nodes ) <> ( SIZEOF( undirected_link ) + 1 ) ) OR ( VALUE_UNIQUE( nodes ) = FALSE ) THEN
      RETURN( ? );
    END_IF;
    REPEAT i := 1 TO SIZEOF( undirected_link ) BY 1;
      CASE TRUE OF
        'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION_CONTEXT' IN TYPEOF( undirected_link[i] ) : 
          BEGIN
            IF ( nodes[i]\representation.context_of_items :=: undirected_link[i] ) AND ( nodes[i + 1]\representation.
                context_of_items :=: undirected_link[i] ) THEN
              INSERT( directed_link, representation_relationship( '', '', nodes[i + 1], nodes[i] ), i - 1 );
            ELSE
              RETURN( ? );
            END_IF;
          END;
        'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION_RELATIONSHIP' IN TYPEOF( undirected_link[i] ) : 
          BEGIN
            IF ( ( nodes[i] :=: undirected_link[i]\representation_relationship.rep_1 ) AND ( nodes[i + 1] :=: undirected_link[i]\
                representation_relationship.rep_2 ) ) OR ( ( nodes[i] :=: undirected_link[i]\representation_relationship.rep_2 ) 
                AND ( nodes[i + 1] :=: undirected_link[i]\representation_relationship.rep_1 ) ) THEN
              INSERT( directed_link, representation_relationship( '', '', nodes[i + 1], nodes[i] ), i - 1 );
            ELSE
              RETURN( ? );
            END_IF;
          END;
        'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM' IN TYPEOF( undirected_link[i] ) : 
          BEGIN
            IF ( nodes[i] IN using_representations( undirected_link[i] ) ) AND ( nodes[i + 1] :=: undirected_link[i]\mapped_item.
                mapping_source\representation_map.mapped_representation ) THEN
              INSERT( directed_link, representation_relationship( '', '', nodes[i + 1], nodes[i] ), i - 1 );
            ELSE
              RETURN( ? );
            END_IF;
          END;
        OTHERWISE                          :           RETURN( ? );
        END_CASE;
    END_REPEAT;
    IF VALUE_UNIQUE( directed_link ) = FALSE THEN
      RETURN( ? );
    END_IF;
    RETURN( directed_link );

  END_FUNCTION;

  FUNCTION get_id_value(
               obj : id_attribute_select
           ) : identifier;

    LOCAL
      id_bag : BAG OF id_attribute := USEDIN( obj, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.' 
                + 'IDENTIFIED_ITEM' );
    END_LOCAL;
    IF SIZEOF( id_bag ) = 1 THEN
      RETURN( id_bag[1].attribute_value );
    ELSE
      RETURN( ? );
    END_IF;

  END_FUNCTION;

  FUNCTION get_name_value(
               obj : name_attribute_select
           ) : label;

    LOCAL
      name_bag : BAG OF name_attribute := USEDIN( obj, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
                  'NAME_ATTRIBUTE.'  + 'NAMED_ITEM' );
    END_LOCAL;
    IF SIZEOF( name_bag ) = 1 THEN
      RETURN( name_bag[1].attribute_value );
    ELSE
      RETURN( ? );
    END_IF;

  END_FUNCTION;

  FUNCTION get_role(
               obj : role_select
           ) : object_role;

    LOCAL
      role_bag : BAG OF role_association := USEDIN( obj, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
                  'ROLE_ASSOCIATION.'  + 'ITEM_WITH_ROLE' );
    END_LOCAL;
    IF SIZEOF( role_bag ) = 1 THEN
      RETURN( role_bag[1].role );
    ELSE
      RETURN( ? );
    END_IF;

  END_FUNCTION;

  FUNCTION item_in_context(
               item : representation_item;
               cntxt : representation_context
           ) : BOOLEAN;

    LOCAL
      y : BAG OF representation_item;
    END_LOCAL;
    IF SIZEOF( USEDIN( item, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION.ITEMS' ) * cntxt.
        representations_in_context ) > 0 THEN
      RETURN( TRUE );
    ELSE
      y := QUERY ( z <* USEDIN( item, '' ) | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION_ITEM' 
          IN TYPEOF( z ) ) );
      IF SIZEOF( y ) > 0 THEN
        REPEAT i := 1 TO HIINDEX( y ) BY 1;
          IF item_in_context( y[i], cntxt ) THEN
            RETURN( TRUE );
          END_IF;
        END_REPEAT;
      END_IF;
    END_IF;
    RETURN( FALSE );

  END_FUNCTION;

  FUNCTION list_face_loops(
               f : face
           ) : LIST [0 : ?] OF loop;

    LOCAL
      loops : LIST [0 : ?] OF loop := [];
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( f.bounds ) BY 1;
      loops := loops + f.bounds[i].bound;
    END_REPEAT;
    RETURN( loops );

  END_FUNCTION;

  FUNCTION list_of_topology_reversed(
               a_list : list_of_reversible_topology_item
           ) : list_of_reversible_topology_item;

    LOCAL
      the_reverse : list_of_reversible_topology_item;
    END_LOCAL;
    the_reverse := [];
    REPEAT i := 1 TO SIZEOF( a_list ) BY 1;
      the_reverse := topology_reversed( a_list[i] ) + the_reverse;
    END_REPEAT;
    RETURN( the_reverse );

  END_FUNCTION;

  FUNCTION list_to_array(
               lis : LIST [0 : ?] OF GENERIC:t;
               low : INTEGER;
               u : INTEGER
           ) : ARRAY [low : u] OF GENERIC:t;

    LOCAL
      n   : INTEGER;
      res : ARRAY [low : u] OF GENERIC:t;
    END_LOCAL;
    n := SIZEOF( lis );
    IF n <> ( ( u - low ) + 1 ) THEN
      RETURN( ? );
    ELSE
      res := [lis[1] : 0];
      REPEAT i := 2 TO n BY 1;
        res[( low + i ) - 1] := lis[i];
      END_REPEAT;
      RETURN( res );
    END_IF;

  END_FUNCTION;

  FUNCTION list_to_set(
               l : LIST [0 : ?] OF GENERIC:t
           ) : SET OF GENERIC:t;

    LOCAL
      s : SET OF GENERIC:t := [];
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( l ) BY 1;
      s := s + l[i];
    END_REPEAT;
    RETURN( s );

  END_FUNCTION;

  FUNCTION make_array_of_array(
               lis : LIST [1 : ?] OF LIST [1 : ?] OF GENERIC:t;
               low1 : INTEGER;
               u1 : INTEGER;
               low2 : INTEGER;
               u2 : INTEGER
           ) : ARRAY [low1 : u1] OF ARRAY [low2 : u2] OF GENERIC:t;

    LOCAL
      res : ARRAY [low1 : u1] OF ARRAY [low2 : u2] OF GENERIC:t;
    END_LOCAL;
    IF ( ( u1 - low1 ) + 1 ) <> SIZEOF( lis ) THEN
      RETURN( ? );
    END_IF;
    IF ( ( u2 - low2 ) + 1 ) <> SIZEOF( lis[1] ) THEN
      RETURN( ? );
    END_IF;
    res := [list_to_array( lis[1], low2, u2 ) : 0];
    REPEAT i := 2 TO HIINDEX( lis ) BY 1;
      IF ( ( u2 - low2 ) + 1 ) <> SIZEOF( lis[i] ) THEN
        RETURN( ? );
      END_IF;
      res[( low1 + i ) - 1] := list_to_array( lis[i], low2, u2 );
    END_REPEAT;
    RETURN( res );

  END_FUNCTION;

  FUNCTION mixed_loop_type_set(
               l : SET [0 : ?] OF loop
           ) : LOGICAL;

    LOCAL
      poly_loop_type : LOGICAL;
    END_LOCAL;
    IF SIZEOF( l ) <= 1 THEN
      RETURN( FALSE );
    END_IF;
    poly_loop_type := 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLY_LOOP' IN TYPEOF( l[1] );
    REPEAT i := 2 TO SIZEOF( l ) BY 1;
      IF ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLY_LOOP' IN TYPEOF( l[i] ) ) <> poly_loop_type THEN
        RETURN( TRUE );
      END_IF;
    END_REPEAT;
    RETURN( FALSE );

  END_FUNCTION;

  FUNCTION msb_shells(
               brep : manifold_solid_brep
           ) : SET [1 : ?] OF closed_shell;

    LOCAL
      return_set : SET [1 : ?] OF closed_shell := [brep.outer];
    END_LOCAL;
    IF SIZEOF( QUERY ( msbtype <* TYPEOF( brep ) | ( msbtype LIKE '*BREP_WITH_VOIDS' ) ) ) >= 1 THEN
      return_set := return_set + brep\brep_with_voids.voids;
    END_IF;
    RETURN( return_set );

  END_FUNCTION;

  FUNCTION normalise(
               arg : vector_or_direction
           ) : vector_or_direction;

    LOCAL
      ndim   : INTEGER;
      v      : direction := dummy_gri || direction( [1, 0, 0] );
      vec    : vector := dummy_gri || vector( v, 1 );
      mag    : REAL;
      result : vector_or_direction;
    END_LOCAL;
    IF NOT EXISTS( arg ) THEN
      result := ?;
    ELSE
      ndim := arg.dim;
      IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VECTOR' IN TYPEOF( arg ) THEN

        BEGIN
          v := dummy_gri || direction( arg\vector.orientation.direction_ratios );
          IF arg\vector.magnitude = 0 THEN
            RETURN( ? );
          ELSE
            vec := dummy_gri || vector( v, 1 );
          END_IF;
        END;
      ELSE
        v := dummy_gri || direction( arg.direction_ratios );
      END_IF;
      mag := 0;
      REPEAT i := 1 TO ndim BY 1;
        mag := mag + ( v.direction_ratios[i] * v.direction_ratios[i] );
      END_REPEAT;
      IF mag > 0 THEN
        mag := SQRT( mag );
        REPEAT i := 1 TO ndim BY 1;
          v.direction_ratios[i] := v.direction_ratios[i] DIV mag;
        END_REPEAT;
        IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VECTOR' IN TYPEOF( arg ) THEN
          vec.orientation := v;
          result := vec;
        ELSE
          result := v;
        END_IF;
      ELSE
        RETURN( ? );
      END_IF;
    END_IF;
    RETURN( result );

  END_FUNCTION;

  FUNCTION open_shell_reversed(
               a_shell : open_shell
           ) : oriented_open_shell;

    LOCAL
      the_reverse : oriented_open_shell;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_OPEN_SHELL' IN TYPEOF( a_shell ) THEN
      the_reverse := dummy_tri || connected_face_set( a_shell\connected_face_set.cfs_faces ) || open_shell(  ) || 
          oriented_open_shell( a_shell\oriented_open_shell.open_shell_element, NOT a_shell\oriented_open_shell.orientation );
    ELSE
      the_reverse := dummy_tri || connected_face_set( a_shell\connected_face_set.cfs_faces ) || open_shell(  ) || 
          oriented_open_shell( a_shell, FALSE );
    END_IF;
    RETURN( the_reverse );

  END_FUNCTION;

  FUNCTION orthogonal_complement(
               vec : direction
           ) : direction;

    LOCAL
      result : direction;
    END_LOCAL;
    IF ( vec.dim <> 2 ) OR ( NOT EXISTS( vec ) ) THEN
      RETURN( ? );
    ELSE
      result := dummy_gri || direction( [-vec.direction_ratios[2], vec.direction_ratios[1]] );
      RETURN( result );
    END_IF;

  END_FUNCTION;

  FUNCTION path_head_to_tail(
               a_path : path
           ) : LOGICAL;

    LOCAL
      n : INTEGER;
      p : LOGICAL := TRUE;
    END_LOCAL;
    n := SIZEOF( a_path.edge_list );
    REPEAT i := 2 TO n BY 1;
      p := p AND ( a_path.edge_list[i - 1].edge_end :=: a_path.edge_list[i].edge_start );
    END_REPEAT;
    RETURN( p );

  END_FUNCTION;

  FUNCTION path_reversed(
               a_path : path
           ) : oriented_path;

    LOCAL
      the_reverse : oriented_path;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_PATH' IN TYPEOF( a_path ) THEN
      the_reverse := dummy_tri || path( list_of_topology_reversed( a_path.edge_list ) ) || oriented_path( a_path\oriented_path.
          path_element, NOT a_path\oriented_path.orientation );
    ELSE
      the_reverse := dummy_tri || path( list_of_topology_reversed( a_path.edge_list ) ) || oriented_path( a_path, FALSE );
    END_IF;
    RETURN( the_reverse );

  END_FUNCTION;

  FUNCTION scalar_times_vector(
               scalar : REAL;
               vec : vector_or_direction
           ) : vector;

    LOCAL
      v      : direction;
      mag    : REAL;
      result : vector;
    END_LOCAL;
    IF ( NOT EXISTS( scalar ) ) OR ( NOT EXISTS( vec ) ) THEN
      RETURN( ? );
    ELSE
      IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VECTOR' IN TYPEOF( vec ) THEN
        v := dummy_gri || direction( vec\vector.orientation.direction_ratios );
        mag := scalar * vec\vector.magnitude;
      ELSE
        v := dummy_gri || direction( vec.direction_ratios );
        mag := scalar;
      END_IF;
      IF mag < 0 THEN
        REPEAT i := 1 TO SIZEOF( v.direction_ratios ) BY 1;
          v.direction_ratios[i] := -v.direction_ratios[i];
        END_REPEAT;
        mag := -mag;
      END_IF;
      result := dummy_gri || vector( normalise( v ), mag );
    END_IF;
    RETURN( result );

  END_FUNCTION;

  FUNCTION second_proj_axis(
               z_axis, x_axis, arg : direction
           ) : direction;

    LOCAL
      temp   : vector;
      v      : direction;
      y_axis : vector;
    END_LOCAL;
    IF NOT EXISTS( arg ) THEN
      v := dummy_gri || direction( [0, 1, 0] );
    ELSE
      v := arg;
    END_IF;
    temp := scalar_times_vector( dot_product( v, z_axis ), z_axis );
    y_axis := vector_difference( v, temp );
    temp := scalar_times_vector( dot_product( v, x_axis ), x_axis );
    y_axis := vector_difference( y_axis, temp );
    y_axis := normalise( y_axis );
    RETURN( y_axis.orientation );

  END_FUNCTION;

  FUNCTION set_of_topology_reversed(
               a_set : set_of_reversible_topology_item
           ) : set_of_reversible_topology_item;

    LOCAL
      the_reverse : set_of_reversible_topology_item;
    END_LOCAL;
    the_reverse := [];
    REPEAT i := 1 TO SIZEOF( a_set ) BY 1;
      the_reverse := the_reverse + topology_reversed( a_set[i] );
    END_REPEAT;
    RETURN( the_reverse );

  END_FUNCTION;

  FUNCTION shell_reversed(
               a_shell : shell
           ) : shell;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.OPEN_SHELL' IN TYPEOF( a_shell ) THEN
      RETURN( open_shell_reversed( a_shell ) );
    ELSE
      IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CLOSED_SHELL' IN TYPEOF( a_shell ) THEN
        RETURN( closed_shell_reversed( a_shell ) );
      ELSE
        RETURN( ? );
      END_IF;
    END_IF;

  END_FUNCTION;

  FUNCTION surface_weights_positive(
               b : rational_b_spline_surface
           ) : BOOLEAN;

    LOCAL
      result : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT i := 0 TO b.u_upper BY 1;
      REPEAT j := 0 TO b.v_upper BY 1;
        IF b.weights[i][j] <= 0 THEN
          result := FALSE;
          RETURN( result );
        END_IF;
      END_REPEAT;
    END_REPEAT;
    RETURN( result );

  END_FUNCTION;

  FUNCTION topology_reversed(
               an_item : reversible_topology
           ) : reversible_topology;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE' IN TYPEOF( an_item ) THEN
      RETURN( edge_reversed( an_item ) );
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PATH' IN TYPEOF( an_item ) THEN
      RETURN( path_reversed( an_item ) );
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACE_BOUND' IN TYPEOF( an_item ) THEN
      RETURN( face_bound_reversed( an_item ) );
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACE' IN TYPEOF( an_item ) THEN
      RETURN( face_reversed( an_item ) );
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SHELL' IN TYPEOF( an_item ) THEN
      RETURN( shell_reversed( an_item ) );
    END_IF;
    IF 'SET' IN TYPEOF( an_item ) THEN
      RETURN( set_of_topology_reversed( an_item ) );
    END_IF;
    IF 'LIST' IN TYPEOF( an_item ) THEN
      RETURN( list_of_topology_reversed( an_item ) );
    END_IF;
    RETURN( ? );

  END_FUNCTION;

  FUNCTION unambiguously_specified_multi_level_reference_designator(
               links : LIST [1 : ?] OF next_assembly_usage_occurrence
           ) : BOOLEAN;
    REPEAT i := 1 TO SIZEOF( links ) - 1 BY 1;
      CASE TRUE OF
        ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION' IN TYPEOF( links[i]\
            product_definition_relationship.relating_product_definition ) ) AND ( 
            'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( links[i]\
            product_definition_relationship.related_product_definition ) ) AND ( 
            'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( links[i + 1]\
            product_definition_relationship.relating_product_definition ) ) : 
          BEGIN
            IF NOT ( ( links[i]\product_definition_relationship.related_product_definition :=: links[i + 1]\
                product_definition_relationship.relating_product_definition ) OR ( ( SIZEOF( QUERY ( pdr <* USEDIN( links[i]\
                product_definition_relationship.related_product_definition, 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.'  + 
                'RELATED_PRODUCT_DEFINITION'  ) | ( pdr\product_definition_relationship.relating_product_definition :=: links[i +
                1]\product_definition_relationship.relating_product_definition ) ) ) = 1 ) AND ( links[i]\
                product_definition_relationship.related_product_definition\product_definition.formation\
                product_definition_formation.of_product :=: links[i + 1]\product_definition_relationship.
                relating_product_definition\product_definition.formation\product_definition_formation.of_product ) ) ) THEN
              RETURN( FALSE );
            END_IF;
          END;
        ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_REFERENCE' IN TYPEOF( links[i]\
            product_definition_relationship.related_product_definition ) ) AND ( 
            'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_REFERENCE'  IN TYPEOF( links[i + 1]\
            product_definition_relationship.relating_product_definition ) ) : 
          BEGIN
            IF NOT ( ( links[i]\product_definition_relationship.related_product_definition :=: links[i + 1]\
                product_definition_relationship.relating_product_definition ) OR ( ( SIZEOF( QUERY ( pdr <* USEDIN( links[i]\
                product_definition_relationship.related_product_definition, 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.'  + 
                'RELATED_PRODUCT_DEFINITION'  ) | ( pdr\product_definition_relationship.relating_product_definition :=: links[i +
                1]\product_definition_relationship.relating_product_definition ) ) ) = 1 ) AND ( links[i]\
                product_definition_relationship.related_product_definition\product_definition_reference.product_id = links[i + 1]\
                product_definition_relationship.relating_product_definition\product_definition_reference.product_id ) AND ( links[
                i]\product_definition_relationship.related_product_definition\product_definition_reference.
                id_owning_organization_name = links[i + 1]\product_definition_relationship.relating_product_definition\
                product_definition_reference.id_owning_organization_name ) AND ( links[i]\product_definition_relationship.
                related_product_definition\product_definition_reference.product_definition_id <> links[i + 1]\
                product_definition_relationship.relating_product_definition\product_definition_reference.product_definition_id ) ) )
                THEN
              RETURN( FALSE );
            END_IF;
          END;
        ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_REFERENCE' IN TYPEOF( links[i]\
            product_definition_relationship.relating_product_definition ) ) AND ( 
            'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( links[i]\
            product_definition_relationship.related_product_definition ) ) :           RETURN( FALSE );
        OTHERWISE                          :           RETURN( FALSE );
        END_CASE;
    END_REPEAT;
    RETURN( TRUE );

  END_FUNCTION;

  FUNCTION using_items(
               item : founded_item_select;
               checked_items : SET OF founded_item_select
           ) : SET OF founded_item_select;

    LOCAL
      next_items      : SET OF founded_item_select;
      new_check_items : SET OF founded_item_select;
      result_items    : SET OF founded_item_select;
    END_LOCAL;
    result_items := [];
    new_check_items := checked_items + item;
    next_items := QUERY ( z <* bag_to_set( USEDIN( item, '' ) ) | ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
        + 'REPRESENTATION_ITEM'  IN TYPEOF( z ) ) OR ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FOUNDED_ITEM' 
        IN TYPEOF( z ) ) ) );
    IF SIZEOF( next_items ) > 0 THEN
      REPEAT i := 1 TO HIINDEX( next_items ) BY 1;
        IF NOT ( next_items[i] IN new_check_items ) THEN
          result_items := result_items + next_items[i] + using_items( next_items[i], new_check_items );
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN( result_items );

  END_FUNCTION;

  FUNCTION using_representations(
               item : founded_item_select
           ) : SET OF representation;

    LOCAL
      results            : SET OF representation;
      intermediate_items : SET OF founded_item_select;
      result_bag         : BAG OF representation;
    END_LOCAL;
    results := [];
    result_bag := USEDIN( item, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION.ITEMS' );
    IF SIZEOF( result_bag ) > 0 THEN
      REPEAT i := 1 TO HIINDEX( result_bag ) BY 1;
        results := results + result_bag[i];
      END_REPEAT;
    END_IF;
    intermediate_items := using_items( item, [] );
    IF SIZEOF( intermediate_items ) > 0 THEN
      REPEAT i := 1 TO HIINDEX( intermediate_items ) BY 1;
        result_bag := USEDIN( intermediate_items[i], 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION.'
            + 'ITEMS'  );
        IF SIZEOF( result_bag ) > 0 THEN
          REPEAT j := 1 TO HIINDEX( result_bag ) BY 1;
            results := results + result_bag[j];
          END_REPEAT;
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN( results );

  END_FUNCTION;

  FUNCTION valid_measure_value(
               m : measure_value
           ) : BOOLEAN;
    IF 'REAL' IN TYPEOF( m ) THEN
      RETURN( m > 0 );
    ELSE
      IF 'INTEGER' IN TYPEOF( m ) THEN
        RETURN( m > 0 );
      ELSE
        RETURN( TRUE );
      END_IF;
    END_IF;

  END_FUNCTION;

  FUNCTION valid_units(
               m : measure_with_unit
           ) : BOOLEAN;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LENGTH_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 1, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MASS_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 1, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.TIME_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 1, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELECTRIC_CURRENT_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.THERMODYNAMIC_TEMPERATURE_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CELSIUS_TEMPERATURE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AMOUNT_OF_SUBSTANCE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 1, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LUMINOUS_INTENSITY_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PLANE_ANGLE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SOLID_ANGLE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AREA_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VOLUME_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 3, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.RATIO_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POSITIVE_LENGTH_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 1, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POSITIVE_PLANE_ANGLE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ACCELERATION_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 1, 0, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CAPACITANCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( -2, -1, 4, 2, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELECTRIC_CHARGE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 1, 1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CONDUCTANCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( -2, -1, 3, 2, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELECTRIC_POTENTIAL_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 1, -3, -1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ENERGY_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 1, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FORCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 1, 1, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FREQUENCY_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ILLUMINANCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( -2, 0, 0, 0, 0, 0, 1 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.INDUCTANCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 1, -2, -2, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LUMINOUS_FLUX_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAGNETIC_FLUX_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 1, -2, -1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAGNETIC_FLUX_DENSITY_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 1, -2, -1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POWER_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 1, -3, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRESSURE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( -1, 1, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.RESISTANCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 1, -3, -2, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VELOCITY_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 1, 0, -1, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.RADIOACTIVITY_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ABSORBED_DOSE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.DOSE_EQUIVALENT_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    RETURN( TRUE );

  END_FUNCTION;

  FUNCTION vector_difference(
               arg1, arg2 : vector_or_direction
           ) : vector;

    LOCAL
      ndim   : INTEGER;
      mag2   : REAL;
      mag1   : REAL;
      mag    : REAL;
      res    : direction;
      vec1   : direction;
      vec2   : direction;
      result : vector;
    END_LOCAL;
    IF ( NOT EXISTS( arg1 ) ) OR ( NOT EXISTS( arg2 ) ) OR ( arg1.dim <> arg2.dim ) THEN
      RETURN( ? );
    ELSE

      BEGIN
        IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VECTOR' IN TYPEOF( arg1 ) THEN
          mag1 := arg1\vector.magnitude;
          vec1 := arg1\vector.orientation;
        ELSE
          mag1 := 1;
          vec1 := arg1;
        END_IF;
        IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VECTOR' IN TYPEOF( arg2 ) THEN
          mag2 := arg2\vector.magnitude;
          vec2 := arg2\vector.orientation;
        ELSE
          mag2 := 1;
          vec2 := arg2;
        END_IF;
        vec1 := normalise( vec1 );
        vec2 := normalise( vec2 );
        ndim := SIZEOF( vec1.direction_ratios );
        mag := 0;
        res := dummy_gri || direction( vec1.direction_ratios );
        REPEAT i := 1 TO ndim BY 1;
          res.direction_ratios[i] := ( mag1 * vec1.direction_ratios[i] ) - ( mag2 * vec2.direction_ratios[i] );
          mag := mag + ( res.direction_ratios[i] * res.direction_ratios[i] );
        END_REPEAT;
        IF mag > 0 THEN
          result := dummy_gri || vector( res, SQRT( mag ) );
        ELSE
          result := dummy_gri || vector( vec1, 0 );
        END_IF;
      END;
    END_IF;
    RETURN( result );

  END_FUNCTION;

END_SCHEMA;
