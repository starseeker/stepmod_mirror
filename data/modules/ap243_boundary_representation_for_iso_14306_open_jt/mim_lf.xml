<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?><!DOCTYPE express SYSTEM "../../../dtd/express.dtd">
<express description.file="descriptions.xml" language_version="2" rcs.date="$Date$" rcs.revision="$Revision$">
   <application name="JSDAI" owner="LKSoft" source="ap243_boundary_representation_for_iso_14306_open_jt_mim_lf schema_instance" url="www.lksoft.com" version="4.0 beta"/>
   <schema name="ap243_boundary_representation_for_iso_14306_open_jt_mim_lf">
      <constant expression="representation_item( '' ) || geometric_representation_item(  )" name="dummy_gri">
         <typename name="geometric_representation_item"/>
      </constant>
      <constant expression="representation_item( '' ) || topological_representation_item(  )" name="dummy_tri">
         <typename name="topological_representation_item"/>
      </constant>
      <type name="absorbed_dose_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="acceleration_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="amount_of_substance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="annotation_symbol_occurrence_item">
         <select selectitems="annotation_symbol defined_symbol"/>
      </type>
      <type name="area_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="axis2_placement">
         <select selectitems="axis2_placement_2d axis2_placement_3d"/>
      </type>
      <type name="b_spline_curve_form">
         <enumeration items="polyline_form circular_arc elliptic_arc parabolic_arc hyperbolic_arc unspecified"/>
      </type>
      <type name="b_spline_surface_form">
         <enumeration items="plane_surf cylindrical_surf conical_surf spherical_surf toroidal_surf surf_of_revolution ruled_surf generalised_cone quadric_surf surf_of_linear_extrusion unspecified"/>
      </type>
      <type name="capacitance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="celsius_temperature_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="chained_representation_link">
         <select selectitems="mapped_item representation_context representation_relationship"/>
      </type>
      <type name="characterized_definition">
         <select selectitems="characterized_object characterized_product_definition shape_definition"/>
      </type>
      <type name="characterized_product_definition">
         <select selectitems="product_definition product_definition_relationship"/>
      </type>
      <type name="conductance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="context_dependent_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="count_measure">
         <builtintype type="NUMBER"/>
      </type>
      <type name="curve_font_or_scaled_curve_font_select">
         <select selectitems="curve_style_font_select curve_style_font_and_scaling"/>
      </type>
      <type name="curve_on_surface">
         <select selectitems="composite_curve_on_surface pcurve surface_curve"/>
      </type>
      <type name="curve_or_annotation_curve_occurrence">
         <select selectitems="curve annotation_curve_occurrence"/>
      </type>
      <type name="curve_or_curve_set">
         <select selectitems="curve"/>
      </type>
      <type name="curve_or_render">
         <select selectitems="curve_style"/>
      </type>
      <type name="curve_style_font_select">
         <select selectitems="curve_style_font pre_defined_curve_font externally_defined_curve_font"/>
      </type>
      <type name="defined_symbol_select">
         <select selectitems="pre_defined_symbol externally_defined_symbol"/>
      </type>
      <type name="derived_property_select">
         <select selectitems="property_definition"/>
      </type>
      <type name="description_attribute_select">
         <select selectitems="application_context external_source property_definition_representation representation"/>
      </type>
      <type name="descriptive_measure">
         <builtintype type="STRING"/>
      </type>
      <type name="dimension_count">
         <builtintype type="INTEGER"/>
         <where expression="( SELF &gt; 0 )" label="wr1"/>
      </type>
      <type name="direction_count_select">
         <select selectitems="u_direction_count v_direction_count"/>
      </type>
      <type name="dose_equivalent_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="electric_charge_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="electric_current_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="electric_potential_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="energy_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="external_identification_item">
         <select selectitems="document_file generic_product_definition_reference trimmed_curve"/>
      </type>
      <type name="fill_area_style_tile_shape_select">
         <select selectitems="fill_area_style_tile_curve_with_style fill_area_style_tile_coloured_region fill_area_style_tile_symbol_with_style pre_defined_tile externally_defined_tile"/>
      </type>
      <type name="fill_style_select">
         <select selectitems="fill_area_style_colour externally_defined_tile_style fill_area_style_tiles externally_defined_hatch_style fill_area_style_hatching"/>
      </type>
      <type name="force_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="founded_item_select">
         <select selectitems="founded_item representation_item"/>
      </type>
      <type name="frequency_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="geometric_item_specific_usage_select">
         <select selectitems="shape_aspect shape_aspect_relationship"/>
      </type>
      <type name="geometric_model_item">
         <select selectitems="geometric_representation_item"/>
      </type>
      <type name="groupable_item">
         <select selectitems="geometric_representation_item mapped_item shape_representation_relationship styled_item topological_representation_item"/>
         <where expression="( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.GROUP' IN TYPEOF( SELF ) ) )" label="wr1"/>
      </type>
      <type name="id_attribute_select">
         <select selectitems="application_context group property_definition representation shape_aspect shape_aspect_relationship"/>
      </type>
      <type name="identification_item">
         <select selectitems="document_file representation shape_representation"/>
      </type>
      <type name="identifier">
         <builtintype type="STRING"/>
      </type>
      <type name="illuminance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="inductance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="invisible_item">
         <select selectitems="presentation_layer_assignment representation styled_item"/>
      </type>
      <type name="item_identified_representation_usage_definition">
         <select selectitems="represented_definition"/>
      </type>
      <type name="item_identified_representation_usage_select">
         <select selectitems="representation_item"/>
      </type>
      <type name="knot_type">
         <enumeration items="uniform_knots quasi_uniform_knots piecewise_bezier_knots unspecified"/>
      </type>
      <type name="label">
         <builtintype type="STRING"/>
      </type>
      <type name="layered_item">
         <select selectitems="representation_item"/>
      </type>
      <type name="length_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="list_of_reversible_topology_item">
         <aggregate lower="0" type="LIST" upper="?"/>
         <typename name="reversible_topology_item"/>
      </type>
      <type name="luminous_flux_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="luminous_intensity_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="magnetic_flux_density_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="magnetic_flux_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="marker_select">
         <select selectitems="marker_type pre_defined_marker"/>
      </type>
      <type name="marker_type">
         <enumeration items="dot x plus asterisk ring square triangle"/>
      </type>
      <type name="mass_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="measure_value">
         <select selectitems="absorbed_dose_measure dose_equivalent_measure radioactivity_measure acceleration_measure amount_of_substance_measure area_measure celsius_temperature_measure context_dependent_measure count_measure descriptive_measure capacitance_measure electric_charge_measure conductance_measure electric_current_measure electric_potential_measure energy_measure magnetic_flux_density_measure force_measure frequency_measure illuminance_measure inductance_measure length_measure luminous_flux_measure luminous_intensity_measure magnetic_flux_measure mass_measure numeric_measure non_negative_length_measure parameter_value plane_angle_measure positive_length_measure positive_plane_angle_measure positive_ratio_measure power_measure pressure_measure ratio_measure resistance_measure solid_angle_measure thermodynamic_temperature_measure time_measure velocity_measure volume_measure"/>
      </type>
      <type name="mechanical_design_geometric_presentation_representation_items">
         <select selectitems="axis2_placement mapped_item styled_item"/>
      </type>
      <type name="name_attribute_select">
         <select selectitems="derived_unit product_definition property_definition_representation"/>
      </type>
      <type name="non_negative_length_measure">
         <typename name="length_measure"/>
         <where expression="( SELF &gt;= 0 )" label="wr1"/>
      </type>
      <type name="numeric_measure">
         <builtintype type="NUMBER"/>
      </type>
      <type name="parameter_value">
         <builtintype type="REAL"/>
      </type>
      <type name="pcurve_or_surface">
         <select selectitems="pcurve surface"/>
      </type>
      <type name="plane_angle_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="positive_length_measure">
         <typename name="non_negative_length_measure"/>
         <where expression="( SELF &gt; 0 )" label="wr1"/>
      </type>
      <type name="positive_plane_angle_measure">
         <typename name="plane_angle_measure"/>
         <where expression="( SELF &gt; 0 )" label="wr1"/>
      </type>
      <type name="positive_ratio_measure">
         <typename name="ratio_measure"/>
         <where expression="( SELF &gt; 0 )" label="wr1"/>
      </type>
      <type name="power_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="preferred_surface_curve_representation">
         <enumeration items="curve_3d pcurve_s1 pcurve_s2"/>
      </type>
      <type name="presentation_style_select">
         <select selectitems="point_style curve_style surface_style_usage fill_area_style externally_defined_style"/>
      </type>
      <type name="pressure_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="product_definition_or_reference">
         <select selectitems="product_definition generic_product_definition_reference"/>
      </type>
      <type name="radioactivity_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="ratio_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="represented_definition">
         <select selectitems="general_property property_definition shape_aspect shape_aspect_relationship"/>
      </type>
      <type name="resistance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="reversible_topology">
         <select selectitems="reversible_topology_item list_of_reversible_topology_item set_of_reversible_topology_item"/>
      </type>
      <type name="reversible_topology_item">
         <select selectitems="edge path face face_bound closed_shell open_shell"/>
      </type>
      <type name="role_select">
         <select selectitems="group_assignment"/>
      </type>
      <type name="set_of_reversible_topology_item">
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="reversible_topology_item"/>
      </type>
      <type name="shading_surface_method">
         <enumeration items="constant_shading colour_shading dot_shading normal_shading"/>
      </type>
      <type name="shape_definition">
         <select selectitems="product_definition_shape shape_aspect shape_aspect_relationship"/>
      </type>
      <type name="shape_model">
         <select selectitems="shape_representation"/>
      </type>
      <type name="shell">
         <select selectitems="open_shell closed_shell"/>
      </type>
      <type name="si_prefix">
         <enumeration items="exa peta tera giga mega kilo hecto deca deci centi milli micro nano pico femto atto"/>
      </type>
      <type name="si_unit_name">
         <enumeration items="metre gram second ampere kelvin mole candela radian steradian hertz newton pascal joule watt coulomb volt farad ohm siemens weber tesla henry degree_celsius lumen lux becquerel gray sievert"/>
      </type>
      <type name="size_select">
         <select selectitems="positive_length_measure measure_with_unit descriptive_measure"/>
      </type>
      <type name="solid_angle_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="source_item">
         <select selectitems="identifier"/>
      </type>
      <type name="style_context_select">
         <select selectitems="group presentation_layer_assignment representation representation_item representation_relationship"/>
      </type>
      <type name="styled_item_target">
         <select selectitems="geometric_representation_item mapped_item representation"/>
      </type>
      <type name="surface_side">
         <enumeration items="positive negative both"/>
      </type>
      <type name="surface_side_style_select">
         <select selectitems="surface_side_style pre_defined_surface_side_style"/>
      </type>
      <type name="surface_style_element_select">
         <select selectitems="surface_style_fill_area surface_style_boundary surface_style_silhouette surface_style_segmentation_curve surface_style_control_grid surface_style_parameter_line surface_style_rendering"/>
      </type>
      <type name="text">
         <builtintype type="STRING"/>
      </type>
      <type name="thermodynamic_temperature_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="time_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="transition_code">
         <enumeration items="discontinuous continuous cont_same_gradient cont_same_gradient_same_curvature"/>
      </type>
      <type name="trimming_preference">
         <enumeration items="cartesian parameter unspecified"/>
      </type>
      <type name="trimming_select">
         <select selectitems="cartesian_point parameter_value"/>
      </type>
      <type name="u_direction_count">
         <builtintype type="INTEGER"/>
         <where expression="( SELF &gt; 1 )" label="wr1"/>
      </type>
      <type name="unit">
         <select selectitems="derived_unit named_unit"/>
      </type>
      <type name="v_direction_count">
         <builtintype type="INTEGER"/>
         <where expression="( SELF &gt; 1 )" label="wr1"/>
      </type>
      <type name="vector_or_direction">
         <select selectitems="direction vector"/>
      </type>
      <type name="velocity_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="volume_measure">
         <builtintype type="REAL"/>
      </type>
      <entity name="absorbed_dose_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ABSORBED_DOSE_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="absorbed_dose_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.gray ) )" label="wr1"/>
      </entity>
      <entity name="acceleration_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ACCELERATION_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="acceleration_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensional_exponents( 1, 0, -2, 0, 0, 0, 0 ) )" label="wr1"/>
      </entity>
      <entity name="advanced_brep_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'MANIFOLD_SOLID_BREP' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACETED_BREP', &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM' , &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'MANIFOLD_SOLID_BREP' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM'] * TYPEOF( it ) ) &#10;               = 1 ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( SIZEOF( &#10;               QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces | ( NOT ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ADVANCED_FACE'  IN TYPEOF( fcs ) ) ) ) ) = 0 ) ) ) ) =&#10;               0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'ORIENTED_CLOSED_SHELL'  IN TYPEOF( msb\manifold_solid_brep.outer ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( brv &lt;* QUERY ( it &lt;* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'BREP_WITH_VOIDS'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* brv\brep_with_voids.voids | csh\&#10;               oriented_closed_shell.orientation ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'ADVANCED_BREP_SHAPE_REPRESENTATION'  IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) ) ) ) =&#10;               0 )" label="wr6"/>
      </entity>
      <entity name="advanced_face" supertypes="face_surface">
         <where expression="( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELEMENTARY_SURFACE', &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.B_SPLINE_SURFACE' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SWEPT_SURFACE' ] * TYPEOF( face_geometry ) ) = 1 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( &#10;                NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_CURVE' IN TYPEOF( oe\oriented_edge.&#10;                edge_element ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( &#10;                NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LINE', &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CONIC' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SURFACE_CURVE' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.B_SPLINE_CURVE' ] * TYPEOF( oe.edge_element\&#10;                edge_curve.edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( &#10;                NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_POINT' IN TYPEOF( oe\edge.edge_start ) ) &#10;                AND ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CARTESIAN_POINT' IN TYPEOF( oe\edge.edge_start\&#10;                vertex_point.vertex_geometry ) ) AND ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_POINT' &#10;                IN TYPEOF( oe\edge.edge_end ) ) AND ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CARTESIAN_POINT' &#10;                IN TYPEOF( oe\edge.edge_end\vertex_point.vertex_geometry ) ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'ORIENTED_PATH'  IN TYPEOF( elp_fbnds.bound ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SWEPT_SURFACE' IN TYPEOF( face_geometry ) ) ) &#10;                OR ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LINE', &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CONIC' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.B_SPLINE_CURVE' ] * TYPEOF( face_geometry\&#10;                swept_surface.swept_curve ) ) = 1 ) )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( vlp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'VERTEX_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( NOT ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_POINT'  IN TYPEOF( vlp_fbnds\face_bound.bound\&#10;                vertex_loop.loop_vertex ) ) AND ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CARTESIAN_POINT' IN &#10;                TYPEOF( vlp_fbnds\face_bound.bound\vertex_loop.loop_vertex\vertex_point.vertex_geometry ) ) ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( bnd &lt;* bounds | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'EDGE_LOOP' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_LOOP'] * TYPEOF( bnd.bound ) ) &#10;                = 1 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SURFACE_CURVE'  IN TYPEOF( oe\oriented_edge.&#10;                edge_element\edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( QUERY ( sc_ag &lt;* oe.edge_element\edge_curve.&#10;                edge_geometry\surface_curve.associated_geometry | ( NOT ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE'  IN TYPEOF( sc_ag ) ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) &#10;                = 0 )" label="wr9"/>
         <where expression="( ( ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SWEPT_SURFACE' IN TYPEOF( face_geometry ) ) ) &#10;                OR ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE' IN TYPEOF( face_geometry\&#10;                swept_surface.swept_curve ) ) ) OR ( SIZEOF( face_geometry\swept_surface.swept_curve\polyline.points ) &gt;= 3 ) ) &#10;                AND ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* bounds | ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( NOT ( &#10;                SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE'  IN TYPEOF( oe\oriented_edge.edge_element\&#10;                edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( oe\oriented_edge.edge_element\edge_curve.edge_geometry\polyline.&#10;                points ) &gt;= 3 ) ) ) ) ) = 0 ) ) ) ) = 0 ) )" label="wr10"/>
      </entity>
      <entity name="amount_of_substance_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AMOUNT_OF_SUBSTANCE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="amount_of_substance_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 1 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="annotation_curve_occurrence" supertypes="annotation_occurrence">
         <explicit name="item">
            <typename name="curve_or_curve_set"/>
            <redeclaration entity-ref="styled_item"/>
         </explicit>
      </entity>
      <entity name="annotation_occurrence" super.expression="ONEOF (annotation_curve_occurrence, annotation_symbol_occurrence)" supertypes="styled_item">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF( SELF ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( reps &lt;* using_representations( SELF ) | ( NOT ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ANNOTATION_REPRESENTATION_SELECT'  IN TYPEOF( reps ) ) ) ) ) &#10;               = 0 )" label="wr2"/>
      </entity>
      <entity name="annotation_symbol" supertypes="mapped_item">
         <explicit name="mapping_source">
            <typename name="symbol_representation_map"/>
            <redeclaration entity-ref="mapped_item"/>
         </explicit>
         <explicit name="mapping_target">
            <typename name="symbol_target"/>
            <redeclaration entity-ref="mapped_item"/>
         </explicit>
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF( SELF ) )" label="wr1"/>
      </entity>
      <entity name="annotation_symbol_occurrence" supertypes="annotation_occurrence">
         <explicit name="item">
            <typename name="annotation_symbol_occurrence_item"/>
            <redeclaration entity-ref="styled_item"/>
         </explicit>
      </entity>
      <entity name="application_context">
         <explicit name="application">
            <typename name="label"/>
         </explicit>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <inverse attribute="frame_of_reference" entity="application_context_element" name="context_elements">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM' ) ) &#10;               &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="application_context_element" super.expression="ONEOF (product_context, product_definition_context)">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="frame_of_reference">
            <typename name="application_context"/>
         </explicit>
      </entity>
      <entity name="applied_external_identification_assignment" supertypes="external_identification_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="external_identification_item"/>
         </explicit>
      </entity>
      <entity name="applied_group_assignment" supertypes="group_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="groupable_item"/>
         </explicit>
      </entity>
      <entity name="applied_identification_assignment" supertypes="identification_assignment">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="identification_item"/>
         </explicit>
      </entity>
      <entity name="area_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AREA_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="area_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensional_exponents( 2, 0, 0, 0, 0, 0, 0 ) )" label="wr1"/>
      </entity>
      <entity name="assembly_component_usage" super.expression="quantified_assembly_component_usage ANDOR ONEOF (multi_level_reference_designator, next_assembly_usage_occurrence, promissory_usage_occurrence, specified_higher_usage_occurrence)" supertypes="product_definition_usage">
         <explicit name="reference_designator" optional="YES">
            <typename name="identifier"/>
         </explicit>
      </entity>
      <entity name="axis1_placement" supertypes="placement">
         <explicit name="axis" optional="YES">
            <typename name="direction"/>
         </explicit>
         <derived expression="NVL( normalise( axis ), dummy_gri || direction( [0, 0, 1] ) )" name="z">
            <typename name="direction"/>
         </derived>
         <where expression="( SELF\geometric_representation_item.dim = 3 )" label="wr1"/>
      </entity>
      <entity name="axis2_placement_2d" supertypes="placement">
         <explicit name="ref_direction" optional="YES">
            <typename name="direction"/>
         </explicit>
         <derived expression="build_2axes( ref_direction )" name="p">
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="direction"/>
         </derived>
         <where expression="( SELF\geometric_representation_item.dim = 2 )" label="wr1"/>
      </entity>
      <entity name="axis2_placement_3d" supertypes="placement">
         <explicit name="axis" optional="YES">
            <typename name="direction"/>
         </explicit>
         <explicit name="ref_direction" optional="YES">
            <typename name="direction"/>
         </explicit>
         <derived expression="build_axes( axis, ref_direction )" name="p">
            <aggregate lower="3" type="LIST" upper="3"/>
            <typename name="direction"/>
         </derived>
         <where expression="( SELF\placement.location.dim = 3 )" label="wr1"/>
         <where expression="( ( NOT EXISTS( axis ) ) OR ( axis.dim = 3 ) )" label="wr2"/>
         <where expression="( ( NOT EXISTS( ref_direction ) ) OR ( ref_direction.dim = 3 ) )" label="wr3"/>
         <where expression="( ( NOT EXISTS( axis ) ) OR ( NOT EXISTS( ref_direction ) ) OR ( cross_product( axis, ref_direction ).magnitude &gt; 0 ) )" label="wr4"/>
      </entity>
      <entity name="b_spline_curve" super.expression="ONEOF (uniform_curve, b_spline_curve_with_knots, quasi_uniform_curve, bezier_curve) ANDOR rational_b_spline_curve" supertypes="bounded_curve">
         <explicit name="degree">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="control_points_list">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="curve_form">
            <typename name="b_spline_curve_form"/>
         </explicit>
         <explicit name="closed_curve">
            <builtintype type="LOGICAL"/>
         </explicit>
         <explicit name="self_intersect">
            <builtintype type="LOGICAL"/>
         </explicit>
         <derived expression="SIZEOF( control_points_list ) - 1" name="upper_index_on_control_points">
            <builtintype type="INTEGER"/>
         </derived>
         <derived expression="list_to_array( &#10;                                         control_points_list, 0, upper_index_on_control_points )" name="control_points">
            <aggregate lower="0" type="ARRAY" upper="upper_index_on_control_points"/>
            <typename name="cartesian_point"/>
         </derived>
         <where expression="( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.UNIFORM_CURVE' IN TYPEOF( SELF ) ) OR ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.QUASI_UNIFORM_CURVE'  IN TYPEOF( SELF ) ) OR ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.BEZIER_CURVE'  IN TYPEOF( SELF ) ) OR ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.B_SPLINE_CURVE_WITH_KNOTS'  IN TYPEOF( SELF ) ) )" label="wr1"/>
      </entity>
      <entity name="b_spline_curve_with_knots" supertypes="b_spline_curve">
         <explicit name="knot_multiplicities">
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="knots">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="knot_spec">
            <typename name="knot_type"/>
         </explicit>
         <derived expression="SIZEOF( knots )" name="upper_index_on_knots">
            <builtintype type="INTEGER"/>
         </derived>
         <where expression="constraints_param_b_spline( degree, upper_index_on_knots, upper_index_on_control_points, knot_multiplicities, knots )" label="wr1"/>
         <where expression="( SIZEOF( knot_multiplicities ) = upper_index_on_knots )" label="wr2"/>
      </entity>
      <entity name="b_spline_surface" super.expression="ONEOF (b_spline_surface_with_knots, uniform_surface, quasi_uniform_surface, bezier_surface) ANDOR rational_b_spline_surface" supertypes="bounded_surface">
         <explicit name="u_degree">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="v_degree">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="control_points_list">
            <aggregate lower="2" type="LIST" upper="?"/>
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="surface_form">
            <typename name="b_spline_surface_form"/>
         </explicit>
         <explicit name="u_closed">
            <builtintype type="LOGICAL"/>
         </explicit>
         <explicit name="v_closed">
            <builtintype type="LOGICAL"/>
         </explicit>
         <explicit name="self_intersect">
            <builtintype type="LOGICAL"/>
         </explicit>
         <derived expression="SIZEOF( control_points_list ) - 1" name="u_upper">
            <builtintype type="INTEGER"/>
         </derived>
         <derived expression="SIZEOF( control_points_list[1] ) - 1" name="v_upper">
            <builtintype type="INTEGER"/>
         </derived>
         <derived expression="make_array_of_array( control_points_list, &#10;                          0, u_upper, 0, v_upper )" name="control_points">
            <aggregate lower="0" type="ARRAY" upper="u_upper"/>
            <aggregate lower="0" type="ARRAY" upper="v_upper"/>
            <typename name="cartesian_point"/>
         </derived>
         <where expression="( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.UNIFORM_SURFACE' IN TYPEOF( SELF ) ) OR ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.QUASI_UNIFORM_SURFACE'  IN TYPEOF( SELF ) ) OR ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.BEZIER_SURFACE'  IN TYPEOF( SELF ) ) OR ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.B_SPLINE_SURFACE_WITH_KNOTS'  IN TYPEOF( SELF ) ) )" label="wr1"/>
      </entity>
      <entity name="b_spline_surface_with_knots" supertypes="b_spline_surface">
         <explicit name="u_multiplicities">
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="v_multiplicities">
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="u_knots">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="v_knots">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="knot_spec">
            <typename name="knot_type"/>
         </explicit>
         <derived expression="SIZEOF( u_knots )" name="knot_u_upper">
            <builtintype type="INTEGER"/>
         </derived>
         <derived expression="SIZEOF( v_knots )" name="knot_v_upper">
            <builtintype type="INTEGER"/>
         </derived>
         <where expression="constraints_param_b_spline( SELF\b_spline_surface.u_degree, knot_u_upper, SELF\b_spline_surface.u_upper, &#10;               u_multiplicities, u_knots )" label="wr1"/>
         <where expression="constraints_param_b_spline( SELF\b_spline_surface.v_degree, knot_v_upper, SELF\b_spline_surface.v_upper, &#10;               v_multiplicities, v_knots )" label="wr2"/>
         <where expression="( SIZEOF( u_multiplicities ) = knot_u_upper )" label="wr3"/>
         <where expression="( SIZEOF( v_multiplicities ) = knot_v_upper )" label="wr4"/>
      </entity>
      <entity name="bezier_curve" supertypes="b_spline_curve"/>
      <entity name="bezier_surface" supertypes="b_spline_surface"/>
      <entity name="bounded_curve" super.expression="ONEOF (polyline, b_spline_curve, trimmed_curve, composite_curve)" supertypes="curve"/>
      <entity name="bounded_surface" supertypes="surface"/>
      <entity name="brep_with_voids" supertypes="manifold_solid_brep">
         <explicit name="voids">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="oriented_closed_shell"/>
         </explicit>
      </entity>
      <entity name="capacitance_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CAPACITANCE_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="capacitance_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.farad ) )" label="wr1"/>
      </entity>
      <entity name="cartesian_point" supertypes="point">
         <explicit name="coordinates">
            <aggregate lower="1" type="LIST" upper="3"/>
            <typename name="length_measure"/>
         </explicit>
      </entity>
      <entity name="cartesian_transformation_operator" super.expression="ONEOF (cartesian_transformation_operator_2d, cartesian_transformation_operator_3d)" supertypes="functionally_defined_transformation geometric_representation_item">
         <explicit name="axis1" optional="YES">
            <typename name="direction"/>
         </explicit>
         <explicit name="axis2" optional="YES">
            <typename name="direction"/>
         </explicit>
         <explicit name="local_origin">
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="scale" optional="YES">
            <builtintype type="REAL"/>
         </explicit>
         <derived expression="NVL( scale, 1 )" name="scl">
            <builtintype type="REAL"/>
         </derived>
         <where expression="( scl &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="cartesian_transformation_operator_2d" supertypes="cartesian_transformation_operator">
         <derived expression="base_axis( 2, SELF\cartesian_transformation_operator.axis1, SELF\&#10;             cartesian_transformation_operator.axis2, ? )" name="u">
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="direction"/>
         </derived>
         <where expression="( SELF\geometric_representation_item.dim = 2 )" label="wr1"/>
      </entity>
      <entity name="cartesian_transformation_operator_3d" supertypes="cartesian_transformation_operator">
         <explicit name="axis3" optional="YES">
            <typename name="direction"/>
         </explicit>
         <derived expression="base_axis( 3, SELF\cartesian_transformation_operator.axis1, SELF\&#10;             cartesian_transformation_operator.axis2, axis3 )" name="u">
            <aggregate lower="3" type="LIST" upper="3"/>
            <typename name="direction"/>
         </derived>
         <where expression="( SELF\geometric_representation_item.dim = 3 )" label="wr1"/>
      </entity>
      <entity name="celsius_temperature_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.THERMODYNAMIC_TEMPERATURE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="chain_based_geometric_item_specific_usage" supertypes="geometric_item_specific_usage chain_based_item_identified_representation_usage"/>
      <entity name="chain_based_item_identified_representation_usage" supertypes="item_identified_representation_usage">
         <explicit name="nodes">
            <aggregate lower="2" type="LIST" unique="YES" upper="?"/>
            <typename name="representation"/>
         </explicit>
         <explicit name="undirected_link">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="chained_representation_link"/>
         </explicit>
         <derived expression="nodes[1]" name="root">
            <typename name="representation"/>
         </derived>
         <derived expression="nodes[HIINDEX( nodes )]" name="used_representation">
            <typename name="representation"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </derived>
         <derived expression="get_directed_link( nodes, &#10;                                                 undirected_link )" name="directed_link">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="representation_relationship"/>
         </derived>
         <derived expression="SELF\item_identified_representation_usage.used_representation" name="leaf">
            <typename name="representation"/>
         </derived>
         <where expression="EXISTS( directed_link )" label="wr1"/>
      </entity>
      <entity name="characterized_object">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="circle" supertypes="conic">
         <explicit name="radius">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="closed_shell" supertypes="connected_face_set"/>
      <entity name="colour"/>
      <entity name="colour_rgb" supertypes="colour_specification">
         <explicit name="red">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="green">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="blue">
            <builtintype type="REAL"/>
         </explicit>
         <where expression="( ( 0 &lt;= red ) AND ( red &lt;= 1 ) )" label="wr1"/>
         <where expression="( ( 0 &lt;= green ) AND ( green &lt;= 1 ) )" label="wr2"/>
         <where expression="( ( 0 &lt;= blue ) AND ( blue &lt;= 1 ) )" label="wr3"/>
      </entity>
      <entity name="colour_specification" supertypes="colour">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="composite_curve" supertypes="bounded_curve">
         <explicit name="segments">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="composite_curve_segment"/>
         </explicit>
         <explicit name="self_intersect">
            <builtintype type="LOGICAL"/>
         </explicit>
         <derived expression="SIZEOF( segments )" name="n_segments">
            <builtintype type="INTEGER"/>
         </derived>
         <derived expression="segments[n_segments].transition &lt;&gt; discontinuous" name="closed_curve">
            <builtintype type="LOGICAL"/>
         </derived>
         <where expression="( ( ( NOT closed_curve ) AND ( SIZEOF( QUERY ( temp &lt;* segments | ( temp.transition = discontinuous ) ) ) = 1 ) ) OR &#10;               ( closed_curve AND ( SIZEOF( QUERY ( temp &lt;* segments | ( temp.transition = discontinuous ) ) ) = 0 ) ) )" label="wr1"/>
      </entity>
      <entity name="composite_curve_on_surface" supertypes="composite_curve">
         <derived expression="get_basis_surface( SELF )" name="basis_surface">
            <aggregate lower="0" type="SET" upper="2"/>
            <typename name="surface"/>
         </derived>
         <where expression="( SIZEOF( basis_surface ) &gt; 0 )" label="wr1"/>
         <where expression="constraints_composite_curve_on_surface( SELF )" label="wr2"/>
      </entity>
      <entity name="composite_curve_segment" supertypes="founded_item">
         <explicit name="transition">
            <typename name="transition_code"/>
         </explicit>
         <explicit name="same_sense">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="parent_curve">
            <typename name="curve"/>
         </explicit>
         <inverse attribute="segments" entity="composite_curve" name="using_curves">
            <inverse.aggregate lower="1" type="BAG" upper="?"/>
         </inverse>
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.BOUNDED_CURVE' IN TYPEOF( parent_curve ) )" label="wr1"/>
      </entity>
      <entity name="conductance_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CONDUCTANCE_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="conductance_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.siemens ) )" label="wr1"/>
      </entity>
      <entity name="conic" super.expression="ONEOF (circle, ellipse, hyperbola, parabola)" supertypes="curve">
         <explicit name="position">
            <typename name="axis2_placement"/>
         </explicit>
      </entity>
      <entity name="conical_surface" supertypes="elementary_surface">
         <explicit name="radius">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="semi_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="( radius &gt;= 0 )" label="wr1"/>
      </entity>
      <entity name="connected_edge_set" supertypes="topological_representation_item">
         <explicit name="ces_edges">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="edge"/>
         </explicit>
      </entity>
      <entity name="connected_face_set" super.expression="ONEOF (closed_shell, open_shell)" supertypes="topological_representation_item">
         <explicit name="cfs_faces">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="face"/>
         </explicit>
      </entity>
      <entity name="context_dependent_over_riding_styled_item" supertypes="over_riding_styled_item">
         <explicit name="style_context">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="style_context_select"/>
         </explicit>
         <where expression="( ( SIZEOF( QUERY ( sc &lt;* SELF.style_context | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'REPRESENTATION_ITEM'  IN TYPEOF( sc ) ) ) ) = 1 ) OR ( SIZEOF( QUERY ( sc &lt;* SELF.style_context | ( ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM'  IN TYPEOF( sc ) ) OR ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION_RELATIONSHIP'  IN TYPEOF( sc ) ) ) ) ) &#10;               = SIZEOF( style_context ) ) )" label="wr1"/>
      </entity>
      <entity name="context_dependent_unit" supertypes="named_unit">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="conversion_based_unit" supertypes="named_unit">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="conversion_factor">
            <typename name="measure_with_unit"/>
         </explicit>
         <where expression="( SELF\named_unit.dimensions = derive_dimensional_exponents( conversion_factor\measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="curve" super.expression="ONEOF (line, conic, pcurve, surface_curve)" supertypes="geometric_representation_item"/>
      <entity name="curve_style" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="curve_font">
            <typename name="curve_font_or_scaled_curve_font_select"/>
         </explicit>
         <explicit name="curve_width">
            <typename name="size_select"/>
         </explicit>
         <explicit name="curve_colour">
            <typename name="colour"/>
         </explicit>
      </entity>
      <entity name="curve_style_font" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="pattern_list">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="curve_style_font_pattern"/>
         </explicit>
      </entity>
      <entity name="curve_style_font_and_scaling" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="curve_font">
            <typename name="curve_style_font_select"/>
         </explicit>
         <explicit name="curve_font_scaling">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="curve_style_font_pattern" supertypes="founded_item">
         <explicit name="visible_segment_length">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="invisible_segment_length">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="cylindrical_surface" supertypes="elementary_surface">
         <explicit name="radius">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="defined_symbol" supertypes="geometric_representation_item">
         <explicit name="definition">
            <typename name="defined_symbol_select"/>
         </explicit>
         <explicit name="target">
            <typename name="symbol_target"/>
         </explicit>
      </entity>
      <entity name="definitional_representation" supertypes="representation">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PARAMETRIC_REPRESENTATION_CONTEXT' IN TYPEOF( SELF\&#10;               representation.context_of_items ) )" label="wr1"/>
      </entity>
      <entity name="definitional_representation_relationship" supertypes="representation_relationship">
         <where expression="acyclic_representation_relationship( SELF, [SELF\representation_relationship.rep_2], &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'REPRESENTATION' )" label="wr1"/>
      </entity>
      <entity name="degenerate_toroidal_surface" supertypes="toroidal_surface">
         <explicit name="select_outer">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( major_radius &lt; minor_radius )" label="wr1"/>
      </entity>
      <entity name="derived_unit" super.expression="ONEOF (absorbed_dose_unit, acceleration_unit, radioactivity_unit, area_unit, capacitance_unit, dose_equivalent_unit, electric_charge_unit, conductance_unit, electric_potential_unit, energy_unit, magnetic_flux_density_unit, force_unit, frequency_unit, illuminance_unit, inductance_unit, magnetic_flux_unit, power_unit, pressure_unit, resistance_unit, velocity_unit, volume_unit)">
         <explicit name="elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="derived_unit_element"/>
         </explicit>
         <derived expression="get_name_value( SELF )" name="name">
            <typename name="label"/>
         </derived>
         <where expression="( ( SIZEOF( elements ) &gt; 1 ) OR ( ( SIZEOF( elements ) = 1 ) AND ( elements[1].exponent &lt;&gt; 1 ) ) )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'NAME_ATTRIBUTE.NAMED_ITEM' ) ) &#10;               &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="derived_unit_element">
         <explicit name="unit">
            <typename name="named_unit"/>
         </explicit>
         <explicit name="exponent">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="description_attribute">
         <explicit name="attribute_value">
            <typename name="text"/>
         </explicit>
         <explicit name="described_item">
            <typename name="description_attribute_select"/>
         </explicit>
      </entity>
      <entity name="descriptive_representation_item" supertypes="representation_item">
         <explicit name="description">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="dimensional_exponents">
         <explicit name="length_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="mass_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="time_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="electric_current_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="thermodynamic_temperature_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="amount_of_substance_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="luminous_intensity_exponent">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="direction" supertypes="geometric_representation_item">
         <explicit name="direction_ratios">
            <aggregate lower="2" type="LIST" upper="3"/>
            <builtintype type="REAL"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( tmp &lt;* direction_ratios | ( tmp &lt;&gt; 0 ) ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="document">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="kind">
            <typename name="document_type"/>
         </explicit>
         <inverse attribute="represented_document" entity="document_representation_type" name="representation_types">
            <inverse.aggregate lower="0" type="SET" upper="?"/>
         </inverse>
      </entity>
      <entity name="document_file" supertypes="document characterized_object">
         <where expression="( SELF\characterized_object.name = '' )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\characterized_object.description ) )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( drt &lt;* SELF\document.representation_types | ( drt.name IN [ 'digital', 'physical'] ) ) ) = 1 )" label="wr3"/>
      </entity>
      <entity name="document_representation_type">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="represented_document">
            <typename name="document"/>
         </explicit>
      </entity>
      <entity name="document_type">
         <explicit name="product_data_type">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="dose_equivalent_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.DOSE_EQUIVALENT_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="dose_equivalent_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.sievert ) )" label="wr1"/>
      </entity>
      <entity name="draughting_pre_defined_colour" supertypes="pre_defined_colour">
         <where expression="( SELF.name IN [ 'red', 'green', 'blue', 'yellow', 'magenta', 'cyan', 'black', 'white'] )" label="wr1"/>
      </entity>
      <entity name="draughting_pre_defined_curve_font" supertypes="pre_defined_curve_font">
         <where expression="( SELF.name IN [ 'continuous', 'chain', 'chain double dash', 'dashed', 'dotted'] )" label="wr1"/>
      </entity>
      <entity name="edge" super.expression="ONEOF (edge_curve, oriented_edge)" supertypes="topological_representation_item">
         <explicit name="edge_start">
            <typename name="vertex"/>
         </explicit>
         <explicit name="edge_end">
            <typename name="vertex"/>
         </explicit>
      </entity>
      <entity name="edge_curve" supertypes="edge geometric_representation_item">
         <explicit name="edge_geometry">
            <typename name="curve"/>
         </explicit>
         <explicit name="same_sense">
            <builtintype type="BOOLEAN"/>
         </explicit>
      </entity>
      <entity name="edge_loop" supertypes="loop path">
         <derived expression="SIZEOF( SELF\path.edge_list )" name="ne">
            <builtintype type="INTEGER"/>
         </derived>
         <where expression="( SELF\path.edge_list[1].edge_start :=: SELF\path.edge_list[ne].edge_end )" label="wr1"/>
      </entity>
      <entity name="electric_charge_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELECTRIC_CHARGE_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="electric_charge_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.coulomb ) )" label="wr1"/>
      </entity>
      <entity name="electric_current_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELECTRIC_CURRENT_UNIT' IN TYPEOF( SELF\measure_with_unit&#10;               .unit_component ) )" label="wr1"/>
      </entity>
      <entity name="electric_current_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 1 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="electric_potential_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELECTRIC_POTENTIAL_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="electric_potential_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.volt ) )" label="wr1"/>
      </entity>
      <entity name="elementary_brep_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'MANIFOLD_SOLID_BREP' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACETED_BREP', &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) = &#10;                0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* SELF.items | ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'MANIFOLD_SOLID_BREP' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM'] * TYPEOF( it ) ) &#10;                = 1 ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( &#10;                SIZEOF( QUERY ( fcs &lt;* csh.cfs_faces | ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'FACE_SURFACE'  IN TYPEOF( fcs ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( &#10;                SIZEOF( QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces | ( NOT ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELEMENTARY_SURFACE'  IN TYPEOF( fcs\face_surface.&#10;                face_geometry ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( &#10;                SIZEOF( QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces | ( NOT ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fcs&#10;                .bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( NOT ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe.edge_element ) ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( &#10;                SIZEOF( QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces | ( NOT ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fcs&#10;                .bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( NOT ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LINE' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CONIC' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE' ] * TYPEOF( oe.edge_element\edge_curve.&#10;                edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( &#10;                SIZEOF( QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces | ( NOT ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fcs&#10;                .bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( NOT ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe.edge_start ) ) AND ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe.edge_end ) ) ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( &#10;                SIZEOF( QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces | ( NOT ( SIZEOF( QUERY ( elp_fbnds &lt;* QUERY ( bnds &lt;* fcs&#10;                .bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) ) | &#10;                ( NOT ( SIZEOF( QUERY ( oe &lt;* elp_fbnds.bound\path.edge_list | ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE'  IN TYPEOF( oe.edge_element\edge_curve.&#10;                edge_geometry ) ) AND ( NOT ( SIZEOF( oe\oriented_edge.edge_element\edge_curve.edge_geometry\polyline.points ) &gt;= &#10;                3 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'ORIENTED_CLOSED_SHELL'  IN TYPEOF( msb\manifold_solid_brep.outer ) ) ) ) = 0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( brv &lt;* QUERY ( it &lt;* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'BREP_WITH_VOIDS'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* brv\brep_with_voids.voids | csh\&#10;                oriented_closed_shell.orientation ) ) = 0 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'ELEMENTARY_BREP_SHAPE_REPRESENTATION'  IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) ) ) ) &#10;                = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( msb ) | ( NOT ( &#10;                SIZEOF( QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces | ( NOT ( SIZEOF( QUERY ( vlp_fbnds &lt;* QUERY ( bnds &lt;* fcs&#10;                .bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_LOOP' IN TYPEOF( bnds.bound ) ) )&#10;                | ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VERTEX_POINT' IN TYPEOF( vlp_fbnds\&#10;                face_bound.bound\vertex_loop.loop_vertex ) ) AND ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'CARTESIAN_POINT'  IN TYPEOF( vlp_fbnds\face_bound.bound\vertex_loop.loop_vertex\vertex_point.vertex_geometry ) ) ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr12"/>
      </entity>
      <entity name="elementary_surface" super.expression="ONEOF (plane, cylindrical_surface, conical_surface, spherical_surface, toroidal_surface)" supertypes="surface">
         <explicit name="position">
            <typename name="axis2_placement_3d"/>
         </explicit>
      </entity>
      <entity name="ellipse" supertypes="conic">
         <explicit name="semi_axis_1">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="semi_axis_2">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="energy_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ENERGY_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="energy_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.joule ) )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="external_identification_assignment" supertypes="identification_assignment">
         <explicit name="source">
            <typename name="external_source"/>
         </explicit>
      </entity>
      <entity name="external_source">
         <explicit name="source_id">
            <typename name="source_item"/>
         </explicit>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="externally_defined_colour" supertypes="colour_specification externally_defined_item"/>
      <entity name="externally_defined_curve_font" supertypes="externally_defined_item"/>
      <entity name="externally_defined_hatch_style" supertypes="externally_defined_item geometric_representation_item"/>
      <entity name="externally_defined_item">
         <explicit name="item_id">
            <typename name="source_item"/>
         </explicit>
         <explicit name="source">
            <typename name="external_source"/>
         </explicit>
      </entity>
      <entity name="externally_defined_marker" supertypes="externally_defined_symbol pre_defined_marker"/>
      <entity name="externally_defined_style" supertypes="externally_defined_item founded_item"/>
      <entity name="externally_defined_symbol" supertypes="externally_defined_item"/>
      <entity name="externally_defined_terminator_symbol" supertypes="externally_defined_symbol"/>
      <entity name="externally_defined_text_font" supertypes="externally_defined_item"/>
      <entity name="externally_defined_tile" supertypes="externally_defined_item"/>
      <entity name="externally_defined_tile_style" supertypes="externally_defined_item geometric_representation_item"/>
      <entity name="face" super.expression="ONEOF (face_surface, oriented_face)" supertypes="topological_representation_item">
         <explicit name="bounds">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="face_bound"/>
         </explicit>
         <where expression="( NOT mixed_loop_type_set( list_to_set( list_face_loops( SELF ) ) ) )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( temp &lt;* bounds | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACE_OUTER_BOUND' IN &#10;               TYPEOF( temp ) ) ) ) &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="face_bound" supertypes="topological_representation_item">
         <explicit name="bound">
            <typename name="loop"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
      </entity>
      <entity name="face_outer_bound" supertypes="face_bound"/>
      <entity name="face_surface" supertypes="face geometric_representation_item">
         <explicit name="face_geometry">
            <typename name="surface"/>
         </explicit>
         <explicit name="same_sense">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_SURFACE' IN TYPEOF( face_geometry ) ) )" label="wr1"/>
      </entity>
      <entity name="faceted_brep" supertypes="manifold_solid_brep"/>
      <entity name="faceted_brep_shape_representation" supertypes="shape_representation">
         <where expression="( SIZEOF( QUERY ( it &lt;* items | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'FACETED_BREP' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM', &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( it &lt;* items | ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACETED_BREP', &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM' ] * TYPEOF( it ) ) = 1 ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( fbrep &lt;* QUERY ( it &lt;* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'FACETED_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( fbrep ) | ( NOT ( SIZEOF( &#10;               QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces | ( NOT ( ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACE_SURFACE'  IN TYPEOF( fcs ) ) AND ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PLANE'  IN TYPEOF( fcs\face_surface.face_geometry ) ) &#10;               AND ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CARTESIAN_POINT' IN TYPEOF( fcs\face_surface.&#10;               face_geometry\elementary_surface.position.location ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( fbrep &lt;* QUERY ( it &lt;* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'FACETED_BREP'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* msb_shells( fbrep ) | ( NOT ( SIZEOF( &#10;               QUERY ( fcs &lt;* csh\connected_face_set.cfs_faces | ( NOT ( SIZEOF( QUERY ( bnds &lt;* fcs.bounds | ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACE_OUTER_BOUND'  IN TYPEOF( bnds ) ) ) ) = 1 ) ) ) ) &#10;               = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( msb &lt;* QUERY ( it &lt;* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'MANIFOLD_SOLID_BREP'  IN TYPEOF( it ) ) ) | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'ORIENTED_CLOSED_SHELL'  IN TYPEOF( msb\manifold_solid_brep.outer ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( brv &lt;* QUERY ( it &lt;* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'BREP_WITH_VOIDS'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( csh &lt;* brv\brep_with_voids.voids | csh\&#10;               oriented_closed_shell.orientation ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'FACETED_BREP_SHAPE_REPRESENTATION'  IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) ) ) ) = &#10;               0 )" label="wr7"/>
      </entity>
      <entity name="fill_area_style" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="fill_styles">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="fill_style_select"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( fill_style &lt;* SELF.fill_styles | ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' +&#10;               'FILL_AREA_STYLE_COLOUR' ) IN TYPEOF( fill_style ) ) ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="fill_area_style_colour">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="fill_colour">
            <typename name="colour"/>
         </explicit>
      </entity>
      <entity name="fill_area_style_hatching" supertypes="geometric_representation_item">
         <explicit name="hatch_line_appearance">
            <typename name="curve_style"/>
         </explicit>
         <explicit name="start_of_next_hatch_line">
            <typename name="one_direction_repeat_factor"/>
         </explicit>
         <explicit name="point_of_reference_hatch_line">
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="pattern_start">
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="hatch_line_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
      </entity>
      <entity name="fill_area_style_tile_coloured_region" supertypes="geometric_representation_item">
         <explicit name="closed_curve">
            <typename name="curve_or_annotation_curve_occurrence"/>
         </explicit>
         <explicit name="region_colour">
            <typename name="colour"/>
         </explicit>
         <where expression="( ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE' IN TYPEOF( closed_curve ) ) ) OR ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CIRCLE'  IN TYPEOF( closed_curve ) ) OR ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELLIPSE'  IN TYPEOF( closed_curve ) ) OR ( ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.B_SPLINE_CURVE'  IN TYPEOF( closed_curve ) ) AND ( &#10;               closed_curve\b_spline_curve.closed_curve = TRUE ) ) OR ( ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COMPOSITE_CURVE'  IN TYPEOF( closed_curve ) ) AND ( &#10;               closed_curve\composite_curve.closed_curve = TRUE ) ) OR ( ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLYLINE'  IN TYPEOF( closed_curve ) ) AND ( &#10;               closed_curve\polyline.points[LOINDEX( closed_curve\polyline.points )] = closed_curve\polyline.points[HIINDEX( &#10;               closed_curve\polyline.points )] ) ) )" label="wr1"/>
      </entity>
      <entity name="fill_area_style_tile_curve_with_style" supertypes="geometric_representation_item">
         <explicit name="styled_curve">
            <typename name="annotation_curve_occurrence"/>
         </explicit>
      </entity>
      <entity name="fill_area_style_tile_symbol_with_style" supertypes="geometric_representation_item">
         <explicit name="symbol">
            <typename name="annotation_symbol_occurrence"/>
         </explicit>
      </entity>
      <entity name="fill_area_style_tiles" supertypes="geometric_representation_item">
         <explicit name="tiling_pattern">
            <typename name="two_direction_repeat_factor"/>
         </explicit>
         <explicit name="tiles">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="fill_area_style_tile_shape_select"/>
         </explicit>
         <explicit name="tiling_scale">
            <typename name="positive_ratio_measure"/>
         </explicit>
      </entity>
      <entity name="force_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FORCE_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="force_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.newton ) )" label="wr1"/>
      </entity>
      <entity name="founded_item" super.expression="ONEOF (curve_style, curve_style_font, curve_style_font_and_scaling, curve_style_font_pattern, externally_defined_style, fill_area_style, point_style, presentation_style_assignment, surface_side_style, surface_style_boundary, surface_style_control_grid, surface_style_fill_area, surface_style_parameter_line, surface_style_segmentation_curve, surface_style_silhouette, surface_style_usage)">
         <derived expression="using_items( SELF, [] )" name="users">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="founded_item_select"/>
         </derived>
         <where expression="( SIZEOF( users ) &gt; 0 )" label="wr1"/>
         <where expression="( NOT ( SELF IN users ) )" label="wr2"/>
      </entity>
      <entity name="frequency_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FREQUENCY_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="frequency_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.hertz ) )" label="wr1"/>
      </entity>
      <entity name="functionally_defined_transformation">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="general_property">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="general_property_association">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="base_definition">
            <typename name="general_property"/>
         </explicit>
         <explicit name="derived_definition">
            <typename name="derived_property_select"/>
         </explicit>
         <where expression="( SIZEOF( USEDIN( derived_definition, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + &#10;               'GENERAL_PROPERTY_ASSOCIATION.'  + 'DERIVED_DEFINITION' ) ) = 1 )" label="wr1"/>
         <where expression="( derived_definition.name = base_definition.name )" label="wr2"/>
      </entity>
      <entity name="general_property_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_property">
            <typename name="general_property"/>
         </explicit>
         <explicit name="related_property">
            <typename name="general_property"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="generic_product_definition_reference" super.expression="ONEOF (product_definition_reference, product_definition_reference_with_local_representation)">
         <explicit name="source">
            <typename name="external_source"/>
         </explicit>
      </entity>
      <entity name="geometric_item_specific_usage" supertypes="item_identified_representation_usage">
         <explicit name="definition">
            <typename name="geometric_item_specific_usage_select"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </explicit>
         <explicit name="used_representation">
            <typename name="shape_model"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </explicit>
         <explicit name="identified_item">
            <typename name="geometric_model_item"/>
            <redeclaration entity-ref="item_identified_representation_usage"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="definition"/>
         </unique>
      </entity>
      <entity name="geometric_model_element_relationship" supertypes="geometric_representation_item representation_item_relationship">
         <explicit name="relating_representation_item">
            <typename name="geometric_representation_item"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <explicit name="related_representation_item">
            <typename name="geometric_representation_item"/>
            <redeclaration entity-ref="representation_item_relationship"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="relating_representation_item"/>
            <unique.attribute attribute="related_representation_item"/>
         </unique>
         <where expression="( SELF\representation_item_relationship.relating_representation_item :&lt;&gt;: SELF\representation_item_relationship.&#10;               related_representation_item )" label="wr1"/>
      </entity>
      <entity name="geometric_representation_context" supertypes="representation_context">
         <explicit name="coordinate_space_dimension">
            <typename name="dimension_count"/>
         </explicit>
      </entity>
      <entity name="geometric_representation_item" super.expression="ONEOF (point, direction, vector, placement, cartesian_transformation_operator, curve, surface, edge_curve, face_surface, poly_loop, vertex_point, solid_model) ANDOR ONEOF (curve, defined_symbol, point, symbol_target) ANDOR ONEOF (curve, externally_defined_hatch_style, externally_defined_tile_style, fill_area_style_hatching, fill_area_style_tile_coloured_region, fill_area_style_tile_curve_with_style, fill_area_style_tile_symbol_with_style, fill_area_style_tiles, one_direction_repeat_factor, point, vector) ANDOR ONEOF (curve, planar_extent)" supertypes="representation_item">
         <derived expression="dimension_of( SELF )" name="dim">
            <typename name="dimension_count"/>
         </derived>
         <where expression="( SIZEOF( QUERY ( using_rep &lt;* using_representations( SELF ) | ( NOT ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.GEOMETRIC_REPRESENTATION_CONTEXT'  IN TYPEOF( &#10;               using_rep.context_of_items ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="global_uncertainty_assigned_context" supertypes="representation_context">
         <explicit name="uncertainty">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="uncertainty_measure_with_unit"/>
         </explicit>
      </entity>
      <entity name="global_unit_assigned_context" supertypes="representation_context">
         <explicit name="units">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="unit"/>
         </explicit>
      </entity>
      <entity name="group">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM' ) ) &#10;               &lt;= 1 )" label="wr1"/>
      </entity>
      <entity abstract.supertype="YES" name="group_assignment">
         <explicit name="assigned_group">
            <typename name="group"/>
         </explicit>
         <derived expression="get_role( SELF )" name="role">
            <typename name="object_role"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ROLE_ASSOCIATION.'&#10;               + 'ITEM_WITH_ROLE'  ) ) &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="group_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_group">
            <typename name="group"/>
         </explicit>
         <explicit name="related_group">
            <typename name="group"/>
         </explicit>
      </entity>
      <entity name="hyperbola" supertypes="conic">
         <explicit name="semi_axis">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="semi_imag_axis">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="id_attribute">
         <explicit name="attribute_value">
            <typename name="identifier"/>
         </explicit>
         <explicit name="identified_item">
            <typename name="id_attribute_select"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="identification_assignment">
         <explicit name="assigned_id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="role">
            <typename name="identification_role"/>
         </explicit>
      </entity>
      <entity name="identification_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="illuminance_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ILLUMINANCE_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="illuminance_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.lux ) )" label="wr1"/>
      </entity>
      <entity name="inductance_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.INDUCTANCE_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="inductance_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.henry ) )" label="wr1"/>
      </entity>
      <entity name="invisibility">
         <explicit name="invisible_items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="invisible_item"/>
         </explicit>
      </entity>
      <entity name="item_defined_transformation">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="transform_item_1">
            <typename name="representation_item"/>
         </explicit>
         <explicit name="transform_item_2">
            <typename name="representation_item"/>
         </explicit>
      </entity>
      <entity name="item_identified_representation_usage">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="definition">
            <typename name="item_identified_representation_usage_definition"/>
         </explicit>
         <explicit name="used_representation">
            <typename name="representation"/>
         </explicit>
         <explicit name="identified_item">
            <typename name="item_identified_representation_usage_select"/>
         </explicit>
         <where expression="( SELF.used_representation IN using_representations( SELF.identified_item ) )" label="wr1"/>
      </entity>
      <entity name="length_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LENGTH_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="length_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 1 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="line" supertypes="curve">
         <explicit name="pnt">
            <typename name="cartesian_point"/>
         </explicit>
         <explicit name="dir">
            <typename name="vector"/>
         </explicit>
         <where expression="( dir.dim = pnt.dim )" label="wr1"/>
      </entity>
      <entity name="loop" super.expression="ONEOF (vertex_loop, edge_loop, poly_loop)" supertypes="topological_representation_item"/>
      <entity name="luminous_flux_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LUMINOUS_FLUX_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="luminous_flux_unit" supertypes="named_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.lumen ) )" label="wr1"/>
      </entity>
      <entity name="luminous_intensity_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LUMINOUS_INTENSITY_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="luminous_intensity_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 1 ) )" label="wr1"/>
      </entity>
      <entity name="magnetic_flux_density_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAGNETIC_FLUX_DENSITY_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="magnetic_flux_density_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.tesla ) )" label="wr1"/>
      </entity>
      <entity name="magnetic_flux_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAGNETIC_FLUX_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="magnetic_flux_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.weber ) )" label="wr1"/>
      </entity>
      <entity name="manifold_solid_brep" supertypes="solid_model">
         <explicit name="outer">
            <typename name="closed_shell"/>
         </explicit>
      </entity>
      <entity name="mapped_item" supertypes="representation_item">
         <explicit name="mapping_source">
            <typename name="representation_map"/>
         </explicit>
         <explicit name="mapping_target">
            <typename name="representation_item"/>
         </explicit>
         <where expression="acyclic_mapped_representation( SELF )" label="wr1"/>
      </entity>
      <entity name="mass_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MASS_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="mass_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 1 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="measure_representation_item" supertypes="representation_item measure_with_unit"/>
      <entity name="measure_with_unit" super.expression="ONEOF (length_measure_with_unit, mass_measure_with_unit, time_measure_with_unit, electric_current_measure_with_unit, thermodynamic_temperature_measure_with_unit, celsius_temperature_measure_with_unit, amount_of_substance_measure_with_unit, luminous_intensity_measure_with_unit, plane_angle_measure_with_unit, solid_angle_measure_with_unit, area_measure_with_unit, volume_measure_with_unit, ratio_measure_with_unit, acceleration_measure_with_unit, capacitance_measure_with_unit, electric_charge_measure_with_unit, conductance_measure_with_unit, electric_potential_measure_with_unit, energy_measure_with_unit, magnetic_flux_density_measure_with_unit, force_measure_with_unit, frequency_measure_with_unit, illuminance_measure_with_unit, inductance_measure_with_unit, luminous_flux_measure_with_unit, magnetic_flux_measure_with_unit, power_measure_with_unit, pressure_measure_with_unit, resistance_measure_with_unit, velocity_measure_with_unit, absorbed_dose_measure_with_unit, radioactivity_measure_with_unit, dose_equivalent_measure_with_unit)">
         <explicit name="value_component">
            <typename name="measure_value"/>
         </explicit>
         <explicit name="unit_component">
            <typename name="unit"/>
         </explicit>
         <where expression="valid_units( SELF )" label="wr1"/>
      </entity>
      <entity name="mechanical_design_geometric_presentation_representation" supertypes="representation">
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="mechanical_design_geometric_presentation_representation_items"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( mi &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SHAPE_REPRESENTATION', &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + &#10;                'MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION' ] * TYPEOF( mi\mapped_item.mapping_source.&#10;                mapped_representation ) ) = 1 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( smi &lt;* QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM'  IN TYPEOF( si\styled_item.item ) ) ) | &#10;                ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'SHAPE_REPRESENTATION' ) IN TYPEOF( smi\&#10;                styled_item.item\mapped_item.mapping_source.mapped_representation ) ) ) ) ) = 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( &#10;                QUERY ( pss &lt;* psa.styles | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'POINT_STYLE' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE', &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SURFACE_STYLE_USAGE' ] * TYPEOF( pss ) ) = 1 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psbc &lt;* QUERY ( psa &lt;* si\styled_item.styles | ( &#10;                ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'PRESENTATION_STYLE_BY_CONTEXT' ) IN TYPEOF( psa ) ) )&#10;                | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'REPRESENTATION_ITEM', &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION' ] * TYPEOF( psbc\&#10;                presentation_style_by_context.style_context ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr4"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( &#10;                QUERY ( ps &lt;* QUERY ( pss &lt;* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'POINT_STYLE'  IN TYPEOF( pss ) ) ) | ( NOT ( ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' &#10;                + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( ps\point_style.marker_size ) ) AND ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( ps\&#10;                point_style.marker_colour ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr5"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( &#10;                QUERY ( cs &lt;* QUERY ( pss &lt;* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'CURVE_STYLE'  IN TYPEOF( pss ) ) ) | ( NOT ( ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( cs\&#10;                curve_style.curve_colour ) ) = 1 ) AND ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + &#10;                'POSITIVE_LENGTH_MEASURE'  ) IN TYPEOF( cs\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE_FONT' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * TYPEOF( &#10;                cs\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr6"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( &#10;                QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SURFACE_SIDE_STYLE' ) IN TYPEOF( ssu\&#10;                surface_style_usage.style ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr7"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( &#10;                QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( SIZEOF( QUERY ( sses &lt;* ssu\surface_style_usage.style\&#10;                surface_side_style.styles | ( NOT ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + &#10;                'SURFACE_STYLE_PARAMETER_LINE' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + &#10;                'SURFACE_STYLE_CONTROL_GRID' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + &#10;                'SURFACE_STYLE_SILHOUETTE' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + &#10;                'SURFACE_STYLE_SEGMENTATION_CURVE' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + &#10;                'SURFACE_STYLE_FILL_AREA' , 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + &#10;                'SURFACE_STYLE_BOUNDARY' ] * TYPEOF( sses ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr8"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( &#10;                QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( SIZEOF( QUERY ( sspl &lt;* QUERY ( sses &lt;* ssu\&#10;                surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SURFACE_STYLE_PARAMETER_LINE' ) IN TYPEOF( sses ) ) )&#10;                | ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE' IN TYPEOF( sspl\&#10;                surface_style_parameter_line.style_of_parameter_lines ) ) AND ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( sspl\&#10;                surface_style_parameter_line.style_of_parameter_lines\curve_style.curve_colour ) ) = 1 ) AND ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( sspl\&#10;                surface_style_parameter_line.style_of_parameter_lines\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE_FONT' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * TYPEOF( &#10;                sspl\surface_style_parameter_line.style_of_parameter_lines\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = &#10;                0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr9"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( &#10;                QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( SIZEOF( QUERY ( sscg &lt;* QUERY ( sses &lt;* ssu\&#10;                surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SURFACE_STYLE_CONTROL_GRID' ) IN TYPEOF( sses ) ) )&#10;                | ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE' IN TYPEOF( sscg\&#10;                surface_style_control_grid.style_of_control_grid ) ) AND ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( sscg\&#10;                surface_style_control_grid.style_of_control_grid\curve_style.curve_colour ) ) = 1 ) AND ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( sscg\&#10;                surface_style_control_grid.style_of_control_grid\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE_FONT' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * TYPEOF( &#10;                sscg\surface_style_control_grid.style_of_control_grid\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 )" label="wr10"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( &#10;                QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( SIZEOF( QUERY ( sssh &lt;* QUERY ( sses &lt;* ssu\&#10;                surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SURFACE_STYLE_SILHOUETTE' ) IN TYPEOF( sses ) ) )&#10;                | ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE' IN TYPEOF( sssh\&#10;                surface_style_silhouette.style_of_silhouette ) ) AND ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( sssh\&#10;                surface_style_silhouette.style_of_silhouette\curve_style.curve_colour ) ) = 1 ) AND ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( sssh\&#10;                surface_style_silhouette.style_of_silhouette\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE_FONT' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * TYPEOF( &#10;                sssh\surface_style_silhouette.style_of_silhouette\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 )" label="wr11"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( &#10;                QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( SIZEOF( QUERY ( sssc &lt;* QUERY ( sses &lt;* ssu\&#10;                surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SURFACE_STYLE_SEGMENTATION_CURVE' ) IN TYPEOF( &#10;                sses ) ) ) | ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE' IN TYPEOF( sssc\&#10;                surface_style_segmentation_curve.style_of_segmentation_curve ) ) AND ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( sssc\&#10;                surface_style_segmentation_curve.style_of_segmentation_curve\curve_style.curve_colour ) ) = 1 ) AND ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( sssc\&#10;                surface_style_segmentation_curve.style_of_segmentation_curve\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE_FONT' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * TYPEOF( &#10;                sssc\surface_style_segmentation_curve.style_of_segmentation_curve\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) &#10;                = 0 ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr12"/>
         <where expression="( SIZEOF( QUERY ( si &lt;* QUERY ( it &lt;* SELF.items | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'STYLED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( SIZEOF( QUERY ( psa &lt;* si\styled_item.styles | ( NOT ( SIZEOF( &#10;                QUERY ( ssu &lt;* QUERY ( pss &lt;* psa.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;                + 'SURFACE_STYLE_USAGE'  IN TYPEOF( pss ) ) ) | ( NOT ( SIZEOF( QUERY ( ssbd &lt;* QUERY ( sses &lt;* ssu\&#10;                surface_style_usage.style\surface_side_style.styles | ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'SURFACE_STYLE_BOUNDARY' ) IN TYPEOF( sses ) ) )&#10;                | ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE' IN TYPEOF( ssbd\&#10;                surface_style_boundary.style_of_boundary ) ) AND ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COLOUR_RGB' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_COLOUR'] * TYPEOF( ssbd\&#10;                surface_style_boundary.style_of_boundary\curve_style.curve_colour ) ) = 1 ) AND ( ( &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'POSITIVE_LENGTH_MEASURE' ) IN TYPEOF( ssbd\&#10;                surface_style_boundary.style_of_boundary\curve_style.curve_width ) ) AND ( SIZEOF( [&#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE_FONT' , &#10;                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'DRAUGHTING_PRE_DEFINED_CURVE_FONT'] * TYPEOF( &#10;                ssbd\surface_style_boundary.style_of_boundary\curve_style.curve_font ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) &#10;                = 0 )" label="wr13"/>
      </entity>
      <entity name="multi_level_reference_designator" supertypes="assembly_component_usage">
         <explicit name="location">
            <aggregate lower="1" type="LIST" unique="YES" upper="?"/>
            <typename name="next_assembly_usage_occurrence"/>
         </explicit>
         <derived expression="location[1]\&#10;                                                 product_definition_relationship.relating_product_definition" name="relating_product_definition">
            <typename name="product_definition"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </derived>
         <derived expression="location[HIINDEX( &#10;                                                 location )]\product_definition_relationship.related_product_definition" name="related_product_definition">
            <typename name="product_definition_or_reference"/>
            <redeclaration entity-ref="product_definition_relationship"/>
         </derived>
         <derived expression="SELF\product_definition_relationship.&#10;                                                 related_product_definition" name="leaf">
            <typename name="product_definition_or_reference"/>
         </derived>
         <derived expression="SELF\product_definition_relationship.&#10;                                                 relating_product_definition" name="root">
            <typename name="product_definition"/>
         </derived>
         <where expression="unambiguously_specified_multi_level_reference_designator( location )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( cp &lt;* location | ( NOT EXISTS( cp\assembly_component_usage.reference_designator ) ) ) ) = 0 )" label="wr2"/>
      </entity>
      <entity name="name_attribute">
         <explicit name="attribute_value">
            <typename name="label"/>
         </explicit>
         <explicit name="named_item">
            <typename name="name_attribute_select"/>
         </explicit>
      </entity>
      <entity name="named_unit" super.expression="ONEOF (si_unit, conversion_based_unit, context_dependent_unit) ANDOR ONEOF (length_unit, mass_unit, time_unit, electric_current_unit, thermodynamic_temperature_unit, amount_of_substance_unit, luminous_flux_unit, luminous_intensity_unit, plane_angle_unit, solid_angle_unit, ratio_unit)">
         <explicit name="dimensions">
            <typename name="dimensional_exponents"/>
         </explicit>
      </entity>
      <entity name="next_assembly_usage_occurrence" supertypes="assembly_component_usage">
         <unique label="ur1">
            <unique.attribute attribute="SELF\assembly_component_usage.reference_designator"/>
            <unique.attribute attribute="SELF\product_definition_relationship.relating_product_definition"/>
         </unique>
      </entity>
      <entity name="object_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="one_direction_repeat_factor" supertypes="geometric_representation_item">
         <explicit name="repeat_factor">
            <typename name="vector"/>
         </explicit>
      </entity>
      <entity name="open_shell" supertypes="connected_face_set"/>
      <entity name="oriented_closed_shell" supertypes="closed_shell">
         <explicit name="closed_shell_element">
            <typename name="closed_shell"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <derived expression="conditional_reverse( SELF.orientation, SELF.&#10;                                             closed_shell_element.cfs_faces )" name="cfs_faces">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="face"/>
            <redeclaration entity-ref="connected_face_set"/>
         </derived>
         <where expression="( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_CLOSED_SHELL' IN TYPEOF( SELF.&#10;               closed_shell_element ) ) )" label="wr1"/>
      </entity>
      <entity name="oriented_edge" supertypes="edge">
         <explicit name="edge_element">
            <typename name="edge"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <derived expression="boolean_choose( SELF.orientation, SELF.edge_element.edge_start, SELF.edge_element.&#10;                                edge_end )" name="edge_start">
            <typename name="vertex"/>
            <redeclaration entity-ref="edge"/>
         </derived>
         <derived expression="boolean_choose( SELF.orientation, SELF.edge_element.edge_end, SELF.edge_element.&#10;                                edge_start )" name="edge_end">
            <typename name="vertex"/>
            <redeclaration entity-ref="edge"/>
         </derived>
         <where expression="( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_EDGE' IN TYPEOF( SELF.edge_element ) ) )" label="wr1"/>
      </entity>
      <entity name="oriented_face" supertypes="face">
         <explicit name="face_element">
            <typename name="face"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <derived expression="conditional_reverse( SELF.orientation, SELF.face_element.bounds )" name="bounds">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="face_bound"/>
            <redeclaration entity-ref="face"/>
         </derived>
         <where expression="( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_FACE' IN TYPEOF( SELF.face_element ) ) )" label="wr1"/>
      </entity>
      <entity name="oriented_open_shell" supertypes="open_shell">
         <explicit name="open_shell_element">
            <typename name="open_shell"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <derived expression="conditional_reverse( SELF.orientation, SELF.open_shell_element.&#10;                                             cfs_faces )" name="cfs_faces">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="face"/>
            <redeclaration entity-ref="connected_face_set"/>
         </derived>
         <where expression="( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_OPEN_SHELL' IN TYPEOF( SELF.&#10;               open_shell_element ) ) )" label="wr1"/>
      </entity>
      <entity name="oriented_path" supertypes="path">
         <explicit name="path_element">
            <typename name="path"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <derived expression="conditional_reverse( SELF.orientation, SELF.path_element.&#10;                               edge_list )" name="edge_list">
            <aggregate lower="1" type="LIST" unique="YES" upper="?"/>
            <typename name="oriented_edge"/>
            <redeclaration entity-ref="path"/>
         </derived>
         <where expression="( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_PATH' IN TYPEOF( SELF.path_element ) ) )" label="wr1"/>
      </entity>
      <entity name="oriented_surface" supertypes="surface">
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
      </entity>
      <entity name="over_riding_styled_item" supertypes="styled_item">
         <explicit name="over_ridden_style">
            <typename name="styled_item"/>
         </explicit>
      </entity>
      <entity name="parabola" supertypes="conic">
         <explicit name="focal_dist">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( focal_dist &lt;&gt; 0 )" label="wr1"/>
      </entity>
      <entity name="parametric_representation_context" supertypes="representation_context"/>
      <entity name="path" super.expression="ONEOF (edge_loop, oriented_path)" supertypes="topological_representation_item">
         <explicit name="edge_list">
            <aggregate lower="1" type="LIST" unique="YES" upper="?"/>
            <typename name="oriented_edge"/>
         </explicit>
         <where expression="path_head_to_tail( SELF )" label="wr1"/>
      </entity>
      <entity name="pcurve" supertypes="curve">
         <explicit name="basis_surface">
            <typename name="surface"/>
         </explicit>
         <explicit name="reference_to_curve">
            <typename name="definitional_representation"/>
         </explicit>
         <where expression="( SIZEOF( reference_to_curve\representation.items ) = 1 )" label="wr1"/>
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE' IN TYPEOF( reference_to_curve\representation.&#10;               items[1] ) )" label="wr2"/>
         <where expression="( reference_to_curve\representation.items[1]\geometric_representation_item.dim = 2 )" label="wr3"/>
      </entity>
      <entity name="placement" super.expression="ONEOF (axis1_placement, axis2_placement_2d, axis2_placement_3d)" supertypes="geometric_representation_item">
         <explicit name="location">
            <typename name="cartesian_point"/>
         </explicit>
      </entity>
      <entity name="planar_box" supertypes="planar_extent">
         <explicit name="placement">
            <typename name="axis2_placement"/>
         </explicit>
      </entity>
      <entity name="planar_extent" supertypes="geometric_representation_item">
         <explicit name="size_in_x">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="size_in_y">
            <typename name="length_measure"/>
         </explicit>
      </entity>
      <entity name="plane" supertypes="elementary_surface"/>
      <entity name="plane_angle_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PLANE_ANGLE_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="plane_angle_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="point" super.expression="ONEOF (cartesian_point, point_on_curve, point_on_surface)" supertypes="geometric_representation_item"/>
      <entity name="point_on_curve" supertypes="point">
         <explicit name="basis_curve">
            <typename name="curve"/>
         </explicit>
         <explicit name="point_parameter">
            <typename name="parameter_value"/>
         </explicit>
      </entity>
      <entity name="point_on_surface" supertypes="point">
         <explicit name="basis_surface">
            <typename name="surface"/>
         </explicit>
         <explicit name="point_parameter_u">
            <typename name="parameter_value"/>
         </explicit>
         <explicit name="point_parameter_v">
            <typename name="parameter_value"/>
         </explicit>
      </entity>
      <entity name="point_style" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="marker">
            <typename name="marker_select"/>
         </explicit>
         <explicit name="marker_size">
            <typename name="size_select"/>
         </explicit>
         <explicit name="marker_colour">
            <typename name="colour"/>
         </explicit>
      </entity>
      <entity name="poly_loop" supertypes="loop geometric_representation_item">
         <explicit name="polygon">
            <aggregate lower="3" type="LIST" unique="YES" upper="?"/>
            <typename name="cartesian_point"/>
         </explicit>
      </entity>
      <entity name="polyline" supertypes="bounded_curve">
         <explicit name="points">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="cartesian_point"/>
         </explicit>
      </entity>
      <entity name="power_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POWER_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="power_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.watt ) )" label="wr1"/>
      </entity>
      <entity name="pre_defined_colour" supertypes="pre_defined_item colour"/>
      <entity name="pre_defined_curve_font" supertypes="pre_defined_item"/>
      <entity name="pre_defined_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="pre_defined_marker" supertypes="pre_defined_item"/>
      <entity name="pre_defined_point_marker_symbol" supertypes="pre_defined_marker pre_defined_symbol">
         <where expression="( SELF.name IN [ 'asterisk', 'circle', 'dot', 'plus', 'square', 'triangle', 'x'] )" label="wr1"/>
      </entity>
      <entity name="pre_defined_surface_side_style" supertypes="pre_defined_item"/>
      <entity name="pre_defined_symbol" supertypes="pre_defined_item"/>
      <entity name="pre_defined_terminator_symbol" supertypes="pre_defined_symbol">
         <where expression="( SELF.name IN [ 'blanked arrow', 'blanked box', 'blanked dot', 'blanked triangle', 'dimension origin', 'filled arrow', &#10;               'filled box' , 'filled dot', 'integral symbol', 'open arrow', 'slash', 'unfilled arrow', 'unfilled triangle', &#10;               'filled triangle' ] )" label="wr1"/>
      </entity>
      <entity name="pre_defined_tile" supertypes="pre_defined_item"/>
      <entity name="presentation_layer_assignment">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description">
            <typename name="text"/>
         </explicit>
         <explicit name="assigned_items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="layered_item"/>
         </explicit>
      </entity>
      <entity name="presentation_style_assignment" supertypes="founded_item">
         <explicit name="styles">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="presentation_style_select"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( style1 &lt;* SELF.styles | ( NOT ( SIZEOF( QUERY ( style2 &lt;* ( SELF.styles - style1 ) | ( NOT ( ( &#10;               TYPEOF( style1 ) &lt;&gt; TYPEOF( style2 ) ) OR ( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' &#10;               + 'SURFACE_STYLE_USAGE', 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'EXTERNALLY_DEFINED_STYLE'] &#10;               * TYPEOF( style1 ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( style1 &lt;* SELF.styles | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'SURFACE_STYLE_USAGE'  IN TYPEOF( style1 ) ) ) ) &lt;= 2 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( style1 &lt;* SELF.styles | ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'SURFACE_STYLE_USAGE'  IN TYPEOF( style1 ) ) AND ( SIZEOF( QUERY ( style2 &lt;* ( SELF.styles - style1 ) | ( ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SURFACE_STYLE_USAGE'  IN TYPEOF( style2 ) ) AND ( ( &#10;               style1\surface_style_usage.side = both ) OR ( style2\surface_style_usage.side = both ) OR ( style1\&#10;               surface_style_usage.side = style2\surface_style_usage.side ) ) ) ) ) &gt; 0 ) ) ) ) = 0 )" label="wr3"/>
      </entity>
      <entity name="presentation_style_by_context" supertypes="presentation_style_assignment">
         <explicit name="style_context">
            <typename name="style_context_select"/>
         </explicit>
      </entity>
      <entity name="pressure_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRESSURE_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="pressure_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.pascal ) )" label="wr1"/>
      </entity>
      <entity name="product">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="frame_of_reference">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="product_context"/>
         </explicit>
      </entity>
      <entity name="product_context" supertypes="application_context_element">
         <explicit name="discipline_type">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="product_definition">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="formation">
            <typename name="product_definition_formation"/>
         </explicit>
         <explicit name="frame_of_reference">
            <typename name="product_definition_context"/>
         </explicit>
         <derived expression="get_name_value( SELF )" name="name">
            <typename name="label"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'NAME_ATTRIBUTE.NAMED_ITEM' ) ) &#10;               &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="product_definition_context" supertypes="application_context_element">
         <explicit name="life_cycle_stage">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="product_definition_context_association">
         <explicit name="definition">
            <typename name="product_definition"/>
         </explicit>
         <explicit name="frame_of_reference">
            <typename name="product_definition_context"/>
         </explicit>
         <explicit name="role">
            <typename name="product_definition_context_role"/>
         </explicit>
      </entity>
      <entity name="product_definition_context_role">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
      </entity>
      <entity name="product_definition_formation">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="of_product">
            <typename name="product"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="id"/>
            <unique.attribute attribute="of_product"/>
         </unique>
      </entity>
      <entity name="product_definition_reference" supertypes="generic_product_definition_reference">
         <explicit name="product_id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="product_definition_formation_id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="product_definition_id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="id_owning_organization_name" optional="YES">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="product_definition_reference_with_local_representation" supertypes="generic_product_definition_reference product_definition"/>
      <entity name="product_definition_relationship">
         <explicit name="id">
            <typename name="identifier"/>
         </explicit>
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_product_definition">
            <typename name="product_definition_or_reference"/>
         </explicit>
         <explicit name="related_product_definition">
            <typename name="product_definition_or_reference"/>
         </explicit>
      </entity>
      <entity name="product_definition_shape" supertypes="property_definition">
         <unique label="ur1">
            <unique.attribute attribute="SELF\property_definition.definition"/>
         </unique>
         <where expression="( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CHARACTERIZED_PRODUCT_DEFINITION', &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CHARACTERIZED_OBJECT' ] * TYPEOF( SELF\&#10;               property_definition.definition ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="product_definition_usage" supertypes="product_definition_relationship">
         <unique label="ur1">
            <unique.attribute attribute="SELF\product_definition_relationship.id"/>
            <unique.attribute attribute="SELF\product_definition_relationship.relating_product_definition"/>
            <unique.attribute attribute="SELF\product_definition_relationship.related_product_definition"/>
         </unique>
         <where expression="acyclic_product_definition_relationship( SELF, [SELF\product_definition_relationship.related_product_definition], &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_USAGE'  )" label="wr1"/>
      </entity>
      <entity name="promissory_usage_occurrence" supertypes="assembly_component_usage"/>
      <entity name="property_definition">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="definition">
            <typename name="characterized_definition"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM' ) ) &#10;               &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="property_definition_representation">
         <explicit name="definition">
            <typename name="represented_definition"/>
         </explicit>
         <explicit name="used_representation">
            <typename name="representation"/>
         </explicit>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <derived expression="get_name_value( SELF )" name="name">
            <typename name="label"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'NAME_ATTRIBUTE.NAMED_ITEM' ) ) &#10;               &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="quantified_assembly_component_usage" supertypes="assembly_component_usage">
         <explicit name="quantity">
            <typename name="measure_with_unit"/>
         </explicit>
         <where expression="( ( NOT ( 'NUMBER' IN TYPEOF( quantity.value_component ) ) ) OR ( quantity.value_component &gt; 0 ) )" label="wr1"/>
      </entity>
      <entity name="quasi_uniform_curve" supertypes="b_spline_curve"/>
      <entity name="quasi_uniform_surface" supertypes="b_spline_surface"/>
      <entity name="radioactivity_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.RADIOACTIVITY_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="radioactivity_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.becquerel ) )" label="wr1"/>
      </entity>
      <entity name="ratio_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.RATIO_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="ratio_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="rational_b_spline_curve" supertypes="b_spline_curve">
         <explicit name="weights_data">
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="REAL"/>
         </explicit>
         <derived expression="list_to_array( weights_data, 0, &#10;                   upper_index_on_control_points )" name="weights">
            <aggregate lower="0" type="ARRAY" upper="upper_index_on_control_points"/>
            <builtintype type="REAL"/>
         </derived>
         <where expression="( SIZEOF( weights_data ) = SIZEOF( SELF\b_spline_curve.control_points_list ) )" label="wr1"/>
         <where expression="curve_weights_positive( SELF )" label="wr2"/>
      </entity>
      <entity name="rational_b_spline_surface" supertypes="b_spline_surface">
         <explicit name="weights_data">
            <aggregate lower="2" type="LIST" upper="?"/>
            <aggregate lower="2" type="LIST" upper="?"/>
            <builtintype type="REAL"/>
         </explicit>
         <derived expression="make_array_of_array( weights_data, 0, u_upper, 0, v_upper )" name="weights">
            <aggregate lower="0" type="ARRAY" upper="u_upper"/>
            <aggregate lower="0" type="ARRAY" upper="v_upper"/>
            <builtintype type="REAL"/>
         </derived>
         <where expression="( ( SIZEOF( weights_data ) = SIZEOF( SELF\b_spline_surface.control_points_list ) ) AND ( SIZEOF( weights_data[1] ) = &#10;               SIZEOF( SELF\b_spline_surface.control_points_list[1] ) ) )" label="wr1"/>
         <where expression="surface_weights_positive( SELF )" label="wr2"/>
      </entity>
      <entity name="rep_item_group" supertypes="group representation_item">
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'PRESENTATION_LAYER_ASSIGNMENT.'  &#10;               + 'ASSIGNED_ITEMS' ) ) &gt; 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( r &lt;* USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'REPRESENTATION.' &#10;               + 'ITEMS' ) | ( r.name = 'group representation' ) ) ) &gt; 0 )" label="wr2"/>
         <where expression="( SIZEOF( QUERY ( ga &lt;* USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + &#10;               'GROUP_ASSIGNMENT.'  + 'ASSIGNED_GROUP' ) | ( ga.role.name &lt;&gt; 'group membership' ) ) ) = 0 )" label="wr3"/>
         <where expression="( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'GEOMETRIC_REPRESENTATION_ITEM', &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'TOPOLOGICAL_REPRESENTATION_ITEM', &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'MAPPED_ITEM', &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'STYLED_ITEM'] * TYPEOF( SELF ) ) = 1 )" label="wr4"/>
      </entity>
      <entity name="representation">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="representation_item"/>
         </explicit>
         <explicit name="context_of_items">
            <typename name="representation_context"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <derived expression="get_description_value( SELF )" name="description">
            <typename name="text"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM' ) ) &#10;               &lt;= 1 )" label="wr1"/>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'DESCRIPTION_ATTRIBUTE.'&#10;               + 'DESCRIBED_ITEM'  ) ) &lt;= 1 )" label="wr2"/>
      </entity>
      <entity name="representation_context">
         <explicit name="context_identifier">
            <typename name="identifier"/>
         </explicit>
         <explicit name="context_type">
            <typename name="text"/>
         </explicit>
         <inverse attribute="context_of_items" entity="representation" name="representations_in_context">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
      </entity>
      <entity name="representation_item" super.expression="ONEOF (mapped_item, value_representation_item) ANDOR ONEOF (mapped_item, styled_item)">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <where expression="( SIZEOF( using_representations( SELF ) ) &gt; 0 )" label="wr1"/>
      </entity>
      <entity name="representation_item_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_representation_item">
            <typename name="representation_item"/>
         </explicit>
         <explicit name="related_representation_item">
            <typename name="representation_item"/>
         </explicit>
      </entity>
      <entity name="representation_map">
         <explicit name="mapping_origin">
            <typename name="representation_item"/>
         </explicit>
         <explicit name="mapped_representation">
            <typename name="representation"/>
         </explicit>
         <inverse attribute="mapping_source" entity="mapped_item" name="map_usage">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
         <where expression="item_in_context( SELF.mapping_origin, SELF.mapped_representation.context_of_items )" label="wr1"/>
      </entity>
      <entity name="representation_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="rep_1">
            <typename name="representation"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="representation"/>
         </explicit>
      </entity>
      <entity name="resistance_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.RESISTANCE_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="resistance_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensions_for_si_unit( si_unit_name.ohm ) )" label="wr1"/>
      </entity>
      <entity name="role_association">
         <explicit name="role">
            <typename name="object_role"/>
         </explicit>
         <explicit name="item_with_role">
            <typename name="role_select"/>
         </explicit>
      </entity>
      <entity name="shape_aspect">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="of_shape">
            <typename name="product_definition_shape"/>
         </explicit>
         <explicit name="product_definitional">
            <builtintype type="LOGICAL"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <unique label="ur1">
            <unique.attribute attribute="id"/>
            <unique.attribute attribute="of_shape"/>
         </unique>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM' ) ) &#10;               &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="shape_aspect_relationship">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <explicit name="relating_shape_aspect">
            <typename name="shape_aspect"/>
         </explicit>
         <explicit name="related_shape_aspect">
            <typename name="shape_aspect"/>
         </explicit>
         <derived expression="get_id_value( SELF )" name="id">
            <typename name="identifier"/>
         </derived>
         <where expression="( SIZEOF( USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM' ) ) &#10;               &lt;= 1 )" label="wr1"/>
      </entity>
      <entity name="shape_definition_representation" supertypes="property_definition_representation">
         <explicit name="definition">
            <typename name="property_definition"/>
            <redeclaration entity-ref="property_definition_representation"/>
         </explicit>
         <explicit name="used_representation">
            <typename name="shape_representation"/>
            <redeclaration entity-ref="property_definition_representation"/>
         </explicit>
         <where expression="( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( definition ) ) OR&#10;               ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SHAPE_DEFINITION' IN TYPEOF( definition\&#10;               property_definition.definition ) ) )" label="wr1"/>
      </entity>
      <entity name="shape_representation" supertypes="representation"/>
      <entity name="shape_representation_relationship" supertypes="representation_relationship">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SHAPE_REPRESENTATION' IN ( TYPEOF( SELF\&#10;               representation_relationship.rep_1 ) + TYPEOF( SELF\representation_relationship.rep_2 ) ) )" label="wr1"/>
      </entity>
      <entity name="si_absorbed_dose_unit" supertypes="absorbed_dose_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.gray )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_capacitance_unit" supertypes="capacitance_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.farad )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_conductance_unit" supertypes="conductance_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.siemens )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_dose_equivalent_unit" supertypes="dose_equivalent_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.sievert )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_electric_charge_unit" supertypes="electric_charge_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.coulomb )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_electric_potential_unit" supertypes="electric_potential_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.volt )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_energy_unit" supertypes="energy_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.joule )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_force_unit" supertypes="force_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.newton )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_frequency_unit" supertypes="frequency_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.hertz )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_illuminance_unit" supertypes="illuminance_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.lux )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_inductance_unit" supertypes="inductance_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.henry )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_magnetic_flux_density_unit" supertypes="magnetic_flux_density_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.tesla )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_magnetic_flux_unit" supertypes="magnetic_flux_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.weber )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_power_unit" supertypes="power_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.watt )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_pressure_unit" supertypes="pressure_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.pascal )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_radioactivity_unit" supertypes="radioactivity_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.becquerel )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_resistance_unit" supertypes="resistance_unit si_unit">
         <where expression="( SELF\si_unit.name = si_unit_name.ohm )" label="wr1"/>
         <where expression="( NOT EXISTS( SELF\derived_unit.name ) )" label="wr2"/>
      </entity>
      <entity name="si_unit" supertypes="named_unit">
         <explicit name="prefix" optional="YES">
            <typename name="si_prefix"/>
         </explicit>
         <explicit name="name">
            <typename name="si_unit_name"/>
         </explicit>
         <derived expression="dimensions_for_si_unit( name )" name="dimensions">
            <typename name="dimensional_exponents"/>
            <redeclaration entity-ref="named_unit"/>
         </derived>
         <where expression="( ( NOT ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MASS_UNIT' IN TYPEOF( SELF ) ) AND ( SIZEOF( &#10;               USEDIN( SELF, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.DERIVED_UNIT_ELEMENT.UNIT' ) ) &gt; 0 ) ) ) &#10;               OR ( prefix = si_prefix.kilo ) )" label="wr1"/>
      </entity>
      <entity name="solid_angle_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SOLID_ANGLE_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="solid_angle_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="solid_curve_font" supertypes="pre_defined_curve_font"/>
      <entity name="solid_model" supertypes="geometric_representation_item"/>
      <entity name="specified_higher_usage_occurrence" supertypes="assembly_component_usage">
         <explicit name="upper_usage">
            <typename name="assembly_component_usage"/>
         </explicit>
         <explicit name="next_usage">
            <typename name="next_assembly_usage_occurrence"/>
         </explicit>
         <unique label="ur1">
            <unique.attribute attribute="upper_usage"/>
            <unique.attribute attribute="next_usage"/>
         </unique>
         <where expression="( SELF :&lt;&gt;: upper_usage )" label="wr1"/>
         <where expression="( SELF\product_definition_relationship.relating_product_definition :=: upper_usage.relating_product_definition )" label="wr2"/>
         <where expression="( SELF\product_definition_relationship.related_product_definition :=: next_usage.related_product_definition )" label="wr3"/>
         <where expression="( ( upper_usage.related_product_definition :=: next_usage.relating_product_definition ) OR ( SIZEOF( QUERY ( pdr &lt;* &#10;               USEDIN( upper_usage.related_product_definition, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'&#10;               + 'PRODUCT_DEFINITION_RELATIONSHIP.'  + 'RELATED_PRODUCT_DEFINITION' ) | ( pdr.relating_product_definition :=: &#10;               next_usage.relating_product_definition ) ) ) = 1 ) )" label="wr4"/>
         <where expression="( SIZEOF( [ 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.NEXT_ASSEMBLY_USAGE_OCCURRENCE', &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SPECIFIED_HIGHER_USAGE_OCCURRENCE' ] * TYPEOF( &#10;               upper_usage ) ) = 1 )" label="wr5"/>
      </entity>
      <entity name="spherical_surface" supertypes="elementary_surface">
         <explicit name="radius">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="styled_item" supertypes="representation_item">
         <explicit name="styles">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="presentation_style_assignment"/>
         </explicit>
         <explicit name="item">
            <typename name="styled_item_target"/>
         </explicit>
         <where expression="( ( SIZEOF( SELF.styles ) = 1 ) XOR ( SIZEOF( QUERY ( pres_style &lt;* SELF.styles | ( NOT ( ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'PRESENTATION_STYLE_BY_CONTEXT' ) IN TYPEOF( &#10;               pres_style ) ) ) ) ) = 0 ) )" label="wr1"/>
         <where expression="( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.STYLED_ITEM' IN TYPEOF( item ) ) )" label="wr2"/>
         <where expression="( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM' IN TYPEOF( item ) ) OR ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM'  IN TYPEOF( item ) ) OR&#10;               ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM' IN &#10;               TYPEOF( SELF ) ) )" label="wr3"/>
      </entity>
      <entity name="surface" super.expression="ONEOF (elementary_surface, swept_surface, bounded_surface)" supertypes="geometric_representation_item"/>
      <entity name="surface_curve" supertypes="curve">
         <explicit name="curve_3d">
            <typename name="curve"/>
         </explicit>
         <explicit name="associated_geometry">
            <aggregate lower="1" type="LIST" upper="2"/>
            <typename name="pcurve_or_surface"/>
         </explicit>
         <explicit name="master_representation">
            <typename name="preferred_surface_curve_representation"/>
         </explicit>
         <derived expression="get_basis_surface( SELF )" name="basis_surface">
            <aggregate lower="1" type="SET" upper="2"/>
            <typename name="surface"/>
         </derived>
         <where expression="( curve_3d.dim = 3 )" label="wr1"/>
         <where expression="( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE' IN TYPEOF( associated_geometry[1] ) ) OR ( &#10;               master_representation &lt;&gt; pcurve_s1 ) )" label="wr2"/>
         <where expression="( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE' IN TYPEOF( associated_geometry[2] ) ) OR ( &#10;               master_representation &lt;&gt; pcurve_s2 ) )" label="wr3"/>
         <where expression="( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE' IN TYPEOF( curve_3d ) ) )" label="wr4"/>
      </entity>
      <entity name="surface_of_linear_extrusion" supertypes="swept_surface">
         <explicit name="extrusion_axis">
            <typename name="vector"/>
         </explicit>
      </entity>
      <entity name="surface_of_revolution" supertypes="swept_surface">
         <explicit name="axis_position">
            <typename name="axis1_placement"/>
         </explicit>
         <derived expression="representation_item( '' ) || geometric_representation_item(  ) || curve(  ) || line( axis_position.&#10;                     location, representation_item( '' ) || geometric_representation_item(  ) || vector( axis_position.z, 1 ) )" name="axis_line">
            <typename name="line"/>
         </derived>
      </entity>
      <entity name="surface_side_style" supertypes="founded_item">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="styles">
            <aggregate lower="1" type="SET" upper="7"/>
            <typename name="surface_style_element_select"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( style1 &lt;* SELF.styles | ( SIZEOF( QUERY ( style2 &lt;* ( SELF.styles - style1 ) | ( TYPEOF( style1 ) = &#10;               TYPEOF( style2 ) ) ) ) &gt; 0 ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="surface_style_boundary" supertypes="founded_item">
         <explicit name="style_of_boundary">
            <typename name="curve_or_render"/>
         </explicit>
      </entity>
      <entity name="surface_style_control_grid" supertypes="founded_item">
         <explicit name="style_of_control_grid">
            <typename name="curve_or_render"/>
         </explicit>
      </entity>
      <entity name="surface_style_fill_area" supertypes="founded_item">
         <explicit name="fill_area">
            <typename name="fill_area_style"/>
         </explicit>
      </entity>
      <entity name="surface_style_parameter_line" supertypes="founded_item">
         <explicit name="style_of_parameter_lines">
            <typename name="curve_or_render"/>
         </explicit>
         <explicit name="direction_counts">
            <aggregate lower="1" type="SET" upper="2"/>
            <typename name="direction_count_select"/>
         </explicit>
         <where expression="( ( HIINDEX( SELF.direction_counts ) = 1 ) XOR ( TYPEOF( SELF.direction_counts[1] ) &lt;&gt; TYPEOF( SELF.direction_counts[2] ) ) )" label="wr1"/>
      </entity>
      <entity name="surface_style_rendering">
         <explicit name="rendering_method">
            <typename name="shading_surface_method"/>
         </explicit>
         <explicit name="surface_colour">
            <typename name="colour"/>
         </explicit>
      </entity>
      <entity name="surface_style_segmentation_curve" supertypes="founded_item">
         <explicit name="style_of_segmentation_curve">
            <typename name="curve_or_render"/>
         </explicit>
      </entity>
      <entity name="surface_style_silhouette" supertypes="founded_item">
         <explicit name="style_of_silhouette">
            <typename name="curve_or_render"/>
         </explicit>
      </entity>
      <entity name="surface_style_usage" supertypes="founded_item">
         <explicit name="side">
            <typename name="surface_side"/>
         </explicit>
         <explicit name="style">
            <typename name="surface_side_style_select"/>
         </explicit>
      </entity>
      <entity name="swept_surface" super.expression="ONEOF (surface_of_linear_extrusion, surface_of_revolution)" supertypes="surface">
         <explicit name="swept_curve">
            <typename name="curve"/>
         </explicit>
      </entity>
      <entity name="symbol_representation" supertypes="representation"/>
      <entity name="symbol_representation_map" supertypes="representation_map">
         <explicit name="mapped_representation">
            <typename name="symbol_representation"/>
            <redeclaration entity-ref="representation_map"/>
         </explicit>
         <explicit name="mapping_origin">
            <typename name="axis2_placement"/>
            <redeclaration entity-ref="representation_map"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( mi &lt;* SELF\representation_map.map_usage | ( NOT ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ANNOTATION_SYMBOL'  IN TYPEOF( mi ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="symbol_target" supertypes="geometric_representation_item">
         <explicit name="placement">
            <typename name="axis2_placement"/>
         </explicit>
         <explicit name="x_scale">
            <typename name="positive_ratio_measure"/>
         </explicit>
         <explicit name="y_scale">
            <typename name="positive_ratio_measure"/>
         </explicit>
      </entity>
      <entity name="thermodynamic_temperature_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.THERMODYNAMIC_TEMPERATURE_UNIT' IN TYPEOF( SELF\&#10;               measure_with_unit.unit_component ) )" label="wr1"/>
      </entity>
      <entity name="thermodynamic_temperature_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 0 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 1 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="time_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.TIME_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="time_unit" supertypes="named_unit">
         <where expression="( ( SELF\named_unit.dimensions.length_exponent = 0 ) AND ( SELF\named_unit.dimensions.mass_exponent = 0 ) AND ( SELF\&#10;               named_unit.dimensions.time_exponent = 1 ) AND ( SELF\named_unit.dimensions.electric_current_exponent = 0 ) AND ( &#10;               SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0 ) AND ( SELF\named_unit.dimensions.&#10;               amount_of_substance_exponent = 0 ) AND ( SELF\named_unit.dimensions.luminous_intensity_exponent = 0 ) )" label="wr1"/>
      </entity>
      <entity name="topological_representation_item" super.expression="ONEOF (vertex, edge, face_bound, face, connected_edge_set, connected_face_set, (loop ANDOR path))" supertypes="representation_item"/>
      <entity name="toroidal_surface" supertypes="elementary_surface">
         <explicit name="major_radius">
            <typename name="positive_length_measure"/>
         </explicit>
         <explicit name="minor_radius">
            <typename name="positive_length_measure"/>
         </explicit>
      </entity>
      <entity name="trimmed_curve" supertypes="bounded_curve">
         <explicit name="basis_curve">
            <typename name="curve"/>
         </explicit>
         <explicit name="trim_1">
            <aggregate lower="1" type="SET" upper="2"/>
            <typename name="trimming_select"/>
         </explicit>
         <explicit name="trim_2">
            <aggregate lower="1" type="SET" upper="2"/>
            <typename name="trimming_select"/>
         </explicit>
         <explicit name="sense_agreement">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <explicit name="master_representation">
            <typename name="trimming_preference"/>
         </explicit>
         <where expression="( ( HIINDEX( trim_1 ) = 1 ) OR ( TYPEOF( trim_1[1] ) &lt;&gt; TYPEOF( trim_1[2] ) ) )" label="wr1"/>
         <where expression="( ( HIINDEX( trim_2 ) = 1 ) OR ( TYPEOF( trim_2[1] ) &lt;&gt; TYPEOF( trim_2[2] ) ) )" label="wr2"/>
      </entity>
      <entity name="two_direction_repeat_factor" supertypes="one_direction_repeat_factor">
         <explicit name="second_repeat_factor">
            <typename name="vector"/>
         </explicit>
      </entity>
      <entity name="uncertainty_measure_with_unit" supertypes="measure_with_unit">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="description" optional="YES">
            <typename name="text"/>
         </explicit>
         <where expression="valid_measure_value( SELF\measure_with_unit.value_component )" label="wr1"/>
      </entity>
      <entity name="uniform_curve" supertypes="b_spline_curve"/>
      <entity name="uniform_surface" supertypes="b_spline_surface"/>
      <entity name="user_defined_curve_font" supertypes="curve_style_font mapped_item"/>
      <entity name="user_defined_marker" supertypes="mapped_item pre_defined_marker"/>
      <entity name="user_defined_terminator_symbol" supertypes="mapped_item pre_defined_symbol"/>
      <entity name="value_representation_item" supertypes="representation_item">
         <explicit name="value_component">
            <typename name="measure_value"/>
         </explicit>
         <where expression="( SIZEOF( QUERY ( rep &lt;* using_representations( SELF ) | ( NOT ( &#10;               'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.GLOBAL_UNIT_ASSIGNED_CONTEXT'  IN TYPEOF( rep.&#10;               context_of_items ) ) ) ) ) = 0 )" label="wr1"/>
      </entity>
      <entity name="vector" supertypes="geometric_representation_item">
         <explicit name="orientation">
            <typename name="direction"/>
         </explicit>
         <explicit name="magnitude">
            <typename name="length_measure"/>
         </explicit>
         <where expression="( magnitude &gt;= 0 )" label="wr1"/>
      </entity>
      <entity name="vector_style" supertypes="curve_style pre_defined_terminator_symbol"/>
      <entity name="velocity_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VELOCITY_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="velocity_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensional_exponents( 1, 0, -1, 0, 0, 0, 0 ) )" label="wr1"/>
      </entity>
      <entity name="vertex" supertypes="topological_representation_item"/>
      <entity name="vertex_loop" supertypes="loop">
         <explicit name="loop_vertex">
            <typename name="vertex"/>
         </explicit>
      </entity>
      <entity name="vertex_point" supertypes="vertex geometric_representation_item">
         <explicit name="vertex_geometry">
            <typename name="point"/>
         </explicit>
      </entity>
      <entity name="volume_measure_with_unit" supertypes="measure_with_unit">
         <where expression="( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VOLUME_UNIT' IN TYPEOF( SELF\measure_with_unit.&#10;               unit_component ) )" label="wr1"/>
      </entity>
      <entity name="volume_unit" supertypes="derived_unit">
         <where expression="( derive_dimensional_exponents( SELF ) = dimensional_exponents( 3, 0, 0, 0, 0, 0, 0 ) )" label="wr1"/>
      </entity>
      <rule appliesto="cartesian_point direction representation_context geometric_representation_context" name="compatible_dimension">
         <where expression="( SIZEOF( QUERY ( x &lt;* cartesian_point | ( SIZEOF( QUERY ( y &lt;* geometric_representation_context | ( item_in_context( x, &#10;             y ) AND ( HIINDEX( x.coordinates ) &lt;&gt; y.coordinate_space_dimension ) ) ) ) &gt; 0 ) ) ) = 0 )" label="wr1"/>
         <where expression="( SIZEOF( QUERY ( x &lt;* direction | ( SIZEOF( QUERY ( y &lt;* geometric_representation_context | ( item_in_context( x, y ) &#10;             AND ( HIINDEX( x.direction_ratios ) &lt;&gt; y.coordinate_space_dimension ) ) ) ) &gt; 0 ) ) ) = 0 )" label="wr2"/>
      </rule>
      <rule appliesto="styled_item" name="styled_curve">
         <where expression="( SIZEOF( QUERY ( si &lt;* styled_item | ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE' IN TYPEOF( &#10;             si.item ) ) AND ( SIZEOF( QUERY ( psa &lt;* si.styles | ( SIZEOF( QUERY ( cs &lt;* psa.styles | ( &#10;             'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CURVE_STYLE'  IN TYPEOF( cs ) ) ) ) &gt; 0 ) ) ) &lt;&gt; 1 ) ) ) ) &#10;             = 0 )" label="wr1"/>
      </rule>
      <rule appliesto="annotation_curve_occurrence annotation_occurrence annotation_symbol_occurrence application_context application_context_element cartesian_transformation_operator document_type fill_area_style founded_item functionally_defined_transformation identification_role object_role one_direction_repeat_factor open_shell oriented_face oriented_open_shell oriented_path placement planar_extent point product_context product_definition_context_role role_association symbol_representation symbol_representation_map symbol_target two_direction_repeat_factor" name="validate_dependently_instantiable_entity_data_types">
         <algorithm>LOCAL
      previous_in_chain         : LIST OF GENERIC := [];
      number_of_input_instances : INTEGER;
      all_instances             : SET OF GENERIC := [];
      set_of_input_types        : SET OF STRING := [];
    END_LOCAL;
    all_instances := all_instances + annotation_curve_occurrence;
    all_instances := all_instances + annotation_occurrence;
    all_instances := all_instances + annotation_symbol_occurrence;
    all_instances := all_instances + application_context;
    all_instances := all_instances + application_context_element;
    all_instances := all_instances + cartesian_transformation_operator;
    all_instances := all_instances + document_type;
    all_instances := all_instances + fill_area_style;
    all_instances := all_instances + founded_item;
    all_instances := all_instances + functionally_defined_transformation;
    all_instances := all_instances + identification_role;
    all_instances := all_instances + object_role;
    all_instances := all_instances + one_direction_repeat_factor;
    all_instances := all_instances + open_shell;
    all_instances := all_instances + oriented_face;
    all_instances := all_instances + oriented_open_shell;
    all_instances := all_instances + oriented_path;
    all_instances := all_instances + placement;
    all_instances := all_instances + planar_extent;
    all_instances := all_instances + point;
    all_instances := all_instances + product_context;
    all_instances := all_instances + product_definition_context_role;
    all_instances := all_instances + role_association;
    all_instances := all_instances + symbol_representation;
    all_instances := all_instances + symbol_representation_map;
    all_instances := all_instances + symbol_target;
    all_instances := all_instances + two_direction_repeat_factor;
    number_of_input_instances := SIZEOF( all_instances );
    REPEAT i := 1 TO number_of_input_instances BY 1;
      set_of_input_types := set_of_input_types + TYPEOF( all_instances[i] );
    END_REPEAT;</algorithm>
         <where expression="dependently_instantiated( all_instances, set_of_input_types, previous_in_chain )" label="wr1"/>
      </rule>
      <function name="acyclic_mapped_representation">
         <parameter name="mi">
            <typename name="mapped_item"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      mis : SET OF mapped_item;
      rms : SET OF representation_map;
      rs1 : SET OF representation;
      rs2 : SET OF representation;
    END_LOCAL;
    rs1 := using_representations( mi );
    rs2 := [];
    REPEAT WHILE SIZEOF( rs1 ) &gt; 0;
      REPEAT i := 1 TO HIINDEX( rs1 ) BY 1;
        rms := bag_to_set( USEDIN( rs1[i], 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION_MAP.'
            + 'MAPPED_REPRESENTATION'  ) );
        IF SIZEOF( rms ) &gt; 0 THEN
          REPEAT j := 1 TO HIINDEX( rms ) BY 1;
            mis := bag_to_set( USEDIN( rms[i], 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM.'
                + 'MAPPING_SOURCE'  ) );
            IF SIZEOF( mis ) &gt; 0 THEN
              REPEAT j := 1 TO HIINDEX( mis ) BY 1;
                IF mis[i] :=: mi THEN
                  RETURN( FALSE );
                END_IF;
                rs2 := rs2 + using_representations( mis[i] );
              END_REPEAT;
            END_IF;
          END_REPEAT;
        END_IF;
      END_REPEAT;
      rs1 := rs2;
      rs2 := [];
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="acyclic_product_definition_relationship">
         <parameter name="relation">
            <typename name="product_definition_relationship"/>
         </parameter>
         <parameter name="relatives">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="product_definition_or_reference"/>
         </parameter>
         <parameter name="specific_relation">
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      x : SET OF product_definition_relationship;
    END_LOCAL;
    IF relation.relating_product_definition IN relatives THEN
      RETURN( FALSE );
    END_IF;
    x := QUERY ( pd &lt;* bag_to_set( USEDIN( relation.relating_product_definition, 
        'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'  + 'PRODUCT_DEFINITION_RELATIONSHIP.' + 
        'RELATED_PRODUCT_DEFINITION'  ) ) | ( specific_relation IN TYPEOF( pd ) ) );
    REPEAT i := 1 TO HIINDEX( x ) BY 1;
      IF NOT acyclic_product_definition_relationship( x[i], relatives + relation.relating_product_definition, specific_relation )
          THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="acyclic_representation_relationship">
         <parameter name="relation">
            <typename name="representation_relationship"/>
         </parameter>
         <parameter name="relatives">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="representation"/>
         </parameter>
         <parameter name="specific_relation">
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      x : SET OF representation_relationship;
    END_LOCAL;
    IF relation.rep_1 IN relatives THEN
      RETURN( FALSE );
    END_IF;
    x := QUERY ( r &lt;* bag_to_set( USEDIN( relation.rep_1, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
        'REPRESENTATION_RELATIONSHIP.'  + 'REP_2' ) ) | ( specific_relation IN TYPEOF( r ) ) );
    REPEAT i := 1 TO HIINDEX( x ) BY 1;
      IF NOT acyclic_representation_relationship( x[i], relatives + relation.rep_1, specific_relation ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="associated_surface">
         <parameter name="arg">
            <typename name="pcurve_or_surface"/>
         </parameter>
         <typename name="surface"/>
         <algorithm>LOCAL
      surf : surface;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE' IN TYPEOF( arg ) THEN
      surf := arg\pcurve.basis_surface;
    ELSE
      surf := arg;
    END_IF;
    RETURN( surf );</algorithm>
      </function>
      <function name="bag_to_set">
         <parameter name="the_bag">
            <aggregate lower="0" type="BAG" upper="?"/>
            <builtintype type="GENERIC" typelabel="intype"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <builtintype type="GENERIC" typelabel="intype"/>
         <algorithm>LOCAL
      the_set : SET OF GENERIC:intype := [];
    END_LOCAL;
    IF SIZEOF( the_bag ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( the_bag ) BY 1;
        the_set := the_set + the_bag[i];
      END_REPEAT;
    END_IF;
    RETURN( the_set );</algorithm>
      </function>
      <function name="base_axis">
         <parameter name="dim">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="axis1">
            <typename name="direction"/>
         </parameter>
         <parameter name="axis2">
            <typename name="direction"/>
         </parameter>
         <parameter name="axis3">
            <typename name="direction"/>
         </parameter>
         <aggregate lower="2" type="LIST" upper="3"/>
         <typename name="direction"/>
         <algorithm>LOCAL
      u      : LIST [2 : 3] OF direction;
      d1     : direction;
      d2     : direction;
      factor : REAL;
    END_LOCAL;
    IF dim = 3 THEN
      d1 := NVL( normalise( axis3 ), dummy_gri || direction( [0, 0, 1] ) );
      d2 := first_proj_axis( d1, axis1 );
      u := [d2, second_proj_axis( d1, d2, axis2 ), d1];
    ELSE
      IF EXISTS( axis1 ) THEN
        d1 := normalise( axis1 );
        u := [d1, orthogonal_complement( d1 )];
        IF EXISTS( axis2 ) THEN
          factor := dot_product( axis2, u[2] );
          IF factor &lt; 0 THEN
            u[2].direction_ratios[1] := -u[2].direction_ratios[1];
            u[2].direction_ratios[2] := -u[2].direction_ratios[2];
          END_IF;
        END_IF;
      ELSE
        IF EXISTS( axis2 ) THEN
          d1 := normalise( axis2 );
          u := [orthogonal_complement( d1 ), d1];
          u[1].direction_ratios[1] := -u[1].direction_ratios[1];
          u[1].direction_ratios[2] := -u[1].direction_ratios[2];
        ELSE
          u := [dummy_gri || direction( [1, 0] ), dummy_gri || direction( [0, 1] )];
        END_IF;
      END_IF;
    END_IF;
    RETURN( u );</algorithm>
      </function>
      <function name="boolean_choose">
         <parameter name="b">
            <builtintype type="BOOLEAN"/>
         </parameter>
         <parameter name="choice1">
            <builtintype type="GENERIC" typelabel="item"/>
         </parameter>
         <parameter name="choice2">
            <builtintype type="GENERIC" typelabel="item"/>
         </parameter>
         <builtintype type="GENERIC" typelabel="item"/>
         <algorithm>IF b THEN
      RETURN( choice1 );
    ELSE
      RETURN( choice2 );
    END_IF;</algorithm>
      </function>
      <function name="build_2axes">
         <parameter name="ref_direction">
            <typename name="direction"/>
         </parameter>
         <aggregate lower="2" type="LIST" upper="2"/>
         <typename name="direction"/>
         <algorithm>LOCAL
      d : direction := NVL( normalise( ref_direction ), dummy_gri || direction( [1, 0] ) );
    END_LOCAL;
    RETURN( [d, orthogonal_complement( d )] );</algorithm>
      </function>
      <function name="build_axes">
         <parameter name="axis">
            <typename name="direction"/>
         </parameter>
         <parameter name="ref_direction">
            <typename name="direction"/>
         </parameter>
         <aggregate lower="3" type="LIST" upper="3"/>
         <typename name="direction"/>
         <algorithm>LOCAL
      d1 : direction;
      d2 : direction;
    END_LOCAL;
    d1 := NVL( normalise( axis ), dummy_gri || direction( [0, 0, 1] ) );
    d2 := first_proj_axis( d1, ref_direction );
    RETURN( [d2, normalise( cross_product( d1, d2 ) )\vector.orientation, d1] );</algorithm>
      </function>
      <function name="closed_shell_reversed">
         <parameter name="a_shell">
            <typename name="closed_shell"/>
         </parameter>
         <typename name="oriented_closed_shell"/>
         <algorithm>LOCAL
      the_reverse : oriented_closed_shell;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_CLOSED_SHELL' IN TYPEOF( a_shell ) THEN
      the_reverse := dummy_tri || connected_face_set( a_shell\connected_face_set.cfs_faces ) || closed_shell(  ) || 
          oriented_closed_shell( a_shell\oriented_closed_shell.closed_shell_element, NOT a_shell\oriented_closed_shell.orientation );
    ELSE
      the_reverse := dummy_tri || connected_face_set( a_shell\connected_face_set.cfs_faces ) || closed_shell(  ) || 
          oriented_closed_shell( a_shell, FALSE );
    END_IF;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="conditional_reverse">
         <parameter name="p">
            <builtintype type="BOOLEAN"/>
         </parameter>
         <parameter name="an_item">
            <typename name="reversible_topology"/>
         </parameter>
         <typename name="reversible_topology"/>
         <algorithm>IF p THEN
      RETURN( an_item );
    ELSE
      RETURN( topology_reversed( an_item ) );
    END_IF;</algorithm>
      </function>
      <function name="constraints_composite_curve_on_surface">
         <parameter name="c">
            <typename name="composite_curve_on_surface"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      n_segments : INTEGER := SIZEOF( c.segments );
    END_LOCAL;
    REPEAT k := 1 TO n_segments BY 1;
      IF ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE' IN TYPEOF( c\composite_curve.segments[k].
          parent_curve ) ) ) AND ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SURFACE_CURVE' IN TYPEOF( c\
          composite_curve.segments[k].parent_curve ) ) ) AND ( NOT ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
          + 'COMPOSITE_CURVE_ON_SURFACE'  IN TYPEOF( c\composite_curve.segments[k].parent_curve ) ) ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="constraints_param_b_spline">
         <parameter name="degree">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="up_knots">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="up_cp">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="knot_mult">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="knots">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="parameter_value"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      k      : INTEGER;
      sum    : INTEGER;
      result : BOOLEAN := TRUE;
    END_LOCAL;
    sum := knot_mult[1];
    REPEAT i := 2 TO up_knots BY 1;
      sum := sum + knot_mult[i];
    END_REPEAT;
    IF ( degree &lt; 1 ) OR ( up_knots &lt; 2 ) OR ( up_cp &lt; degree ) OR ( sum &lt;&gt; ( degree + up_cp + 2 ) ) THEN
      result := FALSE;
      RETURN( result );
    END_IF;
    k := knot_mult[1];
    IF ( k &lt; 1 ) OR ( k &gt; ( degree + 1 ) ) THEN
      result := FALSE;
      RETURN( result );
    END_IF;
    REPEAT i := 2 TO up_knots BY 1;
      IF ( knot_mult[i] &lt; 1 ) OR ( knots[i] &lt;= knots[i - 1] ) THEN
        result := FALSE;
        RETURN( result );
      END_IF;
      k := knot_mult[i];
      IF ( i &lt; up_knots ) AND ( k &gt; degree ) THEN
        result := FALSE;
        RETURN( result );
      END_IF;
      IF ( i = up_knots ) AND ( k &gt; ( degree + 1 ) ) THEN
        result := FALSE;
        RETURN( result );
      END_IF;
    END_REPEAT;
    RETURN( result );</algorithm>
      </function>
      <function name="cross_product">
         <parameter name="arg1">
            <typename name="direction"/>
         </parameter>
         <parameter name="arg2">
            <typename name="direction"/>
         </parameter>
         <typename name="vector"/>
         <algorithm>LOCAL
      v2     : LIST [3 : 3] OF REAL;
      v1     : LIST [3 : 3] OF REAL;
      mag    : REAL;
      res    : direction;
      result : vector;
    END_LOCAL;
    IF ( NOT EXISTS( arg1 ) ) OR ( arg1.dim = 2 ) OR ( NOT EXISTS( arg2 ) ) OR ( arg2.dim = 2 ) THEN
      RETURN( ? );
    ELSE

      BEGIN
        v1 := normalise( arg1 ).direction_ratios;
        v2 := normalise( arg2 ).direction_ratios;
        res := dummy_gri || direction( [( v1[2] * v2[3] ) - ( v1[3] * v2[2] ), ( v1[3] * v2[1] ) - ( v1[1] * v2[3] ), ( v1[1] * 
            v2[2] ) - ( v1[2] * v2[1] )] );
        mag := 0;
        REPEAT i := 1 TO 3 BY 1;
          mag := mag + ( res.direction_ratios[i] * res.direction_ratios[i] );
        END_REPEAT;
        IF mag &gt; 0 THEN
          result := dummy_gri || vector( res, SQRT( mag ) );
        ELSE
          result := dummy_gri || vector( arg1, 0 );
        END_IF;
        RETURN( result );
      END;
    END_IF;</algorithm>
      </function>
      <function name="curve_weights_positive">
         <parameter name="b">
            <typename name="rational_b_spline_curve"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      result : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT i := 0 TO b.upper_index_on_control_points BY 1;
      IF b.weights[i] &lt;= 0 THEN
        result := FALSE;
        RETURN( result );
      END_IF;
    END_REPEAT;
    RETURN( result );</algorithm>
      </function>
      <function name="dependently_instantiated">
         <parameter name="set_of_input_instances">
            <aggregate lower="0" type="SET" upper="?"/>
            <builtintype type="GENERIC" typelabel="igen"/>
         </parameter>
         <parameter name="set_of_input_types">
            <aggregate lower="0" type="SET" upper="?"/>
            <builtintype type="STRING"/>
         </parameter>
         <parameter name="previous_in_chain">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="GENERIC" typelabel="cgen"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      dependently_instantiated_flag : BOOLEAN;
      number_of_referring_instances : INTEGER;
      bag_of_referring_instances    : BAG OF GENERIC:igen := [];
      set_of_types                  : SET OF STRING := [];
      number_of_input_instances     : INTEGER;
      previous_in_chain_plus        : LIST OF GENERIC:cgen := [];
      result                        : BOOLEAN := TRUE;
    END_LOCAL;
    IF EXISTS( set_of_input_instances ) THEN
      number_of_input_instances := SIZEOF( set_of_input_instances );
      set_of_input_types := set_of_input_types + 'GENERIC';
      REPEAT i := 1 TO number_of_input_instances BY 1;
        bag_of_referring_instances := USEDIN( set_of_input_instances[i], '' );
        IF EXISTS( bag_of_referring_instances ) THEN
          number_of_referring_instances := SIZEOF( bag_of_referring_instances );
          dependently_instantiated_flag := FALSE;
          REPEAT j := 1 TO number_of_referring_instances BY 1;
            set_of_types := TYPEOF( bag_of_referring_instances[j] );
            IF set_of_types &lt;= set_of_input_types THEN
              IF NOT ( bag_of_referring_instances[j] IN previous_in_chain ) THEN
                previous_in_chain_plus := previous_in_chain + set_of_input_instances[i];
                IF dependently_instantiated( [bag_of_referring_instances[j]], set_of_input_types, previous_in_chain_plus ) THEN
                  dependently_instantiated_flag := TRUE;
                  ESCAPE;
                ELSE
                  SKIP;
                END_IF;
              END_IF;
            ELSE
              dependently_instantiated_flag := TRUE;
              ESCAPE;
            END_IF;
          END_REPEAT;
          IF NOT dependently_instantiated_flag THEN
            RETURN( FALSE );
          END_IF;
        ELSE
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    ELSE
      RETURN( FALSE );
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="derive_dimensional_exponents">
         <parameter name="x">
            <typename name="unit"/>
         </parameter>
         <typename name="dimensional_exponents"/>
         <algorithm>LOCAL
      result : dimensional_exponents := dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 );
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.DERIVED_UNIT' IN TYPEOF( x ) THEN
      REPEAT i := LOINDEX( x\derived_unit.elements ) TO HIINDEX( x\derived_unit.elements ) BY 1;
        result.length_exponent := result.length_exponent + ( x\derived_unit.elements[i]\derived_unit_element.exponent * x\
            derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.length_exponent );
        result.mass_exponent := result.mass_exponent + ( x\derived_unit.elements[i]\derived_unit_element.exponent * x\
            derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.mass_exponent );
        result.time_exponent := result.time_exponent + ( x\derived_unit.elements[i]\derived_unit_element.exponent * x\
            derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.time_exponent );
        result.electric_current_exponent := result.electric_current_exponent + ( x\derived_unit.elements[i]\derived_unit_element.
            exponent * x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.electric_current_exponent );
        result.thermodynamic_temperature_exponent := result.thermodynamic_temperature_exponent + ( x\derived_unit.elements[i]\
            derived_unit_element.exponent * x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.
            thermodynamic_temperature_exponent );
        result.amount_of_substance_exponent := result.amount_of_substance_exponent + ( x\derived_unit.elements[i]\
            derived_unit_element.exponent * x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.
            amount_of_substance_exponent );
        result.luminous_intensity_exponent := result.luminous_intensity_exponent + ( x\derived_unit.elements[i]\
            derived_unit_element.exponent * x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.
            luminous_intensity_exponent );
      END_REPEAT;
    ELSE
      result := x\named_unit.dimensions;
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="dimension_of">
         <parameter name="item">
            <typename name="geometric_representation_item"/>
         </parameter>
         <typename name="dimension_count"/>
         <algorithm>LOCAL
      x   : SET OF representation;
      y   : representation_context;
      dim : dimension_count;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CARTESIAN_POINT' IN TYPEOF( item ) THEN
      dim := SIZEOF( item\cartesian_point.coordinates );
      RETURN( dim );
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.DIRECTION' IN TYPEOF( item ) THEN
      dim := SIZEOF( item\direction.direction_ratios );
      RETURN( dim );
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VECTOR' IN TYPEOF( item ) THEN
      dim := SIZEOF( item\vector.orientation\direction.direction_ratios );
      RETURN( dim );
    END_IF;
    x := using_representations( item );
    IF SIZEOF( x ) &gt; 0 THEN
      y := x[1].context_of_items;
      dim := y\geometric_representation_context.coordinate_space_dimension;
      RETURN( dim );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="dimensions_for_si_unit">
         <parameter name="n">
            <typename name="si_unit_name"/>
         </parameter>
         <typename name="dimensional_exponents"/>
         <algorithm>CASE n OF
      metre         :         RETURN( dimensional_exponents( 1, 0, 0, 0, 0, 0, 0 ) );
      gram          :         RETURN( dimensional_exponents( 0, 1, 0, 0, 0, 0, 0 ) );
      second        :         RETURN( dimensional_exponents( 0, 0, 1, 0, 0, 0, 0 ) );
      ampere        :         RETURN( dimensional_exponents( 0, 0, 0, 1, 0, 0, 0 ) );
      kelvin        :         RETURN( dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 ) );
      mole          :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 1, 0 ) );
      candela       :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 ) );
      radian        :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) );
      steradian     :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) );
      hertz         :         RETURN( dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 ) );
      newton        :         RETURN( dimensional_exponents( 1, 1, -2, 0, 0, 0, 0 ) );
      pascal        :         RETURN( dimensional_exponents( -1, 1, -2, 0, 0, 0, 0 ) );
      joule         :         RETURN( dimensional_exponents( 2, 1, -2, 0, 0, 0, 0 ) );
      watt          :         RETURN( dimensional_exponents( 2, 1, -3, 0, 0, 0, 0 ) );
      coulomb       :         RETURN( dimensional_exponents( 0, 0, 1, 1, 0, 0, 0 ) );
      volt          :         RETURN( dimensional_exponents( 2, 1, -3, -1, 0, 0, 0 ) );
      farad         :         RETURN( dimensional_exponents( -2, -1, 4, 2, 0, 0, 0 ) );
      ohm           :         RETURN( dimensional_exponents( 2, 1, -3, -2, 0, 0, 0 ) );
      siemens       :         RETURN( dimensional_exponents( -2, -1, 3, 2, 0, 0, 0 ) );
      weber         :         RETURN( dimensional_exponents( 2, 1, -2, -1, 0, 0, 0 ) );
      tesla         :         RETURN( dimensional_exponents( 0, 1, -2, -1, 0, 0, 0 ) );
      henry         :         RETURN( dimensional_exponents( 2, 1, -2, -2, 0, 0, 0 ) );
      degree_celsius :         RETURN( dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 ) );
      lumen         :         RETURN( dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 ) );
      lux           :         RETURN( dimensional_exponents( -2, 0, 0, 0, 0, 0, 1 ) );
      becquerel     :         RETURN( dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 ) );
      gray          :         RETURN( dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 ) );
      sievert       :         RETURN( dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 ) );
      OTHERWISE     :         RETURN( ? );
      END_CASE;</algorithm>
      </function>
      <function name="dot_product">
         <parameter name="arg1">
            <typename name="direction"/>
         </parameter>
         <parameter name="arg2">
            <typename name="direction"/>
         </parameter>
         <builtintype type="REAL"/>
         <algorithm>LOCAL
      ndim   : INTEGER;
      scalar : REAL;
      vec1   : direction;
      vec2   : direction;
    END_LOCAL;
    IF ( NOT EXISTS( arg1 ) ) OR ( NOT EXISTS( arg2 ) ) THEN
      scalar := ?;
    ELSE
      IF arg1.dim &lt;&gt; arg2.dim THEN
        scalar := ?;
      ELSE

        BEGIN
          vec1 := normalise( arg1 );
          vec2 := normalise( arg2 );
          ndim := arg1.dim;
          scalar := 0;
          REPEAT i := 1 TO ndim BY 1;
            scalar := scalar + ( vec1.direction_ratios[i] * vec2.direction_ratios[i] );
          END_REPEAT;
        END;
      END_IF;
    END_IF;
    RETURN( scalar );</algorithm>
      </function>
      <function name="edge_reversed">
         <parameter name="an_edge">
            <typename name="edge"/>
         </parameter>
         <typename name="oriented_edge"/>
         <algorithm>LOCAL
      the_reverse : oriented_edge;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_EDGE' IN TYPEOF( an_edge ) THEN
      the_reverse := dummy_tri || edge( an_edge.edge_end, an_edge.edge_start ) || oriented_edge( an_edge\oriented_edge.
          edge_element, NOT an_edge\oriented_edge.orientation );
    ELSE
      the_reverse := dummy_tri || edge( an_edge.edge_end, an_edge.edge_start ) || oriented_edge( an_edge, FALSE );
    END_IF;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="face_bound_reversed">
         <parameter name="a_face_bound">
            <typename name="face_bound"/>
         </parameter>
         <typename name="face_bound"/>
         <algorithm>LOCAL
      the_reverse : face_bound;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACE_OUTER_BOUND' IN TYPEOF( a_face_bound ) THEN
      the_reverse := dummy_tri || face_bound( a_face_bound\face_bound.bound, NOT a_face_bound\face_bound.orientation ) || 
          face_outer_bound(  );
    ELSE
      the_reverse := dummy_tri || face_bound( a_face_bound.bound, NOT a_face_bound.orientation );
    END_IF;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="face_reversed">
         <parameter name="a_face">
            <typename name="face"/>
         </parameter>
         <typename name="oriented_face"/>
         <algorithm>LOCAL
      the_reverse : oriented_face;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_FACE' IN TYPEOF( a_face ) THEN
      the_reverse := dummy_tri || face( set_of_topology_reversed( a_face.bounds ) ) || oriented_face( a_face\oriented_face.
          face_element, NOT a_face\oriented_face.orientation );
    ELSE
      the_reverse := dummy_tri || face( set_of_topology_reversed( a_face.bounds ) ) || oriented_face( a_face, FALSE );
    END_IF;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="first_proj_axis">
         <parameter name="z_axis">
            <typename name="direction"/>
         </parameter>
         <parameter name="arg">
            <typename name="direction"/>
         </parameter>
         <typename name="direction"/>
         <algorithm>LOCAL
      x_vec  : vector;
      v      : direction;
      z      : direction;
      x_axis : direction;
    END_LOCAL;
    IF NOT EXISTS( z_axis ) THEN
      RETURN( ? );
    ELSE
      z := normalise( z_axis );
      IF NOT EXISTS( arg ) THEN
        IF ( z.direction_ratios &lt;&gt; [1, 0, 0] ) AND ( z.direction_ratios &lt;&gt; [-1, 0, 0] ) THEN
          v := dummy_gri || direction( [1, 0, 0] );
        ELSE
          v := dummy_gri || direction( [0, 1, 0] );
        END_IF;
      ELSE
        IF arg.dim &lt;&gt; 3 THEN
          RETURN( ? );
        END_IF;
        IF cross_product( arg, z ).magnitude = 0 THEN
          RETURN( ? );
        ELSE
          v := normalise( arg );
        END_IF;
      END_IF;
      x_vec := scalar_times_vector( dot_product( v, z ), z );
      x_axis := vector_difference( v, x_vec ).orientation;
      x_axis := normalise( x_axis );
    END_IF;
    RETURN( x_axis );</algorithm>
      </function>
      <function name="get_basis_surface">
         <parameter name="c">
            <typename name="curve_on_surface"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="2"/>
         <typename name="surface"/>
         <algorithm>LOCAL
      surfs : SET [0 : 2] OF surface;
      n     : INTEGER;
    END_LOCAL;
    surfs := [];
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PCURVE' IN TYPEOF( c ) THEN
      surfs := [c\pcurve.basis_surface];
    ELSE
      IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SURFACE_CURVE' IN TYPEOF( c ) THEN
        n := SIZEOF( c\surface_curve.associated_geometry );
        REPEAT i := 1 TO n BY 1;
          surfs := surfs + associated_surface( c\surface_curve.associated_geometry[i] );
        END_REPEAT;
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.COMPOSITE_CURVE_ON_SURFACE' IN TYPEOF( c ) THEN
      n := SIZEOF( c\composite_curve.segments );
      surfs := get_basis_surface( c\composite_curve.segments[1].parent_curve );
      IF n &gt; 1 THEN
        REPEAT i := 2 TO n BY 1;
          surfs := surfs * get_basis_surface( c\composite_curve.segments[i].parent_curve );
        END_REPEAT;
      END_IF;
    END_IF;
    RETURN( surfs );</algorithm>
      </function>
      <function name="get_description_value">
         <parameter name="obj">
            <typename name="description_attribute_select"/>
         </parameter>
         <typename name="text"/>
         <algorithm>LOCAL
      description_bag : BAG OF description_attribute := USEDIN( obj, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' 
                         + 'DESCRIPTION_ATTRIBUTE.' + 'DESCRIBED_ITEM' );
    END_LOCAL;
    IF SIZEOF( description_bag ) = 1 THEN
      RETURN( description_bag[1].attribute_value );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="get_directed_link">
         <parameter name="nodes">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="representation"/>
         </parameter>
         <parameter name="undirected_link">
            <aggregate lower="0" type="LIST" upper="?"/>
            <typename name="chained_representation_link"/>
         </parameter>
         <aggregate lower="0" type="LIST" upper="?"/>
         <typename name="representation_relationship"/>
         <algorithm>LOCAL
      directed_link : LIST OF representation_relationship := [];
    END_LOCAL;
    IF ( SIZEOF( nodes ) &lt;&gt; ( SIZEOF( undirected_link ) + 1 ) ) OR ( VALUE_UNIQUE( nodes ) = FALSE ) THEN
      RETURN( ? );
    END_IF;
    REPEAT i := 1 TO SIZEOF( undirected_link ) BY 1;
      CASE TRUE OF
        'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION_CONTEXT' IN TYPEOF( undirected_link[i] ) : 
          BEGIN
            IF ( nodes[i]\representation.context_of_items :=: undirected_link[i] ) AND ( nodes[i + 1]\representation.
                context_of_items :=: undirected_link[i] ) THEN
              INSERT( directed_link, representation_relationship( '', '', nodes[i + 1], nodes[i] ), i - 1 );
            ELSE
              RETURN( ? );
            END_IF;
          END;
        'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION_RELATIONSHIP' IN TYPEOF( undirected_link[i] ) : 
          BEGIN
            IF ( ( nodes[i] :=: undirected_link[i]\representation_relationship.rep_1 ) AND ( nodes[i + 1] :=: undirected_link[i]\
                representation_relationship.rep_2 ) ) OR ( ( nodes[i] :=: undirected_link[i]\representation_relationship.rep_2 ) 
                AND ( nodes[i + 1] :=: undirected_link[i]\representation_relationship.rep_1 ) ) THEN
              INSERT( directed_link, representation_relationship( '', '', nodes[i + 1], nodes[i] ), i - 1 );
            ELSE
              RETURN( ? );
            END_IF;
          END;
        'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAPPED_ITEM' IN TYPEOF( undirected_link[i] ) : 
          BEGIN
            IF ( nodes[i] IN using_representations( undirected_link[i] ) ) AND ( nodes[i + 1] :=: undirected_link[i]\mapped_item.
                mapping_source\representation_map.mapped_representation ) THEN
              INSERT( directed_link, representation_relationship( '', '', nodes[i + 1], nodes[i] ), i - 1 );
            ELSE
              RETURN( ? );
            END_IF;
          END;
        OTHERWISE                          :           RETURN( ? );
        END_CASE;
    END_REPEAT;
    IF VALUE_UNIQUE( directed_link ) = FALSE THEN
      RETURN( ? );
    END_IF;
    RETURN( directed_link );</algorithm>
      </function>
      <function name="get_id_value">
         <parameter name="obj">
            <typename name="id_attribute_select"/>
         </parameter>
         <typename name="identifier"/>
         <algorithm>LOCAL
      id_bag : BAG OF id_attribute := USEDIN( obj, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 'ID_ATTRIBUTE.' 
                + 'IDENTIFIED_ITEM' );
    END_LOCAL;
    IF SIZEOF( id_bag ) = 1 THEN
      RETURN( id_bag[1].attribute_value );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="get_name_value">
         <parameter name="obj">
            <typename name="name_attribute_select"/>
         </parameter>
         <typename name="label"/>
         <algorithm>LOCAL
      name_bag : BAG OF name_attribute := USEDIN( obj, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
                  'NAME_ATTRIBUTE.'  + 'NAMED_ITEM' );
    END_LOCAL;
    IF SIZEOF( name_bag ) = 1 THEN
      RETURN( name_bag[1].attribute_value );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="get_role">
         <parameter name="obj">
            <typename name="role_select"/>
         </parameter>
         <typename name="object_role"/>
         <algorithm>LOCAL
      role_bag : BAG OF role_association := USEDIN( obj, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.' + 
                  'ROLE_ASSOCIATION.'  + 'ITEM_WITH_ROLE' );
    END_LOCAL;
    IF SIZEOF( role_bag ) = 1 THEN
      RETURN( role_bag[1].role );
    ELSE
      RETURN( ? );
    END_IF;</algorithm>
      </function>
      <function name="item_in_context">
         <parameter name="item">
            <typename name="representation_item"/>
         </parameter>
         <parameter name="cntxt">
            <typename name="representation_context"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      y : BAG OF representation_item;
    END_LOCAL;
    IF SIZEOF( USEDIN( item, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION.ITEMS' ) * cntxt.
        representations_in_context ) &gt; 0 THEN
      RETURN( TRUE );
    ELSE
      y := QUERY ( z &lt;* USEDIN( item, '' ) | ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION_ITEM' 
          IN TYPEOF( z ) ) );
      IF SIZEOF( y ) &gt; 0 THEN
        REPEAT i := 1 TO HIINDEX( y ) BY 1;
          IF item_in_context( y[i], cntxt ) THEN
            RETURN( TRUE );
          END_IF;
        END_REPEAT;
      END_IF;
    END_IF;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="list_face_loops">
         <parameter name="f">
            <typename name="face"/>
         </parameter>
         <aggregate lower="0" type="LIST" upper="?"/>
         <typename name="loop"/>
         <algorithm>LOCAL
      loops : LIST [0 : ?] OF loop := [];
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( f.bounds ) BY 1;
      loops := loops + f.bounds[i].bound;
    END_REPEAT;
    RETURN( loops );</algorithm>
      </function>
      <function name="list_of_topology_reversed">
         <parameter name="a_list">
            <typename name="list_of_reversible_topology_item"/>
         </parameter>
         <typename name="list_of_reversible_topology_item"/>
         <algorithm>LOCAL
      the_reverse : list_of_reversible_topology_item;
    END_LOCAL;
    the_reverse := [];
    REPEAT i := 1 TO SIZEOF( a_list ) BY 1;
      the_reverse := topology_reversed( a_list[i] ) + the_reverse;
    END_REPEAT;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="list_to_array">
         <parameter name="lis">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="GENERIC" typelabel="t"/>
         </parameter>
         <parameter name="low">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="u">
            <builtintype type="INTEGER"/>
         </parameter>
         <aggregate lower="low" type="ARRAY" upper="u"/>
         <builtintype type="GENERIC" typelabel="t"/>
         <algorithm>LOCAL
      n   : INTEGER;
      res : ARRAY [low : u] OF GENERIC:t;
    END_LOCAL;
    n := SIZEOF( lis );
    IF n &lt;&gt; ( ( u - low ) + 1 ) THEN
      RETURN( ? );
    ELSE
      res := [lis[1] : 0];
      REPEAT i := 2 TO n BY 1;
        res[( low + i ) - 1] := lis[i];
      END_REPEAT;
      RETURN( res );
    END_IF;</algorithm>
      </function>
      <function name="list_to_set">
         <parameter name="l">
            <aggregate lower="0" type="LIST" upper="?"/>
            <builtintype type="GENERIC" typelabel="t"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <builtintype type="GENERIC" typelabel="t"/>
         <algorithm>LOCAL
      s : SET OF GENERIC:t := [];
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( l ) BY 1;
      s := s + l[i];
    END_REPEAT;
    RETURN( s );</algorithm>
      </function>
      <function name="make_array_of_array">
         <parameter name="lis">
            <aggregate lower="1" type="LIST" upper="?"/>
            <aggregate lower="1" type="LIST" upper="?"/>
            <builtintype type="GENERIC" typelabel="t"/>
         </parameter>
         <parameter name="low1">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="u1">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="low2">
            <builtintype type="INTEGER"/>
         </parameter>
         <parameter name="u2">
            <builtintype type="INTEGER"/>
         </parameter>
         <aggregate lower="low1" type="ARRAY" upper="u1"/>
         <aggregate lower="low2" type="ARRAY" upper="u2"/>
         <builtintype type="GENERIC" typelabel="t"/>
         <algorithm>LOCAL
      res : ARRAY [low1 : u1] OF ARRAY [low2 : u2] OF GENERIC:t;
    END_LOCAL;
    IF ( ( u1 - low1 ) + 1 ) &lt;&gt; SIZEOF( lis ) THEN
      RETURN( ? );
    END_IF;
    IF ( ( u2 - low2 ) + 1 ) &lt;&gt; SIZEOF( lis[1] ) THEN
      RETURN( ? );
    END_IF;
    res := [list_to_array( lis[1], low2, u2 ) : 0];
    REPEAT i := 2 TO HIINDEX( lis ) BY 1;
      IF ( ( u2 - low2 ) + 1 ) &lt;&gt; SIZEOF( lis[i] ) THEN
        RETURN( ? );
      END_IF;
      res[( low1 + i ) - 1] := list_to_array( lis[i], low2, u2 );
    END_REPEAT;
    RETURN( res );</algorithm>
      </function>
      <function name="mixed_loop_type_set">
         <parameter name="l">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="loop"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      poly_loop_type : LOGICAL;
    END_LOCAL;
    IF SIZEOF( l ) &lt;= 1 THEN
      RETURN( FALSE );
    END_IF;
    poly_loop_type := 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLY_LOOP' IN TYPEOF( l[1] );
    REPEAT i := 2 TO SIZEOF( l ) BY 1;
      IF ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POLY_LOOP' IN TYPEOF( l[i] ) ) &lt;&gt; poly_loop_type THEN
        RETURN( TRUE );
      END_IF;
    END_REPEAT;
    RETURN( FALSE );</algorithm>
      </function>
      <function name="msb_shells">
         <parameter name="brep">
            <typename name="manifold_solid_brep"/>
         </parameter>
         <aggregate lower="1" type="SET" upper="?"/>
         <typename name="closed_shell"/>
         <algorithm>LOCAL
      return_set : SET [1 : ?] OF closed_shell := [brep.outer];
    END_LOCAL;
    IF SIZEOF( QUERY ( msbtype &lt;* TYPEOF( brep ) | ( msbtype LIKE '*BREP_WITH_VOIDS' ) ) ) &gt;= 1 THEN
      return_set := return_set + brep\brep_with_voids.voids;
    END_IF;
    RETURN( return_set );</algorithm>
      </function>
      <function name="normalise">
         <parameter name="arg">
            <typename name="vector_or_direction"/>
         </parameter>
         <typename name="vector_or_direction"/>
         <algorithm>LOCAL
      ndim   : INTEGER;
      v      : direction := dummy_gri || direction( [1, 0, 0] );
      vec    : vector := dummy_gri || vector( v, 1 );
      mag    : REAL;
      result : vector_or_direction;
    END_LOCAL;
    IF NOT EXISTS( arg ) THEN
      result := ?;
    ELSE
      ndim := arg.dim;
      IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VECTOR' IN TYPEOF( arg ) THEN

        BEGIN
          v := dummy_gri || direction( arg\vector.orientation.direction_ratios );
          IF arg\vector.magnitude = 0 THEN
            RETURN( ? );
          ELSE
            vec := dummy_gri || vector( v, 1 );
          END_IF;
        END;
      ELSE
        v := dummy_gri || direction( arg.direction_ratios );
      END_IF;
      mag := 0;
      REPEAT i := 1 TO ndim BY 1;
        mag := mag + ( v.direction_ratios[i] * v.direction_ratios[i] );
      END_REPEAT;
      IF mag &gt; 0 THEN
        mag := SQRT( mag );
        REPEAT i := 1 TO ndim BY 1;
          v.direction_ratios[i] := v.direction_ratios[i] DIV mag;
        END_REPEAT;
        IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VECTOR' IN TYPEOF( arg ) THEN
          vec.orientation := v;
          result := vec;
        ELSE
          result := v;
        END_IF;
      ELSE
        RETURN( ? );
      END_IF;
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="open_shell_reversed">
         <parameter name="a_shell">
            <typename name="open_shell"/>
         </parameter>
         <typename name="oriented_open_shell"/>
         <algorithm>LOCAL
      the_reverse : oriented_open_shell;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_OPEN_SHELL' IN TYPEOF( a_shell ) THEN
      the_reverse := dummy_tri || connected_face_set( a_shell\connected_face_set.cfs_faces ) || open_shell(  ) || 
          oriented_open_shell( a_shell\oriented_open_shell.open_shell_element, NOT a_shell\oriented_open_shell.orientation );
    ELSE
      the_reverse := dummy_tri || connected_face_set( a_shell\connected_face_set.cfs_faces ) || open_shell(  ) || 
          oriented_open_shell( a_shell, FALSE );
    END_IF;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="orthogonal_complement">
         <parameter name="vec">
            <typename name="direction"/>
         </parameter>
         <typename name="direction"/>
         <algorithm>LOCAL
      result : direction;
    END_LOCAL;
    IF ( vec.dim &lt;&gt; 2 ) OR ( NOT EXISTS( vec ) ) THEN
      RETURN( ? );
    ELSE
      result := dummy_gri || direction( [-vec.direction_ratios[2], vec.direction_ratios[1]] );
      RETURN( result );
    END_IF;</algorithm>
      </function>
      <function name="path_head_to_tail">
         <parameter name="a_path">
            <typename name="path"/>
         </parameter>
         <builtintype type="LOGICAL"/>
         <algorithm>LOCAL
      n : INTEGER;
      p : LOGICAL := TRUE;
    END_LOCAL;
    n := SIZEOF( a_path.edge_list );
    REPEAT i := 2 TO n BY 1;
      p := p AND ( a_path.edge_list[i - 1].edge_end :=: a_path.edge_list[i].edge_start );
    END_REPEAT;
    RETURN( p );</algorithm>
      </function>
      <function name="path_reversed">
         <parameter name="a_path">
            <typename name="path"/>
         </parameter>
         <typename name="oriented_path"/>
         <algorithm>LOCAL
      the_reverse : oriented_path;
    END_LOCAL;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ORIENTED_PATH' IN TYPEOF( a_path ) THEN
      the_reverse := dummy_tri || path( list_of_topology_reversed( a_path.edge_list ) ) || oriented_path( a_path\oriented_path.
          path_element, NOT a_path\oriented_path.orientation );
    ELSE
      the_reverse := dummy_tri || path( list_of_topology_reversed( a_path.edge_list ) ) || oriented_path( a_path, FALSE );
    END_IF;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="scalar_times_vector">
         <parameter name="scalar">
            <builtintype type="REAL"/>
         </parameter>
         <parameter name="vec">
            <typename name="vector_or_direction"/>
         </parameter>
         <typename name="vector"/>
         <algorithm>LOCAL
      v      : direction;
      mag    : REAL;
      result : vector;
    END_LOCAL;
    IF ( NOT EXISTS( scalar ) ) OR ( NOT EXISTS( vec ) ) THEN
      RETURN( ? );
    ELSE
      IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VECTOR' IN TYPEOF( vec ) THEN
        v := dummy_gri || direction( vec\vector.orientation.direction_ratios );
        mag := scalar * vec\vector.magnitude;
      ELSE
        v := dummy_gri || direction( vec.direction_ratios );
        mag := scalar;
      END_IF;
      IF mag &lt; 0 THEN
        REPEAT i := 1 TO SIZEOF( v.direction_ratios ) BY 1;
          v.direction_ratios[i] := -v.direction_ratios[i];
        END_REPEAT;
        mag := -mag;
      END_IF;
      result := dummy_gri || vector( normalise( v ), mag );
    END_IF;
    RETURN( result );</algorithm>
      </function>
      <function name="second_proj_axis">
         <parameter name="z_axis">
            <typename name="direction"/>
         </parameter>
         <parameter name="x_axis">
            <typename name="direction"/>
         </parameter>
         <parameter name="arg">
            <typename name="direction"/>
         </parameter>
         <typename name="direction"/>
         <algorithm>LOCAL
      temp   : vector;
      v      : direction;
      y_axis : vector;
    END_LOCAL;
    IF NOT EXISTS( arg ) THEN
      v := dummy_gri || direction( [0, 1, 0] );
    ELSE
      v := arg;
    END_IF;
    temp := scalar_times_vector( dot_product( v, z_axis ), z_axis );
    y_axis := vector_difference( v, temp );
    temp := scalar_times_vector( dot_product( v, x_axis ), x_axis );
    y_axis := vector_difference( y_axis, temp );
    y_axis := normalise( y_axis );
    RETURN( y_axis.orientation );</algorithm>
      </function>
      <function name="set_of_topology_reversed">
         <parameter name="a_set">
            <typename name="set_of_reversible_topology_item"/>
         </parameter>
         <typename name="set_of_reversible_topology_item"/>
         <algorithm>LOCAL
      the_reverse : set_of_reversible_topology_item;
    END_LOCAL;
    the_reverse := [];
    REPEAT i := 1 TO SIZEOF( a_set ) BY 1;
      the_reverse := the_reverse + topology_reversed( a_set[i] );
    END_REPEAT;
    RETURN( the_reverse );</algorithm>
      </function>
      <function name="shell_reversed">
         <parameter name="a_shell">
            <typename name="shell"/>
         </parameter>
         <typename name="shell"/>
         <algorithm>IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.OPEN_SHELL' IN TYPEOF( a_shell ) THEN
      RETURN( open_shell_reversed( a_shell ) );
    ELSE
      IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CLOSED_SHELL' IN TYPEOF( a_shell ) THEN
        RETURN( closed_shell_reversed( a_shell ) );
      ELSE
        RETURN( ? );
      END_IF;
    END_IF;</algorithm>
      </function>
      <function name="surface_weights_positive">
         <parameter name="b">
            <typename name="rational_b_spline_surface"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      result : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT i := 0 TO b.u_upper BY 1;
      REPEAT j := 0 TO b.v_upper BY 1;
        IF b.weights[i][j] &lt;= 0 THEN
          result := FALSE;
          RETURN( result );
        END_IF;
      END_REPEAT;
    END_REPEAT;
    RETURN( result );</algorithm>
      </function>
      <function name="topology_reversed">
         <parameter name="an_item">
            <typename name="reversible_topology"/>
         </parameter>
         <typename name="reversible_topology"/>
         <algorithm>IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.EDGE' IN TYPEOF( an_item ) THEN
      RETURN( edge_reversed( an_item ) );
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PATH' IN TYPEOF( an_item ) THEN
      RETURN( path_reversed( an_item ) );
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACE_BOUND' IN TYPEOF( an_item ) THEN
      RETURN( face_bound_reversed( an_item ) );
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FACE' IN TYPEOF( an_item ) THEN
      RETURN( face_reversed( an_item ) );
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SHELL' IN TYPEOF( an_item ) THEN
      RETURN( shell_reversed( an_item ) );
    END_IF;
    IF 'SET' IN TYPEOF( an_item ) THEN
      RETURN( set_of_topology_reversed( an_item ) );
    END_IF;
    IF 'LIST' IN TYPEOF( an_item ) THEN
      RETURN( list_of_topology_reversed( an_item ) );
    END_IF;
    RETURN( ? );</algorithm>
      </function>
      <function name="unambiguously_specified_multi_level_reference_designator">
         <parameter name="links">
            <aggregate lower="1" type="LIST" upper="?"/>
            <typename name="next_assembly_usage_occurrence"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>REPEAT i := 1 TO SIZEOF( links ) - 1 BY 1;
      CASE TRUE OF
        ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION' IN TYPEOF( links[i]\
            product_definition_relationship.relating_product_definition ) ) AND ( 
            'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( links[i]\
            product_definition_relationship.related_product_definition ) ) AND ( 
            'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( links[i + 1]\
            product_definition_relationship.relating_product_definition ) ) : 
          BEGIN
            IF NOT ( ( links[i]\product_definition_relationship.related_product_definition :=: links[i + 1]\
                product_definition_relationship.relating_product_definition ) OR ( ( SIZEOF( QUERY ( pdr &lt;* USEDIN( links[i]\
                product_definition_relationship.related_product_definition, 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.'  + 
                'RELATED_PRODUCT_DEFINITION'  ) | ( pdr\product_definition_relationship.relating_product_definition :=: links[i +
                1]\product_definition_relationship.relating_product_definition ) ) ) = 1 ) AND ( links[i]\
                product_definition_relationship.related_product_definition\product_definition.formation\
                product_definition_formation.of_product :=: links[i + 1]\product_definition_relationship.
                relating_product_definition\product_definition.formation\product_definition_formation.of_product ) ) ) THEN
              RETURN( FALSE );
            END_IF;
          END;
        ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_REFERENCE' IN TYPEOF( links[i]\
            product_definition_relationship.related_product_definition ) ) AND ( 
            'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_REFERENCE'  IN TYPEOF( links[i + 1]\
            product_definition_relationship.relating_product_definition ) ) : 
          BEGIN
            IF NOT ( ( links[i]\product_definition_relationship.related_product_definition :=: links[i + 1]\
                product_definition_relationship.relating_product_definition ) OR ( ( SIZEOF( QUERY ( pdr &lt;* USEDIN( links[i]\
                product_definition_relationship.related_product_definition, 
                'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.'  + 
                'RELATED_PRODUCT_DEFINITION'  ) | ( pdr\product_definition_relationship.relating_product_definition :=: links[i +
                1]\product_definition_relationship.relating_product_definition ) ) ) = 1 ) AND ( links[i]\
                product_definition_relationship.related_product_definition\product_definition_reference.product_id = links[i + 1]\
                product_definition_relationship.relating_product_definition\product_definition_reference.product_id ) AND ( links[
                i]\product_definition_relationship.related_product_definition\product_definition_reference.
                id_owning_organization_name = links[i + 1]\product_definition_relationship.relating_product_definition\
                product_definition_reference.id_owning_organization_name ) AND ( links[i]\product_definition_relationship.
                related_product_definition\product_definition_reference.product_definition_id &lt;&gt; links[i + 1]\
                product_definition_relationship.relating_product_definition\product_definition_reference.product_definition_id ) ) )
                THEN
              RETURN( FALSE );
            END_IF;
          END;
        ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION_REFERENCE' IN TYPEOF( links[i]\
            product_definition_relationship.relating_product_definition ) ) AND ( 
            'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRODUCT_DEFINITION'  IN TYPEOF( links[i]\
            product_definition_relationship.related_product_definition ) ) :           RETURN( FALSE );
        OTHERWISE                          :           RETURN( FALSE );
        END_CASE;
    END_REPEAT;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="using_items">
         <parameter name="item">
            <typename name="founded_item_select"/>
         </parameter>
         <parameter name="checked_items">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="founded_item_select"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="founded_item_select"/>
         <algorithm>LOCAL
      next_items      : SET OF founded_item_select;
      new_check_items : SET OF founded_item_select;
      result_items    : SET OF founded_item_select;
    END_LOCAL;
    result_items := [];
    new_check_items := checked_items + item;
    next_items := QUERY ( z &lt;* bag_to_set( USEDIN( item, '' ) ) | ( ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.'
        + 'REPRESENTATION_ITEM'  IN TYPEOF( z ) ) OR ( 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FOUNDED_ITEM' 
        IN TYPEOF( z ) ) ) );
    IF SIZEOF( next_items ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( next_items ) BY 1;
        IF NOT ( next_items[i] IN new_check_items ) THEN
          result_items := result_items + next_items[i] + using_items( next_items[i], new_check_items );
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN( result_items );</algorithm>
      </function>
      <function name="using_representations">
         <parameter name="item">
            <typename name="founded_item_select"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="representation"/>
         <algorithm>LOCAL
      results            : SET OF representation;
      intermediate_items : SET OF founded_item_select;
      result_bag         : BAG OF representation;
    END_LOCAL;
    results := [];
    result_bag := USEDIN( item, 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION.ITEMS' );
    IF SIZEOF( result_bag ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( result_bag ) BY 1;
        results := results + result_bag[i];
      END_REPEAT;
    END_IF;
    intermediate_items := using_items( item, [] );
    IF SIZEOF( intermediate_items ) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX( intermediate_items ) BY 1;
        result_bag := USEDIN( intermediate_items[i], 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.REPRESENTATION.'
            + 'ITEMS'  );
        IF SIZEOF( result_bag ) &gt; 0 THEN
          REPEAT j := 1 TO HIINDEX( result_bag ) BY 1;
            results := results + result_bag[j];
          END_REPEAT;
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN( results );</algorithm>
      </function>
      <function name="valid_measure_value">
         <parameter name="m">
            <typename name="measure_value"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'REAL' IN TYPEOF( m ) THEN
      RETURN( m &gt; 0 );
    ELSE
      IF 'INTEGER' IN TYPEOF( m ) THEN
        RETURN( m &gt; 0 );
      ELSE
        RETURN( TRUE );
      END_IF;
    END_IF;</algorithm>
      </function>
      <function name="valid_units">
         <parameter name="m">
            <typename name="measure_with_unit"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LENGTH_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 1, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MASS_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 1, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.TIME_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 1, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELECTRIC_CURRENT_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.THERMODYNAMIC_TEMPERATURE_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CELSIUS_TEMPERATURE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AMOUNT_OF_SUBSTANCE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 1, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LUMINOUS_INTENSITY_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PLANE_ANGLE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.SOLID_ANGLE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.AREA_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VOLUME_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 3, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.RATIO_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POSITIVE_LENGTH_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 1, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POSITIVE_PLANE_ANGLE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ACCELERATION_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 1, 0, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CAPACITANCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( -2, -1, 4, 2, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELECTRIC_CHARGE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 1, 1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.CONDUCTANCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( -2, -1, 3, 2, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ELECTRIC_POTENTIAL_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 1, -3, -1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ENERGY_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 1, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FORCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 1, 1, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.FREQUENCY_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ILLUMINANCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( -2, 0, 0, 0, 0, 0, 1 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.INDUCTANCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 1, -2, -2, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.LUMINOUS_FLUX_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAGNETIC_FLUX_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 1, -2, -1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.MAGNETIC_FLUX_DENSITY_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 1, -2, -1, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.POWER_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 1, -3, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.PRESSURE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( -1, 1, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.RESISTANCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 1, -3, -2, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VELOCITY_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 1, 0, -1, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.RADIOACTIVITY_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.ABSORBED_DOSE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.DOSE_EQUIVALENT_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) &lt;&gt; dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    RETURN( TRUE );</algorithm>
      </function>
      <function name="vector_difference">
         <parameter name="arg1">
            <typename name="vector_or_direction"/>
         </parameter>
         <parameter name="arg2">
            <typename name="vector_or_direction"/>
         </parameter>
         <typename name="vector"/>
         <algorithm>LOCAL
      ndim   : INTEGER;
      mag2   : REAL;
      mag1   : REAL;
      mag    : REAL;
      res    : direction;
      vec1   : direction;
      vec2   : direction;
      result : vector;
    END_LOCAL;
    IF ( NOT EXISTS( arg1 ) ) OR ( NOT EXISTS( arg2 ) ) OR ( arg1.dim &lt;&gt; arg2.dim ) THEN
      RETURN( ? );
    ELSE

      BEGIN
        IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VECTOR' IN TYPEOF( arg1 ) THEN
          mag1 := arg1\vector.magnitude;
          vec1 := arg1\vector.orientation;
        ELSE
          mag1 := 1;
          vec1 := arg1;
        END_IF;
        IF 'AP243_BOUNDARY_REPRESENTATION_FOR_ISO_14306_OPEN_JT_MIM_LF.VECTOR' IN TYPEOF( arg2 ) THEN
          mag2 := arg2\vector.magnitude;
          vec2 := arg2\vector.orientation;
        ELSE
          mag2 := 1;
          vec2 := arg2;
        END_IF;
        vec1 := normalise( vec1 );
        vec2 := normalise( vec2 );
        ndim := SIZEOF( vec1.direction_ratios );
        mag := 0;
        res := dummy_gri || direction( vec1.direction_ratios );
        REPEAT i := 1 TO ndim BY 1;
          res.direction_ratios[i] := ( mag1 * vec1.direction_ratios[i] ) - ( mag2 * vec2.direction_ratios[i] );
          mag := mag + ( res.direction_ratios[i] * res.direction_ratios[i] );
        END_REPEAT;
        IF mag &gt; 0 THEN
          result := dummy_gri || vector( res, SQRT( mag ) );
        ELSE
          result := dummy_gri || vector( vec1, 0 );
        END_IF;
      END;
    END_IF;
    RETURN( result );</algorithm>
      </function>
   </schema>
</express>
