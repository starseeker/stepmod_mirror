<?xml version="1.0"?>
<?xml-stylesheet 
  type="text/xsl" 
  href="../../../xsl/descriptions.xsl"?>
<!DOCTYPE ext_descriptions SYSTEM "../../../dtd/description.dtd">
<ext_descriptions module_directory="building_component" schema_file="arm.xml" describe.selects="YES" rcs.date="$Date: 2002/09/05 07:53:40 $" rcs.revision="$Revision: 1.7 $">
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Schema: Building_component_arm
   <express_ref linkend="building_component:arm:Building_component_arm"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<ext_description linkend="Building_component_arm">
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Building_component_arm  Type: main 
   <express_ref linkend="building_component:arm:Building_component_arm.main"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Building_component_arm.main">A <b>main</b> type is a Logical which indicates, whether a <b>building_element_component</b> is the main component of a <b>building_element</b>.
	 		 <note>This shape is modified through the additions_and_subtractions to give the final shape of the
Building_element.</note>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Building_component_arm  Type: component_name 
   <express_ref linkend="building_component:arm:Building_component_arm.component_name"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Building_component_arm.component_name">A <b>component_name</b> specifies a descriptive title, which may be assigned to an <b>building_element_component</b>.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Building_component_arm  Type: opening_functional_type 
   <express_ref linkend="building_component:arm:Building_component_arm.opening_functional_type"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Building_component_arm.opening_functional_type">An <b>opening_functional_type</b> specifies a descriptive label that indicates the form or function of the Opening by a predifned value.
The predefined value of the <b>opening_functional_type</b> is one of the following:
<ul>
<li>door_opening</li>
<li>service_opening</li>
<li>window_opening</li>
</ul>
</ext_description>
<ext_description linkend="Building_component_arm.opening_functional_type.door_opening">The value door_opening indicates that the opening is in a wall that it is intended to provide access from one side of the
wall to the other and may be filled with a door.
</ext_description>
<ext_description linkend="Building_component_arm.opening_functional_type.service_opening">The value service_opening indicates that the opening is in a wall, floor, or roof that it is intended to allow service
elements to pass through the wall, floor, or roof.
</ext_description>
<ext_description linkend="Building_component_arm.opening_functional_type.window_opening">The value window_opening indicates the opening is in a wall or roof of a building to admit light and usually to
provide visual access through the wall or roof.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Building_component_arm  Type: opening_type 
   <express_ref linkend="building_component:arm:Building_component_arm.opening_type"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Building_component_arm.opening_type">An <b>opening_type</b> specifies a descriptive label that indicates the form or function of the Opening. The
value is either user defined or predefined.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Building_component_arm  Entity: Building_element_component  
   <express_ref linkend="building_component:arm:Building_component_arm.Building_element_component"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Building_component_arm.Building_element_component">A <b>Building_element_component</b> is a basic compositional constituent of the shape of Building_element
object that can imply a functional role. A Building_element_component is either a Positive_component or a Negative_component. 
<example>A column consists of the components shaft, brackets, and openings.</example>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Building_component_arm  Entity: building_element_component  Attribute: component_functional_type 
   <express_ref linkend="building_component:arm:Building_component_arm.building_element_component.component_functional_type"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Building_component_arm.Building_element_component.component_functional_type">A component_functional_type indicates, whether a <b>Building_element_component</b> is the main component of a <b>Building_element</b>   
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Building_component_arm  Entity: Negative_component  
   <express_ref linkend="building_component:arm:Building_component_arm.Negative_component"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Building_component_arm.Negative_component">A <b>Negative_Component</b> is a type of <b>Building_element_component</b> that is a portion of a
<b>Building_element</b> and represents a volume of space; it is a volume that is empty space
rather than solid material. A <b>Negative_component</b> may be one of the following: a <b>Recess</b> or an <b>Opening</b>.
<note>The shape of a Negative_component is of concern only where it intersects a Positive_component.</note>
<example>A Negative_component in a wall could be a door opening. The relationship between
the Negative_component (the door opening) and the Positive_component (the wall) is the same as if the
shape of the Negative_component were subtracted using a solid boolean operation (a CSG solid modelling
operation) from the shape of the Positive_component.</example>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Building_component_arm  Entity: Opening  
   <express_ref linkend="building_component:arm:Building_component_arm.Opening"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Building_component_arm.Opening">An <b>Opening</b> is a type of <b>Negative_component</b> that passes through a <b>Building_element</b> and serves a functional purpose.
<example>An opening would be left in a wall or slab for plumbing or air conditioning ducts.</example>
The data associated with an Opening are the following:
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Building_component_arm  Entity: Opening  Attribute: opening_type 
   <express_ref linkend="building_component:arm:Building_component_arm.Opening.opening_type"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Building_component_arm.Opening.opening_type">The opening_type specifies a descriptive label that indicates the form or function of the Opening. The
value is either user defined or predefined.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Building_component_arm  Entity: Positive_component  
   <express_ref linkend="building_component:arm:Building_component_arm.Positive_component"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Building_component_arm.Positive_component">A Positive_component is a type of Building_element_component (see 4.2.11) that represents a solid
volume.
<example>A Positive_component in a wall could be a window sill. The relationship between the
Positive_component representing the sill and the Positive_component representing the wall is the same as
if the shape of the positive_component representing the sill were added to the Positive_component
representing the wall using a solid boolean operation (a CSG solid modelling operation).</example>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Building_component_arm  Entity: Recess  
   <express_ref linkend="building_component:arm:Building_component_arm.Recess"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Building_component_arm.Recess">A Recess is a type of Negative_component (see 4.2.40) that does not pass through a Building_element
(see 4.2.10).
<example>An alcove or niche in a wall are recesses.</example>
</ext_description>
</ext_descriptions>
