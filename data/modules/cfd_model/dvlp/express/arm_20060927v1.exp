

(*
   ------------------------------------------------------------
../data/modules/cfd_model/arm.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ..\ballots\ballots\analysis\check_analysis_20060505\express\arm_20060505v1.exp *)

SCHEMA Cfd_model_arm;

USE FROM Analysis_arm;

USE FROM Cfd_conditions_arm;

USE FROM Cfd_equations_arm;

USE FROM Cfd_model_arm;

USE FROM Cfd_results_arm;
 
USE FROM Mesh_connectivity_arm;

USE FROM Mesh_topology_arm;


TYPE coordinate_data_name = EXTENSIBLE ENUMERATION OF
     (coordinate_x,
      coordinate_y,
      coordinate_z,
      coordinate_r,
      coordinate_theta,
      coordinate_phi,
      coordinate_normal,
      coordinate_tangential,
      coordinate_xi,
      coordinate_eta,
      coordinate_zeta,
      coordinate_transform);
END_TYPE;

ENTITY grid_coordinates
  SUBTYPE OF (model_property_distribution);
  SELF\model_property_distribution.domain : model_product_domain_with_mesh;
  SELF\model_property_distribution.range  : specified_general_property;
INVERSE
  data : SET OF property_distribution_description FOR physical_function;
WHERE
  wr1 : is_coordinate_property(range);
END_ENTITY;

ENTITY grid_coordinates_with_rind
  SUBTYPE OF (grid_coordinates);
  rind_planes : rind;
END_ENTITY;

ENTITY fd_step
  SUBTYPE OF (mbna_step);
  SELF\mbna_step.equations : SET OF flow_equation_set;  
  SELF\mbna_step.zones     : LIST OF fd_zone;
END_ENTITY;

ENTITY fd_zone
  SUBTYPE OF (mbna_zone);
  SELF\mbna_zone.conditions : SET OF fd_zone_bc;
  SELF\mbna_zone.equations  : SET OF flow_equation_set;
END_ENTITY;

ENTITY mbna_model
  SUBTYPE OF (numerical_model);
  data               : SET OF mbna_integral_data;
  equations          : SET OF mbna_equation_set;  
  steps              : LIST OF mbna_step;
INVERSE
  history : SET OF mbna_history for domain;  
END_ENTITY;

ENTITY mbna_step
  SUBTYPE OF (model_action_domain);
  data               : SET OF mbna_integral_data;
  equations          : SET OF mbna_equation_set;  
  families           : SET OF mbna_family;
  refstate           : SET OF mbna_reference_state;
  zones              : LIST OF mbna_zone;
INVERSE
  history : SET OF mbna_history for domain;  
END_ENTITY;

ENTITY mbna_structured_zone
  SUBTYPE OF (mbna_zone);
  SELF\model_product_domain_with_mesh.model_mesh : structured_mesh;
END_ENTITY;

ENTITY mbna_unstructured_zone
  SUBTYPE OF (mbna_zone);
  SELF\model_product_domain_with_mesh.model_mesh : unstructured_mesh;
END_ENTITY;

ENTITY mbna_zone
  SUBTYPE OF (model_product_domain_with_mesh);
  cell_dimension     : INTEGER;
  conditions         : SET OF mbna_zone_bc;
  equations          : SET OF mbna_equation_set;
  families           : SET OF mbna_family;
  global_data        : SET OF mbna_integral_data;
  grid_connectivity  : OPTIONAL multiple_mesh_block;
  nindices           : INTEGER;
  physical_dimension : INTEGER;
  rstate             : SET OF mbna_reference_state;
INVERSE
  coordinates : SET OF grid_coordinates FOR domain;
  field_data  : SET OF mbna_discrete_data FOR domain;
  history     : SET OF mbna_history FOR domain;
  solution    : SET OF mbna_solution FOR domain;
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_mbna_zone FOR mbna_zone;
  ABSTRACT SUPERTYPE;
  ONEOF(mbna_structured_zone,
        mbna_unstructured_zone);
END_SUBTYPE_CONSTRAINT;

FUNCTION is_coordinate_property(arg : specified_general_property) : BOOLEAN;
  IF ('EXTERNAL_REFERENCE_SCHEMA.EXTERNALLY_DEFINED_ITEM' IN
      TYPEOF(arg) ) THEN
    RETURN(TRUE);
  END_IF;
  RETURN ('DOMAIN_SCHEMA.COORDINATE_DATA_NAME' IN TYPEOF(arg));
END_FUNCTION;

END_SCHEMA;  -- end of hierarchy_schema


(*
   ------------------------------------------------------------
../data/modules/analysis/arm.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ..\ballots\ballots\analysis\check_analysis_20060505\express\arm_20060505v1.exp *)

SCHEMA Analysis_arm;

USE FROM Mesh_topology_arm;

USE FROM Analysis_product_relationships_arm;

USE FROM Independent_property_arm;

ENTITY Behavioural_decomposition_of_numerical_model;
  parts : SET [2:?] OF Numerical_model;
  whole : Numerical_model;
END_ENTITY;

ENTITY Model_action_domain
  SUBTYPE OF (Numerical_model);
  initial   : Model_state_domain;
  final     : Model_state_domain;
END_ENTITY;

ENTITY Model_product_domain
  SUBTYPE OF (Numerical_model);
  temporal_parts : SET OF model_action_domain;
END_ENTITY;

ENTITY Model_product_domain_with_mesh
  SUBTYPE OF (Model_product_domain);
  model_mesh : Mesh;
END_ENTITY;

ENTITY model_property_distribution;
  creating_software : STRING;
  domain            : Numerical_model;
  range             : Independent_property;
END_ENTITY;

ENTITY Model_state_domain
  SUBTYPE OF (Numerical_model);
END_ENTITY;

ENTITY Numerical_model;
  description            : STRING;
  id                     : STRING;
  name                   : STRING;
  creating_software      : STRING;
  intended_analysis_code : SET [1:?] OF STRING;
  analysis_type          : STRING;
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_numerical_model FOR
                   Numerical_model;
  ABSTRACT SUPERTYPE;
END_SUBTYPE_CONSTRAINT;

ENTITY Simulation_run;
  description : STRING;
  id          : STRING;
  name        : STRING;
  simulated   : Numerical_model;
  results     : SET OF Model_property_distribution;
END_ENTITY;

ENTITY Spatial_decomposition_of_numerical_model;
  parts : SET [2:?] OF Numerical_model;
  whole : Numerical_model;
END_ENTITY;

ENTITY Temporal_decomposition_of_model_action;
  parts : LIST [2:?] OF Model_action_domain;
  whole : Model_action_domain;
END_ENTITY;

END_SCHEMA; 


(*
   ------------------------------------------------------------
../data/modules/cfd_conditions/arm.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ..\ballots\ballots\analysis\check_analysis_20060505\express\arm_20060505v1.exp *)

SCHEMA Cfd_conditions_arm;

USE FROM Cfd_specified_general_property_arm;

TYPE fd_bc_type_compound = EXTENSIBLE ENUMERATION 
     BASED_ON mbna_bc_type_compound WITH
     (bc_inflow,
      bc_outflow,
      bc_farfield);
END_TYPE;

TYPE fd_bc_type_simple = EXTENSIBLE ENUMERATION 
     BASED_ON mbna_bc_type_simple WITH
     (bc_wall_inviscid,
      bc_wall_viscous_heat_flux,
      bc_wall_viscous_isothermal,
      bc_wall_viscous,
      bc_wall,
      bc_inflow_subsonic,
      bc_inflow_supersonic,
      bc_outflow_subsonic,
      bc_outflow_supersonic,
      bc_tunnel_inflow,
      bc_tunnel_outflow,
      bc_degenerate_line,
      bc_degenerate_point,
      bc_symmetry_polar,
      bc_axissymmetric_wedge);
END_TYPE;

TYPE ijk_minmax = ENUMERATION OF 
     (i_min,
      j_min,
      k_min,
      i_max,
      j_max,
      k_max);
END_TYPE;

TYPE mbna_bc_type = EXTENSIBLE SELECT 
     (mbna_bc_type_simple, 
      mbna_bc_type_compound);
END_TYPE;

TYPE mbna_bc_type_compound = EXTENSIBLE ENUMERATION OF 
     (unspecified,
      application_defined);
END_TYPE;

TYPE mbna_bc_type_simple = EXTENSIBLE ENUMERATION OF 
     (unspecified,
      application_defined,
      bc_general,
      bc_Dirichlet,
      bc_Neumann,
      bc_extrapolate,
      bc_symmetry_plane);
END_TYPE;

TYPE riemann_1d_data_name = EXTENSIBLE ENUMERATION OF  
     (Riemann_invariant_plus,
      Riemann_invariant_minus,
      characteristic_entropy,
      characteristic_vorticity1,
      characteristic_vorticity2,
      characteristic_acoustic_plus,
      characteristic_acoustic_minus);
END_TYPE;

ENTITY Elements_bc
  SUBTYPE OF (mbna_bc);
  elements : LIST OF vertex_defined_cell;
END_ENTITY;

ENTITY Fd_bc
  SUBTYPE OF (Mbna_bc);
  SELF\mbna_bc.datasets : SET OF fd_bc_dataset;
END_ENTITY;

ENTITY Fd_bc_dataset
  SUBTYPE OF (Mbna_bc_dataset);
  SELF\mbna_bc_dataset.the_type : fd_bc_type_simple;
END_ENTITY;

ENTITY Fd_zone_bc
  SUBTYPE OF (Mbna_zone_bc);
  SELF\mbna_zone_bc.conditions : SET OF fd_bc;
END_ENTITY;

ENTITY Indexed_elements_bc
  SUBTYPE OF (Mbna_bc);
  element_indices : indices_group;
END_ENTITY;

ENTITY Indexed_points_bc
  SUBTYPE OF (Mbna_bc);
  point_indices : indices_group;
END_ENTITY;

ENTITY Mbna_bc
  SUBTYPE OF (mbna_condition);
  datasets            : SET OF Mbna_bc_dataset;
  family              : SET OF Mbna_family;
  gridloc             : Mesh_location;
  inward_normal_index : OPTIONAL ijk_minmax;
  inward_normal_list  : OPTIONAL indices_list;
  rstate              : SET OF Mbna_reference_state;
  the_type            : mbna_bc_type;
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_mbna_bc FOR mBna_bc;
  ONEOF(elements_bc,
        indexed_elements_bc,
        indexed_points_bc);
END_SUBTYPE_CONSTRAINT;

ENTITY Mbna_bc_data
  SUBTYPE OF (Mbna_condition);
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_mbna_bc_data FOR Mbna_bc_data;
  ABSTRACT SUPERTYPE;
END_SUBTYPE_CONSTRAINT;

ENTITY Mbna_bc_data_global
  SUBTYPE OF (Mbna_bc_data);
INVERSE
  data_global : SET OF model_property_distribution FOR Domain;
END_ENTITY;

ENTITY Mbna_bc_data_local
  SUBTYPE OF (Mbna_bc_data);
INVERSE
  data_local : SET OF model_property_distribution FOR Domain;
END_ENTITY;

ENTITY Mbna_bc_dataset
  SUBTYPE OF (Mbna_condition);
  gridloc  : mesh_location;
  rstate   : SET OF mbna_reference_state;
  the_type : mbna_bc_type_simple;
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_mbna_bc_dataset FOR mbna_bc_dataset;
  ONEOF(mbna_Dirichlet_bc_dataset,
        mbna_Neumann_bc_dataset);
END_SUBTYPE_CONSTRAINT;

ENTITY Mbna_condition
  SUBTYPE OF (Model_state_domain);
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_mbna_condition FOR Mbna_condition;
  ABSTRACT SUPERTYPE;
  ONEOF(Mbna_zone_bc,
        Mbna_bc,
        Mbna_bc_dataset,
        Mbna_bc_data,
        Mbna_reference_state,
        Mbna_integral_data);
END_SUBTYPE_CONSTRAINT;

ENTITY mbna_Dirichlet_bc_dataset
  SUBTYPE OF (Mbna_bc_dataset);
  data : mbna_bc_data;
END_ENTITY;

ENTITY mbna_family;
  description  : STRING;
  id           : STRING;
  conditions   : SET OF mbna_bc_type;
  geometry     : SET OF Geometry_reference;
END_ENTITY;

ENTITY Mbna_integral_data
  SUBTYPE OF (Mbna_condition);
INVERSE
  data : SET OF model_property_distribution FOR Domain;
END_ENTITY;

ENTITY Mbna_neumann_bc_dataset
  SUBTYPE OF (Mbna_bc_dataset);
  data : mbna_bc_data;
END_ENTITY;

ENTITY Mbna_reference_state
  SUBTYPE OF (Mbna_condition);
INVERSE
  data : SET OF model_property_distribution FOR Domain;
END_ENTITY;

ENTITY Mbna_zone_bc
  SUBTYPE OF (Mbna_condition);
  conditions : SET OF Mbna_bc;
  rstate     : SET OF Mbna_reference_state;
END_ENTITY;

END_SCHEMA;  -- end of conditions_schema


(*
   ------------------------------------------------------------
../data/modules/cfd_equations/arm.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ..\ballots\ballots\analysis\check_analysis_20060505\express\arm_20060505v1.exp *)

SCHEMA Cfd_equations_arm;

USE FROM Analysis_arm;

TYPE fd_behaviour_models = EXTENSIBLE SELECT
  (gas_model,
   turbulence_closure,
   turbulence_model,
   viscosity_model);
END_TYPE;

TYPE fd_governing_equation_type = EXTENSIBLE ENUMERATION 
     BASED_ON mbna_governing_equation_type WITH
     (full_potential,
      Euler,
      NS_laminar,
      NS_turbulent,
      NS_laminar_incompressible,
      NS_turbulent_incompressible);
END_TYPE;

TYPE force_moment_data_name = EXTENSIBLE ENUMERATION OF
     (force_x,
      force_y,
      force_z,
      force_r,
      force_theta,
      force_phi,
      moment_x,
      moment_y,
      moment_z,
      moment_r,
      moment_theta,
      moment_phi,
      moment_xi,
      moment_eta,
      moment_zeta,
      moment_center_x,
      moment_center_y,
      moment_center_z,
      lift,
      drag,
      coef_lift,
      coef_drag,
      coef_moment_x,
      coef_moment_y,
      coef_moment_z,
      coef_moment_r,
      coef_moment_theta,
      coef_moment_phi,
      coef_moment_xi,
      coef_moment_eta,
      coef_moment_zeta,
      coef_moment_pressure_dynamic,
      coef_moment_area,
      coef_length);
END_TYPE;

TYPE gas_model_data_name = EXTENSIBLE ENUMERATION OF
     (ideal_gas_constant,
      specific_heat_ratio,
      specific_heat_pressure,
      specific_heat_volume);
END_TYPE;

TYPE gas_model_type = EXTENSIBLE ENUMERATION OF
     (unspecified,
      application_defined,
      ideal,
      Van_der_Waals);
END_TYPE;

TYPE mbna_behaviour_models = EXTENSIBLE SELECT
  (thermal_conductivity_model);
END_TYPE;

TYPE mbna_governing_equation_type = EXTENSIBLE ENUMERATION OF
     (unspecified,
      application_defined);
END_TYPE;

TYPE thermal_conductivity_model_data_name = EXTENSIBLE ENUMERATION OF
     (power_law_exponent,
      temperature_reference,
      thermal_conductivity_reference,
      Sutherland_constant_conductivity,
      constant_Prandtl);
END_TYPE;

TYPE thermal_conductivity_model_type = EXTENSIBLE ENUMERATION OF
     (unspecified,
      application_defined,
      independent,
      power_law,
      Sutherland_law,
      constant_Prandtl);
END_TYPE;

TYPE turbulence_closure_data_name = EXTENSIBLE ENUMERATION OF
     (eddy_viscosity,
      Prandtl_turbulent);
END_TYPE;

TYPE turbulence_closure_type = EXTENSIBLE ENUMERATION OF
     (unspecified,
      application_defined,
      eddy_viscosity,
      Reynolds_stress,
      Reynolds_stress_algebraic);
END_TYPE;

TYPE turbulence_model_data_name = EXTENSIBLE ENUMERATION OF
     (turbulent_distance,
      turbulent_energy_kinetic,
      turbulent_dissipation,
      turbulent_dissipation_rate,
      turbulent_BB_Reynolds,
      turbulent_SA_nu_tilde,
      turbulent_SA_chi,
      turbulent_SA_cb1,
      turbulent_SA_cb2,
      turbulent_SA_sigma,
      turbulent_SA_kappa,
      turbulent_SA_cw1,
      turbulent_SA_cw2,
      turbulent_SA_cw3,
      turbulent_SA_cv1,
      turbulent_SA_ct1,
      turbulent_SA_ct2,
      turbulent_SA_ct3,
      turbulent_SA_ct4);
END_TYPE;

TYPE turbulence_model_type = EXTENSIBLE ENUMERATION OF
     (unspecified,
      application_defined,
      algebraic_Baldwin_Lomax,
      algebraic_Cebeci_Smith,
      half_equation_Johnson_King,
      one_equation_Baldwin_Barth,
      one_equation_Spalart_Allmaras,
      two_equation_Jones_Launder,
      two_equation_Menter_SST,
      two_equation_Wilcox);
END_TYPE;

TYPE viscosity_model_data_name = EXTENSIBLE ENUMERATION OF
     (viscosity_molecular_reference,
      Sutherland_constant_viscosity);
END_TYPE;

TYPE viscosity_model_type = EXTENSIBLE ENUMERATION OF
     (unspecified,
      application_defined,
      constant_viscosity,
      power_law,
      Sutherland_law);
END_TYPE;

ENTITY Fd_diffusion_equation
  SUBTYPE OF (fd_governing_equation);
  diffusion_model : fd_diffusion_model;
END_ENTITY;

ENTITY Fd_diffusion_model;
  terms : ARRAY [1:diff] OF BOOLEAN;
  diff  : INTEGER;
END_ENTITY;

ENTITY Fd_governing_equation
  SUBTYPE OF (mbna_governing_equation);
  SELF\mbna_governing_equation.equation_type
                  : fd_governing_equation_type;
END_ENTITY;

ENTITY Flow_equation_set
  SUBTYPE OF (mbna_equation_set);
  SELF\mbna_equation_set.equations : fd_governing_equation;
  fd_models                        : SET OF fd_behaviour_models;
END_ENTITY;

ENTITY Gas_model
  SUBTYPE OF (mbna_behaviour_model);
  model_type : gas_model_type;
END_ENTITY;

ENTITY Mbna_behaviour_model
  SUBTYPE OF (Mbna_equation);
INVERSE
  data : SET OF Model_property_distribution FOR Domain;
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_mbna_behaviour_model FOR mbna_behaviour_model;
  ABSTRACT SUPERTYPE;
  ONEOF(thermal_conductivity_model,
        gas_model,
        turbulence_closure,
        turbulence_model,
        viscosity_model);
END_SUBTYPE_CONSTRAINT;

ENTITY Mbna_equation
  SUBTYPE OF (Model_product_domain);
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_mbna_equation FOR mbna_equation;
  ONEOF(Mbna_equation_set,
        Mbna_governing_equation,
        Mbna_behaviour_model);
END_SUBTYPE_CONSTRAINT;

ENTITY Mbna_equation_set
  SUBTYPE OF (mbna_equation);
  dimension   : INTEGER;
  equations   : mbna_governing_equation;
  mbna_models : SET OF mbna_behaviour_models;
END_ENTITY;

ENTITY Mbna_governing_equation
  SUBTYPE OF (mbna_equation);
  equation_type : mbna_governing_equation_type;
END_ENTITY;

ENTITY Thermal_conductivity_model
  SUBTYPE OF (mbna_behaviour_model);
  model_type : thermal_conductivity_model_type;
END_ENTITY;

ENTITY turbulence_closure
  SUBTYPE OF (mbna_behaviour_model);
  closure_type : turbulence_closure_type;
END_ENTITY;

ENTITY Turbulence_model
  SUBTYPE OF (mbna_behaviour_model);
  model_type      : turbulence_model_type;
  diffusion_model : OPTIONAL fd_diffusion_model;
END_ENTITY;

ENTITY Viscosity_model
  SUBTYPE OF (mbna_behaviour_model);
  model_type : viscosity_model_type;
END_ENTITY;

END_SCHEMA; -- end of equations_schema


(*
   ------------------------------------------------------------
../data/modules/cfd_model/arm.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ..\ballots\ballots\analysis\check_analysis_20060505\express\arm_20060505v1.exp *)

SCHEMA Cfd_model_arm;

USE FROM Analysis_arm;

USE FROM Cfd_conditions_arm;

USE FROM Cfd_equations_arm;

USE FROM Cfd_model_arm;

USE FROM Cfd_results_arm;
 
USE FROM Mesh_connectivity_arm;

USE FROM Mesh_topology_arm;


TYPE coordinate_data_name = EXTENSIBLE ENUMERATION OF
     (coordinate_x,
      coordinate_y,
      coordinate_z,
      coordinate_r,
      coordinate_theta,
      coordinate_phi,
      coordinate_normal,
      coordinate_tangential,
      coordinate_xi,
      coordinate_eta,
      coordinate_zeta,
      coordinate_transform);
END_TYPE;

ENTITY grid_coordinates
  SUBTYPE OF (model_property_distribution);
  SELF\model_property_distribution.domain : model_product_domain_with_mesh;
  SELF\model_property_distribution.range  : specified_general_property;
INVERSE
  data : SET OF property_distribution_description FOR physical_function;
WHERE
  wr1 : is_coordinate_property(range);
END_ENTITY;

ENTITY grid_coordinates_with_rind
  SUBTYPE OF (grid_coordinates);
  rind_planes : rind;
END_ENTITY;

ENTITY fd_step
  SUBTYPE OF (mbna_step);
  SELF\mbna_step.equations : SET OF flow_equation_set;  
  SELF\mbna_step.zones     : LIST OF fd_zone;
END_ENTITY;

ENTITY fd_zone
  SUBTYPE OF (mbna_zone);
  SELF\mbna_zone.conditions : SET OF fd_zone_bc;
  SELF\mbna_zone.equations  : SET OF flow_equation_set;
END_ENTITY;

ENTITY mbna_model
  SUBTYPE OF (numerical_model);
  data               : SET OF mbna_integral_data;
  equations          : SET OF mbna_equation_set;  
  steps              : LIST OF mbna_step;
INVERSE
  history : SET OF mbna_history for domain;  
END_ENTITY;

ENTITY mbna_step
  SUBTYPE OF (model_action_domain);
  data               : SET OF mbna_integral_data;
  equations          : SET OF mbna_equation_set;  
  families           : SET OF mbna_family;
  refstate           : SET OF mbna_reference_state;
  zones              : LIST OF mbna_zone;
INVERSE
  history : SET OF mbna_history for domain;  
END_ENTITY;

ENTITY mbna_structured_zone
  SUBTYPE OF (mbna_zone);
  SELF\model_product_domain_with_mesh.model_mesh : structured_mesh;
END_ENTITY;

ENTITY mbna_unstructured_zone
  SUBTYPE OF (mbna_zone);
  SELF\model_product_domain_with_mesh.model_mesh : unstructured_mesh;
END_ENTITY;

ENTITY mbna_zone
  SUBTYPE OF (model_product_domain_with_mesh);
  cell_dimension     : INTEGER;
  conditions         : SET OF mbna_zone_bc;
  equations          : SET OF mbna_equation_set;
  families           : SET OF mbna_family;
  global_data        : SET OF mbna_integral_data;
  grid_connectivity  : OPTIONAL multiple_mesh_block;
  nindices           : INTEGER;
  physical_dimension : INTEGER;
  rstate             : SET OF mbna_reference_state;
INVERSE
  coordinates : SET OF grid_coordinates FOR domain;
  field_data  : SET OF mbna_discrete_data FOR domain;
  history     : SET OF mbna_history FOR domain;
  solution    : SET OF mbna_solution FOR domain;
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_mbna_zone FOR mbna_zone;
  ABSTRACT SUPERTYPE;
  ONEOF(mbna_structured_zone,
        mbna_unstructured_zone);
END_SUBTYPE_CONSTRAINT;

FUNCTION is_coordinate_property(arg : specified_general_property) : BOOLEAN;
  IF ('EXTERNAL_REFERENCE_SCHEMA.EXTERNALLY_DEFINED_ITEM' IN
      TYPEOF(arg) ) THEN
    RETURN(TRUE);
  END_IF;
  RETURN ('DOMAIN_SCHEMA.COORDINATE_DATA_NAME' IN TYPEOF(arg));
END_FUNCTION;

END_SCHEMA;  -- end of hierarchy_schema


(*
   ------------------------------------------------------------
../data/modules/cfd_results/arm.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ..\ballots\ballots\analysis\check_analysis_20060505\express\arm_20060505v1.exp *)

SCHEMA Cfd_results_arm;

USE FROM Analysis_arm;

USE FROM Mesh_connectivity_arm;

USE FROM Mesh_topology_arm;

TYPE flow_solution_data_name = EXTENSIBLE ENUMERATION OF
     (potential,
      stream_function,
      density,
      pressure,
      temperature,
      energy_internal,
      enthalpy,
      entropy,
      entropy_approx,
      density_stagnation,
      pressure_stagnation,
      temperature_stagnation,
      energy_stagnation,
      enthalpy_stagnation,
      energy_stagnation_density,
      velocity_x,
      velocity_y,
      velocity_z,
      velocity_r,
      velocity_theta,
      velocity_phi,
      velocity_magnitude,
      velocity_normal,
      velocity_tangential,
      velocity_sound,
      velocity_sound_stagnation,
      momentum_x,
      momentum_y,
      momentum_z,
      momentum_magnitude,
      energy_kinetic,
      pressure_dynamic,
      vorticity_x,
      vorticity_y,
      vorticity_z,
      vorticity_magnitude,
      skin_friction_x,
      skin_friction_y,
      skin_friction_z,
      skin_friction_magnitude,
      velocity_angle_x,
      velocity_angle_y,
      velocity_angle_z,
      velocity_unit_vector_x,
      velocity_unit_vector_y,
      velocity_unit_vector_z,
      mass_flow,
      viscosity_kinematic,
      viscosity_molecular,
      viscosity_eddy,
      thermal_conductivity,
      ideal_gas_constant,
      specific_heat_pressure,
      specific_heat_volume,
      Reynolds_stress_xx,
      Reynolds_stress_xy,
      Reynolds_stress_xz,
      Reynolds_stress_yy,
      Reynolds_stress_yz,
      Reynolds_stress_zz);
END_TYPE;

ENTITY mbna_discrete_data
  SUBTYPE OF (mbna_result);
  gridloc : mesh_location;
INVERSE
  data : SET OF property_distribution_description FOR physical_function;
END_ENTITY;

ENTITY mbna_discrete_data_with_rind
  SUBTYPE OF (mbna_discrete_data);
  rind_planes : rind;
END_ENTITY;

ENTITY mbna_history
  SUBTYPE OF (mbna_result);
  notes : LIST OF string;
INVERSE
  data : SET OF property_distribution_description FOR physical_function;
END_ENTITY;

ENTITY mbna_result
  SUBTYPE OF (model_property_distribution);  
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_mbna_result FOR mbna_result;
  ONEOF(mbna_solution,
        mbna_history,
        mbna_discrete_data);
END_SUBTYPE_CONSTRAINT;

ENTITY mbna_solution
  SUBTYPE OF (mbna_result);
  gridloc  : mesh_location;
INVERSE
  solution : SET OF property_distribution_description FOR physical_function;
END_ENTITY;

ENTITY mbna_solution_with_rind
  SUBTYPE OF (mbna_solution);
  rind_planes : rind;
END_ENTITY;
END_SCHEMA;


(*
   ------------------------------------------------------------
../data/modules/mesh_connectivity/arm.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ..\ballots\ballots\analysis\check_analysis_20060505\express\arm_20060505v1.exp *)

SCHEMA Mesh_connectivity_arm;

USE FROM mesh_topology_arm;

TYPE mismatched_region_type = EXTENSIBLE ENUMERATION OF
    (abutting,
     overset);
END_TYPE;

ENTITY Listed_real_data;
END_ENTITY;

ENTITY Matched_mesh_connection
  SUBTYPE OF (mesh_connectivity);
  SELF\mesh_connectivity.current : structured_mesh;
  range       : indices_range;
  donor       : structured_mesh;
  donor_range : indices_range;
  transform   : ARRAY [1:index_count] OF INTEGER;
WHERE
  wr1 : current :<>: donor;
  wr2 : donor.index_count = index_count;
  wr3 : range.nindices = index_count;
  wr4 : donor_range.nindices = index_count;
END_ENTITY;

ENTITY Mesh_connectivity;
  name        : STRING;
  description : STRING;
  id          : STRING;
  current     : mesh;
DERIVE
  index_count : INTEGER := current.index_count;
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_mesh_connectivity FOR Mesh_connectivity;
  ABSTRACT SUPERTYPE;
  ONEOF(Matched_mesh_connection,
        Mismatched_mesh_connection);
END_SUBTYPE_CONSTRAINT;

ENTITY Mesh_overset_hole
  SUBTYPE OF (Mismatched_mesh_connection);
END_ENTITY;

ENTITY Mismatched_donor_mesh;
INVERSE
  connect : mismatched_mesh_region FOR donor;
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_mismatched_donor_mesh FOR
                   Mismatched_donor_mesh;
  ABSTRACT SUPERTYPE;
  ONEOF(Structured_donor_mesh,
        Unstructured_donor_mesh);
END_SUBTYPE_CONSTRAINT;

ENTITY Mismatched_mesh_connection
  SUBTYPE OF (Mesh_connectivity);
  points   : indices_group;
  gridloc  : Mesh_location;
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_mismatched_mesh_connection FOR 
                   Mismatched_mesh_connection;
  ABSTRACT SUPERTYPE;
  ONEOF(Mismatched_mesh_region,
        Mesh_overset_hole);
END_SUBTYPE_CONSTRAINT;

ENTITY Mismatched_mesh_region
  SUBTYPE OF (Mismatched_mesh_connection);
  donor : mismatched_donor_mesh;
  kind  : mismatched_region_type;
WHERE
  wr1 : donor :<>: SELF\Mesh_connectivity.current;
END_ENTITY;

ENTITY Multiple_mesh_block;
  name           : STRING; 
  description    : STRING;
  id             : STRING;
  connectivities : LIST OF Mesh_connectivity;
END_ENTITY;

ENTITY Structured_donor_mesh
  SUBTYPE OF (Mismatched_donor_mesh);
  donor  : Structured_mesh;
  points : listed_real_data;
  vsize  : INTEGER;
DERIVE
  index_count : INTEGER := donor.index_count;
END_ENTITY;

ENTITY Unstructured_donor_mesh
  SUBTYPE OF (mismatched_donor_mesh);
  donor       : unstructured_mesh;
  cells       : indices_group;
  interpolant : property_distribution_description;
  vsize       : INTEGER;
DERIVE
  index_count : INTEGER := donor.index_count;
  cell_dim    : INTEGER := donor.cell_dim;
END_ENTITY;

END_SCHEMA;


(*
   ------------------------------------------------------------
../data/modules/mesh_topology/arm.exp
   ------------------------------------------------------------
*)

(* Genenerated from: ..\ballots\ballots\analysis\check_analysis_20060505\express\arm_20060505v1.exp *)

SCHEMA Mesh_topology_arm;

USE FROM Elemental_topology_arm;

USE FROM Finite_elements_arm;

USE FROM Maths_space_arm;

TYPE cell_shape = EXTENSIBLE SELECT 
    (cell_shape_0D,
     cell_shape_1D,
     cell_shape_2D,
     cell_shape_3D);
END_TYPE;

TYPE cell_shape_0D = EXTENSIBLE ENUMERATION OF
    (single);
END_TYPE;

TYPE cell_shape_1D = EXTENSIBLE ENUMERATION OF
    (line);
END_TYPE;

TYPE cell_shape_2D = EXTENSIBLE ENUMERATION OF
    (quadrilateral,
     triangle,
     polygon);
END_TYPE;

TYPE cell_shape_3D = EXTENSIBLE ENUMERATION OF
    (hexahedron,
     wedge,
     tetrahedron,
     pyramid);
END_TYPE;

TYPE element_order = ENUMERATION OF
    (linear,
     quadratic,
     cubic);
END_TYPE;

TYPE indices_group = SELECT
     (indices_list,
      indices_range);
END_TYPE;

TYPE mesh_location = EXTENSIBLE ENUMERATION OF
     (unspecified,
      application_defined,
      vertices,
      cell_center,
      face_center,
      iface_center,
      jface_center,
      kface_center,
      edge_center);
END_TYPE;

TYPE mesh_maths_space_type = EXTENSIBLE ENUMERATION OF
     (cells,
      vertices);
END_TYPE;

TYPE structured_mesh_type = EXTENSIBLE ENUMERATION OF
    (rectangular,
     pentahedral,
     pyramidal,
     tetrahedral);
END_TYPE;

ENTITY array_based_unstructured_mesh
  SUBTYPE OF (unstructured_mesh);
  cells        : ARRAY [1:cell_count] OF vertex_defined_cell;
WHERE
  wr1 : SELF\mesh.index_count = 1;
END_ENTITY;

ENTITY array_based_unstructured_mesh_and_vertices
  SUBTYPE OF (array_based_unstructured_mesh);
  vertex_count : INTEGER;
  vertices     : ARRAY [1:vertex_count] OF UNIQUE vertex;
WHERE
  wr1 : all_mesh_vertices(SELF);
END_ENTITY;

ENTITY cell_of_structured_mesh
  SUBTYPE OF (topological_region);
  the_mesh : structured_mesh;
  cell_identifier : ARRAY [1:index_count] OF INTEGER;
DERIVE
  index_count : INTEGER := the_mesh\mesh.index_count;
END_ENTITY;

ENTITY composition_of_structured_mesh;
  part         : structured_mesh;
  whole        : structured_mesh;
  lower_vertex : ARRAY [1:whole_indices] OF INTEGER;
  lower_face   : ARRAY [1:whole_indices] OF OPTIONAL BOOLEAN;
  used_indices : ARRAY [1:part_indices] OF INTEGER;
  used_senses  : ARRAY [1:part_indices] OF BOOLEAN;
DERIVE
  whole_indices : INTEGER := whole\mesh.index_count;
  part_indices  : INTEGER := part\mesh.index_count;
END_ENTITY;

ENTITY explicit_unstructured_mesh
  SUBTYPE OF (unstructured_mesh);
  explicit_model : fea_model;
  cells          : ARRAY [1:cell_count] OF UNIQUE element;
END_ENTITY;

ENTITY explicitly_defined_cell_patch
  SUBTYPE OF (patch);
  cells : LIST [1:?] OF vertex_defined_cell;
END_ENTITY;

ENTITY explicitly_defined_vertex_patch
  SUBTYPE OF (patch);
  vertices : LIST [1:?] OF vertex;
END_ENTITY;

ENTITY indices_list;
  nindices : INTEGER;
  indices  : LIST [1:?] OF ARRAY [1:nindices] OF INTEGER;
END_ENTITY;

ENTITY indices_range;
  nindices : INTEGER;
  start    : ARRAY [1:nindices] OF INTEGER;
  finish   : ARRAY [1:nindices] OF INTEGER;
END_ENTITY;

ENTITY mesh
  SUBTYPE OF (topological_representation_item);
  description : STRING;
  index_count : INTEGER;
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_mesh FOR mesh;
  ABSTRACT SUPERTYPE;
  ONEOF(patch,
        structured_mesh,
        unstructured_mesh);
END_SUBTYPE_CONSTRAINT;

ENTITY mesh_derived_maths_space
  SUBTYPE OF (Maths_space);
  description : STRING;
  name        : STRING;
  id          : STRING;
  the_mesh    : mesh;
  kind        : mesh_maths_space_type;
END_ENTITY;

ENTITY patch
  SUBTYPE OF (mesh);
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_patch FOR patch;
  ABSTRACT SUPERTYPE;
END_SUBTYPE_CONSTRAINT;

ENTITY product_of_mesh;
  operands : LIST [2:2] OF mesh;
  product  : mesh;
WHERE
  wr1 : (this_schema+'.STRUCTURED_MESH' IN TYPEOF(operands[1])) AND
        (this_schema+'.STRUCTURED_MESH' IN TYPEOF(operands[2])) AND
        (this_schema+'.STRUCTURED_MESH' IN TYPEOF(product));
  wr2 : operands[1].index_count = 1;
  wr3 : operands[1].index_count + operands[2].index_count
        = product.index_count;
END_ENTITY;

ENTITY property_distribution_description;
  id : STRING;
  name : STRING;
  description : OPTIONAL STRING;
 END_ENTITY;

ENTITY rind;
  index_count : INTEGER;
  planes      : ARRAY [1:2*index_count] OF INTEGER;
END_ENTITY;

ENTITY structured_mesh
  SUBTYPE OF (mesh);
  vertex_counts : ARRAY [1:SELF\mesh.index_count] OF INTEGER;
  cell_counts   : ARRAY [1:SELF\mesh.index_count] OF INTEGER;
  kind          : structured_mesh_type;
END_ENTITY;

ENTITY structured_mesh_with_rind
  SUBTYPE OF (structured_mesh);
  rind_planes : rind;
END_ENTITY;

ENTITY topological_region
  SUBTYPE OF (topological_representation_item);
  description : STRING;
  dimension   : INTEGER;
END_ENTITY;

ENTITY Topological_representation_item
   SUBTYPE OF (Detailed_topological_model_element);
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_topological_region FOR topological_region;
  ONEOF(cell_of_structured_mesh,
        vertex_defined_cell);
END_SUBTYPE_CONSTRAINT;

ENTITY topological_region_with_boundary
  SUBTYPE OF (topological_region);
  boundary : SET [1:?] OF topological_representation_item;
END_ENTITY;

ENTITY unstructured_mesh
  SUBTYPE OF (mesh);
  cell_count   : INTEGER;
END_ENTITY;

SUBTYPE_CONSTRAINT sc1_unstructured_mesh FOR unstructured_mesh;
  ABSTRACT SUPERTYPE;
  ONEOF(array_based_unstructured_mesh,
        explicit_unstructured_mesh);
END_SUBTYPE_CONSTRAINT;

ENTITY Vertex
   SUBTYPE OF (Detailed_topological_model_element);
END_ENTITY;

ENTITY vertex_defined_cell 
  SUBTYPE OF (topological_region); 
  shape       : cell_shape;
  order       : element_order;
  vertices    : ARRAY [1:vn_count] OF OPTIONAL vertex;
DERIVE
  bound_count       : INTEGER := cell_counts(SELF)[1];
  edge_node_count   : INTEGER := cell_counts(SELF)[2];
  opt_node_count    : INTEGER := cell_counts(SELF)[3];
  required_count    : INTEGER := bound_count + edge_node_count;
  vn_count          : INTEGER := required_count + opt_node_count;
  required_vertices : ARRAY [1:required_count] OF vertex
                              := vertices[1:required_count];
END_ENTITY;

ENTITY vertex_range_defined_patch
  SUBTYPE OF (patch);
  base_mesh : structured_mesh;
  range     : indices_range;
END_ENTITY;

FUNCTION all_mesh_vertices(arg : array_based_unstructured_mesh_and_vertices)
         : BOOLEAN;
LOCAL
  vertex_set : SET OF vertex := [];
  cell : vertex_defined_cell;
END_LOCAL;
  REPEAT i := 1 TO arg.cell_count;
    cell := arg.cells[i];
    REPEAT j := 1 TO cell.vn_count;
      vertex_set := vertex_set + cell.vertices[j];
    END_REPEAT;
  END_REPEAT;
  IF (SIZEOF(vertex_set) <> arg.index_count) THEN
    RETURN(FALSE);
  END_IF;
  REPEAT i := 1 TO arg.index_count;
    IF (NOT (arg.vertices[i] IN vertex_set) ) THEN
      RETURN(FALSE);
    END_IF;
  END_REPEAT;
  RETURN(TRUE);
END_FUNCTION;

FUNCTION cell_counts(arg : vertex_defined_cell) : ARRAY[1:3] OF INTEGER;
LOCAL
  om1    : INTEGER := 0;      -- (order - 1)
  om1sq  : INTEGER := om1**2; -- (order - 1) squared
  vts    : INTEGER;           -- number of bounding vertices
  eds    : INTEGER;           -- number of edges
  qf     : INTEGER := 0;      -- number of quadrilateral faces
  tf     : INTEGER := 0;      -- number of triangular faces
  result : ARRAY [1:3] OF INTEGER := [0,0,0];
END_LOCAL;
  CASE arg.order OF
    linear    : om1 := 0;
    quadratic : om1 := 1;
    cubic     : om1 := 2;
    OTHERWISE : RETURN(result);
  END_CASE;
  om1sq := om1**2;
  CASE arg.shape OF
    single : 
        BEGIN
          vts := 1; eds := 0; qf := 0; tf := 0;
          result[1] := vts;
          result[2] := om1*eds;                   -- 0, 0, 0
          result[3] := 0;                         -- 0, 0, 0
        END;
    line :
        BEGIN
          vts := 2; eds := 1; qf := 0; tf := 0;
          result[1] := vts;
          result[2] := om1*eds;                   -- 0, 1, 2
          result[3] := 0;                         -- 0, 0, 0
        END;
    quadrilateral : 
        BEGIN
          vts := 4; eds := 4; qf := 1; tf := 0;
          result[1] := vts;
          result[2] := om1*eds;                   -- 0, 4, 8
          result[3] := om1sq*qf;                  -- 0, 1, 4
        END;
    triangle : 
        BEGIN
          vts := 3; eds := 3; qf := 0; tf := 1;
          result[1] := vts;
          result[2] := om1*eds;                   -- 0, 3, 6
          result[3] := (om1-1)*tf;                --    0, 1
          CASE arg.order OF
            linear : result[3] := 0;              -- 0
          END_CASE;
        END;
    polygon :
        BEGIN
          vts := arg.vn_count; eds := arg.vn_count; 
          result[1] := vts;
          result[2] := 0;
          result[3] := 0;
        END;
    hexahedron :
        BEGIN
          vts := 8; eds := 12; qf := 6; tf := 0;
          result[1] := vts;
          result[2] := om1*eds;                   -- 0, 12, 24
          result[3] := om1sq*(qf+om1);            -- 0, 7, 32
        END;
    wedge :
        BEGIN
          vts := 6; eds := 9; qf := 3; tf := 2;
          result[1] := vts;
          result[2] := om1*eds;                   -- 0, 9,  18
          result[3] := om1sq*qf + om1*tf;         -- 0, 3, 16
        END;
    tetrahedron : 
        BEGIN
          vts := 4; eds := 6; qf := 0; tf := 4;
          result[1] := vts;
          result[2] := om1*eds;                   -- 0, 6, 12
          result[3] := (om1-1)*tf;                --    0, 4
          CASE arg.order OF
            linear : result[3] := 0;              -- 0
          END_CASE;
        END;
    pyramid : 
        BEGIN
          vts := 5; eds := 8; qf := 1; tf := 4;
          result[1] := vts;
          result[2] := om1*eds;                   -- 0, 8, 16
          result[3] := om1sq*qf + (om1-1)*tf;     --    1, 9
          CASE arg.order OF
            linear : result[3] := 0;              -- 0
          END_CASE;
        END;
  END_CASE;
RETURN(result);
END_FUNCTION;

FUNCTION this_schema : STRING;
  RETURN('MESH_TOPOLOGY_SCHEMA');
END_FUNCTION;

END_SCHEMA;  -- end of mesh_topology_schema
