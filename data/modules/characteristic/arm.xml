<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express language_version="2" rcs.date="$Date$" rcs.revision="$Revision$" description.file="arm_descriptions.xml">
   <application name="JSDAI" owner="LKSoft" url="www.lksoft.com" version="4.0 beta" source="characteristic_arm schema_instance"/>
   <schema name="Characteristic_arm">
      <interface kind="use" schema="Basic_data_representation_arm"/>
      <interface kind="use" schema="Document_assignment_arm"/>
      <interface kind="use" schema="Extended_measure_representation_arm"/>
      <interface kind="use" schema="External_library_arm"/>
      <interface kind="use" schema="Value_with_unit_extension_arm"/>
      <interface kind="reference" schema="Characterizable_object_arm">
         <interfaced.item name="bag_to_set"/>
      </interface>
      <interface kind="reference" schema="Qualified_measure_arm">
         <interfaced.item name="pre_defined_type_qualifiers"/>
      </interface>
      <type name="c_documented_element_select">
         <select extensible="YES" basedon="documented_element_select" selectitems="Property_value_representation" genericentity="NO"/>
      </type>
      <type name="characteristic">
         <select selectitems="String_representation_item Numerical_item_with_unit Value_list Value_set" genericentity="NO" extensible="NO"/>
      </type>
      <type name="range_class">
         <enumeration items="closed lower_open upper_open open" extensible="NO"/>
      </type>
      <type name="scalar_or_coordinated_characteristics">
         <select selectitems="Property_value_representation characteristic" genericentity="NO" extensible="NO"/>
      </type>
      <entity name="Characteristic_data_table" supertypes="Representation_item" abstract.supertype="NO" abstract.entity="NO">
         <explicit name="property_value" optional="NO">
            <aggregate type="LIST" lower="1" upper="?" unique="NO" optional="NO"/>
            <typename name="Characteristic_data_table_row"/>
         </explicit>
         <where label="WR1" expression="SIZEOF(QUERY( pv &lt;* property_value |&#10;                  NOT (SIZEOF(pv.cell) = SIZEOF(property_value[1].cell))&#10;                  )) = 0"/>
      </entity>
      <entity name="Characteristic_data_table_header" supertypes="Independent_property" abstract.supertype="NO" abstract.entity="NO">
         <derived name="column" expression="get_characterized_column_headers(SELF)">
            <aggregate type="LIST" lower="1" upper="?" unique="NO" optional="NO"/>
            <typename name="Independent_property"/>
         </derived>
         <where label="WR1" expression="EXISTS(column) AND (SIZEOF(column) &gt; 1)"/>
      </entity>
      <entity name="Characteristic_data_table_header_link" supertypes="Independent_property Independent_property_relationship" abstract.supertype="NO" abstract.entity="NO">
         <explicit name="precedent" optional="NO">
            <typename name="Independent_property"/>
            <redeclaration entity-ref="Independent_property_relationship" old_name="relating"/>
         </explicit>
         <explicit name="subsequent" optional="NO">
            <typename name="Independent_property"/>
            <redeclaration entity-ref="Independent_property_relationship" old_name="related"/>
         </explicit>
         <derived name="relation_type" expression="'sequence'">
            <builtintype type="STRING" fixed="NO"/>
            <redeclaration entity-ref="Independent_property_relationship"/>
         </derived>
         <derived name="table" expression="get_table(SELF)">
            <typename name="Characteristic_data_table_header"/>
         </derived>
         <unique label="UR1">
            <unique.attribute attribute="precedent"/>
            <unique.attribute attribute="table"/>
         </unique>
         <unique label="UR2">
            <unique.attribute attribute="subsequent"/>
            <unique.attribute attribute="table"/>
         </unique>
         <where label="WR1" expression="EXISTS(table)"/>
      </entity>
      <entity name="Characteristic_data_table_representation" supertypes="Property_value_representation" abstract.supertype="NO" abstract.entity="NO">
         <explicit name="items" optional="NO">
            <aggregate type="SET" lower="1" upper="1" unique="NO" optional="NO"/>
            <typename name="Characteristic_data_table"/>
            <redeclaration entity-ref="Representation"/>
         </explicit>
      </entity>
      <entity name="Characteristic_data_table_row" supertypes="Representation_item" abstract.supertype="NO" abstract.entity="NO">
         <explicit name="cell" optional="NO">
            <aggregate type="LIST" lower="1" upper="?" unique="NO" optional="NO"/>
            <typename name="characteristic"/>
         </explicit>
      </entity>
      <entity name="Externally_defined_type_qualifier" supertypes="Type_qualifier" abstract.supertype="NO" abstract.entity="NO">
         <explicit name="external_source" optional="NO">
            <typename name="External_source"/>
         </explicit>
         <where label="WR1" expression="NOT(name IN pre_defined_type_qualifiers)"/>
      </entity>
      <entity name="Length_tolerance_characteristic" supertypes="Tolerance_characteristic" abstract.supertype="NO" abstract.entity="NO">
         <where label="WR1" expression="('CHARACTERISTIC_ARM.STATISTICAL_TOLERANCE_CHARACTERISTIC' IN TYPEOF(SELF)) OR&#10;            ('CHARACTERISTIC_ARM.SYMMETRICAL_TOLERANCE_CHARACTERISTIC' IN TYPEOF(SELF)) OR&#10;            ('CHARACTERISTIC_ARM.PLUS_MINUS_TOLERANCE_CHARACTERISTIC' IN TYPEOF(SELF)) OR&#10;        (SIZEOF(QUERY(it &lt;* SELF\Representation.items |&#10;          NOT('VALUE_WITH_UNIT_EXTENSION_ARM.LENGTH_DATA_ELEMENT' IN TYPEOF(it))&#10;         )) = 0)"/>
         <where label="WR2" expression="NOT('CHARACTERISTIC_ARM.SYMMETRICAL_TOLERANCE_CHARACTERISTIC' IN TYPEOF(SELF)) OR&#10;        (SIZEOF(QUERY(it &lt;* SELF\Representation.items |&#10;        ('VALUE_WITH_UNIT_EXTENSION_ARM.LENGTH_DATA_ELEMENT' IN TYPEOF(it))&#10;           )) = 1)"/>
         <where label="WR3" expression="NOT('CHARACTERISTIC_ARM.STATISTICAL_TOLERANCE_CHARACTERISTIC' IN TYPEOF(SELF)) OR&#10;        (SIZEOF(QUERY(it &lt;* SELF\Representation.items |&#10;        ('VALUE_WITH_UNIT_EXTENSION_ARM.LENGTH_DATA_ELEMENT' IN TYPEOF(it))&#10;           )) = 1)"/>
         <where label="WR4" expression="NOT EXISTS(SELF\Representation.description)"/>
         <where label="WR5" expression="NOT('CHARACTERISTIC_ARM.PLUS_MINUS_TOLERANCE_CHARACTERISTIC' IN TYPEOF(SELF)) OR&#10;        (SIZEOF(QUERY(it &lt;* SELF\Representation.items |&#10;          NOT(('EXTENDED_MEASURE_REPRESENTATION_ARM.VALUE_WITH_TOLERANCES' IN TYPEOF(it)) AND&#10;             ('VALUE_WITH_UNIT_EXTENSION_ARM.LENGTH_DATA_ELEMENT' IN TYPEOF(it\Value_with_tolerances.item_value)))&#10;         )) = 0)"/>
      </entity>
      <entity name="Maximum_tolerance_characteristic" supertypes="Tolerance_characteristic" abstract.supertype="NO" abstract.entity="NO">
         <explicit name="items" optional="NO">
            <aggregate type="SET" lower="1" upper="1" unique="NO" optional="NO"/>
            <typename name="Value_limit"/>
            <redeclaration entity-ref="Representation"/>
         </explicit>
         <where label="WR1" expression="SELF\Representation.items[1]\Value_limit.qualifiers[1]\Type_qualifier.name = 'maximum'"/>
      </entity>
      <entity name="Minimum_tolerance_characteristic" supertypes="Tolerance_characteristic" abstract.supertype="NO" abstract.entity="NO">
         <explicit name="items" optional="NO">
            <aggregate type="SET" lower="1" upper="1" unique="NO" optional="NO"/>
            <typename name="Value_limit"/>
            <redeclaration entity-ref="Representation"/>
         </explicit>
         <where label="WR1" expression="SELF\Representation.items[1]\Value_limit.qualifiers[1]\Type_qualifier.name = 'minimum'"/>
      </entity>
      <entity name="Nominal_tolerance_characteristic" supertypes="Tolerance_characteristic" abstract.supertype="NO" abstract.entity="NO">
         <explicit name="items" optional="NO">
            <aggregate type="SET" lower="1" upper="1" unique="NO" optional="NO"/>
            <typename name="Qualified_numerical_item_with_unit"/>
            <redeclaration entity-ref="Representation"/>
         </explicit>
         <where label="WR1" expression="SELF\Representation.items[1]\Qualified_representation_item.qualifiers[1]\Type_qualifier.name = 'nominal'"/>
      </entity>
      <entity name="Plus_minus_tolerance_characteristic" supertypes="Tolerance_characteristic" abstract.supertype="NO" abstract.entity="NO">
         <explicit name="items" optional="NO">
            <aggregate type="SET" lower="1" upper="1" unique="NO" optional="NO"/>
            <typename name="Value_with_tolerances"/>
            <redeclaration entity-ref="Representation"/>
         </explicit>
      </entity>
      <entity name="Range_characteristic" supertypes="Property_value_representation" abstract.supertype="NO" abstract.entity="NO">
         <explicit name="items" optional="NO">
            <aggregate type="SET" lower="2" upper="2" unique="NO" optional="NO"/>
            <typename name="Numerical_item_with_unit"/>
            <redeclaration entity-ref="Representation"/>
         </explicit>
         <explicit name="range_type" optional="NO">
            <typename name="range_class"/>
         </explicit>
         <where label="WR1" expression="TYPEOF(SELF\Representation.items[1]) =&#10;          TYPEOF(SELF\Representation.items[2])"/>
         <where label="WR2" expression="TYPEOF(SELF\Representation.items[1]\Value_with_unit.unit) =&#10;          TYPEOF(SELF\Representation.items[2]\Value_with_unit.unit)"/>
         <where label="WR3" expression="valid_range(SELF\Representation.items[1],&#10;                      SELF\Representation.items[2])"/>
      </entity>
      <entity name="Statistical_tolerance_characteristic" supertypes="Tolerance_characteristic" abstract.supertype="NO" abstract.entity="NO">
         <explicit name="items" optional="NO">
            <aggregate type="SET" lower="2" upper="?" unique="NO" optional="NO"/>
            <typename name="Numerical_item_with_unit"/>
            <redeclaration entity-ref="Representation"/>
         </explicit>
      <where label="IP1"/>
         <where label="IP2"/>
      </entity>
      <entity name="Symmetrical_tolerance_characteristic" supertypes="Tolerance_characteristic" abstract.supertype="NO" abstract.entity="NO">
         <explicit name="items" optional="NO">
            <aggregate type="SET" lower="2" upper="2" unique="NO" optional="NO"/>
            <typename name="Numerical_item_with_unit"/>
            <redeclaration entity-ref="Representation"/>
         </explicit>
         <where label="WR1" expression="SIZEOF(QUERY( ri &lt;* &#10;         SELF\representation.items |&#10;        'VALUE_WITH_UNIT_EXTENSION_ARM.RATIO_DATA_ELEMENT' IN TYPEOF(ri))) = 1"/>
      </entity>
      <entity name="Text_representation_item" supertypes="String_representation_item" abstract.supertype="NO" abstract.entity="NO"/>
      <entity name="Tolerance_characteristic" abstract.supertype="YES" supertypes="Property_value_representation" super.expression="ONEOF (Minimum_tolerance_characteristic, Statistical_tolerance_characteristic, Symmetrical_tolerance_characteristic, Maximum_tolerance_characteristic, Plus_minus_tolerance_characteristic, Nominal_tolerance_characteristic) ANDOR Length_tolerance_characteristic" abstract.entity="NO">
         <where label="WR1" expression="SELF\Representation.context_of_items\Representation_context.id = 'tolerance values'"/>
         <where label="WR2" expression="NOT EXISTS(SELF\Representation.name)"/>
      </entity>
      <subtype.constraint name="exclusive_property_value_representation_characteristic" entity="Property_value_representation" super.expression="ONEOF (Range_characteristic, Tolerance_characteristic)" abstract.supertype="NO"/>
      <subtype.constraint name="type_qualifier_subtypes" entity="Type_qualifier" super.expression="ONEOF (Externally_defined_type_qualifier, Pre_defined_type_qualifier)" abstract.supertype="NO"/>
      <subtype.constraint name="c_representation_item_subtypes" entity="Representation_item" super.expression="ONEOF (Characteristic_data_table, Characteristic_data_table_row)" abstract.supertype="NO"/>
      <function name="get_characterized_column_headers">
         <parameter name="input">
            <typename name="Characteristic_data_table_header"/>
         </parameter>
         <aggregate type="LIST" lower="1" upper="?" unique="NO" optional="NO"/>
         <typename name="Independent_property"/>
         <algorithm>LOCAL
      middle : SET [1:?] OF Independent_property;
      result : LIST [1:?] OF Independent_property;
      links  : SET [1:?] OF Characteristic_data_table_header_link;
      temp   : Independent_property;
      precedent : SET [0:?] OF Characteristic_data_table_header_link;
      subsequent : SET [0:?] OF Characteristic_data_table_header_link;
    END_LOCAL;
    -- Collect all headers
    links := bag_to_set(USEDIN(input, 'CHARACTERISTIC_ARM.' + 'CHARACTERISTIC_DATA_TABLE_HEADER_LINK.TABLE'));
    -- Collect all Independent_properties
    REPEAT i := 1 to HIINDEX(links);
      middle := middle + links[i]\Characteristic_data_table_header_link.precedent;
      middle := middle + links[i]\Characteristic_data_table_header_link.subsequent;
    END_REPEAT;
    result[1] := ?;
    -- Now need to construct the resulting list
    REPEAT i := 1 to HIINDEX(middle);
      precedent := bag_to_set(QUERY (l &lt;* (USEDIN(middle[i], 'CHARACTERISTIC_ARM.' + 
        'CHARACTERISTIC_DATA_TABLE_HEADER_LINK.PRECEDENT')) | l.table = input));
      -- illegal chain
      IF (SIZEOF(precedent) &gt; 1) THEN
        RETURN(?);
      END_IF;
      -- check if this is not last member
      IF (SIZEOF(precedent) = 1) THEN
        subsequent := bag_to_set(QUERY (l &lt;* (USEDIN(middle[i], 'CHARACTERISTIC_ARM.' + 
          'CHARACTERISTIC_DATA_TABLE_HEADER_LINK.SUBSEQUENT')) | l.table = input));
        -- we found first member
        IF (SIZEOF(subsequent) = 0) THEN
          result[1] := middle[i];
          ESCAPE;
        END_IF;
      END_IF;
    END_REPEAT;
    -- if there is no first member found yet - chain is broken
    IF (result[1] = ?) THEN
      RETURN (?);
    END_IF;
    temp := result[1];
    REPEAT i := 2 to HIINDEX(middle);
      result[i] := precedent[1]\Characteristic_data_table_header_link.subsequent;
      precedent := bag_to_set(QUERY (l &lt;* (USEDIN(result[i], 'CHARACTERISTIC_ARM.' + 
        'CHARACTERISTIC_DATA_TABLE_HEADER_LINK.PRECEDENT')) | l.table = input));
      IF (HIINDEX(middle) = i) THEN
        ESCAPE;
      END_IF;
      -- illegal chain
      IF (SIZEOF(precedent) &lt;&gt; 1) THEN
        RETURN(?);
      END_IF;
    END_REPEAT; 
    RETURN (result);</algorithm>
      </function>
      <function name="get_table">
         <parameter name="input">
            <typename name="Characteristic_data_table_header_link"/>
         </parameter>
         <typename name="Characteristic_data_table_header"/>
         <algorithm>LOCAL
      middle : BAG [0:?] OF Independent_property_relationship;
    END_LOCAL;
      middle := QUERY (ipr &lt;* (USEDIN(input, 'INDEPENDENT_PROPERTY_ARM.' + 
        'INDEPENDENT_PROPERTY_RELATIONSHIP.RELATED')) | ipr.relation_type = 'decomposition');      
      REPEAT i := 1 to HIINDEX(middle);       
        IF('CHARACTERISTIC_ARM.CHARACTERISTIC_DATA_TABLE_HEADER' IN TYPEOF(middle[i].relating))THEN
          RETURN (middle[i].relating);
        END_IF;
      END_REPEAT;
      RETURN (?);</algorithm>
      </function>
      <function name="get_value">
         <parameter name="input1">
            <builtintype type="STRING" fixed="NO"/>
         </parameter>
         <parameter name="np">
            <aggregate type="SET" lower="0" upper="?" unique="NO" optional="NO"/>
            <typename name="Representation_item"/>
         </parameter>
         <typename name="Numerical_item_with_unit"/>
         <algorithm>REPEAT i := 1 to SIZEOF(np) by 1;
      IF input1 = np[i]\Representation_item.name THEN
        RETURN(np[i]);
      END_IF;
    END_REPEAT;
    RETURN(?);</algorithm>
      </function>
      <function name="valid_range">
         <parameter name="input1">
            <typename name="Numerical_item_with_unit"/>
         </parameter>
         <parameter name="input2">
            <typename name="Numerical_item_with_unit"/>
         </parameter>
         <builtintype type="BOOLEAN" fixed="NO"/>
         <algorithm>RETURN(TRUE);</algorithm>
      </function>
   </schema>
</express>
