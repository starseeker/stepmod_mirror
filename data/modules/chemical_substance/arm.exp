(*
   $Id: arm.exp,v 1.25 2005/05/04 10:01:31 liutkus Exp $
   ISO TC184/SC4/WG12 N3372 - ISO/CD-TS 10303-1655 Chemical substance - EXPRESS ARM
*)

SCHEMA Chemical_substance_arm;   

	USE FROM Assembly_structure_arm;	-- ISO/TS 10303-1026
	USE FROM Part_view_definition_arm;	-- ISO/TS 10303-1023
	USE FROM Person_organization_assignment_arm;	-- ISO/TS 10303-1013
 
REFERENCE FROM Product_identification_arm    --  ISO/TS 10303-1017 
  (types_of_product);  
 
 
CONSTANT 
 
  -- normative reference: ISO 31-9, Annex A 
  -- posistion is identical to Atomic number 
  chemical_elements : LIST OF STRING := [
      'HYDROGEN', -- 1 
      'HELIUM', -- 2 
      'LITHIUM', -- 3 
      'BERYLLIUM', -- 4 
      'BORON', -- 5 
      'CARBON', -- 6 
      'NITROGEN', -- 7 
      'OXYGEN', -- 8 
      'FLUORINE', -- 9 
      'NEON', -- 10  
      'SODIUM', -- 11 
      'MAGNESIUM', -- 12 
      'ALUMINIUM', -- 13 
      'SILICON', -- 14 
      'PHOSPHORUS', -- 15 
      'SULPHUR', -- 16 
      'CHLORINE', -- 17 
      'ARGON', -- 18 
      'POTASSIUM', -- 19 
      'CALCIUM', -- 20
      'SCANDIUM', -- 21 
      'TITANIUM', -- 22 
      'VANADIUM', -- 23 
      'CHROMIUM', -- 24 
      'MANGANESE', -- 25 
      'IRON', -- 26 
      'COBALT', -- 27 
      'NICKEL', -- 28 
      'COPPER', -- 29 
      'ZINC', -- 30 
      'GALLIUM', -- 31 
      'GERMANIUM', -- 32 
      'ARSENIC', -- 33 
      'SELENIUM', -- 34 
      'BROMINE', -- 35 
      'KRYPTON', -- 36 
      'RUBIDIUM', -- 37 
      'STRONTIUM', -- 38 
      'YTTRIUM', -- 39 
      'ZIRCONIUM', -- 40 
      'NIOBIUM', -- 41 
      'MOLYBDENUM', -- 42 
      'TECHNETIUM', -- 43 
      'RUTHENIUM', -- 44 
      'RHODIUM', -- 45 
      'PALLADIUM', -- 46 
      'SILVER', -- 47 
      'CADMIUM', -- 48 
      'INDIUM', -- 49 
      'TIN', -- 50 
      'ANTIMONY', -- 51 
      'TELLURIUM', -- 52 
      'IODINE', -- 53 
      'XENON', -- 54 
      'CAESIUM', -- 55 
      'BARIUM', -- 56 
      'LANTHANUM', -- 57 
      'CERIUM', -- 58 
      'PRASEODYMIUM', -- 59 
      'NEODYMIUM', -- 60 
      'PROMETHIUM', -- 61 
      'SAMARIUM', -- 62 
      'EUROPIUM', -- 63
      'GADOLINIUM', -- 64 
      'TERBIUM', -- 65 
      'DYSPROSIUM', -- 66 
      'HOLMIUM', -- 67 
      'ERBIUM', -- 68 
      'THULIUM', -- 69 
      'YTTERBIUM', -- 70 
      'LUTETIUM', -- 71 
      'HAFNIUM', -- 72 
      'TANTALUM', -- 73 
      'TUNGSTEN', -- 74 
      'RHENIUM', -- 75 
      'OSMIUM', -- 76 
      'IRIDIUM', -- 77 
      'PLATINUM', -- 78 
      'GOLD', -- 79 
      'MERCURY', -- 80 
      'THALLIUM', -- 81 
      'LEAD', -- 82 
      'BISMUTH', -- 83 
      'POLONIUM', -- 84 
      'ASTATINE', -- 85 
      'RADON', -- 86 
      'FRANCIUM', -- 87 
      'RADIUM', -- 88 
      'ACTINIUM', -- 89 
      'THORIUM', -- 90 
      'PROTACTINIUM', -- 91 
      'URANIUM', -- 92 
      'NEPTUNIUM', -- 93 
      'PLUTONIUM', -- 94 
      'AMERICIUM', -- 95 
      'CURIUM', -- 96 
      'BERKELIUM', -- 97 
      'CALIFORNIUM', -- 98 
      'EINSTEINIUM', -- 99 
      'FERMIUM', -- 100 
      'MENDELEVIUM', -- 101 
      'NOBELIUM', -- 102 
      'LAWRENCIUM', -- 103 
      'RUTHERFORDIUM', -- 104 
      'DUBNIUM', -- 105 
      'SEABORGIUM', -- 106 
      'BOHRIUM', -- 107 
      'HASSIUM', -- 108 
      'MEITNERIUM', -- 109 
      'DARMSTADTIUM', -- 110
      'ROENTGENIUM']; -- 111
  END_CONSTANT; 

  TYPE substance_composition_basis = EXTENSIBLE ENUMERATION OF ( 
       VOLUME, 
       MASS, 
       MOLES, 
       ATOMS);      
  END_TYPE; 
 
  ENTITY Chemical_compound 
    SUBTYPE OF (Substance); 
	DERIVE
  		id_owner: SET[0:?] OF Organization_or_person_in_organization_assignment :=
         QUERY(temp <* bag_to_set(USEDIN(SELF,'PERSON_ORGANIZATION_ASSIGNMENT_ARM.'+
         'ORGANIZATION_OR_PERSON_IN_ORGANIZATION_ASSIGNMENT.ITEMS')) |
                         (temp.role = 'id owner') );
  WHERE 
     WR1: SIZEOF([ 'chemical compound' ] * types_of_product(SELF))= 1 ; 
     WR2 : EXISTS (id_owner) AND (SIZEOF(id_owner) = 1);
  END_ENTITY; 
   
  ENTITY Chemical_element 
    SUBTYPE OF (Substance); 
  WHERE 
     WR1: SIZEOF([ 'chemical element' ] * types_of_product(SELF))= 1 ; 
  END_ENTITY; 
   
 
  ENTITY Physical_particle
    SUBTYPE OF (Substance);
  WHERE 
     WR1: SIZEOF([ 'physical particle' ] * types_of_product(SELF))= 1 ;
  END_ENTITY;

   ENTITY Raw_material_definition_relationship
      SUBTYPE OF (View_definition_usage);
     		SELF\View_definition_relationship.related_view RENAMED application : Part_view_definition;
     		SELF\View_definition_relationship.relating_view RENAMED definition : Substance_view_definition;  
   DERIVE
     SELF\View_definition_relationship.relation_type : STRING := 'raw material definition';
   END_ENTITY;
   
  ENTITY Substance
    SUPERTYPE OF (ONEOF(Chemical_element, Chemical_compound, Physical_particle))
    SUBTYPE OF (Product);    
  WHERE 
     WR1: SIZEOF([ 'substance' ] * types_of_product(SELF))= 1 ; 
  END_ENTITY; 
   
  ENTITY Substance_composition_relationship 
    SUBTYPE OF (View_definition_relationship);
      SELF\View_definition_relationship.related_view RENAMED constituent : Substance_view_definition; 
      SELF\View_definition_relationship.relating_view RENAMED whole      : Substance_view_definition; 
      composition_basis                                                  : Substance_composition_basis;
      determination_method                                               : STRING; 
      amount 															 : Value_with_unit; 
    DERIVE
      SELF\View_definition_relationship.relation_type : STRING := 'assembly material composition';
    WHERE
      WR1 : 'VALUE_WITH_UNIT_ARM.RATIO_UNIT' IN TYPEOF(amount.unit);      
  END_ENTITY; 

  ENTITY Substance_version 
    SUBTYPE OF (Product_version); 
    SELF\Product_version.of_product : Substance; 
  END_ENTITY; 
 
  
  ENTITY Substance_view_definition 
    SUBTYPE OF (Product_view_definition); 
    SELF\Product_view_definition.defined_version : Substance_version; 
  END_ENTITY; 

RULE substance_version_constraint FOR 
(Product_version);
WHERE
  WR1: SIZEOF ( QUERY ( pv <* Product_version | ( NOT ( 'CHEMICAL_SUBSTANCE_ARM.' + 'SUBSTANCE_VERSION' IN TYPEOF ( pv) ) ) AND ( 'CHEMICAL_SUBSTANCE_ARM.' + 'SUBSTANCE' IN TYPEOF ( pv.of_product) ) ) ) =0 ;
END_RULE; 

RULE substance_view_definition_constraint FOR 
(Product_view_definition);
WHERE
  WR1: SIZEOF ( QUERY ( pvd <* Product_view_definition | ( NOT ( 'CHEMICAL_SUBSTANCE_ARM.' + 'SUBSTANCE_VIEW_DEFINITION' IN TYPEOF (pvd) ) ) AND ( 'CHEMICAL_SUBSTANCE_ARM.' + 'SUBSTANCE_VERSION' IN TYPEOF ( pvd.defined_version) ) ) ) =0 ;
END_RULE; 

RULE chemical_element_constraint FOR 
(Product);
WHERE
  WR1: SIZEOF ( QUERY ( p <* Product | 
               (('CHEMICAL_SUBSTANCE_ARM.' + 'SUBSTANCE' IN TYPEOF (p) ) AND ((p\Product.name) IN chemical_elements) ) 
                OR
               (NOT('CHEMICAL_SUBSTANCE_ARM.' + 'SUBSTANCE' IN TYPEOF (p) ) AND NOT((p\Product.name) IN chemical_elements) )
       )) =
       SIZEOF ( Product);
END_RULE; 

  FUNCTION bag_to_set(
    the_bag : BAG OF GENERIC : intype
  ) : SET OF GENERIC : intype;

    LOCAL
      the_set : SET OF GENERIC : intype := [];
      i       : INTEGER;
    END_LOCAL;

    IF SIZEOF(the_bag) > 0 THEN
      REPEAT i := 1 TO HIINDEX(the_bag);
        the_set := the_set + the_bag[i];
      END_REPEAT;
    END_IF;
    RETURN(the_set);
  END_FUNCTION;

 
END_SCHEMA; 
