<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express language_version="2" rcs.date="2005-09-28T15:44:44" rcs.revision="1.0" description.file="arm_descriptions.xml">
   <application name="JSDAI" owner="LKSoft" url="www.lksoft.com" version="4.0 beta" source="chemical_substance_arm schema_instance"/>
   <schema name="Chemical_substance_arm">
      <interface kind="use" schema="Assembly_structure_arm"/>
      <interface kind="use" schema="Part_view_definition_arm"/>
      <interface kind="use" schema="Person_organization_assignment_arm"/>
      <interface kind="reference" schema="Product_identification_arm">
         <interfaced.item name="types_of_product"/>
      </interface>
      <constant name="chemical_elements" expression="[&#10;      'HYDROGEN', -- 1 &#10;      'HELIUM', -- 2 &#10;      'LITHIUM', -- 3 &#10;      'BERYLLIUM', -- 4 &#10;      'BORON', -- 5 &#10;      'CARBON', -- 6 &#10;      'NITROGEN', -- 7 &#10;      'OXYGEN', -- 8 &#10;      'FLUORINE', -- 9 &#10;      'NEON', -- 10  &#10;      'SODIUM', -- 11 &#10;      'MAGNESIUM', -- 12 &#10;      'ALUMINIUM', -- 13 &#10;      'SILICON', -- 14 &#10;      'PHOSPHORUS', -- 15 &#10;      'SULPHUR', -- 16 &#10;      'CHLORINE', -- 17 &#10;      'ARGON', -- 18 &#10;      'POTASSIUM', -- 19 &#10;      'CALCIUM', -- 20&#10;      'SCANDIUM', -- 21 &#10;      'TITANIUM', -- 22 &#10;      'VANADIUM', -- 23 &#10;      'CHROMIUM', -- 24 &#10;      'MANGANESE', -- 25 &#10;      'IRON', -- 26 &#10;      'COBALT', -- 27 &#10;      'NICKEL', -- 28 &#10;      'COPPER', -- 29 &#10;      'ZINC', -- 30 &#10;      'GALLIUM', -- 31 &#10;      'GERMANIUM', -- 32 &#10;      'ARSENIC', -- 33 &#10;      'SELENIUM', -- 34 &#10;      'BROMINE', -- 35 &#10;      'KRYPTON', -- 36 &#10;      'RUBIDIUM', -- 37 &#10;      'STRONTIUM', -- 38 &#10;      'YTTRIUM', -- 39 &#10;      'ZIRCONIUM', -- 40 &#10;      'NIOBIUM', -- 41 &#10;      'MOLYBDENUM', -- 42 &#10;      'TECHNETIUM', -- 43 &#10;      'RUTHENIUM', -- 44 &#10;      'RHODIUM', -- 45 &#10;      'PALLADIUM', -- 46 &#10;      'SILVER', -- 47 &#10;      'CADMIUM', -- 48 &#10;      'INDIUM', -- 49 &#10;      'TIN', -- 50 &#10;      'ANTIMONY', -- 51 &#10;      'TELLURIUM', -- 52 &#10;      'IODINE', -- 53 &#10;      'XENON', -- 54 &#10;      'CAESIUM', -- 55 &#10;      'BARIUM', -- 56 &#10;      'LANTHANUM', -- 57 &#10;      'CERIUM', -- 58 &#10;      'PRASEODYMIUM', -- 59 &#10;      'NEODYMIUM', -- 60 &#10;      'PROMETHIUM', -- 61 &#10;      'SAMARIUM', -- 62 &#10;      'EUROPIUM', -- 63&#10;      'GADOLINIUM', -- 64 &#10;      'TERBIUM', -- 65 &#10;      'DYSPROSIUM', -- 66 &#10;      'HOLMIUM', -- 67 &#10;      'ERBIUM', -- 68 &#10;      'THULIUM', -- 69 &#10;      'YTTERBIUM', -- 70 &#10;      'LUTETIUM', -- 71 &#10;      'HAFNIUM', -- 72 &#10;      'TANTALUM', -- 73 &#10;      'TUNGSTEN', -- 74 &#10;      'RHENIUM', -- 75 &#10;      'OSMIUM', -- 76 &#10;      'IRIDIUM', -- 77 &#10;      'PLATINUM', -- 78 &#10;      'GOLD', -- 79 &#10;      'MERCURY', -- 80 &#10;      'THALLIUM', -- 81 &#10;      'LEAD', -- 82 &#10;      'BISMUTH', -- 83 &#10;      'POLONIUM', -- 84 &#10;      'ASTATINE', -- 85 &#10;      'RADON', -- 86 &#10;      'FRANCIUM', -- 87 &#10;      'RADIUM', -- 88 &#10;      'ACTINIUM', -- 89 &#10;      'THORIUM', -- 90 &#10;      'PROTACTINIUM', -- 91 &#10;      'URANIUM', -- 92 &#10;      'NEPTUNIUM', -- 93 &#10;      'PLUTONIUM', -- 94 &#10;      'AMERICIUM', -- 95 &#10;      'CURIUM', -- 96 &#10;      'BERKELIUM', -- 97 &#10;      'CALIFORNIUM', -- 98 &#10;      'EINSTEINIUM', -- 99 &#10;      'FERMIUM', -- 100 &#10;      'MENDELEVIUM', -- 101 &#10;      'NOBELIUM', -- 102 &#10;      'LAWRENCIUM', -- 103 &#10;      'RUTHERFORDIUM', -- 104 &#10;      'DUBNIUM', -- 105 &#10;      'SEABORGIUM', -- 106 &#10;      'BOHRIUM', -- 107 &#10;      'HASSIUM', -- 108 &#10;      'MEITNERIUM', -- 109 &#10;      'DARMSTADTIUM', -- 110&#10;      'ROENTGENIUM']">
         <aggregate type="LIST" lower="0" upper="?"/>
         <builtintype type="STRING"/>
      </constant>
      <type name="substance_composition_basis">
         <enumeration extensible="YES" items="VOLUME MASS MOLES ATOMS"/>
      </type>
      <entity name="Chemical_compound" supertypes="Substance">
         <derived name="id_owner" expression="QUERY(temp &lt;* bag_to_set(USEDIN(SELF,'PERSON_ORGANIZATION_ASSIGNMENT_ARM.'+&#10;         'ORGANIZATION_OR_PERSON_IN_ORGANIZATION_ASSIGNMENT.ITEMS')) |&#10;                         (temp.role = 'id owner') )">
            <aggregate type="SET" lower="0" upper="?"/>
            <typename name="Organization_or_person_in_organization_assignment"/>
         </derived>
         <where label="WR1" expression="SIZEOF([ 'chemical compound' ] * types_of_product(SELF))= 1"/>
         <where label="WR2" expression="EXISTS (id_owner) AND (SIZEOF(id_owner) = 1)"/>
      </entity>
      <entity name="Chemical_element" supertypes="Substance">
         <where label="WR1" expression="SIZEOF([ 'chemical element' ] * types_of_product(SELF))= 1"/>
      </entity>
      <entity name="Physical_particle" supertypes="Substance">
         <where label="WR1" expression="SIZEOF([ 'physical particle' ] * types_of_product(SELF))= 1"/>
      </entity>
      <entity name="Raw_material_definition_relationship" supertypes="View_definition_usage">
         <explicit name="application">
            <typename name="Part_view_definition"/>
            <redeclaration entity-ref="View_definition_relationship" old_name="related_view"/>
         </explicit>
         <explicit name="definition">
            <typename name="Substance_view_definition"/>
            <redeclaration entity-ref="View_definition_relationship" old_name="relating_view"/>
         </explicit>
         <derived name="relation_type" expression="''">
            <builtintype type="STRING"/>
            <redeclaration entity-ref="View_definition_relationship"/>
         </derived>
      </entity>
      <entity name="Substance" supertypes="Product" super.expression="ONEOF (Chemical_element, Chemical_compound, Physical_particle)">
         <where label="WR1" expression="SIZEOF([ 'substance' ] * types_of_product(SELF))= 1"/>
      </entity>
      <entity name="Substance_composition_relationship" supertypes="View_definition_relationship">
         <explicit name="constituent">
            <typename name="Substance_view_definition"/>
            <redeclaration entity-ref="View_definition_relationship" old_name="related_view"/>
         </explicit>
         <explicit name="whole">
            <typename name="Substance_view_definition"/>
            <redeclaration entity-ref="View_definition_relationship" old_name="relating_view"/>
         </explicit>
         <explicit name="composition_basis">
            <typename name="substance_composition_basis"/>
         </explicit>
         <explicit name="determination_method">
            <builtintype type="STRING"/>
         </explicit>
         <explicit name="amount">
            <typename name="Value_with_unit"/>
         </explicit>
         <derived name="relation_type" expression="''">
            <builtintype type="STRING"/>
            <redeclaration entity-ref="View_definition_relationship"/>
         </derived>
         <where label="WR1" expression="'VALUE_WITH_UNIT_ARM.RATIO_UNIT' IN TYPEOF(amount.unit)"/>
      </entity>
      <entity name="Substance_version" supertypes="Product_version">
         <explicit name="of_product">
            <typename name="Substance"/>
            <redeclaration entity-ref="Product_version"/>
         </explicit>
      </entity>
      <entity name="Substance_view_definition" supertypes="Product_view_definition">
         <explicit name="defined_version">
            <typename name="Substance_version"/>
            <redeclaration entity-ref="Product_view_definition"/>
         </explicit>
      </entity>
      <rule name="chemical_element_constraint" appliesto="Product">
         <where label="WR1" expression="SIZEOF ( QUERY ( p &lt;* Product | &#10;               (('CHEMICAL_SUBSTANCE_ARM.' + 'SUBSTANCE' IN TYPEOF (p) ) AND ((p\Product.name) IN chemical_elements) ) &#10;                OR&#10;               (NOT('CHEMICAL_SUBSTANCE_ARM.' + 'SUBSTANCE' IN TYPEOF (p) ) AND NOT((p\Product.name) IN chemical_elements) )&#10;       )) =&#10;       SIZEOF ( Product)"/>
      </rule>
      <rule name="substance_version_constraint" appliesto="Product_version">
         <where label="WR1" expression="SIZEOF ( QUERY ( pv &lt;* Product_version | ( NOT ( 'CHEMICAL_SUBSTANCE_ARM.' + 'SUBSTANCE_VERSION' IN TYPEOF ( pv) ) ) AND ( 'CHEMICAL_SUBSTANCE_ARM.' + 'SUBSTANCE' IN TYPEOF ( pv.of_product) ) ) ) =0"/>
      </rule>
      <rule name="substance_view_definition_constraint" appliesto="Product_view_definition">
         <where label="WR1" expression="SIZEOF ( QUERY ( pvd &lt;* Product_view_definition | ( NOT ( 'CHEMICAL_SUBSTANCE_ARM.' + 'SUBSTANCE_VIEW_DEFINITION' IN TYPEOF (pvd) ) ) AND ( 'CHEMICAL_SUBSTANCE_ARM.' + 'SUBSTANCE_VERSION' IN TYPEOF ( pvd.defined_version) ) ) ) =0"/>
      </rule>
      <function name="bag_to_set">
         <parameter name="the_bag">
            <aggregate type="BAG" lower="0" upper="?"/>
            <builtintype type="GENERIC"/>
         </parameter>
         <aggregate type="SET" lower="0" upper="?"/>
         <builtintype type="GENERIC"/>
         <algorithm>LOCAL
      the_set : SET OF GENERIC : intype := [];
      i       : INTEGER;
    END_LOCAL;

    IF SIZEOF(the_bag) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX(the_bag);
        the_set := the_set + the_bag[i];
      END_REPEAT;
    END_IF;
    RETURN(the_set);</algorithm>
      </function>
   </schema>
</express>
