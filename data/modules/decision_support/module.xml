<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: module.xml,v 1.14 2007/01/11 08:43:09 abhpf Exp $ -->
<!DOCTYPE module SYSTEM "../../../dtd/module.dtd">
<!-- Generated by mkmodule.js, Eurostep Limited, http://www.eurostep.com -->
 <!-- 
     To view the module in IExplorer, open: sys/1_scope.xml
      -->
<module
   name="decision_support"
   part="1486"
   version="1"
   sc4.working_group="3"
   wg.number=""
   wg.number.arm=""
   wg.number.mim=""
   wg.number.arm_lf=""
   wg.number.mim_lf=""
   checklist.internal_review=""
   checklist.project_leader=""
   checklist.convener=""
   status="WD"
   language="E"
   publication.year=""
   publication.date=""
   published="n"
   rcs.date="$Date: 2007/01/11 08:43:09 $"
   rcs.revision="$Revision: 1.14 $"
   development.folder="dvlp">

 <keywords>
    module, requirements, systems engineering, trade studies, analysis, verification, validation, justification
 </keywords>

<!-- the abstract for the module. If not provided, the XSL will use the in scope -->

 <!-- Reference to contacts detailed in stepmod/data/basic/contacts.xml -->
 <contacts>
   <projlead ref="ap233.projlead2"/>  
   <editor ref="phil.spiby"/>
 </contacts>

 <!-- Introduction -->
 <!-- The introduction should start as shown: -->
 <purpose>
   <p>
     This part of ISO 10303 specifies an application module for the
     representation of decision support activities and information.
   </p>
   
 </purpose>

 <!-- Items in scope -->
 <inscope>
   <li>Requirements;</li>
   <li>Trade studies with measures of effectiveness;</li>
   <li>Analysis and analysis representation;</li>
   <li>Verification and validation;</li>
   <li>Justification.</li>
 </inscope>

 <!-- Items out of scope 
 <outscope>
   <li>xxxx</li>
 </outscope>
-->
<!--
 <normrefs/>

 <definition/>

 <abbreviations/>
-->

 <!-- Clause 4 ARM  -->
 <arm>
   <!-- Note ARM short form EXPRESS is in arm.xml -->

   <!-- Short form EXPRESS-G -->
   <express-g>
     <imgfile file="armexpg1.xml"/>
<!--     <imgfile file="armexpg2.xml"/>
     <imgfile file="armexpg3.xml"/>
     <imgfile file="armexpg4.xml"/>
     <imgfile file="armexpg5.xml"/>
     <imgfile file="armexpg6.xml"/>
     <imgfile file="armexpg7.xml"/>
     <imgfile file="armexpg8.xml"/>
     <imgfile file="armexpg9.xml"/>
     <imgfile file="armexpg10.xml"/>
     <imgfile file="armexpg11.xml"/> -->
   </express-g>
 </arm>

 <!-- ARM long form (optional) -->
 <!-- If not required, delete this section and the following files:
          arm_lf.xml
          armexpg_lf1.gif
          armexpg_lf1.xml -->
 <arm_lf>
   <!-- Note ARM long form EXPRESS is in arm_lf.xml -->
   <express-g>
     <imgfile file="armexpg_lf1.xml"/>
   </express-g>
 </arm_lf>

 <!-- Clause 5.1 Mapping specification -->
 <mapping_table>
   <ae entity="xx"/>
 </mapping_table>

 <!-- Clause 5.2 MIM -->
 <mim>
   <!--  Note MIM short form express is in mim.xml -->
   <express-g>
     <imgfile file="mimexpg1.xml"/>
   </express-g>
 </mim>

 <!-- MIM long form (optional) -->
 <!-- If not required, delete this section and the following files:
          mim_lf.xml
          mimexpg_lf1.gif
          mimexpg_lf1.xml -->
 <mim_lf>
   <!-- Note MIM long form EXPRESS is in mim_lf.xml -->
   <express-g>
     <imgfile file="mimexpg_lf1.xml"/>
   </express-g>
 </mim_lf>

 
   <usage_guide>
   
      		<figure> <title>Top level hierarchy of AP233 modules</title>
		<img src="Slide11.gif"/>	
		</figure>

   <p>Figure 1 above shows the hierarchy for the Decision_support_arm.  It provides 
   for.</p>
   
   <ol>
   <li>An Interface to analysis</li>

   <li>It contains three arms related to an interface to analysis. They are: 
   External_analysis_representation_arm, Analysis_assignment_arm, and 
   Analysis_characterized_arm. These arms store the data a tool user 
   needs to specify the equation he wishes to have solved, where in the 
   systems models to pick up the needed parameter values, and where to 
   return the computed values. This capability underlies all of performance 
   calculation, trade studies, and verification and validation. It is the 
   quantitative heart of systems engineering and AP233.</li>

   <li>It contains the arm that supports documentation for the justification 
   of decisions.</li>

   <li>It contains the arm for the data concerning verification and validation.</li>

   <li>It contains the Requirement_management_arm that supports information 
   rights, documents, requirement sources, classifications, effectivity, and 
   requirement assignment.</li>

   <li>Versioning and version relationships are needed not only by 
   requirements, but also by many other elements of the total system model. 
   Consequently they are defined once for an entity called “Product” and 
   then inherited from that entity through the software mechanism of 
   subclasses. The best way to think about Product is as Thing or Anything. 
   Inconsequence, The versioning and version relationships are in an arm 
   called Requirement_ID_and _version that inherits from arms 
   Product_version_arm and then from Product_view_definition_arm.</li> 

   <li>The concepts of tracing among entities and collecting them into groups 
   is also pervasive. Consequently the traceability and collection of 
   requirements is supported by the Requirement_view_relationship_arm that 
   inherits from the Product_view_definition_relationship_arm. </li>

   <li>Trade studies are supported by the MOE arm. It directly contains 
   MOE’s, the direction of optimization (maximize or minimize) and the 
   regularization function. Because the application of numeric weights 
   to a collection of things is a general need in many places in AP233, 
   weights are connected via the EXPRESS interconnection mechanism of 
   type extensions. A similar mechanism is used to relate MOE’s to the 
   activity that is performed to generate the trade study. For similar 
   reasons the traceability among MOE’s and their collection into groups is 
   obtained by making them a subclass of Requirement. This has the advantage 
   of using the EXPRESS language in a compact way to get the traceability 
   and collection features for MOE’s, but also to allow derived requirements 
   for a particular design solution to trace to the MOE’s and the trade 
   study that caused its selection.</li>
   </ol>
   
   <p><b>The concept maps provided below provide a more detail view of the modules used to enable 
   this decision support capability and their associated USE FROM connectivity.</b></p>

      	<p>The modules used and all of their associated USE FROM relationships for AP233 are shown 
	via a concept map in Figure 1 - AP233_arm_Concept_Map.  Code 
	yellow implies all USE FROM's are shown for the module identified, Code green implies more 
	USE FROM's exist in the 
	module identified, Code blue identifies the extensible select type defined by the
	module shown.  The next lower level of USE FROM concept map abstraction follow.  
	</p>

   
   	<figure><title> AP233_arm_Concept_Map  </title>
	<img src="AP233_arm_Concept_Map.gif"/>	
	</figure>

   	<p>The following modules have been developed to support AP233's decision support modeling needs. 
	All others shown support other AP233 capabilites.  These are discussed in Annex F if the AP233 
	implementation module which makes primary use of it. The primary
	modules used for AP233's Decision support capability are:
	</p>

	<ul>
        <li><module_ref linkend="activity_as_realized:introduction">
          Activity_as_realized_arm</module_ref>
        (ISO 10303-1459);</li>
	
	<li>
        <module_ref linkend="analysis_assignment:introduction">
          Analysis_assignment_arm</module_ref>
        (ISO 10303-1474);
	</li>
	
	<li>
        <module_ref linkend="analysis_characterized:introduction">
          Analysis_characterized_arm</module_ref>
        (ISO 10303-1475);
	</li>
	
	<li>
        <module_ref linkend="external_analysis_representation:introduction">
          External_analysis_representation_arm</module_ref>
        (ISO 10303-1784);
	</li>
	
	<li>
        <module_ref linkend="justification:introduction">
          Justification_arm</module_ref>
        (ISO 10303-1263);
	</li>
	
	<li>
        <module_ref linkend="measure_of_effectiveness:introduction">
          Measure_of_effectiveness_arm</module_ref>
        (ISO 10303-1478);
	</li>
	
	<li>
        <module_ref linkend="requirement_management:introduction">
          Requirement_management_arm</module_ref>
        (ISO 10303-1348);
	</li>
	
	<li>
        <module_ref linkend="verification_and_validation:introduction">
          Verification_and_validation_arm</module_ref>
        (ISO 10303-1488);
	</li>
	</ul>

	<p>The series of concepts that follow provide the next lower level of 
	USE FROM abstraction detail for these primary modules with some brief remarks 
	as to what are the modules most important to Decision support.</p>
	
	<p>Figure 2 below entitled <b>Project Concepts</b> includes the USE FROM relationships that
	enable AP233's capabilities for requirements management and trade study via of measures 
	of effectiveness.  The primary modules shown here that have significant AP233 decision support 
	enabling capability are:</p>  
	
	<ul>
	<li>
        <module_ref linkend="requirement_assignment:introduction">
          Requirement_assignment_arm</module_ref>
        (ISO 10303-1233);
	</li>

	<li>
        <module_ref linkend="requirement_view_definition_relationship:introduction">
          Requirement_view_definition_relationship_arm</module_ref>
        (ISO 10303-1142);
	</li>

	<li>
        <module_ref linkend="requirement_identification_and_version:introduction">
          Requirement_identification_and_version_arm</module_ref>
        (ISO 10303-1140);
	</li>
	</ul>
	
   	<figure><title> Project Concepts  </title>
	<img src="Project_concepts.gif"/>	
	</figure>
	
	<p>Figure 3 below entitled <b>How Concepts</b> includes the USE FROM relationships that
	enable AP233's capabilities for analysis and verification and validation.  The primary 
	modules shown here that have signifcant AP233 decision support 
	enabling capability are:</p>  
	
	<ul>
	<li>
        <module_ref linkend="analysis_assignment:introduction">
          Analysis_assignment_arm</module_ref>
        (ISO 10303-1474);
	</li>

	<li>
        <module_ref linkend="analysis_identification:introduction">
          Analysis_identification_arm</module_ref>
        (ISO 10303-1476);
	</li>

	<li>
        <module_ref linkend="analysis_characterized:introduction">
          Analysis_characterized_arm</module_ref>
        (ISO 10303-1475);
	</li>
	
	<li>
        <module_ref linkend="verification_and_validation:introduction">
          Verification_and_validation_arm</module_ref>
        (ISO 10303-1488);
	</li>
	</ul>
	
   	<figure><title> How Concepts  </title>
	<img src="How_concepts.gif"/>	
	</figure>
	
	<p>Figure 4 below entitled <b>Representation Concepts</b> includes the USE FROM relationships that
	enable AP233's capabilities for analysis representation.  The primary 
	modules shown here that have significant AP233 decision support 
	enabling capability are:</p>  
	
	<ul>
	<li>
        <module_ref linkend="external_analysis_representation:introduction">
          External_analysis_representation_arm</module_ref>
        (ISO 10303-1784);
	</li>

	<li>
        <module_ref linkend="analysis_representation:introduction">
          Analysis_representation_arm</module_ref>
        (ISO 10303-1785);
	</li>

	<li>
        <module_ref linkend="foundation_representation:introduction">
          Foundation_representation_arm</module_ref>
        (ISO 10303-1006);
	</li>
	<li>
        <module_ref linkend="independent_property:introduction">
          Independent_property_arm</module_ref>
        (ISO 10303-1036);
	</li>
	</ul>
	
   	<figure><title> Representation Concepts  </title>
	<img src="Representation_concepts.gif"/>	
	</figure>
	
			
	   
   <p><b>Begin - Notes from SC4 Meeting in Hangzhou and post meeting email exchanges</b></p>

   <p>There is an accepted need and desire to insure that AP233 and SysML work together
     to the greatest degree posssible.  Much of the capability provided via SysML can
     be logically viewed as belonging within the scope of this module.  In a sense, this
     is where SysML meets Configuration Management.  Detail is under development.
   </p>
      
<p><b>Re: "Analysis"</b></p>
   <p>Decision-making is an integral part of any systems engineering activity.
      Decisions are assumed to be rational (what, why, how).  They are  made by people
      and organizations; somewhere, and at some point in time (who, when, where).
      The proposed concept model seeks to provide the basic the network of concepts
      and relationships necessary for the representation and exchange of all computer
      sensible information associated with the systems engineering decision-making process.
      Within this context; "analysis" supports decision making.  An associated concept model
      is available at:.
      <a href="http://stepmod.cvs.sourceforge.net/*checkout*/stepmod/stepmod/etc/ap233/references/analysis/Decision_making16.pdf?revision=1.1"/>.
      This model has been reviewed at several 2005 AP233 meetings. The capabilities necessary 
      to enable "analysis" representation, within AP233 stem from this work.</p>

<p><b>End - Notes from SC4 Meeting in Hangzhou and post meeting email exchanges</b></p>

	<p>Figure 5 below entitled <b>Authorization Concepts</b> includes the USE FROM relationships that
	enable AP233's capabilities for justification representation.  The primary 
	modules shown here that have significant AP233 decision support 
	enabling capability are:</p>  
	
	<ul>
	<li>
        <module_ref linkend="justification:introduction">
          Justification_arm</module_ref>
        (ISO 10303-1784);
	</li>
	</ul>
	
   	<figure><title> Authorization Concepts  </title>
	<img src="Authorization_concepts.gif"/>	
	</figure>
	
	<p>Figure 6 below entitled <b>Activity Concepts</b> includes the USE FROM relationships that
	enable AP233's capabilities for activity as realized representation.  The primary 
	modules shown here that have significant AP233 decision support 
	enabling capability are:</p>  
	
	<ul>
	<li>
        <module_ref linkend="activity_as_realized:introduction">
          Activity_as_realized_arm</module_ref>
        (ISO 10303-1259);
	</li>

	<li>
        <module_ref linkend="activity:introduction">
          Activity_arm</module_ref>
        (ISO 10303-1047);
	</li>

	<li>
        <module_ref linkend="activity_method:introduction">
          Activity_method_arm</module_ref>
        (ISO 10303-1049);
	</li>
	</ul>
	
   	<figure><title> Activity Concepts  </title>
	<img src="Activity_concepts.gif"/>	
	</figure>
	
	<p><b>Extensible type select lists</b></p>
	
	<p>The problem of creating extensible type lists has proven to be an extreme challenge.
	To explain what has been done a publish and subscribe analogy is used.</p>  
	<p>Schemas enable foundational capability which may be at the atomic or macro-molecular level.
	Schemas enable capabilities via entities that other capabilities can access by "subscription".
	The extensible type is the subscription list name. The list itself
	identifies all subscribers (entities).</p>  
	<p>The problem in STEP is that these lists are defined within schemas that have a domain  
	bounded by the capabilities of all schemas in its USE FROM list
	and those lists that it inherits.  On the bottom line, this creates a list creation problem 
	that is 3 dimensional. The dimensions are: bounded domain, entities and extensible types.  To 
	size this, AP233 has about 10 major bounded domains, 1000 entities and 100 extensible types.  
	If one does not apply any organizational logic to the problem this implies a need for 
	1,000,000 yes/no cognitive decisions to fully resolve the AP233 type extend problem.</p>
	
	<p>In order to penetrate this problem some logical approach that was both scalable and 
	checkable is required.  In AP233 WD1 all schemas where grouped into high level concept
	groups: program management resource information (pmri), organization structure (os),
	project breakdown (pb). schedule (ss) and work structure (ws).  As AP233 WD2 
	evolved major module restructuring occurred within AP233.  This lead to groupings 
	that are now in-line with the Annex F concept maps shown.  These groupings enable 
	the type extend problem to be broken
	down into scalable and checkable pieces that could be aggregate by a simple set union 
	to create the desired whole.  Significant redundancy is created and minimal attempt is 
	made to remove this.  All EXPRESS long form compilers will auto-remove these without
	the possibility of human error.</p>
	
   	
	<p><b>Extensible type select lists</b></p>
	
	<p>The problem of creating extensible type lists has proven to be an extreme challenge.
	To explain what has been done a publish and subscribe analogy is used.</p>  
	<p>Schemas enable foundational capability which may be at the atomic or macro-molecular level.
	Schemas enable capabilities via entities that other capabilities can access by "subscription".
	The extensible type is the subscription list name. The list itself
	identifies all subscribers (entities).</p>  
	<p>The problem in STEP is that these lists are defined within schemas that have a domain  
	bounded by the capabilities of all schemas in its USE FROM list
	and those lists that it inherits.  On the bottom line, this creates a list creation problem 
	that is 3 dimensional. The dimensions are: bounded domain, entities and extensible types.  To 
	size this, AP233 has about 10 major bounded domains, 1000 entities and 100 extensible types.  
	If one does not apply any organizational logic to the problem this implies a need for 
	1,000,000 yes/no cognitive decisions to fully resolve the AP233 type extend problem.</p>
	
	<p>In order to penetrate this problem some logical approach that was both scalable and 
	checkable is required.  In AP233 WD1 all schemas where grouped into high level concept
	groups: program management resource information (pmri), organization structure (os),
	project breakdown (pb). schedule (ss) and work structure (ws).  As AP233 WD2 
	evolved major module restructuring occurred within AP233.  This lead to groupings 
	that are now in-line with the Annex F concept maps shown.  These groupings enable 
	the type extend problem to be broken
	down into scalable and checkable pieces that could be aggregate by a simple set union 
	to create the desired whole.  Significant redundancy is created and minimal attempt is 
	made to remove this.  All EXPRESS long form compilers will auto-remove these without
	the possibility of human error.</p>
	
   <p><b>Notes extracted from Valencia and Rochester meetings summer 2005</b></p>
   
   <p> The extensive list of system structure model 
   requirements and notes that follow capture the detail addressed by AP233 team.  The following
   figure entitled Structure and Physical property is from the baseline concept model upon which AP233
   has been built. This work has been mostly superseded.  Attempts to reuse the analytical model 
   capability of AP210 were never totally successful and new analysis representations appeared that 
   better suited AP233 needs.  The following is retained herein as historical background material.</p>
 
  
	<figure><title>   </title>
	<img src="Slide21_copy.gif"/>	</figure>

	<p><b>Requirement:</b>shall create allocation relationships between Part 
	and Text Requirement subclasses Physical Property Requirement and Imposed 
	Design Requirement</p>

	<p><b>Requirement:</b>shall create allocation relationships between Interface 
	Specification and Text Requirement subclass Interface Requirement</p>
	
   
   <p>The basic relationships for analytical modeling of emergent properties and 
   budgeting of properties are shown in Figure 5. A set of engineering equations or 
   estimates, analytical models, are used by systems engineers to budget properties 
   to the interacting sub-assemblies as a guide to designers at the lower level. 
   When designs for all of the sub-assemblies are available, their individual 
   properties and interactions are better defined. The same equations are used to 
   calculate the emergent properties of the complete assembly. The fidelity of the 
   calculations increases as the work proceeds.</p>   
   
   <p>A Part, as a whole, may have a Calculated Property Value based on analysis 
   of the properties, behaviors and interactions of its parts. This is accomplished 
   by estimation or by an analysis that solves the relevant engineering equations. 
   This makes it necessary to represent physical properties as parameters in the 
   equations of the relevant analysis model. Model Parameter provides this 
   parameterization. It has an attribute of its of the unit of measure applicable 
   to the analysis. This may be different from the unit assigned to Physical 
   Property. The reference_document attribute specifies the standard document 
   that contains the reference for the Model_parameter. A default value and valid 
   range can be specified when needed.</p>   
   
   <p>Parameter_assignment assigns parameters to model_parameter that in turn 
   is a parameter for analytical_model. Analytical_representation has a set of 
   parameter_assignments and is modeled by one or several analytical models. be 
   solved, Analytical _representation. The several Analytical_models provide 
   answers at different levels of fidelity and with different efforts of computation. 
   AM_port connects the analytical results back to the appropriate location in 
   the part hierarchy.</p>   

   <p><b>Requirement:</b>shall create an entity for the information unit concept of 
   Analytical Representation</p>

   <note><b>Definition - analytical_representation: </b>Is the association of specific 
   properties of specific system assemblies with an analytical_model in order to 
   unambiguously characterize the performance of a specific part</note>

   <p><b>Requirement:</b>shall create an entity for the information unit concept of 
   Analytical Model</p>

   <note><b>Definition - analytical_model:</b>Provides a mathematical description of the 
   properties of a system.</note>

   <p><b>stepmod module - Analytical_model_arm - Introduction</b></p>
   <ol><li>for the representation of information needed to properly interface to 
   and exchange the source code contents of an externally defined computer-interpretable 
   model of a particular behaviour. This model allows a behaviour to be described 
   using a mathematical form (e.g., algorithm, table). A model is independent of any 
   particular product. A model is not directly executable to return a result until 
   application data have been applied.</li></ol>

   <p><b>stepmod module - Analytical_model_arm - In scope</b></p><ol>
   <li>identification of externally defined analytical and computer-interpretable 
   models and their versions;</li>
   <li>identification of the parameters of an analytical model;</li>
   <li>the application of an analytical model to a real or imaginary object together 
   with the needed parameter assignments;</li></ol>

   <p><b>Concerns, Observations and comments</b></p><ol>
   <li>Concept of "Ports" within Analytical_model_arm carries the implicit assumption of 
   analog/discrete input/output signals. This is a ee-domain specific concept. Need to 
   remove all "port" stuff.</li>
   <li>model_parameter_type and signal_flow _direction types not needed. Not general enough</li>
   <li>How does this map to input and output data files of arbitrary complexity?</li>
   <li>What does analog and discrete map to?</li>
   <li>Vector-tensor physical property type needs reference frame</li>
   <li>Cast in the language of EE-ize, can't see the mapping to multi-disciplinary 
   analytical models</li>
   <li>Significant alteration may be needed to service full range of AP233 needs</li>
   <li>Reason: This arm is designed to service a lower level of data abstraction than 
   needed by AP233.</li>
   <li>Maybe: a "lite" version of this module work service needs?</li>
   <li><b>From TT </b>What in Analytical_model is specific to electrical/mechanical domain? 
   We have spent a lot of extra time in that module to make things flexible yet very 
   concrete so there could be little confusion by a data extractor and a data receiver. 
   Is it the digital and analog port stuff? I added that specifically so that we could 
   identify quantities on the ports that have through and across variables. Mike 
   Loeffler had a look at it and agreed it is good stuff, so I am a little confused.</li></ol>
   
   <p><b>Requirement:</b>shall create entities to support the information unit concept of 
   Rules</p>

   <note><b>Definition -  rules:</b> rules are defined by a constraint relating two elements based
   upon characteristics of a design;</note>
   
   <p><b>stepmod module - Production_rule_arm - In scope</b></p><ol> 
   <li>rules that define a constraint by relating two elements based
   upon characteristics of a design</li>
   <li>management of rules;</li>
   <li>items within the scope of application module Model parameter, ISO/CD-TS 10303-1703;</li>
   <li>items within the scope of application module Software, ISO/CD-TS 10303-1746;</li>
   <li>items within the scope of application module Specification document, ISO/CD-TS 10303-1747.</li>
   </ol>

   <p><b>stepmod module - Production_rule_arm - Introduction </b></p><ol> 
   <li>This module provides for the representation of the information needed to describe design constraints, 
   commonly referred to as rules. The information describes the rule's relationship to product 
   characteristics, formal description of the functions that embody the rule, in addition to the 
   configuration management aspects applied to the rule. The configuration management information 
   supports rule version control and supports a formal process to making changes to an existing rule.</li>
   </ol>

   <p><b>Concerns, Observations and comments</b></p> <ol>
   <li>  Rules need to service every aspect of systems engineering from high level institutional 
   rules for product development to low level rules that insure product manufacturability</li>
   <li>  This module is from AP210 - It still needs to be interface with AP233 </li>
   </ol>

   <p><b>Requirement:</b>shall create entities for the information unit concept of 
   Parameters with units, values and tolerances</p>

   <note><b>Definition -  model_parameter:</b> a formally declared variable of the 
   analytical model provided for an external application to populate at execution 
   time in a computing environment</note>

   <p><b>stepmod module - Model_parameter_arm - Introduction</b></p>
   <ol><li>representation of information needed to describe model parameters, mechanism 
   for overriding them and their assignments to products. Model parameters can be 
   classified.</li></ol>

   <p><b>stepmod module - Model_parameter_arm - In scope</b></p><ol>
   <li> identification of a parameter for a model;</li>
   <li> assignment of values to a model parameter;</li>
   <li> assignment of a parameter to a model;</li>
   <li> overriding of a parameter assignment;</li>
   <li> assignment of a parameter value to a product;</li></ol>

   <p><b>Concerns, Observations and comments</b></p> <ol>
   <li>  Model parameters can be vector-tensors with reference frames</li>
   <li> What to do about input/output files for multidisciplinary problems.</li>
   <li> Need to wrestle down "parameter" vs. May-2002 Lambda calculus thoughts</li>
   <li>Reference material can be downloaded at 
   <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_structure/Parameter_property_and_Lambda_calculus.doc?rev=1.1"/> and 
   <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_structure/Parameter_and_Lambda_calculus.doc?rev=1.1"/></li></ol>

   <p><b>Requirement:</b>shall create provide Parameters with Units</p>

   <p><b>Requirement:</b>shall create an entity for the information unit concepts of 
   Parameter Value, Tolerance and Assignment.</p>

   <p><b>Notes extracted from Valencia and Rochester meetings summer 2005</b></p>

   <ol>
   <li>Phil recalled the existance in the stepmod attic of Ian's module system_identification and version</li>
   <li>This module will enable system = product to be removed </li>
   <li>It will enable system to be made a subtype of product</li>
   <li>Phil to clean up the (Attic copy) version as shown above.</li>
   <li>Phil to verify that type extensions exist for system and requirements.</li>
   <li>A USE FROM placeholder for system_identification_and_version is to be placed in WD#2</li>
   <li>Results to be reviewed at PDES fall off-site.</li>
   </ol>

   <ul><li>Re. Analysis</li></ul>
   <ol>
   <li>Valencia agreement with AP210 was to remove all AP210 module_lite segments of WD#1</li>
   <li>Replace these with USE FROMs to unabridged AP210 modules</li>
   <li>Note that in the stepmod/etc/AP210 folder several fixes are defined for stepmod 
   modules used by the AP210 modules</li>
   <li>There was sufficient discussion on analysis to reveal that many analysis views exist with no 
   common agreement as to where the interface between Systems engineering and domain 
   engineering is to be placed.</li>
   <li>Harry to attempt to lay the puzzle pieces on the table.</li>
   <li>Need to create some example populations that expose/clarify the need for all views</li>
   <li>How to satisfy all.  What's really different about the different views of analysis need?</li>
   <li>AP233 FBB and SBB Behavior analysis view, linear analysis, AP210 analysis view, 
   AP209 analysis view, AP239 (verification) analysis view, decision making [rules of thumb, 
   peer reviews, negotiations, politics], etc.</li>
   <li>To be discussed at the PDES offsite</li>
   </ol>

   <ul><li>Re. Rules</li></ul>
   <ol>
   <li>Valencia agreement with AP210 was to remove all AP210 module_lite segments of WD#1</li>
   <li>No discussion on Rules at Rochester</li>
   </ol>
  

   <p><b>Change Log from base line AP233 WD#1:</b></p><ol>
   <li>WD#2 - Removed "Product_inteface" segment from arm.exp</li>
   <li>WD#2 - Added placeholder comment line "USE FROM System_identification_and_version_arm;</li>
   <li>WD#2 - Removed "System_engineering_system_breakdown" segment from arm.exp</li>
   <li>WD#2 - Added USE FROM physical_breakdown, system_breakdown, zonal_breakdown, </li>
   <li>WD#2 - Removed all _lite versions of AP210 analysis and rules modules.</li>
   <li>WD#2 - Added USE FROM Analytical_model, Characteristic, Model_parameter, Software</li>
   <li>WD#2 - Added USE FROM Production_rule</li>
   </ol>

   <p><b>Notes from AP233 WD1 - system_requirements</b></p>
   
      <p>A requirement is an imperative statement of reproducible observable 
   characteristics that a system shall exhibit. Requirements serve as the basis 
   for agreement between acquirer and supplier both legally and technically. They 
   are the basis for reviews. Reviews examine technical progress against the 
   requirements to be met. Review examination of expenditures 
   versus budget and progress versus schedule is meaningless unless technical 
   progress is meeting requirements.</p>
   
   <p> Requirements are the basis of both validation 
   and verification. When systems are modeled, the requirements serve as a "data 
   dictionary" for the meaning of many entities in the models. For example, 
   interface requirements are allocated to interface entities in the models. Such 
   capability is essential for the success of large projects with many cooperating 
   project organizations, hundreds of engineers and a large supply chain. </p>
   
   <p>Requirements are derived from other requirements and traceability among them is essential to 
   analyze the impact of changes to requirements or to the system. They may need to 
   be collected together in particular groups to support particular engineering tasks. 
   Requirements are created from information about the market that the system is to 
   serve, frequently from marketing and sales information. This information is 
   characterized as "stakeholder needs" in much of the systems engineering literature. 
   Measures of effectiveness (MOE), a special subclass of requirements, are those that are 
   so important that the system will succeed or fail based on them. These MOE’s are 
   used as or optimization criteria in deciding among design alternatives.</p>
   
   <p>This module is based upon the following generic STEP repository modules designed
   for requirements modelling. The modules which support text based requirments (TBR) 
   representation are:</p>
   <ul>
   <li><module_ref linkend="requirement_assignment:introduction"/>, </li>
   <li><module_ref linkend="requirement_identification_and_version:introduction"/>, </li>
   <li><module_ref linkend="requirement_view_definition:introduction"/>, </li>
   <li><module_ref linkend="requirement_view_definition_relationship:introduction"/>, </li></ul>
   <note>This module group is fully used by AP239</note>
  
   <p>The modules which support property based requirments (PBR) representation are:</p>
   <ul><li><module_ref linkend="binary_representation:introduction"/>, </li></ul>
   	<example>A product may be represented by a bitmap rendered image.</example>
   <ul><li><module_ref linkend="data_structure_representation:introduction"/>, </li></ul>
   	<example>For the representation of n-dimensional structures of representation items.  E.g.,
	Data files associated with complex graphical displays of test and/or analysis results.</example>
   <ul><li><module_ref linkend="encoded_text_representation:introduction"/>, </li></ul>
   	<example>A mechanism for representation using a web URI and a 
	method for relating String_representation_item instances.</example>
   <ul><li><module_ref linkend="textual_expression_representation:introduction"/>, </li></ul>
   	<example>For the representation of expressions in their native text format.</example>
   <ul><li><module_ref linkend="user_defined_attribute:introduction"/>, </li></ul>
   	<example>For user customized information added to their data in a manner allowed by 
	their engineering software tools</example>
   <note>This PBR module group is not currently used by AP239.  It enables the representation 
   of various system property representation formats beyond simple numerical values (e.g., test 
   and analysis graphical data and images, bitmaps, expressions, etc.).  
   These capabilities are essential to the domain of systems engineering.</note>

   <p>AP233 has needs that go beyond those of AP239.  It must interface requirements to all 
   other subdomains of systems engineeing.  It does this by providing for a well defined 
   requirements categorization capability and by measures of effectiveness.
   These capabilities are provided in: </p> 
    <ul><li><module_ref linkend="requirement_categorization:introduction"/>, </li></ul>
   
   <p>Requirments must also be allocated to other system representation information to 
   support the system engineering process.  All associated connectivity information 
   is provided for in the module:</p>
   <ul><li><module_ref linkend="system_requirements_connector:introduction"/>, </li>
   </ul>

   	
	<p><b>Notes extracted from Valencia and Rochester meetings summer 2005</b></p>
   <ul>
   <li>Extensive discussion relating to proposed WD#1 requirements work</li>
   <li>Agreed to use Phil's alternative to subtyping.  This will link with standardized reference
   data that the AP233 arm will use.</li>
   <li>Harry will use WD#1 concept model subtype names and map these into OWL via Protege
   with appropriate definitions.  Results will eventually become a Normative Annex to 
   the whole AP233 arm.</li>
   <li>Approach will allow INCOSE to create its own reference data</li>
   <li>Need to work this through so as to see the detail of what's really involved</li>
   <li>Agreed - remove subtypes from modules requirement_categorization and 
   requirement_model_assignment.</li>
   <li>Phil to rework these modules in accordance with external reference approach.</li>
   <li>Ensure that classified_item_select includes Requirements and System</li>
   <li>MOE (Measure of Effectiveness) in module requirement_categorization needs to be 
   pulled out and an MOE arm created.</li>
   <li>MOE will be removed as being a subtype of requirement_view_definition.</li>
   <li>The requirement_model_assignment module needs to be aligned with external 
   classification stuff</li>
   <li>All associated type extends need to be reworked</li>
   <li>The ball's in Phil's court to produce associated EXPRESS, work accomplished to be reviewed 
   at PDES offsite</li>
   </ul>

	<p><b>Notes on MOE's from David Oliver Sept 1, 2005</b></p>

	<p>In Rochester I agreed to take a cut at a module for MOE's separate from our requirements 
	modules. These are below. Note that like requirements, MOE's need versioning, collection, 
	and tracing. This is accomplished with three arms:</p><ul>
		<li>MOE identification and version arm</li>
		<li>Measure of effectiveness view definition arm</li>
		<li>MOE view definition relationship arm</li></ul>

	<p>These three arms essentially duplicate the similar requirements arms with entity name 
	changes. The special characteristics of MOE's are in </p><ul>
		<li>MOE weighting arm</li></ul>
		
	<p>An approach like this can be used. My own opinion is that it is more efficient modeling 
	to simply subclass MOE's to requirements as done in the top part of the existing 
	Requirements categorization arm. This replaces four arms and other relationships by the 
	subclass inheritance.</p>

	<p>However this is done, it is necessary for MOE's to be allocated to system, part, 
	product as realized, function, I/O, interface, etc. just as needed for requiremens. 
	Since Phil is doing this part for requirements we may be able to use the same approach 
	or get it from subclassing.</p>

	<p>I have assumed that alternative entities can be handled with versions. This probably 
	requires discussion in Myrtle Beach. Interested in your reactions.  Associated EXPRESS-G 
	figures follow:</p>
	
		<figure><title>MOE Identificatioin and version</title>
			<img src="MOE_ID.gif"/>	
		</figure>
	
		<figure><title>MOE view definition</title>
			<img src="MOE_VD.gif"/>	
		</figure>
	
		<figure><title>MOE view definition relationship</title>
			<img src="MOE_VDR.gif"/>	
		</figure>
	
		<figure><title>MOE weighting</title>
			<img src="MOE_W.gif"/>	
		</figure>
   
	<p><b>Notes on MOE's from Phil Spiby Sept 5, 2005</b></p>

	<p>I am left with a similar feeling to yourself, in that the structures we
	would need to support MoE are almost identical to the structures we need to
	support requirements.</p>
	
	<p>The feeling I have got from reading around MoEs is that there is
	disagreement in INCOSE about the difference between MoEs and requirements.
	The paper I believe separates MoEs and requirements is called "Coming to
	Grips with Measures of Effectiveness" by Noel Sproles and presented to
	INCOSE in 1998. This paper identifies the requirements as properties or
	characteristics which MUST be possessed by the solution. MoEs, on the other
	hand, identify property types or characteristic types which will be used to
	distinguish between the solutions in the solution space which meet the
	requirements.</p>
	
	<p>For example the requirements for a coffee cup could be that it holds 250ml
	of fluid at a temperature of 100C. An MoE could be the cost of production is
	minimized. Using this MoE would mean that all the potential solutions must
	include a figure of merit which identified that solutions production cost.</p>
	
	<p>If the above is true in your viewpoint then we have two options:</p>
	<ol>
	<li>Create an appropriate sub-type of the requirement structure</li>
	<li>Create another structure to represent MoEs</li></ol>
	
	<p>Issues:</p>
	<ol>
	<li>If we create a subtype, which entity should we subtype (requirement,
	requirement_version, requirement_view_definition). I can see an argument for
	creating the subtype under requirement_view_definition since if we included
	the weighting information here then different organisations could apply
	different weightings to the same MoE (as we discussed at Rochester)</li>
	<li>Should we call the structure requirement_measure to allow us to classify
	this as either MoE or MoP?</li>
	<li>Do we need any special support for assigning the type of property to the
	measure, or can we just use assigned_property?</li>
	<li>Do we need any specific support for assigning the figure of merit?</li></ol>
	
	<p><b>Notes on MOE's from David Oliver Sept 5, 2005</b></p>

	<p>If you ask a systems engineer if an MOE is a subclass of a requirement you will 
	be told: "No it is a different thing that is used to select among alternatives, to 
	optimize the system". If you look at the definitions in the Concept model you will 
	see that is exactly what they say.</p>
	
	<p>Further some people consider measures of performance to be similar to MOE'S, 
	and Six-Sigma calls them CTQ's, critical to quality. There are probably three or 
	four other names in use and not applied in a consistent way.</p>
	
	<p>It is from the perspective of modeling (not applications) that MOE's have the 
	same relationships as requirements plus additional attributes like weights. The 
	efficient way to model them is as a subclass of requirements - it is a classical 
	example of the utility of inheritance in information models.</p>
	
	<p>My suggestion is that we rename this thing decision_criteria, and let vendors 
	map MOE's, CTQ's etc to it in the tool interfaces. This lets us skip the application
	arguement that MOE's are not a kind of requirement and allows tool vendors to map 
	correctly to the information model. The subclass is used simply because it is 
	efficient in the information model world to use inheritance in the model. Our 
	definitions in the documentation, clause 4, can be consistent with the concept 
	model definitions, and make any application person happy.</p>
	
	<p>Incidentally decision criteria can be applied much more broadly than just in trade 
	studies, for example in the decision of which person to hire or which person to apply 
	to a project task. Another reason for generalizing the name in the AP233 model.</p>
	
	<p>I think we can resolve this quickly at PDES.</p>
	
	
		<p><b>Notes on MOE's from Phil Spiby Sept 8, 2005</b></p>
		
	<p>A couple of further discussion items on this issue.</p><ol>

	<li>In information modelling (as distinct to data modelling) the subtype
	relationship represents an "is a" relationship. So making decision_criteria
	a subtype of requirement defines that a decision_criteria IS A requirement.
	If this causes confusion in INCOSE then we may be making trouble for
	ourselves.</li>
	
	<li>I think that if we followed the requirement subtyping approach then we
	would have to subtype requirement, requirement_version and
	requirement_view_definition. This is nearly the same level of extension as
	you have done by creating subtypes of product, product_version and
	product_view_definition.</li>
	
	<li>My phraseology will probably let me down here but...
	The more I think about this I believe there are some implicit objects which
	are not being recognised here. In order to identify something as a decision
	criteria we are assuming that there is an activity which will be to make a
	decision. These criteria are therefore inputs into that activity. The
	weightings are properties which are assigned to the design criteria. </li></ol>
	
	<p>Given the above I am not entirely sure that we need to have any new
	structures to support these concepts. I think that we may be able to capture
	these semantics through appropriate usage of requirement, activity, their
	associated relationships and appropriate meta data (person and organisation
	assignment, property assignment etc.) </p>
	
	<p>I therefore repeat my call for some example data to try and represent this
	using the structures we have at present. If I am able to do this then I will
	present this at the Offsite meeting.</p>

	
	<p><b>Notes on MOE's from David Oliver Sept 9, 2005</b></p>

	<p>Using MOE as a sybtype of requirement is completely consistent with the concept 
	model. Most of our modeling is difficult to explain to some of the INCOSE membeers 
	because their traditional thinking is very different from that of information models. 
	I dont think your 1. is a matter of great concern.</p>

	<p>I agree with the subtyping you suggest in 2. That is what is most likely needed 
	in this approach.</p>

	<p>I dont agree with 3. I doubt that you can find optimization direction, weights and 
	a regulariation function in existing modules. If you get into representation of the 
	decision activity you are modeling a paarticular process. There are a multitude of 
	such processes all differing slightly, six sigma for example. Dont think that is a 
	good way to go. It will be interesting to see what you find when you look around for 
	support in existing modules. I look forward to seeing what you come up with.</p>

	<p>There is another point for discussion - the repressentation of alternatives. 
	I have assumed this can be accomplished by using versioning. Would be helpful 
	to have you think about this as you look about. One could set up a new concept 
	Altenatives or perhaps use a breakdown module to collect alternatives.</p>



</usage_guide>

</module>
