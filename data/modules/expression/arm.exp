(*
   $Id: mkmodule.js,v 1.21 2002/08/20 13:43:56 robbod Exp $
   N - ISO/CD-TS - 10303- Expression - EXPRESS ARM*)
(* UNDER DEVELOPMENT *)
SCHEMA Expression_arm;

USE FROM Generic_expression_arm;
USE FROM Numeric_function_arm;
USE FROM Value_with_unit_arm;
USE FROM Dimension_tolerance_arm;
USE FROM Measure_representation_arm;


TYPE property_variable_rep_select = SELECT
    (
      Size_dimension,
      Property_value_representation
    );
END_TYPE; -- property_variable_rep_select

TYPE expression_extension_select = SELECT
    (
      String_expression,
      Numeric_expression
    );
END_TYPE; -- expression_extension_select


ENTITY Expression
	ABSTRACT SUPERTYPE OF (ONEOF (Numeric_expression,Boolean_expression,String_expression))
	SUBTYPE OF (Generic_expression);
END_ENTITY;

ENTITY Variable
ABSTRACT SUPERTYPE OF (ONEOF (Numeric_variable,
				Boolean_variable,
					String_variable))
SUBTYPE OF(Generic_variable);
END_ENTITY;

ENTITY Numeric_variable
SUPERTYPE OF (ONEOF (Int_numeric_variable,
			          Real_numeric_variable))
SUBTYPE OF (Simple_numeric_expression, Variable);
--SUBTYPE OF (Variable);

WHERE 
	WR1:	('ISO13584_ExpressionS_SCHEMA.Int_numeric_variable' 
			IN TYPEOF(SELF) ) OR
			('ISO13584_ExpressionS_SCHEMA.Real_numeric_variable' 
			IN TYPEOF(SELF) );
END_ENTITY;

ENTITY Int_numeric_variable
SUBTYPE OF (Numeric_variable);
END_ENTITY;

ENTITY Real_numeric_variable
SUBTYPE OF (Numeric_variable);
END_ENTITY;

ENTITY Boolean_variable
SUBTYPE OF (Simple_boolean_expression, Variable);
--SUBTYPE OF (Variable);

END_ENTITY;

ENTITY String_variable
SUBTYPE OF (Simple_string_expression, Variable);
--SUBTYPE OF (Variable);
END_ENTITY;

ENTITY Numeric_expression
ABSTRACT SUPERTYPE OF (ONEOF (Simple_numeric_expression,
				Unary_numeric_expression,
				Binary_numeric_expression,
				Multiple_arity_numeric_expression,
				Length_function,
				Value_function))
SUBTYPE OF (Expression);
DERIVE
	is_int: BOOLEAN := Is_int_expr (SELF);
	--sql_mappable: BOOLEAN := Is_sql_mappable (SELF);
END_ENTITY;

ENTITY Simple_numeric_expression
ABSTRACT SUPERTYPE OF (ONEOF (Literal_number, Numeric_variable))
SUBTYPE OF (Numeric_expression, Simple_generic_expression);
END_ENTITY;

ENTITY Literal_number 
ABSTRACT SUPERTYPE OF (ONEOF (Int_literal, Real_literal))
SUBTYPE OF (Simple_numeric_expression, Generic_literal);
	the_value: NUMBER;
END_ENTITY;

ENTITY Int_literal
SUBTYPE OF (Literal_number);
	SELF\Literal_number.the_value: INTEGER;
END_ENTITY;

ENTITY Real_literal
SUBTYPE OF (Literal_number); 
	SELF\Literal_number.the_value: REAL;
END_ENTITY;

ENTITY Multiple_arity_numeric_expression
ABSTRACT SUPERTYPE OF (ONEOF (Plus_expression,
				Mult_expression,
				Multiple_arity_function_call))
SUBTYPE OF (Numeric_expression, Multiple_arity_generic_expression);
	SELF\Multiple_arity_generic_expression.operands	: LIST [2:?] OF 						Numeric_expression;
END_ENTITY;

ENTITY Plus_expression
	SUBTYPE OF (Multiple_arity_numeric_expression);
END_ENTITY;

ENTITY Mult_expression
	SUBTYPE OF (Multiple_arity_numeric_expression);
END_ENTITY;

ENTITY Multiple_arity_function_call
	ABSTRACT SUPERTYPE OF (ONEOF (Maximum_function, 
				Maximum_function))
	SUBTYPE OF (Multiple_arity_numeric_expression);
END_ENTITY;

ENTITY Maximum_function
	SUBTYPE OF (Multiple_arity_function_call);
END_ENTITY;

ENTITY Minimum_function
	SUBTYPE OF (Multiple_arity_function_call);
END_ENTITY;

ENTITY Binary_numeric_expression
	ABSTRACT SUPERTYPE OF (ONEOF (Minus_expression,
				Div_expression,
				Mod_expression,
				Slash_expression,
				Power_expression,
				Binary_function_call))
SUBTYPE OF (Numeric_expression, Binary_generic_expression);
	SELF\Binary_generic_expression.operands : LIST [2:2] OF Numeric_expression;
END_ENTITY;

ENTITY Minus_expression
	SUBTYPE OF (Binary_numeric_expression);
END_ENTITY;

ENTITY Div_expression
	SUBTYPE OF (Binary_numeric_expression);
END_ENTITY;

ENTITY Mod_expression
	SUBTYPE OF (Binary_numeric_expression);
END_ENTITY;

ENTITY Slash_expression
	SUBTYPE OF (Binary_numeric_expression);
END_ENTITY;

ENTITY Power_expression
	SUBTYPE OF (Binary_numeric_expression);
END_ENTITY;

ENTITY Binary_function_call
	ABSTRACT SUPERTYPE OF (ONEOF (Atan_function))
	SUBTYPE OF (Binary_numeric_expression);
END_ENTITY;


ENTITY Atan_function
	SUBTYPE OF (Binary_function_call);
END_ENTITY;

ENTITY Unary_numeric_expression
	ABSTRACT SUPERTYPE OF (ONEOF (Unary_function_call))
	SUBTYPE OF (Numeric_expression, Unary_generic_expression);	
		SELF\Unary_generic_expression.operand	: Numeric_expression;
END_ENTITY;

ENTITY String_expression
ABSTRACT SUPERTYPE OF (ONEOF (Simple_string_expression,
				Index_expression,
				Substring_expression,
				Concat_expression,
				Format_function,
				String_defined_function))
SUBTYPE OF (Expression);
END_ENTITY;

ENTITY Simple_string_expression
ABSTRACT SUPERTYPE OF (ONEOF (String_literal,String_variable))
SUBTYPE OF (String_expression, Simple_generic_expression);
END_ENTITY;

ENTITY String_literal
SUBTYPE OF (Simple_string_expression, Generic_literal);
	the_value: STRING;
END_ENTITY;

ENTITY Index_expression
SUBTYPE OF (String_expression, Binary_generic_expression);

--DERIVE
	--operand:Generic_expression:= SELF\Binary_generic_expression.operands[1];
	--index:Generic_expression:= SELF\Binary_generic_expression.operands[2];
--WHERE
--	WR1: ('ISO13584_ExpressionS_SCHEMA.String_expression' 
--			IN TYPEOF(operand))
--		AND ('ISO13584_ExpressionS_SCHEMA.Numeric_expression' 
--			IN TYPEOF(index));
--	WR2: is_int_expr (index);
END_ENTITY;

ENTITY Substring_expression
SUBTYPE OF (String_expression, Multiple_arity_generic_expression);

--DERIVE
--	operand:Generic_expression:=SELF\Multiple_arity_generic_expression.operands[1];
--	index1:Generic_expression:=SELF\Multiple_arity_generic_expression.operands[2];
--	index2:Generic_expression:=SELF\Multiple_arity_generic_expression.operands[3]; 
--WHERE
--	WR1: ('ISO13584_ExpressionS_SCHEMA.String_expression' 
--					IN TYPEOF(operand))
--			AND ('ISO13584_ExpressionS_SCHEMA.Numeric_expression' 
--					IN TYPEOF(index1))
--			AND ('ISO13584_ExpressionS_SCHEMA.Numeric_expression' 
--					IN TYPEOF(index2));
--	WR2: SIZEOF(SELF\Multiple_arity_generic_expression.operands)=3;
--	WR3: is_int_expr (index1);
--	WR4: is_int_expr (index2);
END_ENTITY;

ENTITY Concat_expression
SUBTYPE OF (String_expression, Multiple_arity_generic_expression);
	--SELF\Multiple_arity_generic_expression.operands: LIST [2 : ?] OF String_expression;
END_ENTITY;

ENTITY Format_function
SUBTYPE OF (String_expression, Binary_generic_expression);
--DERIVE
	--value_to_format: Generic_expression:=SELF\Binary_generic_expression.operands[1];
	--format_string:Generic_expression:=SELF\Binary_generic_expression.operands[2];
--WHERE
--	WR1: (('ISO13584_ExpressionS_SCHEMA.Numeric_expression') 
--					IN TYPEOF(value_to_format)) 
--			AND (('ISO13584_ExpressionS_SCHEMA.String_expression') 
--					IN TYPEOF(format_string));
END_ENTITY;

ENTITY Boolean_expression
ABSTRACT SUPERTYPE OF (ONEOF (Simple_boolean_expression,
				Unary_boolean_expression,
				Binary_boolean_expression,
				Multiple_arity_boolean_expression,
				Comparison_expression,
				Interval_expression,
				Boolean_defined_function))
SUBTYPE OF (Expression);
END_ENTITY;

ENTITY Simple_boolean_expression
ABSTRACT SUPERTYPE OF (ONEOF (Boolean_literal, Boolean_variable))
SUBTYPE OF (Boolean_expression, Simple_generic_expression);
END_ENTITY;

ENTITY Boolean_literal
SUBTYPE OF (Simple_boolean_expression, Generic_literal);
	the_value: BOOLEAN;
END_ENTITY;

ENTITY Unary_boolean_expression
ABSTRACT SUPERTYPE OF (ONEOF (Not_expression, Odd_function))
SUBTYPE OF (Boolean_expression, Unary_generic_expression);
END_ENTITY;

ENTITY Not_expression
SUBTYPE OF (Unary_boolean_expression);
SELF\Unary_generic_expression.operand: Boolean_expression;
END_ENTITY;

ENTITY Odd_function
SUBTYPE OF (Unary_boolean_expression);
	SELF\Unary_generic_expression.operand: Numeric_expression;
WHERE
	WR1: is_int_expr(SELF\Numeric_expression);
END_ENTITY;

ENTITY Binary_boolean_expression
ABSTRACT SUPERTYPE OF (ONEOF (Xor_expression, Equals_expression))
SUBTYPE OF (Boolean_expression, Binary_generic_expression);
END_ENTITY;

ENTITY Multiple_arity_boolean_expression
ABSTRACT SUPERTYPE OF (ONEOF (And_expression, Or_expression))
SUBTYPE OF (Boolean_expression, Multiple_arity_generic_expression);
	SELF\Multiple_arity_generic_expression.operands : LIST [2:?] OF Boolean_expression;
END_ENTITY;

ENTITY Xor_expression
SUBTYPE OF (Binary_boolean_expression);
	SELF\Binary_generic_expression.operands: LIST [2:2] OF Boolean_expression;
END_ENTITY;

ENTITY Equals_expression
SUBTYPE OF (Binary_boolean_expression);
END_ENTITY;

ENTITY And_expression
SUBTYPE OF (Multiple_arity_boolean_expression);
END_ENTITY;

ENTITY Or_expression
SUBTYPE OF (Multiple_arity_boolean_expression);
END_ENTITY;

ENTITY Comparison_expression
ABSTRACT SUPERTYPE OF (ONEOF (Comparison_equal,
				Comparison_greater,
				Comparison_greater_equal,
				Comparison_less,
				Comparison_less_equal,
				Comparison_not_equal,
				Like_expression))
SUBTYPE OF (Boolean_expression, Binary_generic_expression);
	SELF\Binary_generic_expression.operands	: LIST [2:2] OF Expression; 
WHERE 
	WR1: (
	('Numeric_expression_arm.Numeric_expression' 
		IN TYPEOF(SELF\Binary_generic_expression.operands[1]))
AND 
 	('Numeric_expression_arm.Numeric_expression' 
		IN TYPEOF(SELF\Binary_generic_expression.operands[2])))
OR
 	(('Boolean_expression_arm.Boolean_expression' 
		IN TYPEOF(SELF\Binary_generic_expression.operands[1]))
AND 
	('Boolean_expression_arm.Boolean_expression'
		IN TYPEOF(SELF\Binary_generic_expression.operands[2])))
OR
	(('String_expression_arm.String_expression'
		IN TYPEOF(SELF\Binary_generic_expression.operands[1]))
AND 
	('String_expression_arm.String_expression' 
		IN TYPEOF(SELF\Binary_generic_expression.operands[2])));
END_ENTITY;

ENTITY Comparison_equal
SUBTYPE OF (Comparison_expression);
END_ENTITY;

ENTITY Comparison_greater
SUBTYPE OF (Comparison_expression);
END_ENTITY;

ENTITY Comparison_greater_equal
SUBTYPE OF (Comparison_expression);
END_ENTITY;

ENTITY Comparison_less
SUBTYPE OF (Comparison_expression);
END_ENTITY;

ENTITY Comparison_less_equal
SUBTYPE OF (Comparison_expression);
END_ENTITY;

ENTITY Comparison_not_equal
	SUBTYPE OF (Comparison_expression);
END_ENTITY;

ENTITY Like_expression
SUBTYPE OF (Comparison_expression);
WHERE
	WR1: ('ISO13584_ExpressionS_SCHEMA.String_expression' 
		IN TYPEOF(SELF\Comparison_expression.operands[1])) AND 
		('ISO13584_ExpressionS_SCHEMA.String_expression' 
		IN TYPEOF(SELF\Comparison_expression.operands[2]));
END_ENTITY;

ENTITY Interval_expression
SUBTYPE OF (Boolean_expression, Multiple_arity_generic_expression) ;
DERIVE
	interval_low: Generic_expression
			:= SELF\Multiple_arity_generic_expression.operands[1];
	interval_item: Generic_expression
			:= SELF\Multiple_arity_generic_expression.operands[2];
	interval_high: Generic_expression
			:= SELF\Multiple_arity_generic_expression.operands[3];
WHERE
	WR1:('ISO13584_ExpressionS_SCHEMA.Expression' 
				IN TYPEOF(interval_low))
		AND ('ISO13584_ExpressionS_SCHEMA.Expression' 
				IN TYPEOF(interval_item) )
		AND ('ISO13584_ExpressionS_SCHEMA.Expression' 
				IN TYPEOF(interval_high));
	WR2:(('ISO13584_ExpressionS_SCHEMA.String_expression' 
				IN TYPEOF (SELF.interval_low)) 
			AND ('ISO13584_ExpressionS_SCHEMA.String_expression'  
				IN TYPEOF (SELF.interval_high)) 
			AND ('ISO13584_ExpressionS_SCHEMA.String_expression' 
				IN TYPEOF (SELF.interval_item))) 
		OR
		(('ISO13584_ExpressionS_SCHEMA.String_expression' 
			IN TYPEOF(SELF.interval_low)) 
			AND ('ISO13584_ExpressionS_SCHEMA.Numeric_expression' 
				IN TYPEOF(SELF.interval_item)) 
			AND ('ISO13584_ExpressionS_SCHEMA.Numeric_expression' 
				IN TYPEOF(SELF.interval_high)));
END_ENTITY;

--ENTITY Plib_functionality_extension;
--    functionality_extension: Generic_expression;
--END_ENTITY; -- Expression_extension  


ENTITY Expression_extension
    SUBTYPE OF (Value_with_unit);
    Expression_associated: expression_extension_select;
END_ENTITY; -- Expression_extension
 
ENTITY Variable_expression
    SUBTYPE OF (Variable_semantics);
    property_associated: property_variable_rep_select;
END_ENTITY; -- Variable_expression

ENTITY Length_function
	SUBTYPE OF (Numeric_expression, Unary_generic_expression);
	SELF\Unary_generic_expression.operand: String_expression;
END_ENTITY;

ENTITY Value_function
	SUPERTYPE OF (Int_value_function)
	SUBTYPE OF (Numeric_expression, Unary_generic_expression);
	SELF\Unary_generic_expression.operand: String_expression;
END_ENTITY;

ENTITY Int_value_function
	SUBTYPE OF (Value_function);
END_ENTITY;

ENTITY Sql_mappable_defined_function
	ABSTRACT SUPERTYPE
	SUBTYPE OF (Defined_function);
END_ENTITY;

ENTITY Defined_function
	ABSTRACT SUPERTYPE OF ((ONEOF (Numeric_defined_function,
				String_defined_function,
				Boolean_defined_function)
				)
				ANDOR Sql_mappable_defined_function);
END_ENTITY;

ENTITY Numeric_defined_function
	ABSTRACT SUPERTYPE OF (ONEOF (Integer_defined_function,
				Real_defined_function))
	SUBTYPE OF (Numeric_expression, Defined_function);
END_ENTITY;

ENTITY String_defined_function 
	ABSTRACT SUPERTYPE
	SUBTYPE OF (Defined_function, String_expression);
END_ENTITY ;

ENTITY Boolean_defined_function 
	ABSTRACT SUPERTYPE
	SUBTYPE OF (Defined_function, Boolean_expression);
END_ENTITY ;

ENTITY Integer_defined_function 
	ABSTRACT SUPERTYPE
	SUBTYPE OF (Numeric_defined_function);
END_ENTITY ;

ENTITY Real_defined_function 
	ABSTRACT SUPERTYPE
	SUBTYPE OF (Numeric_defined_function);
END_ENTITY ;

FUNCTION Is_int_expr (arg: Numeric_expression) : BOOLEAN;

LOCAL
	i: INTEGER;
END_LOCAL;

IF 'ISO13584_ExpressionS_SCHEMA.Int_literal' IN TYPEOF(arg) 
THEN 
	RETURN (TRUE); 
END_IF;
IF 'ISO13584_ExpressionS_SCHEMA.Real_literal' IN TYPEOF(arg) 
THEN 
	RETURN (FALSE); 
END_IF;
IF 'ISO13584_ExpressionS_SCHEMA.Int_numeric_variable' IN TYPEOF(arg) 
THEN 
	RETURN (TRUE); 
END_IF;
IF 'ISO13584_ExpressionS_SCHEMA.Real_numeric_variable' IN TYPEOF(arg) 
THEN 
	RETURN (FALSE); 
END_IF;
--IF 'ISO13584_ExpressionS_SCHEMA.ABS_FUNCTION' IN TYPEOF(arg) 
--THEN 
--	RETURN (Is_int_expr(arg\Unary_numeric_expression.operand));
--END_IF;
--IF 'ISO13584_ExpressionS_SCHEMA.MINUS_FUNCTION' IN TYPEOF(arg) 
--THEN 
--	RETURN (Is_int_expr(arg\Unary_numeric_expression.operand)); 
--END_IF;
IF ('ISO13584_ExpressionS_SCHEMA.SIN_FUNCTION' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.COS_FUNCTION' IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.TAN_FUNCTION' IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.ASIN_FUNCTION' IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.ACOS_FUNCTION' IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.Atan_function' IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.EXP_FUNCTION' IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.LOG_FUNCTION' IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.LOG2_FUNCTION' IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.LOG10_FUNCTION' IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.SQUARE_ROOT_FUNCTION' 
								IN TYPEOF(arg))
THEN 
	RETURN (FALSE);
END_IF;
IF 	('ISO13584_ExpressionS_SCHEMA.Plus_expression' IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.Mult_expression' 
								IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.Maximum_function'
								IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.Maximum_function'
								IN TYPEOF(arg)) 
THEN 
--	REPEAT i :=1 TO SIZEOF (
--			arg\Multiple_arity_numeric_expression.operands);
--	IF NOT 
--		Is_int_expr(arg\Multiple_arity_numeric_expression.operands[i]) 
--	THEN 
--		RETURN (FALSE);
--	END_IF;
--	END_REPEAT;
	RETURN (TRUE);
END_IF;
--IF 	('ISO13584_ExpressionS_SCHEMA.Minus_expression' IN TYPEOF(arg))
--		OR ('ISO13584_ExpressionS_SCHEMA.Power_expression' 
--								IN TYPEOF(arg))
--THEN 
--	RETURN (Is_int_expr(arg\Binary_numeric_expression.operands[1])
--		AND Is_int_expr(arg\Binary_numeric_expression.operands[2]));
--END_IF;
IF	('ISO13584_ExpressionS_SCHEMA.Div_expression' IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.Mod_expression' IN TYPEOF(arg))
THEN 
	RETURN(TRUE);	
END_IF;
IF 'ISO13584_ExpressionS_SCHEMA.Slash_expression' IN TYPEOF(arg) 
THEN 
	RETURN (FALSE); 	
END_IF;
IF 'ISO13584_ExpressionS_SCHEMA.Length_function' IN TYPEOF(arg) 
THEN 
	RETURN (TRUE); 
END_IF;
IF 'ISO13584_ExpressionS_SCHEMA.Value_function' IN TYPEOF(arg) 
THEN 
	IF 'ISO13584_ExpressionS_SCHEMA.Int_value_function' 
								IN TYPEOF(arg) 
	THEN 
		RETURN (TRUE); 
	ELSE 
		RETURN (FALSE); 
	END_IF;
END_IF;
IF 'ISO13584_ExpressionS_SCHEMA.Integer_defined_function' 
								IN TYPEOF(arg)
THEN 
	RETURN(TRUE) ;
END_IF;
IF'ISO13584_ExpressionS_SCHEMA.Real_defined_function' IN TYPEOF(arg) 
THEN 
	RETURN(FALSE) ;
END_IF ;
IF 'ISO13584_ExpressionS_SCHEMA.Boolean_defined_function' 
								IN TYPEOF(arg)
THEN 
	RETURN(FALSE) ;
END_IF ;
IF 'ISO13584_ExpressionS_SCHEMA.String_defined_function' 
								IN TYPEOF(arg)
THEN 
	RETURN (FALSE) ;
END_IF ;

RETURN (FALSE);

END_FUNCTION; -- Is_int_expr
(*
FUNCTION Is_sql_mappable (arg: Expression) : BOOLEAN;

LOCAL
	i: INTEGER;
END_LOCAL;

IF 'ISO13584_ExpressionS_SCHEMA.Simple_numeric_expression' 
								IN TYPEOF (arg) 
THEN 
	RETURN (TRUE);
END_IF;
IF 'ISO13584_ExpressionS_SCHEMA.Sql_mappable_defined_function' 
								IN TYPEOF (arg) 
THEN 
	RETURN (TRUE);
END_IF;
--IF 'ISO13584_ExpressionS_SCHEMA.MINUS_FUNCTION' IN TYPEOF(arg) 
--THEN 
--	RETURN (Is_sql_mappable(arg\Unary_numeric_expression.operand)); 
--END_IF;
IF ('ISO13584_ExpressionS_SCHEMA.ABS_FUNCTION' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.SIN_FUNCTION' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.COS_FUNCTION' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.TAN_FUNCTION' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.ASIN_FUNCTION' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.ACOS_FUNCTION' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.Atan_function' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.EXP_FUNCTION' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.LOG_FUNCTION' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.LOG2_FUNCTION' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.LOG10_FUNCTION' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.SQUARE_ROOT_FUNCTION' 
								IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.Value_function' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.Length_function' 
								IN TYPEOF(arg))
THEN 
	RETURN (FALSE);
END_IF;
--IF ('ISO13584_ExpressionS_SCHEMA.Plus_expression' IN TYPEOF(arg)) 
--		OR('ISO13584_ExpressionS_SCHEMA.Mult_expression' IN TYPEOF(arg)) 
--		OR('ISO13584_ExpressionS_SCHEMA.Maximum_function' 
--								IN TYPEOF(arg)) 
--		OR('ISO13584_ExpressionS_SCHEMA.Maximum_function' 
--								IN TYPEOF(arg)) 
--THEN 
--	REPEAT i :=1 TO SIZEOF (
--			arg\Multiple_arity_numeric_expression.operands);
--		IF NOT Is_sql_mappable(
--			arg\Multiple_arity_numeric_expression.operands[i])
--		THEN 
--			RETURN (FALSE);
--		END_IF;
--	END_REPEAT;
--RETURN (TRUE);
--END_IF;
--IF ('ISO13584_ExpressionS_SCHEMA.Minus_expression' IN TYPEOF(arg)) 
--		OR ('ISO13584_ExpressionS_SCHEMA.Slash_expression' IN 
--								TYPEOF(arg))
--THEN
--		RETURN (Is_sql_mappable(
--			arg\Binary_numeric_expression.operands[1])
--		AND Is_sql_mappable(arg\Binary_numeric_expression.operands[2]));
--END_IF;
IF ('ISO13584_ExpressionS_SCHEMA.Div_expression' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.Mod_expression' IN TYPEOF(arg)) 
		OR('ISO13584_ExpressionS_SCHEMA.Power_expression' 
								IN TYPEOF(arg))
THEN 
	RETURN (FALSE); 	
END_IF;
IF 'ISO13584_ExpressionS_SCHEMA.Simple_boolean_expression' 
								IN TYPEOF (arg) 
THEN 
	RETURN (TRUE);
END_IF;
--IF 'ISO13584_ExpressionS_SCHEMA.Not_expression' IN TYPEOF (arg) 
--THEN 
--	RETURN (Is_sql_mappable (arg\Unary_generic_expression.OPERAND));
--END_IF;
IF ('ISO13584_ExpressionS_SCHEMA.Odd_function'IN TYPEOF (arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.Xor_expression' 
								IN TYPEOF (arg)) 
THEN	
	RETURN (FALSE);
END_IF;
--IF ('ISO13584_ExpressionS_SCHEMA.And_expression' IN TYPEOF (arg)) 
--		OR ('ISO13584_ExpressionS_SCHEMA.Or_expression' IN TYPEOF (arg)) 
--THEN
--	REPEAT i:=1 TO SIZEOF (
--			arg\Multiple_arity_boolean_expression.OPERANDS);
--		IF NOT Is_sql_mappable (
--			arg\Multiple_arity_boolean_expression.OPERANDS[i]) 
--		THEN 
--			RETURN (FALSE);
--		END_IF;
--	END_REPEAT;
--	RETURN (TRUE);
--END_IF;
--IF 'ISO13584_ExpressionS_SCHEMA.Equals_expression' IN TYPEOF (arg) 
--THEN
--	RETURN(Is_sql_mappable (
--			arg\Binary_generic_expression.OPERANDS [1])
--		AND Is_sql_mappable(
--			arg\Binary_generic_expression.OPERANDS [2]));
--END_IF;
--IF	('ISO13584_ExpressionS_SCHEMA.Comparison_equal' IN TYPEOF (arg)) 
--		OR ('ISO13584_ExpressionS_SCHEMA.Comparison_greater' 
--								IN TYPEOF (arg)) 
--		OR ('ISO13584_ExpressionS_SCHEMA.Comparison_greater_equal'
--								IN TYPEOF (arg))
--		OR ('ISO13584_ExpressionS_SCHEMA.Comparison_less' 
--								IN TYPEOF (arg)) 
--		OR ('ISO13584_ExpressionS_SCHEMA.Comparison_less_equal' 
--								IN TYPEOF (arg)) 
--		OR ('ISO13584_ExpressionS_SCHEMA.Comparison_not_equal' 
--								IN TYPEOF (arg)) 
--		OR ('ISO13584_ExpressionS_SCHEMA.Like_expression' 
--								IN TYPEOF (arg)) 
--THEN
--	RETURN (Is_sql_mappable (arg\Comparison_expression.OPERANDS[1])
--		AND Is_sql_mappable (arg\Comparison_expression.OPERANDS[2]));
--END_IF;
--IF 'ISO13584_ExpressionS_SCHEMA.Interval_expression' IN TYPEOF(arg) 
--THEN 
--	RETURN (Is_sql_mappable(arg\Interval_expression.interval_low) 
--		AND Is_sql_mappable(arg\Interval_expression.interval_high)
--		AND Is_sql_mappable(arg\Interval_expression.interval_item));
--END_IF;
IF ('ISO13584_ExpressionS_SCHEMA.Numeric_defined_function' 
								IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.Boolean_defined_function' 
								IN TYPEOF(arg))
		OR ('ISO13584_ExpressionS_SCHEMA.String_defined_function' 
								IN TYPEOF(arg))  
THEN 
		RETURN (FALSE) ;
END_IF;

IF 'ISO13584_ExpressionS_SCHEMA.Simple_string_expression' 
								IN TYPEOF(ARG) 
THEN 
	RETURN (TRUE);
END_IF;
IF 	('ISO13584_ExpressionS_SCHEMA.Index_expression' IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.Substring_expression' 
								IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.Concat_expression' 
								IN TYPEOF(arg)) 
		OR ('ISO13584_ExpressionS_SCHEMA.Format_function' 
								IN TYPEOF(arg)) 
THEN 
	RETURN (FALSE);
END_IF;

	RETURN (FALSE);
END_FUNCTION; -- Is_sql_mappable
*)

END_SCHEMA;
