<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express description.file="arm_descriptions.xml" language_version="2" rcs.date="$Date$" rcs.revision="$Revision$" reference="ISO/TS 10303-1342">
   <application name="JSDAI" owner="LKSoft" source="expression_arm schema_instance" url="www.lksoft.com" version="4.0 beta"/>
   <schema name="Expression_arm">
      <interface kind="use" schema="Numeric_expression_arm"/>
      <interface kind="reference" schema="Numeric_expression_arm">
         <interfaced.item name="Is_int_expr"/>
      </interface>
      <entity name="Concat_expression" supertypes="String_expression Multiple_arity_generic_expression">
         <explicit name="operands">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="String_expression"/>
            <redeclaration entity-ref="Multiple_arity_generic_expression"/>
         </explicit>
      </entity>
      <entity name="Format_function" supertypes="String_expression Binary_generic_expression">
         <derived expression="SELF\Binary_generic_expression.operands[1]" name="value_to_format">
            <typename name="Generic_expression"/>
         </derived>
         <derived expression="SELF\Binary_generic_expression.operands[2]" name="format_string">
            <typename name="Generic_expression"/>
         </derived>
         <where expression="(('EXPRESSION_ARM.NUMERIC_EXPRESSION')&#10; &#9;IN TYPEOF(value_to_format))&#10; &#9;AND (('EXPRESSION_ARM.STRING_EXPRESSION')&#10; &#9;IN TYPEOF(format_string))" label="WR1"/>
      </entity>
      <entity name="Index_expression" supertypes="String_expression Binary_generic_expression">
         <derived expression="SELF\Binary_generic_expression.operands[1]" name="operand">
            <typename name="Generic_expression"/>
         </derived>
         <derived expression="SELF\Binary_generic_expression.operands[2]" name="index">
            <typename name="Generic_expression"/>
         </derived>
         <where expression="('EXPRESSION_ARM.STRING_EXPRESSION' IN TYPEOF(operand))&#10; &#9;AND ('NUMERIC_EXPRESSION_ARM.NUMERIC_EXPRESSION' IN TYPEOF(index))" label="WR1"/>
         <where expression="is_int_expr (index)" label="WR2"/>
      </entity>
      <entity name="Like_expression" supertypes="Comparison_expression">
         <where expression="('EXPRESSION_ARM.STRING_EXPRESSION'&#10; &#9;IN TYPEOF(SELF\Comparison_expression.operands[1])) AND&#10; &#9;('EXPRESSION_ARM.STRING_EXPRESSION'&#10; &#9;IN TYPEOF(SELF\Comparison_expression.operands[2]))" label="WR1"/>
      </entity>
      <entity abstract.supertype="YES" name="Simple_string_expression" super.expression="ONEOF (String_literal, String_variable)" supertypes="String_expression Simple_generic_expression"/>
      <entity abstract.supertype="YES" name="Sql_mappable_defined_function" supertypes="Defined_function"/>
      <entity abstract.supertype="YES" name="String_defined_function" supertypes="Defined_function String_expression"/>
      <entity abstract.supertype="YES" name="String_expression" super.expression="ONEOF (Simple_string_expression, Index_expression, Substring_expression, Concat_expression, Format_function, String_defined_function)" supertypes="Expression"/>
      <entity name="String_literal" supertypes="Simple_string_expression Generic_literal">
         <explicit name="the_value">
            <builtintype type="STRING"/>
         </explicit>
      </entity>
      <entity name="String_variable" supertypes="Simple_string_expression Variable"/>
      <entity name="Substring_expression" supertypes="String_expression Multiple_arity_generic_expression">
         <derived expression="SELF\Multiple_arity_generic_expression.operands[1]" name="operand">
            <typename name="Generic_expression"/>
         </derived>
         <derived expression="SELF\Multiple_arity_generic_expression.operands[2]" name="index1">
            <typename name="Generic_expression"/>
         </derived>
         <derived expression="SELF\Multiple_arity_generic_expression.operands[3]" name="index2">
            <typename name="Generic_expression"/>
         </derived>
         <where expression="('EXPRESSION_ARM.STRING_EXPRESSION'&#10; &#9;IN TYPEOF(operand))&#10; &#9;AND ('EXPRESSION_ARM.NUMERIC_EXPRESSION'&#10; &#9;IN TYPEOF(index1))&#10; &#9;AND ('EXPRESSION_ARM.NUMERIC_EXPRESSION'&#10; &#9;IN TYPEOF(index2))" label="WR1"/>
         <where expression="SIZEOF(SELF\Multiple_arity_generic_expression.operands)=3" label="WR2"/>
         <where expression="is_int_expr (index1)" label="WR3"/>
         <where expression="is_int_expr (index2)" label="WR4"/>
      </entity>
   </schema>
</express>
