<?xml version="1.0"?> 
<!-- hand edited  by Ray Goult to split out numeric expression module -->
<?xml-stylesheet type="text/xsl" 
  href="../../../xsl/descriptions.xsl"?>
<!DOCTYPE ext_descriptions SYSTEM "../../../dtd/description.dtd">
<ext_descriptions module_directory="expression" schema_file="arm.xml" describe.selects="YES" describe.subtype_constraints="YES" rcs.date="$Date: 2007/09/17 18:22:10 $" rcs.revision="$Revision: 1.30 $">
	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Schema: Expression_arm
   <express_ref linkend="expression:arm:Expression_arm"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<ext_description linkend="Expression_arm">The <b>Expression </b>module represents expression itself. It can represent a numeric, boolean and a string expression.
</ext_description>
	
  
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Concat_expression  
   <express_ref linkend="expression:arm:Expression_arm.Concat_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Concat_expression">A <b>Concat_expression</b> is a type of <express_ref linkend="expression:arm:Expression_arm.String_expression"/> and <express_ref linkend="generic_expression:arm:Generic_expression_arm.Multiple_arity_generic_expression"/> . It carries the semantics of the concatenation ('+') operator defined in ISO 10303-11, on the STRING data type defined in ISO 10303-11.<note>
			<p> The <b>Concat_expression</b> operator accepts at least two <express_ref linkend="expression:arm:Expression_arm.String_expression"/> as operands and evaluates to a string value resulting from the concatenation of all the elements of the  <express_ref linkend="generic_expression:arm:Generic_expression_arm.Multiple_arity_generic_expression.operands"/> list. These elements are concatenated in the list order.   </p>
		</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Concat_expression  Attribute: operands 
   <express_ref linkend="expression:arm:Expression_arm.Concat_expression.operands"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Concat_expression.operands">the <express_ref linkend="expression:arm:Expression_arm.String_expression"/> to be concatenated. 
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Format_function  
   <express_ref linkend="expression:arm:Expression_arm.Format_function"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Format_function">A <b>Format_function</b> is a type of <express_ref linkend="expression:arm:Expression_arm.String_expression"/> and <express_ref linkend="generic_expression:arm:Generic_expression_arm.Binary_generic_expression"/>. It carries the semantics of the FORMAT function  defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Format_function  Attribute: value_to_format 
   <express_ref linkend="expression:arm:Expression_arm.Format_function.value_to_format"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Format_function.value_to_format">the <express_ref linkend="numeric_expression:arm:Numeric_expression_arm.Numeric_expression"/> to be formatted.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Format_function  Attribute: format_string 
   <express_ref linkend="expression:arm:Expression_arm.Format_function.format_string"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Format_function.format_string">the formatting commands that defines the appearance of the result.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Format_function  Where: WR1 
   <express_ref linkend="expression:arm:Expression_arm.Format_function.wr:WR1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Format_function.wr:WR1">the <express_ref linkend="expression:arm:Expression_arm.Format_function.value_to_format"/> shall be a <express_ref linkend="numeric_expression:arm:Numeric_expression_arm.Numeric_expression"/> and the <express_ref linkend="expression:arm:Expression_arm.Format_function.format_string"/> shall be a <express_ref linkend="expression:arm:Expression_arm.String_expression"/>.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Index_expression  
   <express_ref linkend="expression:arm:Expression_arm.Index_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Index_expression">An <b>Index_expression</b> is a type of <express_ref linkend="expression:arm:Expression_arm.String_expression"/> and <express_ref linkend="generic_expression:arm:Generic_expression_arm.Binary_generic_expression"/>. It carries the semantics of the string indexing operator ('[]') defined in ISO 10303-11.<note>
			<p>The <b>Index_expression</b> string operator takes two operands, the string value (represented by the <express_ref linkend="expression:arm:Expression_arm.Index_expression.operand"/> attribute) being indexed by the index specification (represented by the <express_ref linkend="expression:arm:Expression_arm.Index_expression.index"/> attribute). The resulting string value is the character at position the value of the <express_ref linkend="expression:arm:Expression_arm.Index_expression.index"/> operator.</p>
		</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Index_expression  Attribute: operand 
   <express_ref linkend="expression:arm:Expression_arm.Index_expression.operand"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Index_expression.operand">the <express_ref linkend="expression:arm:Expression_arm.String_expression"/> that represents the STRING.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Index_expression  Attribute: index 
   <express_ref linkend="expression:arm:Expression_arm.Index_expression.index"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Index_expression.index">the integer <express_ref linkend="numeric_expression:arm:Numeric_expression_arm.Numeric_expression"/> that indicates the index value.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Index_expression  Where: WR1 
   <express_ref linkend="expression:arm:Expression_arm.Index_expression.wr:WR1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Index_expression.wr:WR1">the first operand shall be a <express_ref linkend="expression:arm:Expression_arm.String_expression"/> and the second operand shall be a <express_ref linkend="numeric_expression:arm:Numeric_expression_arm.Numeric_expression"/>.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Index_expression  Where: WR2 
   <express_ref linkend="expression:arm:Expression_arm.Index_expression.wr:WR2"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Index_expression.wr:WR2">the position described by the index operand shall be an integer value.
</ext_description>

	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Like_expression  
   <express_ref linkend="expression:arm:Expression_arm.Like_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Like_expression">A <b>Like_expression</b> is a type of <express_ref linkend="numeric_expression:arm:Numeric_expression_arm.Comparison_expression"/>. It carries the semantics of the LIKE string matching operator defined in ISO 10303-11. The first operand is the target string. The second operand is the pattern string. The special characters (often called "wild cards") in the pattern string are defined in ISO 10303-11</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Like_expression  Where: WR1 
   <express_ref linkend="expression:arm:Expression_arm.Like_expression.wr:WR1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Like_expression.wr:WR1">the operand list shall contain two <express_ref linkend="generic_expression:arm:Generic_expression_arm.Generic_expression"/>s instances that are <express_ref linkend="expression:arm:Expression_arm.String_expression"/>.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Simple_string_expression  
   <express_ref linkend="expression:arm:Expression_arm.Simple_string_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Simple_string_expression">A <b>Simple_string_expression</b> is a type of <express_ref linkend="numeric_expression:arm:Numeric_expression_arm.Expression"/> and is an unary operator of  whose  range is EXPRESS STRING data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: String_defined_function  
   <express_ref linkend="expression:arm:Expression_arm.String_defined_function"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
 	<ext_description linkend="Expression_arm.String_defined_function">A <b>String_defined_function</b> is a type of <express_ref linkend="numeric_expression:arm:Numeric_expression_arm.Defined_function"/> and <express_ref linkend="expression:arm:Expression_arm.String_expression"/>. It is any application-defined operator of which the range is the STRING data type defined in ISO 10303-11.</ext_description>

 	<!-- 
   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Schema: Expression_arm  Entity: Sql_mappable_defined_function  
    <express_ref linkend="expression:arm:Expression_arm.Sql_mappable_defined_function"/>
   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
   -->
 	<ext_description linkend="Expression_arm.Sql_mappable_defined_function">A <b>Sql_mappable_defined_function</b> is a type of <express_ref linkend="numeric_expression:arm:Numeric_expression_arm.Defined_function"/>. It is a  function intended to be subtyped in the information models that use the <express_ref linkend="ISO13584_expressions_schema:ir_express:ISO13584_expressions_schema">ISO13584_expressions_schema</express_ref> to specify that some <express_ref linkend="generic_expression:arm:Generic_expression_arm.Generic_expression"/> is mappable onto SQL, defined in ISO/IEC 9075:1992.</ext_description>



	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: String_expression  
   <express_ref linkend="expression:arm:Expression_arm.String_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.String_expression">A <b>String_expression</b> is a type of <express_ref linkend="numeric_expression:arm:Numeric_expression_arm.Expression"/> and whose range is the EXPRESS STRING data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: String_literal  
   <express_ref linkend="expression:arm:Expression_arm.String_literal"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.String_literal">A <b>String_literal</b> is a type of <express_ref linkend="expression:arm:Expression_arm.Simple_string_expression"/> and <express_ref linkend="generic_expression:arm:Generic_expression_arm.Generic_literal"/>. It is an EXPRESS STRING literal.<note>The EXPRESS STRING data type has as its domain sequences of characters.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: String_literal  Attribute: the_value 
   <express_ref linkend="expression:arm:Expression_arm.String_literal.the_value"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.String_literal.the_value">a STRING literal value.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: String_variable  
   <express_ref linkend="expression:arm:Expression_arm.String_variable"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.String_variable">A <b>String_variable</b> is a type of <express_ref linkend="expression:arm:Expression_arm.Simple_string_expression"/> and <express_ref linkend="generic_expression:arm:Generic_expression_arm.Variable"/>. It is a variable that stands for a STRING value.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Substring_expression  
   <express_ref linkend="expression:arm:Expression_arm.Substring_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Substring_expression">A <b>Substring_expression</b> is a type of <express_ref linkend="expression:arm:Expression_arm.String_expression"/> and <express_ref linkend="generic_expression:arm:Generic_expression_arm.Multiple_arity_generic_expression"/>. It carries the semantics of the EXPRESS substring indexing operator ('[:]') defined in ISO 10303-11.<note>
			<p>The <b>Substring_expression</b> string operator takes three operands, the string value (represented by the <express_ref linkend="expression:arm:Expression_arm.Substring_expression.operand"/> attribute) being indexed by the index specification (represented by the <express_ref linkend="expression:arm:Expression_arm.Substring_expression.index1"/> and <express_ref linkend="expression:arm:Expression_arm.Substring_expression.index2"/> attributes). The <b>Substring_expression</b> evaluates to a string value of length (<express_ref linkend="expression:arm:Expression_arm.Substring_expression.index2"/> - <express_ref linkend="expression:arm:Expression_arm.Substring_expression.index1"/> + 1). The resulting string value is equivalent to the sequence of characters at position <express_ref linkend="expression:arm:Expression_arm.Substring_expression.index1"/>through <express_ref linkend="expression:arm:Expression_arm.Substring_expression.index2"/>. </p>
		</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Substring_expression  Attribute: operand 
   <express_ref linkend="expression:arm:Expression_arm.Substring_expression.operand"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Substring_expression.operand">the <express_ref linkend="expression:arm:Expression_arm.String_expression"/> from which a substring is extracted.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Substring_expression  Attribute: index1 
   <express_ref linkend="expression:arm:Expression_arm.Substring_expression.index1"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Substring_expression.index1">the <express_ref linkend="numeric_expression:arm:Numeric_expression_arm.Numeric_expression"/> that indicates the low bound of the substring in <express_ref linkend="expression:arm:Expression_arm.Index_expression.operand"/>.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Substring_expression  Attribute: index2 
   <express_ref linkend="expression:arm:Expression_arm.Substring_expression.index2"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Substring_expression.index2">the <express_ref linkend="numeric_expression:arm:Numeric_expression_arm.Numeric_expression"/> that indicates the high bound of the substring in <express_ref linkend="expression:arm:Expression_arm.Index_expression.operand"/>.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Substring_expression  Where: WR1 
   <express_ref linkend="expression:arm:Expression_arm.Substring_expression.wr:WR1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Substring_expression.wr:WR1">operand shall be a <express_ref linkend="expression:arm:Expression_arm.String_expression"/>, index1 and index2 shall be a <express_ref linkend="numeric_expression:arm:Numeric_expression_arm.Numeric_expression"/>.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Substring_expression  Where: WR2 
   <express_ref linkend="expression:arm:Expression_arm.Substring_expression.wr:WR2"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Substring_expression.wr:WR2">the <express_ref linkend="expression:arm:Expression_arm.Substring_expression"/> operands LIST shall contain three elements.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Substring_expression  Where: WR3 
   <express_ref linkend="expression:arm:Expression_arm.Substring_expression.wr:WR3"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Substring_expression.wr:WR3">the <express_ref linkend="expression:arm:Expression_arm.Substring_expression.index1"/> shall evaluate to an INTEGER value.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Expression_arm  Entity: Substring_expression  Where: WR4 
   <express_ref linkend="expression:arm:Expression_arm.Substring_expression.wr:WR4"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Expression_arm.Substring_expression.wr:WR4">the <express_ref linkend="expression:arm:Expression_arm.Substring_expression.index2"/> shall evaluate to an INTEGER value.
</ext_description>

</ext_descriptions>

