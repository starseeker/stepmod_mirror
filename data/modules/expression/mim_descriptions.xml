<?xml version="1.0"?>
<!-- edited with XML Spy v4.3 U (http://www.xmlspy.com) by olavo (uninova) -->
<?xml-stylesheet type="text/xsl" 
  href="../../../xsl/descriptions.xsl"?>
<!DOCTYPE ext_descriptions SYSTEM "../../../dtd/description.dtd">
<ext_descriptions module_directory="expression" schema_file="mim.xml" describe.selects="YES" rcs.date="$Date: 2002/11/06 23:24:54 $" rcs.revision="$Revision: 1.9 $">
	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Schema: expression_mim
   <express_ref linkend="expression:mim:expression_mim"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<ext_description linkend="expression_mim">The <b>expression </b>module represents expression itself. It can represent a numeric, boolean and a string expression.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: expression  
   <express_ref linkend="expression:mim:expression_mim.expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.expression">The <b>expression </b>module represents expression itself. It can represent a numeric, boolean and a string expression.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: numeric_variable  
   <express_ref linkend="expression:mim:expression_mim.numeric_variable"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.numeric_variable">A <b>numeric_variable </b>is a variable that stands for a number value.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: numeric_variable  Where: WR1 
   <express_ref linkend="expression:mim:expression_mim.numeric_variable.wr:WR1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.numeric_variable.wr:WR1">A <b>numeric_variable</b> can only be a real variable or an integer variable. </ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: int_numeric_variable  
   <express_ref linkend="expression:mim:expression_mim.int_numeric_variable"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.int_numeric_variable">An <b>int_numeric_variable </b>is a variable that stands for an integer value.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: real_numeric_variable  
   <express_ref linkend="expression:mim:expression_mim.real_numeric_variable"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.real_numeric_variable">A <b>real_numeric_variable </b>is a variable that stands for a real value.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: boolean_variable  
   <express_ref linkend="expression:mim:expression_mim.boolean_variable"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.boolean_variable">A <b>boolean_variable </b> is a variable that stands for a Boolean value.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: string_variable  
   <express_ref linkend="expression:mim:expression_mim.string_variable"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.string_variable">A <b>string_variable </b>is a variable that stands for a STRING value.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: numeric_expression  
   <express_ref linkend="expression:mim:expression_mim.numeric_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.numeric_expression">A <b>numeric_expression </b>is an expression of which the range is the NUMBER data type defined in  8.1.1 of ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: numeric_expression  Attribute: is_int 
   <express_ref linkend="expression:mim:expression_mim.numeric_expression.is_int"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.numeric_expression.is_int">a Boolean attribute that indicates if an expression evaluates to integer or not. </ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: simple_numeric_expression  
   <express_ref linkend="expression:mim:expression_mim.simple_numeric_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.simple_numeric_expression">A <b>simple_numeric_expression </b>is either a numeric literal or a numeric variable</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: literal_number  
   <express_ref linkend="expression:mim:expression_mim.literal_number"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.literal_number">A <b>literal_number </b>is an EXPRESS NUMBER literal . A <b>literal_number </b>may be either an integer literal or a real literal.<note>The EXPRESS NUMBER data type has the numeric values as domain</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: literal_number  Attribute: the_value 
   <express_ref linkend="expression:mim:expression_mim.literal_number.the_value"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.literal_number.the_value">a NUMBER literal value. </ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: int_literal  
   <express_ref linkend="expression:mim:expression_mim.int_literal"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.int_literal">An <b>int_literal </b>is an EXPRESS INTEGER literal.<note>An EXPRESS INTEGER literal represents an integer VALUE that is composed of one or more digits. </note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: int_literal  Attribute: the_value 
   <express_ref linkend="expression:mim:expression_mim.int_literal.the_value"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.int_literal.the_value">an INTEGER literal value.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: real_literal  
   <express_ref linkend="expression:mim:expression_mim.real_literal"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.real_literal">A <b>real_literal </b>is an EXPRESS REAL literal.<note>An EXPRESS REAL literal represents a real VALUE that is composed of a mantissa and an optional exponent; the mantissa shall include a decimal point. </note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: real_literal  Attribute: the_value 
   <express_ref linkend="expression:mim:expression_mim.real_literal.the_value"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.real_literal.the_value">a REAL literal value.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: multiple_arity_numeric_expression  
   <express_ref linkend="expression:mim:expression_mim.multiple_arity_numeric_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.multiple_arity_numeric_expression">A <b>multiple_arity_numeric_expression </b>is a multiple arity operator whose range is the NUMBER data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: multiple_arity_numeric_expression  Attribute: operands 
   <express_ref linkend="expression:mim:expression_mim.multiple_arity_numeric_expression.operands"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.multiple_arity_numeric_expression.operands">A list containing the parameters of the multiple arity operator. The length of this list is equal to the arity of the operator. </ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: plus_expression  
   <express_ref linkend="expression:mim:expression_mim.plus_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.plus_expression">The <b>plus_expression </b>entity carries the semantics of the '+' operator, defined in ISO 10303-11, on NUMBER data type.<note>The plus_expression is an expression which evaluates to the sum of all its operands. In the ISO13584_expression_schema, all these operands shall evaluate to a number in the number data type domain.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: mult_expression  
   <express_ref linkend="expression:mim:expression_mim.mult_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.mult_expression">The <b>minus_expression </b>entity carries the semantics of the '-' operator, defined in ISO 10303-11, on NUMBER data type.<note>The minus_expression is an expression which evaluates to the difference of its operands. In the ISO13584_expression_schema, all these operands shall evaluate to a number in the number data type domain.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: multiple_arity_function_call  
   <express_ref linkend="expression:mim:expression_mim.multiple_arity_function_call"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.multiple_arity_function_call">A <b>multiple_arity_function_call </b>is a multiple-arity operator on NUMBER data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: binary_numeric_expression  
   <express_ref linkend="expression:mim:expression_mim.binary_numeric_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.binary_numeric_expression">A <b>binary_boolean_expression </b>is a binary operator of which the range is the BOOLEAN data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: binary_numeric_expression  Attribute: operands 
   <express_ref linkend="expression:mim:expression_mim.binary_numeric_expression.operands"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.binary_numeric_expression.operands">A list containing the two parameters of the binary operator. </ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: minus_expression  
   <express_ref linkend="expression:mim:expression_mim.minus_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.minus_expression">The <b>minus_expression </b>entity carries the semantics of the '-' operator, defined in ISO 10303-11, on NUMBER data type.<note>The minus_expression is an expression which evaluates to the difference of its operands. In the ISO13584_expression_schema, all these operands shall evaluate to a number in the number data type domain.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: div_expression  
   <express_ref linkend="expression:mim:expression_mim.div_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.div_expression">The <b>div_expression </b>entity carries the semantics of the EXPRESS 'DIV' operator, defined in ISO 10303-11, on NUMBER data type.<note>The div_expression is an expression which evaluates to the integer division of its operands. In the ISO13584_expression_schema, all these operands shall evaluate to a number in the number data type domain. The result is an integer number. If either operand is of data type REAL, it is truncated to an INTEGER before the operation, i.e. any fractional part is lost. </note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: mod_expression  
   <express_ref linkend="expression:mim:expression_mim.mod_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.mod_expression">The <b>mod_expression </b>entity carries the semantics of the EXPRESS 'MOD' operator, defined in ISO 10303-11, on NUMBER data type.<note>The mod_expression is an expression which evaluates to the first argument value modulo operation of the second argument value. Its operands shall evaluate to a number in the number data type domain. The result is an integer number. If either operand is of data type REAL, it is truncated to an INTEGER before the operation, i.e. any fractional part is lost.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: slash_expression  
   <express_ref linkend="expression:mim:expression_mim.slash_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.slash_expression">The <b>slash_expression </b>entity carries the semantics of the EXPRESS '/' operator, defined in ISO 10303-11, on NUMBER data type.<note>entity carries the semantics of the EXPRESS '/' operator, defined in ISO 10303-11, on NUMBER data type.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: power_expression  
   <express_ref linkend="expression:mim:expression_mim.power_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.power_expression">The <b>power_expression </b>entity carries the semantics of the EXPRESS '**' operator, defined in ISO 10303-11, on NUMBER data type<note>The power_expression is an expression which evaluates to the exponentiation of the first operand value to the second operand value. Its operands shall evaluate to a number in the number data type domain. The result is a number.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: binary_function_call  
   <express_ref linkend="expression:mim:expression_mim.binary_function_call"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.binary_function_call">A <b>binary_function_call </b>is a binary operator on NUMBER data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: unary_numeric_expression  
   <express_ref linkend="expression:mim:expression_mim.unary_numeric_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.unary_numeric_expression">An <b>unary_numeric_expression </b>is an unary operator whose range is the NUMBER data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: unary_numeric_expression  Attribute: operand 
   <express_ref linkend="expression:mim:expression_mim.unary_numeric_expression.operand"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.unary_numeric_expression.operand">A numeric expression that represents the parameter of the unary operator. </ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: string_expression  
   <express_ref linkend="expression:mim:expression_mim.string_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.string_expression">A <b>string_expression </b>is an <b>expression </b>whose range is the EXPRESS STRING data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: simple_string_expression  
   <express_ref linkend="expression:mim:expression_mim.simple_string_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.simple_string_expression">A <b>simple_string_expression </b>is an unary operator of  whose  range is EXPRESS STRING data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: string_literal  
   <express_ref linkend="expression:mim:expression_mim.string_literal"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.string_literal">A <b>string_literal </b>is an EXPRESS STRING literal.<note>The EXPRESS STRING data type has as its domain sequences of characters.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: string_literal  Attribute: the_value 
   <express_ref linkend="expression:mim:expression_mim.string_literal.the_value"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.string_literal.the_value">The <b>value</b>is a STRING literal value.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: index_expression  
   <express_ref linkend="expression:mim:expression_mim.index_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.index_expression">The <b>index_expression </b>carries the semantics of the string indexing operator ('[]') defined in ISO 10303-11.<note>The <b>index_expression </b>string operator takes two operands, the string value (represented by the <b>operand </b>attribute) being indexed by the index specification (represented by the <b>index </b>attribute). The resulting string value is the character at position the value of the <b>index </b>operator. </note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: substring_expression  
   <express_ref linkend="expression:mim:expression_mim.substring_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.substring_expression">The <b>substring_expression </b>carries the semantics of the EXPRESS substring indexing operator ('[:]') defined in ISO 10303-11.<note>The <b>substring_expression </b>string operator takes three operands, the string value (represented by the <b>operand </b>attribute) being indexed by the index specification (represented by the <b>index1 </b>and <b>index2 </b>attributes). The substring_expression evaluates to a string value of length (<b>index2 - index1 + 1</b>). The resulting string value is equivalent to the sequence of characters at position <b>index1 </b>through <b>index2</b>. </note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: concat_expression  
   <express_ref linkend="expression:mim:expression_mim.concat_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.concat_expression">The <b>concat_expression </b>carries the semantics of the concatenation ('+') operator defined in ISO 10303-11, on the STRING data type defined in ISO 10303-11.<note> The <b>concat_expression </b>operator accepts at least two <b>string_expressions </b>as operands and evaluates to a string value resulting from the concatenation of all the elements of the  <b>SELF\multiple_arity_generic_expression.operands </b>list. These elements are concatenated in the list order.   </note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: format_function  
   <express_ref linkend="expression:mim:expression_mim.format_function"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.format_function">The <b>format_function </b>carries the semantics of the FORMAT function  defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: boolean_expression  
   <express_ref linkend="expression:mim:expression_mim.boolean_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.boolean_expression">A <b>boolean_expression </b>is an
<b>expression </b>for which the range is the BOOLEAN data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: simple_boolean_expression  
   <express_ref linkend="expression:mim:expression_mim.simple_boolean_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.simple_boolean_expression">A <b>simple_boolean_expression </b>is an unary operator for which the range is BOOLEAN, such a data type being defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: boolean_literal  
   <express_ref linkend="expression:mim:expression_mim.boolean_literal"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.boolean_literal">A <b>boolean_literal </b>is an EXPRESS BOOLEAN literal.<note>The EXPRESS Boolean data type has as its domain the set containing the two literals TRUE and FALSE. </note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: boolean_literal  Attribute: the_value 
   <express_ref linkend="expression:mim:expression_mim.boolean_literal.the_value"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.boolean_literal.the_value">a BOOLEAN literal value<note> The EXPRESS Boolean data type has as its domain the set containing the two literals TRUE and FALSE. </note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: unary_boolean_expression  
   <express_ref linkend="expression:mim:expression_mim.unary_boolean_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.unary_boolean_expression">An <b>unary_boolean_expression </b>is an unary operator for which the range is the BOOLEAN data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: not_expression  
   <express_ref linkend="expression:mim:expression_mim.not_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.not_expression">The <b>not_expression </b>entity carries the semantics of the 'NOT' on Boolean data type operator defined in ISO 10303-11.<note>The NOT operator requires one Boolean operand and evaluates to a Boolean value.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: not_expression  Attribute: operand 
   <express_ref linkend="expression:mim:expression_mim.not_expression.operand"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.not_expression.operand">The <b>boolean_expression </b>that represents the operand of the 'NOT' operator.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: binary_boolean_expression  
   <express_ref linkend="expression:mim:expression_mim.binary_boolean_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.binary_boolean_expression">A <b>binary_boolean_expression </b>is a binary operator of which the range is the BOOLEAN data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: multiple_arity_boolean_expression  
   <express_ref linkend="expression:mim:expression_mim.multiple_arity_boolean_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.multiple_arity_boolean_expression">A <b>multiple_arity_boolean_expression </b>is a multiple-arity operator for which the range is the same as the EXPRESS BOOLEAN data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: multiple_arity_boolean_expression  Attribute: operands 
   <express_ref linkend="expression:mim:expression_mim.multiple_arity_boolean_expression.operands"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.multiple_arity_boolean_expression.operands">The occurrences of <b>boolean_expression </b>that represents the parameters of the <b>m-arity </b>operator.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: xor_expression  
   <express_ref linkend="expression:mim:expression_mim.xor_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.xor_expression">The <b>xor_expression </b>carries the semantics of the 'XOR' operator defined in ISO 10303-11.<note>The XOR operator requires two Boolean operands and evaluates to a Boolean value that is the exclusive disjunction of the two operands.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: xor_expression  Attribute: operands 
   <express_ref linkend="expression:mim:expression_mim.xor_expression.operands"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.xor_expression.operands">The two <b>boolean_expression </b>operands of the XOR operator that shall be <b>boolean_expressions</b>.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: equals_expression  
   <express_ref linkend="expression:mim:expression_mim.equals_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.equals_expression">The <b>equals_expression </b>entity carries the semantics of the ':=:' instance equal operator defined in ISO 10303-11, the domain of which is entities of data type <b>generic_expression</b>
		<note> The entity instance equality operator accepts two compatible instance values that are generic_expression and evaluates to a Boolean value. In the context of the ISO13584_expression_schema the two generic_expressions instance values are compatible either if their data types are the same, or if one data type is a subtype of the other one.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: and_expression  
   <express_ref linkend="expression:mim:expression_mim.and_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.and_expression">The <b>and_expression </b>entity carries the semantics of the 'AND' operator defined in ISO 10303-11 and uses its associativity property to handle multiple arity.<note>The AND operator requires at least two Boolean expressions and evaluates to a Boolean value that is the conjunction of the two operands</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: or_expression  
   <express_ref linkend="expression:mim:expression_mim.or_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.or_expression">The <b>or_expression </b>entity carries the semantics of the 'OR' operator defined in ISO 10303-11 and uses its associativity property to handle multiple arity. <note>The OR operator requires at least two Boolean expressions and evaluates to a Boolean value that is the inclusive disjunction of the two operands. </note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: comparison_expression  
   <express_ref linkend="expression:mim:expression_mim.comparison_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.comparison_expression">The <b>comparison_expression </b>expressions carry the semantics of the different value comparison operators defined in ISO 10303-11 restricted to the NUMBER, BOOLEAN and STRING EXPRESS data types. Both operands shall have the same data type.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: comparison_expression  Attribute: operands 
   <express_ref linkend="expression:mim:expression_mim.comparison_expression.operands"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.comparison_expression.operands">A list of <b>generic_expressions </b>that contains the expressions to be compared. </ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: comparison_expression  Where: WR1 
   <express_ref linkend="expression:mim:expression_mim.comparison_expression.wr:WR1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.comparison_expression.wr:WR1">The operands of the <b>comparison_expression </b>shall be of compatible in type.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: comparison_equal  
   <express_ref linkend="expression:mim:expression_mim.comparison_equal"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.comparison_equal">A <b>comparison_equal </b>carries the semantics of the value equal ('=') operator defined in ISO 10303-11 restricted to the NUMBER, BOOLEAN and STRING EXPRESS data types. Both operands shall have the same data type.<note>The comparison_equal evaluates to TRUE if the two operands evaluate to the same value. </note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: comparison_greater  
   <express_ref linkend="expression:mim:expression_mim.comparison_greater"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.comparison_greater">A <b>comparison_greater </b>carries the semantics of the greater than ('>') operator defined in of ISO 10303-11 restricted to the NUMBER, BOOLEAN and STRING EXPRESS data types. Both operands shall have the same data type.<note> The comparison_greater  evaluates to TRUE if the first operand evaluates to a value greater than the second operand. The relevant orders are: 
— 	mathematical ordering of the real numbers;
—	FALSE  lessthen TRUE;
—	lexicographic order on strings
</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: comparison_greater_equal  
   <express_ref linkend="expression:mim:expression_mim.comparison_greater_equal"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.comparison_greater_equal">A <b>comparison_greater_equal </b>carries the semantics of the greater than or equal ('>=') operator defined in of ISO 10303-11 restricted to the NUMBER, BOOLEAN and STRING EXPRESS data types. Both operands shall have the same data type.<note>The comparison_greater_equal  evaluates to TRUE if the first operand evaluates to a value greater than or equal to the second operand. The relevant orders are: 
—	mathematical ordering of the real numbers;
—	FALSE lessthen TRUE;
—	lexicographic order on strings.
</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: comparison_less  
   <express_ref linkend="expression:mim:expression_mim.comparison_less"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.comparison_less">A <b>comparison_less </b>carries the semantics of the less than ('&lt;') operator defined in ISO 10303-11 restricted to the NUMBER, BOOLEAN and STRING EXPRESS data types. Both operands shall have the same data type.<note>The <b>comparison_less  </b>evaluates to TRUE if the first operand evaluates to a value less than the second operand. The relevant orders are: <ul>
				<li>mathematical ordering of the real numbers;</li>
				<li>FALSE &lt; TRUE;</li>
				<li>lexicographic order on strings.</li>
			</ul>
		</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: comparison_less_equal  
   <express_ref linkend="expression:mim:expression_mim.comparison_less_equal"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.comparison_less_equal">A <b>comparison_less_or_equal </b>carries the semantics of the EXPRESS less than or equal ('&lt;=') operator defined in ISO 10303-11 restricted to the NUMBER, BOOLEAN and STRING EXPRESS data types. Both operands shall have the same data type.<note>The <b>comparison_less_equal  </b>evaluates to TRUE if the first operand evaluates to a value less than or equal to the second operand. The relevant  orders are: <ul>
				<li>mathematical ordering of the real numbers;</li>
				<li>FALSE &lt; TRUE;</li>
				<li>lexicographic order on strings.</li>
			</ul>
		</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: comparison_not_equal  
   <express_ref linkend="expression:mim:expression_mim.comparison_not_equal"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.comparison_not_equal">A <b>comparison_not_equal </b>carries the semantics of the value not equal ('&lt;>') operator defined in ISO 10303-11 restricted to the NUMBER, BOOLEAN and STRING EXPRESS data types. Both operands shall have the same data type.<note>The <b>comparison_not_equal  </b>evaluates to TRUE if the first operand evaluates to a value different from the second operand. The relevant orders are: <ul>
				<li>mathematical ordering of the real numbers;</li>
				<li>FALSE &lt; TRUE;</li>
				<li>lexicographic order on strings.</li>
			</ul>
		</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: like_expression  
   <express_ref linkend="expression:mim:expression_mim.like_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.like_expression">A <b>like_expression </b>carries the semantics of the LIKE string matching operator defined in ISO 10303-11. The first operand is the target string. The second operand is the pattern string. The special characters (often called "wild cards") in the pattern string are defined in ISO 10303-11</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: like_expression  Where: WR1 
   <express_ref linkend="expression:mim:expression_mim.like_expression.wr:WR1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.like_expression.wr:WR1">The operand list shall contain two <b>generic_expressions </b>that are <b>string_expressions</b>.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: interval_expression  
   <express_ref linkend="expression:mim:expression_mim.interval_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.interval_expression">An <b>interval_expression </b>carries the semantics of the interval expression defined in ISO 10303-11 restricted to the NUMBER, BOOLEAN and STRING EXPRESS data types. Both operands shall have the same data type.<note>An <b>interval_expression </b>expression tests whether or not a value falls within a given interval. It evaluates to TRUE if <b>interval_low </b>&lt; = <b>interval_item </b>&lt; = <b>interval_high</b>. The relevant orders are: <ul>
				<li>mathematical ordering of the real numbers;</li>
				<li>FALSE &lt; TRUE;</li>
				<li>lexicographic order on strings.</li>
			</ul>
		</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: interval_expression  Attribute: interval_low 
   <express_ref linkend="expression:mim:expression_mim.interval_expression.interval_low"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.interval_expression.interval_low">the bound_1 operand of the interval expression (see 12.2.4 of ISO 10303-11).</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: interval_expression  Attribute: interval_item 
   <express_ref linkend="expression:mim:expression_mim.interval_expression.interval_item"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.interval_expression.interval_item">the interval_item operand of the interval expression (see 12.2.4 of ISO 10303-11). </ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: interval_expression  Attribute: interval_high 
   <express_ref linkend="expression:mim:expression_mim.interval_expression.interval_high"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.interval_expression.interval_high">the bound_2 operand of the interval expression (see 12.2.4 of ISO 10303-11).</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: interval_expression  Where: WR1 
   <express_ref linkend="expression:mim:expression_mim.interval_expression.wr:WR1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.interval_expression.wr:WR1">The data type of the operands shall be <b>expressions</b>.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: interval_expression  Where: WR2 
   <express_ref linkend="expression:mim:expression_mim.interval_expression.wr:WR2"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.interval_expression.wr:WR2">The types of the <b>expressions </b>to be compared in the <b>interval_expressions </b>shall evaluates to comparable <b>expressions</b>.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: expression_extension  
   <express_ref linkend="expression:mim:expression_mim.expression_extension"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.expression_extension">The <b>expression_extension</b>is the entity to connect an object value characteristic to a possible expression representation.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: expression_extension  Attribute: expression_associated 
   <express_ref linkend="expression:mim:expression_mim.expression_extension.expression_associated"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.expression_extension.expression_associated">The <b>expression_associated </b>entity connect the <b>expression_extension </b>to the <b>string_expression </b>or <b>numeric_expression </b>representations.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: length_function  
   <express_ref linkend="expression:mim:expression_mim.length_function"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.length_function">The <b>length_function </b>entity carries the semantics of the LENGTH function defined in ISO 10303-11.<note>The length function returns the number of characters in a string. 
	-	Parameters: a string_expression carrying a value of the string data type.
	-	Result: the returned value is the number of characters in the string and shall be greater than or equal to zero.
</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: length_function  Attribute: operand 
   <express_ref linkend="expression:mim:expression_mim.length_function.operand"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.length_function.operand">The string whose length is represented by the <b>length_function</b>. </ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: value_function  
   <express_ref linkend="expression:mim:expression_mim.value_function"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.value_function">The <b>value_function </b>entity carries the semantics of the VALUE function defined in ISO 10303-11. When the value represented in the <b>string_expression </b>that corresponds to the <b>operand </b>inherited attribute is an integer, the <b>int_value_function </b>subtype shall be used.<note>The value function returns the numeric representation of a string.
	-	Parameters: a string_expression carrying a value of the string data type.
	-	Result: a number corresponding to the string representation. 
</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: value_function  Attribute: operand 
   <express_ref linkend="expression:mim:expression_mim.value_function.operand"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.value_function.operand">The string expression of which the value is represented by the <b>value_function</b>.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: sql_mappable_defined_function  
   <express_ref linkend="expression:mim:expression_mim.sql_mappable_defined_function"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.sql_mappable_defined_function">A <b>SQL_mappable_defined_function</b> is a  function intended to be subtyped in the information models that use the <b>ISO13584_expressions_schema </b>to specify that some <b>generic_expression </b>is mappable onto SQL.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: defined_function  
   <express_ref linkend="expression:mim:expression_mim.defined_function"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.defined_function">A <b>defined_function </b>is a (strongly typed) function intended to be subtyped in the information models that use the <b>ISO13584_expressions_schema.</b>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: string_defined_function  
   <express_ref linkend="expression:mim:expression_mim.string_defined_function"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.string_defined_function">A <b>string_defined_function </b>is any application-defined operator of which the range is the STRING data type defined in ISO 10303-11.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Entity: boolean_defined_function  
   <express_ref linkend="expression:mim:expression_mim.boolean_defined_function"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.boolean_defined_function">A <b>boolean_defined_function </b>is any application-defined operator of which the range is the BOOLEAN data type defined in ISO 10303-11. </ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: expression_mim  Function: is_int_expr 
   <express_ref linkend="expression:mim:expression_mim.is_int_expr"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="expression_mim.is_int_expr">The <b>is_int_expr </b>function checks if a syntactically correct expression (see clause 7) evaluates to an integer value or not.</ext_description>
	<ext_description linkend="expression_mim.is_int_expr.arg">It is a <b>generic_expression</b>.</ext_description>
</ext_descriptions>
