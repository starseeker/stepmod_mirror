<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XML Spy v4.3 U (http://www.xmlspy.com) by olavo (uninova) -->
<!-- $Id: module.xml,v 1.6 2003/01/03 11:10:30 rocc Exp $ -->
<!DOCTYPE module SYSTEM "../../../dtd/module.dtd">
<!-- Generated by mkmodule.js, Eurostep Limited, http://www.eurostep.com -->
<!-- 
     To view the module in IExplorer, open: sys/1_scope.xml
      -->
<module name="expression" part="1342" version="1" wg.number="03" wg.number.arm="" wg.number.mim="" checklist.internal_review="" checklist.project_leader="" checklist.convener="" status="CD-TS" language="E" publication.year="" published="n" rcs.date="$Date: 2003/01/03 11:10:30 $" rcs.revision="$Revision: 1.6 $">
	<keywords>
    module, expression, string expression, numeric expression, boolean expression
 </keywords>
	<!-- Reference to contacts detailed in stepmod/data/basic/contacts.xml -->
	<contacts>
		<projlead ref="ap236.projlead"/>
		<editor ref="ap236.editor"/>
	</contacts>
	<!-- The introduction should start as shown: -->
	<purpose>
		<p>This part of ISO 10303 specifies an application module for the representation of expressions associated to products. 
The requirements to represent additional characteristics of the products, takes it to support the representation by flexible methods of parameterized characteristics. 
The use of an expression will fulfil the requirements for the representation of variable characteristics, and can be represented by an expression with input arguments. 
Some examples can introduce the real need for those characteristics, such as:
-price: where can depends on some dimensions like height and width or even depending on some characteristic like the color or the finishing type of the product.
-dimensions: to represent the area of a product, it can be determined by the inputs of the height and width.</p>
	</purpose>
	<!-- Items in scope -->
	<inscope>
		<li>identification of an  expression;</li>
		<li>identification of the expression in which a numeric, boolean and string types are allowed.</li>
	</inscope>
	<!-- Items out of scope -->
	<outscope>
		<li>numeric expression - process of representation of an expression in the numeric ambit. The result will be provided in the numeric form like a dimension;</li>
		<li>boolean expression - process of representation of an expression in the boolean ambit. The result will be provided in a boolean form like true or false;</li>
		<li>string expression - process of representation of an expression in the string ambit. The result will be provided in a string form like a text.</li>
	</outscope>
	<!--
 <normrefs/>

 <definition/>

 <abbreviations/>
-->
	<!-- Clause 4 ARM  -->
	<arm>
		<!-- Note ARM short form EXPRESS is in arm.xml -->
		<!-- Units of functionality -->
		<uof name="Expression">
			<description>An expression has the range of NUMBER, BOOLEAN and STRING data type defined in  8.1.1 of ISO 10303-11.</description>
			<uof.ae entity="And_expression"/>
			<uof.ae entity="Binary_boolean_expression"/>
			<uof.ae entity="Binary_function_call"/>
			<uof.ae entity="Binary_numeric_expression"/>
			<uof.ae entity="Boolean_defined_function"/>
			<uof.ae entity="Boolean_expression"/>
			<uof.ae entity="Boolean_literal"/>
			<uof.ae entity="Boolean_variable"/>
			<uof.ae entity="Comparison_equal"/>
			<uof.ae entity="Comparison_expression"/>
			<uof.ae entity="Comparison_greater"/>
			<uof.ae entity="Comparison_greater_equal"/>
			<uof.ae entity="Comparison_less"/>
			<uof.ae entity="Comparison_less_equal"/>
			<uof.ae entity="Comparison_not_equal"/>
			<uof.ae entity="Concat_expression"/>
			<uof.ae entity="Defined_function"/>
			<uof.ae entity="Div_expression"/>
			<uof.ae entity="Equals_expression"/>
			<uof.ae entity="Expression"/>
			<uof.ae entity="Expression_extension"/>
			<uof.ae entity="Format_function"/>
			<uof.ae entity="Index_expression"/>
			<uof.ae entity="Int_literal"/>
			<uof.ae entity="Int_numeric_variable"/>
			<uof.ae entity="Interval_expression"/>
			<uof.ae entity="Length_function"/>
			<uof.ae entity="Like_expression"/>
			<uof.ae entity="Literal_number"/>
			<uof.ae entity="Minus_expression"/>
			<uof.ae entity="Mod_expression"/>
			<uof.ae entity="Mult_expression"/>
			<uof.ae entity="Multiple_arity_boolean_expression"/>
			<uof.ae entity="Multiple_arity_function_call"/>
			<uof.ae entity="Multiple_arity_numeric_expression"/>
			<uof.ae entity="Not_expression"/>
			<uof.ae entity="Numeric_expression"/>
			<uof.ae entity="Numeric_variable"/>
			<uof.ae entity="Or_expression"/>
			<uof.ae entity="Plus_expression"/>
			<uof.ae entity="Power_expression"/>
			<uof.ae entity="Real_literal"/>
			<uof.ae entity="Real_numeric_variable"/>
			<uof.ae entity="Simple_boolean_expression"/>
			<uof.ae entity="Simple_numeric_expression"/>
			<uof.ae entity="Simple_string_expression"/>
			<uof.ae entity="Slash_expression"/>
			<uof.ae entity="Sql_mappable_defined_function"/>
			<uof.ae entity="String_defined_function"/>
			<uof.ae entity="String_expression"/>
			<uof.ae entity="String_literal"/>
			<uof.ae entity="String_variable"/>
			<uof.ae entity="Substring_expression"/>
			<uof.ae entity="Unary_boolean_expression"/>
			<uof.ae entity="Unary_numeric_expression"/>
			<uof.ae entity="Xor_expression"/>
		</uof>
		<!-- Short form EXPRESS-G -->
		<express-g>
			<imgfile file="armexpg1.xml"/>
			<imgfile file="armexpg7.xml"/>
			<imgfile file="armexpg9.xml"/>
			<imgfile file="armexpg6.xml"/>
			<imgfile file="armexpg10.xml"/>
			<imgfile file="armexpg11.xml"/>
			<imgfile file="armexpg4.xml"/>
			<imgfile file="armexpg8.xml"/>
			<imgfile file="armexpg12.xml"/>
			<imgfile file="armexpg13.xml"/>
			<imgfile file="armexpg5.xml"/>
			<imgfile file="armexpg14.xml"/>
			<imgfile file="armexpg2.xml"/>
		</express-g>
	</arm>
	<!-- ARM long form (optional) -->
	<!-- If not required, delete this section and the following files:
          arm_lf.xml
          armexpg_lf1.gif
          armexpg_lf1.xml -->
	<arm_lf>
		<!-- Note ARM long form EXPRESS is in arm_lf.xml -->
		<express-g>
			<imgfile file="armexpg_lf1.xml"/>
		</express-g>
	</arm_lf>
	<!-- Clause 5.1 Mapping specification -->
	<mapping_table>
		<ae entity="And_expression">
			<aimelt>and_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>and_expression &lt;= multiple_arity_boolean_expression</refpath>
		</ae>
		<ae entity="Binary_boolean_expression">
			<aimelt>binary_boolean_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>binary_boolean_expression &lt;= (boolean_expression) (binary_generic_expression)

binary_boolean_expression &gt;= (xor_expression) (equals_expression)</refpath>
		</ae>
		<ae entity="Binary_function_call">
			<aimelt>binary_function_call</aimelt>
			<source>ISO 13584-20</source>
			<refpath>binary_function_call &lt;= binary_numeric_expression

binary_function_call &gt;= atan_function</refpath>
		</ae>
		<ae entity="Binary_numeric_expression">
			<aimelt>binary_numeric_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>binary_function_call &lt;= (numeric_expression)
(binary_generic_expression)

binary_function_call &gt;= 
(minus_expression
(div_expression)
(mod_expression)
(slash_expression)
(power_expression)
(binary_function_call)</refpath>
			<aa attribute="operands" assertion_to="Numeric_Expression">
				<aimelt>PATH</aimelt>
				<refpath>binary_generic_expression.operands[2] -&gt; numeric_expression</refpath>
			</aa>
			<aa attribute="operands" assertion_to="Binary_generic_expression">
				<aimelt>PATH</aimelt>
				<refpath>binary_generic_expression.operands[2] -&gt; numeric_expression</refpath>
			</aa>
		</ae>
		<ae entity="Boolean_defined_function">
			<aimelt>boolean_defined_function</aimelt>
			<source>ISO 13584-20</source>
			<refpath>boolean_defined_function &lt;= 
(defined_function)
(boolean_expression)</refpath>
		</ae>
		<ae entity="Boolean_expression">
			<aimelt>boolean_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>boolean_expression &lt;= expression

binary_function_call &gt;= 
(simple_boolean_expression)
(unary_boolean_expression)
(binary_boolean_expression)
(multiple_arity_boolean_expression)
(comparison_expression)
(Interval_expression)
(boolean_defined_function)</refpath>
		</ae>
		<ae entity="Boolean_literal">
			<aimelt>boolean_literal</aimelt>
			<source>ISO 13584-20</source>
			<refpath>boolean_literal &lt;= 
(simple_boolean_expression)
(generic_literal)</refpath>
			<aa attribute="the_value" assertion_to="Boolean_literal">
				<aimelt>the_value</aimelt>
				<refpath>STRING</refpath>
			</aa>
		</ae>
		<ae entity="Boolean_variable">
			<aimelt>boolean_variable</aimelt>
			<source>ISO 13584-20</source>
			<refpath>boolean_variable &lt;= 
(simple_boolean_expression)
(variable)</refpath>
		</ae>
		<ae entity="Comparison_equal">
			<aimelt>comparison_equal</aimelt>
			<source>ISO 13584-20</source>
			<refpath>boolean_literal &lt;= 
comparison_expression</refpath>
		</ae>
		<ae entity="Comparison_expression">
			<aimelt>comparison_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>comparison_expression &lt;= 
(boolean_expression)
(binary_generic_expression)

comparison_expression &gt;= 
(Comparison_equal)
(Comparison_greater)
(Comparison_greater_equal)
(Comparison_less)
(Comparison_less_equal)
(Comparison_not_equal)
(Like_expression)</refpath>
			<aa attribute="operands" assertion_to="Boolean_expression">
				<aimelt>PATH</aimelt>
				<refpath>binary_generic_expression.operands[2] -&gt; expression</refpath>
			</aa>
			<aa attribute="operands" assertion_to="Binary_generic_expression">
				<aimelt>PATH</aimelt>
				<refpath>binary_generic_expression.operands[2] -&gt; expression</refpath>
			</aa>
		</ae>
		<ae entity="Comparison_greater">
			<aimelt>comparison_greater</aimelt>
			<source>ISO 13584-20</source>
			<refpath>comparison_greater &lt;= 
comparison_expression</refpath>
		</ae>
		<ae entity="Comparison_greater_equal">
			<aimelt>comparison_greater_equal</aimelt>
			<source>ISO 13584-20</source>
			<refpath>comparison_greater_equal &lt;= 
comparison_expression</refpath>
		</ae>
		<ae entity="Comparison_less">
			<aimelt>comparison_less</aimelt>
			<source>ISO 13584-20</source>
			<refpath>comparison_less &lt;= 
comparison_expression</refpath>
		</ae>
		<ae entity="Comparison_less_equal">
			<aimelt>comparison_less_equal</aimelt>
			<source>ISO 13584-20</source>
			<refpath>Comparison_less_equal &lt;= 
comparison_expression</refpath>
		</ae>
		<ae entity="Comparison_not_equal">
			<aimelt>comparison_not_equal</aimelt>
			<source>ISO 13584-20</source>
			<refpath>comparison_not_equal &lt;= 
comparison_expression</refpath>
		</ae>
		<ae entity="Concat_expression">
			<aimelt>concat_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>concat_expression &lt;= 
(string_expression)
(multiple_arity_generic_expression)</refpath>
		</ae>
		<ae entity="Defined_function">
			<aimelt>defined_function</aimelt>
			<source>ISO 13584-20</source>
			<refpath>defined_function &gt;= 
(numeric_defined_function)
(string_defined_function)
(boolean_defined_function)
{(sql_mappable_defined_function)}</refpath>
		</ae>
		<ae entity="Div_expression">
			<aimelt>div_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>div_expression &lt;= 
binary_numeric_expression</refpath>
		</ae>
		<ae entity="Equals_expression">
			<aimelt>equals_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>equals_expression &lt;= 
binary_boolean_expression</refpath>
		</ae>
		<ae entity="Expression">
			<aimelt>expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>equals_expression &lt;= 
value_with_unit</refpath>
		</ae>
		<ae entity="Expression_extension">
			<aimelt>expression_extension</aimelt>
			<source>ISO 13584-20</source>
			<refpath>expression_extension &lt;= 
value_with_unit</refpath>
			<aa attribute="expression_associated" assertion_to="expression_extension_select">
				<aimelt>expression_associated</aimelt>
				<refpath>expression_extension_select</refpath>
			</aa>
		</ae>
		<ae entity="Format_function">
			<aimelt>format_function</aimelt>
			<source>ISO 13584-20</source>
			<refpath>format_function &lt;= 
(string_expression)
(binary_generic_expression)</refpath>
		</ae>
		<ae entity="Index_expression">
			<aimelt>index_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>index_expression &lt;= 
(string_expression)
(binary_generic_expression)</refpath>
		</ae>
		<ae entity="Int_literal">
			<aimelt>int_literal</aimelt>
			<source>ISO 13584-20</source>
			<refpath>expression_extension &lt;= 
literal_number</refpath>
			<aa attribute="the_value" assertion_to="Literal_number">
				<aimelt>PATH</aimelt>
				<refpath>literal_number.the_value -&gt; literal_number</refpath>
			</aa>
		</ae>
		<ae entity="Int_numeric_variable">
			<aimelt>int_numeric_variable</aimelt>
			<source>ISO 13584-20</source>
			<refpath>int_numeric_variable &lt;= 
numeric_variable</refpath>
		</ae>
		<ae entity="Interval_expression">
			<aimelt>interval_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>interval_expression &lt;= 
(boolean_expression)
(multiple_arity_generic_expression)</refpath>
		</ae>
		<ae entity="Length_function">
			<aimelt>length_function</aimelt>
			<source>ISO 13584-20</source>
			<refpath>interval_expression &lt;= 
(numeric_expression)
(unary_generic_expression)</refpath>
			<aa attribute="operand" assertion_to="Unary_generic_expression">
				<aimelt>PATH</aimelt>
				<refpath>length function &lt;= unary_generic_expression.operand 
unary_generic_expression.operand -&gt; string_expression</refpath>
			</aa>
		</ae>
		<ae entity="Like_expression">
			<aimelt>like_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>like_expression &lt;= 
comparison_expression</refpath>
		</ae>
		<ae entity="Literal_number">
			<aimelt>literal_number</aimelt>
			<source>ISO 13584-20</source>
			<refpath>literal_number &lt;= 
(simple_numeric_expression)
(generic_literal)

comparison_expression &gt;= 
(int_literal)
(real_literal)</refpath>
		</ae>
		<ae entity="Minus_expression">
			<aimelt>minus_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>minus_expression &lt;= 
binary_numeric_expression</refpath>
		</ae>
		<ae entity="Mod_expression">
			<aimelt>mod_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>mod_expression &lt;= 
binary_numeric_expression</refpath>
		</ae>
		<ae entity="Mult_expression">
			<aimelt>mult_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>mult_expression &lt;= 
multiple_arity_numeric_expression</refpath>
		</ae>
		<ae entity="Multiple_arity_boolean_expression">
			<aimelt>multiple_arity_boolean_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>multiple_arity_boolean_expression &lt;= 
(boolean_expression)
(multiple_arity_generic_expression)


multiple_arity_boolean_expression &gt;= 
(and_expression)
(or_expression)</refpath>
			<aa attribute="operands" assertion_to="Multiple_arity_generic_expression">
				<aimelt>PATH</aimelt>
				<refpath>multiple_arity_generic_expression &lt;= multiple_arity_generic_expression.operands : LIST [2:?]
unary_generic_expression.operand -&gt; string_expression



multiple_arity_generic_expression.operands : LIST [2:?] OF boolean_expression;


</refpath>
			</aa>
		</ae>
		<ae entity="Multiple_arity_function_call">
			<aimelt>multiple_arity_function_call</aimelt>
			<source>ISO 13584-20</source>
			<refpath>multiple_arity_function_call &lt;= 
(boolean_expression)
(multiple_arity_generic_expression)

comparison_expression &gt;= 
(and_expression)
(or_expression)</refpath>
		</ae>
		<ae entity="Multiple_arity_numeric_expression">
			<aimelt>multiple_arity_numeric_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>multiple_arity_numeric_expression &lt;= 
(numeric_expression)
(multiple_arity_generic_expression)

multiple_arity_numeric_expression &gt;= 
(plus_expression)
(mult_expression)
(multiple_arity_function_call)</refpath>
			<aa attribute="operands" assertion_to="Multiple_arity_generic_expression">
				<aimelt>PATH</aimelt>
				<refpath>
multiple_arity_numeric_expression &lt;= multiple_arity_generic_expression
multiple_arity_generic_expression.operands: LIST [2:?]-&gt;numeric_expression
</refpath>
			</aa>
		</ae>
		<ae entity="Not_expression">
			<aimelt>not_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>not_expression &lt;= 
(unary_boolean_expression)</refpath>
		</ae>
		<ae entity="Numeric_expression">
			<aimelt>numeric_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>numeric_expression &lt;= expression

numeric_expression &gt;= 
(simple_numeric_expression)
(unary_numeric_expression)
(binary_numeric_expression)
(multiple_arity_numeric_expression)
(length_function)
(value_function)</refpath>
		</ae>
		<ae entity="Numeric_variable">
			<aimelt>numeric_variable</aimelt>
			<source>ISO 13584-20</source>
			<refpath>numeric_variable &lt;= (expression)
(variable)

numeric_variable &gt;= 
(int_numeric_variable)
(real_numeric_variable)</refpath>
		</ae>
		<ae entity="Or_expression">
			<aimelt>or_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>or_expression &lt;= 
(multiple_arity_boolean_expression)</refpath>
		</ae>
		<ae entity="Plus_expression">
			<aimelt>plus_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>plus_expression &lt;= 
(multiple_arity_numeric_expression)</refpath>
		</ae>
		<ae entity="Power_expression">
			<aimelt>power_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>power_expression &lt;= 
(binary_numeric_expression)</refpath>
		</ae>
		<ae entity="Real_literal">
			<aimelt>real_literal</aimelt>
			<source>ISO 13584-20</source>
			<refpath>real_literal &lt;= 
(literal_number)</refpath>
			<aa attribute="the_value" assertion_to="Real_literal">
				<aimelt>the_value</aimelt>
				<refpath>REAL</refpath>
			</aa>
		</ae>
		<ae entity="Real_numeric_variable">
			<aimelt>real_numeric_variable</aimelt>
			<source>ISO 13584-20</source>
			<refpath>real_numeric_variable &lt;= 
(numeric_variable)</refpath>
		</ae>
		<ae entity="Simple_boolean_expression">
			<aimelt>simple_boolean_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>simple_boolean_expression &lt;= (boolean_expression)
(simple_generic_expression)

simple_boolean_expression &gt;= 
(boolean_literal)
(boolean_variable)</refpath>
		</ae>
		<ae entity="Simple_numeric_expression">
			<aimelt>simple_numeric_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>simple_numeric_expression &lt;= (numeric_expression)
(simple_generic_expression)

simple_numeric_expression &gt;= 
(literal_number)
(numeric_variable)</refpath>
		</ae>
		<ae entity="Simple_string_expression">
			<aimelt>simple_string_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>simple_string_expression &lt;= (string_expression)
(simple_generic_expression)

simple_string_expression &gt;= 
(string_literal)
(string_variable)</refpath>
		</ae>
		<ae entity="Slash_expression">
			<aimelt>slash_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>slash_expression &lt;= binary_numeric_expression</refpath>
		</ae>
		<ae entity="Sql_mappable_defined_function">
			<aimelt>sql_mappable_defined_function</aimelt>
			<source>ISO 13584-20</source>
			<refpath>sql_mappable_defined_function &lt;= defined_function</refpath>
		</ae>
		<ae entity="String_defined_function">
			<aimelt>string_defined_function</aimelt>
			<source>ISO 13584-20</source>
			<refpath>sql_mappable_defined_function &lt;= (defined_function)
(string_expression)</refpath>
		</ae>
		<ae entity="String_expression">
			<aimelt>string_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>string_expression &lt;= expression

string_expression &gt;= 
(simple_string_expression)
(index_expression)
(substring_expression)
(concat_expression)
(format_function)
(string_defined_function)</refpath>
		</ae>
		<ae entity="String_literal">
			<aimelt>string_literal</aimelt>
			<source>ISO 13584-20</source>
			<refpath>string_literal &lt;= 
(simple_string_expression)
(generic_literal)</refpath>
			<aa attribute="the_value" assertion_to="String_literal">
				<aimelt>the_value</aimelt>
				<refpath>STRING</refpath>
			</aa>
		</ae>
		<ae entity="String_variable">
			<aimelt>string_variable</aimelt>
			<source>ISO 13584-20</source>
			<refpath>string_variable &lt;= 
(simple_string_expression)
(variable)</refpath>
		</ae>
		<ae entity="Substring_expression">
			<aimelt>substring_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>substring_expression &lt;= 
(string_expression)
(multiple_arity_generic_expression)</refpath>
		</ae>
		<ae entity="Unary_boolean_expression">
			<aimelt>unary_boolean_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>unary_boolean_expression &lt;= (boolean_expression)
(unary_generic_expression)

unary_boolean_expression &gt;= 
(not_expression)
(odd_function)</refpath>
		</ae>
		<ae entity="Unary_numeric_expression">
			<aimelt>unary_numeric_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>unary_numeric_expression &lt;= 
(numeric_expression)
(unary_generic_expression)

unary_numeric_expression &gt;= 
unary_function_call</refpath>
			<aa attribute="operand" assertion_to="Unary_numeric_expression">
				<aimelt>PATH</aimelt>
				<refpath>unary_numeric_expression &lt;= unary_generic_expression.operand:
unary_generic_expression -&gt; numeric_expression</refpath>
			</aa>
		</ae>
		<ae entity="Xor_expression">
			<aimelt>xor_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>xor_expression &lt;= 
binary_boolean_expression</refpath>
			<aa attribute="operands" assertion_to="Xor_expression">
				<aimelt>PATH</aimelt>
				<refpath>xor_expression &lt;= binary_generic_expression.operands: LIST [2:2]
binary_generic_expression -&gt; boolean_expression</refpath>
			</aa>
		</ae>
	</mapping_table>
	<!-- Clause 5.2 MIM -->
	<mim>
		<!--  Note MIM short form express is in mim.xml -->
		<express-g>
			<imgfile file="mimexpg1.xml"/>
			<imgfile file="mimexpg7.xml"/>
			<imgfile file="mimexpg9.xml"/>
			<imgfile file="mimexpg6.xml"/>
			<imgfile file="mimexpg10.xml"/>
			<imgfile file="mimexpg11.xml"/>
			<imgfile file="mimexpg4.xml"/>
			<imgfile file="mimexpg8.xml"/>
			<imgfile file="mimexpg12.xml"/>
			<imgfile file="mimexpg13.xml"/>
			<imgfile file="mimexpg5.xml"/>
			<imgfile file="mimexpg14.xml"/>
			<imgfile file="mimexpg2.xml"/>
		</express-g>
		<shortnames>
			<shortname name="AE" entity="and_expression"/>
			<shortname name="BBE" entity="binary_boolean_expression"/>
			<shortname name="BFC" entity="binary_function_call"/>
			<shortname name="BNE" entity="binary_numeric_expression"/>
			<shortname name="BDF" entity="boolean_defined_function"/>
			<shortname name="BE" entity="boolean_expression"/>
			<shortname name="BL" entity="boolean_literal"/>
			<shortname name="BV" entity="boolean_variable"/>
			<shortname name="CE" entity="comparison_equal"/>
			<shortname name="CEX" entity="comparison_expression"/>
			<shortname name="CG" entity="comparison_greater"/>
			<shortname name="CGE" entity="comparison_greater_equal"/>
			<shortname name="CL" entity="comparison_less"/>
			<shortname name="CLE" entity="comparison_less_equal"/>
			<shortname name="CNE" entity="comparison_not_equal"/>
			<shortname name="COE" entity="concat_expression"/>
			<shortname name="DF" entity="defined_function"/>
			<shortname name="DE" entity="div_expression"/>
			<shortname name="EE" entity="equals_expression"/>
			<shortname name="E" entity="expression"/>
			<shortname name="EEX" entity="expression_extension"/>
			<shortname name="FF" entity="format_function"/>
			<shortname name="IE" entity="index_expression"/>
			<shortname name="IL" entity="int_literal"/>
			<shortname name="INV" entity="int_numeric_variable"/>
			<shortname name="IE" entity="interval_expression"/>
			<shortname name="LF" entity="length_function"/>
			<shortname name="LE" entity="like_expression"/>
			<shortname name="LN" entity="literal_number"/>
			<shortname name="MINE" entity="minus_expression"/>
			<shortname name="MOE" entity="mod_expression"/>
			<shortname name="MUE" entity="mult_expression"/>
			<shortname name="MABE" entity="multiple_arity_boolean_expression"/>
			<shortname name="MAFC" entity="multiple_arity_function_call"/>
			<shortname name="MANE" entity="multiple_arity_numeric_expression"/>
			<shortname name="NE" entity="not_expression"/>
			<shortname name="NE" entity="numeric_expression"/>
			<shortname name="NV" entity="numeric_variable"/>
			<shortname name="OE" entity="or_expression"/>
			<shortname name="PE" entity="plus_expression"/>
			<shortname name="POE" entity="power_expression"/>
			<shortname name="RL" entity="real_literal"/>
			<shortname name="RNV" entity="real_numeric_variable"/>
			<shortname name="SBE" entity="simple_boolean_expression"/>
			<shortname name="SNE" entity="simple_numeric_expression"/>
			<shortname name="SSE" entity="simple_string_expression"/>
			<shortname name="SE" entity="slash_expression"/>
			<shortname name="SMDF" entity="sql_mappable_defined_function"/>
			<shortname name="SDF" entity="string_defined_function"/>
			<shortname name="SE" entity="string_expression"/>
			<shortname name="SL" entity="string_literal"/>
			<shortname name="SV" entity="string_variable"/>
			<shortname name="SUE" entity="substring_expression"/>
			<shortname name="UBE" entity="unary_boolean_expression"/>
			<shortname name="UNE" entity="unary_numeric_expression"/>
			<shortname name="VF" entity="value_function"/>
			<shortname name="XE" entity="xor_expression"/>
		</shortnames>
	</mim>
	<!-- MIM long form (optional) -->
	<!-- If not required, delete this section and the following files:
          mim_lf.xml
          mimexpg_lf1.gif
          mimexpg_lf1.xml -->
	<mim_lf>
		<!-- Note MIM long form EXPRESS is in mim_lf.xml -->
		<express-g>
			<imgfile file="mimexpg_lf1.xml"/>
		</express-g>
	</mim_lf>
</module>
