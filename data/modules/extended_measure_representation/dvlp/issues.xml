<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: issues.xml,v 1.4 2003/01/21 12:58:54 robbod Exp $ -->
<?xml-stylesheet type="text/xsl" href="../../../../xsl/projmg/issues_file.xsl"?>
<!DOCTYPE issues SYSTEM "../../../../dtd/projmg/issues.dtd">

<issues module="extended_measure_representation">
  <issue id="TEH3" type="mapping_table" by="TEH" date="8/16/2002" status="closed">
    <description>Adding new subtypes to an application object that is defined ein another application module  may add mappings. Does that mean we add another spec in *this* module? If so, need to document and fix xsl. </description>
  </issue>
  <issue id="TEH1" type="arm" by="PHU" date="8/14/2002" status="closed">
    <description>characteristic should be dimension_value</description>
  </issue>
  <issue id="TEH4" type="arm" by="PHU" date="9/1/2002" status="closed">
    <description>type limit_qualifier_list is
extensible while it was by intent not in AP214.
Do you have a reason to keep it extensible?</description>
  </issue>
  <issue id="TEH5" type="arm" by="PHU" date="9/1/2002" status="closed">
    <description>In the mapping of value_limit.limit_qualifier, the type_qualifier name shall
be 'minimum' or 'maximum' (and not 'mim' and 'max').</description>
  </issue>
  <issue id="TEH6" type="mapping_table" by="PHU" date="9/1/2002" status="closed">
    <description>In the non-tabular syntax of mapping specification, a global rule section  shall contain the name of rules (and possibly their clause number in the MIM).
</description>
  </issue>
  <issue id="TEH7" type="mapping_table" by="PHU" date="9/1/2002" status="closed">
    <description>Remove the empty elements in the mapping specification in order to get rid of empty sections (e.g. source when MIM
element=PATH)</description>
  </issue>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<issue
   id="RBN-1"
   type="arm"
   linkend="Extended_measure_representation_arm"
   status="closed"
   category="editorial"
   by="Greg Paul"
   date="03-01-20">
<description>
1106 has rules - we were not going have rules for the lowest level modules?  Oversight? 
</description>

<comment
   by="Pascal Huau"
   date="03-01-21">
<description>
there is a legend running in SC4 that says that there shall be no rule in base modules.
 
This is not true. There are and will be rules in base modules, but not any kind of rules.
 
The rules you may find in base modules are those that maps a particular constraint of the ARM, that is specific to a construct of that module and/or that shall not be contradicted by another constraint in another module used simultaneously with the first module in a same CC.
 
On the other hand, rules that may be contradicted in another module shall not be included in a base module.
For example, a rule that requires that any instance of product is approved, shall not be included in Product_identification but in a CC or AP module.
 
The major reason to have a rule in a base module is that we do not have to duplicate and don't risk to forget to duplicate that rule in every module that uses the considered module.
 
 
For example, in extended_measure_representation, we want to restrict the composition of subtypes of representation_item. It makes sense to define the rules (which in that case could be subtype_constraints) in extended_measure_representation, as the constraints they define are general and as it would make no sense that another module allows the compositions that are forbidden by these rules.

</description>
</comment>
</issue>

</issues>
