(*
   $Id: mkmodule.js,v 1.46 2010/02/04 16:48:02 robbod Exp $
   N - ISO/CD-TS - 10303- externally_conditioned_data_quality_criteria - EXPRESS ARM*)
(* UNDER DEVELOPMENT *)
SCHEMA Externally_conditioned_data_quality_criteria_arm;

  USE FROM Document_assignment_arm;

  USE FROM Product_data_quality_criteria_arm;

  USE FROM Externally_conditioned_data_quality_inspection_result_arm;

  REFERENCE FROM Support_resource_arm
    (bag_to_set);
 
  TYPE ecdq_documented_element_select =  EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON documented_element_select WITH 
   (Externally_conditioned_data_quality_criterion);
  END_TYPE; 
  
  ENTITY Disallowed_assembly_relationship_used
    SUBTYPE OF(Use_of_restricted_functionality);
  WHERE
    WR1: validate_ecdq_inspected_elements_type(SELF,
     ['ASSEMBLY_STRUCTURE_ARM.ASSEMBLY_COMPONENT_RELATIONSHIP']);
  END_ENTITY;

  ENTITY Excessive_use_of_groups
    SUBTYPE OF(Use_of_restricted_functionality);
  WHERE
    WR1: validate_ecdq_inspected_elements_type(SELF, ['GROUP_ARM.GROUP']);
  END_ENTITY;
  
  ENTITY Excessive_use_of_layers
    SUBTYPE OF(Use_of_restricted_functionality);
  WHERE
    WR1: validate_ecdq_inspected_elements_type(SELF,['LAYER_ASSIGNMENT_ARM.LAYER']);
  END_ENTITY;

  ENTITY Externally_conditioned_data_quality_criteria_representation
    SUBTYPE OF(Data_quality_criteria_representation);
    WHERE
      WR1 : SIZEOF( QUERY( q <* SELF\representation.items|
                               'EXTERNALLY_CONDITIONED_DATA_QUALITY_CRITERIA_ARM.' +
                               'EXTERNALLY_CONDITIONED_DATA_QUALITY_CRITERION' IN TYPEOF(q))) > 0;
  END_ENTITY;

  ENTITY Externally_conditioned_data_quality_criterion
    SUPERTYPE OF (ONEOF(Violation_of_agreed_conditions_on_system_environment,
                        Miscellaneous_violation,
                        Use_of_restricted_functionality))
    SUBTYPE OF(Data_quality_criterion,Data_quality_measurement_requirement);
    WHERE
      WR1 : SIZEOF(USEDIN(SELF,
            'PRODUCT_DATA_QUALITY_CRITERIA_ARM.'+
            'DATA_QUALITY_CRITERION_ASSESSMENT_ASSOCIATION.'+
            'CRITERION'
            )) = 0;
      WR2 : SIZEOF(USEDIN(SELF,
                    'PRODUCT_DATA_QUALITY_CRITERIA_ARM.'+
                    'DATA_QUALITY_CRITERION_MEASUREMENT_ASSOCIATION.'+
                    'RELATING_REPRESENTATION_ITEM')) = 0;
  END_ENTITY;

  ENTITY Inappropriate_element_visibility
    SUBTYPE OF(Miscellaneous_violation);
  WHERE
    WR1: validate_ecdq_inspected_elements_type(SELF, 
      ['APPEARANCE_ASSIGNMENT_ARM.STYLED_ELEMENT']);
  END_ENTITY;

  ENTITY Inappropriate_use_of_layer
    SUBTYPE OF(Use_of_restricted_functionality);
  WHERE
    WR1: validate_ecdq_inspected_elements_type(SELF, 
    ['LAYER_ASSIGNMENT_ARM.LAYER']);
  END_ENTITY;

  ENTITY Inconsistent_element_reference
    SUBTYPE OF(Miscellaneous_violation);
  WHERE
    WR1: validate_ecdq_inspected_elements_type(SELF, 
    ['FOUNDATION_REPRESENTATION_ARM.REPRESENTATION_ITEM']);
  END_ENTITY;

  ENTITY Miscellaneous_violation
    ABSTRACT SUPERTYPE OF (ONEOF(Inappropriate_element_visibility,
                        Inconsistent_element_reference,
                        Non_referenced_coordinate_system,
                        Unused_shape_element,
                        Wrong_element_name))
    SUBTYPE OF(Externally_conditioned_data_quality_criterion);
  END_ENTITY;

  ENTITY Non_agreed_accuracy_parameter_used
    SUBTYPE OF(Violation_of_agreed_conditions_on_system_environment);
  WHERE
    WR1: validate_ecdq_inspected_elements_type(SELF, 
     ['FOUNDATION_REPRESENTATION_ARM.NUMERICAL_REPRESENTATION_CONTEXT']);
  END_ENTITY;
  
  ENTITY  Non_agreed_scale_used
    SUBTYPE OF(Violation_of_agreed_conditions_on_system_environment);
  WHERE
    WR1: validate_ecdq_inspected_elements_type(SELF,
     ['ELEMENTAL_GEOMETRIC_SHAPE_ARM.CARTESIAN_TRANSFORMATION_3D']);
  END_ENTITY;

  ENTITY Non_agreed_unit_used
    SUBTYPE OF(Violation_of_agreed_conditions_on_system_environment);
  WHERE
    WR1: validate_ecdq_inspected_elements_type(SELF,
     ['FOUNDATION_REPRESENTATION_ARM.NUMERICAL_REPRESENTATION_CONTEXT']);
  END_ENTITY;

  ENTITY Non_referenced_coordinate_system
    SUBTYPE OF(Miscellaneous_violation);
  WHERE
    WR1: validate_ecdq_inspected_elements_type(SELF, 
      ['ELEMENTAL_GEOMETRIC_SHAPE_ARM.AXIS_PLACEMENT']);
  END_ENTITY;

  ENTITY Unused_shape_element
    SUBTYPE OF(Miscellaneous_violation);
  WHERE
    WR1: validate_ecdq_inspected_elements_type(SELF, 
      ['FOUNDATION_REPRESENTATION_ARM.REPRESENTATION_ITEM']);
  END_ENTITY;

  ENTITY Use_of_restricted_functionality
    ABSTRACT SUPERTYPE OF (ONEOF(Disallowed_assembly_relationship_used,
                        Excessive_use_of_groups,
                        Excessive_use_of_layers,
                        Inappropriate_use_of_layer))
    SUBTYPE OF(Externally_conditioned_data_quality_criterion);
  END_ENTITY;
  
  ENTITY Violation_of_agreed_conditions_on_system_environment
    ABSTRACT SUPERTYPE OF (ONEOF(Non_agreed_accuracy_parameter_used,
                        Non_agreed_scale_used,
                        Non_agreed_unit_used))
    SUBTYPE OF(Externally_conditioned_data_quality_criterion);
  END_ENTITY;

  ENTITY Wrong_element_name
    SUBTYPE OF(Miscellaneous_violation);
  WHERE
    WR1: validate_ecdq_inspected_elements_type(SELF, 
      ['FOUNDATION_REPRESENTATION_ARM.REPRESENTATION_ITEM']);
  END_ENTITY;

  FUNCTION validate_ecdq_inspected_elements_type
      (ei:Externally_conditioned_data_quality_criterion;
       type_list:BAG OF STRING):LOGICAL;
       LOCAL
         edqir: SET OF
          Externally_conditioned_data_quality_inspection_result:=[];
         dir: SET OF
          Data_quality_inspection_instance_report:=[];
         ediri: SET OF
          Externally_conditioned_Data_quality_inspection_instance_report_item:=[];
         t_type_list:BAG OF STRING:=[];
       END_LOCAL;
    
       -- STEP-1
       -- collect all Externally_conditioned_data_quality_inspection_instance_report_item
       -- instances associated with the given Externally_conditioned_data_quality_criterion
       -- via Externally_conditioned_data_quality_inspection_result and
       -- data_quality_instance_report
  
       edqir := QUERY(q <* bag_to_set(USEDIN(ei,
                     'PRODUCT_DATA_QUALITY_INSPECTION_RESULT_ARM.'+
                     'DATA_QUALITY_INSPECTION_RESULT.'+
                     'CRITERION_INSPECTED'))|
             'EXTERNALLY_CONDITIONED_DATA_QUALITY_INSPECTION_RESULT_ARM.'+
             'EXTERNALLY_CONDITIONED_DATA_QUALITY_INSPECTION_RESULT'
              IN TYPEOF(q));
       IF(SIZEOF(edqir) = 0) THEN
         RETURN(TRUE);
       END_IF;
       REPEAT i:= 1 TO SIZEOF(edqir);
         dir := dir + QUERY(q <* bag_to_set(USEDIN(edqir[i],
                     'PRODUCT_DATA_QUALITY_INSPECTION_RESULT_ARM.'+
                     'DATA_QUALITY_INSPECTION_REPORT.'+
                     'INSPECTION_RESULT'))|
             'PRODUCT_DATA_QUALITY_INSPECTION_RESULT_ARM.'+
             'DATA_QUALITY_INSPECTION_INSTANCE_REPORT'
              IN TYPEOF(q));
       END_REPEAT;
       IF(SIZEOF(dir) = 0) THEN
         RETURN(TRUE);
       END_IF;
  
       REPEAT i:= 1 TO SIZEOF(dir);
         ediri := ediri + QUERY(q <* dir[i].inspected_instances|
             'EXTERNALLY_CONDITIONE_DATA_QUALITY_INSPECTION_RESULT_ARM.'+
             'EXTERNALLY_CONDITIONE_DATA_QUALITY_INSPECTION_INSTANCE_REPORT_ITEM'
              IN TYPEOF(q));
       END_REPEAT;
  
       -- STEP-2
       -- check whether the types of inspected_elements attribute
       -- of collected instances include all the type names 
       -- in the type list given as an input argument of this 
       -- function and they do not include any other type names. 
  
       -- If there is no instance_report_item, then this function returns true.
       IF(SIZEOF(ediri) = 0) THEN
         RETURN(TRUE);
       END_IF;
    
       -- When reports exist, then perform checking process.
       REPEAT i:= 1 TO SIZEOF(ediri);
         -- If size of inspected_elements is not equal to the size of
         -- type_list, then return false.
         IF(SIZEOF(ediri[i].inspected_elements) <> 
            SIZEOF(type_list)) THEN
           RETURN(FALSE);
         END_IF;
         -- check all elements of type_lists 
         -- for each elements of inspected_elements.
         t_type_list := type_list;
         REPEAT j:= 1 TO SIZEOF(ediri[i].inspected_elements);
           REPEAT k:= 1 TO SIZEOF(t_type_list);
             IF(t_type_list[k] IN
                TYPEOF(ediri[i].inspected_elements[j])) THEN
              t_type_list := t_type_list - t_type_list[k];
              ESCAPE;
             END_IF;
           END_REPEAT;
         END_REPEAT;
         IF(SIZEOF(t_type_list) > 0) THEN
           RETURN(FALSE);
         END_IF;
       END_REPEAT;
    
      RETURN(TRUE);
  END_FUNCTION;

END_SCHEMA;