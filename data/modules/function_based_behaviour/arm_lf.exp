(*
   $Id: arm_lf.exp,v 1.14 2008/10/14 21:59:53 abhpf Exp $
   ISO TC184/SC4/WG3 N2483 - ISO/TS 10303-1453 Function based behaviour -  EXPRESS ARM Long form
   Supersedes ISO TC184/SC4/WG12 N2289
*)

(* ===================================================================================== *)
(* Long form schema generated by The EXPRESS Data Manager  compiler version 9.7.1B.20070802*)
(* Tue Oct 14 14:48:42 2008                                                                *)
(* The schema is converted from ISO10303 P11-2003 to ISO10303 P11-1994                     *)
(* ===================================================================================== *)

SCHEMA Function_based_behaviour_arm_LF;


(*
USE FROM Behaviour_description_assignment_arm;

USE FROM Expression_assignment_arm;

USE FROM External_functional_model_arm;

USE FROM General_model_parameter_arm;

USE FROM Required_resource_arm;

USE FROM Resource_property_assignment_arm;

USE FROM Textual_expression_representation_arm;
*)
(* USED FROM (Textual_expression_representation_arm); *)
TYPE set_of_text_based_item = SET [1 : ?] OF Textual_expression_representation_item;
END_TYPE;

(* Pruned unused type: fbb_characterized_resource_select  *)


(* Pruned unused type: fbb_classification_item  *)


(* Pruned unused type: fbb_condition_item  *)


(* Pruned unused type: fbb_condition_parameter_item  *)


(* Pruned unused type: fbb_expression_assignment_item  *)


(* Pruned unused type: fbb_identification_item  *)


(* Pruned unused type: fbb_property_assignment_select  *)


(* Pruned unused type: fbb_required_resource_item  *)


(* Pruned unused type: fbb_resource_assignment_item  *)


(* Pruned unused type: fbb_resource_item_select  *)


(* Pruned unused type: fbb_task_item  *)


(* Pruned unused type: functional_behaviour_model  *)

(* USED FROM (Behaviour_description_assignment_arm); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE behaviour_item = SELECT (
   Behaviour_view_definition);
END_TYPE;

(* USED FROM (Behaviour_description_assignment_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE behaviour_model = SELECT (
   Function_based_behaviour_model);
END_TYPE;


(* Pruned unused type: behaviour_view_definition_identification_item  *)

(* USED FROM (Expression_assignment_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE expression_assignment_item = SELECT (
   Condition);
END_TYPE;


(* Pruned unused type: located_select  *)


(* Pruned unused type: gmp_classification_item  *)


(* Pruned unused type: required_resource_classification_item  *)

(* USED FROM (Required_resource_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE required_resource_item = SELECT (
   Activity_method,
   Product,
   Product_version,
   Product_view_definition,
   Task_element,
   Task_step);
END_TYPE;

(* USED FROM (Resource_property_assignment_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE characterized_resource_select = SELECT (
   Required_resource,
   Resource_item,
   Resource_item_relationship);
END_TYPE;

(* USED FROM (Textual_expression_representation_arm); *)
TYPE list_of_text_based_item = LIST [1 : ?] OF Textual_expression_representation_item;
END_TYPE;
(* USED FROM (Textual_expression_representation_arm); *)
TYPE list_or_set_of_text_based_item = SELECT 
  (list_of_text_based_item,
   set_of_text_based_item);
END_TYPE;

(* Pruned unused type: fbb_activity_method_item  *)


(* Pruned unused type: ter_classification_item  *)

(* USED FROM (Textual_expression_representation_arm); *)
TYPE text_based_item_select = SELECT 
  (Included_text_based_representation,
   Textual_expression_composition,
   Textual_expression_representation_item);
END_TYPE;

(* Pruned unused type: behaviour_and_version_identification_item  *)

(* USED FROM (Identification_assignment_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE identification_item = SELECT (
   Activity_method,
   Activity_method_relationship,
   Applied_activity_method_assignment,
   Behaviour,
   Behaviour_version,
   Behaviour_view_definition,
   Condition,
   Digital_file,
   External_class_library,
   External_source_identification,
   File,
   Independent_property,
   Independent_property_relationship,
   Product,
   Product_category,
   Product_version,
   Product_view_definition,
   Representation,
   Required_resource,
   Required_resource_relationship,
   Resource_item,
   Resource_property,
   Task_element,
   Task_element_relationship,
   Task_io,
   Task_step);
END_TYPE;

(* USED FROM (External_item_identification_assignment_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE external_identification_item = SELECT (
   File);
END_TYPE;

(* USED FROM (Task_element_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE task_item = activity_method_item;
WHERE
  wr1 : NOT ('FUNCTION_BASED_BEHAVIOUR_ARM.ACTIVITY_METHOD' IN TYPEOF(SELF));
  wr2 : NOT ('FUNCTION_BASED_BEHAVIOUR_ARM.ASSIGNED_PROPERTY' IN TYPEOF(SELF));
  wr3 : NOT ('FUNCTION_BASED_BEHAVIOUR_ARM.BEHAVIOUR_DESCRIPTION_ASSOCIATION' IN TYPEOF(SELF));
  wr4 : NOT ('FUNCTION_BASED_BEHAVIOUR_ARM.CONDITION' IN TYPEOF(SELF));
  wr5 : NOT ('FUNCTION_BASED_BEHAVIOUR_ARM.FILE' IN TYPEOF(SELF));
  wr6 : NOT ('FUNCTION_BASED_BEHAVIOUR_ARM.PRODUCT_VERSION_RELATIONSHIP' IN TYPEOF(SELF));
  wr7 : NOT ('FUNCTION_BASED_BEHAVIOUR_ARM.REQUIRED_RESOURCE' IN TYPEOF(SELF));
  wr8 : NOT ('FUNCTION_BASED_BEHAVIOUR_ARM.REQUIRED_RESOURCE_ASSIGNMENT' IN TYPEOF(SELF));
  wr9 : NOT ('FUNCTION_BASED_BEHAVIOUR_ARM.RESOURCE_ITEM' IN TYPEOF(SELF));
  wr10 : NOT ('FUNCTION_BASED_BEHAVIOUR_ARM.RESOURCE_PROPERTY' IN TYPEOF(SELF));
  wr11 : NOT ('FUNCTION_BASED_BEHAVIOUR_ARM.TASK_IO' IN TYPEOF(SELF));
  wr12 : NOT ('FUNCTION_BASED_BEHAVIOUR_ARM.TASK_IO_HIERARCHY' IN TYPEOF(SELF));
END_TYPE;

(* USED FROM (Value_with_unit_arm); *)
TYPE any_number_value = NUMBER;
END_TYPE; 
(* USED FROM (Value_with_unit_arm); *)
TYPE any_string_value = STRING;
END_TYPE; 
(* USED FROM (Value_with_unit_arm); *)
TYPE length_measure = REAL;
END_TYPE; 
(* USED FROM (Value_with_unit_arm); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE measure_value = SELECT (
   any_number_value,
   any_string_value,
   length_measure,
   plane_angle_measure);
END_TYPE;

(* USED FROM (Value_with_unit_arm); *)
TYPE plane_angle_measure = REAL;
END_TYPE; 
(* USED FROM (Classification_assignment_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE classification_item = SELECT (
   Activity_method,
   Activity_method_relationship,
   Applied_activity_method_assignment,
   Class,
   Condition,
   Condition_assignment,
   Condition_parameter,
   Condition_relationship,
   Constrained_general_parameter_relationship,
   Context_dependent_unit,
   Conversion_based_unit,
   Derived_unit,
   External_class_library,
   External_item_identification,
   External_source_identification,
   File,
   General_model_parameter,
   Identification_assignment,
   Independent_property,
   Independent_property_relationship,
   Parameter_value_representation_item,
   Product,
   Product_category,
   Product_version,
   Product_version_relationship,
   Product_view_definition,
   Representation,
   Representation_context,
   Representation_item,
   Required_resource,
   Required_resource_assignment,
   Required_resource_relationship,
   Resource_item,
   Resource_item_assignment,
   Resource_item_relationship,
   Resource_property,
   Resource_property_representation,
   Supplied_part_relationship,
   Text_based_representation,
   Uncertainty_with_unit,
   Unit,
   Value_with_unit,
   View_definition_context);
END_TYPE;


(* Pruned unused type: external_class_assigned_name_select  *)

(* USED FROM (Name_assignment_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE assigned_name_select = SELECT (
   External_class_library);
END_TYPE;

(* USED FROM (Parameter_value_specification_arm); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE parameter_value_select = SELECT (
   Generic_expression,
   Value_with_unit);
END_TYPE;

(* USED FROM (Property_assignment_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE property_assignment_select = SELECT (
   Activity_method,
   Assigned_property,
   Behaviour_view_definition,
   Condition_parameter,
   Generic_expression,
   Independent_property,
   Independent_property_relationship,
   Product,
   Product_category,
   Product_version,
   Product_version_relationship,
   Product_view_definition,
   Property_definition_representation,
   Representation,
   Representation_context,
   Representation_item);
END_TYPE;

(* USED FROM (Property_assignment_arm); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE represented_definition = SELECT (
   Assigned_property,
   Independent_property);
END_TYPE;

(* USED FROM (Resource_item_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE resource_assignment_item = SELECT (
   Activity_method,
   Product,
   Product_version,
   Product_view_definition);
END_TYPE;


(* Pruned unused type: resource_item_classification_item  *)

(* USED FROM (Resource_item_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE resource_item_select = SELECT (
   File,
   Product,
   Product_version,
   Product_view_definition);
END_TYPE;

(* USED FROM (Activity_method_assignment_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE activity_method_item = SELECT (
   Activity_method,
   Assigned_property,
   Behaviour_description_association,
   Condition,
   File,
   Product,
   Product_version,
   Product_version_relationship,
   Product_view_definition,
   Required_resource,
   Required_resource_assignment,
   Resource_item,
   Resource_property,
   Task_io,
   Task_io_hierarchy);
END_TYPE;


(* Pruned unused type: condition_classification_item  *)

(* USED FROM (Condition_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE condition_item = SELECT (
   Activity_method_relationship,
   Applied_activity_method_assignment,
   Assigned_property,
   Required_resource,
   Required_resource_assignment,
   Required_resource_relationship,
   Resource_item,
   Resource_item_assignment,
   Resource_item_relationship,
   Resource_property,
   Task_element_relationship);
END_TYPE;

(* USED FROM (Condition_arm); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE condition_parameter_item = SELECT (
   Activity_method,
   Assigned_property,
   Classification_assignment,
   Condition_relationship,
   Identification_assignment,
   Independent_property_representation,
   parameter_value_select,
   Product,
   Product_category_assignment,
   Product_version,
   Product_view_definition,
   Property_representation,
   Representation,
   Required_resource,
   Resource_property,
   Resource_property_representation);
END_TYPE;

(* USED FROM (Extended_task_element_arm); *)
ENTITY Decision_path;
  condition : Condition;
  defined_in : Multiple_decision_point;
  path_element : Task_element;
END_ENTITY;
(* USED FROM (Behaviour_view_definition_arm); *)
ENTITY Behaviour_view_definition
SUBTYPE OF (Product_view_definition);
  SELF\Product_view_definition.defined_version : Behaviour_version;
END_ENTITY;
(* USED FROM (Expression_assignment_arm); *)
ENTITY Expression_assignment;
  expression : Expression;
  items : SET [1 : ?] OF expression_assignment_item;
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY And_expression
SUBTYPE OF (Multiple_arity_boolean_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Binary_boolean_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        XOR_EXPRESSION,
                        EQUALS_EXPRESSION))

SUBTYPE OF (Boolean_expression, Binary_generic_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Binary_numeric_expression
	 ABSTRACT SUPERTYPE OF (ONEOF (
                        MINUS_EXPRESSION,
                        DIV_EXPRESSION,
                        MOD_EXPRESSION,
                        SLASH_EXPRESSION,
                        POWER_EXPRESSION))

SUBTYPE OF (Numeric_expression, Binary_generic_expression);
	SELF\Binary_generic_expression.operands : LIST [2:2] OF Numeric_expression;
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Boolean_defined_function 
	 ABSTRACT SUPERTYPE

	SUBTYPE OF (Defined_function, Boolean_expression);
END_ENTITY ;
(* USED FROM (Expression_arm); *)
ENTITY Boolean_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        SIMPLE_BOOLEAN_EXPRESSION,
                        UNARY_BOOLEAN_EXPRESSION,
                        BINARY_BOOLEAN_EXPRESSION,
                        MULTIPLE_ARITY_BOOLEAN_EXPRESSION,
                        COMPARISON_EXPRESSION,
                        INTERVAL_EXPRESSION,
                        BOOLEAN_DEFINED_FUNCTION))

SUBTYPE OF (Expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Boolean_literal
SUBTYPE OF (Simple_boolean_expression, Generic_literal);
	the_value: BOOLEAN;
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Boolean_variable
SUBTYPE OF (Simple_boolean_expression, Variable);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Comparison_equal
SUBTYPE OF (Comparison_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Comparison_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        COMPARISON_EQUAL,
                        COMPARISON_GREATER,
                        COMPARISON_GREATER_EQUAL,
                        COMPARISON_LESS,
                        COMPARISON_LESS_EQUAL,
                        COMPARISON_NOT_EQUAL,
                        LIKE_EXPRESSION))

SUBTYPE OF (Boolean_expression, Binary_generic_expression);
	SELF\Binary_generic_expression.operands	: LIST [2:2] OF Expression; 
WHERE 
	WR1: (
	('NUMERIC_EXPRESSION_ARM.NUMERIC_EXPRESSION' 
		IN TYPEOF(SELF\Binary_generic_expression.operands[1]))
AND 
 	('NUMERIC_EXPRESSION_ARM.NUMERIC_EXPRESSION' 
		IN TYPEOF(SELF\Binary_generic_expression.operands[2])))
OR
 	(('BOOLEAN_EXPRESSION_ARM.BOOLEAN_EXPRESSION' 
		IN TYPEOF(SELF\Binary_generic_expression.operands[1]))
AND 
	('BOOLEAN_EXPRESSION_ARM.BOOLEAN_EXPRESSION'
		IN TYPEOF(SELF\Binary_generic_expression.operands[2])))
OR
	(('STRING_EXPRESSION_ARM.STRING_EXPRESSION'
		IN TYPEOF(SELF\Binary_generic_expression.operands[1]))
AND 
	('STRING_EXPRESSION_ARM.STRING_EXPRESSION' 
		IN TYPEOF(SELF\Binary_generic_expression.operands[2])));
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Comparison_greater
SUBTYPE OF (Comparison_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Comparison_greater_equal
SUBTYPE OF (Comparison_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Comparison_less
SUBTYPE OF (Comparison_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Comparison_less_equal
SUBTYPE OF (Comparison_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Comparison_not_equal
	SUBTYPE OF (Comparison_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Concat_expression
SUBTYPE OF (String_expression, Multiple_arity_generic_expression);
	SELF\Multiple_arity_generic_expression.operands: LIST [2 : ?] OF String_expression;
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Defined_function
	 ABSTRACT SUPERTYPE;
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Div_expression
	SUBTYPE OF (Binary_numeric_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Equals_expression
SUBTYPE OF (Binary_boolean_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Expression
	 ABSTRACT SUPERTYPE OF (ONEOF (
                        NUMERIC_EXPRESSION,
                        BOOLEAN_EXPRESSION,
                        STRING_EXPRESSION))

	SUBTYPE OF (Generic_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Format_function
SUBTYPE OF (String_expression, Binary_generic_expression);
DERIVE
	value_to_format: Generic_expression:=SELF\Binary_generic_expression.operands[1];
	format_string:Generic_expression:=SELF\Binary_generic_expression.operands[2];
WHERE
	WR1: (('FUNCTION_BASED_BEHAVIOUR_ARM_LF.NUMERIC_EXPRESSION') 
					IN TYPEOF(value_to_format)) 
			AND (('FUNCTION_BASED_BEHAVIOUR_ARM_LF.STRING_EXPRESSION') 
					IN TYPEOF(format_string));
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Index_expression
SUBTYPE OF (String_expression, Binary_generic_expression);

DERIVE
	operand:Generic_expression:= SELF\Binary_generic_expression.operands[1];
	index:Generic_expression:= SELF\Binary_generic_expression.operands[2];
WHERE
WR1: ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.STRING_EXPRESSION' IN TYPEOF(operand))
		AND ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.NUMERIC_EXPRESSION' IN TYPEOF(index));
	WR2: is_int_expr (index);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Int_literal
SUBTYPE OF (Literal_number);
	SELF\Literal_number.the_value: INTEGER;
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Int_numeric_variable
SUBTYPE OF (Numeric_variable);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Interval_expression
SUBTYPE OF (Boolean_expression, Multiple_arity_generic_expression) ;
DERIVE
	interval_low: Generic_expression
			:= SELF\Multiple_arity_generic_expression.operands[1];
	interval_item: Generic_expression
			:= SELF\Multiple_arity_generic_expression.operands[2];
	interval_high: Generic_expression
			:= SELF\Multiple_arity_generic_expression.operands[3];
WHERE
	WR1:('FUNCTION_BASED_BEHAVIOUR_ARM_LF.EXPRESSION' 
				IN TYPEOF(interval_low))
		AND ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.EXPRESSION' 
				IN TYPEOF(interval_item) )
		AND ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.EXPRESSION' 
				IN TYPEOF(interval_high));
	WR2:(('FUNCTION_BASED_BEHAVIOUR_ARM_LF.STRING_EXPRESSION' 
				IN TYPEOF (SELF.Interval_low)) 
			AND ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.STRING_EXPRESSION'  
				IN TYPEOF (SELF.Interval_high)) 
			AND ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.STRING_EXPRESSION' 
				IN TYPEOF (SELF.Interval_item))) 
		OR
		(('FUNCTION_BASED_BEHAVIOUR_ARM_LF.STRING_EXPRESSION' 
			IN TYPEOF(SELF.Interval_low)) 
			AND ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.NUMERIC_EXPRESSION' 
				IN TYPEOF(SELF.Interval_item)) 
			AND ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.NUMERIC_EXPRESSION' 
				IN TYPEOF(SELF.Interval_high)));
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Like_expression
SUBTYPE OF (Comparison_expression);
WHERE
	WR1: ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.STRING_EXPRESSION' 
		IN TYPEOF(SELF\Comparison_expression.operands[1])) AND 
		('FUNCTION_BASED_BEHAVIOUR_ARM_LF.STRING_EXPRESSION' 
		IN TYPEOF(SELF\Comparison_expression.operands[2]));
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Literal_number 
 ABSTRACT SUPERTYPE OF (ONEOF (
                        INT_LITERAL,
                        REAL_LITERAL))

SUBTYPE OF (Simple_numeric_expression, Generic_literal);
	the_value: NUMBER;
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Minus_expression
	SUBTYPE OF (Binary_numeric_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Mod_expression
	SUBTYPE OF (Binary_numeric_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Mult_expression
	SUBTYPE OF (Multiple_arity_numeric_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Multiple_arity_boolean_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        AND_EXPRESSION,
                        OR_EXPRESSION))

SUBTYPE OF (Boolean_expression, Multiple_arity_generic_expression);
	SELF\Multiple_arity_generic_expression.operands : LIST [2:?] OF Boolean_expression;
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Multiple_arity_function_call
	 ABSTRACT SUPERTYPE

	SUBTYPE OF (Multiple_arity_numeric_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Multiple_arity_numeric_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        PLUS_EXPRESSION,
                        MULT_EXPRESSION,
                        MULTIPLE_ARITY_FUNCTION_CALL))

SUBTYPE OF (Numeric_expression, Multiple_arity_generic_expression);
	SELF\Multiple_arity_generic_expression.operands	: LIST [2:?] OF Numeric_expression;
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Not_expression
SUBTYPE OF (Unary_boolean_expression);
SELF\Unary_generic_expression.operand: Boolean_expression;
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Numeric_expression
 ABSTRACT SUPERTYPE

SUBTYPE OF (Expression);
DERIVE
	is_int: BOOLEAN := Is_int_expr (SELF);
	sql_mappable: BOOLEAN := Is_sql_mappable (SELF);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Numeric_variable
SUPERTYPE OF (ONEOF (
              INT_NUMERIC_VARIABLE,
              REAL_NUMERIC_VARIABLE))

SUBTYPE OF (Simple_numeric_expression, Variable);


WHERE 
WR1:	('FUNCTION_BASED_BEHAVIOUR_ARM_LF.INT_NUMERIC_VARIABLE' IN TYPEOF(SELF) ) OR
	('FUNCTION_BASED_BEHAVIOUR_ARM_LF.REAL_NUMERIC_VARIABLE' IN TYPEOF(SELF) );
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Or_expression
SUBTYPE OF (Multiple_arity_boolean_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Plus_expression
	SUBTYPE OF (Multiple_arity_numeric_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Power_expression
SUBTYPE OF (Binary_numeric_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Real_literal
SUBTYPE OF (Literal_number); 
	SELF\Literal_number.the_value: REAL;
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Real_numeric_variable
SUBTYPE OF (Numeric_variable);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Simple_boolean_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        BOOLEAN_LITERAL,
                        BOOLEAN_VARIABLE))

SUBTYPE OF (Boolean_expression, Simple_generic_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Simple_numeric_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        LITERAL_NUMBER,
                        NUMERIC_VARIABLE))

SUBTYPE OF (Numeric_expression, Simple_generic_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Simple_string_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        STRING_LITERAL,
                        STRING_VARIABLE))

SUBTYPE OF (String_expression, Simple_generic_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Slash_expression
	SUBTYPE OF (Binary_numeric_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Sql_mappable_defined_function
	 ABSTRACT SUPERTYPE

	SUBTYPE OF (Defined_function);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY String_defined_function 
	 ABSTRACT SUPERTYPE

	SUBTYPE OF (Defined_function, String_expression);
END_ENTITY ;
(* USED FROM (Expression_arm); *)
ENTITY String_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        SIMPLE_STRING_EXPRESSION,
                        INDEX_EXPRESSION,
                        SUBSTRING_EXPRESSION,
                        CONCAT_EXPRESSION,
                        FORMAT_FUNCTION,
                        STRING_DEFINED_FUNCTION))

SUBTYPE OF (Expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY String_literal
SUBTYPE OF (Simple_string_expression, Generic_literal);
	the_value: STRING;
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY String_variable
SUBTYPE OF (Simple_string_expression, Variable);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Substring_expression
SUBTYPE OF (String_expression, Multiple_arity_generic_expression);

DERIVE
	operand:Generic_expression:=SELF\Multiple_arity_generic_expression.operands[1];
	index1:Generic_expression:=SELF\Multiple_arity_generic_expression.operands[2];
	index2:Generic_expression:=SELF\Multiple_arity_generic_expression.operands[3]; 
WHERE
	WR1: ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.STRING_EXPRESSION' 
					IN TYPEOF(operand))
			AND ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.NUMERIC_EXPRESSION' 
					IN TYPEOF(index1))
			AND ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.NUMERIC_EXPRESSION' 
					IN TYPEOF(index2));
	WR2: SIZEOF(SELF\Multiple_arity_generic_expression.operands)=3;
	WR3: is_int_expr (index1);
	WR4: is_int_expr (index2);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Unary_boolean_expression
 ABSTRACT SUPERTYPE

SUBTYPE OF (Boolean_expression, Unary_generic_expression);
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Unary_numeric_expression
 ABSTRACT SUPERTYPE

SUBTYPE OF (Numeric_expression, Unary_generic_expression);	
  SELF\Unary_generic_expression.operand	: Numeric_expression;
END_ENTITY;
(* USED FROM (Expression_arm); *)
ENTITY Xor_expression
SUBTYPE OF (Binary_boolean_expression);
	SELF\Binary_generic_expression.operands: LIST [2:2] OF Boolean_expression;
END_ENTITY;
(* USED FROM (Generic_expression_arm); *)
ENTITY Binary_generic_expression
 ABSTRACT SUPERTYPE

SUBTYPE OF(Generic_expression);
	operands: LIST [2:2] OF Generic_expression;
END_ENTITY;
(* USED FROM (Generic_expression_arm); *)
ENTITY Environment;
	syntactic_representation: Generic_variable;
	semantics: Variable_semantics;
END_ENTITY;
(* USED FROM (Generic_expression_arm); *)
ENTITY Generic_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        SIMPLE_GENERIC_EXPRESSION,
                        UNARY_GENERIC_EXPRESSION,
                        BINARY_GENERIC_EXPRESSION,
                        MULTIPLE_ARITY_GENERIC_EXPRESSION));
WHERE 
WR1: Is_Acyclic(SELF);
END_ENTITY;
(* USED FROM (Generic_expression_arm); *)
ENTITY Generic_literal
 ABSTRACT SUPERTYPE

SUBTYPE OF (Simple_generic_expression);
END_ENTITY; 
(* USED FROM (Generic_expression_arm); *)
ENTITY Generic_variable
 ABSTRACT SUPERTYPE OF (
                        VARIABLE)

SUBTYPE OF (Simple_generic_expression);
INVERSE
	interpretation : Environment FOR syntactic_representation;
END_ENTITY;
(* USED FROM (Generic_expression_arm); *)
ENTITY Multiple_arity_generic_expression
 ABSTRACT SUPERTYPE

SUBTYPE OF(Generic_expression);
	operands: LIST [2:?] OF Generic_expression;
END_ENTITY;
(* USED FROM (Generic_expression_arm); *)
ENTITY Simple_generic_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        GENERIC_LITERAL,
                        GENERIC_VARIABLE))

SUBTYPE OF (Generic_expression);
END_ENTITY;
(* USED FROM (Generic_expression_arm); *)
ENTITY Unary_generic_expression
 ABSTRACT SUPERTYPE

SUBTYPE OF(Generic_expression);
	operand: Generic_expression;
END_ENTITY;
(* USED FROM (Generic_expression_arm); *)
ENTITY Variable
 ABSTRACT SUPERTYPE

SUBTYPE OF(Generic_variable);
END_ENTITY;
(* USED FROM (Generic_expression_arm); *)
ENTITY Variable_semantics
 ABSTRACT SUPERTYPE;
END_ENTITY;
(* USED FROM (External_functional_model_arm); *)
ENTITY External_functional_model
SUBTYPE OF (Function_based_behaviour_model);
  external_file : Digital_file;
END_ENTITY;
(* USED FROM (File_identification_arm); *)
ENTITY Digital_file
SUBTYPE OF (File);
END_ENTITY;
(* USED FROM (File_identification_arm); *)
ENTITY File
 ABSTRACT SUPERTYPE OF (ONEOF (
                        DIGITAL_FILE,
                        HARDCOPY));
  id : STRING;
  version : OPTIONAL STRING;
  contained_data_type : OPTIONAL STRING;
END_ENTITY;
(* USED FROM (File_identification_arm); *)
ENTITY Hardcopy
SUBTYPE OF (File);
END_ENTITY;
(* USED FROM (File_identification_arm); *)
ENTITY File_location_identification
SUBTYPE OF (External_item_identification);
WHERE
WR1: 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.FILE' IN TYPEOF(SELF\External_source_identification.item);
END_ENTITY;
(* USED FROM (Function_based_behaviour_representation_arm); *)
ENTITY Function_based_behaviour_model
SUBTYPE OF (Representation);
  SELF\Representation.context_of_items : Function_based_behaviour_representation_context;
  SELF\Representation.items : SET [1 : ?] OF Function_based_behaviour_representation_item;
END_ENTITY;
(* USED FROM (Function_based_behaviour_representation_arm); *)
ENTITY Function_based_behaviour_representation_context
SUBTYPE OF (Representation_context);
END_ENTITY;
(* USED FROM (Function_based_behaviour_representation_arm); *)
ENTITY Function_based_behaviour_representation_item
SUBTYPE OF (Representation_item);
  item : Task_element;
END_ENTITY;
(* USED FROM (General_model_parameter_arm); *)
ENTITY Constrained_general_parameter_relationship
SUBTYPE OF (Independent_property_relationship);
  SELF\Independent_property_relationship.relating : General_model_parameter;
  SELF\Independent_property_relationship.related : General_model_parameter;
  required_class : Class;
WHERE
    WR1: (required_class.id IN CLASSOF(related)) AND (required_class.id IN CLASSOF(relating));
END_ENTITY;
(* USED FROM (General_model_parameter_arm); *)
ENTITY General_model_parameter
SUBTYPE OF (Independent_property);
END_ENTITY;
(* USED FROM (General_model_parameter_arm); *)
ENTITY Parameter_value_representation_item
SUBTYPE OF (Representation_item);
  parameter_value : parameter_value_select;
END_ENTITY;
(* USED FROM (Required_resource_arm); *)
ENTITY Required_resource
   ABSTRACT SUPERTYPE OF (ONEOF (
                        REQUIRED_RESOURCE_BY_RESOURCE_ITEM,
                        REQUIRED_RESOURCE_BY_SPECIFICATION));
  name : STRING;
  description : OPTIONAL STRING;
  required_quantity : OPTIONAL Value_with_unit;
END_ENTITY;
(* USED FROM (Required_resource_arm); *)
ENTITY Required_resource_assignment;
  assigned_resource : Required_resource;
  item : required_resource_item;
END_ENTITY;
(* USED FROM (Required_resource_arm); *)
ENTITY Required_resource_by_resource_item
  SUBTYPE OF (Required_resource);
  resource_item : Resource_item;
END_ENTITY;
(* USED FROM (Required_resource_arm); *)
ENTITY Required_resource_by_specification
  SUBTYPE OF (Required_resource);
END_ENTITY;
(* USED FROM (Required_resource_arm); *)
ENTITY Required_resource_relationship;
  name : STRING;
  description : OPTIONAL STRING;
  relating : Required_resource;
  related : Required_resource;
END_ENTITY;
(* USED FROM (Resource_property_assignment_arm); *)
ENTITY Applied_independent_resource_property
  SUBTYPE OF (Resource_property);
  base_element_property : Independent_property;
DERIVE
  SELF\Resource_property.name : STRING := base_element_property.property_type;
END_ENTITY;
(* USED FROM (Resource_property_assignment_arm); *)
ENTITY Resource_property;
  name : STRING;
  description : STRING;
  described_element : characterized_resource_select;
END_ENTITY;
(* USED FROM (Resource_property_assignment_arm); *)
ENTITY Resource_property_representation;
  description : OPTIONAL STRING;
  property : Resource_property;
  rep : Representation;
  role : STRING;
END_ENTITY;
(* USED FROM (Textual_expression_representation_arm); *)
ENTITY Included_text_based_representation
SUBTYPE OF (Representation_item);
  source : Text_based_representation;
END_ENTITY;
(* USED FROM (Textual_expression_representation_arm); *)
ENTITY Text_based_representation
SUBTYPE OF (Representation);
  SELF\Representation.context_of_items : Text_based_representation_context;
  SELF\Representation.items : SET [1 : 1] OF text_based_item_select;
END_ENTITY;
(* USED FROM (Textual_expression_representation_arm); *)
ENTITY Text_based_representation_context
SUBTYPE OF (Representation_context);
END_ENTITY;
(* USED FROM (Textual_expression_representation_arm); *)
ENTITY Textual_expression_composition
SUBTYPE OF (Representation_item);
  content : list_or_set_of_text_based_item;
END_ENTITY;
(* USED FROM (Textual_expression_representation_arm); *)
ENTITY Textual_expression_representation_item
SUBTYPE OF (String_representation_item);
END_ENTITY;
(* USED FROM (Behaviour_identification_and_version_arm); *)
ENTITY Behaviour
SUBTYPE OF (Product);
END_ENTITY;
(* USED FROM (Behaviour_identification_and_version_arm); *)
ENTITY Behaviour_version
SUBTYPE OF (Product_version);
  SELF\Product_version.of_product : Behaviour;
END_ENTITY;
(* USED FROM (Behaviour_identification_and_version_arm); *)
ENTITY Behaviour_version_sequence
SUBTYPE OF (Product_version_relationship);
  SELF\Product_version_relationship.relating_version : Behaviour_version;  -- predecessor : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, an attribute with the new name is in the DERIVE clause
  SELF\Product_version_relationship.related_version : Behaviour_version;  -- successor : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, an attribute with the new name is in the DERIVE clause
    DERIVE
      predecessor : BEHAVIOUR_VERSION := SELF\Product_version_relationship.relating_version;  -- RELATING_VERSION : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, this is the new name implemented as DERIVE
      successor : BEHAVIOUR_VERSION := SELF\Product_version_relationship.related_version;  -- RELATED_VERSION : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, this is the new name implemented as DERIVE

END_ENTITY;
(* USED FROM (Identification_assignment_arm); *)
ENTITY Identification_assignment;
  identifier  : STRING;
  role        : STRING;
  description : OPTIONAL STRING;
  items       : SET [1:?] OF identification_item;
END_ENTITY;
(* USED FROM (Product_version_relationship_arm); *)
ENTITY Product_version_relationship;
  relation_type : OPTIONAL STRING;
  description : OPTIONAL STRING;
  relating_version : Product_version;
  related_version : Product_version;
WHERE
  WR1: relating_version :<>: related_version;
  WR2: EXISTS(relation_type) OR (TYPEOF(SELF\Product_version_relationship) <> TYPEOF(SELF));
END_ENTITY;
(* USED FROM (Product_version_relationship_arm); *)
ENTITY Supplied_part_relationship
  SUBTYPE OF (Product_version_relationship);
WHERE
  WR1: SELF\Product_version_relationship.relation_type IN ['supplied item', 'supplied document'];
END_ENTITY;
(* USED FROM (Product_view_definition_arm); *)
ENTITY Product_view_definition;
  id              	: OPTIONAL STRING;
  name  	      	: OPTIONAL STRING;
  additional_characterization	      : OPTIONAL STRING;
  initial_context 	: View_definition_context;
  additional_contexts   : SET [0:?] OF View_definition_context;
  defined_version  	: Product_version;
WHERE
  WR1: NOT (initial_context IN additional_contexts);
  WR2: EXISTS(id) OR (TYPEOF(SELF\Product_view_definition) <> TYPEOF(SELF));
END_ENTITY;
(* USED FROM (Product_view_definition_arm); *)
ENTITY View_definition_context;
  application_domain	: STRING;
  life_cycle_stage 	: STRING;
  description	 	: OPTIONAL STRING;
WHERE
  WR1: (SIZEOF (USEDIN(SELF, 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.' +
    'PRODUCT_VIEW_DEFINITION.INITIAL_CONTEXT')) > 0) OR
    (SIZEOF (USEDIN(SELF, 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.' +
    'PRODUCT_VIEW_DEFINITION.ADDITIONAL_CONTEXTS')) > 0);
END_ENTITY;
(* USED FROM (External_item_identification_assignment_arm); *)
ENTITY External_item_identification
SUBTYPE OF (External_source_identification);
  external_id : STRING;
END_ENTITY;
(* USED FROM (External_item_identification_assignment_arm); *)
ENTITY External_source_identification;
  source_id	  : STRING;
  source_type : STRING;
  item 	  : external_identification_item;
  description : OPTIONAL STRING;
END_ENTITY;
(* USED FROM (Behaviour_description_assignment_arm); *)
ENTITY Behaviour_description_association;
  description : OPTIONAL STRING;
  representation : behaviour_model;
  represented_item : behaviour_item;
  role : OPTIONAL STRING;
END_ENTITY;
(* USED FROM (Extended_task_element_arm); *)
ENTITY Multiple_decision_point
SUBTYPE OF (Structured_task_element);
INVERSE
  paths : SET [2 : ?] OF Decision_path FOR defined_in;
END_ENTITY;
(* USED FROM (Extended_task_element_arm); *)
ENTITY Task_io
SUBTYPE OF (Task_element_assignment);
  SELF\Applied_activity_method_assignment.assigned_activity_method : Task_step;-- This ATTRIBUTE was RENAMED in a supertype; name converted back to original name (P11 G.5.6 bullet 4)

END_ENTITY;
(* USED FROM (Extended_task_element_arm); *)
ENTITY Task_io_hierarchy;
  child : Task_io;
  parent : Task_io;
WHERE
  wr1: child.role = parent.role;
END_ENTITY;
(* USED FROM (Extended_task_element_arm); *)
ENTITY Task_step_hierarchy
SUBTYPE OF (Task_element_relationship);
  SELF\Task_element_relationship.related_method : Task_step;  -- child : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, an attribute with the new name is in the DERIVE clause
  SELF\Task_element_relationship.relating_method : Task_step;  -- parent : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, an attribute with the new name is in the DERIVE clause
    DERIVE
      child : TASK_STEP := SELF\Task_element_relationship.related_method;  -- RELATED_METHOD : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, this is the new name implemented as DERIVE
      parent : TASK_STEP := SELF\Task_element_relationship.relating_method;  -- RELATING_METHOD : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, this is the new name implemented as DERIVE

END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Concurrent_elements
SUBTYPE OF (Structured_task_element);
  elements : SET [2 : ?] OF Task_element;
END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Decision_point
SUBTYPE OF (Structured_task_element);
  condition : Condition;
  true_case_element : OPTIONAL Task_element;
  false_case_element : OPTIONAL Task_element;
  unknown_case_element : OPTIONAL Task_element;
END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY End_task
SUBTYPE OF (Task_element);
END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Exit_loop
SUBTYPE OF (Task_element);
END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Looping_element
SUPERTYPE OF (ONEOF (
              REPEAT_COUNT,
              REPEAT_UNTIL,
              REPEAT_WHILE))

SUBTYPE OF (Structured_task_element);
  repeated_element : Task_element;
END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Repeat_count
SUBTYPE OF (Looping_element);
  count : INTEGER;
END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Repeat_until
SUBTYPE OF (Looping_element);
  condition : Condition;
END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Repeat_while
SUBTYPE OF (Looping_element);
  condition : Condition;
END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Start_task
SUBTYPE OF (Task_element);
END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Structured_task_element
 ABSTRACT SUPERTYPE OF (ONEOF (
                        CONCURRENT_ELEMENTS,
                        DECISION_POINT,
                        LOOPING_ELEMENT,
                        TASK_ELEMENT_SEQUENCE))

SUBTYPE OF (Task_element);
END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Task_element
 ABSTRACT SUPERTYPE OF (ONEOF (
                        END_TASK,
                        EXIT_LOOP,
                        STRUCTURED_TASK_ELEMENT,
                        TASK_STEP))

SUBTYPE OF (Activity_method);
END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Task_element_assignment
SUBTYPE OF (Applied_activity_method_assignment);
  SELF\Applied_activity_method_assignment.assigned_activity_method : Task_element;  -- assigned_task_element : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, an attribute with the new name is in the DERIVE clause
  SELF\Applied_activity_method_assignment.items : SET [1 : ?] OF task_item;
    DERIVE
      assigned_task_element : TASK_ELEMENT := SELF\Applied_activity_method_assignment.assigned_activity_method;  -- ASSIGNED_ACTIVITY_METHOD : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, this is the new name implemented as DERIVE

END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Task_element_relationship
SUBTYPE OF (Activity_method_relationship);
  SELF\Activity_method_relationship.relating_method : Task_element;
  SELF\Activity_method_relationship.related_method : Task_element;
END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Task_element_sequence
SUBTYPE OF (Structured_task_element);
  elements : LIST [2 : ?] OF Task_element;
END_ENTITY;
(* USED FROM (Task_element_arm); *)
ENTITY Task_step
SUBTYPE OF (Task_element);
  SELF\Activity_method.description : STRING;                  -- step_text : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, an attribute with the new name is in the DERIVE clause
    DERIVE
      step_text : STRING := SELF\Activity_method.description;  -- DESCRIPTION : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, this is the new name implemented as DERIVE

END_ENTITY;
(* USED FROM (Foundation_representation_arm); *)
ENTITY Numerical_representation_context
  SUBTYPE OF (Representation_context);
  units : OPTIONAL SET[1:?] OF Unit;
  accuracies : OPTIONAL SET[1:?] OF Uncertainty_with_unit;
END_ENTITY;
(* USED FROM (Foundation_representation_arm); *)
ENTITY Representation;
  id : OPTIONAL STRING;
  name : OPTIONAL STRING;
  description : OPTIONAL STRING;
  context_of_items : Representation_context;
  items : SET[1:?] OF Representation_item;
WHERE
  WR1 : EXISTS(name) OR (TYPEOF(SELF\Representation) <> TYPEOF(SELF));
END_ENTITY;
(* USED FROM (Foundation_representation_arm); *)
ENTITY Representation_context;
  id : STRING;
  kind : STRING;
INVERSE
  representations_in_context : SET[1:?] OF Representation FOR context_of_items;
END_ENTITY;
(* USED FROM (Foundation_representation_arm); *)
ENTITY Representation_item
   ABSTRACT SUPERTYPE;
  name : OPTIONAL STRING;
END_ENTITY;
(* USED FROM (Foundation_representation_arm); *)
ENTITY Representation_relationship;
  relation_type : OPTIONAL STRING;
  description : OPTIONAL STRING;
  rep_1 : Representation;
  rep_2 : Representation;
WHERE
  WR1 : EXISTS(relation_type) OR (TYPEOF(SELF\Representation_relationship) <> TYPEOF(SELF));
  WR2 : EXISTS(description) OR (TYPEOF(SELF\Representation_relationship) <> TYPEOF(SELF));
END_ENTITY;
(* USED FROM (Foundation_representation_arm); *)
ENTITY String_representation_item
  SUBTYPE OF (Representation_item);
  string_value : STRING;
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Amount_of_substance_unit
  SUBTYPE OF (Unit);
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Context_dependent_unit
  SUBTYPE OF (Unit);
WHERE
  WR1: EXISTS(SELF\Unit.name);
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Conversion_based_unit
  SUBTYPE OF (Unit);
  conversion_factor : Value_with_unit;
WHERE
  WR1: EXISTS(SELF\Unit.name);
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Derived_unit
  SUBTYPE OF (Unit);
  elements : SET[1:?] OF Derived_unit_element;
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Derived_unit_element;
  base_unit : Unit;
  exponent : REAL;
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Duration
  SUBTYPE OF (Value_with_unit);
WHERE
  WR1: 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.' + 'TIME_UNIT' IN TYPEOF(SELF\Value_with_unit.unit);
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Electric_current_unit
  SUBTYPE OF (Unit);
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Length_unit
  SUBTYPE OF (Unit);
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Luminous_intensity_unit
  SUBTYPE OF (Unit);
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Mass_unit
  SUBTYPE OF (Unit);
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Plane_angle_unit
  SUBTYPE OF (Unit);
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Ratio_unit
  SUBTYPE OF (Unit);
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Solid_angle_unit
  SUBTYPE OF (Unit);
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Thermodynamic_temperature_unit
  SUBTYPE OF (Unit);
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Time_unit
  SUBTYPE OF (Unit);
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Uncertainty_with_unit
  SUBTYPE OF (Value_with_unit);
  name : STRING;
  description : OPTIONAL STRING;
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Unit
  SUPERTYPE OF (ONEOF (
              AMOUNT_OF_SUBSTANCE_UNIT,
              ELECTRIC_CURRENT_UNIT,
              LENGTH_UNIT,
              LUMINOUS_INTENSITY_UNIT,
              MASS_UNIT,
              PLANE_ANGLE_UNIT,
              RATIO_UNIT,
              SOLID_ANGLE_UNIT,
              THERMODYNAMIC_TEMPERATURE_UNIT,
              TIME_UNIT));
  name : STRING;
  si_unit : BOOLEAN;
END_ENTITY;
(* USED FROM (Value_with_unit_arm); *)
ENTITY Value_with_unit;
  unit : Unit;
  value_component : measure_value;
END_ENTITY;
(* USED FROM (Class_arm); *)
ENTITY Class
  SUPERTYPE OF (ONEOF (
              CLASS_BY_EXTENSION,
              CLASS_BY_INTENSION));
  id : STRING;
  name : STRING;
  description : OPTIONAL STRING;
END_ENTITY;
(* USED FROM (Class_arm); *)
ENTITY Class_by_extension
  SUBTYPE OF (Class);
END_ENTITY;
(* USED FROM (Class_arm); *)
ENTITY Class_by_intension
  SUBTYPE OF (Class);
END_ENTITY;
(* USED FROM (Classification_assignment_arm); *)
ENTITY Classification_assignment;
  assigned_class : Class;
  items : SET[1:?] OF classification_item;
  role : OPTIONAL STRING;
END_ENTITY;
(* USED FROM (External_class_arm); *)
  ENTITY External_class
    SUBTYPE OF (Class);
      external_source : External_class_library;
  END_ENTITY;
(* USED FROM (External_class_arm); *)
  ENTITY External_class_library
    SUBTYPE OF (External_source);
  END_ENTITY;
(* USED FROM (External_source_arm); *)
  ENTITY External_source; 
    id          : STRING;
    description : OPTIONAL STRING;
  END_ENTITY;
(* USED FROM (Name_assignment_arm); *)
ENTITY Name_assignment;
  name : STRING;
  role : STRING;
  items : assigned_name_select;
END_ENTITY;
(* USED FROM (Independent_property_arm); *)
ENTITY Independent_property;
  id : STRING;
  property_type : STRING;
  description : OPTIONAL STRING;
END_ENTITY;
(* USED FROM (Independent_property_arm); *)
ENTITY Independent_property_relationship;
  relation_type : STRING;
  description : OPTIONAL STRING;
  relating : Independent_property;
  related : Independent_property;
END_ENTITY;
(* USED FROM (Independent_property_representation_arm); *)
ENTITY Independent_property_representation
  SUBTYPE OF (Property_definition_representation);
    SELF\Property_definition_representation.definition : Independent_property;  -- property : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, an attribute with the new name is in the DERIVE clause
    DERIVE
      property : INDEPENDENT_PROPERTY := SELF\Property_definition_representation.definition;  -- DEFINITION : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, this is the new name implemented as DERIVE

END_ENTITY;
(* USED FROM (Parameter_value_specification_arm); *)
ENTITY Named_variable_semantics
SUBTYPE OF (Variable_semantics);
  name : STRING;
  variable_context : Generic_expression;
END_ENTITY;
(* USED FROM (Property_assignment_arm); *)
ENTITY Applied_independent_property
  SUBTYPE OF (Assigned_property);
  base_independent_property : Independent_property;
DERIVE
  SELF\Assigned_property.name : STRING := base_independent_property.property_type;
END_ENTITY;
(* USED FROM (Property_assignment_arm); *)
ENTITY Assigned_property;
  id : OPTIONAL STRING;
  name : STRING;
  description : OPTIONAL STRING;
  described_element : property_assignment_select;
END_ENTITY;
(* USED FROM (Property_assignment_arm); *)
ENTITY Property_definition_representation
   ABSTRACT SUPERTYPE;
    description : OPTIONAL STRING;
    definition : represented_definition;
    rep : Representation;
    role : OPTIONAL STRING;
END_ENTITY;
(* USED FROM (Property_assignment_arm); *)
ENTITY Property_representation
  SUBTYPE OF (Property_definition_representation);
    SELF\Property_definition_representation.definition : Assigned_property;  -- property : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, an attribute with the new name is in the DERIVE clause
    DERIVE
      property : ASSIGNED_PROPERTY := SELF\Property_definition_representation.definition;  -- DEFINITION : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, this is the new name implemented as DERIVE

END_ENTITY;
(* USED FROM (Resource_item_arm); *)
ENTITY Resource_group_relationship
  SUBTYPE OF (Resource_item_relationship);
  quantity : OPTIONAL Value_with_unit;
END_ENTITY;
(* USED FROM (Resource_item_arm); *)
ENTITY Resource_item;
  name : STRING;
  description : OPTIONAL STRING;
  resource_items : OPTIONAL SET[0:?] OF resource_item_select;
END_ENTITY;
(* USED FROM (Resource_item_arm); *)
ENTITY Resource_item_assignment;
  assigned_resource : Resource_item;
  item : resource_assignment_item;
END_ENTITY;
(* USED FROM (Resource_item_arm); *)
ENTITY Resource_item_relationship;
  name : STRING;
  description : OPTIONAL STRING;
  relating : Resource_item;
  related : Resource_item;
END_ENTITY;
(* USED FROM (Product_version_arm); *)
ENTITY Product_version;
  id : STRING;
  description : OPTIONAL STRING;
  of_product : Product;
END_ENTITY;
(* USED FROM (Product_identification_arm); *)
ENTITY Product;
  id : STRING;
  name : OPTIONAL STRING;
  description : OPTIONAL STRING;
END_ENTITY;
(* USED FROM (Product_identification_arm); *)
ENTITY Product_category_assignment;
  category : Product_category;
  products : SET[1:?] OF Product;
END_ENTITY;
(* USED FROM (Product_categorization_arm); *)
ENTITY Product_category;  
  id		: OPTIONAL STRING;
  name	: STRING;
  description : OPTIONAL STRING;  
END_ENTITY;   
(* USED FROM (Product_categorization_arm); *)
ENTITY Product_category_hierarchy;  
  super_category : Product_category;  
  sub_category   : Product_category;
END_ENTITY;   
(* USED FROM (Activity_method_assignment_arm); *)
ENTITY Activity_method_relationship;
  name : STRING;
  description : OPTIONAL STRING;
  relating_method : Activity_method;
  related_method : Activity_method;
END_ENTITY;
(* USED FROM (Activity_method_assignment_arm); *)
ENTITY Applied_activity_method_assignment;
  assigned_activity_method : Activity_method;
  items : SET[1:?] OF activity_method_item;
  role : STRING;
END_ENTITY;
(* USED FROM (Activity_method_arm); *)
ENTITY Activity_method;
  name : STRING;
  description : OPTIONAL STRING;
  consequence : OPTIONAL STRING;
  purpose : STRING;
END_ENTITY;
(* USED FROM (Condition_arm); *)
ENTITY Condition;
  name : STRING;
  description : OPTIONAL STRING;
END_ENTITY;
(* USED FROM (Condition_arm); *)
ENTITY Condition_assignment;
  assigned_condition : Condition;
  item : condition_item;
END_ENTITY;
(* USED FROM (Condition_arm); *)
ENTITY Condition_parameter;
  name : STRING;
  description : OPTIONAL STRING;
  condition : Condition;
  parameter : OPTIONAL condition_parameter_item;
END_ENTITY;
(* USED FROM (Condition_arm); *)
ENTITY Condition_relationship;
  name : STRING;
  description : OPTIONAL STRING;
  relating_condition : Condition;
  related_condition : Condition;
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Abs_function
SUBTYPE OF (Unary_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Acos_function
SUBTYPE OF (Unary_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Asin_function
	SUBTYPE OF (Unary_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Atan_function
	SUBTYPE OF (Binary_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Binary_function_call
 ABSTRACT SUPERTYPE OF (
                        ATAN_FUNCTION)

SUBTYPE OF (Binary_numeric_expression);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Cos_function
SUBTYPE OF (Unary_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Exp_function
SUBTYPE OF (Unary_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Function_parameter_value
	SUPERTYPE OF (
              INT_VALUE_FUNCTION)

	SUBTYPE OF (Numeric_expression, Unary_generic_expression);
	SELF\Unary_generic_expression.operand: String_expression;
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Int_value_function
	SUBTYPE OF (Function_parameter_value);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Integer_defined_function 
	 ABSTRACT SUPERTYPE

	SUBTYPE OF (Numeric_defined_function);
END_ENTITY ;
(* USED FROM (Numeric_function_arm); *)
ENTITY Length_function
	SUBTYPE OF (Numeric_expression, Unary_generic_expression);
	SELF\Unary_generic_expression.operand: String_expression;
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Log10_function
SUBTYPE OF (Unary_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Log2_function
SUBTYPE OF (Unary_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Log_function
SUBTYPE OF (Unary_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Maximum_function
	SUBTYPE OF (Multiple_arity_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Minimum_function
	SUBTYPE OF (Multiple_arity_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Minus_function
SUBTYPE OF (Unary_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Numeric_defined_function
	 ABSTRACT SUPERTYPE OF (ONEOF (
                        INTEGER_DEFINED_FUNCTION,
                        REAL_DEFINED_FUNCTION))

	SUBTYPE OF (Numeric_expression, Defined_function);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Odd_function
SUBTYPE OF (Unary_boolean_expression);
	SELF\Unary_generic_expression.operand: Numeric_expression;
WHERE
	WR1: Is_int_expr(SELF\Numeric_expression);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Real_defined_function 
	 ABSTRACT SUPERTYPE

	SUBTYPE OF (Numeric_defined_function);
END_ENTITY ;
(* USED FROM (Numeric_function_arm); *)
ENTITY Sin_function
SUBTYPE OF (Unary_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Square_root_function
SUBTYPE OF (Unary_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Tan_function
SUBTYPE OF (Unary_function_call);
END_ENTITY;
(* USED FROM (Numeric_function_arm); *)
ENTITY Unary_function_call
 ABSTRACT SUPERTYPE OF (ONEOF (
                        ABS_FUNCTION,
                        MINUS_FUNCTION,
                        SIN_FUNCTION,
                        COS_FUNCTION,
                        TAN_FUNCTION,
                        ASIN_FUNCTION,
                        ACOS_FUNCTION,
                        EXP_FUNCTION,
                        LOG_FUNCTION,
                        LOG2_FUNCTION,
                        LOG10_FUNCTION,
                        SQUARE_ROOT_FUNCTION))

	SUBTYPE OF (Unary_numeric_expression);
END_ENTITY;

(* Implicit interfaced from: Expression_arm *)
FUNCTION Is_sql_mappable (arg: expression) : BOOLEAN;

LOCAL
	i: INTEGER;
END_LOCAL;

IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.SIMPLE_NUMERIC_EXPRESSION' 
								IN TYPEOF (arg) 
THEN 
	RETURN (TRUE);
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.SQL_MAPPABLE_DEFINED_FUNCTION' 
								IN TYPEOF (arg) 
THEN 
	RETURN (TRUE);
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.MINUS_FUNCTION' IN TYPEOF(arg) 
THEN 
	RETURN (Is_sql_mappable(arg\Unary_numeric_expression.operand)); 
END_IF;
IF ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.ABS_FUNCTION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.SIN_FUNCTION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.COS_FUNCTION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.TAN_FUNCTION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.ASIN_FUNCTION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.ACOS_FUNCTION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.ATAN_FUNCTION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.EXP_FUNCTION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.LOG_FUNCTION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.LOG2_FUNCTION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.LOG10_FUNCTION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.SQUARE_ROOT_FUNCTION' 
								IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.VALUE_FUNCTION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.LENGTH_FUNCTION' 
								IN TYPEOF(arg))
THEN 
	RETURN (FALSE);
END_IF;
IF ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.PLUS_EXPRESSION' IN TYPEOF(arg)) 
		OR('FUNCTION_BASED_BEHAVIOUR_ARM_LF.MULT_EXPRESSION' IN TYPEOF(arg)) 
		OR('FUNCTION_BASED_BEHAVIOUR_ARM_LF.MAXIMUM_FUNCTION' 
								IN TYPEOF(arg)) 
		OR('FUNCTION_BASED_BEHAVIOUR_ARM_LF.MAXIMUM_FUNCTION' 
								IN TYPEOF(arg)) 
THEN 
	REPEAT i :=1 TO SIZEOF (
			arg\Multiple_arity_numeric_expression.operands);
		IF NOT Is_sql_mappable(
			arg\Multiple_arity_numeric_expression.operands[i])
		THEN 
			RETURN (FALSE);
		END_IF;
	END_REPEAT;
RETURN (TRUE);
END_IF;
IF ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.MINUS_EXPRESSION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.SLASH_EXPRESSION' IN 
								TYPEOF(arg))
THEN
		RETURN (Is_sql_mappable(
			arg\Binary_numeric_expression.operands[1])
		AND Is_sql_mappable(arg\Binary_numeric_expression.operands[2]));
END_IF;
IF ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.DIV_EXPRESSION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.MOD_EXPRESSION' IN TYPEOF(arg)) 
		OR('FUNCTION_BASED_BEHAVIOUR_ARM_LF.POWER_EXPRESSION' 
								IN TYPEOF(arg))
THEN 
	RETURN (FALSE); 	
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.SIMPLE_BOOLEAN_EXPRESSION' 
								IN TYPEOF (arg) 
THEN 
	RETURN (TRUE);
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.NOT_EXPRESSION' IN TYPEOF (arg) 
THEN 
	RETURN (Is_sql_mappable (arg\UNARY_GENERIC_EXPRESSION.OPERAND));
END_IF;
IF ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.ODD_FUNCTION'IN TYPEOF (arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.XOR_EXPRESSION' 
								IN TYPEOF (arg)) 
THEN	
	RETURN (FALSE);
END_IF;
IF ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.AND_EXPRESSION' IN TYPEOF (arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.OR_EXPRESSION' IN TYPEOF (arg)) 
THEN
	REPEAT i:=1 TO SIZEOF (
			arg\MULTIPLE_ARITY_BOOLEAN_EXPRESSION.OPERANDS);
		IF NOT Is_sql_mappable (
			arg\MULTIPLE_ARITY_BOOLEAN_EXPRESSION.OPERANDS[i]) 
		THEN 
			RETURN (FALSE);
		END_IF;
	END_REPEAT;
	RETURN (TRUE);
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.EQUALS_EXPRESSION' IN TYPEOF (arg) 
THEN
	RETURN(Is_sql_mappable (
			arg\Binary_generic_expression.OPERANDS [1])
		AND Is_sql_mappable(
			arg\Binary_generic_expression.OPERANDS [2]));
END_IF;
IF	('FUNCTION_BASED_BEHAVIOUR_ARM_LF.COMPARISON_EQUAL' IN TYPEOF (arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.COMPARISON_GREATER' 
								IN TYPEOF (arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.COMPARISON_GREATER_EQUAL'
								IN TYPEOF (arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.COMPARISON_LESS' 
								IN TYPEOF (arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.COMPARISON_LESS_EQUAL' 
								IN TYPEOF (arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.COMPARISON_NOT_EQUAL' 
								IN TYPEOF (arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.LIKE_EXPRESSION' 
								IN TYPEOF (arg)) 
THEN
	RETURN (Is_sql_mappable (arg\COMPARISON_EXPRESSION.OPERANDS[1])
		AND Is_sql_mappable (arg\COMPARISON_EXPRESSION.OPERANDS[2]));
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.INTERVAL_EXPRESSION' IN TYPEOF(arg) 
THEN 
	RETURN (Is_sql_mappable(arg\Interval_expression.interval_low) 
		AND Is_sql_mappable(arg\Interval_expression.interval_high)
		AND Is_sql_mappable(arg\Interval_expression.interval_item));
END_IF;
IF ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.NUMERIC_DEFINED_FUNCTION' 
								IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.BOOLEAN_DEFINED_FUNCTION' 
								IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.STRING_DEFINED_FUNCTION' 
								IN TYPEOF(arg))  
THEN 
		RETURN (FALSE) ;
END_IF;

IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.SIMPLE_STRING_EXPRESSION' 
								IN TYPEOF(ARG) 
THEN 
	RETURN (TRUE);
END_IF;
IF 	('FUNCTION_BASED_BEHAVIOUR_ARM_LF.INDEX_EXPRESSION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.SUBSTRING_EXPRESSION' 
								IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.CONCAT_EXPRESSION' 
								IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.FORMAT_FUNCTION' 
								IN TYPEOF(arg)) 
THEN 
	RETURN (FALSE);
END_IF;

	RETURN (FALSE);
END_FUNCTION; 

(* Implicit interfaced from: Generic_expression_arm *)
FUNCTION Is_Acyclic (arg: Generic_expression): BOOLEAN;
RETURN (Acyclic (arg, []));
END_FUNCTION ; 

(* Implicit interfaced from: Generic_expression_arm *)
FUNCTION Acyclic (arg1: Generic_expression; 
			arg2: SET OF Generic_expression): BOOLEAN;
LOCAL
	result: BOOLEAN;
END_LOCAL;

IF ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.SIMPLE_GENERIC_EXPRESSION'
	IN TYPEOF (arg1)) 
THEN
	RETURN (TRUE);
END_IF;

IF arg1 IN arg2 
THEN 
	RETURN (FALSE);
END_IF;

IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.UNARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	RETURN 
	(Acyclic(arg1\Unary_generic_expression.operand,arg2+[arg1]));
END_IF;

IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.BINARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	RETURN 
	(Acyclic(arg1\Binary_generic_expression.operands[1],arg2+[arg1])
	AND
	Acyclic(arg1\Binary_generic_expression.operands[2],arg2+[arg1]));
END_IF;

IF 
'FUNCTION_BASED_BEHAVIOUR_ARM_LF.MULTIPLE_ARITY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	result := TRUE;
	REPEAT i := 1 TO 
			SIZEOF (arg1\Multiple_arity_generic_expression.operands);
		result := result AND
		Acyclic(arg1\Multiple_arity_generic_expression.operands[i], arg2+[arg1]);
	END_REPEAT;

	RETURN (result);
END_IF;

END_FUNCTION; 

(* Implicit interfaced from: General_model_parameter_arm *)
FUNCTION CLASSOF(the_instance : GENERIC       :ininst) : SET OF STRING;

  LOCAL
    result : SET OF STRING;
    classifications : BAG OF Classification_assignment;
  END_LOCAL;

  result := TYPEOF(the_instance);
  classifications := USEDIN(the_instance,'FUNCTION_BASED_BEHAVIOUR_ARM_LF.CLASSIFICATION_ASSIGNMENT.ITEMS');

  REPEAT i := LOINDEX(classifications) TO HIINDEX(classifications);
    result := result + classifications[i].ASSIGNED_CLASS.ID;
  END_REPEAT;

  RETURN (result);

END_FUNCTION;

(* Implicit interfaced from: Expression_arm *)
FUNCTION Is_int_expr (arg: Numeric_expression) : BOOLEAN;

LOCAL
	i: INTEGER;
END_LOCAL;

IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.INT_LITERAL' IN TYPEOF(arg) 
THEN 
	RETURN (TRUE); 
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.REAL_LITERAL' IN TYPEOF(arg) 
THEN 
	RETURN (FALSE); 
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.INT_NUMERIC_VARIABLE' IN TYPEOF(arg) 
THEN 
	RETURN (TRUE); 
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.REAL_NUMERIC_VARIABLE' IN TYPEOF(arg) 
THEN 
	RETURN (FALSE); 
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.ABS_FUNCTION' IN TYPEOF(arg) 
THEN 
	RETURN (Is_int_expr(arg\Unary_numeric_expression.operand));
END_IF;
IF 'NUMERIC_FUNCTION.MINUS_FUNCTION' IN TYPEOF(arg) 
THEN 
	RETURN (Is_int_expr(arg\Unary_numeric_expression.operand)); 
END_IF;
IF ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.SIN_FUNCTION' IN TYPEOF(arg)) 
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.COS_FUNCTION' IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.TAN_FUNCTION' IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.ASIN_FUNCTION' IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.ACOS_FUNCTION' IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.Atan_function' IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.EXP_FUNCTION' IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.LOG_FUNCTION' IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.LOG2_FUNCTION' IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.LOG10_FUNCTION' IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.SQUARE_ROOT_FUNCTION' 
								IN TYPEOF(arg))
THEN 
	RETURN (FALSE);
END_IF;
IF 	('FUNCTION_BASED_BEHAVIOUR_ARM_LF.PLUS_EXPRESSION' IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.MULT_EXPRESSION' 
								IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.MAXIMUM_FUNCTION'
								IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.MINIMUM_FUNCTION'
								IN TYPEOF(arg)) 
THEN 
	REPEAT i :=1 TO SIZEOF (
			arg\Multiple_arity_numeric_expression.operands);
	IF NOT 
		Is_int_expr(arg\Multiple_arity_numeric_expression.operands[i]) 
	THEN 
		RETURN (FALSE);
	END_IF;
	END_REPEAT;
	RETURN (TRUE);
END_IF;
IF 	('FUNCTION_BASED_BEHAVIOUR_ARM_LF.MINUS_EXPRESSION' IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.POWER_EXPRESSION' 
								IN TYPEOF(arg))
THEN 
	RETURN (Is_int_expr(arg\Binary_numeric_expression.operands[1])
		AND Is_int_expr(arg\Binary_numeric_expression.operands[2]));
END_IF;
IF	('FUNCTION_BASED_BEHAVIOUR_ARM_LF.DIV_EXPRESSION' IN TYPEOF(arg))
		OR ('FUNCTION_BASED_BEHAVIOUR_ARM_LF.MOD_EXPRESSION' IN TYPEOF(arg))
THEN 
	RETURN(TRUE);	
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.SLASH_EXPRESSION' IN TYPEOF(arg) 
THEN 
	RETURN (FALSE); 	
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.LENGTH_FUNCTION' IN TYPEOF(arg) 
THEN 
	RETURN (TRUE); 
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.VALUE_FUNCTION' IN TYPEOF(arg) 
THEN 
	IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.INT_VALUE_FUNCTION' 
								IN TYPEOF(arg) 
	THEN 
		RETURN (TRUE); 
	ELSE 
		RETURN (FALSE); 
	END_IF;
END_IF;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.INTEGER_DEFINED_FUNCTION' 
								IN TYPEOF(arg)
THEN 
	RETURN(TRUE) ;
END_IF;
IF'FUNCTION_BASED_BEHAVIOUR_ARM_LF.REAL_DEFINED_FUNCTION' IN TYPEOF(arg) 
THEN 
	RETURN(FALSE) ;
END_IF ;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.BOOLEAN_DEFINED_FUNCTION' 
								IN TYPEOF(arg)
THEN 
	RETURN(FALSE) ;
END_IF ;
IF 'FUNCTION_BASED_BEHAVIOUR_ARM_LF.STRING_DEFINED_FUNCTION' 
								IN TYPEOF(arg)
THEN 
	RETURN (FALSE) ;
END_IF ;

RETURN (FALSE);

END_FUNCTION; 


END_SCHEMA;


