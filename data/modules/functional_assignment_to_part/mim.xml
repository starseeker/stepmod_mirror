<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express language_version="2" rcs.date="2005-03-30T15:55:30" rcs.revision="1.0" description.file="mim_descriptions.xml">
   <application name="JSDAI" owner="LKSoft" url="www.lksoft.com" version="4.0 beta" source="functional_assignment_to_part_mim schema_instance"/>
   <schema name="FUNCTIONAL_ASSIGNMENT_TO_PART_MIM">
      <interface kind="use" schema="NETWORK_FUNCTIONAL_USAGE_VIEW_MIM"/>
      <interface kind="use" schema="PHYSICAL_UNIT_USAGE_VIEW_MIM"/>
      <entity name="part_connected_terminals_definition" supertypes="shape_aspect">
         <unique label="ur1">
            <unique.attribute entity-ref="part_connected_terminals_definition" attribute="name"/>
         </unique>
         <where label="wr1" expression=" sizeof ( query ( mct &lt;* query ( sar &lt;* usedin ( self , 'functional_assignment_to_part_mim.' + 'shape_aspect_relationship.relating_shape_aspect' ) | sar \ shape_aspect_relationship . name = 'member connected terminal' ) | sizeof ( [ 'functional_assignment_to_part_mim.' + 'assembly_module_terminal' , 'functional_assignment_to_part_mim.' + 'bare_die_terminal' , 'functional_assignment_to_part_mim.' + 'interconnect_module_terminal' , 'functional_assignment_to_part_mim.' + 'package_terminal' , 'functional_assignment_to_part_mim.' + 'packaged_part_terminal' ] * typeof ( mct . related_shape_aspect ) ) = 1 ) ) &gt;= 2 "/>
      </entity>
      <rule name="functional_usage_view_to_part_terminal_assignment_constraint" appliesto="shape_aspect_relationship">
         <where label="wr1" expression=" sizeof ( query ( sar &lt;* shape_aspect_relationship | ( sar \ shape_aspect_relationship . name = 'functional terminal allocation' ) and not ( ( 'functional_assignment_to_part_mim.' + 'functional_unit_terminal_definition' in typeof ( sar . relating_shape_aspect ) ) and ( sar . relating_shape_aspect \ shape_aspect . description = 'scalar terminal' ) ) ) ) = 0 "/>
         <where label="wr2" expression=" sizeof ( query ( sar &lt;* shape_aspect_relationship | ( sar \ shape_aspect_relationship . name = 'functional terminal allocation' ) and not ( ( 'functional_assignment_to_part_mim.' + 'assembly_module_terminal' in typeof ( sar . related_shape_aspect ) ) or ( 'functional_assignment_to_part_mim.' + 'bare_die_terminal' in typeof ( sar . related_shape_aspect ) ) or ( 'functional_assignment_to_part_mim.' + 'interconnect_module_terminal' in typeof ( sar . related_shape_aspect ) ) or ( 'functional_assignment_to_part_mim.' + 'packaged_part_terminal' in typeof ( sar . related_shape_aspect ) ) ) ) ) = 0 "/>
      </rule>
      <rule name="functional_usage_view_to_part_terminal_assignment_unique_constraint" appliesto="shape_aspect_relationship">
         <algorithm> local fuvtpta : bag of shape_aspect_relationship := query ( r &lt;* shape_aspect_relationship | ( r \ shape_aspect_relationship . name = 'functional terminal allocation' ) ) ; futd_bag : bag of functional_unit_terminal_definition := [ ] ; sar_bag : bag of shape_aspect_relationship ; pass : boolean := true ; sa_bag : bag of shape_aspect ; end_local ; repeat i := 1 to sizeof ( fuvtpta ) by 1 ; if exists ( fuvtpta [ i ] . relating_shape_aspect ) then if ( fuvtpta [ i ] . relating_shape_aspect \ shape_aspect . description = 'scalar terminal' ) then if ( not ( fuvtpta [ i ] . relating_shape_aspect in futd_bag ) ) then futd_bag := futd_bag + fuvtpta [ i ] . relating_shape_aspect ; end_if ; end_if ; end_if ; end_repeat ; repeat i := 1 to sizeof ( futd_bag ) by 1 ; if ( not pass ) then escape ; end_if ; sar_bag := query ( sar &lt;* fuvtpta | ( ( sar . relating_shape_aspect :=: futd_bag [ i ] ) and ( sizeof ( [ 'functional_assignment_to_part_mim.' + 'assembly_module_terminal' , 'functional_assignment_to_part_mim.' + 'bare_die_terminal' , 'functional_assignment_to_part_mim.' + 'interconnect_module_terminal' , 'functional_assignment_to_part_mim.' + 'packaged_part_terminal' ] * typeof ( sar . related_shape_aspect ) ) &gt; 0 ) ) ) ; sa_bag := [ ] ; repeat j := 1 to sizeof ( sar_bag ) by 1 ; if ( not pass ) then escape ; end_if ; if exists ( sar_bag [ j ] . related_shape_aspect ) then if ( sar_bag [ j ] . related_shape_aspect in sa_bag ) then pass := false ; escape ; else sa_bag := sa_bag + sar_bag [ j ] . related_shape_aspect ; end_if ; end_if ; end_repeat ; end_repeat ; </algorithm>
         <where label="wr1" expression=" pass "/>
      </rule>
   </schema>
</express>
