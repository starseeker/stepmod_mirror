<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express language_version="2" rcs.date="2005-03-30T15:55:30" rcs.revision="1.0" description.file="mim_descriptions.xml">
   <application name="JSDAI" owner="LKSoft" url="www.lksoft.com" version="4.0 beta" source="functional_decomposition_to_interconnect_design_mim schema_instance"/>
   <schema name="FUNCTIONAL_DECOMPOSITION_TO_INTERCONNECT_DESIGN_MIM">
      <interface kind="use" schema="FABRICATION_JOINT_MIM"/>
      <interface kind="use" schema="FUNCTIONAL_DECOMPOSITION_TO_DESIGN_MIM"/>
      <interface kind="use" schema="LAYERED_INTERCONNECT_MODULE_WITH_PRINTED_COMPONENT_DESIGN_MIM"/>
      <interface kind="use" schema="NETWORK_FUNCTIONAL_DESIGN_VIEW_MIM"/>
      <rule name="design_functional_unit_allocation_to_fabrication_joint_unique_constraint" appliesto="product_definition_relationship">
         <algorithm> local dfuatfj : bag of product_definition_relationship := query ( pdr &lt;* product_definition_relationship | ( pdr \ product_definition_relationship . name = 'design functional unit allocation to fabrication joint' ) ) ; pass : boolean := true ; pd_bag : bag of product_definition := [ ] ; end_local ; repeat i := 1 to sizeof ( dfuatfj ) by 1 ; if exists ( dfuatfj [ i ] . relating_product_definition ) then if ( dfuatfj [ i ] . relating_product_definition . id = 'design composition path' ) then if ( dfuatfj [ i ] . relating_product_definition in pd_bag ) then pass := false ; escape ; else pd_bag := pd_bag + dfuatfj [ i ] . relating_product_definition ; end_if ; end_if ; end_if ; end_repeat ; </algorithm>
         <where label="wr1" expression=" pass "/>
      </rule>
      <rule name="transmission_line_functional_unit_terminal_allocation_unique_constraint" appliesto="shape_aspect_relationship">
         <algorithm> local tlfuta : bag of shape_aspect_relationship := query ( r &lt;* shape_aspect_relationship | ( r \ shape_aspect_relationship . name = 'transmission line functional terminal allocation' ) ) ; sa_bag : bag of shape_aspect ; sar_bag : bag of shape_aspect_relationship ; ut_bag : bag of shape_aspect := [ ] ; pass : boolean := true ; end_local ; repeat i := 1 to sizeof ( tlfuta ) by 1 ; if exists ( tlfuta [ i ] . relating_shape_aspect ) then if ( tlfuta [ i ] . relating_shape_aspect \ shape_aspect . description = 'unit terminal' ) then if ( not ( tlfuta [ i ] . relating_shape_aspect in ut_bag ) ) then ut_bag := ut_bag + tlfuta [ i ] . relating_shape_aspect ; end_if ; end_if ; end_if ; end_repeat ; repeat i := 1 to sizeof ( ut_bag ) by 1 ; if ( not pass ) then escape ; end_if ; sar_bag := query ( sar &lt;* tlfuta | ( ( sar . related_shape_aspect \ shape_aspect . description = 'printed component join terminal' ) and ( sar . relating_shape_aspect :=: ut_bag [ i ] ) ) ) ; sa_bag := [ ] ; repeat j := 1 to sizeof ( sar_bag ) by 1 ; if exists ( sar_bag [ j ] . related_shape_aspect ) then if ( sar_bag [ j ] . related_shape_aspect in sa_bag ) then pass := false ; escape ; else sa_bag := sa_bag + sar_bag [ j ] . related_shape_aspect ; end_if ; end_if ; end_repeat ; end_repeat ; </algorithm>
         <where label="wr1" expression=" pass "/>
      </rule>
   </schema>
</express>
