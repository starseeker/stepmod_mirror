SCHEMA Generic_expression_arm;

ENTITY Generic_expression
ABSTRACT SUPERTYPE OF(ONEOF(Simple_generic_expression,
								Unary_generic_expression,
								Binary_generic_expression,
								Multiple_arity_generic_expression));
WHERE 
	WR1: is_acyclic(SELF);
END_ENTITY;

ENTITY Simple_generic_expression
ABSTRACT SUPERTYPE OF (ONEOF(Generic_literal, Generic_variable))
SUBTYPE OF (Generic_expression);
END_ENTITY;

ENTITY Generic_literal
ABSTRACT SUPERTYPE
SUBTYPE OF (Simple_generic_expression);
END_ENTITY; 

ENTITY Generic_variable
ABSTRACT SUPERTYPE
SUBTYPE OF (Simple_generic_expression);
INVERSE
	interpretation : Environment FOR syntactic_representation;
END_ENTITY;

ENTITY Variable_semantics
ABSTRACT SUPERTYPE;
END_ENTITY;

ENTITY Environment;
	syntactic_representation: Generic_variable;
	semantics: Variable_semantics;
END_ENTITY;

ENTITY Unary_generic_expression
ABSTRACT SUPERTYPE
SUBTYPE OF(generic_expression);
	operand: generic_expression;
END_ENTITY;

ENTITY Binary_generic_expression
ABSTRACT SUPERTYPE
SUBTYPE OF(generic_expression);
	operands: LIST [2:2] OF generic_expression;
END_ENTITY;

ENTITY Multiple_arity_generic_expression
ABSTRACT SUPERTYPE
SUBTYPE OF(generic_expression);
	operands: LIST [2:?] OF generic_expression;
END_ENTITY;

ENTITY Variable
ABSTRACT SUPERTYPE OF (ONEOF (Numeric_variable,
				Boolean_variable,
					String_variable))
SUBTYPE OF(Generic_variable);
END_ENTITY;

ENTITY Numeric_variable
SUPERTYPE OF (ONEOF (Int_numeric_variable,
			          Real_numeric_variable))
--SUBTYPE OF (Simple_numeric_expression, Variable);
SUBTYPE OF (Variable);
WHERE 
	WR1:	('ISO13584_EXPRESSIONS_SCHEMA.INT_NUMERIC_VARIABLE' 
			IN TYPEOF(SELF) ) OR
			('ISO13584_EXPRESSIONS_SCHEMA.REAL_NUMERIC_VARIABLE' 
			IN TYPEOF(SELF) );
END_ENTITY;

ENTITY int_numeric_variable
SUBTYPE OF (Numeric_variable);
END_ENTITY;

ENTITY Real_numeric_variable
SUBTYPE OF (Numeric_variable);
END_ENTITY;

ENTITY Boolean_variable
--SUBTYPE OF (Simple_Boolean_expression, Variable);
SUBTYPE OF (Variable);
END_ENTITY;

ENTITY String_variable
--SUBTYPE OF (Simple_string_expression, Variable);
SUBTYPE OF (Variable);
END_ENTITY;


FUNCTION is_acyclic (arg: generic_expression): BOOLEAN;
RETURN (acyclic (arg, []));
END_FUNCTION ; -- is_acyclic

FUNCTION acyclic (arg1: generic_expression; 
			arg2: SET OF generic_expression): BOOLEAN;

LOCAL
	result: BOOLEAN;
END_LOCAL;

IF ('ISO13584_GENERIC_EXPRESSIONS_SCHEMA.SIMPLE_GENERIC_EXPRESSION'
	IN TYPEOF (arg1)) 
THEN
	RETURN (TRUE);
END_IF;

IF arg1 IN arg2 
THEN 
	RETURN (FALSE);
END_IF;

IF 'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.UNARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	RETURN 
	(acyclic(arg1\Unary_generic_expression.operand,arg2+[arg1]));
END_IF;

IF 'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.BINARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	RETURN 
	(acyclic(arg1\Binary_generic_expression.operands[1],arg2+[arg1])
	AND
	acyclic(arg1\Binary_generic_expression.operands[2],arg2+[arg1]));
END_IF;

IF 
'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.MULTIPLE_ARITY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	result := TRUE;
	REPEAT i := 1 TO 
			SIZEOF (arg1\Multiple_arity_generic_expression.operands);
		result := result AND
		acyclic(arg1\Multiple_arity_generic_expression.operands[i], arg2+[arg1]);
	END_REPEAT;

	RETURN (result);
END_IF;

END_FUNCTION; -- acyclic

FUNCTION used_variables (arg : Generic_expression) : 
			SET OF Generic_variable;

LOCAL
	result : SET OF Generic_variable := [];
END_LOCAL;

IF 'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.GENERIC_VARIABLE' 
	IN TYPEOF (arg) 
THEN 
	RETURN ([arg]);
END_IF;

IF 'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.UNARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg)
THEN 
	RETURN (used_variables (arg\Unary_generic_expression.operand));
END_IF;

IF 'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.BINARY_GENERIC_EXPRESSION'
	IN TYPEOF (arg)
THEN 
	RETURN(used_variables(arg\Binary_generic_expression.operands[1])
		+ used_variables (arg\Binary_generic_expression.operands[2]));
END_IF;

IF
'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.MULTIPLE_ARITY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg)
THEN
	REPEAT i := 1 TO 
		SIZEOF(arg\Multiple_arity_generic_expression.operands);
		result := result + used_variables(
			arg\Multiple_arity_generic_expression.operands[i]);
	END_REPEAT;
	
	RETURN (result);
END_IF;
RETURN ([ ]);      -- in this case the subtype shall not contain
			            -- any variable (see IP1 in generic_expression)
END_FUNCTION; -- used_variables



END_SCHEMA;
