<?xml version="1.0"?>
<!-- $Id: express2xml.js,v 1.26 2002/12/23 10:00:14 goset1 Exp $ -->
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">
<express
  language_version="2"
  description.file="arm_descriptions.xml"
  rcs.date="$Date: $"
  rcs.revision="$Revision: $">

  <application
    name="express2xml.js"
    owner="Eurostep Limited"
    url="http://www.eurostep.com"
    version="1.26"
    source="../data/modules/generic_expression/arm.exp"/>

  <schema name="Generic_expression_arm">
    <entity
      name="Generic_expression"
      abstract.supertype="YES"
      super.expression="(ONEOF(Simple_generic_expression,			    Unary_generic_expression,			    Binary_generic_expression,			    Multiple_arity_generic_expression))">
      <where
        label="WR1"
        expression="Is_Acyclic(SELF)">
      </where>
    </entity>

    <entity
      name="Simple_generic_expression"
      abstract.supertype="YES"
      super.expression="(ONEOF(Generic_literal, Generic_variable))"
      supertypes="Generic_expression">
    </entity>

    <entity
      name="Generic_literal"
      abstract.supertype="YES"
      supertypes="Simple_generic_expression">
    </entity>

    <entity
      name="Generic_variable"
      abstract.supertype="YES"
      super.expression="(Variable)"
      supertypes="Simple_generic_expression">
      <inverse
        name="interpretation"
        entity="Environment"
        attribute="syntactic_representation">
      </inverse>
    </entity>

    <entity
      name="Variable"
      abstract.supertype="YES"
      super.expression="(ONEOF (Numeric_variable,				Boolean_variable,				String_variable))"
      supertypes="Generic_variable">
    </entity>

    <entity
      name="Variable_semantics"
      abstract.supertype="YES">
    </entity>

    <entity
      name="Environment">
      <explicit
        name="syntactic_representation">
        <typename
          name="Generic_variable"/>
      </explicit>
      <explicit
        name="semantics">
        <typename
          name="Variable_semantics"/>
      </explicit>
    </entity>

    <entity
      name="Unary_generic_expression"
      abstract.supertype="YES"
      supertypes="Generic_expression">
      <explicit
        name="operand">
        <typename
          name="Generic_expression"/>
      </explicit>
    </entity>

    <entity
      name="Binary_generic_expression"
      abstract.supertype="YES"
      supertypes="Generic_expression">
      <explicit
        name="operands">
        <aggregate
          type="LIST"
          lower="2"
          upper="2"/>
        <typename
          name="Generic_expression"/>
      </explicit>
    </entity>

    <entity
      name="Multiple_arity_generic_expression"
      abstract.supertype="YES"
      supertypes="Generic_expression">
      <explicit
        name="operands">
        <aggregate
          type="LIST"
          lower="2"
          upper="?"/>
        <typename
          name="Generic_expression"/>
      </explicit>
    </entity>

    <function
      name="Is_Acyclic">
      <parameter
        name="arg">
        <typename
          name="Generic_expression"/>
      </parameter>
      <builtintype
        type="BOOLEAN"/>
      <algorithm>
RETURN (Acyclic (arg, []));
      </algorithm>

    </function>

    <function
      name="Acyclic">
      <parameter
        name="arg1">
        <typename
          name="Generic_expression"/>
      </parameter>
      <parameter
        name="arg2">
        <aggregate
          type="SET"/>
        <typename
          name="Generic_expression"/>
      </parameter>
      <builtintype
        type="BOOLEAN"/>
      <algorithm>
LOCAL
	result: BOOLEAN;
END_LOCAL;

IF ('GENERIC_EXPRESSION_ARM.SIMPLE_GENERIC_EXPRESSION'
	IN TYPEOF (arg1)) 
THEN
	RETURN (TRUE);
END_IF;

IF arg1 IN arg2 
THEN 
	RETURN (FALSE);
END_IF;

IF 'GENERIC_EXPRESSION_ARM.UNARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	RETURN 
	(Acyclic(arg1\Unary_generic_expression.operand,arg2+[arg1]));
END_IF;

IF 'GENERIC_EXPRESSION_ARM.BINARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	RETURN 
	(Acyclic(arg1\Binary_generic_expression.operands[1],arg2+[arg1])
	AND
	Acyclic(arg1\Binary_generic_expression.operands[2],arg2+[arg1]));
END_IF;

IF 
'GENERIC_EXPRESSION_ARM.MULTIPLE_ARITY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	result := TRUE;
	REPEAT i := 1 TO 
			SIZEOF (arg1\Multiple_arity_generic_expression.operands);
		result := result AND
		Acyclic(arg1\Multiple_arity_generic_expression.operands[i], arg2+[arg1]);
	END_REPEAT;

	RETURN (result);
END_IF;

      </algorithm>

    </function>

    <function
      name="Used_variables">
      <parameter
        name="arg">
        <typename
          name="Generic_expression"/>
      </parameter>
      <aggregate
        type="SET"/>
      <typename
        name="Generic_variable"/>
      <algorithm>

LOCAL
	result : SET OF Generic_variable := [];
END_LOCAL;

IF 'GENERIC_EXPRESSION_ARM.GENERIC_VARIABLE' 
	IN TYPEOF (arg) 
THEN 
	RETURN ([arg]);
END_IF;

IF 'GENERIC_EXPRESSION_ARM.UNARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg)
THEN 
	RETURN (Used_variables (arg\Unary_generic_expression.operand));
END_IF;

IF 'GENERIC_EXPRESSION_ARM.BINARY_GENERIC_EXPRESSION'
	IN TYPEOF (arg)
THEN 
	RETURN(Used_variables(arg\Binary_generic_expression.operands[1])
		+ Used_variables (arg\Binary_generic_expression.operands[2]));
END_IF;

IF
'GENERIC_EXPRESSION_ARM.MULTIPLE_ARITY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg)
THEN
	REPEAT i := 1 TO 
		SIZEOF(arg\Multiple_arity_generic_expression.operands);
		result := result + Used_variables(
			arg\Multiple_arity_generic_expression.operands[i]);
	END_REPEAT;
	
	RETURN (result);
END_IF;
RETURN ([ ]);      
			            
      </algorithm>

    </function>

  </schema>

</express>
