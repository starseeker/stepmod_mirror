<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express description.file="arm_descriptions.xml" language_version="2" rcs.date="$Date$" rcs.revision="$Revision$" reference="">
   <application name="JSDAI" owner="LKSoft" source="generic_expression_arm schema_instance" url="www.lksoft.com" version="4.0 beta"/>
   <schema name="Generic_expression_arm">
      <entity abstract.supertype="YES" name="Binary_generic_expression" supertypes="Generic_expression">
         <explicit name="operands">
            <aggregate lower="2" type="LIST" upper="2"/>
            <typename name="Generic_expression"/>
         </explicit>
      </entity>
      <entity name="Environment">
         <explicit name="syntactic_representation">
            <typename name="Generic_variable"/>
         </explicit>
         <explicit name="semantics">
            <typename name="Variable_semantics"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="Generic_expression" super.expression="ONEOF (Simple_generic_expression, Unary_generic_expression, Binary_generic_expression, Multiple_arity_generic_expression)">
         <where expression="Is_Acyclic(SELF)" label="WR1"/>
      </entity>
      <entity abstract.supertype="YES" name="Generic_literal" supertypes="Simple_generic_expression"/>
      <entity abstract.supertype="YES" name="Generic_variable" super.expression="Variable" supertypes="Simple_generic_expression">
         <inverse attribute="syntactic_representation" entity="Environment" name="interpretation"/>
      </entity>
      <entity abstract.supertype="YES" name="Multiple_arity_generic_expression" supertypes="Generic_expression">
         <explicit name="operands">
            <aggregate lower="2" type="LIST" upper="?"/>
            <typename name="Generic_expression"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="Simple_generic_expression" super.expression="ONEOF (Generic_literal, Generic_variable)" supertypes="Generic_expression"/>
      <entity abstract.supertype="YES" name="Unary_generic_expression" supertypes="Generic_expression">
         <explicit name="operand">
            <typename name="Generic_expression"/>
         </explicit>
      </entity>
      <entity abstract.supertype="YES" name="Variable" supertypes="Generic_variable"/>
      <entity abstract.supertype="YES" name="Variable_semantics"/>
      <function name="Acyclic">
         <parameter name="arg1">
            <typename name="Generic_expression"/>
         </parameter>
         <parameter name="arg2">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="Generic_expression"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
	result: BOOLEAN;
END_LOCAL;

IF ('GENERIC_EXPRESSION_ARM.SIMPLE_GENERIC_EXPRESSION'
	IN TYPEOF (arg1)) 
THEN
	RETURN (TRUE);
END_IF;

IF arg1 IN arg2 
THEN 
	RETURN (FALSE);
END_IF;

IF 'GENERIC_EXPRESSION_ARM.UNARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	RETURN 
	(Acyclic(arg1\Unary_generic_expression.operand,arg2+[arg1]));
END_IF;

IF 'GENERIC_EXPRESSION_ARM.BINARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	RETURN 
	(Acyclic(arg1\Binary_generic_expression.operands[1],arg2+[arg1])
	AND
	Acyclic(arg1\Binary_generic_expression.operands[2],arg2+[arg1]));
END_IF;

IF 
'GENERIC_EXPRESSION_ARM.MULTIPLE_ARITY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	result := TRUE;
	REPEAT i := 1 TO 
			SIZEOF (arg1\Multiple_arity_generic_expression.operands);
		result := result AND
		Acyclic(arg1\Multiple_arity_generic_expression.operands[i], arg2+[arg1]);
	END_REPEAT;

	RETURN (result);
END_IF;</algorithm>
      </function>
      <function name="Is_Acyclic">
         <parameter name="arg">
            <typename name="Generic_expression"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>RETURN (Acyclic (arg, []));</algorithm>
      </function>
      <function name="Used_variables">
         <parameter name="arg">
            <typename name="Generic_expression"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="Generic_variable"/>
         <algorithm>LOCAL
	result : SET OF Generic_variable := [];
END_LOCAL;

IF 'GENERIC_EXPRESSION_ARM.GENERIC_VARIABLE' 
	IN TYPEOF (arg) 
THEN 
	RETURN ([arg]);
END_IF;

IF 'GENERIC_EXPRESSION_ARM.UNARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg)
THEN 
	RETURN (Used_variables (arg\Unary_generic_expression.operand));
END_IF;

IF 'GENERIC_EXPRESSION_ARM.BINARY_GENERIC_EXPRESSION'
	IN TYPEOF (arg)
THEN 
	RETURN(Used_variables(arg\Binary_generic_expression.operands[1])
		+ Used_variables (arg\Binary_generic_expression.operands[2]));
END_IF;

IF
'GENERIC_EXPRESSION_ARM.MULTIPLE_ARITY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg)
THEN
	REPEAT i := 1 TO 
		SIZEOF(arg\Multiple_arity_generic_expression.operands);
		result := result + Used_variables(
			arg\Multiple_arity_generic_expression.operands[i]);
	END_REPEAT;
	
	RETURN (result);
END_IF;
RETURN ([ ]);</algorithm>
      </function>
   </schema>
</express>
