<?xml version="1.0"?>
<!-- edited with XML Spy v4.3 U (http://www.xmlspy.com) by olavo (uninova) -->
<?xml-stylesheet type="text/xsl" 
  href="../../../xsl/descriptions.xsl"?>
<!DOCTYPE ext_descriptions SYSTEM "../../../dtd/description.dtd">
<ext_descriptions module_directory="generic_expression" schema_file="mim.xml" describe.selects="YES" rcs.date="$Date: 2002/11/06 23:24:54 $" rcs.revision="$Revision: 1.9 $">
	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Schema: generic_expression_mim
   <express_ref linkend="generic_expression:mim:generic_expression_mim"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<ext_description linkend="generic_expression_mim">The <b>generic_expression </b>module represents all the possible expressions available.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: generic_expression  
   <express_ref linkend="generic_expression:mim:generic_expression_mim.generic_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.generic_expression">A <b>generic_expression</b> entity is the information model of a <b>generic_expression</b>. It is the ABSTRACT SUPERTYPE of all the possible expressions. In order to be able to assert the acyclicity of expressions, it is subtyped according to its arity. When a subtype of a <b>generic_expression</b> is not a subtype of either a <b>simple_generic_expression</b>, or an <b>unary_generic_expression</b>, or a <b>binary_generic_expression</b>, or a <b>multiple_arity_generic_expression</b> it shall not contain any variable.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: generic_expression  Where: WR1 
   <express_ref linkend="generic_expression:mim:generic_expression_mim.generic_expression.wr:WR1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.generic_expression.wr:WR1">The graph associated with the described expression shall be acyclic.<p/>Either a <b>generic_expression</b> shall not contain any <b>generic_variable</b> or this <b>generic_expression</b> shall be a subtype of either a <b>simple_generic_expression</b>, or an <b>unary_generic_expression</b>, or a <b>binary_generic_expression</b>, or a <b>multiple_arity_generic_expression</b>.<note>This informal proposition ensures that the set of variables computed by the <b>used_variable</b> function (see: 5.3.2.) includes all the variables involved in the <b>generic_expression</b>.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: simple_generic_expression  
   <express_ref linkend="generic_expression:mim:generic_expression_mim.simple_generic_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.simple_generic_expression">A <b>simple_generic_expression </b>is a generic expression that represents either a generic variable or a generic literal.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: generic_literal  
   <express_ref linkend="generic_expression:mim:generic_expression_mim.generic_literal"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.generic_literal">A <b>generic_literal</b> is an abstract constant that can be involved in a generic expression.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: generic_variable  
   <express_ref linkend="generic_expression:mim:generic_expression_mim.generic_variable"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.generic_variable">A <b>generic_variable </b>is an abstract variable that can be involved in a generic expression. A <b>generic_variable </b>shall be subtyped to specify the data type of its permitted values. It shall be referenced by an environment that represents the interpretation function that associates a value with this variable.<note>
			<b>real_numeric_variable</b>, <b>integer_numeric_variable</b>, <b>boolean_variable </b>and <b>string_variable </b>are examples of subtypes of <b>generic_variable</b>.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: generic_variable  Attribute: interpretation 
   <express_ref linkend="generic_expression:mim:generic_expression_mim.generic_variable.interpretation"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.generic_variable.interpretation">The <b>environment </b>that enables to associate a value with the variable.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: variable  
   <express_ref linkend="generic_expression:mim:generic_expression_mim.variable"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.variable">A <b>variable </b>is an entity that stands for a value interpreted from some context.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: variable_semantics  
   <express_ref linkend="generic_expression:mim:generic_expression_mim.variable_semantics"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.variable_semantics">A <b>variable_semantics </b>entity is used to represent the meaning of a <b>generic_variable</b>. It is an ABSTRACT SUPERTYPE that shall be subtyped wherever a <b>variable_semantics </b>is used. A <b>variable_semantics  </b>shall specify the context within which the variable shall be used together with the interpretation function that associates a value with this variable <example>When modelling a class of components to which properties "a" and "b", with integer values apply. The constraint,  stating that for every instance of this class, its value for  "a" shall be greater than its value for "b",  may be modelled through:<ul>
				<li>two instances of <b>real_variable</b>;</li>
				<li>two instances of <b>self_property_semantics</b>, subtype of <b>variable_semantics </b>that refers respectively to property "a" and property "b";</li>
				<li>two instances of <b>environment </b>that associate each variable with its corresponding <b>variable_semantics</b>, and </li>
				<li>a <b>boolean_expression </b>between the two <b>real_variables </b>that specifies that the first one is greater that the second one.</li>
			</ul>
		</example>is an entity that stands for a value interpreted from some context.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: environment  
   <express_ref linkend="generic_expression:mim:generic_expression_mim.environment"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.environment">The <b>environment</b> is an association between syntax and semantics.<note>
In the context of this part of ISO 13584, the <b>environment</b> entity associates to a <b>generic_variable</b> (syntax) its corresponding meaning (semantics) represented by the <b>variable_semantics</b> entity.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: environment  Attribute: syntactic_representation 
   <express_ref linkend="generic_expression:mim:generic_expression_mim.environment.syntactic_representation"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.environment.syntactic_representation">The <b>generic_variable </b>that stands for the value of the variable.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: environment  Attribute: semantics 
   <express_ref linkend="generic_expression:mim:generic_expression_mim.environment.semantics"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.environment.semantics">The meaning of the variable that includes the mechanism to access its value.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: unary_generic_expression  
   <express_ref linkend="generic_expression:mim:generic_expression_mim.unary_generic_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.unary_generic_expression">An <b>unary_generic_expression </b>is the ABSTRACT SUPERTYPE of all the unary operators.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: unary_generic_expression  Attribute: operand 
   <express_ref linkend="generic_expression:mim:generic_expression_mim.unary_generic_expression.operand"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.unary_generic_expression.operand">The <b>operand </b>is a generic expression that represents the operand of the unary operator.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: binary_generic_expression  
   <express_ref linkend="generic_expression:mim:generic_expression_mim.binary_generic_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.binary_generic_expression">A <b>binary_generic_expression</b> is the ABSTRACT SUPERTYPE of all the binary operators
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: binary_generic_expression  Attribute: operands 
   <express_ref linkend="generic_expression:mim:generic_expression_mim.binary_generic_expression.operands"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.binary_generic_expression.operands">The <b>operands</b> are a list of two generic expressions that represent the two operands of the binary operator.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: multiple_arity_generic_expression  
   <express_ref linkend="generic_expression:mim:generic_expression_mim.multiple_arity_generic_expression"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.multiple_arity_generic_expression">A <b>multiple_arity_generic_expression </b>is the ABSTRACT SUPERTYPE of all the multiple-arity operators.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Entity: multiple_arity_generic_expression  Attribute: operands 
   <express_ref linkend="generic_expression:mim:generic_expression_mim.multiple_arity_generic_expression.operands"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.multiple_arity_generic_expression.operands">The <b>operands</b> is a list of generic expressions that represent the operands of the multiple-arity operator. 
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Function: is_acyclic 
   <express_ref linkend="generic_expression:mim:generic_expression_mim.is_acyclic"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.is_acyclic">The <b>is_acyclic </b>function checks that there is no cycle in the reference graph of the expression. <p/>Two functions are defined. The first one (named <b>is_acyclic</b>) has as argument the <b>generic_expression </b>that shall be checked. The function then calls the second one (<b>acyclic</b>) with two arguments: the <b>generic_expression </b>and an empty set. This set will be updated such that it contains the set of all the nodes already visited in the chain of recursive calls down to this node. <p/>
		<b>Is_acyclic </b>returns TRUE if the underlying structure of <b>arg </b>is a directed acyclic graph, if not, it returns FALSE.<note>The informative annex F discusses the role of such a structure for the static analysis (e.g. type control, variable collection and so on) and dynamic analysis (e.g. evaluation) of an expression.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Function: is_acyclic  Attribute: arg
   <express_ref linkend="generic_expression:mim:generic_expression_mim.is_acyclic.arg"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.is_acyclic.arg">Is a <b>generic_expression</b>.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Function: acyclic 
   <express_ref linkend="generic_expression:mim:generic_expression_mim.acyclic"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.acyclic">
		<b>Acyclic </b>function is called by <b>is_acyclic </b>function.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Function: acyclic Attribute: arg1
   <express_ref linkend="generic_expression:mim:generic_expression_mim.acyclic.arg1"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.acyclic.arg1">It is a <b>generic_expression</b>.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Function: acyclic Attribute: arg2
   <express_ref linkend="generic_expression:mim:generic_expression_mim.acyclic.arg2"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.acyclic.arg2">It is a set of <b>generic_expression</b>.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Function: used_variables 
   <express_ref linkend="generic_expression:mim:generic_expression_mim.used_variables"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.used_variables">.It is a <b>generic_expression</b>.</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: generic_expression_mim  Function: used_variables  Attribute: arg
   <express_ref linkend="generic_expression:mim:generic_expression_mim.used_variables.arg"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="generic_expression_mim.used_variables.arg">.It is a <b>generic_expression</b>.</ext_description>
</ext_descriptions>
