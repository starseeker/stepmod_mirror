<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XML Spy v4.3 U (http://www.xmlspy.com) by olavo (uninova) -->
<!-- $Id: module.xml,v 1.13 2003/01/10 10:09:54 Olavo Exp $ -->
<!DOCTYPE module SYSTEM "../../../dtd/module.dtd">
<!-- Generated by mkmodule.js, Eurostep Limited, http://www.eurostep.com -->
<!-- 
     To view the module in IExplorer, open: sys/1_scope.xml
      -->
<module name="generic_expression" part="1341" version="1" wg.number="1792" wg.number.arm="1793" wg.number.mim="1794" checklist.internal_review="1804" checklist.project_leader="1805" checklist.convener="1806" status="CD-TS" language="E" publication.year="" published="n" rcs.date="$Date: 2003/01/10 10:09:54 $" rcs.revision="$Revision: 1.13 $">
	<keywords>
    module, generic_expression
 </keywords>
	<!-- Reference to contacts detailed in stepmod/data/basic/contacts.xml -->
	<contacts>
		<projlead ref="ap236.projlead"/>
		<editor ref="ap236.editor"/>
	</contacts>
	<!-- Introduction -->
	<!-- The introduction should start as shown: -->
	<purpose>
		<p>
     This part of ISO 10303 specifies an application module for the representation of generic expressions. Different types of generic expressions can be provided depending on the number of the operands. These operands can be either a constant or a variable, where in the case of the variable, it is necessary to give it the correct semantic.
   </p>
	</purpose>
	<!-- Items in scope -->
	<inscope>
		<li>the exchange of expressions that involve both constants and variables; </li>
		<li>the function that checks whether or not a numeric expression should evaluate to an integer value; </li>
		<li>the constraints which ensure that an expression is semantically correct; </li>
		<li>the computation of the variables or functions used in an expression; </li>
		<li>the function that checks if an expression may be mapped on to the SQL query language. </li>
	</inscope>
	<!-- Items out of scope -->
	<outscope>
		<li>the assignment of values to variables within some context; </li>
		<li>the triggering mechanism that computes the value of an expression in a given context. </li>
	</outscope>
	<normrefs>
		<normref.inc normref="ref13584-20.1998"/>
	</normrefs>
	<!--

 <definition/>

 <abbreviations/>
-->
	<!-- Clause 4 ARM  -->
	<arm>
		<!-- Note ARM short form EXPRESS is in arm.xml -->
		<!-- Units of functionality -->
		<uof name="Generic_expression">
			<description>A generic_expression is an expression of which the range is any type of expression defined in  8.1.1 of ISO 10303-11.</description>
			<uof.ae entity="Binary_generic_expression"/>
			<uof.ae entity="Environment"/>
			<uof.ae entity="Generic_expression"/>
			<uof.ae entity="Generic_literal"/>
			<uof.ae entity="Generic_variable"/>
			<uof.ae entity="Multiple_arity_generic_expression"/>
			<uof.ae entity="Simple_generic_expression"/>
			<uof.ae entity="Unary_generic_expression"/>
			<uof.ae entity="Variable_semantics"/>
		</uof>
		<!-- Short form EXPRESS-G -->
		<express-g>
			<imgfile file="armexpg1.xml"/>
			<imgfile file="armexpg2.xml"/>
		</express-g>
	</arm>
	<!-- ARM long form (optional) -->
	<!-- If not required, delete this section and the following files:
          arm_lf.xml
          armexpg_lf1.gif
          armexpg_lf1.xml -->
	<arm_lf>
		<!-- Note ARM long form EXPRESS is in arm_lf.xml -->
		<express-g>
			<imgfile file="armexpg_lf1.xml"/>
		</express-g>
	</arm_lf>
	<!-- Clause 5.1 Mapping specification -->
	<mapping_table>
		<ae entity="Binary_generic_expression">
			<aimelt>binary_generic_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>binary_generic_expression &lt;= generic_expression</refpath>
			<aa attribute="operands">
				<aimelt>binary_generic_expression.operands</aimelt>
				<source>ISO 13584-20</source>
				<refpath>
binary_generic_expression &lt;= generic_expression
</refpath>
			</aa>
		</ae>
		<ae entity="Environment">
			<aimelt>environment</aimelt>
			<source>ISO 13584-20</source>
			<refpath>variable_semantics
environment</refpath>
			<aa attribute="semantics" assertion_to="Variable_semantics">
				<aimelt>PATH</aimelt>
				<source>ISO 13584-20</source>
				<refpath>variable_semantics</refpath>
			</aa>
			<aa attribute="syntactic_representation" assertion_to="Environment">
				<aimelt>PATH</aimelt>
				<source>ISO 13584-20</source>
				<refpath>environment</refpath>
			</aa>
		</ae>
		<ae entity="Generic_expression">
			<aimelt>generic_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>generic_expression =&gt; (simple_generic_expression)
(unary_generic_expression)
(binary_generic_expression)
(multiple_arity_generic_expression)</refpath>
			<alt_map id="1">
				<description>
if is acyclic
</description>
				<aimelt>generic_expression</aimelt>
				<source>ISO 10303-44</source>
			</alt_map>
		</ae>
		<ae entity="Generic_literal">
			<aimelt>generic_literal</aimelt>
			<source>ISO 13584-20</source>
			<refpath>generic_literal &lt;= simple_generic_expression</refpath>
		</ae>
		<ae entity="Generic_variable">
			<aimelt>generic_variable</aimelt>
			<source>ISO 13584-20</source>
			<refpath>generic_variable &lt;= simple_generic_expression

generic_variable =&gt; variable</refpath>
		</ae>
		<ae entity="Binary_generic_expression">
			<aimelt>binary_generic_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>binary_generic_expression &lt;= generic_expression</refpath>
			<aa attribute="operands">
				<aimelt>PATH</aimelt>
				<source>ISO 13584-20</source>
				<refpath>binary_generic_expression &lt;= generic_expression</refpath>
			</aa>
		</ae>
		<ae entity="Simple_generic_expression">
			<aimelt>simple_generic_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>generic_literal &lt;= simple_generic_expression

generic_literal =&gt; (generic_literal)
(generic_variable)</refpath>
		</ae>
		<ae entity="Unary_generic_expression">
			<aimelt>unary_generic_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>unary_generic_expression &lt;= generic_expression</refpath>
			<aa attribute="operand">
				<aimelt>PATH</aimelt>
				<source>ISO 13584-20</source>
				<refpath>
binary_generic_expression &lt;= generic_expression</refpath>
			</aa>
		</ae>
		<ae entity="Variable">
			<aimelt>variable</aimelt>
			<source>ISO 13584-20</source>
			<refpath>variable &lt;= generic_variable

variable =&gt;
(numeric_variable)
(boolean_variable)
(string_variable)</refpath>
		</ae>
		<ae entity="Variable_semantics">
			<aimelt>variable_semantics</aimelt>
			<source>ISO 13584-20</source>
			<refpath>environment</refpath>
		</ae>
		<ae entity="Multiple_arity_generic_expression">
			<aimelt>multiple_arity_generic_expression</aimelt>
			<source>ISO 13584-20</source>
			<refpath>unary_generic_expression &lt;= generic_expression</refpath>
			<aa attribute="operands">
				<aimelt>PATH</aimelt>
				<source>ISO 13584-20</source>
				<refpath>
binary_generic_expression &lt;= generic_expression</refpath>
			</aa>
		</ae>
	</mapping_table>
	<!-- Clause 5.2 MIM -->
	<mim>
		<!--  Note MIM short form express is in mim.xml -->
		<express-g>
			<imgfile file="mimexpg1.xml"/>
		</express-g>
	</mim>
	<!-- MIM long form (optional) -->
	<!-- If not required, delete this section and the following files:
          mim_lf.xml
          mimexpg_lf1.gif
          mimexpg_lf1.xml -->
	<mim_lf>
		<!-- Note MIM long form EXPRESS is in mim_lf.xml -->
		<express-g>
			<imgfile file="mimexpg_lf1.xml"/>
		</express-g>
	</mim_lf>
</module>
