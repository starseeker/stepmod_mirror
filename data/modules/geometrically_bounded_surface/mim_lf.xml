<?xml version="1.0"?>
<!-- $Id: express2xml.js,v 1.2 2001/11/21 15:38:19 robbod Exp $ -->
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">
<express
  language_version="2"
  rcs.date="$Date: $"
  rcs.revision="$Revision: $">

  <application
    name="express2xml.js"
    owner="Eurostep Limited"
    url="http://www.eurostep.com"
    version="1.2"
    source="../data/modules/geometrically_bounded_surface/mim_lf.exp"/>

  <schema name="geometrically_bounded_surface_mim">
    <type name="attribute_type">
      <select
        selectitems="label text">
      </select>

    </type>
    <type name="axis2_placement">
      <select
        selectitems="axis2_placement_2d axis2_placement_3d">
      </select>

    </type>
    <type name="b_spline_curve_form">
      <enumeration
        items="polyline_form circular_arc elliptic_arc parabolic_arc hyperbolic_arc unspecified">
      </enumeration>


    </type>
    <type name="b_spline_surface_form">
      <enumeration
        items="plane_surf cylindrical_surf conical_surf spherical_surf toroidal_surf surf_of_revolution ruled_surf generalised_cone quadric_surf surf_of_linear_extrusion unspecified">
      </enumeration>


    </type>
    <type name="curve_on_surface">
      <select
        selectitems="pcurve surface_curve composite_curve_on_surface">
      </select>

    </type>
    <type name="description_attribute_select">
      <select
        selectitems="organization_role person_and_organization_role person_and_organization representation">
      </select>

    </type>
    <type name="dimension_count">
      <builtintype
        type="INTEGER">
      </builtintype>


      <where
        label="WHERE"
        expression="(SELF &gt; 0)">
      </where>
    </type>
    <type name="founded_item_select">
      <select
        selectitems="founded_item representation_item">
      </select>

    </type>
    <type name="geometric_set_select">
      <select
        selectitems="point curve surface">
      </select>

    </type>
    <type name="id_attribute_select">
      <select
        selectitems="representation">
      </select>

    </type>
    <type name="identification_item">
      <select
        selectitems="applied_identification_assignment">
      </select>

    </type>
    <type name="identification_organization_item">
      <select
        selectitems="organization_item">
      </select>

    </type>
    <type name="identification_person_and_organization_item">
      <select
        selectitems="person_and_organization_item">
      </select>

    </type>
    <type name="identifier">
      <builtintype
        type="STRING">
      </builtintype>


    </type>
    <type name="knot_type">
      <enumeration
        items="uniform_knots quasi_uniform_knots piecewise_bezier_knots unspecified">
      </enumeration>


    </type>
    <type name="label">
      <builtintype
        type="STRING">
      </builtintype>


    </type>
    <type name="length_measure">
      <builtintype
        type="REAL">
      </builtintype>


    </type>
    <type name="measure_value">
      <select
        selectitems="length_measure plane_angle_measure parameter_value positive_length_measure">
      </select>

    </type>
    <type name="name_attribute_select">
      <select
        selectitems="person_and_organization">
      </select>

    </type>
    <type name="organization_item">
      <select
        selectitems="applied_organization_assignment">
      </select>

    </type>
    <type name="parameter_value">
      <builtintype
        type="REAL">
      </builtintype>


    </type>
    <type name="pcurve_or_surface">
      <select
        selectitems="pcurve surface">
      </select>

    </type>
    <type name="person_and_organization_item">
      <select
        selectitems="applied_person_and_organization_assignment">
      </select>

    </type>
    <type name="person_organization_select">
      <select
        selectitems="person organization person_and_organization">
      </select>

    </type>
    <type name="plane_angle_measure">
      <builtintype
        type="REAL">
      </builtintype>


    </type>
    <type name="positive_length_measure">
      <typename
        name="length_measure"/>

      <where
        label="WHERE"
        expression="(SELF &gt; 0)">
      </where>
    </type>
    <type name="preferred_surface_curve_representation">
      <enumeration
        items="curve_3d pcurve_s1 pcurve_s2">
      </enumeration>


    </type>
    <type name="representation_identification_item">
      <select
        selectitems="representation">
      </select>

    </type>
    <type name="surface_boundary">
      <select
        selectitems="boundary_curve degenerate_pcurve">
      </select>

    </type>
    <type name="text">
      <builtintype
        type="STRING">
      </builtintype>


    </type>
    <type name="transformation">
      <select
        selectitems="item_defined_transformation functionally_defined_transformation">
      </select>

    </type>
    <type name="transition_code">
      <enumeration
        items="discontinuous continuous cont_same_gradient cont_same_gradient_same_curvature">
      </enumeration>


    </type>
    <type name="trimming_preference">
      <enumeration
        items="cartesian parameter unspecified">
      </enumeration>


    </type>
    <type name="trimming_select">
      <select
        selectitems="cartesian_point parameter_value">
      </select>

    </type>
    <type name="unit">
      <select
        selectitems="named_unit">
      </select>

    </type>
    <type name="vector_or_direction">
      <select
        selectitems="vector direction">
      </select>

    </type>
    <entity
      name="address">
      <explicit
        name="internal_location"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="street_number"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="street"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="postal_box"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="town"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="region"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="postal_code"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="country"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="facsimile_number"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="telephone_number"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="electronic_mail_address"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="telex_number"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <where
        label="wr1"
        expression="(EXISTS(internal_location) OR EXISTS(street_number) OR EXISTS(               street) OR EXISTS(postal_box) OR EXISTS(town) OR EXISTS(               region) OR EXISTS(postal_code) OR EXISTS(country) OR EXISTS(               facsimile_number) OR EXISTS(telephone_number) OR EXISTS(               electronic_mail_address) OR EXISTS(telex_number))">
      </where>
    </entity>

    <entity
      name="applied_identification_assignment"
      supertypes="identification_assignment">
      <explicit
        name="items">
        <aggregate
          type="SET"
          lower="1"
          upper="?"/>
        <typename
          name="identification_item"/>
      </explicit>
    </entity>

    <entity
      name="applied_organization_assignment"
      supertypes="organization_assignment">
      <explicit
        name="items">
        <aggregate
          type="SET"
          lower="1"
          upper="?"/>
        <typename
          name="organization_item"/>
      </explicit>
    </entity>

    <entity
      name="applied_person_and_organization_assignment"
      supertypes="person_and_organization_assignment">
      <explicit
        name="items">
        <aggregate
          type="SET"
          lower="1"
          upper="?"/>
        <typename
          name="person_and_organization_item"/>
      </explicit>
    </entity>

    <entity
      name="axis1_placement"
      supertypes="placement">
      <explicit
        name="axis"
        optional="YES">
        <typename
          name="direction"/>
      </explicit>
      <derived
        name="z"
        expression="NVL(normalise(axis),dummy_gri || direction([0,0,1]))">
        <typename
          name="direction "/>
      </derived>
      <where
        label="wr1"
        expression="(SELF\geometric_representation_item.dim = 3)">
      </where>
    </entity>

    <entity
      name="axis2_placement_2d"
      supertypes="placement">
      <explicit
        name="ref_direction"
        optional="YES">
        <typename
          name="direction"/>
      </explicit>
      <derived
        name="p"
        expression="build_2axes(ref_direction)">
        <aggregate
          type="LIST"
          lower="2"
          upper="2"/>
        <typename
          name="direction"/>
      </derived>
      <where
        label="wr1"
        expression="(SELF\geometric_representation_item.dim = 2)">
      </where>
    </entity>

    <entity
      name="axis2_placement_3d"
      supertypes="placement">
      <explicit
        name="axis"
        optional="YES">
        <typename
          name="direction"/>
      </explicit>
      <explicit
        name="ref_direction"
        optional="YES">
        <typename
          name="direction"/>
      </explicit>
      <derived
        name="p"
        expression="build_axes(axis,ref_direction)">
        <aggregate
          type="LIST"
          lower="3"
          upper="3"/>
        <typename
          name="direction"/>
      </derived>
      <where
        label="wr1"
        expression="(SELF\placement.location.dim = 3)">
      </where>
      <where
        label="wr2"
        expression="((NOT EXISTS(axis)) OR (axis.dim = 3))">
      </where>
      <where
        label="wr3"
        expression="((NOT EXISTS(ref_direction)) OR (ref_direction.dim = 3))">
      </where>
      <where
        label="wr4"
        expression="((NOT EXISTS(axis)) OR (NOT EXISTS(ref_direction)) OR (               cross_product(axis,ref_direction).magnitude &gt; 0))">
      </where>
    </entity>

    <entity
      name="b_spline_curve"
      super.expression="(ONEOF (uniform_curve,b_spline_curve_with_knots,        quasi_uniform_curve,bezier_curve) ANDOR rational_b_spline_curve)"
      supertypes="bounded_curve">
      <explicit
        name="degree">
        <builtintype
          type="INTEGER"/>
      </explicit>
      <explicit
        name="control_points_list">
        <aggregate
          type="LIST"
          lower="2"
          upper="?"/>
        <typename
          name="cartesian_point"/>
      </explicit>
      <explicit
        name="curve_form">
        <typename
          name="b_spline_curve_form"/>
      </explicit>
      <explicit
        name="closed_curve">
        <builtintype
          type="LOGICAL"/>
      </explicit>
      <explicit
        name="self_intersect">
        <builtintype
          type="LOGICAL"/>
      </explicit>
      <derived
        name="upper_index_on_control_points"
        expression="SIZEOF(                                         control_points_list) - 1">
        <builtintype
          type="INTEGER"/>
      </derived>
      <derived
        name="control_points"
        expression="list_to_array(                                         control_points_list,0,                                         upper_index_on_control_points)">
        <aggregate
          type="ARRAY"
          lower="0"
          upper="upper_index_on_control_points"/>
        <typename
          name="cartesian_point"/>
      </derived>
      <where
        label="wr1"
        expression="(('GEOMETRICALLY_BOUNDED_SURFACE_MIM.UNIFORM_CURVE' IN TYPEOF(               SELF)) OR (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.QUASI_UNIFORM_CURVE' IN                TYPEOF(SELF)) OR (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.BEZIER_CURVE' IN TYPEOF(               SELF)) OR ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.B_SPLINE_CURVE_WITH_KNOTS'                IN TYPEOF(SELF)))">
      </where>
    </entity>

    <entity
      name="b_spline_curve_with_knots"
      supertypes="b_spline_curve">
      <explicit
        name="knot_multiplicities">
        <aggregate
          type="LIST"
          lower="2"
          upper="?"/>
        <typename
          name="INTEGER"/>
      </explicit>
      <explicit
        name="knots">
        <aggregate
          type="LIST"
          lower="2"
          upper="?"/>
        <typename
          name="parameter_value"/>
      </explicit>
      <explicit
        name="knot_spec">
        <typename
          name="knot_type"/>
      </explicit>
      <derived
        name="upper_index_on_knots"
        expression="SIZEOF(knots)">
        <builtintype
          type="INTEGER"/>
      </derived>
      <where
        label="wr1"
        expression="constraints_param_b_spline(degree,upper_index_on_knots,               upper_index_on_control_points,knot_multiplicities,knots)">
      </where>
      <where
        label="wr2"
        expression="(SIZEOF(knot_multiplicities) = upper_index_on_knots)">
      </where>
    </entity>

    <entity
      name="b_spline_surface"
      super.expression="(ONEOF (b_spline_surface_with_knots,uniform_surface,        quasi_uniform_surface,bezier_surface) ANDOR         rational_b_spline_surface)"
      supertypes="bounded_surface">
      <explicit
        name="u_degree">
        <builtintype
          type="INTEGER"/>
      </explicit>
      <explicit
        name="v_degree">
        <builtintype
          type="INTEGER"/>
      </explicit>
      <explicit
        name="control_points_list">
        <aggregate
          type="LIST"
          lower="2"
          upper="?"/>
        <typename
          name="LIST"/>
      </explicit>
      <explicit
        name="surface_form">
        <typename
          name="b_spline_surface_form"/>
      </explicit>
      <explicit
        name="u_closed">
        <builtintype
          type="LOGICAL"/>
      </explicit>
      <explicit
        name="v_closed">
        <builtintype
          type="LOGICAL"/>
      </explicit>
      <explicit
        name="self_intersect">
        <builtintype
          type="LOGICAL"/>
      </explicit>
      <derived
        name="u_upper"
        expression="SIZEOF(control_points_list) - 1">
        <builtintype
          type="INTEGER"/>
      </derived>
      <derived
        name="v_upper"
        expression="SIZEOF(control_points_list[1]) - 1">
        <builtintype
          type="INTEGER"/>
      </derived>
      <derived
        name="control_points"
        expression="make_array_of_array(                          control_points_list,0,u_upper,0,v_upper)">
        <aggregate
          type="ARRAY"
          lower="0"
          upper="u_upper"/>
        <typename
          name="ARRAY"/>
      </derived>
      <where
        label="wr1"
        expression="(('GEOMETRICALLY_BOUNDED_SURFACE_MIM.UNIFORM_SURFACE' IN                TYPEOF(SELF)) OR (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.QUASI_UNIFORM_SURFACE' IN                TYPEOF(SELF)) OR (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.BEZIER_SURFACE' IN                TYPEOF(SELF)) OR ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.B_SPLINE_SURFACE_WITH_KNOTS'                IN TYPEOF(SELF)))">
      </where>
    </entity>

    <entity
      name="b_spline_surface_with_knots"
      supertypes="b_spline_surface">
      <explicit
        name="u_multiplicities">
        <aggregate
          type="LIST"
          lower="2"
          upper="?"/>
        <typename
          name="INTEGER"/>
      </explicit>
      <explicit
        name="v_multiplicities">
        <aggregate
          type="LIST"
          lower="2"
          upper="?"/>
        <typename
          name="INTEGER"/>
      </explicit>
      <explicit
        name="u_knots">
        <aggregate
          type="LIST"
          lower="2"
          upper="?"/>
        <typename
          name="parameter_value"/>
      </explicit>
      <explicit
        name="v_knots">
        <aggregate
          type="LIST"
          lower="2"
          upper="?"/>
        <typename
          name="parameter_value"/>
      </explicit>
      <explicit
        name="knot_spec">
        <typename
          name="knot_type"/>
      </explicit>
      <derived
        name="knot_u_upper"
        expression="SIZEOF(u_knots)">
        <builtintype
          type="INTEGER"/>
      </derived>
      <derived
        name="knot_v_upper"
        expression="SIZEOF(v_knots)">
        <builtintype
          type="INTEGER"/>
      </derived>
      <where
        label="wr1"
        expression="constraints_param_b_spline(SELF\b_spline_surface.u_degree,               knot_u_upper,SELF\b_spline_surface.u_upper,u_multiplicities,               u_knots)">
      </where>
      <where
        label="wr2"
        expression="constraints_param_b_spline(SELF\b_spline_surface.v_degree,               knot_v_upper,SELF\b_spline_surface.v_upper,v_multiplicities,               v_knots)">
      </where>
      <where
        label="wr3"
        expression="(SIZEOF(u_multiplicities) = knot_u_upper)">
      </where>
      <where
        label="wr4"
        expression="(SIZEOF(v_multiplicities) = knot_v_upper)">
      </where>
    </entity>

    <entity
      name="bezier_curve"
      supertypes="b_spline_curve">
    </entity>

    <entity
      name="bezier_surface"
      supertypes="b_spline_surface">
    </entity>

    <entity
      name="boundary_curve"
      supertypes="composite_curve_on_surface">
      <where
        label="wr1"
        expression="SELF\composite_curve.closed_curve">
      </where>
    </entity>

    <entity
      name="bounded_curve"
      super.expression="(ONEOF (polyline,b_spline_curve,trimmed_curve,        bounded_pcurve,bounded_surface_curve,composite_curve))"
      supertypes="curve">
    </entity>

    <entity
      name="bounded_pcurve"
      supertypes="pcurve bounded_curve">
      <where
        label="wr1"
        expression="('GEOMETRICALLY_BOUNDED_SURFACE_MIM.BOUNDED_CURVE' IN TYPEOF(               SELF\pcurve.reference_to_curve.items[1]))">
      </where>
    </entity>

    <entity
      name="bounded_surface"
      super.expression="(ONEOF (b_spline_surface,rectangular_trimmed_surface,        curve_bounded_surface,rectangular_composite_surface))"
      supertypes="surface">
    </entity>

    <entity
      name="bounded_surface_curve"
      supertypes="surface_curve bounded_curve">
      <where
        label="wr1"
        expression="('GEOMETRICALLY_BOUNDED_SURFACE_MIM.BOUNDED_CURVE' IN TYPEOF(               SELF\surface_curve.curve_3d))">
      </where>
    </entity>

    <entity
      name="cartesian_point"
      supertypes="point">
      <explicit
        name="coordinates">
        <aggregate
          type="LIST"
          lower="1"
          upper="3"/>
        <typename
          name="length_measure"/>
      </explicit>
    </entity>

    <entity
      name="cartesian_transformation_operator"
      super.expression="(ONEOF (cartesian_transformation_operator_2d,        cartesian_transformation_operator_3d))"
      supertypes="geometric_representation_item functionally_defined_transformation">
      <explicit
        name="axis1"
        optional="YES">
        <typename
          name="direction"/>
      </explicit>
      <explicit
        name="axis2"
        optional="YES">
        <typename
          name="direction"/>
      </explicit>
      <explicit
        name="local_origin">
        <typename
          name="cartesian_point"/>
      </explicit>
      <explicit
        name="scale"
        optional="YES">
        <builtintype
          type="REAL"/>
      </explicit>
      <derived
        name="scl"
        expression="NVL(scale,1)">
        <builtintype
          type="REAL"/>
      </derived>
      <where
        label="wr1"
        expression="(scl &gt; 0)">
      </where>
    </entity>

    <entity
      name="cartesian_transformation_operator_2d"
      supertypes="cartesian_transformation_operator">
      <derived
        name="u"
        expression="base_axis(2,SELF\             cartesian_transformation_operator.axis1,SELF\             cartesian_transformation_operator.axis2,?)">
        <aggregate
          type="LIST"
          lower="2"
          upper="2"/>
        <typename
          name="direction"/>
      </derived>
      <where
        label="wr1"
        expression="(SELF\geometric_representation_item.dim = 2)">
      </where>
    </entity>

    <entity
      name="cartesian_transformation_operator_3d"
      supertypes="cartesian_transformation_operator">
      <explicit
        name="axis3"
        optional="YES">
        <typename
          name="direction"/>
      </explicit>
      <derived
        name="u"
        expression="base_axis(3,SELF\             cartesian_transformation_operator.axis1,SELF\             cartesian_transformation_operator.axis2,axis3)">
        <aggregate
          type="LIST"
          lower="3"
          upper="3"/>
        <typename
          name="direction"/>
      </derived>
      <where
        label="wr1"
        expression="(SELF\geometric_representation_item.dim = 3)">
      </where>
    </entity>

    <entity
      name="circle"
      supertypes="conic">
      <explicit
        name="radius">
        <typename
          name="positive_length_measure"/>
      </explicit>
    </entity>

    <entity
      name="composite_curve"
      supertypes="bounded_curve">
      <explicit
        name="segments">
        <aggregate
          type="LIST"
          lower="1"
          upper="?"/>
        <typename
          name="composite_curve_segment"/>
      </explicit>
      <explicit
        name="self_intersect">
        <builtintype
          type="LOGICAL"/>
      </explicit>
      <derived
        name="n_segments"
        expression="SIZEOF(segments)">
        <builtintype
          type="INTEGER"/>
      </derived>
      <derived
        name="closed_curve"
        expression="segments[n_segments].transition &lt;&gt;                         discontinuous">
        <builtintype
          type="LOGICAL"/>
      </derived>
      <where
        label="wr1"
        expression="(((NOT closed_curve) AND (SIZEOF(QUERY ( temp &lt;* segments | (               temp.transition = discontinuous) )) = 1)) OR (closed_curve                AND (SIZEOF(QUERY ( temp &lt;* segments | (temp.transition =                discontinuous) )) = 0)))">
      </where>
    </entity>

    <entity
      name="composite_curve_on_surface"
      super.expression="(boundary_curve)"
      supertypes="composite_curve">
      <derived
        name="basis_surface"
        expression="get_basis_surface(SELF)">
        <aggregate
          type="SET"
          lower="0"
          upper="2"/>
        <typename
          name="surface"/>
      </derived>
      <where
        label="wr1"
        expression="(SIZEOF(basis_surface) &gt; 0)">
      </where>
      <where
        label="wr2"
        expression="constraints_composite_curve_on_surface(SELF)">
      </where>
    </entity>

    <entity
      name="composite_curve_segment"
      supertypes="founded_item">
      <explicit
        name="transition">
        <typename
          name="transition_code"/>
      </explicit>
      <explicit
        name="same_sense">
        <builtintype
          type="BOOLEAN"/>
      </explicit>
      <explicit
        name="parent_curve">
        <typename
          name="curve"/>
      </explicit>
      <inverse
        name="using_curves"
        entity="composite_curve"
        attribute="segments">
        <inverse.aggregate
          type="BAG"
          lower="1"
          upper="?"/>
      </inverse>
      <where
        label="wr1"
        expression="('GEOMETRICALLY_BOUNDED_SURFACE_MIM.BOUNDED_CURVE' IN TYPEOF(               parent_curve))">
      </where>
    </entity>

    <entity
      name="conic"
      super.expression="(ONEOF (circle,ellipse,hyperbola,parabola))"
      supertypes="curve">
      <explicit
        name="position">
        <typename
          name="axis2_placement"/>
      </explicit>
    </entity>

    <entity
      name="conical_surface"
      supertypes="elementary_surface">
      <explicit
        name="radius">
        <typename
          name="length_measure"/>
      </explicit>
      <explicit
        name="semi_angle">
        <typename
          name="plane_angle_measure"/>
      </explicit>
      <where
        label="wr1"
        expression="(radius &gt;= 0)">
      </where>
    </entity>

    <entity
      name="curve"
      super.expression="(ONEOF (line,conic,pcurve,surface_curve,offset_curve_3d,        curve_replica))"
      supertypes="geometric_representation_item">
    </entity>

    <entity
      name="curve_bounded_surface"
      supertypes="bounded_surface">
      <explicit
        name="basis_surface">
        <typename
          name="surface"/>
      </explicit>
      <explicit
        name="boundaries">
        <aggregate
          type="SET"
          lower="1"
          upper="?"/>
        <typename
          name="surface_boundary"/>
      </explicit>
      <explicit
        name="implicit_outer">
        <builtintype
          type="BOOLEAN"/>
      </explicit>
      <where
        label="wr1"
        expression="(NOT (implicit_outer AND (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.OUTER_BOUNDARY_CURVE' IN                TYPEOF(boundaries))))">
      </where>
      <where
        label="wr2"
        expression="((NOT implicit_outer) OR (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.BOUNDED_SURFACE' IN                TYPEOF(basis_surface)))">
      </where>
      <where
        label="wr3"
        expression="(SIZEOF(QUERY ( temp &lt;* boundaries | (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.OUTER_BOUNDARY_CURVE' IN                TYPEOF(temp)) )) &lt;= 1)">
      </where>
      <where
        label="wr4"
        expression="(SIZEOF(QUERY ( temp &lt;* QUERY ( bndc &lt;* boundaries | (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.BOUNDARY_CURVE' IN                TYPEOF(bndc)) ) | (temp\composite_curve_on_surface.               basis_surface[1] &lt;&gt; SELF.basis_surface) )) = 0)">
      </where>
    </entity>

    <entity
      name="curve_replica"
      supertypes="curve">
      <explicit
        name="parent_curve">
        <typename
          name="curve"/>
      </explicit>
      <explicit
        name="transformation">
        <typename
          name="cartesian_transformation_operator"/>
      </explicit>
      <where
        label="wr1"
        expression="(transformation.dim = parent_curve.dim)">
      </where>
      <where
        label="wr2"
        expression="acyclic_curve_replica(SELF,parent_curve)">
      </where>
    </entity>

    <entity
      name="cylindrical_surface"
      supertypes="elementary_surface">
      <explicit
        name="radius">
        <typename
          name="positive_length_measure"/>
      </explicit>
    </entity>

    <entity
      name="definitional_representation"
      supertypes="representation">
      <where
        label="wr1"
        expression="('GEOMETRICALLY_BOUNDED_SURFACE_MIM.PARAMETRIC_REPRESENTATION_CONTEXT'                IN TYPEOF(SELF\representation.context_of_items))">
      </where>
    </entity>

    <entity
      name="degenerate_pcurve"
      supertypes="point">
      <explicit
        name="basis_surface">
        <typename
          name="surface"/>
      </explicit>
      <explicit
        name="reference_to_curve">
        <typename
          name="definitional_representation"/>
      </explicit>
      <where
        label="wr1"
        expression="(SIZEOF(reference_to_curve\representation.items) = 1)">
      </where>
      <where
        label="wr2"
        expression="('GEOMETRICALLY_BOUNDED_SURFACE_MIM.CURVE' IN TYPEOF(               reference_to_curve\representation.items[1]))">
      </where>
      <where
        label="wr3"
        expression="(reference_to_curve\representation.items[1]\               geometric_representation_item.dim = 2)">
      </where>
    </entity>

    <entity
      name="degenerate_toroidal_surface"
      supertypes="toroidal_surface">
      <explicit
        name="select_outer">
        <builtintype
          type="BOOLEAN"/>
      </explicit>
      <where
        label="wr1"
        expression="(major_radius &lt; minor_radius)">
      </where>
    </entity>

    <entity
      name="description_attribute">
      <explicit
        name="attribute_value">
        <typename
          name="text"/>
      </explicit>
      <explicit
        name="described_item">
        <typename
          name="description_attribute_select"/>
      </explicit>
    </entity>

    <entity
      name="dimensional_exponents">
      <explicit
        name="length_exponent">
        <builtintype
          type="REAL"/>
      </explicit>
      <explicit
        name="mass_exponent">
        <builtintype
          type="REAL"/>
      </explicit>
      <explicit
        name="time_exponent">
        <builtintype
          type="REAL"/>
      </explicit>
      <explicit
        name="electric_current_exponent">
        <builtintype
          type="REAL"/>
      </explicit>
      <explicit
        name="thermodynamic_temperature_exponent">
        <builtintype
          type="REAL"/>
      </explicit>
      <explicit
        name="amount_of_substance_exponent">
        <builtintype
          type="REAL"/>
      </explicit>
      <explicit
        name="luminous_intensity_exponent">
        <builtintype
          type="REAL"/>
      </explicit>
    </entity>

    <entity
      name="direction"
      supertypes="geometric_representation_item">
      <explicit
        name="direction_ratios">
        <aggregate
          type="LIST"
          lower="2"
          upper="3"/>
        <typename
          name="REAL"/>
      </explicit>
      <where
        label="wr1"
        expression="(SIZEOF(QUERY ( tmp &lt;* direction_ratios | (tmp &lt;&gt; 0) )) &gt; 0)">
      </where>
    </entity>

    <entity
      name="elementary_surface"
      super.expression="(ONEOF (plane,cylindrical_surface,conical_surface,        spherical_surface,toroidal_surface))"
      supertypes="surface">
      <explicit
        name="position">
        <typename
          name="axis2_placement_3d"/>
      </explicit>
    </entity>

    <entity
      name="ellipse"
      supertypes="conic">
      <explicit
        name="semi_axis_1">
        <typename
          name="positive_length_measure"/>
      </explicit>
      <explicit
        name="semi_axis_2">
        <typename
          name="positive_length_measure"/>
      </explicit>
    </entity>

    <entity
      name="evaluated_degenerate_pcurve"
      supertypes="degenerate_pcurve">
      <explicit
        name="equivalent_point">
        <typename
          name="cartesian_point"/>
      </explicit>
    </entity>

    <entity
      name="founded_item">
    </entity>

    <entity
      name="functionally_defined_transformation">
      <explicit
        name="name">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="description"
        optional="YES">
        <typename
          name="text"/>
      </explicit>
    </entity>

    <entity
      name="geometric_representation_context"
      supertypes="representation_context">
      <explicit
        name="coordinate_space_dimension">
        <typename
          name="dimension_count"/>
      </explicit>
    </entity>

    <entity
      name="geometric_representation_item"
      super.expression="(ONEOF (point,direction,vector,placement,        cartesian_transformation_operator,curve,surface,geometric_set))"
      supertypes="representation_item">
      <derived
        name="dim"
        expression="dimension_of(SELF)">
        <typename
          name="dimension_count "/>
      </derived>
      <where
        label="wr1"
        expression="(SIZEOF(QUERY ( using_rep &lt;* using_representations(SELF) | (               NOT ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.GEOMETRIC_REPRESENTATION_CONTEXT'                IN TYPEOF(using_rep.context_of_items))) )) = 0)">
      </where>
    </entity>

    <entity
      name="geometric_set"
      supertypes="geometric_representation_item">
      <explicit
        name="elements">
        <aggregate
          type="SET"
          lower="1"
          upper="?"/>
        <typename
          name="geometric_set_select"/>
      </explicit>
    </entity>

    <entity
      name="geometrically_bounded_surface_shape_representation"
      supertypes="shape_representation">
      <where
        label="wr1"
        expression="(SIZEOF(QUERY ( it &lt;* SELF.items | (NOT (SIZEOF([               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.GEOMETRIC_SET',               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.MAPPED_ITEM',               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.AXIS2_PLACEMENT_3D'] *                TYPEOF(it)) = 1)) )) = 0)">
      </where>
      <where
        label="wr2"
        expression="(SIZEOF(QUERY ( it &lt;* SELF.items | (SIZEOF([               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.GEOMETRIC_SET',               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.MAPPED_ITEM'] * TYPEOF(it))                = 1) )) &gt; 0)">
      </where>
      <where
        label="wr3"
        expression="(SIZEOF(QUERY ( mi &lt;* QUERY ( it &lt;* SELF.items | (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.MAPPED_ITEM' IN TYPEOF(it)) )                | (NOT ((('GEOMETRICALLY_BOUNDED_SURFACE_MIM.' +                'GEOMETRICALLY_BOUNDED_SURFACE_SHAPE_REPRESENTATION') IN                TYPEOF(mi\mapped_item.mapping_source.mapped_representation))                AND (SIZEOF(QUERY ( mr_it &lt;* mi\mapped_item.mapping_source.               mapped_representation.items | (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.GEOMETRIC_SET' IN TYPEOF(               mr_it)) )) &gt; 0))) )) = 0)">
      </where>
      <where
        label="wr4"
        expression="(SIZEOF(QUERY ( gs &lt;* QUERY ( it &lt;* SELF.items | (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.GEOMETRIC_SET' IN TYPEOF(               it)) ) | (NOT (SIZEOF(QUERY ( pnt &lt;* QUERY ( gsel &lt;* gs\               geometric_set.elements | (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.POINT' IN TYPEOF(gsel)) )                | (NOT gbsf_check_point(pnt)) )) = 0)) )) = 0)">
      </where>
      <where
        label="wr5"
        expression="(SIZEOF(QUERY ( gs &lt;* QUERY ( it &lt;* SELF.items | (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.GEOMETRIC_SET' IN TYPEOF(               it)) ) | (NOT (SIZEOF(QUERY ( cv &lt;* QUERY ( gsel &lt;* gs\               geometric_set.elements | (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.CURVE' IN TYPEOF(gsel)) )                | (NOT gbsf_check_curve(cv)) )) = 0)) )) = 0)">
      </where>
      <where
        label="wr6"
        expression="(SIZEOF(QUERY ( gs &lt;* QUERY ( it &lt;* SELF.items | (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.GEOMETRIC_SET' IN TYPEOF(               it)) ) | (NOT (SIZEOF(QUERY ( sf &lt;* QUERY ( gsel &lt;* gs\               geometric_set.elements | (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.SURFACE' IN TYPEOF(gsel)) )                | (NOT gbsf_check_surface(sf)) )) = 0)) )) = 0)">
      </where>
      <where
        label="wr7"
        expression="(SIZEOF(QUERY ( gs &lt;* QUERY ( it &lt;* SELF.items | (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.GEOMETRIC_SET' IN TYPEOF(               it)) ) | (SIZEOF(QUERY ( gsel &lt;* gs\geometric_set.elements                | ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.SURFACE' IN TYPEOF(               gsel)) )) &gt; 0) )) &gt; 0)">
      </where>
    </entity>

    <entity
      name="global_unit_assigned_context"
      supertypes="representation_context">
      <explicit
        name="units">
        <aggregate
          type="SET"
          lower="1"
          upper="?"/>
        <typename
          name="unit"/>
      </explicit>
    </entity>

    <entity
      name="hyperbola"
      supertypes="conic">
      <explicit
        name="semi_axis">
        <typename
          name="positive_length_measure"/>
      </explicit>
      <explicit
        name="semi_imag_axis">
        <typename
          name="positive_length_measure"/>
      </explicit>
    </entity>

    <entity
      name="id_attribute">
      <explicit
        name="attribute_value">
        <typename
          name="identifier"/>
      </explicit>
      <explicit
        name="identified_item">
        <typename
          name="id_attribute_select"/>
      </explicit>
    </entity>

    <entity
      name="identification_assignment"
      abstract.supertype="YES">
      <explicit
        name="assigned_id">
        <typename
          name="identifier"/>
      </explicit>
      <explicit
        name="role">
        <typename
          name="identification_role"/>
      </explicit>
    </entity>

    <entity
      name="identification_role">
      <explicit
        name="name">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="description"
        optional="YES">
        <typename
          name="text"/>
      </explicit>
    </entity>

    <entity
      name="intersection_curve"
      supertypes="surface_curve">
      <where
        label="wr1"
        expression="(SIZEOF(SELF\surface_curve.associated_geometry) = 2)">
      </where>
      <where
        label="wr2"
        expression="(associated_surface(SELF\surface_curve.associated_geometry[1])                &lt;&gt; associated_surface(SELF\surface_curve.associated_geometry               [2]))">
      </where>
    </entity>

    <entity
      name="item_defined_transformation">
      <explicit
        name="name">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="description"
        optional="YES">
        <typename
          name="text"/>
      </explicit>
      <explicit
        name="transform_item_1">
        <typename
          name="representation_item"/>
      </explicit>
      <explicit
        name="transform_item_2">
        <typename
          name="representation_item"/>
      </explicit>
    </entity>

    <entity
      name="length_measure_with_unit"
      supertypes="measure_with_unit">
      <where
        label="wr1"
        expression="('GEOMETRICALLY_BOUNDED_SURFACE_MIM.LENGTH_UNIT' IN TYPEOF(SELF               \measure_with_unit.unit_component))">
      </where>
    </entity>

    <entity
      name="line"
      supertypes="curve">
      <explicit
        name="pnt">
        <typename
          name="cartesian_point"/>
      </explicit>
      <explicit
        name="dir">
        <typename
          name="vector"/>
      </explicit>
      <where
        label="wr1"
        expression="(dir.dim = pnt.dim)">
      </where>
    </entity>

    <entity
      name="mapped_item"
      supertypes="representation_item">
      <explicit
        name="mapping_source">
        <typename
          name="representation_map"/>
      </explicit>
      <explicit
        name="mapping_target">
        <typename
          name="representation_item"/>
      </explicit>
      <where
        label="wr1"
        expression="acyclic_mapped_representation(using_representations(SELF),[SELF])">
      </where>
    </entity>

    <entity
      name="measure_with_unit"
      super.expression="(length_measure_with_unit)">
      <explicit
        name="value_component">
        <typename
          name="measure_value"/>
      </explicit>
      <explicit
        name="unit_component">
        <typename
          name="unit"/>
      </explicit>
      <where
        label="wr1"
        expression="valid_units(SELF)">
      </where>
    </entity>

    <entity
      name="name_attribute">
      <explicit
        name="attribute_value">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="named_item">
        <typename
          name="name_attribute_select"/>
      </explicit>
    </entity>

    <entity
      name="named_unit">
      <explicit
        name="dimensions">
        <typename
          name="dimensional_exponents"/>
      </explicit>
    </entity>

    <entity
      name="offset_curve_3d"
      supertypes="curve">
      <explicit
        name="basis_curve">
        <typename
          name="curve"/>
      </explicit>
      <explicit
        name="distance">
        <typename
          name="length_measure"/>
      </explicit>
      <explicit
        name="self_intersect">
        <builtintype
          type="LOGICAL"/>
      </explicit>
      <explicit
        name="ref_direction">
        <typename
          name="direction"/>
      </explicit>
      <where
        label="wr1"
        expression="((basis_curve.dim = 3) AND (ref_direction.dim = 3))">
      </where>
    </entity>

    <entity
      name="offset_surface"
      supertypes="surface">
      <explicit
        name="basis_surface">
        <typename
          name="surface"/>
      </explicit>
      <explicit
        name="distance">
        <typename
          name="length_measure"/>
      </explicit>
      <explicit
        name="self_intersect">
        <builtintype
          type="LOGICAL"/>
      </explicit>
    </entity>

    <entity
      name="organization">
      <explicit
        name="id"
        optional="YES">
        <typename
          name="identifier"/>
      </explicit>
      <explicit
        name="name">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="description"
        optional="YES">
        <typename
          name="text"/>
      </explicit>
    </entity>

    <entity
      name="organization_assignment"
      abstract.supertype="YES">
      <explicit
        name="assigned_organization">
        <typename
          name="organization"/>
      </explicit>
      <explicit
        name="role">
        <typename
          name="organization_role"/>
      </explicit>
    </entity>

    <entity
      name="organization_role">
      <explicit
        name="name">
        <typename
          name="label"/>
      </explicit>
      <derived
        name="description"
        expression="get_description_value(SELF)">
        <typename
          name="text "/>
      </derived>
      <where
        label="wr1"
        expression="(SIZEOF(USEDIN(SELF,'GEOMETRICALLY_BOUNDED_SURFACE_MIM.' +                'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) &lt;= 1)">
      </where>
    </entity>

    <entity
      name="organizational_address"
      supertypes="address">
      <explicit
        name="organizations">
        <aggregate
          type="SET"
          lower="1"
          upper="?"/>
        <typename
          name="organization"/>
      </explicit>
      <explicit
        name="description"
        optional="YES">
        <typename
          name="text"/>
      </explicit>
    </entity>

    <entity
      name="outer_boundary_curve"
      supertypes="boundary_curve">
    </entity>

    <entity
      name="parabola"
      supertypes="conic">
      <explicit
        name="focal_dist">
        <typename
          name="length_measure"/>
      </explicit>
      <where
        label="wr1"
        expression="(focal_dist &lt;&gt; 0)">
      </where>
    </entity>

    <entity
      name="parametric_representation_context"
      supertypes="representation_context">
    </entity>

    <entity
      name="pcurve"
      supertypes="curve">
      <explicit
        name="basis_surface">
        <typename
          name="surface"/>
      </explicit>
      <explicit
        name="reference_to_curve">
        <typename
          name="definitional_representation"/>
      </explicit>
      <where
        label="wr1"
        expression="(SIZEOF(reference_to_curve\representation.items) = 1)">
      </where>
      <where
        label="wr2"
        expression="('GEOMETRICALLY_BOUNDED_SURFACE_MIM.CURVE' IN TYPEOF(               reference_to_curve\representation.items[1]))">
      </where>
      <where
        label="wr3"
        expression="(reference_to_curve\representation.items[1]\               geometric_representation_item.dim = 2)">
      </where>
    </entity>

    <entity
      name="person">
      <explicit
        name="id">
        <typename
          name="identifier"/>
      </explicit>
      <explicit
        name="last_name"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="first_name"
        optional="YES">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="middle_names"
        optional="YES">
        <aggregate
          type="LIST"
          lower="1"
          upper="?"/>
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="prefix_titles"
        optional="YES">
        <aggregate
          type="LIST"
          lower="1"
          upper="?"/>
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="suffix_titles"
        optional="YES">
        <aggregate
          type="LIST"
          lower="1"
          upper="?"/>
        <typename
          name="label"/>
      </explicit>
      <where
        label="wr1"
        expression="(EXISTS(last_name) OR EXISTS(first_name))">
      </where>
    </entity>

    <entity
      name="person_and_organization">
      <explicit
        name="the_person">
        <typename
          name="person"/>
      </explicit>
      <explicit
        name="the_organization">
        <typename
          name="organization"/>
      </explicit>
      <derived
        name="name"
        expression="get_name_value(SELF)">
        <typename
          name="label "/>
      </derived>
      <derived
        name="description"
        expression="get_description_value(SELF)">
        <typename
          name="text "/>
      </derived>
      <where
        label="wr1"
        expression="(SIZEOF(USEDIN(SELF,'GEOMETRICALLY_BOUNDED_SURFACE_MIM.' +                'NAME_ATTRIBUTE.NAMED_ITEM')) &lt;= 1)">
      </where>
      <where
        label="wr2"
        expression="(SIZEOF(USEDIN(SELF,'GEOMETRICALLY_BOUNDED_SURFACE_MIM.' +                'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) &lt;= 1)">
      </where>
    </entity>

    <entity
      name="person_and_organization_assignment"
      abstract.supertype="YES">
      <explicit
        name="assigned_person_and_organization">
        <typename
          name="person_and_organization"/>
      </explicit>
      <explicit
        name="role">
        <typename
          name="person_and_organization_role"/>
      </explicit>
    </entity>

    <entity
      name="person_and_organization_role">
      <explicit
        name="name">
        <typename
          name="label"/>
      </explicit>
      <derived
        name="description"
        expression="get_description_value(SELF)">
        <typename
          name="text "/>
      </derived>
      <where
        label="wr1"
        expression="(SIZEOF(USEDIN(SELF,'GEOMETRICALLY_BOUNDED_SURFACE_MIM.' +                'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) &lt;= 1)">
      </where>
    </entity>

    <entity
      name="personal_address"
      supertypes="address">
      <explicit
        name="people">
        <aggregate
          type="SET"
          lower="1"
          upper="?"/>
        <typename
          name="person"/>
      </explicit>
      <explicit
        name="description"
        optional="YES">
        <typename
          name="text"/>
      </explicit>
    </entity>

    <entity
      name="placement"
      super.expression="(ONEOF (axis1_placement,axis2_placement_2d,        axis2_placement_3d))"
      supertypes="geometric_representation_item">
      <explicit
        name="location">
        <typename
          name="cartesian_point"/>
      </explicit>
    </entity>

    <entity
      name="plane"
      supertypes="elementary_surface">
    </entity>

    <entity
      name="point"
      super.expression="(ONEOF (cartesian_point,point_on_curve,point_on_surface,        degenerate_pcurve))"
      supertypes="geometric_representation_item">
    </entity>

    <entity
      name="point_on_curve"
      supertypes="point">
      <explicit
        name="basis_curve">
        <typename
          name="curve"/>
      </explicit>
      <explicit
        name="point_parameter">
        <typename
          name="parameter_value"/>
      </explicit>
    </entity>

    <entity
      name="point_on_surface"
      supertypes="point">
      <explicit
        name="basis_surface">
        <typename
          name="surface"/>
      </explicit>
      <explicit
        name="point_parameter_u">
        <typename
          name="parameter_value"/>
      </explicit>
      <explicit
        name="point_parameter_v">
        <typename
          name="parameter_value"/>
      </explicit>
    </entity>

    <entity
      name="polyline"
      supertypes="bounded_curve">
      <explicit
        name="points">
        <aggregate
          type="LIST"
          lower="2"
          upper="?"/>
        <typename
          name="cartesian_point"/>
      </explicit>
    </entity>

    <entity
      name="quasi_uniform_curve"
      supertypes="b_spline_curve">
    </entity>

    <entity
      name="quasi_uniform_surface"
      supertypes="b_spline_surface">
    </entity>

    <entity
      name="rational_b_spline_curve"
      supertypes="b_spline_curve">
      <explicit
        name="weights_data">
        <aggregate
          type="LIST"
          lower="2"
          upper="?"/>
        <typename
          name="REAL"/>
      </explicit>
      <derived
        name="weights"
        expression="list_to_array(weights_data,0,                   upper_index_on_control_points)">
        <aggregate
          type="ARRAY"
          lower="0"
          upper="upper_index_on_control_points"/>
        <typename
          name="REAL"/>
      </derived>
      <where
        label="wr1"
        expression="(SIZEOF(weights_data) = SIZEOF(SELF\b_spline_curve.               control_points_list))">
      </where>
      <where
        label="wr2"
        expression="curve_weights_positive(SELF)">
      </where>
    </entity>

    <entity
      name="rational_b_spline_surface"
      supertypes="b_spline_surface">
      <explicit
        name="weights_data">
        <aggregate
          type="LIST"
          lower="2"
          upper="?"/>
        <typename
          name="LIST"/>
      </explicit>
      <derived
        name="weights"
        expression="make_array_of_array(weights_data,0,u_upper,0,v_upper)">
        <aggregate
          type="ARRAY"
          lower="0"
          upper="u_upper"/>
        <typename
          name="ARRAY"/>
      </derived>
      <where
        label="wr1"
        expression="((SIZEOF(weights_data) = SIZEOF(SELF\b_spline_surface.               control_points_list)) AND (SIZEOF(weights_data[1]) = SIZEOF(               SELF\b_spline_surface.control_points_list[1])))">
      </where>
      <where
        label="wr2"
        expression="surface_weights_positive(SELF)">
      </where>
    </entity>

    <entity
      name="rectangular_composite_surface"
      supertypes="bounded_surface">
      <explicit
        name="segments">
        <aggregate
          type="LIST"
          lower="1"
          upper="?"/>
        <typename
          name="LIST"/>
      </explicit>
      <derived
        name="n_u"
        expression="SIZEOF(segments)">
        <builtintype
          type="INTEGER"/>
      </derived>
      <derived
        name="n_v"
        expression="SIZEOF(segments[1])">
        <builtintype
          type="INTEGER"/>
      </derived>
      <where
        label="wr1"
        expression="(SIZEOF(QUERY ( s &lt;* segments | (n_v &lt;&gt; SIZEOF(s)) )) = 0)">
      </where>
      <where
        label="wr2"
        expression="constraints_rectangular_composite_surface(SELF)">
      </where>
    </entity>

    <entity
      name="rectangular_trimmed_surface"
      supertypes="bounded_surface">
      <explicit
        name="basis_surface">
        <typename
          name="surface"/>
      </explicit>
      <explicit
        name="u1">
        <typename
          name="parameter_value"/>
      </explicit>
      <explicit
        name="u2">
        <typename
          name="parameter_value"/>
      </explicit>
      <explicit
        name="v1">
        <typename
          name="parameter_value"/>
      </explicit>
      <explicit
        name="v2">
        <typename
          name="parameter_value"/>
      </explicit>
      <explicit
        name="usense">
        <builtintype
          type="BOOLEAN"/>
      </explicit>
      <explicit
        name="vsense">
        <builtintype
          type="BOOLEAN"/>
      </explicit>
      <where
        label="wr1"
        expression="(u1 &lt;&gt; u2)">
      </where>
      <where
        label="wr2"
        expression="(v1 &lt;&gt; v2)">
      </where>
      <where
        label="wr3"
        expression="((('GEOMETRICALLY_BOUNDED_SURFACE_MIM.ELEMENTARY_SURFACE' IN                TYPEOF(basis_surface)) AND (NOT (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.PLANE' IN TYPEOF(               basis_surface)))) OR (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.SURFACE_OF_REVOLUTION' IN                TYPEOF(basis_surface)) OR (usense = (u2 &gt; u1)))">
      </where>
      <where
        label="wr4"
        expression="(('GEOMETRICALLY_BOUNDED_SURFACE_MIM.SPHERICAL_SURFACE' IN                TYPEOF(basis_surface)) OR (               'GEOMETRICALLY_BOUNDED_SURFACE_MIM.TOROIDAL_SURFACE' IN                TYPEOF(basis_surface)) OR (vsense = (v2 &gt; v1)))">
      </where>
    </entity>

    <entity
      name="reparametrised_composite_curve_segment"
      supertypes="composite_curve_segment">
      <explicit
        name="param_length">
        <typename
          name="parameter_value"/>
      </explicit>
      <where
        label="wr1"
        expression="(param_length &gt; 0)">
      </where>
    </entity>

    <entity
      name="representation">
      <explicit
        name="name">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="items">
        <aggregate
          type="SET"
          lower="1"
          upper="?"/>
        <typename
          name="representation_item"/>
      </explicit>
      <explicit
        name="context_of_items">
        <typename
          name="representation_context"/>
      </explicit>
      <derived
        name="id"
        expression="get_id_value(SELF)">
        <typename
          name="identifier "/>
      </derived>
      <derived
        name="description"
        expression="get_description_value(SELF)">
        <typename
          name="text "/>
      </derived>
      <where
        label="wr1"
        expression="(SIZEOF(USEDIN(SELF,'GEOMETRICALLY_BOUNDED_SURFACE_MIM.' +                'ID_ATTRIBUTE.IDENTIFIED_ITEM')) &lt;= 1)">
      </where>
      <where
        label="wr2"
        expression="(SIZEOF(USEDIN(SELF,'GEOMETRICALLY_BOUNDED_SURFACE_MIM.' +                'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) &lt;= 1)">
      </where>
    </entity>

    <entity
      name="representation_context">
      <explicit
        name="context_identifier">
        <typename
          name="identifier"/>
      </explicit>
      <explicit
        name="context_type">
        <typename
          name="text"/>
      </explicit>
      <inverse
        name="representations_in_context"
        entity="representation"
        attribute="context_of_items">
        <inverse.aggregate
          type="SET"
          lower="1"
          upper="?"/>
      </inverse>
    </entity>

    <entity
      name="representation_item">
      <explicit
        name="name">
        <typename
          name="label"/>
      </explicit>
      <where
        label="wr1"
        expression="(SIZEOF(using_representations(SELF)) &gt; 0)">
      </where>
    </entity>

    <entity
      name="representation_map">
      <explicit
        name="mapping_origin">
        <typename
          name="representation_item"/>
      </explicit>
      <explicit
        name="mapped_representation">
        <typename
          name="representation"/>
      </explicit>
      <inverse
        name="map_usage"
        entity="mapped_item"
        attribute="mapping_source">
        <inverse.aggregate
          type="SET"
          lower="1"
          upper="?"/>
      </inverse>
      <where
        label="wr1"
        expression="item_in_context(SELF.mapping_origin,SELF.mapped_representation.               context_of_items)">
      </where>
    </entity>

    <entity
      name="representation_relationship">
      <explicit
        name="name">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="description"
        optional="YES">
        <typename
          name="text"/>
      </explicit>
      <explicit
        name="rep_1">
        <typename
          name="representation"/>
      </explicit>
      <explicit
        name="rep_2">
        <typename
          name="representation"/>
      </explicit>
    </entity>

    <entity
      name="representation_relationship_with_transformation"
      supertypes="representation_relationship">
      <explicit
        name="transformation_operator">
        <typename
          name="transformation"/>
      </explicit>
      <where
        label="wr1"
        expression="(SELF\representation_relationship.rep_1.context_of_items :&lt;&gt;:                SELF\representation_relationship.rep_2.context_of_items)">
      </where>
    </entity>

    <entity
      name="seam_curve"
      supertypes="surface_curve">
      <where
        label="wr1"
        expression="(SIZEOF(SELF\surface_curve.associated_geometry) = 2)">
      </where>
      <where
        label="wr2"
        expression="(associated_surface(SELF\surface_curve.associated_geometry[1])                = associated_surface(SELF\surface_curve.associated_geometry[               2]))">
      </where>
      <where
        label="wr3"
        expression="('GEOMETRICALLY_BOUNDED_SURFACE_MIM.PCURVE' IN TYPEOF(SELF\               surface_curve.associated_geometry[1]))">
      </where>
      <where
        label="wr4"
        expression="('GEOMETRICALLY_BOUNDED_SURFACE_MIM.PCURVE' IN TYPEOF(SELF\               surface_curve.associated_geometry[2]))">
      </where>
    </entity>

    <entity
      name="shape_representation"
      supertypes="representation">
    </entity>

    <entity
      name="shape_representation_relationship"
      supertypes="representation_relationship">
      <where
        label="wr1"
        expression="('GEOMETRICALLY_BOUNDED_SURFACE_MIM.SHAPE_REPRESENTATION' IN (               TYPEOF(SELF\representation_relationship.rep_1) + TYPEOF(SELF               \representation_relationship.rep_2)))">
      </where>
    </entity>

    <entity
      name="spherical_surface"
      supertypes="elementary_surface">
      <explicit
        name="radius">
        <typename
          name="positive_length_measure"/>
      </explicit>
    </entity>

    <entity
      name="surface"
      super.expression="(ONEOF (elementary_surface,swept_surface,bounded_surface,        offset_surface,surface_replica))"
      supertypes="geometric_representation_item">
    </entity>

    <entity
      name="surface_curve"
      super.expression="(ONEOF (intersection_curve,seam_curve) ANDOR         bounded_surface_curve)"
      supertypes="curve">
      <explicit
        name="curve_3d">
        <typename
          name="curve"/>
      </explicit>
      <explicit
        name="associated_geometry">
        <aggregate
          type="LIST"
          lower="1"
          upper="2"/>
        <typename
          name="pcurve_or_surface"/>
      </explicit>
      <explicit
        name="master_representation">
        <typename
          name="preferred_surface_curve_representation"/>
      </explicit>
      <derived
        name="basis_surface"
        expression="get_basis_surface(SELF)">
        <aggregate
          type="SET"
          lower="1"
          upper="2"/>
        <typename
          name="surface"/>
      </derived>
      <where
        label="wr1"
        expression="(curve_3d.dim = 3)">
      </where>
      <where
        label="wr2"
        expression="(('GEOMETRICALLY_BOUNDED_SURFACE_MIM.PCURVE' IN TYPEOF(               associated_geometry[1])) OR (master_representation &lt;&gt;                pcurve_s1))">
      </where>
      <where
        label="wr3"
        expression="(('GEOMETRICALLY_BOUNDED_SURFACE_MIM.PCURVE' IN TYPEOF(               associated_geometry[2])) OR (master_representation &lt;&gt;                pcurve_s2))">
      </where>
      <where
        label="wr4"
        expression="(NOT ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.PCURVE' IN TYPEOF(               curve_3d)))">
      </where>
    </entity>

    <entity
      name="surface_of_linear_extrusion"
      supertypes="swept_surface">
      <explicit
        name="extrusion_axis">
        <typename
          name="vector"/>
      </explicit>
    </entity>

    <entity
      name="surface_of_revolution"
      supertypes="swept_surface">
      <explicit
        name="axis_position">
        <typename
          name="axis1_placement"/>
      </explicit>
      <derived
        name="axis_line"
        expression="dummy_gri || line(axis_position.location,                     dummy_gri || vector(axis_position.z,1))">
        <typename
          name="line "/>
      </derived>
    </entity>

    <entity
      name="surface_patch"
      supertypes="founded_item">
      <explicit
        name="parent_surface">
        <typename
          name="bounded_surface"/>
      </explicit>
      <explicit
        name="u_transition">
        <typename
          name="transition_code"/>
      </explicit>
      <explicit
        name="v_transition">
        <typename
          name="transition_code"/>
      </explicit>
      <explicit
        name="u_sense">
        <builtintype
          type="BOOLEAN"/>
      </explicit>
      <explicit
        name="v_sense">
        <builtintype
          type="BOOLEAN"/>
      </explicit>
      <inverse
        name="using_surfaces"
        entity="rectangular_composite_surface"
        attribute="segments">
        <inverse.aggregate
          type="BAG"
          lower="1"
          upper="?"/>
      </inverse>
      <where
        label="wr1"
        expression="(NOT ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.CURVE_BOUNDED_SURFACE'                IN TYPEOF(parent_surface)))">
      </where>
    </entity>

    <entity
      name="surface_replica"
      supertypes="surface">
      <explicit
        name="parent_surface">
        <typename
          name="surface"/>
      </explicit>
      <explicit
        name="transformation">
        <typename
          name="cartesian_transformation_operator_3d"/>
      </explicit>
      <where
        label="wr1"
        expression="acyclic_surface_replica(SELF,parent_surface)">
      </where>
    </entity>

    <entity
      name="swept_surface"
      super.expression="(ONEOF (surface_of_linear_extrusion,surface_of_revolution))"
      supertypes="surface">
      <explicit
        name="swept_curve">
        <typename
          name="curve"/>
      </explicit>
    </entity>

    <entity
      name="toroidal_surface"
      supertypes="elementary_surface">
      <explicit
        name="major_radius">
        <typename
          name="positive_length_measure"/>
      </explicit>
      <explicit
        name="minor_radius">
        <typename
          name="positive_length_measure"/>
      </explicit>
    </entity>

    <entity
      name="trimmed_curve"
      supertypes="bounded_curve">
      <explicit
        name="basis_curve">
        <typename
          name="curve"/>
      </explicit>
      <explicit
        name="trim_1">
        <aggregate
          type="SET"
          lower="1"
          upper="2"/>
        <typename
          name="trimming_select"/>
      </explicit>
      <explicit
        name="trim_2">
        <aggregate
          type="SET"
          lower="1"
          upper="2"/>
        <typename
          name="trimming_select"/>
      </explicit>
      <explicit
        name="sense_agreement">
        <builtintype
          type="BOOLEAN"/>
      </explicit>
      <explicit
        name="master_representation">
        <typename
          name="trimming_preference"/>
      </explicit>
      <where
        label="wr1"
        expression="((HIINDEX(trim_1) = 1) OR (TYPEOF(trim_1[1]) &lt;&gt; TYPEOF(trim_1[2])))">
      </where>
      <where
        label="wr2"
        expression="((HIINDEX(trim_2) = 1) OR (TYPEOF(trim_2[1]) &lt;&gt; TYPEOF(trim_2[2])))">
      </where>
    </entity>

    <entity
      name="uncertainty_measure_with_unit"
      supertypes="measure_with_unit">
      <explicit
        name="name">
        <typename
          name="label"/>
      </explicit>
      <explicit
        name="description"
        optional="YES">
        <typename
          name="text"/>
      </explicit>
      <where
        label="wr1"
        expression="valid_measure_value(SELF\measure_with_unit.value_component)">
      </where>
    </entity>

    <entity
      name="uniform_curve"
      supertypes="b_spline_curve">
    </entity>

    <entity
      name="uniform_surface"
      supertypes="b_spline_surface">
    </entity>

    <entity
      name="value_representation_item"
      supertypes="representation_item">
      <explicit
        name="value_component">
        <typename
          name="measure_value"/>
      </explicit>
      <where
        label="wr1"
        expression="(SIZEOF(QUERY ( rep &lt;* using_representations(SELF) | (NOT ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.GLOBAL_UNIT_ASSIGNED_CONTEXT'                IN TYPEOF(rep.context_of_items))) )) = 0)">
      </where>
    </entity>

    <entity
      name="vector"
      supertypes="geometric_representation_item">
      <explicit
        name="orientation">
        <typename
          name="direction"/>
      </explicit>
      <explicit
        name="magnitude">
        <typename
          name="length_measure"/>
      </explicit>
      <where
        label="wr1"
        expression="(magnitude &gt;= 0)">
      </where>
    </entity>

    <rule
      name="compatible_dimension"
      appliesto="cartesian_point direction representation_context geometric_representation_context">
      <algorithm>

  WHERE
    wr1: (SIZEOF(QUERY ( x &lt;* cartesian_point | (SIZEOF(QUERY ( y &lt;* 
             geometric_representation_context | (item_in_context(x,y) AND (
             HIINDEX(x.coordinates) &lt;&gt; y.coordinate_space_dimension)) )) &gt; 
             0) )) = 0);
    wr2: (SIZEOF(QUERY ( x &lt;* direction | (SIZEOF(QUERY ( y &lt;* 
             geometric_representation_context | (item_in_context(x,y) AND (
             HIINDEX(x.direction_ratios) &lt;&gt; y.coordinate_space_dimension)) )) 
             &gt; 0) )) = 0);

      </algorithm>

    </rule>

    <function
      name="acyclic_curve_replica">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="rep">
        <typename
          name="curve_replica"/>
      </parameter>
      <parameter
        name="parent">
        <typename
          name="curve"/>
      </parameter>
      <algorithm>
    IF NOT ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.CURVE_REPLICA' IN TYPEOF(
        parent)) THEN
      RETURN(TRUE);
    END_IF;
    IF parent :=: rep THEN
      RETURN(FALSE);
    ELSE
      RETURN(acyclic_curve_replica(rep,parent\curve_replica.parent_curve));
    END_IF;

      </algorithm>

    </function>

    <function
      name="acyclic_mapped_representation">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="parent_set">
        <aggregate
          type="SET"/>
        <typename
          name="representation"/>
      </parameter>
      <parameter
        name="children_set">
        <aggregate
          type="SET"/>
        <typename
          name="representation_item"/>
      </parameter>
      <algorithm>

    LOCAL
      x : SET OF representation_item;
      y : SET OF representation_item;
    END_LOCAL;
    x := QUERY ( z &lt;* children_set | (
        'GEOMETRICALLY_BOUNDED_SURFACE_MIM.MAPPED_ITEM' IN TYPEOF(z)) );
    IF SIZEOF(x) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX(x) BY 1;
        IF x[i]\mapped_item.mapping_source.mapped_representation IN 
            parent_set THEN
          RETURN(FALSE);
        END_IF;
        IF NOT acyclic_mapped_representation(parent_set + x[i]\mapped_item
            .mapping_source.mapped_representation,x[i]\mapped_item.
            mapping_source.mapped_representation.items) THEN
          RETURN(FALSE);
        END_IF;
      END_REPEAT;
    END_IF;
    x := children_set - x;
    IF SIZEOF(x) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX(x) BY 1;
        y := QUERY ( z &lt;* bag_to_set(USEDIN(x[i],'')) | (
            'GEOMETRICALLY_BOUNDED_SURFACE_MIM.REPRESENTATION_ITEM' IN 
            TYPEOF(z)) );
        IF NOT acyclic_mapped_representation(parent_set,y) THEN
          RETURN(FALSE);
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN(TRUE);

      </algorithm>

    </function>

    <function
      name="acyclic_surface_replica">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="rep">
        <typename
          name="surface_replica"/>
      </parameter>
      <parameter
        name="parent">
        <typename
          name="surface"/>
      </parameter>
      <algorithm>
    IF NOT ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.SURFACE_REPLICA' IN TYPEOF(
        parent)) THEN
      RETURN(TRUE);
    END_IF;
    IF parent :=: rep THEN
      RETURN(FALSE);
    ELSE
      RETURN(acyclic_surface_replica(rep,parent\surface_replica.
          parent_surface));
    END_IF;

      </algorithm>

    </function>

    <function
      name="associated_surface">
      <typename
        name="surface"/>
      <parameter
        name="arg">
        <typename
          name="pcurve_or_surface"/>
      </parameter>
      <algorithm>

    LOCAL
      surf : surface;
    END_LOCAL;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.PCURVE' IN TYPEOF(arg) THEN
      surf := arg.basis_surface;
    ELSE
      surf := arg;
    END_IF;
    RETURN(surf);

      </algorithm>

    </function>

    <function
      name="bag_to_set">
      <aggregate
        type="SET"/>
      <typename
        name="GENERICintype"/>
      <parameter
        name="the_bag">
        <aggregate
          type="BAG"/>
        <typename
          name="GENERICintype"/>
      </parameter>
      <algorithm>

    LOCAL
      the_set : SET OF GENERIC:intype := [];
    END_LOCAL;
    IF SIZEOF(the_bag) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX(the_bag) BY 1;
        the_set := the_set + the_bag[i];
      END_REPEAT;
    END_IF;
    RETURN(the_set);

      </algorithm>

    </function>

    <function
      name="base_axis">
      <aggregate
        type="LIST"
        lower="2"
        upper="3"/>
      <typename
        name="direction"/>
      <parameter
        name="dim">
        <builtintype
          type="INTEGER"/>
      </parameter>
      <parameter
        name="axis1">
        <typename
          name="direction"/>
      </parameter>
      <parameter
        name="axis2">
        <typename
          name="direction"/>
      </parameter>
      <parameter
        name="axis3">
        <typename
          name="direction"/>
      </parameter>
      <algorithm>

    LOCAL
      u      : LIST [2:3] OF direction;
      d1     : direction;
      d2     : direction;
      factor : REAL;
    END_LOCAL;
    IF dim = 3 THEN
      d1 := NVL(normalise(axis3),dummy_gri || direction([0,0,1]));
      d2 := first_proj_axis(d1,axis1);
      u := [d2,second_proj_axis(d1,d2,axis2),d1];
    ELSE
      IF EXISTS(axis1) THEN
        d1 := normalise(axis1);
        u := [d1,orthogonal_complement(d1)];
        IF EXISTS(axis2) THEN
          factor := dot_product(axis2,u[2]);
          IF factor &lt; 0 THEN
            u[2].direction_ratios[1] := -u[2].direction_ratios[1];
            u[2].direction_ratios[2] := -u[2].direction_ratios[2];
          END_IF;
        END_IF;
      ELSE
        IF EXISTS(axis2) THEN
          d1 := normalise(axis2);
          u := [orthogonal_complement(d1),d1];
          u[1].direction_ratios[1] := -u[1].direction_ratios[1];
          u[1].direction_ratios[2] := -u[1].direction_ratios[2];
        ELSE
          u := [dummy_gri || direction([1,0]),dummy_gri || direction([0,1])];
        END_IF;
      END_IF;
    END_IF;
    RETURN(u);

      </algorithm>

    </function>

    <function
      name="build_2axes">
      <aggregate
        type="LIST"
        lower="2"
        upper="2"/>
      <typename
        name="direction"/>
      <parameter
        name="ref_direction">
        <typename
          name="direction"/>
      </parameter>
      <algorithm>

    LOCAL
      d : direction := NVL(normalise(ref_direction),dummy_gri || 
           direction([1,0]));
    END_LOCAL;
    RETURN([d,orthogonal_complement(d)]);

      </algorithm>

    </function>

    <function
      name="build_axes">
      <aggregate
        type="LIST"
        lower="3"
        upper="3"/>
      <typename
        name="direction"/>
      <parameter
        name="axis">
        <typename
          name="direction"/>
      </parameter>
      <parameter
        name="ref_direction">
        <typename
          name="direction"/>
      </parameter>
      <algorithm>

    LOCAL
      d1 : direction;
      d2 : direction;
    END_LOCAL;
    d1 := NVL(normalise(axis),dummy_gri || direction([0,0,1]));
    d2 := first_proj_axis(d1,ref_direction);
    RETURN([d2,normalise(cross_product(d1,d2)).orientation,d1]);

      </algorithm>

    </function>

    <function
      name="constraints_composite_curve_on_surface">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="c">
        <typename
          name="composite_curve_on_surface"/>
      </parameter>
      <algorithm>

    LOCAL
      n_segments : INTEGER := SIZEOF(c.segments);
    END_LOCAL;
    REPEAT k := 1 TO n_segments BY 1;
      IF (NOT ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.PCURVE' IN TYPEOF(c\
          composite_curve.segments[k].parent_curve))) AND (NOT (
          'GEOMETRICALLY_BOUNDED_SURFACE_MIM.SURFACE_CURVE' IN TYPEOF(c\
          composite_curve.segments[k].parent_curve))) AND (NOT (
          'GEOMETRICALLY_BOUNDED_SURFACE_MIM.COMPOSITE_CURVE_ON_SURFACE' IN
           TYPEOF(c\composite_curve.segments[k].parent_curve))) THEN
        RETURN(FALSE);
      END_IF;
    END_REPEAT;
    RETURN(TRUE);

      </algorithm>

    </function>

    <function
      name="constraints_param_b_spline">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="degree">
        <builtintype
          type="INTEGER"/>
      </parameter>
      <parameter
        name="up_knots">
        <builtintype
          type="INTEGER"/>
      </parameter>
      <parameter
        name="up_cp">
        <builtintype
          type="INTEGER"/>
      </parameter>
      <parameter
        name="knot_mult">
        <aggregate
          type="LIST"/>
        <typename
          name="INTEGER"/>
      </parameter>
      <parameter
        name="knots">
        <aggregate
          type="LIST"/>
        <typename
          name="parameter_value"/>
      </parameter>
      <algorithm>

    LOCAL
      k      : INTEGER;
      sum    : INTEGER;
      result : BOOLEAN := TRUE;
    END_LOCAL;
    sum := knot_mult[1];
    REPEAT i := 2 TO up_knots BY 1;
      sum := sum + knot_mult[i];
    END_REPEAT;
    IF (degree &lt; 1) OR (up_knots &lt; 2) OR (up_cp &lt; degree) OR (sum &lt;&gt; (
        degree + up_cp + 2)) THEN
      result := FALSE;
      RETURN(result);
    END_IF;
    k := knot_mult[1];
    IF (k &lt; 1) OR (k &gt; (degree + 1)) THEN
      result := FALSE;
      RETURN(result);
    END_IF;
    REPEAT i := 2 TO up_knots BY 1;
      IF (knot_mult[i] &lt; 1) OR (knots[i] &lt;= knots[i - 1]) THEN
        result := FALSE;
        RETURN(result);
      END_IF;
      k := knot_mult[i];
      IF (i &lt; up_knots) AND (k &gt; degree) THEN
        result := FALSE;
        RETURN(result);
      END_IF;
      IF (i = up_knots) AND (k &gt; (degree + 1)) THEN
        result := FALSE;
        RETURN(result);
      END_IF;
    END_REPEAT;
    RETURN(result);

      </algorithm>

    </function>

    <function
      name="constraints_rectangular_composite_surface">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="s">
        <typename
          name="rectangular_composite_surface"/>
      </parameter>
      <algorithm>
    REPEAT i := 1 TO s.n_u BY 1;
      REPEAT j := 1 TO s.n_v BY 1;
        IF NOT (('GEOMETRICALLY_BOUNDED_SURFACE_MIM.B_SPLINE_SURFACE' IN 
            TYPEOF(s.segments[i][j].parent_surface)) OR ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.RECTANGULAR_TRIMMED_SURFACE' 
            IN TYPEOF(s.segments[i][j].parent_surface))) THEN
          RETURN(FALSE);
        END_IF;
      END_REPEAT;
    END_REPEAT;
    REPEAT i := 1 TO s.n_u - 1 BY 1;
      REPEAT j := 1 TO s.n_v BY 1;
        IF s.segments[i][j].u_transition = discontinuous THEN
          RETURN(FALSE);
        END_IF;
      END_REPEAT;
    END_REPEAT;
    REPEAT i := 1 TO s.n_u BY 1;
      REPEAT j := 1 TO s.n_v - 1 BY 1;
        IF s.segments[i][j].v_transition = discontinuous THEN
          RETURN(FALSE);
        END_IF;
      END_REPEAT;
    END_REPEAT;
    RETURN(TRUE);

      </algorithm>

    </function>

    <function
      name="cross_product">
      <typename
        name="vector"/>
      <parameter
        name="arg1">
        <typename
          name="direction"/>
      </parameter>
      <parameter
        name="arg2">
        <typename
          name="direction"/>
      </parameter>
      <algorithm>

    LOCAL
      v2     : LIST [3:3] OF REAL;
      v1     : LIST [3:3] OF REAL;
      mag    : REAL;
      res    : direction;
      result : vector;
    END_LOCAL;
    IF (NOT EXISTS(arg1)) OR (arg1.dim = 2) OR (NOT EXISTS(arg2)) OR (arg2
        .dim = 2) THEN
      RETURN(?);
    ELSE
      BEGIN
        v1 := normalise(arg1).direction_ratios;
        v2 := normalise(arg2).direction_ratios;
        res := dummy_gri || direction([(v1[2] * v2[3]) - (v1[3] * v2[2]),(
            v1[3] * v2[1]) - (v1[1] * v2[3]),(v1[1] * v2[2]) - (v1[2] * v2[
            1])]);
        mag := 0;
        REPEAT i := 1 TO 3 BY 1;
          mag := mag + (res.direction_ratios[i] * res.direction_ratios[i]);
        END_REPEAT;
        IF mag &gt; 0 THEN
          result := dummy_gri || vector(res,SQRT(mag));
        ELSE
          result := dummy_gri || vector(arg1,0);
        END_IF;
        RETURN(result);
      END;
    END_IF;

      </algorithm>

    </function>

    <function
      name="curve_weights_positive">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="b">
        <typename
          name="rational_b_spline_curve"/>
      </parameter>
      <algorithm>

    LOCAL
      result : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT i := 0 TO b.upper_index_on_control_points BY 1;
      IF b.weights[i] &lt;= 0 THEN
        result := FALSE;
        RETURN(result);
      END_IF;
    END_REPEAT;
    RETURN(result);

      </algorithm>

    </function>

    <function
      name="derive_dimensional_exponents">
      <typename
        name="dimensional_exponents"/>
      <parameter
        name="x">
        <typename
          name="unit"/>
      </parameter>
      <algorithm>

    LOCAL
      result : dimensional_exponents := dimensional_exponents(0,0,0,0,0,0,
                0);
    END_LOCAL;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.DERIVED_UNIT' IN TYPEOF(x) THEN
      REPEAT i := LOINDEX(x.elements) TO HIINDEX(x.elements) BY 1;
        result.length_exponent := result.length_exponent + (x.elements[i].
            exponent * x.elements[i].unit.dimensions.length_exponent);
        result.mass_exponent := result.mass_exponent + (x.elements[i].
            exponent * x.elements[i].unit.dimensions.mass_exponent);
        result.time_exponent := result.time_exponent + (x.elements[i].
            exponent * x.elements[i].unit.dimensions.time_exponent);
        result.electric_current_exponent := result.
            electric_current_exponent + (x.elements[i].exponent * x.
            elements[i].unit.dimensions.electric_current_exponent);
        result.thermodynamic_temperature_exponent := result.
            thermodynamic_temperature_exponent + (x.elements[i].exponent * 
            x.elements[i].unit.dimensions.
            thermodynamic_temperature_exponent);
        result.amount_of_substance_exponent := result.
            amount_of_substance_exponent + (x.elements[i].exponent * x.
            elements[i].unit.dimensions.amount_of_substance_exponent);
        result.luminous_intensity_exponent := result.
            luminous_intensity_exponent + (x.elements[i].exponent * x.
            elements[i].unit.dimensions.luminous_intensity_exponent);
      END_REPEAT;
    ELSE
      result := x.dimensions;
    END_IF;
    RETURN(result);

      </algorithm>

    </function>

    <function
      name="dimension_of">
      <typename
        name="dimension_count"/>
      <parameter
        name="item">
        <typename
          name="geometric_representation_item"/>
      </parameter>
      <algorithm>

    LOCAL
      x : SET OF representation;
      y : representation_context;
    END_LOCAL;
    x := using_representations(item);
    y := x[1].context_of_items;
    RETURN(y\geometric_representation_context.coordinate_space_dimension);

      </algorithm>

    </function>

    <function
      name="dot_product">
      <builtintype
        type="REAL"/>
      <parameter
        name="arg1">
        <typename
          name="direction"/>
      </parameter>
      <parameter
        name="arg2">
        <typename
          name="direction"/>
      </parameter>
      <algorithm>

    LOCAL
      ndim   : INTEGER;
      scalar : REAL;
      vec1   : direction;
      vec2   : direction;
    END_LOCAL;
    IF (NOT EXISTS(arg1)) OR (NOT EXISTS(arg2)) THEN
      scalar := ?;
    ELSE
      IF arg1.dim &lt;&gt; arg2.dim THEN
        scalar := ?;
      ELSE
        BEGIN
          vec1 := normalise(arg1);
          vec2 := normalise(arg2);
          ndim := arg1.dim;
          scalar := 0;
          REPEAT i := 1 TO ndim BY 1;
            scalar := scalar + (vec1.direction_ratios[i] * vec2.
                direction_ratios[i]);
          END_REPEAT;
        END;
      END_IF;
    END_IF;
    RETURN(scalar);

      </algorithm>

    </function>

    <function
      name="first_proj_axis">
      <typename
        name="direction"/>
      <parameter
        name="z_axis">
        <typename
          name="direction"/>
      </parameter>
      <parameter
        name="arg">
        <typename
          name="direction"/>
      </parameter>
      <algorithm>

    LOCAL
      x_vec  : vector;
      v      : direction;
      z      : direction;
      x_axis : direction;
    END_LOCAL;
    IF NOT EXISTS(z_axis) THEN
      RETURN(?);
    ELSE
      z := normalise(z_axis);
      IF NOT EXISTS(arg) THEN
        IF z.direction_ratios &lt;&gt; [1,0,0] THEN
          v := dummy_gri || direction([1,0,0]);
        ELSE
          v := dummy_gri || direction([0,1,0]);
        END_IF;
      ELSE
        IF arg.dim &lt;&gt; 3 THEN
          RETURN(?);
        END_IF;
        IF cross_product(arg,z).magnitude = 0 THEN
          RETURN(?);
        ELSE
          v := normalise(arg);
        END_IF;
      END_IF;
      x_vec := scalar_times_vector(dot_product(v,z),z);
      x_axis := vector_difference(v,x_vec).orientation;
      x_axis := normalise(x_axis);
    END_IF;
    RETURN(x_axis);

      </algorithm>

    </function>

    <function
      name="gbsf_check_curve">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="cv">
        <typename
          name="curve"/>
      </parameter>
      <algorithm>
    IF SIZEOF(['GEOMETRICALLY_BOUNDED_SURFACE_MIM.BOUNDED_CURVE',
        'GEOMETRICALLY_BOUNDED_SURFACE_MIM.CONIC',
        'GEOMETRICALLY_BOUNDED_SURFACE_MIM.CURVE_REPLICA',
        'GEOMETRICALLY_BOUNDED_SURFACE_MIM.LINE',
        'GEOMETRICALLY_BOUNDED_SURFACE_MIM.OFFSET_CURVE_3D'] * TYPEOF(cv)) 
        &gt; 1 THEN
      RETURN(FALSE);
    ELSE
      IF SIZEOF(['GEOMETRICALLY_BOUNDED_SURFACE_MIM.CIRCLE',
          'GEOMETRICALLY_BOUNDED_SURFACE_MIM.ELLIPSE'] * TYPEOF(cv)) = 1
           THEN
        RETURN(TRUE);
      ELSE
        IF (('GEOMETRICALLY_BOUNDED_SURFACE_MIM.B_SPLINE_CURVE' IN TYPEOF(
            cv)) AND (cv\b_spline_curve.self_intersect = FALSE)) OR (cv\
            b_spline_curve.self_intersect = UNKNOWN) THEN
          RETURN(TRUE);
        ELSE
          IF (('GEOMETRICALLY_BOUNDED_SURFACE_MIM.COMPOSITE_CURVE' IN 
              TYPEOF(cv)) AND (cv\composite_curve.self_intersect = FALSE)) 
              OR (cv\composite_curve.self_intersect = UNKNOWN) THEN
            RETURN(SIZEOF(QUERY ( seg &lt;* cv\composite_curve.segments | (
                NOT gbsf_check_curve(seg.parent_curve)) )) = 0);
          ELSE
            IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.CURVE_REPLICA' IN 
                TYPEOF(cv) THEN
              RETURN(gbsf_check_curve(cv\curve_replica.parent_curve));
            ELSE
              IF ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.OFFSET_CURVE_3D' IN 
                  TYPEOF(cv)) AND ((cv\offset_curve_3d.self_intersect = 
                  FALSE) OR (cv\offset_curve_3d.self_intersect = UNKNOWN)) 
                  AND (NOT ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.POLYLINE' IN
                   TYPEOF(cv.basis_curve))) THEN
                RETURN(gbsf_check_curve(cv\offset_curve_3d.basis_curve));
              ELSE
                IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.PCURVE' IN TYPEOF(cv)
                     THEN
                  RETURN(gbsf_check_curve(cv\pcurve.reference_to_curve\
                      representation.items[1]) AND gbsf_check_surface(cv\
                      pcurve.basis_surface));
                ELSE
                  IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.POLYLINE' IN 
                      TYPEOF(cv) THEN
                    IF SIZEOF(cv\polyline.points) &gt;= 3 THEN
                      RETURN(TRUE);
                    END_IF;
                  ELSE
                    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.SURFACE_CURVE' 
                        IN TYPEOF(cv) THEN
                      IF gbsf_check_curve(cv\surface_curve.curve_3d) THEN
                        REPEAT i := 1 TO SIZEOF(cv\surface_curve.
                            associated_geometry) BY 1;
                          IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.SURFACE' 
                              IN TYPEOF(cv\surface_curve.
                              associated_geometry[i]) THEN
                            IF NOT gbsf_check_surface(cv\surface_curve.
                                associated_geometry[i]) THEN
                              RETURN(FALSE);
                            END_IF;
                          ELSE
                            IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.PCURVE' 
                                IN TYPEOF(cv\surface_curve.
                                associated_geometry[i]) THEN
                              IF NOT gbsf_check_curve(cv\surface_curve.
                                  associated_geometry[i]) THEN
                                RETURN(FALSE);
                              END_IF;
                            END_IF;
                          END_IF;
                        END_REPEAT;
                        RETURN(TRUE);
                      END_IF;
                    ELSE
                      IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.TRIMMED_CURVE' 
                          IN TYPEOF(cv) THEN
                        IF SIZEOF([
                            'GEOMETRICALLY_BOUNDED_SURFACE_MIM.LINE',
                            'GEOMETRICALLY_BOUNDED_SURFACE_MIM.PARABOLA',
                            'GEOMETRICALLY_BOUNDED_SURFACE_MIM.HYPERBOLA'] 
                            * TYPEOF(cv\trimmed_curve.basis_curve)) = 1
                             THEN
                          RETURN(TRUE);
                        ELSE
                          RETURN(gbsf_check_curve(cv\trimmed_curve.
                              basis_curve));
                        END_IF;
                      END_IF;
                    END_IF;
                  END_IF;
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN(FALSE);

      </algorithm>

    </function>

    <function
      name="gbsf_check_point">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="pnt">
        <typename
          name="point"/>
      </parameter>
      <algorithm>
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.CARTESIAN_POINT' IN TYPEOF(pnt)
         THEN
      RETURN(TRUE);
    ELSE
      IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.POINT_ON_CURVE' IN TYPEOF(pnt)
           THEN
        RETURN(gbsf_check_curve(pnt\point_on_curve.basis_curve));
      ELSE
        IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.POINT_ON_SURFACE' IN TYPEOF(
            pnt) THEN
          RETURN(gbsf_check_surface(pnt\point_on_surface.basis_surface));
        ELSE
          IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.DEGENERATE_PCURVE' IN 
              TYPEOF(pnt) THEN
            RETURN(gbsf_check_curve(pnt\degenerate_pcurve.
                reference_to_curve\representation.items[1]) AND 
                gbsf_check_surface(pnt\degenerate_pcurve.basis_surface));
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN(FALSE);

      </algorithm>

    </function>

    <function
      name="gbsf_check_surface">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="sf">
        <typename
          name="surface"/>
      </parameter>
      <algorithm>
    IF (('GEOMETRICALLY_BOUNDED_SURFACE_MIM.B_SPLINE_SURFACE' IN TYPEOF(sf)) 
        AND (sf\b_spline_surface.self_intersect = FALSE)) OR (sf\
        b_spline_surface.self_intersect = UNKNOWN) THEN
      RETURN(TRUE);
    ELSE
      IF SIZEOF(['GEOMETRICALLY_BOUNDED_SURFACE_MIM.SPHERICAL_SURFACE',
          'GEOMETRICALLY_BOUNDED_SURFACE_MIM.TOROIDAL_SURFACE'] * TYPEOF(sf)) 
          = 1 THEN
        RETURN(TRUE);
      ELSE
        IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.CURVE_BOUNDED_SURFACE' IN 
            TYPEOF(sf) THEN
          IF SIZEOF(['GEOMETRICALLY_BOUNDED_SURFACE_MIM.CONICAL_SURFACE',
              'GEOMETRICALLY_BOUNDED_SURFACE_MIM.CYLINDRICAL_SURFACE',
              'GEOMETRICALLY_BOUNDED_SURFACE_MIM.PLANE'] * TYPEOF(sf\
              curve_bounded_surface.basis_surface)) = 1 THEN
            RETURN(SIZEOF(QUERY ( bcurve &lt;* sf\curve_bounded_surface.
                boundaries | (NOT gbsf_check_curve(bcurve)) )) = 0);
          ELSE
            IF gbsf_check_surface(sf\curve_bounded_surface.basis_surface)
                 THEN
              RETURN(SIZEOF(QUERY ( bcurve &lt;* sf\curve_bounded_surface.
                  boundaries | (NOT gbsf_check_curve(bcurve)) )) = 0);
            END_IF;
          END_IF;
        ELSE
          IF (('GEOMETRICALLY_BOUNDED_SURFACE_MIM.OFFSET_SURFACE' IN 
              TYPEOF(sf)) AND (sf\offset_surface.self_intersect = FALSE)) 
              OR (sf\offset_surface.self_intersect = UNKNOWN) THEN
            RETURN(gbsf_check_surface(sf\offset_surface.basis_surface));
          ELSE
            IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.RECTANGULAR_COMPOSITE_SURFACE' 
                IN TYPEOF(sf) THEN
              REPEAT i := 1 TO SIZEOF(sf\rectangular_composite_surface.
                  segments) BY 1;
                REPEAT j := 1 TO SIZEOF(sf\rectangular_composite_surface.
                    segments[i]) BY 1;
                  IF NOT gbsf_check_surface(sf\
                      rectangular_composite_surface.segments[i][j].
                      parent_surface) THEN
                    RETURN(FALSE);
                  END_IF;
                END_REPEAT;
              END_REPEAT;
              RETURN(TRUE);
            ELSE
              IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.RECTANGULAR_TRIMMED_SURFACE' 
                  IN TYPEOF(sf) THEN
                IF SIZEOF([
                    'GEOMETRICALLY_BOUNDED_SURFACE_MIM.CONICAL_SURFACE','GEOMETRICALLY_BOUNDED_SURFACE_MIM.CYLINDRICAL_SURFACE',
                    'GEOMETRICALLY_BOUNDED_SURFACE_MIM.PLANE'] * TYPEOF(sf\
                    rectangular_trimmed_surface.basis_surface)) = 1 THEN
                  RETURN(TRUE);
                ELSE
                  RETURN(gbsf_check_surface(sf\rectangular_trimmed_surface
                      .basis_surface));
                END_IF;
              ELSE
                IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.SURFACE_REPLICA' IN 
                    TYPEOF(sf) THEN
                  RETURN(gbsf_check_surface(sf\surface_replica.
                      parent_surface));
                ELSE
                  IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.SWEPT_SURFACE' IN 
                      TYPEOF(sf) THEN
                    RETURN(gbsf_check_curve(sf\swept_surface.swept_curve));
                  END_IF;
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN(FALSE);

      </algorithm>

    </function>

    <function
      name="get_basis_surface">
      <aggregate
        type="SET"
        lower="0"
        upper="2"/>
      <typename
        name="surface"/>
      <parameter
        name="c">
        <typename
          name="curve_on_surface"/>
      </parameter>
      <algorithm>

    LOCAL
      surfs : SET [0:2] OF surface;
      n     : INTEGER;
    END_LOCAL;
    surfs := [];
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.PCURVE' IN TYPEOF(c) THEN
      surfs := [c\pcurve.basis_surface];
    ELSE
      IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.SURFACE_CURVE' IN TYPEOF(c)
           THEN
        n := SIZEOF(c\surface_curve.associated_geometry);
        REPEAT i := 1 TO n BY 1;
          surfs := surfs + associated_surface(c\surface_curve.
              associated_geometry[i]);
        END_REPEAT;
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.COMPOSITE_CURVE_ON_SURFACE' IN 
        TYPEOF(c) THEN
      n := SIZEOF(c\composite_curve.segments);
      surfs := get_basis_surface(c\composite_curve.segments[1].
          parent_curve);
      IF n &gt; 1 THEN
        REPEAT i := 2 TO n BY 1;
          surfs := surfs * get_basis_surface(c\composite_curve.segments[i]
              .parent_curve);
        END_REPEAT;
      END_IF;
    END_IF;
    RETURN(surfs);

      </algorithm>

    </function>

    <function
      name="get_description_value">
      <typename
        name="text"/>
      <parameter
        name="obj">
        <typename
          name="description_attribute_select"/>
      </parameter>
      <algorithm>

    LOCAL
      description_bag : BAG OF description_attribute := USEDIN(obj,
                         'GEOMETRICALLY_BOUNDED_SURFACE_MIM.' + 
                         'DESCRIPTION_ATTRIBUTE.' + 'DESCRIBED_ITEM');
    END_LOCAL;
    IF SIZEOF(description_bag) = 1 THEN
      RETURN(description_bag[1].attribute_value);
    ELSE
      RETURN(?);
    END_IF;

      </algorithm>

    </function>

    <function
      name="get_id_value">
      <typename
        name="identifier"/>
      <parameter
        name="obj">
        <typename
          name="id_attribute_select"/>
      </parameter>
      <algorithm>

    LOCAL
      id_bag : BAG OF id_attribute := USEDIN(obj,
                'GEOMETRICALLY_BOUNDED_SURFACE_MIM.' + 'ID_ATTRIBUTE.' + 
                'IDENTIFIED_ITEM');
    END_LOCAL;
    IF SIZEOF(id_bag) = 1 THEN
      RETURN(id_bag[1].attribute_value);
    ELSE
      RETURN(?);
    END_IF;

      </algorithm>

    </function>

    <function
      name="get_name_value">
      <typename
        name="label"/>
      <parameter
        name="obj">
        <typename
          name="name_attribute_select"/>
      </parameter>
      <algorithm>

    LOCAL
      name_bag : BAG OF name_attribute := USEDIN(obj,
                  'GEOMETRICALLY_BOUNDED_SURFACE_MIM.' + 'NAME_ATTRIBUTE.' 
                  + 'NAMED_ITEM');
    END_LOCAL;
    IF SIZEOF(name_bag) = 1 THEN
      RETURN(name_bag[1].attribute_value);
    ELSE
      RETURN(?);
    END_IF;

      </algorithm>

    </function>

    <function
      name="item_in_context">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="item">
        <typename
          name="representation_item"/>
      </parameter>
      <parameter
        name="cntxt">
        <typename
          name="representation_context"/>
      </parameter>
      <algorithm>

    LOCAL
      y : BAG OF representation_item;
    END_LOCAL;
    IF SIZEOF(USEDIN(item,
        'GEOMETRICALLY_BOUNDED_SURFACE_MIM.REPRESENTATION.ITEMS') * cntxt.
        representations_in_context) &gt; 0 THEN
      RETURN(TRUE);
    ELSE
      y := QUERY ( z &lt;* USEDIN(item,'') | (
          'GEOMETRICALLY_BOUNDED_SURFACE_MIM.REPRESENTATION_ITEM' IN 
          TYPEOF(z)) );
      IF SIZEOF(y) &gt; 0 THEN
        REPEAT i := 1 TO HIINDEX(y) BY 1;
          IF item_in_context(y[i],cntxt) THEN
            RETURN(TRUE);
          END_IF;
        END_REPEAT;
      END_IF;
    END_IF;
    RETURN(FALSE);

      </algorithm>

    </function>

    <function
      name="list_to_array">
      <aggregate
        type="ARRAY"/>
      <typename
        name="GENERICt"/>
      <parameter
        name="lis">
        <aggregate
          type="LIST"
          lower="0"
          upper="?"/>
        <typename
          name="GENERICt"/>
      </parameter>
      <parameter
        name="low">
        <builtintype
          type="INTEGER"/>
      </parameter>
      <parameter
        name="u">
        <builtintype
          type="INTEGER"/>
      </parameter>
      <algorithm>

    LOCAL
      n   : INTEGER;
      res : ARRAY [low:u] OF GENERIC:t;
    END_LOCAL;
    n := SIZEOF(lis);
    IF n &lt;&gt; ((u - low) + 1) THEN
      RETURN(?);
    ELSE
      res := [lis[1],n];
      REPEAT i := 2 TO n BY 1;
        res[(low + i) - 1] := lis[i];
      END_REPEAT;
      RETURN(res);
    END_IF;

      </algorithm>

    </function>

    <function
      name="make_array_of_array">
      <aggregate
        type="ARRAY"/>
      <typename
        name="ARRAY"/>
      <parameter
        name="lis">
        <aggregate
          type="LIST"
          lower="1"
          upper="?"/>
        <typename
          name="LIST"/>
      </parameter>
      <parameter
        name="low1">
        <builtintype
          type="INTEGER"/>
      </parameter>
      <parameter
        name="u1">
        <builtintype
          type="INTEGER"/>
      </parameter>
      <parameter
        name="low2">
        <builtintype
          type="INTEGER"/>
      </parameter>
      <parameter
        name="u2">
        <builtintype
          type="INTEGER"/>
      </parameter>
      <algorithm>

    LOCAL
      res : ARRAY [low1:u1] OF ARRAY [low2:u2] OF GENERIC:t;
    END_LOCAL;
    IF ((u1 - low1) + 1) &lt;&gt; SIZEOF(lis) THEN
      RETURN(?);
    END_IF;
    IF ((u2 - low2) + 1) &lt;&gt; SIZEOF(lis[1]) THEN
      RETURN(?);
    END_IF;
    res := [list_to_array(lis[1],low2,u2),(u1 - low1) + 1];
    REPEAT i := 2 TO HIINDEX(lis) BY 1;
      IF ((u2 - low2) + 1) &lt;&gt; SIZEOF(lis[i]) THEN
        RETURN(?);
      END_IF;
      res[(low1 + i) - 1] := list_to_array(lis[i],low2,u2);
    END_REPEAT;
    RETURN(res);

      </algorithm>

    </function>

    <function
      name="normalise">
      <typename
        name="vector_or_direction"/>
      <parameter
        name="arg">
        <typename
          name="vector_or_direction"/>
      </parameter>
      <algorithm>

    LOCAL
      ndim   : INTEGER;
      v      : direction;
      vec    : vector;
      mag    : REAL;
      result : vector_or_direction;
    END_LOCAL;
    IF NOT EXISTS(arg) THEN
      result := ?;
    ELSE
      ndim := arg.dim;
      IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.VECTOR' IN TYPEOF(arg) THEN
        BEGIN
          v := dummy_gri || direction(arg.orientation.direction_ratios);
          IF arg.magnitude = 0 THEN
            RETURN(?);
          ELSE
            vec := dummy_gri || vector(v,1);
          END_IF;
        END;
      ELSE
        v := dummy_gri || direction(arg.direction_ratios);
      END_IF;
      mag := 0;
      REPEAT i := 1 TO ndim BY 1;
        mag := mag + (v.direction_ratios[i] * v.direction_ratios[i]);
      END_REPEAT;
      IF mag &gt; 0 THEN
        mag := SQRT(mag);
        REPEAT i := 1 TO ndim BY 1;
          v.direction_ratios[i] := v.direction_ratios[i] / mag;
        END_REPEAT;
        IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.VECTOR' IN TYPEOF(arg) THEN
          vec.orientation := v;
          result := vec;
        ELSE
          result := v;
        END_IF;
      ELSE
        RETURN(?);
      END_IF;
    END_IF;
    RETURN(result);

      </algorithm>

    </function>

    <function
      name="orthogonal_complement">
      <typename
        name="direction"/>
      <parameter
        name="vec">
        <typename
          name="direction"/>
      </parameter>
      <algorithm>

    LOCAL
      result : direction;
    END_LOCAL;
    IF (vec.dim &lt;&gt; 2) OR (NOT EXISTS(vec)) THEN
      RETURN(?);
    ELSE
      result := dummy_gri || direction([-vec.direction_ratios[2],vec.
          direction_ratios[1]]);
      RETURN(result);
    END_IF;

      </algorithm>

    </function>

    <function
      name="scalar_times_vector">
      <typename
        name="vector"/>
      <parameter
        name="scalar">
        <builtintype
          type="REAL"/>
      </parameter>
      <parameter
        name="vec">
        <typename
          name="vector_or_direction"/>
      </parameter>
      <algorithm>

    LOCAL
      v      : direction;
      mag    : REAL;
      result : vector;
    END_LOCAL;
    IF (NOT EXISTS(scalar)) OR (NOT EXISTS(vec)) THEN
      RETURN(?);
    ELSE
      IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.VECTOR' IN TYPEOF(vec) THEN
        v := dummy_gri || direction(vec.orientation.direction_ratios);
        mag := scalar * vec.magnitude;
      ELSE
        v := dummy_gri || direction(vec.direction_ratios);
        mag := scalar;
      END_IF;
      IF mag &lt; 0 THEN
        REPEAT i := 1 TO SIZEOF(v.direction_ratios) BY 1;
          v.direction_ratios[i] := -v.direction_ratios[i];
        END_REPEAT;
        mag := -mag;
      END_IF;
      result := dummy_gri || vector(normalise(v),mag);
    END_IF;
    RETURN(result);

      </algorithm>

    </function>

    <function
      name="second_proj_axis">
      <typename
        name="direction"/>
      <parameter
        name="z_axis">
        <typename
          name="direction"/>
      </parameter>
      <parameter
        name="x_axis">
        <typename
          name="direction"/>
      </parameter>
      <parameter
        name="arg">
        <typename
          name="direction"/>
      </parameter>
      <algorithm>

    LOCAL
      temp   : vector;
      v      : direction;
      y_axis : vector;
    END_LOCAL;
    IF NOT EXISTS(arg) THEN
      v := dummy_gri || direction([0,1,0]);
    ELSE
      v := arg;
    END_IF;
    temp := scalar_times_vector(dot_product(v,z_axis),z_axis);
    y_axis := vector_difference(v,temp);
    temp := scalar_times_vector(dot_product(v,x_axis),x_axis);
    y_axis := vector_difference(y_axis,temp);
    y_axis := normalise(y_axis);
    RETURN(y_axis.orientation);

      </algorithm>

    </function>

    <function
      name="surface_weights_positive">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="b">
        <typename
          name="rational_b_spline_surface"/>
      </parameter>
      <algorithm>

    LOCAL
      result : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT i := 0 TO b.u_upper BY 1;
      REPEAT j := 0 TO b.v_upper BY 1;
        IF b.weights[i][j] &lt;= 0 THEN
          result := FALSE;
          RETURN(result);
        END_IF;
      END_REPEAT;
    END_REPEAT;
    RETURN(result);

      </algorithm>

    </function>

    <function
      name="using_items">
      <aggregate
        type="SET"/>
      <typename
        name="founded_item_select"/>
      <parameter
        name="item">
        <typename
          name="founded_item_select"/>
      </parameter>
      <parameter
        name="checked_items">
        <aggregate
          type="SET"/>
        <typename
          name="founded_item_select"/>
      </parameter>
      <algorithm>

    LOCAL
      next_items      : SET OF founded_item_select;
      new_check_items : SET OF founded_item_select;
      result_items    : SET OF founded_item_select;
    END_LOCAL;
    result_items := [];
    new_check_items := checked_items + item;
    next_items := QUERY ( z &lt;* bag_to_set(USEDIN(item,'')) | ((
        'GEOMETRICALLY_BOUNDED_SURFACE_MIM.REPRESENTATION_ITEM' IN TYPEOF(z)) 
        OR ('GEOMETRICALLY_BOUNDED_SURFACE_MIM.FOUNDED_ITEM' IN TYPEOF(z))) );
    IF SIZEOF(next_items) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX(next_items) BY 1;
        IF NOT (next_items[i] IN new_check_items) THEN
          result_items := result_items + next_items[i] + using_items(
              next_items[i],new_check_items);
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN(result_items);

      </algorithm>

    </function>

    <function
      name="using_representations">
      <aggregate
        type="SET"/>
      <typename
        name="representation"/>
      <parameter
        name="item">
        <typename
          name="founded_item_select"/>
      </parameter>
      <algorithm>

    LOCAL
      results            : SET OF representation;
      intermediate_items : SET OF founded_item_select;
      result_bag         : BAG OF representation;
    END_LOCAL;
    results := [];
    result_bag := USEDIN(item,
        'GEOMETRICALLY_BOUNDED_SURFACE_MIM.REPRESENTATION.ITEMS');
    IF SIZEOF(result_bag) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX(result_bag) BY 1;
        results := results + result_bag[i];
      END_REPEAT;
    END_IF;
    intermediate_items := using_items(item,[]);
    IF SIZEOF(intermediate_items) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX(intermediate_items) BY 1;
        result_bag := USEDIN(intermediate_items[i],
            'GEOMETRICALLY_BOUNDED_SURFACE_MIM.REPRESENTATION.ITEMS');
        IF SIZEOF(result_bag) &gt; 0 THEN
          REPEAT j := 1 TO HIINDEX(result_bag) BY 1;
            results := results + result_bag[j];
          END_REPEAT;
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN(results);

      </algorithm>

    </function>

    <function
      name="valid_measure_value">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="m">
        <typename
          name="measure_value"/>
      </parameter>
      <algorithm>
    IF 'REAL' IN TYPEOF(m) THEN
      RETURN(m &gt; 0);
    ELSE
      IF 'INTEGER' IN TYPEOF(m) THEN
        RETURN(m &gt; 0);
      ELSE
        RETURN(TRUE);
      END_IF;
    END_IF;

      </algorithm>

    </function>

    <function
      name="valid_units">
      <builtintype
        type="BOOLEAN"/>
      <parameter
        name="m">
        <typename
          name="measure_with_unit"/>
      </parameter>
      <algorithm>
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.LENGTH_MEASURE' IN TYPEOF(m.
        value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(1,0,0,0,0,0,0) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.MASS_MEASURE' IN TYPEOF(m.
        value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(0,1,0,0,0,0,0) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.TIME_MEASURE' IN TYPEOF(m.
        value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(0,0,1,0,0,0,0) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.ELECTRIC_CURRENT_MEASURE' IN 
        TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(0,0,0,1,0,0,0) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.THERMODYNAMIC_TEMPERATURE_MEASURE' 
        IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(0,0,0,0,1,0,0) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.AMOUNT_OF_SUBSTANCE_MEASURE' IN 
        TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(0,0,0,0,0,1,0) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.LUMINOUS_INTENSITY_MEASURE' IN 
        TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(0,0,0,0,0,0,1) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.PLANE_ANGLE_MEASURE' IN TYPEOF(m
        .value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(0,0,0,0,0,0,0) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.SOLID_ANGLE_MEASURE' IN TYPEOF(m
        .value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(0,0,0,0,0,0,0) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.AREA_MEASURE' IN TYPEOF(m.
        value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(2,0,0,0,0,0,0) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.VOLUME_MEASURE' IN TYPEOF(m.
        value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(3,0,0,0,0,0,0) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.RATIO_MEASURE' IN TYPEOF(m.
        value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(0,0,0,0,0,0,0) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.POSITIVE_LENGTH_MEASURE' IN 
        TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(1,0,0,0,0,0,0) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.POSITIVE_PLANE_ANGLE_MEASURE' IN
         TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
          dimensional_exponents(0,0,0,0,0,0,0) THEN
        RETURN(FALSE);
      END_IF;
    END_IF;
    RETURN(TRUE);

      </algorithm>

    </function>

    <function
      name="vector_difference">
      <typename
        name="vector"/>
      <parameter
        name="arg1">
        <typename
          name="vector_or_direction"/>
      </parameter>
      <parameter
        name="arg2">
        <typename
          name="vector_or_direction"/>
      </parameter>
      <algorithm>

    LOCAL
      ndim   : INTEGER;
      mag2   : REAL;
      mag1   : REAL;
      mag    : REAL;
      res    : direction;
      vec1   : direction;
      vec2   : direction;
      result : vector;
    END_LOCAL;
    IF (NOT EXISTS(arg1)) OR (NOT EXISTS(arg2)) OR (arg1.dim &lt;&gt; arg2.dim)
         THEN
      RETURN(?);
    ELSE
      BEGIN
        IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.VECTOR' IN TYPEOF(arg1)
             THEN
          mag1 := arg1.magnitude;
          vec1 := arg1.orientation;
        ELSE
          mag1 := 1;
          vec1 := arg1;
        END_IF;
        IF 'GEOMETRICALLY_BOUNDED_SURFACE_MIM.VECTOR' IN TYPEOF(arg2)
             THEN
          mag2 := arg2.magnitude;
          vec2 := arg2.orientation;
        ELSE
          mag2 := 1;
          vec2 := arg2;
        END_IF;
        vec1 := normalise(vec1);
        vec2 := normalise(vec2);
        ndim := SIZEOF(vec1.direction_ratios);
        mag := 0;
        res := dummy_gri || direction(vec1.direction_ratios);
        REPEAT i := 1 TO ndim BY 1;
          res.direction_ratios[i] := (mag1 * vec1.direction_ratios[i]) + (
              mag2 * vec2.direction_ratios[i]);
          mag := mag + (res.direction_ratios[i] * res.direction_ratios[i]);
        END_REPEAT;
        IF mag &gt; 0 THEN
          result := dummy_gri || vector(res,SQRT(mag));
        ELSE
          result := dummy_gri || vector(vec1,0);
        END_IF;
      END;
    END_IF;
    RETURN(result);

      </algorithm>

    </function>

  </schema>

</express>
