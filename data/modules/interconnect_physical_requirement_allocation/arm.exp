(*
   $Id: arm.exp,v 1.45 2006/05/01 05:01:10 thomasrthurman Exp $
   ISO TC184/SC4/WG12 N4014 - ISO/TS 10303-1689 Interconnect physical requirement allocation - EXPRESS ARM
   Supersedes ISO TC184/SC4/WG12 N3456
*)

 SCHEMA Interconnect_physical_requirement_allocation_arm;

	USE FROM Fabrication_technology_arm;	-- ISO/TS 10303-1670
	
	USE FROM Requirement_view_definition_relationship_arm; -- ISO/TS 10303-1142
	
	USE FROM Integral_shield_arm; -- ISO/TS 10303-xxxx

	REFERENCE FROM Requirement_decomposition_arm(get_rvd);	-- ISO/TS 10303-1740

	REFERENCE FROM Characterizable_object_arm(bag_to_set);  -- ISO/TS 10303-1765

  TYPE land_physical_template_or_inter_stratum_feature_template = SELECT
       (Land_physical_template,
        Inter_stratum_feature_template);
  END_TYPE;

  ENTITY Dependent_electrical_isolation_removal_template
    SUBTYPE OF (Electrical_isolation_removal_template);
      associated_item : land_physical_template_or_inter_stratum_feature_template;
  END_ENTITY;

  ENTITY Dependent_thermal_isolation_removal_template
    SUBTYPE OF (Thermal_isolation_removal_template);
      associated_item : Land_physical_template;
  END_ENTITY;

  ENTITY Electrical_isolation_removal_template
    SUBTYPE OF (Material_removal_feature_template);
    DERIVE
      electrical_isolation_spacing_requirement : SET[1:?] OF Requirement_view_definition := 
        get_rvd(SELF, 'electrical requirement');
    WHERE
      WR1: SIZEOF(QUERY(eisr <* electrical_isolation_spacing_requirement |
         NOT('INTERCONNECT_PHYSICAL_REQUIREMENT_ALLOCATION_ARM.ELECTRICAL_ISOLATION_REQUIREMENT'
        IN TYPEOF(eisr)) )) =0;
      WR2: SIZEOF(QUERY(s <* SELF\Geometric_template.shapes |
        ('PART_TEMPLATE_EXTENSION_ARM.PLANAR_CLOSED_PATH_SHAPE_MODEL_WITH_PARAMETERS' IN TYPEOF(s)))) = 0;
      WR3: SIZEOF(QUERY(s <* SELF\Geometric_template.shapes |
        NOT ('CONSTRUCTIVE_SOLID_GEOMETRY_2D_ARM.SINGLE_BOUNDARY_CSG_2D_MODEL' IN TYPEOF(s)))) = 0;        
  END_ENTITY;

  ENTITY Electrical_isolation_requirement
    SUBTYPE OF (Requirement_view_definition);
    DERIVE
      effective_voltage_withstand_capacity_requirement : SET[1:1] OF Predefined_requirement_view_definition := 
        get_specific_requirement_view_definition_for_collector(SELF, 'effective voltage withstand capacity requirement');
      electrical_isolation_spacing_requirement : SET[1:1] OF Predefined_requirement_view_definition :=
        get_specific_requirement_type_for_primary_rvd_relationship(SELF, 'electrical isolation spacing requirement', 'LAYOUT_SPACING_REQUIREMENT_OCCURRENCE');
    WHERE
      WR1: 'INTERCONNECT_PLACEMENT_REQUIREMENTS_ARM.LAYOUT_SPACING_REQUIREMENT_OCCURRENCE' IN TYPEOF(electrical_isolation_spacing_requirement[1]);
      WR2: NOT EXISTS(SELF\Product_view_definition.additional_characterization);
  END_ENTITY;

  ENTITY Interconnect_shield_allocation
    SUBTYPE OF (Requirement_assignment);
      SELF\Requirement_assignment.assigned_to : Integral_shield;
      SELF\Requirement_assignment.assigned_requirement RENAMED assigned_requirement_property  : Predefined_requirement_view_definition;
    WHERE
     WR1 : assigned_requirement_property\Product_view_definition.initial_context\View_definition_context.application_domain = 'electrical';
  END_ENTITY;
		
  ENTITY Thermal_isolation_removal_template
    SUBTYPE OF (Material_removal_structured_template);
	DERIVE
  		thermal_isolation_spacing_requirement: SET[1:1] OF Requirement_view_definition :=
		  get_rvd(SELF, 'thermal requirement');
	WHERE
	  WR1: SIZEOF(QUERY(tisr <* THERMAL_ISOLATION_SPACING_REQUIREMENT |
       NOT('INTERCONNECT_PHYSICAL_REQUIREMENT_ALLOCATION_ARM.THERMAL_ISOLATION_REQUIREMENT' IN TYPEOF(tisr))
       )) =0;
  END_ENTITY;

  ENTITY Thermal_isolation_requirement
  	SUBTYPE OF (Requirement_view_definition);
  	DERIVE
      effective_current_capacity_requirement : SET [1:1] OF Predefined_requirement_view_definition :=
        get_specific_requirement_view_definition_for_collector(SELF, 'effective current capacity requirement');

      angular_orientation_requirement : SET [1:1] OF Predefined_requirement_view_definition := 
        get_specific_requirement_view_definition_for_collector(SELF, 'angular orientation requirement');
 
      thermal_isolation_spacing_requirement : SET [1:1] OF Predefined_requirement_view_definition :=
        get_specific_requirement_type_for_primary_rvd_relationship(SELF, 'thermal isolation spacing requirement', 'LAYOUT_SPACING_REQUIREMENT_OCCURRENCE');
   WHERE
     WR1 : 'INTERCONNECT_PLACEMENT_REQUIREMENTS_ARM.LAYOUT_SPACING_REQUIREMENT_OCCURRENCE' IN TYPEOF(thermal_isolation_spacing_requirement[1]);
     WR2 : NOT EXISTS(SELF\Product_view_definition.additional_characterization);
  END_ENTITY;

FUNCTION get_specific_requirement_view_definition_for_collector(
	input : Requirement_view_definition;
	id : STRING
) : SET OF Predefined_requirement_view_definition; 
LOCAL
    rcr : SET[0:?] OF Requirement_collection_relationship := [];--this gives us access to the information base
    rdp : SET[0:?] OF Predefined_requirement_view_definition :=[];
END_LOCAL;
    rcr := bag_to_set(QUERY(rai <* USEDIN (input, 'REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP_ARM.'+
	'REQUIREMENT_COLLECTION_RELATIONSHIP.COLLECTION') | 
          (rai\View_definition_relationship.relation_type = id)));

	-- iterate over rcr 
    REPEAT i := 1 to SIZEOF(rcr) by 1;
        -- get rdp 
      rdp := rdp + rcr[i].member;
    END_REPEAT;

	RETURN(rdp);
END_FUNCTION;

FUNCTION get_specific_requirement_type_for_primary_rvd_relationship(
	input : Requirement_view_definition;
	id : STRING;
    reqType : STRING
) : SET OF Predefined_requirement_view_definition; 

LOCAL
    rvdr : SET[0:?] OF Requirement_view_definition_relationship := [];
    rdp : SET[0:?] OF Predefined_requirement_view_definition := [];  --this gives us access to the information base
END_LOCAL;
	rvdr := bag_to_set(QUERY(rvdre <* USEDIN (input, 'REQUIREMENT_DECOMPOSITION_ARM.'+ 'REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP.SECONDARY')|
	                           ((rvdre.relation_type = id) AND (reqType IN TYPEOF(rvdre.primary)))
                       ));
	-- iterate over rvdr
	REPEAT i := 1 to SIZEOF(rvdr) by 1;
      rdp := rdp + rvdr[i].primary;
	END_REPEAT;

	RETURN(rdp);
END_FUNCTION;
  
 END_SCHEMA;
