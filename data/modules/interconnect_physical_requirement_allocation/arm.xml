<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express
  SYSTEM "../../../dtd/express.dtd">
<express description.file="arm_descriptions.xml" language_version="2" rcs.date="$Date$" rcs.revision="$Revision$" reference="">
   <application name="JSDAI" owner="LKSoft" source="interconnect_physical_requirement_allocation_arm schema_instance" url="www.lksoft.com" version="4.0 beta"/>
   <schema name="Interconnect_physical_requirement_allocation_arm">
      <interface kind="use" schema="Requirement_view_definition_relationship_arm"/>
      <interface kind="use" schema="Integral_shield_arm"/>
      <interface kind="reference" schema="Support_resource_arm">
         <interfaced.item name="bag_to_set"/>
      </interface>
      <entity name="Electrical_isolation_requirement" supertypes="Requirement_view_definition">
         <explicit name="effective_voltage_withstand_capacity_requirement" optional="YES">
            <typename name="Value_limit"/>
         </explicit>
         <derived expression="get_specific_requirement_type_for_primary_rvd_relationship(SELF, 'derived from', &#xA;              'INTERCONNECT_PLACEMENT_REQUIREMENTS_ARM.LAYOUT_SPACING_REQUIREMENT')" name="electrical_isolation_spacing_requirement">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="Predefined_requirement_view_definition"/>
         </derived>
         <where expression="NOT EXISTS(effective_voltage_withstand_capacity_requirement) OR&#xA;             ((effective_voltage_withstand_capacity_requirement\Qualified_representation_item.qualifiers[1]\Type_qualifier.name in ['minimum'])&#xA;              AND&#xA;             ('VALUE_WITH_UNIT_EXTENSION_ARM.ELECTRIC_POTENTIAL_DATA_ELEMENT' IN TYPEOF(effective_voltage_withstand_capacity_requirement)))" label="WR1"/>
         <where expression="'INTERCONNECT_PLACEMENT_REQUIREMENTS_ARM.LAYOUT_SPACING_REQUIREMENT' IN TYPEOF(electrical_isolation_spacing_requirement[1])" label="WR2"/>
         <where expression="NOT EXISTS(SELF\Product_view_definition.additional_characterization)" label="WR3"/>
      </entity>
      <entity name="Interconnect_shield_allocation" supertypes="Requirement_assignment">
         <explicit name="assigned_to">
            <typename name="Integral_shield"/>
            <redeclaration entity-ref="Requirement_assignment"/>
         </explicit>
         <explicit name="assigned_requirement_property">
            <typename name="Predefined_requirement_view_definition"/>
            <redeclaration entity-ref="Requirement_assignment" old_name="assigned_requirement"/>
         </explicit>
         <where expression="assigned_requirement_property\Product_view_definition.initial_context\View_definition_context.application_domain = 'electrical'" label="WR1"/>
      </entity>
      <entity name="Thermal_isolation_requirement" supertypes="Requirement_view_definition">
         <explicit name="thermal_bar_width" optional="YES">
            <typename name="Length_tolerance_characteristic"/>
         </explicit>
         <explicit name="number_of_bars" optional="YES">
            <builtintype type="INTEGER"/>
         </explicit>
         <explicit name="effective_current_capacity_requirement" optional="YES">
            <typename name="Value_limit"/>
         </explicit>
         <explicit name="angular_orientation_requirement" optional="YES">
            <typename name="Value_range"/>
         </explicit>
         <explicit name="effective_thermal_resistance_requirement" optional="YES">
            <typename name="Value_limit"/>
         </explicit>
         <derived expression="get_specific_requirement_type_for_primary_rvd_relationship(SELF, 'derived from', 'INTERCONNECT_PLACEMENT_REQUIREMENTS_ARM.LAYOUT_SPACING_REQUIREMENT')" name="thermal_isolation_spacing_requirement">
            <aggregate lower="1" type="SET" upper="1"/>
            <typename name="Predefined_requirement_view_definition"/>
         </derived>
         <where expression="NOT EXISTS(SELF\Product_view_definition.additional_characterization)" label="WR1"/>
         <where expression="NOT(EXISTS(thermal_bar_width) XOR EXISTS(number_of_bars))" label="WR2"/>
         <where expression="'INTERCONNECT_PLACEMENT_REQUIREMENTS_ARM.LAYOUT_SPACING_REQUIREMENT' IN TYPEOF(thermal_isolation_spacing_requirement[1])" label="WR3"/>
         <where expression="NOT EXISTS(effective_current_capacity_requirement) OR&#xA;              ((effective_current_capacity_requirement\Qualified_representation_item.qualifiers[1]\Type_qualifier.name in ['minimum'])&#xA;              AND&#xA;              ('VALUE_WITH_UNIT_EXTENSION_ARM.ELECTRIC_CURRENT_DATA_ELEMENT' IN TYPEOF(effective_current_capacity_requirement)))" label="WR4"/>
         <where expression="NOT EXISTS(angular_orientation_requirement) OR&#xA;              ('VALUE_WITH_UNIT_EXTENSION_ARM.ANGLE_DATA_ELEMENT' IN TYPEOF(angular_orientation_requirement))" label="WR5"/>
         <where expression="NOT EXISTS(effective_thermal_resistance_requirement) OR&#xA;              ((effective_thermal_resistance_requirement\Qualified_representation_item.qualifiers[1]\Type_qualifier.name in ['minimum'])&#xA;              AND&#xA;              ('VALUE_WITH_UNIT_EXTENSION_ARM.THERMAL_RESISTANCE_DATA_ELEMENT' IN TYPEOF(effective_thermal_resistance_requirement)))" label="WR6"/>
      </entity>
      <function name="get_specific_requirement_type_for_primary_rvd_relationship">
         <parameter name="input">
            <typename name="Requirement_view_definition"/>
         </parameter>
         <parameter name="id">
            <builtintype type="STRING"/>
         </parameter>
         <parameter name="reqType">
            <builtintype type="STRING"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="Predefined_requirement_view_definition"/>
         <algorithm>LOCAL
    rvdr : SET[0:?] OF Requirement_view_definition_relationship := [];
    rdp : SET[0:?] OF Predefined_requirement_view_definition := [];  --this gives us access to the information base
END_LOCAL;
	rvdr := bag_to_set(QUERY(rvdre &lt;* USEDIN (input, 'REQUIREMENT_DECOMPOSITION_ARM.'+ 'REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP.PRIMARY')|
	                           ((rvdre.relation_type = id) AND (reqType IN TYPEOF(rvdre.secondary)))
                       ));
	-- iterate over rvdr
	REPEAT i := 1 to SIZEOF(rvdr) by 1;
      rdp := rdp + rvdr[i].secondary;
	END_REPEAT;

	RETURN(rdp);</algorithm>
      </function>
   </schema>
</express>