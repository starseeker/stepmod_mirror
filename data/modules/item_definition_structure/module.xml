<?xml version="1.0" encoding="UTF-8"?> <!-- edited with XMLSPY v2004 rel. 4 U (http://www.xmlspy.com) by Ricardo Olavo (UNINOVA) --><!-- $Id: module.xml,v 1.14 2006/03/01 10:30:42 liutkuviene Exp $ --><!DOCTYPE module SYSTEM "../../../dtd/module.dtd"><!-- Generated by mkmodule.js, Eurostep Limited, http://www.eurostep.com --> <!--       To view the module in IExplorer, open: sys/1_scope.xml       --><module name="item_definition_structure" 
	name.french="Structure de d&#233;finition d'&#233;l&#233;ment" 
	part="1345" 
	version="2" 
	wg.number="4292" 
	wg.number.arm="4293" 
	wg.number.mim="4294" 
	wg.number.supersedes="2618" 
	wg.number.arm.supersedes="2619" 
	wg.number.mim.supersedes="2620" 
	checklist.internal_review="3818"
    checklist.project_leader="3819"
    checklist.convener="3820"
	publication.date="2006-09-15" 
	status="TS" 
	language="E" 
	publication.year="2006" 
	published="n" 
	previous.revision.year="2005"
    previous.revision.cancelled="YES"
	rcs.date="$Date: 2006/03/01 10:30:42 $" rcs.revision="$Revision: 1.14 $"
	development.folder="dvlp">	<keywords>     module, assembly structure, component placement  </keywords>	<!-- Reference to contacts detailed in stepmod/data/basic/contacts.xml -->	<contacts>		<projlead ref="ap236.projlead"/>		<editor ref="ap236.editor"/>	</contacts>	<!-- Introduction -->	<!-- The introduction should start as shown: -->	<purpose>		<p> This part of ISO 10303 specifies an application module for the representation of relationships between parts to build up various kinds of structures. </p>		<p> The structures are defined for part definitions, for part occurrences or between part definitions and part occurrences. Among these structures is a hierarchical assembly structure to represent the relationships between an assembly and its constituents. </p>		<note> This application module defines UOF S3 of ISO 10303-236.     </note>
		
		<p>   
		This edition incorporates modifications to the previous edition listed below.
		</p>
		<!-- ARM changes -->
		<p>The following ARM EXPRESS declarations have been added:</p>
		<ul>
			<li>USE FROM Part_occurrence_arm.</li>
		</ul>
		<p>The following ARM EXPRESS declarations have been removed:</p>
		<ul>
			<li>USE FROM Product_occurrence_arm.</li>
		</ul>
		<p>The following ARM EXPRESS declarations have been changed:</p>
		<ul>
			<li>Geometrical_relationship.</li>
		</ul>
		<!-- MIM changes -->
		<p>The following MIM EXPRESS declarations have been added:</p>
		<ul>
			<li>USE FROM Part_occurrence_mim.</li>
		</ul>
		<p>The following MIM EXPRESS declarations have been removed:</p>
		<ul>
			<li>USE FROM Product_occurrence_mim.</li>
		</ul>
		<!-- Mapping changes -->
		<p>Modifications made to the mapping specification of the following entity definitions:</p>
		<ul>
			<li>Effectivity_assignment (added);</li>
			<li>Geometrical_relationship.definition_placement (changed).</li>
		</ul>	</purpose>	<!-- Items in scope -->	<inscope>
      <li>definition of structures for part definitions, part occurrences and between part definitions and part occurrences;</li>
      <li>relationships between an assembly and its constituents.</li>
   </inscope>	<!-- Items out of scope -->	<outscope>		<li>part collections;</li>		<li>description of configuration cases of assembled products.</li>	</outscope>	<!--  <normrefs/>   <definition/>   <abbreviations/> -->	<!-- Clause 4 ARM  -->	<arm>		<!-- Note ARM short form EXPRESS is in arm.xml -->		<!-- Units of functionality -->		<uof name="Item_definition_structure">			<description> 		 The Item_definition_structure UoF specifies the data structure for the representation of relationships between parts to build up various kinds of structures.      </description>			<uof.ae entity="Assembled_part_association"/>			<uof.ae entity="Assembly_definition"/>			<uof.ae entity="Part_definition_relationship"/>			<uof.ae entity="Geometrical_relationship"/>		</uof>		<!-- Short form EXPRESS-G -->		<express-g>			<imgfile file="armexpg1.xml"/>			<imgfile file="armexpg2.xml"/>		</express-g>	</arm>	<!-- Clause 5.1 Mapping specification -->	<mapping_table>		<ae entity="Assembly_definition">			<aimelt>product_definition</aimelt>			<source>ISO 10303-41</source>			<rules>restrict_assembly_category</rules>			<refpath> product_definition &lt;- product_definition_context_association.definition product_definition_context_association {product_definition_context_association.role -&gt; product_definition_context_role product_definition_context_role.name = 'part definition type'} product_definition_context_association.frame_of_reference -&gt; product_definition_context product_definition_context &lt;= application_context_element  application_context_element.name = 'assembly definition' </refpath>		</ae>		<ae entity="Assembled_part_association">			<aimelt>assembly_component_usage</aimelt>			<source>ISO 10303-44</source>			<aa attribute="SELF\View_definition_relationship.relating_view" assertion_to="Assembly_definition">				<aimelt>PATH</aimelt>				<refpath> 	 assembly_component_usage &lt;= product_definition_usage &lt;= product_definition_relationship product_definition_relationship.relating_product_definition -&gt; product_definition  product_definition &lt;- product_definition_context_association.definition product_definition_context_association {product_definition_context_association.frame_of_reference -&gt; product_definition_context &lt;= application_context_element  application_context_element.name = 'assembly definition'} {product_definition_context_association.role -&gt; product_definition_context_role product_definition_context_role.name = 'part definition type'}  	 </refpath>			</aa>		</ae>		<ae entity="Effectivity_assignment" original_module="effectivity_application">
			<aa attribute="items" assertion_to="Part_definition_relationship">
				<aimelt>PATH</aimelt>
				<refpath_extend extended_select="effectivity_item">
					effectivity_item *> effectivity_item_for_replacement
					effectivity_item_for_replacement = product_definition_relationship
       			</refpath_extend>
			</aa>
		</ae>
		
		<ae entity="Geometrical_relationship">
			<aimelt>product_definition_relationship</aimelt>
			<source>ISO 10303-41</source>
			<refpath>{product_definition_relationship.name = 'geometrical relationship'} 	</refpath>

			<aa attribute="definition_placement" assertion_to="Geometric_model_relationship_with_transformation">
					<refpath> 	 product_definition_relationship 
{product_definition_relationship.name = 'geometrical relationship' }  
[product_definition_relationship.relating_product_definition -&gt; product_definition 
characterized_product_definition = product_definition 
characterized_definition = characterized_product_definition 
characterized_definition &lt;- property_definition.definition 
property_definition  
{property_definition =&gt; product_definition_shape} 
represented_definition = property_definition 
represented_definition &lt;- property_definition_representation.definition 
property_definition_representation  
{property_definition_representation =&gt; shape_definition_representation} 
property_definition_representation.used_representation -&gt; representation &lt;- {representation =&gt; shape_representation} 
representation_relationship.rep_2] 
[product_definition_relationship.related_product_definition -&gt; product_definition 
characterized_product_definition = product_definition 
characterized_definition = characterized_product_definition 
characterized_definition &lt;- property_definition.definition 
property_definition  
{property_definition =&gt; product_definition_shape} 
represented_definition = property_definition 
represented_definition &lt;- property_definition_representation.definition 
property_definition_representation  
{property_definition_representation =&gt; shape_definition_representation} 
property_definition_representation.used_representation -&gt; representation &lt;-  {representation =&gt; shape_representation} 
representation_relationship.rep_1] 
[characterized_product_definition = product_definition_relationship 
characterized_definition = characterized_product_definition 
characterized_definition &lt;- property_definition.definition 
property_definition =&gt; product_definition_shape &lt;-  context_dependent_shape_representation.represented_product_relation 
context_dependent_shape_representation 
context_dependent_shape_representation.representation_relation -&gt; shape_representation_relationship &lt;=]  
representation_relationship =&gt;  representation_relationship_with_transformation 	 </refpath>
			</aa>
		</ae>		
		<ae entity="Part_definition_relationship">			<aimelt>product_definition_relationship</aimelt>			<source>ISO 10303-41</source>			<rules>restrict_product_definitions_for_part_definition_relationship 	product_definition_replacement_requires_effectivity_assignment 	</rules>			<aa attribute="SELF\View_definition_relationship.relating_view" assertion_to="Part_view_definition">				<aimelt>PATH</aimelt>				<refpath> product_definition_relationship.relating_product_definition -&gt; product_definition  {product_definition.frame_of_reference -&gt; product_definition_context product_definition_context &lt;= application_context_element application_context_element.name = 'part definition'} 	 </refpath>			</aa>			<aa attribute="SELF\View_definition_relationship.related_view" assertion_to="Part_view_definition">				<aimelt>PATH</aimelt>				<refpath> product_definition_relationship.related_product_definition -&gt; product_definition  {product_definition.frame_of_reference -&gt; product_definition_context product_definition_context &lt;= application_context_element application_context_element.name = 'part definition'} 	 </refpath>			</aa>		</ae>	</mapping_table>	<!-- Clause 5.2 MIM -->	<mim>		<!--  Note MIM short form express is in mim.xml -->		<express-g>			<imgfile file="mimexpg1.xml"/>			<imgfile file="mimexpg2.xml"/>		</express-g>	</mim>	<usage_guide>		<guide_subclause title="Product structure">There may be more than one product_definition associated with a particular product_definition_formation.  <p>A product_definition that has a product_definition_context with the attribute name set to 'part definition' represents a definitional view on the part, collecting data, from a particular application domain or life-cycle, about the part independently of its usage, as constituent of some other part.  Relationships between product_definitions that have an associated product_definition_context with a name of 'part definition' are the principle elements used to define explicit hierarchical product structures. </p>			<p>An assembly_component_usage relationship represents the general assembly relationship between two parts by associating two product_definitions. The related_product_definition defines a view on the component, the relating_product_definition defines a view of the assembly part. Both product_definitions are definitional views. They have an associated product_definition_context with a name of 'part definition'.  In order to define different types of assembly relationships, assembly_component_usage has various subtypes:  </p>			<ul>				<li>The next_assembly_usage_occurrence relationship represents a specific usage. It is an occurrence of a component definition in the next higher parent assembly.  If a next_assembly_usage_occurrence is not instantiated in combination with a quantified_assembly_component_usage, it is used to represent a single occurrence of the component part in the context of the immediate next higher assembly part. </li>				<li>The promissory_usage_occurrence relationship represents the usage of a component within a higher-level assembly that must not be the immediate parent, in the case where the detailed assembly structure between the component and the higher-level assembly is not represented. It specifies the intention to use the constituent in an assembly.  A promissory_usage_occurrence may be instantiated in combination with a quantified_assembly_component_usage. </li>				<li>The quantified_assembly_component_usage relationship is an assembly_component_usage that associates a quantity with the component usage. It can be used to describe that a component is used multiple times. <example>Quantity is set to '5 each' for five wheel fixture bolts, in the context of the assembly, but does not allow independent identification of individual occurrences of this component usage</example>. Another usage of the quantity is for material like components. <example>'0.5 ml' of oil.</example>  If the quantity, in which the component part is used in the assembly can not be expressed as a particular value, but depends on certain constraints, an assembly_component_usage relationship with a name of 'selected instance usage' shall be used instead of the quantified_assembly_component_usage subtype with an associated property_definition and an associated representation with a name of 'selection criteria' that defines the quantity by a representation_item with name 'selection quantity' of type measure_representation_item or value_range. </li>				<li>In order to identify a specific occurrence of a component in an assembly which is not the immediate parent assembly, the specified_higher_usage_occurrence entity is used, because the path from the higher-level parent assembly to the lower-level component may be ambigous. The specified_higher_usage_occurrence relationship represents an individual occurrence of the component part within a higher-level parent assembly. It shall not be instantiated in combination with a next_assembly_usage_occurrence or a promissory_usage_occurrence.  The specified_higher_usage_occurrence identifies with its inherited attribute related_product_definition the component in the assembly structure, with its inherited attribute relating_product_definition the higher-level parent assembly, with the next_usage attribute the component usage within the immediate parent assembly, and with its upper_usage attribute the usage between the higher-level parent assembly and the immediate parent identified by next_usage.  In case the higher-level parent assembly to the component has more than one intermediate assembly level the upper_usage attribute refers to another specified_higher_usage_occurrence (recursive use).  Figure F.1 shows an example instantiation.    <figure id="f1" number="F.1">						<title>Instanciation of specified_higher_usage_occurrence</title>						<img src="fig_79.gif"/>					</figure>				</li>			</ul> The assembly_component_usage and its subtypes described above represent individual usages, occurrences, of either a single or multiple instances of a component part in the context of an assembly part, within an explicit hierarchical part structure.  In order to be able to use and represent these individual occurrences in the context of specification control, to configure them for the usage in the context of a product_class, or to use them in the context of variational bills of material as product constituents in conceptual or functional definitions or in alternative solution definitions of those, a separate product_definition has to be created describing an individual occurrence view of the component part.  When moving from an explicit part structure to a variational product structure, individual usages of a component part in the context of an assembly part that are described as part of an explicit hierarchical part structure by assembly_component_usage relationships or its subtypes, have to be related to a corresponding product_definition with an associated product_definition_context with a name of 'part occurrence' through a product_definition_occurrence_relationship.  The product_definition_occurrence_relationship associates this product_definition and the assembly_component_usage. The product_definition referenced by the occurrence attribute has an associated product_definition_context with a name of 'part occurrence'.  It represents explicitly an occurrence of the component that is also implicitly defined by the associated assembly_component_usage.  The definitional product_definition of the component (with product_definition_context with name 'part definition') is referred to by the inherited related_product_definition attribute of the assembly_component_usage as well as associated to the product_definition representing explicitly the occurrence through a product_definition_relationship with a name of 'definition usage'. <p>Figure F.2 shows an example instantiation. </p>			<figure id="f2" number="F.2">				<title>Instanciation of product_definition_occurrence_relationship</title>				<img src="fig_80.gif"/>			</figure>  Thus, the product_definition_occurrence_relationship allows the association of an individual occurrence of a constituent part definition in an explicit part structure, represented by assembly_component_usage relationships, to a specific product_definition describing explicitly the individual occurrence of the component part in the context of specification control.  <p>See Specification control module for further details about the usage of those product_definitions for specification control. </p>		</guide_subclause>		<guide_subclause title="Shape of an assembly">			<guide_subclause title="Relating the shape of a component to the shape of its assembly"> In order to build assembly structures, relationships between the assembly and component(s) have to be defined. Two alternatives for the implementation of assembly structure representations are recommended:   <ul>					<li>one alternative describes the assembly with the shape of the components built in.  With this approach the shape of the component is mapped into the shape of the assembly via mapped_item;  </li>					<li>the other alternative describes the components and the assembly with their own shape information together with the transformation information between the assembly and the component. This approach uses the representation_relationship_with_transformation.  </li>				</ul>Both mechanisms make sense even in mixed combinations.  The product structure relationship, such as next_assembly_usage_occurrence, is identical and is required for both approaches. </guide_subclause>			<guide_subclause title="mapped_item approach"> This approach represents the assembled model completely.  It is appropriate for explicit representation of assemblies.  It uses mapped_item in combination with representation_map which takes the shape_representation of the component and turns it into an item in a representation item included the shape_representation of the assembly.  The transformation to be applied is determined from the mapping origin and the mapping target, which are items of the two instances of representation and therefore founded in the two contexts.  <p>The entity mapped_item is constrained such that: </p>				<ul>					<li>no mapped_item shall be dependent on itself to define the representation being mapped (acyclic);  </li>					<li>the mapping_origin shall be in the context of the representation referenced by mapped_item.mapping_source.mapped_representation;  </li>					<li>the mapping_target shall be in the context of the representation including the mapped_item.  </li>				</ul> There is no constraint to prevent both instances of representation having the same context: the new item is shifted in position but may not change spaces.  This allows the use of mapped_item to position sub-models in a single coordinate space.  <p>It is even possible to define an identity matrix transformation by referring to the same entity instance as both mapping_origin and mapping_target.  This represents the case where a component is defined in (one of) its final positions.  Until it is mapped into the second representation, it is not included in the representation even though defined in the same space. </p>				<p>The mapping of the Assembly_component_relationship implies that the relationships between the assembly and the component on the product_definition level and the mapped_item for the shape_representation level have to be linked through an additional separate shape_representation containing, only the mapped_itemand a shape_definition_representation and a product_definition_shape. This is necessary to distinguish between several occurrences of the same component within an assembly. </p>			</guide_subclause>			<guide_subclause title="representation_relationship_with_transformation approach"> This approach represents the components and the set of instructions how to build the assembly.  This approach is adequate for the implicit representation of assemblies.  Thus, representation_relationship_with_transformation is used to define the relative positions within an assembly.  It does not allow for:   <ul>					<li>inclusion: The decision to create a representation that brings all the components together, is left to the receiving system;  </li>					<li>the ability to define a component in one position and then to replicate it in the same space.  </li>				</ul> The shape_representation may be defined explicitly and completely for the assembly and the representation_relationship_with_transformation gives just the additional information how an instance of shape_representation for a component geometrically relates to the shape of the assembly. The rule coordinated_assembly_and_shape implies that the relationships between the assembly and the component on the product_definition level and the shape_representation level have to be linked through a context_dependent_shape_representation. This is necessary to distinguish between several occurrences of the same component within an assembly.  <p>According to ISO 10303-43, the attributes rep_1 and rep_2 of representation_relationship_with_transformation are determined as follows:  </p>				<ul>					<li>rep_1 is defined as the representation with a context to which the transformation applies;  </li>					<li>rep_2 is the representation with a context which is the result of the transformation.  </li>				</ul>Based on this definition, the attributes of representation_relationship_with_transformation should be instantiated as follows:   <ul>					<li>rep_1 references the shape_representation for the product_definition that is the related_product_definition (identifying the component) of the assembly_component_usage;  </li>					<li>rep_2 references the shape_representation for the product_definition that is the relating_product_definition (identifying the assembly) of the assembly_component_usage.  </li>				</ul> Further restrictions are implied by the informal proposition on representation_relationship_with_transformation, defined in ISO 10303-43: If the transformation is an item_defined_transformation, the ordering of the instances of representation given for the inherited attributes of representation_relationship shall be consistent with the ordering of the two instances of representation_item given as attributes of item_defined_transformation.  Therefore the inherited attributes transform_item_1 and transform_item_2 of item_defined_transformation shall be used as follows:   <ul>					<li>transform_item_1 references the representation_item, such as axis2_placement_3d, in a representation for the product_definition that is the related_product_definition of the assembly_component_usage, identifying the component;  </li>					<li>transform_item_2 references the representation_item, such as axis2_placement_3d, in a representation for the product_definition that is the relating_product_definition of the assembly_component_usage, identifying the assembly.  </li>				</ul>			</guide_subclause>			<guide_subclause title="Representation of transformations"> Transformation information is represented for an item_defined_transformation using the inherited attributes transform_item_2 and transform_item_1, and for a mapped_item using attribute mapping_target of mapped_item and attribute mapping_origin of the referenced representation_map as a combination of two instances of representation_item.  <p>The allowed combinations for these two instances of representation_item are as follows:  </p>				<ul>					<li>axis2_placement_3d for the transform_item_1 or mapping_origin attribute and another instance of axis2_placement_3d for the transform_item_2 or mapping_target attribute;  </li>					<li>axis2_placement_3d for the transform_item_1 or mapping_origin attribute and an instance of cartesian_transformation_operator_3d for the transform_item_2 or mapping_target attribute;  </li>					<li>axis2_placement_2d for the transform_item_1 or mapping_origin attribute and another instance of axis2_placement_2d for the transform_item_2 or mapping_target attribute;  </li>					<li>axis2_placement_2d for the transform_item_1 or mapping_origin attribute and an instance of cartesian_transformation_operator_2d for the transform_item_2 or mapping_target attribute.  </li>				</ul> For a representation_relationship_with_transformation there may be also an instance of functionally_defined_transformation used that is a cartesian_transformation_operator.  For any usage of an instance of cartesian_transformation_operator to define the transformation information of an instance of assembly_component_usage the derived attribute scl shall be 1.0, since scaling is not allowed for components within an assembly. </guide_subclause>		</guide_subclause>	</usage_guide></module>