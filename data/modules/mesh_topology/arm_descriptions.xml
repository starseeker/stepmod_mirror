<?xml version="1.0"?>
<?xml-stylesheet 
  type="text/xsl" 
  href="../../../xsl/descriptions.xsl"?>
<!DOCTYPE ext_descriptions SYSTEM "../../../dtd/description.dtd">
<ext_descriptions module_directory="mesh_topology" schema_file="arm.xml" describe.selects="YES" describe.subtype_constraints="YES" rcs.date="$Date: 2008/06/20 15:54:56 $" rcs.revision="$Revision: 1.6 $">
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Schema: Mesh_topology_arm
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<ext_description linkend="Mesh_topology_arm">
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Type: cell_shape 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape">
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_0D 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_0D"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_0d">
A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_0d"/> is an identifier of an unstructured mesh cell shape.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_0D  Item: single 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_0D.single"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_0d.single">
a single vertex.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_1D 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_1D"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_1d">
A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_1d"/> is an identifier of a topologically 1-D unstructured mesh cell shape.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_1D  Item: line 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_1D.line"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_1d.line">
a topological line requiring 2 vertices.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_2D 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_2D"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_2d">
A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_2d"/> is an identifier of a topologically 2-D unstructured mesh cell shape.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_2D  Item: quadrilateral 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_2D.quadrilateral"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_2d.quadrilateral">
topologically quadrilateral (four sided) requiring 4 vertices;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_2D  Item: triangle 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_2D.triangle"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_2d.triangle">
topologically triangular (three sided) requiring 3 vertices
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_2D  Item: polygon 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_2D.polygon"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_2D.polygon">
topologically polygonal (n-sided) requiring a minimum of 3 vertices;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_3D 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_3D"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_3d">
A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_3d"/> is an identifier of a topologically 3-D unstructured mesh cell shape.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_3D  Item: hexahedron 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_3D.hexahedron"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_3d.hexahedron">
topologically hexahedral (six quadrilateral faces) requiring 8 vertices.

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_3D  Item: wedge 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_3D.wedge"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_3d.wedge">
topologically pentahedral (three quadrilateral faces and two triangular faces) requiring 6 vertices;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_3D  Item: tetrahedron 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_3D.tetrahedron"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_3d.tetrahedron">
topologically tetrahedral (four triangular faces) requiring 4 vertices.

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_3D  Item: pyramid 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_3D.pyramid"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_3d.pyramid">
topologically pyramidal (one quadrilateral face and four triangular faces) requiring 5 vertices;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: element_order 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.element_order"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.element_order">
An  <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.element_order"/> specifies the allowable geometric order of the element interpolation functions of a finite element.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: element_order  Item: linear 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.element_order.linear"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.element_order.linear">
the element basic interpolation order is linear.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: element_order  Item: quadratic 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.element_order.quadratic"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.element_order.quadratic">
the element basic interpolation order is quadratic.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: element_order  Item: cubic 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.element_order.cubic"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.element_order.cubic">
the element basic interpolation order is cubic.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Type: indices_group 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.indices_group"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.indices_group">
An <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.indices_group"/> is a selection of a group of indices into a multi-dimensional array.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location">
A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location"/> is an enumeration of locations with respect to a mesh.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: unspecified 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.unspecified"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.unspecified">
not specified;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: application_defined 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.application_defined"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.application_defined">
via an external agreement between the data creator and the data user;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: vertices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.vertices">
coincident with the mesh vertices;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: cell_center 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.cell_center"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.cell_center">
the center of a cell; this is also appropriate for entities associated with cells but not necessarily with a given location in a cell;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: face_center 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.face_center"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.face_center">
the center of a generic face which can point in any coordinate direction;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: iface_center 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.iface_center"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.iface_center">
the center of a face in 3-D whose computational normal points in the i direction;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: jface_center 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.jface_center"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.jface_center">
the center of a face in 3-D whose computational normal points in the j direction;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: kface_center 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.kface_center"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.kface_center">
the center of a face in 3-D whose computational normal points in the k direction;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: edge_center 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.edge_center"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.edge_center">
the center of an edge.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_maths_space_type 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_maths_space_type"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_maths_space_type">
A mesh maths space type is an enumeration of the kinds of associations of a mesh derived maths space and a mesh.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_maths_space_type  Item: cells 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_maths_space_type.cells"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_maths_space_type.cells">
data is associated with mesh cells.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_maths_space_type  Item: vertices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_maths_space_type.vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_maths_space_type.vertices">
data is associated with mesh vertices.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: structured_mesh_type 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.structured_mesh_type"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.structured_mesh_type">
A structured mesh type is an enumeration of the kinds of structured meshes.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: structured_mesh_type  Item: rectangular 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.structured_mesh_type.rectangular"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.structured_mesh_type.rectangular">
a structured mesh that is topologically linear in 1-D, quadrilateral in 2-D, and hedral in 3-D.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: structured_mesh_type  Item: pentahedral 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.structured_mesh_type.pentahedral"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.structured_mesh_type.pentahedral">
a structured mesh that is topologically linear in 1-D, triangular in 2-D, and pentahedral, with 2 triangular and 3 quadrilateral faces forming a wedge-like shape, in 3-D.  
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: structured_mesh_type  Item: pyramidal 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.structured_mesh_type.pyramidal"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.structured_mesh_type.pyramidal">
a structured mesh that is topologically linear in 1-D, triangular in 2-D, and pyramidal in 3-D.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: structured_mesh_type  Item: tetrahedral 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.structured_mesh_type.tetrahedral"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.structured_mesh_type.tetrahedral">
 a structured mesh that is topologically linear in 1-D, triangular in 2-D, and tetrahedral in 3-D.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh">
        An <b>Array_based_unstructured_mesh</b> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Unstructured_mesh" />
that is a representation of an unstructured mesh designed
to minimise the amount of data by not requiring explicit identification of the vertices of the cells in the mesh.

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh  Attribute: cells 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh.cells"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh.cells">
the vertex defined cells forming the mesh.</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh  Where: wr1 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh.wr:wr1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh.wr:wr1">
the value of index count shall be 1.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh_and_vertices  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices">
        An <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices"/> is a type of 

        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh" />
 where the vertices of the mesh are explicity identified and ordered.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh_and_vertices  Attribute: vertex_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices.vertex_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices.vertex_count">
 the number of unique vertex in the mesh</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh_and_vertices  Attribute: vertices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices.vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices.vertices">
an array of the unique vertex in the mesh
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh_and_vertices  Where: wr1 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices.wr:wr1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices.wr:wr1">
the elements of vertices shall be all and only the unique vertices in the mesh.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Cell_of_structured_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Cell_of_structured_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Cell_of_structured_mesh">
        A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Cell_of_structured_mesh"/> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_region" /> that is an identified cell of a structured mesh.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Cell_of_structured_mesh  Attribute: the_mesh 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Cell_of_structured_mesh.the_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Cell_of_structured_mesh.the_mesh">
the structured mesh;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Cell_of_structured_mesh  Attribute: cell_identifier 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Cell_of_structured_mesh.cell_identifier"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Cell_of_structured_mesh.cell_identifier">
 the indices of the cell;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Cell_of_structured_mesh  Attribute: index_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Cell_of_structured_mesh.index_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Cell_of_structured_mesh.index_count">
the number of indices required to uniquely identify a vertex or cell in the mesh;
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Composition_of_structured_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Composition_of_structured_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Composition_of_structured_mesh">
        A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Composition_of_structured_mesh"/> is a
relationship between two structured meshes that indicates one is part of the other.
      </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Composition_of_structured_mesh  Attribute: part 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Composition_of_structured_mesh.part"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Composition_of_structured_mesh.part">
the structured mesh that is part of the whole;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Composition_of_structured_mesh  Attribute: whole 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Composition_of_structured_mesh.whole"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Composition_of_structured_mesh.whole">
the structured mesh that contains the part;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Composition_of_structured_mesh  Attribute: lower_vertex 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Composition_of_structured_mesh.lower_vertex"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Composition_of_structured_mesh.lower_vertex">
the position of the vertex in the whole that is the origin of the part. This is specified with respect to each index of the whole.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Composition_of_structured_mesh  Attribute: lower_face 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Composition_of_structured_mesh.lower_face"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Composition_of_structured_mesh.lower_face">
the position of the face in the whole that is the origin of the part. This is
specified with respect to each index of the whole.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Composition_of_structured_mesh  Attribute: used_indices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Composition_of_structured_mesh.used_indices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Composition_of_structured_mesh.used_indices">
the indices of the whole that are also indices of the part in the order that they are used in the part;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Composition_of_structured_mesh  Attribute: used_senses 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Composition_of_structured_mesh.used_senses"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Composition_of_structured_mesh.used_senses">
<p>the sense for each index of part as:</p>
<ul>
<li>TRUE if the part uses the index of the whole in the same direction;</li>
<li>FALSE if the part uses the index of the whole in the reverse direction;</li>
</ul>

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Composition_of_structured_mesh  Attribute: part_indices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Composition_of_structured_mesh.part_indices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Composition_of_structured_mesh.part_indices">
the number of indices required to uniquely identify a vertex or cell in the part;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Composition_of_structured_mesh  Attribute: whole_indices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Composition_of_structured_mesh.whole_indices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Composition_of_structured_mesh.whole_indices">
the number of indices required to uniquely identify a vertex or cell in the whole;

</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Explicit_unstructured_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Explicit_unstructured_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Explicit_unstructured_mesh">
        A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Explicit_unstructured_mesh"/> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Unstructured_mesh" /> that is a representation of an unstructured mesh that is similar,
but not entirely identical to, that specified in ISO 10303-104.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Explicit_unstructured_mesh  Attribute: explicit_model 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Explicit_unstructured_mesh.explicit_model"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Explicit_unstructured_mesh.explicit_model">
the finite element model;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Explicit_unstructured_mesh  Attribute: cells 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Explicit_unstructured_mesh.cells"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Explicit_unstructured_mesh.cells">
the set of element representations comprising the mesh.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Explicitly_defined_cell_patch  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Explicitly_defined_cell_patch"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Explicitly_defined_cell_patch">
        A <b>Explicitly_defined_cell_patch</b> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Patch" />
that is a patch that consists of cells and that is defined by listing them.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Explicitly_defined_cell_patch  Attribute: cells 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Explicitly_defined_cell_patch.cells"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Explicitly_defined_cell_patch.cells">
 the collection of vertex defined cells.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Explicitly_defined_vertex_patch  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Explicitly_defined_vertex_patch"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Explicitly_defined_vertex_patch">
        An  <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Explicitly_defined_vertex_patch"/> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Patch" /> that is a patch that consists of vertices and that is defined
by listing them.

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Explicitly_defined_vertex_patch  Attribute: vertices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Explicitly_defined_vertex_patch.vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Explicitly_defined_vertex_patch.vertices">
 the collection of vertex.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_list  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_list"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_list">
        An <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_list"/> is a
       list of indices into a multi-dimensional array.
      </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_list  Attribute: nindices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_list.nindices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_list.nindices">
 the number of indices required to map to a unique array location;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_list  Attribute: indices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_list.indices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_list.indices">
the indices.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_range  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_range"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_range">
        An <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_range"/> is the beginning and ending indices of a subrange in a multi-dimensional array.
      </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_range  Attribute: nindices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_range.nindices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_range.nindices">
 the number of indices required to map to a unique array location;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_range  Attribute: start 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_range.start"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_range.start">
the indices of the minimal corner of the subrange;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_range  Attribute: finish 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_range.finish"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_range.finish">
the indices of the maximal corner of the subrange.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh">
        A <b>Mesh</b> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_representation_item" />
        consisting of one or more cells. The mesh is
the basis of all mesh topology representations. There are several ways of representing a mesh.

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh  Attribute: description 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh.description"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh.description">
        the text that provides further information about the <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh"/>.
      </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh  Attribute: index_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh.index_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh.index_count">
the number of indices required to identify uniquely a vertex or cell in the mesh.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh_derived_maths_space  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh_derived_maths_space">
        A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space"/> is a type of
        <express_ref linkend="maths_space:arm:Maths_space_arm.Maths_space" /> that associates data values and a mesh.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh_derived_maths_space  Attribute: description 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space.description"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh_derived_maths_space.description">
        the text that provides further information about the <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space"/>.
      </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh_derived_maths_space  Attribute: name 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space.name"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh_derived_maths_space.name">
        the words by which the <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space"/> is known. 
      </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh_derived_maths_space  Attribute: id 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space.id"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh_derived_maths_space.id">
       the identifier for the <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space"/>.        
      </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh_derived_maths_space  Attribute: the_mesh 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space.the_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh_derived_maths_space.the_mesh">
the mesh
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh_derived_maths_space  Attribute: kind 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space.kind"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh_derived_maths_space.kind">
the kind of association
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Patch  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Patch"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Patch">
        A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Patch"/> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh" /> that is a collection of one or more cells or one or more vertices. The cells are not necessarily connected.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Product_of_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Product_of_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Product_of_mesh">
       <p> A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Product_of_mesh"/> is a relationship that is between:</p>
<ul>
<li>two operands that are a 1-dimensional mesh and an n-dimensional mesh; and</li>
<li>a product that is an (n + 1)-dimensional mesh,</li>
</ul>
<p>that indicates the (n + 1)-dimensional mesh is the Cartesian product of the operands.
The ordering of cells and vertices of the product mesh is:</p>
<ul>
<li>cell i + n(j - 1) of the product mesh corresponds to cell i of the first operand and cell j of the second operand, where n is the total number of cells of the first operand;</li>
<li>vertex i + m(j - 1) of the product mesh corresponds to vertex i of the first operand, and </li>
<li>vertex j of the second operand, where m is the total number of vertices of the first operand.</li>
</ul>
      </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Product_of_mesh  Attribute: operands 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Product_of_mesh.operands"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Product_of_mesh.operands">
the two meshes that define the product;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Product_of_mesh  Attribute: product 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Product_of_mesh.product"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Product_of_mesh.product">
the mesh that is the Cartesian product of the operands.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Product_of_mesh  Where: wr1 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Product_of_mesh.wr:wr1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Product_of_mesh.wr:wr1">
all meshes shall be structured meshes;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Product_of_mesh  Where: wr2 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Product_of_mesh.wr:wr2"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Product_of_mesh.wr:wr2">
 the first operand shall have an index count of one;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Product_of_mesh  Where: wr3 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Product_of_mesh.wr:wr3"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Product_of_mesh.wr:wr3">
the index count of the product shall equal the sum of the index counts of the operands.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Property_distribution_description  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Property_distribution_description"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Property_distribution_description">
        A <b>Property_distribution_description</b> is a
      </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Property_distribution_description  Attribute: id 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Property_distribution_description.id"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Property_distribution_description.id">
       the identifier for the <b>Property_distribution_description</b>.        
      </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Property_distribution_description  Attribute: name 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Property_distribution_description.name"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Property_distribution_description.name">
        the words by which the <b>Property_distribution_description</b> is known. 
      </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Property_distribution_description  Attribute: description 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Property_distribution_description.description"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Property_distribution_description.description">
        the text that provides further information about the <b>Property_distribution_description</b>.
      
      The value of this attribute need not be specified.
    </ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Rind  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Rind"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Rind">
        A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Rind"/> describes the number of rind planes associated with a structured mesh.
      </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Rind  Attribute: index_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Rind.index_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Rind.index_count">
the number of indices required to reference a vertex
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Rind  Attribute: planes 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Rind.planes"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Rind.planes">
<p>contains the number of rind planes attached to the minimum and maximum faces of a structured mesh. The face corresponding to each index n of planes in 3-D is:</p>
<ul>
<li>n = 1 -&gt; i-min n = 2 -&gt; i-max</li>
<li>n = 3 -&gt; j-min n = 4 -&gt; j-max</li>
<li>n = 5 -&gt; k-min n = 6 -&gt; k-max</li>
</ul>

<example number="1"><p>For a 3D grid whose core size is II*JJ*KK, a value of planes = [a,b,c,d,e,f]
indicates that the range of indices for the grid with this rind is:</p><ul>
<li>i: (1 - a, II + b)</li>
<li>j: (1 - c, JJ + d)</li>
<li>k: (1 - e, KK + f)</li>
</ul>
</example>
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Structured_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Structured_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Structured_mesh">
        A <b>Structured_mesh</b> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh" />
        that has a regular topology. A structured mesh has a parametric coordinate
system; the parametric coordinate systems for one- two-, and three-dimensional structured meshes are shown in Figure 11 through Figure 13.

For each cell within a structured mesh, the parametric coordinate system for that cell is
identical to the parametric coordinate system for the mesh, except for an origin shift. The
parametric coordinates of vertex (i, j, k) in a 3-D mesh with n, m and p cells in the 3 dimensions are:
((i - 1)/n, (j - 1)/m, (k - 1)/p)

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Structured_mesh  Attribute: vertex_counts 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Structured_mesh.vertex_counts"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Structured_mesh.vertex_counts">
he number of vertices in each dimension of the mesh. The product of the
array elements is the number of vertices defining the mesh (i.e., excluding any rind points). The number of vertices in one- two- and three-dimensional regular mesh topologies is given in Figure X, where i, j and k correspond to the array elements vertex counts[1], vertex counts[2] and vertex counts[3], respectively.

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Structured_mesh  Attribute: kind 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Structured_mesh.kind"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Structured_mesh.kind">
the kind of mesh
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Structured_mesh_with_rind  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Structured_mesh_with_rind"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Structured_mesh_with_rind">
        A <b>Structured_mesh_with_rind</b> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Structured_mesh" /> with specified rind planes.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Structured_mesh_with_rind  Attribute: rind_planes 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Structured_mesh_with_rind.rind_planes"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Structured_mesh_with_rind.rind_planes">
the rind planes associated with the mesh.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Topological_region  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_region"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Topological_region">
        A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_region"/> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_representation_item" />
 that is a continuous point set
with a single topological dimension.

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Topological_region  Attribute: description 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_region.description"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Topological_region.description">
        the text that provides further information about the <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_region"/>.
      </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Topological_region  Attribute: dimension 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_region.dimension"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Topological_region.dimension">
 the topological dimension of the region.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Topological_region_with_boundary  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_region_with_boundary"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Topological_region_with_boundary">
        A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_region_with_boundary"/> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_region" />
that has a specified boundary.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Topological_region_with_boundary  Attribute: boundary 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_region_with_boundary.boundary"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Topological_region_with_boundary.boundary">
the elements forming the boundary of the region.</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Topological_representation_item  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_representation_item"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Topological_representation_item">
        A <b>Topological_representation_item</b> is a type of
        <express_ref linkend="elemental_topology:arm:Elemental_topology_arm.Detailed_topological_model_element" />
        
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Unstructured_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Unstructured_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Unstructured_mesh">
        An <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Unstructured_mesh"/> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh" />
        where the topology need not be regular and the cell shapes are not restrained. It conceptually consists of the vertices of the mesh and the cells forming the volume of the mesh. The cells shall all be connected by each cell having at least one vertex in common with another cell. The shape of each cell in an unstructured mesh is explicitly specified.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Unstructured_mesh  Attribute: cell_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Unstructured_mesh.cell_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Unstructured_mesh.cell_count">
 the number of cells in the mesh.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex">
        A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex"/> is a type of
        <express_ref linkend="elemental_topology:arm:Elemental_topology_arm.Detailed_topological_model_element" />

</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell">
        A <b>Vertex_defined_cell</b> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Topological_region" />
 that is bounded by vertices; the number of
vertices depends on the topological shape of the cell. The cell may have interior nodes; the maximum number of interior nodes depends on both the shape and the order of the cell.

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: shape 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.shape"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.shape">
 the topological shape of the cell;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: order 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.order"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.order">
 the order of the cell geometric interpolation;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: vertices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.vertices">
  the the cell vertices and edge nodes. The position of a vertex or an edge node in the array depends on the shape of the cell as established graphically in Figures 10 through 39 in ISO 10303-104, noting that a polygon cell is a generalisation of the triangle and quadrilateral cells.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: bound_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.bound_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.bound_count">
the number of cell bounding vertices; it is determined by the value of shape;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: edge_node_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.edge_node_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.edge_node_count">
 the number of interior cell nodes located on the cell edges; it is determined by the combination of the values of shape and order;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: opt_node_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.opt_node_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.opt_node_count">
 the potential number of interior cell nodes which are not located on the cell
edges; it is determined by the combination of the values of shape and order;

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: required_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.required_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.required_count">
 the total number of bounding vertices plus the number of edge nodes;
vn count: the total number of bounding vertices plus the number of nodes (both edge and non-dege nodes);

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: vn_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.vn_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.vn_count">
 the vertices and nodes excluding any non-edge interior nodes. There shall be required count of these.

</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_range_defined_patch  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_range_defined_patch"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_range_defined_patch">
       
        A <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_range_defined_patch"/> is a type of
        <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Patch" />
        that consists of cells and that is defined by specifying a vertex range within a structured mesh.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_range_defined_patch  Attribute: base_mesh 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_range_defined_patch.base_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_range_defined_patch.base_mesh">
the structured mesh;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_range_defined_patch  Attribute: range 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_range_defined_patch.range"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_range_defined_patch.range">
the vertex range.</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Function: all_mesh_vertices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.all_mesh_vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.all_mesh_vertices">
The function all mesh vertices takes an array based unstructured mesh and vertices
as its argument and returns TRUE if the members of the vertices attribute are exactly the
vertices in the mesh.

</ext_description>
<ext_description linkend="Mesh_topology_arm.all_mesh_vertices.arg">
	an array based unstructured mesh and vertices;
	</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Function: cell_counts 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_counts"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_counts">
The function cell counts takes a vertex defined cell as its argument and returns the numbers of vertices and nodes required to define the cell.
</ext_description>
<ext_description linkend="Mesh_topology_arm.cell_counts.arg">
	 a cell;
	</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Function: this_schema 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.this_schema"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.this_schema">
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Subtype constraint: sc1_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.sc1_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.sc1_mesh">
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Subtype constraint: sc1_patch  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.sc1_patch"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.sc1_patch">
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Subtype constraint: sc1_topological_region  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.sc1_topological_region"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.sc1_topological_region">
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Subtype constraint: sc1_unstructured_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.sc1_unstructured_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.sc1_unstructured_mesh">
</ext_description>
</ext_descriptions>
