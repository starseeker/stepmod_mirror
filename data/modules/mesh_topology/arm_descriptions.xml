<?xml version="1.0"?>
<?xml-stylesheet 
  type="text/xsl" 
  href="../../../xsl/descriptions.xsl"?>
<!DOCTYPE ext_descriptions SYSTEM "../../../dtd/description.dtd">
<ext_descriptions module_directory="mesh_topology" schema_file="arm.xml" describe.selects="YES" describe.subtype_constraints="YES" rcs.date="$Date: 2009/12/16 18:50:44 $" rcs.revision="$Revision: 1.11 $">
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Schema: Mesh_topology_arm
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<ext_description linkend="Mesh_topology_arm">
	A mesh is defined by its vertices and the connections between the vertices. A mesh is a connected graph.
<p><b><i>Structured mesh</i></b></p>
<p>
	In a structured mesh the cells are arranged in a regular pattern and their shapes are implied by the
	particular kind of mesh.
</p>
<p>
	A 3–D rectangular mesh is a mesh of hexahedral cells.
	Each cell is a dimensionality 3 hexahedral region defined by eight vertices forming the corners of the hexahedron.
	Each cell is bounded by six faces, where each face is the quadrilateral defined by four vertices.
	A face is limited by the four edges that connect the four vertices.
</p>
	<figure id="example_convention_for_2d_cell_centre" number="1">
	  <title>Example convention for a 2-D cell centre</title>
	  <img src="example_convention_for_2d_cell_centre.gif"/>
	</figure>
	<figure id="example_mesh_with_rind_vertices" number="2">
	  <title>Example mesh with rind vertices</title>
	  <img src="example_mesh_with_rind_vertices.gif"/>
	</figure>
<p>
	A 2–D rectangular mesh is a mesh of quadrilaterals.
	Each cell is a dimensionality two quadrilateral region defined by four vertices forming the corners of the quadrilateral.
	Each cell is limited by the four edges that connect the four vertices.
</p>
<p>
	A 1–D mesh is of linear form. Each cell is a dimensionality one linear region bounded by two vertices.
</p>
<p>
	Indices describing a structured mesh are ordered: for 3–D (<i>i, j, k</i>); (<i>i, j</i>) is used for 2–D; and (<i>i</i>) for 1–D.
</p>
<p>
	Cell centres, face centres, and edge centres are indexed by the minimum of the connecting vertices.
</p>
<example number="1">
	For example a 2-D cell center (or face centre on a 3-D mesh) would have the conventions shown in Figure 1.
</example>
<p>
	In addition, the default beginning vertex for a regular mesh is (1, 1, 1); this means the default beginning cell centre 
	of a regular mesh is also (1, 1, 1).
</p>
<p>
	There may be locations outside the mesh itself.
	These are referred to as 'rind' or ghost points and may be associated with fictitious vertices or cell centres.
	They are distinguished from the vertices and cells making up the mesh (including its boundary vertices), 
	which are referred to as 'core' points.
</p>
<example number="2">
	Figure 2 shows a 2–D mesh with a single row of 'rind' vertices at the minimum and maximum <i>i</i>-faces.
</example>
<p>
	The mesh size (i.e., the number of 'core' vertices in each direction) is 5&#215;4.
	'Core' vertices are designated by '&#8226;', and 'rind' vertices by '&#215;'.  
	Default indexing is also shown for the vertices.
</p>
<p>
	For a mesh, the minimum faces in each coordinate direction are denoted <i>i</i>-min, <i>j</i>-min and <i>k</i>-min; 
	the maximum faces are denoted <i>i</i>-max, <i>j</i>-max and <i>k</i>-max.
	These are the minimum and maximum 'core' faces.
</p>
<example number="3">
	<i>i</i>-min is the face or mesh plane whose core vertices have minimum <i>i</i> index (which if using default indexing is 1).
</example>

<p><b><i>Unstructured mesh</i></b></p>
<p>
	An unstructured mesh is composed of cells, where the cells need not form a regular pattern and the shape
	of the cells is not restricted to be uniform throughout the mesh.
	Cells have vertices at their corners and may also have nodes on cell edges, cell faces, and in the interior of the cell.
</p>
<p>
	Each cell in an irregular mesh has at least one vertex in common with at least one other cell in the mesh.
	The connectivity and adjacency of the cells may be determined from the common vertices.
</p>
<p>
	Each cell in an unstructured mesh is explicitly represented in terms of its shape and an ordered list of its vertices.
	The vertices are implied rather than being explicitly represented.
	Essentially all the vertices in a mesh can be mapped to a sequential list, 
	and reference to a vertex is then equivalent to specifying the particular position in the list.
</p>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Type: cell_shape 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape">
	A <b>cell_shape</b> is an identifier of an unstructured mesh cell shape.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_0D 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_0D"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_0d">
	A <b>cell_shape_0d</b> is an identifier of a topologically 0–D unstructured mesh cell shape.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_0D  Item: single 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_0D.single"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_0d.single">
	a singleton vertex.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_1D 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_1D"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_1d">
	A <b>cell_shape_1d</b> is an identifier of a topologically 1-D unstructured mesh cell shape.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_1D  Item: line 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_1D.line"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_1d.line">
	a topological line requiring 2 vertices.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_2D 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_2D"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_2d">
	A <b>cell_shape_2d</b> is an identifier of a topologically 2-D unstructured mesh cell shape.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_2D  Item: quadrilateral 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_2D.quadrilateral"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_2d.quadrilateral">
	four sided cell requiring 4 vertices;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_2D  Item: triangle 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_2D.triangle"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_2d.triangle">
	<p>three sided cell requiring 3 vertices.</p>
	<note number="1">
		This type is defined as EXTENSIBLE to enable other 2D cell shapes to be added to the list as required by particular applications.
	</note>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_2D  Item: polygon 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_2D.polygon"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  
<ext_description linkend="Mesh_topology_arm.cell_shape_2d.polygon">
topologically polygonal (n-sided) requiring a minimum of 3 vertices;
</ext_description> -->

<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_3D 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_3D"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_3d">
	A <b>cell_shape_3d</b> is an identifier of a topologically 3-D unstructured mesh cell shape.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_3D  Item: hexahedron 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_3D.hexahedron"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_3d.hexahedron">
	hexahedral (six quadrilateral faces) requiring 8 vertices;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_3D  Item: wedge 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_3D.wedge"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_3d.wedge">
	pentahedral (three quadrilateral faces and two triangular faces) requiring 6 vertices;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_3D  Item: tetrahedron 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_3D.tetrahedron"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_3d.tetrahedron">
	tetrahedral form (four triangular faces) requiring 4 vertices;

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: cell_shape_3D  Item: pyramid 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_3D.pyramid"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_shape_3d.pyramid">
<p>
	pyramidal (one quadrilateral face and four triangular faces) requiring 5 vertices.
</p>
	<note number="1">
		This type is defined as EXTENSIBLE to enable other 3D cell shapes to be added to the list as required by particular applications.
	</note>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: element_order 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.element_order"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.element_order">
	An  <b>element_order</b> specifies the allowable geometric order of the element interpolation functions of a finite element.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: element_order  Item: linear 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.element_order.linear"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.element_order.linear">
	the element basic interpolation order is linear;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: element_order  Item: quadratic 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.element_order.quadratic"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.element_order.quadratic">
	the element basic interpolation order is quadratic;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: element_order  Item: cubic 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.element_order.cubic"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.element_order.cubic">
	the element basic interpolation order is cubic.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Type: indices_group 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.indices_group"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.indices_group">
	An <b>indices_group</b> is a selection of a group of indices into a multi-dimensional array.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location">
	A <b>mesh_location</b> is an enumeration of locations with respect to a mesh.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: unspecified 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.unspecified"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.unspecified">
	not specified;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: application_defined 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.application_defined"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.application_defined">
	specified via an external agreement between the data creator and the data user;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: vertices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.vertices">
	at cell vertices for cells within the mesh;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: cell_centre 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.cell_centre"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.cell_centre">
	the center of a cell; 
	this is also appropriate for entities associated with cells but not necessarily with a given location in a cell;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: face_centre 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.face_centre"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.face_centre">
	the center of a generic face which can point in any coordinate direction;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: iface_centre 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.iface_centre"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.iface_centre">
	the center of a face in 3-D whose computational normal points in the <i>i</i> direction;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: jface_centre 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.jface_centre"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.jface_centre">
	the center of a face in 3-D whose computational normal points in the <i>j</i> direction;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: kface_centre 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.kface_centre"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.kface_centre">
	the center of a face in 3-D whose computational normal points in the <i>k</i> direction;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_location  Item: edge_centre 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_location.edge_centre"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_location.edge_centre">
	the center of an edge.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_maths_space_type 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_maths_space_type"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_maths_space_type">
	A <b>mesh_maths_space_type</b> is an enumeration of the kinds of associations of a 
	 <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space"/> 
	and a 
	 <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh"/>.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_maths_space_type  Item: cells 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_maths_space_type.cells"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_maths_space_type.cells">
	data is associated with mesh cells;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: mesh_maths_space_type  Item: vertices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.mesh_maths_space_type.vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.mesh_maths_space_type.vertices">
	data is associated with mesh vertices.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: structured_mesh_type 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.structured_mesh_type"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.structured_mesh_type">
	A <b>structured_mesh_type</b> is an enumeration of the kinds of structured meshes.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: structured_mesh_type  Item: rectangular 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.structured_mesh_type.rectangular"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.structured_mesh_type.rectangular">
	<p>
		a structured mesh that is topologically linear in 1-D, quadrilateral in 2-D, and hedral in 3-D, etc.
	</p>
	<p>
		In 2–D the cells are all quadrilateral. 
		In 3–D the cells are all hexahedral.
	</p>
	<note number="1">
		Illustrations of rectangular mesh topologies are shown in Figure 3, Figure 4 and Figure 5.
	</note>
	<figure id="1d_structured_mesh_type" number="3">
	  <title>A 1-D rectangular mesh or pentahedral mesh or pyramidal mesh or tetrahedral mesh (with i = 5)</title>
	  <img src="1d_structured_mesh_type.gif"/>
	</figure>
	<figure id="2d_rectangular_mesh" number="4">
	  <title>A 2-D rectangular mesh (with i = 5, j = 4)</title>
	  <img src="2d_rectangular_mesh.gif"/>
	</figure>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: structured_mesh_type  Item: pentahedral 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.structured_mesh_type.pentahedral"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.structured_mesh_type.pentahedral">
<p>
	a structured mesh that is topologically linear in 1-D, triangular in 2-D, and pentahedral, with 2 triangular and 
	3 quadrilateral faces forming a wedge-like shape, in 3-D 
	(where one of the edges between a pair of rectangular faces is analogous to the axis of a sector of a cylinder).
</p>
<p>
	It is convenient to think of this kind of mesh as like a sector of a circle in 2–D where one apex point is
	anolagous to the centre point of the circle, and like a sector of a cylinder in 3–D where one of the edges
	between a pair of rectangular faces is analogous to the axis of the cylinder.
</p>  
<p>
	In 2–D the cells adjacent to the apex are triangular; the rest are quadrilateral.
</p>
<p>
	In 3–D the cells adjacent to the axis edge are pentahedral; the rest are hexahedral.
</p>
<note number="2">
	Illustrations of pentahedral mesh topologies are shown in Figure 3, Figure 6 and Figure 7.
</note>
<figure id="3_d_rectangular_mesh" number="5">
	  <title>A 3-D rectangular mesh (with i = 5, j = 4, k = 3)</title>
	  <img src="3_d_rectangular_mesh.gif"/>
</figure>
<figure id="2d_pentahedral_mesh" number="6">
	  <title>A 2-D pentahedral mesh or pyramidal mesh or tetrahedral mesh (with i = 5, j = 4)</title>
	  <img src="2d_pentahedral_mesh.gif"/>
</figure>
<figure id="3d_pentahedral_mesh" number="7">
	  <title>A 3-D pentahedral mesh (with i = 5, j = 4, k = 3)</title>
	  <img src="3d_pentahedral_mesh.gif"/>
</figure>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: structured_mesh_type  Item: pyramidal 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.structured_mesh_type.pyramidal"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.structured_mesh_type.pyramidal">
<p>
	a structured mesh that is topologically linear in 1-D, triangular in 2-D, and pyramidal in 3-D.
</p>
<p>
	It is convenient to think of this kind of mesh as like a sector of a circle in 2–D where one apex point is
	analogous to the centre point of the circle, and like a sector of a sphere in 3–D where the apex point is
	analogous to the centre point of a sector of the sphere.
</p>
<p>
	In 2–D the cells adjacent to the apex are triangular; the rest are quadrilateral.
</p>
<p>
	In 3–D the cells adjacent to the apex are pyrimidal; the rest are hexahedral.
</p>
<note number="3">
	Illustrations of pyramidal mesh topologies are shown in Figure 3, Figure 6 and Figure 8.
</note>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Enumeration: structured_mesh_type  Item: tetrahedral 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.structured_mesh_type.tetrahedral"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.structured_mesh_type.tetrahedral">
<p>
	a structured mesh that is topologically linear in 1-D, triangular in 2-D, and tetrahedral in 3-D.
</p>
<!-- 
<p>
	It is convenient to think of this kind of mesh as like a sector of a circle in 2–D where one apex point is
	analogous to the centre point of the circle, and like
</p>
 -->
<figure id="3d_pyramidak_mesh" number="8">
	  <title>A 3-D pyramidal mesh (with i = 5, j = 4, k = 3)</title>
	  <img src="3d_pyramidak_mesh.gif"/>
</figure>
<figure id="3d_tetrahedral_mesh" number="9">
	  <title>A 3-D tetrahedral mesh (with i = 5, j = 4, k = 3)</title>
	  <img src="3d_tetrahedral_mesh.gif"/>
</figure>
<p>
	In 2–D the cells adjacent to the apex are triangular; the remainder are quadrilateral.
</p>
<p>
	In 3–D the cells adjacent to the apex are tetrahedral and the cells adjacent to one edge from the apex are pentahedral; 
	the remainder are hexahedral.
</p>
<note number="4">
	Illustrations of tetrahedral mesh topologies are shown in Figure 3, Figure 6 and Figure 9.
</note>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh">
	An <b>Array_based_unstructured_mesh</b> is a type of
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Unstructured_mesh" />
	that is a representation of an unstructured mesh designed
	to minimise the amount of data by not requiring explicit identification of the vertices of the cells in the mesh.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh  Attribute: cells 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh.cells"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh.cells">
	the 
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Unstructured_mesh">Vertex_defined_cells</express_ref> 
	forming the mesh.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh  Where: WR1 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh.wr:WR1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh.wr:WR1">
	The value of 
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh.index_count"/> 
	shall be 1.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh_and_vertices  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices">
	An <b>Array_based_unstructured_mesh_and_vertices</b> is a type of 
    <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh" />
	where the vertices of the mesh are explicity identified and ordered.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh_and_vertices  Attribute: vertex_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices.vertex_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices.vertex_count">
	the number of unique 
	<express_ref linkend="Elemental_topology:arm:Elemental_topology_arm.Vertex" /> 
	in the mesh.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh_and_vertices  Attribute: vertices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices.vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices.vertices">
	an array of the unique 
	<express_ref linkend="Elemental_topology:arm:Elemental_topology_arm.Vertex"></express_ref>s 
	in the mesh
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Array_based_unstructured_mesh_and_vertices  Where: WR1 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices.wr:WR1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices.wr:WR1">
	The elements of <b>vertices</b> shall be all and only the unique vertices in the mesh.
</ext_description>

<!-- +++++++++++ Cell +++++++++++ -->
<ext_description linkend="Mesh_topology_arm.Cell">
	A <b>Cell</b> is a type of
	<express_ref linkend="Elemental_topology:arm:Elemental_topology_arm.Detailed_topological_model_element"/>
	that is a manifold with a boundary.
	A <b>Cell</b> may be either a
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Cell_of_structured_mesh"/>
	or a
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell"/>.
</ext_description>

<!-- description -->
<ext_description linkend="Mesh_topology_arm.Cell.description">
	annotation.
</ext_description>

<!-- dimension -->
<ext_description linkend="Mesh_topology_arm.Cell.dimension">
	the topological dimension of the region.
</ext_description>

<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Cell_of_structured_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Cell_of_structured_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Cell_of_structured_mesh">
	A <b>Cell_of_structured_mesh</b> is a type of
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Cell" /> 
	that is an identified cell of a structured mesh.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Cell_of_structured_mesh  Attribute: the_mesh 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Cell_of_structured_mesh.the_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Cell_of_structured_mesh.the_mesh">
	the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Structured_mesh"/>.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Cell_of_structured_mesh  Attribute: cell_identifier 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Cell_of_structured_mesh.cell_identifier"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Cell_of_structured_mesh.cell_identifier">
	the indices of the cell.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Cell_of_structured_mesh  Attribute: index_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Cell_of_structured_mesh.index_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Cell_of_structured_mesh.index_count">
	the number of indices required to uniquely identify a vertex or cell in the mesh.
</ext_description>

<!-- +++++++++++ Cell_with_explicit_boundary +++++++++++ -->
<ext_description linkend="Mesh_topology_arm.Cell_with_explicit_boundary">
	A <b>Cell_with_explicit_boundary</b> is a type of
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Cell"/>
	that has a specified boundary.	
</ext_description>

<!-- boundary -->
<ext_description linkend="Mesh_topology_arm.Cell_with_explicit_boundary.boundary">
	the elements forming the boundary of the region.
</ext_description>

<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Explicit_unstructured_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Explicit_unstructured_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Explicit_unstructured_mesh">
	An <b>Explicit_unstructured_mesh</b> is a type of
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Unstructured_mesh" /> 
	that is a representation of an unstructured mesh that is similar,
	but not entirely identical to, that specified in ISO 10303-104.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Explicit_unstructured_mesh  Attribute: explicit_model 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Explicit_unstructured_mesh.explicit_model"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Explicit_unstructured_mesh.explicit_model">
	the finite element model.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Explicit_unstructured_mesh  Attribute: cells 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Explicit_unstructured_mesh.cells"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Explicit_unstructured_mesh.cells">
	the set of 
	<express_ref linkend="Finite_elements:arm:Finite_elements_arm.Element"/>s
	comprising the mesh.
</ext_description>

<!-- IP1 -->
<ext_description linkend="Mesh_topology_arm.Explicit_unstructured_mesh.wr:IP1">
	Every 
	<express_ref linkend="Finite_elements:arm:Finite_elements_arm.Element"/> 
	in the <b>cells</b> shall belong to the <b>explicit_model</b>.
</ext_description>

<!-- +++++++++++ Extraction_of_structured_submesh +++++++++++ -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_structured_submesh">
	An <b>Extraction_of_structured_submesh</b> is a type of
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh"/> 
	and is a relationship between two 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Structured_mesh">Structured_meshes</express_ref> 
	that indicates one is part of the other.
</ext_description>

<!-- lower_vertex -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_structured_submesh.lower_vertex">
	the position of the 
	<express_ref linkend="Elemental_topology:arm:Elemental_topology_arm.Vertex"/> 
	in the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.whole"/> 
	that is the origin of the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.part"/>.
	This is specified with respect to each index of the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.whole"/>.
</ext_description>

<!-- used_indices -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_structured_submesh.used_indices">
	the indices of the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.whole"/> 
	that are also indices of the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.part"/> 
	in the order that they are used in the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.part"/>.
</ext_description>

<!-- used_senses -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_structured_submesh.used_senses">
<p>
	the sense for each index of 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.part"/> 
	as:
</p>
	<ul>
		<li>
			TRUE if the 
			<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.part"/> 
			uses the index of the 
			<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.whole"/> 
			in the same direction;
		</li>
		<li>
			FALSE if the 
			<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.part"/> 
			uses the index of the 
			<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.whole"/> 
			in the reverse direction.</li>
	</ul>
</ext_description>

<!-- whole_indices -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_structured_submesh.whole_indices">
	the number of indices required to uniquely identify a vertex or cell in the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.whole"/>.
</ext_description>

<!-- part_indices -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_structured_submesh.part_indices">
	the number of indices required to uniquely identify a vertex or cell in the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.part"/>.
</ext_description>

<!-- WR1 -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_structured_submesh.wr:WR1">
	The 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh"/> 
	referenced as 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.whole"/> 
	shall be of type 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Structured_mesh"/>.
</ext_description>

<!-- WR2 -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_structured_submesh.wr:WR2">
	The 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Submesh"/> 
	referenced as 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh.part"/> 
	shall be of type 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Structured_mesh"/>.
</ext_description>

<!-- +++++++++++ Extraction_of_submesh +++++++++++ -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_submesh">
	An <b>Extraction_of_submesh</b> is a relationship between a 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh"/>
	and a 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Submesh"/>
	that defines the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Submesh"/> 
	as being part of the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh"/>.
</ext_description>

<!-- whole -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_submesh.whole">
	the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh"/> 
	from which the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Submesh"/> 
	is extracted.
</ext_description>

<!-- part -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_submesh.part">
	the resulting 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Submesh"/>.
</ext_description>

<!-- +++++++++++ Extraction_of_submesh_by_cells +++++++++++ -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_submesh_by_cells">
	An <b>Extraction_of_submesh_by_cells</b> is a type of
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh"/>
	that extracts a submesh by listing the cells.
</ext_description>

<!-- cell_count -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_submesh_by_cells.cell_count">
	the number of cells extracted to form the submesh.
</ext_description>

<!-- cells -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_submesh_by_cells.cells">
	the collection of 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Cell"/>s 
	defining the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Submesh"/>.
</ext_description>

<!-- +++++++++++ Extraction_of_submesh_by_vertices +++++++++++ -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_submesh_by_vertices">
<p>
	An <b>Extraction_of_submesh_by_vertices</b> is a type of
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh"/>
	that extracts a submesh by listing the vertices.
</p>
	<note number="1">
		A submesh of lower topological dimension than the parent (whole) mesh can be specified by 
		<b>Extraction_of_submesh_by_vertices</b>.
	</note>
</ext_description>

<!-- vertex_count -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_submesh_by_vertices.vertex_count">
	the number of vertices extracted to form the submesh.
</ext_description>

<!-- vertices -->
<ext_description linkend="Mesh_topology_arm.Extraction_of_submesh_by_vertices.vertices">
	the collection of 
	<express_ref linkend="Elemental_topology:arm:Elemental_topology_arm.Vertex"/>s 
	defining the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Submesh"/>.
</ext_description>


<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_list  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_list"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_list">
	An <b>Indices_list</b> is a list of indices into a multi-dimensional array.
 </ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_list  Attribute: nindices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_list.nindices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_list.nindices">
	the number of indices required to map to a unique array location.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_list  Attribute: indices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_list.indices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_list.indices">
	the indices.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_range  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_range"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_range">
	An <b>Indices_range</b> is the beginning and ending indices of a subrange in a multi-dimensional array.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_range  Attribute: nindices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_range.nindices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_range.nindices">
	the number of indices required to map to a unique array location.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_range  Attribute: start 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_range.start"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_range.start">
	the indices of the minimal corner of the subrange.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Indices_range  Attribute: finish 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Indices_range.finish"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Indices_range.finish">
	the indices of the maximal corner of the subrange.
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh">
	A <b>Mesh</b> is a type of
	<express_ref linkend="Elemental_topology:arm:Elemental_topology_arm.Detailed_topological_model_element" />
	consisting of one or more cells. 
	The <b>Mesh</b> is the basis of all mesh topology representations. 
	There are several ways of representing a mesh.
	A <b>Mesh</b> is either a
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Structured_mesh" />
	or an 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Unstructured_mesh" />
	or a
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Submesh" />
	or a
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Structured_mesh" />
	and a
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Submesh" />
	or an
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Unstructured_mesh" />
	and a
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Submesh" />.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh  Attribute: description 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh.description"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh.description">
	annotation.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh  Attribute: index_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh.index_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh.index_count">
<p>
	the number of indices required to identify uniquely a vertex or cell in the mesh.
</p>
	<note number="1">
		It inherits a 
		<express_ref linkend="Foundation_representation:arm:Foundation_representation_arm.Representation_item.name" /> 
		attribute of type 
		<express_ref linkend="Support_resource:arm:Support_resource_arm.label" /> 
		via its 
		<express_ref linkend="Elemental_topology:arm:Elemental_topology_arm.Detailed_topological_model_element" /> 
		supertype.
	</note>
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh_derived_maths_space  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh_derived_maths_space">
<p>
	A <b>Mesh_derived_maths_space</b> is a type of
	<express_ref linkend="maths_space:arm:Maths_space_arm.Maths_space" /> 
	that associates data values and a 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh" />.
</p>
<note>
	The association commences with the 
	<express_ref linkend="Mesh_connectivity:arm:Mesh_connectivity_arm.Property_distribution_description" /> 
	entity whose 
	<express_ref linkend="Mesh_connectivity:arm:Mesh_connectivity_arm.Property_distribution_description.physical_function" />
	attribute is of type 
	<express_ref linkend="Mesh_connectivity:arm:Mesh_connectivity_arm.property_distribution_select" /> 
	(a table function in this case) whose 
	<express_ref linkend="Analysis:arm:Analysis_arm.Model_property_distribution.range" /> 
	and 
	<express_ref linkend="Analysis:arm:Analysis_arm.Model_property_distribution.domain" /> 
	are of type 
	<express_ref linkend="maths_space:arm:Maths_space_arm.Maths_space" />, 
	and hence to a 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh" />.
</note>	
</ext_description>

<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh_derived_maths_space  Attribute: id 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space.id"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh_derived_maths_space.id">
	an identifier.        
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh_derived_maths_space  Attribute: name 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space.name"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh_derived_maths_space.name">
	a user interpretable identifier.
</ext_description>

<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh_derived_maths_space  Attribute: description 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space.description"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh_derived_maths_space.description">
	annotation.
</ext_description>

<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh_derived_maths_space  Attribute: the_mesh 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space.the_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh_derived_maths_space.the_mesh">
	the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh" />.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Mesh_derived_maths_space  Attribute: kind 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh_derived_maths_space.kind"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Mesh_derived_maths_space.kind">
	the kind of association.
</ext_description>

<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Product_of_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Product_of_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Product_of_mesh">
<p> A <b>Product_of_mesh</b> is a relationship that is between:</p>
	<ul>
		<li>
			two operands that are a 1-dimensional 
			<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh" /> 
			and an <i>n</i>-dimensional 
			<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh" />; 
			and
		</li>
		<li>
			a product that is an (<i>n</i> + 1)-dimensional 
			<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh" />,
		</li>
	</ul>
<p>
	that indicates the (<i>n</i> + 1)-dimensional 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh" /> 
	is the Cartesian product of the operands.
</p>
<p>
	The ordering of cells and vertices of the product 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh" /> 
	is:
</p>
	<ul>
		<li>
			cell <i>i</i> + <i>n</i>(<i>j</i> - 1) of the product mesh corresponds to cell <i>i</i> of the first operand and 
			cell <i>j</i> of the second operand, where <i>n</i> is the total number of cells of the first operand;
		</li>
		<li>
			vertex <i>i</i> + <i>m</i>(<i>j</i> - 1) of the product mesh corresponds to vertex <i>i</i> of the first operand, 
			and vertex <i>j</i> of the second operand, where <i>m</i> is the total number of vertices of the first operand.
		</li>
	</ul>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Product_of_mesh  Attribute: operands 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Product_of_mesh.operands"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Product_of_mesh.operands">
	the two 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh">Meshes</express_ref> 
	that define the <b>product</b>;
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Product_of_mesh  Attribute: product 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Product_of_mesh.product"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Product_of_mesh.product">
	the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh" /> 
	that is the Cartesian product of the <b>operands</b>.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Product_of_mesh  Where: WR1 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Product_of_mesh.wr:WR1"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Product_of_mesh.wr:WR1">
	All 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh">Meshes</express_ref> 
	shall be 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Structured_mesh">Structured_meshes</express_ref>.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Product_of_mesh  Where: WR2 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Product_of_mesh.wr:WR2"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Product_of_mesh.wr:WR2">
 	The first operand shall have an 
 	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh.index_count"/> 
 	of one.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Product_of_mesh  Where: WR3 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Product_of_mesh.wr:WR3"/>

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Product_of_mesh.wr:WR3">
	The 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh.index_count"/> 
	of the <b>product</b> shall equal the sum of the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Mesh.index_count">index_counts</express_ref> 
	of the <b>operands</b>.
</ext_description>
 
 <!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Rind  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Rind"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Rind">
	A <b>Rind</b> is the number of rind planes associated with a structured mesh.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Rind  Attribute: index_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Rind.index_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Rind.index_count">
	the number of indices required to reference a vertex.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Rind  Attribute: planes 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Rind.planes"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Rind.planes">
<p>
	contains the number of rind planes attached to the minimum and maximum faces of a structured mesh. 
	The face corresponding to each index <i>n</i> of <b>planes</b> in 3-D is:
</p>

<p>&#160; &#160; &#160; &#160; &#160; &#160; <i>n</i> = 1 &#x27F6; <i>i</i>-min &#160; &#160; &#160; &#160; <i>n</i> = 2 &#x27F6; <i>i</i>-max</p> 
<p>&#160; &#160; &#160; &#160; &#160; &#160; <i>n</i> = 3 &#x27F6; <i>j</i>-min &#160; &#160; &#160; &#160; <i>n</i> = 4 &#x27F6; <i>j</i>-max</p>
<p>&#160; &#160; &#160; &#160; &#160; &#160; <i>n</i> = 5 &#x27F6; <i>k</i>-min &#160; &#160; &#160; &#160; <i>n</i> = 6 &#x27F6; <i>k</i>-max</p>


<example number="1">
	<p>
		For a 3D grid whose 'core' size is II&#215;JJ&#215;KK, a value of <b>planes</b> = [a,b,c,d,e,f]
		indicates that the range of indices for the grid with this rind is:
	</p>
	<p>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;	<i>i:</i> (1 - a, II + b)</p>
	<p>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;	<i>j:</i> (1 - c, JJ + d)</p>
	<p>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;	<i>k:</i> (1 - e, KK + f)</p>
</example>
</ext_description><!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Structured_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Structured_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Structured_mesh">
<p>
	A <b>Structured_mesh</b> is a type of
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh" />
	that has a regular topology. 
	A <b>Structured_mesh</b> has a parametric coordinate system; 
	the parametric coordinate systems for one- two-, and three-dimensional structured meshes are shown in Figure 10 through Figure 12.
</p>
<figure id="pcs_1d_structured_mesh" number="10">
	  <title>Parametric coordinate system for a 1-D structured mesh</title>
	  <img src="pcs_1d_structured_mesh.gif"/>
</figure>

<figure id="pcs_2d_structured_mesh" number="11">
	  <title>Parametric coordinate system for a 2-D structured mesh</title>
	  <img src="pcs_2d_structured_mesh.gif"/>
</figure>

<figure id="pcs_3d_structured_mesh" number="12">
	  <title>Parametric coordinate system for a 3-D structured mesh</title>
	  <img src="pcs_3d_structured_mesh.gif"/>
</figure>
<p>
	For each cell within a <b>Structured_mesh</b>, the parametric coordinate system for that cell is
	identical to the parametric coordinate system for the mesh, except for an origin shift. 
	The parametric coordinates of vertex (<i>i</i>, <i>j</i>, <i>k</i>) in a 3-D mesh with <i>n</i>, <i>m</i> and <i>p</i> 
	cells in the 3 dimensions are:
</p>
<p>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;	((<i>i</i> - 1)/<i>n</i>, (<i>j</i> - 1)/<i>m</i>, (<i>k</i> - 1)/<i>p</i>)</p>


</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Structured_mesh  Attribute: vertex_counts 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Structured_mesh.vertex_counts"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Structured_mesh.vertex_counts">
	the number of vertices in each dimension of the mesh. 
	The product of the array elements is the number of vertices defining the mesh (i.e., excluding any rind points). 
	The number of vertices in one- two- and three-dimensional regular mesh topologies is given in Table 1, where <i>i</i>, <i>j</i> and <i>k</i>
	correspond to the array elements <b>vertex_counts</b>[1], <b>vertex_counts</b>[2] and <b>vertex_counts</b>[3], respectively.
	
<table number="1" caption="Number of vertices in a Structured mesh">
	<tr>
		<th align="center">Index count</th>
		<th align="center">Rectangular</th>
		<th align="center">Pentahedral</th>
		<th align="center">Pyramidal</th>
		<th align="center">Tetrahedral</th>
	</tr> <!-- table header row -->
	<tr>
		<td align="center">1</td>
		<td align="center"><i>i</i></td>
		<td align="center"><i>i</i></td>
		<td align="center"><i>i</i></td>
		<td align="center"><i>i</i></td>
	</tr>
	<tr>
		<td align="center">2</td>
		<td align="center"><i>ij</i></td>
		<td align="center"><i>j</i>(<i>i</i> - 1) + 1</td>
		<td align="center"><i>j</i>(<i>i</i> - 1) + 1</td>
		<td align="center"><i>j</i>(<i>i</i> - 1) + 1</td>
	</tr>
	<tr>
		<td align="center">3</td>
		<td align="center"><i>ijk</i></td>
		<td align="center"><i>jk</i>(<i>i</i> - 1) + <i>k</i></td>
		<td align="center"><i>jk</i>(<i>i</i> - 1) + 1</td>
		<td align="center"><i>jk</i>(<i>i</i> - 1) - (<i>i</i> - 2)(<i>j</i> - 1)</td>
	</tr>
</table>
</ext_description>

<!-- cell_counts -->
<ext_description linkend="Mesh_topology_arm.Structured_mesh.cell_counts">
	the number of cells in each dimension of the mesh. 
	The product of the array elements is the number of cells on the interior of the mesh.
</ext_description>

<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Structured_mesh  Attribute: kind 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Structured_mesh.kind"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Structured_mesh.kind">
	the kind of mesh.
</ext_description>

<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Structured_mesh_with_rind  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Structured_mesh_with_rind"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Structured_mesh_with_rind">
	A <b>Structured_mesh_with_rind</b> is a type of
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Structured_mesh" /> 
	with specified rind planes.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Structured_mesh_with_rind  Attribute: rind_planes 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Structured_mesh_with_rind.rind_planes"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Structured_mesh_with_rind.rind_planes">
	the 
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Rind" /> 
	planes associated with the mesh.
</ext_description>

<!-- +++++++++++ Submesh +++++++++++ -->
<ext_description linkend="Mesh_topology_arm.Submesh">
	A <b>Submesh</b> is a type of
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh" />
	that is part of another 
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh" />.
	The <b>Submesh</b> is related to the parent 
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh" /> 
	by an
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Extraction_of_submesh" /> 
	relationship. 
	The cells of the <b>Submesh</b> are not necessarily connected.
</ext_description>

<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Unstructured_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Unstructured_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Unstructured_mesh">
<p>
	An <b>Unstructured_mesh</b> is a type of
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Mesh" />.
	An <b>Unstructured_mesh</b> is composed of cells, where the cells do not form a regular pattern and the shape
	of the cells is not uniform throughout the mesh. 
	Cells have vertices at the ends of cell edges, and may also have nodes on cell edges, cell faces and in the interior of the cell.
</p>
<p>
	It conceptually consists of the vertices of the mesh and the cells forming the volume of the mesh. 
	The cells shall all be connected by each cell having at least one vertex in common with another cell. 
	The shape of each cell in an unstructured mesh is explicitly specified.
</p>
	<note number="1">
		A vertex at the corner of a cell is a cell vertex.
	</note>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Unstructured_mesh  Attribute: cell_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Unstructured_mesh.cell_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Unstructured_mesh.cell_count">
	the number of cells in the mesh.
</ext_description>

<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell">
	A <b>Vertex_defined_cell</b> is a type of
	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Cell" />
	that is defined by its vertices.
	The number of vertices depends on the topological shape of the cell. 
	The cell may have edge, face and interior vertices. 
	The maximum number of edge, face and interior vertices depends on both the shape and the order of the cell.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: shape 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.shape"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.shape">
	the topological shape of the cell.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: order 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.order"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.order">
	the order of the cell geometric interpolation.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: vertices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.vertices">
<p>
	the vertices at the ends of cell edges, and within cell edges, cell faces and the interior of the cell.
 	The position of a vertex or an edge node in the array depends on the shape of the cell 
 	as established graphically in ISO 10303-104, 
 	noting that a polygon cell is a generalisation of the 
 	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_2d.triangle" /> 
 	and 
 	<express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_shape_2d.quadrilateral" /> 
 	cells.
 </p>
 	<note number="1">
 		For convenience, most of the ISO 10303-104 Figures have been redrawn in this part of ISO 10303 as
		Figure 13 to Figure 19, where a vertex or edge node is indicated by a dot.
		The vertex labelled '1' is the first index in the array, that labelled '2' is the second index in the array, and so on.
		Edge and face information from ISO 10303-104 is given in Table 2 to Table 4.
 	</note>
	
	<figure id="lqc_line_cells" number="13">
	  <title>Linear, quadratic and cubic line cells</title>
	  <img src="lqc_line_cells.gif"/>
	</figure>
	
	<table number="2" caption="Edges of triangle, quadrilateral and polygon cells">
		<tr>
			<th colspan="2" align="center">triangle</th>
			<th colspan="2" align="center">quadrilateral</th>
			<th colspan="2" align="center">n-sided polygon</th>
		</tr> 
		<tr>
			<th align="center">edge</th>
			<th align="center">vertices</th>
			<th align="center">edge</th>
			<th align="center">vertices</th>
			<th align="center">edge</th>
			<th align="center">vertices</th>
		</tr>
		<tr>
			<td align="center">1</td>
			<td align="center">1, 2</td>
			<td align="center">1</td>
			<td align="center">1, 2</td>
			<td align="center">1</td>
			<td align="center">1, 2</td>
		</tr>
		<tr>
			<td align="center">2</td>
			<td align="center">2, 3</td>
			<td align="center">2</td>
			<td align="center">2, 3</td>
			<td align="center">2</td>
			<td align="center">2, 3</td>
		</tr>
		<tr>
			<td align="center">3</td>
			<td align="center">3, 1</td>
			<td align="center">3</td>
			<td align="center">3, 4</td>
			<td align="center">3</td>
			<td align="center">3, 4</td>
		</tr>
		<tr>
			<td align="center">&#160;</td>
			<td align="center">&#160;</td>
			<td align="center">4</td>
			<td align="center">4, 1</td>
			<td align="center">n</td>
			<td align="center">n, 1</td>
		</tr>
	</table>
	
	<table number="3" caption="Edges of hexahedron, wedge, tetrahedron and pyramid cells">
		<tr>
			<th colspan="2" align="center">hexahedron</th>
			<th colspan="2" align="center">wedge</th>
			<th colspan="2" align="center">tetrahedron</th>
			<th colspan="2" align="center">pyramid</th>
		</tr> 
		<tr>
			<th align="center">edge</th>
			<th align="center">vertices</th>
			<th align="center">edge</th>
			<th align="center">vertices</th>
			<th align="center">edge</th>
			<th align="center">vertices</th>
			<th align="center">edge</th>
			<th align="center">vertices</th>
		</tr>
		<tr>
			<td align="center">1</td>
			<td align="center">1, 2</td>
			<td align="center">1</td>
			<td align="center">1, 2</td>
			<td align="center">1</td>
			<td align="center">1, 2</td>
			<td align="center">1</td>
			<td align="center">1, 2</td>
		</tr>
		<tr>
			<td align="center">2</td>
			<td align="center">2, 3</td>
			<td align="center">2</td>
			<td align="center">2, 3</td>
			<td align="center">2</td>
			<td align="center">2, 3</td>
			<td align="center">2</td>
			<td align="center">2, 3</td>
		</tr>
		<tr>
			<td align="center">3</td>
			<td align="center">3, 4</td>
			<td align="center">3</td>
			<td align="center">3, 1</td>
			<td align="center">3</td>
			<td align="center">3, 1</td>
			<td align="center">3</td>
			<td align="center">3, 4</td>
		</tr>
		<tr>
			<td align="center">4</td>
			<td align="center">4, 1</td>
			<td align="center">4</td>
			<td align="center">4, 5</td>
			<td align="center">4</td>
			<td align="center">1, 4</td>
			<td align="center">4</td>
			<td align="center">4, 1</td>
		</tr>
		<tr>
			<td align="center">5</td>
			<td align="center">5, 6</td>
			<td align="center">5</td>
			<td align="center">5, 6</td>
			<td align="center">5</td>
			<td align="center">2, 4</td>
			<td align="center">5</td>
			<td align="center">1, 5</td>
		</tr>
		<tr>
			<td align="center">6</td>
			<td align="center">6, 7</td>
			<td align="center">6</td>
			<td align="center">6, 4</td>
			<td align="center">6</td>
			<td align="center">3, 4</td>
			<td align="center">6</td>
			<td align="center">2, 5</td>
		</tr>
		<tr>
			<td align="center">7</td>
			<td align="center">7, 8</td>
			<td align="center">7</td>
			<td align="center">1, 4</td>
			<td align="center">&#160;</td>
			<td align="center">&#160;</td>
			<td align="center">7</td>
			<td align="center">3, 5</td>
		</tr>
		<tr>
			<td align="center">8</td>
			<td align="center">8, 5</td>
			<td align="center">8</td>
			<td align="center">2, 5</td>
			<td/><td/>
			<td align="center">8</td>
			<td align="center">4, 5</td>
		</tr>
		<tr>
			<td align="center">9</td>
			<td align="center">1, 5</td>
			<td align="center">9</td>
			<td align="center">3, 6</td>
			<td/><td/><td/><td/> 
		</tr>
		<tr>
			<td align="center">10</td>
			<td align="center">2, 6</td>
			<td/><td/><td/><td/><td/><td/>
		</tr>
		<tr>
			<td align="center">11</td>
			<td align="center">3, 7</td>
			<td/><td/><td/><td/><td/><td/>
		</tr>
		<tr>
			<td align="center">12</td>
			<td align="center">4, 8</td>
			<td/><td/><td/><td/><td/><td/>
		</tr>
	</table>
	
	<figure id="lqc_triangle_cells" number="14">
	  <title>Linear, quadratic and cubic triangle cells</title>
	  <img src="lqc_triangle_cells.gif"/>
	</figure>
	
	<figure id="lqc_quadrilateral_cells" number="15">
	  <title>Linear, quadratic and cubic quadrilateral cells</title>
	  <img src="lqc_quadrilateral_cells.gif"/>
	</figure>
	
	<figure id="lqc_hexahedron_cells" number="16">
	  <title>Linear, quadratic and cubic hexahedron cells</title>
	  <img src="lqc_hexahedron_cells.gif"/>
	</figure>
	
	<figure id="lqc_wedge_cells" number="17">
	  <title>Linear, quadratic and cubic wedge cells</title>
	  <img src="lqc_wedge_cells.gif"/>
	</figure>
	
	<figure id="lqc_tetrahedron_cells" number="18">
	  <title>Linear, quadratic and cubic tetrahedron cells</title>
	  <img src="lqc_tetrahedron_cells.gif"/>
	</figure>
	
	<table number="4" caption="Faces of hexahedron, wedge, tetrahedron and pyramid cells">
		<tr>
			<th colspan="2" align="center">hexahedron</th>
			<th colspan="2" align="center">wedge</th>
			<th colspan="2" align="center">tetrahedron</th>
			<th colspan="2" align="center">pyramid</th>
		</tr> 
		<tr>
			<th align="center">edge</th>
			<th align="center">vertices</th>
			<th align="center">edge</th>
			<th align="center">vertices</th>
			<th align="center">edge</th>
			<th align="center">vertices</th>
			<th align="center">edge</th>
			<th align="center">vertices</th>
		</tr>
		<tr>
			<td align="center">1</td>
			<td align="center">1, 4, 3, 2</td>
			<td align="center">1</td>
			<td align="center">1, 3, 2</td>
			<td align="center">1</td>
			<td align="center">1, 2, 3</td>
			<td align="center">1</td>
			<td align="center">1, 4, 3, 2</td>
		</tr>
		<tr>
			<td align="center">2</td>
			<td align="center">5, 6, 7, 8</td>
			<td align="center">2</td>
			<td align="center">4, 5, 6</td>
			<td align="center">2</td>
			<td align="center">1, 4, 2</td>
			<td align="center">2</td>
			<td align="center">1, 2, 5</td>
		</tr>
		<tr>
			<td align="center">3</td>
			<td align="center">1, 2, 6, 5</td>
			<td align="center">3</td>
			<td align="center">1, 2, 4, 5</td>
			<td align="center">3</td>
			<td align="center">2, 4, 3</td>
			<td align="center">3</td>
			<td align="center">2, 3, 5</td>
		</tr>
		<tr>
			<td align="center">4</td>
			<td align="center">3, 7, 6, 2</td>
			<td align="center">4</td>
			<td align="center">2, 3, 6, 5</td>
			<td align="center">4</td>
			<td align="center">3, 4, 1</td>
			<td align="center">4</td>
			<td align="center">3, 4, 5</td>
		</tr>
		<tr>
			<td align="center">5</td>
			<td align="center">3, 4, 8, 7</td>
			<td align="center">5</td>
			<td align="center">1, 4, 6, 3</td>
			<td/><td/>
			<td align="center">5</td>
			<td align="center">4, 1, 5</td>
		</tr>
		<tr>
			<td align="center">6</td>
			<td align="center">1, 5, 8, 4</td>
			<td/><td/><td/><td/><td/><td/>
		</tr>
	</table>
	
	<figure id="lqc_pyramid_cells" number="19">
	  <title>Linear, quadratic and cubic pyramid cells</title>
	  <img src="lqc_pyramid_cells.gif"/>
	</figure>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: bound_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.bound_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.bound_count">
	the number of cell bounding vertices; it is determined by the value of <b>shape</b>.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: edge_node_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.edge_node_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.edge_node_count">
	the number of interior cell nodes located on the cell edges; 
	it is determined by the combination of the values of <b>shape</b> and <b>order</b>.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: opt_node_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.opt_node_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.opt_node_count">
<p>
	the potential number of interior cell nodes which are not located on the cell edges; 
	it is determined by the combination of the values of <b>shape</b> and <b>order</b>.
</p>
	<note number="2">
		In Figure 13 to Figure 19 the non-edge interior nodes are indicated by circles.
	</note>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: required_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.required_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.required_count">
	the total number of bounding vertices plus the number of edge nodes.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: vn_count 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.vn_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.vn_count">
	the total number of bounding vertices plus the number of nodes (both edge and non-dege nodes).
</ext_description>
  
  <!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Entity: Vertex_defined_cell  Attribute: required_vertices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell.required_vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.Vertex_defined_cell.required_vertices">
	the vertices and nodes excluding any non-edge interior nodes. 
	There shall be <b>required_count</b> of these.
</ext_description>


<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Function: all_mesh_vertices 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.all_mesh_vertices"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.all_mesh_vertices">
	The function <b>all_mesh_vertices</b> takes an 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices" /> 
	as its argument and returns TRUE if the members of the 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices.vertices" />  
	attribute are exactly the vertices in the mesh.
</ext_description>

<!-- arg -->
<ext_description linkend="Mesh_topology_arm.all_mesh_vertices.arg">
	an 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Array_based_unstructured_mesh_and_vertices" />.
	</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Function: cell_counts 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.cell_counts"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.cell_counts">
	The function <b>cell_counts</b> takes a 
	<express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell" /> 
	as its argument and returns the numbers of vertices and nodes required to define the cell. 
	Returns a 3 element array of INTEGER, where the first element is the number of vertices defining
	the bounds of the cell, the second is the number of interior nodes located on an edge, and the third is the
	maximum number of (potential) interior nodes not located on an edge.
</ext_description>

<!-- arg -->
<ext_description linkend="Mesh_topology_arm.cell_counts.arg">
	 a <express_ref linkend="Mesh_topology:arm:Mesh_topology_arm.Vertex_defined_cell" />.
</ext_description>

<!-- +++++++++++ shorten_array +++++++++++ -->
<ext_description linkend="Mesh_topology_arm.shorten_array">
	The function <b>shorten_array</b> inputs a one dimensional array and returns a shorter one dimensional array
	containing the first <b>newl</b> elements of the input array.
</ext_description>

<!-- longa -->
<ext_description linkend="Mesh_topology_arm.shorten_array.longa">
	the input array.
</ext_description>

<!-- oldl -->
<ext_description linkend="Mesh_topology_arm.shorten_array.oldl">
	the number of elements in <b>longa</b>.
</ext_description>

<!-- newl -->
<ext_description linkend="Mesh_topology_arm.shorten_array.newl">
	the smaller number of elements in the output array.
</ext_description>

<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Function: this_schema 
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.this_schema"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.this_schema">
	A function <b>this_schema</b> returns a STRING containing the name of the schema.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Subtype constraint: sc1_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.sc1_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.sc1_mesh">
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Subtype constraint: sc1_patch  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.sc1_patch"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.sc1_patch">
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Subtype constraint: sc1_topological_region  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.sc1_topological_region"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.sc1_topological_region">
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Mesh_topology_arm  Subtype constraint: sc1_unstructured_mesh  
   <express_ref linkend="mesh_topology:arm:Mesh_topology_arm.sc1_unstructured_mesh"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="Mesh_topology_arm.sc1_unstructured_mesh">
</ext_description>
</ext_descriptions>
