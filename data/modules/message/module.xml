<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: module.xml,v 1.7 2002/12/10 16:31:29 seanbarker Exp $ -->
<!DOCTYPE module SYSTEM "../../../dtd/module.dtd">
<!-- Generated by mkmodule.js, Eurostep Limited, http://www.eurostep.com -->
 <!-- 
     To view the module in IExplorer, open: sys/1_scope.xml
      -->
<module
   name="message"
   part="1270"
   version="1"
   wg.number="1474"
   wg.number.arm="1475"
   wg.number.mim="1476"
   checklist.internal_review=""
   checklist.project_leader=""
   checklist.convener=""
   status="CD-TS"
   language="E"
   publication.year="2003"
   published="n"
   rcs.date="$Date: 2002/12/10 16:31:29 $"
   rcs.revision="$Revision: 1.7 $">

<express language_version="2"
   description.file="arm_descriptions.xml"
/>

 <keywords>
    module message
 </keywords>

 <!-- Reference to contacts detailed in stepmod/data/basic/contacts.xml -->
 <contacts>
   <projlead ref="plcs.projlead"/>
   <editor ref="seanbarker"/>
 </contacts>

 <!-- Introduction -->
 <!-- The introduction should start as shown: -->
 <purpose>
   <p>
     This part of ISO 10303 specifies an application module for the
     representation of message.
A message is a collection of information made at a particular time for some particular purpose. The message module contains the meta-data that describes the message. The structure and format of the content is out of scope, but is intended to range from a structured report corresponding to, say, a maintenance form, to an arbitrary collection of database abstracts, documents and other media as might correspond to a dossier on some unexpected problem with a product. Also out of scope is the sending of the message, which is covered by the Envelope module.
	</p><p>An essential part of the message is its purpose. Message records this in two ways. Firstly, it may record the intentions of the sender, for example, "The attached gives evidence of severe cracking around the engine mountings. Request urgent grounding and inspection of the fleet". Secondly, the message will be part of some business process, and may, in many cases, be automatically processed. For example, a field input made on some automatic data recorder may simply be input into a database without further ado. Further, a state may be associated to the message, which will enable tracking of the message through the process. This can be applied by both sender and recipient.

   </p>
 </purpose>

 <!-- Items in scope -->
 <inscope>
   <li>Identify the creator and creation date</li>
   <li>Identify the approver</li>
   <li>Identify the business process creating and using the message</li>
   <li>Record the state of the message with respect to that business process</li>
   <li>Record the contents list</li>
   <li>Classify the message and the contents</li>
   <li>Apply a security classification to the message</li>
   <li>Associate messages with each other</li>

 </inscope>

 <!-- Items out of scope -->
 <outscope>
   <li>The contents of the message</li>
   <li>Encoding formats of the information in the message</li>
   <li>Sending the message or identifying the recipients</li>
 </outscope>


 <normrefs>
 <normref.inc normref="ref10303-41.2000"/>
 </normrefs>
<!--
 <definition/>

 <abbreviations/>
-->

 <!-- Clause 4 ARM  -->
 <arm>
   <!-- Note ARM short form EXPRESS is in arm.xml -->
   <!-- Units of functionality -->
   <uof name="Message">
     <description>
     Message provides the functionality needed to record messages and their associated audit trail.
     </description>
     <uof.ae entity="Message"/>
     <uof.ae entity="Message_association"/>
     <uof.ae entity="Contents_entry"/>
   </uof>

   <!-- Short form EXPRESS-G -->
   <express-g>
     <imgfile file="armexpg1.xml"/>
     <imgfile file="armexpg2.xml"/>
   </express-g>
 </arm>


 <!-- Clause 5.1 Mapping specification -->
 <mapping_table>

<!-- mappings due to the extension of the approval_item select -->
   <ae entity="Approval_assignment" original_module="approval">
     <aa attribute="items" assertion_to="Message">
       <refpath_extend extended_select="approval_item">
         approval_item *> message_approval
        message_approval=product
       </refpath_extend>
     </aa>
   </ae>


<!-- mappings due to the extension of the security_classification_item select -->
   <ae entity="Security_classification_assignment" original_module="security_classification">
     <aa attribute="items" assertion_to="Message">
       <refpath_extend extended_select="security_classification_item">
         security_classification_item *> message_security_classification
        message_security_classification=product
       </refpath_extend>
     </aa>
   </ae>



<!-- mappings due to the extension of the date_or_date_time_item select-->
<!-- format due to table being nicked from management_resource_information-->
   <ae entity="Date_or_date_time_assignment" original_module="date_time_assignment">
     <aa attribute="items" assertion_to="Envelope">
       <alt_map alt_map.inc="1">
         <refpath_extend extended_select="date_or_date_time_item">
           date_item *> message_date
           message_date = product
         </refpath_extend>
       </alt_map>
       <alt_map alt_map.inc="2">
         <refpath_extend extended_select="date_or_date_time_item">
         date_and_time_item *> message_date_time
           message_date_time = product 
         </refpath_extend>
       </alt_map>
     </aa>
   </ae>

   <ae entity="Contents_entry">
   <aimelt>contents_entry</aimelt>
   <source>ISO 10303-41</source>
   <aimelt>PATH</aimelt>
   <refpath>
	contents_entry &lt;=
	product_definition
	{product_definition.frame_of_reference[1] -&gt;
        product__definition_context
        product_definition_context.life_cycle_stage='message_content_entry'}
   </refpath>

	<aa attribute="name">
        <aimelt>product.description</aimelt>
	<source>ISO 10303-41</source>
        </aa>

   </ae>


   <ae entity="Message">
   <aimelt>message</aimelt>
   <source>ISO 10303-41</source>
   <aimelt>PATH</aimelt>
   <refpath>
      message &lt;= 
      product
      {product.frame_of_reference[1] -&gt;
      product_context
      product_context.discipline_type='message'}
   </refpath>



	<aa attribute="id">
        <aimelt>product.id</aimelt>
	<source>ISO 10303-41</source>
        </aa>

        <aa attribute="message_type">
        <aimelt>product.name</aimelt>
	<source>ISO 10303-41</source>
	</aa>

        <aa attribute="purpose">
        <aimelt>product.description</aimelt>
	<source>ISO 10303-41</source>
	</aa>

	<aa attribute="contains_items">
        <aimelt>PATH</aimelt>
           <refpath>
	   message
	   &lt;=product_definition_formation.of_product
	   product_definition_formation
	   &lt;=product_definition.formation
	   product_definition
	   </refpath>
 	</aa>

        <aa attribute="contains" assertion_to="message_content_select">
			<aimelt>PATH</aimelt>
			<refpath>
			message.contains_items[i] -&gt; message_content_item
			</refpath>
			</aa>

        <aa attribute="defined_by" assertion_to="message_definer_select">
			<aimelt>PATH</aimelt>
			<refpath>
			message.defined_by_items[i] -&gt; message_definer_item
			</refpath>
			</aa>        
   </ae>

<ae entity="Message_association">
   <aimelt>PATH</aimelt>
   <source>ISO 10303-41</source>
   <refpath>message_relationship &lt;=
   product_relationship
   </refpath>

	<aa attribute="related">
	<aimelt>PATH</aimelt>
	<source>ISO 10303-41</source>
	<refpath>
	product_relationship
	product_relationship.related_product -&gt;
	product
	</refpath>
	</aa>

	<aa attribute="relating">
	<aimelt>PATH</aimelt>
	<source>ISO 10303-41</source>
	<refpath>
	product_relationship
	product_relationship.related_product -&gt;
	product
	</refpath>
        </aa>

	<aa attribute="role">
	<aimelt>product_relationship.name</aimelt>
	<source>ISO 10303-41</source>
        </aa>
   </ae>
 </mapping_table>

 <!-- Clause 5.2 MIM -->
 <mim>
   <!--  Note MIM short form express is in mim.xml -->
   <express-g>
     <imgfile file="mimexpg1.xml"/>
     <imgfile file="mimexpg2.xml"/>
   </express-g>
 </mim>

</module>
