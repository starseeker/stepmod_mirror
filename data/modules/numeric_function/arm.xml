<?xml version="1.0"?>
<!-- edited with XML Spy v4.3 U (http://www.xmlspy.com) by olavo (UNINOVA) -->
<!-- $Id: arm.xml,v 1.7 2003/02/12 16:42:23 rocc Exp $ -->
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">
<express language_version="2" description.file="arm_descriptions.xml" rcs.date="$Date: 2003/02/12 16:42:23 $" rcs.revision="$Revision: 1.7 $">
	<application name="express2xml.js" owner="Eurostep Limited" url="http://www.eurostep.com" version="1.25" source="../data/modules/numeric_function/arm.exp"/>
	<schema name="Numeric_function_arm">
		<interface kind="use" schema="Expression_arm">
			<interfaced.item name="Binary_function_call"/>
			<interfaced.item name="Binary_numeric_expression"/>
			<interfaced.item name="Defined_function"/>
			<interfaced.item name="Multiple_arity_function_call"/>
			<interfaced.item name="Multiple_arity_numeric_expression"/>
			<interfaced.item name="Numeric_expression"/>
			<interfaced.item name="String_expression"/>
			<interfaced.item name="Unary_numeric_expression"/>
			<interfaced.item name="Unary_boolean_expression"/>
		</interface>
		<interface kind="use" schema="Generic_expression_arm">
			<interfaced.item name="Unary_generic_expression"/>
		</interface>
		<entity name="Unary_function_call" abstract.supertype="YES" super.expression="(ONEOF (Abs_function,				Minus_function,				Sin_function,				Cos_function,				Tan_function,				Asin_function,				Acos_function,				Exp_function,				Log_function,				Log2_function,				Log10_function,				Square_root_function))" supertypes="Unary_numeric_expression"/>
		<entity name="Abs_function" supertypes="Unary_function_call"/>
		<entity name="Minus_function" supertypes="Unary_function_call"/>
		<entity name="Sin_function" supertypes="Unary_function_call"/>
		<entity name="Cos_function" supertypes="Unary_function_call"/>
		<entity name="Tan_function" supertypes="Unary_function_call"/>
		<entity name="Asin_function" supertypes="Unary_function_call"/>
		<entity name="Acos_function" supertypes="Unary_function_call"/>
		<entity name="Exp_function" supertypes="Unary_function_call"/>
		<entity name="Log_function" supertypes="Unary_function_call"/>
		<entity name="Log2_function" supertypes="Unary_function_call"/>
		<entity name="Log10_function" supertypes="Unary_function_call"/>
		<entity name="Square_root_function" supertypes="Unary_function_call"/>
		<entity name="Atan_function" supertypes="Binary_function_call"/>
		<entity name="Int_value_function" supertypes="Value_function"/>
		<entity name="Integer_defined_function" abstract.supertype="YES" supertypes="Numeric_defined_function"/>
		<entity name="Maximum_function" supertypes="Multiple_arity_function_call"/>
		<entity name="Minimum_function" supertypes="Multiple_arity_function_call"/>
		<entity name="Numeric_defined_function" abstract.supertype="YES" super.expression="(ONEOF (Integer_defined_function,				Real_defined_function))" supertypes="Numeric_expression Defined_function"/>
		<entity name="Odd_function" supertypes="Unary_boolean_expression">
			<explicit name="operand">
				<typename name="Numeric_expression"/>
				<redeclaration entity-ref="Unary_generic_expression"/>
			</explicit>
			<where label="WR1" expression="Is_int_expr(SELF\Numeric_expression)"/>
		</entity>
		<entity name="Real_defined_function" abstract.supertype="YES" supertypes="Numeric_defined_function"/>
		<entity name="Value_function" super.expression="(Int_value_function)" supertypes="Numeric_expression Unary_generic_expression">
			<explicit name="operand">
				<typename name="String_expression"/>
				<redeclaration entity-ref="Unary_generic_expression"/>
			</explicit>
		</entity>
		<entity name="Length_function" supertypes="Numeric_expression Unary_generic_expression">
			<explicit name="operand">
				<typename name="String_expression"/>
				<redeclaration entity-ref="Unary_generic_expression"/>
			</explicit>
		</entity>
		<function name="Is_int_expr">
			<parameter name="arg">
				<typename name="Numeric_expression"/>
			</parameter>
			<builtintype type="BOOLEAN"/>
			<algorithm>

LOCAL
	i: INTEGER;
END_LOCAL;

IF 'EXPRESSION_ARM.INT_LITERAL' IN TYPEOF(arg) 
THEN 
	RETURN (TRUE); 
END_IF;
IF 'EXPRESSION_ARM.REAL_LITERAL' IN TYPEOF(arg) 
THEN 
	RETURN (FALSE); 
END_IF;
IF 'EXPRESSION_ARM.INT_NUMERIC_VARIABLE' IN TYPEOF(arg) 
THEN 
	RETURN (TRUE); 
END_IF;
IF 'EXPRESSION_ARM.REAL_NUMERIC_VARIABLE' IN TYPEOF(arg) 
THEN 
	RETURN (FALSE); 
END_IF;
IF 'EXPRESSION_ARM.ABS_FUNCTION' IN TYPEOF(arg) 
THEN 
	RETURN (Is_int_expr(arg\Unary_numeric_expression.operand));
END_IF;
IF 'EXPRESSION_ARM.MINUS_FUNCTION' IN TYPEOF(arg) 
THEN 
	RETURN (Is_int_expr(arg\Unary_numeric_expression.operand)); 
END_IF;
IF ('EXPRESSION_ARM.SIN_FUNCTION' IN TYPEOF(arg)) 
		OR ('EXPRESSION_ARM.COS_FUNCTION' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.TAN_FUNCTION' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.ASIN_FUNCTION' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.ACOS_FUNCTION' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.Atan_function' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.EXP_FUNCTION' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.LOG_FUNCTION' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.LOG2_FUNCTION' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.LOG10_FUNCTION' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.SQUARE_ROOT_FUNCTION' 
								IN TYPEOF(arg))
THEN 
	RETURN (FALSE);
END_IF;
IF 	('EXPRESSION_ARM.PLUS_EXPRESSION' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.MULT_EXPRESSION' 
								IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.MAXIMUM_FUNCTION'
								IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.MAXIMUM_FUNCTION'
								IN TYPEOF(arg)) 
THEN 
	REPEAT i :=1 TO SIZEOF (
			arg\Multiple_arity_numeric_expression.operands);
	IF NOT 
		Is_int_expr(arg\Multiple_arity_numeric_expression.operands[i]) 
	THEN 
		RETURN (FALSE);
	END_IF;
	END_REPEAT;
	RETURN (TRUE);
END_IF;
IF 	('EXPRESSION_ARM.MINUS_EXPRESSION' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.POWER_EXPRESSION' 
								IN TYPEOF(arg))
THEN 
	RETURN (Is_int_expr(arg\Binary_numeric_expression.operands[1])
		AND Is_int_expr(arg\Binary_numeric_expression.operands[2]));
END_IF;
IF	('EXPRESSION_ARM.DIV_EXPRESSION' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.MOD_EXPRESSION' IN TYPEOF(arg))
THEN 
	RETURN(TRUE);	
END_IF;
IF 'EXPRESSION_ARM.SLASH_EXPRESSION' IN TYPEOF(arg) 
THEN 
	RETURN (FALSE); 	
END_IF;
IF 'EXPRESSION_ARM.LENGTH_FUNCTION' IN TYPEOF(arg) 
THEN 
	RETURN (TRUE); 
END_IF;
IF 'EXPRESSION_ARM.VALUE_FUNCTION' IN TYPEOF(arg) 
THEN 
	IF 'EXPRESSION_ARM.INT_VALUE_FUNCTION' 
								IN TYPEOF(arg) 
	THEN 
		RETURN (TRUE); 
	ELSE 
		RETURN (FALSE); 
	END_IF;
END_IF;
IF 'EXPRESSION_ARM.INTEGER_DEFINED_FUNCTION' 
								IN TYPEOF(arg)
THEN 
	RETURN(TRUE) ;
END_IF;
IF'EXPRESSION_ARM.REAL_DEFINED_FUNCTION' IN TYPEOF(arg) 
THEN 
	RETURN(FALSE) ;
END_IF ;
IF 'EXPRESSION_ARM.BOOLEAN_DEFINED_FUNCTION' 
								IN TYPEOF(arg)
THEN 
	RETURN(FALSE) ;
END_IF ;
IF 'EXPRESSION_ARM.STRING_DEFINED_FUNCTION' 
								IN TYPEOF(arg)
THEN 
	RETURN (FALSE) ;
END_IF ;

RETURN (FALSE);

            </algorithm>
		</function>
	</schema>
</express>
