<?xml version="1.0"?>
<!-- $Id: express2xml.js,v 1.30 2003/02/25 06:04:24 thendrix Exp $ -->
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">
<express
  language_version="2"
  description.file="arm_descriptions.xml"
  rcs.date="$Date: $"
  rcs.revision="$Revision: $">

  <application
    name="express2xml.js"
    owner="Eurostep Limited"
    url="http://www.eurostep.com"
    version="1.30"
    source="../data/modules/numeric_function/arm.exp"/>

  <schema name="Numeric_function_arm">
    <interface
      kind="use"
      schema="Expression_arm">
    </interface>

    <interface
      kind="use"
      schema="Generic_expression_arm">
    </interface>

    <entity
      name="Unary_function_call"
      abstract.supertype="YES"
      super.expression="(ONEOF (Abs_function,				Minus_function,				Sin_function,				Cos_function,				Tan_function,				Asin_function,				Acos_function,				Exp_function,				Log_function,				Log2_function,				Log10_function,				Square_root_function))"
      supertypes="Unary_numeric_expression">
    </entity>

    <entity
      name="Abs_function"
      supertypes="Unary_function_call">
    </entity>

    <entity
      name="Minus_function"
      supertypes="Unary_function_call">
    </entity>

    <entity
      name="Sin_function"
      supertypes="Unary_function_call">
    </entity>

    <entity
      name="Cos_function"
      supertypes="Unary_function_call">
    </entity>

    <entity
      name="Tan_function"
      supertypes="Unary_function_call">
    </entity>

    <entity
      name="Asin_function"
      supertypes="Unary_function_call">
    </entity>

    <entity
      name="Acos_function"
      supertypes="Unary_function_call">
    </entity>

    <entity
      name="Exp_function"
      supertypes="Unary_function_call">
    </entity>

    <entity
      name="Log_function"
      supertypes="Unary_function_call">
    </entity>

    <entity
      name="Log2_function"
      supertypes="Unary_function_call">
    </entity>

    <entity
      name="Log10_function"
      supertypes="Unary_function_call">
    </entity>

    <entity
      name="Square_root_function"
      supertypes="Unary_function_call">
    </entity>

    <entity
      name="Atan_function"
      supertypes="Binary_function_call">
    </entity>

    <entity
      name="Int_value_function"
      supertypes="Value_function">
    </entity>

    <entity
      name="Integer_defined_function"
      abstract.supertype="YES"
      supertypes="Numeric_defined_function">
    </entity>

    <entity
      name="Maximum_function"
      supertypes="Multiple_arity_function_call">
    </entity>

    <entity
      name="Minimum_function"
      supertypes="Multiple_arity_function_call">
    </entity>

    <entity
      name="Numeric_defined_function"
      abstract.supertype="YES"
      super.expression="(ONEOF (Integer_defined_function,				Real_defined_function))"
      supertypes="Numeric_expression Defined_function">
    </entity>

    <entity
      name="Odd_function"
      supertypes="Unary_boolean_expression">
      <explicit
        name="operand">
        <typename
          name="Numeric_expression"/>
        <redeclaration
          entity-ref="Unary_generic_expression"/>
        </explicit>
        <where
          label="WR1"
          expression="Is_int_expr(SELF\Numeric_expression)">
        </where>
      </entity>

      <entity
        name="Real_defined_function"
        abstract.supertype="YES"
        supertypes="Numeric_defined_function">
      </entity>

      <entity
        name="Value_function"
        super.expression="(Int_value_function)"
        supertypes="Numeric_expression Unary_generic_expression">
        <explicit
          name="operand">
          <typename
            name="String_expression"/>
          <redeclaration
            entity-ref="Unary_generic_expression"/>
          </explicit>
        </entity>

        <entity
          name="Length_function"
          supertypes="Numeric_expression Unary_generic_expression">
          <explicit
            name="operand">
            <typename
              name="String_expression"/>
            <redeclaration
              entity-ref="Unary_generic_expression"/>
            </explicit>
          </entity>

          <function
            name="Is_int_expr">
            <parameter
              name="arg">
              <typename
                name="Numeric_expression"/>
            </parameter>
            <builtintype
              type="BOOLEAN"/>
            <algorithm>

LOCAL
	i: INTEGER;
END_LOCAL;

IF 'EXPRESSION_ARM.INT_LITERAL' IN TYPEOF(arg) 
THEN 
	RETURN (TRUE); 
END_IF;
IF 'EXPRESSION_ARM.REAL_LITERAL' IN TYPEOF(arg) 
THEN 
	RETURN (FALSE); 
END_IF;
IF 'EXPRESSION_ARM.INT_NUMERIC_VARIABLE' IN TYPEOF(arg) 
THEN 
	RETURN (TRUE); 
END_IF;
IF 'EXPRESSION_ARM.REAL_NUMERIC_VARIABLE' IN TYPEOF(arg) 
THEN 
	RETURN (FALSE); 
END_IF;
IF 'NUMERIC_FUNCTION_ARM.ABS_FUNCTION' IN TYPEOF(arg) 
THEN 
	RETURN (Is_int_expr(arg\Unary_numeric_expression.operand));
END_IF;
IF 'NUMERIC_FUNCTION.MINUS_FUNCTION' IN TYPEOF(arg) 
THEN 
	RETURN (Is_int_expr(arg\Unary_numeric_expression.operand)); 
END_IF;
IF ('NUMERIC_FUNCTION_ARM.SIN_FUNCTION' IN TYPEOF(arg)) 
		OR ('NUMERIC_FUNCTION_ARM.COS_FUNCTION' IN TYPEOF(arg))
		OR ('NUMERIC_FUNCTION_ARM.TAN_FUNCTION' IN TYPEOF(arg))
		OR ('NUMERIC_FUNCTION_ARM.ASIN_FUNCTION' IN TYPEOF(arg))
		OR ('NUMERIC_FUNCTION_ARM.ACOS_FUNCTION' IN TYPEOF(arg))
		OR ('NUMERIC_FUNCTION_ARM.Atan_function' IN TYPEOF(arg))
		OR ('NUMERIC_FUNCTION_ARM.EXP_FUNCTION' IN TYPEOF(arg))
		OR ('NUMERIC_FUNCTION_ARM.LOG_FUNCTION' IN TYPEOF(arg))
		OR ('NUMERIC_FUNCTION_ARM.LOG2_FUNCTION' IN TYPEOF(arg))
		OR ('NUMERIC_FUNCTION_ARM.LOG10_FUNCTION' IN TYPEOF(arg))
		OR ('NUMERIC_FUNCTION_ARM.SQUARE_ROOT_FUNCTION' 
								IN TYPEOF(arg))
THEN 
	RETURN (FALSE);
END_IF;
IF 	('EXPRESSION_ARM.PLUS_EXPRESSION' IN TYPEOF(arg))
		OR ('NUMERIC_FUNCTION_ARM.MULT_EXPRESSION' 
								IN TYPEOF(arg))
		OR ('NUMERIC_FUNCTION_ARM.MAXIMUM_FUNCTION'
								IN TYPEOF(arg))
		OR ('NUMERIC_FUNCTION_ARM.MINIMUM_FUNCTION'
								IN TYPEOF(arg)) 
THEN 
	REPEAT i :=1 TO SIZEOF (
			arg\Multiple_arity_numeric_expression.operands);
	IF NOT 
		Is_int_expr(arg\Multiple_arity_numeric_expression.operands[i]) 
	THEN 
		RETURN (FALSE);
	END_IF;
	END_REPEAT;
	RETURN (TRUE);
END_IF;
IF 	('EXPRESSION_ARM.MINUS_EXPRESSION' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.POWER_EXPRESSION' 
								IN TYPEOF(arg))
THEN 
	RETURN (Is_int_expr(arg\Binary_numeric_expression.operands[1])
		AND Is_int_expr(arg\Binary_numeric_expression.operands[2]));
END_IF;
IF	('EXPRESSION_ARM.DIV_EXPRESSION' IN TYPEOF(arg))
		OR ('EXPRESSION_ARM.MOD_EXPRESSION' IN TYPEOF(arg))
THEN 
	RETURN(TRUE);	
END_IF;
IF 'EXPRESSION_ARM.SLASH_EXPRESSION' IN TYPEOF(arg) 
THEN 
	RETURN (FALSE); 	
END_IF;
IF 'NUMERIC_FUNCTION_ARM.LENGTH_FUNCTION' IN TYPEOF(arg) 
THEN 
	RETURN (TRUE); 
END_IF;
IF 'NUMERIC_FUNCTION_ARM.VALUE_FUNCTION' IN TYPEOF(arg) 
THEN 
	IF 'NUMERIC_FUNCTION_ARM.INT_VALUE_FUNCTION' 
								IN TYPEOF(arg) 
	THEN 
		RETURN (TRUE); 
	ELSE 
		RETURN (FALSE); 
	END_IF;
END_IF;
IF 'NUMERIC_FUNCTION_ARM.INTEGER_DEFINED_FUNCTION' 
								IN TYPEOF(arg)
THEN 
	RETURN(TRUE) ;
END_IF;
IF'NUMERIC_FUNCTION_ARM.REAL_DEFINED_FUNCTION' IN TYPEOF(arg) 
THEN 
	RETURN(FALSE) ;
END_IF ;
IF 'EXPRESSION_ARM.BOOLEAN_DEFINED_FUNCTION' 
								IN TYPEOF(arg)
THEN 
	RETURN(FALSE) ;
END_IF ;
IF 'EXPRESSION_ARM.STRING_DEFINED_FUNCTION' 
								IN TYPEOF(arg)
THEN 
	RETURN (FALSE) ;
END_IF ;

RETURN (FALSE);

            </algorithm>

          </function>

        </schema>

      </express>
