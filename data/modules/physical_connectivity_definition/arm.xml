<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express description.file="arm_descriptions.xml" language_version="2" rcs.date="$Date$" rcs.revision="$Revision$" reference="ISO/TS 10303-1755">
   <application name="JSDAI" owner="LKSoft" source="physical_connectivity_definition_arm schema_instance" url="www.lksoft.com" version="4.0 beta"/>
   <schema name="Physical_connectivity_definition_arm">
      <interface kind="use" schema="Part_external_reference_arm"/>
      <interface kind="use" schema="Physical_component_feature_arm"/>
      <interface kind="use" schema="Physical_unit_design_view_arm"/>
      <interface kind="use" schema="Requirement_decomposition_arm"/>
      <interface kind="reference" schema="Requirement_decomposition_arm">
         <interfaced.item name="get_rvd"/>
      </interface>
      <interface kind="reference" schema="Support_resource_arm">
         <interfaced.item name="bag_to_set"/>
      </interface>
      <type name="pcd_documented_element_select">
         <select basedon="documented_element_select" extensible="YES" genericentity="YES" selectitems="Physical_connectivity_element Physical_connectivity_definition"/>
      </type>
      <type name="pcd_groupable_item">
         <select basedon="groupable_item" extensible="YES" genericentity="YES" selectitems="Physical_connectivity_definition Group_relationship"/>
      </type>
      <type name="pcd_requirement_assignment_item">
         <select basedon="requirement_assignment_item" extensible="YES" genericentity="YES" selectitems="Physical_connectivity_element Physical_connectivity_definition Physical_connectivity_definition_relationship"/>
      </type>
      <type name="physical_connectivity_definition_domain_enumeration">
         <enumeration extensible="YES" items="electrical thermal optical magnetic"/>
      </type>
      <type name="termination_or_junction">
         <select extensible="YES" genericentity="YES" selectitems="Component_terminal Topological_junction"/>
      </type>
      <entity name="Physical_connectivity_definition" super.expression="Physical_connectivity_structure_definition" supertypes="Shape_element">
         <explicit name="associated_terminals">
            <aggregate lower="2" type="SET" upper="?"/>
            <typename name="Physical_component_terminal"/>
         </explicit>
         <explicit name="associated_definition">
            <typename name="Physical_unit_network_definition"/>
            <redeclaration entity-ref="Shape_element" old_name="containing_shape"/>
         </explicit>
         <inverse attribute="associated_definition" entity="Physical_connectivity_definition_domain" name="domain">
            <inverse.aggregate lower="0" type="SET" upper="1"/>
         </inverse>
         <unique label="UR1">
            <unique.attribute attribute="SELF\Shape_element.element_name"/>
            <unique.attribute attribute="associated_definition"/>
         </unique>
      </entity>
      <entity name="Physical_connectivity_definition_domain">
         <explicit name="domain_type">
            <typename name="physical_connectivity_definition_domain_enumeration"/>
         </explicit>
         <explicit name="associated_definition">
            <typename name="Physical_connectivity_definition"/>
         </explicit>
      </entity>
      <entity name="Physical_connectivity_definition_relationship">
         <explicit name="first_definition">
            <typename name="Physical_connectivity_definition"/>
         </explicit>
         <explicit name="second_definition">
            <typename name="Physical_connectivity_definition"/>
         </explicit>
         <explicit name="purpose">
            <builtintype type="STRING"/>
         </explicit>
         <inverse attribute="assigned_to" entity="Requirement_assignment" name="requirement">
            <inverse.aggregate lower="1" type="SET" upper="1"/>
         </inverse>
      </entity>
      <entity name="Physical_connectivity_element">
         <explicit name="name">
            <builtintype type="STRING"/>
         </explicit>
         <explicit name="start_terminus">
            <typename name="termination_or_junction"/>
         </explicit>
         <explicit name="end_terminus">
            <typename name="termination_or_junction"/>
         </explicit>
         <explicit name="connectivity_context">
            <typename name="Physical_connectivity_structure_definition"/>
         </explicit>
         <unique label="UR1">
            <unique.attribute attribute="name"/>
            <unique.attribute attribute="connectivity_context"/>
         </unique>
         <where expression="start_terminus &lt;&gt; end_terminus" label="WR1"/>
      </entity>
      <entity name="Physical_connectivity_layout_topology_link" supertypes="Group_relationship">
         <explicit name="subsequent_node">
            <typename name="Physical_connectivity_layout_topology_node"/>
            <redeclaration entity-ref="Group_relationship" old_name="related_group"/>
         </explicit>
         <explicit name="precedent_node">
            <typename name="Physical_connectivity_layout_topology_node"/>
            <redeclaration entity-ref="Group_relationship" old_name="relating_group"/>
         </explicit>
         <derived expression="''" name="relation_type">
            <builtintype type="STRING"/>
            <redeclaration entity-ref="Group_relationship"/>
         </derived>
         <where expression="acyclic_physical_connectivity_layout_topology_link(SELF, [subsequent_node], &#10;        'PHYSICAL_CONNECTIVITY_DEFINITION_ARM.PHYSICAL_CONNECTIVITY_LAYOUT_TOPOLOGY_LINK')" label="WR1"/>
      </entity>
      <entity name="Physical_connectivity_layout_topology_node" supertypes="Group">
         <explicit name="terminal_type">
            <builtintype type="STRING"/>
            <redeclaration entity-ref="Group" old_name="name"/>
         </explicit>
         <where expression="(SIZEOF(SELF\Group.elements) = 0)" label="WR1"/>
      </entity>
      <entity name="Physical_connectivity_layout_topology_requirement" supertypes="Predefined_requirement_view_definition Group">
         <explicit name="elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="Physical_connectivity_layout_topology_link"/>
            <redeclaration entity-ref="Group"/>
         </explicit>
         <derived expression="pcd_get_pcltn(elements)" name="nodes">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="Physical_connectivity_layout_topology_node"/>
         </derived>
         <derived expression="(SIZEOF(nodes) = (SIZEOF(elements) + 1))" name="tree_structure">
            <builtintype type="LOGICAL"/>
         </derived>
         <where expression="(tree_structure = TRUE)" label="WR1"/>
      </entity>
      <entity name="Physical_connectivity_layout_topology_requirement_assignment" supertypes="Requirement_assignment">
         <explicit name="assigned_requirement">
            <typename name="Physical_connectivity_layout_topology_requirement"/>
            <redeclaration entity-ref="Requirement_assignment"/>
         </explicit>
         <explicit name="assigned_to">
            <typename name="Physical_connectivity_definition"/>
            <redeclaration entity-ref="Requirement_assignment"/>
         </explicit>
      </entity>
      <entity name="Physical_connectivity_make_from_relationship">
         <explicit name="reusable_definition">
            <typename name="Physical_connectivity_definition"/>
         </explicit>
         <explicit name="resultant_definition">
            <typename name="Physical_connectivity_definition"/>
         </explicit>
      </entity>
      <entity name="Physical_connectivity_structure_definition" supertypes="Physical_connectivity_definition">
         <derived expression="get_pct(structural_element)" name="structural_terminal_nodes">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="Physical_component_terminal"/>
         </derived>
         <derived expression="get_tj(structural_element)" name="structural_junction_nodes">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="Topological_junction"/>
         </derived>
         <derived expression="((SIZEOF(structural_terminal_nodes) + SIZEOF(structural_junction_nodes)) = (SIZEOF(structural_element) + 1))" name="tree_structure">
            <builtintype type="LOGICAL"/>
         </derived>
         <inverse attribute="connectivity_context" entity="Physical_connectivity_element" name="structural_element">
            <inverse.aggregate lower="1" type="SET" upper="?"/>
         </inverse>
         <where expression="SIZEOF(QUERY(stn &lt;* structural_terminal_nodes |&#10;                   NOT(stn IN SELF\Physical_connectivity_definition.associated_terminals)&#10;                   )) = 0" label="WR1"/>
         <where expression="SIZEOF(structural_terminal_nodes) = &#10;            SIZEOF(SELF\Physical_connectivity_definition.associated_terminals)" label="WR2"/>
      </entity>
      <entity name="Physical_unit_network_definition" supertypes="Part_design_view">
         <derived expression="get_terminals(bag_to_set(USEDIN(SELF,'PHYSICAL_CONNECTIVITY_DEFINITION_ARM.PHYSICAL_CONNECTIVITY_DEFINITION.ASSOCIATED_DEFINITION')))" name="terminals">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="Component_terminal"/>
         </derived>
         <derived expression="pcd_get_assemblies(terminals)" name="assembly">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="Product_view_definition"/>
         </derived>
         <where expression="NOT (SIZEOF(terminals) &gt; 1) OR&#10;           (SIZEOF(QUERY(t &lt;* terminals | NOT(SIZEOF(USEDIN(t, 'PHYSICAL_CONNECTIVITY_DEFINITION_ARM.' + &#10;                          'PHYSICAL_CONNECTIVITY_DEFINITION.ASSOCIATED_TERMINALS')) = 1))) = 0)" label="WR1"/>
         <where expression="SIZEOF(QUERY( ass &lt;* assembly |&#10;      (ass\Product_view_definition.defined_version = SELF\Product_view_definition.defined_version)&#10;           )) &gt; 0" label="WR2"/>
      </entity>
      <entity name="Topological_junction">
         <explicit name="name">
            <builtintype type="STRING"/>
         </explicit>
         <explicit name="scope">
            <typename name="Physical_connectivity_structure_definition"/>
         </explicit>
         <unique label="UR1">
            <unique.attribute attribute="name"/>
            <unique.attribute attribute="scope"/>
         </unique>
      </entity>
      <function name="acyclic_physical_connectivity_layout_topology_link">
         <parameter name="relation">
            <typename name="Physical_connectivity_layout_topology_link"/>
         </parameter>
         <parameter name="relatives">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="Physical_connectivity_layout_topology_node"/>
         </parameter>
         <parameter name="specific_relation">
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      x : SET OF Physical_connectivity_layout_topology_link := [];
    END_LOCAL;
    IF relation.precedent_node IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(pd &lt;* bag_to_set(USEDIN(relation.precedent_node,
      'PHYSICAL_CONNECTIVITY_DEFINITION_ARM.' +
      'PHYSICAL_CONNECTIVITY_LAYOUT_TOPOLOGY_LINK.' +
      'SUBSEQUENT_NODE')) | specific_relation IN TYPEOF(pd));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_physical_connectivity_layout_topology_link(x[i], relatives +
        relation.precedent_node, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);</algorithm>
      </function>
      <function name="get_pct">
         <parameter name="input">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="Physical_connectivity_element"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="Physical_component_terminal"/>
         <algorithm>LOCAL
   pct : SET OF Physical_component_terminal := [];
    i : INTEGER := 0;
  END_LOCAL;
  REPEAT  i := 1 TO SIZEOF(input) BY 1;
   IF ('PHYSICAL_COMPONENT_FEATURE_ARM.PHYSICAL_COMPONENT_TERMINAL' IN TYPEOF(input[i].start_terminus)) THEN
   pct := pct + input[i].start_terminus;
   END_IF;
   IF ('PHYSICAL_COMPONENT_FEATURE_ARM.PHYSICAL_COMPONENT_TERMINAL' IN TYPEOF(input[i].end_terminus)) THEN
   pct := pct + input[i].end_terminus;
   END_IF;
  END_REPEAT;
  RETURN(pct);</algorithm>
      </function>
      <function name="get_terminals">
         <parameter name="input">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="Physical_connectivity_definition"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="Component_terminal"/>
         <algorithm>LOCAL
   ct : SET OF Component_terminal := [];
    i : INTEGER := 0;
  END_LOCAL;
  REPEAT  i := 1 TO SIZEOF(input) BY 1;
   ct := ct + input[i].associated_terminals;
  END_REPEAT;
  RETURN(ct);</algorithm>
      </function>
      <function name="get_tj">
         <parameter name="input">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="Physical_connectivity_element"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="Topological_junction"/>
         <algorithm>LOCAL
   tj : SET OF Topological_junction := [];
    i : INTEGER := 0;
  END_LOCAL;
  REPEAT  i := 1 TO SIZEOF(input) BY 1;
   IF ('PHYSICAL_CONNECTIVITY_DEFINITION_ARM.TOPOLOGICAL_JUNCTION' IN TYPEOF(input[i].start_terminus)) THEN
   tj := tj + input[i].start_terminus;
   END_IF;
   IF ('PHYSICAL_CONNECTIVITY_DEFINITION_ARM.TOPOLOGICAL_JUNCTION' IN TYPEOF(input[i].end_terminus)) THEN
   tj := tj + input[i].end_terminus;
   END_IF;
  END_REPEAT;
  RETURN(tj);</algorithm>
      </function>
      <function name="pcd_get_assemblies">
         <parameter name="input">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="Component_terminal"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="Product_view_definition"/>
         <algorithm>LOCAL
      ac : SET OF Assembly_component := [];
     pvd : SET OF Product_view_definition := [];
    END_LOCAL;
   REPEAT i := 1 TO HIINDEX(input) BY 1;
      ac := ac + input[i]\Component_feature.associated_component;
   END_REPEAT;
   REPEAT i := 1 to HIINDEX(ac) BY 1;
     pvd  := pvd + ac[i]\Assembly_component.assemblies;
   END_REPEAT;
   RETURN(pvd);</algorithm>
      </function>
      <function name="pcd_get_pcltn">
         <parameter name="input">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="Physical_connectivity_layout_topology_link"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="Physical_connectivity_layout_topology_node"/>
         <algorithm>LOCAL
   pcltn : SET OF Physical_connectivity_layout_topology_node := [];
    i : INTEGER := 0;
  END_LOCAL;
  REPEAT  i := 1 TO SIZEOF(input) BY 1;
   pcltn := pcltn + input[i].precedent_node + input[i].subsequent_node;
  END_REPEAT;
  RETURN(pcltn);</algorithm>
      </function>
   </schema>
</express>
