<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express description.file="arm_descriptions.xml" language_version="2" rcs.date="$Date$" rcs.revision="$Revision$" reference="ISO/TS 10303-nnnn">
   <application name="JSDAI" owner="LKSoft" source="physical_connectivity_layout_topology_requirement_arm schema_instance" url="www.lksoft.com" version="4.0 beta"/>
   <schema name="Physical_connectivity_layout_topology_requirement_arm">
      <interface kind="use" schema="Requirement_decomposition_arm"/>
      <interface kind="reference" schema="Support_resource_arm">
         <interfaced.item name="bag_to_set"/>
      </interface>
      <entity name="Physical_connectivity_layout_topology_link">
         <explicit name="subsequent_node">
            <typename name="Physical_connectivity_layout_topology_node"/>
         </explicit>
         <explicit name="precedent_node">
            <typename name="Physical_connectivity_layout_topology_node"/>
         </explicit>
         <where expression="acyclic_physical_connectivity_layout_topology_link(SELF, [subsequent_node], &#10;       'PHYSICAL_CONNECTIVITY_DEFINITION_ARM.PHYSICAL_CONNECTIVITY_LAYOUT_TOPOLOGY_LINK')" label="WR1"/>
      </entity>
      <entity name="Physical_connectivity_layout_topology_node">
         <explicit name="terminal_type">
            <builtintype type="STRING"/>
         </explicit>
      </entity>
      <entity name="Physical_connectivity_layout_topology_requirement" supertypes="Predefined_requirement_view_definition">
         <explicit name="elements">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="Physical_connectivity_layout_topology_link"/>
         </explicit>
         <derived expression="pcd_get_pcltn(elements)" name="nodes">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="Physical_connectivity_layout_topology_node"/>
         </derived>
         <derived expression="(SIZEOF(nodes) = (SIZEOF(elements) + 1))" name="tree_structure">
            <builtintype type="LOGICAL"/>
         </derived>
         <where expression="(tree_structure = TRUE)" label="WR1"/>
      </entity>
      <function name="acyclic_physical_connectivity_layout_topology_link">
         <parameter name="relation">
            <typename name="Physical_connectivity_layout_topology_link"/>
         </parameter>
         <parameter name="relatives">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="Physical_connectivity_layout_topology_node"/>
         </parameter>
         <parameter name="specific_relation">
            <builtintype type="STRING"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>LOCAL
      x : SET OF Physical_connectivity_layout_topology_link := [];
  END_LOCAL;
  IF relation.precedent_node IN relatives THEN
      RETURN (FALSE);
  END_IF;
  x := QUERY(pd &lt;* bag_to_set(USEDIN(relation.precedent_node,
      'PHYSICAL_CONNECTIVITY_DEFINITION_ARM.' +
      'PHYSICAL_CONNECTIVITY_LAYOUT_TOPOLOGY_LINK.' +
      'SUBSEQUENT_NODE')) | specific_relation IN TYPEOF(pd));
  REPEAT i := 1 TO HIINDEX(x);
    IF NOT acyclic_physical_connectivity_layout_topology_link(x[i], relatives +
      relation.precedent_node, specific_relation) THEN
      RETURN (FALSE);
    END_IF;
  END_REPEAT;
  RETURN (TRUE);</algorithm>
      </function>
      <function name="pcd_get_pcltn">
         <parameter name="input">
            <aggregate lower="0" type="SET" upper="?"/>
            <typename name="Physical_connectivity_layout_topology_link"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <typename name="Physical_connectivity_layout_topology_node"/>
         <algorithm>LOCAL
   pcltn : SET OF Physical_connectivity_layout_topology_node := [];
    i : INTEGER := 0;
  END_LOCAL;
  REPEAT  i := 1 TO SIZEOF(input) BY 1;
   pcltn := pcltn + input[i].precedent_node + input[i].subsequent_node;
  END_REPEAT;
  RETURN(pcltn);</algorithm>
      </function>
   </schema>
</express>
