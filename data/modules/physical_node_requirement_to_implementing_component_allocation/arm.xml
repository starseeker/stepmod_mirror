<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express language_version="2" rcs.date="$Date$" rcs.revision="$Revision$" description.file="arm_descriptions.xml">
   <application name="JSDAI" owner="LKSoft" url="www.lksoft.com" version="4.0 beta" source="physical_node_requirement_to_implementing_component_allocation_arm schema_instance"/>
   <schema name="Physical_node_requirement_to_implementing_component_allocation_arm">
      <interface kind="use" schema="Assembly_module_with_packaged_connector_component_arm"/>
      <interface kind="use" schema="Assembly_technology_arm"/>
      <interface kind="use" schema="Physical_connectivity_definition_arm"/>
      <entity name="Physical_node_requirement_to_implementing_component_allocation">
         <explicit name="physical_node_requirement">
            <typename name="Physical_connectivity_definition"/>
         </explicit>
         <explicit name="implementation_component">
            <typename name="Assembly_component"/>
         </explicit>
         <explicit name="implementation_interface_joint_set" optional="YES">
            <aggregate type="SET" lower="1" upper="?"/>
            <typename name="Interface_mounted_join"/>
         </explicit>
         <explicit name="implementation_joint_set" optional="YES">
            <aggregate type="SET" lower="1" upper="?"/>
            <typename name="Assembly_joint"/>
         </explicit>
         <derived name="implementation_connection_definition_1" expression="get_pctd(implementation_component,&#10; implementation_joint_set)">
            <aggregate type="SET" lower="0" upper="1"/>
            <typename name="Part_connected_terminals_definition"/>
         </derived>
         <derived name="implementation_connection_definition_2" expression="get_pctr(implementation_component,&#10; implementation_interface_joint_set)">
            <aggregate type="SET" lower="0" upper="1"/>
            <typename name="Packaged_connector_terminal_relationship"/>
         </derived>
         <where label="WR1" expression="EXISTS(implementation_interface_joint_set) XOR EXISTS(implementation_joint_set)"/>
         <where label="WR2" expression="(SIZEOF(implementation_connection_definition_1) + SIZEOF(implementation_connection_definition_2) = 1) OR (('PHYSICAL_NODE_REQUIREMENT_TO_IMPLEMENTING_COMPONENT_ALLOCATION_ARM.INTERFACE_COMPONENT' IN TYPEOF(implementation_component)) AND ('PHYSICAL_NODE_REQUIREMENT_TO_IMPLEMENTING_COMPONENT_ALLOCATION_ARM.PHYSICAL_COMPONENT_INTERFACE_TERMINAL' IN TYPEOF(get_cit(implementation_component,&#10; implementation_joint_set)))) OR ('PHYSICAL_NODE_REQUIREMENT_TO_IMPLEMENTING_COMPONENT_ALLOCATION_ARM.ROUTED_INTERCONNECT_COMPONENT' IN TYPEOF(implementation_component))"/>
         <where label="WR3" expression="SIZEOF(QUERY(pct &lt;* physical_node_requirement.associated_terminals | pct\Component_feature.associated_component = implementation_component)) = 0"/>
      </entity>
      <function name="get_cit">
         <parameter name="ac">
            <typename name="Assembly_component"/>
         </parameter>
         <parameter name="ajb">
            <aggregate type="SET" lower="0" upper="?"/>
            <typename name="Assembly_joint"/>
         </parameter>
         <typename name="Physical_component_interface_terminal"/>
         <algorithm>LOCAL
      cf  : LIST[1:2] OF component_feature := [ajb[1].assembly_feature_1,
                                               ajb[1].assembly_feature_2];
      cit : Physical_component_interface_terminal;
    END_LOCAL;

    REPEAT i := 1 TO 2 BY 1;
      IF ac :=: cf[i].associated_component THEN
        IF ('PHYSICAL_NODE_REQUIREMENT_TO_IMPLEMENTING_COMPONENT_ALLOCATION_ARM.INTERFACE_COMPONENT' IN TYPEOF(cf[i].associated_component)) THEN
          RETURN(cf[i]);
        ELSE
          RETURN(?);
        END_IF;
      ELSE
        RETURN(?);
      END_IF;
    END_REPEAT;
    RETURN(?);</algorithm>
      </function>
      <function name="get_pctd">
         <parameter name="ac">
            <typename name="Assembly_component"/>
         </parameter>
         <parameter name="ajb">
            <aggregate type="SET" lower="0" upper="?"/>
            <typename name="Assembly_joint"/>
         </parameter>
         <aggregate type="SET" lower="0" upper="?"/>
         <typename name="Part_connected_terminals_definition"/>
         <algorithm>LOCAL
      cf  : LIST[1:2] OF component_feature := [ajb[1].assembly_feature_1,
                                               ajb[1].assembly_feature_2];
      pctd : SET OF part_connected_terminals_definition := [];
    END_LOCAL;

    REPEAT i := 1 TO 2 BY 1;
      IF ac :=: cf[i].associated_component THEN
        IF ('PHYSICAL_NODE_REQUIREMENT_TO_IMPLEMENTING_COMPONENT_ALLOCATION_ARM.PART_TERMINAL' IN TYPEOF(cf[i].definition)) THEN
          pctd := cf[i].definition.connection_requirement;
          RETURN(pctd);
        ELSE
          RETURN(pctd);
        END_IF;
      ELSE
        RETURN(pctd);
      END_IF;
    END_REPEAT;
    RETURN(?);</algorithm>
      </function>
      <function name="get_pctr">
         <parameter name="ac">
            <typename name="Assembly_component"/>
         </parameter>
         <parameter name="imjb">
            <aggregate type="SET" lower="0" upper="?"/>
            <typename name="Interface_mounted_join"/>
         </parameter>
         <aggregate type="SET" lower="0" upper="?"/>
         <typename name="Packaged_connector_terminal_relationship"/>
         <algorithm>LOCAL
      cf   : Component_feature;
      pctr : SET OF packaged_connector_terminal_relationship := [];
    END_LOCAL;

    cf := imjb[1].connection_to_interconnect_module_component;
    IF ac :=: cf.associated_component THEN
      IF ('PHYSICAL_NODE_REQUIREMENT_TO_IMPLEMENTING_COMPONENT_ALLOCATION_ARM.PACKAGED_PART_INTERFACE_TERMINAL' IN TYPEOF(cf.definition)) THEN
        pctr := cf.definition.external_connector_function;
        RETURN(pctr);
      ELSE
        RETURN(pctr);
      END_IF;
    ELSE
      RETURN(pctr);
    END_IF;</algorithm>
      </function>
   </schema>
</express>
