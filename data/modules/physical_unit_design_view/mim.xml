<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express language_version="2" rcs.date="2005-04-18T16:34:30" rcs.revision="1.0" description.file="mim_descriptions.xml">
   <application name="JSDAI" owner="LKSoft" url="www.lksoft.com" version="4.0 beta" source="physical_unit_design_view_mim schema_instance"/>
   <schema name="Physical_unit_design_view_mim">
      <interface kind="use" schema="Physical_unit_usage_view_mim"/>
      <interface kind="use" schema="application_context_schema">
         <interfaced.item name="application_context_element"/>
      </interface>
      <type name="pudv_requirement_assigned_item">
         <select extensible="YES" genericentity="YES" basedon="requirement_assigned_item" selectitems="assembly_component_usage descriptive_representation_item"/>
      </type>
      <entity name="assembly_component" supertypes="component_definition product_definition_shape"/>
      <entity name="component_definition" supertypes="product_definition">
         <where label="WR1" expression=" SIZEOF ( QUERY ( pd &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PROPERTY_DEFINITION.DEFINITION' ) | NOT ( SIZEOF ( QUERY ( sr_pdr &lt;* QUERY ( pdr &lt;* USEDIN ( pd , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION' ) | 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'SHAPE_REPRESENTATION' IN TYPEOF ( pdr . used_representation ) ) | sr_pdr . used_representation \ representation . name = 'planar projected shape' ) ) &lt;= 1 ) ) ) = 0 "/>
         <where label="WR2" expression=" SIZEOF ( QUERY ( pd &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PROPERTY_DEFINITION.DEFINITION' ) | NOT ( SIZEOF ( QUERY ( sr_pdr &lt;* QUERY ( pdr &lt;* USEDIN ( pd , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION' ) | 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'SHAPE_REPRESENTATION' IN TYPEOF ( pdr . used_representation ) ) | sr_pdr . used_representation \ representation . name = '3d bound volume shape' ) ) &lt;= 1 ) ) ) = 0 "/>
         <where label="WR3" expression=" ( NOT ( SELF \ product_definition . description = 'bare die component' ) ) OR ( SIZEOF ( QUERY ( ip &lt;* QUERY ( pdr &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION' ) | pdr \ product_definition_relationship . name = 'instantiated part' ) | ( SIZEOF ( [ 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'BARE_DIE' , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'EXTERNALLY_DEFINED_BARE_DIE' , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'LIBRARY_DEFINED_BARE_DIE' ] * TYPEOF ( ip . relating_product_definition ) ) = 1 ) AND ( ip . relating_product_definition . frame_of_reference . name = 'physical design usage' ) ) ) = 1 ) "/>
         <where label="WR4" expression=" NOT ( is_assembly_module_occurrence ( SELF ) ) OR ( SIZEOF ( QUERY ( ip &lt;* QUERY ( pdr &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION' ) | pdr \ product_definition_relationship . name = 'instantiated part' ) | ( 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PHYSICAL_UNIT' IN TYPEOF ( ip . relating_product_definition ) ) AND ( ip . relating_product_definition . frame_of_reference . name = 'physical design usage' ) AND ( ip . relating_product_definition \ product_definition . name = 'assembly module' ) ) ) = 1 ) "/>
         <where label="WR5" expression=" NOT ( is_assembly_module_occurrence ( SELF ) ) OR ( SIZEOF ( QUERY ( pd &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PROPERTY_DEFINITION.DEFINITION' ) | SIZEOF ( QUERY ( sa &lt;* USEDIN ( pd , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'SHAPE_ASPECT.OF_SHAPE' ) | ( 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'COMPONENT_TERMINAL' IN TYPEOF ( sa ) ) AND ( sa \ shape_aspect . description = 'assembly module component terminal' ) ) ) &gt;= 2 ) ) &gt;= 1 ) "/>
         <where label="WR6" expression=" NOT ( is_interconnect_module_occurrence ( SELF ) ) OR ( SIZEOF ( QUERY ( ip &lt;* QUERY ( pdr &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION' ) | pdr \ product_definition_relationship . name = 'instantiated part' ) | ( 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PHYSICAL_UNIT' IN TYPEOF ( ip . relating_product_definition ) ) AND ( ip . relating_product_definition . frame_of_reference . name = 'physical design usage' ) AND ( SELF \ product_definition . name = 'interconnect module' ) ) ) = 1 ) "/>
         <where label="WR8" expression=" ( NOT ( SELF \ product_definition . description = 'mating connector' ) ) OR ( SIZEOF ( QUERY ( pd &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PROPERTY_DEFINITION.DEFINITION' ) | SIZEOF ( QUERY ( pdr &lt;* USEDIN ( pd , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION' ) | pdr . used_representation \ representation . name = 'mating connector placement' ) ) = 1 ) ) = 1 ) "/>
         <where label="WR9" expression=" ( NOT ( SELF \ product_definition . description = 'mating connector' ) ) OR ( ( SIZEOF ( QUERY ( pdr &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PRODUCT_DEFINITION_RELATIONSHIP.RELATING_PRODUCT_DEFINITION' ) | 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'NEXT_ASSEMBLY_USAGE_OCCURRENCE' IN TYPEOF ( pdr ) ) ) = 0 ) AND ( SIZEOF ( QUERY ( pdr &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION' ) | 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'NEXT_ASSEMBLY_USAGE_OCCURRENCE' IN TYPEOF ( pdr ) ) ) = 0 ) ) "/>
         <where label="WR10" expression=" SIZEOF ( QUERY ( pdr &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION' ) | NOT ( NOT ( pdr \ product_definition_relationship . name = 'instantiated part' ) OR ( SELF . formation :=: pdr . relating_product_definition . formation ) ) ) ) = 0 "/>
         <where label="WR11" expression=" SIZEOF ( QUERY ( pd &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PROPERTY_DEFINITION.DEFINITION' ) | NOT ( SIZEOF ( QUERY ( sr_pdr &lt;* QUERY ( pdr &lt;* USEDIN ( pd , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION' ) | 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'SHAPE_REPRESENTATION' IN TYPEOF ( pdr . used_representation ) ) | ( sr_pdr . used_representation \ representation . name = 'part template non planar 2d shape' ) OR ( sr_pdr . used_representation \ representation . name = 'non planar 2d shape' ) OR ( sr_pdr . used_representation \ representation . name = 'open shell based surface' ) ) ) &lt;= 1 ) ) ) = 0 "/>
         <where label="WR13" expression=" NOT ( is_assembly_module_macro_occurrence ( SELF ) ) OR ( SIZEOF ( QUERY ( ip &lt;* QUERY ( pdr &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION' ) | pdr \ product_definition_relationship . name = 'design definition' ) | ( 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PHYSICAL_UNIT' IN TYPEOF ( ip . relating_product_definition ) ) AND ( ip . relating_product_definition . frame_of_reference . name = 'physical design' ) AND ( ip . relating_product_definition \ product_definition . name = 'assembly module' ) ) ) = 1 ) "/>
         <where label="WR14" expression=" NOT ( is_interconnect_module_macro_occurrence ( SELF ) ) OR ( SIZEOF ( QUERY ( ip &lt;* QUERY ( pdr &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION' ) | pdr \ product_definition_relationship . name = 'design definition' ) | ( 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PHYSICAL_UNIT' IN TYPEOF ( ip . relating_product_definition ) ) AND ( ip . relating_product_definition . frame_of_reference . name = 'physical design' ) AND ( ip . relating_product_definition \ product_definition . name = 'interconnect module' ) ) ) = 1 ) "/>
         <where label="WR15" expression=" SIZEOF ( QUERY ( pdr &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION' ) | ( ( pdr \ product_definition_relationship . name = 'instantiated definition' ) AND ( NOT ( SELF . formation :=: pdr . relating_product_definition . formation ) ) ) ) ) = 0 "/>
         <where label="WR16" expression=" ( NOT ( SELF \ product_definition . description = 'routed interconnect component' ) ) OR ( ( SIZEOF ( QUERY ( ip &lt;* QUERY ( pdr &lt;* USEDIN ( SELF , 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION' ) | pdr \ product_definition_relationship . name = 'instantiated part' ) | ( SIZEOF ( [ 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PHYSICAL_UNIT' ] * TYPEOF ( ip . relating_product_definition ) ) = 1 ) AND ( ip . relating_product_definition . frame_of_reference . name = 'physical design usage' ) ) ) = 1 ) AND ( SELF . frame_of_reference . name = 'physical occurrence' ) ) "/>
      </entity>
      <entity name="thermal_component" supertypes="assembly_component"/>
      <rule name="assembly_composition_relationship_unique_constraint" appliesto="assembly_component_usage">
         <algorithm> LOCAL acr : BAG OF assembly_component_usage := QUERY ( acu &lt;* assembly_component_usage | ( acu \ product_definition_relationship . name = 'assembly composition' ) ) ; pu_bag : BAG OF physical_unit := [ ] ; acu_bag : BAG OF assembly_component_usage ; pass : BOOLEAN := TRUE ; cd_bag : BAG OF component_definition ; END_LOCAL ; REPEAT i := 1 to SIZEOF ( acr ) by 1 ; IF EXISTS ( acr [ i ] . relating_product_definition ) THEN IF ( ( acr [ i ] . relating_product_definition . frame_of_reference . name = 'physical design' ) AND ( 'PHYSICAL_UNIT_USAGE_VIEW_MIM.' + 'PHYSICAL_UNIT' IN TYPEOF ( acr [ i ] . relating_product_definition ) ) ) THEN IF ( NOT ( acr [ i ] . relating_product_definition IN pu_bag ) ) THEN pu_bag := pu_bag + acr [ i ] . relating_product_definition ; END_IF ; END_IF ; END_IF ; END_REPEAT ; REPEAT i := 1 to SIZEOF ( pu_bag ) by 1 ; IF ( NOT pass ) THEN ESCAPE ; END_IF ; cd_bag := [ ] ; acu_bag := QUERY ( acu &lt;* acr | ( acu . relating_product_definition :=: pu_bag [ i ] ) ) ; REPEAT j := 1 to SIZEOF ( acu_bag ) by 1 ; IF EXISTS ( acu_bag [ j ] . related_product_definition ) THEN IF ( 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'COMPONENT_DEFINITION' IN TYPEOF ( acu_bag [ j ] . related_product_definition ) ) THEN IF ( acu_bag [ j ] . related_product_definition IN cd_bag ) THEN pass := FALSE ; ESCAPE ; ELSE cd_bag := cd_bag + acu_bag [ j ] . related_product_definition ; END_IF ; END_IF ; END_IF ; END_REPEAT ; END_REPEAT ; </algorithm>
         <where label="WR1" expression=" pass "/>
      </rule>
      <rule name="next_higher_assembly_relationship_unique_constraint" appliesto="next_assembly_usage_occurrence">
         <algorithm> LOCAL pu_bag : BAG OF physical_unit := [ ] ; nauo_bag : BAG OF next_assembly_usage_occurrence ; pass : BOOLEAN := TRUE ; refdes_bag : BAG OF STRING ; END_LOCAL ; REPEAT i := 1 to SIZEOF ( next_assembly_usage_occurrence ) by 1 ; IF EXISTS ( next_assembly_usage_occurrence [ i ] . relating_product_definition ) THEN IF ( ( next_assembly_usage_occurrence [ i ] . relating_product_definition . frame_of_reference . name = 'physical design' ) AND ( 'PHYSICAL_UNIT_DESIGN_VIEW_MIM.' + 'PHYSICAL_UNIT' IN TYPEOF ( next_assembly_usage_occurrence [ i ] . relating_product_definition ) ) ) THEN IF ( NOT ( next_assembly_usage_occurrence [ i ] . relating_product_definition IN pu_bag ) ) THEN pu_bag := pu_bag + next_assembly_usage_occurrence [ i ] . relating_product_definition ; END_IF ; END_IF ; END_IF ; END_REPEAT ; REPEAT i := 1 to SIZEOF ( pu_bag ) by 1 ; IF ( NOT pass ) THEN ESCAPE ; END_IF ; refdes_bag := [ ] ; nauo_bag := QUERY ( nauo &lt;* next_assembly_usage_occurrence | ( nauo . relating_product_definition :=: pu_bag [ i ] ) ) ; REPEAT j := 1 to SIZEOF ( nauo_bag ) by 1 ; IF EXISTS ( nauo_bag [ j ] . reference_designator ) THEN IF ( nauo_bag [ j ] . reference_designator IN refdes_bag ) THEN pass := FALSE ; ESCAPE ; ELSE refdes_bag := refdes_bag + nauo_bag [ j ] . reference_designator ; END_IF ; END_IF ; END_REPEAT ; END_REPEAT ; </algorithm>
         <where label="WR1" expression=" pass "/>
      </rule>
      <function name="is_assembly_module_macro_occurrence">
         <parameter name="pd">
            <typename name="product_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm> LOCAL pass : BOOLEAN := FALSE ; END_LOCAL ; IF NOT ( EXISTS ( pd \ product_definition . name ) ) THEN RETURN ( FALSE ) ; END_IF ; IF ( ( pd \ product_definition . name = 'assembly module' ) AND ( pd . frame_of_reference \ application_context_element . name = 'macro occurrence' ) ) THEN RETURN ( TRUE ) ; END_IF ; RETURN ( pass ) ; </algorithm>
      </function>
      <function name="is_assembly_module_occurrence">
         <parameter name="pd">
            <typename name="product_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm> LOCAL pass : BOOLEAN := FALSE ; END_LOCAL ; IF NOT ( EXISTS ( pd \ product_definition . name ) ) THEN RETURN ( FALSE ) ; END_IF ; IF ( ( pd \ product_definition . name = 'assembly module' ) AND ( pd . frame_of_reference \ application_context_element . name = 'physical occurrence' ) ) THEN RETURN ( TRUE ) ; END_IF ; RETURN ( pass ) ; </algorithm>
      </function>
      <function name="is_interconnect_module_macro_occurrence">
         <parameter name="pd">
            <typename name="product_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm> LOCAL pass : BOOLEAN := FALSE ; END_LOCAL ; IF NOT ( EXISTS ( pd \ product_definition . name ) ) THEN RETURN ( FALSE ) ; END_IF ; IF ( ( pd \ product_definition . name = 'interconnect module' ) AND ( pd . frame_of_reference \ application_context_element . name = 'macro occurrence' ) ) THEN RETURN ( TRUE ) ; END_IF ; RETURN ( pass ) ; </algorithm>
      </function>
      <function name="is_interconnect_module_occurrence">
         <parameter name="pd">
            <typename name="product_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm> LOCAL pass : BOOLEAN := FALSE ; END_LOCAL ; IF NOT ( EXISTS ( pd \ product_definition . name ) ) THEN RETURN ( FALSE ) ; END_IF ; IF ( ( pd \ product_definition . name = 'interconnect module' ) AND ( pd . frame_of_reference \ application_context_element . name = 'physical occurrence' ) ) THEN RETURN ( TRUE ) ; END_IF ; RETURN ( pass ) ; </algorithm>
      </function>
   </schema>
</express>
