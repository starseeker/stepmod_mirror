<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express description.file="mim_descriptions.xml" language_version="2" rcs.date="$Date: 2012/10/14 09:07:17 $" rcs.revision="$Revision: 1.7 $" reference="">
   <application name="JSDAI" owner="LKSoft" source="product_and_manufacturing_information_view_context_mim schema_instance" url="www.lksoft.com" version="4.0 beta"/>
   <schema name="Product_and_manufacturing_information_view_context_mim">
      <interface kind="use" schema="Part_view_definition_mim"/>
      <interface kind="use" schema="Document_assignment_mim"/>
      <interface kind="reference" schema="support_resource_schema">
         <interfaced.item name="bag_to_set"/>
      </interface>
      <type name="pamivc_document_reference_item">
         <select basedon="document_reference_item" selectitems="product_definition_context"/>
      </type>
      <rule appliesto="product_definition_context" name="valid_product_and_manufacturing_information_view_contexts">
         <algorithm>LOCAL
  design_view_contexts : SET OF product_definition_context :=
    QUERY( pdc &lt;* product_definition_context | pdc.life_cycle_stage = 'design');
  gdt_representation_view_contexts : SET OF product_definition_context :=
    QUERY( pdc &lt;* product_definition_context | pdc.frame_of_reference.application = 'geometrical dimensioning and tolerancing representation');
  machining_feature_view_contexts : SET OF product_definition_context :=
    QUERY( pdc &lt;* product_definition_context | pdc.frame_of_reference.application = 'machining feature');
  material_specification_view_contexts : SET OF product_definition_context :=
    QUERY( pdc &lt;* product_definition_context | pdc.frame_of_reference.application = 'material specification');
  model_based_3d_annotation_presentation_view_contexts  : SET OF product_definition_context :=
    QUERY( pdc &lt;* product_definition_context | pdc.frame_of_reference.application = 'model based 3D annotation presentation');
  model_based_view_contexts : SET OF product_definition_context :=
    QUERY( pdc &lt;* product_definition_context | pdc.frame_of_reference.application = 'model based product geometry');
  process_state_view_contexts : SET OF product_definition_context :=
    QUERY( pdc &lt;* product_definition_context | pdc.frame_of_reference.application = 'process state');
  surface_finish_view_contexts : SET OF product_definition_context :=
    QUERY( pdc &lt;* product_definition_context | pdc.frame_of_reference.application = 'surface finish');
  additional_view_contexts : SET OF product_definition_context :=
         gdt_representation_view_contexts + machining_feature_view_contexts + material_specification_view_contexts +
         model_based_3d_annotation_presentation_view_contexts + process_state_view_contexts + surface_finish_view_contexts;
  need_initial_model_based_view_contexts : SET OF product_definition_context :=
    gdt_representation_view_contexts + model_based_3d_annotation_presentation_view_contexts;
END_LOCAL;</algorithm>
         <where expression="SIZEOF(gdt_representation_view_contexts * design_view_contexts) = SIZEOF(gdt_representation_view_contexts)" label="WR1"/>
         <where expression="SIZEOF(machining_feature_view_contexts * design_view_contexts) = SIZEOF(machining_feature_view_contexts)" label="WR2"/>
         <where expression="SIZEOF(material_specification_view_contexts * design_view_contexts) = SIZEOF(material_specification_view_contexts)" label="WR3"/>
         <where expression="SIZEOF(model_based_3d_annotation_presentation_view_contexts * design_view_contexts) = SIZEOF(model_based_3d_annotation_presentation_view_contexts)" label="WR4"/>
         <where expression="SIZEOF(model_based_view_contexts * design_view_contexts) = SIZEOF(model_based_view_contexts)" label="WR5"/>
         <where expression="SIZEOF(process_state_view_contexts * design_view_contexts) = SIZEOF(process_state_view_contexts)" label="WR6"/>
         <where expression="SIZEOF(surface_finish_view_contexts * design_view_contexts) = SIZEOF(surface_finish_view_contexts)" label="WR7"/>
         <where expression="SIZEOF(QUERY(mbvc &lt;* model_based_view_contexts |&#10;        (SIZEOF(USEDIN(mbvc, 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION_CONTEXT_ASSOCIATION.FRAME_OF_REFERENCE')) = 0)&#10;        )) = SIZEOF(model_based_view_contexts)" label="WR8"/>
         <where expression="SIZEOF(QUERY(avc &lt;* additional_view_contexts |&#10;        (SIZEOF(USEDIN(avc, 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION.FRAME_OF_REFERENCE')) = 0)&#10;       )) = SIZEOF(additional_view_contexts)" label="WR9"/>
         <where expression="SIZEOF(QUERY(nimbvc &lt;* need_initial_model_based_view_contexts | NOT&#10;        (SIZEOF(QUERY(pdca &lt;* USEDIN(nimbvc, 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION_CONTEXT_ASSOCIATION.FRAME_OF_REFERENCE') | &#10;         (pdca\product_definition_context_association.definition\product_definition.frame_of_reference IN model_based_view_contexts)))     &#10;        =&#10;        SIZEOF(need_initial_model_based_view_contexts))&#10;       )) = 0" label="WR10"/>
         <where expression="SIZEOF ( QUERY( gdt_pdc &lt;* gdt_representation_view_contexts |&#10;  &#9;         &#9;SIZEOF(['ISO 1101', 'ASME Y14.5'] * get_associated_mandatory_document_ids(gdt_pdc) ) = 0 )&#10;  &#9;       ) = 0" label="WR11"/>
         <where expression="SIZEOF ( QUERY( mb3d_pdc &lt;* model_based_3d_annotation_presentation_view_contexts |&#10;  &#9;             SIZEOF(['ISO 1101', 'ISO 16792', 'ASME Y14.41', 'ASME Y14.5'] * get_associated_mandatory_document_ids(mb3d_pdc) ) = 0)         &#10;  &#9;       ) = 0" label="WR12"/>
      </rule>
      <function name="get_associated_mandatory_document_ids">
         <parameter name="pdc">
            <typename name="product_definition_context"/>
         </parameter>
         <aggregate lower="0" type="SET" upper="?"/>
         <builtintype type="STRING"/>
         <algorithm>LOCAL
		result : SET OF STRING := [];
		adrs_raw : SET OF applied_document_reference := bag_to_set(USEDIN(pdc, 'DOCUMENT_ASSIGNMENT_MIM.APPLIED_DOCUMENT_REFERENCE.ITEMS'));
		adrs_filtered : SET OF applied_document_reference := [];
		ras : SET OF role_association; 
		dpas : SET OF document_product_association;
	END_LOCAL;

	-- scan adrs_raw for associated role 'mandatory' and fill adrs_filtered with results
	REPEAT i := 1 TO HIINDEX(adrs_raw);
		if adrs_raw[i]\document_reference.role\object_role.name = 'mandatory' THEN
			adrs_filtered := adrs_filtered + adrs_raw[i];
		END_IF;	
	END_REPEAT;
	
	-- scan through adrs_filtered and access associated product.id s
	REPEAT i := 1 TO HIINDEX(adrs_filtered);
		dpas := bag_to_set(USEDIN(adrs_filtered[i]\document_reference.assigned_document, 'DOCUMENT_SCHEMA.DOCUMENT_PRODUCT_ASSOCIATION.RELATING_DOCUMENT'));
		REPEAT j := 1 TO HIINDEX(dpas);
			IF 'DOCUMENT_ASSIGNMENT_MIM.DOCUMENT_PRODUCT_EQUIVALENCE' IN TYPEOF (dpas[j]) THEN
			   IF 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION_FORMATION' IN TYPEOF (dpas[j]\document_product_association.related_product) THEN
			   		result := result + dpas[j]\document_product_association.related_product\product_definition_formation.of_product\product.id;
			   END_IF;
			   IF 'PRODUCT_DEFINITION_SCHEMA.PRODUCT' IN TYPEOF (dpas[j].related_product) THEN
			   		result := result + dpas[j]\document_product_association.related_product\product.id;
			   END_IF;
			END_IF;	
		END_REPEAT;
	END_REPEAT;
	
	RETURN (result);</algorithm>
      </function>
   </schema>
</express>
