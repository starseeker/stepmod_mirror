(*
   $Id: arm.exp,v 1.35 2005/09/07 14:38:15 liutkus Exp $
   ISO TC184/SC4/WG12 N3591 - ISO/CD-TS 10303-1740 Requirement decomposition - EXPRESS ARM
*)

SCHEMA Requirement_decomposition_arm;

	USE FROM Conductivity_material_aspects_arm;	-- ISO/TS 10303-1756
	USE FROM Elemental_geometric_shape_arm;	-- ISO/TS 10303-1004
	USE FROM Functional_specification_arm;	-- ISO/TS 10303-1679
	USE FROM Product_rule_arm;	-- ISO/TS 10303-1739

	REFERENCE FROM Specification_document_arm(get_document_definition);	-- ISO/TS 10303-1747


  TYPE material_conductivity_classification = ENUMERATION OF
    (conductive,
     resistive,
     semi_conductive,
     non_conductive);
  END_TYPE;

	TYPE characteristic_select = SELECT
	   (coordinated_characteristic,
	   characteristic);
	END_TYPE; 

	TYPE rd_documented_element_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON documented_element_select WITH 
	   (Requirement_definition_property);
	END_TYPE; 

	TYPE rd_material_item_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON material_item_select WITH
		(Requirement_definition_property);
	END_TYPE;

	TYPE rd_property_assignment_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON property_assignment_select WITH
		(Requirement_view_definition);
	END_TYPE;

	SUBTYPE_CONSTRAINT rd_model_parameter_subtypes FOR Model_parameter; 
		 ONEOF (Analytical_model_parameter,
		 Category_model_parameter,
		 Rule_function_domain_parameter,
		 Rule_function_range_parameter);
	END_SUBTYPE_CONSTRAINT;

	TYPE relationship_operation = ENUMERATION OF
    	(and_operation,
		or_operation);
	END_TYPE;

	TYPE requirement_view_relationship_type = ENUMERATION OF
    	(derived_from,
	     precedence,
    	 supplemental);
	END_TYPE;

  ENTITY Constraint_occurrence
    SUPERTYPE OF (View_based_constraint_occurrence)
    SUBTYPE OF (Requirement_definition_property);
      logical_relation : OPTIONAL Rule_complex_clause;
    WHERE
      WR1 : (('REQUIREMENT_DECOMPOSITION_ARM.' + 'VIEW_BASED_CONSTRAINT_OCCURRENCE') IN TYPEOF(SELF)) OR EXISTS(logical_relation);
  END_ENTITY;

  ENTITY Design_characteristic_occurrence
    SUBTYPE OF (Requirement_definition_property);
  END_ENTITY;

  ENTITY Design_requirement_occurrence
    SUBTYPE OF (Requirement_definition_property);
  END_ENTITY;

  ENTITY View_based_constraint_occurrence
    SUPERTYPE OF (Shape_and_view_based_constraint_occurrence)
    SUBTYPE OF (Constraint_occurrence);
      constraining_part : Product_view_definition;
  END_ENTITY;

  ENTITY Electrical_requirement_occurrence
    SUPERTYPE OF (Material_electrical_conductivity_requirement_occurrence)
    SUBTYPE OF (Requirement_definition_property);
  END_ENTITY;

  ENTITY Electromagnetic_requirement_occurrence
    SUBTYPE OF (Requirement_definition_property);
  END_ENTITY;

  ENTITY Inspection_requirement_occurrence
    SUBTYPE OF (Requirement_definition_property);
  END_ENTITY;

  ENTITY Material_electrical_conductivity_requirement_occurrence
    SUBTYPE OF (Electrical_requirement_occurrence);
      electrical_conductivity_characteristic : material_conductivity_classification;
  END_ENTITY;

  ENTITY Mechanical_requirement_occurrence
    SUBTYPE OF (Requirement_definition_property);
  END_ENTITY;

  ENTITY Operational_requirement_occurrence_relationship
     SUBTYPE OF (Assigned_property, View_definition_relationship);
       SELF\View_definition_relationship.relating_view RENAMED operand_1 : Requirement_view_definition;
       SELF\View_definition_relationship.related_view RENAMED operand_2  : Requirement_view_definition;
       SELF\Assigned_property.described_element RENAMED result           : Requirement_view_definition;
       relationship_type                                                 : relationship_operation;
    WHERE
      WR1 : operand_1 :<>: operand_2;
  END_ENTITY;

  ENTITY Purpose_occurrence
    SUBTYPE OF (Requirement_definition_property);
  END_ENTITY;

  ENTITY Requirement_definition_property
	SUPERTYPE OF((ONEOF (Thermal_requirement_occurrence,
		 Electromagnetic_requirement_occurrence,
		 Electrical_requirement_occurrence,
		 Mechanical_requirement_occurrence) ANDOR
		 ONEOF (Design_requirement_occurrence,
		 Inspection_requirement_occurrence,
		 Test_requirement_occurrence,
		 Purpose_occurrence,
		 Constraint_occurrence,
		 Design_characteristic_occurrence)));
      associated_definition               : Requirement_view_definition;
      required_analytical_representation  : OPTIONAL SET[1:?] OF Analytical_model_application;
      required_functional_specification   : OPTIONAL SET[1:?] OF Functional_specification;
      required_part                       : OPTIONAL SET[1:?] OF Product;
      required_characteristic             : characteristic_select;
    DERIVE  
		requirement_specification: SET[1:?] OF Document_definition :=
  			get_document_definition(SELF, 'requirement specification', 
  			'SPECIFICATION_DOCUMENT_ARM.SPECIFICATION_DEFINITION');
		reference_clause: SET[0:1] OF Document_definition :=
  			get_document_definition(SELF, 'reference clause', 
  			'SPECIFICATION_DOCUMENT_ARM.DOCUMENT_DEFINITION');
   INVERSE
	  required_material : SET [0:1] OF material_identification FOR items;      
    UNIQUE
      UR1 : associated_definition;
    WHERE  
	  WR1 : NOT (SIZEOF(required_material) = 1) OR
            ('CONDUCTIVITY_MATERIAL_ASPECTS.'+ 'MATERIAL_IDENTIFICATION_WITH_CONDUCTIVITY_CLASSIFICATION' IN TYPEOF (required_material));
  END_ENTITY;

  ENTITY Requirement_view_definition_relationship
     SUBTYPE OF (View_definition_relationship);
       SELF\View_definition_relationship.relating_view RENAMED primary  : Requirement_view_definition;
       SELF\View_definition_relationship.related_view RENAMED secondary : Requirement_view_definition;
       relationship_type                                                : requirement_view_relationship_type;
     WHERE
       WR1 : primary :<>: secondary;
  END_ENTITY;

  ENTITY Shape_and_view_based_constraint_occurrence
    SUBTYPE OF (View_based_constraint_occurrence);
      constraining_shape : SET[1:?] OF Geometric_model;
    WHERE
      WR1 : valid_constraining_shape(constraining_shape,
 SELF\View_based_constraint_occurrence.constraining_part);
  END_ENTITY;

  ENTITY Test_requirement_occurrence
    SUBTYPE OF (Requirement_definition_property);
    WHERE
      WR1 : SIZEOF(SELF\Requirement_definition_property.required_analytical_representation) + SIZEOF(SELF\Requirement_definition_property.required_functional_specification) > 0;
  END_ENTITY;

  ENTITY Thermal_requirement_occurrence
    SUBTYPE OF (Requirement_definition_property);
  END_ENTITY;

  FUNCTION bag_to_set(
    the_bag : BAG OF GENERIC : intype
  ) : SET OF GENERIC : intype;

    LOCAL
      the_set : SET OF GENERIC : intype := [];
      i       : INTEGER;
    END_LOCAL;

    IF SIZEOF(the_bag) > 0 THEN
      REPEAT i := 1 TO HIINDEX(the_bag);
        the_set := the_set + the_bag[i];
      END_REPEAT;
    END_IF;
    RETURN(the_set);
  END_FUNCTION;

FUNCTION get_requirement_definition_property
  (ra : Requirement_assignment;
  req_type : STRING) : Requirement_definition_property;
  LOCAL
    requirements : SET[0:?] OF Requirement_definition_property;
  END_LOCAL;
	requirements := bag_to_set(USEDIN (ra.assigned_requirement, 'REQUIREMENT_DECOMPOSITION_ARM.' + 'REQUIREMENT_DEFINTION_PROPERTY.ASSOCIATED_DEFINITION')) ;
	REPEAT i := 1 to SIZEOF(requirements) by 1;
	  IF (req_type IN TYPEOF (requirements[i])) THEN
	  	RETURN (requirements[i]);
	  END_IF;
	END_REPEAT;
	RETURN (?);
END_FUNCTION;

  FUNCTION valid_constraining_shape(
    sd   : SET OF Geometric_model ;
    eepd : Product_view_definition
  ) : BOOLEAN;

    RETURN(TRUE);
  END_FUNCTION;

FUNCTION get_rvd(
	input : requirement_assignment_item;
	id : STRING
) : SET OF Requirement_view_definition; 

LOCAL
	rvd : SET[0:?] OF Requirement_view_definition := [];  --this gives us access to the information base
	ra : SET[0:?] OF Requirement_assignment :=[];
END_LOCAL;
	ra := bag_to_set((QUERY(rai <* USEDIN (input, 'REQUIREMENT_ASSIGNMENT_ARM.'+
	'REQUIREMENT_ASSIGNMENT.ASSIGNED_TO') | (rai.id = id))));

	-- iterate over ra
	REPEAT i := 1 to SIZEOF(ra) by 1;
		rvd := rvd + ra[i].assigned_requirement;
	END_REPEAT;

	RETURN(rvd);
END_FUNCTION;


END_SCHEMA;

