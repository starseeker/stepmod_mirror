<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express language_version="2" rcs.date="$Date$" rcs.revision="$Revision$" description.file="arm_descriptions.xml">
   <application name="JSDAI" owner="LKSoft" url="www.lksoft.com" version="4.0 beta" source="requirement_decomposition_arm schema_instance"/>
   <schema name="Requirement_decomposition_arm">
      <interface kind="use" schema="Conductivity_material_aspects_arm"/>
      <interface kind="use" schema="Elemental_geometric_shape_arm"/>
      <interface kind="use" schema="Functional_specification_arm"/>
      <interface kind="use" schema="Production_rule_arm"/>
      <interface kind="use" schema="Requirement_view_definition_arm"/>
      <interface kind="reference" schema="Specification_document_arm">
         <interfaced.item name="get_document_definition"/>
      </interface>
      <type name="characteristic_select">
         <select selectitems="Property_value_representation characteristic"/>
      </type>
      <type name="material_conductivity_classification">
         <enumeration items="conductive resistive semi_conductive non_conductive"/>
      </type>
      <type name="rd_documented_element_select">
         <select extensible="YES" genericentity="YES" basedon="documented_element_select" selectitems="Predefined_requirement_view_definition"/>
      </type>
      <type name="rd_material_item_select">
         <select extensible="YES" genericentity="YES" basedon="material_item_select" selectitems="Predefined_requirement_view_definition"/>
      </type>
      <type name="rd_property_assignment_select">
         <select extensible="YES" genericentity="YES" basedon="property_assignment_select" selectitems="Requirement_view_definition"/>
      </type>
      <type name="relationship_operation">
         <enumeration items="and_operation or_operation"/>
      </type>
      <type name="requirement_view_relationship_type">
         <enumeration items="derived_from precedence reference_to supplemental"/>
      </type>
      <entity name="Constraint_occurrence" supertypes="Predefined_requirement_view_definition" super.expression="View_based_constraint_occurrence">
         <explicit name="logical_relation" optional="YES">
            <typename name="Rule_complex_clause"/>
         </explicit>
         <where label="WR1" expression="(('REQUIREMENT_DECOMPOSITION_ARM.' + 'VIEW_BASED_CONSTRAINT_OCCURRENCE') IN TYPEOF(SELF)) OR EXISTS(logical_relation)"/>
         <where label="WR2" expression="NOT EXISTS(SELF\Product_view_definition.id)"/>
      </entity>
      <entity name="Design_characteristic_occurrence" supertypes="Predefined_requirement_view_definition"/>
      <entity name="Material_electrical_conductivity_requirement_occurrence" supertypes="Predefined_requirement_view_definition">
         <explicit name="electrical_conductivity_characteristic">
            <typename name="material_conductivity_classification"/>
         </explicit>
      </entity>
      <entity name="Operational_requirement_occurrence_relationship" supertypes="Assigned_property View_definition_relationship">
         <explicit name="operand_1">
            <typename name="Requirement_view_definition"/>
            <redeclaration entity-ref="View_definition_relationship" old_name="relating_view"/>
         </explicit>
         <explicit name="operand_2">
            <typename name="Requirement_view_definition"/>
            <redeclaration entity-ref="View_definition_relationship" old_name="related_view"/>
         </explicit>
         <explicit name="result">
            <typename name="Requirement_view_definition"/>
            <redeclaration entity-ref="Assigned_property" old_name="described_element"/>
         </explicit>
         <explicit name="relationship_type">
            <typename name="relationship_operation"/>
         </explicit>
         <where label="WR1" expression="operand_1 :&lt;&gt;: operand_2"/>
      </entity>
      <entity name="Predefined_requirement_view_definition" supertypes="Requirement_view_definition" super.expression="ONEOF (Constraint_occurrence, Design_characteristic_occurrence)">
         <explicit name="required_analytical_representation" optional="YES">
            <aggregate type="SET" lower="1" upper="?"/>
            <typename name="Analytical_model_application"/>
         </explicit>
         <explicit name="required_functional_specification" optional="YES">
            <aggregate type="SET" lower="1" upper="?"/>
            <typename name="Functional_specification"/>
         </explicit>
         <explicit name="required_characteristic" optional="YES">
            <typename name="characteristic_select"/>
         </explicit>
         <derived name="requirement_specification" expression="get_document_definition(SELF, 'requirement specification', &#10;  			'SPECIFICATION_DOCUMENT_ARM.SPECIFICATION_DEFINITION')">
            <aggregate type="SET" lower="1" upper="?"/>
            <typename name="Document_definition"/>
         </derived>
         <derived name="reference_clause" expression="get_document_definition(SELF, 'reference clause', &#10;  			'SPECIFICATION_DOCUMENT_ARM.DOCUMENT_DEFINITION')">
            <aggregate type="SET" lower="0" upper="1"/>
            <typename name="Document_definition"/>
         </derived>
         <inverse name="required_material" entity="Material_identification" attribute="items">
            <inverse.aggregate type="SET" lower="0" upper="1"/>
         </inverse>
         <where label="WR1" expression="NOT (SIZEOF(required_material) = 1) OR&#10;            ('CONDUCTIVITY_MATERIAL_ASPECTS_ARM.'+ 'MATERIAL_IDENTIFICATION_WITH_CONDUCTIVITY_CLASSIFICATION' IN TYPEOF (required_material))"/>
         <where label="WR2" expression="SELF\Product_view_definition.initial_context\View_definition_context.life_cycle_stage = ''"/>
         <where label="WR3" expression="SELF\Product_view_definition.initial_context\View_definition_context.application_domain = ''"/>
         <where label="WR4" expression="['mechanical', 'thermal', 'electromechancial', 'electromagnetic compatibility', 'electrical'] IN&#10;        SELF\Product_view_definition.initial_context.application_domain"/>
         <where label="WR5" expression="['design', 'qualify', 'inspect', 'test'] IN SELF\Product_view_definition.initial_context.life_cycle_stage"/>
         <where label="WR6" expression="NOT EXISTS(SELF\Product_view_definition.name)"/>
      </entity>
      <entity name="Requirement_view_definition_relationship" supertypes="View_definition_relationship">
         <explicit name="primary">
            <typename name="Requirement_view_definition"/>
            <redeclaration entity-ref="View_definition_relationship" old_name="relating_view"/>
         </explicit>
         <explicit name="secondary">
            <typename name="Requirement_view_definition"/>
            <redeclaration entity-ref="View_definition_relationship" old_name="related_view"/>
         </explicit>
         <explicit name="relationship_type">
            <typename name="requirement_view_relationship_type"/>
         </explicit>
         <where label="WR1" expression="primary :&lt;&gt;: secondary"/>
      </entity>
      <entity name="Shape_and_view_based_constraint_occurrence" supertypes="View_based_constraint_occurrence">
         <explicit name="constraining_shape">
            <aggregate type="SET" lower="1" upper="?"/>
            <typename name="Geometric_model"/>
         </explicit>
         <where label="WR1" expression="valid_constraining_shape(constraining_shape,&#10; SELF\View_based_constraint_occurrence.constraining_part)"/>
      </entity>
      <entity name="View_based_constraint_occurrence" supertypes="Constraint_occurrence" super.expression="Shape_and_view_based_constraint_occurrence">
         <explicit name="constraining_part">
            <typename name="Product_view_definition"/>
         </explicit>
      </entity>
      <function name="bag_to_set">
         <parameter name="the_bag">
            <aggregate type="BAG" lower="0" upper="?"/>
            <builtintype type="GENERIC"/>
         </parameter>
         <aggregate type="SET" lower="0" upper="?"/>
         <builtintype type="GENERIC"/>
         <algorithm>LOCAL
      the_set : SET OF GENERIC : intype := [];
      i       : INTEGER;
    END_LOCAL;

    IF SIZEOF(the_bag) &gt; 0 THEN
      REPEAT i := 1 TO HIINDEX(the_bag);
        the_set := the_set + the_bag[i];
      END_REPEAT;
    END_IF;
    RETURN(the_set);</algorithm>
      </function>
      <function name="get_predefined_requirement_view_definition">
         <parameter name="ra">
            <typename name="Requirement_assignment"/>
         </parameter>
         <parameter name="req_type">
            <builtintype type="STRING"/>
         </parameter>
         <typename name="Predefined_requirement_view_definition"/>
         <algorithm>LOCAL
    requirements : SET[0:?] OF Predefined_requirement_view_definition;
  END_LOCAL;
	requirements := bag_to_set(USEDIN (ra.assigned_requirement, 'REQUIREMENT_DECOMPOSITION_ARM.' + 'PREDEFINED_REQUIREMENT_VIEW_DEFINITION.ASSOCIATED_DEFINITION')) ;
	REPEAT i := 1 to SIZEOF(requirements) by 1;
	  IF (req_type IN TYPEOF (requirements[i])) THEN
	  	RETURN (requirements[i]);
	  END_IF;
	END_REPEAT;
	RETURN (?);</algorithm>
      </function>
      <function name="get_rvd">
         <parameter name="input">
            <typename name="requirement_assignment_item"/>
         </parameter>
         <parameter name="id">
            <builtintype type="STRING"/>
         </parameter>
         <aggregate type="SET" lower="0" upper="?"/>
         <typename name="Requirement_view_definition"/>
         <algorithm>LOCAL
	rvd : SET[0:?] OF Requirement_view_definition := [];  --this gives us access to the information base
	ra : SET[0:?] OF Requirement_assignment :=[];
END_LOCAL;
	ra := bag_to_set((QUERY(rai &lt;* USEDIN (input, 'REQUIREMENT_ASSIGNMENT_ARM.'+
	'REQUIREMENT_ASSIGNMENT.ASSIGNED_TO') | (rai.id = id))));

	-- iterate over ra
	REPEAT i := 1 to SIZEOF(ra) by 1;
		rvd := rvd + ra[i].assigned_requirement;
	END_REPEAT;

	RETURN(rvd);</algorithm>
      </function>
      <function name="valid_constraining_shape">
         <parameter name="sd">
            <aggregate type="SET" lower="0" upper="?"/>
            <typename name="Geometric_model"/>
         </parameter>
         <parameter name="eepd">
            <typename name="Product_view_definition"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>RETURN(TRUE);</algorithm>
      </function>
   </schema>
</express>
