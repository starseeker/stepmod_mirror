(*
 $Id: arm.exp,,v 1.7 2002/10/23 20:44:26 mikeward Exp $
 ISO/TC184/SC4 WG12N1492 - ISO/TS - 10303-1140 Requirement identification and version - EXPRESS ARM 
*)

SCHEMA requirement_identification_and_version_arm;

USE FROM Alias_identification_arm;

USE FROM Identification_assignment_arm;

USE FROM Product_identification_arm;

USE FROM Product_version_arm;

USE FROM Product_version_relationship_arm;

TYPE requirement_identification_and_version_alias_identification_item = SELECT BASED_ON alias_identification_item WITH
  (Requirement,
   Requirement_version);
END_TYPE;

TYPE requirement_identification_and_version_identification_item = SELECT BASED_ON identification_item WITH
  (Requirement,
   Requirement_version);
END_TYPE;

(* The Requirement entity is used to uniquely identify a requirement. There may be many versions of that
requirement (requirement_version). There may also be more than one domain-specific view of a given
requirement_version (using the requirement_view_definition entity). The requirement entity is really just a
placeholder for holding a unique requirement. Most associations and properties are defined at the
requirement_view_definition level - i.e. they are in context of a domain. For example, a requirement may
be identified as "NOx emissions requirement", and uniquely identified as "Req2". There may be versions
of this requirement (requirement_version). Systems engineering tools and organizations may use differing
identification mechanisms. Multiple identifiers may be assigned to a requirement using the Alias_identifier
entity. *)
ENTITY Requirement
SUBTYPE OF (Product);
END_ENTITY;

(* The Requirement_version entity represents a version of a requirement. This entity is used to record the
different versions of a requirement. In this case, the word "version" implies "revision" - i.e. a particular
release of a requirement. For example, a given requirement might have versions 1.0, 1.1, 1.2 and 2.0 *)
ENTITY Requirement_version
SUBTYPE OF (Product_version);
  SELF\Product_version.of_product : Requirement;
END_ENTITY;

(* The Requirement_version_sequence entity is used to relate a previous version (predecessor) of a
requirement to the version that replaces it (successor). *)
ENTITY Requirement_version_relationship
SUBTYPE OF (Version_relationship);
  SELF\Version_relationship.relating_version RENAMED predecessor : Requirement_version;
  SELF\Version_relationship.related_version RENAMED successor : Requirement_version;
END_ENTITY;

END_SCHEMA;

