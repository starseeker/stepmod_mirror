<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: module.xml,v 1.14 2008/03/18 14:34:49 abhpf Exp $ -->
<!DOCTYPE module SYSTEM "../../../dtd/module.dtd">
<!-- Generated by mkmodule.js, Eurostep Limited, http://www.eurostep.com -->
 <!-- 
     To view the module in IExplorer, open: sys/1_scope.xml
      -->
<module
   name="system_behaviour"
   part="1448"
   version="1"
   sc4.working_group="3"
   wg.number="2334"
   wg.number.arm="2335"
   wg.number.mim="2336"
   wg.number.arm_lf="2337"
   wg.number.mim_lf="2338"
   checklist.internal_review="2356"
   checklist.project_leader="2357"
   checklist.convener="2355"
   status="CD-TS"
   language="E"
   publication.year=""
   publication.date=""
   published="n"
   rcs.date="$Date: 2008/03/18 14:34:49 $"
   rcs.revision="$Revision: 1.14 $"
   development.folder="dvlp">

 <keywords>
    module. systems engineering, system behaviour, function based behaviour, state based behaviour
 </keywords>

 <!-- Reference to contacts detailed in stepmod/data/basic/contacts.xml -->
 <contacts>
   <projlead ref="ap233.projlead2"/>
   <editor ref="ap233.editor2"/>  
 </contacts>

 <!-- Introduction -->
 <!-- The introduction should start as shown: -->
 <purpose>
   <p>
     This part of ISO 10303 specifies an application module for the
     representation of System behaviour which covers both Function Based behaviour and State Based Behaviour. This may be extended in later editions.
   </p>  
 </purpose>

 <!-- Items in scope -->
 <inscope>
	<li>items within the scope of application module <module_ref linkend="Function_based_behaviour:1_scope"/>;</li>
	<li>items within the scope of application module <module_ref linkend="State_based_behaviour:1_scope"/>;</li>
	<li>description of functional breakdown.</li>
 </inscope>

 <!-- Items out of scope -->
 <outscope>
 <li>representations of system composition and structure.</li>
 </outscope>

<!--
 <normrefs/>
-->

<definition>
   <term id="ap233_element">element</term>
   <def>
     that which is discernable by the reproducible measurement of its characteristics
     <note>The semantic term element includes matter, energy and information.  The term product from ISO 10303-Part 1 STEP definitions defines product as: a thing or substance produced by a natural or artificial process. This part of ISO 10303 needs to define the informational attributes associated with the entity named "product" as defined within ISO 10303-1017 - Product Identification. This entity has attributes that enable one to capture: id, name and description.  ISO 10303-1017 provides the definition: A Product is the identification of a product or of a type of product. It is a collector of data common to all revisions of the product. Element appears to be a legitimate subclass of product because this part requires reproducible measurement of element.</note>
     <example>Any thing from microscopic particles to galaxy clusters is an element.  Any thing with a finite existence from galaxies with billion-year lives to trans-uranic elements with lifetimes less than nano-seconds. Counter-example: Things like ghosts, devils, the Loch Ness monster, the city of Atlantis are not discernable by reproducible measurement and are excluded. Research and development things that do not yet have reproducible measurements and process control are excluded. For example, silicon for electronic devices would be excluded in 1900. </example>
   </def>
</definition>

<definition>
   <term id="ap233_system">system</term>
   <def>
   an element with a well defined boundary with respect to all other elements, outside of it and in the domain of interest, with which it interacts
   <note>A system is composed of interacting systems. The emergent behaviors and properties of a system are the result of the properties and behaviors of the sub-systems and their interactions. These interactions may be highly nonlinear.
   </note>
   <note> Systems decompose hierarchically; they are systems of systems. </note>
   <example>A car has a well defined boundary with respect to its environment, and the relationships are both static and dynamic. Similarly the engine has the same kinds of relationships and so does the fuel injector of the engine. 
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_environment">environment</term>
   <def>  
   all elements external to the system that interact with it
   <note>It is often possible to limit the parts of the environment needed for development purposes to those external systems that are neighbors to the system. </note>
   <note> The environment includes not only the external systems that couple with it for useful purposes, but it also includes all external systems that may interact in a manner that causes failure.    </note>
   <example>Elements in the environment need not have well defined boundaries as do systems.  A laptop computer can connect to a power grid. But for the design of the laptop it is not important to consider the power grid as a system. It is simpler to consider it as an element with an interface that the laptop connects to when needed.
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_behavior">behavior</term>
   <def>what an element is to do or is not to do in response to excitations it receives from the external elements in its environment
  <note>This is the subclass of property that includes measurable characteristics in normal use. It encompasses the response of the system to excitation by things in its environment. In some other engineering disciplines it is the analysis with differential equations that is called behavior. That is not what is meant here. Here, in AP233, behavior is a model representation of a functional requirement: it is what the system is to do.
   </note>
   <example>Make a fender is a behavior with several function steps, inputs of sheet steel, power, paint primer, paint and the output of a fender. Ring is the behavior of a bell or tuning fork. The "Q" of the bell or tuning fork is a physical property of the bell and its environment.
   </example>
   </def>
</definition>

<definition>
   <term id="ap233_functional breakdown">functional breakdown</term>
   <def>a particular collection of functional and other entities collected for a particular engineering purpose
   <note>These collections allow an engineer to examine functionality for special purposes, picking those elements needed from the prototypical design and realization views.</note>
   <example>An engineer may wish to study the cooling system of a car engine and require a collection of entities distributed through the prototypical design or realization hierarchies.</example>
    </def>
</definition>

<!--

 <abbreviations/>
-->

 <!-- Clause 4 ARM  -->
 <arm>
   <!-- Note ARM short form EXPRESS is in arm.xml -->

   <!-- Short form EXPRESS-G -->
   <express-g>
     <imgfile file="armexpg1.xml"/>
   </express-g>
 </arm>

<!-- ARM long form (optional) --> 
<!-- If not required, delete this section and the following files: 
           arm_lf.xml 
           armexpg_lf1.gif 
           armexpg_lf1.xml --> 
<arm_lf> 
 <!-- Note ARM long form EXPRESS is in arm_lf.xml --> 
 <express-g> 
  <imgfile file="armexpg_lf1.xml"/> 
 </express-g> 
</arm_lf> 

 <!-- Clause 5.1 Mapping specification
 <mapping_table>
   <ae entity="xx"/>
 </mapping_table>
 -->
 <!-- Clause 5.2 MIM -->
 <mim>
   <!--  Note MIM short form express is in mim.xml -->
   <express-g>
     <imgfile file="mimexpg1.xml"/>
   </express-g>
 </mim>

<!-- MIM long form (optional) --> 
<!-- If not required, delete this section and the following files: 
          mim_lf.xml 
          mimexpg_lf1.gif 
          mimexpg_lf1.xml --> 
<mim_lf> 
 <!-- Note MIM long form EXPRESS is in mim_lf.xml --> 
 <express-g> 
  <imgfile file="mimexpg_lf1.xml"/> 
 </express-g> 
</mim_lf> 

   <usage_guide>
   
   <p>Behaviour is the dynamic response to excitation of an engineering thing. The emergent properties 
   of the associated response can be either dynamic, what it does in response to excitation, or 
   static, associated with its composition and structure. Behaviour is the subclass of emergent property.
   that includes what it does in response to excitation and excludes static properties.</p>

   <p>Function Based Behaviour and  State Based Behaviour are two different and complimentary views of 
   what a system is to do in response to excitation. Each has advantages for modeling 
   particular problems and engineers have personal preferences about the two representations. </p>

   <p>State Based Behaviour is a representation of what a system is to do based on descriptions 
   of its relevant characteristics or conditions at particular intervals. What a thing does 
   can be described by citing a set of significant conditions.</p>

   <p>Function Based Behaviour is a representation of what a system is to do based on descriptions 
   of the transformations it performs. What a thing does can be described by citing a set of significant 
   transformations it performs. In science and engineering all changes can be represented by transformations 
   that follow well known transformation laws like conservation of matter and energy.</p>
   
   <p>The AP233 EXPRESS model for system behaviour is very complex.</p>
   
   	<p>The modules used and all of their associated USE FROM relationships for system behaviour representation 
	within AP233 are shown below.  Code 
	yellow implies all USE FROM's are shown for the module identified, Code green implies more 
	USE FROM's exist in the 
	module identified, Code blue identifies the extensible select type defined by the
	module shown.</p>
	
	<p>In Annex F of 
	<express_ref linkend="function_based_behaviour:arm:Function_based_behaviour_arm"/>
	and Annex F of
	<express_ref linkend="state_based_behaviour:arm:State_based_behaviour_arm"/>
	and effort to identify what has been enabled by this EXPRESS model is provided.  No attempt is 
	made therein to provide a mapping between what is enabled vs. enabling elements.
	</p>
	
	<figure id="f1" number="F.1">
	<title>Module USE FROM relationships for AP233 Behaviour representation </title>
	<img src="Behaviour_concepts.gif"/>		</figure>
	
	<p>The following modules have been developed to support AP233's system behaviour modeling needs.
	Their associated USE FROM connectivity is shown in the above figure.
	</p>
	
	<ul>
	<li>
        <module_ref linkend="behaviour_description_assignment:introduction">
          behaviour_description_assignment_arm</module_ref>
        (ISO 10303-1483);
        </li>

	<li>
        <module_ref linkend="behaviour_identification_and_version:introduction">
          behaviour_identification_and_version_arm</module_ref>
        (ISO 10303-1482);
        </li>

	<li>
        <module_ref linkend="behaviour_view_definition:introduction">
          behaviour_view_definition_arm</module_ref>
        (ISO 10303-1481);
        </li>

	<li>
        <module_ref linkend="description_assignment:introduction">
          description_assignment_arm</module_ref>
        (ISO 10303-1473);
        </li>

	<li>
        <module_ref linkend="expression_assignment:introduction">
          expression_assignment_arm</module_ref>
        (ISO 10303-1491);
        </li>

	<li>
        <module_ref linkend="extended_task_element:introduction">
          extended_task_element_arm</module_ref>
        (ISO 10303-1479);
        </li>

	<li>
        <module_ref linkend="external_functional_model:introduction">
          external_functional_model_arm</module_ref>
        (ISO 10303-1478);
        </li>

	<li>
        <module_ref linkend="external_state_based_behaviour_model:introduction">
          external_state_based_behaviour_model_arm</module_ref>
        (ISO 10303-1468);
        </li>

	<li>
        <module_ref linkend="foundation_state_definition:introduction">
          foundation_state_definition_arm</module_ref>
        (ISO 10303-1469);
        </li>

	<li>
        <module_ref linkend="function_based_behaviour_representation:introduction">
          function_based_behaviour_representation_arm</module_ref>
        (ISO 10303-1492);
        </li>

	<li>
        <module_ref linkend="general_model_parameter:introduction">
          general_model_parameter_arm</module_ref>
        (ISO 10303-1472);
        </li>

	<li>
        <module_ref linkend="parameter_value_specification:introduction">
          parameter_value_specification_arm</module_ref>
        (ISO 10303-1470);
        </li>

	<li>
        <module_ref linkend="state_based_behaviour_representation:introduction">
          state_based_behaviour_representation_arm</module_ref>
        (ISO 10303-1471);
        </li>

	<li>
        <module_ref linkend="task_element:introduction">
          task_element_arm</module_ref>
        (ISO 10303-1480);
        </li>

	<li>
        <module_ref linkend="textual_expression_representation:introduction">
          textual_expression_representation_arm</module_ref>
        (ISO 10303-1367).
        </li>
	</ul>
	
	<note> There are no type extends lists placed in this module.  The reason for 
	this is that the modelling paradigms of Function Based and State Based 
	Behaviour are very different and hence are rarely used in a closely coupled 
	manner at the abstraction level of "system behaviour".  All necessary type 
	extends are placed in the respective Function Based and State Based 
	Behaviour modules.</note>
	
</usage_guide>

<bibliography>
 <bibitem published="y">
		<pubdate>2002</pubdate>
   <stdtitle> Relationships between Common Graphical Representations in Systems Engineering</stdtitle> 
  <subtitle>Jim Long, ViTech Corporation  http://www.vitechcorp.com/library/papers.php</subtitle> 
  </bibitem>
  </bibliography>


</module>
