<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: module.xml,v 1.1 2006/03/22 22:56:27 philsp Exp $ -->
<!DOCTYPE module SYSTEM "../../../dtd/module.dtd">
<!-- Generated by mkmodule.js, Eurostep Limited, http://www.eurostep.com -->
 <!-- 
     To view the module in IExplorer, open: sys/1_scope.xml
      -->
<module
   name="system_behaviour"
   part="1448"
   version="1"
   sc4.working_group="12"
   wg.number="3746"
   wg.number.arm="3747"
   wg.number.mim=""
   checklist.internal_review=""
   checklist.project_leader=""
   checklist.convener=""
   status="WD"
   language="E"
   publication.year=""
   publication.date=""
   published="n"
   rcs.date="$Date: 2006/03/22 22:56:27 $"
   rcs.revision="$Revision: 1.1 $"
   development.folder="dvlp">

 <keywords>
    module. systems engineering, system behaviour, function based behhavior, state based behaviour
 </keywords>

<!-- the abstract for the module. If not provided, the XSL will use the in scope -->
 <abstract>
    <li>This part of ISO 10303 specifies an application module for the
     representation of Function Based behaviour and State Based Behaviour.  The 
     requirments for this set of AP233 modules is provided in 
     <module_ref linkend="system_behaviour:introduction"/> </li>
 </abstract>

 <!-- Reference to contacts detailed in stepmod/data/basic/contacts.xml -->
 <contacts>
   <projlead ref="ap233.projlead"/>
   <editor ref="harry.frisch"/>
 </contacts>

 <!-- Introduction -->
 <!-- The introduction should start as shown: -->
 <purpose>
   <p>
     This part of ISO 10303 specifies an application module for the
     representation of Function Based behaviour and State Based Behaviour.
   </p>
   
   <p>There are two major forms of representing Behaviour. Function based behaviour,
	independent of state, emerged in systems engineering in the 1970's. It provides
	for completed functions to enable succeeding functions, for I/O to trigger
	functions, and for ordering operators to represent sequence, branching, and
	iteration. The SEDRES model represents this with a Petrie net model.
	UML 2.0 contributors may be using a Petrie Net model. If so, then these
	two models need careful comparison.</p>   

   <p><b>Requirements paraphrased from the FBB and SBB SOW's, with clarification text extracted 
   from the AP233 Concept Model and Dictionary</b></p>
   
  <p>The AP233 Function based behaviour SOW can be downloaded at
   <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_behaviour/SOW_fbb.doc?rev=1.1"/>.</p>
  
   <p>The AP233 State based behaviour SOW can be downloaded at
   <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_behaviour/SOW_sbb.doc?rev=1.1"/>.</p>
   
   <p>The Concept Model + Dictionary can be downloaded at
   <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/Concept_Model.ppt?rev=1.1"/>.
   and 
   <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/Concept_Model_Semantic_Dictionary.xls?rev=1.1"/>.and 
   </p>

   <p>David Oliver's 2003 Visio EXPRESS-G Draft 9 file of proposed system behaviour (function beased behaviour) modules 
   can be downloaded at   
   <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_behaviour/System_behaviour_fbb_Draft_9_visio.vsd?rev=1.1"/>.
   This supersedes his Draft #8 which can be downloaded at   
   <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_behaviour/System_behaviour_fbb_Draft_8_visio.vsd?rev=1.1"/>. 
   From this discussion ready EXPRESS-G work associated EXPRESS code was hand derived.  
   The EXPRESS-G's shown in Clause C are derived from the hand coded EXPRESS defined Clause E.</p>

   <p><b>Requirement: </b>shall create an ARM (Application Reference Model) consistent 
   with the AP233 Concept Model description of Function Based Behaviour</p>
   
   <p><b>Requirement: </b>shall support the information unit concept of Function Based Behaviour</p>

   <p><b>Requirement: </b>shall create a hierarchy for Function Based Behaviour.</p>

   <note><b>Definition - function based behaviour: </b>A description of behaviour based 
   on function and transformation without reference to state</note>

   <p>Behaviour is built from Function, I/O (Input/Output), and Function Ordering
	as shown in Figure 3. Any Element may be I/O (Light blue shows an
	entity comes from Figure 1.). A Function is a entity of transformation that
	changes a set of inputs to a set of outputs. Function Ordering orders the
	functions such that it is possible to represent sequence, concurrency,
	branching, and iteration.</p>

		<figure><title>   </title>
	<img src="Slide12.gif"/>	</figure>

   <note><b>Definition - behaviour: </b>What an Element is to do or is not to do in 
   response to excitations it receives from the external Elements in its environment.<ol>
	   <li>This is the subclass of property that includes measurable characteristics in 
	   normal use. It encompasses the response of the system to excitation by things in 
	   this environment. In some other engineering disciplines it is the analysis with 
	   differential equations that is called behaviour, that is not what is meant here. 
	   Here behaviour is a model representation of a functional requirement: what it is to do.</li>
	   <li><b>Example: </b>Make a fender is a behaviour with several function steps, 
	   inputs of sheet steel, power, paint primer, and paint and the output of a fender. 
	   Ring is the behaviour of a bell or tuning fork. The "Q" of the bell or tuning 
	   fork is a physical property of the bell and its environment.</li>
	   </ol></note>
	   
   <note><b>Definition - Element: </b>That which is discernable by reproducible measurement 
   of its characteristics.<ol>
	   <li>The semantic term Element includes matter, energy and information.  Product 
	   from ISO 10303-Part 1 STEP definitions provide product: a thing or substance produced 
	   by a natural or artificial process. We need to define the informational attributes 
	   associated with the entity named "product" as defined within Product Identification 
	   Module 1017. This entity named "product" has attributes that enable one to capture: 
	   id, name and description.  AM 1017 provides the definition: A Product is the 
	   identification of a product or of a type of product. It is a collector of data 
	   common to all revisions of the Product. Element appears to be a legitimate 
	   subclass of product because AP233 requires reproducible measurement of Element.</li>
	   <li><b>Examples: </b>Any thing from microscopic particles to galaxy clusters is an 
	   Element.  Any thing with a finite existence from galaxies with billion-year lives 
	   to trans-uranic Elements with lifetimes less than nano-seconds. Counter-example: 
	   Things like ghosts, devils, the Loch Ness Monster, the city of Atlantis are not 
	   discernable by reproducible measurement and are excluded. Things under R and D that 
	   do not yet have reproducible measurements and process control are excluded. Silicon 
	   for electronic devices would be excluded in 1900. </li>
	   </ol></note>	   

   <note><b>Definition - function: </b>The entity in the context of modeling that 
   transforms an input set of Elements into a set of output Elements that may be 
   the same or measurably different from the input set.<ol>
	   <li>It is a part of Behaviour. This is what functions do in mathematics where 
	   the I/O are variables. In software the I/O is data. In systems engineering the 
	   I/O are Elements, matter, energy, and information. An internal Function is a 
	   kind of function that is allocated to and implemented by System/Structure. An 
	   external function is a kind of function that is allocated to and implemented 
	   by Elements in the Environment. </li>
	   <li><b>Example for systems engineering: </b>The function may be "burn gasses" 
	   with an input of two moles of hydrogen and one mole of oxygen. The output will 
	   be one mole of water, distinctly different from the inputs and a lot of energy. 
	   This function may be followed by a function "cool to 90 degrees centigrade". 
	   The input had pressure and volume proportional to temperature; the output is 
	   now liquid with a well-defined volume, an isotropic compressibility and a 
	   viscosity. If the next function is "cool to â€“10 degrees centigrade", then the 
	   viscosity goes away and the compressibility becomes a fourth rank tensor 
	   relating stress to strain. </li>
	   </ol></note>

   <p><b>Requirement: </b>shall support the information unit concept of Function</p><ol>
	<li>shall create a script entity that may be used to capture the detail of what a 
	function is to do. </li>
	<li>shall create a relationship between function and script. </li></ol>

   <note><b>Definition - script: </b>An executable textual language statement assigned to a 
   function to define how that function executes</note>

   <p><b>Requirement: </b>shall create a hierarchy for Function</p>	   
	   	   
   <note><b>Definition - input_output: </b>Elements consumed by a function are 
   Inputs and those generated by a function are Outputs. <ol>
	   <li>The name Input/Output or I/O is used because a given I/O entity is generated 
	   by one function and consumed by another. It is a part of Behaviour.  In the general 
	   case outputs are different things than inputs, and physical properties, 
	   behaviours, values, variances and probability distributions can all change. In 
	   this general definition "Function" is an Element of type information and cannot 
	   be realized in the physical world except through Elements of type matter or 
	   energy that exhibit that function. In the physical world things transform other 
	   things. It is this fact of reality that results in the allocation of Function 
	   to structure which is really a statement that this particular structure entity 
	   exhibits this particular function and it will be used to provide that transformation. 
	   The thought pattern is to think of the desired transformation, Function, to 
	   consider alternative things that might be used to provide it, and to select among 
	   these, using a trade study based on optimization.</li>
	   <li>I/O may trigger functions and it may terminate functions.</li>
	   </ol></note>
	   
   <p><b>Requirement: </b>shall support the information unit concept of Input/Output (I/O)</p><ol>
	   <li>shall create two relationships for each I/O entity: </li>
	   <li>- shall create a <b>consumes</b> relationship to one Function and </li>
	   <li>- shall create a <b>generates</b> relationship to a different Function.</li></ol>

   <p><b>Requirement: </b>shall create a hierarchy for Input/Output (I/O)</p>

   <p><b>Requirement: </b>shall create an allocation relationship between I/O and Property, 
   where Property is associated with Unit, Value, Tolerance, and Probability Distribution </p><ol>
	   <li>Property allocated to I/O shall be useable as a parameter in the Structure Module 
	   set for purposes of analysis.</li></ol>
		
   <note><b>Definition - function_ordering: </b>Function Ordering imposes how 
   functions execute, which may be sequential, concurrent, traversed iteratively, 
   or lie on separate alternative paths.<ol>
	   <li>It is a part of Behaviour. Note that there are several ways to represent function 
	   ordering. It may be done with ordering operators and triggering I/O as in classical 
	   behaviour diagrams or it may be done with events, states, and transitions as done 
	   in state machines and state charts. For this fine level of detail it is necessary 
	   to compare the detailed models created in ISO PAS 20542, the concept model and those 
	   emerging from UML 2.0 development.</li>
	   <li><b>Example: </b>A function is activated when all preceeding threads of functions 
	   are complete. At this point the function examines its inputs.  If and only if all triggering 
	   inputs are present the function proceeds to do its work. If one or more triggering 
	   inputs is absent, the function waits for them to begin doing its work. Triggers 
	   that arrive while the functions are running are stored in a FIFO queue. Ordinary 
	   I/O that arrives while a function is deactivated is stored in a LIFO queue. If 
	   the function is running it is discarded.  A function is deactivated when it 
	   completes its work or is deactivated by I/O.</li>
	   </ol></note>

   <p>A model for function Based Behaviour is given in Figure 4. I/O may trigger
	functions, starting or terminating functions. I/O that triggers is coupled to the
	function by binding to a Function Control Port. I/O that does not trigger is
	bound to a Regular Function Port. I/O arriving while a function is active is
	stored in a queue unless it is terminating I/O</p>

			<figure><title>   </title>
			<img src="Slide18.gif"/>	</figure>
	
   <p>Function ordering uses a set of operators: AND to define concurrency,
	Multi-exit Function or OR to represent alternative paths, a sequence operator,
	and LOOP, Iterate, and Replicate constructs. LOOP and ITERATE require
	limits to control their termination. Scripts are used to provide detailed control
	of function ordering. Probabilities are assigned to Or Out to facilitate
	execution of the behaviour to produce time lines or Monte Carlo simulation.</p>

   <note><b>Definition - function_ordering: </b>Function Ordering imposes how functions execute, 
   which may be sequential, concurrent, traversed iteratively, or lie on separate alternative paths.<ol>
	   <li> It is a part of Behaviour. Note that there are several ways to represent function ordering. 
	   It may be done with ordering operators and triggering I/O as in classical behaviour diagrams or it 
	   may be done with events, states, and transitions as done in state machines and state charts. For
	   this fine level of detail it is necessary to intercompare the detailed models in SEDRES in the 
	   concept model and those emerging from UML 2.0 development.</li>
	   <li> <b>Example </b>A function is activated when all preceeding threads of functions 
	   are complete. At this point the function examines its inputs. If and only if all triggering inputs 
	   are present the function proceeds to do its work. If one or more triggering inputs is 
	   absent, the function waits for them to begin doing its work. Triggers that arrive while 
	   the functions are running are stored in a FIFO queue. Ordinary I/O that arrives whilw a 
	   function is deactivated is stored in a LIFO queue. If the function is running it is 
	   discarded.  A function is deactivated when it completes its work or is deactivated by I/O.</li></ol></note>

   <note><b>Definition - ordering_operations: </b>Function_ordering constructions that establish 
   how the functions are ordered</note>

   <note><b>Definition - and: </b>An ordering_operation pair that establishes concurrency 
   among functions</note>

   <note><b>Definition - and out: </b>An ordering_operation that shows the branching our 
   among concurrent functions</note>

   <note><b>Definition - and in: </b>An ordering_operation that shows the path rejoining 
   among  concurrent functions</note>

   <note><b>Definition - or: </b>An ordering operator pair that establishes alternative 
   paths for a group of functions</note>

   <note><b>Definition - or_out: </b>The ordering operation that establishes branching 
   of functions and their alternative paths</note>

   <note><b>Definition - or_in: </b>The ordering_operation that establishes the rejoin 
   of alternative paths</note>

   <note><b>Definition - replicate: </b>An ordering_operation that replicates a function used many times.  
   Especially useful for distributed systems in which a particular function is realized in many places</note>

   <note><b>Definition - iterate: </b>An ordering_operation that repeats a function or 
   group of functions </note>

   <note><b>Definition - iterate limit: </b>An ordering_operation that establishes the 
   set over which the iteration is 
   performed.</note>

   <note><b>Definition - loop: </b>An ordering_operation that repeats a function or 
   group of functions some number of times</note>

   <note><b>Definition - loop_limit: </b>The number  or expression for the number of 
   repitioions in a loop </note>

   <note><b>Definition - loop -exit: </b>The ordering_operation that terminates a loop 
   and provides correct continuati9on of the execution path</note>

   <note><b>Definition - sequence: </b>An ordering operator that establishes sequence 
   among functions</note>

   <note><b>Definition - probability: </b>A set numbers, of sum equal to 1.0, that can be 
   assigned toe the several exit paths of an or_out to establish the relative frequenty 
   that each path is taken.</note>

   <note><b>Definition - multi_exit_function: </b>A special function with multiple exit 
   conditions that can serve the same purpose as or_out</note>

   <p><b>Requirement: </b>shall support the information unit concept of Ordering Operations, 
   that participate in the control of function activation</p><ol>
	   <li>shall create an ordering operation And_Out and And_In with an arbitrary number of 
	   concurrent branches. </li>
	   <li>shall create an And_Annotation entity that can be used to label each branch of 
	   And_Out and And_In. </li>
	   <li>shall create a special And_Out and And_In branch, the And_Kill branch.</li> 
	   <li>shall create an And_Out and And_In_Exit </li>
	   <li>shall create a relationship between an And_Out and And_In_Exit and an And_Kill brannch.</li>
	   <li>shall create an ordering operation Or_Out and Or_In with an arbitrary number of 
	   alternative branches.</li>
	   <li>shall create an Or_Annotation entity that can be used to label each alternative 
	   branch of Or_Out and Or_In with the selection criterion for that branch. </li>
	   <li>shall create a Probability_Annotation that can be used to label each alternative 
	   branch of Or_Out and Or_In with the probability of usage of that branch.</li> 
	   <li>shall create an ordering operation Loop</li>
	   <li>shall create an annotation Loop_Limit.</li>
	   <li>shall create a relationship between the ordering operator Loop and the annotation Loop_Limit</li>
	   <li>shall create an annotation Loop_Exit.</li>
	   <li>shall create a relationship between the ordering operator Loop and the annotation Loop_Exit </li>
	   <li>shall create an ordering operation Iterate.</li>
	   <li>shall create an annotation Iterate_Limit.</li>
	   <li>shall create a relationship between the ordering operator Iterate and the annotation Iterate_Limit  </li>
	   <li>shall create an ordering operation Replicate</li>
	   <li>shall create an Activation_ Relationship between an Ordering Operation and each Function. </li>
	   <li>shall create an ordering operation Sequence.</li>
	   <li>shall create a Function_Exit entity.</li>
	   <li>shall create a Multi_Exit_Function entity. </li>
	   <li>shall create Multi_Exit_Function_annotation entity that can be used to label each 
	   alternative branch with the selection criterion for that branch.</li>	   
	   </ol>

   <p><b>(HPF - slight rewrite for clarity) </b> The exchange of behaviour information, 
   that includes timing, requires that the respective tool interpretation engines 
   execute their respective models to produce time lines or perform Monte Carlo calculations. 
   For exchanged results to agree the tools MUST agree on the exact meaning of function 
   activation rules. </p>
	   
   <p><b>Requirement: </b>shall support the information unit concept of Time</p><ol>
   <li>shall create a Time Interval entity </li> 
   <li>shall create a Time Probability entity</li>
   <li>shall create a relationship that assigns Time Interval to Function </li>
   <li>shall create a relationship that assigns a Time Probability to Function.</li></ol>
   
   <note><b>Definition - timing: </b>A time interval assigned to a function that defines 
   the duration of activity of the function or the probability distribution for 
   the duration.<ol>
	   <li>Many probability distributions are used in systems engineering. These may include: 
	   normal, log-normal,bernouli, beta,binomial, negative binomial, chi squared, discrete 
	   uniformed, erlang, exponential, F, gamma, geometric, laplace, poisson, T, triangular, 
	   uniform, weibull.</li>
	   </ol></note>

   <p><b>Requirement: </b>shall support the information unit concept of Resource</p><ol>
	   <li>shall create a relationship between Resource and one or more Functions </li>
	   <li><b>Captures: </b>Captures indicates the resource which this object requires (but does
		not destroy) during execution. Resources are captured when the execution of the
		function begins and released when the function completes execution</li>
	   <li><b>Consumes: </b>Consumes indicates the resource which this object requires (and
		destroys) during execution. Resources are consumed when the execution of the
		function begins</li>
	   <li><b>Produces: </b>Produces indicate the resource which is generated by the function.
	   Resources are produced when the execution of the function completes. </li></ol>
		 
   <note><b>Definition - resource: </b>(1) the amount of input available to a function or the amount of
   output available from it. (2) or the amount of property of a system available to a function.<ol>
	   <li><b>Example: </b>There exists some number of missiles available to a missile battery 
	   available for the function "Shoot". </li>
	   <li><b>Example: </b>The function "transmit message" may be 
	   allocated to a satellite system, a fiber optic line, a microwave link, etc. Each of 
	   these alternatives has some value of the property "bandwidth" that may be used 
	   by the function.</li>
	   </ol></note>

   <p><b>Requirement: </b>shall support the information unit concept of Ports</p><ol>
   <li>shall create a Control Function Port Entity </li>
   <li>shall create a Regular Function Port Entity</li></ol>

   <note><b>Definition - function port: </b>A logical entity to whch I/O is bound.<ol>
   <li>The constructs regular function port and control function port allows I/O to 
   trigger some function but not others.</li></ol></note>
   
   <note><b>Definition - regular function port: </b>A function port that accepts I/O that
   does not triger the function.</note>
   
   <note><b>Definition - control function port: </b>A function port that accepts I/O that 
   triggers the function</note>
   
   <p><b>Requirement: </b>shall support the information unit concept of Queues</p><ol>
   <li>shall create a Queue entity  </li>
   <li>shall create an entity Queue_Length associated with Queue</li>
   <li>shall cause the default type of Queue to be FIFO.</li>
   <li>shall allow for alternative user defined queue types such as LIFO </li>
   <li>shall create a relationship between Queue and Regular Port Entity </li>
   <li>shall create create a relationship between Queue and Control Port Entity</li>
   <li>shall create a relationship between I/O and Queue</li></ol>
   
   <note><b>Definition - Queue: </b>A storage entity on a function port that accumulate 
   I/O until needed by the function<ol>
   <li>Triggering I/O is stored in a FIFO queue so that the earliest trigger received 
   activates the function. Non-triggering I/O is stored in a LIFO queue so that the most recent input is used by the function to ensure the input is fresh.</li>
   </ol></note>

   <p><b>Requirement: </b>shall support the information unit concept of Queuing rules</p>

   <note><b>Definition - Triggering I/O: </b>Triggering I/O that arrives at function is stored in a FIFO queue. On
    its next activation the function uses the I/O first stored in the queue.</note>

   <note><b>Definition - Non-triggering I/O: </b>Non-trigger signals received while a function is active are discarded.
   Non-trigger signals received while a function is dormant are stored in
   LIFO queues. It is the last I/O received that is used.</note>

      <p><b>Concerns, Observations and comments</b></p><ol>
   <li>Many Queue types exist.  Needed, to cover all of the most common.  Ptolemy project
   has a list of most.  Vendors can provide those demanded by modeling customers.  Check 
   ViTech CORE schmea provided by Jim Long.  This can be downloaded at 
   <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_engineering/Vitech%20Corp%20CORE%20Schema.zip?rev=1.1"/>.  </li></ol>
		
	   
   <p><b>Requirement: </b>shall support the information unit concept of rules for 
   function activation,</p><ol>
	   <li><b>shall create the Activation (Start) Rule:  </b>Functions are activated when the preceding 
	   Activation_Relationship is activated and when they have received all Triggering 
	   I/O, i.e., the I/O attached to a Function_Control_Port via a Queue. </li>
	   <li>A function begins work if and only all resources to be utilized by that 
	   function are available. </li>
	   <li>A function is activated and begins its work if and only if all preceding
	   functions and threads of functions have completed and all inputs that trigger
	   the function are present at the function control ports. A function begins
	   work if and only all resources to be utilized by that function are available.
	   Otherwise it waits.</li>
	   <li><b>shall create the Run Rule.  </b>Trigger signals received while a function is active 
	   are stored in queues. </li>
	   <li><b>shall create the Termination Rule.  </b>Functions terminate when their Time_Intervals 
	   expire or their Time_Probabilities expire. </li>
	   <li>Functions complete generation of all their outputs, terminate, and pass
	   activation to the next function when the time interval allocated to them
	   expires. Functions complete production of all resources and return any
	   resources that were captured during execution </li></ol>

   <note><b>Definition - activation_rules: </b>The set of rules used by an execution engine 
   in a tool to execute the function_based behaviour. <ol>
	   <li>The same behaviour model can produce different execution results if the rules of 
	   execution differ between two tools that exchange data. These are the entities that 
	   allow recording of the rules used by the tool putting data into the data model.</li>
	   </ol></note>

   <note><b>Definition - start_rules: </b>The activation_rules that establishes when a 
   function begins to execute</note>

   <note><b>Definition - run_rules: </b>The activation_rules that establishes how the 
   function executes</note>

   <note><b>Definition - terminate_rules: </b>The activation_rules that establsih the 
   conditions under which a functions ceases to execute.</note>
	   
   <p><b>Requirement: </b>shall support the information unit concept of the Function exit construct,</p><ol>
      <li>A Function Exit construct links a functional decomposition to the exit paths
	identified for the parent function. </li>
	<li><b>For example, </b> assume you have a Multi-exit
	Function with two exit paths. If this is the leaf-level of your model, scripting
	(or probabilities if no script is defined) selects which path to take.</li>
      <li><b>However, </b>if this function is decomposed, there are Function Exit constructs
	corresponding to the two exit paths in the higher level function. When one
	of the Exit constructs is encountered, execution of the decomposition is
	complete and control is passed to the corresponding exit path at the higher level.</li>
   </ol>

   <p><b>Requirement: </b>shall accumulate all allocation relations between this 
   and other module sets in the Allocation Module Set.</p><ol>
    <li>Functions in this Module Set, FBB, shall be allocated to parts in the Structure Module Set</li>
    <li>I/O in FBB shall be allocated to Ports in the Structure Module Set     </li>
    <li>Functional Requirements in TBR shall be allocated to Function in FBB.  </li>                                                        
    <li>Performance Requirements (requirements that state a time interval or time probability) 
    in TBR shall be allocated to Function in FBB. </li></ol>

    <p><b>Requirement: </b>shall support the graphical representation of function based behaviour information 
    in the presentation format of the following set of classic system engineering diagrams.</p>
    
      <p><b>Concerns, Observations and comments</b></p><ol>
   <li>There are several presentation formats that are "classic" within the systems engineering
   community.  These are all defined with Jim Long's white paper on the subject; Download paper from 
   <a href="http://www.vitechcorp.com/infocenter/papers/CommonGraphicalRepresentations_2002.pdf"/></li>
   <li>Need to provide a neutral data representation of all associated data</li>
   <li>User must be capable of viewing information from the perspective of any classic presentation format.</li>
   <li>Capture this as a series of requirements</li></ol>
    
   <p>Most systems engineers today use graphical representations of a system to communicate 
   its functional and data requirements. The most commonly used representations are the 
   Function Flow Block Diagram (FFBD), Data Flow Diagram (DFD), N2 Chart, IDEF0 Diagram, 
   Use Case, Sequence Diagram, Enhanced Function Flow Block Diagram, and Behaviour Diagram.</p>   

   <p>When analyzed in the context of specifying functional control and data modeling, 
   it appears that the FFBD and DFD representations are limiting, special cases of the 
   Enhanced Function Flow Diagram and Behaviour Diagram. The N2 Chart has the same 
   capability as the DFD, with a more formal format. The IDEF0 is essentially an N2 
   Chart with some control definition (no constructs) capability. The IDEF0 has the 
   capability to indicate the allocation of functions to system components.</p>   

   <p>Thus, the Enhanced Function Flow Diagram and the Behaviour Diagram features 
   comprise a "parent/unified" set of graphical system representations. To achieve 
   the same level of specification completeness, you would have to use an integrated 
   set of the FFBD and one of the data models or augment the FFBD with a graphical 
   representation of the data model, as was done at TRW (then called Function Sequence 
   Diagrams).</p>   
   
   <p><b>Requirement: </b>shall non-redundantly record the FBB characterization information 
   associated with all classic FBB presentation formats</p>

   <p><b>Requirement: </b>shall support Function Flow Block Diagram (FFBD) presentation</p>

   <p><b>Requirement: </b>shall support Data Flow Diagram (DFD) presentation</p>

   <p><b>Requirement: </b>shall support N2 Chart presentation</p>

   <p><b>Requirement: </b>shall support IDEF0 presentation</p>

   <p><b>Requirement: </b>shall support Use Case presentation</p>

   <p><b>Requirement: </b>shall support Sequence Diagram presentation</p>

   <p><b>Requirement: </b>shall support Behaviour Diagram presentation</p>

   <p><b>Requirement: </b>shall support Enhanced Function Flow Diagram presentation</p>

   <p><b>State based behaviour - </b>State based behaviour emerged from automata theory and has matured into
	State Charts that provide for state explosion in highly concurrent models.
	SEDRES has a representation for this and has demonstrated model transfer
	between Statemate and Teamwork Real Time tools.</p>

	<p>In the UML community Action Semantics are to provide a basis for
	state based behaviour. These two approaches require careful correlation. The
	concept model here does not go beyond the very general notion of function
	ordering, but notes the critical importance of correlation among emerging
	detailed models.  Associated documentation can be obtained via the web site
	<a href="http://www.sysml.org/artifacts.htm"/></p>   

   <p><b>Requirements taken from SBB SOW - Note: There is very little in the Concept Model relating to SBB detail.</b></p>
   	<ol>
	<li>shall develop the State Based Behaviour Module Set ARM</li>
	<li>shall insure consistency with UML 2.0  </li>
	<li>shall generate the translation of the UML 2.0 schema for SBB into EXPRESS for the SBB ARM   </li>
	<li>shall transform the translated  Module Set ARM from UML 2.0 into EXPRESS modules based directly on the translation from UML 2.0</li>
	<li>shall carry out the comparison of the schema of I-Logic Magnum with the UML2.0 schema. </li>
	<li>shall extend the EXPRESS SSB ARM to include those entities and relationships of Magnum that are not accounted for in the translation from UML 2.0.  </li>
	<li>shall accumulate all allocation relations between this and other module sets into the Allocation Module Set. </li>
	<li>shall perform Module Set verification by the exchange of information among different tools and verification that SBB models execute identically in the different tools.</li>
	<li>shall develop the Module Set Interface Development Tool </li>
	<li>shall obtain a vendor tool demo CD for use as Demo Tool for SBB to populate the SBB model. </li>
	<li>shall develop the interface between the Demo Tool and the State Based Behaviour Module Set </li>
	<li>shall encourage vendors to develop interfaces to this module set.</li>
	<li>shall generate the AIM for SBB.</li>
	<li>shall accumulate all allocation relations between this and other module sets in the Allocation Module Set. </li>
	<li>shall performance Requirement (requirements that state a time interval or time probability) in TBR shall be allocated to Activities/Actions in SBB.  </li>
	<li>shall develop the Module Set Interface Development Tool for vendor use in building interfaces to the Module Set FBB.</li>
	<li>shall develop the Interface from the Demo Tool to the State Based Behaviour Module Set.     </li>
	</ol>
	
    <p><b>Notes extracted from "Scope statement for Behaviour Models</b></p>
    	<ol>
	<li>The scope statement report can be downloaded at
	<a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_behaviour/Scope_statement_for_FBB.doc%20.doc?rev=1.1"/></li>
	<li><b>State Based Behaviour Module Set, SBB: </b> This module set supports behaviour representations 
	such as Data Flow Diagrams, State Charts, Moore Extended State Machines, and Mealy Extended State 
	Machines. These representations are supported by a group of tool vendors, most of whom are 
	participating in the refinement of UML 1.4 to UML 2.0. It is expected that the tools will become 
	compliant with that standard. In consequence, AP233 will also adopt map to that standard for 
	State Based Behaviour. The work to be done is to obtain the standard adopted by OMG for UML 2.0 and 
	to convert it to equivalent EXPRESS modules.  Tools like Statemate Magnum may not be UML 2.O compliant. 
	These type of tools will still have to covered by state based behaviour. </li>
	<li><b>Function Based Behaviour Module Set, FBB </b> This module set supports behaviour representaitions 
	such as N-Squared Charts, CORE EFFVBD's (behaviour diagrams), Functional Flow Block Diagrams, 
	BAE SYSTEMS CoRE Thread Diagrams, relevant IDEF Diagrams , hierarchy and Scripts.</li>
	<li><b>Exclusions from the FBBBEH Module Sets </b> Engineering design diagrams such as logic diagrams,  
	geometric drawings, petri nets, Truth Tables, activity diagrams analysis equations, and control 
	block diagrams are excluded.   These should be added in additional modules.</li>
	<li><b>Requirement (FBM1): (HPF says covered/implied in above) </b>data model must be able to capture 
	in a semantic form, information that is 
	traditionally represented in various notations currently widely used by systems engineers in this 
	domain which include, but are not limited to: data flow diagrams (and mini specs), Functional Flow Block 
	Diagrams (FFBD), state transition diagrams, statecharts, activity diagrams, N2 charts, IDEF0 diagrams, 
	control engineering block diagrams, pseudocode, the notations of UML1.4 2.0 that in any way capture 
	product functionality and behaviour.</li>
	<li><b>Requirement (FBM2): (HPF says covered/implied in above) </b>shall provide that the semantic content 
	with the source material of a behavioural specification in its native form, when expressed via the 
	FBM SBB or FBB data model, must be re-representable in a way semantically indistinguishable from the 
	original source material, as far as possible. </li>
	<li><b>Requirement (FBM3): (HPF says this is actually a data model presentation ability concern not 
	covered above): </b>, SBB or FBB when used with (a complete) data representation module, is about 
	supporting the movement of 
	behavioural specifications from one engineering tool to another, including the reproduction of the 
	diagrams used to represent such specifications. However, FBM SBB or FBB and the data representation 
	module should make it possible that reproduction of approximate representations (that remain 
	semantically consistent), and that are recognisably similar to the originals, can be produced. It 
	is not expected that the structured diagrams (listed in FBM1) can be reproduced verbatum. For 
	instance, it is not necessary that a Ward-Mellor data flow diagram is reproduced with same font 
	labels, arrow styles, and exact placement (in the way a PDF conversion of a Word document tightly 
	reproduces the original). However, it is important that arrows (representing flows) touch ('connect') 
	circles representing transforms, and that the arrow is indicated in the correct direction to reflect 
	the sense of the flow. It is important that the relative placement of major graphic elements (circles, 
	arrows) are recognisably similar on the generated diagram as on the original.</li>
	<li><b>Requirement (FBM4) : (HPF says covered in above) </b>The module concepts shall be built on 
	existing STEP Modules where possible. </li>
	<li><b>Requirement ??: (Causal chain) </b> Lots of good stuff in Causal Chain Exposed report.  The report can be downloaded at:
	<a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_behaviour/Causal_Chain_review.doc?rev=1.1"/>.  Some 
	of this stuff may enable BAE SYSTEMS CoRE Thread Diagrams. These need to define, only Julian can do this.</li>
	</ol>

	<p><b>Notes extracted from "David's critical issue memo</b></p>
	<ol>
	<li>Memo can be downloaded at:
   <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/AP233_Critical_Issues_fbb_and_structure.doc?rev=1.1"/>.</li>
	<li>Eric Herzog has provided the most complete set of issues for this module set. The team needs 
	to work through them all. </li>
	<li>The weakest part of the FBB module set appears to be the function 
	ordering arm. It is based on the Task specification arm from AP239 that was created to support 
	ordering of activities for scheduling. Two efforts at verification of scheduling have found that 
	it can be used for that purpose. </li>
	<li>Eric suggests that a causal chain representation is far superior 
	for this purpose.</li>
	</ol>
	
	<p><b>Notes extracted from Valencia nd Rochester meetings summer 2005</b></p><ul>
	<li>During the discussion period associated with "breakdown" it was agreed to make use of 
	the stepmod breakdown arms.  It was agreed that "functional_breakdown_arm" logically belong 
	with functional based behaviour.  Upon reflection USE FROM functional_breakdown_arm belongs 
	at the system_behaviour_arm level.</li></ul>
	<note> At the FBB level stepmod's functional breakdown could be confused with the 
	breakdown of FBB "transformation". The difference between these concepts needs to be made clear.</note>
	<ul>
	<li>Re. FBB - Attempts to be made by David O, Phil S, Erik H and Harry F to use the 
	SEDRES Petri net approach.  This will result in a rewrite of the transformation ordering and 
	input_output arms within FBB</li>
	<li>Re. FBB - Debate ready copy to be ready for review at offste.</li>
	<li>Re. FBB - Collect and generate decision criteria for selection of alternative ordering 
	and input_output alternatives. For example:</li></ul>
	<ol>
	<li>Minimize the cost to vendors of implementing interfaces to the standard</li>
	<li>Provide function ordering such that object order is preserved</li>
	<li>Provide a modularity that can be used with other behaviour modeling techniques such
  as state charts and state machines</li>
	<li>Achieve harmonization with SysML realization of function based behaviour, activity
  diagrams</li>
	<li>Provide rigorous semantics for support of systems engineering tools</li>
	<li>Provide rigorous semantics for interoperability of tools that contain execution engines
  for the transferred data such that the execution results are invariant.</li>
	<li>Provide rigorous semantics for support of interoperability with the tools of as many
   other AP's as possible</li>
	<li>Select for efficient implementation in terms of data storage and performance time.</li>
	</ol>
	<ul><li>Re. FBB - AP210 has expressed the desire to exchange time lines with AP233 as predictable 
	via executable FBB.  Dan Cox is creating an example to help see through the problem.</li>
	<li>Re. FBB - Decision was made to proceed with Time line work.  At offsite review, decide if this 
	is what AP233 needs.  Decide on what enhancements are needed for AP210 and AP233.</li>
	<li>Re. FBB - Cross check FBB modules with ViTech CORE schema.  3SL folks (Cradle) at the 
	Rochester INCOSE meeting agreed to also supply the Cradle schema.</li>
	</ul>
	<note>Arguments surround "analysis" and where the hand-off between domain and AP233 exists. 
	The exchange of FBB data is valid if and only if the associated time lines derived via independent 
	executables agree.  The testing of executable derived time lines becomes a means for the verification 
	of the FBB information exchange model.</note>
	<ul>
	<li>Re. SBB - To be built from SysML by David P.  Funding is now in place.  Debate ready work should be
	ready for PDES fall offsite.</li></ul>
	<note>This work will need to be cross checked with SEDRES work for missing concepts.</note>
	<ul>
	<li>Re. SELECT Type extends - Use the schema's of Vitech CORE and 3SL Cradle to identify all associated 
	connectivity.  What's in these schema's defines what's essential from a user stakeholder perspective.
	We can then debate if any other connectivity is needed.</li></ul>

   <p><b>Change Log from base line AP233 WD#1:</b></p><ol>
   <li>WD#2 - Added comment in arm.exp file to add USE FROM functional_breakdown_arm.</li></ol>

	
 </purpose>
 

 <!-- Items in scope -->
 <inscope>
   <li>Function based behaviour</li>
   <li>State based behaviour</li>
   <li>Functional breakdown</li>
 </inscope>

 <!-- Items out of scope -->
 <outscope>
   <li>xxxx</li>
 </outscope>

<!--
 <normrefs/>

 <definition/>

 <abbreviations/>
-->

 <!-- Clause 4 ARM  -->
 <arm>
   <!-- Note ARM short form EXPRESS is in arm.xml -->

   <!-- Short form EXPRESS-G -->
   <express-g>
     <imgfile file="armexpg1.xml"/>
   </express-g>
 </arm>


 <!-- Clause 5.1 Mapping specification -->
 <mapping_table>
   <ae entity="xx"/>
 </mapping_table>

 <!-- Clause 5.2 MIM -->
 <mim>
   <!--  Note MIM short form express is in mim.xml -->
   <express-g>
     <imgfile file="mimexpg1.xml"/>
   </express-g>
 </mim>


</module>
