<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: module.xml,v 1.9 2007/01/04 19:09:09 abhpf Exp $ -->
<!DOCTYPE module SYSTEM "../../../dtd/module.dtd">
<!-- Generated by mkmodule.js, Eurostep Limited, http://www.eurostep.com -->
<!--      To view the module in IExplorer, open: sys/1_scope.xml      -->
<module
   name="system_modelling"
   part="1477"
   version="1"
   sc4.working_group="3"
   wg.number=""
   wg.number.arm=""
   wg.number.mim=""
   wg.number.arm_lf=""
   wg.number.mim_lf=""
   checklist.internal_review=""
   checklist.project_leader=""
   checklist.convener=""
   status="WD"
   language="E"
   publication.year=""
   publication.date=""
   published="n"
   rcs.date="$Date: 2007/01/04 19:09:09 $"
   rcs.revision="$Revision: 1.9 $"
   development.folder="dvlp">
<keywords>module, systems engineering, system behavior, system structure, trade study </keywords>
<!-- the abstract for the module. If not provided, the XSL will use the in scope --> 
<abstract>
    <li>This part of ISO 10303 specifies an application module for the
     representation of the variety of general model classifications used to
      support model-based systems engineering.  This includes all models used to
      characterize the physical structure and its behavior and the full range of
      models used to support system engineering trade studies.</li>
</abstract> 
<!-- Reference to contacts detailed in stepmod/data/basic/contacts.xml --> 
<contacts>
   <projlead ref="ap233.projlead"/>
   <editor ref="phil.spiby"/> 
</contacts> 
<!-- Introduction --> 
<!-- The introduction should start as shown: --> 
<purpose>
  <p>
    This part of ISO 10303 specifies an application module for the
    representation of the variety of general model classifications used to
    support model-based systems engineering.  This includes all models used to
    characterize the physical structure and its behavior and the full range of
    models used to support system engineering trade studies.
  </p> 
  
</purpose> 
 <!-- Items in scope --> 
 <inscope>
   <li>System behaviour</li>
   <li>System structure</li>
   <li>Decision support</li>
   <li>Grouping</li>
 </inscope>
 <!-- Items out of scope -->
 <outscope>
   <li>Program and project management data</li>
 </outscope>
<!-- <normrefs/>
 <definition/>
 <abbreviations/>
-->
 
<!-- Clause 4 ARM  -->
 <arm>
   <!-- Note ARM short form EXPRESS is in arm.xml -->
   <!-- Short form EXPRESS-G -->
   <express-g>
     <imgfile file="armexpg1.xml"/>
     <imgfile file="armexpg2.xml"/>
     <imgfile file="armexpg3.xml"/>
   </express-g>
 </arm>
 
<!-- Clause 5.1 Mapping specification -->
 <mapping_table>
   <ae entity="xx"/>
 </mapping_table>
 
<!-- Clause 5.2 MIM -->
 <mim>
   <!--  Note MIM short form express is in mim.xml -->
   <express-g>
     <imgfile file="mimexpg1.xml"/>
   </express-g>
 </mim>
 
  <usage_guide>
  
    <p>
    This module is one of AP233's two top level modules.  Its focus is on the
    variety of modeling paradigms used to represent the physical and functional
    system along capabilites used to support associated verification, validation and
    trade studies. It links to but does not include capabilities that support the
    managment activities of systems engineering.
   </p>
      
  
   <p>Figure 1 provides a concept map AP233 as it is presented herein</p>
   
   	<figure> <title>AP233_arm_Concept_Map</title>
			<img src="AP233_arm_Concept_Map.gif"/>	
	</figure>
	
   <p>Relative to the concept of system modelling, the top level modules that enable all of 
   AP233's current capapbility are listed below.  Within each see Annex F for additional 
   discussion and follow hyperlinks
   provided down to the most atomic level of detail:</p>
   <ul>
   <li><module_ref linkend="decision_support:introduction"/></li>
   <li><module_ref linkend="function_based_behaviour:introduction"/></li>
   <li><module_ref linkend="requirement_management:introduction"/></li>
   <li><module_ref linkend="state_based_behaviour:introduction"/></li>
   <li><module_ref linkend="system_behaviour:introduction"/></li>
   <li><module_ref linkend="system_modelling:introduction"/></li>
   <li><module_ref linkend="system_structure:introduction"/></li>
   </ul>
   
   <p>At the next concept modelling level of abstraction down, the following modules are
   of prime importance to enabling AP233's system modeling capability.  Within each see scope 
   statements and Clause 4.</p>

   <ul>
   <li><module_ref linkend="activity_as_realized:introduction"/></li>
   <li><module_ref linkend="analysis_assignment:introduction"/></li>
   <li><module_ref linkend="behaviour_description_assignment:introduction"/></li>
   <li><module_ref linkend="extended_task_element:introduction"/></li>
   <li><module_ref linkend="group:introduction"/></li>
   <li><module_ref linkend="interface:introduction"/></li>
   <li><module_ref linkend="measure_of_effectiveness:introduction"/></li>
   <li><module_ref linkend="product_as_individual:introduction"/></li>
   <li><module_ref linkend="product_breakdown:introduction"/></li>
   <li><module_ref linkend="task_element:introduction"/></li>
   <li><module_ref linkend="verification_and_validation:introduction"/></li>
   <li><module_ref linkend="system_identification_and_version:introduction"/></li>
   <li><module_ref linkend="verification_and_validation:introduction"/></li>
   </ul>
   
   <!-- 
   
   Insert front end of SE Handbook chapter 33 here
   
   -->
   
   <p>What follows is a set of definitions and a model that closely aligns with how systems are 
   modeled by engineers, how they are treated in science, and how they are represented in 
   differential and partial differential equations.  This provides the highest level view of 
   AP233.  If defines AP233's information modelling requirements from the perspective of hindsight.  
   It is the high level view of the framework that has been enabled.</p>
   
   <p>Figure 2 below and associated definition list provides a graphical model that captures 
   the definitions and relationships associated with a system model.</p>
   
      
   	<figure> <title>SE Handbook Chapter 33 Figure 3</title>
			<img src="SE_Handbook_Slide3.gif"/>	
	</figure>
	
   <p>Anything is that which can be observed, conceived, or imagined.  This definition includes 
   not just observable reality, but also the subjects of dreams, hallucinations, stories, and 
   imagination.</p>
   
   <p>An Engineering_Thing is that for which observable, measurable, and reproducible properties 
   or attributes can be obtained. An Engineering_Thing is a subclass of Anything.  Responsible 
   engineering is based on the ability to predict performance from the observable properties of 
   the things engineers will use. The advance of technology is the expansion of our knowledge of 
   these properties.</p>

   <p>An Observable_Characteristic are observable, measurable and reproducible properties of an 
   Engineering_Thing. An Engineering_Thing has Observable_Characteristic. The advances of science 
   and engineering in the last 300 years are based on careful observation and measurement. The 
   reproducibility of the results is checked by independent experimentation. The rapidity of 
   advance follows from rapid and widespread publication of result with rapid independent 
   confirmation or denial of the results.</p>

   <p>An Emergent property is a synonym for Observable_Characteristic.  It is used in the context 
   quantifying the observable, measurable and reproducible properties of a system</p>

   <p>The Environment is all of the Engineering_Things that need to be considered for a 
   particular problem. The Environment contains some of the totality of Engineering_Things. 
   It contains just those that need to be considered for the problem at hand. The black diamond 
   is a SysML and UML standard symbol for “part of” “or “some of”. It is a decomposition of the 
   whole into some of its parts. For any engineering problem it is essential to consider everything 
   that is important to the problem and to exclude things from consideration that would be a waste 
   of resources to investigate. </p>

   <p>A Boundary is a separation of a space (solution space or mathematical space) of 
   Engineering_things into regions. The boundary partitions Environment into regions of interest 
   to the engineer. Problems can be simplified and solutions found more quickly if they can be 
   partitioned into strongly interacting, weakly interacting or independently acting parts. </p>

   <p>) A System is an Engineering_Thing that exhibits a well defined Boundary. A system is a 
   subclass of an Engineering_Thing.  It inherits a relationship to Observable_Characteristic.
   A system a Boundary; stystems are built from Systems (systems of systems form a hierarchy) and 
   Systems connect with Systems. For a thing to be a system it must exhibit observable and 
   reproducible properties and have a boundary that separates it from all the other things in 
   the environment. It is essential to know what is inside the system and what is outside.</p>

   <p>An Interface is a region ( e.g. point, surface or volume) of connection between two 
   Engineering_things. A System has  Interface and Interface has Observable_Characteristic.  
   There are points, surfaces, and volumes of any System that connect it to other 
   things. These interfaces are important for maintenance, for moving it during manufacture, 
   for logistics and installation, for testing, and for attaching to larger systems.</p>

   <p>The Observable_Characteristic associated with an interface also needs discussion. 
   Current passing through the electrical interfaces of a battery in a flashlight is not a 
   property of those interfaces but rather the result of the EMF of the batteries and the 
   impedance of the circuit. The spring force holding the batteries in place is an 
   Observable_Characteristic. This spring force only exists when the batteries are 
   installed in place. When you plug your laptop into an electric outlet, the value of 
   current that flows is not a property of the interface. The maximum safe current through 
   the interface is such a property as is the force required to plug and unplug the connector. 
   These are emergent properties that come into existence when two things are interconnected.</p>

   <p>A System/System_Interface is an Interface between two Systems.  A System/System_Interface 
   is a subclass of Interface</p>

   <p>Environment/System_Interface is aInterface between a System and an Engineering_thing in 
   the Environment. An  Environment/System_Interface is a subclass of Interface.  A Boundary is 
   built from (composed of) all the Environment/System_Interface.  A system has many interfaces 
   for many different purposes. The total or collection of all these important interfaces 
   defines the boundary of the system.</p>

   <p>A System View is a partial description of a System using some of the associated 
   Observable_Characteristic. A System View is part of (3) Observable_Characteristic.  A
   System View describes System.  Most engineering problems consider only some portion of a 
   system, relative to some small set of engineering domains and some particular issues. </p>

   <p>Context is the point of view or focus of interest taken in dealing with a system. A 
   System View has a Context. Most engineering problems consider only some portion of a 
   system and particular issues associated with those portions. </p>

   <p>Analysis is the observation, measurement, or calculation of the Emergent_Property of 
   a whole based on the Emergent_Property of the parts.  Emergent property is a synonym for
   Observable_characteristic.  Analysis determines the Emergent_Property of a System because 
   of its inheritance from Engineering_Thing. It is the progress of science in providing 
   rigorous laws and models for determining the reproducible and observable characteristics of 
   Engineering_Thing that has given us our analysis capabilities.</p>

      <p>Figure 3 below and associated definition list provides a graphical model that captures 
   the definitions and relationships associated with a requirements and trades model.</p>
   
      
   	<figure> <title>SE Handbook Chapter 33 Figure 4</title>
			<img src="SE_Handbook_Slide4.gif"/>	
	</figure>
	
   <p>Stakeholder is the people, organizations and institutions that receive some benefit from a 
   System and have an interest in the system. A Stakeholder is a part of the Environment.
   A Stakeholder is an Engineering_thing. They include, for example, the producers, 
   producer employees, competitors, sellers, advertisers, transporters, owners, customers, 
   regulators, operators, users, maintainers, and disposers of the system.</p>

   <p>Stakeholder_need defines the benefits the Stakeholder desires to receive from or to be 
   delivered by the system when it is implemented and functioning. The Stakeholder has 
   Stakeholder_need. At the top level of development these Stakeholder_needs drive the 
   requirements for the system and the optimization criteria for its development.</p>

   <p>A Business is the purposeful activity of a person or group of persons to supply products 
   and services to themselves or others. Both local and global commerce are based on the existence 
   of a multitude of businesses engaged in the exchange of products and services.  </p>

   <p>A Business_strategy is the science, art, and plan for employing the economic, sales, 
   marketing, contracting, development, purchasing, advertising, logistics, sourcing, 
   psychological, and  political, capabilities of a (15) Business or a consortium of 
   Businesses to achieve a set of goals.  A Business has a Business_strategy. How successfully 
   a business meets its goals in a competitive marketplace is dependent on the completeness 
   and efficiency of its business strategy. </p>

   <p>A System_alternative defines the many different solutions to the problem of designing 
   and implementing the system. The System is a subclass of System_alternative. In the 
   development of a system there are many System_alternatives that could be used. The 
   solution space is large. The design problem is to pick a nearly optimal solution that 
   will succeed in the marketplace. It is this choice from among the System_alternatives 
   that is the system.</p>

   <p>A Requirement is a statement of an Emergent_property that a System_alternative shall 
   exhibit to be considered as a solution for a System.  A Requirement is a statement of an 
   Emergent_property that a System shall exhibit. This follows logically from the definition 
   of Requirement and a particular System_alternative becoming the system. A Requirement is 
   derived from Stakeholder_need.  A Requirement is derived from Business_strategy
   A child Requirement is derived from a parent Requirement and traces to it.  A Requirement 
   is evaluated with Analysis.  A requirement is a statement about a solution for a system 
   or one of its interfaces that describes a response to excitation, a time duration for the 
   response or a physical property value like mass that shall be met by the solution. Since 
   the system will be one of these solutions, it is both the collection of alternative 
   solutions and the one picked to be the system that shall “meet” the requirements. 
   The interaction with the stakeholders may be very informal, it may be a summary of 
   sales and marketing data, or it may be the result of a formal interaction with 
   stakeholders using a mathematical based process like Analytical Hierarchical Process, (AHP).</p>

   <p>A Measure_of_effectiveness is a requirement for the optimization of the system. 
   Measure_of_effectiveness is a Requirement. Measure_of_effectiveness provides the optimization 
   criteria for selecting a single solution from among all System_alternative. As a result of 
   inheritance  a Measure_of_effectiveness  is derived from Stakeholder_need.  It is also 
   derived from Business_strategy.  A child Measure_of_effectiveness  is derived from a parent 
   Measure_of_effectiveness  and traces to it.  A Measure_of_effectiveness is evaluated with 
   Analysis..The optimization of the whole system by choosing the “best” among 
   System_alternative is a most important aspect of MOE’s. The fact that MOE’s are derived 
   from parent MOE’s means that the subsystems are optimized for optimization of the entire 
   system to fit the marketplace. This is not optimization the subsystems themselves 
   independent of the whole system. System optimization for the marketplace is a major purpose 
   of systems engineering and a significant competitive advantage. The (19) Measure_of_effectiveness 
   has the same relationships as (18) Requirement by inheritance. Modeling the MOE’s as a 
   subclass of (18) Requirement provides these relationships. It also provides for 
   traceability and identification of parent-child derived relationships. </p>

   <p>Weight is a numerical factor that gives a relative importance to each item in a set of items. 
   Each Measure_of_effectiveness has Weight. Many decisions involve several decision criteria. 
   In the general case these are not of equal importance. A numerical weight is often assigned 
   to the decision criteria to specify their relative importance. Usually a larger number 
   implies greater importance.</p>

   <p>Optimization_direction is a statement of whether the optimization direction associated 
   with a particular MOE is to maximize or minimize. Each Measure_of_effectiveness has 
   Optimization_direction. Every MOE will need to be either maximized or minimized.</p>

   <p>A Regularization_function is an analytical function that for each System_alternative 
   combines MOE’s with their weight and  Optimization_direction to calculate a single 
   optimization figure of merit for each System_alternative.A Measure_of_effectiveness is 
   evaluated for System_alternative. Once the elderly couple has established their home 
   buying criteria and the compromise weights for these, they need to apply them to the 
   many homes they see offered for sale. The analytical approach is to apply a regularization 
   function for each of these homes. The resulting value for each home is its figure of 
   merit. Note that many decisions are made without this analytical approach by applying 
   an intuitive figure of merit, “I like this one best”, to the homes offered, the 
   System_alternatives.</p>

   <p>The AHP analytical formulation is very similar to that of optimal control theory and 
   statistical optimization that use a function, often called a cost function, to fulfill
   a similar role. In all three of these cases: selection of (17) System_alternative, 
   optimal control and statistical optimization, the optimum solution found depends upon 
   the form of the regularization function that is used.</p>
   
   <!-- 
   
   Move analysis stuff to decision support
   
   -->
   
   <p><b>Begin - Notes from SC4 Meeting in Hangzhou and post meeting email exchanges</b></p>

   <p>There is an accepted need and desire to insure that AP233 and SysML work together
     to the greatest degree posssible.  Much of the capability provided via SysML can
     be logically viewed as belonging within the scope of this module.  In a sense, this
     is where SysML meets Configuration Management.  Detail is under development.
   </p>
      
<p><b>Re: "Analysis"</b></p>
   <p>Decision-making is an integral part of any systems engineering activity.
      Decisions are assumed to be rational (what, why, how).  They are  made by people
      and organizations; somewhere, and at some point in time (who, when, where).
      The proposed concept model seeks to provide the basic the network of concepts
      and relationships necessary for the representation and exchange of all computer
      sensible information associated with the systems engineering decision-making process.
      Within this context; "analysis" supports decision making.  An associated concept model
      is available at:.
      <a href="http://stepmod.cvs.sourceforge.net/*checkout*/stepmod/stepmod/etc/ap233/references/analysis/Decision_making16.pdf?revision=1.1"/>.
      This model has been reviewed at several 2005 AP233 meetings. The capabilities necessary 
      to enable "analysis" representation, within AP233 stem from this work.</p>

<p><b>End - Notes from SC4 Meeting in Hangzhou and post meeting email exchanges</b></p>

 
   <p>############  May want to end here.  Move the following to other Anex F of other IM's aft some movement up.</p>
   
	<figure><title>   </title>
	<img src="Slide38_copy.gif"/>	</figure>

	<p><b>Requirement:</b>shall create allocation relationships between Part 
	and Text Requirement subclasses Physical Property Requirement and Imposed 
	Design Requirement</p>

	<p><b>Requirement:</b>shall create allocation relationships between Interface 
	Specification and Text Requirement subclass Interface Requirement</p>
	
   
   <p>The basic relationships for analytical modeling of emergent properties and 
   budgeting of properties are shown in Figure 5. A set of engineering equations or 
   estimates, analytical models, are used by systems engineers to budget properties 
   to the interacting sub-assemblies as a guide to designers at the lower level. 
   When designs for all of the sub-assemblies are available, their individual 
   properties and interactions are better defined. The same equations are used to 
   calculate the emergent properties of the complete assembly. The fidelity of the 
   calculations increases as the work proceeds.</p>   
   
   <p>A Part, as a whole, may have a Calculated Property Value based on analysis 
   of the properties, behaviors and interactions of its parts. This is accomplished 
   by estimation or by an analysis that solves the relevant engineering equations. 
   This makes it necessary to represent physical properties as parameters in the 
   equations of the relevant analysis model. Model Parameter provides this 
   parameterization. It has an attribute of its of the unit of measure applicable 
   to the analysis. This may be different from the unit assigned to Physical 
   Property. The reference_document attribute specifies the standard document 
   that contains the reference for the Model_parameter. A default value and valid 
   range can be specified when needed.</p>   
   
   <p>Parameter_assignment assigns parameters to model_parameter that in turn 
   is a parameter for analytical_model. Analytical_representation has a set of 
   parameter_assignments and is modeled by one or several analytical models. be 
   solved, Analytical _representation. The several Analytical_models provide 
   answers at different levels of fidelity and with different efforts of computation. 
   AM_port connects the analytical results back to the appropriate location in 
   the part hierarchy.</p>   

   <p><b>Requirement:</b>shall create an entity for the information unit concept of 
   Analytical Representation</p>

   <note><b>Definition - analytical_representation: </b>Is the association of specific 
   properties of specific system assemblies with an analytical_model in order to 
   unambiguously characterize the performance of a specific part</note>

   <p><b>Requirement:</b>shall create an entity for the information unit concept of 
   Analytical Model</p>

   <note><b>Definition - analytical_model:</b>Provides a mathematical description of the 
   properties of a system.</note>

   <p><b>stepmod module - Analytical_model_arm - Introduction</b></p>
   <ol><li>for the representation of information needed to properly interface to 
   and exchange the source code contents of an externally defined computer-interpretable 
   model of a particular behaviour. This model allows a behaviour to be described 
   using a mathematical form (e.g., algorithm, table). A model is independent of any 
   particular product. A model is not directly executable to return a result until 
   application data have been applied.</li></ol>

   <p><b>stepmod module - Analytical_model_arm - In scope</b></p><ol>
   <li>identification of externally defined analytical and computer-interpretable 
   models and their versions;</li>
   <li>identification of the parameters of an analytical model;</li>
   <li>the application of an analytical model to a real or imaginary object together 
   with the needed parameter assignments;</li></ol>

   <p><b>Concerns, Observations and comments</b></p><ol>
   <li>Concept of "Ports" within Analytical_model_arm carries the implicit assumption of 
   analog/discrete input/output signals. This is a ee-domain specific concept. Need to 
   remove all "port" stuff.</li>
   <li>model_parameter_type and signal_flow _direction types not needed. Not general enough</li>
   <li>How does this map to input and output data files of arbitrary complexity?</li>
   <li>What does analog and discrete map to?</li>
   <li>Vector-tensor physical property type needs reference frame</li>
   <li>Cast in the language of EE-ize, can't see the mapping to multi-disciplinary 
   analytical models</li>
   <li>Significant alteration may be needed to service full range of AP233 needs</li>
   <li>Reason: This arm is designed to service a lower level of data abstraction than 
   needed by AP233.</li>
   <li>Maybe: a "lite" version of this module work service needs?</li>
   <li><b>From TT </b>What in Analytical_model is specific to electrical/mechanical domain? 
   We have spent a lot of extra time in that module to make things flexible yet very 
   concrete so there could be little confusion by a data extractor and a data receiver. 
   Is it the digital and analog port stuff? I added that specifically so that we could 
   identify quantities on the ports that have through and across variables. Mike 
   Loeffler had a look at it and agreed it is good stuff, so I am a little confused.</li></ol>
   
   <p><b>Requirement:</b>shall create entities to support the information unit concept of 
   Rules</p>

   <note><b>Definition -  rules:</b> rules are defined by a constraint relating two elements based
   upon characteristics of a design;</note>
   
   <p><b>stepmod module - Production_rule_arm - In scope</b></p><ol> 
   <li>rules that define a constraint by relating two elements based
   upon characteristics of a design</li>
   <li>management of rules;</li>
   <li>items within the scope of application module Model parameter, ISO/CD-TS 10303-1703;</li>
   <li>items within the scope of application module Software, ISO/CD-TS 10303-1746;</li>
   <li>items within the scope of application module Specification document, ISO/CD-TS 10303-1747.</li>
   </ol>

   <p><b>stepmod module - Production_rule_arm - Introduction </b></p><ol> 
   <li>This module provides for the representation of the information needed to describe design constraints, 
   commonly referred to as rules. The information describes the rule's relationship to product 
   characteristics, formal description of the functions that embody the rule, in addition to the 
   configuration management aspects applied to the rule. The configuration management information 
   supports rule version control and supports a formal process to making changes to an existing rule.</li>
   </ol>

   <p><b>Concerns, Observations and comments</b></p> <ol>
   <li>  Rules need to service every aspect of systems engineering from high level institutional 
   rules for product development to low level rules that insure product manufacturability</li>
   <li>  This module is from AP210 - It still needs to be interface with AP233 </li>
   </ol>

   <p><b>Requirement:</b>shall create entities for the information unit concept of 
   Parameters with units, values and tolerances</p>

   <note><b>Definition -  model_parameter:</b> a formally declared variable of the 
   analytical model provided for an external application to populate at execution 
   time in a computing environment</note>

   <p><b>stepmod module - Model_parameter_arm - Introduction</b></p>
   <ol><li>representation of information needed to describe model parameters, mechanism 
   for overriding them and their assignments to products. Model parameters can be 
   classified.</li></ol>

   <p><b>stepmod module - Model_parameter_arm - In scope</b></p><ol>
   <li> identification of a parameter for a model;</li>
   <li> assignment of values to a model parameter;</li>
   <li> assignment of a parameter to a model;</li>
   <li> overriding of a parameter assignment;</li>
   <li> assignment of a parameter value to a product;</li></ol>

   <p><b>Concerns, Observations and comments</b></p> <ol>
   <li>  Model parameters can be vector-tensors with reference frames</li>
   <li> What to do about input/output files for multidisciplinary problems.</li>
   <li> Need to wrestle down "parameter" vs. May-2002 Lambda calculus thoughts</li>
   <li>Reference material can be downloaded at 
   <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_structure/Parameter_property_and_Lambda_calculus.doc?rev=1.1"/> and 
   <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_structure/Parameter_and_Lambda_calculus.doc?rev=1.1"/></li></ol>

   <p><b>Requirement:</b>shall create provide Parameters with Units</p>

   <p><b>Requirement:</b>shall create an entity for the information unit concepts of 
   Parameter Value, Tolerance and Assignment.</p>

   <p><b>Notes extracted from Valencia and Rochester meetings summer 2005</b></p>

   <ul><li>Re. System</li></ul>
	<figure><title> System identification and version (Attic copy)  </title>
	<img src="Sys_id_version.gif"/>	</figure>   
   <ol>
   <li>Phil recalled the existance in the stepmod attic of Ian's module system_identification and version</li>
   <li>This module will enable system = product to be removed </li>
   <li>It will enable system to be made a subtype of product</li>
   <li>Phil to clean up the (Attic copy) version as shown above.</li>
   <li>Phil to verify that type extensions exist for system and requirements.</li>
   <li>A USE FROM placeholder for system_identification_and_version is to be placed in WD#2</li>
   <li>Results to be reviewed at PDES fall off-site.</li>
   </ol>

   <ul><li>Re. Analysis</li></ul>
   <ol>
   <li>Valencia agreement with AP210 was to remove all AP210 module_lite segments of WD#1</li>
   <li>Replace these with USE FROMs to unabridged AP210 modules</li>
   <li>Note that in the stepmod/etc/AP210 folder several fixes are defined for stepmod 
   modules used by the AP210 modules</li>
   <li>There was sufficient discussion on analysis to reveal that many analysis views exist with no 
   common agreement as to where the interface between Systems engineering and domain 
   engineering is to be placed.</li>
   <li>Harry to attempt to lay the puzzle pieces on the table.</li>
   <li>Need to create some example populations that expose/clarify the need for all views</li>
   <li>How to satisfy all.  What's really different about the different views of analysis need?</li>
   <li>AP233 FBB and SBB Behavior analysis view, linear analysis, AP210 analysis view, 
   AP209 analysis view, AP239 (verification) analysis view, decision making [rules of thumb, 
   peer reviews, negotiations, politics], etc.</li>
   <li>To be discussed at the PDES offsite</li>
   </ol>

   <ul><li>Re. Rules</li></ul>
   <ol>
   <li>Valencia agreement with AP210 was to remove all AP210 module_lite segments of WD#1</li>
   <li>No discussion on Rules at Rochester</li>
   </ol>
  

   <p><b>Change Log from base line AP233 WD#1:</b></p><ol>
   <li>WD#2 - Removed "Product_inteface" segment from arm.exp</li>
   <li>WD#2 - Added placeholder comment line "USE FROM System_identification_and_version_arm;</li>
   <li>WD#2 - Removed "System_engineering_system_breakdown" segment from arm.exp</li>
   <li>WD#2 - Added USE FROM physical_breakdown, system_breakdown, zonal_breakdown, </li>
   <li>WD#2 - Removed all _lite versions of AP210 analysis and rules modules.</li>
   <li>WD#2 - Added USE FROM Analytical_model, Characteristic, Model_parameter, Software</li>
   <li>WD#2 - Added USE FROM Production_rule</li>
   </ol>
   


  </usage_guide>
 
</module>