<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: module.xml,v 1.26 2007/01/11 07:51:47 abhpf Exp $ -->
<!DOCTYPE module SYSTEM "../../../dtd/module.dtd">
<!-- Generated by mkmodule.js, Eurostep Limited, http://www.eurostep.com -->
 <!-- 
     To view the module in IExplorer, open: sys/1_scope.xml
      -->
<module
   name="system_structure"
   part="1450"
   version="1"
   sc4.working_group="3"
   wg.number=""
   wg.number.arm=""
   wg.number.arm_lf=""
   wg.number.mim=""
   wg.number.mim_lf=""
   checklist.internal_review=""
   checklist.project_leader=""
   checklist.convener=""
   status="WD"
   language="E"
   publication.year=""
   publication.date=""
   published="n"
   rcs.date="$Date: 2007/01/11 07:51:47 $"
   rcs.revision="$Revision: 1.26 $"
   development.folder="dvlp">

 <keywords>
    module, system structure, system engineering
 </keywords>

<!-- the abstract for the module. If not provided, the XSL will use the in scope -->
 <abstract>
    <li>This part of ISO 10303 specifies an application module for the representation 
    of all system structure specification information consistent with the needs of 
    systems engineering; that is, the description of how a system decomposes 
    into its parts and how the parts assemble to make the whole.</li>
 </abstract>

 <!-- Reference to contacts detailed in stepmod/data/basic/contacts.xml -->
 <contacts>
   <projlead ref="ap233.projlead2"/>
   <editor ref="ap233.editor2"/>  
 </contacts>

 <!-- Introduction -->
 <!-- The introduction should start as shown: -->
 <purpose>
   <p>
     This part of ISO 10303 specifies an application module for the representation 
    of all system structure specification information consistent with the needs of 
    systems engineering; that is, the description of how a system decomposes 
    into its parts and how the parts assemble to make the whole.
   </p>
   
   <p>Within the System_structure_arm there are several modules that are used to create 
   collections of things that may be hierarchies or networks (directed graphs) of information 
   useful to the engineer. The superclass of these is the Product_breakdown_arm that can be 
   used for any special purpose. It has three subclasses: the System_breakdown_arm, the 
   Zonal_breakdown_arm, and the Physical_breakdown_arm. It is critical for the reader to note 
   that these names have come from much earlier SC/4 work and not from the systems engineering 
   community. The System_breakdown arm does not capture a breakdown of the system, but 
   rather a special subset of systems for specialized purposes. The Physical_breakdown_arm 
   is not the breakdown for the system into real parts made out of atoms. Rather it is a 
   special collection. The zonal_breakdown_arm is a breakdown into geometric regions of a 
   system. This approach is often used in ship and aircraft development.
   </p>
      
  <p><b>Hyperlink to Annex F for AP233 concept model introductory material associated 
  with system structure capabilities enabled within AP233 and its connectivity to 
  modules used.</b></p> 

  </purpose>

 <!-- Items in scope -->
 <inscope>
   <li>Product data management</li>
   <li>Product structure</li>
   <li>Product breakdown</li>
   <li>Interface</li>
   <li>Product as individual</li>
   <li>System and hierarchy of systems</li>
   <li>Physical properties</li>
   <li>Assembly structure</li>
   <li>Part</li>
   <li>Value with Unit</li>
 </inscope>

 <!-- Items out of scope -->
 <outscope>
   <li>xxxx</li>
 </outscope>

<!--
 <normrefs/>

 <definition/>

 <abbreviations/>
-->

 <!-- Clause 4 ARM  -->
 <arm>
   <!-- Note ARM short form EXPRESS is in arm.xml -->

   <!-- Short form EXPRESS-G -->
   <express-g>
     <imgfile file="armexpg1.xml"/>
     <!-- <imgfile file="armexpg2.xml"/> -->
   </express-g>
 </arm>

 <!-- ARM long form (optional) -->
 <!-- If not required, delete this section and the following files:
          arm_lf.xml
          armexpg_lf1.gif
          armexpg_lf1.xml -->
 <arm_lf>
   <!-- Note ARM long form EXPRESS is in arm_lf.xml -->
   <express-g>
     <imgfile file="armexpg_lf1.xml"/>
   </express-g>
 </arm_lf>


 <!-- Clause 5.1 Mapping specification -->
 <mapping_table>
   <ae entity="xx"/>
 </mapping_table>

 <!-- Clause 5.2 MIM -->
 <mim>
   <!--  Note MIM short form express is in mim.xml -->
   <express-g>
     <imgfile file="mimexpg1.xml"/>
   </express-g>
 </mim>

 <!-- MIM long form (optional) -->
 <!-- If not required, delete this section and the following files:
          mim_lf.xml
          mimexpg_lf1.gif
          mimexpg_lf1.xml -->
 <mim_lf>
   <!-- Note MIM long form EXPRESS is in mim_lf.xml -->
   <express-g>
     <imgfile file="mimexpg_lf1.xml"/>
   </express-g>
 </mim_lf>
<usage_guide>

   <p><b>The following notes and associated derived requirments are paraphrased from the AP233 
   Structure SOW and the Concept Model + Dictionary</b></p>
   
   <p>The AP233 Structure SOW can be downloaded at
   <a href="http://stepmod.cvs.sourceforge.net/stepmod/stepmod/etc/ap233/references/system_structure/SOW_structue.doc?rev=1.1"/>.
   The Concept Model + Dictionary can be downloaded at
   <a href="http://stepmod.cvs.sourceforge.net/*checkout*/stepmod/stepmod/etc/ap233/references/Concept_Model.ppt?revision=1.1"/>.
   and 
   <a href="http://stepmod.cvs.sourceforge.net/*checkout*/stepmod/stepmod/etc/ap233/references/Concept_Model_Semantic_Dictionary.xls?revision=1.1"/>.and 
   </p>

   <p>These requirements for the Structure Module Set(SMS) reflect both what the 
   AP233 team has learned over the past several years and from their interaction with 
   the SysML team on the joint development of the Concept Model and Semantic 
   Dictionary, see <a href="http://www.sysml.org/"/> for an overview and 
   <a href="http://www.sysml.org/artifacts.htm"/> for available downloads.</p>

   <p>Most of the nomenclature in this document is taken from the Concept 
   Model. Readers should be cautioned that semantics for the same concept 
   differs in ISO/SC4 modules, in the Concept Model, in general Systems Engineering Standards, 
   and in SysML. There is no common or standard nomenclature at this time.  This is totally due
   to the disconnected development history of these sources.</p>
   
   <p>Figure 1 below entitled <b>System Structure and Emergent Property Details</b> leads Annex F 
   with an overview the System_structure module content.  It is followed by Figure 2 entitled 
   <b>System Concepts</b>.  This provides a concept map of module content at the USE FROM level of 
   abstraction.  The conclusion of Annex F begins with Figure 3 entitled <b>System Static Structure</b>. 
   This is followed by the extensive list of requirements and notes relevant to the considerations addressed 
   by AP233 team during the creation of this System_structure module. </p> 
 
   	<figure><title> System Structure and Emergent Property Details  </title>
	<img src="SEHandBk5.gif"/>	
	</figure>

	<p>The basic concept shown in the above figure is that a system is built from a subset of 
	systems that interact statically and dynamically through their Interfaces with themselves 
	and with Engineering _things in the Environment. For example; an automobile engine is 
	built from a number of parts that include mechanical parts, electrical parts, and fluids 
	like lubrication oil, cooling water, and gasoline. There are static interactions and 
	synchronized dynamic interactions. The ability of the engine to convert the chemical 
	energy of air and gasoline to mechanical power is not a property of any set of these 
	parts, but rather an Emergent_property of the whole engine, System.</p>
	
	<p>In this figure the following definitions apply:</p>
	
	<p><b>System</b> is an Engineering_Thing that exhibits a well defined Boundary. For a thing to be a 
	system it must exhibit observable and reproducible properties and have a boundary that 
	separates it from all the other things in the environment. It is essential to know what 
	is inside the system and what is outside.</p>
	
	<p><b>Engineering_Thing</b> has observable, measurable, and reproducible properties or attributes 
	can be obtaine. Responsible engineering is based on the ability to predict performance from 
	the observable properties of the things engineers will use. The advance of technology is the 
	expansion of our knowledge of these properties.</p>
	
	<p><b>Boundary</b> is  separation of a space (solution space or mathematical space) of 
	Engineering_things into regions. Problems can be simplified and solutions found more 
	quickly if they can be partitioned into strongly interacting, weakly interacting or 
	independently acting parts. </p>
	
	<p><b>Observable_Characteristic</b> is an observable, measurable and reproducible properties 
	of an Engineering_Thing. The advances of science and engineering in the last 300 years 
	are based on careful observation and measurement. The reproducibility of the results is 
	checked by independent experimentation. The rapidity of advance follows from rapid and 
	widespread publication of result with rapid independent confirmation or denial of the results.</p>
	
	<p><b>Interface</b> is a region ( e.g. point, surface or volume) of connection between two 
	Engineering_things. The Interface has an Observable_characteristic.  There are points, surfaces, 
	and volumes of any System that connect it to 
	other things. These interfaces are important for maintenance, for moving it during manufacture, 
	for logistics and installation, for testing, and for attaching to larger systems.</p>
	
	<p>The Observable_Characteristic associated with an interface also needs discussion. Current 
	passing through the electrical interfaces of a battery in a flashlight is not a property of 
	those interfaces but rather the result of the EMF of the batteries and the impedance of the 
	circuit. The spring force holding the batteries in place is an Observable_Characteristic. 
	This spring force only exists when the batteries are installed in place. When you plug your 
	laptop into an electric outlet, the value of current that flows is not a property of the 
	interface. The maximum safe current through the interface is such a property as is the 
	force required to plug and unplug the connector. These are emergent properties that come 
	into existence when two things are interconnected.</p>
	
	<p><b>System/System_Interface</b> is an Interface between two Systems </p>
	
	<p><b>Environment/System_Interface</b> is a Interface between a System and an Engineering_thing 
	in the Environment. A system has many interfaces for many different purposes. The total or 
	collection of all these important interfaces defines the boundary of the system.</p>

	<p><b>Environment</b> contains all of the Engineering_Things that need to be considered 
	for a particular problem.</p>
	
	<p><b>Emergent_Property</b> is an <b>Observable_Characteristic</b>.  It can be either dynamic, 
	what it does in response to excitation, or static, associated with its composition and structure.</p>
	
	<p><b>Physical_property</b> is a static observable and reproducible property of an 
	Engineering _thing.  Physical_property is the subclass of Emergent_property that includes 
	static properties and excludes what it does in response to excitation.</p>
	
	<p><b>Behavior</b> is the dynamic response to excitation of Engineering _thing. </p>	
	
	<p>The discussion into the subject domain of <b>Behaviour</b> continues in 
	Annex F of <module_ref linkend="system_behaviour:introduction"/>.</p>
	
	<p>The AP233 EXPRESS model for system structure is very complex.</p>
   
   	<p>The modules used and all of their associated USE FROM relationships for system structure representation 
	within AP233 are shown via a concept map in Figure 1 - System Concepts.  Code 
	yellow implies all USE FROM's are shown for the module identified, Code green implies more 
	USE FROM's exist in the 
	module identified, Code blue identifies the extensible select type defined by the
	module shown.  The next lower level of USE FROM concept map abstraction is provided 
	below in Figure 4 - What Concepts.  Together these figures show all of the primary schemas
	used by the structure module</p>

   
   	<figure><title> System Concepts  </title>
	<img src="SystemConcepts.gif"/>	
	</figure>
	
   	<p>The following modules have been developed to support AP233's system structure modeling needs. 
	All others are from the STEP modules repository.
	</p>

	<ul>
        <li><module_ref linkend="system_identification_and_version:introduction">
          System_identification_and_version_arm</module_ref>
        (ISO 10303-1484);</li>
	
	<li>
        <module_ref linkend="system_view_definition:introduction">
          System_view_definition_arm</module_ref>
        (ISO 10303-1485);
	</li>
	</ul>

   
   <p>  The figure below labeled <b>System Static Structure </b> predates figure 1 shown above.  Figure 3 
   below has been extracted from the  AP233 Concept model.  The extensive list of system structure model 
   requirements and notes that follow capture the detail addressed by AP233 team.</p>
 
   	<figure><title> System Static Structure</title>
	<img src="Slide8 copy.gif"/>	
	</figure>

	<p>The following list capsulates the requirement statements listed below it:</p>
	
	<ul>
	   <li>creates an arm consistent with both the Concept Model and with SysML Structure 
   and Parametrics</li>
   <li>creates an entity and hierarchy for Part.</li>
   <li>creates an entity and hierarchy for a Port related to a part.</li>
   <li>creates an entity for a Link related to part</li>
   <li>creates an entity for Interconnection</li>
   <li>creates an entity for Interface Specification</li>
   <li>creates allocation relationships between Part and Text Based Requirement subclasses 
   Physical Property Requirement and Imposed Design Requirement</li>
   <li>creates allocation relationships between Interface Specification and Text Based 
   Requirement subclass Interface Requirement</li>
   <li>creates an entity for Physical Property</li>
   <li>creates an entity for Unit, value and value version</li>
   <li>creates an entity for Tolerance and tolerance version</li>
   <li>creates relationships among physical property, unit, value, and tolerance</li>
   <li>creates a set of probability distribution entities</li>
   <li>creates allocation relationships between Part and Property</li>
   <li>creates allocation relationships between Part and Function</li>
   <li>creates allocation relationships between Part and State</li>
   <li>creates an entity to support Alternative Parts</li>
   <li>creates entities to support Parameters, with units, values and tolerances</li>
   <li>creates an entity for Parameter Assignment</li>
   <li>creates an entity for Analytical Representation</li>
   <li>creates an entity for Analytical Model</li>
   <li>creates the ability to distinguish between part (build as designed) and part_realized 
   (built as designed)</li>
   <li>creates the ability to distinguish between templates for xxxx and instances of.xxxx</li>
   <li>creates the ability to support various classes of port to port interfaces</li>
   <li>   1 - Simple scalar property characterizes port to port connectivity; e.g., thermal conductivity.</li>
   <li>   2 - Complex property characterizes port to port connectivity; e.g., welding filler material.</li>
   <li>   3 - Simple part characterizes port to port connectivity; e.g., international electric plug adapter.</li>
   <li>   4 - Complex part characterizes port to port connectivity; e.g., Alaska pipeline support within 
   embedded heat pipe structure. Alaska pipeline U joint earthquake tension releaving segments.</li> 
   <li>create entities that can support rules based upon model parameters</li>
   <li>create allocation of rules to requirements</li>
   </ul>
	
	<p><b>Requirement:</b>shall create an arm consistent with both the AP233 Concept 
   Model and with SysML Structure and Parametrics</p>

   <p><b>Requirement:</b>shall support the information unit concept of Structure</p>

   <note><b>Definition - Structure: </b>the description of how a system decomposes 
   into its parts and how the parts assemble to make the whole.<ol>
   <li>Structure is built from Part, Port, and Interface Specification. Structure 
   decomposes hierarchically. These relationships force Part and Port to also decompose hierarchically.</li>
   <li>Structure provides the decomposition, interconnection and other static relationships 
   among the parts of the system.</li>
   <li>Physical properties are budgeted to structure using analysis methods, and the 
   emergent performance is calculated using the same methods.</li>
   <li>Behavior is allocated to the structure. Form and function are separated 
   conceptually so that the design can be optimized by considering several different 
   structures that can provide the desired emergent behavior and properties.</li>
   <li><b>Example: </b>In a real example of design optimization the engineer does 
   not just look for some local cost function maximum or minimum, but looks at the 
   trend in data to find that region in the design space where the solution is 
   robust; i.e., the solution is both near a cost function min/max point and does 
   not degrade rapidly with variances in variables under design control.</li>
   </ol></note>
   
   
   <p><b>Requirement:</b>shall create an entity for the information unit concept of Part</p>

   <note><b>Definition - Part: </b>The static parts of the system including their 
   interconnection and interconnection descriptions.<ol>
   <li>The Part is simply a part of a component list</li>
   <li>A Part does not represent an actual physical object that is or was existing 
   in the real world.</li>
   <li>A Part is a type of Product that collects the definitional information of 
   the versions of either a part or of a non-countable material.</li>
   <li>Physical Property is assigned to part.</li>
   <li>Many persons think of parts as components, but manufacturing thinks of them 
   as assemblies because they build assemblies.</li>
   <li>Assembly is a standard ISO naming convention. It may be desirable to alias this name.</li>
   <li>The name used herein follows the STEP manufacturing point of view of looking 
   at a part or component and talking about it as an assembly because their job is 
   to assemble it.</li>
   <li>This is a place where it may be advisable for clarity to use the words 
   component or part as an alias for Part.</li>
   <li>To support verification and validation work there is the need to distinguish 
   between part design and part realized.</li>
   </ol></note>

   <p><b>Requirement:</b>shall create a hierarchy for Part.</p>
   <p><b>Requirement:</b>shall create the ability to distinguish between part (build 
   as designed) and part realized (built as designed); as needed to support system 
   verification and validation work.</p>
  
      <p><b>Concerns, Observations and comments (Radack/Baker exchange)</b></p> <ol>
   <li>The problem with the concept of assembly is that some user's "part" is
   another user's assembly. For example, microchips are single parts to
   most users, but clearly have a bill of materials if you manufacture
   them. In the aircraft industry, a carbon fibre composite can be viewed
   as a single part for most purposes (it certainly cannot be disassembled)
   but has a complex, careful defined structure for its own manufacturing
   process.</li>

   <li>From the STEP viewpoint, saying something is an assembly is equivalent
   to saying you have the breakdown into smaller physical components.
   "assembly" is not a classification of the thing in itself, but an
   observation on whether your organization thinks about it in terms of
   components. In that sense, a pilot's log book treats an aircraft as a
   single part, since he does not record a list of component parts.</li>

   <li>In a PDM context, an assembly is something that is in itself
   configuration controlled (in a configuration context), and is made from
   configuration controlled parts. Here, an assembly is a convenient holder
   for "a collection of parts". It would not affect the end product if a
   different collection of assemblies were used, as long as the same
   collection of parts in the same position is the result. The old 'Product
   Manager' explicitly supported the restructuring of the design assembly
   breakdown into a manufacturing assembly breakdown. There are also often
   differences between the assembly structure used in manufacture and the
   assemblies provided as spares.</li>

   <li>Which all goes top reinforce that "assembly" is as much a description of
   the user organization as the product. Since STEP does not transfer
   business processes, it is probably best to treat "assembly" as a
   placeholder for a family of concepts that need further specification.</li>

   <li>If you are saying that it does not make sense to say that an Assembly is
   a kind of Product or Part I agree.  Assembly should be treated as a
   relationship which is part of a structure.  We should be able to say "A
   is assembled from B, C and D within structure X" but not "A is an
   assembly".  Different structures are needed to account for different
   activities or purposes, e.g., manufacture, maintenance, and disposal.</li>

   <li>Well put.</li>
   </ol>

   <p><b>Concerns, Observations and comments</b></p>
   <ol><li>Part stuff appears to service - for design, build as</li>
   <li>Product_as_individual stuff appears to service - individual instance, built as</li>
   <li><b>DWO - </b>During the Asheville meting it became apparent that the SC4 approaches 
   all distinguish between the design of a thing and the actual manufactured thing itself. 
   SysML will likely follow that approach as well. Currently the the concept model makes 
   no such distinction.</li>
   <li><b>DWO - Issue: </b>Distinguish between design and the manufactured things based 
   on those design</li>
   <li><b>DWO - Possible approach: </b>The current entity Part can be a superclass with 
   a subclass for design and a subclass for the manufactured things based on that design. 
   Keep the interface relationship at the superclass level so that interfaces and 
   interconnection apply to both subclasses and the interfaces may be preserved 
   between design and manufactured thing. Generate names and definitions for the 
   superclass and the two subclasses. Generate the relationship between the design 
   and the manufactured thing. Check on any changes that need to be made to the 
   validation and verification parts of the model. These may be minimal because 
   design and manufactured things are validated and verified in a similar manner. 
   The particular analysis/measurement technique and infrastructure may differ, but 
   thosse models allow for prescription of analysis, measurement, and infrastructure 
   for each verification and validation.</li>
   <li><b>Jozsef Bedocs - built vs. design: </b>Subclassing the manufactured thing from 
   the designed thing has potential issues. Fundamentally, the manufactured thing 
   is not necessarily the same as the designed thing. It would be better to have the 
   manufactured thing subclass to Part and associate unidirectionally the manufactured 
   thing and the designed thing.</li>
   </ol>

   <p><b>Requirement:</b>shall create an entity for the information unit concept of 
   Link related to part</p>

   <note><b>Definition - Link: </b>A particular kind of Part that is used when it is
   helpful not to model or specify its details.<ol> 
   <li>Link must be provided in the concept model because a number of application tools 
   use the concept.</li>
   <li>Links ultimately are fully specified and become system-assembly.</li>
   <li>Example: In a pumping system it may be useful to define the pumps and tanks 
   while representing the piping as links without detail. At some point in the design 
   detail like diameter, flow impedance, pressure rating, and corrosion resistance 
   must be defined. At his point the link becomes a part.</li></ol></note>
   
   <p><b>Requirement:</b>shall create an entity for the information unit concept of 
   Port related to part</p>   
   
   <note><b>Definition - Port: </b>A connection point on a Part in the Part 
   decomposition hierarchy.<ol>
   <li>Each Part (part or component) attaches to others at particular locations. 
   These locations are called Ports.</li>
   <li><b>Example: </b>This is a familiar idea when one thinks of the port on a power cord 
   that plugs into a port on the wall to get electric power. It also applies to the 
   surface of a bridge, a port, that interacts with wind, a port. In the second case 
   the concept is less intuitive and more formal but it works.</li>
   <li>Ports connect to ports.</li>
   <li>Systems interconnect with one another port-to-port. Ports couple to desired 
   things in the environment and also to the ports of things that cause failure, 
   threaten security or safety.</li>
   <li>Note that when a system interacts with its environment that the boundary 
   between the system and the environment is the collection of all interacting ports.</li>
   <li><b>Example: </b>Consider a ultrasonic transmitting transducer coupled to a water 
   tank and a receiver transducer coupled to the tank. The transmitter port connects 
   to a water port and couples sound energy into the water. The intensity at any 
   point is a result of the impedance match between the two ports, the radiation 
   pattern of the transducer, and the attenuation and dispersion in the water. The 
   receiving transducer is attached to another port of the water. The received 
   signal is dependant on the relative impedance of the two ports, the sound 
   distribution in the water, and the radiation pattern of the receiving transducer.</li>
   <li><b>Example: </b>This example is often oversimplified as "broadcast" neglecting the 
   port to port conditions and the properties of the medium and neglecting the ports.</li>
   <li>The alias for Port is Interface_connection, the term that is used in AP239.</li>
   </ol></note>

   <p><b>Requirement:</b>shall create a hierarchy for port.</p>

   <p><b>Requirement:</b>shall create the ability to provide for both information 
   templates and information instances for the information concept units of part and port.</p>

   <p><b>Requirement:</b>shall create an entity for the information unit concept of 
   Interconnection</p>
   
   <note><b>Definition - Interconnection:</b>A listing of the ports that interconnect with one 
   another.<ol>
    <li>Interconnection specifies which ports attach to which other ports. Together Part, 
    Port, and Interconnection specify how parts go together to constitute the whole.</li>
    <li>This description does not include Behavior or Physical Properties.</li>
    <li>The interconnection may exist for structural reasons without any flow from port to 
    port. The interconnection may exist because functions are assigned to particular 
    assemblies, and the output from one function is an input to the other function. In 
    this case the ports and their interconnection must exist to support flow.</li>
    <li>The alias for interconnection is Interface_connection, the term used in AP239.</li>
   </ol></note>

      <p><b>Requirement:</b>shall support various classes of port to port interface 
      representational complexity. </p><ol>
      <li>Simple property: A scalar property is needed to characterize port to port 
      connectivity; e.g., the thermal conductivity of a thermal insulation plate.</li>
      <li>Complex property: A property with complex dependencies is needed to characterizes 
      port to port connectivity; e.g., the characterization of the welding together of 
      two Alaska pipeline pipes.</li>
      <li>Simple part: A simple part characterizes port to port connectivity; e.g., 
      international electric plug adapter.</li>
      <li>Complex part: A complex part characterizes port to port connectivity; e.g., 
      Alaska pipeline support structure with its embedded heat pipe to prevent 
      permafrost melt. Alaska pipeline U joints designed for earthquake failure protection.</li>
      <li>Other examples from Asheville: Tire tread for on and off road vehicles; 
      Suspension system for a land operated vehicle, all sorts of electrical cabling 
      and harnesses, all sorts of mechanical hinges with 1,2,3,4,5,6 degrees of freedom 
      including flexibility, joint slop, damping, etc.</li></ol>

   <p><b>Requirement:</b>shall create an entity for the information unit concept of 
   Interface Specification</p>

   <note><b>Definition - Interface Specification: </b>A description of a Port of a 
   Part that includes the geometric description, I/O description, protocols that 
   must be met, assemblies of parts required to join two ports, allowable defect 
   characteristics, etc. The interface_description includes the emergent properties 
   of the interface that is the result of the two ports interacting, and is not 
   associated with either.<ol>
   <li>Each port has associated with it a description, an Interface Specification, 
   that describes the geometry, forces, transferred material or energy or information, 
   protocols, how to assemble to it, and tests that may be required of the port-to-port 
   connection. For two ports to be interconnected their interfaces must be compatible.</li>
   <li>The interface specification describes emergent properties and behaviors of the 
   interface.</li>
   <li>The interface specification allows for an interface that consists of multiple parts.</li>
   <li>Parts interact physically through direct physical contact, exchange of Elements, 
   and through forces they exert such as gravity, compression or torque. Thus I/O is 
   bound to ports and described by interfaces. The interface may consist of more than 
   the two ports and may involve an assembly of parts as in the case of two flanges 
   that are assembled with six bolts and an O-ring. The interface may also require 
   detailed description to define what occurs there or how it is maintained.</li>
   <li><b>Example: </b>For two ports to connect, their interfaces must be compatible. 
   The current carrying capacity of a plug and a socket is a result of the surface area 
   of contact, the contact force, the wiping action on plugging them together, and 
   the surface conductivity of both. This is an emergent property that is not assignable 
   to either port individually.</li>
   </ol></note>
   
   <p><b>Concerns, Observations and comments</b></p>
   <ol><li>Extensions may be needed to service full range of AP233 needs</li></ol>
   
   	<p>Physical Property, its relationship to the Structure hierarchy and to 
	analysis is shown in Figure 1 above. The key concept is that performance, behavior 
	and physical properties of the whole results from the structure, the behavior 
	and physical properties of the parts. They are not related to a class tree.</p>

	<p><b>Requirement:</b>shall create an entity for the information unit concept 
	of Physical Property</p>

   <note><b>Definition - Physical Property: </b>What an Element exhibits or does not 
   exhibit in response to excitation and stimulation from auxiliary measurement entities 
   that are not part of its context.<ol>
   <li>This is the subclass of property that encompasses measurable characteristics that 
   require additional instrumentation to measure them. They cannot be established from 
   responses to the environment alone. All of the "properties" used in analysis with 
   differential equations fall into this category.</li>
   <li><b>Example: </b>Responses of an Element like mass, power consumption, MTBF, etc. 
   are critically important and appear in requirements. They are not measured by responses 
   to excitation from their environment.</li>
   </ol></note>

	<p>System Assemblies in the Part tree all have Physical Properties such as mass, 
	power consumption, geometry, MTBF, drag coefficient, etc. The Physical Properties 
	are assigned to a particular Part. A Physical Property has a name and an ID that 
	identifies it uniquely. For example, many different System Assemblies have the 
	Physical Property mass. Consequently each of these assigned Physical Properties 
	needs an ID. Each has an associated unit in which it is measured.</p>	   
	   
	<p>A Physical Property assigned to a particular Part has values. The value 
	may be expressed as a mean, a mean with variance, a probability distribution, 
	or a histogram. All of these values are a result of a set of measurements and 
	analysis of the data. The value goes through a series of versions as the system 
	definition evolves. The Part is declared to have a Required or Budgeted Value.</p>	   
	   
	<p>The Part may have a Target Budget Property Value used as a guide or 
	target as designers consider alternatives. A Part, as a whole, may have a 
	Calculated Property Value based on analysis of the properties, behaviors and 
	interactions of its parts. When a Part is built, it may have a Measured 
	Property Value.</p>	   

   <p><b>Requirement:</b>shall create an entity for the information unit concept of 
   Unit, value, version of value, tolerance and version of tolerance.</p>

   <note><b>Definition - Unit:</b>Establishes the standard of measure against which 
   he values of physical_properties shall be stated.</note>

   <note><b>Definition -  Property value: </b>A numeric value assigned to a physical_property<ol>
   <li><b>Required_budgeted_property_value: </b>A property value aloocated to a part by a 
   requirement, or budgeted to that part by analysis.</li>
   <li><b>Calculated_property_value: </b>A property value of a whole calculated or 
   estimated from the values of the parts that assemble to make the whole.</li>
   <li><b>Target_budget_property_value: </b>A temporary property value used by a 
   designer as the design work proceeds and different design alternatives are considered.</li>
   <li><b>Measured_property_value: </b>A property_value established by measurement 
   of an actual part.</li>
   </ol></note>

   <p><b>Requirement:</b>shall create relationships among physical property, unit, 
   value, and tolerance</p>

   <p><b>Requirement:</b>shall create an allocation relationship between Part and Property</p>

   <p><b>Requirement:</b>shall create allocation relationship between Part and Function</p>

   <p><b>Requirement:</b>shall create an allocation relationship between Part and State</p>

   <p><b>Requirement:</b>shall create entities for the information unit concept of 
   Alternative Parts</p>

   <p>Any one assembly is an interconnection of assemblies one tier down in the tree. The 
   emergent properties of any assembly are a result of the properties, interconnection, and 
   interaction of the sub-assemblies from which it is built. The relationships may be 
   very non-linear in the physical world as observed with phenomena like combustion and 
   friction.</p>   
   
     <p>The following stepmod modules are the primary servers of these requirments. These are 
     included in this module via the USE FROM linkages shown and Figure 2 and its successively 
     lower levels of USE FROM abstraction detail, see Figure 4 below.  Many other modules come 
     in via USE FROM linkages; however, these can be ignored from a system structure representation
     point of view..  These others are largely forced in via ISO SC4 rules associated with the 
     stemod module reuse.</p>

   	<ul>
	<li>
        <module_ref linkend="assembly_structure:introduction">
          Assembly_structure_arm</module_ref>
        (ISO 10303-1026);
	</li>
	
	<li>
        <module_ref linkend="configuration_item:introduction">
          Configuration_item_arm</module_ref>
        (ISO 10303-1056);
	</li>
	
	<li>
        <module_ref linkend="foundation_representation:introduction">
          Foundation_representation_arm</module_ref>
        (ISO 10303-1006);
	</li>
	
	<li>
        <module_ref linkend="identification_assignment:introduction">
          Identification_assignment_arm</module_ref>
        (ISO 10303-1021);
	</li>
	
	<li>
        <module_ref linkend="independent_property:introduction">
          Independent_property_arm</module_ref>
        (ISO 10303-1036);
	</li>
	
	<li>
        <module_ref linkend="independent_property_representation:introduction">
          Independent_property_representation_arm</module_ref>
        (ISO 10303-1038);
	</li>
	
	<li>
        <module_ref linkend="interface:introduction">
          Interface_arm</module_ref>
        (ISO 10303-1251);
	</li>
	
	<li>
        <module_ref linkend="part_and_version_identification:introduction">
          Part_and_version_identification_arm</module_ref>
        (ISO 10303-1022);
	</li>
	
	<li>
        <module_ref linkend="part_definition_relationship:introduction">
          Part_definition_relationship_arm</module_ref>
        (ISO 10303-1055);
	</li>
	
	<li>
        <module_ref linkend="part_view_definition:introduction">
          Part_view_definition_arm</module_ref>
        (ISO 10303-1023);
	</li>

	<li>
        <module_ref linkend="physical_breakdown:introduction">
          Physical_breakdown_arm</module_ref>
        (ISO 10303-1215);
	</li>
		
	<li>
        <module_ref linkend="product_as_individual:introduction">
          Product_as_individual_arm</module_ref>
        (ISO 10303-1164);
	</li>
 
	<li><module_ref linkend="product_breakdown:introduction">
          Product_breakdown_arm</module_ref>
        (ISO 10303-1248);</li>
		
	<li>
        <module_ref linkend="product_categorization:introduction">
          Product_categorization_arm</module_ref>
        (ISO 10303-1216);
	</li>
	
	<li>
        <module_ref linkend="product_concept_identification:introduction">
          Product_concept_identification_arm</module_ref>
        (ISO 10303-1060);
	</li>
	
	<li>
        <module_ref linkend="product_identification:introduction">
          Product_identification_arm</module_ref>
        (ISO 10303-1017);
	</li>
	
	<li>
        <module_ref linkend="product_replacement:introduction">
          Product_replacement_arm</module_ref>
        (ISO 10303-1046);
	</li>
	
	<li>
        <module_ref linkend="product_structure:introduction">
          Product_structure_arm</module_ref>
        (ISO 10303-1134);
	</li>
	
	<li>
        <module_ref linkend="product_version:introduction">
          Product_version_arm</module_ref>
        (ISO 10303-1018);
	</li>
	
	<li>
        <module_ref linkend="product_version_relationship:introduction">
          Product_version_relationship_arm</module_ref>
        (ISO 10303-1020);
	</li>
	
	<li>
        <module_ref linkend="product_view_definition:introduction">
          Product_view_definition_arm</module_ref>
        (ISO 10303-1019);
	</li>
	
	<li>
        <module_ref linkend="product_view_definition_relationship:introduction">
          Product_view_definition_relationship_arm</module_ref>
        (ISO 10303-1041);
	</li>
	
	<li>
        <module_ref linkend="property_assignment:introduction">
          Property_assignment_arm</module_ref>
        (ISO 10303-1030);
	</li>
	
	<li>
        <module_ref linkend="system_breakdown:introduction">
          System_breakdown_arm</module_ref>
        (ISO 10303-1214);
	</li>
	
	<li>
        <module_ref linkend="system_identification_and_version:introduction">
          System_identification_and_version_arm</module_ref>
        (ISO 10303-1484);
	</li>
	
	<li>
        <module_ref linkend="system_view_definition:introduction">
          System_view_definition_arm</module_ref>
        (ISO 10303-1485);
	</li>
	
	<li>
        <module_ref linkend="value_with_unit:introduction">
          Value_with_unit_arm</module_ref>
        (ISO 10303-1054);
	</li>

	<li>
        <module_ref linkend="zonal_breakdown:introduction">
          Zonal_breakdown_arm</module_ref>
        (ISO 10303-1217);
	</li>
	</ul>

	   <p>The associated USE FROM relationships between these modules at the second level of 
	system structure representation USE FROM abstraction are shown in the
	Figure 4 below entitled <b>What Concepts</b>.  As above, code color yellow implies all USE FROM's are shown 
	for the module identified, Code green implies more 
	USE FROM's exist in the module identified, Code blue identifies the extensible select type 
	defined by the module shown.</p>
   
   	<figure><title> What Concepts  </title>
	<img src="What Concepts.gif"/>	</figure>

	   <p><b>Concerns, Observations and comments (Erik Herzog)</b></p> <ol>
   <li>Please find attached a more detailed description on what I believe is missing 
   from the system structure modules as proposed.  This document, from Erik, can be downloaded at
   <a href="http://stepmod.cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_structure/Erik_system_structure_1.doc?rev=1.1"/> </li>
   <li>To Erik: I reviewed your proposal and am requesting more information:
How does a conceptual_part differ from a system? Tom</li>
   <li>Good question Tom:  Do I need both a system entity and a conceptual product entity?  
   I do ask the same question at regular intervals, have intense debates with myself and 
   tend to come up with justifications each time.  I will put together a justification document,</li>
   <li>Erik: As you are putting together the justification document, the central thing
   (from my perspective) is to capture what explicit mechanisms are used for
   identification. Tom</li>
   <li>To Eric From David: <p>I always like what you do and it leads to interesting discussions. I have just scanned 
   your comments on structure. Let me add some thoughts that may not have been clear in the information 
   you have seen so far.  Your diagrams appear to be correct. However, we have planned to include a 
   breakdown for real physical manufactured things. after all, verification is done against the real 
   stuff, not just against designs (Parts in STEP).</p>
 
   <p>So I would add breakdowns for real stuff to the pictures you have drawn.</p>
 
   <p>In real work sometimes one sets up conceptual or logical parts and then the actual designs. 
   Sometimes it is done with two or more alternative designs and a trade study to select the best approach. 
   When we did  a real time ultrasonic cardiac imager in the 80's we considered large wobble transducers, 
   fresnel lenses, and phased arrays. Trade studies showed only phased arrays would work. For the front 
   end signal processing we did a trade study of standard digital circuits vs. CCD's. this took 
   experimental work to sort out the best design approach. My only point is that there may be more 
   design alternatives than just two, and the number you get may vary with where you are in the decomposition 
   hierarchy. I think this can all be handled through use of Part for design and the generous version capability 
   that includes defining the context for the version and the part view definition. Most often the work is 
   upgrading where 90% or more of the system is predetermined and it is being enhanced for the market.</p>
 
   <p>As stated above we need not just Part, but also real manufactured stuff. Here too there may be more 
   than one version of real things to represent. For example, there is the first product built - like first 
   car to track or first engine to test. These often contain parts that are hand crafted and not manufactured 
   with the regular assembly line. Next there is often pre-production that is used for test marketing but built 
   on an assembly line that is not the final one for full scale manufacture. There is also spare parts manufacture, 
   spare part refurbishing, and a part hierarchy particular for maintenance that emphasizes line replaceable units.
   As with design, I believe that one can use a single real thing breakdown, and use versions to handle the several 
   related but different breakdowns for specific purposes. In accord with this Asheville decision we sent an Issue 
   to Julian, who is working on the concept model, to add to that model the distinction between design and the real 
   stuff manufactured from design that may have part numbers.</p>
 
   <p>When we went into the Asheville meeting the .vsd model used System Breakdown for System. During that meeting 
   a consensus was reached with the help of the more EXPRESS expert contributors like Spiby and Price, that we make 
   System equal Product. The Product decomposition then becomes the System Breakdown. Part, as a subclass of Product, 
   represents design. It seems logical to use Product_as_Individual for real physical manufactured stuff that is 
   tested and verified against requirements.</p>
 
   <p>If we do this, there seems to be no need for several PLCS modules - Product Breakdown, System Breakdown, 
   Physical Breakdown, and Functional Breakdown. We set this up as a crtitical issue - not to use these. We set 
   up as a critical issue what these breakdowns are because the documentation is ambiguous and shows a lot of cut 
   and paste such that different modules share nearly identical descriptions. Unfortunately the documentation does 
   not provide examples. We hope team members or Rob Boddington will help clarify concepts these modules support. 
   The most mysterious of these breakdowns is Functional Breakdown with Functional Instance. Examples of functional 
   instances and how they differ from requirements would be helpful.</p>
 
   <p>If this makes sense to you, it would add to your figures a breakdown for real physical manufactured things 
   currently associated with the Product_as_Individual module. This could be modified in Valencia if we find convincing 
   reasons to do so.   I welcome any comments on this. </p></li>
   
   <li>To Eric from David:  <p> I have attached a schematic (a little like the ones in your recent communication) to 
   show what we have had in mind for AP233. It is a bit different than the diagram you drew for the AP233 approach. 
   Perhaps it satisfies some of what you perceived to be needed. Please let me know how much it satisfies or does not 
   satisfy your concerns. David's attachment can be dowloaded from
   <a href="http://stepmod.cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_structure/David_system_structure_1.ppt?rev=1.1"/></p>

   <p>What you meant by conceptual parts was not clear to me and I have interpreted it as alternative designs. 
   There is a whole process step with its own set of tools used at a higher level of decomposition to do concept 
   analysis or strategic planning. We expect to have a vendor of these tools and an expert in the field working 
   with us on strategic planning in the near future but not in time for WD-1. Some of this can be found in my book 
   and in the book on strategic planning by Gale, cited in my book. This book can be downloaded at 
   <a href="http://stepmod.cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_engineering/Engineering%20Complex%20Systems%20%28book%29.pdf?rev=1.1"/>.  Much of 
   what is needed for strategic planning 
   can be accomplished by modeling the business developing its strategic plan for a product as a system. The 
   context model at that level then includes competitors, competitive products, and markets (customers), etc. 
   We will need to work through examples with a tool designed for this to isolate the additional entities and 
   relationships that are needed in AP233.</p>
 
   <p>Note that at the beginning of the Asheville meeting System was identified with the System Breakdown Module. 
   At that meeting the collective wisdom of the team was to identify System directly with Product, and we changed 
   the Structure module to accomplish this after the meeting. The assignment of application entities to modules 
   in the schematic charts is based on that decision at Asheville; System = Product.</p></li>  
   
   <li>To All from Erik:  <p>The attached document 
   <a href="http://stepmod.cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_structure/Erik_system_structure_2.pdf?rev=1.1"/>
   is produced to justify when AP-233 WD5 included separate physical architecture and system architecture 
   structures. The document is produced in response to the statements by Tom T.  Tom has seen earlier 
   versions of this document and he now has a good understanding of the AP233 WD5 model, Whether he 
   accepts it or not is a completely different issue.  So, the rationale is provided and the debate is 
   open! </p></li>
   </ol>

   <p><b>Notes extracted from Valencia and Rochester meetings summer 2005</b></p>


   <ul><li>Re. Interconnection - Interface</li></ul>
   <ol>
   <li>Extensive discussion on this subject with a detail walk through AP239 interface_arm example population by Phil see
   <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/stepmod/stepmod/etc/ap233/references/system_structure/Phil_PLCS_Interface_example_4.pdf?rev=1.1"/>
   </li>
   <li>The arm.exp segment within AP233 WD#1 module system_structure tagged as "Product_interface" is 
   effectiviely a copy of what is in AP210.  (To be removed.)</li>
   <li>After the detail walk through it appears that stepmod AP239 module "interface_arm" will service AP233 needs.</li>
   <li>A few open issues remain, to be clarified via further population of example in time for PDES fall off-site review.</li>
   <li>This work will be done by Phil Spiby, Joe Bedocs and Harald Eisenmann</li>
   <li>Population will be to clarify multiple usage and emergent properties concerns</li>
   <li>Populate SysML interface model with same example.</li>
   <li>Detail review by AP210 + AP239 + SysML gang necessary</li>
   <li>Lothar has interconnection concerns: 
   At occurrence level (Several levels of hubs and ports, Package connectors), Reference designator</li>
   <li>WD#2 decision was to remove "Product_interface" segments from WD#1 system_structure and replace with USE FROM Interface_arm;</li>
   </ol>

   <ul><li>Re. Breakdown</li></ul>
   <ol>
   <li>Extensive discussion on the WD#1 proposed breakdown approach vs. AP239 stepmod breakdown modules</li>
   <li>A lack of detail understanding during WD#1 development exposed.  It now appears that the AP239 breakdown modules will work.</li>
   <li>Breakdowns allow you to take different cuts at the system allowing you to point to associated parts.  
   Are pointers to parts.</li>
   <li>Assembly provides another view of problem from the realized/realizable "as is" perspective.  
   Its a relationship that holds the semantics of connection, the "as is" view.</li>
   <li>Decision - Remove WD#1 segments of AP233 system_stucture module tagged "System_engineering_system_breakdown".</li>
   <li>Replace with USE FROMs to stepmod breakdown modules</li>
   <li>No need for hybrid breakdown</li>
   <li>Lothar still has some issues associated with the stepmod breakdown modules. 
   These require detail PDES offsite discussion.</li>
   </ol>

   <ul><li>Re. Part</li></ul>
   <ol>
   <li>Phil/EuroSTEP gang to check out animate object support</li>
   <li>Questions arose with respect to the modeling of people (operators)</li>
   <li>Use Part for design, product_as_realized for individual, links to 
   alternatives needed to support trade-off studies.</li>
   <li>Make sure that we can do alternative design trade-off studies</li>
   </ol>

</usage_guide>

</module>

