<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" 
  href="../../../xsl/descriptions.xsl"?>
<!DOCTYPE ext_descriptions SYSTEM "../../../dtd/description.dtd">
<ext_descriptions module_directory="task_element" schema_file="arm.xml" describe.selects="YES" describe.subtype_constraints="YES" rcs.date="$Date: 2006/09/01 13:17:05 $" rcs.revision="$Revision: 1.3 $">
	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Schema: Task_element_arm
   <express_ref linkend="task_element:arm:Task_element_arm"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<ext_description linkend="Task_element_arm">
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Type: task_item 
   <express_ref linkend="task_element:arm:Task_element_arm.task_item"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.task_item">
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Concurrent_elements  
   <express_ref linkend="task_element:arm:Task_element_arm.Concurrent_elements"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Concurrent_elements">
	A <b>Concurrent_elements</b>
        is a type of <express_ref linkend="task_element:arm:Task_element_arm.Structured_task_element"/>

 that comprises a set of actions to be performed during the time required for the longest task. No specific order is required.

</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Concurrent_elements  Attribute: elements 
   <express_ref linkend="task_element:arm:Task_element_arm.Concurrent_elements.elements"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Concurrent_elements.elements">
	the <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>s to be performed.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Decision_point  
   <express_ref linkend="task_element:arm:Task_element_arm.Decision_point"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Decision_point">
	        A <b>Decision_point</b> is  a type of <express_ref linkend="task_element:arm:Task_element_arm.Structured_task_element"/>.

It  requires a decision that determines which further <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/> is to be followed. <note>The condition on which the decision is based optionally allows a further <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>

 to be invoked to provide the basis for the decision.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Decision_point  Attribute: condition 
   <express_ref linkend="task_element:arm:Task_element_arm.Decision_point.condition"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Decision_point.condition">
	 the criterion to be tested in order to make a decision.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Decision_point  Attribute: true_case_element 
   <express_ref linkend="task_element:arm:Task_element_arm.Decision_point.true_case_element"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Decision_point.true_case_element">
	the <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>

  to be performed if the test condition is satisfied.
The value of this attribute need not be specified.

</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Decision_point  Attribute: false_case_element 
   <express_ref linkend="task_element:arm:Task_element_arm.Decision_point.false_case_element"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Decision_point.false_case_element">
	the <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>

  to be performed if the test condition is not satisfied.
The value of this attribute need not be specified.

</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Decision_point  Attribute: unknown_case_element 
   <express_ref linkend="task_element:arm:Task_element_arm.Decision_point.unknown_case_element"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Decision_point.unknown_case_element">
	 the <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>

  to be performed if the test condition can not be evaluated or returns unknown.
The value of this attribute need not be specified.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: End_task  
   <express_ref linkend="task_element:arm:Task_element_arm.End_task"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.End_task">
	An <b>End_task</b> is a  type of <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>.
It signifies a point at which to end the task.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Exit_loop  
   <express_ref linkend="task_element:arm:Task_element_arm.Exit_loop"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Exit_loop">
	An <b>Exit_loop</b> is  a type of <express_ref linkend="task_element:arm:Task_element_arm.Structured_task_element"/>.
It signifies a point at which to exit from a loop. 
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Looping_element  
   <express_ref linkend="task_element:arm:Task_element_arm.Looping_element"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Looping_element">
	A <b>Looping_element</b> is a type of  <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>.
It invokes a specified number of repetitions of a further <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Looping_element  Attribute: repeated_element 
   <express_ref linkend="task_element:arm:Task_element_arm.Looping_element.repeated_element"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Looping_element.repeated_element">
	 the <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/> to be repeated in the looping element.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Repeat_count  
   <express_ref linkend="task_element:arm:Task_element_arm.Repeat_count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Repeat_count">
	A <b>Repeat_count</b> is a  type of <express_ref linkend="task_element:arm:Task_element_arm.Looping_element"/>. It invokes a specified number of repetitions of the <express_ref linkend="task_element:arm:Task_element_arm.Looping_element.repeated_element"/>
		<express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>
inherited from the <express_ref linkend="task_element:arm:Task_element_arm.Looping_element"/>  supertype.

</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Repeat_count  Attribute: count 
   <express_ref linkend="task_element:arm:Task_element_arm.Repeat_count.count"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Repeat_count.count">
		<p>the number of times the <express_ref linkend="task_element:arm:Task_element_arm.Looping_element.repeated_element"/>
     is to be executed.
</p>
		<note> If the <b>Repeat_count</b> entity is combined with the other subtypes of <express_ref linkend="task_element:arm:Task_element_arm.Looping_element"/>, this becomes the maximum number of repetitions.</note>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Repeat_until  
   <express_ref linkend="task_element:arm:Task_element_arm.Repeat_until"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Repeat_until">
	 A <b>Repeat_until</b> is a  type of  <express_ref linkend="task_element:arm:Task_element_arm.Looping_element"/>.
It invokes repetitions of a further <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>
  and is repeated until the specified condition is satisfied.  The element being repeated shall be executed at least once and the condition tested after the first execution.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Repeat_until  Attribute: condition 
   <express_ref linkend="task_element:arm:Task_element_arm.Repeat_until.condition"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Repeat_until.condition">
	the criterion to be tested in order to determine that the looping method shall be exited.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Repeat_while  
   <express_ref linkend="task_element:arm:Task_element_arm.Repeat_while"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Repeat_while">
	A <b>Repeat_while</b> is a  type of  <express_ref linkend="task_element:arm:Task_element_arm.Looping_element"/>.
It  invokes repetitions of a further <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>
 and is repeated while the specified condition is satisfied.  The test condition shall be evaluated prior to invoking the method and may result in the <express_ref linkend="task_element:arm:Task_element_arm.Looping_element"/>
  not being executed at all.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Repeat_while  Attribute: condition 
   <express_ref linkend="task_element:arm:Task_element_arm.Repeat_while.condition"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Repeat_while.condition">
	the criterion to be tested in order to determine that the <express_ref linkend="task_element:arm:Task_element_arm.Looping_element"/>
 shall be continued.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Start_task  
   <express_ref linkend="task_element:arm:Task_element_arm.Start_task"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Start_task">
	A <b>Start_task</b> is a  type of <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>.
It signifies the start point of the task.
<note>Not all formal task description require start and end elements, their inclusion is in a sequence is optional.</note>
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Structured_task_element  
   <express_ref linkend="task_element:arm:Task_element_arm.Structured_task_element"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Structured_task_element">
	A <b>Structured_task_element</b> is a  type of <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>. It  is made up of other <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>s
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Task_element  
   <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Task_element">
	A <b>Task_element</b> is a type of <express_ref linkend="activity_method:arm:Activity_method_arm.Activity_method"/>.
It is a representation of all or part of how to undertake a task.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Task_element_assignment  
   <express_ref linkend="task_element:arm:Task_element_arm.Task_element_assignment"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Task_element_assignment">
	A <b>Task_element_assignment</b> is a type of <express_ref linkend="activity_method_assignment:arm:Activity_method_assignment_arm.Applied_activity_method_assignment"/>.

It  is an association of a <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/> with product or activity data.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Task_element_assignment  Attribute: assigned_task_element 
   <express_ref linkend="task_element:arm:Task_element_arm.Task_element_assignment.assigned_task_element"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Task_element_assignment.assigned_task_element">
	the <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/> being assigned.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Task_element_assignment  Attribute: items 
   <express_ref linkend="task_element:arm:Task_element_arm.Task_element_assignment.items"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Task_element_assignment.items">
	the set of things associated to the <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>. 

</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Task_element_relationship  
   <express_ref linkend="task_element:arm:Task_element_arm.Task_element_relationship"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Task_element_relationship">
	A <b>Task_element_relationship</b> is a type of <express_ref linkend="activity_method_assignment:arm:Activity_method_assignment_arm.Activity_method_relationship"/>.

It  relates two instances of <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>. <example>Can be used to capture a time dependency that cuts across the structure of the method.</example>
	</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Task_element_relationship  Attribute: relating_method 
   <express_ref linkend="task_element:arm:Task_element_arm.Task_element_relationship.relating_method"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Task_element_relationship.relating_method">
one instance of <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>
 that is a part of the relationship.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Task_element_relationship  Attribute: related_method 
   <express_ref linkend="task_element:arm:Task_element_arm.Task_element_relationship.related_method"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Task_element_relationship.related_method">
the other instance of  <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>
 that is a part of the relationship. If one element of the relationship is dependent upon the other,  this attribute shall be the dependent one.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Task_element_sequence  
   <express_ref linkend="task_element:arm:Task_element_arm.Task_element_sequence"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Task_element_sequence">
A <b>Task_element_sequence</b> is a type of  <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>
 that comprises a sequence of steps to be followed in a specified order.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Task_element_sequence  Attribute: elements 
   <express_ref linkend="task_element:arm:Task_element_arm.Task_element_sequence.elements"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Task_element_sequence.elements">
the  <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>s
 to be followed in the order specified in the list.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Task_step  
   <express_ref linkend="task_element:arm:Task_element_arm.Task_step"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Task_step">
A <b>Task_step</b> is a type of  <express_ref linkend="task_element:arm:Task_element_arm.Task_element"/>
 that is not further sub-divided.
</ext_description>
	<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: Task_element_arm  Entity: Task_step  Attribute: step_text 
   <express_ref linkend="task_element:arm:Task_element_arm.Task_step.step_text"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
	<ext_description linkend="Task_element_arm.Task_step.step_text">
the text describing what is to be done to accomplish the <express_ref linkend="task_element:arm:Task_element_arm.Task_step"/>
	</ext_description>
</ext_descriptions>
