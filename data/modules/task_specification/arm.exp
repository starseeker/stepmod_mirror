{ iso standard 10303 part (11) version (4) }

(******************************************************************************)
(*                                                                            *)
(*          This file was produced by Eurostep Graphical EXPRESS V1.3         *)
(*                                                                            *)
(******************************************************************************)

SCHEMA Task_specification_arm;

USE FROM Classification_arm;

USE FROM State_arm;

TYPE condition_select = EXTENSIBLE GENERIC_ENTITY SELECT ;
END_TYPE;

TYPE returned_value = EXTENSIBLE GENERIC_ENTITY SELECT ;
END_TYPE;

TYPE task_classified_select = SELECT BASED_ON classified_select WITH
  (Task,
   Task_method,
   Task_method_relationship,
   Task_method_state_relationship,
   Task_relationship,
   Task_result,
   Task_result_state_relationship,
   Task_state_relationship);
END_TYPE;

ENTITY Advisory_task_step
SUBTYPE OF (Task_step);
END_ENTITY;

ENTITY Concurrent_methods
SUBTYPE OF (Structured_task_method);
  (* The task_methods to be performed. *)
  methods : SET [2 : ?] OF Task_method;
END_ENTITY;

ENTITY Decision_point
SUBTYPE OF (Structured_task_method);
  condition : condition_select;
  true_case_method : OPTIONAL Task_method;
  false_case_method : OPTIONAL Task_method;
  unknown_case_method : OPTIONAL Task_method;
END_ENTITY;

ENTITY End_task
SUBTYPE OF (Task_method);
END_ENTITY;

ENTITY Exit_loop
SUBTYPE OF (Task_method);
END_ENTITY;

ENTITY Looping_method
SUBTYPE OF (Structured_task_method);
  repeated_method : Task_method;
END_ENTITY;

ENTITY Method_constraint
SUBTYPE OF (Task_method_relationship);
  applies_in : OPTIONAL Task_method;
END_ENTITY;

ENTITY Repeat_count
SUBTYPE OF (Looping_method);
  count : INTEGER;
END_ENTITY;

ENTITY Repeat_until
SUBTYPE OF (Looping_method);
  condition : condition_select;
END_ENTITY;

ENTITY Repeat_while
SUBTYPE OF (Looping_method);
  condition : condition_select;
END_ENTITY;

ENTITY Simultaneous_methods
SUBTYPE OF (Concurrent_methods);
END_ENTITY;

ENTITY Structured_task_method ABSTRACT SUPERTYPE
SUBTYPE OF (Task_method);
END_ENTITY;

ENTITY Task;
  name : STRING;
  description : STRING;
  objective : SET [1 : ?] OF Task_result;
  method : OPTIONAL Task_method;
END_ENTITY;

ENTITY Task_invocation
SUBTYPE OF (Task_method);
  task : Task;
END_ENTITY;

ENTITY Task_method ABSTRACT SUPERTYPE;
  name : STRING;
  description : STRING;
  notes : OPTIONAL LIST [1 : ?] OF Advisory_task_step;
END_ENTITY;

ENTITY Task_method_levels
SUBTYPE OF (Task_method);
  alternatives : SET [2 : ?] OF Task_method;
END_ENTITY;

ENTITY Task_method_relationship;
  relating : Task_method;
  related : Task_method;
END_ENTITY;

ENTITY Task_method_sequence
SUBTYPE OF (Structured_task_method);
  methods : LIST [2 : ?] OF Task_method;
END_ENTITY;

ENTITY Task_method_state_relationship;
  state : State;
  task_method : Task_method;
END_ENTITY;

ENTITY Task_method_with_result
SUBTYPE OF (Task_method);
  returns : BAG [1 : ?] OF returned_value;
END_ENTITY;

ENTITY Task_relationship;
  relating : Task;
  related : Task;
END_ENTITY;

ENTITY Task_result;
  name : STRING;
  description : STRING;
END_ENTITY;

ENTITY Task_result_state_relationship;
  state : State;
  task_result : Task_result;
END_ENTITY;

ENTITY Task_state_relationship;
  state : State;
  task : Task;
END_ENTITY;

ENTITY Task_step
SUBTYPE OF (Task_method);
  step_text : STRING;
END_ENTITY;

END_SCHEMA;


