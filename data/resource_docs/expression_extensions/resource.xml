<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: resource.xml,v 1.8 2003/01/15 22:03:35 shiangyulee Exp $ -->
<!DOCTYPE resource SYSTEM "../../../dtd/res_doc/resource.dtd">
<!-- Generated by mkresource.js, Eurostep Limited, http://www.eurostep.com -->
 <!-- 
     To view the resource in IExplorer, open: sys/1_scope.xml
      -->
<resource
   name="expression_extensions"
   part="57"
   version="1"
   wg.number="1825"
   checklist.internal_review="1827"
   checklist.project_leader="1828"
   checklist.convener="1829"
   status="CD"
   language="E"
   publication.year="2003"
   published="n"
   rcs.date="$Date: 2003/01/15 22:03:35 $"
   rcs.revision="$Revision: 1.8 $">

 <keywords>
	 resource expressions entity instance logical
 </keywords>

 <!-- Reference to contacts detailed in stepmod/data/basic/contacts.xml -->
 <contacts>
   <projlead ref="plcs.projlead"/>
   <editor ref="shiangyulee"/>
  </contacts>

 <!-- Introduction -->
 <!-- The introduction should start as shown: -->
 <purpose>
 <p>
	   This part of ISO 10303 builds on resources defined in 
	   ISO 13584-20, Parts library - Logical resource: Logical model of expressions. A substantive capability for representation of expressions is provided by ISO 13584-20. This part extends that capability to meet additional requirements.
</p>
   <p>
	   The <b>expression__extensions_schema</b> extends the usability of expressions  by providing identifiers and relationships to other expressions or objects, as well as by identifing expressions that refer to instances of entity datatypes 
	   as defined in ISO 10303-11. 
   </p>
   <p>
	The <b>logical_expressions_schema</b> identifies 
	expressions that return a logical result, where logical
	is defined as being true, false or unknown. 
	This corresponds to the logical 
	type defined in ISO 10303-11, the EXPRESS language reference manual.
	   Logical expressions are specified when it is necessary to define 
	   tests that shall be applied in a given circumstance. Such tests may be used to determine a course of action 
	   or whether some aspect of product data is applicable in a given circumstance.
	   It may not always be possible to fully evaluate a logical condition, in which case the result is "unknown".
   </p>
  

 </purpose>

 <!-- Schema Interface express-g diagrams  -->
 <!-- refer to p41ed2 as example  -->
 <schema_diag>
   <express-g>
     <imgfile file="schema_diagexpg1.xml"/>
  	<imgfile file="schema_diagexpg2.xml"/>
   </express-g>
 </schema_diag>

 <!-- Items in scope -->
 <inscope>
	 <li>a variable or a function expression identified by a name label.</li>
	 <li>expressions assigned to an object.</li>
	 <li>variable expressions assigned to a function.</li>
	 <li>literal expressions with a value context and an identified base expression type.</li>
	 <li>relationships between expressions with an identified role.</li>
	 <li>expressions that return logical results.</li>
 	<li>Boolean expressions as a result of constraining from a logical expression.</li>
	<li>comparison expressions that return logical results.</li>
	<li>User defined comparisons specifications based on the logical datatype.</li>
	<li>User defined comparisons specifications described by a computer interpretable coding.</li>

 </inscope>

 <!-- Items out of scope -->
 <outscope>
   <li>Boolean expressions and operators as defined by ISO 13584-20</li>
<li>EXPRESS function expressions as defined in ISO 13584-20</li>
<li>Odd function or interval function expressions as defined in ISO 13584-20</li>
 

<note>It is assumed that it is sufficient to represent odd functions and interval functions as Boolean expressions only, with no need to include them as logicals.</note>


 </outscope>

<!--
 <normrefs/>

   
 <normrefs>
   <normref.inc normref="ref13584-20.1998"/>
 </normrefs>

 <definition/>

 <abbreviations/>
-->

<schema name="expression_extensions_schema">
<!-- Note schema EXPRESS are in ..\resources\resource_name name_of_schema.xml -->
   <introduction>
<p>This clause defines the requirements for the <b>expression__extensions_schema</b>. This clause contains resource constructs that allows expression representations to be utilized in practical ways.</p>
   </introduction>
    <fund_cons>
<p>Expressions are used by mathematical languages to construct formal sentences conveying semantics. Such snetences can often be interpreted by computer programs to carry out operations or deduce conclusions. The schemas in ISO 13584-20 defined EXPRESS entity datatype representations of the EXPRESS language itself. That specification made possible the representation of EXPRESS data with dynamic behavior.</p>
<p>
There are, however, several practical application requirements that need to be suplemented. For example, there is a need for assigning a name lable to a variable or function, such that it becomes possible to construct an EXPRESS function and store all elements of the function definition in a database defined in an EXPRESS schema. Also, the entity definitions and instances defined by an EXPRESS schema need to be treated as expressions so that they can be used in other expressions to construct further meaning or operations involving the entities. This schema provides the extension so that these types of utilization becomes possible.</p>
<p></p>


<p>The following requirements are supported by this schema:</p>
<li>the identification of an expression by a label.</li>
<li>representing the definition of an EXPRESS entity type as an expression.</li>
<li>representing and referencing an instance of an EXPRESS entity type as a literal value.</li>
<li>the association of a variable with a defined function.</li>
<li>the association of an expression to an object of undetermined type.</li>
<li>the identification of a literal to its base expression type and the context of the value source.</li>
<li>the relationship between two expressions with an identified role.</li>

   </fund_cons>



<!-- EXPRESS-G -->
   <express-g>
     <imgfile file="expression_extensions_schemaexpg2.xml"/>
   </express-g>
</schema>
<schema name="logical_expressions_schema">
<!-- Note schema EXPRESS are in ..\resources\resource_name name_of_schema.xml -->
   <introduction>
This clause defines the requirements for the <b>logical_expressions_schema</b>. This schema allows expressions to be evaluated as true, false or unknown, as well as defining operator constructs based on the expression.

   </introduction>
   <fund_cons>
<p>The following requirements are supported by this schema:</p>
<li>an expression based on the logical datatype</li>
<li>a degenerated Boolean expression as a result of restritions placed on the logical expression</li>
<li>logical operations of various arity</li>
<li>specification of logical comparison operators</li>
<li>specification of user defined comparison operators that returns a logial value.</li>
<li>user defined logical comparisons expressed as a computer interpretable code and the identification of language type.</li>
   </fund_cons>

<!-- EXPRESS-G -->
   <express-g>
     <imgfile file="logical_expressions_schemaexpg2.xml"/>
     <imgfile file="logical_expressions_schemaexpg3.xml"/>
     <imgfile file="logical_expressions_schemaexpg4.xml"/>
   </express-g>
</schema>

 <shortnames>
<!-- expression_extensions -->
			<shortname name="ENTEXP " entity="entity_expression"/>
			<shortname name="ENTINS" entity="entity_instance"/>
			<shortname name="EXPASS" entity="expression_assignment"/>
			<shortname name="EXPRLT" entity="expression_relationship"/>
			<shortname name="LTRASS" entity="literal_assignment"/>
			<shortname name="NMDFNC" entity="named_function"/>
			<shortname name="NMDVRB" entity="named_variable"/>
			<shortname name="VRBASS" entity="variable_assignment"/>
			<shortname name="VRENTY " entity="variable_entity_type"/>
<!-- Logical_expression -->
			<shortname name="BNLGEX" entity="binary_logical_expression"/>
			<shortname name="DFBLLT" entity="default_boolean_literal"/>
			<shortname name="DFBLVR" entity="default_boolean_variable"/>
			<shortname name="INSEQL" entity="instance_equal"/>
			<shortname name="LGCAND" entity="logical_and"/>
			<shortname name="LGCCMP" entity="logical_comparison"/>
			<shortname name="LGCMEQ" entity="logical_comparison_equal"/>
			<shortname name="LGCEXP" entity="logical_expression"/>
			<shortname name="LGCGRT " entity="logical_greater"/>
			<shortname name="LGGREQ" entity="logical_greater_equal"/>
			<shortname name="LGCLSS" entity="logical_less"/>
			<shortname name="LGLSEQ" entity="logical_less_equal"/>
			<shortname name="LGCLK" entity="logical_like"/>
			<shortname name="LGCLTR" entity="logical_literal"/>
			<shortname name="LGCNT" entity="logical_not"/>
			<shortname name="LGNTEQ" entity="logical_not_equal"/>
			<shortname name="LGCOR" entity="logical_or"/>
			<shortname name="LGCVRB" entity="logical_variable"/>
			<shortname name="LGCXR " entity="logical_xor"/>
			<shortname name="MALE" entity="multiple_arity_logical_expression"/>
			<shortname name="SMLGEX" entity="simple_logical_expression"/>
			<shortname name="UNLGEX" entity="unary_logical_expression"/>
			<shortname name="UNLGEX" entity="unary_logical_expression"/>
			<shortname name="UDLC" entity="user_defined_logical_comparison"/>


 </shortnames>
 <tech_discussion/>

 <examples/>

 <add_scope/>

 <bibliography/>
</resource>

