<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: resource.xml,v 1.5 2012/10/11 14:43:34 lothartklein Exp $ -->
<!DOCTYPE resource SYSTEM "../../../dtd/res_doc/resource.dtd">
<!-- Generated by mkresource.js, Eurostep Limited, http://www.eurostep.com -->
 <!-- 
     To view the resource in IExplorer, open: sys/1_scope.xml
      -->
<resource
   name="product_structure_configuration"
   name.french="Configuration de structure de produits"
   part="44"
   version="3"
   sc4.working_group="12"
   wg.number="0000"
   wg.number.express="0000"
   checklist.internal_review=""
   checklist.project_leader=""
   checklist.convener=""
   status="IS"
   language="E"
   publication.year="2012"
   published="n"
   previous.revision.year="2000" 
   previous.revision.cancelled="NO" 
   rcs.date="$Date: 2012/10/11 14:43:34 $"
   rcs.revision="$Revision: 1.5 $">

 <keywords>
    resource
 </keywords>


<!-- the abstract for the resource. If not provided, the XSL will use the in scope -->
 <abstract>
    <p>xxxxx</p>
 </abstract>

 <!-- Reference to contacts detailed in stepmod/data/basic/contacts.xml -->
 <contacts>
   <projlead ref="simon.frechette"/>
   <editor ref="lothar.klein"/>
 </contacts>
 
 <!-- Change History -->
 <changes>
 	<change_edition version="2">
 		<schema.changes schema_name="product_structure_schema">
 			<description>
				<p>
					The definitions of the following EXPRESS data types have been modified:
				</p>
				<ul>
					<li>alternate_product_relationship;</li>
					<li>assembly_component_usage;</li>
					<li>assembly_component_usage_substitute;</li>
					<li>make_from_usage_option;</li>
					<li>make_from_usage_option_group;</li>
					<li>next_assembly_usage_occurrence;</li>
					<li>product_definition_usage;</li>
					<li>promissory_usage_occurrence;</li>
					<li>specified_higher_usage_occurrence.</li>
				</ul>
			</description>
 			<schema.additions>
				<modified.object type="ENTITY" name="assembly_component_usage_substitute_with_ranking"/>
				<modified.object type="ENTITY" name="product_definition_occurrence_relationship"/>
			</schema.additions>	
			
 			<schema.modifications>
 				<modified.object type="ENTITY" name="alternate_product_relationship"/>
 				<modified.object type="ENTITY" name="assembly_component_usage_substitute"/>
 				<modified.object type="ENTITY" name="make_from_usage_option"/>
 				<modified.object type="ENTITY" name="product_definition_usage"/>
 				<modified.object type="ENTITY" name="quantified_assembly_component_usage"/>
 				<modified.object type="ENTITY" name="specified_higher_usage_occurrence"/>
 			</schema.modifications>
 		</schema.changes>
 		
 		<schema.changes schema_name="product_concept_schema">
 			<description>
				<p>
					The definitions of the following EXPRESS data types have been modified:
				</p>
				<ul>
					<li>product_concept.</li>
				</ul>
			</description>
 			<schema.additions>
				<modified.object type="ENTITY" name="concept_feature_operator"/>
				<modified.object type="ENTITY" name="concept_feature_relationship"/>
				<modified.object type="ENTITY" name="concept_feature_relationship_with_condition"/>
				<modified.object type="ENTITY" name="conditional_concept_feature"/>
				<modified.object type="ENTITY" name="product_concept_feature"/>
				<modified.object type="ENTITY" name="product_concept_feature_association"/>
				<modified.object type="ENTITY" name="product_concept_relationship"/>
			</schema.additions>	
			
 			<schema.modifications>
 				<modified.object type="ENTITY" name="product_concept"/>
 			</schema.modifications>
 		</schema.changes>
 		
 		<schema.changes schema_name="configuration_management_schema">
 			<description>
				<p>
					The definitions of the following EXPRESS data types have been modified:
				</p>
				<ul>
					<li>configuration_design;</li>
					<li>configuration_effectivity;</li>
					<li>configuration_item.</li>
				</ul>
			</description>
 			<schema.additions>
				<modified.object type="ENTITY" name="configurable_item"/>
				<modified.object type="ENTITY" name="configuration_design_item"/>
				<modified.object type="ENTITY" name="configuration_item_relationship"/>
			</schema.additions>
			
 			<schema.modifications>
 				<modified.object type="ENTITY" name="configuration_design"/>
 				<modified.object type="ENTITY" name="configuration_effectivity"/>
 				<modified.object type="ENTITY" name="configuration_item"/>
 				
 			</schema.modifications>
 		</schema.changes>
 	</change_edition>

 	<change_edition version="3">
 		<schema.changes schema_name="product_structure_schema">
 			<schema.additions>
				<modified.object type="ENTITY" name="multi_level_reference_designator"/>
				<modified.object type="FUNCTION" name="unambiguously_specified_lower_usage_occurrence"/>
			</schema.additions>	
 		</schema.changes>
 	</change_edition>

 </changes>
 
 <!-- Introduction -->
 <!-- The introduction should start as shown: -->
 <purpose>
   <p>
     The <b>product_structure_schema</b>:
   </p>
   <ul>
   	<li>
   		defines a product in terms of its composition as a set of constituents or consumed products. 
   		These products are defined and related at a specific life cycle stage or discipline view. 
   		A product may be assembled from the constituents or produced by consuming other products, or both;
   	</li>
   	<li>
   		defines mechanisms for expressing the composition relationship.
   	</li>
   </ul>
   <p>
	The <b>product_concept_schema</b> identifies the product concept as a set of specifications for a product
	derived from analysis of customer needs for the product. 
	It represents the idea of a product based on customer needs and not as it might be designed or built.
   </p>
   <p>
   	The <b>configuration_management_schema</b> identifies those products participating in the configuration of
	another product that is under the direct control of an organization.
   </p>
   <p>
   	Industrial automation is concerned with the management of information including the following:
   </p>
   <ul>
   	<li>product structure;</li>
   	<li>product configuration;</li>
   	<li>product change.</li>
   </ul>
   <p>
   	Product structure is focused on the aspect of product design that defines a product in terms of a nested decomposition of its constituents. 
   	The product structure schema of this part of ISO 10303 and the product definition schema of ISO 10303-41 together define the representation 
   	of the information that manages the details of product structure. 
   	Examples of the use of the information represented are the generation of billof-material reports or the representation of variational bill-of-material 
   	structures with conditional part usages.
   </p>
   <p>
   	Product configuration is concerned with the description of the composition of specific products. 
   	The planning includes specification of the actual constituents of a product that are to be included in a planned or actual unit. 
   	The configuration management schema and the product structure schema represent the information that manages the configuration of a product. 
   	The concept of effectivity is used to manage the configuration of a product.
   </p>
   <p>
   	Change management is involved with the changes over time in a product as new versions of a product are developed. 
   	This part of ISO 10303 is concerned with changes that affect the organization of constituents into interrelated structures. 
   	The configuration management schema represents information on the structural form of the definition of a product as the product changes 
   	and is enhanced during the product life cycle.
	Representation of information on other aspects of change management is defined in the product definition schema and the action schema of ISO 10303-41.
   </p>
   <p>
   	In this International Standard the same English language words may be used to refer to an object in the real
	world or concept, and as the name of an EXPRESS data type that represents this object or concept. 
	The following typographical convention is used to distinguish between these. 
	If a word or phrase occurs in the same typeface as narrative text, the referent is the object or concept. 
	If the word or phrase occurs in a bold typeface, the referent is the EXPRESS data type.
   </p>
   <p>
   	The name of an EXPRESS data type may be used to refer to the data type itself, or to an instance of the data type. 
   	The distinction between these uses is normally clear from the context. If there is a likelihood of
	ambiguity, either the phrase "entity data type" or "instance(s) of" is included in the text.
   </p>
 </purpose>

 <!-- Schema Interface express-g diagrams  -->
 <!-- refer to p41ed2 as example  -->
 <schema_diag>
   <express-g>
     <imgfile file="schema_diagexpg1.xml" title="Relationship of schemas within the integrated resources"/>
   </express-g> 
 </schema_diag> 

 <!-- Items in scope -->
 <inscope>
   <li>the relationships among the components and assemblies of products;</li>
   <li>
   	the relationships among products and their components as made by modification of other products;
   	<example number="1">
   		The machining of a product from another product is an example of a modification.
   	</example>
   </li>
   <li>the description of a product as defined by customer needs;</li>
   <li>the dependencies among specifications of a product in order to represent possible product variations to present to a customer;</li>
   <li>the management of the structure for configuration of assemblies and components as planned for manufacture;</li>
   <li>
   	the decomposition of a product to support different product life cycle activities;
   	<example number="2">
   		An organization maintains one bill-of-material structure for a product that enumerates the quantity
		of each component used in each assembly, and a second bill-of-material that decomposes a product with multiple
		assemblies into the individual components. 
		See annex Examples for more examples of different product structure reports that are supported.
   	</example>
   </li>
   <li>multiple versions of a single product that are equivalent with respect to form, fit, and function.</li>
 </inscope>

 <!-- Items out of scope -->
 <outscope>
   <li>
   	the relationships among different product definitions for the same product;
   	<note number="1">
   		The relationships among different product definitions for the same product are supported by the <b>product_definition_schema</b> of ISO 10303-41.
   	</note>
   	<example number="3">
   		The relationship of a product definition for a component in a preliminary design to a corresponding
		product definition for the same component in a detailed design is an example of this type of relationship.
   	</example>
   </li>
   <li>administrative activities of the product life cycle including approvals, security classifications, contractual arrangements, and supplier organizations;</li>
   <li>the change process for a product, including the reason for change and what aspect of a product has changed;</li>
   <li>the decisions made, and their reasons, during the product life cycle;</li>
   <li>the physical connections among components of a product;</li>
   <li>
   	the properties that a product constituent may have;
   	<note number="2">
   		A mechanism is defined in the <b>product_property_definition_schema</b> in ISO 10303-41 to support the association of properties with components. 
   		The actual associations are included in various application protocols that are parts of this International Standard. 
   		For example, the details of what a material property is and how it is defined are out of scope, as well as the fact that a component has a material property.
   	</note>
   </li>
   <li>
   	multiple versions of a single product that are not form, fit, and function equivalent.
   	<note number="3">
   		The concept of versions of a product is defined in the <b>product_definition_schema</b> in ISO 10303-41.
   	</note>
   </li>
   
 </outscope>


 <normrefs>
 	<normref.inc normref="ref10303-1">
 		<term.ref linkend="term_assembly"/>
 		<term.ref linkend="term_component"/>
 		<term.ref linkend="term_product"/>
 	</normref.inc>
 	<normref.inc normref="ref10303-11.1994"/>
 	<normref.inc normref="ref10303-41">
 		<term.ref linkend="term39"/>
 		<term.ref linkend="term40"/>
 		<term.ref linkend="term_type_of_product"/>
 	</normref.inc>
 	<normref.inc normref="ref8824-1"/>
 </normrefs>

<!-- 3.2 Other terms and definitions -->
 <definition>
 	<term id="ancestor_node">ancestor node</term>
 	<def>
 		any node that can be reached from a given node, by successive traversals of links in the reverse direction.
 		<example>
			For a given node, its ancestor nodes include all parent nodes, all parent nodes of these parent nodes, etc.
		</example>
 	</def>
 </definition>
 <definition>
 	<term id="bill_of_material_data_structure">bill-of-material (BOM) data structure</term>
 	<def>
 		graph of data elements that depict a bill-of-material structure
		<note> See annex for examples of bill-of-material data structures.</note>
 	</def>
 </definition>
 <definition>
 	<term id="bil_of_material_structure">bill-of-material (BOM) structure</term>
 	<def>
 		description of the structure of a product in terms of its nested constituents
 		<note>
 			See annex for examples of bill-of-material structures.
 		</note>
 	</def>
 </definition>
 <definition>
 	<term id="child_node">child node</term>
 	<def>
 		node to which a link is pointing
 	</def>
 </definition>
 <definition>
 	<term id="configuration_item">configuration item</term>
 	<def>
 		subdivision of a product, either a component or an assembly
 	</def>
 </definition>
 <definition>
 	<term id="descendant_node">descendant node</term>
 	<def>
 		any node that can be reached from a given node, by successive traversals of links
 		<example>
 			For a given node, its descendant nodes include all children nodes, all children nodes of these children nodes, etc.
 		</example>
 	</def>
 </definition>
 <definition>
 	<term id="directed_acyclic_graph">directed acyclic graph (DAG)</term>
 	<def>
 		collection of nodes and links such that no node is an ancestor (or descendant) of itself
 	</def>
 </definition>
 <definition>
 	<term id="effectivity">effectivity</term>
 	<def>
 		characteristic that indicates whether a product is allowed, approved, or permitted to be used in another product
 	</def>
 </definition>
 <definition>
 	<term id="form_fit_function">form, fit, and function</term>
 	<def>
 		collection of characteristics that include the shape of a product, the way it interfaces with other products, and the purpose that the product serves
 	</def>
 </definition>
 <definition>
 	<term id="leaf_node">leaf node</term>
 	<def>
 		node that has no children
 	</def>
 </definition>
 <definition>
 	<term id="link">link</term>
 	<def>
 		uni-directional relationship from one node to another node within a directed acyclic graph
 	</def>
 </definition>
 <definition>
 	<term id="lot">lot</term>
 	<def>
 		<p>batch</p>
		collection of distinct products that are treated as a single unit
		<example>
			Three thousand bundles of yarn are divided into different groups. 
			Each group is submerged in a separate barrel of red dye. 
			The group is treated as a lot and assigned a lot number. 
			The lot number is identified so that conditions causing slight changes in the colour are differentiable among bundles belonging to different lots.
			A customer may wish to purchase bundles of the same lot to ensure consistency of the colour.
		</example>
 	</def>
 </definition>
 <definition>
 	<term id="node">node</term>
 	<def>
 		element of a directed acyclic graph, connected to other such elements by links
 	</def>
 </definition>
 <definition>
 	<term id="parent_node">parent node</term>
 	<def>
 		node from which a link is initiated
 	</def>
 </definition>
 <definition>
 	<term id="parts_list_data_structure">parts list data structure</term>
 	<def>
 		graph of instances that depicts a parts list structure
 		<note>
 			See annex for examples of parts list data structures.
 		</note>
 	</def>
 </definition>
 <definition>
 	<term id="parts_list_structure">parts list structure</term>
 	<def>
 		description of the structure of a product in terms of a hierarchy of all distinct usages of its constituents
 		<note>
 			See annex of examples for cases of parts list structures.
 		</note>
 	</def>
 </definition>
 <definition>
 	<term id="promissory_use">promissory use</term>
 	<def>
 		intention to use a constituent in an assembly
 	</def>
 </definition>
 <definition>
 	<term id="root_node">root node</term>
 	<def>
 		node that has no parents
 	</def>
 </definition>
 <definition>
 	<term id="tree">tree</term>
 	<def>
 		restricted type of directed acyclic graph in which there is only one root node, and in which each node has at most one parent
 	</def>
 </definition>

 <abbreviations>
 	<abbreviation id="BOM">
 		<acronym>BOM</acronym>
 		<term>bill-of-material</term>
 	</abbreviation>
 	<abbreviation id="CM">
 		<acronym>CM</acronym>
 		<term>configuration management</term>
 	</abbreviation>
 	<abbreviation id="DAG">
 		<acronym>DAG</acronym>
 		<term>directed acyclic graph</term>
 	</abbreviation>
 </abbreviations>

<schema name="product_structure_schema">
<!-- Note schema EXPRESS are in ..\resources\resource_name name_of_schema.xml -->
   <introduction>
   	<p>
   		The subject of the <b>product_structure_schema</b> is the relationship between the definitions of:
   	</p>
   	<ul>
   		<li>products that are assembled to make other products;</li>
   		<li>products that are changed to make other products.</li>
   	</ul>
   	<p>
   		These relationships are defined as specializations of a general relationship among <b>product_definition</b>s as
		specified in the <b>product_definition_schema</b> in ISO 10303-41. 
		In addition, any product that is used in a product structure may have alternative products specified for that use. 
		Collectively these relationships are referred to as a product structure.
   	</p>
   	<p>
   		The product structure defines the different methods by which a product can be represented as being made up of constituents. 
   		Product structure relationships are established among the constituents that make up a product. 
   		Product structure is an aspect of product definition.
   	</p>
   </introduction>
   <fund_cons>
   	<p>
   		The relationships between product definitions are represented in this part of ISO 10303 using a subtype of the <b>product_definition_relationship</b> 
   		entity as defined in the product_definition_schema in ISO 10303-41. 
   		The subtypes of <b>product_definition_relationship</b> defined in this schema establish additional constraints and meanings to the supertype in ISO 10303-41.
   	</p>
   	<figure number="2">
		 <title>Relationship of product structure entities to ISO 10303-41</title>
		 <img src="relationship_of_product_structure_entities.gif"/>
	 </figure>
	 <note>
	 	Figure 2 shows a partial view of the product_definition_schema in ISO 10303-41 and depicts the subtype structure of entities defined in this schema. 
	 	Attributes of the entities defined in this schema and of the <b>product_definition</b> entity are not shown. 
	 	See Figure D.1 for a complete diagram showing all attributes and entities of this schema.
	 </note>
	 <p>
	 	The product structure concept applies to multiple definitions of the structure of a single product version.
		The different definitions correspond to requirements of different organizations for defining the structure of a product during the 
		life cycle of the product's development.
	 </p>
	 <example>
	 	An organization may define a bill-of-material structure for both a design engineering release life cycle activity, 
	 	as well as for a manufacturing engineering activity.
	 </example>
	 <p>
		 This schema supports the concept of making a product from another product. 
		 This concept deals with the relationship between a product and the results of a process applied to that product which produces a new product.
	 </p>
     <p>
     	The following concepts and assumptions apply.
     </p>
     <ul>
     	<li>
     		Product structures are modelled by directed acyclic graphs (DAG). 
     		In these models, nodes represent product definitions, and the links represent composed-of relationships. 
     		In this schema, nodes correspond to product_definition entities and the links correspond to assembly_component_usage entities.
     		<note number="1">
     			For a detailed discussion of graph theory, see citation [3] in the bibliography.
     		</note>
     	</li>
     	<li>
     		Many forms of product structure can be represented using this schema. 
     		Two product structures of special utility are bill-of-material and parts list structures.
     		<note number="2">
     			Examples and diagrams of the manner in which the entities of this part of ISO 10303 may be used to represent product structures 
     			are included in annex.
     		</note>
     	</li>
     	<li>
     		A parts list structure is a specific form of a bill-of-material that can be represented by a tree. 
     		Other bill-of-material structures may require a more general DAG.
     	</li>
     	<li>
     		For a general product structure, in order to identify the usage of any constituent within an assembled product, 
     		it is necessary to identify the path between the assembled product and the constituent. 
     		The <b>specified_higher_usage_occurrence</b> and <b>multi_level_reference_designator</b> entities provides this capability.
     		<note number ="3">
     		The <b>specified_higher_usage_occurrence</b> is directed from component to the assembly and works recursively.
     		The <b>multi_level_reference_designator</b> is directed from the assembly to the component and defines a list of intermediate assembly notes.
     		</note>
     	</li>
     </ul>
   </fund_cons>

<!-- EXPRESS-G -->
   <express-g>
     <imgfile file="product_structure_schemaexpg1.xml"/>
     <imgfile file="product_structure_schemaexpg2.xml"/>
   </express-g>
</schema>

<schema name="product_concept_schema">
<!-- Note schema EXPRESS are in ..\resources\resource_name name_of_schema.xml -->
   <introduction>
    <p>
    	The subject of the product_concept_schema is the idea of a product as defined by customer needs, i.e., a product concept. 
    	A product concept may exist before a product has been defined. 
    	A product concept identifies a collection of independent product features or capabilities. 
    	A product concept may also have product features identified specifically for it. 
    	Conditions among those features for a particular product may be specified to manage dependencies and define the valid product variations 
    	for a particular product concept.
    </p>
    <example>
    	An automobile may have two types of engines identified as product features. 
    	One is a low power engine; the other is a high power engine. 
    	Air conditioning may also be identified as a product feature for the same automobile. 
    	A condition could be specified that if the air conditioning is present, the high power engine is necessary.
    </example>
   </introduction>
   <fund_cons>
   	<p>
   		The following concepts and assumptions apply.
   	</p>
   	<ul>
   		<li>
   			A product concept identifies a deliverable product defined by a producer to satisfy a customer. 
   			A product concept is often used to identify a selection of product features or capabilities.
   		</li>
   		<li>A product concept may have several configuration items identified for it.</li>
   		<li>A product concept may exist without a product or product version.</li>
   		<li>A product concept may have product features identified for it defined by a producer to satisfy a customer viewpoint.</li>
   		<li>
   			A set of rules for required interdependent combinations of a product feature may be specified.
   			<note>
   				Examples and diagrams of the manner in which the entities of this part of ISO 10303 may be used to represent the combinations of product 
   				features are included in annex E!!!.
   			</note>
   		</li>
   	</ul>
   </fund_cons>

<!-- EXPRESS-G -->
   <express-g>
     <imgfile file="product_concept_schemaexpg1.xml"/>
     <imgfile file="product_concept_schemaexpg2.xml"/>
   </express-g>
</schema>

<schema name="configuration_management_schema">
<!-- Note schema EXPRESS are in ..\resources\resource_name name_of_schema.xml -->
   <introduction>
   	<p>
   		The subject of the <b>configuration_management_schema</b> is the identification of items, the composition of which is to be managed. 
   		The item to be managed is specified as a <b>configuration_item</b>. 
   		It is usually visible to customers of the organization that does the configuration management. 
   		If the item being managed is a product, the schema facilitates the establishment of the association of appropriate versions of the product
		to the <b>configuration_item</b>.
   	</p>
   	<p>
   		This schema also provides the capability to record the associations established to enable the tracking of the associations.
   	</p>
   	<p>
   		The functionality of configuration management is achieved using the entities <b>configuration_item</b>, <b>configuration_design</b>, 
   		and <b>configuration_effectivity</b>.
   	</p>
   	<p>
   		The configuration management schema of this part of ISO 10303 covers the following capabilities:
   	</p>
   	<ul>
   		<li>the identification of the configuration_items and the respective <b>product_concept</b>s of which they form constituent.</li>
   		<li>the identification of a <b>product_definition</b> or <b>product_definition_formation</b> that realizes the <b>configuration_item</b>.</li>
   		<li>
   			the association of the appropriate versions of a product to build a <b>configuration_item</b>. 
   			This association is referred to as <b>configuration_effectivity</b>.
   		</li>
   	</ul>
   	<p>Three of the ways to apply configuration_effectivity are:</p>
   	<ul>
   		<li><b>serial_numbered_effectivity</b>, where the <b>configuration_effectivity</b> is based on serial numbered instances of manufactured products;</li>
   		<li><b>dated_effectivity</b>, where the <b>configuration_effectivity</b> is based on dates when instances of the product are manufactured;</li>
   		<li><b>lot_effectivity</b>, where the <b>configuration_effectivity</b> is based on instances of lots of products manufactured.</li>
   	</ul>	
   	<note>
   		The definitions of <b>serial_numbered_effectivity</b>, <b>dated_effectivity</b>, and <b>lot_effectivity</b> are given 
   		in the <b>effectivity_schema</b> in ISO 10303-41.
   	</note>
   </introduction>
   <fund_cons>
   	<p>The following concepts and assumptions apply.</p>
   	<ul>
   		<li>Configuration management may be applied to products and parts of products to be designed or manufactured;</li>
   		<li>
   			An organization determines which products are to be under its configuration management control.
			These products become the configuration items of the organization. 
			These are usually higher-level functional elements that act as the focal points for managing the effectivity of lower-level constituents;
   		</li>
   		<li>
   			A product concept may identify a customer view of a product based on a static set of configuration
			items or may be configurable based on customer selected options that are defined for it.
   		</li>
   	</ul>
   </fund_cons>

<!-- EXPRESS-G -->
   <express-g>
     <imgfile file="configuration_management_schemaexpg1.xml"/>
     <imgfile file="configuration_management_schemaexpg2.xml"/>
   </express-g>
</schema>

 <!-- shortnames  -->
 <shortnames>
 	<shortname name="ALPRRL" entity="alternate_product_relationship"/>
 	<shortname name="ASCMUS" entity="assembly_component_usage"/>
 	<shortname name="ACUS" entity="assembly_component_usage_substitute"/>
 	<shortname name="ACUSWR" entity="assembly_component_usage_substitute_with_ranking"/>
 	<shortname name="MFUO" entity="make_from_usage_option"/>
 	<shortname name="MFUOG" entity="make_from_usage_option_group"/>
 	<shortname name="MLRD" entity="multi_level_reference_designator"/>
 	<shortname name="NAUO" entity="next_assembly_usage_occurrence"/>
 	<shortname name="PDOR" entity="product_definition_occurrence_relationship"/>
 	<shortname name="PRDFUS" entity="product_definition_usage"/>
 	<shortname name="PRUSOC" entity="promissory_usage_occurrence"/>
 	<shortname name="QACU" entity="quantified_assembly_component_usage"/>
 	<shortname name="SHUO" entity="specified_higher_usage_occurrence"/>
 	
 	<shortname name="CNFTOP" entity="concept_feature_operator"/>
 	<shortname name="CNFTRL" entity="concept_feature_relationship"/>
 	<shortname name="CFRWC" entity="concept_feature_relationship_with_condition"/>
 	<shortname name="CNCNFT" entity="conditional_concept_feature"/>
 	<shortname name="PRDCNC" entity="product_concept"/>
 	<shortname name="PRCNFT" entity="product_concept_feature"/>
 	<shortname name="PCFA" entity="product_concept_feature_association"/>
 	<shortname name="PRCNRL" entity="product_concept_relationship"/>
 	<shortname name="CNF0" entity="configurable_item"/>
 	<shortname name="CNFDSG" entity="configuration_design"/>
 	<shortname name="CNFEFF" entity="configuration_effectivity"/>
 	<shortname name="CNFITM" entity="configuration_item"/>
 	<shortname name="CNITRL" entity="configuration_item_relationship"/>
 </shortnames>

 <!-- optional annexes 
 <tech_discussion/>

 

 <add_scope/>
 
-->
<examples>
	<p><b>E.1 Product structure</b></p>
	<p>
		Product structure reports are used by industry to describe the composition and structure of a product. 
		Most products are assembled from other assemblies and components. 
		A product structure report provides details about what subassemblies and components are used.
	</p>
	<note>
		See definitions in clause 3.
	</note>
	<p>
		In this annex, examples of three different types of product structure reports are provided. 
		In addition, the use of this part of ISO 10303 to generate these reports is outlined. 
		The focus of the examples is on the <b>product_structure_schema</b>.
	</p>
	
	<p><b>E.1.1 Example of a mechanical assembly product</b></p>
	
	<p>
		In this section, a hypothetical mechanical assembly product called the "part 44 example product" is described, both in diagrams and in words. 
		This assembly forms the basis for explaining different types of product structure reports, e.g., BOM and parts list, in the next section. 
		This product is modelled using the various entities defined earlier in this part of ISO 10303. 
		See Figure E.2 for the 3D drawing of the "part 44 example product", and Figure E.2 for a diagrammatic representation of the product structure.
	</p>
	<p>
		The "part 44 example product" represents a simple mechanical assembly consisting of three major constituents: 
		a large metal plate forming the base for attaching two identical L-bracket assemblies. 
		Each of the two L-bracket assemblies is bolted to the base using three nuts and bolts and using three holes drilled into the plate. 
		The L-brackets themselves have a hole drilled in them to support a rod assembly that consists of a threaded rod and nuts attached at each end of the rod. 
		The nuts used on the threaded rod and in the Lbracket assembly are of the same size. 
		This product design has a structure consisting of a number of assemblies, some of which also contain assemblies, i.e., sub-assemblies, 
		as well as a number of individual components.
	</p>
	
	<p><b>E.1.2 Examples of product structure reports</b></p>
	
	<p>
		Product structure reports can decompose an assembly to many levels of details. 
		The levels of detail can cover the degree of decomposition, the quantities of subassemblies and components used, the position and
		orientation of the subassemblies and components, and the products used to make other products. 
		The levels of detail include:
	</p>
	<ul>
		<li>
			degree of decomposition;
			<ol>
				<li>single-level: a single assembly and its immediate constituent sub-assemblies or components;</li>
				<li>multi-level: one or more assemblies in which at least one subassembly is further decomposed;</li>
			</ol>
		
		</li>
		
	</ul>
	<figure number="E.1">
		  <title>Part 44 example product</title>
		  <img src="part_44_example_product.gif"/>
	 </figure>
	 <ul>
	 	<li>
	 		type of decomposition;
	 		<ol>
	 			<li>extended definition: the products used to make one or more components are identified;</li>
	 			<li>exploded definition: for a given level of decomposition, each kind of subassembly and component
				is described; multiple uses of the same kind of subassembly or component are not described;</li>
	 			<li>flattened: one assembly described in terms of its components; no subassemblies are described;</li>
	 			<li>numeric: for a given level of decomposition, each subassembly and component is described only once with its quantity or amount;</li>
	 			<li>exploded occurrence: for a given level of decomposition, every subassembly and component is described, 
	 			even if it is identical with another subassembly or component;</li>
	 			<li>labelled occurrence: an exploded occurrence decomposition in which each subassembly and component is labelled;</li>
	 			<li>positioned: each constituent is associated with its position and orientation relative to the coordinate system of its immediate assembly;</li>
	 			<li>exploded hybrid: for a given level of decomposition, each subassembly and component is described;
				subassemblies or components may be described by an exploded definition or an exploded occurrence.</li>
	 		</ol>
	 	</li>
	 	<li>style of decomposition: each level of decomposition may be indented with respect to the previous level.</li>
	 </ul>
	<p>
		Examples of typical reports having a mixture of the characteristics enumerated above are now presented using the "part 44 example product".
	</p>
	
	<p><b>E.1.2.1 Example: A numeric, multi-level, indented product structure report</b></p>
	
	<p>
		Each assembly, subassembly, and component is placed on a new line. 
		A numeric value, indicating the count or amount of the constituent, may be present. 
		The nesting of the levels is indicated by indentation.
		Constituents at the same level have the same indentation. 
		This report shows that the "part 44 example product" has two L-bracket assembly units and that each unit contains three nut-bolt assemblies. 
		The rod assembly contains two nuts and a rod.
	</p>
	<figure number="E.2">
		  <title>Part 44 example product: graphical product structure</title>
		  <img src="part_44_example_produc_graphical_product_structure.gif"/>
	 </figure>
	<screen>
	Part 44 Example Product
		Plate
		L-bracket assembly (2)
			L-bracket
			Nut-bolt assembly (3)
				Nut
				Bolt
		Rod assembly
			Rod
			Nut (2)
	</screen>
	
	<p><b>E.1.2.2 Example: A labelled occurrence, multi-level, indented product structure report</b></p>
	
	<p>
		In this report, the structure is decomposed to the lowest level of the product structure. 
		A label is assigned to each subassembly and component, down to the lowest level, e.g., Nut-1-1. With this form, all
		subassemblies and components can be referenced uniquely within the complete product structure and can be distinguished from one another. 
		One can retrieve Nut-2-1 (the first nut on the second L-bracket assembly) and differentiate it from Nut-rod-2 (the second nut on the rod assembly).
	</p>
	<screen>
	Part 44 Example Product
		Plate-1: Plate
		L-bracket-assembly-1: L-bracket assembly
			L-bracket-1-1: L-bracket
			Nut-bolt-assembly-1-1: Nut-bolt assembly
				Nut-1-1: Nut
				Bolt-1-1: Bolt
			Nut-bolt-assembly-1-2: Nut-bolt assembly
				Nut-1-2: Nut
				Bolt-1-2: Bolt
			Nut-bolt-assembly-1-3: Nut-bolt assembly
				Nut-1-3: Nut
				Bolt-1-3: Bolt
		L-bracket-assembly-2: L-bracket assembly
			L-bracket-2-1: L-bracket
			Nut-bolt-assembly-2-1: Nut-bolt assembly
				Nut-2-1: Nut
				Bolt-2-1: Bolt
			Nut-bolt-assembly-2-2: Nut-bolt assembly
				Nut-2-2: Nut
				Bolt-2-2: Bolt
			Nut-bolt-assembly-2-3: Nut-bolt assembly
				Nut-2-3: Nut
				Bolt-2-3: Bolt
		Rod-assembly-1: Rod assembly
			Rod-1: Rod
			Nut-Rod-1: Nut
			Nut-Rod-2: Nut
	</screen>
	
	<p><b>E.1.2.3 Example: A numeric, multi-level, extended definition, indented product structure report</b></p>
	
	<p>
		This report includes the number of each constituent. 
		This report is an extended definition because it references the product from which some of the components are made; 
		e.g., the sheet metal used to make the plate.
	</p>
	<screen>
		Part 44 Example Product
			Plate
				Sheet metal
			L-bracket assembly (2)
				L-bracket
					Sheet metal
				Nut-bolt assembly (3)
					Nut
					Bolt
			Rod assembly
				Rod
					Bar stock
				Nut (2)
	</screen>
	
	<p><b>E.1.3 BOM, parts list, and hybrid data structures</b></p>
	
	<p>
		In order for a compliant application to generate the information normally expected in the various product
		structure reports in the last section, it will need the information to be represented in data structures for physical storage. 
		This example introduces three data structures that may be used to represent this information. 
		They are the BOM data structure, the parts list data structure, and the hybrid data structure that are defined in E.1.3.1, E.1.3.2, and E.1.3.3.
	</p>
	
	<p><b>E.1.3.1 BOM data structures</b></p>
	
	<p>
		The BOM data structure is used to represent the assembly aspects of product structure. 
		The BOM structure specifies only the different products used in an assembly, and thus provides a list of products necessary to create the assembly. 
		Each of these products, as identified in the structure, is a typical product and is called a definition. 
		Only one definition is included for each kind of product that participates in the structure. 
		Although there are eight nuts specified in the "part 44 example product" above, the BOM data structure representing this structure would have 
		only one nut to represent that kind of product in the "part 44 example product". 
		(See Figure E.3)
	</p>
	<p>
		The BOM data structure does support the representation of multiple relationships between two specific definitions. 
		To indicate that there are three nut-bolt assemblies in the "part 44 example product", 
		the data structure holds only one instance of the nut-bolt assembly, but three associations connecting it to the parent assembly.
	</p>
	<p>
		A ramification of this BOM data structure is that the components of each assembly are indistinguishable within any assembly that includes it. 
		Thus, although the L-bracket assembly contains three nut-bolt assemblies, each in turn containing a nut and a bolt, 
		there is no way to distinguish any of the individual bolts or nuts within the L-bracket assembly except through their usage in the assembly.
	</p>
	<figure number="E.3">
		  <title>BOM data structure for part 44 example product</title>
		  <img src="bom_data_structure_for_part_44_example_product.gif"/>
	 </figure>
	
	<p><b>E.1.3.2 Parts list data structures</b></p>
	
	<p>
		The parts list data structure individualizes the relationship between lower-level parts of the product structure and 
		higher-level assemblies in which they are contained.
	</p>
	
	<p>
		This data structure uses multiple occurrences of the same definition, or typical product, within the data structure at a single time. 
		The representation of the usage of a particular definition is called an occurrence.
		An occurrence need not specify its definition counterpart. 
		If there are two L-bracket assemblies within the "part 44 example product", the parts list data structure would include two different L-bracket occurrences
		which then permits the unique identification of the respective components of the L-bracket assemblies
		within the context of the overall "part 44 example product". 
		Each L-bracket assembly occurrence is based on a typical L-bracket assembly definition that would contain all of the information that characterizes it.
		This parts list data structure can be seen in Figure E.4, where the L-bracket assemblies and the nut-bolt assemblies are individually represented. 
		Each of these individually represented parts and assemblies are occurrences of a definition of those parts or assemblies. 
		An explicit relationship to the definition could be specified.
	</p>
	<figure number="E.4">
		  <title>Parts list data structure for part 44 example product</title>
		  <img src="parts_list_data_structure_for_part_44_example_product.gif"/>
	</figure>
	
	<p><b>E.1.3.3 Hybrid data structures</b></p>
	
	<p>
		A hybrid data structure is a mixture of the BOM and parts list data structures. 
		The mixture may have a definition in which the assembly structure lists all the occurrences that comprise its constituents.
		Conversely, an occurrence may have its constituents described as a single definition with multiple
		associations to describe each particular usage of the component definition within the assembly.
		Additionally, each occurrence that comprises an assembly may be decomposed implicitly by the decomposition of its associated definition.
	</p>
	
	<p><b>E.1.4 Representation of product structure data structures using ISO 10303-44 entities</b></p>
	
	<p>
		The BOM, parts list, and hybrid data structures are mapped into a combination of <b>product_definition</b> and <b>product_definition_relationship</b> (or subtypes) entities. 
		For pure BOM structures, only the <b>quantified_assembly_component_usage</b>, <b>next_assembly_usage_occurrence</b>, or <b>make_from_usage_option</b> subtypes
		of <b>product_definition_usage</b> need to be used, since the lower-level components are used only as "black boxes" to the parent assembly component. 
		The "part 44 example product" does have two L-bracket assemblies, but from a BOM data structure point of view, these L-bracket assemblies are the same and
		it is not possible to distinguish their assembly composition. 
		For parts list structures, only the <b>specified_higher_usage_occurrence</b> and <b>next_assembly_usage_occurrence</b> subtypes of <b>product_definition_usage</b> need to be used. 
		In this case each of the L-bracket assemblies will be represented by unique instances of <b>product_definition</b>. 
		For hybrid structures, all of the entities specified for BOM and parts list data structures may be used.
	</p>
	<p>
		Figures E.5, E.7, and E.11 contain the symbology for the entities in this part of ISO 10303 that is used in figure E.5 the following figures. 
		Rectangles represent instances of the <b>product_definition</b>, and circles represent instances of 
		<b>product_definition_relationship</b> entity or instances of one of its subtypes. 
		The circles are labelled either with the first letter of the specific subtype or with "D-O" for a <b>product_definition_relationship</b> that specifies 
		the relationship between an occurrence and its definition counterpart.
		In Figure E.5, there are instances of the <b>next_assembly_usage_occurrence</b> (label is "N"), the <b>quantified_assembly_component_usage</b> (label is "Q"), 
		and <b>make_from_usage_option</b> (label is "M") subtypes of <b>product_definition_usage</b>.
	</p>
	
	<p><b>E.1.4.1 Representation with definitional BOM structures</b></p>
	
	<p>
		For specifying a BOM, two methods can be used to show the quantity of a constituent within an assembly.
		The <b>quantified_assembly_component_usage</b> subtype of <b>product_definition_usage</b> can be used to specify
		the count of a component used in the assembly. 
		Figure E.5 contains a subset of the BOM data structure.
		In the figure, there is a single relationship between the "part 44 example product" and the L-bracket assembly. 
		This relationship is represented using a <b>quantified_assembly_component_usage</b> that specifies a count of two for the L-bracket assembly. 
		Similarly, there is a single relationship between the L-bracket assembly and the nut-bolt assembly. 
		The <b>quantified_assembly_component_usage</b> specifies a count of three for the nut-bolt assembly.
	</p>
	<figure number="E.5">
		  <title>BOM data structure examples using ISO 10303-44 entities</title>
		  <img src="bom_data_structure_examples_using_iso_10303-44_entities.gif"/>
	</figure>
	<p>
		The second method for specifying a BOM involves the identification of each relationship between the component and assembly. 
		Figure E.6 presents the complete model for the "part 44 example product" in a BOM data structure using this part of ISO 10303. 
		Note that individual instances of the <b>next_assembly_usage_occurrence</b> entity represent each use of a component within a higher assembly. 
		The quantity of components in each assembly can be calculated by counting the number of instances of <b>next_assembly_usage_occurrence</b>, 
		rather than using a single instance of <b>quantified_assembly_component_usage</b> that specifies the quantity.
	</p>
	<figure number="E.6">
		  <title>BOM data structure of part 44 example product</title>
		  <img src="bom_data_structure_of_part_44_example_product.gif"/>
	</figure>
	
	<p><b>E.1.4.2 Representation with definitional parts list structures</b></p>
	
	<p>
		For specifying a parts list with definitional product_definition instances only, the <b>specified_higher_usage_occurrence</b> subtype 
		of <b>product_definition_usage</b> is used in order to make explicit the specific usage of a particular lower-level component within the overall context 
		of a higher assembly. 
		A parts list can specifically identify a sub-component of a lower assembly as distinguished from a similar sub-component of another lower assembly. 
		This is possible because of the additional context information that is provided by the <b>specified_higher_usage_occurrence</b> subtype of <b>product_definition_usage</b>. 
		The additional context information is provided by specifying the specific immediate parent assembly and the specific top-level assembly. 
		For instance, it is possible to identify the bolt on the third nut-bolt assembly of the second L-bracket assembly.
	</p>
	<p>
		In Figure E.7, the additional information needed to define a parts list is represented by the additional
		subtype of <b>product_definition_usage</b>, namely the <b>specified_higher_usage_occurrence</b> entity, represented symbolically by the circle with label "S". 
		Here, the <b>specified_higher_usage_occurrence</b> entity allows a reference to one specific nut-bolt assembly on only one of the two L-bracket assemblies. 
		This is accomplished by having the <b>specified_higher_usage_occurrence</b> entity relate to only one of the two
		usages of the L-bracket assembly as represented by the <b>next_assembly_usage_occurrence</b> entity.
	</p>
	<figure number="E.7">
		  <title>Parts list structure examples using ISO 10303-44 entities</title>
		  <img src="parts_list_structure_examples_using_iso_10303-44_entities.gif"/>
	</figure>
	<p>
		Note that in this example, even though the parts list is implemented using the entities of this part of ISO 10303, 
		it is done without having to create individual instances of the lower-level components. 
		Rather, the additional identifying information is supplied through the existence of the intermediate <b>specified_higher_usage_occurrence</b> 
		and <b>next_assembly_usage_occurrence</b> entities.
	</p>
	<p>
		In Figures E.8, E.9, and E.10, the representation of a number of lower-level components (rods, nuts, and assemblies) is presented 
		within the context of higher-level assemblies as they would be represented using the entities of this part of ISO 10303. 
		In each of these figures, the original BOM data structure is included within the large box; the additional entities needed to support 
		the parts list aspects of the examples are placed outside the box, with their attributes referencing the original BOM.
	</p>
	<p>
		In particular, Figure E.8 highlights the use of a <b>specified_higher_usage_occurrence</b> entity that represents
		how the Rod is used within the "part 44 example product" as specifically included in a Rod assembly entity.
		This is an example of a two-level component inclusion and as such, both the upper and next attributes of
		the <b>specified_higher_usage_occurrence</b> entity refer to <b>next_assembly_usage_occurrence</b> components in the BOM structure.
	</p>
	<figure number="E.8">
		  <title>Simple specified higher usage occurrence</title>
		  <img src="simple_specified_higher_usage_occurrence.gif"/>
	</figure>
	<p>
		In Figure E.9, two different cases are represented. 
		In one case, two <b>specified_higher_usage_occurrence</b> entities, located towards the top of the diagram, are included to represent the two nuts that are specifically
		used within the Rod assembly part of the "part 44 example product". 
		Note that the extra relationship lines to the top-level "part 44 example product" definition and the low-level nut definition have not been included
		so as not to clutter up the diagram. 
		In the other case, a <b>specified_higher_usage_occurrence</b> entity is used to represent one specific nut within an L-bracket assembly. 
		Again, in both of these cases, only a two-level relationship between component and assembly is being represented and therefore the intermediate
		<b>product_definition_usage</b> entities are both <b>next_assembly_usage_occurrence</b>s.
	</p>
	<figure number="E.9">
		  <title>Specific usages with specified higher usage occurrence</title>
		  <img src="specific_usages_with_specified_higher_usage_occurrence.gif"/>
	</figure>
	<p>
		Figure E.10 demonstrates two additional cases of parts list representation using a BOM data structure.
		First, three <b>specified_higher_usage_occurrence</b> entities are shown to relate the three different nut-bolt
		assemblies within the overall "part 44 example product". 
		The second case shows a <b>specified_higher_usage_occurrence</b> entity being used to represent one specific nut within a specific nut-bolt assembly within
		a specific L-bracket assembly of the overall "part 44 example product". 
		This latter use of <b>specified_higher_usage_occurrence</b> entity models a three-level structural relationship between one specific nut and the overall product. 
		As such the associated <b>specified_higher_usage_occurrence</b> entity has its upper attribute referring to another <b>specified_higher_usage_occurrence</b> entity, 
		namely, the entity that identifies the particular usage of the nut-bolt assembly within a particular L-bracket assembly. 
		It is this level of support that allows the BOM model structure to support the parts list characteristic of individual occurrence labelling.
	</p>
	<figure number="E.10">
		  <title>Complex specified higher usage occurrence</title>
		  <img src="complex_specified_higher_usage_occurrence.gif"/>
	</figure>
	<p>
		The increasing complexity of the parts list representation is a reflection of the complexity of the information
		within the data structure being managed. 
		In fact, the increasing number of <b>specified_higher_usage_occurrence</b> entities that would be included in a more complete model representation 
		is directly proportional to the number of possible paths that could be navigated through the parts list data structure model as seen in Figure E.7. 
		What has been eliminated through the specification of a BOM data structure are the
		individual instances of each component, being replaced by individual <b>specified_higher_usage_occurrence</b>
		entities as required for a particular communication that provide multiple interconnections between a
		component and a higher-level assembly in which it is located.
	</p>
	
	<p><b>E.1.4.3 Representation with occurrence parts list structures</b></p>
	
	<p>
		A complete parts list representation of product structure may be specified using the entities in this part of ISO 10303. 
		Figure E.4 depicts a representation of a data structure that captures each occurrence of a particular definition in the product structure. 
		Each circle represents an occurrence of a typical part. 
		Each occurrence is represented by an instance of a product_definition entity. 
		Each <b>product_definition</b> representing an occurrence would, in turn, have a relationship to the definitional <b>product_definition</b> that
		represents the typical part of which it is an occurrence. 
		Each line represents an instance of <b>next_assembly_usage_occurrence</b>.
	</p>
	<p>
		When the product structure is completely represented in this fashion, it may be traversed to reach any particular occurrence of a product in the structure. 
		No <b>specified_higher_usage_occurrence</b> instances are required because at any level, data may be associated directly with the individual instance of 
		<b>product_definition</b> that represents the particular occurrence of that product within the product structure.
	</p>
	
	<p><b>E.1.4.4 Representation with hybrid structures</b></p>
	
	<p>
		A hybrid structure may be created in which BOM and parts list representations are mixed to provide the
		capability to specify definitions and occurrences as required. 
		Figure E.11 depicts a hybrid structure using a portion of the product structure of the "part 44 example product". 
		Each definition and occurrence is specified by an instance of <b>product_definition</b>. 
		In the figure, the definition of the "part 44 example product" consists of the definition of the plate and two occurrences of the L-bracket assembly. 
		Each occurrence of the L-bracket assembly is related to the single BOM definition of the L-bracket assembly
		by an instance of <b>product_definition_relationship</b>, represented symbolically by the circle with label "DO" that specifies it as a definitional occurrence. 
		The definition of the L-bracket assembly is then specified using a parts list structure for the nut-bolt assembly in which three occurrences 
		of that assembly are specified, and related to the L-bracket assembly using instances of <b>next_assembly_usage_occurrence</b>.
	</p>
	<p>
		Each occurrence of the nut-bolt assembly is then, in turn, related to the definition for that assembly of
		which they are each an occurrence, again with <b>instances of product_definition_relationship</b> that specifies it as a definitional occurrence. 
		Each assembly could be defined, if required, with a pure BOM representation using multiple instances of <b>next_assembly_usage_occurrence</b>.
	</p>
	<p>
		A particular usage of the nut-bolt assembly within the context of the "part 44 example product" is not possible by simply specifying 
		the particular occurrence <b>product_definition</b> within the hybrid structure.
		The <b>specified_higher_usage_occurrence</b> is necessary here as a result of the insertion of an intermediate definition in the product structure. 
		To specify the usage of the third nut-bolt assembly within the second L-bracket assembly within the "part 44 example product", 
		the <b>specified_higher_usage_occurrence</b> indicates the two <b>next_assembly_usage_occurrences</b> that specify the use of the component in the assembly
		at each intermediate level. 
		Since the definitions and occurrences are not directly related to each other in the hybrid case, the <b>specified_higher_usage_occurrence</b> specifies 
		the usage of each occurrence within the product structure of the definition.
	</p>
	<figure number="E.11">
		  <title>Hybrid structure of part 44 example product</title>
		  <img src="hybrid_structure_of_part_44_example-product.gif"/>
	</figure>
	
	<p><b>E.1.5 Generating product structure reports</b></p>
	
	<p>
		Once the actual product structure has been represented using the entities of this part of ISO 10303, it is
		possible to generate the various product structure reports mentioned earlier in this annex. 
		The algorithm consists in identifying the top-level product about which the report is to be generated, then iterating through
		its constituent sub-assemblies via the <b>quantified_assembly_component_usage</b>, <b>next_assembly_usage_occurrence</b>, or <b>make_from_usage_option entities</b>, 
		invoking indentation, numeric values, and labelling as appropriate, based on the information available in the entities as they are traversed. 
		Well known treetraversal algorithms exist for descending through several levels of the structure to provide the necessary multi-level reports. 
		In addition, as the traversal is taking place, the additional structural information available through the <b>specified_higher_usage_occurrence</b> 
		entities can be accessed and applied to the resulting report as necessary.
	</p>
	<p>
		Report generation thus becomes an exercise in traversing between product_definition entities via various subtypes of the <b>product_definition_usage</b> 
		entity type, i.e., <b>make_from_usage_option</b>, <b>quantified_assembly_component_usage</b>, <b>next_assembly_usage_occurrence</b>, and 
		<b>specified_higher_usage_occurrence</b>, utilizing the added information provided uniquely by each such entity type.
	</p>
	
	<p><b>E.1.6 Product structure summary</b></p>
	
	<p>
		In summary, this annex has presented a number of representations of the "part 44 example product" that support a BOM data structure, 
		a parts list data structure and a hybrid data structure. 
		From the appropriate use of each of these representations, it is possible to generate the various product structure reports provided
		in the earlier section of this annex. 
		As seen from the examples, one of the primary features of the entities defined in this part of ISO 10303 is that it permits the data modeler 
		to model various types of product structure data structures (e.g., BOM, parts list, etc.) using the same primitive entities, thus facilitating
		meaningful information exchange between users without resorting to costly data model mapping tasks. 
		As an example of this specific feature, it was demonstrated that the entities of this part of ISO 10303 support
		an incremental evolution from a pure BOM data structure implementation to a parts list data structure
		implementation by adding only instances of the <b>specified_higher_usage_occurrence</b> entity without altering
		any of the existing BOM data structure implementation.
	</p>
	
	<p><b>E.2 Product features and product concepts</b></p>
	
	<p>
		A product concept may allow several valid product variations based on dependencies and conditions specified for the different features 
		that are identified for it. 
		In this annex, examples of different types of dependencies between product features are provided with the use of this part of ISO 10303 to represent
		these dependencies.
	</p>
	
	<p>
		A particular model manufactured by a car company is represented by a <b>product_concept</b>. 
		The model is manufactured with a diesel engine (DE) or a spark ignited engine (SI). 
		Each of these is represented by instances of <b>product_concept_feature</b>. 
		The global condition "DE XOR SI" can be formulated to ensure that in each manufactured car there is exactly one of these engines. 
		This condition is represented by a <b>conditional_concept_feature referencing</b> a <b>concept_feature_relationship_with_condition</b> with the
		<b>conditional_operator</b> being a <b>concept_feature_operator</b> with name "XOR". 
		The <b>concept_feature_relationship_with_condition</b> references a <b>product_concept_feature</b> with id "DE" as <b>relating_product_concept_feature</b> 
		and a <b>product_concept_feature</b> with id "SI" as <b>related_product_concept_feature</b>.
	</p>
	<p>
		Features of a particular model of car can include an air conditioning system (AC) and electric windows (EW). 
		If both of these features are ordered, however, a stronger battery (SB) is also required. 
		Each of these features of the car is represented by instances of <b>product_concept_feature</b>. 
		The condition that a stronger battery is required if air conditioning and electric windows are ordered is represented by instances of
		<b>conditional_concept_feature</b>. 
		Different logical formations using <b>concept_feature_operator</b> can be defined to represent this condition.
	</p>
	<p>
		Figure E.12 shows one method of representing this condition with the use of the binary operators AND, OR, and NOT. 
		The boolean expression would be "(((AC AND EW) AND SB) OR (NOT (AC AND EW)))". 
		A <b>concept_feature_relationship_with_condition</b>, with a <b>concept_feature_operator</b> having the name "AND", establishes the relationship that both 
		the air conditioning system and electric windows are requested. 
		This relationship is the condition for a <b>conditional_concept_feature</b>. 
		The <b>conditional_concept_feature</b> is related to the stronger battery with an AND operator to say that all three features are present. 
		The <b>conditional_concept_feature</b> is also used in a relationship with itself, by convention, to establish the condition of negation. 
		The <b>resulting conditional_concept_features</b> are related with an OR operator to say either all three features are present or both 
		the air conditioning system and electric windows are not.
	</p>
	<figure number="E.12">
		  <title>Alternate binary operators for conditional_concept_feature</title>
		  <img src="alternate_binary_operators_for_conditional_concept_feature.gif"/>
	</figure>
	<p>
		Figure E.13 shows a method of representing a similar condition in which the additional constraint is that
		the stronger battery is included in the car if both the air conditioning system and electric windows are present. 
		This method uses the binary operators AND, XOR, and NOT. 
		The boolean expression would be "NOT ((AC AND EW) XOR SB)". 
		A <b>concept_feature_relationship_with_condition</b>, with a <b>concept_feature_operator</b> having the name "AND", 
		establishes the relationship that both the air conditioning system and electric windows are requested. 
		This relationship is the condition for a <b>conditional_concept_feature</b> that is related to the stronger battery with an XOR operator to say that 
		either the air conditioning system and electric windows are present or the stronger battery is present. 
		The resulting <b>conditional_concept_feature</b> is related with itself, by convention, to establish the condition of negation to establish the
		required combination of features.
	</p>
	<figure number="E.13">
		  <title>Binary operators for conditional_concept_feature</title>
		  <img src="binary_operators_for_conditional_concept_feature.gif"/>
	</figure>
	<p>
		Figure E.14 shows a method of representing the same condition using the binary operator AND and by introducing an operator for implication. 
		The expression would be "(AC AND EW) IMPLIES SB". 
		A <b>concept_feature_relationship_with_condition</b>, with a concept_feature_operator having the name "AND", establishes the relationship that both 
		the air conditioning system and electric windows are requested. 
		This relationship is the condition for a <b>conditional_concept_feature</b> that is related to the stronger battery with the newly introduced IMPLIES operator. 
		This relationship establishes the condition that either all three features are present or both the air conditioning system and electric windows are not.
	</p>
	<figure number="E.14">
		  <title>Defined operators for conditional_concept_feature</title>
		  <img src="defined_operators_for_conditional_concept_feature.gif"/>
	</figure>
	
	
</examples>



 <bibliography>
 	<bibitem.inc ref="ISO-10303-42"/>
 	<bibitem.inc ref="ISO10303-43.2000"/>
 	<bibitem.inc ref="hr_pgt"/>
 </bibliography>

</resource>

