<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express description.file="descriptions.xml" language_version="2" rcs.date="$Date$" rcs.revision="$Revision$" reference="ISO 10303-508">
   <application name="JSDAI" owner="LKSoft" source="aic_non_manifold_surface schema_instance" url="www.lksoft.com" version="4.0 beta"/>
   <schema name="aic_non_manifold_surface">
      <interface kind="use" schema="aic_topologically_bounded_surface"/>
      <interface kind="use" schema="geometric_model_schema">
         <interfaced.item name="face_based_surface_model"/>
      </interface>
      <interface kind="use" schema="geometry_schema">
         <interfaced.item name="b_spline_curve"/>
         <interfaced.item name="b_spline_surface"/>
         <interfaced.item name="bounded_pcurve"/>
         <interfaced.item name="bounded_surface_curve"/>
         <interfaced.item name="cartesian_transformation_operator_3d"/>
         <interfaced.item name="curve"/>
         <interfaced.item name="curve_replica"/>
         <interfaced.item name="degenerate_pcurve"/>
         <interfaced.item name="evaluated_degenerate_pcurve"/>
         <interfaced.item name="intersection_curve"/>
         <interfaced.item name="offset_curve_3d"/>
         <interfaced.item name="offset_surface"/>
         <interfaced.item name="point_on_curve"/>
         <interfaced.item name="point_on_surface"/>
         <interfaced.item name="seam_curve"/>
         <interfaced.item name="surface"/>
         <interfaced.item name="surface_replica"/>
      </interface>
      <interface kind="use" schema="product_property_representation_schema">
         <interfaced.item name="shape_representation"/>
      </interface>
      <interface kind="use" schema="representation_schema">
         <interfaced.item name="mapped_item"/>
         <interfaced.item name="representation"/>
         <interfaced.item name="representation_item"/>
         <interfaced.item name="representation_map"/>
      </interface>
      <interface kind="use" schema="topology_schema">
         <interfaced.item name="closed_shell"/>
         <interfaced.item name="connected_face_set"/>
         <interfaced.item name="face"/>
         <interfaced.item name="open_shell"/>
         <interfaced.item name="oriented_face"/>
      </interface>
      <entity name="non_manifold_surface_shape_representation" supertypes="shape_representation">
         <where expression="SIZEOF (QUERY (it &lt;* SELF.items |&#10;       NOT (SIZEOF (['AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL',&#10;       'AIC_NON_MANIFOLD_SURFACE.MAPPED_ITEM',&#10;       'AIC_NON_MANIFOLD_SURFACE.AXIS2_PLACEMENT_3D'] * TYPEOF (it)) = 1)))&#10;       = 0" label="WR1"/>
         <where expression="SIZEOF (QUERY (it &lt;* SELF.items |&#10;       SIZEOF (['AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL',&#10;       'AIC_NON_MANIFOLD_SURFACE.MAPPED_ITEM'] * TYPEOF (it)) = 1)) &gt; 0" label="WR2"/>
         <where expression="SIZEOF (QUERY (mi &lt;* QUERY (it &lt;* SELF.items |&#10;       'AIC_NON_MANIFOLD_SURFACE.MAPPED_ITEM' IN TYPEOF (it)) |&#10;       NOT (('AIC_NON_MANIFOLD_SURFACE.'+&#10;       'NON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION'&#10;       IN TYPEOF (mi\mapped_item.mapping_source.mapped_representation))&#10;       AND&#10;       (SIZEOF(QUERY (mr_it &lt;*&#10;       mi\mapped_item.mapping_source.mapped_representation.items |&#10;       ('AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL'&#10;       IN TYPEOF (mr_it)))) &gt; 0 )))) = 0" label="WR3"/>
         <where expression="SIZEOF (QUERY (fbsm &lt;* QUERY (it &lt;* SELF.items |&#10;       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |&#10;       NOT (SIZEOF (QUERY (cfs &lt;*&#10;       fbsm\face_based_surface_model.fbsm_faces |&#10;       NOT (SIZEOF (QUERY (fa &lt;* cfs.cfs_faces |&#10;       NOT (SIZEOF (['AIC_NON_MANIFOLD_SURFACE.FACE_SURFACE',&#10;       'AIC_NON_MANIFOLD_SURFACE.ORIENTED_FACE'] * TYPEOF (fa)) = 1)))&#10;       = 0))) = 0))) = 0" label="WR4"/>
         <where expression="SIZEOF (QUERY (fbsm &lt;* QUERY (it &lt;* SELF.items |&#10;       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |&#10;       NOT (SIZEOF (QUERY (cfs &lt;*&#10;       fbsm\face_based_surface_model.fbsm_faces |&#10;       NOT (SIZEOF (QUERY (f_sf &lt;* QUERY (fa &lt;* cfs.cfs_faces |&#10;       ('AIC_NON_MANIFOLD_SURFACE.FACE_SURFACE' IN TYPEOF (fa))) |&#10;       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (f_sf))&#10;       OR&#10;       (nmsf_surface_check(f_sf\face_surface.face_geometry))))) = 0))) &#10;       = 0))) = 0" label="WR5"/>
         <where expression="SIZEOF (QUERY (fbsm &lt;* QUERY (it &lt;* SELF.items |&#10;       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |&#10;       NOT (SIZEOF (QUERY (cfs &lt;*&#10;       fbsm\face_based_surface_model.fbsm_faces |&#10;       NOT (SIZEOF (QUERY (o_fa &lt;* QUERY (fa &lt;* cfs.cfs_faces |&#10;       ('AIC_NON_MANIFOLD_SURFACE.ORIENTED_FACE' IN TYPEOF (fa))) |&#10;       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF &#10;       (o_fa\oriented_face.face_element))&#10;       OR&#10;       (nmsf_surface_check&#10;       (o_fa\oriented_face.face_element\face_surface.face_geometry)))))&#10;       = 0))) = 0))) = 0" label="WR6"/>
         <where expression="SIZEOF (QUERY (fbsm &lt;* QUERY (it &lt;* SELF.items |&#10;       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |&#10;       NOT (SIZEOF (QUERY (cfs &lt;*&#10;       fbsm\face_based_surface_model.fbsm_faces |&#10;       NOT (SIZEOF (QUERY (fa &lt;* cfs.cfs_faces |&#10;       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))&#10;       OR&#10;       (SIZEOF (QUERY (bnds &lt;* fa.bounds |&#10;       NOT (SIZEOF (['AIC_NON_MANIFOLD_SURFACE.EDGE_LOOP',&#10;       'AIC_NON_MANIFOLD_SURFACE.VERTEX_LOOP']&#10;       * TYPEOF (bnds.bound)) = 1))) = 0)))) = 0))) = 0))) = 0" label="WR7"/>
         <where expression="SIZEOF (QUERY (fbsm &lt;* QUERY (it &lt;* SELF.items|&#10;       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |&#10;       NOT (SIZEOF (QUERY (cfs &lt;*&#10;       fbsm\face_based_surface_model.fbsm_faces |&#10;       NOT (SIZEOF (QUERY (fa &lt;* cfs.cfs_faces |&#10;       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))&#10;       OR&#10;       (SIZEOF (QUERY (elp_fbnds &lt;* QUERY (bnds &lt;* fa.bounds |&#10;       'AIC_NON_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |&#10;       NOT (SIZEOF (QUERY (oe &lt;* elp_fbnds\path.edge_list |&#10;       NOT ('AIC_NON_MANIFOLD_SURFACE.EDGE_CURVE' IN TYPEOF &#10;       (oe.edge_element)))) = 0))) = 0)))) = 0))) = 0))) = 0" label="WR8"/>
         <where expression="SIZEOF (QUERY (fbsm &lt;* QUERY (it &lt;* SELF.items |&#10;       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |&#10;       NOT (SIZEOF (QUERY (cfs &lt;*&#10;       fbsm\face_based_surface_model.fbsm_faces |&#10;       NOT (SIZEOF (QUERY (fa &lt;* cfs.cfs_faces |&#10;       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))&#10;       OR&#10;       (SIZEOF (QUERY (elp_fbnds &lt;* QUERY (bnds &lt;* fa.bounds |&#10;       'AIC_NON_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |&#10;       NOT (SIZEOF (QUERY (oe_cv &lt;* QUERY (oe &lt;* &#10;       elp_fbnds\path.edge_list |&#10;       'AIC_NON_MANIFOLD_SURFACE.EDGE_CURVE' IN TYPEOF (oe.edge_element)) |&#10;       NOT (SIZEOF (['AIC_NON_MANIFOLD_SURFACE.B_SPLINE_CURVE',&#10;       'AIC_NON_MANIFOLD_SURFACE.CONIC',&#10;       'AIC_NON_MANIFOLD_SURFACE.CURVE_REPLICA',&#10;       'AIC_NON_MANIFOLD_SURFACE.LINE',&#10;       'AIC_NON_MANIFOLD_SURFACE.OFFSET_CURVE_3D',&#10;       'AIC_NON_MANIFOLD_SURFACE.PCURVE',&#10;       'AIC_NON_MANIFOLD_SURFACE.POLYLINE',&#10;       'AIC_NON_MANIFOLD_SURFACE.SURFACE_CURVE'] * &#10;       TYPEOF (oe_cv.edge_element\edge_curve.edge_geometry)) &#10;       = 1))) = 0))) = 0)))) = 0))) = 0))) = 0" label="WR9"/>
         <where expression="SIZEOF (QUERY (fbsm &lt;* QUERY (it &lt;* SELF.items |&#10;       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |&#10;       NOT (SIZEOF (QUERY (cfs &lt;*&#10;       fbsm\face_based_surface_model.fbsm_faces |&#10;       NOT (SIZEOF (QUERY (fa &lt;* cfs.cfs_faces |&#10;       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))&#10;       OR&#10;       (SIZEOF (QUERY (elp_fbnds &lt;* QUERY (bnds &lt;* fa.bounds |&#10;       'AIC_NON_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |&#10;       NOT (SIZEOF (QUERY (oe &lt;* elp_fbnds\path.edge_list |&#10;       NOT (nmsf_curve_check (oe.edge_element\edge_curve.edge_geometry)))) &#10;       = 0))) = 0)))) = 0))) = 0))) = 0" label="WR10"/>
         <where expression="SIZEOF (QUERY(fbsm &lt;* QUERY (it &lt;* SELF.items |&#10;       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |&#10;       NOT (SIZEOF (QUERY (cfs &lt;*&#10;       fbsm\face_based_surface_model.fbsm_faces |&#10;       NOT (SIZEOF (QUERY (fa &lt;* cfs.cfs_faces |&#10;       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))&#10;       OR&#10;       (SIZEOF (QUERY (elp_fbnds &lt;* QUERY (bnds &lt;* fa.bounds |&#10;       'AIC_NON_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |&#10;       NOT (SIZEOF (QUERY (oe &lt;* elp_fbnds\path.edge_list|&#10;       NOT (('AIC_NON_MANIFOLD_SURFACE.VERTEX_POINT' IN TYPEOF&#10;       (oe.edge_element.edge_start))&#10;       AND&#10;       ('AIC_NON_MANIFOLD_SURFACE.VERTEX_POINT' IN&#10;       TYPEOF (oe.edge_element.edge_end))))) &#10;       = 0))) = 0)))) = 0))) = 0))) = 0" label="WR11"/>
         <where expression="SIZEOF (QUERY (fbsm &lt;* QUERY (it &lt;* SELF.items |&#10;       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |&#10;       NOT (SIZEOF (QUERY (cfs &lt;*&#10;       fbsm\face_based_surface_model.fbsm_faces |&#10;       NOT (SIZEOF (QUERY (fa &lt;* cfs.cfs_faces |&#10;       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))&#10;       OR&#10;       (SIZEOF (QUERY (elp_fbnds &lt;* QUERY (bnds &lt;* fa.bounds |&#10;       'AIC_NON_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |&#10;       NOT (SIZEOF (QUERY (oe &lt;* elp_fbnds\path.edge_list |&#10;       NOT ((SIZEOF (['AIC_NON_MANIFOLD_SURFACE.CARTESIAN_POINT',&#10;       'AIC_NON_MANIFOLD_SURFACE.DEGENERATE_PCURVE',&#10;       'AIC_NON_MANIFOLD_SURFACE.POINT_ON_CURVE',&#10;       'AIC_NON_MANIFOLD_SURFACE.POINT_ON_SURFACE'] * TYPEOF&#10;       (oe.edge_element.edge_start\vertex_point.vertex_geometry)) = 1)&#10;       AND&#10;       (SIZEOF (['AIC_NON_MANIFOLD_SURFACE.CARTESIAN_POINT',&#10;       'AIC_NON_MANIFOLD_SURFACE.DEGENERATE_PCURVE',&#10;       'AIC_NON_MANIFOLD_SURFACE.POINT_ON_CURVE',&#10;       'AIC_NON_MANIFOLD_SURFACE.POINT_ON_SURFACE'] * TYPEOF&#10;       (oe.edge_element.edge_end\vertex_point.vertex_geometry)) = 1&#10;       )))) = 0))) = 0)))) = 0))) = 0))) = 0" label="WR12"/>
         <where expression="SIZEOF (QUERY (fbsm &lt;* QUERY (it &lt;* SELF.items |&#10;       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |&#10;       NOT (SIZEOF (QUERY (cfs &lt;* &#10;       fbsm\face_based_surface_model.fbsm_faces |&#10;       NOT (SIZEOF (QUERY (fa &lt;* cfs.cfs_faces |&#10;       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))&#10;       OR&#10;       (SIZEOF (QUERY (vlp_fbnds &lt;* QUERY (bnds &lt;* fa.bounds |&#10;       'AIC_NON_MANIFOLD_SURFACE.VERTEX_LOOP' IN TYPEOF (bnds.bound)) |&#10;       NOT ('AIC_NON_MANIFOLD_SURFACE.VERTEX_POINT' IN TYPEOF&#10;       (vlp_fbnds\vertex_loop.loop_vertex)))) = 0)))) = 0))) &#10;       = 0))) = 0" label="WR13"/>
         <where expression="SIZEOF (QUERY (fbsm &lt;* QUERY (it &lt;* SELF.items |&#10;       'AIC_NON_MANIFOLD_SURFACE.FACE_BASED_SURFACE_MODEL' IN TYPEOF (it)) |&#10;       NOT (SIZEOF (QUERY (cfs &lt;* &#10;       fbsm\face_based_surface_model.fbsm_faces |&#10;       NOT (SIZEOF (QUERY (fa &lt;* cfs.cfs_faces |&#10;       NOT (('AIC_NON_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))&#10;       OR&#10;       (SIZEOF (QUERY (vlp_fbnds &lt;* QUERY (bnds &lt;* fa.bounds |&#10;       'AIC_NON_MANIFOLD_SURFACE.VERTEX_LOOP' IN TYPEOF (bnds.bound)) |&#10;       NOT (SIZEOF (['AIC_NON_MANIFOLD_SURFACE.CARTESIAN_POINT',&#10;       'AIC_NON_MANIFOLD_SURFACE.DEGENERATE_PCURVE',&#10;       'AIC_NON_MANIFOLD_SURFACE.POINT_ON_CURVE',&#10;       'AIC_NON_MANIFOLD_SURFACE.POINT_ON_SURFACE'] * TYPEOF&#10;       (vlp_fbnds\vertex_loop.loop_vertex\vertex_point.vertex_geometry)) &#10;       = 1))) = 0)))) = 0))) = 0))) = 0" label="WR14"/>
      </entity>
      <function name="nmsf_curve_check">
         <parameter name="cv">
            <typename name="representation_item"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF SIZEOF (['AIC_NON_MANIFOLD_SURFACE.BOUNDED_CURVE',
   'AIC_NON_MANIFOLD_SURFACE.CONIC',
   'AIC_NON_MANIFOLD_SURFACE.CURVE_REPLICA',
   'AIC_NON_MANIFOLD_SURFACE.LINE',
   'AIC_NON_MANIFOLD_SURFACE.OFFSET_CURVE_3D'] * TYPEOF(cv)) &gt; 1
 THEN RETURN(FALSE);
 ELSE

  (* b_spline_curves shall not self-intersect
   *)
  IF (('AIC_NON_MANIFOLD_SURFACE.B_SPLINE_CURVE' IN TYPEOF (cv)) AND
    (cv\b_spline_curve.self_intersect = FALSE) OR
    (cv\b_spline_curve.self_intersect = UNKNOWN))
  THEN RETURN(TRUE);
  ELSE

    (* conics and lines are valid curve types
     *)
    IF SIZEOF (['AIC_NON_MANIFOLD_SURFACE.CONIC',
    'AIC_NON_MANIFOLD_SURFACE.LINE'] * TYPEOF (cv)) = 1 THEN
      RETURN(TRUE);
    ELSE

      (* a curve_replica shall reference a valid curve
       *)
      IF 'AIC_NON_MANIFOLD_SURFACE.CURVE_REPLICA' IN TYPEOF(cv) THEN
        RETURN (nmsf_curve_check(cv\curve_replica.parent_curve)); 
      ELSE 
 
        (* an offset_curve_3d shall not self-intersect and
           shall reference a valid curve; a polyline is not a
           valid basis_curve
         *)
        IF (('AIC_NON_MANIFOLD_SURFACE.OFFSET_CURVE_3D' IN TYPEOF (cv)) 
          AND
          ((cv\offset_curve_3d.self_intersect = FALSE) OR
          (cv\offset_curve_3d.self_intersect = UNKNOWN))
          AND
          (NOT ('AIC_NON_MANIFOLD_SURFACE.POLYLINE' IN TYPEOF
          (cv\offset_curve_3d.basis_curve)))) THEN
          RETURN (nmsf_curve_check(cv\offset_curve_3d.basis_curve)); 
        ELSE 
 
          (* a pcurve shall reference a valid curve and a valid
             basis_surface
           *)
          IF 'AIC_NON_MANIFOLD_SURFACE.PCURVE' IN TYPEOF(cv) THEN 
            RETURN ((nmsf_curve_check
            (cv\pcurve.reference_to_curve\representation.items[1]))
            AND
            (nmsf_surface_check(cv\pcurve.basis_surface)));
          ELSE 
 
            (* a surface_curve references a curve_3d and one or
               two pcurves or one or two surfaces or one of
               each; all of these references shall be valid
             *)
            IF 'AIC_NON_MANIFOLD_SURFACE.SURFACE_CURVE' IN TYPEOF(cv) THEN 

              (* if the curve reference is correct, check also the rest
               *)
              IF nmsf_curve_check(cv\surface_curve.curve_3d) THEN
                REPEAT i := 1 TO SIZEOF
                (cv\surface_curve.associated_geometry);

                  (* do for one or two associated_geometrys:
                   *)
                  IF 'AIC_NON_MANIFOLD_SURFACE.SURFACE' IN 
                    TYPEOF (cv\surface_curve.associated_geometry[i]) THEN  
                    IF NOT nmsf_surface_check
                      (cv\surface_curve.associated_geometry[i]) THEN  
                      RETURN(FALSE);  
                    END_IF;  
                  ELSE  
                    IF 'AIC_NON_MANIFOLD_SURFACE.PCURVE' IN TYPEOF 
                      (cv\surface_curve.associated_geometry[i]) THEN  
                      IF NOT nmsf_curve_check
                        (cv\surface_curve.associated_geometry[i]) THEN 
                        RETURN(FALSE);  
                      END_IF;  
                    END_IF;  
                  END_IF; 
                END_REPEAT;  
                RETURN(TRUE);
              END_IF; 
            ELSE

              (* a polyline shall have at least 3 points 
               *)
              IF 'AIC_NON_MANIFOLD_SURFACE.POLYLINE' IN TYPEOF(cv) THEN
                IF (SIZEOF (cv\polyline.points) &gt;= 3) THEN RETURN (TRUE);
                END_IF;
              END_IF;
            END_IF; 
          END_IF; 
        END_IF; 
      END_IF; 
    END_IF; 
  END_IF; 
 END_IF; 
 (* FALSE is returned if the input parameter cv is not a valid curve.
  *)
 RETURN (FALSE);</algorithm>
      </function>
      <function name="nmsf_surface_check">
         <parameter name="surf">
            <typename name="surface"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'AIC_NON_MANIFOLD_SURFACE.ELEMENTARY_SURFACE' IN TYPEOF(surf) THEN
    RETURN(TRUE);
  ELSE 

    (* a swept_surface shall have a valid sweeping curve
     *)
    IF 'AIC_NON_MANIFOLD_SURFACE.SWEPT_SURFACE' IN TYPEOF (surf) THEN 
      RETURN (nmsf_curve_check(surf\swept_surface.swept_curve));  
    ELSE 
 
      (* an offset_surface shall not self-intersect and shall
         reference a valid surface
       *)
      IF (('AIC_NON_MANIFOLD_SURFACE.OFFSET_SURFACE' IN TYPEOF (surf)) AND
        (surf\offset_surface.self_intersect = FALSE) OR 
        (surf\offset_surface.self_intersect = UNKNOWN)) THEN
        RETURN (nmsf_surface_check(surf\offset_surface.basis_surface));
      ELSE 
 
        (* a surface_replica shall have a valid parent surface
         *)
        IF 'AIC_NON_MANIFOLD_SURFACE.SURFACE_REPLICA' IN TYPEOF(surf) THEN 
          RETURN(nmsf_surface_check(surf\surface_replica.parent_surface)); 
        ELSE

          (* a b_spline_surface shall not self-intersect
           *)
          IF (('AIC_NON_MANIFOLD_SURFACE.B_SPLINE_SURFACE' IN TYPEOF(surf))
            AND
            (surf\b_spline_surface.self_intersect = FALSE) OR
            (surf\b_spline_surface.self_intersect = UNKNOWN)) THEN
            RETURN(TRUE);
          END_IF;
        END_IF; 
      END_IF; 
    END_IF; 
  END_IF; 
  RETURN(FALSE);</algorithm>
      </function>
   </schema>
</express>
