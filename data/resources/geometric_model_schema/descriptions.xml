<?xml version="1.0"?>
<?xml-stylesheet
type="text/xsl"
href="../../../xsl/descriptions.xsl"?>
<!DOCTYPE ext_descriptions SYSTEM "../../../dtd/description.dtd">
<ext_descriptions module_directory="geometric_model_schema" schema_file="geometric_model_schema.xml"
rcs.date="e_cDate: 2011/12/24 12:10:03 $" rcs.revision="$Revision: 1.5 $"
describe.selects="YES"
>
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Schema: geometric_model_schema
<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema"/>
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<ext_description linkend="geometric_model_schema">
</ext_description>


<!-- +++++++++++ boolean_operand +++++++++++ -->
<ext_description linkend="geometric_model_schema.boolean_operand">
	A <b>boolean_operand</b> type identifies all those types of entities which may
    participate in a boolean operation to form a CSG solid. This includes
    provision for the
    special case of a two dimensional 'solid' which is an arcwise connected
    finite region in two dimensional space defined by boolean operations with
    2D operands.
</ext_description>

<!-- +++++++++++ boolean_operator +++++++++++ -->
<ext_description linkend="geometric_model_schema.boolean_operator">
	A <b>boolean_operator</b> type defines the three boolean operators used in the
 definition  of CSG solids.
</ext_description>

<!-- union -->
<ext_description linkend="geometric_model_schema.boolean_operator.union">
	the operation of constructing the regularised set theoretic
	 union  of the volumes defined by  two solids;
</ext_description>

<!-- intersection -->
<ext_description linkend="geometric_model_schema.boolean_operator.intersection">
	the operation of constructing the regularised set
  theoretic intersection of the volumes defined by two solids;
</ext_description>


<!-- difference -->
<ext_description linkend="geometric_model_schema.boolean_operator.difference">
	the regularised set theoretic difference between the volumes defined by two solids;
</ext_description>

<!-- +++++++++++ bounded_primitive_2d +++++++++++ -->
<ext_description linkend="geometric_model_schema.bounded_primitive_2d">
<p>
	A <b>bounded_primitive_2d</b>  extensible select type  defines the set of two dimensional CSG primitives of finite size which may
    participate in boolean operations or be used as <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.csg_solid.tree_root_expression"/> to directly define a two dimensional CSG solid. </p>
</ext_description>


<!-- +++++++++++ csg_primitive +++++++++++ -->
<ext_description linkend="geometric_model_schema.csg_primitive">
<p>
	A <b>csg_primitive</b>  select type  defines the set of CSG primitives which may
    participate in boolean operations or be used as <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.csg_solid.tree_root_expression"/> to directly define a CSG solid. </p>
 <p>   The 3D CSG primitives are <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.sphere"/>, <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.ellipsoid"/>, <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.right_circular_cone"/>,
    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.eccentric_cone"/>, <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.right_circular_cylinder"/>, <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.torus"/>, <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.block"/>, 
    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive"/>,
    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.rectangular_pyramid"/>, and <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.right_angular_wedge"/>. The <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.bounded_primitive_2d"/>s which are all types of
    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.primitive_2d"/> may participate in boolean operations with other  two dimensional entities. </p>

</ext_description>

<!-- +++++++++++ csg_select +++++++++++ -->
<ext_description linkend="geometric_model_schema.csg_select">
<p>
	A <b>csg_select</b>  select type  identifies the types of entity which may be selected as the
 root of a CSG tree including a single CSG primitive as a special case. </p>
</ext_description>

<!-- +++++++++++ edge_or_curve +++++++++++ -->
<ext_description linkend="geometric_model_schema.edge_or_curve">
<p>
	A <b>edge_or_curve</b>  select type  identifies the types of entity which may be selected as the
  underlying geometry of a tessellated edge. </p>
</ext_description>

<!-- +++++++++++ face_or_surface +++++++++++ -->
<ext_description linkend="geometric_model_schema.face_or_surface">
<p>
	A <b>face_or_surface</b>  select type  identifies the types of entity which may be selected as the
   underlying geometry of a tessellated face.
   </p>
</ext_description>

<!-- +++++++++++ geometric_set_select +++++++++++ -->
<ext_description linkend="geometric_model_schema.geometric_set_select">
<p>
	A <b>geometric_set_select</b>   type  identifies the  types of entities which can
   occur in a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set"/>. </p>
</ext_description>

<!-- +++++++++++ path_or_composite_curve +++++++++++ -->
<ext_description linkend="geometric_model_schema.path_or_composite_curve">
<p>
	A <b>path_or_composite_curve</b>  select type  identifies the  types of entities in a geometric model which can be linked to a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_wire"/>. </p>
</ext_description>

<!-- +++++++++++ surface_model +++++++++++ -->
<ext_description linkend="geometric_model_schema.surface_model">
<p>
	A <b>surface_model</b>  select type collects  all possible surface  model entities.</p>

   <p>     Some product model representations consist of collections of surfaces
    which do not necessarily form the complete boundary of a solid. Such a
  model can be represented by a collection of <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s or
  <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>s. </p>
</ext_description>

<!-- +++++++++++ tessellated_edge_or_vertex +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_edge_or_vertex">
<p>
	A <b>tessellated_edge_or_vertex</b>  select type identifies the  types of entities that are used as items in the definition of a 
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_wire"/>. </p>
</ext_description>

<!-- +++++++++++ wireframe_model +++++++++++ -->
<ext_description linkend="geometric_model_schema.wireframe_model">
<p>
	A <b>wireframe_model</b>  type collects all possible wireframe  model entities.</p>

 <p>   A wireframe representation of a geometric model
    contains information  only about the intersections of the surfaces forming the boundary 
    but does not contain information about the surfaces themselves. </p>
</ext_description>


<!-- ENTITIES -->

<!-- +++++++++++ solid_model +++++++++++ -->
<ext_description linkend="geometric_model_schema.solid_model">
	<p>A <b>solid_model</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>  which is a complete representation of the nominal   shape of a product such that all points in the interior are connected.
   Any point can be classified as being inside, outside or on the boundary of a solid. </p>

  <p>      There are several different types of solid model representations including
   'solid's defined as connected regions in two dimensional space.
	</p>
</ext_description>	








<!-- +++++++++++ manifold_solid_brep +++++++++++ -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep">
	<p>A <b>manifold_solid_brep</b> is a type of
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_model"/>  which is is a finite, arcwise connected volume
  bounded by    one or more surfaces, each of which is a connected, oriented, finite,
  closed   2-manifold. There is no restriction on the number of through 
    holes, nor on the number of voids within the volume.

        The Boundary Representation (B-rep) of a manifold solid utilises a  graph
    of edges and vertices embedded in a connected, oriented, finite, closed two
    manifold surface.  The embedded graph divides the surface into arcwise
    connected areas known as faces. The edges and vertices, therefore, form the
    boundaries of the faces and the domain of a face does not include its
    boundaries. The embedded graph may be disconnected and may be a
  pseudograph.
    The graph is labelled; that is, each entity in the graph has a unique
    identity.
        The geometric surface definition used to specify the geometry of a face
    shall be 2-manifold embeddable in the plane within the domain of the face.
   In other words, it shall be connected, oriented, finite, non-self-intersecting, and of surface genus 0.

        Faces do not intersect except along their boundaries. Each edge along the
    boundary of a face is shared by at most one other face in the assemblage.
    The assemblage of edges in the B-rep do not intersect except at their
    boundaries  (i.e., vertices). The geometric curve definition used to specify the
   geometry of an edge shall be arcwise connected and shall not self-intersect or overlap
    within the domain of the edge. The geometry of an edge shall be consistent with
  the  geometry of the faces of which it forms a partial bound.

        The geometry used to define a vertex shall be consistent with the geometry
   of the faces and edges of which it forms a partial bound.

        A B-rep is represented by one or more <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/>s which
    shall be disjoint. One shell, the outer, shall completely enclose
    all the other shells and no other shell may enclose a shell. The
 facility to define a B-rep with one or more internal voids is provided by the
 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.brep_with_voids"/> subtype.
        The following version of the Euler formula shall be satisfied </p>

  <eqn>   <i>  &#967;<sub>ms</sub> = <b>V -  E + 2F -  L</b><sub>l</sub> <b> - 2(S - G</b><sup>s</sup>) </i> = 0 &#8195; &#8195; <A name="eqnGM1"> (1) </A>       </eqn>
 <p>   where <i><b>V, E, F}, L</b><sub>l</sub></i> and <i><b> S</b></i> are the
    numbers  of unique vertices, edges, faces, face bounds
    and shells in the model and <i><b> G</b><sup>s</sup></i> is the sum of the
    genus of the shells.

        More specifically, the topological entities shall conform to the
    following
    constraints, where <i><b>B</b></i> denotes a manifold solid B-rep: </p>
    <ul>
    <li><p> The shells shall be unique </p>
   <eqn> <i><b>   (B)[S] = (B){S} </b></i>                         </eqn>    </li>
    <li> Each face in the B-rep is unique
   <eqn>  <i><b>   ((B)[S])[F] = ((B)[S]){F}   </b></i>           </eqn>      </li>
    <li> Each loop is unique
   <eqn>  <i><b>   (((B)[S])[F])[L] = (((B)[S])[F]){L}   </b></i>  </eqn> </li>
    <li> Each (edge + logical) pair is unique
    <eqn> <i><b>   ((((B)[S])[F])[L])[E<sub>l</sub>}] = ((((B)[S])[F])[L]){E</b><sub>l</sub>} </i>   </eqn></li>
    <li><p> Each edge in the B-rep is either used by exactly two loops or twice  by  one loop </p>
    <eqn><i><b> |((((B)[S])[F])[L]){E</b><sub>l</sub>}| = 2<b>|((((B)[S])[F])[L])[E</b><sub>l</sub>]| </i> </eqn> 
    That is, in the list <i><b> ((((B)[S])[F])[L])[E]</b></i> each edge appears exactly
   twice. </li>
   <li> <p>Equation <A href="#eqnGM1"> (1) </A> shall be satisfied </p>
    
      <eqn> <i><b>  2|(B)[S]| - 2 &#931;G</b><sup>s</sup> = <b> |(((((B)[S])[F]){L<sup>e</sup>}){E}){V}|
                                     + |((((B)[S])[F]){L</b><sup>v</sup>}<b>){V}| 
       - |((((B)[S])[F]){L}){E}| + 2|((B)[S])[F]| - |(((B)[S])[F])[L]| </b></i>  </eqn> </li>
    </ul>
<p>  The topological normal of the B-rep at each point on its
  boundary is the surface normal direction that points away from
the solid material. The <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/> normals, as used, shall
be consistent with the topological normal of the B-rep.
The <b>manifold_solid_brep</b> has two subtypes,
<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_brep"/> and <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.brep_with_voids"/>, with which there
exists a default ANDOR relationship. The following can all be
instantiated: </p>
<ul>
<li> <b>manifold_solid_brep</b> </li>
<li> <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.brep_with_voids"/> </li>
<li> <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_brep"/> </li>
<li> <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_brep"/> AND <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.brep_with_voids"/> </li>
</ul>
</ext_description>	

<!-- outer -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep.outer">
<p>	a <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/> defining the exterior boundary of the
	    solid; the shell normal shall point away from the interior of the  solid </p>

</ext_description>

<!-- IP1 -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep.wr:IP1">
	The dimensionality of a <b>manifold_solid_brep</b> shall be  3.
</ext_description>
<!-- IP2 -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep.wr:IP2">
	The extent of the <b>manifold_solid_brep</b> shall be finite and non-zero..
</ext_description>
<!-- IP3 -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep.wr:IP3">
	No <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_point"/>, undirected <express_ref linkend="topology_schema:ir_express:topology_schema.edge_curve"/>
   (i.e., one which is not an <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/>), or undirected
   <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/> (i.e., one which is not an <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_face"/>)
   referenced by a <b>manifold_solid_brep</b> shall intersect any other
   <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_point"/>, undirected <express_ref linkend="topology_schema:ir_express:topology_schema.edge_curve"/>, or undirected
   <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/> referenced by the same
   <b>manifold_solid_brep</b>. 
</ext_description>
<!-- IP4 -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep.wr:IP4">
	<p> Distinct <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s referenced by the same
	   <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> shall have no common <express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/></p>
	   <note> This implies that distinct loops of the same face have no
	   common edges. If geometry is present, distinct loops of the same face
   do not intersect. </note>
</ext_description>
<!-- IP5 -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep.wr:IP5">
	All topological elements of the <b>manifold_solid_brep</b>
   shall have defined associated geometry.
</ext_description>
<!-- IP6 -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep.wr:IP6">
	The shell normals shall agree with the B-rep normal and point away from the solid represented by the B-rep.
</ext_description>

<!-- IP7 -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep.wr:IP7">
	Each face shall be referenced only once by the shells of the <b>manifold_solid_brep</b>.
</ext_description>
<!-- IP8 -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep.wr:IP8">
	Each <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/> in the <b>manifold_solid_brep</b>
   shall be referenced only once.    
</ext_description>

<!-- IP9 -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep.wr:IP9">
	Each undirected edge shall be referenced  exactly twice by the loops in the faces of the 
   <b>manifold_solid_brep</b>'s shells.
</ext_description>
<!-- IP10 -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep.wr:IP10">
	The Euler equation shall be satisfied for the boundary representation, where the genus term shell-genus is the sum of
   the genus values for the shells of the B-rep.
</ext_description>
<!-- IP11 -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep.wr:IP11">
	 A <b>manifold_solid_brep</b>, which is not a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_brep"/>,
   shall not reference <express_ref linkend="topology_schema:ir_express:topology_schema.poly_loop"/>s.
</ext_description>
<!-- IP12 -->
<ext_description linkend="geometric_model_schema.manifold_solid_brep.wr:IP12">
	 A <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_brep"/> can reference only
   <express_ref linkend="topology_schema:ir_express:topology_schema.poly_loop"/>s as face boundaries.
</ext_description>



<!-- +++++++++++ brep_with_voids +++++++++++ -->
<ext_description linkend="geometric_model_schema.brep_with_voids">
	<p>A <b>brep_with_voids</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.manifold_solid_brep"/>  which contains one or more voids in its
interior. The voids are represented by <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_closed_shell"/>s which
are defined so that the <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_closed_shell"/> normals point into
the void, that is, with <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_closed_shell.orientation"/> FALSE. A
 <b>brep_with_voids</b> can also be a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_brep"/>.
 </p>
</ext_description>	


<!-- +++++++++++ voids +++++++++++ -->
<ext_description linkend="geometric_model_schema.brep_with_voids.voids">
a set of <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_closed_shell"/>s defining voids within the solid.
   The set may contain one or more shells.
</ext_description>

<!-- IP1 -->
<ext_description linkend="geometric_model_schema.brep_with_voids.wr:IP1">
	Each void shell shall be disjoint from the outer  shell and from every other void shell.
</ext_description>
<!-- IP2 -->
<ext_description linkend="geometric_model_schema.brep_with_voids.wr:IP2">
	Each void shell shall be enclosed within the outer shell but
	  not within any other void shell.  In particular, the outer shell is not in
 the set of void shells.
</ext_description>
<!-- IP3 -->
<ext_description linkend="geometric_model_schema.brep_with_voids.wr:IP3">
	Each shell in the <b>brep_with_voids</b> shall be referenced only once.
</ext_description>

<!-- +++++++++++ faceted_brep +++++++++++ -->
<ext_description linkend="geometric_model_schema.faceted_brep">
	<p>A <b>faceted_brep</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.manifold_solid_brep"/>  which is a simple form of boundary representation
  model in which all faces are planar and all edges are straight lines.  </p>
  <note>       The <b>faceted_brep</b> has been introduced in order to
 support  the  large   number of systems that allow boundary type solid representations with
  planar  surfaces only. Faceted models may be represented by <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.manifold_solid_brep"/>
    but their representation as a <b>faceted_brep</b> will be more compact. </note>
  <p>      
        Unlike the B-rep model, edges and vertices are not represented
   explicitly
    in the model but are implicitly available through the <express_ref linkend="topology_schema:ir_express:topology_schema.poly_loop"/>
    entity.    A <b>faceted_brep</b> has to meet the same topological constraints as the
    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.manifold_solid_brep"/>.

 </p>
</ext_description>	



<!-- IP1 -->
<ext_description linkend="geometric_model_schema.faceted_brep.wr:IP1">
	All the bounding loops of all the faces of all the shells in
	 the   <b>faceted_brep</b> shall be of type <express_ref linkend="topology_schema:ir_express:topology_schema.poly_loop"/>.
</ext_description>
<!-- IP2 -->
<ext_description linkend="geometric_model_schema.faceted_brep.wr:IP2">
	The faces in the shells may have implicit or explicit surface geometry.
	     If explicit, the face surface shall be a plane. All polyloops defining the face shall be coplanar.
</ext_description>


<!-- +++++++++++ brep_2d +++++++++++ -->
<ext_description linkend="geometric_model_schema.brep_2d">
	<p>A <b>brep_2d</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_model"/> 
	 which is  a bounded two-dimensional region defined by a face.
     Any two-dimensional point can be classified as being inside, outside or on the
     boundary of a <b>brep_2d</b>.
A <b>brep_2d</b> shall have an outer boundary and may have any number of holes.
 </p>
</ext_description>	

<!-- extent -->
<ext_description linkend="geometric_model_schema.brep_2d.extent">
	the face which defines the region of two-dimensional space
occupied by the <b>brep_2d</b>;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.brep_2d.wr:WR1">
	<b>extent</b>  shall not be a <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> of type <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/>,
<express_ref linkend="topology_schema:ir_express:topology_schema.subface"/>, or <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_face"/>.
</ext_description>

<!-- WR2 -->
<ext_description linkend="geometric_model_schema.brep_2d.wr:WR2">
	Each <express_ref linkend="topology_schema:ir_express:topology_schema.face_bound"/> used to define the <b>extent</b> shall be
of type <express_ref linkend="topology_schema:ir_express:topology_schema.edge_loop"/>.
</ext_description>

<!-- WR3 -->
<ext_description linkend="geometric_model_schema.brep_2d.wr:WR3">
	Precisely one of the bounds of the <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> shall be of type
<express_ref linkend="topology_schema:ir_express:topology_schema.face_outer_bound"/>.
</ext_description>

<!-- WR4 -->
<ext_description linkend="geometric_model_schema.brep_2d.wr:WR4">
	Each <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> used to define the bounds shall be of type 
	<express_ref linkend="topology_schema:ir_express:topology_schema.edge_curve"/> and shall be two-dimensional.
</ext_description>


<!-- +++++++++++ csg_solid +++++++++++ -->
<ext_description linkend="geometric_model_schema.csg_solid">
	<p>A <b>csg_solid</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_model"/> 
	 which is  a solid represented as a CSG model defined by a collection of so-called
    primitive solids, combined using regularised boolean operations.  The
   allowed   operations are intersection, union and difference. As a special
 case a <b>csg_solid</b> can also consist of a single CSG primitive.</p>

<p> A regularised subset of space is the closure of its interior, where
this phrase is interpreted in the usual sense of point set topology. For
<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.boolean_result"/>s regularisation has the effect of removing dangling
edges and other anomalies produced by the original operations.</p>

 <p>   A CSG solid requires two kinds of information for its complete definition:
    geometric and structural.

    The geometric information is conveyed by <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_model"/>s.
   These   typically are primitive volumes such as cylinders,
    wedges and extrusions, but can  include  general B-rep models.
    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_model"/>s  can   also be 
    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_replica"/>s (transformed
    solids) and <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.half_space_solid"/>s.

    The structural information is in a tree (strictly, an acyclic directed
   graph)  of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.boolean_result"/> and CSG solids, which represent a
   `recipe' for     building the solid.  The terminal nodes are the geometric primitives and
    other solids.
    Every <b>csg_solid</b> has precisely one <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.boolean_result"/>
 associated  with it which is the root of the tree that defines the solid.  (There may be further  
 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.boolean_result"/>s within the tree as operands).
    The significance of a <b>csg_solid</b> entity is that the solid  defined by the associated tree is
    thus identified as a significant object in itself, and in this way it
    is distinguished from other <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.boolean_result"/> entities
   representing intermediate results during the construction process.
 </p>
</ext_description>	

<!-- tree_root_expression -->
<ext_description linkend="geometric_model_schema.csg_solid.tree_root_expression">
	a boolean expression of primitives and  regularised
    operators describing the solid;  the root of the tree of boolean
  expressions   is given here explicitly as a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.boolean_result"/> entity, or as a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.csg_primitive"/>;
</ext_description>

<!-- +++++++++++ boolean_result +++++++++++ -->
<ext_description linkend="geometric_model_schema.boolean_result">
	<p>A <b>boolean_result</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which  is the result of a regularised operation on two
    solids to create a new solid. Valid operations are regularised
  union,
    regularised intersection, and regularised difference. For purposes of
   Boolean
    operations, a solid is considered to be a regularised set of points.

    The final <b>boolean_result</b> depends upon the operation and the two
    operands. In the case of the difference operator the order of the operands
   is   also significant. The operator  can be either union, intersection or difference. The effect of these operators is
    described below. </p>


 <p>  <i>union</i>  on two solids is the new solid that contains all the points
   that are in either the 
   <b>first_operand</b> or the <b>second_operand</b> or both. </p>
   <p>  <i>intersection</i> on two solids is the new solid that is the
    regularisation  of the set of all points that are in both the <b>first_operand</b> and the <b>second_operand</b>. </p>
<p>  The result of the <i>difference</i> operation on two solids is the
    regularisation of the set of all points which are in the
 <b>first_operand</b>, but not in the <b>second_operand</b>. </p>
 <note> For  example if the  first
    operand is a block and the second operand is a solid cylinder of suitable
    dimensions and location the <b>boolean_result</b> produced with the
    difference operator would be a block with a circular hole. </note>
</ext_description>	

<!-- operator -->
<ext_description linkend="geometric_model_schema.boolean_result.operator">
	the boolean operator used  in the operation to create the result;
</ext_description>

<!-- first_operand -->
<ext_description linkend="geometric_model_schema.boolean_result.first_operand">
	the first operand to be operated upon by the boolean operation;
</ext_description>

<!-- second_operand -->
<ext_description linkend="geometric_model_schema.boolean_result.second_operand">
	the second operand to be operated upon by the boolean operation;;
</ext_description>

<!-- +++++++++++ block +++++++++++ -->
<ext_description linkend="geometric_model_schema.block">
	<p>A <b>block</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which is a solid rectangular parallelepiped, defined with a  location
    and placement coordinate system.  The <b>block</b> is specified by
    the positive lengths <b>x</b>, <b>y</b>, and <b>z</b> along the axes of the placement
 coordinate system, and has one vertex at the origin of the placement coordinate
  system.
 </p>
</ext_description>	

<!-- position -->
<ext_description linkend="geometric_model_schema.block.position">
	the location and orientation of the axis system for the
    primitive; the block has one vertex at position.location and its
    edges aligned with the placement axes in the positive sense;
</ext_description>

<!-- x -->
<ext_description linkend="geometric_model_schema.block.x">
	the size of the block along the placement X axis, (position.p[1]);
</ext_description>

<!-- y -->
<ext_description linkend="geometric_model_schema.block.y">
	the size of the block along the placement Y axis, (position.p[21]);
</ext_description>

<!-- z -->
<ext_description linkend="geometric_model_schema.block.z">
	the size of the block along the placement Z axis, (position.p[3]);
</ext_description>


<!-- +++++++++++ right_angular_wedge +++++++++++ -->
<ext_description linkend="geometric_model_schema.right_angular_wedge">
	<p>A <b>right_angular_wedge</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which can be envisioned as the result of
  intersecting a block with a plane perpendicular to one of its faces.
  It is defined with a location
    and local coordinate system.  A triangular/trapezoidal face lies in the
    plane defined by the placement X and Y axes.   This face is defined by
    positive lengths <b>x</b> and <b>y</b> along the placement X and Y axes, by the length
    <b>ltx</b> (if nonzero) parallel to the X axis at a distance
    <b>y</b> from the placement
    origin, and by the line connecting the ends of the <b>x</b> and
    <b>ltx</b> segments.
 The remainder of the wedge is specified by the positive length <b>z</b> along the
    placement Z axis which defines a distance through which the trapezoid or
    triangle is extruded.  If <b>ltx</b> = 0, the wedge has five faces; otherwise,
  it  has six faces.</p>
  <note> See Figure <A href="#GMfig24"> (24) </A> for interpretation of attributes. </note>
 <figure id="GMfig24" number="24">
  		<title>Right angular wedge and its attributes</title>
  		<img src="GMfig24.gif"/>
  	</figure>


</ext_description>	

<!-- position -->
<ext_description linkend="geometric_model_schema.right_angular_wedge.position">
	the location and orientation of the axis system for the
    primitive; the <b>right_angular_wedge</b> has one vertex at position.location and its
    edges aligned with the placement axes in the positive sense;
</ext_description>

<!-- x -->
<ext_description linkend="geometric_model_schema.right_angular_wedge.x">
	the size of the <b>right_angular_wedge</b> along the placement X axis, (position.p[1]);
</ext_description>

<!-- y -->
<ext_description linkend="geometric_model_schema.right_angular_wedge.y">
	the size of the wedge along the placement Y axis, (position.p[21]);
</ext_description>

<!-- z -->
<ext_description linkend="geometric_model_schema.right_angular_wedge.z">
	the size of the wedge along the placement Z axis, (position.p[3]);
</ext_description>

<!-- ltx -->
<ext_description linkend="geometric_model_schema.right_angular_wedge.ltx">
	the length in the positive X direction of the smaller surface of the wedge;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.right_angular_wedge.wr:WR1">
	 <b>ltx</b> shall be non-negative  and less than <b>x</b>.
</ext_description>



<!-- +++++++++++ rectangular_pyramid +++++++++++ -->
<ext_description linkend="geometric_model_schema.rectangular_pyramid">
	<p>A <b>rectangular_pyramid</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which is a solid pyramid with a rectangular base.
The apex of the pyramid is directly above the centre
point of the base. The <b>rectangular_pyramid</b> is specified by its position,
which provides a placement coordinate system, its length, depth and height.
 </p>
</ext_description>	

<!-- position -->
<ext_description linkend="geometric_model_schema.rectangular_pyramid.position">
	the location and orientation of the pyramid.
    <b>position</b> defines a placement coordinate system for the pyramid.
   The pyramid has one corner of its base at position.location and
   the edges of the base are aligned with the first two placement axes
   in the positive sense;
</ext_description>

<!-- xlength -->
<ext_description linkend="geometric_model_schema.rectangular_pyramid.xlength">
	the length of the base along the placement X axis, (position.p[1]);
</ext_description>

<!-- ylength -->
<ext_description linkend="geometric_model_schema.rectangular_pyramid.ylength">
	the length of the base  along the placement Y axis, (position.p[21]);
</ext_description>

<!-- height -->
<ext_description linkend="geometric_model_schema.rectangular_pyramid.height">
	the height of the apex above the plane of the base,
    measured in the direction of the placement Z axis (position.p[3]);
</ext_description>

<!-- +++++++++++ faceted_primitive +++++++++++ -->
<ext_description linkend="geometric_model_schema.faceted_primitive">
	<p>A <b>faceted_primitive</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which is a type of CSG primitive with planar faces.
It is defined by a list of four or more points which locate the vertices. These points
shall not be coplanar.
 </p>
</ext_description>	

<!-- points -->
<ext_description linkend="geometric_model_schema.faceted_primitive.points">
	the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s that locate the vertices of
  the <b>faceted_primitive</b>;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.faceted_primitive.wr:WR1">
	<p>The coordinate space dimension of <b>points</b>[1] shall be 3. </p>
	<note>
	The rule <express_ref linkend="geometry_schema:ir_express:geometry_schema.compatible_dimension"/> ensures that all the 
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> attributes of this entity have the same dimension.
</note>
</ext_description>

<!-- IP1 -->
<ext_description linkend="geometric_model_schema.faceted_primitive.wr:IP1">
	The points in the list <b>points</b> shall not be coplanar.
</ext_description>

<!-- IP2 -->
<ext_description linkend="geometric_model_schema.faceted_primitive.wr:IP2">
	The <b>points</b> shall define a closed solid with planar faces.
</ext_description>


<!-- +++++++++++ tetrahedron +++++++++++ -->
<ext_description linkend="geometric_model_schema.tetrahedron">
	<p>A <b>tetrahedron</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive"/> 
	 with 4 vertices and 4 triangular
	 faces. It is defined by the four points which locate the vertices. These points
shall not be coplanar.
 </p>
</ext_description>	

<!-- points -->
<ext_description linkend="geometric_model_schema.tetrahedron.points">
	the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s that locate the vertices of
  the <b>tetrahedron</b>;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.tetrahedron.wr:WR1">
	The list of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/> shall contain 4 
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s.
</ext_description>

<!-- WR2 -->
<ext_description linkend="geometric_model_schema.tetrahedron.wr:WR2">
	The <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/> shall not be coplanar. This is tested by verifying that
the fourth point is either above, or below, the plane of the other 3 points.
</ext_description>



<!-- +++++++++++ convex_hexahedron +++++++++++ -->
<ext_description linkend="geometric_model_schema.convex_hexahedron">
	<p>A <b>convex_hexahedron</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive"/> 
	 primitive with 8 vertices and 6
four-sided faces. It is defined by the 8 points which locate the vertices. 
 </p>
<note number="1" >
See Figure <A href="#GMfig25"> (25) </A> for further information about the faces and vertices.
</note>
<figure id="GMfig25" number="25">
  		<title>Convex_hexahedron</title>
  		<img src="Geomfig22.gif"/>
  	</figure>
</ext_description>	

<!-- points -->
<ext_description linkend="geometric_model_schema.convex_hexahedron\faceted_primotive.points">
	the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s that locate the vertices of
  the <b>tetrahedron</b>; these points are ordered such that
<b>points[1], points[2], points[3], points[4]</b> define, in anti-clockwise
order, when viewed from outside the solid, one planar face of the solid.
<b>points[5], points[6], points[7], points[8]</b> define the opposite face, each of
these points being connected by an edge to the corresponding point, with index reduced by 4, on the
opposite face;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.convex_hexahedron.wr:WR1">
	The list of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/> shall contain 8 
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s.
</ext_description>

<!-- WR2 -->
<ext_description linkend="geometric_model_schema.convex_hexahedron.wr:WR2">
	The first 4 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/> shall be coplanar.
</ext_description>

<!-- WR3 -->
<ext_description linkend="geometric_model_schema.convex_hexahedron.wr:WR3">
	The final 4 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/> shall be coplanar.
</ext_description>

!-- WR4 -->
<ext_description linkend="geometric_model_schema.convex_hexahedron.wr:WR4">
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[1], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[4], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[8], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[5], shall be coplanar.
</ext_description>

<!-- WR5 -->
<ext_description linkend="geometric_model_schema.convex_hexahedron.wr:WR5">
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[4], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[3], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[7], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[8], shall be coplanar.
</ext_description>

<!-- WR6 -->
<ext_description linkend="geometric_model_schema.convex_hexahedron.wr:WR6">
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[3], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[2], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[6], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[7], shall be coplanar.
</ext_description>

!-- WR7 -->
<ext_description linkend="geometric_model_schema.convex_hexahedron.wr:WR7">
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[1], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[5], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[6], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[2], shall be coplanar.
</ext_description>

<!-- WR8 -->
<ext_description linkend="geometric_model_schema.convex_hexahedron.wr:WR8">
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[5], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[6], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[7], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[8], shall all lie on the same
side of the plane of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[1], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[2], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[3].
</ext_description>

<!-- WR9 -->
<ext_description linkend="geometric_model_schema.convex_hexahedron.wr:WR9">
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[4], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[3], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[7], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[8], shall be coplanar.
</ext_description>

<!-- WR10 -->
<ext_description linkend="geometric_model_schema.convex_hexahedron.wr:WR10">
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[4], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[3], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[7], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[8], shall all lie on the same
side of the plane of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[1], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[2], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[5].
</ext_description>

!-- WR11 -->
<ext_description linkend="geometric_model_schema.convex_hexahedron.wr:WR11">
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[1], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[2], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[3], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[4], shall all lie on the same
side of the plane of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[5], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[6], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[7].
</ext_description>

<!-- WR12 -->
<ext_description linkend="geometric_model_schema.convex_hexahedron.wr:WR12">
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[1], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[4], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[8], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[5], shall all lie on the same
side of the plane of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[3], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[7], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[6].
</ext_description>

<!-- WR13 -->
<ext_description linkend="geometric_model_schema.convex_hexahedron.wr:WR13"><p><express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[1], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[5], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[6],<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[2], shall all lie on the same
side of the plane of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[3], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[7], <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/>[8]. </p>
<note number="2">
The final 6 rules ensure that the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.faceted_primitive.points"/> define a convex figure.
</note>
</ext_description>

<!-- +++++++++++ sphere +++++++++++ -->
<ext_description linkend="geometric_model_schema.sphere">
	<p>A <b>sphere</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which is a CSG primitive with a spherical shape
  defined by a centre and a radius.
 </p>
</ext_description>	

<!-- radius -->
<ext_description linkend="geometric_model_schema.sphere.radius">
	the radius of the <b>sphere</b>;
</ext_description>

<!-- centre -->
<ext_description linkend="geometric_model_schema.sphere.centre">
	the location of the centre of the <b>sphere</b>;
</ext_description>


<!-- +++++++++++ right_circular_cone +++++++++++ -->
<ext_description linkend="geometric_model_schema.right_circular_cone">
	<p>A <b>right_circular_cone</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which is a CSG primitive in the form of a
  cone which may be truncated. It is defined by an axis, a point on the
 axis, the   semi-angle of the cone, and a distance giving the location in the
 negative   direction along the axis from the point to the base of the cone.
    In addition, a radius is given, which, if nonzero, gives the size and
    location of a truncated face of the cone.
 </p>
</ext_description>	

<!-- position -->
<ext_description linkend="geometric_model_schema.right_circular_cone.position">
	the location of a point on the axis and the  direction
      of the axis;
      position.location is a point on the axis of the cone and
      at the centre of one of the planar circular faces, or, if radius is zero, at the apex;
      <b>position.axis</b> is the direction of the central axis of symmetry of the cone.
      The direction of the axis is out of the closed solid from the point
      at the centre of the top face,  if truncated, or from the apex if
      the <b>radius</b> is zero.
</ext_description>

<!-- height -->
<ext_description linkend="geometric_model_schema.right_circular_cone.height">
	the distance between the planar circular faces of the cone,
   if <b>radius</b> is greater than zero; or from the base to the apex, if
    radius  equals zero;
</ext_description>


<!-- radius -->
<ext_description linkend="geometric_model_schema.right_circular_cone.radius">
	the radius of the cone at the point on the axis
      (position.location);  if the  <b>radius</b> is zero, the cone has an apex
    at this point,.  if the <b>radius</b> is greater than zero, the cone is truncated;
</ext_description>

<!-- semi_angle -->
<ext_description linkend="geometric_model_schema.right_circular_cone.semi_angle">
	one half the angle of the cone;  this is the angle
    between  the axis and a generator of the conical surface;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.right_circular_cone.wr:WR1">
	The <b>radius</b> shall be non-negative.
</ext_description>The <b>radius</b> shall be non-negative.

<!-- IP1 -->
<ext_description linkend="geometric_model_schema.right_circular_cone.wr:IP1">
	The <b>semi_angle</b> shall be between 0 and 90 degrees.
</ext_description>


<!-- +++++++++++ right_circular_cylinder +++++++++++ -->
<ext_description linkend="geometric_model_schema.right_circular_cylinder">
	<p>A <b>right_circular_cylinder</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which is a CSG primitive in the form of a
  solid cylinder of finite height. It is defined by an axis point at the
 centre  of one planar circular face, an axis, a height, and a radius.  The faces
    are perpendicular to the axis and are circular discs with the specified
    radius.
    The height is the distance from the first circular face centre
    in the positive direction of the axis to the second circular face centre.
 </p>
</ext_description>	

<!-- position -->
<ext_description linkend="geometric_model_schema.right_circular_cylinder.position">
	the location of a point on the axis and the  direction
      of the axis;
      position.location is a point on the axis and 
      position.axis is the direction of the central axis of symmetry of the cylinder;
      </ext_description>

<!-- height -->
<ext_description linkend="geometric_model_schema.right_circular_cylinder.height">
	the  distance between the planar circular faces of the
   cylinder;
</ext_description>

<!-- radius -->
<ext_description linkend="geometric_model_schema.right_circular_cylinder.radius">
	the radius of the <b>right_circular_cylinder</b>;
</ext_description>

<!-- +++++++++++ eccentric_cone +++++++++++ -->
<ext_description linkend="geometric_model_schema.eccentric_cone">
	<p>A <b>eccentric_cone</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which is a CSG primitive which is a generalisation of the
<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.right_circular_cone"/>. The <b>eccentric_cone</b> may have an elliptic
cross section, and may have a central axis which is
not perpendicular to the base. Depending upon the value of the <b>ratio</b>
attribute it may be truncated, or may take the form of a generalised cylinder.
When truncated the top face of the cone is parallel to the plane of the base
and has a similar cross section. 
 </p>
 <note number="1"> In the placement coordinate system defined by <b>position</b> the
 central point of the top face of the <b>eccentric_cone</b> has coordinates
(x_offset, y_offset, height).
 </note>
 <note number="2"> If <b>ratio</b> = 0.0 the <b>eccentric_cone</b> includes the apex.
 If <b>ratio</b> = 1.0 the <b>eccentric_cone</b> is in the form of a generalised
 cylinder with all cross sections of the same dimensions.
 </note>

 </ext_description>	

<!-- position -->
<ext_description linkend="geometric_model_schema.eccentric_cone.position">
	the  location of the central <express_ref linkend="geometry_schema:ir_express:geometry_schema.point"/>  on the axis and
  the direction of <b>semi_axis_1</b>.  This defines the centre and plane of
  the base of the <b>eccentric_cone</b>; <b>position.p[3]</b> is normal to the
  base of the <b>eccentric_cone</b>;
  </ext_description>

<!-- semi_axis_1 -->
<ext_description linkend="geometric_model_schema.eccentric_cone.semi_axis_1">
	the length of the first radius of the base of the cone in
  the direction of <b>position.p[1]</b>
</ext_description>

<!-- semi_axis_2 -->
<ext_description linkend="geometric_model_schema.eccentric_cone.semi_axis_2">
	the length of the second radius of the base of the cone in
  the direction of <b>position.p[2]</b>
</ext_description>

<!-- height -->
<ext_description linkend="geometric_model_schema.eccentric_cone.height">
	the height of the cone above the base measured in the direction of
<b>position.p[3]</b>;
</ext_description>

<!-- x_offset -->
<ext_description linkend="geometric_model_schema.eccentric_cone.x_offset">
	the distance, in the direction of <b>position.p[1]</b>, to
the central point of the top face of the cone from the point in the plane of this
face directly above the central point of the base;
</ext_description>

<!-- y_offset -->
<ext_description linkend="geometric_model_schema.eccentric_cone.y_offset">
	the distance, in the direction of <b>position.p[2]</b>, to
the central point of the top face of the cone from the point in the plane of this
face directly above the central point of the base;
</ext_description>

<!-- ratio -->
<ext_description linkend="geometric_model_schema.eccentric_cone.ratio">
	the ratio of a radius of the top face to the corresponding radius
of the base of the cone;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.eccentric_cone.wr:WR1">
	The <b>ratio</b> shall not be negative.
</ext_description>


<!-- +++++++++++ torus +++++++++++ -->
<ext_description linkend="geometric_model_schema.torus">
	<p>A <b>torus</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which is a solid primitive defined by sweeping the area of
    a circle (the generatrix) about a larger circle (the directrix).
    The directrix is defined by a location and direction
 <express_ref linkend="geometry_schema:ir_express:geometry_schema.axis1_placement"/>.
 </p>
</ext_description>	

<!-- position -->
<ext_description linkend="geometric_model_schema.torus.position">
	the location of the central <express_ref linkend="geometry_schema:ir_express:geometry_schema.point"/>  on the axis and
  the  direction of the axis.  This defines the centre and plane of the
  directrix
      </ext_description>

<!-- major_radius -->
<ext_description linkend="geometric_model_schema.torus.major_radius">
	the  radius of the directrix;
</ext_description>

<!-- minor_radius -->
<ext_description linkend="geometric_model_schema.torus.minor_radius">
	the radius of the generatrix;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.torus.wr:WR1">
	The <b>major_radius</b> shall be greater than the <b>minor_radius</b>.
</ext_description>

<!-- +++++++++++ ellipsoid +++++++++++ -->
<ext_description linkend="geometric_model_schema.ellipsoid">
	<p>A <b>ellipsoid</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which is a type of CSG primitive in the form of a solid ellipsoid. It is
defined by its location and orientation and by the lengths of the three semi-axes.
 </p>
</ext_description>	

<!-- position -->
<ext_description linkend="geometric_model_schema.ellipsoid.position">
	the location and orientation of the ellipsoid. position.location
is a <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> at the centre of the ellipsoid and the axes of the
ellipsoid are aligned with the directions position.p;
      </ext_description>

<!-- semi_axis_1 -->
<ext_description linkend="geometric_model_schema.ellipsoid.semi_axis_1">
	the  length of the semi-axis of the ellipsoid in the
direction <b>position.p[1]</b>;
</ext_description>

<!-- semi_axis_2 -->
<ext_description linkend="geometric_model_schema.ellipsoid.semi_axis_2">
	the  length of the semi-axis of the ellipsoid in the
direction <b>position.p[2]</b>;
</ext_description>

<!-- semi_axis_3 -->
<ext_description linkend="geometric_model_schema.ellipsoid.semi_axis_3">
	the  length of the semi-axis of the ellipsoid in the
direction <b>position.p[3]</b>;
</ext_description>

<!-- +++++++++++ cyclide_segment_solid +++++++++++ -->
<ext_description linkend="geometric_model_schema.cyclide_segment_solid">
	<p>A <b>cyclide_segment_solid</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which is a partial Dupin cyclide solid  (see <express_ref linkend="geometry_schema:ir_express:geometry_schema.dupin_cyclide_surface"/> 
).  This solid has two planar circular faces that
in general have different radii and different normal directions.
Around the boundary of each of these faces the curved surface of the
solid is tangent to a right circular cone.  In the following
definition the semi-vertex angle of the cone is in each case specified
with respect to the outward normal to its corresponding circular face. </p>
<note number="1" >
See Figure <A href="#GMfig25"> (26) </A> for further information about the attributes.
</note>
<figure id="GMfig25" number="26">
  		<title>Cyclide_segment_solid</title>
  		<img src="GMfig25.gif"/>
  	</figure>
	

<figure id="GMfig26" number="27">
  		<title>Cross section of cyclide_segment_solid</title>
  		<img src="GMfig26.gif"/>
  	</figure>

 
</ext_description>	

<!-- position -->
<ext_description linkend="geometric_model_schema.cyclide_segment_solid.position">
	the  location and orientation of the solid;
position.location is  at the centre of the first circular end face of the
solid;
<b>position.p[3] = position.axis</b>  is in the direction of the normal to the
plane of symmetry passing through the centres of both circular end faces\
<b>position.p[1]</b> lies in the plane of the first circular end face and
<b>position.p[2]</b> is directed into the solid
      </ext_description>

<!-- radius1 -->
<ext_description linkend="geometric_model_schema.cyclide_segment_solid.radius2">
	the  radius of the first circular end face of the solid;
</ext_description>

<!-- radius12 -->
<ext_description linkend="geometric_model_schema.cyclide_segment_solid.radius1">
	the  radius of the second circular end face of the solid;
</ext_description>

<!-- cone_angle1 -->
<ext_description linkend="geometric_model_schema.cyclide_segment_solid.cone_angle1">
	the semi-vertex angle of the cone tangent to the
curved surface around the first circular end face of the solid, taken
as positive if the cone vertex lies in the direction of the
outward-facing normal from that face;
</ext_description>

<!-- cone_angle2 -->
<ext_description linkend="geometric_model_schema.cyclide_segment_solid.cone_angle2">
	the semi-vertex angle of the cone tangent to the
curved surface around the second circular end face of the solid, taken
as positive if the cone vertex lies in the direction of the
outward-facing normal from the centre of that face;
</ext_description>

<!-- turn_angle -->
<ext_description linkend="geometric_model_schema.cyclide_segment_solid.turn_angle">
	the  angle between the planes of the two circular
faces of the solid, measured in the sector containing the solid;
</ext_description>


<!-- IP1 -->
<ext_description linkend="geometric_model_schema.cyclide_segment_solid.wr:IP1">
<p>	The <b>turn_angle</b> shall lie in the range 0to 360 degrees (see NOTE 2). </p>
<note number="2">
In terms of the definition of the <express_ref linkend="geometry_schema:ir_express:geometry_schema.dupin_cyclide_surface"/>  
, the <b>turn_angle</b> is the
difference in the values of <i>u</i> between the isoparametric lines
corresponding to the boundaries of the two end faces of the solid.
</note>
</ext_description>

<!-- IP2 -->
<ext_description linkend="geometric_model_schema.cyclide_segment_solid.wr:IP2">
<p>	The two tangent cones at the ends of the segment have
	generators lying in the plane containing the directrix of the Dupin
	cyclide that define a quadrilateral circumscribing a circle.  When one
	cone reduces to a cylinder its generators become a pair of parallel
	lines. When both cones are cylinders all four
generators are parallel and the circumscribed circle lies at infinity (see NOTE 3). </p>
<note number="3">
The attributes of the <b>cyclide_segment_solid</b> are not mutually
independent.  Informal proposition IP2 expresses this fact, and
states the simplest geometric characterisation of the dependency.  Any
correctly generated <b>cyclide_segment_solid</b> will satisfy
IP2.  The condition is illustrated in Figure <A href="#GMfig26"> (27) </A>.
</note>
</ext_description>

<!-- +++++++++++ half_space_solid +++++++++++ -->
<ext_description linkend="geometric_model_schema.half_space_solid">
	<p>A <b>half_space_solid</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which is defined by the half space which is the
    regular subset of the domain which lies on one side of an
    unbounded surface. The domain is limited by an orthogonal box in the
  <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.boxed_half_space"/> subtype.
      The side of the surface which  is in the half space is determined by the surface normals and the
 agreement flag. If the agreement flag is TRUE, then the subset is the one the normals point away from.
    If the agreement flag is FALSE, then the subset is the one the normals point into.

        For a valid <b>half_space_solid</b>, the surface shall divide the domain
    into exactly two subsets. Also, within the domain the surface shall be  manifold
    and all the surface normals shall point into the same subset.
</p>
  <note>       A <b>half_space_solid</b> is not a subtype of
 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_model"/>;
     <b>half_space_solid</b>s are only useful as operands in  Boolean expressions. </note>

 
</ext_description>	

<!-- base_surface -->
<ext_description linkend="geometric_model_schema.half_space_solid.base_surface">
	a <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/> defining the boundary of the half space;
      </ext_description>

<!-- agreement_flag -->
<ext_description linkend="geometric_model_schema.half_space_solid.agreement_flag">
	the  <b>agreement_flag</b> is TRUE if the normal to the
     <b>base_surface</b> points away from the material of the <b>half_space_solid</b>;
</ext_description>


<!-- IP1 -->
<ext_description linkend="geometric_model_schema.half_space_solid.wr:IP1">
	The <b>base_surface</b> shall divide the domain into exactly two subsets.
	If the <b>half_space_solid</b> is of subtype <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.boxed_half_space"/>, the domainin question is that of the attribute <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.boxed_half_space.enclosure"/>.
</ext_description>

<!-- +++++++++++ boxed_half_space +++++++++++ -->
<ext_description linkend="geometric_model_schema.boxed_half_space">
	<p>A <b>boxed_half_space</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.half_space_solid"/> 
	 that is trimmed by a surrounding rectangular box. The box has its edges parallel to the
	    coordinate axes of the geometric coordinate system.
	 </p>  
	   <note> The purpose of the box is to facilitate CSG computations by
	    producing a solid of finite size. </note>

</ext_description>	

<!-- enclosure -->
<ext_description linkend="geometric_model_schema.boxed_half_space.enclosure">
	the box which bounds the half space for computational purposes only;
      </ext_description>

<!-- +++++++++++ box_domain +++++++++++ -->
<ext_description linkend="geometric_model_schema.box_domain">
	<p>A <b>box_domain</b> is a type of
	 <express_ref linkend="representation_schema:ir_express:representation_schema.founded_item"/> 
	 which is an orthogonal box oriented parallel to the axes  of
    the geometric coordinate system which may be used to limit the domain of a
    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.half_space_solid"/>.  The <b>box_domain</b> is specified by the
    point at the corner of the box with minimum coordinates, and
    the lengths of the sides measured in the directions of the coordinate axes.e normals shall point into the same subset.
</p>
 </ext_description>	

<!-- corner -->
<ext_description linkend="geometric_model_schema.box_domain.corner">
	a <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> at the corner of box with minimum
   coordinate values;
      </ext_description>

<!-- xlength -->
<ext_description linkend="geometric_model_schema.box_domain.xlength">
	the  length of the <b>box_domain</b> along the edge parallelto the x axis;
</ext_description>

<!-- ylength -->
<ext_description linkend="geometric_model_schema.box_domain.ylength">
	the  length of the <b>box_domain</b> along the edge parallelto the y ayis;
</ext_description>

<!-- zlength -->
<ext_description linkend="geometric_model_schema.box_domain.zlength">
	the  length of the <b>box_domain</b> along the edge parallelto the z azis;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.box_domain.wr:WR1">
	The only use of the box domain shall be to define the limits
 for a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.boxed_half_space"/>.
</ext_description>


<!-- +++++++++++ primitive_2d +++++++++++ -->
<ext_description linkend="geometric_model_schema.primitive_2d">
	<p>A <b>primitive_2d</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	 which is a two-dimensional CSG primitive represented as
     either a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.circular_area"/>,  <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.elliptic_area"/>, <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.rectangular_area"/>, 
     <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.polygonal_area"/>, or
     <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.half_space_2d"/>. <b>primitive_2d</b>s may be used with other
     two-dimensional objects to create <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.csg_solid"/>s in 2D.
    </p>
    <note> The combination of <b>primitive_2d</b>s and any of the
     three-dimensional <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.csg_primitive"/>s in a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.boolean_result"/> is
     prohibited by the constraints on <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> in
     the geometry schema.
     </note>
 
</ext_description>	

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.primitive_2d.wr:WR1">
	The coordinate space dimensionality of a <b>primitive_2d</b> shall be 2.
</ext_description>

<!-- +++++++++++ circular_area +++++++++++ -->
<ext_description linkend="geometric_model_schema.circular_area">
	<p>A <b>circular_area</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.primitive_2d"/> 
	 which has the form of a circular disk. It is defined by a centre point and a radius.
	 </p>  
	   
</ext_description>	

<!-- centre -->
<ext_description linkend="geometric_model_schema.circular_area.centre">
	the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> at the centre of the <b>circular_area</b>;
      </ext_description>

<!-- radius -->
<ext_description linkend="geometric_model_schema.circular_area.radius">
	the radius of the <b>circular_area</b>;
      </ext_description>

<!-- +++++++++++ elliptic_area +++++++++++ -->
<ext_description linkend="geometric_model_schema.elliptic_area">
	<p>A <b>elliptic_area</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.primitive_2d"/> 
	which has an ellipse as outer boundary. It is defined by its position and the lengths of the
 semi-axes of the bounding ellipse.
	 </p>  
	   
</ext_description>	

<!-- position -->
<ext_description linkend="geometric_model_schema.elliptic_area.position">
	the location and orientation of the <b>elliptic_area</b>;
the <b>elliptic_area</b> has its centre at position.location  and its
principal axes are aligned with the placement axes;
      </ext_description>

<!-- semi_axis_1 -->
<ext_description linkend="geometric_model_schema.elliptic_area.semi_axis_1">
	the length of the semi-axis aligned with the placement X axis
    (<b>position.p[1]</b>);
      </ext_description>

<!-- semi_axis_2 -->
<ext_description linkend="geometric_model_schema.elliptic_area.semi_axis_2">
	the length of the semi-axis aligned with the placement Y axis
    (<b>position.p[2]</b>);
      </ext_description>

<!-- +++++++++++ rectangular_area +++++++++++ -->
<ext_description linkend="geometric_model_schema.rectangular_area">
	<p>A <b>rectangular_area</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.primitive_2d"/> 
	with a rectangular  shape. It is defined by a placement coordinate system and linear dimensions.
	     It is specified by the positive lengths x and y along the axes of the
	     placement coordinate system, and has one corner at the origin of the 
     placement coordinate system.
	 </p>  
	   
</ext_description>	

<!-- position -->
<ext_description linkend="geometric_model_schema.rectangular_area.position">
	the location and orientation of the <b>rectangular_area</b>;
the <b>rectangular_area</b> has one vertex (with minimum coordinate values)
at position.location  and its edges are aligned with the
placement axes in the positive sense;
      </ext_description>

<!-- x -->
<ext_description linkend="geometric_model_schema.rectangular_area.x">
	the length of the <b>rectangular_area</b> along the placement X axis
    (<b>position.p[1]</b>);
      </ext_description>

<!-- y -->
<ext_description linkend="geometric_model_schema.rectangular_area.y">
	the length of the <b>rectangular_area</b> along the placement Y axis
     (<b>position.p[2]</b>);
      </ext_description>

<!-- +++++++++++ polygonal_area +++++++++++ -->
<ext_description linkend="geometric_model_schema.polygonal_area">
	<p>A <b>polygonal_area</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.primitive_2d"/> 
	with straight edges.
	It is defined by a list of three or more <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s which
	implicitly define edges connecting consecutive points. The final edge is from
the last point in the list of <b>bounds</b> to the first.
	 </p>  
	   
</ext_description>	

<!-- bounds -->
<ext_description linkend="geometric_model_schema.polygonal_area.bounds">
	the two dimensional <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> that are at the vertices of the
<b>polygonal_area</b>; the linear segments joining consecutive points form the
     boundary of the <b>polygonal_area</b>;
      </ext_description>

<!-- IP1 -->
<ext_description linkend="geometric_model_schema.polygonal_area.wr:IP1">
	The implicit edges of the <b>polygonal_area</b> shall  not intersect each other. 
</ext_description>

<!-- +++++++++++ area_with_outer_boundary +++++++++++ -->
<ext_description linkend="geometric_model_schema.area_with_outer_boundary">
	<p>An <b>area_with_outer_boundary</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.half_space_2d"/> which is the finite interior of a closed curve.
	
	It is defined by its boundary,  a <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve"/> which is required to be closed.
	 </p>  
	   
</ext_description>	

<!-- base_curve -->
<ext_description linkend="geometric_model_schema.area_with_outer_boundary.base_curve">
	the two dimensional <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve"/> that forms the boundary of the
<b>area_with_outer_boundary</b>;
      </ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.area_with_outer_boundary.wr:WR1">
The <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve.closed_curve"/> flag of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.half_space_2d.base_curve"/> shall have the value TRUE.
</ext_description>

<!-- IP1 -->
<ext_description linkend="geometric_model_schema.area_with_outer_boundary.wr:IP1">
	The <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.half_space_2d.agreement_flag"/> shall  have the value which ensures that the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.half_space_2d"/> defined is the finite region inside the closed <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve"/>.
</ext_description>

<!-- +++++++++++ half_space_2d +++++++++++ -->
<ext_description linkend="geometric_model_schema.half_space_2d">
	<p>A <b>half_space_2d</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.primitive_2d"/> 
	 which is a partially bounded region of two-dimensional
     space. It is defined as the half plane which is the regular
     subset of the domain that lies on one side of an unbounded curve, or, of a closed curve. The
     domain is limited by a rectangle in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.rectangled_half_space"/> 
     subtype.
     The side of the curve which is in the half plane is determined by the 
     curve direction and an <b>agreement_flag</b>.

     For a valid <b>half_space_2d</b>, the curve shall divide the 2D space into
     exactly two connected regions.  Within the domain of the <b>half_space_2d</b>
     the <b>base_curve</b> shall be manifold.
</p>
<note>
A <b>half_space_2d</b> may be used as an operand in a Boolean operation provided
the final CSG object is finite and arcwise connected; only subtypes which are also of type <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.bounded_primitive_2d"/> may define a simple CSG solid with no Boolean operation.
</note>
</ext_description>	

<!-- base_curve -->
<ext_description linkend="geometric_model_schema.half_space_2d.base_curve">
	the two dimensional curve defining  the boundary of the half plane;
</ext_description>

<!-- agreement_flag -->
<ext_description linkend="geometric_model_schema.half_space_2d.agreement_flag">
	a BOOLEAN value  indicating to which side of the curve the
 <b>half_space_2d</b> lies; if the <b>agreement_flag</b> is TRUE,
  then the region defined is the one on the left as the curve is traversed in
  the direction of increasing parameter;  if the <b>agreement_flag</b> is
  FALSE, then the region is on the right as the curve is traversed in the
  direction of increasing parameter;
</ext_description>

<!-- IP1 -->
<ext_description linkend="geometric_model_schema.half_space_2d.wr:IP1">
	The <b>base_curve</b> shall not be self-intersecting.
</ext_description>

<!-- IP2 -->
<ext_description linkend="geometric_model_schema.half_space_2d.wr:IP2">
	The <b>base_curve</b> shall divide the domain into exactly two
	connected subsets. This implies that, unless the <b>half_space_2d</b>
	is of type <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.rectangled_half_space"/>, the <b>base_curve</b> shall be
unbounded or closed.
</ext_description>


<!-- +++++++++++ rectangled_half_space +++++++++++ -->
<ext_description linkend="geometric_model_schema.rectangled_half_space">
	<p>A <b>rectangled_half_space</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.half_space_2d"/> 
	which is  trimmed by a surrounding rectangle.  The trimming rectangle has its edges parallel to
 the coordinate axes of the geometric coordinate system.
</p>

</ext_description>	

<!-- enclosure -->
<ext_description linkend="geometric_model_schema.rectangled_half_space.enclosure">
	the rectangle which bounds the half plane for computational purposes;
</ext_description>

<!-- +++++++++++ rectangle_domain +++++++++++ -->
<ext_description linkend="geometric_model_schema.rectangle_domain">
	<p>A <b>rectangle_domain</b> is a type of
	 <express_ref linkend="representation_schema:ir_express:representation_schema.founded_item"/> 
	 which is a rectangular area in two-dimensional space
with its edges parallel to the coordinate axes. It may be used to limit the
domain of a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.half_space_2d"/>.
</p>
 </ext_description>	

<!-- corner -->
<ext_description linkend="geometric_model_schema.rectangle_domain.corner">
	a <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> at the corner of box with minimum
   coordinate values;
      </ext_description>

<!-- xlength -->
<ext_description linkend="geometric_model_schema.rectangle_domain.xlength">
	the  length of the <b>rectangle_domain</b> along the edge parallelto the x axis;
</ext_description>

<!-- ylength -->
<ext_description linkend="geometric_model_schema.rectangle_domain.ylength">
	the  length of the <b>rectangle_domain</b> along the edge parallelto the y ayis;
</ext_description>


<!-- WR1 -->
<ext_description linkend="geometric_model_schema.rectangle_domain.wr:WR1">
	The only use of the <b>rectangle_domain</b> shall be to define the limits
 for a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.rectangled_half_space"/>.
</ext_description>

<!-- +++++++++++ swept_face_solid +++++++++++ -->
<ext_description linkend="geometric_model_schema.swept_face_solid">
	<p>A <b>swept_face_solid</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_model"/> 
	 which collects the entities which are
    defined procedurally by a sweeping action on planar figures.
  The  position in space of the swept solid will be dependent upon the position of
   the <b>swept_face</b>.  The <b>swept_face</b> will be a face of the
   <b>swept_face_solid</b>,
   except in the case of a solid of revolution with angle equal to 360
  degrees.
  </p>
</ext_description>	

<!-- swept_face -->
<ext_description linkend="geometric_model_schema.swept_face_solid.swept_face">
	the <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/> defining the area to be swept.
	    The extent of
	    this face is defined by the <express_ref linkend="topology_schema:ir_express:topology_schema.face.bounds"/> attribute of the referenced
    <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/>.
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.swept_face_solid.wr:WR1">
	The <b>swept_face</b> shall be  planar.
	    The <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface.face_geometry"/> attribute of the 
    <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/> referenced shall be a <express_ref linkend="geometry_schema:ir_express:geometry_schema.plane"/>.
</ext_description>

<!-- +++++++++++ extruded_face_solid +++++++++++ -->
<ext_description linkend="geometric_model_schema.extruded_face_solid">
	<p>A <b>extruded_face_solid</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid"/> 
	 which is a solid defined by sweeping a planar
    <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/>.
    The direction of translation is defined by a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>, and
    the length of the translation is defined by a distance <b>depth</b>.
    The planar face may have holes which will sweep into holes in the solid.
  </p>
</ext_description>	

<!-- extruded_direction -->
<ext_description linkend="geometric_model_schema.extruded_face_solid.extruded_direction">
	the <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> in which the face is to be swept;
</ext_description>

<!-- depth -->
<ext_description linkend="geometric_model_schema.extruded_face_solid.depth">
	the distance the face is to be swept;
</ext_description>


<!-- WR1 -->
<ext_description linkend="geometric_model_schema.extruded_face_solid.wr:WR1">
	<b>extruded_direction</b> shall not be perpendicular to the
	   normal to the plane of the 
     <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid.swept_face"/>.
</ext_description>

<!-- +++++++++++ revolved_face_solid +++++++++++ -->
<ext_description linkend="geometric_model_schema.revolved_face_solid">
	<p>A <b>revolved_face_solid</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid"/> 
	 which is a solid of revolution formed by revolving a planar
    <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> about an axis. The axis shall be in the plane of the face and
    the axis shall not intersect the interior of the face.  The
    planar face may have holes which will sweep into holes in the solid.  The
    direction of revolution is clockwise when viewed along the axis
    in the positive direction.  More
    precisely if <b>A</b> is the axis location and <b> d</b> is the axis
 direction
    and <b>C</b> is an arc on the surface of revolution generated by an
  arbitrary
    point <b>p</b> on the boundary of the  face, then <b>C</b> leaves <b>p</b> in
    direction
    <b>  d &#215; (p - A)</b> as the face is revolved. </p>
 <note> See Figure <A href="#GMfig27"> (28) </A> for illustration of attributes. </note>
<figure id="GMfig27" number="28">
  		<title>Revolved face solid</title>
  		<img src="GMfig27.gif"/>
  	</figure>


</ext_description>	

<!-- axis -->
<ext_description linkend="geometric_model_schema.revolved_face_solid.axis">
	the axis about which revolution will take place;
</ext_description>

<!-- angle -->
<ext_description linkend="geometric_model_schema.revolved_face_solid.angle">
	the angle through which the sweep will be made;  this angle is
    measured from the plane of the swept face;
</ext_description>

<!-- axis_line -->
<ext_description linkend="geometric_model_schema.revolved_face_solid.axis_line">
	the line of the axis of revolution;
</ext_description>



<!-- IP1 -->
<ext_description linkend="geometric_model_schema.revolved_face_solid.wr:IP1">
	<b>axis_line</b> shall lie in plane of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid.swept_face"/>
  attribute of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid"/> supertype.
</ext_description>

<!-- IP2 -->
<ext_description linkend="geometric_model_schema.revolved_face_solid.wr:IP2">
	 The <b>axis_line</b> shall not intersect the interior of the
  <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid.swept_face"/>.
</ext_description>

<!-- IP3 -->
<ext_description linkend="geometric_model_schema.revolved_face_solid.wr:IP3">
	  <b>angle</b> shall lie in the range  0 &lt;  <b>angle</b>     &#8804; 360 degrees.
</ext_description>

<!-- +++++++++++ surface_curve_swept_face_solid +++++++++++ -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_face_solid">
	<p>A <b>surface_curve_swept_face_solid</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid"/> 
	 which	 is the result of sweeping a face along a <b>directrix</b> lying on a
	 <b>reference_surface</b>. The orientation of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid.swept_face"/> is related
	 to the direction of the surface normal.
	 
	 
	 The <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid.swept_face"/> is required to be a 
	 <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/> lying in the plane z  = 0 and this is swept along the <b>directrix</b> in such a way that
	  the origin of the local coordinate system used to define the
	  <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid.swept_face"/> is on the <b>directrix</b> and the local X axis is in the  direction of the normal to the <b>reference_surface</b> at the current
	  point. The  resulting solid has the property that the cross section of the
	  surface by the normal plane to the <b>directrix</b> at any point is a
	  copy of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid.swept_face"/>. </p>
	 
	 
	<p> The orientation of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid.swept_face"/> geometry as it sweeps along the
	 <b>directrix</b> is precisely defined by a
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator_3d"/> with attributes: </p>
	<p> <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator.local_origin"/> as point (0,0,0), </p>
	<p> <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator.axis1"/>  as the normal <b>N</b> to the <b>reference_surface</b> at the
	 point of the <b>directrix</b> with parameter <i>u</i>. </p>
	<p> <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator_3d.axis3"/>  as the direction of the tangent vector <b> t </b> at the point
	 of the <b>directrix</b> with parameter <i>u</i>. </p>
	 
	<p> The remaining attributes are defaulted to define a corresponding
	 transformation matrix <b> T</b>(<i>u</i>), which varies with the <b>directrix</b>
	 parameter <i>u</i> .</p>
	 
	 
	   <note number="1"> The geometric shape of the solid is not dependent
	      upon the curve parametrisation; the volume depends upon the area of the face and the
	      length of the <b>directrix</b>.
	  </note>
 </ext_description>	

<!-- directrix -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_face_solid.directrix">
	the curve used to define the sweeping operation; the solid is generated by sweeping the
<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid.swept_face"/> along the <b>directrix</b>.
</ext_description>
   
<!-- start_param -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_face_solid.start_param">
	the parameter value on the <b>directrix</b> at which the sweeping operation commences;
</ext_description>

<!-- end_param -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_face_solid.end_param">
	the parameter value on the <b>directrix</b> at which the sweeping operation ends;
</ext_description>

<!-- reference_surface -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_face_solid.reference_surface">
	the surface containing the <b>directrix</b>;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_face_solid.wr:WR1">
	If the <b>directrix</b> is a <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve"/> then the
<b>reference_surface</b> shall be in the <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve.basis_surface"/> set for
this curve.
</ext_description>

<!-- IP1 -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_face_solid.wr:IP1">
	The <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_face_solid.swept_face"/> shall lie in the plane <i>z</i> = 0.
</ext_description>

<!-- IP2 -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_face_solid.wr:IP2">
	<p>The <b>directrix</b> shall lie on the <b>reference_surface</b>. </p>
	<note number="2">
	 In the description above the normal to the
	<b>reference_surface</b> at the current point is denoted <b>N</b>.
</note>
</ext_description>

<!-- +++++++++++ swept_area_solid +++++++++++ -->
<ext_description linkend="geometric_model_schema.swept_area_solid">
	<p>A <b>swept_area_solid</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_model"/> which
	 collects the entities which are defined procedurally by a sweeping action on planar bounded surfaces.
	   The position in space of the swept solid will be dependent upon the position of
	    the <b>swept_area</b>.  The <b>swept_area</b> will be a face of the resulting
	    <b>swept_area_solid</b>,
	    except for the case of a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.revolved_area_solid"/> with angle equal to 360 degrees.
  </p>
</ext_description>	

<!-- swept_area -->
<ext_description linkend="geometric_model_schema.swept_area_solid.swept_area">
	the <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_bounded_surface"/> defining the area to be swept;
   the extent of  this area is defined by the <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_bounded_surface.boundaries"/> attribute of the referenced <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_bounded_surface"/>;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.swept_area_solid.wr:WR1">
	The <b>swept_area</b> shall be planar. 
    The <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_bounded_surface.basis_surface"/> attribute of the
    <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_bounded_surface"/> referenced shall be a <express_ref linkend="geometry_schema:ir_express:geometry_schema.plane"/>.
</ext_description>


<!-- +++++++++++ extruded_area_solid +++++++++++ -->
<ext_description linkend="geometric_model_schema.extruded_area_solid">
	<p>A <b>extruded_area_solid</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid"/> which
	 is a solid defined by sweeping a bounded planar surface.
	     The direction of translation is defined by a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>, and
	     the length of the translation is defined by a distance <b>depth</b>.
    The planar area may have holes which will sweep into holes in the solid.
  </p>
</ext_description>	

<!-- extruded_direction -->
<ext_description linkend="geometric_model_schema.extruded_area_solid.extruded_direction">
	the <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> in which the area is to be swept;
</ext_description>

<!-- depth -->
<ext_description linkend="geometric_model_schema.extruded_area_solid.depth">
	the distance the area is to be swept;
</ext_description>


<!-- WR1 -->
<ext_description linkend="geometric_model_schema.extruded_area_solid.wr:WR1">
	<b>extruded_direction</b> shall not be perpendicular to the
   normal to the plane of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid.swept_area"/>.
</ext_description>

<!-- +++++++++++ revolved_area_solid +++++++++++ -->
<ext_description linkend="geometric_model_schema.revolved_area_solid">
	<p>A <b>revolved_area_solid</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid"/> which
	 is a solid formed by revolving a planar bounded
	    surface about an axis. The axis shall be in the plane of the surface and
	     the axis shall not intersect the interior of the bounded surface.  The
	     bounded surface may have holes which will sweep into holes in the solid.
	     The  direction of revolution is clockwise when viewed along the axis
	    in the positive direction. More
	     precisely if <b>A</b> is the axis location and <b>d</b> is the axis
	  direction  and <b>C</b> is an arc on the surface of revolution generated by an
	   arbitrary  point <b>p</b> on the boundary of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid.swept_area"/>, then <b>C</b> leaves <b>p</b> in
    direction <b>  d &#215; (p - A)</b>  as the area is revolved.
  </p>
</ext_description>	

<!-- axis -->
<ext_description linkend="geometric_model_schema.revolved_area_solid.axis">
	the axis about which revolution will take place;
</ext_description>

<!-- angle -->
<ext_description linkend="geometric_model_schema.revolved_area_solid.angle">
	the angle through which the sweep will be made;  this angle is
    measured from the plane of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid.swept_area"/>;
</ext_description>

<!-- axis_line -->
<ext_description linkend="geometric_model_schema.revolved_area_solid.axis_line">
	the line of the axis of revolution;
</ext_description>


<!-- IP1 -->
<ext_description linkend="geometric_model_schema.revolved_area_solid.wr:IP1">
	<b>axis_line</b> shall lie in plane of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid.swept_area"/>
  attribute of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid"/> supertype.
</ext_description>

<!-- IP2 -->
<ext_description linkend="geometric_model_schema.revolved_area_solid.wr:IP2">
	The <b>axis_line</b> shall not intersect the interior of the
  <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid.swept_area"/>.
  </ext_description>

<!-- IP3 -->
<ext_description linkend="geometric_model_schema.revolved_area_solid.wr:IP3">
	<b>angle</b> shall lie in the range  0 &lt;  <b>angle</b>     &#8804; 360 degrees.
</ext_description>

<!-- +++++++++++ surface_curve_swept_area_solid +++++++++++ -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_area_solid">
	<p>A <b>surface_curve_swept_area_solid</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid"/> which
is the result of sweeping a face along a <b>directrix</b> lying on a
<b>reference_surface</b>. The orientation of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid.swept_area"/> is related
to the direction of the surface normal.</p>
<p>

The <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid.swept_area"/> is required to be a <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_bounded_surface"/> lying in the plane
z = 0 and this is swept along the <b>directrix</b> in such a way that
 the origin of the local coordinate system used to define the
 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid.swept_area"/>. is on the <b>directrix</b> and the local X axis is in the
 direction of the normal to the <b>reference_surface</b> at the current
 point. The resulting solid has the property that the cross section of the
 surface by the normal plane to the <b>directrix</b> at any point is a
 copy of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid.swept_area"/>.</p>

<p>
 The orientation of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid.swept_area"/> as it sweeps along the
<b>directrix</b> is precisely defined by a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator_3d"/> with attributes: </p>
<p> <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator.local_origin"/>  as point (0,0,0), </p>
<p> <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator.axis1"/>  as the normal <b>N</b> to the <b>reference_surface</b> at the
point of the <b>directrix</b> with parameter <i>u</i>. </p>
<p><express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator_3d.axis3"/>  as the direction of the tangent vector <b>t</b> at the point
of the <b>directrix</b> with parameter <i>u</i>. </p>
<p> The remaining attributes are defaulted to define a corresponding
transformation matrix <b>T</b>(<i>u</i>), which varies with the <b>directrix</b>
parameter <i>u</i>.

</p>
  <note> The geometric shape of the solid is not dependent
     upon the curve parametrisation; the volume depends upon the area swept
      and the length of the <b>directrix</b>.
 </note>
  
</ext_description>	

<!-- directrix -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_area_solid.directrix">
	the curve used to define the sweeping operation; the solid is generated by sweeping the
<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid.swept_area"/> along the <b>directrix</b>;
</ext_description>

<!-- start_param -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_area_solid.start_param">
	the parameter value on the <b>directrix</b> at which the sweeping operation commences;
</ext_description>

<!-- end_param -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_area_solid.end_param">
	the parameter value on the <b>directrix</b> at which the sweeping operation ends;
</ext_description>

<!-- reference_surface -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_area_solid.reference_surface">
	the surface containing the <b>directrix</b>;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_area_solid.wr:WR1">
	If the <b>directrix</b> is a <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve"/> then the
	<b>reference_surface</b> shall be in the <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve.basis_surface"/> set for
this curve..
</ext_description>

<!-- IP1 -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_area_solid.wr:IP1">
	The <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid.swept_area"/> shall lie in the plane z = 0.
</ext_description>

<!-- IP2 -->
<ext_description linkend="geometric_model_schema.surface_curve_swept_area_solid.wr:IP2">
	The <b>directrix</b> shall lie on the <b>reference_surface</b>.
</ext_description>

<!-- +++++++++++ swept_disk_solid +++++++++++ -->
<ext_description linkend="geometric_model_schema.swept_disk_solid">
	<p>A <b>swept_disk_solid</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.swept_area_solid"/> which
is the solid produced by sweeping a circular disk
along a three dimensional curve. During the sweeping operation the normal to the
plane of the circular disk is in the direction of the tangent to the
<b>directrix</b> curve and the centre of the disk lies on the <b>directrix</b>.
The circular disk may, optionally, have a central hole, in this case the
resulting solid has a through hole, or, an internal void when the directrix forms
a close curve.
  </p>
<example>
<p> A solid in the form of a toroidal shell of major radius
R<sub>1</sub>, minor radius R<sub>2</sub> and shell thickness <i>t</i> could be defined as an
instance of <b>swept_disk_solid</b> with the following attributes: </p>
<eqn> <b>directrix</b>: a circle in 3D space of radius R<sub>1</sub>, </eqn>
<eqn> <b>radius</b>: R<sub>2</sub>, </eqn>
<eqn> <b>inner_radius</b>: R<sub>2</sub> - <i>t</i>,  </eqn>
<eqn> <b>start_param</b>: 0, </eqn>
<eqn> <b>end_param</b>: 360 degrees. </eqn>
</example>

</ext_description>	

<!-- directrix -->
<ext_description linkend="geometric_model_schema.swept_disk_solid.directrix">
	the curve used to define the sweeping operation.
The solid is generated by sweeping a circular disk along the <b>directrix</b>;
</ext_description>

<!-- radius -->
<ext_description linkend="geometric_model_schema.swept_disk_solid.radius">
	the radius of the circular disk to be swept along the directrix;
</ext_description>

<!-- inner_radius -->
<ext_description linkend="geometric_model_schema.swept_disk_solid.inner_radius">
	an optional attribute, if present it defines the
radius of a circular hole in the centre of the disk;
</ext_description>

<!-- start_param -->
<ext_description linkend="geometric_model_schema.swept_disk_solid.start_param">
	the parameter value on the <b>directrix</b> at which the sweeping operation starts;
</ext_description>

<!-- end_param -->
<ext_description linkend="geometric_model_schema.swept_disk_solid.end_param">
	the parameter value on the <b>directrix</b> at which the sweeping operation ends;
</ext_description>
 EDIT TO HERE

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.swept_disk_solid.wr:WR1">
<p>	The <b>directrix</b> shall be a curve in three dimensional space. </p>
<note> A simple solid with no self-intersections will be produced if the
<b>directrix</b> is an open curve with radius of curvature at all points greater
than <b>radius</b>.
</note>
</ext_description>


<!-- WR2 -->
<ext_description linkend="geometric_model_schema.swept_disk_solid.wr:WR2">
If <b>inner_radius</b> exists then <b>radius</b> shall be greater
than <b>inner_radius</b>.
</ext_description>


<!-- +++++++++++ trimmed_volume +++++++++++ -->
<ext_description linkend="geometric_model_schema.trimmed_volume">
	<p>A <b>trimmed_volume</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_model"/> 
	for which the
	boundaries are the 6 constant parameter surfaces <i>u = u1, u = u2,
	v = v1, v = v2, w = w1,</i> and <i>w = w2</i>, of the
	<b>basis_volume</b>. In the three dimensional parameter space of the
	<b>basis_volume</b> the domain of the <b>trimmed_volume</b> is a cuboid.
</p>	
<note number="1"> A <b>trimmed_volume</b> for which the <b>basis_volume</b>
is not closed in any parameter direction will satisfy the additional
constraints <i>u1 &lt; u2, v1 &lt; v2, w1 &lt; w2.</i>
</note>
<note number="2"> If the <b>basis_volume</b> is closed in one or more
parameter directions and uses circular functions (sine and cosine) in
its definition the second value of a parameter may be less than the
first value of that parameter. This is interpreted as a periodic
definition of a portion of the volume from the second parameter boundary
to the first including the `seam' of the parameter value.
</note>

<example>
<p>If refcyl is a reference to a <express_ref linkend="geometry_schema:ir_express:geometry_schema.cylindrical_volume"/> then: </p>
<p>trimmed_volume(refcyl, 0.0, 0.5, 0.0, 1,0, 0.0, 1.0) defines a solid
half cylinder whose vertical face is defined by the plane <i> u = 0</i>, </p>
<p>trimmed_volume(refcyl, 0.875, 0.125, 0.0, 1.0, 0.9, 1.0) defines a quadrant of
a cylindrical shell of thickness (0.1 radius 1) centred on <i> u = 0 </i>.
The trimming values for <i>u</i> are from 0.875 to 0.125 (equivalent to 1.125).</p>
</example>
</ext_description>	

<!-- basis_volume -->
<ext_description linkend="geometric_model_schema.trimmed_volume.basis_volume">
	the <express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/> to be trimmed;
   </ext_description>

<!-- u1 -->
<ext_description linkend="geometric_model_schema.trimmed_volume.u1">
	the  first value for the The two trimming values for <i>u</i> shall be distinct.parameter;
</ext_description>

<!-- u2 -->
<ext_description linkend="geometric_model_schema.trimmed_volume.u2">
	the  second value for the <i>u</i> parameter;
</ext_description>

<!-- v1 -->
<ext_description linkend="geometric_model_schema.trimmed_volume.v1">
	the  first value for the <i>v</i> parameter;
</ext_description>

<!-- v2 -->
<ext_description linkend="geometric_model_schema.trimmed_volume.v2">
	the  second value for the <i>v</i> parameter;
</ext_description>

<!-- w1 -->
<ext_description linkend="geometric_model_schema.trimmed_volume.w1">
	the  first value for the <i>w</i> parameter;
</ext_description>

<!-- w2 -->
<ext_description linkend="geometric_model_schema.trimmed_volume.w2">
	the  second value for the <i>w</i> parameter;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.trimmed_volume.wr:WR1">
	The two trimming values for The two trimming values for <i>u</i> shall be distinct.shall be distinct.
</ext_description>

<!-- WR2 -->
<ext_description linkend="geometric_model_schema.trimmed_volume.wr:WR2">
	The two trimming values for The two trimming values for <i>v</i> shall be distinct.shall be distinct.
</ext_description>

<!-- WR3 -->
<ext_description linkend="geometric_model_schema.trimmed_volume.wr:WR3">
	The two trimming values for The two trimming values for <i>u</i> shall be distinct.shall be distinct.
</ext_description>

<!-- +++++++++++ solid_replica +++++++++++ -->
<ext_description linkend="geometric_model_schema.solid_replica">
	<p>A <b>solid_replica</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_model"/> which
	is a copy of another solid at a new location.
  </p>
</ext_description>	

<!-- parent_solid -->
<ext_description linkend="geometric_model_schema.solid_replica.parent_solid">
	the solid model which is being copied to create the <b>solid_replica</b>;
</ext_description>

<!-- transformation -->
<ext_description linkend="geometric_model_schema.solid_replica.transformation">
	a <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator_3d"/>
 which defines  the location and orientation of the <b>solid_replica</b> and any associated
 scaling factor;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.solid_replica.wr:WR1">
	 A <b>solid_replica</b> shall not participate in its own definition.
</ext_description>

<!-- WR2 -->
<ext_description linkend="geometric_model_schema.solid_replica.wr:WR2">
	 The <b>parent_solid</b> shall be of dimension 3.
</ext_description>

<!-- +++++++++++ shell_based_surface_model +++++++++++ -->
<ext_description linkend="geometric_model_schema.shell_based_surface_model">
	<p>A <b>shell_based_surface_model</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> which
	is described by a set of open or closed
	     shells of dimensionality 2.  The shells shall not intersect except at
	  edges   and vertices. In particular, distinct faces may not intersect.
	     A complete face of one shell may be shared with another shell.
	   Coincident  portions of shells shall both reference the same faces, edges and
	 vertices  defining the coincident region.
	
	    There shall be at least one <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>.
	
    A <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/> may exist independently of a <b>shell_based_surface_model</b>.
  </p>
</ext_description>	

<!-- sbsm_boundary -->
<ext_description linkend="geometric_model_schema.shell_based_surface_model.sbsm_boundary">
	the set of  <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>s which define
  the <b>shell_based_surface_model</b>;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.shell_based_surface_model.wr:WR1">
	 The <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>s which make up the <b>shell_based_surface_model</b>
  shall be of type <express_ref linkend="topology_schema:ir_express:topology_schema.open_shell"/> or 
  <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/> only.
</ext_description>

<!-- IP1 -->
<ext_description linkend="geometric_model_schema.shell_based_surface_model.wr:IP1">
	The topological dimensionality of the <b>shell_based_surface_model</b> is 2.
</ext_description>

<!-- IP2 -->
<ext_description linkend="geometric_model_schema.shell_based_surface_model.wr:IP2">
	The <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>s shall not overlap or intersect except at common
     <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s, <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s or <express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/>s.
</ext_description>

<!-- +++++++++++ face_based_surface_model +++++++++++ -->
<ext_description linkend="geometric_model_schema.face_based_surface_model">
	<p>A <b>face_based_surface_model</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> which
	is described by a set of
	    <express_ref linkend="topology_schema:ir_express:topology_schema.connected_face_set"/>s of dimensionality 2.
	
	    The <express_ref linkend="topology_schema:ir_express:topology_schema.connected_face_set"/>s shall not intersect except at edges and
	    vertices,
	    except that a <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> in one connected face set may overlap a
	  <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> in another connected face  set,  provided the face boundaries
	  are identical.
	
	    There shall be at least one <express_ref linkend="topology_schema:ir_express:topology_schema.connected_face_set"/>.
	
    A <express_ref linkend="topology_schema:ir_express:topology_schema.connected_face_set"/> may exist independently of a <b>face_based_surface_model</b>.
  </p>
</ext_description>	

<!-- fbsm_faces -->
<ext_description linkend="geometric_model_schema.face_based_surface_model.fbsm_faces">
	the set of  <express_ref linkend="topology_schema:ir_express:topology_schema.connected_face_set"/>s which define
  the <b>face_based_surface_model</b>;
</ext_description>


<!-- IP1 -->
<ext_description linkend="geometric_model_schema.face_based_surface_model.wr:IP1">
	The <express_ref linkend="topology_schema:ir_express:topology_schema.connected_face_set"/>>s shall not overlap or intersect except at common
     <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s, <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s or <express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/>s.
</ext_description>


<!-- IP2 -->
<ext_description linkend="geometric_model_schema.face_based_surface_model.wr:IP2">
	The topological dimensionality of the <b>fbsm_faces</b> is 2.
</ext_description>


<!-- +++++++++++ shell_based_wireframe_model +++++++++++ -->
<ext_description linkend="geometric_model_schema.shell_based_wireframe_model">
	<p>A <b>shell_based_wireframe_model</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> which
	is described by a graph of edges
	    and vertices embedded in <i>R<sup>3</sup></i>.  The graph may be disconnected.  Within
	    the graph the edges do not intersect except at their boundaries (i.e.,
	    vertices).
	
	    The geometry associated with a vertex shall be consistent with the
	    geometry associated with any of the edges of which the vertex forms a 
	    boundary.
	
	        A <b>shell_based_wireframe_model</b> is represented by one or more
	    <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>s of dimensionality 0 or 1.
	
	    There shall be at least one <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>.

	
    A <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/> may exist independently of a <b>shell_based_wireframe_model</b>.
  </p>
</ext_description>	

<!-- sbwm_boundary -->
<ext_description linkend="geometric_model_schema.shell_based_wireframe_model.sbwm_boundary">
	the set of <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_shell"/>s and/or 
	<express_ref linkend="topology_schema:ir_express:topology_schema.wire_shell"/>s which define
  the <b>shell_based_wireframe_model</b>;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.shell_based_wireframe_model.wr:WR1">
	 Each <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/> shall be either of type
 <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_shell"/> or <express_ref linkend="topology_schema:ir_express:topology_schema.wire_shell"/>.  The function 
<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.constraints_geometry_shell_based_wireframe_model"/> returns TRUE, where the function
  evaluates these geometric constraints and finds them satisfied.
</ext_description>

<!-- IP1 -->
<ext_description linkend="geometric_model_schema.shell_based_wireframe_model.wr:IP1">
	The topological dimensionality of <b>sbwm_boundary</b> is less than 2.
</ext_description>

<!-- IP2 -->
<ext_description linkend="geometric_model_schema.shell_based_wireframe_model.wr:IP2">
	The <b>shell_based_wireframe_model</b> has positive and finite extent.
</ext_description>


<!-- IP3 -->
<ext_description linkend="geometric_model_schema.shell_based_wireframe_model.wr:IP3">
	The <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>s shall not overlap or intersect except at common 
     <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s or <express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/>s.
</ext_description>

<!-- +++++++++++ edge_based_wireframe_model +++++++++++ -->
<ext_description linkend="geometric_model_schema.edge_based_wireframe_model">
	<p>An <b>edge_based_wireframe_model</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> which
	is described by a graph of edges
	    and vertices embedded in <i>R<sup>3</sup></i>.  The graph may be disconnected.  Within
	    the graph the edges do not intersect except at their boundaries (i.e.,
	    vertices).
	
	    The geometry associated with a vertex shall be consistent with the
	    geometry associated with any of the edges of which the vertex forms a 
	    boundary.
	
	        An <b>edge_based_wireframe_model</b> is represented by one or more
	    <express_ref linkend="topology_schema:ir_express:topology_schema.connected_edge_set"/>s of dimensionality 1.
	
	    There shall be at least one <express_ref linkend="topology_schema:ir_express:topology_schema.connected_edge_set"/>.

	
    A <express_ref linkend="topology_schema:ir_express:topology_schema.connected_edge_set"/> may exist independently of an <b>edge_based_wireframe_model</b>.
  </p>
</ext_description>	

<!-- ebwm_boundary -->
<ext_description linkend="geometric_model_schema.edge_based_wireframe_model.ebwm_boundary">
	the set of <express_ref linkend="topology_schema:ir_express:topology_schema.connected_edge_set"/>s comprising
      the <b>edge_based_wireframe_model</b>;
</ext_description>


<!-- IP1 -->
<ext_description linkend="geometric_model_schema.edge_based_wireframe_model.wr:IP1">
	The dimensionality of <b>edge_based_wireframe_model</b> is 1.
</ext_description>

<!-- IP2 -->
<ext_description linkend="geometric_model_schema.edge_based_wireframe_model.wr:IP2">
	The <express_ref linkend="topology_schema:ir_express:topology_schema.connected_edge_set"/>s shall not overlap or intersect except at common 
     <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s or <express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/>s.
</ext_description>

<!-- +++++++++++ geometric_set +++++++++++ -->
<ext_description linkend="geometric_model_schema.geometric_set">
	<p>A <b>geometric_set</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> which
	is intended for the transfer of models when a topological
    structure is not available.
  </p>
</ext_description>	

<!-- elements -->
<ext_description linkend="geometric_model_schema.geometric_set.elements">
	the geometric elements which make up the <b>geometric_set</b>,
     these may be <express_ref linkend="geometry_schema:ir_express:geometry_schema.point"/>s, <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/>s or <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/>s;
    but are required to be of the same coordinate space dimensionality;
</ext_description>


<!-- +++++++++++ geometric_curve_set +++++++++++ -->
<ext_description linkend="geometric_model_schema.geometric_curve_set">
	<p>An <b>geometric_curve_set</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set"/> which
	is a collection of two- or three-dimensional
	    <express_ref linkend="geometry_schema:ir_express:geometry_schema.point"/>s and <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/>s.

  </p>
</ext_description>	

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.geometric_curve_set.wr:WR1">
	No surface shall be included in this geometric  set.
</ext_description>


<!-- +++++++++++ sectioned_spine +++++++++++ -->
<ext_description linkend="geometric_model_schema.sectioned_spine">
	<p>An <b>sectioned_spine</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_curve_set"/> which
	is a representation of the shape of a three
	dimensional object composed of a spine curve and a number of
	planar <b>cross_sections</b>. The shape is defined between the first
	element of <b>cross_sections</b> and the last element of this set. </p>
	<note> A <b>sectioned_spine</b> may be used to represent a
	surface or a solid but the interpolation of the shape between the
	cross-sections is not defined. For the representation of a solid all
	cross-sections are closed curves.
</note>  
  
</ext_description>	


<!-- cross_sections -->
<ext_description linkend="geometric_model_schema.sectioned_spine.cross_sections">
	the set of 2 or more planar cross-sections; each
cross-section is defined in its correct location relative to the spine curve;
</ext_description>

<!-- spine_points -->
<ext_description linkend="geometric_model_schema.sectioned_spine.spine_points">
	the set of <express_ref linkend="geometry_schema:ir_express:geometry_schema.point"/>s on the spine, each point lies in
the plane of the corresponding cross-section;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.sectioned_spine.wr:WR1">
	The <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set.elements"/> set shall contain a single item.
</ext_description>

<!-- WR2 -->
<ext_description linkend="geometric_model_schema.sectioned_spine.wr:WR2">
	The <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set.elements"/> set shall contain a single item.
</ext_description>

<!-- WR3 -->
<ext_description linkend="geometric_model_schema.sectioned_spine.wr:WR3">
	The set of <b>cross_sections</b> and the set of <b>spine_points</b> shall be of the same size.
</ext_description>

<!-- WR4 -->
<ext_description linkend="geometric_model_schema.sectioned_spine.wr:WR4">
	The space dimensionality of the <b>sectioned_spine</b> shall be 3.
</ext_description>

<!-- IP1 -->
<ext_description linkend="geometric_model_schema.sectioned_spine.wr:IP1">
	Each curve in the <b>cross_sections</b> set shall be a planar curve.
</ext_description>

<!-- IP2 -->
<ext_description linkend="geometric_model_schema.sectioned_spine.wr:IP2">
	Each point in the <b>spine_points</b> set shall lie in the plane of the corresponding curve from the <b>cross_sections</b>.
</ext_description>

<!-- +++++++++++ geometric_set_replica +++++++++++ -->
<ext_description linkend="geometric_model_schema.geometric_set_replica">
	<p>An <b>geometric_set_replica</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set"/> which
	defines a replica of a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set"/>  in
	     a different location.
	    Each element of the set is transformed by the same <b>transformation</b>
	    which may include scaling.  The type of set produced will correspond to that of the <b>parent_set</b>

  </p>
</ext_description>	

<!-- parent_set -->
<ext_description linkend="geometric_model_schema.geometric_set_replica.parent_set">
	a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set"/> which is
	 being   copied to create the <b>geometric_set_replica</b>;
</ext_description>

<!-- transformation] -->
<ext_description linkend="geometric_model_schema.geometric_set_replica.transformation">
	a Cartesian transformation operator which defines the
  location and orientation of the <b>geometric_set_replica</b>;
</ext_description>

<!-- SELF\geometric_set.elements] -->
<ext_description linkend="geometric_model_schema.geometric_set_replica.elements">
	the set of elements resulting from the transformation of the <b>parent_set</b>;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.geometric_set_replica.wr:WR1">
	A <b>geometric_set_replica</b> shall not participate in its own definition.
</ext_description>

<!-- +++++++++++ tessellated_shape_representation +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_shape_representation">
	<p>A <b>tessellated_shape_representation</b> is a type of
	 <express_ref linkend="product_property_representation_schema:ir_express:product_property_representation_schema.shape_representation"/> 
	in which the geometry is approximately represented by a tessellated model with planar facets.    
  </p>
</ext_description>	

<!-- items -->
<ext_description linkend="geometric_model_schema.tessellated_shape_representation.items">
	 the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_item"/>s defining the tessellated shape;
</ext_description>



<!-- WR1 -->
<ext_description linkend="geometric_model_schema.tessellated_shape_representation.wr:WR1">
	 The context of the <b>tessellated_shape_representation</b> shall be a <express_ref linkend="measure_schema:ir_express:measure_schema.global_unit_assigned_context"/>. This ensures that the coordinates used to define the points of the tessellated geometry have defined units.
</ext_description>


<!-- +++++++++++ tessellated_item +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_item">
	<p>An <b>tessellated_item</b> is a type of
	 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> 
	used in the description of a tessellated shape.
  </p>
</ext_description>	

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.tessellated_item.wr:WR1">
	 A <b>tessellated_item</b> shall only be used in a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_shape_representation"/>;.
</ext_description>


<!-- +++++++++++ repositioned_tessellated_item +++++++++++ -->
<ext_description linkend="geometric_model_schema.repositioned_tessellated_item">
	<p>A <b>repositioned_tessellated_item</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_item"/> which has been re-postioned by defining the coordinates with respect to a new axis system.
  </p>
</ext_description>	

<!-- location -->
<ext_description linkend="geometric_model_schema.repositioned_tessellated_item.location">
	 an <express_ref linkend="geometry_schema:ir_express:geometry_schema.axis2_placement_3d"/> defining the origin and axis direction for the coordinates of the referenced points in the <b>repositioned_tessellated_item</b>;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.repositioned_tessellated_item.wr:WR1">
<p>	 A <b>repositioned_tessellated_item</b> shall only be used as a complex subtype with one of the following types of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_item"/>: </p>
	 <p> <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_curve_set"/>, 
	    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_geometric_set"/>,
	    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_point_set"/>, 
	    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set"/>, 
	    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_shell"/>,	    
	    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_solid"/>, 
 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_wire"/>. </p>
</ext_description>


<!-- +++++++++++ tessellated_structured_item +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_structured_item">
	<p>A <b>tessellated_structured_item</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set"/> which has a topological structure.
The links to topological components of an exact geometric model are defined with the subtypes.
  </p>
</ext_description>	

<!-- +++++++++++ coordinates_list +++++++++++ -->
<ext_description linkend="geometric_model_schema.coordinates_list">
	<p>A <b>coordinates_list</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_item"/> that defines the coordinate values for points used in a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_shape_representation"/>. 
  </p>
</ext_description>	

<!-- npoints -->
<ext_description linkend="geometric_model_schema.coordinates_list.npoints">
	 the number of points with coordinates in the list;
</ext_description>

<!-- position_coords -->
<ext_description linkend="geometric_model_schema.coordinates_list.position_coords">
	<p> the list of real triples defining the coordinates of the points; </p>
	  <note number="1"> These real triples have the semantics of <express_ref linkend="measure_schema:ir_express:measure_schema.length_measure"/>s, but are not formally defined as such, 
	  the units for these are defined since a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set"/> is required to be used in a 
	  <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_shape_representation"/> having a 
	  <express_ref linkend="measure_schema:ir_express:measure_schema.global_unit_assigned_context"/>.
 </note>
</ext_description>


<!-- WR1 -->
<ext_description linkend="geometric_model_schema.coordinates_list.wr:WR1">
	The value of <b>npoints</b> shall be equal to the size of the <b>position_coords</b> list.
</ext_description>

<!-- WR2 -->
<ext_description linkend="geometric_model_schema.coordinates_list.wr:WR2">
	<p>This entity shall not be instantiated as a complex subtype with <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.repositioned_tessellated_item"/>. </p>
	<note number="2"> This rule together with the  ONEOF rule on the supertype <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_item"/> ensures that it is not instantiated with any subtype of 
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_item"/>.
</note>
</ext_description>

<!-- +++++++++++ tessellated_vertex +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_vertex">
	<p>A <b>tessellated_vertex</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_structured_item"/> and is a single vertex in a tessellated model. 
  </p>
</ext_description>	

<!-- coordinates -->
<ext_description linkend="geometric_model_schema.tessellated_vertex.coordinates">
	 the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.coordinates_list"/> giving the  vertex coordinate values;
</ext_description>

<!-- topological_link -->
<ext_description linkend="geometric_model_schema.tessellated_vertex.topological_link">
	 an optional link to a topological <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_point"/> entity;
</ext_description>

<!-- point_index -->
<ext_description linkend="geometric_model_schema.tessellated_vertex.point_index">
	the location in the <b>coordinates</b> list of the coordinates for this vertex;
</ext_description>

<!-- +++++++++++ tessellated_edge +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_edge">
	<p>A <b>tessellated_edge</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_structured_item"/>. The geometry of the <b>tessellated_edge</b> is approximated by straight line segments joining the points listed.   
</p>
<note> A <b>tessellated_edge</b> may be used as the boundary between two  <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face"/>s.
</note>
  
</ext_description>	

<!-- coordinates -->
<ext_description linkend="geometric_model_schema.tessellated_edge.coordinates">
	 the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.coordinates_list"/> giving the  coordinate values for points of the <b>tessellated_edge</b>
</ext_description>

<!-- geometric_link -->
<ext_description linkend="geometric_model_schema.tessellated_edge.geometric_link">
	 the <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> or <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/> of an exact model to which this <b>tessellated_edge</b> corresponds;
</ext_description>

<!-- line_strip -->
<ext_description linkend="geometric_model_schema.tessellated_edge.line_strip">
	the list of integers giving the locations in the <b>coordinates</b> list of consecutive points of this edge;
</ext_description>


<!-- +++++++++++ tessellated_connecting_edge +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_connecting_edge">
	<p>A <b>tessellated_connecting_edge</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_edge"/>.  The  <b>tessellated_connecting_edge</b> connects two faces and contains information relating to the face normals. 
  </p>
</ext_description>	

<!-- smooth -->
<ext_description linkend="geometric_model_schema.tessellated_connecting_edge.smooth">
	  a LOGICAL variable; if TRUE, there is tangent continuity where two faces join along this edge
</ext_description>

<!-- face1 -->
<ext_description linkend="geometric_model_schema.tessellated_connecting_edge.face1">
	 the first <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face"/>  using this edge;
</ext_description>

<!-- face2 -->
<ext_description linkend="geometric_model_schema.tessellated_connecting_edge.face2">
	 the second <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face"/>  using this edge;
</ext_description>

<!-- line_strip_face1 -->
<ext_description linkend="geometric_model_schema.tessellated_connecting_edge.line_strip_face1">
	the list of integers giving the locations in the normals list of  <b>face1</b> of the normals on the <b>face1</b> side of this edge;
</ext_description>

<!-- line_strip_face2 -->
<ext_description linkend="geometric_model_schema.tessellated_connecting_edge.line_strip_face2">
	the list of integers giving the locations in the normals list of  <b>face2</b> of the normals on the <b>face1</b> side of this edge;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.tessellated_connecting_edge.wr:WR1">
	<b>line_strip_face1</b> and <b>line_strip_face2</b> shall be of the same size.
</ext_description>

<!-- WR2 -->
<ext_description linkend="geometric_model_schema.tessellated_connecting_edge.wr:WR2">
	<b>line_strip_face1</b>  shall be of the same size as the inherited <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_edge.line_strip"/> attribute.
</ext_description>

<!-- +++++++++++ tessellated_face +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_face">
	<p>A <b>tessellated_face</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_structured_item"/> that represents a face of a tessellated model. </p>
</ext_description>	

<!-- coordinates -->
<ext_description linkend="geometric_model_schema.tessellated_face.coordinates">
	 the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.coordinates_list"/> giving the  coordinate values for points of the <b>tessellated_face</b>
</ext_description>

<!-- pnmax -->
<ext_description linkend="geometric_model_schema.tessellated_face.pnmax">
	the larger of the number of points defined with the face or the number of unique point and normal combinations in the face;
</ext_description>

<!-- normals -->
<ext_description linkend="geometric_model_schema.tessellated_face.normals">
	the list of REAL triples defining the normals at the points of the face. If the size of this list is greater than one the ordering of the normals is the same as the ordering used for the points via <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.triangulated_face.pnindex"/> in one of the subtypes.
</ext_description>


<!-- geometric_link -->
<ext_description linkend="geometric_model_schema.tessellated_face.geometric_link">
	 the <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> or <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/> of an exact model to which this <b>tessellated_face</b> corresponds;
	
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.tessellated_face.wr:WR1">
	<p>The size of <b>normals</b> shall be 0, 1 or equal to <b>pnmax</b>. </p>
	 <note> If size = 0 normals are undefined at all face points, if size = 1 the normal has the same value at each face point  and the underlying surface is planar, if size is greater than 1 each point on the face has an individual underlying surface normal defined.
 </note>
</ext_description>

<!-- +++++++++++ triangulated_face +++++++++++ -->
<ext_description linkend="geometric_model_schema.triangulated_face">
	<p>A <b>triangulated_face</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face"/> that has its geometry defined by a set of triangles. </p>


<figure id="GMfig28" number="29">
  		<title>Use of pnindex to locate coordinates</title>
  		<img src="GMfig28.gif"/>
  	</figure>



</ext_description>	

<!-- pnindex -->
<ext_description linkend="geometric_model_schema.triangulated_face.pnindex">
	the list of integers defining the locations in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> list of the points and normals of the triangles  of the face
</ext_description>

<!-- triangles -->
<ext_description linkend="geometric_model_schema.triangulated_face.triangles">
	<p>the list of INTEGER triples, in the range 1 to pnmax,  giving the locations of the coordinate values in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> list or in <b>pnindex</b> for each triangle. The <i>i</i>th triple in the list defines the orders in the appropriate list of the 3 vertices of the <i>i</i>th triangle; </p>
	 <note number="1"> See Figure <A href="#GMfig28"> (29) </A> for further details of use of pnindex. </note>
	 <note>In the simplest case where no point is associated with more than 1 normal and the size of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> is <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.pnmax"/> the triangles refer directly to the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> list and <b>pnindex</b> is empty. In all other cases <b>pnindex</b> is required to identify points and normals for the triangles.
</note>
</ext_description>


<!-- WR1 -->
<ext_description linkend="geometric_model_schema.triangulated_face.wr:WR1">
	The size of <b>pnindex</b>, if non-zero, shall be equal to <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.pnmax"/>.
</ext_description>

<!-- WR2 -->
<ext_description linkend="geometric_model_schema.triangulated_face.wr:WR2">
	<p> <b>pnindex</b> shall not be empty unless <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.pnmax"/> is equal to the size of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> list. </p>
	 <note number="2"> This option can only be used in the simple case of a local <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> list and 0 or 1 normals per point.
</note>
</ext_description>

<!-- +++++++++++ complex_triangulated_face +++++++++++ -->
<ext_description linkend="geometric_model_schema.complex_triangulated_face">
	<p>A <b>complex_triangulated_face</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face"/> defining the geometry as a set of triangles arranged in strips and fans. </p>
 <note number="1"> The ordering of the points used to define the strips or fans of triangles is shown in Figure <A href="#GMfig29"> (30) </A>.
 </note>
<figure id="GMfig29" number="30">
  		<title>Ordering of points for complex_triangulated_face</title>
  		<img src="GMfig29.gif"/>
  	</figure>



</ext_description>	

<!-- pnindex -->
<ext_description linkend="geometric_model_schema.complex_triangulated_face.pnindex">
	the list of integers defining the locations in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> list of the points and normals of the triangles  of the face
</ext_description>

<!-- triangle_strips -->
<ext_description linkend="geometric_model_schema.complex_triangulated_face.triangle_strips">
<p>	the list  of lists of INTEGERs giving the locations of the coordinate values in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> list for each strip of triangles. Each sublist defines the orders in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> list, via the <b>pnindex</b> if used, of the  vertices of the <i>i</i> th strip of triangles. </p>
	<note number="2"> If required a single triangle can be included in this structure as a strip of one triangle, in which case the sublist will contain 3 INTEGERs. 
 </note>
</ext_description>

<!-- triangle_fans -->
<ext_description linkend="geometric_model_schema.complex_triangulated_face.triangle_fans">
<p>	the list  of lists of INTEGERs giving the locations of the coordinate values in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> list for each fan of triangles. Each sublist defines the orders in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> list of the  vertices of the <i>i</i>th fan of triangles. </p>
	 <note number="3">In the simplest case where no point is associated with more than 1 normal and the size of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> is <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.pnmax"/> the triangles defined by the strips and fans refer directly to the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> list and <b>pnindex</b> is empty. In all other cases <b>pnindex</b> is required to identify points and normals for the triangles.
</note> 
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.complex_triangulated_face.wr:WR1">
	The size of <b>pnindex</b>, if non-zero, shall be equal to <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.pnmax"/>.
</ext_description>

<!-- WR2 -->
<ext_description linkend="geometric_model_schema.complex_triangulated_face.wr:WR2">
	<p> <b>pnindex</b> shall not be empty unless <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.pnmax"/> is equal to the size of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> list. </p>
	 <note number="4"> This option can only be used in the simple case of a local <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_face.coordinates"/> list and 0 or 1 normals per point.
</note>
</ext_description>

<!-- WR3 -->
<ext_description linkend="geometric_model_schema.complex_triangulated_face.wr:WR3">
	The <b>triangle_strips</b> list and the <b>triangle_fans</b> list shall not both be empty.
</ext_description>


<!-- +++++++++++ tessellated_solid +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_solid">
	<p>A <b>tessellated_solid</b> is a type of
	  <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_item"/> that is a tessellated representation of a solid model. Its geometry is defined as a set of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_structured_item"/>s.  </p>
<note> The <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_structured_item"/>s defining the geometry  may be relocated in a local coordinate system by defining a complex instance of this entity with a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.repositioned_tessellated_item"/>. 
</note>
</ext_description>	

<!-- items -->
<ext_description linkend="geometric_model_schema.tessellated_solid.items">
	 the set of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_structured_item"/>s defining the faces of the solid;
</ext_description>

<!-- geometric_link -->
<ext_description linkend="geometric_model_schema.tessellated_solid.geometric_link">
	 a corresponding exact model of the solid;
	
</ext_description>


<!-- +++++++++++ tessellated_shell +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_shell">
	<p>A <b>tessellated_shell</b> is a type of
	  <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_item"/> that is a tessellated representation of a shell. Its geometry is defined as a set of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_structured_item"/>s. </p>
<note> The <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_structured_item"/>s defining the geometry  may be relocated in a local coordinate system by defining a complex instance of this entity with a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.repositioned_tessellated_item"/>. 
</note>

</ext_description>	

<!-- items -->
<ext_description linkend="geometric_model_schema.tessellated_shell.items">
	 the set of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_structured_item"/>s defining the faces of the shell;
</ext_description>

<!-- topological_link -->
<ext_description linkend="geometric_model_schema.tessellated_shell.topological_link">
	 a  <express_ref linkend="topology_schema:ir_express:topology_schema.connected_face_set"/> representing the exact geometry of the shell;
</ext_description>

<!-- +++++++++++ tessellated_wire +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_wire">
	<p>A <b>tessellated_wire</b> is a type of
	  <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_item"/> that is a tessellated representation of a collection of bounded curves joined end to end.  Its geometry is defined as a set of tessellated edges and vertices. </p>
<note> The edges and vertices defining the geometry may be relocated in a local coordinate system by defining a complex instance of this entity with a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.repositioned_tessellated_item"/>. 
</note>

</ext_description>	

<!-- items -->
<ext_description linkend="geometric_model_schema.tessellated_wire.items">
	the set of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_edge_or_vertex"/>s defining the geometry of the wire;
</ext_description>

<!-- geometric_model_link -->
<ext_description linkend="geometric_model_schema.tessellated_wire.geometric_model_link">
	the corresponding exact geometry which may be a <express_ref linkend="topology_schema:ir_express:topology_schema.path"/> or <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve"/>;
	
</ext_description>

<!-- +++++++++++ tessellated_surface_set +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_surface_set">
	<p>A <b>tessellated_surface_set</b> is a type of
	  <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_item"/> that is a tessellated representation of a  collection of surfaces. </p>
 <note number="1"> If the surfaces are triangulated the geometry of the surfaces is fully defined by creating an instance of one of the subtypes.
 </note>
</ext_description>	

<!-- coordinates -->
<ext_description linkend="geometric_model_schema.tessellated_surface_set.coordinates">
	 the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.coordinates_list"/> for the vertices of the triangles;
</ext_description>

<!-- pnmax -->
<ext_description linkend="geometric_model_schema.tessellated_surface_set.pnmax"> <p>
 the larger of the number of points defined with the triangles or the number of unique point and normal combinations in the set of triangles; 
 </p>  
   <note number="2"> In the case of a <b>tessellated_surface_set</b> with a discontinuous boundary between faces it is possible to have more than one normal defined at a point on the boundary.
     </note>
</ext_description>

<!-- normals -->
<ext_description linkend="geometric_model_schema.tessellated_surface_set.normals">
	 the list of REAL triples defining the normals at the vertices of the triangles. If the size of this list is greater than one the ordering of the normals is the same as the ordering used for the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.triangulated_surface_set.pnindex"/>;
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.tessellated_surface_set.wr:WR1">
<p>	The size of <b>normals</b> shall be 0, 1 or equal to <b>pnmax</b>. </p>
  <note number="3"> If size = 0 normals are undefined at all vertices, if size = 1 the normal has the same value at each vertex and the underlying surface is planar, if size is greater than 1 each triangle vertex has an individual underlying surface normal defined.
 </note>
</ext_description>

<!-- +++++++++++ triangulated_surface_set +++++++++++ -->
<ext_description linkend="geometric_model_schema.triangulated_surface_set">
	<p>A <b>triangulated_surface_set</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set"/> defining the geometry of the surface set as a set of triangles. The individual triangles are defined by listing the coordinates of their vertices. Normals to the surfaces defined by the set of triangles may be included.
      </p>

</ext_description>	
	

<!-- pnindex -->
<ext_description linkend="geometric_model_schema.triangulated_surface_set.pnindex">
<p>	the list of integers defining the locations in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> list of the points and normals of the triangles;
</p>
     <note number="1"> See Figure <A href="#GMfig28"> (29) </A>. for further details of use of pnindex. </note>
</ext_description>

<!-- triangles -->
<ext_description linkend="geometric_model_schema.triangulated_surface_set.triangles">
	<p> the list of INTEGER triples, in the range 1 to pnmax,  giving the locations of the coordinate values in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> list or  <b>pnindex</b> for each triangle. The <i>i</i>th triple in the list defines the orders in the appropriate list of the 3 vertices of the <i>i</i>th
	      triangle; </p> 
	  <note number="2">In the simplest case where no point is associated with more than 1 normal and the size of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> is <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.pnmax"/> the triangles refer directly to the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> list and <b>pnindex</b> is empty. In all other cases <b>pnindex</b> is required to identify points and normals for the triangles.
 </note>
</ext_description>

<!-- WR1 -->
<ext_description linkend="geometric_model_schema.triangulated_surface_set.wr:WR1">
	 The size of <b>pnindex</b>, if non-zero, shall be equal to <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.pnmax"/>.
</ext_description>

<!-- WR2 -->
<ext_description linkend="geometric_model_schema.triangulated_surface_set.wr:WR2">
<p>	<b>pnindex</b> shall not be empty unless <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.pnmax"/> is equal to the size of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> list. </p>
	 <note number="3"> This option can only be used in the simple case of a local <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> and 0 or 1 normals per point.
 </note>
</ext_description>

<!-- +++++++++++ complex_triangulated_surface_set +++++++++++ -->
<ext_description linkend="geometric_model_schema.complex_triangulated_surface_set">
	<p>A <b>complex_triangulated_surface_set</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set"/> defining the geometry by a set of triangles arranged in strips and fans. </p>
  <note number="1"> The ordering of the points used to define the strips or fans of triangles is shown in Figure <A href="#GMfig29"> (30) </A>.
  </note>

</ext_description>	
n>	

<!-- pnindex -->
<ext_description linkend="geometric_model_schema.complex_triangulated_surface_set.pnindex">
<p>	the list of integers defining the locations in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> list of the points and normals of the triangles; </p>
</ext_description>

<!-- triangle_strips -->
<ext_description linkend="geometric_model_schema.complex_triangulated_surface_set.triangle_strips">
	<p> the list  of lists of INTEGERs giving the locations of the coordinate values in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> list for each strip of triangles. Each sublist defines the orders in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> list, via the <b>pnindex</b> if used, of the  vertices of the <i>i</i>th strip of triangles. </p>
 <note number="2"> If required a single triangle can be included in this structure as a strip of one triangle, in which case the sublist will contain 3 INTEGERs. 
  </note>
</ext_description>

<!-- triangle_fans -->
<ext_description linkend="geometric_model_schema.complex_triangulated_surface_set.triangle_fans">
<p>	the list  of lists of INTEGERs giving the locations of the coordinate values in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> list for each fan of triangles. Each sublist defines the orders in the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> list of the  vertices of the <i>i</i>th fan of triangles.  </p>
  <note number="3">In the simplest case where no point is associated with more than 1 normal and the size of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> is <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.pnmax"/> the triangles defined by the strips and fans refer directly to the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> list and <b>pnindex</b> is empty. In all other cases <b>pnindex</b> is required to identify points and normals for the triangles.
 </note> 
</ext_description>


<!-- WR1 -->
<ext_description linkend="geometric_model_schema.complex_triangulated_surface_set.wr:WR1">
	 The size of <b>pnindex</b>, if non-zero, shall be equal to <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.pnmax"/>.
</ext_description>

<!-- WR2 -->
<ext_description linkend="geometric_model_schema.complex_triangulated_surface_set.wr:WR2">
<p>	<b>pnindex</b> shall not be empty unless <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.pnmax"/> is equal to the size of the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> list. </p>
	 <note number="4"> This option can only be used in the simple case of a local <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_surface_set.coordinates"/> and 0 or 1 normals per point.
 </note>
</ext_description>

<!-- WR3 -->
<ext_description linkend="geometric_model_schema.complex_triangulated_surface_set.wr:WR3">
	The <b>triangle_strips</b> list and the <b>triangle_fans</b> list shall not both be empty.
</ext_description>

<!-- +++++++++++ tessellated_curve_set +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_curve_set">
	<p>A <b>tessellated_curve_set</b> is a type of
	  <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_item"/> that is a tessellated representation of a  collection of curves. The geometry of each curve is defined as a list of points obtained via the <b>line_strips</b> attribute. </p>
</ext_description>	

<!-- coordinates -->
<ext_description linkend="geometric_model_schema.tessellated_curve_set.coordinates">
	 the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.coordinates_list"/> giving the  coordinate values for points of the curves;
</ext_description>

<!-- line_strips -->
<ext_description linkend="geometric_model_schema.tessellated_curve_set.line_strips">
	the list of lists of integers defining the locations in the <b>coordinates</b> list of the consecutive points for each curve;
</ext_description>

<!-- +++++++++++ tessellated_geometric_set +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_geometric_set">
	<p>A <b>tessellated_geometric_set</b> is a type of
	 <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_item"/> that is a collection of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set"/>s. </p>
</ext_description>	

<!-- children -->
<ext_description linkend="geometric_model_schema.tessellated_geometric_set.children">
	 the individual items of tessellated geometry;
</ext_description>

<!-- +++++++++++ tessellated_point_set +++++++++++ -->
<ext_description linkend="geometric_model_schema.tessellated_point_set">
	<p>A <b>tessellated_point_set</b> is a type of
	  <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.tessellated_item"/> that is a collection of points used to define tessellated geometry.  </p>
</ext_description>	

<!-- coordinates -->
<ext_description linkend="geometric_model_schema.tessellated_point_set.coordinates">
	 the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.coordinates_list"/> giving the  coordinate values for points of the set;
</ext_description>

<!-- point_list -->
<ext_description linkend="geometric_model_schema.tessellated_point_set.point_list">
	the list of locations in the <b>coordinates</b> list of the individual points of this set.
</ext_description>


<!-- Function definitions -->

<!-- +++++++++++ acyclic_solid_replica +++++++++++ -->
<ext_description linkend="geometric_model_schema.acyclic_solid_replica">
	 The <b>acyclic_solid_replica</b> boolean function is a
	recursive  function which determines whether, or not, a given
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_replica"/> participates in its own definition. The function
	returns FALSE if the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_replica"/> refers to itself, directly or
	indirectly, in its own definition.
</ext_description>

<!-- rep -->
<ext_description linkend="geometric_model_schema.acyclic_solid_replica.rep">
	(input) the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_replica"/> which is to be tested for a
cyclic reference;
</ext_description>

<!-- parent -->
<ext_description linkend="geometric_model_schema.acyclic_solid_replica.parent">
	(input) a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.solid_model"/> used in the definition of the replica;
</ext_description>

<!-- result -->
<ext_description linkend="geometric_model_schema.acyclic_solid_replica.result">
	(output) a BOOLEAN variable which is FALSE if <b>rep</b> is used in its own definition;
</ext_description>

<!-- +++++++++++ acyclic_set_replica +++++++++++ -->
<ext_description linkend="geometric_model_schema.acyclic_set_replica">
	 The <b>acyclic_set_replica</b> boolean function is a
	recursive  function which determines whether, or not, a given
	<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set_replica"/> participates in its own definition. The function
	returns FALSE if the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set_replica"/> refers to itself, directly or
	indirectly, in its own definition.
</ext_description>

<!-- rep -->
<ext_description linkend="geometric_model_schema.acyclic_set_replica.rep">
	(input) the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set_replica"/> which is to be tested for a
cyclic reference;
</ext_description>

<!-- parent -->
<ext_description linkend="geometric_model_schema.acyclic_set_replica.parent">
	(input) a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set"/> used in the definition of the replica;
</ext_description>

<!-- result -->
<ext_description linkend="geometric_model_schema.acyclic_set_replica.result">
	(output) a BOOLEAN variable which is FALSE if <b>rep</b> is used in its own definition;
</ext_description>

<!-- +++++++++++ constraints_geometry_shell_based_surface_model +++++++++++ -->
<ext_description linkend="geometric_model_schema.constraints_geometry_shell_based_surface_model">
	 The <b>constraints_geometry_shell_based_surface_model</b> boolean function  evaluates the geometric constraints on a
    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.shell_based_surface_model"/> and returns TRUE if they are
 satisfied.
</ext_description>

<!-- m -->
<ext_description linkend="geometric_model_schema.constraints_geometry_shell_based_surface_model.m">
	(input) the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.shell_based_surface_model"/> for which the
geometric constraints are to be checked;
</ext_description>


<!-- result -->
<ext_description linkend="geometry_schema.constraints_geometry_shell_based_surface_model.parent">
	(output) a BOOLEAN variable which is TRUE if the
boundary of <b>m</b> is made up entirely of <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.open_shell"/>s and
<express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.closed_shell"/>s.;
</ext_description>

<!-- +++++++++++ constraints_geometry_shell_based_surface_model +++++++++++ -->
<ext_description linkend="geometric_model_schema.constraints_geometry_shell_based_surface_model">
	 The <b>constraints_geometry_shell_based_surface_model</b> boolean function  evaluates the geometric constraints on a
    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.shell_based_surface_model"/> and returns TRUE if they are
 satisfied.
</ext_description>

<!-- m -->
<ext_description linkend="geometric_model_schema.constraints_geometry_shell_based_surface_model.m">
	(input) the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.shell_based_surface_model"/> for which the
geometric constraints are to be checked;
</ext_description>


<!-- result -->
<ext_description linkend="geometric_model_schema.constraints_geometry_shell_based_surface_model.parent">
	(output) a BOOLEAN variable which is TRUE if the
boundary of <b>m</b> is made up entirely of <express_ref linkend="topology_schema:ir_express:topology_schema.open_shell"/>s and
<express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/>s.;
</ext_description>

<!-- +++++++++++ constraints_geometry_shell_based_wireframe_model +++++++++++ -->
<ext_description linkend="geometric_model_schema.constraints_geometry_shell_based_wireframe_model">
	 The <b>constraints_geometry_shell_based_wireframe_model</b> boolean function  evaluates the geometric constraints on a
    <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.shell_based_wireframe_model"/> and returns TRUE if they are
 satisfied.
</ext_description>

<!-- m -->
<ext_description linkend="geometric_model_schema.constraints_geometry_shell_based_wireframe_model.m">
	(input) the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.shell_based_wireframe_model"/> for which the
geometric constraints are to be checked;
</ext_description>


<!-- result -->
<ext_description linkend="geometric_model_schema.constraints_geometry_shell_based_wireframe_model.parent">
	(output) a BOOLEAN variable which is TRUE if the
boundary of <b>m</b> is made up entirely of <express_ref linkend="topology_schema:ir_express:topology_schema.wire_shell"/>s and
<express_ref linkend="topology_schema:ir_express:topology_schema.vertex_shell"/>s.;
</ext_description>

<!-- +++++++++++ build_transformed_set +++++++++++ -->
<ext_description linkend="geometric_model_schema.build_transformed_set">
	  
 The <b>build_transformed_set</b> function builds a transformed set by applying
the input <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator"/>  to the  individual curve, point or surface elements of
the input <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.geometric_set"/>.
</ext_description>

<!-- tr -->
<ext_description linkend="geometric_model_schema.build_transformed_set.tr">
	(input) the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator"/>
defining the transformation;
</ext_description>

<!-- gset -->
<ext_description linkend="geometric_model_schema.build_transformed_set.gset">
	(input) the geometric set to be transformed;
</ext_description>

<!-- trset -->
<ext_description linkend="geometric_model_schema.build_transformed_set.trset">
	(output) the resulting transformed set;
</ext_description>


<!-- +++++++++++ msb_shells +++++++++++ -->
<ext_description linkend="geometric_model_schema.msb_shells">
	  
 The <b>msb_shells</b> function determines the set of all <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/>s used in
 the definition of a <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.manifold_solid_brep"/>. Special provision is
 made for the <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.brep_with_voids"/> subtype.
</ext_description>

<!-- brep -->
<ext_description linkend="geometric_model_schema.msb_shells.brep">
	(input) A <express_ref linkend="geometric_model_schema:ir_express:geometric_model_schema.manifold_solid_brep"/> for which a set of
<express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/> components is required.;
</ext_description>

<!-- result -->
<ext_description linkend="geometric_model_schema.msb_shells.result">
	(output) a SET of all the <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/>>s used to define
<b>brep</b>;
</ext_description>





</ext_descriptions>

