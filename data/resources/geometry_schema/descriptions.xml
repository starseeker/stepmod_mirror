<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl"
href="../../../xsl/descriptions.xsl"?>
<!DOCTYPE ext_descriptions SYSTEM "../../../dtd/description.dtd">
<ext_descriptions module_directory="geometry_schema"
	schema_file="geometry_schema.xml" rcs.date="$Date: 2016/04/26 12:33:42 $"
	rcs.revision="$Revision: 1.13 $" describe.selects="YES">
	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
		Schema: geometry_schema <express_ref linkend="geometry_schema:ir_express:geometry_schema"/> 
		++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<ext_description linkend="geometry_schema" />
	<!-- +++++++++++ dummy_gri +++++++++++ -->
	<ext_description linkend="geometry_schema.dummy_gri">
		<p>
			A
			<b>dummy_gri</b>
			is a partial entity definition to be used when
			types of
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item" />
			are constructed. It provides
			the correct supertypes and the
			<express_ref
				linkend="representation_schema:ir_express:representation_schema.representation_item.name" />
			attribute as an empty string.
		</p>
	</ext_description>
	<!-- +++++++++++ dimension_count +++++++++++ -->
	<ext_description linkend="geometry_schema.dimension_count">
		A
		<b>dimension_count</b>
		is a positive integer used to define the
		coordinate space dimensionality of a
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context" />
		.

	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.dimension_count.wr:WR1">
		A
		<b>dimension_count</b>
		shall be positive.
	</ext_description>
	<!-- +++++++++++ b_spline_curve_form +++++++++++ -->
	<ext_description linkend="geometry_schema.b_spline_curve_form">
		The
		<b>b_spline_curve_form</b>
		enumerated type is used to indicate that the
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.b_spline_curve" />
		represents a part
		of a curve of some specific form.
	</ext_description>
	<!-- polyline_form -->
	<ext_description linkend="geometry_schema.b_spline_curve_form.polyline_form">
		a connected sequence of line segments
		represented by degree 1 B-spline basis functions;
	</ext_description>
	<!-- circular_arc -->
	<ext_description linkend="geometry_schema.b_spline_curve_form.circular_arc">
		an arc of a circle, or a complete circle represented by a B-spline
		curve;
	</ext_description>
	<!-- elliptic_arc -->
	<ext_description linkend="geometry_schema.b_spline_curve_form.elliptic_arc">
		an arc of ellipse, or a complete ellipse represented by a B-spline
		curve;
	</ext_description>
	<!-- parabolic_arc -->
	<ext_description linkend="geometry_schema.b_spline_curve_form.parabolic_arc">
		an arc of finite length of a parabola represented by a B-spline curve;
	</ext_description>
	<!-- hyperbolic_arc -->
	<ext_description linkend="geometry_schema.b_spline_curve_form.hyperbolic_arc">
		an arc of finite length of an hyperbola represented by a B-spline curve;
	</ext_description>
	<!-- unspecified -->
	<ext_description linkend="geometry_schema.b_spline_curve_form.unspecified">
		a curve for which no particular form is specified;
	</ext_description>
	<!-- +++++++++++ b_spline_surface_form +++++++++++ -->
	<ext_description linkend="geometry_schema.b_spline_surface_form">
		The
		<b>b_spline_surface_form</b>
		enumerated type is used to indicate that the
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.b_spline_surface" />
		represents a part
		of a surface of some specific form.
	</ext_description>
	<!-- plane_surf -->
	<ext_description linkend="geometry_schema.b_spline_surface_form.plane_surf">
		a bounded portion of a plane represented by a
		B-spline surface of degree 1 in each parameter;
	</ext_description>
	<!-- cylindrical_surf -->
	<ext_description
		linkend="geometry_schema.b_spline_surface_form.cylindrical_surf">
		a bounded portion of a cylindrical surface;
	</ext_description>
	<!-- conical_surf -->
	<ext_description linkend="geometry_schema.b_spline_surface_form.conical_surf">
		a bounded portion of a right circular cone;
	</ext_description>
	<!-- spherical_surf -->
	<ext_description linkend="geometry_schema.b_spline_surface_form.spherical_surf">
		a bounded portion of a sphere, or a complete sphere, represented by a
		B-spline surface;
	</ext_description>
	<!-- toroidal_surf -->
	<ext_description linkend="geometry_schema.b_spline_surface_form.toroidal_surf">
		a torus, or portion of a torus, represented by a B-spline surface;
	</ext_description>
	<!-- surf_of_revolution -->
	<ext_description
		linkend="geometry_schema.b_spline_surface_form.surf_of_revolution">
		a bounded portion of a surface of revolution;
	</ext_description>
	<!-- ruled_surf -->
	<ext_description linkend="geometry_schema.b_spline_surface_form.ruled_surf">
		a surface constructed from two
		parametric curves by joining with straight lines corresponding points
		with the same parameter value on each of the curves.
	</ext_description>
	<!-- generalised_cone -->
	<ext_description
		linkend="geometry_schema.b_spline_surface_form.generalised_cone">
		a special case of a ruled surface in which the
		second curve degenerates to a single point; when represented by a
		B-spline surface all the control points along one edge will be coincident;
	</ext_description>
	<!-- quadric_surf -->
	<ext_description linkend="geometry_schema.b_spline_surface_form.quadric_surf">
		a bounded portion of one of the class of surfaces of
		degree 2 in the variables x, y and z;
	</ext_description>
	<!-- surf_of_linear_extrusion -->
	<ext_description
		linkend="geometry_schema.b_spline_surface_form.surf_of_linear_extrusion">
		a bounded portion of a surface of
		linear extrusion represented by a B-spline surface of degree 1 in one of the
		parameters;
	</ext_description>
	<!-- unspecified -->
	<ext_description linkend="geometry_schema.b_spline_surface_form.unspecified">
		a surface for which no particular form is specified;
	</ext_description>
	<!-- +++++++++++ extent_enumeration +++++++++++ -->
	<ext_description linkend="geometry_schema.extent_enumeration">
		The
		<b>extent_enumeration</b>
		type is used to describe the quantitive extent of an object.
	</ext_description>
	<!-- invalid -->
	<ext_description linkend="geometry_schema.extent_enumeration.invalid">
		the concept of extent is not valid for the quantity being measured;
	</ext_description>
	<!-- zero -->
	<ext_description linkend="geometry_schema.extent_enumeration.zero">
		the extent is zero;
	</ext_description>
	<!-- finite_non_zero -->
	<ext_description linkend="geometry_schema.extent_enumeration.finite_non_zero">
		the extent is finite (bounded) but not zero;
	</ext_description>
	<!-- infinite -->
	<ext_description linkend="geometry_schema.extent_enumeration.infinite">
		the extent is not finite;
	</ext_description>
	<!-- +++++++++++ knot_type +++++++++++ -->
	<ext_description linkend="geometry_schema.knot_type">
		The
		<b>knot_type</b>
		indicates that the B-spline knots have a particularly
		simple form enabling the knots themselves to be defaulted;
	</ext_description>
	<!-- uniform_knots -->
	<ext_description linkend="geometry_schema.knot_type.uniform_knots">
		the form of knots appropriate for a uniform B-spline curve or surface;
	</ext_description>
	<!-- unspecified -->
	<ext_description linkend="geometry_schema.knot_type.unspecified">
		the type of knots is not specified; this includes the case of non uniform
		knots;
	</ext_description>
	<!-- quasi_uniform_knots -->
	<ext_description linkend="geometry_schema.knot_type.quasi_uniform_knots">
		the form of knots appropriate for a quasi-uniform B-spline curve or
		surface;
	</ext_description>
	<!-- piecewise_bezier_knots -->
	<ext_description linkend="geometry_schema.knot_type.piecewise_bezier_knots">
		the form of knots appropriate for a piecewise B&#233;zier curve;
	</ext_description>
	<!-- +++++++++++ linearly_independent_enum +++++++++++ -->
	<ext_description linkend="geometry_schema.linearly_independent_enum">
		This type is used to indicate that a locally refined spline has been
		tested for linear independence.
	</ext_description>
	<!-- independent -->
	<ext_description
		linkend="geometry_schema.linearly_independent_enum.independent">
		the set of combined B-spline functions is linearly independent;
	</ext_description>
	<!-- not_independent -->
	<ext_description
		linkend="geometry_schema.linearly_independent_enum.not_independent">
		the set of B-spline functions is linearly dependent;
	</ext_description>
	<!-- not_tested -->
	<ext_description linkend="geometry_schema.linearly_independent_enum.not_tested">
		the set of B-spline functions has not been tested for linear dependence.
	</ext_description>
	<!-- +++++++++++ locally_refined_spline_type_enum +++++++++++ -->
	<ext_description linkend="geometry_schema.locally_refined_spline_type_enum">
		This type is used to indicate the type of the original locally refined
		spline to enable the standardized spline representation to be unpacked
		to this original format.
		<note>
			<p> See [6], [7] and [15] for further details of the specific types
				of locally refined splines.

			</p>
		</note>
	</ext_description>
	<!-- analysis_suitable_t_spline -->
	<ext_description
		linkend="geometry_schema.locally_refined_spline_type_enum.analysis_suitable_t_spline">
		the local B-spline is of the analysis suitable t-spline type;
	</ext_description>
	<!-- hierarchical_b_spline -->
	<ext_description
		linkend="geometry_schema.locally_refined_spline_type_enum.hierarchical_b_spline">
		the local B-spline is of the hierachical b-spline type;
	</ext_description>
	<!-- lr_b_spline -->
	<ext_description
		linkend="geometry_schema.locally_refined_spline_type_enum.lr_b_spline">
		the local B-spline is of the lr-b-spline type;
	</ext_description>
	<!-- semi_standard_t_spline -->
	<ext_description
		linkend="geometry_schema.locally_refined_spline_type_enum.semi_standard_t_spline">
		the local B-spline is of the semi-standard t-spline type;
	</ext_description>
	<!-- standard_t_spline -->
	<ext_description
		linkend="geometry_schema.locally_refined_spline_type_enum.standard_t_spline">
		the local B-spline is of the standard t-spline type;
	</ext_description>
	<!-- +++++++++++ preferred_surface_curve_representation +++++++++++ -->
	<ext_description
		linkend="geometry_schema.preferred_surface_curve_representation">
		The
		<b>preferred_surface_curve_representation</b>
		type is used to indicate the preferred form of representation for a
		surface curve, which is either a curve in geometric space or in the
		parametric space of the underlying surfaces;
	</ext_description>
	<!-- curve_3d -->
	<ext_description
		linkend="geometry_schema.preferred_surface_curve_representation.curve_3d">
		the curve in three-dimensional space is preferred;
	</ext_description>
	<!-- pcurve_s1 -->
	<ext_description
		linkend="geometry_schema.preferred_surface_curve_representation.pcurve_s1">
		the first pcurve is preferred;
	</ext_description>
	<!-- quasi_uniform_knots -->
	<!-- pcurve_s2 -->
	<ext_description
		linkend="geometry_schema.preferred_surface_curve_representation.pcurve_s2">
		the second pcurve is preferred;
	</ext_description>
	<!-- +++++++++++ spline_knot_values +++++++++++ -->
	<ext_description linkend="geometry_schema.spline_knot_values">
		The
		<b>spline_knot_values</b>
		type defines a list of non-repeated real values in ascending order. It
		is used to represent the knot values in the definition of local
		B-splines. A local B-spline does not need to use all consecutive
		knots, and multiple use of knots may occur.
	</ext_description>
	<!-- discontinuous -->
	<ext_description linkend="geometry_schema.transition_code.discontinuous">
		the segments, or patches, do not join;
		this is permitted only at the boundary of the curve or surface to
		indicate that it is not closed.
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.spline_knot_values.wr:WR1">
		The knot values shall be strictly increasing in size.
	</ext_description>
	<!-- +++++++++++ transition_code +++++++++++ -->
	<ext_description linkend="geometry_schema.transition_code">
		The
		<b>transition_code</b>
		type conveys the continuity properties of a composite curve or
		surface. The continuity referred to is geometric, not parametric
		continuity.
	</ext_description>
	<!-- discontinuous -->
	<ext_description linkend="geometry_schema.transition_code.discontinuous">
		the segments, or patches, do not join;
		this is permitted only at the boundary of the curve or surface to
		indicate that it is not closed.
	</ext_description>
	<!-- continuous -->
	<ext_description linkend="geometry_schema.transition_code.continuous">
		the segments, or patches, join, but no condition on their tangents is
		implied;
	</ext_description>
	<!-- cont_same_gradient -->
	<ext_description linkend="geometry_schema.transition_code.cont_same_gradient">
		the segments, or patches, join, and their
		tangent vectors, or tangent planes, are parallel and have the
		same direction at the joint; equality of derivatives is not required;
	</ext_description>
	<!-- pcont_same_gradient_same_curvature -->
	<ext_description
		linkend="geometry_schema.transition_code.cont_same_gradient_same_curvature">
		the gradient and curvature are continuous; for a curve, the
		segments join, their tangent vectors are parallel and in the same
		direction, and their curvatures are equal at the joint; equality of
		derivatives is not required; for a surface this implies that the
		principal curvatures are the same and that the principal directions are
		coincident along the common boundary.
	</ext_description>
	<!-- +++++++++++ trimming_preference +++++++++++ -->
	<ext_description linkend="geometry_schema.trimming_preference">
		The
		<b>trimming_preference</b>
		type is used to indicate the preferred way of trimming a parametric
		curve where the trimming is multiply defined.
	</ext_description>
	<!-- cartesian -->
	<ext_description linkend="geometry_schema.trimming_preference.cartesian">
		trimming by cartesian point is preferred;
	</ext_description>
	<!-- parameter -->
	<ext_description linkend="geometry_schema.trimming_preference.parameter">
		trimming by parameter value is preferred;;
	</ext_description>
	<!-- unspecified -->
	<ext_description linkend="geometry_schema.trimming_preference.unspecified">
		no trimming preference is communicated;
	</ext_description>
	<!-- +++++++++++ axis2_placement +++++++++++ -->
	<ext_description linkend="geometry_schema.axis2_placement">
		The
		<b>axis2_placement</b>
		select type represents the placing of mutually perpendicular axes
		in two-dimensional or in three-dimensional Cartesian space.

		<note>
			<p> This select type enables entities requiring
				axis placement information to reference the axes without
				specifying the space dimensionality.

			</p>
		</note>
	</ext_description>
	<!-- +++++++++++ curve_on_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.curve_on_surface">
		<p>
			The
			<b>curve_on_surface</b>
			is a curve on a parametric surface. It
			may be a
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve" />, or a
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.surface_curve" /> including the specialised subtypes of

			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.intersection_curve" />
			and
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.seam_curve" />, or a
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.composite_curve_on_surface" />.
		</p>
	</ext_description>
	<!-- +++++++++++ curve_or_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.curve_or_surface">
		This select type enables a surface curve to identify as an attribute
		the
		associated
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface" />
		surface or
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve" />
		.
	</ext_description>
	<!-- +++++++++++ surface_boundary +++++++++++ -->
	<ext_description linkend="geometry_schema.surface_boundary">
		This type is used to select the type of bounding curve to be used in
		the
		definition of a
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.curve_bounded_surface" />
		. It provides for the
		boundary to be either a
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.boundary_curve" />
		or a
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.degenerate_pcurve" />
		.
	</ext_description>
	<!-- +++++++++++ trimming_select +++++++++++ -->
	<ext_description linkend="geometry_schema.trimming_select">
		This select type identifies the two possible ways of trimming a
		parametric curve, by a cartesian point on the curve, or by a REAL number
		defining a parameter value within the parametric range of the curve.
	</ext_description>
	<!-- +++++++++++ vector_or_direction +++++++++++ -->
	<ext_description linkend="geometry_schema.vector_or_direction">
		This type is used to identify the types of entity which can participate in
		vector computations.
	</ext_description>
	<!-- +++++++++++ geometric_representation_context +++++++++++ -->
	<ext_description linkend="geometry_schema.geometric_representation_context">
		<p>
			A
			<b>geometric_representation_context</b>
			is a type of
			<express_ref
				linkend="representation_schema:ir_express:representation_schema.representation_context" />
			in which
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item" />
			s are geometrically founded.
		</p>
		<p>
			A
			<b>geometric_representation_context</b>
			is a distinct coordinate space,
			spatially unrelated to other coordinate spaces except as those coordinate
			spaces
			are specifically related by an appropriate transformation. (See
			3.2 for definitions of geometrically founded and coordinate space.)
		</p>
	</ext_description>
	<!-- coordinate_space_dimension -->
	<ext_description
		linkend="geometry_schema.geometric_representation_context.coordinate_space_dimension">
		<p>
			the number of dimensions of the
			coordinate space which is the
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context" />
		</p>
		<note>
			Any constraints on the allowed range of
			<b>coordinate_space_dimension</b>
			are
			outside the scope of this part of ISO 10303.
		</note>
	</ext_description>
	<!-- +++++++++++ geometric_representation_item +++++++++++ -->
	<ext_description linkend="geometry_schema.geometric_representation_item">
		<p>
			A
			<b>geometric_representation_item</b>
			is a type of
			<express_ref
				linkend="representation_schema:ir_express:representation_schema.representation_item" />
			that
			has the additional meaning of having geometric position or orientation
			or both.
		</p>
		<p>This meaning is present by virtue of:</p>
		<ul>
			<li>
				being a
				<express_ref
					linkend="geometry_schema:ir_express:geometry_schema.cartesian_point" />
				or a
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction" />
				;
			</li>
			<li>
				referencing directly a
				<express_ref
					linkend="geometry_schema:ir_express:geometry_schema.cartesian_point" />
				or a
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction" />
				;
			</li>
			<li>
				referencing indirectly a
				<express_ref
					linkend="geometry_schema:ir_express:geometry_schema.cartesian_point" />
				or a
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction" />
				.
			</li>
		</ul>
		<note number="1">
			An indirect reference to a
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.cartesian_point" />
			or a
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction" />
			means that a given
			<b>geometric_representation_item</b>
			references
			the
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.cartesian_point" />
			or
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction" />
			through one or more intervening
			attributes. In many cases this information is given in the form of an
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.axis2_placement" />
			.
		</note>
		<example number="1">
			Consider a circle. It gains its geometric position and orientation by
			virtue of a reference to an
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.axis2_placement" />
			that in turn references a
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.cartesian_point" />
			and several
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction" />
			s.
		</example>
		<example number="2">
			A
			<express_ref
				linkend="geometric_model_schema:ir_express:geometric_model_schema.manifold_solid_brep" />
			is a
			<b>geometric_representation_item</b>
			that through several layers of
			<express_ref
				linkend="topology_schema:ir_express:topology_schema.topological_representation_item" />
			s,
			references
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve" />
			s,
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface" />
			s and
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.point" />
			s.
			Through additional intervening entities curves and surfaces reference
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.cartesian_point" />
			and
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction" />
			.
		</example>
		<note number="2">

			The intervening entities, which are all of type
			<express_ref
				linkend="representation_schema:ir_express:representation_schema.representation_item" />
			, need
			not be of subtype
			<b>geometric_representation_item</b>
			.
			Consider the
			<express_ref
				linkend="geometric_model_schema:ir_express:geometric_model_schema.manifold_solid_brep" />
			from the above
			example. One of the intervening levels of
			<express_ref
				linkend="representation_schema:ir_express:representation_schema.representation_item" />
			is a
			<express_ref
				linkend="topology_schema:ir_express:topology_schema.closed_shell" />
			.
			This is a
			<express_ref
				linkend="topology_schema:ir_express:topology_schema.topological_representation_item" />
			and does not require a
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context" />
			in its own right.
			When used as part of the definition of a
			<express_ref
				linkend="geometric_model_schema:ir_express:geometric_model_schema.manifold_solid_brep" />
			that
			itself is a
			<b>geometric_representation_item</b>
			, it is founded in a
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context" />
			.
		</note>
		<note number="3">
			A
			<b>geometric_representation_item</b>
			inherits the need to be related
			to a
			<express_ref
				linkend="representation_schema:ir_express:representation_schema.representation_context" />
			in a
			<express_ref
				linkend="representation_schema:ir_express:representation_schema.representation" />
			.
			The rule
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.compatible_dimension" />
			ensures that the
			<express_ref
				linkend="representation_schema:ir_express:representation_schema.representation_context" />
			is a
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context" />
			. When in the
			context of geometry, this relationship causes the
			<b>geometric_representation_item</b>
			to be geometrically founded.
		</note>
		<note number="4">
			As subtypes of
			<express_ref
				linkend="representation_schema:ir_express:representation_schema.representation_item" />
			there is an implicit and/or
			relationship between
			<b>geometric_representation_item</b>
			and
			<express_ref
				linkend="topology_schema:ir_express:topology_schema.topological_representation_item" />
			. The only complex instances intended to
			be created are
			<express_ref linkend="topology_schema:ir_express:topology_schema.edge_curve" />
			,
			<express_ref
				linkend="topology_schema:ir_express:topology_schema.face_surface" />
			, and
			<express_ref
				linkend="topology_schema:ir_express:topology_schema.vertex_point" />
		</note>
	</ext_description>
	<!-- dim -->
	<ext_description linkend="geometry_schema.geometric_representation_item.dim">
		the coordinate
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.dimension_count" />
		of the
		<b>geometric_representation_item</b>
		.
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.geometric_representation_item.wr:WR1">
		<p>
			The context of any representation referencing a
			<b>geometric_representation_item"</b>
			shall be a
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context" />
			.
		</p>
		<note number="5">
			The
			<b>dim</b>
			attribute is derived from the
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context.coordinate_space_dimension" />
			of a
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context" />
			in which the
			<b>geometric_representation_item</b>
			is geometrically founded.
		</note>
		<note number="6">
			A
			<b>geometric_representation_item</b>
			is geometrically founded in one or
			more
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context" />
			s, all of which have the same
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context.coordinate_space_dimension" />
			. See the rule
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.compatible_dimension" />
			.
		</note>
	</ext_description>
	<!-- +++++++++++ point +++++++++++ -->
	<ext_description linkend="geometry_schema.point">
		<p>
			A
			<b>point</b>
			is a type of
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item" />
			and is a location in some real Cartesian coordinate space R
			<sup>
				<i>m</i>
			</sup>
			, for
			<i>m</i>
			= 1 2 or 3.
		</p>
	</ext_description>
	<!-- +++++++++++ cartesian_point +++++++++++ -->
	<ext_description linkend="geometry_schema.cartesian_point">
		A
		<b>cartesian_point</b>
		is a type of
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.point" />
		defined by its coordinates in a rectangular Cartesian coordinate
		system, or in a parameter
		space.
		The entity is defined in a one, two or three-dimensional space as
		determined by the number of coordinates in the list.

		<note number="1"> For the purposes of defining geometry in this part
			of ISO 10303
			only two or three-dimensional points are used.
		</note>
		<note number="2">
			Depending upon the
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context" />
			in
			which the point is used the names of the coordinates may be
			<i>(x,y,z)</i>
			, or
			<i>(u,v),</i>
			or any other chosen values.
		</note>
	</ext_description>
	<!-- coordinates -->
	<ext_description linkend="geometry_schema.cartesian_point.coordinates">
		<p>the ordered list of 1, 2 or 3 coordinate values, according to the
			dimensionality of the space in which the point is defined;</p>
		<p>
			<b>coordinates[1]</b>
			The component in the direction of the first axis, X or, in parameter
			space u;
		</p>
		<p>
			<b>coordinates[2]</b>
			The component in the direction of the second axis Y, or in a
			parameter space v;
		</p>
		<p>
			<b>coordinates[3]</b>
			The component in the direction of the Z axis; this will not be
			present in the case of a
			<b>cartesian_point</b>
			in a
			two-dimensional coordinate space.
		</p>
	</ext_description>
	<!-- coordinates -->
	<ext_description
		linkend="geometry_schema.cartesian_point\geometric_representation_item.dim">
		The dimensionality of the space in which the
		<b>cartesian_point</b>
		is
		defined. This is an inherited derived attribute from the geometric
		representation item supertype and for a cartesian point is determined
		by the number of coordinates in the list.
	</ext_description>
	<!-- +++++++++++ cylindrical_point +++++++++++ -->
	<ext_description linkend="geometry_schema.cylindrical_point">
		A
		<b>cylindrical_point</b>
		is a type of
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.cartesian_point" />
		which uses a cylindrical
		polar coordinate system, centred at the origin of the corresponding
		Cartesian coordinate system, to define its location.

	</ext_description>
	<!-- r -->
	<ext_description linkend="geometry_schema.cylindrical_point.r">
		the distance from the point to the z axis;
	</ext_description>
	<!-- theta -->
	<ext_description linkend="geometry_schema.cylindrical_point.theta">
		the angle between the plane containing the point and
		the z axis and the xz plane;
	</ext_description>
	<!-- z -->
	<ext_description linkend="geometry_schema.cylindrical_point.z">
		the distance from the xy plane to the point.
	</ext_description>
	<!-- coordinates -->
	<ext_description linkend="geometry_schema.cylindrical_point.coordinates">
		the rectangular cartesian coordinates of this point;
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.cylindrical_point.wr:WR1">
		The radius
		<b>r</b>
		shall be greater than, or equal to zero.
	</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.cylindrical_point.wr:IP1">
		The value of
		<b>theta</b>
		shall lie in the range 0 &#8804;
		<b>theta</b>
		0 &lt; 360&#176;.
	</ext_description>
	<!-- +++++++++++ spherical_point +++++++++++ -->
	<ext_description linkend="geometry_schema.spherical_point">
		A
		<b>spherical_point</b>
		is a type of
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.cartesian_point" />
		which uses a spherical polar coordinate system, centred at the origin
		of the corresponding Cartesian coordinate system,
		to define its location.

	</ext_description>
	<!-- r -->
	<ext_description linkend="geometry_schema.spherical_point.r">
		the distance from the point to the z axis;
	</ext_description>
	<!-- theta -->
	<ext_description linkend="geometry_schema.spherical_point.theta">
		the angle &#952; between the z axis and the line joining the
		origin to the point;
	</ext_description>
	<!-- phi -->
	<ext_description linkend="geometry_schema.spherical_point.phi">
		the angle &#966; measured from the x axis to the projection onto
		the xy plane of the line from the origin to the point.
	</ext_description>
	<!-- coordinates -->
	<ext_description linkend="geometry_schema.spherical_point.coordinates">
		<p> the rectangular cartesian coordinates of this point; </p>
		<note>
			See Figure 2 for an illustration of the attributes.
		</note>
		<figure id="Geomfig2" number="2">
			<title>Spherical point attributes</title>
			<img src="Geomfig2.gif" />
		</figure>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.spherical_point.wr:WR1">
		The radius
		<b>r</b>
		shall be greater than, or equal to zero.
	</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.spherical_point.wr:IP1">
		The value of
		<b>theta</b>
		shall lie in the range 0 &#8804;
		<b>theta</b>
		&#8804; 180&#176;.
	</ext_description>
	<!-- IP2 -->
	<ext_description linkend="geometry_schema.spherical_point.wr:IP2">
		The value of
		<b>phi</b>
		shall lie in the range 0 &#8804;
		<b>phi</b>
		0 &lt; 360&#176;.
	</ext_description>
	<!-- +++++++++++ polar_point +++++++++++ -->
	<ext_description linkend="geometry_schema.polar_point">
		A
		<b>polar_point</b>
		is a type of
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.cartesian_point" />
		which uses a two dimensional polar coordinate system, centred at the
		origin of the corresponding
		Cartesian coordinate system, to define its location.

	</ext_description>
	<!-- r -->
	<ext_description linkend="geometry_schema.polar_point.r">
		the distance from the point to the origin;
	</ext_description>
	<!-- theta -->
	<ext_description linkend="geometry_schema.polar_point.theta">
		the angle between the x axis and the line joining the
		origin to the point.
	</ext_description>
	<!-- coordinates -->
	<ext_description linkend="geometry_schema.polar_point.coordinates">
		the rectangular cartesian coordinates of this point;
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.polar_point.wr:WR1">
		The radius
		<b>r</b>
		shall be greater than, or equal to zero.
	</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.polar_point.wr:IP1">
		The value of
		<b>theta</b>
		shall lie in the range 0 &#8804;
		<b>theta</b>
		&lt; 360&#176;.
	</ext_description>
	<!-- +++++++++++ point_on_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.point_on_curve">
		A
		<b>point_on_curve</b>
		is a type of
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.point" />
		which lies on a
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve" />
		. The point is determined by evaluating the
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve" />
		at a
		specific parameter value. The coordinate space dimensionality of the
		point is that of the
		<b>basis_curve</b>
		.

	</ext_description>
	<!-- basis_curve -->
	<ext_description linkend="geometry_schema.point_on_curve.basis_curve">
		the
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve" />
		to which
		<b>point_parameter</b>
		relates;
	</ext_description>
	<!-- point_parameter -->
	<ext_description linkend="geometry_schema.point_on_curve.point_parameter">
		the parameter value of the point location;
	</ext_description>
	<!-- SELF\geometric_representation_item.dim -->
	<ext_description
		linkend="geometry_schema.point_on_curve\geometric_representation_item.dim">
		the dimensionality of the space in which the
		<b>point_on_curve</b>
		is
		defined. This is the same as that of the
		<b>basis_curve</b>
		.
	</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.point_on_curve.wr:IP1">
		The value of the
		<b>point_parameter</b>
		shall not be outside
		the parametric range of the
		<b>basis_curve</b>
		.
	</ext_description>
	<!-- +++++++++++ point_on_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.point_on_surface">
		A
		<b>point_on_surface</b>
		is a type of
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.point" />
		which lies on a
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface" />
		. The point is determined by evaluating the
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface" />
		at a
		specific pair of parameter values.

	</ext_description>
	<!-- basis_surface -->
	<ext_description linkend="geometry_schema.point_on_surface.basis_surface">
		the
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface" />
		to which parameter values relate;
	</ext_description>
	<!-- point_parameter_u -->
	<ext_description linkend="geometry_schema.point_on_surface.point_parameter_u">
		the first parameter value of the point location;
	</ext_description>
	<!-- point_parameter_v -->
	<ext_description linkend="geometry_schema.point_on_surface.point_parameter_v">
		the second parameter value of the point location.
	</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.point_on_surface.wr:IP1">
		The parametric values specified for u and v shall not be
		outside the parametric range of the
		<b>basis_surface</b>
		.
	</ext_description>
	<!-- +++++++++++ point_in_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.point_in_volume">
		A
		<b>point_in_volume</b>
		is a type of
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.point" />
		which lies inside, or on the
		the surface of, a
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.point" />
		. The point is determined by evaluating the
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.point" />
		at the specified parameter values.

	</ext_description>
	<!-- basis_volume -->
	<ext_description linkend="geometry_schema.point_in_volume.basis_volume">
		the
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.volume" />
		to which parameter values relate;
	</ext_description>
	<!-- point_parameter_u -->
	<ext_description linkend="geometry_schema.point_in_volume.point_parameter_u">
		the first parameter value of the point location;
	</ext_description>
	<!-- point_parameter_v -->
	<ext_description linkend="geometry_schema.point_in_volume.point_parameter_v">
		the second parameter value of the point location.
	</ext_description>
	<!-- point_parameter_w -->
	<ext_description linkend="geometry_schema.point_in_volume.point_parameter_w">
		the third parameter value of the point location.
	</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.point_in_volume.wr:IP1">
		The parametric values specified for u, v and w shall not be
		outside the parametric range of the
		<b>basis_volume</b>
		.
	</ext_description>
	<!-- +++++++++++ point_replica +++++++++++ -->
	<ext_description linkend="geometry_schema.point_replica">
		A
		<b>point_replica</b>
		is a type of
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.point" />
		that defines a replica of an existing point (the parent) in a
		different location. The replica has the same coordinate space
		dimensionality as the parent point.

	</ext_description>
	<!-- parent_pt -->
	<ext_description linkend="geometry_schema.point_replica.parent_pt">
		the
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.point" />
		to be replicated;
	</ext_description>
	<!-- transformation -->
	<ext_description linkend="geometry_schema.point_replica.transformation">
		the Cartesian transformation operator
		which defines the location of the point replica.
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.point_replica.wr:WR1">
		The coordinate space dimensionality of the
		<b>transformation</b>
		attribute shall be the same
		as that of the
		<b>parent_pt</b>
		.
	</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.point_replica.wr:WR2">
		A
		<b>point_replica</b>
		shall not participate in its own definition.
	</ext_description>
	<!-- +++++++++++ degenerate_pcurve +++++++++++ -->
	<ext_description linkend="geometry_schema.degenerate_pcurve">
		A
		<b>degenerate_pcurve</b>
		is a type of
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.point" />
		that is defined as a parameter space curve, but in
		three-dimensional model space it collapses to a single
		point. It is thus a subtype of
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.point" />
		, not of
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve" />
		.
		<note>
			For example, the apex of a cone could be represented as a
			<b>degenerate_pcurve</b>
			.
		</note>
	</ext_description>
	<!-- basis_surface -->
	<ext_description linkend="geometry_schema.degenerate_pcurve.basis_surface">
		the surface on which the
		<b>degenerate_pcurve</b>
		lies;
	</ext_description>
	<!-- reference_to_curve -->
	<ext_description linkend="geometry_schema.degenerate_pcurve.reference_to_curve">
		the association of the
		<b>degenerate_pcurve</b>
		and the parameter space curve which degenerates to the (equivalent)
		point.
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.degenerate_pcurve.wr:WR1">
		The set of items in the
		<express_ref
			linkend="representation_schema:ir_express:representation_schema.definitional_representation" />
		entity corresponding to the
		<b>reference_to_curve</b>
		shall have exactly one element
	</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.degenerate_pcurve.wr:WR2">
		The unique item in the set shall be a
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve" />
		.
	</ext_description>
	<!-- WR3 -->
	<ext_description linkend="geometry_schema.degenerate_pcurve.wr:WR3">
		The dimensionality of this parameter space curve shall be 2.
	</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.degenerate_pcurve.wr:IP1">
		Regarded as a curve in model space, the
		<b>degenerate_pcurve</b>
		shall
		have zero arc length.
	</ext_description>
	<!-- +++++++++++ evaluated_degenerate_pcurve +++++++++++ -->
	<ext_description linkend="geometry_schema.evaluated_degenerate_pcurve">
		A
		<b>evaluated_degenerate_pcurve</b>
		is a type of
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.degenerate_pcurve" />
		which gives the result of evaluating the
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve" />
		and
		associates it with the corresponding
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.cartesian_point" />
		.
		<note>
			For example, the apex of a cone could be represented as a
			<b>evaluated_degenerate_pcurve</b>
			.
		</note>
	</ext_description>
	<!-- equivalent_point -->
	<ext_description
		linkend="geometry_schema.evaluated_degenerate_pcurve.equivalent_point">
		the explicit point in the geometric coordinate system
		represented by the degenerate pcurve.
	</ext_description>
	<!-- +++++++++++ direction +++++++++++ -->
	<ext_description linkend="geometry_schema.direction">
		A
		<b>direction</b>
		is a type of
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item" />
		that defines a general direction
		vector in two or three
		dimensional space. The actual magnitudes of the components have no
		effect upon the direction being defined, only the ratios x:y:z or x:y, or,
		in parameter space u:v,
		are significant.
		<note number="1"> The components of this entity are not normalised.
			If
			a unit vector is required it should be normalised before use.
		</note>
	</ext_description>
	<!-- direction_ratios -->
	<ext_description linkend="geometry_schema.direction.direction_ratios">
		<p> list of REAL; </p>
		<note number="2">
			The
			<b>direction_ratios</b>
			attribute is a list, the
			individual elements of this list are defined below.
		</note>
		<p>
			<b>direction_ratios[1]</b>
			The component in the direction of the first axis, X or, in parameter
			space u;
		</p>
		<p>
			<b>direction_ratios[2]</b>
			The component in the direction of the second axis Y, or in a
			parameter space v;
		</p>
		<p>
			<b>direction_ratios[3]</b>
			The component in the direction of the Z axis; this will not be
			present in the case of a direction in a
			two-dimensional coordinate space.
		</p>
	</ext_description>
	<!-- SELF\geometric_representation_item.dim -->
	<ext_description
		linkend="geometry_schema.direction\geometric_representation_item.dim">
		the coordinate space dimensionality of the
		<b>direction</b>
		. This is an inherited attribute
		of the
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item" />
		supertype; for this entity
		it is determined by the number of
		<b>direction_ratios</b>
		in the list.
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.direction.wr:WR1">
		The magnitude of the direction vector shall be greater than
		zero.
	</ext_description>
	<!-- +++++++++++ vector +++++++++++ -->
	<ext_description linkend="geometry_schema.vector">
		A
		<b>vector</b>
		is a type of
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item" />
		that defines a vector in terms of the direction and the magnitude of
		the vector.
		<note>
			The magnitude of the vector must not be calculated from the
			components of the
			<b>orientation</b>
			attribute. This form of representation was
			selected to reduce problems
			with numerical instability. For example a vector of magnitude 2.0 mm
			and equally inclined to the coordinate axes could be represented with
			orientation attribute of (1.0,1.0,1.0) and magnitude attribute 2.0.
		</note>
	</ext_description>
	<!-- orientation -->
	<ext_description linkend="geometry_schema.vector.orientation">
		the direction of the
		<b>vector</b>
		.
	</ext_description>
	<!-- magnitude -->
	<ext_description linkend="geometry_schema.vector.magnitude">
		the magnntude of the
		<b>vector</b>
		. All
		<b>vector</b>
		s of
		<b>magnitude</b>
		0.0 are regarded as equal in value regardless of the
		<b>orientation</b>
		attribute.
	</ext_description>
	<!-- SELF\geometric_representation_item.dim -->
	<ext_description
		linkend="geometry_schema.vector\geometric_representation_item.dim">
		the coordinate space dimensionality of the
		<b>vector</b>
		.
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.vector.wr:WR1">
		The
		<b>magnitude</b>
		shall be positive or zero.
	</ext_description>
	<!-- +++++++++++ placement +++++++++++ -->
	<ext_description linkend="geometry_schema.placement">
		A
		<b>placement</b>
		is a type of
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item" />
		that locates a geometric item with respect to the coordinate system of
		its geometric context. It locates
		the item to be defined and, in the case of the axis placement subtypes,
		gives its orientation.
	</ext_description>
	<!-- location -->
	<ext_description linkend="geometry_schema.placement.location">
		the geometric position of a reference point, such as the
		centre of a circle, of the item to be located
	</ext_description>
	<!-- +++++++++++ axis1_placement +++++++++++ -->
	<ext_description linkend="geometry_schema.axis1_placement">
		A
		<b>axis1_placement</b>
		is a type of
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.placement" />
		, that represents the direction and location in three-dimensional
		space of a single axis.
		An
		<b>axis1_placement</b>
		is defined in terms of a locating point
		(inherited from the placement supertype) and an axis direction;
		this is either the direction of
		<b>axis</b>
		or defaults to
		(0.0,0.0,1.0). The actual direction for the
		<b>axis1_placement</b>
		is given by
		the derived attribute
		<b>z</b>
		.
	</ext_description>
	<!-- SELF\placement.location -->
	<ext_description linkend="geometry_schema.axis1_placement\placement.location">
		a reference point on the
		<b>axis</b>
	</ext_description>
	<!-- axis -->
	<ext_description linkend="geometry_schema.axis1_placement.axis">
		the direction of the local Z axis;
	</ext_description>
	<!-- z -->
	<ext_description linkend="geometry_schema.axis1_placement.z">
		the normalised direction of the local Z axis;
	</ext_description>
	<!-- SELF\geometric_representation_item.dim -->
	<ext_description
		linkend="geometry_schema.axis1_placement\geometric_representation_item.dim">
		the coordinate space dimensionality of the
		<b>axis1_placement</b>
		which is determined from
		its
		<b>location</b>
		, and is always equal to 3.
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.axis1_placement.wr:WR1">
		The coordinate space dimensionality shall be 3.
	</ext_description>
	<!-- +++++++++++ axis2_placement_2d +++++++++++ -->
	<ext_description linkend="geometry_schema.axis2_placement_2d">
		A
		<b>axis2_placement_2d</b>
		is a type of
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.placement" />
		that represents the location and orientation in two-dimensional space
		of two mutually
		perpendicular axes. An
		<b>axis2_placement_2d</b>
		is defined
		in terms of a point, (inherited from the placement supertype), and an
		axis. It can be used to locate and orientate an object in
		two-dimensional space and to define a placement coordinate system.
		The entity includes a point which forms the origin of the placement
		coordinate system. A direction vector is required to complete the
		definition of the placement coordinate system. The
		<b>ref_direction</b>
		defines the placement X axis direction; the placement
		Y axis direction is derived from this.
	</ext_description>
	<!-- SELF\placement.location -->
	<ext_description
		linkend="geometry_schema.axis2_placement_2d\placement.location">
		the spatial position of the reference point which defines the origin of
		the associated placement
		coordinate system.
	</ext_description>
	<!-- ref_direction -->
	<ext_description linkend="geometry_schema.axis2_placement_2d.ref_direction">
		the direction used to determine the direction of the local X axis. If
		<b>ref_direction</b>
		is omitted, this direction
		is taken from the geometric coordinate system;
	</ext_description>
	<!-- p -->
	<ext_description linkend="geometry_schema.axis2_placement_2d.p">
		<p>the axis set for the placement coordinate system. </p>
		<p>
			<b>p[1]</b>
			The normalised direction of the placement X axis. This is
			(1.0,0.0) if
			<b>ref_direction</b>
			is omitted.
		</p>
		<p>
			<b>p[2]</b>
			The normalised direction of the placement Y axis. This is a
			derived attribute and is orthogonal to
			<b>p[1]</b>
			.
		</p>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.axis2_placement_2d.wr:WR1">
		The space dimensionality of the
		<b>axis2_placement_2d</b>
		shall be 2.
	</ext_description>
	<!-- +++++++++++ axis2_placement_3d +++++++++++ -->
	<ext_description linkend="geometry_schema.axis2_placement_3d">
		A
		<b>axis2_placement_3d</b>
		is a type of
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.placement" />
		that represents the location and orientation in three-dimensional
		space of two mutually
		perpendicular axes. An
		<b>axis2_placement_3d</b>
		is defined in terms
		of a point, (inherited from the placement supertype), and two
		(ideally orthogonal) axes. It can be used to locate and
		orientate a non axi-symmetric object in space and to define a placement
		coordinate system.
		The entity includes a point which forms the origin of the placement
		coordinate system. Two direction vectors are required to complete the
		definition of the placement coordinate system. The
		<b>axis</b>
		is the
		placement Z axis direction and the
		<b>ref_direction</b>
		is an
		approximation to the placement X axis direction.

		<note>
			<p>
				Let
				<b>z</b>
				be the placement Z axis direction and
				<b>a</b>
				be the
				approximate placement X axis direction. There are two methods,
				mathematically identical but numerically different, for calculating the
				placement X and Y axis directions.
			</p>
			<p>
				a) The vector
				<b>a</b>
				is projected onto the plane defined by the
				origin point
				<b>P</b>
				and the vector
				<b>z</b>
				to give the placement X axis
				direction as
			</p>
			<p>
				<b>x</b>
				= &lt;
				<b>a - (a &#8901; z)z</b>
				&gt;.
				The placement Y axis direction is then given by
				<b>y = &lt; z &#215; x </b>
				&gt;.
			</p>
			<p>
				b) The placement Y axis direction is calculated as
				<b> y = &lt; z &#215; a &gt;</b>
				and then the placement X
				axis direction is given by
				<b> x = &lt; y \&#215; z &gt;</b>
				.
			</p>
			<p> The first method is likely to be the more numerically stable of
				the
				two, and is used here.
			</p>
		</note>
		A placement coordinate system referenced by the
		parametric equations is derived from the
		<b>axis2_placement_3d</b>
		data
		for conic curves and elementary surfaces.


	</ext_description>
	<!-- SELF\placement.location -->
	<ext_description
		linkend="geometry_schema.axis2_placement_3d.placement.location">
		the spatial position of the reference point which defines the origin of
		the associated placement
		coordinate system.
	</ext_description>
	<!-- axis -->
	<ext_description linkend="geometry_schema.axis2_placement_3d.axis">
		the exact direction of the local Z axis;
	</ext_description>
	<!-- ref_direction -->
	<ext_description linkend="geometry_schema.axis2_placement_3d.ref_direction">
		the direction used to determine the
		direction of the local X axis; if necessary an adjustment is made to
		maintain orthogonality to the
		<b>axis</b>
		direction. If
		<b>axis</b>
		and/or
		<b>ref_direction</b>
		is omitted, these directions are taken from
		the geometric coordinate system;
	</ext_description>
	<!-- p -->
	<ext_description linkend="geometry_schema.axis2_placement_3d.p">
		<p> the axes for the placement coordinate system. The directions
			of these axes are derived from the attributes, with appropriate default
			values if required.
		</p>
		<p>
			<b>p[1]</b>
			The normalised direction of the local X axis.
		</p>
		<p>
			<b>p[2]</b>
			The normalised direction of the local Y axis.
		</p>
		<p>
			<b>p[3]</b>
			The normalised direction of the local Z axis.
		</p>
		<note> See Figure 3 for interpretation of attributes. </note>
		<figure id="Geomfig3" number="3">
			<title>Axis2_placement_3d</title>
			<img src="Geomfig3.gif" />
		</figure>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.axis2_placement_3d.wr:WR1">
		The space dimensionality of the
		<express_ref
			linkend="geometry_schema:ir_express:geometry_schema.placement.location" />
		shall be 3.
	</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.axis2_placement_3d.wr:WR2">
		The space dimensionality of
		<b>axis</b>
		shall be 3.

	</ext_description>
	<!-- WR3 -->
	<ext_description linkend="geometry_schema.axis2_placement_3d.wr:WR3">
		The space dimensionality of
		<b>ref_direction</b>
		shall be 3.
	</ext_description>
	<!-- WR4 -->
	<ext_description linkend="geometry_schema.axis2_placement_3d.wr:WR4">
		The
		<b>axis</b>
		and the
		<b>ref_direction</b>
		shall not be
		parallel or anti-parallel. (This is required by the
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.build_axes" />
		function.)
	</ext_description>
	<!-- +++++++++++ cartesian_transformation_operator +++++++++++ -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator">
		<p>
			A
			<b>cartesian_transformation_operator</b>
			is a type of
			<express_ref
				linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item" />
			and
			<express_ref
				linkend="representation_schema:ir_express:representation_schema.functionally_defined_transformation" />
			, that defines a geometric
			transformation composed of translation, rotation, mirroring and uniform
			scaling.

			The list of normalised vectors
			<b>u</b>
			defines the
			columns of an orthogonal matrix
			<b>T</b>
			. These vectors are computed,
			by the
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.base_axis" />
			function,
			from the direction attributes
			<b>axis1, axis2</b>
			and, in
			<b>cartesian_transformation_operator_3d, axis3</b>
			.
		</p>
		<p>
			If &#124;
			<b>T</b>
			&#124;= -1, the transformation
			includes mirroring.
		</p>
		<p>
			The local origin point
			<b>A</b>
			, the scale
			value
			<i>S</i>
			and the matrix
			<b>T</b>
			together define a transformation.
		</p>
		<p>
			The transformation for a
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.point" />
			with position vector
			<b>P</b>
			is
			defined by
		</p>
		<p>
			<b>
				P &#8594; A +
				<i>S</i>
				TP
			</b>
		</p>
		<p>
			The transformation for a
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction" /> &#8194; <b>d</b> is defined by</p>
		<p>
			<b>d &#8594; Td </b>
		</p>
		<p> The transformation for a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> with <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector.orientation"/> &#8194; <b>d</b>
     and <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector.magnitude"/>&#8194; <i>k</i> is defined by </p>
		<p>
			<b>d &#8594; Td </b> and <i>  k  &#8594; Sk  </i>
		</p>
		<p>  For those entities whose attributes include an <express_ref linkend="geometry_schema:ir_express:geometry_schema.axis2_placement"/>, the
        transformation is applied, after the derivation, to the derived attributes <b>p</b>
        defining the placement coordinate directions.
        For a transformed <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/>, the direction of the surface normal at
        any point is obtained by transforming the normal, at the corresponding point,
         to the original <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/>. The parametrisation of the transformed surface 
         is defined using the transformed value of <b>p</b> as defined above. 
        For geometric entities with attributes (such as the radius of a circle)
        which have the dimensionality of length, the values will be multiplied 
        by <i>S</i>.</p>
		<p> For transformations involving reflection or mirroring, with  &#124;<b>T</b>&#124;= -1, the relationship 
     between the sense of the boundary and the interior of a <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_bounded_surface"/>, or 
     <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/> is affected.</p>
		<p> For a <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_bounded_surface"/> if <b>n</b> is the direction 
     of the surface normal and <b>t</b> is the direction of the tangent vector at a point on the boundary 
     after transformation, then the interior is in the direction |<b>T</b>&#124;<b> n &#215; t</b>
		</p>
		<p>For a <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> or <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/>, if &#124;<b>T</b>&#124;= -1 the interior of the transformed face will lie to the right when traversing the bounding loops in the positive sense.</p>
		<p> For curves on surface the <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve.reference_to_curve"/>
 will be unaffected  by any transformation.</p>
		<p>  The  <b>cartesian_transformation_operator</b>   shall only be applied to geometry defined in
    a consistent system of units with the same units on each axis. With all 
     optional attributes omitted, the transformation defaults to the identity
    transformation.  The <b>cartesian_transformation_operator</b>
    shall only be instantiated as one of its subtypes.</p>
		<note> See Figures 4a to 4c for demonstration of effect of transformation. </note>
		<figure id="Geomfig4a" number="4a">
			<title>Cartesian_transformation_operator_3d</title>
			<img src="Geomfig4a.gif"/>
		</figure>
		<figure id="Geomfig4b" number="4b">
			<title>Cartesian_transformation_operator_3d</title>
			<img src="Geomfig4b.gif"/>
		</figure>
		<figure id="Geomfig4c" number="4c">
			<title>Cartesian_transformation_operator_3d</title>
			<img src="Geomfig4c.gif"/>
		</figure>
	</ext_description>
	<!-- axis1 -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator.axis1">
the direction used to  determine <b>u[1]</b>, the derived X axis direction;
</ext_description>
	<!-- axis2 -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator.axis2">
the direction used to  determine <b>u[2]</b>, the derived Y axis direction;
</ext_description>
	<!-- local_origin -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator.local_origin">
the required translation, specified as a cartesian
      point. The actual translation included in the transformation is from
      the geometric origin to the local origin;
</ext_description>
	<!-- scale -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator.scale">
the scaling value specified for the transformation;
</ext_description>
	<!-- scl -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator.scl">
the derived scale <i>S</i> of the transformation, equal
      to <b>scale</b> if that exists, or 1.0 otherwise.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator.wr:WR1">
	The derived scaling factor <b>scl</b> shall be greater than zero.
</ext_description>
	<!-- +++++++++++ cartesian_transformation_operator_3d +++++++++++ -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_3d">
	A <b>cartesian_transformation_operator_3d</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator"/>, that defines a geometric
   transformation in  three-dimensional space composed of translation,
   rotation, mirroring and uniform scaling.

     The list of normalised vectors <b>u</b> defines the columns of an
    orthogonal matrix <b>T</b>. These vectors are computed from the
    direction attributes <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator.axis1"/>, <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator.axis2"/> and <b>axis3</b> by the <express_ref linkend="geometry_schema:ir_express:geometry_schema.base_axis"/>  function.
    If &#124;<b>T</b>&#124;= -1, the transformation includes mirroring.
</ext_description>
	<!-- SELF\cartesian_transformation_operator.axis1 -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_3d\cartesian_transformation_operator.axis1">
the  direction used to determine <b>u[1]</b>, the derived X axis direction. 
      If necessary,  <b>u[1]</b> is adjusted to make it orthogonal to <b>u[3]</b>;
</ext_description>
	<!-- SELF\cartesian_transformation_operator.axis2 -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_3d\cartesian_transformation_operator.axis2">
the  direction used to determine <b>u[2]</b>, the derived Y axis direction. 
      If necessary,  <b>u[2]</b> is adjusted to make it orthogonal to <b>u[3]</b> and <b>u[1]</b>;
</ext_description>
	<!-- axis3 -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_3d.axis3">
the exact direction of <b>u[3]</b>, the derived Z axis direction;
</ext_description>
	<!-- SELF\cartesian_transformation_operator.local_origin -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_3d\cartesian_transformation_operator.local_origin">
the required  translation, specified as a cartesian point. The actual 
      translation included in the transformation is from the geometric origin 
      to the local origin.
</ext_description>
	<!-- SELF\cartesian_transformation_operator.scale -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_3d\cartesian_transformation_operator.scale">
the  scaling value specified for the transformation;
</ext_description>
	<!-- SELF\cartesian_transformation_operator.scl -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_3d\cartesian_transformation_operator.scale">
the derived scale <i>S</i> of the transformation, equal
      to <b>scale</b> if that exists, or 1.0 otherwise;
</ext_description>
	<!-- u -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_3d.u">
the list of mutually orthogonal, normalised vectors
      defining the transformation matrix <b>T</b>. They are derived from
      the explicit attributes <b>axis3</b>, <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator.axis1"/>, and <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator.axis2"/> 
      in that order;
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_3d.wr:WR1">
	The coordinate space dimensionality shall be 3.
</ext_description>
	<!-- +++++++++++ cartesian_transformation_operator_2d +++++++++++ -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_2d">
	A <b>cartesian_transformation_operator_2d</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator"/>, that defines a geometric
     transformation in 
     two-dimensional space  composed  of translation,
     rotation, mirroring and uniform scaling.

     The list of normalised vectors <b>u</b> defines the columns of an
    orthogonal matrix <b>T</b>. These vectors are computed from the
    direction attributes <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator.axis1"/> and <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator.axis2"/>  by the <express_ref linkend="geometry_schema:ir_express:geometry_schema.base_axis"/> function.
     If &#124;<b>T</b>&#124;= -1, the transformation includes mirroring.
</ext_description>
	<!-- SELF\cartesian_transformation_operator.axis1 -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_2d\cartesian_transformation_operator.axis1">
the  direction used to determine <b>u[1]</b>, the derived X axis direction;
</ext_description>
	<!-- SELF\cartesian_transformation_operator.axis2 -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_2d\cartesian_transformation_operator.axis2">
the  direction used to determine <b>u[2]</b>, the derived Y axis direction;
     
</ext_description>
	<!-- SELF\cartesian_transformation_operator.local_origin -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_2d\cartesian_transformation_operator.local_origin">
the required  translation, specified as a cartesian point. The actual 
      translation included in the transformation is from the geometric origin 
      to the local origin.
</ext_description>
	<!-- SELF\cartesian_transformation_operator.scale -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_2d\cartesian_transformation_operator.scale">
the  scaling value specified for the transformation;
</ext_description>
	<!-- SELF\cartesian_transformation_operator.scl -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_2d\cartesian_transformation_operator.scale">
the derived scale <i>S</i> of the transformation, equal
      to <b>scale</b> if that exists, or 1.0 otherwise;
</ext_description>
	<!-- u -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_2d.u">
the list of mutually orthogonal, normalised vectors
      defining the transformation matrix <b>T</b>. They are derived from
      the explicit attributes <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator.axis1"/>, and <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator.axis2"/> 
      in that order;
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.cartesian_transformation_operator_2d.wr:WR1">
	The coordinate space dimensionality shall be 2.
</ext_description>
	<!-- +++++++++++ curve +++++++++++ -->
	<ext_description linkend="geometry_schema.curve">
	A <b>curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>, that can be envisioned as the path of a point moving in its coordinate space.
</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.curve.wr:IP1">
	A <b>curve</b> shall be arcwise connected.
</ext_description>
	<!-- IP2 -->
	<ext_description linkend="geometry_schema.curve.wr:IP2">
	 A <b>curve</b> shall have an arc length greater than zero.
</ext_description>
	<!-- +++++++++++ line +++++++++++ -->
	<ext_description linkend="geometry_schema.line">
		<p>A <b>line</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/>, that is an unbounded with constant tangent direction.  A 
    <b>line</b> is defined by a <express_ref linkend="geometry_schema:ir_express:geometry_schema.point"/> and a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>. The 
    positive direction of the line is in the direction of the <b>dir</b>  vector. </p>
		<p> The curve is parametrised as follows: </p>
		<eqn>
			<b> P = pnt </b>
		</eqn>
		<eqn>
			<b> V = dir </b>
		</eqn>
		<eqn>
			<b> &#955;</b>
			<i>(u)</i> = <b>P</b> + <i>u</i>
			<b>V</b>
		</eqn>
		<p> and the parametric range is -&#8734; &lt; <i>u</i> &lt;  &#8734;.  </p>
	</ext_description>
	<!-- pnt -->
	<ext_description linkend="geometry_schema.line.pnt">
the location of the <b>line</b>;
</ext_description>
	<!-- dir -->
	<ext_description linkend="geometry_schema.line.dir">
the direction of the <b>line</b>; the magnitude and
        units of <b>dir</b> affect the parametrisation of the line;
</ext_description>
	<!-- SELF\geometric_representation_item.dim -->
	<ext_description linkend="geometry_schema.line\geometric_representation_item.dim">
	the coordinate  space dimensionality of the <b>line</b>. This is 
       an inherited attribute from the geometric representation item supertype.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.line.wr:WR1">
	The attributes <b>pnt</b> and <b>dir</b> shall both be 2D or both be 3D
       entities.
</ext_description>
	<!-- +++++++++++ conic +++++++++++ -->
	<ext_description linkend="geometry_schema.conic">
		<p>A <b>conic</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/>, that is a planar curve which could be produced by
   intersecting a plane with a cone. </p>
		<p>  A <b>conic</b> is defined in terms of its intrinsic geometric
   properties rather than being described in terms of other geometry.</p>
		<p>  A <b>conic</b> entity always has a placement coordinate system defined by
   <express_ref linkend="geometry_schema:ir_express:geometry_schema.axis2_placement"/>; the parametric representation is defined in
   terms of this placement coordinate system.</p>
	</ext_description>
	<!-- position -->
	<ext_description linkend="geometry_schema.conic.position">
the location and orientation of the conic. Further
      details of the interpretation of this attribute are given for the 
      individual subtypes.
</ext_description>
	<!-- +++++++++++ circle +++++++++++ -->
	<ext_description linkend="geometry_schema.circle">
		<p>A <b>circle</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.conic"/>, section defined by a radius and the location and orientation
     of the circle.</p>
		<p> Interpretation of the data shall be as follows: </p>
		<eqn>
			<b> C =  position.location</b>  (centre) </eqn>
		<eqn>
			<b>x = position.p[1] </b>
		</eqn>
		<eqn>
			<b>y = position.p[2]  </b>
		</eqn>
		<eqn>
			<b> z = position.p[3] </b>
		</eqn>
		<eqn>    R = radius            </eqn>
		<p> The circle is parametrised as follows: </p>
		<eqn>
			<b> &#955;</b>
			<i>(u)</i> = <b>C</b> +R(cos(<i>u</i>)<b>x</b> + sin(<i>u</i>)<b>y</b>)  </eqn>
		<p> and the parametric range is 0 &#8804; <i>u</i>  &#8804; 360 degrees,  <i>u</i> is an angular 
     parameter and when a numerical value is specified it shall use the current units for plane_angle_measure. </p>
		<p> In the placement coordinate system defined above, the circle has the
   equation <i>
				<b> C </b> = 0,</i> where </p>
		<eqn>
			<i>
				<b> C </b>(x, y, z) = x<sup>2</sup> + y<sup>2</sup> - R<sup>2</sup>
			</i>
		</eqn>
		<p>     The positive sense of the circle at any point is in the tangent
   direction, <b>T</b>, to the curve at the point, where </p>
		<eqn>
			<b>T =(-<i>C</i>
			</b>
			<sub>y</sub>,<b>
				<i>C</i>
			</b>
			<sub>x</sub>, 0).    </eqn>
		<note number="1">  A circular arc is defined by using the <express_ref linkend="geometry_schema:ir_express:geometry_schema.trimmed_curve"/> entity in conjunction with the <b>circle</b> entity. </note>
	</ext_description>
	<!-- SELF\conic.position.location -->
	<ext_description linkend="geometry_schema.circle\conic.position.location">
this inherited
     attribute defines the centre of the <b>circle</b>;
</ext_description>
	<!-- radius -->
	<ext_description linkend="geometry_schema.circle.radius">
		<p>the radius of the circle, which shall be greater than zero; </p>
		<note number="2"> See Figure 5 for interpretation of attributes. </note>
		<figure id="Geomfig5" number="5">
			<title>Circle</title>
			<img src="Geomfig5.gif"/>
		</figure>
	</ext_description>
	<!-- +++++++++++ ellipse +++++++++++ -->
	<ext_description linkend="geometry_schema.ellipse">
		<p>An <b>ellipse</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.conic"/>, section defined by the lengths of the
    semi-major and semi-minor diameters and the position (center or mid 
    point of the line joining the foci) and orientation of the curve.</p>
		<p> Interpretation of the data shall be as follows: </p>
		<eqn>
			<b> C =  position.location</b>  (centre) </eqn>
		<eqn>
			<b>x = position.p[1] </b>
		</eqn>
		<eqn>
			<b>y = position.p[2]  </b>
		</eqn>
		<eqn>
			<b> z = position.p[3] </b>
		</eqn>
		<eqn>    R<sub>1</sub> = <b>semi_axis_1</b>
		</eqn>
		<eqn>    R<sub>2</sub> = <b>semi_axis_2</b>
		</eqn>
		<p> The <b>ellipse</b> is parametrised as follows: </p>
		<eqn>
			<b> &#955;</b>
			<i>(u)</i> = <b>C</b> +R<sub>1</sub>(cos(<i>u</i>)<b>x</b>) + R<sub>1</sub>( sin(<i>u</i>)<b>y</b>) </eqn>
		<p> and the parametric range is 0 &#8804; <i>u</i>  &#8804; 360 degrees,  <i>u</i> is an angular 
     parameter and when a numerical value is specified it shall use the current units for plane_angle_measure. </p>
		<p> In the placement coordinate system defined above, the <b>ellipse</b> has the
   equation <i>
				<b> C </b>
			</i> = 0, where </p>
		<eqn>
			<i>
				<b> C </b>(x, y, z) = {x/(R<sub>1</sub>)}<sup>2</sup> + {y/(R<sub>2</sub>)}<sup>2</sup> - 1 </i>
		</eqn>
		<p> The positive sense of the <b>ellipse</b> at any point is in the tangent
   direction, <b>T</b>, to the curve at the point, where</p>
		<eqn>
			<b>T =(-<i>C</i>
			</b>
			<sub>y</sub>, <b>
				<i>C</i>
			</b>
			<sub>x</sub>, 0).    </eqn>
	</ext_description>
	<!-- SELF\conic.position.location -->
	<ext_description linkend="geometry_schema.ellipse\conic.position.location">
this inherited
     attribute defines the centre of the <b>ellipse</b>and <express_ref linkend="geometry_schema:ir_express:geometry_schema.conic.position.p[1]"/> is in the direction of <b>semi_axis_1</b>;
</ext_description>
	<!-- semi_axis_1 -->
	<ext_description linkend="geometry_schema.ellipse.semi_axis_1">
the first radius of the <b>ellipse</b> which shall be positive.
</ext_description>
	<!-- semi_axis_2] -->
	<ext_description linkend="geometry_schema.ellipse.semi_axis_2">
		<p>the second radius of the <b>ellipse</b> which shall be positive. </p>
		<figure id="Geomfig6" number="6">
			<title>Ellipse</title>
			<img src="Geomfig6.gif"/>
		</figure>
		<note> See Figure 6 for interpretation of attributes. </note>
	</ext_description>
	<!-- +++++++++++ hyperbola +++++++++++ -->
	<ext_description linkend="geometry_schema.hyperbola">
		<p>An <b>hyperbola</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.conic"/>, section defined by the lengths of the
     major and minor radii and the position (mid-point of the line joining 
     two foci) and orientation of the curve.
     Interpretation of the data shall be as follows:
 </p>
		<eqn>
			<b> C =  position.location</b>  (centre) </eqn>
		<eqn>
			<b>x = position.p[1] </b>
		</eqn>
		<eqn>
			<b>y = position.p[2]  </b>
		</eqn>
		<eqn>
			<b> z = position.p[3] </b>
		</eqn>
		<eqn>    R<sub>1</sub> = <b>semi_axis</b>
		</eqn>
		<eqn>    R<sub>2</sub> = <b>semi_imag_axis</b>
		</eqn>
		<p> The hyperbola is parametrised as follows: </p>
		<eqn>
			<b> &#955;</b>
			<i>(u)</i> = <b>C</b> +R<sub>1</sub>(cosh(<i>u</i>)<b>)x</b> + R<sub>2</sub>( sinh(<i>u</i>))<b>y</b>
		</eqn>
		<p>The parametrisation range is -&#8734; &lt; <i>(u)</i> &lt; &#8734; </p>
		<p> In the placement coordinate system defined above, the hyperbola has the
   equation <i>
				<b> C </b>
			</i> = 0, where </p>
		<eqn>
			<i>
				<b> C </b>(x, y, z) = (x/R<sub>1</sub>)<sup>2</sup> - (y/R<sub>2</sub>)<sup>2</sup> - 1 </i>
		</eqn>
		<p> The positive sense of the hyperbola at any point is in the tangent
   direction, <b>T</b>, to the curve at the point, where</p>
		<eqn>
			<b>T =(-<i>C</i>
			</b>
			<sub>y</sub>, <b>
				<i>C</i>
			</b>
			<sub>x</sub>, 0).    </eqn>
		<p>The branch of the hyperbola represented is that pointed to by the
     <b>x</b> direction.</p>
	</ext_description>
	<!-- SELF\conic.position.location -->
	<ext_description linkend="geometry_schema.hyperbola\conic.position.location">
the location and orientation
      of the curve.   <b>conic.position.location</b> is the centre of the
      hyperbola and <b>conic.position.p[1]</b> is in the direction of the
      semi-axis. The branch defined is on the side of <b>position.p[1]</b> 
      positive. ;
</ext_description>
	<!-- semi_axis -->
	<ext_description linkend="geometry_schema.hyperbola.semi_axis">
the length of the semi-axis of the hyperbola.  This
      is positive and is half the minimum distance between the two branches 
      of the hyperbola.
</ext_description>
	<!-- semi_imag_axis -->
	<ext_description linkend="geometry_schema.hyperbola.semi_imag_axis">
		<p>the length of the semi-imaginary axis of the hyperbola which shall be positive; </p>
		<note> See Figure 7 for interpretation of attributes. </note>
		<figure id="Geomfig7" number="7">
			<title>Hyperbola</title>
			<img src="Geomfig7.gif"/>
		</figure>
	</ext_description>
	<!-- +++++++++++ parabola +++++++++++ -->
	<ext_description linkend="geometry_schema.parabola">
		<p>A <b>parabola</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.conic"/>, section defined by its focal length,
     position (apex), and orientation.
     Interpretation of the data shall be as follows:
 </p>
		<eqn>
			<b> C =  position.location</b>  (centre) </eqn>
		<eqn>
			<b>x = position.p[1] </b>
		</eqn>
		<eqn>
			<b>y = position.p[2]  </b>
		</eqn>
		<eqn>
			<b> z = position.p[3] </b>
		</eqn>
		<eqn>    F = <b>focal_dist</b>
		</eqn>
		<p> The parabola is parametrised as follows: </p>
		<eqn>
			<b> &#955;</b>
			<i>(u)</i> = <b>C</b> +  F(<i>u<sup>2</sup>
			</i>
			<b>x</b> + 2<i>u</i>
			<b>y</b>) </eqn>
		<p>  The parametrisation range is -&#8734; &lt; <i>(u)</i> &lt; &#8734;  </p>
		<p> In the placement coordinate system defined above, the parabola has the
   equation <i>
				<b> C </b>
			</i> = 0, where </p>
		<eqn>
			<i>
				<b> C </b>(x, y, z) = 4Fx - y<sup>2</sup>
			</i>
		</eqn>
		<p> The positive sense of the parabola at any point is in the tangent
   direction, <b>T</b>, to the curve at the point, where</p>
		<eqn>
			<b>T =(-<i>C</i>
			</b>
			<sub>y</sub>, <b>
				<i>C</i>
			</b>
			<sub>x</sub>, 0).    </eqn>
	</ext_description>
	<!-- SELF\conic.position.location -->
	<ext_description linkend="geometry_schema.parabola\conic.position.location">
The location and orientation of
       the curve.
       <b>conic.position.location</b> is the apex of the parabola
       and <b>conic.position.p[1]</b> is the axis of symmetry;
</ext_description>
	<!-- focal_dist -->
	<ext_description linkend="geometry_schema.parabola.focal_dist"><p>
the distance of the focal point from the apex point;</p>
<note> See Figure 8 for interpretation of attributes. </note>
		<figure id="Geomfig8" number="8">
			<title>parabola</title>
			<img src="Geomfig8.gif"/>
		</figure>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.parabola.wr:WR1">
	The focal distance shall not be zero.
</ext_description>
	<!-- +++++++++++ clothoid +++++++++++ -->
	<ext_description linkend="geometry_schema.clothoid">
		<p>A <b>clothoid</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/>, and is a planar curve in the form of a spiral.
This curve has the property that the curvature varies linearly with the arc length.
     Interpretation of the data shall be as follows:
 </p>
		<eqn>
			<b> C =  position.location</b>  (centre) </eqn>
		<eqn>
			<b>x = position.p[1] </b>
		</eqn>
		<eqn>
			<b>y = position.p[2]  </b>
		</eqn>
		<eqn>    C = <b>clothoid_constant</b>
		</eqn>
		<p> The clothoid is parametrised as follows: </p>
		<bigeqn>
			<b> &#955;</b>
			<i>(u)</i> = <b>C</b> +   A&#8730;{&#960;}(&#8747;<sub>0</sub>
			<sup>
				<i>u</i>
			</sup>cos(&#960;(<i>t<sup>2</sup>/2))dt</i>
			<b>x</b> + &#8747;<sub>0</sub>
			<sup>
				<i>u</i>
			</sup>sin(&#960;(<i>t<sup>2</sup>/2))dt</i>
			<b>y</b>
		</bigeqn>
		<p>  The parametrisation range is -&#8734; &lt; <i> u </i> &lt; &#8734;  </p>
		<p> The arc length <i>s</i> of the curve, from the point <b>C</b>, is given by the formula:
  s = A <i>u</i>&#8730;&#960;. </p>
		<p> The curvature &#954; and radius of curvature  &#961;, at any point of the curve, are
 related to the arc length by the formulae:</p>
		<eqn>&#961; = <i>s/(A<sup>2</sup>) </i>, &#8195; &#961; = 1/&#954;. </eqn>
		<note number="1">
 A more detailed description of the clothoid curve can be found in GIBSON[8].
 </note>
	</ext_description>
	<!-- position -->
	<ext_description linkend="geometry_schema.clothoid.position">
		<p>the location and orientation of the <b>clothoid</b>;</p>
		<p>
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.placement.location"/> is the point on the clothoid with zero curvature.</p>
		<p>
			<b>position.p[1]</b> is the direction of the tangent to the curve at this point.</p>
		<note number="2"> If <b>position</b> is of type <express_ref linkend="geometry_schema:ir_express:geometry_schema.axis2_placement_2d"/>
the <b>clothoid</b> is defined in a two dimensional space. 
</note>
		<note number="3"> See Figure 9 for interpretation of attributes. </note>
		<figure id="Geomfig9" number="9">
			<title>Clothoid</title>
			<img src="Geomfig9.gif"/>
		</figure>
	</ext_description>
	<!-- clothoid_constant -->
	<ext_description linkend="geometry_schema.clothoid.clothoid_constant">
the constant which defines the relationship between curvature and arc length for the curve;
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.clothoid.wr:WR1">
	The focal distance shall not be zero.
</ext_description>
	<!-- +++++++++++ circular_involute +++++++++++ -->
	<ext_description linkend="geometry_schema.circular_involute">
		<p>A <b>circular_involute</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/>, and is the involute of a circle. The involute of a
planar curve is the locus of the end point of a thread as it is wound round the
curve. If <b>P<sub>0</sub>
			</b> is the point where the involute meets the circle the distance
from any point <b>P</b> on the involute to the tangential contact point <b>T</b>
on the circle is equal to the arc length from <b>P<sub>0</sub>
			</b> to <b>T</b>. The
<b>circular_involute</b> has a cusp at the point <b>P<sub>0</sub>
			</b> (<i>u = 0</i>), and
forms a double spiral enclosing the base circle. </p>
		<note number="1"> See GIBSON[9] for further properties of involute curves.
</note>
		<p>    Interpretation of the data shall be as follows:
 </p>
		<eqn>
			<b> C =  position.location</b>  (centre) </eqn>
		<eqn>
			<b>x = position.p[1] </b>
		</eqn>
		<eqn>
			<b>y = position.p[2]  </b>
		</eqn>
		<eqn>
			<i>r</i> = <b>base_radius</b>
		</eqn>
		<p> The <b>circular_involute</b> is parametrised as follows: </p>
		<eqn>
			<b> &#955;</b>
			<i>(u)</i> = <b>C</b> +  <i>r</i>( cos(<i>u) + u</i>sin(<i>u</i>))<b>x</b> +
     <i>r</i>( sin(<i>u) - u</i>cos(<i>u</i>))<b>y</b>
		</eqn>
		<p>  The parameter <i>u</i> is measured in radians and parametrisation range is -&#8734; &lt; <i>(u)</i> &lt; &#8734;  </p>
		<p> The arc length <i>s</i> of the curve, from the point <i>u = 0 </i>, is given by the formula:
  s =(1/2) r <i>u<sup>2</sup>
			</i>
		</p>
		<p>At any point on the involute the distance <b>PC</b> from a point <b>P</b> on the
curve with parameter <i>u</i> to the centre point <b>C</b> satisfies the equation: </p>
		<eqn>
			<b>(PC)</b>
			<sup>2</sup> = <i>r<sup>2</sup>(1  +  u<sup>2</sup>)</i>
		</eqn>
		<note number="2"> See figure 10 for the interpretation of the attributes.
This figure shows a portion of the curve for parameter values between -1.5 and
+1.5.
</note>
	</ext_description>
	<!-- position -->
	<ext_description linkend="geometry_schema.circular_involute.position">
		<p> the location and orientation of the <b>circular_involute</b>;</p>
		<p>
			<b>position.location</b> the the centre <b>C</b> of the base circle from which the
    involute is defined.</p>
		<p>
			<b>position.p[1]</b> The direction from centre of the base circle to the cusp point <b>P<sub>0</sub>
			</b>  of the
    <b>circular_involute</b>.</p>
	</ext_description>
	<!-- base_radius -->
	<ext_description linkend="geometry_schema.circular_involute.base_radius">
the radius of the base circle, for which the
    <b>circular_involute</b> is the wrapping curve.


<figure id="Geomfig10" number="10">
			<title>Circular_involute</title>
			<img src="Geomfig10.gif"/>
		</figure>
	</ext_description>
	<!-- +++++++++++ bounded_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.bounded_curve">
		<p>A <b>bounded_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/> of finite arc length with
    identifiable end points.</p>
		<note>
 A <b>bounded_curve</b> is not included in the ONEOF list for curve and, as
such, has an implicit and/or relationship with other subtypes of curve. The only
complex instances intended to be created are <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_pcurve"/> and
<express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_surface_curve"/>.
</note>
	</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.bounded_curve.wr:IP1">
	A bounded curve has finite arc length.
</ext_description>
	<!-- IP2 -->
	<ext_description linkend="geometry_schema.bounded_curve.wr:IP2">
	A bounded curve has a start point and an end point.
</ext_description>
	<!-- +++++++++++ polyline +++++++++++ -->
	<ext_description linkend="geometry_schema.polyline">
		<p>A <b>polyline</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_curve"/> with   <i>(n-1)</i> linear segments,
    defined by a list of <i>n </i>
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> s, </p>
		<p>
			<b> P<sub>1</sub>, P<sub>2</sub>, ..... ,  P<sub>n</sub>. </b>
		</p>
		<p>The <i>i</i>th segment of the curve is parametrised as follows: </p>
		<eqn>
			<b> &#955;</b>
			<i>(u)</i> = <b>P</b>
			<i>
				<sub>i</sub>(i-u)</i> +  <b>P</b>
			<i>
				<sub>i+1</sub>(u+1-i)</i>, &#8195; &#8195;&#8195;for 
     <i> 1 &#8804; i &#8804; n-1 </i>
		</eqn>
		<p>   where <i>i-1 &#8804; u &#8804; i</i> and with parametric range of 0 &#8804; <i>u &#8804;  n-1</i>. </p>
	</ext_description>
	<!-- points -->
	<ext_description linkend="geometry_schema.polyline.points">
	the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s defining the <b>polyline</b>;
</ext_description>
	<!-- +++++++++++ b_spline_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.b_spline_curve">
		<p>A <b>b_spline_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_curve"/>, it is a piecewise parametric polynomial
     or rational curve described in terms of control points and basis 
     functions. The B-spline curve has been selected as the most stable 
     format to represent all types of polynomial or rational parametric 
     curves.  With appropriate attribute values it is capable of representing single span or spline
     curves of explicit polynomial, rational, B&#233;zier or B-spline type.
       The <b>b_spline_curve</b> has three special subtypes where the knots
    and knot multiplicities can be derived to provide simple default
    capabilities. </p>
		<note number="1">
    Identification of B-spline curve default values and subtypes is
    important for performance considerations and for efficiency issues in 
    performing computations.
    </note>
		<note number="2">
    A B-spline is <i>rational</i> if and only if the weights are not all
    identical; this can be represented by the <b>rational_b_spline_curve</b>
    subtype. If it is polynomial, the weights may be defaulted to all being
    1.
    </note>
		<note number="3"> 
    In the case where the B-spline curve is uniform, quasi-uniform or
    B&#233;zier (including piecewise  B&#233;zier), the knots and
  knot multiplicities may be  defaulted  (i.e., non-existent in the data as
  specified by the attribute definitions).
  </note>
		<note number="4">
  When the knots are defaulted, a difference of 1.0 between separate knots
  is assumed, and the effective parameter range for the resulting curve 
  starts from 0.0. These defaults are provided by the subtypes.
  </note>
		<note number="5">
  The knots and knot multiplicities shall not be defaulted in the
    non-uniform case.
    </note>
		<note number="6">
   The defaulting of weights and knots are done independently of one
    another.
    </note>
		<note number="7">
       Definitions of the B-spline basis functions <i> N<sub>i</sub>
				<sup>d,</sup>(u)</i>
  can be found in [5], [8], [11] and [12]. It should be noted
  that there is a difference in terminology between these references.
  </note>
		<p>   Interpretation of the data shall be as follows: </p>
		<p> a) The curve, in the polynomial case, is given by:     </p>
		<p>
			<img src="BScrv1.gif"/>
		</p>
		<p> b) In the rational case all weights shall be positive and the curve is given by: </p>
		<p>
			<img src="BScrv2.gif"/>
		</p>
		<p>  where </p>
		<eqn>
			<i> k+1  = </i> number of control points </eqn>
		<eqn>
			<b>P </b>
			<sub>
				<i>i</i>
			</sub> = control points</eqn>
		<eqn>
			<i>w<sub>i</sub>
			</i>  = weights, and </eqn>
		<eqn>
			<i> d  = </i> degree.  </eqn>
		<p> The knot array is an array of <i>(k + d + 2)</i> real numbers <i>[u<sub>-d</sub>,.. ,u<sub>k+1</sub>]</i>, 
 such that for all indices <i>j</i> in <i>[-d, k], u<sub>j</sub> &#8804; u<sub>j+1</sub>
			</i>.
  This array is obtained from the <b>knots</b> list by repeating each
    multiple knot according to the multiplicity.
      <i>N<sub>i</sub>
				<sup>d</sup>
			</i>, the  <i>i</i>th normalised B-spline basis function of
  degree <i>d</i>, is  defined on the subset <i>[u<sub>i-d</sub>, ... ,u<sub>i+1</sub>]</i> of this
  array.</p>
		<p> c)   Let <i>L</i> denote the number of distinct values amongst
    the <i>d + k +2</i> knots in the knot list; <i>L</i> will be referred to as the
   `upper index on knots'. Let <i>m<sub>j</sub>
			</i> denote the multiplicity (i.e., number of
    repetitions) of the <i>j</i>th distinct knot. Then:</p>
		<eqn>
			<i> &#931;<sup>L</sup>
				<sub>i=1</sub> m<sub>i</sub> = d + k + 2. </i>
		</eqn>
		<p>  All knot multiplicities except the first and the last shall be in the
    range <i>1, . . . , d</i>; the first and last may have a maximum
    value of <i>d + 1</i>. </p>
		<note number="8">
      In evaluating the basis functions, a knot <i>u</i> of, for example, multiplicity <i>3</i>
      is interpreted as a sequence  <i>u, u, u,</i> in the knot array.
  </note>
  
      The <b>b_spline_curve</b> has three special subtypes where the knots
      and knot multiplicities are derived to provide simple default
      capabilities.
      
     <note number="9">  See Figure  11 for further information on curve definition.
    </note>
		<figure id="Geomfig11" number="11">
			<title>B_spline_curve</title>
			<img src="Geomfig11.gif"/>
		</figure>
	</ext_description>
	<!-- degree -->
	<ext_description linkend="geometry_schema.b_spline_curve.degree">
the algebraic degree of the basis functions;
 </ext_description>
	<!-- control_points_list -->
	<ext_description linkend="geometry_schema.b_spline_curve.control_points_list">
the list of control points for the curve;
 </ext_description>
	<!-- curve_form -->
	<ext_description linkend="geometry_schema.b_spline_curve.curve_form">
used to identify particular types of curve; it is
    for information only;  
   </ext_description>
	<!-- closed_curve -->
	<ext_description linkend="geometry_schema.b_spline_curve.closed_curve">
		<p>indication of whether the curve is closed; it
  is for information only; </p>
		<note number="10">> Where part of the data is described as `for
     information only' this implies that if there is any discrepancy between this 
     information and the properties derived from the curve itself, the curve data 
 takes precedence. </note>
	</ext_description>
	<!-- self_intersect -->
	<ext_description linkend="geometry_schema.b_spline_curve.self_intersect">
flag to indicate whether the curve self-intersects
  or not; it is for information only;
</ext_description>
	<!-- SELF\geometric_representation_item.dim -->
	<ext_description linkend="geometry_schema.b_spline_curve\geometric_representation_item.dim">
the dimensionality of the coordinate space for the curve;
</ext_description>
	<!-- upper_index_on_control_points -->
	<ext_description linkend="geometry_schema.b_spline_curve.upper_index_on_control_points">
the upper index on the array of  control points; the lower index is 0, this value is derived from
    the  <b>control_points_list</b>;
</ext_description>
	<!-- control_points -->
	<ext_description linkend="geometry_schema.b_spline_curve.control_points">
the array of control points used to define the
    geometry of the curve; this is derived from the list of control points.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.b_spline_curve.wr:WR1">
	Any instantiation of this entity shall include one of the subtypes 
	    <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_curve_with_knots"/>
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.uniform_curve"/>, <express_ref linkend="geometry_schema:ir_express:geometry_schema.quasi_uniform_curve"/> or <express_ref linkend="geometry_schema:ir_express:geometry_schema.bezier_curve"/>.
</ext_description>
	<!-- +++++++++++ b_spline_curve_with_knots +++++++++++ -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots">
		<p>A <b>b_spline_curve_with_knots</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_curve"/>, for which the knot values
     are explicitly given. This subtype shall be used to represent non-uniform
     B-spline curves and may be used for other knot types. </p>
		<p> Let <i>L</i> denote the number of distinct values amongst
    the <i>d + k +2</i> knots in the knot list; <i>L</i> will be referred to as the
   `upper index on knots'. Let <i>m<sub>j</sub>
			</i> denote the multiplicity (i.e., number of
    repetitions) of the <i>j</i>th distinct knot. Then:</p>
		<p>  &#931;<i>
				<sub>i=1</sub>
				<sup>L</sup> m<sub>i</sub> = d + k + 2.</i>
		</p>
		<p> All knot multiplicities except the first and the last shall be in the
    range <i>1, . . ., d</i>; the first and last may have a maximum
    value of <i>d + 1</i>.</p>
		<note number="1">
    In evaluating the basis functions, a knot <i>u</i> of, for example, multiplicity <i>3</i>
    is interpreted as a sequence  <i>u, u, u,</i> in the knot array.
</note>
	</ext_description>
	<!-- knot_multiplicities -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots.knot_multiplicities">
the multiplicities of the knots; this list
  defines the number of times each knot in the <b>knots</b> list is to be
  repeated in constructing the knot array;
</ext_description>
	<!-- knots -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots.knots">
the list of distinct knots used to define the B-spline basis
    functions;
</ext_description>
	<!-- knot_spec -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots.knot_spec">
		<p>the description of the knot type; this is for
information only; </p>
		<note number="2"> Where part of the data is  described as `for
     information only' this implies that if there is any discrepancy between this 
     information and the properties derived from the curve itself, the curve data 
 takes precedence. </note>
	</ext_description>
	<!-- SELF\b_spline_curve.curve_form -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots\b_spline_curve.curve_form">
Used to identify particular types of curve; it is
    for information only.
</ext_description>
	<!-- SELF\b_spline_curve.degree -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots\b_spline_curve.degree">
the algebraic degree of the basis functions;
</ext_description>
	<!-- SELF\b_spline_curve.closed_curve -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots\b_spline_curve.closed_curve">
Indication of whether the curve is closed; it
  is for information only.
</ext_description>
	<!-- SELF\b_spline_curve.self_intersect -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots\b_spline_curve.self_intersect">
Flag to indicate whether the curve self-intersects
  or not; it is for information only.
</ext_description>
	<!-- SELF\geometric_representation_item.dim -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots\geometric_representation_item.dim">
the dimensionality of the coordinate space for the curve;
</ext_description>
	<!-- SELF\b_spline_curve.upper_index_on_control_points -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots\b_spline_curve.upper_index_on_control_points">
The upper index on the array of control points; the lower index is 0. This value is derived from
    the list of control points.
</ext_description>
	<!-- SELF\b_spline_curve.control_points -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots\b_spline_curve.control_points">
The array of control points used to define the geometry of the curve. This is derived from the list of control
    points.
</ext_description>
	<!-- upper_index_on_knots -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots.upper_index_on_knots">
the upper index on the knot arrays; the lower index is 1;
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots.wr:WR1">
	The function <express_ref linkend="geometry_schema:ir_express:geometry_schema.constraints_param_b_spline"/> returns TRUE if no
   inconsistencies in the parametrisation of the B-spline are found.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.b_spline_curve_with_knots.wr:WR2">
	The number of elements in the knot multiplicities list shall be equal to the  number of elements in the knots list.
</ext_description>
	<!-- +++++++++++ uniform_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.uniform_curve">
		<p>A <b>uniform_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_curve"/>, in which the
   knots are evenly spaced. Suitable default values for the knots and knot
   multiplicities are derived in this case.


     A B-spline is <i>uniform</i> if and only if all knots are of
     multiplicity 1 and they differ by a positive constant from the preceding
     knot. In this subtype the knot spacing is 1.0, starting at <i>-d</i>,
     where <i>d</i> is the degree.</p>
		<note number="1">    If  the B-spline curve is uniform and degree = 1, the
    B-spline is equivalent to a <express_ref linkend="geometry_schema:ir_express:geometry_schema.polyline"/>
		</note>
		<note number="2">
			<p> The value k_up may be required for the upper index on the knot
    and knot multiplicity lists. This is computed from the degree and the number of
    control points.</p>
			<p>   k_up = SELF\b_spline_curve.upper_index_on_control_points  + degree + 2. </p>
			<p>  If required, the knots and knot multiplicities can be
      computed by the function calls: </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_curve.degree, k_up,uniform_knots),  </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_curve.degree,k_up, uniform_knots). </p>
		</note>
	</ext_description>
	<!-- +++++++++++ quasi_uniform_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.quasi_uniform_curve">
		<p>A<b>quasi_uniform_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_curve"/>, in which the
   knots are evenly spaced, and except for the first and last, have 
   multiplicity 1.
    Suitable default values for the knots and knot multiplicities are derived
  in this case.


     A B-spline is <i>quasi-uniform</i> if and only if the knots are of
     multiplicity (degree+1) at the ends, of multiplicity 1 elsewhere, and
 they    differ by a positive constant from the preceding knot.  A quasi-uniform
     B-spline curve which has only two knots represents a B&#233;zier curve.
     In this subtype the knot spacing is 1.0, starting at 0.0.</p>
		<note>
			<p> The value k_up may be required for the upper index on the knot
    and knot multiplicity lists. This is computed from the degree and the number of
    control points.</p>
			<p>   k_up = SELF\b_spline_curve.upper_index_on_control_points  + degree + 2. </p>
			<p>  If required, the knots and knot multiplicities can be
      computed by the function calls: </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_curve.degree, k_up,quasi_uniform_knots),  </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_curve.degree,k_up, quasi_uniform_knots). </p>
		</note>
	</ext_description>
	<!-- +++++++++++ bezier_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.bezier_curve">
		<p>A <b>bezier_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_curve"/>, that represents in the most general case a piecewise B&#233;zier  curve.
    This is a special type of curve which can be represented as a
  type of <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_curve"/> in which the knots are evenly spaced
  and have high multiplicities. Suitable default values for the knots and  knot multiplicities are derived in this case.</p>
		<p>  A B-spline curve is a piecewise B&#233;zier  curve if it is
    quasi-uniform except that the interior knots have multiplicity
  <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_curve.degree"/> rather than having multiplicity one.  In this subtype the 
  knot spacing is 1.0, starting at 0.0. A  piecewise
  B&#233;zier curve which has only two knots,
   0.0 and 1.0, each of multiplicity (degree+1), is a simple B&#233;zier curve.</p>
		<note number="1">
			<p> A simple B&#233;zier curve can be defined as a B-spline curve with
    knots by the following data: </p>
			<p> degree    =   (<i>d</i>) </p>
			<p> upper index on control points      (equal to <i>d</i>) </p>
			<p> control points   (<i>d + 1</i> cartesian points) </p>
			<p> knot type    (equal to quasi-uniform knots)</p>
			<p> knot multiplicities  = (<i>d+1, d+1</i>)</p>
			<p> knots       =                  (0.0,  1.0) </p>
			<p>  No other data are needed, except for a rational B&#233;zier curve.  
     In this case the weights data ((<i>d + 1</i>) REALs) shall be given. </p>
		</note>
		<note number="2">
			<p>  It should be noted that every piecewise B&#233;zier curve has an
        equivalent representation as a B-spline curve. 
    Because of problems with non-uniform knots not every B-spline curve 
    can be represented as a piecewise B&#233;zier curve.,
        
        To define a piecewise B&#233;zier curve as a B-spline:</p>
			<p>  The first  knot is 0.0 with multiplicity (<i>d + 1</i>). </p>
			<p>  The next   knot is 1.0 with multiplicity <i>d</i>
			</p>
			<p> (the knots for one  segment  are now defined, unless it is the last one). </p>
			<p>  The next knot is 2.0  with multiplicity <i>d</i> (the knots for two
      segments  are now defined, unless the second is the last one). </p>
			<p>  Continue to the end of the last segment, call it the <i>n</i>-th
 segment, at
      the end of which a knot with value <i>n</i>, multiplicity (<i>d + 1</i>) is added.</p>
		</note>
		<example number="1">
     A one-segment cubic B&#233;zier curve would have knot sequence (0,1)
     with multiplicity sequence (4,4).
      </example>
		<example number="2">
      A two-segment cubic piecewise B&#233;zier curve would have knot
      sequence (0,1,2) with multiplicity sequence (4,3,4).
      </example>
		<note number="3">
			<p>For the piecewise B&#233;zier case, if <i>d</i> is the degree,
      <i>k+1</i> is the number of control points, <i>m</i> is the
      number of knots with multiplicity <i>d</i>, and <i>N</i> is the total number of
      knots for the spline, then </p>
			<p>
				<i>         (d + 2 + k)  =  N  =  (d + 1) + md + (d + 1)   </i>
			</p>
			<p>      thus,<i> m  = (k - d)/d    </i>
			</p>
			<p>   Thus, the knot sequence is <i>(0, 1, ..., m, (m+1))</i> with multiplicities
     <i>(d+1, d,. . ., d, d+1)</i>.</p>
		</note>
		<note number="3">
			<p>  The value k_up may be required for the upper index on the knot
    and knot multiplicity lists. This is computed from the degree and the number of
    control points.</p>
			<p> k_up = (SELF\backslash b_spline_curve.upper_index_on_control_points)/(SELF\backslash b_spline_curve.degree + 1) </p>
			<p>  If required, the knots and knot multiplicities can be
       computed by the function calls: </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_curve.degree, k_up, piecewise_bezier_knots),  </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_curve.degree,k_up, piecewise_bezier_knots). </p>
		</note>
	</ext_description>
	<!-- +++++++++++ rational_b_spline_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.rational_b_spline_curve">
		<p>A <b>rational_b_spline_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_curve"/>, that is a piecewise parametric  rational
     curve described in terms of control points and basis
     functions. This subtype is instantiated with one of the other subtypes of
     <b>b_spline_curve</b> which  explicitly or implicitly provide the knot
     values used to define the basis functions.</p>
		<p> All weights shall be positive and the curve is given by:</p>
		<p>
			<img src="BScrv2.gif"/>
		</p>
	</ext_description>
	<!-- weights_data -->
	<ext_description linkend="geometry_schema.rational_b_spline_curve.weights_data">
the supplied values of the weights; see the derived
     attribute <b>weights</b>;
</ext_description>
	<!-- degree -->
	<ext_description linkend="geometry_schema.rational_b_spline_curve\b_spline_curve.degree">
the algebraic degree of the basis functions;
</ext_description>
	<!-- curve_form -->
	<ext_description linkend="geometry_schema.rational_b_spline_curve\b_spline_curve.curve_form">
Used to identify particular types of curve; it is for information only.
</ext_description>
	<!-- closed_curve -->
	<ext_description linkend="geometry_schema.rational_b_spline_curve\b_spline_curve.closed_curve">
Indication of whether the curve is closed; it is for information only.
</ext_description>
	<!-- self_intersect -->
	<ext_description linkend="geometry_schema.rational_b_spline_curve\b_spline_curve.self_intersect">
Flag to indicate whether the curve self-intersects or not; it is for information only.
</ext_description>
	<!-- upper_index_on_control_points -->
	<ext_description linkend="geometry_schema.rational_b_spline_curve\b_spline_curve.upper_index_on_control_points">
the upper index on the array of control points; the lower index is 0; this value is derived from
    the list of control points;
</ext_description>
	<!-- control_points -->
	<ext_description linkend="geometry_schema.rational_b_spline_curve\b_spline_curve.control_points">
the array of control points used to define the  geometry of the curve.This is derived from the list of control
    points;
</ext_description>
	<!-- weights -->
	<ext_description linkend="geometry_schema.rational_b_spline_curve.weights">
the array of weights associated with the control points. This is
    derived from the <b>weights_data</b>;
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.rational_b_spline_curve.wr:WR1">
	There shall be the same number of weights as control points.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.rational_b_spline_curve.wr:WR2">
	All the weights shall have values greater than 0.0.
</ext_description>
	<!-- +++++++++++ local_b_spline +++++++++++ -->
	<ext_description linkend="geometry_schema.local_b_spline">
		A
		<b>local_b_spline</b>
		is a type of
		<express_ref linkend="representation_schema:ir_express:representation_schema.representation_item"/>
		that is polynomial B-spline of degree d in one parameter defined over
		a list of knot values with associated multiplicities.
		The knot list is a list of distinct strictly increasing real values, the
		list of multiplicities defines the multiplicity of each knot. To
		ensure that all related
		<b>local_b_spline</b>
		functions refer to the same knot list the explicit knot list is
		defined with the entities, such as
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.locally_refined_spline_surface"/>
		, which use
		<b>local_b_spline</b>
		functions.
		Let
		<i>
			m
			<sub>j</sub>
			</i>
		denote the multiplicity (i.e. the number of repetitions) of the
		distinct knot number
		<i>j</i>
		, and L denote the size of the knot list. Then
		<bigeqn>
				<i>
				&#931;
				<sub>i=1</sub>
					<sup>L</sup>
				m
				<sub>i</sub>
				= d + 2.
			</i>
			</bigeqn>
		All knot multiplicities except the first and the last shall be in the
		range 1,...,
		<i>d</i>
		; the first and last may have a maximum value of
		<i>d+1</i>
		. The continuity of local B-spline at knot
		<i>j</i>
		in the current parameter direction is
		<i>
			d-m
			<sub>j</sub>
			</i>
		.
	</ext_description>
	<!-- degree -->
	<ext_description linkend="geometry_schema.local_b_spline.degree">
the polynomial degree of the <b>local_b_spline</b>;
</ext_description>
	<!-- knots -->
	<ext_description linkend="geometry_schema.local_b_spline.knots">
the list of pointers to the distinct knot values in increasing order;
</ext_description>
	<!-- multiplicities -->
	<ext_description linkend="geometry_schema.local_b_spline.multiplicities">
the list of positive integers defining the multiplicities of the knots.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.local_b_spline.wr:WR1">
	The degree shall be positive;
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.local_b_spline.wr:WR2">
	The number of knots shall be equal to the number of multiplicities;
</ext_description>
	<!-- WR3 -->
	<ext_description linkend="geometry_schema.local_b_spline.wr:WR3">
		<p>The values of the knots and multiplicities shall be compatible with the degree and the continuity requirements for a B-spline function. The function <express_ref linkend="geometry_schema:ir_express:geometry_schema.constraints_param_local_b_spline"/> applies the following tests:</p>
		<p>the sum of knot multiplicities = degree + 2,</p>
		<p>for the first and last knot the multiplicity is bounded by 1 and (degree+1),</p>
		<p>for all other knots the knot multiplicity is bounded by 1 and degree.</p>
		<p>the consecutive knots are increasing in value.</p>
	</ext_description>
	<!-- +++++++++++ locally_refined_spline_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.locally_refined_spline_curve">
		<p>A <b>locally_refined_spline_curve</b> is a type of <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_curve"/> that is a piecewise parametric polynomial or rational curve described in terms of control points and local B-spline functions. If the set of B-spline functions are linearly independent, they will form a basis.
With appropriate attribute values, the curve is capable of representing single span or spline curves of explicit polynomial, rational, B&#233;zier or B-spline type. Furthermore, the degree of the curve can vary as the B-splines from which it is defined, need not to have the same polynomial degree.
</p>
		<note number="1"> A locally refined spline curve is rational if and only if the weights are not all identical; this can be represented by the <express_ref linkend="geometry_schema:ir_express:geometry_schema.rational_locally_refined_spline_curve"/> subtype. If it is polynomial, the weights may be defaulted to all being 1.
</note>
Interpretation of the data is as follows:
	The curve, in the polynomial case, is given by: 
<p>
			<img src="LRcurve.gif"/>
		</p>

	In the rational case all weights shall be positive and the curve is given by:

<p>
			<img src="RationalLRcurve.gif"/>
		</p>
		<p>
where</p>
<eqn>
				<b>K</b> = number of control points, </eqn>
			<eqn>
				<b>P</b>
				<sub>
					<i>i</i>
				</sub> = control points,</eqn>
			<eqn>
				<i>s<sub>i</sub>
				</i>= scaling_factors(<i>i</i>),</eqn>
			<eqn>
				<i>w<sub>i</sub>
				</i> = weights_data(<i>i</i>),</eqn>
			<eqn>N<sub>
					<i>i</i>
				</sub> = local B-splines, and</eqn>
			<eqn>di=degree. </eqn>
		
		<note number="2">  the degree is associated with the local B-spline and does not need to be constant throughout the curve. </note> 

The knot values are defined in the <express_ref linkend="geometry_schema:ir_express:geometry_schema.spline_knot_values"/> type, and the knot multiplicity is defined in the entity <express_ref linkend="geometry_schema:ir_express:geometry_schema.local_b_spline"/>.

<note number="3"> When the polynomial degree is the same for all B-splines and no knot lines exist that do not cross the entire parameter domain, the <b>locally_refined_spline_curve</b> will coincide with <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_curve_with_knots"/>. In that case <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_curve_with_knots"/> has the simplest and most compact representation.
</note>
		<note number="4"> A <b>locally_refined_spline_curve</b> can be of type analysis suitable T-spline, hierarchical B-spline, LR-spline, semi standard T-spline or standard T-spline. The type is given by the enumeration <express_ref linkend="geometry_schema:ir_express:geometry_schema.locally_refined_spline_type_enum"/>, and the packing and unpacking of the curve will depend on this type.
</note>
	</ext_description>
	<!-- b_splines -->
	<ext_description linkend="geometry_schema.locally_refined_spline_curve.b_splines">
the local B-spline functions from which the curve is defined. If they are linearly independent, the set of B-splines will form a basis. The <b>b_splines</b> and consequently also the <b>control_points_list</b> and <b>scaling_factors</b>, are ordered according to the first knot in the local B-spline function. In case of ambiguities, the sorting factors are the last knot in the B-spline function and finally the multiplicity of the first knot.
</ext_description>
	<!-- knot_values -->
	<ext_description linkend="geometry_schema.locally_refined_spline_curve.knot_values">
the  list of distinct knot values;
</ext_description>
	<!-- closed_curve -->
	<ext_description linkend="geometry_schema.locally_refined_spline_curve.closed_curve">
indication whether the curve is closed; this is for information only;
</ext_description>
	<!-- control_points_list -->
	<ext_description linkend="geometry_schema.locally_refined_spline_curve.control_points_list">
the list of control points;
</ext_description>
	<!-- scaling_factors -->
	<ext_description linkend="geometry_schema.locally_refined_spline_curve.scaling_factors">
the list of scaling factors, these factors are used to ensure that the non-zero B-splines at all points in the domain add up to unity (partition of unity). LR B-splines, hierarchical B-splines and some variants of T-splines ensure partition of unity by scaling. Other variants of T-splines use rational scaling.
</ext_description>
	<!-- curve_form -->
	<ext_description linkend="geometry_schema.locally_refined_spline_curve.curve_form">
indication of special curve types; 
</ext_description>
	<!-- locally_refined_spline_type -->
	<ext_description linkend="geometry_schema.locally_refined_spline_curve.locally_refined_spline_type">
the type of the initial locally refined spline curve that provides rules for how the stored curve can be unpacked to its original format;
</ext_description>
	<!-- self_intersect -->
	<ext_description linkend="geometry_schema.locally_refined_spline_curve.self_intersect">
indication whether the curve is self-intersecting; this is for information only;
</ext_description>
	<!-- domain -->
	<ext_description linkend="geometry_schema.locally_refined_spline_curve.domain">
the parameter domain corresponding to the curve. domain(1)  is the minimum parameter value ,  domain(2)  is the maximum parameter value. If the B-splines at the ends have a knot multiplicity equal to the degree+1, the domain will coincide with the domain given by the minimum and maximum values in <express_ref linkend="geometry_schema:ir_express:geometry_schema.locally_refined_spline_curve.knot_values"/>. Otherwise, it will be coincide with a domain given by nearby knots depending on knot multiplicities. Otherwise, it will be coincide with a domain given by nearby knots depending upon knot multiplicities.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.locally_refined_spline_curve.wr:WR1">
	the size of the <express_ref linkend="geometry_schema:ir_express:geometry_schema.locally_refined_spline_curve.b_splines"/> list  shall be equal to the number of control points;
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.locally_refined_spline_curve.wr:WR2">
	the number of <express_ref linkend="geometry_schema:ir_express:geometry_schema.locally_refined_spline_curve.scaling_factors"/> shall be equal to the number of control points.
</ext_description>
	<!-- +++++++++++ rational_locally_refined_spline_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.rational_locally_refined_spline_curve">
		<p>A <b>rational_locally_refined_spline_curve</b> is a type of <express_ref linkend="geometry_schema:ir_express:geometry_schema.locally_refined_spline_curve"/> that  is a piecewise parametric rational curve described in terms of control points and local B-spline functions. </p>
	</ext_description>
	<!-- weights_data -->
	<ext_description linkend="geometry_schema.rational_locally_refined_spline_curve.weights_data">
the supplied values of the weights.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.rational_locally_refined_spline_curve.wr:WR1">
	the size of the  of <b>weights_data</b> list shall be equal to the number of control points
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.rational_locally_refined_spline_curve.wr:WR2">
	all values in the  <b>weights_data</b> list shall be positive.
</ext_description>
	<!-- +++++++++++ trimmed_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.trimmed_curve">
		<p>A <b>trimmed_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_curve"/>, which is created by taking a selected
    portion, between two identified points, of the associated
    basis curve.  The basis curve itself is
    unaltered and more than one trimmed curve may reference the same basis 
    curve. Trimming points for the curve may be identified:</p>
		<p> by parametric value; </p>
		<p> by geometric position;</p>
		<p> by both of the above.</p>
		<p>       At least one of these shall be specified at each end of the curve.
    The <b>sense</b> makes it possible to unambiguously define any segment of
    a closed curve such as a circle.
    The combinations of sense and ordered end points make it possible to
    define four distinct directed segments connecting two different points 
    on a circle or other closed curve. For this purpose cyclic properties of 
    the parameter range are assumed; for example, 370 degrees is equivalent 
    to 10 degrees.

    The trimmed curve has a parametrisation which is inherited from
    that of the particular basis curve referenced.
    More precisely the parameter <i>s</i> of the trimmed curve is
    derived from the parameter <i>t</i> of the basis curve as follows:</p>
		<p>     If sense is TRUE:  <i> s = t - t<sub>1</sub>.</i>
		</p>
		<p>     If sense is FALSE: <i> s = t<sub>1</sub> - t.</i>
		</p>
		<p>   In the above equations <i>t<sub>1</sub>
			</i> is the value given by <b>trim_1</b> or the
    parameter
    value corresponding to <b>point_1</b> and <i>t<sub>2</sub>
			</i> is the parameter value given
    by <b>trim_2</b> or the parameter corresponding to <b>point_2</b>.
    The resultant trimmed curve has a parameter <i>s</i> ranging from 0 at the
    first trimming point to <i>|t<sub>2</sub> - t<sub>1</sub>|</i> at the second trimming point.   </p>
		<note number="1">
  In the case of a closed basis curve, it may be necessary to
    increment <i>
				<sub>1</sub>
			</i> or <i>
				<sub>2</sub>
			</i> by the parametric length for consistency with the
    sense flag.
    </note>
		<note number="2">
			<p> For example:</p>
			<p>   (a) If <b>sense_agreement</b> = TRUE and <i>t<sub>2</sub> &lt; t<sub>1</sub>, t<sub>2</sub>
				</i>
    should be increased by the parametric length. </p>
			<p>  (b) If <b>sense_agreement</b>  = FALSE and <i>t<sub>1</sub> &gt;  t<sub>2</sub> , t<sub>1</sub>
				</i>
  should be increased by the parametric length. </p>
		</note>
	</ext_description>
	<!-- basis_curve -->
	<ext_description linkend="geometry_schema.trimmed_curve.basis_curve">
 the <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/> to be trimmed. For curves with
    multiple representations any parameter values given as <b>trim_1</b> or
 <b>trim_2</b> refer to   the master representation of the
 <b>basis_curve</b> only;
</ext_description>
	<!-- trim_1 -->
	<ext_description linkend="geometry_schema.trimmed_curve.trim_1">
the first trimming point which may be specified as a
    <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> (point_1), as a real parameter value (parameter_1 =
 <i>t<sub>1</sub>
		</i>), or both;
</ext_description>
	<!-- trim_2 -->
	<ext_description linkend="geometry_schema.trimmed_curve.trim_2">
the second trimming point which may be specified as a
    <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> (point_2), as a real parameter value (parameter_2 =
 <i>t<sub>2</sub>
		</i>), or both;
</ext_description>
	<!-- sense_agreement -->
	<ext_description linkend="geometry_schema.trimmed_curve.sense_agreement">
		<p>Flag to indicate whether the direction of the 
    trimmed curve agrees with or is opposed to the direction of 
    <b>basis_curve</b>.</p>
		<p>
			<b>sense_ agreement</b> = TRUE  if the curve is being
  traversed in the direction of increasing parametric value; </p>
		<p>
			<b>sense_agreement</b> =FALSE  otherwise. </p>
		<p>   For an open curve, <b>sense_agreement</b> = FALSE  if <i>t<sub>1</sub>
			</i>
  &gt;   <i>t<sub>2</sub>
			</i>. </p>
		<p>  If <i>t<sub>2</sub>
			</i> &gt;<i>t<sub>1</sub>
			</i>, <b>sense_agreement</b> = TRUE. </p>
		<p>   The sense  information is redundant in this case but is
  essential for a closed curve. </p>
	</ext_description>
	<!-- master_representation -->
	<ext_description linkend="geometry_schema.trimmed_curve.master_representation">
		<p> where both parameter and point are
  present at either end of the curve this indicates the preferred
    form. Multiple representations provide the ability to communicate
  data in more than one form, even though the data are expected to be
  geometrically identical.  </p>
		<note number="3"> The <b>master_representation</b> attribute acknowledges the
    impracticality of ensuring that multiple forms are indeed identical and
    allows the indication of a preferred form. This would probably be
   determined
    by the creator of the data. All characteristics, such as parametrisation,
    domain, and results of evaluation, for an entity having multiple
    representations, are derived from the master representation. Any use of
    the other representations is a compromise for practical considerations. </note>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.trimmed_curve.wr:WR1">
	Either a single value is specified for <b>trim_1</b>, or, the
 two trimming values are of different types (point and parameter).
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.trimmed_curve.wr:WR2">
	Either a single value is specified for <b>trim_2</b>, or, the
 two trimming values are of different types (point and parameter).
</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.trimmed_curve.wr:IP1">
	Where both the parameter value and the cartesian point exist
	 for <b>trim_1</b> or <b>trim_2</b> they shall be consistent, i.e., 
	 the <b>basis_curve</b> evaluated at the parameter value shall coincide with
 the specified point.
</ext_description>
	<!-- IP2 -->
	<ext_description linkend="geometry_schema.trimmed_curve.wr:IP2">
	When a cartesian point is specified by <b>trim_1</b> or by
    <b>trim_2</b>, it shall lie on the <b>basis_curve</b>.
</ext_description>
	<!-- IP3 -->
	<ext_description linkend="geometry_schema.trimmed_curve.wr:IP3">
	Except in the case of a closed <b>basis_curve</b>, where both
	    parameter_1 and parameter_2 exist, they shall be consistent with the
 sense flag, i.e., sense = (parameter_1 &lt; parameter_2).
</ext_description>
	<!-- IP4 -->
	<ext_description linkend="geometry_schema.trimmed_curve.wr:IP4">
	If both parameter_1 and parameter_2 exist, (parameter_1
 &lt; &gt; parameter_2).
</ext_description>
	<!-- IP5 -->
	<ext_description linkend="geometry_schema.trimmed_curve.wr:IP5">
	When a parameter value is specified by <b>trim_1</b> or
   <b>trim_2</b>, it shall lie within the parametric range of the
 <b>basis_curve</b>.
</ext_description>
	<!-- +++++++++++ composite_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.composite_curve">
		<p>A <b>composite_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_curve"/>, that is a collection of curves joined end-to-end.
    The individual segments of the curve are themselves defined as
    <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_segment"/>s.
    The parametrisation of the composite  curve is an accumulation of
    the parametric ranges of the referenced  bounded curves. The first 
    segment is parametrised from 0 to <i>l<sub>1</sub>
			</i>, and, for <i>i &#8805; 2</i>, the 
    <i>i</i> th segment is parametrised from  </p>
		<p>
			<img src="CompC1.gif"/>
		</p>
		<p>   where <i>l<sub>k</sub>
			</i> is the parametric length (i.e., difference between
    maximum and minimum parameter values) of the curve underlying the
    <i>k</i> th segment. </p>
		<p>   Let <i>T</i> denote the parameter for the <b>composite_curve</b>. </p>
		<p>  Then, if the <i>i</i>th segment is not a <b>reparametrised_composite_curve_segment</b>,
     <i>T</i> is related to the parameter <i>t<sub>1</sub>,  t<sub>i0</sub>, &#8804; t<sub>1</sub>, &#8804; t<sub>i1</sub>
			</i>
      for the <i>i</i>th segment by the equation: </p>
		<p>
			<img src="CompC2a.gif"/>
		</p>
		<p>  if <b>segments[i].same_sense</b> = TRUE; </p>
     or by the equation:
        <p>
			<img src="CompC2b.gif"/>
		</p>
		<p>    if <b>segments[i].same_sense</b> = FALSE. </p>
		<p>  If <b>segments[i]</b> is of type <b>reparametrised_composite_curve_segment</b>, </p>
		<eqn>
			<i> T = &#931;<sub>k=1</sub>
				<sup>i-1</sup> l<sub>k</sub> + &#964; </i>
		</eqn>
		<p>  Where <i>&#964;</i> is defined in <express_ref linkend="geometry_schema:ir_express:geometry_schema.reparametrised_composite_curve_segment"/>. </p>
		<note>  See Figure 12 for  further information on curve definition and attributes.
    </note>
		<figure id="Geomfig12" number="12">
			<title>Composite_curve</title>
			<img src="Geomfig12.gif"/>
		</figure>
	</ext_description>
	<!-- n_segments -->
	<ext_description linkend="geometry_schema.composite_curve.n_segments">
the number of component curves;
</ext_description>
	<!-- segments -->
	<ext_description linkend="geometry_schema.composite_curve.segments">
the component bounded curves, their transitions and
    senses. The transition attribute for the last segment defines the
  transition between the end of the last segment and the start of the first; 
  this transition attribute may take the value <b>discontinuous</b>, which 
  indicates an open curve.
</ext_description>
	<!-- self_intersect -->
	<ext_description linkend="geometry_schema.composite_curve.self_intersect">
indication of whether the curve intersects itself  or not; this is for information only;
</ext_description>
	<!-- dim -->
	<ext_description linkend="geometry_schema.composite_curve\geometric_item.dim">
the dimensionality of the coordinate space for the composite
       curve. This is an inherited attribute from the geometric representation
  item supertype.
</ext_description>
	<!-- closed_curve -->
	<ext_description linkend="geometry_schema.composite_curve.closed_curve">
indication of whether the curve is closed or not; this is derived from the transition code on the last segment;
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.composite_curve.wr:WR1">
	No transition code shall be discontinuous, except for the
       last code of an open curve.
</ext_description>
	<!-- +++++++++++ composite_curve_segment +++++++++++ -->
	<ext_description linkend="geometry_schema.composite_curve_segment">
		<p>A <b>composite_curve_segment</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve"/>, and is a bounded curve together with
   transition information which is used to construct a
 <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve"/>. </p>
	</ext_description>
	<!-- transition -->
	<ext_description linkend="geometry_schema.composite_curve_segment.transition">
the state of transition (i.e., geometric continuity from
   the last point of this segment to the first point of the next segment) in a
    composite curve;
</ext_description>
	<!-- same_sense -->
	<ext_description linkend="geometry_schema.composite_curve_segment.same_sense">
 an indicator of whether or not the sense of the segment
    agrees with, or opposes, that of the parent curve. If <b>same_sense</b>
    is false, the point with highest parameter value is taken as the first 
    point of the segment;
</ext_description>
	<!-- parent_curve -->
	<ext_description linkend="geometry_schema.composite_curve_segment.parent_curve">
		<p>the bounded curve which defines the geometry of the
    segment; </p>
		<note>
    Since <b>composite_curve_segment</b> is not a subtype of
   <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> the instance of 
   <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_curve"/> used   as <b>parent_curve</b> is not automatically associated with the   <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>  of the 
   <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> using
    a  <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve"/> containing this <b>composite_curve_segment</b>.
    It is therefore necessary to ensure that the <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_curve"/>
    instance is explicitly included in a <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/>  with the   appropriate <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>.
    </note>
	</ext_description>
	<!-- using_curves -->
	<ext_description linkend="geometry_schema.composite_curve_segment.using_curves">
the set of <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve"/>s which use
    this <b>composite_curve_segment</b> as a segment. This set shall not be empty.
  item supertype.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.composite_curve_segment.wr:WR1">
	The <b>parent_curve</b> shall  be a <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_curve"/>.
</ext_description>
	<!-- +++++++++++ reparametrised_composite_curve_segment +++++++++++ -->
	<ext_description linkend="geometry_schema.reparametrised_composite_curve_segment">
		<p>A <b>reparametrised_composite_curve_segment</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_segment"/>, which provides the capability to
   re-define its parametric length without changing its geometry.    </p>
		<p>   Let <i>l</i> = <b>param_length</b>.</p>
		<p>  If <i> t<sub>0</sub> &#8804; t &#8804; t<sub>1</sub>
			</i> is the parameter range of <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_segment.parent_curve"/>,
   the new parameter <i>&#964;</i> for the <b>reparametrised_composite_curve_segment</b>
   is given by the equation: </p>
		<eqn>
			<i> &#964; =(t - t<sub>0</sub>)l/(t<sub>1</sub> - t<sub>0</sub>), </i>  
   if <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_segment.same_sense"/> = TRUE; </eqn>
		<p> or by the equation: </p>
		<eqn>
			<i> &#964;= (t<sub>1</sub> - t)l/(t<sub>1</sub> - t<sub>0</sub>),  </i> 
   if <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_segment.same_sense"/> = FALSE. </eqn>
	</ext_description>
	<!-- param_length -->
	<ext_description linkend="geometry_schema.reparametrised_composite_curve_segment.param_length">
the new parametric length of the segment. The
    segment is given a simple linear reparametrisation from 0.0 at the first 
    point to <b>param_length</b> at the last point. The parametrisation of 
    the composite curve constructed using this segment is defined in terms 
    of <b>param_length</b>.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.reparametrised_composite_curve_segment.wr:WR1">
	The <b>param_length</b> shall be greater than zero.
</ext_description>
	<!-- +++++++++++ pcurve +++++++++++ -->
	<ext_description linkend="geometry_schema.pcurve">
		<p>A <b>pcurve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/>, that is a 3D curve defined by means of a 2D curve in the
parameter space of a surface. If the curve is parametrised by the
function <i>(u,v) = f(t)</i>, and the surface is parametrised by the function
<i>(x,y,z) = g(u,v)</i>, the <b>pcurve</b> is parametrised by the
function <i>(x,y,z) = g(f(t))</i>. </p>
		<p>A <b>pcurve</b> definition contains a reference to its <b>basis_surface</b>
and an indirect reference to a 2D curve
through a <express_ref linkend="representation_schema:ir_express:representation_schema.definitional_representation"/> entity.   
The 2D curve, being in parameter space, is not in the context
of the basis surface. Thus a direct reference is not possible.
For the 2D curve the variables involved are <i>u</i> and <i>v</i>, which occur
in the parametric representation of the <b>basis_surface</b> rather than <i>x,y</i>
 Cartesian coordinates. The curve is only defined within the parametric range of
 the surface. </p>
	</ext_description>
	<!-- basis_surface -->
	<ext_description linkend="geometry_schema.pcurve.basis_surface">
the surface in whose parameter space the curve is defined;
</ext_description>
	<!-- reference_to_curve -->
	<ext_description linkend="geometry_schema.pcurve.reference_to_curve">
the reference to the  parameter space
curve which defines the <b>pcurve</b> ;
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.pcurve.wr:WR1">
	The set of items in the <express_ref linkend="representation_schema:ir_express:representation_schema.definitional_representation"/> 
	entity corresponding to the <b>reference_to_curve</b> shall have exactly one element.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.pcurve.wr:WR2">
	The unique item in the set shall be a curve.
</ext_description>
	<!-- WR3 -->
	<ext_description linkend="geometry_schema.pcurve.wr:WR3">
	The dimensionality of this parameter space curve shall be 2.
</ext_description>
	<!-- +++++++++++ bounded_pcurve +++++++++++ -->
	<ext_description linkend="geometry_schema.bounded_pcurve">
		<p>A <b>bounded_pcurve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>, which also has the properties of a 
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_curve"/>. </p>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.bounded_pcurve.wr:WR1">
	The referenced curve of the <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/> supertype shall be
	of type  <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_curve"/>. This ensures that the
<b>bounded_pcurve</b> is of finite arc length.
</ext_description>
	<!-- +++++++++++ surface_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.surface_curve">
		<p>A <b>surface_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/>, that is a curve on a surface.  The curve is
       represented as a curve (<b>curve_3d</b>) in three-dimensional space
       and possibly as a curve, corresponding to a <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>, in the two-dimensional
    parametric space of a surface.
    The ability of this curve to reference a list of 1 or 2
 <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve_or_surface"/>s enables this entity to define either a curve on 
  a single surface, or an intersection curve which has two distinct surface
    associations. A `seam' on a closed surface can also be represented by 
    this entity; in this case each <b>associated_geometry</b> will be a 
    pcurve lying on the same surface.
        Each <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>, if it exists, shall be  parametrised to have the same
    sense as <b>curve_3d</b>.
    The <b>surface_curve</b> takes its parametrisation directly from either
   <b>curve_3d</b> or  <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/> as indicated by the
   attribute master representation.  </p>
		<note number="1">
			<p> Because of the ANDOR relationship with the
<b>bounded_surface_curve</b> subtype an instance of a
<b>surface_curve</b> may be any one of the following: </p>
			<ul>
				<li> a <b>surface_curve;</b>
				</li>
				<li> a <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_surface_curve"/>;</li>
				<li> an <express_ref linkend="geometry_schema:ir_express:geometry_schema.intersection_curve"/>;</li>
				<li> an <express_ref linkend="geometry_schema:ir_express:geometry_schema.intersection_curve"/> AND <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_surface_curve"/>;</li>
				<li> a <express_ref linkend="geometry_schema:ir_express:geometry_schema.seam_curve"/>;</li>
				<li> a <express_ref linkend="geometry_schema:ir_express:geometry_schema.seam_curve"/> AND <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_surface_curve"/>.</li>
			</ul>
		</note>
	</ext_description>
	<!-- curve_3d -->
	<ext_description linkend="geometry_schema.surface_curve.curve_3d">
the curve which is the three-dimensional representation  of the  <b>surface_curve</b>;
</ext_description>
	<!-- associated_geometry -->
	<ext_description linkend="geometry_schema.surface_curve.associated_geometry">
a list of one or two pcurves or surfaces
    which define the surface or surfaces associated with the surface curve.
   Two elements in this list indicate that the curve has two surface 
   associations which need not be two distinct surfaces.
   When a pcurve is selected, it identifies a surface and also associates a 
   basis curve in the parameter space of this surface;
</ext_description>
	<!-- master_representation -->
	<ext_description linkend="geometry_schema.surface_curve.master_representation">
		<p>the <b>master_representation</b> defines the curve used to determine the unique
    parametrisation of the <b>surface_curve</b>.</p>
		<p> The <b>master_representation</b> takes one of the values <b>curve_3d</b>,
    <b>pcurve_s1</b> or <b>pcurve_s2</b> to indicate a preference for the 3D curve, or the first or
    second pcurve, in the associated geometry list, respectively.
    Multiple representations provide the ability to communicate data in
    more than one form, even though the data is expected to be geometrically
    identical.</p>
		<note number="2"> The <b>master_representation</b> attribute acknowledges the
    impracticality of ensuring that multiple forms are indeed identical and
    allows the indication of a preferred form. This would probably be
   determined
    by the creator of the data. All characteristics, such as parametrisation,
    domain, and results of evaluation, for an entity having multiple
    representations, are derived from the master representation. Any use of
    the other representations is a compromise for practical considerations. </note>
	</ext_description>
	<!-- basis_surface -->
	<ext_description linkend="geometry_schema.surface_curve.basis_surface">
the surface, or surfaces on which the <b>surface_curve</b>
     lies. This is determined from the  <b>associated_geometry</b> list.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.surface_curve.wr:WR1">
	The currve <b>curve_3d</b> shall be defined in three-dimensional space.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.surface_curve.wr:WR2">
	The value <b>pcurve_s1</b> shall only be nominated  as the
	   master representation if the first element of the associated geometry list
  is a <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>.
</ext_description>
	<!-- WR3 -->
	<ext_description linkend="geometry_schema.surface_curve.wr:WR3">
	The value <b>pcurve_s2</b> shall only be nominated  as the
	   master representation if the  second element of the associated
	   geometry list is a pcurve. This also requires that <b>pcurve_s2</b> shall
	   not be nominated when the associated geometry list contains a single
  element.
</ext_description>
	<!-- WR4 -->
	<ext_description linkend="geometry_schema.surface_curve.wr:WR4">
	The curve <b>curve_3d</b> shall not be a  <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>.
  </ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.surface_curve.wr:IP1">
	Where <b>curve_3d</b> and one or more <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>s exist
	 they shall represent the same mathematical point set. (i.e., They shall
 coincide geometrically but may differ in parametrisation.)
</ext_description>
	<!-- IP2 -->
	<ext_description linkend="geometry_schema.surface_curve.wr:IP2">
		<p>
			<b>curve_3d</b> and any associated <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>s shall agree with
    respect to their senses.</p>
	</ext_description>
	<!-- +++++++++++ intersection_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.intersection_curve">
		<p>A <b>intersection_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve"/>, which results from the
 intersection
   of two surfaces. It is represented as a special subtype of the
 <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve"/> entity having two distinct surface associations defined
 via the associated geometry list. </p>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.intersection_curve.wr:WR1">
	The intersection curve shall have precisely two associated
  geometry  elements.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.intersection_curve.wr:WR2">
	The two associated geometry elements shall be related to
	   distinct surfaces. These are the surfaces which define the intersection curve.
</ext_description>
	<!-- +++++++++++ seam_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.seam_curve">
		<p>A <b>seam_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve"/>,  that is a curve on a closed parametric surface which has   two distinct representations as constant parameter curves at the two 
   extremes of the parameter range for the surface. </p>
		<example>
   The `seam'    on a cylinder has representations as the lines <i>u = 0</i> or
 <i> u = 360</i>  degrees in parameter space.
</example>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.seam_curve.wr:WR1">
	The seam curve shall have precisely two <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve.associated_geometry"/>s.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.seam_curve.wr:WR2">
	The two <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve.associated_geometry"/>s shall be related to the same surface.
</ext_description>
	<!-- WR3 -->
	<ext_description linkend="geometry_schema.seam_curve.wr:WR3">
	The first <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve.associated_geometry"/> shall be a <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>.
</ext_description>
	<!-- WR4 -->
	<ext_description linkend="geometry_schema.seam_curve.wr:WR4">
	The second <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve.associated_geometry"/> shall be a <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>.
</ext_description>
	<!-- +++++++++++ bounded_surface_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.bounded_surface_curve">
		<p>A <b>bounded_surface_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve"/>, which also has the properties of a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_curve"/>. </p>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.bounded_surface_curve.wr:WR1">
	The <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve.curve_3d"/> attribute of the
    <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve"/> supertype shall be a <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_curve"/>.
</ext_description>
	<!-- +++++++++++ composite_curve_on_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.composite_curve_on_surface">
		<p>A <b>composite_curve_on_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve"/>, that is a collection of segments which
     are curves on a surface. Each segment shall lie on the basis surface, 
     and shall reference a <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_surface_curve"/>, or
		a <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_pcurve"/>, or
		a <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_on_surface"/>.
		</p>
   
     <note> A <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_on_surface"/>  can be included as
     the <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_segment.parent_curve"/> attribute of a <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_segment"/>
     since it is a bounded curve subtype. </note>
		<p>  There shall be at least positional continuity between adjacent segments.
    The parametrisation of the composite curve is obtained from the
    accumulation of the parametric ranges of the segments. The first segment 
    is parametrised from 0 to <i>l<sub>1</sub>
			</i>, and, for <i>i &#8805; 2</i>, the <i>i</i> th
    segment is parametrised from </p>
		<eqn>
			<i> &#931;<sub>k=1</sub>
				<sup>i-1</sup> l<sub>k</sub>
			</i>  to   <i>   &#931;<sup>i</sup>
				<sub>k=1</sub>  l<sub>k</sub> , </i>
		</eqn>
		<p>  where <i>l<sub>k</sub>
			</i> is the parametric length (i.e., difference between
    maximum and minimum parameter values) of the   <i>k^th</i> curve segment. </p>
	</ext_description>
	<!-- basis_surface -->
	<ext_description linkend="geometry_schema.composite_curve_on_surface.basis_surface">
the surface on which the composite curve is defined.;
</ext_description>
	<!-- [SELF\composite_curve.n_segments -->
	<ext_description linkend="geometry_schema.composite_curve_on_surface\composite_curve.n_segments">
The component bounded curves, their transitions and senses. The transition for the last
   segment defines the transition between the end of the last segment and the
   start of the first;  this element may take the value <b>discontinuous</b>, which indicates an
   open curve. For each segment the
   <b>parent_curve</b> shall be either a <b>bounded_pcurve</b>, a
   <b>bounded_surface_curve</b>, or a
   <b>composite_curve_on_surface</b>.
</ext_description>
	<!-- SELF\composite_curve.self_intersect -->
	<ext_description linkend="geometry_schema.composite_curve_on_surface\composite_curve.self_intersec">
Indication of whether the curve intersects itself  or not.    
</ext_description>
	<!-- SELF\composite_curve.dim -->
	<ext_description linkend="geometry_schema.composite_curve_on_surface\composite_curve.dim">
The dimensionality of the coordinate space for the composite curve.
</ext_description>
	<!-- SELF\composite_curve.closed_curve -->
	<ext_description linkend="geometry_schema.composite_curve_on_surface\composite_curve.closed_curve">
Indication of whether the curve is closed or not.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.composite_curve_on_surface.wr:WR1">
	 The <b>basis_surface</b> SET shall contain at least one
  surface. This ensures that all segments reference curves on the same surface.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.composite_curve_on_surface.wr:WR2">
	Each segment shall reference a <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>, or a <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve"/>, or a <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_on_surface"/>.
</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.composite_curve_on_surface.wr:IP1">
	  	 Each <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_segment.parent_curve"/> referenced by a
		  <b>composite_curve_on_surface</b> segment  shall be a curve on surface and a bounded curve.
</ext_description>
	<!-- +++++++++++ offset_curve_2d +++++++++++ -->
	<ext_description linkend="geometry_schema.offset_curve_2d">
		<p>A <b>offset_curve_2d</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/>, at a constant distance from
   a basis  curve in two-dimensional space.  This entity defines a simple
  plane-offset curve by offsetting by <b>distance</b>  along the normal to
  <b>basis_curve</b> in the plane of <b>basis_curve</b>.</p>
		<p>     The underlying curve shall have a well-defined tangent
   direction at every point. In  the case of a composite curve, the
   transition code between each segment shall be  <b>cont_same_gradient</b>
 or <b>cont_same_gradient_same_curvature</b>. </p>
		<note>  The <b>offset_curve_2d</b> may differ in nature from the
    <b>basis_curve</b>; the offset of a non self-intersecting curve can be
   self-intersecting.  Care should be taken to ensure that the offset to a
   continuous curve does not become discontinuous. </note>
		<p> The <b>offset_curve_2d</b> takes its  parametrisation from the
    <b>basis_curve</b>.
  The <b>offset_curve_2d</b> is parametrised as</p>
		<eqn>
			<i>
				<b>&#955;</b>(u) = <b>C</b>(u) + d</i>(<b>orthogonal_complement(t</b>)), </eqn>
		<p> where <b>t</b> is the unit tangent vector to the basis curve <i>
				<b>C</b>(u)</i>
  at  parameter value <i>u</i>, and <i>d</i> is <b>distance</b>.</p>
		<p>      The underlying curve shall be two-dimensional.,</p>
	</ext_description>
	<!-- basis_curve -->
	<ext_description linkend="geometry_schema.offset_curve_2d.basis_curve">
the curve that is being offset;
</ext_description>
	<!-- distance -->
	<ext_description linkend="geometry_schema.offset_curve_2d.distance">
the distance of the offset curve from the basis curve.
   <b>distance</b> may be positive, negative or zero.  A positive  value of
  <b>distance</b> defines an offset in the direction 
    which is normal to the curve in the sense of an anti-clockwise rotation
    through 90 degrees from the tangent vector <b>T</b> at the given point.
 (This is in the direction of <express_ref linkend="geometry_schema:ir_express:geometry_schema.orthogonal_complement"/>(T).)
</ext_description>
	<!-- self_intersect -->
	<ext_description linkend="geometry_schema.offset_curve_2d.self_intersect">
an indication of whether the offset curve self-intersects; this is for information only.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.offset_curve_2d.wr:WR1">
	The The underlying <b>basis_curve</b> shall be defined in two-dimensional space..
</ext_description>
	<!-- +++++++++++ offset_curve_3d +++++++++++ -->
	<ext_description linkend="geometry_schema.offset_curve_3d">
		<p>A <b>offset_curve_3d</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/>, at a constant distance from a basis
   curve in three-dimensional space.

        The underlying curve shall have a well-defined tangent
   direction at every point. In  the case of a composite curve the
   transition code between each segment shall be  <b>cont_same_gradient</b>
 or <b>cont_same_gradient_same_curvature</b>.

         The offset curve at any point (parameter) on the basis curve is in
  the direction <i>&lt; <b> v &#215; t &gt;</b>
			</i> where <i>
				<b>v</b>
			</i>
    is the fixed reference   direction and <i>
				<b>t</b>
			</i> is the unit tangent to the <b>basis_curve</b>.
        For the offset direction to be well defined, <i>
				<b>t</b>
			</i>  shall not at any
    point of the curve be in the same, or opposite, direction as <i>
				<b>v</b>
			</i>. </p>
		<note>  The <b>offset_curve_3d</b> may differ in nature from the
        <b>basis_curve</b>; the offset of a non-self-intersecting curve can be
       self-intersecting.  Care should be taken to ensure that the offset to a
       continuous curve does not become discontinuous. </note>
		<p> The <b>offset_curve_3d</b> takes its  parametrisation from the
    <b>basis_curve</b>.
  The <b>offset_curve_3d</b> is parametrised as </p>
		<eqn>
			<i>
				<b>&#955;</b>(u) = <b>C</b>(u) + d &lt;<b> v &#215; t &gt;</b>
			</i>), </eqn>
		<p> where <b>t</b> is the unit tangent vector to the basis curve <i>
				<b>C</b>(u)</i>
  at  parameter value <i>u</i>, and <i>d</i> is <b>distance</b>.</p>
	</ext_description>
	<!-- basis_curve -->
	<ext_description linkend="geometry_schema.offset_curve_3d.basis_curve">
the curve that is being offset;
</ext_description>
	<!-- distance -->
	<ext_description linkend="geometry_schema.offset_curve_3d.distance">
the distance of the offset curve from the basis curve;
   <b>distance</b> may be positive, negative or zero;  
</ext_description>
	<!-- self_intersect -->
	<ext_description linkend="geometry_schema.offset_curve_3d.self_intersect">
an indication of whether the offset curve self-intersects; this is for information only;
</ext_description>
	<!-- ref_direction -->
	<ext_description linkend="geometry_schema.offset_curve_3d.ref_direction">
the <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> used to define the direction
       of the <b>offset_curve_3d</b> from the <b>basis_curve</b>.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.offset_curve_3d.wr:WR1">
	Both the underlying curve and the reference direction shall be  in three-dimensional space.
</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.offset_curve_3d.wr:IP1">
	At no point on the curve shall <b>ref_direction</b> be
      parallel, or opposite to, the direction of the tangent vector.
</ext_description>
	<!-- +++++++++++ curve_replica +++++++++++ -->
	<ext_description linkend="geometry_schema.curve_replica">
		<p>A <b>curve_replica</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/>, and is a replica of a curve in a different
    location.  It is defined by
    referencing the parent curve and a transformation.  The geometric
    form of the curve produced will be the same as the parent curve, but,
    where the transformation includes scaling, the dimensions will differ.
    The curve replica takes its parametric range and parametrisation
    directly from the parent curve.
    Where the parent curve is a curve on surface, the replica will not
     in general share the property of lying on the surface.</p>
	</ext_description>
	<!-- parent_curve -->
	<ext_description linkend="geometry_schema.curve_replica.parent_curve">
the curve that is being copied;
</ext_description>
	<!-- transformation -->
	<ext_description linkend="geometry_schema.curve_replica.transformation">
the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator"/> which 
      defines the location of the curve replica.  This transformation may include scaling. 
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.curve_replica.wr:WR1">
	The coordinate space dimensionality of the <b>transformation</b>
    attribute shall be the same as that of the <b>parent_curve</b>.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.curve_replica.wr:WR2">
	 A <b>curve_replica</b> shall not participate in its own definition.
</ext_description>
	<!-- +++++++++++ surface +++++++++++ -->
	<ext_description linkend="geometry_schema.surface">
		<p>A <b>surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>, that can be envisioned as a set of connected points in
     3-dimensional space  which is always locally 2-dimensional, but need not 
     be a manifold.  A surface  shall not be a single point or
     in part, or entirely, a curve.</p>

    Each surface has a parametric representation of the form
    <eqn>
			<i>
				<b>&#963;</b>(u,v),   </i>
		</eqn>
		<p>   where <i>u</i> and <i>v</i> are independent dimensionless parameters.
    The unit normal <b> N</b>, at any point on the surface, is given by the equation </p>
		<eqn>
			<b>N</b>
			<i>(u,v) =  &lt; &#8706;<b>&#963;/</b>&#8706; u &#215; &#8706; <b>&#963;</b> /&#8706; u &gt; </i>
		</eqn>
	</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.surface.wr:IP1">
	A <b>surface</b> has non-zero area.
</ext_description>
	<!-- IP2 -->
	<ext_description linkend="geometry_schema.surface.wr:IP2">
	 A <b>surface</b> is arcwise connected.
</ext_description>
	<!-- +++++++++++ elementary_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.elementary_surface">
		<p>A <b>elementary_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/>, that is a simple analytic surface with defined parametric representation. </p>
	</ext_description>
	<!-- position -->
	<ext_description linkend="geometry_schema.elementary_surface.position">
the location and orientation of the surface,this
      attribute is used in the definition of the parametrisation of the
      surface.
</ext_description>
	<!-- +++++++++++ plane +++++++++++ -->
	<ext_description linkend="geometry_schema.plane">
		<p>A <b>plane</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.elementary_surface"/>, that is an unbounded surface with a constant normal.
    A <b>plane</b> is defined by a point on the plane and the normal direction
    to the plane. </p>
		<p> The data is to be interpreted as follows: </p>
		<b>
			<eqn> C = position.location  </eqn>
			<eqn>  x = position.p[1]     </eqn>
			<eqn> y =  position.p[2]     </eqn>
		</b>
		<eqn>
			<b> z = position.p[3] </b>  (normal to plane)     </eqn>
		<p> and the surface is parametrised as </p>
		<eqn>
			<i>
				<b>&#963;</b>(u,v)</i> = <b>C</b> + <i>u</i>
			<b>x</b> + <i>v</i>
			<b>y</b>
		</eqn>
		<p>    where the parametrisation range is  <i>-&#8734; &lt; u, v &lt; &#8734;</i>.  </p>
		<p>  In the above parametrisation, the length unit for the unit vectors 
    <b>x</b> and <b>y</b> is derived from the context of the <b>plane</b>.
     </p>
	</ext_description>
	<!-- SELF\elementary_surface.position -->
	<ext_description linkend="geometry_schema.plane\elementary_surface.position">
		<p>The location and    orientation of the surface. This attribute is inherited from the
      <b>elementary_surface</b> supertype.</p>
		<p>
			<b>position.location</b> A point in the plane. </p>
		<p>
			<b>position.p[3]</b> This direction, which is equal to <b>position.axis</b>,
      defines the normal to the plane. </p>
	</ext_description>
	<!-- +++++++++++ cylindrical_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.cylindrical_surface">
		<p>A <b>cylindrical_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.elementary_surface"/>, that is a surface at a constant distance (the
    <b>radius</b>)from a straight line. A <b>cylindrical_surface</b> is
    defined by its radius and its orientation and location. </p>
		<p> The data is to be interpreted as follows: </p>
		<b>
			<eqn> C = position.location  </eqn>
			<eqn>  x = position.p[1]     </eqn>
			<eqn> y =  position.p[2]     </eqn>
		</b>
		<eqn>
			<b> z = position.p[3] </b>  (axis of cylindrical_surface)     </eqn>
		<eqn>
			<i> R </i> = <b>radius</b>
		</eqn>
		<p> and the surface is parametrised as </p>
		<eqn>
			<i>
				<b>&#963;</b>(u,v)</i> = <b>C</b> + <i>R</i>((cos u)<b>x</b> + (sin <i>u</i>)<b>y</b>) + <i>v</i>
			<b>z</b>
		</eqn>
		<p>   where the parametrisation range is  <i>0 &#8804;  u &#8804; 360</i>
     degrees and <i>-&#8734; &lt; v &lt; &#8734;</i>.
       In the above parametrisation the length unit for the unit vector
     <i>
				<b>z</b>
			</i>  is equal to that of the <b>radius</b>.
     <i>u</i> is an angular parameter and when a numerical value is specified it shall use
  the current units for <express_ref linkend="measure_schema:ir_express:measure_schema.plane_angle_measure"/>.</p>
		<p>  In the placement coordinate system defined above, the surface is
     represented by the equation <i> S = 0</i>, where </p>
		<eqn>
			<i>   S(x, y, z) = x<sup>2</sup> + y<sup>2</sup> - R<sup>2</sup>
			</i>
		</eqn>
		<p>   The positive direction of the normal to the surface at any point on the
     surface is given by: </p>
		<eqn>
			<i>   ( S<sub>x</sub>,  S<sub>y</sub>,  S<sub>z</sub> ).   </i>
		</eqn>
		<p>  The unit normal is given by </p>
		<eqn>
			<b>N</b>
			<i>(u,v)</i> = (cos<i>(u)</i>)<b>x</b> + (sin <i>(u)</i>)<b>y</b>.                  </eqn>
		<p>   The sense of this normal is away from the axis of the cylinder.  </p>
	</ext_description>
	<!-- SELF\elementary_surface.position -->
	<ext_description linkend="geometry_schema.cylindrical_surface\elementary_surface.position">
		<p>The location and    orientation of the surface. This attribute is inherited from the
      <b>elementary_surface</b> supertype.</p>
		<p>
			<b>position.location</b>A point on the axis of the cylinder. </p>
		<p>
			<b>position.p[3]</b> The direction of the axis of the cylinder.
     </p>
	</ext_description>
	<!-- radius -->
	<ext_description linkend="geometry_schema.cylindrical_surface.radius">
the radius of the cylinder.
</ext_description>
	<!-- +++++++++++ conical_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.conical_surface">
		<p>A <b>conical_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.elementary_surface"/>, which could be produced by
    revolving a line in 3-dimensional space about any intersecting line.
    A <b>conical_surface</b> is defined by the semi-angle, the location and
    orientation and by the radius of the cone in the plane passing through 
    the location point <b>C</b> normal to the cone axis.</p>
		<note number="1"> This form of representation is designed to provide the greatest
   geometric precision for those parts of the surface which are close to the location
   point <b>C</b>. For this reason the apex should only be
   selected as location point if the region of the surface close to the apex is
   of interest. </note>
		<p> The data is to be interpreted as follows: </p>
		<b>
			<eqn> C = position.location  </eqn>
			<eqn>  x = position.p[1]     </eqn>
			<eqn> y =  position.p[2]     </eqn>
		</b>
		<eqn>
			<b> z = position.p[3] </b>  (axis of conical_surface)     </eqn>
		<eqn>
			<i> R </i> = <b>radius</b>
		</eqn>
		<eqn>
			<i> &#945; </i> = <b>radius</b>
		</eqn>
		<p>   and the surface is parametrised as </p>
		<eqn>
			<i>
				<b>&#963;</b>(u,v)</i> = <b>C</b> + <i>(R + v </i>tan<i> &#945;)((</i>cos<i> u)</i>
			<b>x</b> + (sin
     u)<b>y</b>) + v<b>z</b>
		</eqn>
     where the parametrisation range is  <i>0 &#8804;  u &#8804; 360</i>
    degrees and <i>-&#8734; &lt; v &lt; &#8734;</i>.
      In the above parametrisation the length unit for the unit vector
    <i>
			<b>z</b>
		</i>  is equal to that of the <b>radius</b>.
    <i>u</i> is an angular parameter and when a numerical value is specified it shall use
 the current units for <express_ref linkend="measure_schema:ir_express:measure_schema.plane_angle_measure"/>.

    In the placement coordinate system defined above, the surface is
    represented by the equation <i> S</i> = 0, where
    <eqn>
			<i>
				<b> S</b>(x, y, z) = x<sup>2</sup> + y<sup>2</sup> - (R + z</i>tan &#945;)<sup>2</sup>
		</eqn>
		<p> The positive direction of the normal to the surface at any point on the
    surface is given by </p>
		<eqn>
			<i>  (  S<sub>x</sub>,  S<sub>y</sub>,  S<sub>z</sub> ). </i>
		</eqn>
		<p> The unit normal is given by </p>
		<eqn>
			<b>N</b>
			<i>(u,v)</i> =
           ((cos <i>u</i>)<b>x</b> + (sin <i>u</i>)<b>y</b> - (tan &#945;)<b>z</b>)/(
           (&#8730;(1 + (tan  &#945;)<sup>2</sup>)),  if <i> R + v </i>tan &#945; &gt; 0.0  </eqn>
		<eqn>
			<b>N</b>(u,v) =
          - ((cos <i>u</i>)<b>x</b> + (\sin <i>u</i>)<b>y</b> - (tan &#945;)<b>z</b>)/
           (&#8730;(1 + (tan   &#945;)<sup>2</sup>)), if <i> R + v </i>tan &#945; &lt; 0.0.  </eqn>
		<note number="2">
The normal to the surface is undefined at the point where
<i> R + v </i>tan &#945; = 0.0.
</note>
		<p>    The sense of the normal is away from the axis of the cone.
     If the radius is zero, the cone apex is at the point <i>(0, 0, 0)</i>
     in the placement coordinate system (i.e., at
     <b>SELF\elementary_surface.position.location</b>).</p>
		<figure id="Geomfig13" number="13">
			<title>Conical_surface</title>
			<img src="Geomfig13.gif"/>
		</figure>
	</ext_description>
	<!-- SELF\elementary_surface.position -->
	<ext_description linkend="geometry_schema.conical_surface\elementary_surface.position">
		<p>The location and    orientation of the surface. This attribute is inherited from the
      <b>elementary_surface</b> supertype.</p>
		<p>
			<b>position.location</b>A point on the axis of the cone. </p>
		<p>
			<b>position.p[3]</b> The direction of the axis of the cone.
     </p>
	</ext_description>
	<!-- radius -->
	<ext_description linkend="geometry_schema.conical_surface.radius">
the radius of the circular curve of intersection between
      the cone and a plane perpendicular to the axis of the cone passing 
      through the location point  (i.e., <b>SELF\elementary_surface.position.location</b>);
</ext_description>
	<!-- semi_angle -->
	<ext_description linkend="geometry_schema.conical_surface.semi_angle">
		<p> the cone semi-angle.</p>
		<note number="3"> See figure 13 for illustration of the attributes. </note>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.conical_surface.wr:WR1">
	The radius shall not be negative.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.conical_surfacee.wr:WR2">
	The semi-angle shall be between 0 and 90 degrees.
</ext_description>
	<!-- +++++++++++ spherical_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.spherical_surface">
		
		<p>A <b>spherical_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.elementary_surface"/>, which is at a constant distance
    (the <b>radius</b>) from a central point.   A <b>spherical_surface</b> is
    defined by the radius and the location and orientation of the surface.
</p>
		<p> The data is to be interpreted as follows: </p>
		
			<p> <b>C = position.location </b> </p>
			<b><eqn>  x = position.p[1]     </eqn>
			<eqn> y =  position.p[2]     </eqn></b>
		
		<eqn>
			<b> z = position.p[3] </b>  (axis of spherical_surface)     </eqn>
		<eqn>
			<i> R </i> = <b>radius</b>
		</eqn>
		<p> and the surface is parametrised as </p>
		<eqn>
			<i>
				<b>&#963;</b>(u,v)</i> = <b>C</b> + R cos <i>v</i> ((cos <i>u</i>) <b>x</b> + (sin <i>u</i>) <b>y</b>)
               + R(sin <i>v</i>) <b>z</b>
		</eqn>
		<p>    where the parametrisation range is <i>0 &#8804; u &#8804; 360</i> degrees and
            <i>-90 &#8804; v &#8804; 90</i> degrees. </p>
		<p>
			<i>u</i> and <i>v</i> are angular parameters and when numerical values are specified they shall use
 the current units for <b>plane_angle_measure.</b>
		</p>
           
	        In the placement coordinate system defined above, the surface is
	       represented by the equation <i>S</i> = 0, where
	       <eqn>
			<i> S(x, y, z) = x<sup>2</sup> + y<sup>2</sup> + z<sup>2</sup> - R<sup>2</sup>.  </i>
		</eqn>
		<p>      The positive direction of the normal to the surface at any point on the
	       surface is given by </p>
		<eqn>
			<i> ( S<sub>x</sub>, S<sub>y</sub>, S<sub>z</sub> ). </i>
		</eqn>
		<p>     The unit normal is given by </p>
		<eqn>
			<b>N</b>
			<i>(u,v)</i> = cos <i>v</i>((cos <i>u</i>)<b>x</b> + (sin <i>u</i>)<b>y</b>) + (sin <i>v</i>)<b>z</b>,
    </eqn>
	</ext_description>
	<!-- SELF\elementary_surface.position -->
	<ext_description linkend="geometry_schema.spherical_surface\elementary_surface.position">
		<p>The location and    orientation of the sphere. This attribute is inherited from the
      <b>elementary_surface</b> supertype.</p>
		<p>
			<b>position.location</b>The centre of the sphere. </p>
	</ext_description>
	<!-- radius -->
	<ext_description linkend="geometry_schema.spherical_surface.radius">
the radius of the sphere.
</ext_description>
	<!-- +++++++++++ toroidal_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.toroidal_surface">
		<p>A <b>toroidal_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.elementary_surface"/>, which could be produced
    by revolving a circle about a  line in its plane. The radius
    of the circle being revolved is referred to here as the <b>minor_radius</b>
    and the <b>major_radius</b> is the distance from the centre of this circle
    to the axis of revolution.
    A <b>toroidal_surface</b> is defined by the major and minor radii and 
    the position and orientation of the surface.
</p>
		<p> The data is to be interpreted as follows: </p>
		<b>
			<eqn> C = position.location  </eqn>
			<eqn>  x = position.p[1]     </eqn>
			<eqn> y =  position.p[2]     </eqn>
		</b>
		<eqn>
			<b> z = position.p[3] </b>  (axis of toroidal_surface)     </eqn>
		<eqn>
			<i> R </i> = <b>major_radius</b>
		</eqn>
		<eqn>
			<i> r  </i> = <b>minor_radius</b>
		</eqn>
		<p> and the surface is parametrised as </p>
		<eqn>
			<i>
				<b>&#963;</b>(u,v)</i> = <b>C</b> + <i>(R + r</i>cos <i>v</i>)((cos<i>u</i>)<b>x</b> + (sin
               <i>u</i>))<b>y</b>) + <i>r</i>(sin<i>v</i>))<b>z</b>
		</eqn>
		<p>      where the parametrisation range is <i>0 &#8804; u, v &#8804; 360</i> degrees. </p>
		<p>
			<i>u</i> and <i>v</i> are angular parameters and when numerical values are specified they shall use
 the current units for <b>plane_angle_measure.</b>
		</p>
		<p>  In the placement coordinate system defined above, the surface is
	       represented by the equation <i>S</i> = 0, where </p>
		<eqn>
			<i> S(x, y, z) = x<sup>2</sup> + y<sup>2</sup> + z<sup>2</sup> -2R&#8730;(x<sup>2</sup>+y<sup>2</sup>)
         - r<sup>2</sup> + R<sup>2</sup>. </i>
		</eqn>
		<p>      The positive direction of the normal to the surface at any point on the
	       surface is given by </p>
		<eqn>
			<i> ( S<sub>x</sub>, S<sub>y</sub>, S<sub>z</sub> ). </i>
		</eqn>
		<p>     The unit normal is given by </p>
		<eqn>
			<b>N</b>
			<i>(u,v)</i> = cos<i>v</i>((cos <i>u</i>)<b>x</b> + (sin <i>u</i>)<b>y</b>) + (sin <i>v</i>)<b>z</b>.
    </eqn>
		<p>The sense of this normal is away from the nearest point on
     the circle of radius <i>R</i> with centre <b>C</b>.
     A manifold surface will be produced if the major radius is greater
     than the minor radius. If this condition is not fulfilled, the
    resulting surface will be self-intersecting. </p>
	</ext_description>
	<!-- SELF\elementary_surface.position -->
	<ext_description linkend="geometry_schema.toroidal_surface\elementary_surface.position">
		<p>The location and    orientation of the sphere. This attribute is inherited from the
      <b>elementary_surface</b> supertype.</p>
		<p>
			<b>position.location</b> The  central point of the torus. </p>
	</ext_description>
	<!-- major_radius -->
	<ext_description linkend="geometry_schema.toroidal_surface.major_radius">
the major-radius of the torus;
</ext_description>
	<!-- minor_radius -->
	<ext_description linkend="geometry_schema.toroidal_surface.minor_radius">
the minor-radius of the torus.
</ext_description>
	<!-- +++++++++++ degenerate_toroidal_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.degenerate_toroidal_surface">
		<p>A <b>degenerate_toroidal_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.toroidal_surface"/>, in which the
    <b>minor_radius</b> is greater than the <b>major_radius</b>. In
    this subtype the parametric range is restricted in order to define a
    manifold surface which is either the inner 'lemon-shaped' surface,
    or the outer 'apple-shaped' portion of the self-intersecting surface
    defined by the supertype.
</p>
		<p> The data is to be interpreted as follows: </p>
		<b>
			<eqn> C = position.location  </eqn>
			<eqn>  x = position.p[1]     </eqn>
			<eqn> y =  position.p[2]     </eqn>
		</b>
		<eqn>
			<b> z = position.p[3] </b>  (axis of degenerate_toroidal_surface)     </eqn>
		<eqn>
			<i> R </i> = <b>major_radius</b>
		</eqn>
		<eqn>
			<i> r  </i> = <b>minor_radius</b>
		</eqn>
		<p> and the surface is parametrised as </p>
		<eqn>
			<i>
				<b>&#963;</b>(u,v)</i> = <b>C</b> + <i>(R + r</i>cos <i>v</i>)((cos<i>u</i>)<b>x</b> + (sin
               <i>u</i>))<b>y</b>) + <i>r</i>(sin<i>v</i>))<b>z</b>
		</eqn>
		<p>      where the parametrisation range is</p>
		<p> If <b>select_outer</b> = .TRUE. :</p>
		<p>
			<i>0 &#8804;  u &#8804; 360</i> degrees.
                    <i> -&#966; &#8804;  v &#8804; &#966;</i> degrees.</p>
		<p>  If <b>select_outer</b> = .FALSE. :</p>
		<p>
			<i>0 &#8804;  u &#8804; 360</i> degrees.
                    <i> &#966; &#8804;  v &#8804; 360 - &#966;</i> degrees.</p>
		<p>   Where <i>&#966; </i> degrees is the angle given by <i> r</i>cos &#966; = <i>-R </i>.
 <i>u</i> and <i>v</i> are angular parameters and when numerical values are specified they shall use
 the current units for <express_ref linkend="measure_schema:ir_express:measure_schema.plane_angle_measure"/>. </p>
		<note number="1">
			<p> When <b>select_outer</b> = .FALSE. the surface normal points out of the
 enclosed volume and is defined by the equation </p>
			<eqn>
				<b>N</b>
				<i>(u,v)</i> = cos <i>v</i>((cos <i>u</i>)<b>x</b> + (sin<i>u</i>)<b>y</b>) + (sin <i>v</i>)<b>z</b>.
    </eqn>
			<p>The sense of this normal is away from the furthest point on the circle of
radius R in the plane normal to z centred at <b>C</b>. </p>
			<p>The sense of this normal is opposite to the direction of </p>
			<eqn>
				<i>(&#8706; <b>&#963;</b>)/(&#8706; u)  &#215; (&#8706; <b>&#963;</b>)/(&#8706; v) </i>. </eqn>
		</note>
		<note number="2">  See Figure 14 for illustration of the attributes.
</note>
		<figure id="Geomfig14" number="14">
			<title>Cross section of degenerate_toroidal_surface</title>
			<img src="Geomfig14.gif"/>
		</figure>
	</ext_description>
	<!-- select_outer -->
	<ext_description linkend="geometry_schema.degenerate_toroidal_surface.select_outer">
a BOOLEAN flag used to distinguish between
      the two portions of the <b>degenerate_toroidal_surface</b>. If
      <b>select_outer</b> is true, the outer portion of the surface is
      selected and a closed `apple-shaped' axi-symmetric surface is defined. If
      <b>select_outer</b> is false, the inner portion is selected to
      define a closed 'lemon-shaped' axi-symmetric surface.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.degenerate_toroidal_surface.wr:WR1">
	The major radius shall be less than the minor radius.
</ext_description>
	<!-- +++++++++++ dupin_cyclide_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.dupin_cyclide_surface">
		<p>A <b>dupin_cyclide_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.elementary_surface"/>, that is a generalisation of a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.toroidal_surface"/> in which the radius of the generatrix varies
as it is swept around the directrix, passing through a maximum and a
minimum value.  The directrix is in general an ellipse, though that
fact is not germane to the definition given here.  The surface has two
orthogonal planes of symmetry, and in both of them its cross-section
is a pair of circles.</p>
		<note number="1"> These circles are illustrated in
Figure 15, where the upper cross-section contains the
generatrix circles of maximum and minimum radius, and the lower
cross-section is in the plane of the directrix. 
</note>
		<note number="2">Further details of the properties and applications of this useful but
unfamiliar surface may be found in PRATT [13],[14], and the
further references they contain.
</note>
		<p> As with the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.toroidal_surface"/>, self-intersecting forms occur.  The Dupin
cyclides are special cases of a more general class of surfaces known
as <i>generalized cyclides</i> (or sometimes simply <i>cyclides</i>).
The present specification does not cover the wider class. </p>
		<p>The interpretation of the data is as follows: </p>
		<b>
			<eqn> C = position.location  </eqn>
			<eqn>  x = position.p[1]     </eqn>
			<eqn> y =  position.p[2]     </eqn>
		</b>
		<eqn>
			<b> z = position.p[3] </b>  (axis of toroidal_surface)     </eqn>
		<eqn>
			<i> R </i> = <b>generalised_major_radius</b>
		</eqn>
		<eqn>
			<i> r  </i> = <b>generalised_minor_radius</b>
		</eqn>
		<eqn>
			<i> s  </i> = <b>skewness</b>
		</eqn>
		<p>   and the surface is parametrised as </p>
		<p>
			<img src="Dupc1.gif"/>
		</p>
		<p> where the domain of parametrisation is <i>0&#176; &#8804; u,v
&#8804; 360&#176; </i>, and &#8730; denotes the positive square root.
<i>u</i> and <i>v</i> are angular parameters and when numerical values are specified they shall use
 the current units for <express_ref linkend="measure_schema:ir_express:measure_schema.plane_angle_measure"/>.
          </p>
		<note number="3"> The three
parameters <i>r,R</i> and <i>s</i> determine the
centres and radii of the circles in the planes of symmetry, as shown
in Figure 15.  Conversely, knowledge of the geometry of
these circles allows the defining cyclide parameters to be determined.
In the upper and lower diagrams respectively of Figure 15
the circles have parameter values <i>u = 0&#176;</i> (right), <i>u =
180&#176;</i> (left), <i>v = 0&#176;</i> (inner) and <i>v = 180&#176;</i>
(outer). The point with parameter values (0,0) is the
   extreme point on the positive x-axis.  The parameter <i>u</i> runs
   anticlockwise around both circles in the lower diagram, and the
   parameter <i>v</i> runs clockwise round the left-hand circle and
   anticlockwise round the right-hand circle in the upper diagram.
</note>
		<p> In the placement coordinate system defined above the Dupin cyclide
surface has the algebraic representation <i> S = 0</i>, where </p>
		<eqn>
			<i> S = (x<sup>2</sup> + y<sup>2</sup> + z<sup>2</sup> + R<sup>2</sup> - r<sup>2</sup> - s<sup>2</sup>)<sup>2</sup>
           - 4(Rx - rs)<sup>2</sup>- 4(R<sup>2</sup> - s<sup>2</sup>)y<sup>2</sup>.  </i>
		</eqn>
		<p> The positive direction of the normal vector at any point on the
surface is given by </p>
		<eqn>  (S<sub>x</sub>,S<sub>y</sub>,S<sub>z</sub>).</eqn>
		<p>In parametric terms, the unit surface normal vector is </p>
		<eqn>
			<b>N</b>
			<i>(u,v) =  (R</i> \cos <i>u</i>cos<i>v</i> + <i>s</i>)<b>x</b> +  (&#8730;(R<sup>2</sup> - s<sup>2)</sup>sin<i>u</i>cos<i>v</i>)<b>y</b>  +
  (&#8730;(R<sup>2</sup> - s<sup>2</sup>)sin<i>v</i>)<b>z</b>
		</eqn>
		<p> This enables the parametric surface representation to be rewritten
as </p>
		<eqn>
			<i>
				<b>&#963;</b>(u,v) = <b>&#963;</b>
				<sub>0</sub>(u,v) + r</i>
			<b>N</b>
			<i>(u,v)</i>,</eqn>
		<p> which shows that any Dupin cyclide with given values of <i>R</i>
and <i>s</i> is a parallel offset from a base Dupin cyclide
<i>
				<b>&#963;</b>
				<sub>0</sub>(u,v)</i> with the same values of <i>R,s</i> but with <i>r = 0</i>.</p>
		<p> Further, the offset distance is precisely <i>r</i>.  This generalizes an
important property of the torus. </p>
		<p>The Dupin cyclide is a manifold surface under the conditions <i>0 &#8804; s
&lt; r &lt; R</i>.  This form is known as a <i>ring cyclide</i>.
Self-intersecting forms arise when the circles in either plane of
symmetry intersect.  The conditions <i>0 &lt; r &#8804; s &lt; R</i> give a <i>horned cyclide</i> and the conditions 
<i> 0 &#8804; s &#8804; R &lt; r</i> a <i>spindle cyclide</i>.   The sense of
the surface normal given above is outwards from both circles in the upper view
and from the annular region in the lower
 cross-sectional view in Figure 15.  For the ring
cyclide this means that it is outwards-pointing over the entire
surface.  For the horned cyclide the normal is inward-pointing over
the smaller portion of the surface lying between the two
self-intersection points.  For the spindle cyclide the `spindle'
corresponds to the `lemon' solid arising in the case of a
self-intersecting torus.  For this case of the Dupin cyclide the
normal is outward-pointing over both the `apple' and 'lemon' solids
enclosed by the surface. </p>
		<note number="4">
The three forms of the Dupin cyclide are shown in
Figures 16, 17 and 18. In Figure 18
part of the exterior surface is removed to reveal the inner surface.
</note>
		<figure id="Geomfig15" number="15">
			<title>Cross-sections of a Dupin cyclide with C = 0</title>
			<img src="Geomfig15.gif"/>
		</figure>
		<figure id="Geomfig16" number="16">
			<title>A Dupin ring cyclide</title>
			<img src="Geomfig16.gif"/>
		</figure>
		<figure id="Geomfig17" number="17">
			<title>A Dupin horned cyclide</title>
			<img src="Geomfig17.gif"/>
		</figure>
		<figure id="Geomfig18" number="18">
			<title>A Dupin spindle cyclide</title>
			<img src="Geomfig18.gif"/>
		</figure>
		<note number="5">
  For ISO 10303 purposes, the values of <i>R</i> and <i>r</i> are of type
  <b>positive_length_measure</b> and <i>s</i> is non-negative.
  The surface defined by the foregoing equations when one or more of <i>R, r</i>
  and <i>s</i> is negative corresponds to a reparametrisation of a Dupin
  cyclide for which these constants are all non-negative.
  </note>
		<note number="6">
  Both families of isoparametric curves of the Dupin cyclide consist of
  circles.
  </note>
		<note number="7">
  Dupin cyclides can be used to construct smooth joins between
  cylindrical and/or conical surfaces whose (possibly skew) axes have
  arbitrary relative orientations.  Additionally, smooth T-junctions
  between cones and cylinders can be designed using Dupin cyclides.
  </note>
		<note number="8">
  Dupin cyclides also have uses as blending surfaces in solid modeling,
  generalising the use of the torus for this purpose.
  </note>
		<note number="9">
  The Dupin cyclide as defined here is a quartic (degree four) algebraic
  surface of bounded extent.  There also exists a cubic Dupin cyclide of
  infinite extent, not currently defined in this part of ISO 10303.
</note>
	</ext_description>
	<!-- SELF\elementary_surface.position -->
	<ext_description linkend="geometry_schema.dupin_cyclide_surface\elementary_surface.position">
defines a local system of coordinates in which two of the coordinate
planes are axes of symmetry of the cyclide;
</ext_description>
	<!-- generalised_major_radius -->
	<ext_description linkend="geometry_schema.dupin_cyclide_surface.generalised_major_radius">
the mean of the radii of the two
circles forming the cyclide cross-section in the plane of the directrix;
</ext_description>
	<!-- generalised_minor_radius -->
	<ext_description linkend="geometry_schema.dupin_cyclide_surface.generalised_minor_radius">
the mean of the radii of the largest and smallest generatrix circles;
</ext_description>
	<!-- skewness -->
	<ext_description linkend="geometry_schema.dupin_cyclide_surface.skewness">
half the difference between the radii of the two cross-sectional circles in either plane of symmetry;  when the
<b>skewness</b> attribute is zero the surface is a torus; otherwise, its value determines the degree of asymmetry of the surface about the
third plane perpendicular to its two planes of symmetry.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.dupin_cyclide_surface.wr:WR1">
	The skewness shall not be negative.
</ext_description>
	<!-- +++++++++++ swept_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.swept_surface">
		<p>A <b>swept_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/>, that is constructed by sweeping a 
        curve along another curve.
</p>
	</ext_description>
	<!-- swept_curve -->
	<ext_description linkend="geometry_schema.swept_surface.swept_curve">
the curve to be swept in defining the surface; if the swept curve is a pcurve, it is the image of this curve in 3D
      geometric space which is swept, not the parameter space curve.
</ext_description>
	<!-- +++++++++++ surface_of_linear_extrusion +++++++++++ -->
	<ext_description linkend="geometry_schema.surface_of_linear_extrusion">
		<p>A <b>surface_of_linear_extrusion</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface"/>, or a generalised cylinder
     obtained by sweeping a curve in a given direction. </p>
		<p>   The parametrisation is as follows,
  where the curve has a parametrisation <i>
				<b>&#955;</b>(u)</i>, and <b>V</b> = <b>extrusion_axis</b>
		</p>
		<eqn>
			<i>
				<b>&#963;</b>(u,v) =  <b>&#955;</b>(u) + v</i>
			<b>V</b>
		</eqn>
		<p> The parametrisation range for <i>v</i> is <i>-&#8734; &lt; v &lt; &#8734;</i> and for <i>u</i>
     is defined by the curve parametrisation. </p>
	</ext_description>
	<!-- extrusion_axis -->
	<ext_description linkend="geometry_schema.surface_of_linear_extrusion.extrusion_axis">
the direction of extrusion, the magnitude
       of this vector determines the parametrisation;
</ext_description>
	<!-- SELF\swept_surface.swept_curve -->
	<ext_description linkend="geometry_schema.surface_of_linear_extrusion\swept_surface.swept_curve">
the curve to be swept in defining the surface. 
</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.surface_of_linear_extrusion.wr:IP1">
	The surface shall not self-intersect.
</ext_description>
	<!-- +++++++++++ surface_of_revolution +++++++++++ -->
	<ext_description linkend="geometry_schema.surface_of_revolution">
		<p>A <b>surface_of_revolution</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface"/>, obtained by rotating a
     curve one complete revolution about an axis. </p>
		<p>The data  shall be interpreted as below.</p>
		<p>   The parametrisation is as follows, where the curve has a parametrisation
    <i>
				<b>&#955;</b>(v)</i>, <b>C = position.location</b>  and <b>V</b> = position.z         </p>
		<eqn>
			<i>
				<b>&#963;</b>(u,v)</i> =  <b>C</b> + (<b>&#955;</b>
			<i>(v)</i> - <b>C</b>)cos<i>u
        + ((<b>&#955;</b>(v)</i> - <b>C)&#8901; V)V</b>(1 - cos<i>u</i>)
        + <b>V</b>&#215; (<i>
				<b>&#955;</b>(v)</i> - <b>C</b>)sin<i>u</i>
		</eqn>
		<p>In order to produce a single-valued surface with a complete revolution,
      the curve shall be such that when expressed in a cylindrical coordinate
      system <i>(r,&#966;,z)</i> centred at <b>C</b> with axis <b>V</b>, no two distinct
      parametric points on the curve shall have the same values for <i>(r,z)</i>.</p>
		<note number="1"> In this context a single valued surface is interpreted as one
     for which the mapping, from the interior of the rectangle in parameter
     space corresponding to its parametric range, to geometric space, defined 
     by the surface equation, is one-to-one. </note>
		<p>   For a  surface of revolution the parametric range is
      <i>0 &#8804; u &#8804; 360</i> degrees.
       <i>u</i> is an angular parameter and when a numerical value is specified it shall use
  the current units for <express_ref linkend="measure_schema:ir_express:measure_schema.plane_angle_measure"/>. </p>
 
      The parameter range for <i>v</i> is defined by the referenced curve.
 
      <note number="2">  The geometric shape of the surface is not dependent
     upon the curve parametrisation. </note>
	</ext_description>
	<!-- axis_position -->
	<ext_description linkend="geometry_schema.surface_of_revolution.axis_position">
a point on the axis of revolution and the direction of the axis of revolution;
</ext_description>
	<!-- SELF\swept_surface.swept_curve -->
	<ext_description linkend="geometry_schema.surface_of_revolution\swept_surface.swept_curve">
the curve that is revolved about the axis line; 
</ext_description>
	<!-- axis_line -->
	<ext_description linkend="geometry_schema.surface_of_revolution.axis_line">
the line coinciding with the axis of revolution.
</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.surface_of_revolution.wr:IP1">
	The surface shall not self-intersect.
</ext_description>
	<!-- IP2 -->
	<ext_description linkend="geometry_schema.surface_of_revolution.wr:IP2">
	The <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> shall not be coincident with the  <b>axis_line</b> for any finite part of its length.
</ext_description>
	<!-- +++++++++++ surface_curve_swept_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.surface_curve_swept_surface">
		<p>A <b>surface_curve_swept_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface"/>, which
is the result of sweeping a curve along a <b>directrix</b> curve lying
on the <b>reference_surface</b>.  The orientation of the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> during the sweeping operation is related to the
normal to the <b>reference_surface</b>.  </p>
		<p> The <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> is required to be a curve lying in the plane <i>z
= 0</i> and this is swept along the <b>directrix</b> in such a way that
 the origin of the local coordinate system used to define the
 <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> is on the <b>directrix</b> and the local X axis is in the
 direction of the normal to the <b>reference_surface</b>. The
 resulting surface has the property that the cross section of the
 surface by the normal plane to the <b>directrix</b> at any point is a
 copy of the <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/>. </p>
		<p>The orientation of the <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> as it sweeps along the
directrix is precisely defined by a
<b>cartesian_transformation_operator_3d</b> with attributes:</p>
		<p>
			<b>local_origin</b> as point (0,0,0),</p>
		<p>
			<b>axis1</b> as the normal <b>N</b> to the <b>reference_surface</b> at
the point of the <b>directrix</b> with parameter <i>u</i>. </p>
		<p>
			<b>axis3</b> as the direction of the tangent vector <b>t</b> at the point
of the <b>directrix</b> with parameter <i>u</i>. </p>
		<p> The remaining attributes are defaulted to define a corresponding
transformation matrix <i>
				<b>T</b>(u)</i>. </p>
		<note number="1"> In the special case where the <b>directrix</b> is a planar
curve the <b>reference_surface</b> is the plane of the <b>directrix</b>
and the normal <b>N</b> is a constant.
</note>
		<p>    The parametrisation is as follows, where the <b>directrix</b> has
 parametrisation <i>
				<b>&#956;</b>(u)</i> and the <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> curve has a parametrisation
    <i>
				<b>&#955;</b>(v),</i>
		</p>
		<eqn>
			<i>
				<b>&#956; </b>(u)</i> = Point on directrix, </eqn>
		<eqn>
			<b>T</b>
			<i>(u)</i> =  Transformation matrix at parameter <i>(u)</i>:</eqn>
		<eqn>
			<i>
				<b>&#963;</b>(u,v) =  <b>&#956;</b>(u)</i> + <b>T</b>(<i>(u)</i>)<b>&#955;</b>
			<i>(v)</i>
		</eqn>
		<p>  In order to produce a continuous surface the <b>directrix</b> curve
      shall be tangent continuous.  </p>
		<p>   For a <b>surface_curve_swept_surface</b>  the parameter range for <i>u</i> is
     defined by the <b>directrix</b> curve.</p>
       The parameter range for <i>v</i> is defined by the referenced <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/>.

     <note number="2"> The geometric shape of the surface is not dependent
     upon the curve parametrisations.
     </note>
	</ext_description>
	<!-- directrix -->
	<ext_description linkend="geometry_schema.surface_curve_swept_surface.directrix">
the curve used to define the sweeping operation;
the surface is generated by sweeping the <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> along the <b>directrix</b>.
</ext_description>
	<!-- reference_surface -->
	<ext_description linkend="geometry_schema.surface_curve_swept_surface.reference_surface">
the surface containing the <b>directrix</b>.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.surface_curve_swept_surface.wr:WR1">
	If the <b>directrix</b> is a <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve"/> then the
	<b>reference_surface</b> shall be in the <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve.basis_surface"/> set for this curve.
</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.surface_curve_swept_surface.wr:IP1">
	The <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> shall be a curve lying in the plane <i>z = 0.</i>
	</ext_description>
	<!-- IP2 -->
	<ext_description linkend="geometry_schema.surface_curve_swept_surface.wr:IP2">
	The <b>directrix</b> shall be a curve lying on the <b>reference_surface</b>.
</ext_description>
	<!-- +++++++++++ fixed_reference_swept_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.fixed_reference_swept_surface">
		<p>A <b>fixed_reference_swept_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface"/>, which
is the result of sweeping a curve along a <b>directrix</b>. The orientation of the
curve during the sweeping operation is controlled by the <b>fixed_reference</b>
direction.

The <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> is required to be a curve lying in the plane <i>z
= 0</i> and this is swept along the <b>directrix</b> in such a way that
 the origin of the local coordinate system used to define the
 <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> is on the <b>directrix</b> and the local X axis is in the
 direction of the projection of <b>fixed_reference</b> onto the normal plane
 to the <b>directrix</b> at this point. The
 resulting surface has the property that the cross section of the
 surface by the normal plane to the <b>directrix</b> at any point is a
 copy of the <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/>.</p>
		<p>The orientation of the <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> as it sweeps along the
directrix is precisely defined by a
<b>cartesian_transformation_operator_3d</b> with attributes:</p>
		<p>
			<b>local_origin</b> as point <i>(0,0,0)</i>,</p>
		<p>
			<b>axis1</b> as  <b>fixed_reference</b>, </p>
		<p>
			<b>axis3</b> as the direction of the tangent vector <b>t</b> at the point
of the <b>directrix</b> with parameter <i>u</i>. </p>
		<p> The remaining attributes are defaulted to define a corresponding
transformation matrix <b>T</b>
			<i>(u)</i>. </p>
		<p>   The parametrisation is as follows, where the <b>directrix</b> has
 parametrisation <i>
				<b>&#956;</b>(u)</i> and the <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> curve has a parametrisation    <i>
				<b>&#955;</b>(v)</i>, </p>
		<eqn>
			<i>
				<b>&#956;</b>(u)</i> = Point on directrix, </eqn>
		<eqn>
			<b>T</b>
			<i>(u)</i> = Transformation matrix at parameter <i>(u)</i>: </eqn>
		<eqn>
			<i>
				<b>&#963;</b>(u,v) =  <b>&#956;</b>(u)</i> + <b>T</b>
			<i>(u)<b>&#955;</b>(v) </i>
		</eqn>
		<p>   In order to produce a continuous surface the <b>directrix</b> curve
     the curve shall be tangent continuous. </p>

     For a <b>fixed_reference_swept_surface</b>  the parameter range for <i>u</i> is
     defined by the <b>directrix</b> curve.

     The parameter range for <i>v</i> is defined by the referenced <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/>.
     <note number="1"> The geometric shape of the surface is not dependent
     upon the curve parametrisations.
     </note>
		<note number="2"> The attributes are illustrated in Figure 19.
     </note>
		<figure id="Geomfig19" number="19">
			<title>Fixed_reference_swept_surface</title>
			<img src="Geomfig19.gif"/>
		</figure>
	</ext_description>
	<!-- directrix -->
	<ext_description linkend="geometry_schema.fixed_reference_swept_surface.directrix">
the curve used to define the sweeping operation.
The surface is generated by sweeping the <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> along the <b>directrix</b>.
</ext_description>
	<!-- fixed_reference -->
	<ext_description linkend="geometry_schema.fixed_reference_swept_surface.fixed_reference">
the <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> used to define the orientation of
   <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> as it sweeps along the
   <b>directrix</b>..
</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.fixed_reference_swept_surface.wr:IP1">
	The <express_ref linkend="geometry_schema:ir_express:geometry_schema.swept_surface.swept_curve"/> shall be a curve lying in the plane <i>z = 0.</i>
	</ext_description>
	<!-- IP2 -->
	<ext_description linkend="geometry_schema.fixed_reference_swept_surface.wr:IP2">
	The <b>fixed_reference</b> shall not be parallel to a tangent vector to the
<b>directrix</b> at any point along this curve.
</ext_description>
	<!-- +++++++++++ bounded_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.bounded_surface">
		<p>A <b>bounded_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/> of finite area with
      identifiable boundaries.</p>
	</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.bounded_surface.wr:IP1">
	A <b>bounded_surface</b> has a finite non-zero surface area.
</ext_description>
	<!-- IP2 -->
	<ext_description linkend="geometry_schema.bounded_surface.wr:IP2">
	A <b>bounded_surface</b> has boundary curves.
</ext_description>
	<!-- +++++++++++ b_spline_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.b_spline_surface">
		<p>A <b>b_spline_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_surface"/>, and is a general form of rational or polynomial
    parametric surface which is represented by control points, basis 
    functions, and possibly, weights. As with the  corresponding curve entity 
    it has some special subtypes where some of the data can be derived. </p>
		<note number="1">
    Identification of B-spline surface default values and subtypes is
     important for performance considerations and for efficiency issues in 
     performing computations. 
     </note>
		<note number="2">
     A B-spline is <i>rational</i> if and only if the weights are not
      all identical. If it is polynomial, the weights may be defaulted to 
      all being 1.
      </note>
		<note number="3">
     In the case where the B-spline surface is uniform, quasi-uniform
      or piecewise B&#233;zier, the knots and knot multiplicities may be
      defaulted (i.e., non-existent in the data as specified by the attribute
      definitions).  When the knots are defaulted, a difference of 1.0 
      between separate knots is assumed, and the effective parameter range 
      for the resulting surface starts from 0.0.  These defaults are provided 
      by the subtypes.
      </note>
		<note number="4">
     The knots and knot multiplicities shall not be defaulted in the
      non-uniform case.
      </note>
		<note number="5">
     The defaulting of weights and knots are done independently of one
      another.
      </note>
		<p> The data is to be interpreted as follows:</p>
		<p>The symbology used here is: </p>
		<eqn>
			<i> K1 </i>= <b>upper_index_on_u_control_points</b>
		</eqn>
		<eqn>
			<i> K2 </i>= <b>upper_index_on_v_control_points</b>
		</eqn>
		<eqn>
			<b>P</b>
			<sub>ij</sub>  =  <b>control_points</b>
		</eqn>
		<eqn>    w<sub>ij</sub>  = <b>weights</b>
		</eqn>
		<eqn>
			<i> d1</i> = <b>u_degree</b>
		</eqn>
		<eqn>
			<i> d1</i> = <b>u_degree</b>
		</eqn>
		<p>The control points are ordered as </p>
		<eqn>
			<b>P</b>
			<sub>00</sub>, <b>P</b>
			<sub>01</sub>, <b>P</b>
			<sub>02</sub>, . . . .
       <b>P</b>
			<sub>K1(K2-1</sub>, <b>P</b>
			<sub>K1K2</sub>. </eqn>
		<p>  The weights, in the case of the rational subtype, are ordered similarly. </p>
		<p> For each parameter, <i> s = u</i> or <i>v</i>, if <i>k</i> is the
     upper index on the control points and <i>d</i> is the degree for <i>s</i>, the knot
     array is an array of
      <i>(k + d + 2)</i> real numbers <i>[s<sub>-d</sub>, ... ,s<sub>k+1</sub>]</i>, such that for all
      indices <i>j</i> in <i>[-d, k], s<sub>j</sub> &#8804; s<sub>j+1</sub>
			</i>. This array is obtained from
      the  appropriate <b>u_knots</b> or <b>v_knots</b> list by repeating each multiple
      knot according to the multiplicity.</p>
		<p>
			<i>N<sub>i</sub>
				<sup>d</sup>
			</i>, the <i>i</i>th normalised B-spline basis function of
      degree <i>d</i>, is defined on the subset <i>[s<sub>i-d</sub>, ... ,s<sub>i+1</sub>]</i> of
      this array. </p>
		<p>  Let <i>L</i> denote the number of distinct values amongst
      the  knots in the knot list; <i>L</i> will be referred to as the `upper
      index on knots'. Let <i>m<sub>j</sub>
			</i> denote the multiplicity (i.e., number of
      repetitions) of the <i>j</i>th distinct knot value. Then:</p>
		<eqn>
			<i>  &#931;<sup>L</sup>
				<sub>i=1</sub> m<sub>i</sub> = d + k + 2 </i>
		</eqn>
      All knot multiplicities except the first and the last shall be in the
      range <i>1, . . . , d</i>; the first and last may have a maximum value of
      <i>d + 1</i>.
      <note number="6">
      In evaluating the basis functions, a knot <i>u</i> of, for example, multiplicity 
      3 is interpreted as a sequence  <i>u, u, u,</i> in the knot array.
     </note>
		<p> The <b>surface_form</b> is used to identify specific quadric surface
      types (which shall have degree two), ruled surfaces and surfaces of 
      revolution.  As with the <b>b_spline_curve</b>, the <b>surface_form</b>
      is informational only and the spline data takes precedence. </p>
		<p> The surface is to be interpreted as follows:</p>
		<p> In the polynomial case the surface is given by the equation:</p>
		<p>
			<img src="BSsurf1.gif"/>
		</p>
		<p> In the rational case the surface equation is: </p>
		<p>
			<img src="BSsurf2.gif"/>
		</p>
		<note number="7"> Definitions of the B-spline basis functions, <i>N<sub>i</sub>
				<sup>d1</sup>(u)</i>  and
      <i>N<sub>i</sub>
				<sup>d2</sup>(v)</i>, can be found in
      [1], [5] and [6]. It should be noted that 
      there is a difference in terminology between these references. </note>
	</ext_description>
	<!-- u_degree -->
	<ext_description linkend="geometry_schema.b_spline_surface.u_degree">
algebraic degree of basis functions in <i>u</i>;
</ext_description>
	<!-- v_degree -->
	<ext_description linkend="geometry_schema.b_spline_surface.v_degree">
algebraic degree of basis functions in <i>v</i>;
</ext_description>
	<!-- control_points_list -->
	<ext_description linkend="geometry_schema.b_spline_surface.control_points_list">
a list of lists of control points;
</ext_description>
	<!-- surface_form -->
	<ext_description linkend="geometry_schema.b_spline_surface.surface_form">
an indicator of special surface types;
</ext_description>
	<!-- u_closed -->
	<ext_description linkend="geometry_schema.b_spline_surface.u_closed">
indication of whether the surface is closed in the
      <i>u</i> direction; this is for information only;
</ext_description>
	<!-- v_closed -->
	<ext_description linkend="geometry_schema.b_spline_surface.v_closed">
indication of whether the svrface is closed in the
      <i>v</i> direction; this is for information only;
</ext_description>
	<!-- self_intersect -->
	<ext_description linkend="geometry_schema.b_spline_surface.self_intersect">
a flag to indicate whether, or not, surface is
      self-intersecting; this is for information only.
</ext_description>
	<!-- u_upper -->
	<ext_description linkend="geometry_schema.b_spline_surface.u_upper">
the upper index on control points in <i>u</i> direction;
</ext_description>
	<!-- v_upper -->
	<ext_description linkend="geometry_schema.b_spline_surface.v_upper">
the upper index on control points in <i>v</i> direction;
</ext_description>
	<!-- control_points -->
	<ext_description linkend="geometry_schema.b_spline_surface.control_points">
an array (two-dimensional) of control points defining
      surface geometry.
      This array is constructed from the control points list.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.b_spline_surface.wr:WR1">
		<p> Any instantiation of this entity shall include one of the subtypes</p>
		<p>
			<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_surface_with_knots"/>, <express_ref linkend="geometry_schema:ir_express:geometry_schema.uniform_surface"/>, <express_ref linkend="geometry_schema:ir_express:geometry_schema.quasi_uniform_surface"/>, or <express_ref linkend="geometry_schema:ir_express:geometry_schema.bezier_surface"/>. </p>
	</ext_description>
	<!-- +++++++++++ b_spline_surface_with_knots +++++++++++ -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots">
		<p>A <b>b_spline_surface_with_knots</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_surface"/>, in which the knot values are explicitly given. This
subtype shall be used to represent non-uniform B-spline surfaces, and may also
be used for other knot types.

      All knot multiplicities except the first and the last shall be in the
      range <i>1, . . . , d</i>; the first and last may have a maximum value of
      <i>d + 1</i>. </p>
		<note>
      In evaluating the basis functions, a knot <i>u</i> of, for example, multiplicity
      3 is interpreted as a sequence  <i>u, u, u,</i> in the knot array. 
 </note>
	</ext_description>
	<!-- u_multiplicities -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots.u_multiplicities">
the multiplicities of the knots in the <i>u</i>  parameter direction;
</ext_description>
	<!-- v_multiplicities -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots.v_multiplicities">
the multiplicities of the knots in the <i>v</i>  parameter direction;
</ext_description>
	<!-- u_knots -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots.u_knots">
the list of the distinct knots in the <i>u</i> parameter  direction;
</ext_description>
	<!-- v_knots -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots.v_knots">
the list of the distinct knots in the <i>v</i> parameter  direction;
</ext_description>
	<!-- knot_spec -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots.knot_spec">
the description of the knot type;
</ext_description>
	<!-- knot_u_upper -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots.knot_u_upper">
the number of distinct knots in the <i>u</i> parameter direction;
</ext_description>
	<!-- knot_v_upper -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots.knot_v_upper">
the number of distinct knots in the <i>v</i> parameter direction;
</ext_description>
	<!-- SELF\b_spline_surface.u_degree] -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots\b_spline_surface.u_degree">
Algebraic degree of basis functions in <i>u</i>.
</ext_description>
	<!-- SELF\b_spline_surface.v_degree] -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots\b_spline_surface.v_degree">
Algebraic degree of basis functions in <i>v</i>.
</ext_description>
	<!-- SELF\b_spline_surface.control_points_list -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots\b_spline_surface.control_points_list">
A list of lists of control points.
</ext_description>
	<!-- SELF\b_spline_surface.surface_form -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots\b_spline_surface.surface_form">
The list of the distinct knots in the <i>u</i> parameter  direction.
</ext_description>
	<!-- SELF\b_spline_surface.u_closed -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots\b_spline_surface.u_closed">
Indication of whether
     the surface is closed in the <i>u</i> direction; this is for information only.
</ext_description>
	<!-- SELF\b_spline_surface.v_closed -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots\b_spline_surface.v_closed">
Indication of whether
     the surface is closed in the <i>v</i> direction; this is for information only.
</ext_description>
	<!-- SELF\b_spline_surface.u_upper -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots\b_spline_surface.u_upper">
Upper index on control points in <i>u</i> direction.
</ext_description>
	<!-- SELF\b_spline_surface.v_upper -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots\b_spline_surface.v_upper">
Upper index on control points in <i>v</i> direction.
</ext_description>
	<!-- SELF\b_spline_surface.control_points -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots\b_spline_surface.control_points">
Array
     (two-dimensional) of control points defining surface geometry.
      This array is constructed from the control points list.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots.wr:WR1">
	The function <express_ref linkend="geometry_schema:ir_express:geometry_schema.constraints_param_b_spline"/> returns TRUE when the parameter
     constraints are verified for the <i>u</i> direction.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots.wr:WR2">
	The function <express_ref linkend="geometry_schema:ir_express:geometry_schema.constraints_param_b_spline"/> returns TRUE when the parameter
     constraints are verified for the <i>v</i> direction.
</ext_description>
	<!-- WR3 -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots.wr:WR3">
	The number of  <b>u_multiplicities</b> shall be the same as the number of <b>u_knots</b>.
</ext_description>
	<!-- WR4 -->
	<ext_description linkend="geometry_schema.b_spline_surface_with_knots.wr:WR4">
	The number of  <b>v_multiplicities</b> shall be the same as the number of <b>v_knots</b>.
</ext_description>
	<!-- +++++++++++ uniform_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.uniform_surface">
		<p>A <b>uniform_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_surface"/>, in which the knots
    are evenly spaced. Suitable default values for the knots and knot
    multiplicities can be derived in this case.

    A B-spline is <i>uniform</i> if and only if all knots are of
    multiplicity  and they differ by a positive constant from the preceding
    knot. In this subtype the knot spacing is 1.0, starting from <i>-degree</i>. </p>
		<note>
			<p>If explicit knot values for the surface are required, they can be
 derived as follows: </p>
			<p> ku_up = SELF\backslash b_spline_surface.u_upper + SELF\backslash b_spline_surface.u_degree + 2, </p>
			<p>    kv_up = SELF\backslash b_spline_surface.v_upper + SELF\backslash b_spline_surface.v_degree + 2 . </p>
			<p>   ku_up is the value required for the upper index on the knot and
      knot multiplicity lists in the <i>u</i> direction. This is computed from the
      degree and the number of control points in this direction. </p>
			<p>    kv_up is the value required for the upper index on the knot and
      knot multiplicity lists in the <i>v</i> direction. This is computed from the
      degree and the number of control points in this direction.</p>
			<p> The knot multiplicities and knots in the <i>u</i> and <i>v</i> parameter directions are
 then given by the function calls:</p>
			<eqn>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_surface.u_degree, ku_up, uniform_knots)</eqn>
			<eqn>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_surface.u_degree, ku_up, uniform_knots)</eqn>
			<eqn>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_surface.v_degree, kv_up, uniform_knots)</eqn>
			<eqn>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_surface.v_degree, kv_up, uniform_knots)</eqn>
		</note>
	</ext_description>
	<!-- +++++++++++ quasi_uniform_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.quasi_uniform_surface">
		<p>A <b>quasi_uniform_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_surface"/>, in which the knots
    are evenly spaced, and except for the first and last, have multiplicity 1.
    Suitable default values for the knots and knot multiplicities are derived
    in this case.
    
     A B-spline is <i>quasi-uniform</i> if and only if the knots are of
     multiplicity <i>(degree+1)</i> at the ends, of multiplicity 1 elsewhere, and
    they differ by a positive constant from the preceding knot. In this 
    subtype the knot spacing is 1.0, starting from 0.0.</p>
		<note>
			<p>If explicit knot values for the surface are required, they can be
 derived as follows: </p>
			<p>  ku_up = SELF\backslash b_spline_surface.u_upper - SELF\backslash b_spline_surface.u_degree + 2, </p>
			<p>  kv_up = SELF\backslash b_spline_surface.v_upper - SELF\backslash b_spline_surface.v_degree + 2. </p>
			<p>   ku_up is the value required for the upper index on the knot and
      knot multiplicity lists in the <i>u</i> direction. This is computed from the
      degree and the number of control points in this direction. </p>
			<p>    kv_up is the value required for the upper index on the knot and
      knot multiplicity lists in the <i>v</i> direction. This is computed from the
      degree and the number of control points in this direction.</p>
			<p> The knot multiplicities and knots in the <i>u</i> and <i>v</i> parameter directions are
 then given by the function calls:</p>
			<eqn>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_surface.u_degree, ku_up, quasi_uniform_knots)</eqn>
			<eqn>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_surface.u_degree, ku_up, quasi_uniform_knots)</eqn>
			<eqn>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_surface.v_degree, kv_up, quasi_uniform_knots)</eqn>
			<eqn>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_surface.v_degree, kv_up, quasi_uniform_knots)</eqn>
		</note>
	</ext_description>
	<!-- +++++++++++ bezier_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.bezier_surface">
		<p>A <b>bezier_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_surface"/>, in which the knots are evenly spaced and 
    have high multiplicities. Suitable default values for the knots and knot
    multiplicities are derived in this case. In this subtype the knot 
    spacing is 1.0, starting from 0.0. </p>
		<note>
			<p>If explicit knot values for the surface are required, they can be
 derived as follows: </p>
			<p> ku_up = <b>(SELF\backslash b_spline_surface.u_upper)/(SELF\backslash b_spline_surface.u_degree)</b> + 1, </p>
			<p> kv_up = <b>(SELF\backslash b_spline_surface.v_upper)/(SELF\backslash b_spline_surface.v_degree)</b> + 1, </p>
			<p>
				<i>ku_up</i> is the value required for the upper index on the knot and
      knot multiplicity lists in the <i>u</i> direction. This is computed from the
      degree and the number of control points in this direction. </p>
			<p>
				<i>kv_up</i> is the value required for the upper index on the knot and
      knot multiplicity lists in the <i>v</i> direction. This is computed from the
      degree and the number of control points in this direction.</p>
			<p> The knot multiplicities and knots in the <i>u</i> and <i>v</i> parameter directions are
 then given by the function calls:</p>
			<eqn>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_surface.u_degree, ku_up, bezier_knots)</eqn>
			<eqn>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_surface.u_degree, ku_up, bezier_knots)</eqn>
			<eqn>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_surface.v_degree, kv_up, bezier_knots)</eqn>
			<eqn>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_surface.v_degree, kv_up, bezier_knots)</eqn>
		</note>
	</ext_description>
	<!-- +++++++++++ rational_b_spline_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.rational_b_spline_surface">
		<p>A <b>rational_b_spline_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_surface"/>,  which is a piecewise parametric rational
 surface described in terms of control points, associated weight values and
 basis functions. It is instantiated with any of the other subtypes of <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_surface"/>,
which provide explicit or implicit knot values from which the basis functions are defined.</p>
		<p> The surface is to be interpreted as follows:</p>
		<p>
			<img src="BSsurf2.gif"/>
		</p>
		<note> See <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_surface"/> for details of the symbology
used in the above equation. </note>
	</ext_description>
	<!-- weights_data -->
	<ext_description linkend="geometry_schema.rational_b_spline_surface.weights_data">
the weights associated with the control points in the rational  case;
</ext_description>
	<!-- weights -->
	<ext_description linkend="geometry_schema.rational_b_spline_surface.weights">
the array (two-dimensional) of weight values constructed 
       from the <b>weights_data</b>.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.rational_b_spline_surface.wr:WR1">
	The array dimensions for the weights shall be
     consistent with the control points data.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.rational_b_spline_surface.wr:WR2">
	The weight value associated with each control point shall be greater than zero.
</ext_description>
	<!-- +++++++++++ locally_refined_spline_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface">
		<p>A <b>locally_refined_spline_surface</b> is a type of <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_surface"/> that is a piecewise parametric polynomial or rational surface described in terms of control points and local B-spline functions. If the set of B-spline functions are linearly independent, they will form a basis. With appropriate attribute values, the surface is capable of representing single span or spline surfaces of explicit polynomial, rational, B&#233;zier or B-spline type. However, the <b>locally_ refined_spline_surface</b> entity is intended for spline surfaces that do not have a tensor product structure. The degree of the surface can vary as the B-splines from which it is defined, need not to have the same polynomial degree.
</p>
		<note number="1">
			<p> A B-spline surface compactly represents a large smooth area. However, if the shape is mainly smooth, but with some areas of higher complexity, the data size of a B-spline surface tends to be high. Due to the tensor product construction of the B-spline surface the knot lines are global and high data size in one area of the surface cannot be kept locally.
The following approaches to define a B-spline surface with the property of local refinement have been pursued:</p>
			<ul>
				<li>  PHT splines, </li>
				<li>  General T-splines,</li>
				<li>  Analysis suitable T-splines,</li>
				<li>  Standard and semi-standard T-splines,</li>
				<li>  Hierarchical B-splines,</li>
				<li>  LR B-splines.</li>
			</ul>
		</note>
The entity <b>locally_refined_spline_surface</b> can, with proper pre and post processing, be used to represent surfaces of the types: analysis suitable T-spline, standard T-spline, semi-standard T-spline, hierarchical B-spline and LR B-spline.

<note number="2"> A locally refined spline surface is rational if and only if the weights are not all identical; this can be represented by the <express_ref linkend="geometry_schema:ir_express:geometry_schema.rational_locally_refined_spline_surface"/> subtype. If it is polynomial, the weights may be defaulted to all being 1.
</note>

Interpretation of the data is as follows:
	The surface, in the polynomial case, is given by:
<p>
			<img src="LRsurface.gif"/>
		</p>
	In the rational case all weights shall be positive and the surface is given by:

<p>
			<img src="RationalLRsurf.gif"/>
		</p>


where
<eqn>
			<b>K</b> = number of control points, </eqn>
		<eqn>
			<b>P</b>
			<sub>
				<i>i</i>
			</sub> = control points(<i>i</i>),</eqn>
		<eqn>
			<i>s<sub>i</sub>
			</i>= scaling_factors(<i>i</i>),</eqn>
		<eqn>
			<i>w<sub>i</sub>
			</i> = weights_data(<i>i</i>),</eqn>
		<eqn>N<sub>
				<i>i</i>
			</sub>
			<sup>d1</sup>(<i>u</i>) = u_bspline(<i>i</i>), and</eqn>
		<eqn>d1=u_degree. </eqn>
		<eqn>N<sub>
				<i>i</i>
			</sub>
			<sup>d2</sup>(<i>v</i>) = v_bspline(<i>i</i>), and</eqn>
		<eqn>d2=v_degree. </eqn>
		<note number="2">  The degrees are associated with the local_b_splines  and do not need to be constant  throughout the surface.</note> 

The weights, in the case of the rational subtype, are given in the same sequence as the coefficients.

The knot values and multiplicities are defined in the entity <express_ref linkend="geometry_schema:ir_express:geometry_schema.local_b_spline"/>. The B-splines are defined over a domain described by knot vectors in the parameter directions of the surface. However, in contrast to B-bspline surfaces, the basis functions or B-splines do not need to adapt to all knot lines in their supports. This facilitates the definition of a spline surface on a box partition.

<note number="3"> When the polynomial degree is the same for all B-splines and no knot lines exist that do not cross the entire parameter domain, the <b>locally_refined_spline_surface</b> will coincide with <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_surface_with_knots"/>. In that case <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_surface_with_knots"/>. has the simplest and most compact representation.
</note>
		<note number="4"> A <b>locally_refined_spline_surface</b> can be of type analysis suitable T-spline, hierarchical B-spline, LR-spline, semi standard T-spline or standard T-spline. The type is given by the enumeration <express_ref linkend="geometry_schema:ir_express:geometry_schema.locally_refined_spline_type_enum"/>, and the packing and unpacking of the surface will depend on this type.

</note>
		<figure id="Geomfig20" number="20">
			<title>Mesh for a locally refined spline surface of degree 2</title>
			<img src="Splinesurf.gif"/>
		</figure>
		<example>
			<p>The parameter domain of a locally refined spline surface illustrated as a regular mesh. The knot lines can have varying multiplicity throughout the domain. The numbers show the maximum multiplicity of each knot.There may exist B-splines with a given knot in its domain where this knot has a multiplicity less than the maximum multiplicity.  Zero multiplicity indicates that this knot does not exist in that part of the domain. No B-splines have this knot in their definition. This mesh corresponds to a surface that is quadratic in both parameter directions for all local B-splines.
</p>
			<p>The locally refined spline surface contains two knot values lists, one for each parameter direction. The knot values are (0, 1.0, 1.5, 2.0, 3.0) in the first parameter (<i>u</i>) direction and (0.0, 1.0, 1.2, 1.8, 2.0, 3.0) in the second parameter direction.</p>
			<p>The univariate B-splines in the first parameter direction are: </p>
			<ul>
				<li> 1u. Degree =2, knots=(0,1), multiplicities=(3,1)		</li>
				<li>     2u. Degree=2,  knots=(0,1,2), multiplicities=(2,1,1)	</li>
				<li>     3u. Degree=2, knots=(0,1,3), multiplicities=(2,1,1)	</li>
				<li>     4u. Degree=2, knots=(0,1,2), multiplicities=(1,1,2)	</li>
				<li>     5u. Degree=2, knots=(0,1,2,3), multiplicities=(1,1,1,1)</li>
				<li>     6u. Degree=2, knots=0,1,3,4), multiplicities=(1,1,1,1)	</li>
				<li>     7u. Degree=2, knots=(1,2,3), multiplicities=(1,2,1)	</li>
				<li>     8u. Degree=2, knots=(1,2,3,4), multiplicities=(1,1,1,1)</li>
				<li>     9u. Degree=2, knots=(1,3,4), multiplicities=(1,1,2)	</li>
				<li>     10u. Degree=2, knots=(2,3,4), multiplicities=(1,1,2)	</li>
				<li>     11u. Degree=2, knots=(3,4), multiplicities=(1,3)	</li>
			</ul>
			<p>The univariate B-splines in the second parameter direction are: </p>
			<ul>
				<li> 1v. Degree =2, knots=(0,1), multiplicities=(3,1)	       </li>
				<li> 2v. Degree=2, knots=(0,1,2), multiplicities=(2,1,1)       </li>
				<li> 3v. Degree=2, knots=(0,1,4), multiplicities=(2,1,1)       </li>
				<li> 4v. Degree=2, knots=(0,1,2,3), multiplicities=(1,1,1,1)   </li>
				<li> 5v. Degree=2, knots=(0,1,2,4), multiplicities=(1,1,1,1)   </li>
				<li> 6v. Degree=2, knots=(0,1,4,5), multiplicities=(1,1,1,1)   </li>
				<li> 7v. Degree=2, knots=(1,2,3,4), multiplicities=(1,1,1,1)   </li>
				<li> 8v. Degree=2, knots=(1,2,4,5), multiplicities=(1,1,1,1    </li>
				<li> 9v. Degree=2, knots=(1,4,5), multiplicities=(1,1,2)       </li>
				<li> 10v. Degree=2, knots=(2,4,5), multiplicities=(1,1,2)      </li>
				<li> 11v. Degree=2, knots=(4,5), multiplicities=(1,3)	       </li>
			</ul>
			<p>
     Each control point is associated with the product of 2 B-splines one in <i>u</i> and one in <i>v</i>. The list of pairs of B-splines starts with 
   all pairs of products of B-splines with knot values (0,0):</p>
			<p>  (1u.1v,  2u.1v,  5u.1v,  1u.3v,  2u.3v,  5u.3v  1u.6v,  2u.6v,  5u.6v). </p>
			<p> The list continues with all the remaining B-spline products with first knot value <i>v </i> = 0 : </p>
			<p>  (8u.1v,  8u.2v,  8u.5v,  10u.1v,  10u.2v,  10u.5v,  11u.1v,  11u.2v,  11u.5v) </p>
			<p>  The list continues with all the B-spline products with first knot value <i>v </i> = 1 </p>
			<p> (1u.9v,  2u.9v,  5u.9v,  7u.7v,  11u.8v). </p>
			<p>   Finally we list all B-spline products with first knot values <i> v </i> = 2 and <i> v </i> = 4  </p>
			<p>  (9u.10v,  11u.10v) and (1u.11v,  3u.11v,  6u.11v, 9u.11v,  11u.11v). </p>
			<p> In this example the splines are of type LR B-spline and all scaling factors have value 1.0.
 Corresponding to the orders in the consecutive lists above the complete data defining the geometry of the curve is a list of 30 <b>u_b_splines</b>,
 a corresponding list of 30 <b>v_b_splines</b>, a list of 5 <b>u_knots</b>, a list of 6 <b>v_knots</b>, a list of 30 control points and a corresponding list of 30 scaling factors. </p>
			<p>The combined B-splines are not tested for linearly independence. The domain is [0,3]x[0,3].  The  <b>surface_form</b> is unspecified and the matter of self-intersection and whether the surface is closed in any direction depends on the <b>control_points_list</b>.
 </p>
		</example>
	</ext_description>
	<!-- u_b_splines -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.u_b_splines">
the <express_ref linkend="geometry_schema:ir_express:geometry_schema.local_b_spline"/> functions in the first (<i>u</i>) parameter direction from which the surface is defined.  These functions refer to the <b>u_knots</b> list for their knot parameter values; </ext_description>
	<!-- v_b_splines -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.v_b_splines"><p>
the <express_ref linkend="geometry_schema:ir_express:geometry_schema.local_b_spline"/> functions in the second (<i>v</i>) parameter direction from which the surface is defined.  These functions refer to the <b>v_knots</b> list for their knot parameter values; 
	</p><note number="5">There may be some repetitions in the 2 lists of local_b_splines. </note>
	</ext_description>
	<!-- u_knots -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.u_knots">
the list of knot values for parameter  <i>u</i>;
</ext_description>
	<!-- v_knots -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.v_knots">
the list of knot values for parameter <i>v</i>;
</ext_description>
	<!-- control_points_list -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.control_points_list">
the list of control points. The <b>control_points_list</b> and consequently also the <b>u_b_splines</b>, the <b>v_b_splines</b> and <b>scaling_factors</b>, are ordered according to the knot values of the the combined B-spline coefficient constructed by multiplying corresponding univariate B-splines starting from the lowest knot value for each parameter.  The knots in the v-parameter are the major sorting factor while the knots in the u-parameter the minor sorting factor. In case of ambiguities, the lists are sorted according to the upper knot value pair of the combined B-splines and the multiplicities of the first knots of the univariate B-splines.
</ext_description>
	<!-- scaling_factors -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.scaling_factors">
the list of scaling factors, these factors are used to ensure that the non-zero B-splines at all points in the domain add up to unity (partition of unity). LR B-splines, hierarchical B-splines and some variants of T-splines ensure partition of unity by scaling. Other variants of T-splines use rational scaling.
</ext_description>
	<!-- linearly_independent -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.linearly_independent">
		<p>indicates whether this property has been tested for and in that case the result of the test; this is for information only;</p>
		<note number="6"> The test is applied to the set of products of  <express_ref linkend="geometry_schema:ir_express:geometry_schema.local_b_spline"/>s used as coefficients of the control points . Not all types of locally refined surfaces are linearly independent by default. </note>
	</ext_description>
	<!-- locally_refined_spline_type -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.locally_refined_spline_type">
the type of the initial locally refined spline surface that provides rules for how the stored surface can be unpacked to its original format;
</ext_description>
	<!-- self_intersect -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.self_intersect">
indication whether the surface is self-intersecting; this is for information only.
</ext_description>
	<!-- surface_form -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.surface_form">
indication of special surface types. 
</ext_description>
	<!-- u_closed-->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.u_closed">
indication whether the surface is closedin the <i>u</i> direction; this is for information only;
</ext_description>
	<!-- v_closed-->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.v_closed">
indication whether the surface is closedin the <i>v</i> direction; this is for information only;
</ext_description>
	<!-- domain -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.domain">
the parameter domain corresponding to the surface. domain(1),(1) is the minimum parameter value in the <i>u</i> direction;  domain(1),(2)  is the maximum parameter value in the <i>u</i> direction;  domain(2),(1) and domain (2),(2) gives the minimum and maximum parameter values in the <i>v</i> direction. If all B-splines at the boundary have a knot multiplicity equal to the degree+1 at this boundary, the domain will coincide with the domain given by the minimum and maximum values in <b>u_knots</b> and <b>v_knots</b>. Otherwise, it will be coincide with a domain given by nearby knots depending on knot multiplicities. 
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.wr:WR1">
	the number of <b>u_b_splines</b> shall be equal to the number of control points;
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.wr:WR2">
	the number of <b>v_b_splines</b> shall be equal to the number of control points;
</ext_description>
	<!-- WR3 -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.wr:WR3">
	the number of <b>scaling_factors</b> shall be equal to the number of control points;
</ext_description>
	<!-- WR4 -->
	<ext_description linkend="geometry_schema.locally_refined_spline_surface.wr:WR4">
	all <b>scaling_factors</b> shall be positive and not greater than 1.0.
</ext_description>
	<!-- +++++++++++ rational_locally_refined_spline_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.rational_locally_refined_spline_surface">
		<p>A <b>rational_locally_refined_spline_surface</b> is a type of <express_ref linkend="geometry_schema:ir_express:geometry_schema.locally_refined_spline_surface"/> that  is a piecewise parametric rational surface described in terms of control points and local B-spline functions. </p>
	</ext_description>
	<!-- weights_data -->
	<ext_description linkend="geometry_schema.rational_locally_refined_spline_surface.weights_data">
the supplied values of the weights.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.rational_locally_refined_spline_surface.wr:WR1">
	the size of the  of <b>weights_data</b> list shall be equal to the number of control points
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.rational_locally_refined_spline_surface.wr:WR2">
	all values in the  <b>weights_data</b> list shall be positive.
</ext_description>
	<!-- +++++++++++ rectangular_trimmed_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.rectangular_trimmed_surface">
		<p>A <b>rectangular_trimmed_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_surface"/>,  in which the
    boundaries are the constant parametric lines <i>u<sub>1</sub> =  u1</i>,
    <i>u<sub>2</sub> =  u2</i>, <i>v<sub>1</sub> =  v1</i> and <i>v<sub>2</sub> =  v2</i>. All these 
    values shall be within the parametric range of the referenced surface. 
    Cyclic properties of the parameter range are assumed. </p>
		<note number="1">
   For example, 370 degrees is equivalent to 10 degrees, for those
     surfaces whose parametric form is defined using circular functions 
     (sine and cosine).
     </note>
    The rectangular trimmed surface inherits its parametrisation
    directly from the basis surface and has parameter ranges from
    0 to <i>|u<sub>2</sub> -  u<sub>1</sub>|</i> and 0  to <i>|v<sub>2</sub>  - v<sub>1</sub>|</i>.
    The derivation of the new parameters from the old uses the algorithm
    described in <express_ref linkend="geometry_schema:ir_express:geometry_schema.trimmed_curve"/>.
  <note number="2">
  If the surface is closed in a given parametric direction,
    the values of <i>>u<sub/>
			</i> or  <i>>v<sub>2</sub>
			</i> may require to be
    increased by the cyclic range.
    </note>
	</ext_description>
	<!-- basis_surface  -->
	<ext_description linkend="geometry_schema.rectangular_trimmed_surface.basis_surface">
the surface being trimmed;
</ext_description>
	<!-- u1 -->
	<ext_description linkend="geometry_schema.rectangular_trimmed_surface.u1">
the first <i>u</i> parametric value;
</ext_description>
	<!-- u2 -->
	<ext_description linkend="geometry_schema.rectangular_trimmed_surface.u2">
the second <i>u</i> parametric value;
</ext_description>
	<!-- v1 -->
	<ext_description linkend="geometry_schema.rectangular_trimmed_surface.v1">
the first <i>v</i> parametric value;
</ext_description>
	<!-- v2 -->
	<ext_description linkend="geometry_schema.rectangular_trimmed_surface.v2">
the second <i>v</i> parametric value;
</ext_description>
	<!-- usense -->
	<ext_description linkend="geometry_schema.rectangular_trimmed_surface.usense">
a flag to indicate whether the direction of the first parameter of the trimmed surface agrees with or opposes the sense of 
     <i>u</i> in the  basis surface;
</ext_description>
	<!-- vsense -->
	<ext_description linkend="geometry_schema.rectangular_trimmed_surface.vsense">
a flag to indicate whether the direction of the second parameter of the trimmed surface agrees with or opposes the sense of 
     <i>v</i> in the  basis surface.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.rectangular_trimmed_surface.wr:WR1">
	The attributes <b>u1</b> and <b>u2</b> shall have different values.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.rectangular_trimmed_surface.wr:WR2">
	The attributes <b>v1</b> and <b>v2</b> shall have different values.
</ext_description>
	<!-- WR3 -->
	<ext_description linkend="geometry_schema.rectangular_trimmed_surface.wr:WR3">
	With the exception of those surfaces closed in the <i>u</i>
	     parameter direction, <b>usense</b> shall be compatible with the ordered 
     parameter values for <i>u</i>.
</ext_description>
	<!-- WR4 -->
	<ext_description linkend="geometry_schema.rectangular_trimmed_surface.wr:WR4">
	With the exception of those svrfaces closed in the <i>v</i>
		     parameter direction, <b>vsense</b> shall be compatible with the ordered 
     parameter valves for <i>v</i>.
</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.rectangular_trimmed_surface.wr:IP1">
	 The domain of the trimmed surface shall be within the domain of the surface being trimmed.
</ext_description>
	<!-- +++++++++++ curve_bounded_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.curve_bounded_surface">
		<p>A <b>curve_bounded_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_surface"/>, and is a parametric surface with curved
     boundaries defined by one or more  <express_ref linkend="geometry_schema:ir_express:geometry_schema.boundary_curve"/>s or
     <express_ref linkend="geometry_schema:ir_express:geometry_schema.degenerate_pcurve"/>s. One of
     the <express_ref linkend="geometry_schema:ir_express:geometry_schema.boundary_curve"/>s may be the outer boundary; any number of inner boundaries is
     permissible.
    The outer boundary may be defined implicitly as the natural boundary
    of the surface; this is indicated by the <b>implicit_outer</b> flag being true.
    In this case at least one inner boundary shall be defined.
    For certain types of closed, or partially closed, surface (such as a cylinder) it may not be possible
    to identify any given boundary as outer.
     The region of the  <b>curve_bounded_surface</b>
     in the <b>basis_surface</b> is defined to be the
     portion of the basis surface in the direction of <b>n &#215;  t</b> from any
     point on the boundary, where <b>n</b> is the
    surface normal and <b>t</b> the boundary curve tangent vector at this point.
    The region so defined shall be arcwise connected. </p>
		<figure id="Geomfig21" number="21">
			<title>Curve_bounded_surface</title>
			<img src="Geomfig20.gif"/>
		</figure>
	</ext_description>
	<!-- basis_surface  -->
	<ext_description linkend="geometry_schema.curve_bounded_surface.basis_surface">
the surface to be bounded;
</ext_description>
	<!-- boundaries -->
	<ext_description linkend="geometry_schema.curve_bounded_surface.boundaries">
the bounding curves of the surface, other than the  implicit outer boundary, if present; at most, one of these may be
     identified as an outer boundary by being of type
     <express_ref linkend="geometry_schema:ir_express:geometry_schema.outer_boundary_curve"/>;
</ext_description>
	<!-- implicit_outer -->
	<ext_description linkend="geometry_schema.curve_bounded_surface.implicit_outer">
		<p>a Boolean flag which, if true, indicates the
     natural boundary of the surface is used as an outer boundary. </p>
		<note> See Figure 21 for interpretation of these attributes. </note>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.curve_bounded_surface.wr:WR1">
	No explicit outer boundary shall be present when <b>implicit_outer</b> is TRUE. 
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.curve_bounded_surface.wr:WR2">
	The outer boundary shall only be implicitly defined if
      the <b>basis_surface</b> is bounded. 
</ext_description>
	<!-- WR3 -->
	<ext_description linkend="geometry_schema.curve_bounded_surface.wr:WR3">
	At most, one outer boundary curve shall be included in
      the set of boundaries.
</ext_description>
	<!-- WR4 -->
	<ext_description linkend="geometry_schema.curve_bounded_surface.wr:WR4">
	Each <express_ref linkend="geometry_schema:ir_express:geometry_schema.boundary_curve"/> shall lie on the <b>basis_surface</b>. This is verified from the 
	      <b>basis_surface</b> attribute of the <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_on_surface"/> supertype for each element of the <b>boundaries</b> list. 
</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.curve_bounded_surface.wr:IP1">
	 Each curve in the set of <b>boundaries</b> shall be closed.
</ext_description>
	<!-- IP2 -->
	<ext_description linkend="geometry_schema.curve_bounded_surface.wr:IP2">
No two curves in the set of <b>boundaries</b> shall intersect.
</ext_description>
	<!-- IP3 -->
	<ext_description linkend="geometry_schema.curve_bounded_surface.wr:IP3">
	 At most one of the boundary curves may enclose any other boundary curve. If an <express_ref linkend="geometry_schema:ir_express:geometry_schema.outer_boundary_curve"/> is designated,
     only that curve may enclose any other boundary curve.
</ext_description>
	<!-- +++++++++++ boundary_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.boundary_curve">
		<p>A <b>boundary_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_on_surface"/> suitable for the
    definition of a surface boundary. </p>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.boundary_curve.wr:WR1">
	The derived <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve.closed_curve"/> attribute of
     the <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve"/> supertype shall be TRUE.
</ext_description>
	<!-- +++++++++++ outer_boundary_curve +++++++++++ -->
	<ext_description linkend="geometry_schema.outer_boundary_curve">
		<p>An <b>outer_boundary_curve</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.boundary_curve"/> which has the
    additional semantics of defining an outer boundary of a surface. No more 
    than one such curve shall be included in the set of <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_bounded_surface.boundaries"/> of 
    a <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_bounded_surface"/>. </p>
	</ext_description>
	<!-- +++++++++++ rectangular_composite_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.rectangular_composite_surface">
		<p>A <b>rectangular_composite_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_surface"/> composed of a rectangular array of <b>n_u</b> by
     <b>n_v</b> segments or patches. Each segment shall be finite and 
     topologically rectangular  (i.e., it corresponds to a rectangle in
     parameter space). The segment shall be either a <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_surface"/> or a
    <express_ref linkend="geometry_schema:ir_express:geometry_schema.rectangular_trimmed_surface"/>. There shall be at least positional
     continuity between adjacent segments in both directions; the composite 
     surface may be open or closed in the <i>u</i> direction and open or closed
     in the <i>v</i> direction.</p>
		<p>   For a particular segment <i>S<sub>ij</sub>
			</i> = <b>segments</b>[i][j]: </p>
		<p> The preceding segment in the <i>u</i> direction is <i>S<sub>(i-1)j</sub>
			</i> and the
       preceding segment in the <i>v</i> direction is <i>S<sub>i(j-1)</sub>
			</i>; similarly for
       following segments. </p>
		<p> If <b>segments[i][j].u_sense</b> is TRUE, the boundary of
       <i>S<sub>ij</sub>
			</i> where it adjoins <i>S<sub>(i=1)j</sub>
			</i> is that where the <i>u</i> parameter 
       (of the underlying bounded surface) is high. </p>
		<p>  If <b>segments[i][j].u_sense</b> is FALSE, it is at the low  <i>u</i>
       boundary; similarly for the <b>v_sense</b> indicator. </p>
		<p> The <i>u</i> parametrisation of <i>S<sub>ij</sub>
			</i> in the composite surface is
       from <i>i-1</i> to <i>i</i>, mapped linearly from the parametrisation of the
       underlying bounded surface. </p>
		<p>   If <i>U</i> is the <i>u</i> parameter for the <b>rectangular_composite_surface</b> and
       <i> u<sub>ij0</sub> &#8804; u<sub>ij</sub>ij &#8804; u<sub>ij1</sub>
			</i>, is the <i>u</i> parameter for <b>segments[i][j]</b>,
       these parameters are related by the equations: </p>
		<eqn>
			<i> U = (i - 1) + (u<sub>ij</sub> - u<sub>ij0</sub>)/(u<sub>ij1</sub> - u<sub>ij0</sub>),</i>
			<i>   u<sub>ij</sub> = u<sub>ij0</sub> + (U -(i-1))(u<sub>ij1</sub> - u<sub>ij0</sub>),</i>
		</eqn>
		<p>if <b>segments[i][j].u_sense</b> = TRUE;</p>
		<eqn>
			<i> U = i -  (u<sub>ij</sub>  - u<sub>ij0</sub>)/(u<sub>ij1</sub> - u<sub>ij0</sub>), </i>
			<i> u<sub>ij</sub> = u<sub>ij0</sub> - (U -i)(u<sub>ij1</sub> - u<sub>ij0</sub>), </i>
		</eqn>
		<p>if <b>segments[i][j].u_sense</b> = FALSE.</p>
		<p>    The <i>v</i> parametrisation is obtained in a similar way.</p>
		<p>   Thus the composite surface has parametric range 0 to <b>n_u</b>, 
       0 to <b>n_v</b>. </p>
		<p>The degree of continuity of the joint between <i>S<sub>ij</sub>
			</i> and
       <i>S<sub>(i+1)j</sub>/</i> is given by    <b>segments[i][j].u_transition</b>.</p>
		<p>   For the last patch in a row <i>S<sub>(n_u)j</sub>
			</i> this may take the value
       <b>discontinuous</b>, if the composite surface is open in the <i>u</i>
       direction; otherwise it is closed here, and the transition code 
       relates to the continuity to <i>S<sub>1j</sub>
			</i>; similarly for 
       <b>v_transition</b>.  <b>discontinuous</b> shall not occur elsewhere 
       in the <b>segments surface_patch</b> transition codes.
     </p>
	</ext_description>
	<!-- segments  -->
	<ext_description linkend="geometry_schema.rectangular_composite_surface.segments">
		<p>a rectangular array (represented by a list of list) of
      component surface patches. Each such patch contains information on the 
      senses and transitions.</p>
		<p>
			<b>segments[i][j].u_transition</b> refers to the state of continuity
      between <b>segments[i][j]</b>  and <b>segments[i+1][j]</b>.
      The last column (<b>segments[n_u][j].u_transition</b>) may contain 
      the value <b>discontinuous</b>, meaning that (that row of) the surface 
      is not closed in the <i>u</i> direction; the rest of the list shall not contain
      this value.</p>
		<p>     The last row (<b>segments[i][n_v].v_transition</b>) may
      contain the value <b>discontinuous</b>, meaning that (that column of) 
      the surface is not closed in the <i>v</i> direction; the rest of the list shall
      not contain this value. </p>
	</ext_description>
	<!-- n_u  -->
	<ext_description linkend="geometry_schema.rectangular_composite_surface.n_u">
 the number of surface oatches in the <i>u</i> parameter direction;
</ext_description>
	<!-- n_v  -->
	<ext_description linkend="geometry_schema.rectangular_composite_surface.n_v">
the number of surface oatches in the <i>v</i> parameter direction.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.rectangular_composite_surface.wr:WR1">
	Each sub-list in the <b>segments</b> list shall contain
      <b>n_v</b>
		<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_patch"/>es.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.rectangular_composite_surface.wr:WR2">
		<p> Other constraints on the segments (veriofied by <express_ref linkend="geometry_schema:ir_express:geometry_schema.constraints_rectangular_composite_surface"/> function are: </p>
		<p> that the component surfaces are all either rectangular trimmed  surfaces or B-spline surfaces; </p>
		<p> that the <express_ref linkend="geometry_schema:ir_express:geometry_schema.transition_code"/>s in the <b>segments</b> list do not contain the value <b>discontinuous</b> except for the
     last row or column; when this occurs, it  indicates  that the surface  is not closed in the appropriate direction. </p>
	</ext_description>
	<!-- IP1 -->
	<ext_description linkend="geometry_schema.rectangular_composite_surface.wr:IP1">
 The senses of the component surfaces are as specified in the <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_patch.u_sense"/> and <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_patch.v_sense"/> 
      attributes of each element of <b>segments</b>.
</ext_description>
	<!-- +++++++++++ surface_patch +++++++++++ -->
	<ext_description linkend="geometry_schema.surface_patch">
		<p>A <b>surface_patch</b> is a type of
	<express_ref linkend="representation_schema:ir_express:representation_schema.founded_item"/> and is a bounded surface with additional transition and
     sense information which is used to define a 
     <express_ref linkend="geometry_schema:ir_express:geometry_schema.rectangular_composite_surface"/>.
     </p>
	</ext_description>
	<!-- parent_surface  -->
	<ext_description linkend="geometry_schema.surface_patch.parent_surface">
		<p> the surface which defines the geometry and boundaries of the surface patch; </p>
		<note>
 Since <b>surface_patch</b> is not a subtype of
 <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> the instance of <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_surface"/> used
 as <b>parent_surface</b> is not automatically associated with the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/> of the <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> using
 a <express_ref linkend="geometry_schema:ir_express:geometry_schema.rectangular_composite_surface"/> containing this <b>surface_patch</b>.
 It is therefore necessary to ensure that the <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_surface"/>
 instance is explicitly included in a <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> with the
 appropriate <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>.
 </note>
	</ext_description>
	<!-- u_transition  -->
	<ext_description linkend="geometry_schema.surface_patch.u_transition">
the minimum state of geometric continuity along the
  second <i>u</i> boundary of the patch as it joins the first <i>u</i> boundary of its
  neighbour. In the case of the last patch, this defines the state of
  continuity between the first <i>u</i> boundary and last <i>u</i> boundary of the
  <express_ref linkend="geometry_schema:ir_express:geometry_schema.rectangular_composite_surface"/>;
</ext_description>
	<!-- v_transition  -->
	<ext_description linkend="geometry_schema.surface_patch.v_transition">
the minimum state of geometric continuity along the
  second <i>v</i> boundary of the patch as it joins the first <i>v</i> boundary of its
  neighbour. In the case of the last patch, this defines the state of
  continuity between the first <i>v</i> boundary and last <i>v</i> boundary of the
  <express_ref linkend="geometry_schema:ir_express:geometry_schema.rectangular_composite_surface"/>;
</ext_description>
	<!-- u_sense  -->
	<ext_description linkend="geometry_schema.surface_patch.u_sense">
the relationship between the sense
  (increasing parameter value) of the patch and the sense of the
  <b>parent_surface</b>.  If <b>u_sense</b> is TRUE, the first <i>u</i>
  boundary of the patch is the one where the parameter <i>u</i> takes its lowest
  value; it is the highest value boundary if sense is FALSE.
</ext_description>
	<!-- v_sense  -->
	<ext_description linkend="geometry_schema.surface_patch.v_sense">
the relationship between the sense
  (increasing parameter value) of the patch and the sense of the
  <b>parent_surface</b>.  If <b>v_sense</b> is TRUE, the first <i>v</i>
  boundary of the patch is the one where the parameter <i>v</i> takes its lowest
  value; it is the highest value boundary if sense is FALSE.
</ext_description>
	<!-- using_surfaces  -->
	<ext_description linkend="geometry_schema.surface_patch.using_surfaces">
the bag of
 <express_ref linkend="geometry_schema:ir_express:geometry_schema.rectangular_composite_surface"/>s which use this
 <b>surface_patch</b> in their definition. This bag shall not be
 empty.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.surface_patch.wr:WR1">
	 A curve bounded surface  shall not be used to
  define a surface patch.
</ext_description>
	<!-- +++++++++++ offset_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.offset_surface">
		<p>A <b>offset_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/> and is a procedural definition of a simple offset surface at a normal
     distance from the originating surface. <b>distance</b> may be positive,
     negative or zero to indicate the preferred side of the surface.  The
     positive side and the resultant offset surface are
     defined as follows: </p>
		<p> Define unit tangent vectors  of the base surface in the
      <i>u</i> and <i>v</i> directions; denote these  by <i>
				<b>&#963;</b>
				<sub>u</sub>
			</i> and
      <i>
				<b>&#963;</b>
				<sub>v</sub>
			</i>. </p>
		<p> Take the cross product, <i>
				<b>N</b> = <b>&#963;</b>
				<sub>u</sub> &#215;
     <b>&#963;</b>
				<sub>v</sub>
			</i>, of these (which shall be linearly independent, or 
      there is no offset surface). </p>
		<p>
			<i>
				<b>N</b>
			</i> shall be extended by continuity at singular points, if possible. </p>
		<p> Normalise <i>
				<b>N</b>
			</i> to get a unit normal (to the surface) vector. </p>
		<p> Move the offset distance (which may be zero) along that vector to
      find the point on the offset surface. </p>
		<note number="1">  The definition  allows the <b>offset_surface</b> to
     be self-intersecting. </note>
		<p>  The offset surface takes its parametrisation directly from that of the
    basis surface, corresponding points having identical parameter values.
    The <b>offset_surface</b> is parametrised as </p>
		<eqn>
			<i>
				<b>&#963;</b>(u,v) = <b>S</b>(u,v) + d<b>N</b>. </i>
		</eqn>
		<p>  Where <b>
				<i>N</i>
			</b> is the unit normal vector to the basis surface <b>S</b>(<i>u,v</i>) 
    at parameter values (<i>u,v</i>), and <i>d</i> is <b>distance</b>. </p>
		<note number="2"> Care should be taken when using this entity to ensure that the
    offset distance never exceeds the radius of curvature in any direction 
    at any point of the basis surface. In particular, the surface should not 
    contain any ridge or singular point. 
 </note>
	</ext_description>
	<!-- basis_surface  -->
	<ext_description linkend="geometry_schema.offset_surface.basis_surface">
the surface that is to be offset;
</ext_description>
	<!-- distance  -->
	<ext_description linkend="geometry_schema.offset_surface.distance">
the offset distance, which may be positive, negative or
      zero. A positive offset distance is measured in the direction of the
      surface normal;
</ext_description>
	<!-- self_intersect  -->
	<ext_description linkend="geometry_schema.offset_surface.self_intersect">
a flag to indicate whether or not the surface is
      self-intersecting; this is for information only.
</ext_description>
	<!-- +++++++++++ oriented_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.oriented_surface">
		<p>A <b>oriented_surface</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/> for which the direction of
the surface normal may be reversed.  </p>
		<p>The unit normal <b>N</b>, at any point on the <b>oriented_surface</b> is
defined by the eqations: </p>
		<eqn>
			<b>N</b>
			<i> (u,v) = &lt; ((&#8706;<b>&#963;</b>)/(&#8706; u) &#215; (&#8706;<b>&#963;</b>)/(&#8706; v)) &gt; </i>,  if <b>orientation</b> = .TRUE., </eqn>
		<eqn>
			<b>N</b>
			<i> (u,v) = - &lt; ((&#8706;<b>&#963;</b>)/(&#8706; u) &#215; (&#8706;<b>&#963;</b>)/(&#8706; v)) &gt; </i>,  if <b>orientation</b> = .FALSE., </eqn>
		<note> An <b>oriented_surface</b> may be instantiated with other
subtypes of surface. For example a complex instance of <b>oriented_surface</b>,
with <b>orientation</b> = .FALSE., and <b>spherical_surface</b>defines a spherical
surface with an inward pointing normal.
</note>
	</ext_description>
	<!-- orientation  -->
	<ext_description linkend="geometry_schema.oriented_surface.orientation">
a flag which indicates whether, or not, the direction
 of the surface normal is reversed.
</ext_description>
	<!-- +++++++++++ surface_replica +++++++++++ -->
	<ext_description linkend="geometry_schema.surface_replica">
		<p>A <b>surface_replica</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/>  which defines a replica of an existing surface in a different location.  
    It is defined by referencing the parent surface and a transformation 
    which gives the new position  and possible scaling. The original
    surface is not affected.  The geometric characteristics of the surface 
    produced will be identical to that of the parent surface, but, where the 
    transformation includes scaling, the size may differ. </p>
	</ext_description>
	<!-- parent_surface  -->
	<ext_description linkend="geometry_schema.surface_replica.parent_surface">
the surface that is being copied;
</ext_description>
	<!-- transformation  -->
	<ext_description linkend="geometry_schema.surface_replica.transformation">
the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_transformation_operator_3d"/>
      which defines the location,  orientation and scaling of the  surface replica relative to that of the parent surface.  
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.surface_replica.wr:WR1">
	A <b>surface_replica</b> shall not participate in its own definition.
</ext_description>
	<!-- +++++++++++ volume +++++++++++ -->
	<ext_description linkend="geometry_schema.volume">
		<p>A <b>volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>  that is a three dimensional solid of finite volume with a tri-parametric representation. </p>
Each volume has a parametric representation
<eqn>
			<b>V</b>
			<i>(u,v,w)</i>
		</eqn>
		<p>where <i>u, v, w</i> are independent dimensionless parameters. For each
<i>(u,v,w)</i> within the parameter range: </p>
		<eqn>
			<b>r =  V</b>
			<i>(u,v,w)</i>, </eqn>
		<p> gives the coordinates of a point within the volume. </p>
		<note>In this version of the standard the parameter ranges for the standard
primitives have been standardised, mainly to [0:1], to ensure that they are dimensionless
quantities.
</note>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.volume.wr:WR1">
	The coordinate space dimensionality  shall be 3.
</ext_description>
	<!-- +++++++++++ block_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.block_volume">
		<p>A <b>block_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/>  in the form of
    a solid rectangular parallelepiped, defined with a  location and placement coordinate system.  The <b>block_volume</b> is specified by
    the positive lengths <b>x, >y</b>, and <b>z</b> along the axes of the placement
 coordinate  system, and has one vertex at the origin of the placement coordinate system.</p>
		<p>      The data is to be interpreted as follows: </p>
		<eqn>
			<b>C</b> = <b>position.location</b> (corner) </eqn>
		<eqn>
			<b>x</b> = <b>position.p[1]</b>
		</eqn>
		<eqn>
			<b>y</b>  = <b>position.p[2]</b>
		</eqn>
		<eqn>
			<b>z</b>  = <b>position.p[3]</b>
		</eqn>
		<eqn>
			<i> l </i>  =<b>x</b> (length)            </eqn>
		<eqn>
			<i>  d  </i> = <b>y</b> (depth)           </eqn>
		<eqn>
			<i>  h </i> =  <b>z</b> (height)          </eqn>
		<p>  and the volume is parametrised as: </p>
		<eqn>
			<i>
				<b>V</b>(u,v,w)</i> = <b>C</b> + <i> ul </i>
			<b>x</b> + <i>vd</i>
			<b>y</b> + <i>wh</i>
			<b>z</b>
		</eqn>
		<p>    where the parametrisation range is <i>0 &#8804; u &#8804; 1,   0 &#8804; v &#8804; 1</i> , and <i>0 &#8804; w &#8804; 1</i>. </p>
	</ext_description>
	<!-- position  -->
	<ext_description linkend="geometry_schema.block_volume.position">
the location and orientation of the axis system for the primitive.  The block has one vertex at <b>position.location</b> and its
    edges aligned with the placement axes in the positive sense;
</ext_description>
	<!-- x  -->
	<ext_description linkend="geometry_schema.block_volume.x">
 the size of the block along the placement X axis,  (<b>position.p[1]</b>);
</ext_description>
	<!-- y -->
	<ext_description linkend="geometry_schema.block_volume.y">
 the size of the block along the placement Y axis,  (<b>position.p[2]</b>);
</ext_description>
	<!-- z  -->
	<ext_description linkend="geometry_schema.block_volume.z">
 the size of the block along the placement Z axis,  (<b>position.p[3]</b>).
</ext_description>
	<!-- +++++++++++ wedge_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.wedge_volume">
		<p>A <b>wedge_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/>  which can be envisioned
    as the result of
  intersecting a block with a plane perpendicular to one of its faces.
  It is defined with a location
    and local coordinate system.  A triangular/trapezoidal face lies in the
    plane defined by the placement X and Y axes.   This face is defined by
    positive lengths <b>x</b> and <b>y</b> along the placement X and Y axes, by the length
    <b>ltx</b> (if non-zero) parallel to the X axis at a distance
    <b>y</b> from the placement
    origin, and by the line connecting the ends of the <b>x</b> and
    <b>ltx</b> segments. </p>
		<p> The remainder of the wedge is specified by the positive length <b>z</b> along the
    placement Z axis which defines a distance through which the trapezoid or
    triangle is extruded.  If <b>ltx</b>= 0, the wedge has five faces; otherwise,
  it  has six faces.</p>
		<note>See Figure 22 for interpretation of attributes.
  </note>
		<figure id="Geomfig22" number="22">
			<title>Wedge_volume and its attributes</title>
			<img src="Geomfig21.gif"/>
		</figure>
		<p>      The data is to be interpreted as follows: </p>
		<eqn>
			<b>C</b> = <b>position.location</b> (corner) </eqn>
		<eqn>
			<b>x</b> = <b>position.p[1]</b>
		</eqn>
		<eqn>
			<b>y</b>  = <b>position.p[2]</b>
		</eqn>
		<eqn>
			<b>z</b>  = <b>position.p[3]</b>
		</eqn>
		<eqn>
			<i> l </i>  =<b>x</b> (length)            </eqn>
		<eqn>
			<i>  d  </i> = <b>y</b> (depth)           </eqn>
		<eqn>
			<i>  h </i> =  <b>z</b> (height)          </eqn>
		<eqn>
			<i> l<sub>min</sub>
			</i>  =<b>ltxx</b> (length)            </eqn>
		<p>  and the volume is parametrised as: </p>
		<eqn>
			<i>
				<b>V</b>(u,v,w)</i> = <b>C</b> + <i> u((1 - v)l + vl<sub>min</sub>) </i>
			<b>x</b> + <i>vd</i>
			<b>y</b> + <i>wh</i>
			<b>z</b>
		</eqn>
		<p>    where the parametrisation range is <i>0 &#8804; u &#8804; 1,   0 &#8804; v &#8804; 1</i> , and <i>0 &#8804; w &#8804; 1</i>. </p>
	</ext_description>
	<!-- position  -->
	<ext_description linkend="geometry_schema.wedge_volume.position">
the location and orientation of the axis system for the primitive.  The wedge has one vertex at <b>position.location</b> and its
    edges aligned with the placement axes in the positive sense;
</ext_description>
	<!-- x  -->
	<ext_description linkend="geometry_schema.wedge_volume.x">
 the size of the wedge along the placement X axis,  (<b>position.p[1]</b>);
</ext_description>
	<!-- y -->
	<ext_description linkend="geometry_schema.wedge_volume.y">
 the size of the wedge along the placement Y axis,  (<b>position.p[2]</b>);
</ext_description>
	<!-- z  -->
	<ext_description linkend="geometry_schema.wedge_volume.z">
 the size of the wedge along the placement Z axis,  (<b>position.p[3]</b>);
</ext_description>
	<!-- ltx  -->
	<ext_description linkend="geometry_schema.wedge_volume.ltx">
  the length in the positive X direction of the smaller surface of the wedge.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.wedge_volume.wr:WR1">
	The attribute <b>ltx</b> shall be non-negative  and less than <b>x</b>.
</ext_description>
	<!-- +++++++++++ pyramid_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.pyramid_volume">
		<p>A <b>pyramid_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/>  in the form of
a solid pyramid with a rectangular base.
The apex of the pyramid is directly above the centre
point of the base. The  <b>pyramid_volume</b> is specified by its position,
which provides a placement coordinate system, its length, depth and height.</p>
		<p>      The data is to be interpreted as follows: </p>
		<eqn>
			<b>C</b> = <b>position.location</b> (corner) </eqn>
		<eqn>
			<b>x</b> = <b>position.p[1]</b>
		</eqn>
		<eqn>
			<b>y</b>  = <b>position.p[2]</b>
		</eqn>
		<eqn>
			<b>z</b>  = <b>position.p[3]</b>
		</eqn>
		<eqn>
			<i> l </i>  =<b>xlength</b>
		</eqn>
		<eqn>
			<i>  d  </i> = <b>ydepth</b>
		</eqn>
		<eqn>
			<i>  h </i> =  <b>height</b>
		</eqn>
		<p>  and the volume is parametrised as: </p>
		<eqn>
			<i>
				<b>V</b>(u,v,w)</i> = <b>C</b> + <i> w((l/2)</i>
			<b>x</b> + <i>(d/2)</i>
			<b>y</b> + <i>h</i>
			<b>z</b>) +  <i>(1 - w)(ul</i>
			<b>x</b> + <i>vd</i>
			<b>y</b>)  </eqn>
		<p>    where the parametrisation range is <i>0 &#8804; u &#8804; 1,   0 &#8804; v &#8804; 1</i> , and <i>0 &#8804; w &#8804; 1</i>. </p>
	</ext_description>
	<!-- position  -->
	<ext_description linkend="geometry_schema.pyramid_volume.position">
the location and orientation of the pyramid.
    <b>position</b> defines a placement coordinate system for the pyramid;
   the pyramid has one corner of its base at <b>position.location</b> and
   the edges of the base are aligned with the first two placement axes
   in the positive sense;
</ext_description>
	<!-- xlength  -->
	<ext_description linkend="geometry_schema.pyramid_volume.xlength">
 the length of the base measured along the placement
   X axis (<b>position.p[1]</b>);
</ext_description>
	<!-- ylength -->
	<ext_description linkend="geometry_schema.pyramid_volume.ylength">
 the length of the base of the pyramid along the placement Y axis,  (<b>position.p[2]</b>);
</ext_description>
	<!-- height  -->
	<ext_description linkend="geometry_schema.pyramid_volume.height">
the height of the apex above the plane of the base,
    measured in the direction of the placement Z axis, (<b>position.p[3]</b>).
</ext_description>
	<!-- +++++++++++ tetrahedron_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.tetrahedron_volume">
		<p>A <b>tetrahedron_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/>  with 4 vertices and 4 triangular
faces. It is defined by the four <b>cartesian_point</b>s which locate the vertices. These points
shall not be coplanar.</p>
		<p>      The data is to be interpreted as follows: </p>
		<eqn>
			<b>a</b> = <b>point_1.coordinates</b>
		</eqn>
		<eqn>
			<b>b</b> = <b>point_2.coordinates</b>
		</eqn>
		<eqn>
			<b>c</b>  = <b>point_3.coordinates</b>
		</eqn>
		<eqn>
			<b>d</b>  = <b>point_4.coordinates</b>
		</eqn>
		<p>  and the volume is parametrised as: </p>
		<eqn>
			<i>
				<b>V</b>(u,v,w)</i> = <b>a</b> + <i>u</i>(<b>b</b> - <b>a</b>) + <i>v</i>(<b>c</b> - <b>a</b>) + <i>w</i>(<b>d</b> - <b>a</b>)  </eqn>
		<p>    where the parametrisation range is <i>0 &#8804; u &#8804; 1, 0 &#8804; v &#8804; 1</i> , and <i>0 &#8804; w &#8804; 1</i>, with <i>u + v + w &#8804; 1.</i>
		</p>
	</ext_description>
	<!-- point_1  -->
	<ext_description linkend="geometry_schema.tetrahedron_volume.point_1">
 the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> that locates the first vertex of the <b>tetrahedron_volume</b>;
</ext_description>
	<!-- point_2  -->
	<ext_description linkend="geometry_schema.tetrahedron_volume.point_2">
 the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> that locates the second vertex of the <b>tetrahedron_volume</b>;
</ext_description>
	<!-- point_3  -->
	<ext_description linkend="geometry_schema.tetrahedron_volume.point_3">
 the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> that locates the third vertex of the <b>tetrahedron_volume</b>;
</ext_description>
	<!-- point_4  -->
	<ext_description linkend="geometry_schema.tetrahedron_volume.point_4">
 the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> that locates the fourth vertex of the <b>tetrahedron_volume</b>.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.tetrahedron_volume.wr:WR1">
		<p> The coordinate space dimension of <b>point_1</b> shall be 3. </p>
		<note>
	The rule <express_ref linkend="geometry_schema:ir_express:geometry_schema.compatible_dimension"/>  ensures that all the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>
	attributes of this entity have the same dimension.
</note>
	</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.tetrahedron_volume.wr:WR2">
The points <b>point_1, point_2, point_3</b> and <b>point_4</b> shall not be
coplanar. This is tested by verifying that the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cross_product"/> of the
three directions from <b>point_1</b> to each of the other points is non-zero.
</ext_description>
	<!-- +++++++++++ hexahedron_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.hexahedron_volume">
		<p>A <b>hexahedron_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/>  with 8 vertices and 6
four-sided faces. It is defined by the 8 points which locate the vertices.

The volume is parametrised as </p>
		<eqn>
			<b>V</b>
			<i>(u,v,w) = (1 - u)(1 - v)(1 - w)</i>
			<b>P<sub>1</sub>
			</b> + <i>(1 - u)(v)(1 -w)</i>
			<b>P<sub>2</sub>
			</b> +
          <i>uv(1 - w)</i>
			<b>P<sub>3</sub>
			</b> + <i>u(1 -v)(1 - w)</i>
			<b>P<sub>4</sub>
			</b> + 
          <i>(1 - u)(1 - v)w</i>
			<b>P<sub>5</sub>
			</b> + <i>(1 - u)(v)w</i>
			<b>P<sub>6</sub>
			</b> +
     <i>uvw</i>
			<b>P<sub>7</sub>
			</b> + <i>u(1 -v)w</i>
			<b>P<sub>8</sub>
			</b>
		</eqn>
		<p>    where the parametrisation range is <i>0 &#8804; u &#8804; 1,   0 &#8804; v &#8804; 1</i> , and <i>0 &#8804; w &#8804; 1</i>. 
and <b>P<i>
					<sub>i</sub>
				</i>
			</b>  denotes the position vector of <b>points[i]</b>
		</p>
		<figure id="Geomfig23" number="23">
			<title>Hexahedron_volume and its attributes</title>
			<img src="Geomfig22.gif"/>
		</figure>
	</ext_description>
	<!-- points  -->
	<ext_description linkend="geometry_schema.hexahedron_volume.points">
		<p>the <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s that locate the vertices  of
the <b>hexahedron_volume</b>. These points are ordered such that
<b>points[1], points[2], points[3], points[4]</b> define, in anti-clockwise
order, one planar face of the solid and, in corresponding order. </p>
		<p>
			<b>points[5], points[6], points[7], points[8]</b> define the opposite face. </p>
		<note number="1">
See Figure 23 for further information about the positions of the
vertices.
</note>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.hexahedron_volume.wr:WR1">
	The first 4 <b>points</b> shall be coplanar.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.hexahedron_volume.wr:WR2">
	The final 4 <b>points</b> shall be coplanar.
</ext_description>
	<!-- WR3 -->
	<ext_description linkend="geometry_schema.hexahedron_volume.wr:WR3">
	The points <b>points[1], points[4], points[8], points[5]</b>, shall be coplanar.
</ext_description>
	<!-- WR4 -->
	<ext_description linkend="geometry_schema.hexahedron_volume.wr:WR4">
	The points <b>points[4], points[3], points[7], points[8]</b>, shall be coplanar..
</ext_description>
	<!-- WR5 -->
	<ext_description linkend="geometry_schema.hexahedron_volume.wr:WR5">
	The points <b>points[3], points[2], points[6], points[7]</b>, shall be coplanar.
</ext_description>
	<!-- WR6 -->
	<ext_description linkend="geometry_schema.hexahedron_volume.wr:WR6">
	The points <b>points[1], points[5], points[6], points[2]</b>, shall be coplanar.
</ext_description>
	<!-- WR7 -->
	<ext_description linkend="geometry_schema.hexahedron_volume.wr:WR7">
	The points <b>points[5], points[6], points[7], points[8]</b>, shall all lie on the same
side of the plane of <b>points[1], points[2], points[3]</b>.
</ext_description>
	<!-- WR8 -->
	<ext_description linkend="geometry_schema.hexahedron_volume.wr:WR8">
The points <b>points[3], points[7], points[6], points[2]</b>, shall all lie on the same
side of the plane of <b>points[1], points[4], points[8]</b>.
</ext_description>
	<!-- WR9 -->
	<ext_description linkend="geometry_schema.hexahedron_volume.wr:WR9">
	The points <b>points[4], points[3], points[7], points[8]</b>, shall all lie on the same
side of the plane of <b>points[1], points[2], points[5]</b>.
</ext_description>
	<!-- WR10 -->
	<ext_description linkend="geometry_schema.hexahedron_volume.wr:WR10">
	The points <b>points[1], points[2], points[3], points[4]</b>, shall all lie on the same
side of the plane of <b>points[5], points[6], points[7]</b>.
</ext_description>
	<!-- WR11 -->
	<ext_description linkend="geometry_schema.hexahedron_volume.wr:WR11">
	The points <b>points[1], points[4], points[8], points[5]</b>, shall all lie on the same
side of the plane of <b>points[3], points[7], points[6]</b>.
</ext_description>
	<!-- WR12 -->
	<ext_description linkend="geometry_schema.hexahedron_volume.wr:WR12">
		<p>	The points <b>points[1], points[5], points[6], points[2]</b>, shall all lie on the same
	side of the plane of <b>points[3], points[7], points[8]</b>. </p>
		<note number="2">
	The above 6 rules ensure that the <b>points</b> define a convex figure.
</note>
	</ext_description>
	<!-- WR13 -->
	<ext_description linkend="geometry_schema.hexahedron_volume.wr:WR13">
	The point <b>points[1]</b> shall have coordinate space dimensionality 3.
	</ext_description>
	<!-- +++++++++++ spherical_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.spherical_volume">
		<p>A <b>spherical_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/>  in the form of a
sphere of radius <i>R</i>. A <b>spherical_volume</b> is  defined by the radius and the position of the solid.</p>
		<p>      The data is to be interpreted as follows: </p>
		<eqn>
			<b>C</b> = <b>position.location</b> (centre) </eqn>
		<eqn>
			<b>x</b> = <b>position.p[1]</b>
		</eqn>
		<eqn>
			<b>y</b>  = <b>position.p[2]</b>
		</eqn>
		<eqn>
			<b>z</b>  = <b>position.p[3]</b>
		</eqn>
		<eqn>
			<i> R </i>  =<b>radius</b>
		</eqn>
		<p>  and the volume is parametrised as: </p>
		<eqn>
			<b>V</b>
			<i>(u,v,w)</i> = <b>C</b> + <i>wR</i>cos((&#960;<i>v)/2)</i>((cos<i>(2&#960;u))</i>
			<b>x</b> + (sin<i>(2&#960;u))</i>
			<b>y</b>)
         + <i>wR</i>(sin ((&#960;<i>v)/2))</i>
			<b>z</b>
		</eqn>
      where the parametrisation range is <i>0 &#8804; u &#8804; 1, -1 &#8804; v &#8804; 1</i> , and <i>0 &#8804; w &#8804; 1</i>.
 <p>    where the parametrisation range is <i>0 &#8804; u &#8804; 1,   0 &#8804; v &#8804; 1</i> , and <i>0 &#8804; w &#8804; 1</i>.</p>
	</ext_description>
	<!-- position  -->
	<ext_description linkend="geometry_schema.spherical_volume.position">
  the location and parametric orientation of the volume;
      <b>position.location</b> is the centre of the sphere;
</ext_description>
	<!-- radius  -->
	<ext_description linkend="geometry_schema.spherical_volume.radius">
  the radius of the sphere.
</ext_description>
	<!-- +++++++++++ cylindrical_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.cylindrical_volume">
		<p>A <b>cylindrical_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/>  in the form of a
    circular cylinder. A <b>cylindrical_volume</b> is   defined by its orientation and location, its radius and its height.</p>
		<p>      The data is to be interpreted as follows: </p>
		<eqn>
			<b>C</b> = <b>position.location</b>
		</eqn>
		<eqn>
			<b>x</b> = <b>position.p[1]</b>
		</eqn>
		<eqn>
			<b>y</b>  = <b>position.p[2]</b>
		</eqn>
		<eqn>
			<b>z</b>  = <b>position.p[3]</b>
		</eqn>
		<eqn>
			<i> R </i>  =<b>radius</b>
		</eqn>
		<eqn>
			<i> h </i>  =<b>height</b>
		</eqn>
		<p>  and the volume is parametrised as: </p>
		<eqn>
			<b>V</b>
			<i>(u,v,w)</i> = <b>C</b> + <i>wR</i>((cos <i>(2&#960;u))</i>
			<b>x</b> + (sin<i>(2&#960;u)</i>
			<b>y</b>) +
       <i>vH</i>
			<b>z</b>
		</eqn>
		<p>    where the parametrisation range is  <i>0 &#8804; u &#8804; 1,  0 &#8804; v &#8804; 1 </i>, and <i> 0 &#8804; w &#8804; 1 </i>. </p>
	</ext_description>
	<!-- position  -->
	<ext_description linkend="geometry_schema.cylindrical_volume.position">
 the location and  orientation of the cylinder;
      <b>position.location</b> is a point on the axis of the cylinder, and  <b>position.p{3]</b> is the direction of the axis of the cylinder;
</ext_description>
	<!-- radius  -->
	<ext_description linkend="geometry_schema.cylindrical_volume.radius">
  the radius of the cylinder;
</ext_description>
	<!-- height  -->
	<ext_description linkend="geometry_schema.cylindrical_volume.height">
  the height of the cylinder.
</ext_description>
	<!-- +++++++++++ eccentric_conical_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.eccentric_conical_volume">
		<p>A <b>eccentric_conical_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/>  in the form of
a skew cone. The <b>eccentric_conical_volume</b> may have an elliptic
cross section, and may have a central axis which is
not perpendicular to the base. Depending upon the value of the <b>ratio</b>
attribute it may be truncated, or may take the form of a generalised cylinder.
When truncated the top face of the cone is parallel to the plane of the base
and has a similar cross section.</p>
		<p>      The data is to be interpreted as follows: </p>
		<eqn>
			<b>C</b> = <b>position.location</b>
		</eqn>
		<eqn>
			<b>x</b> = <b>position.p[1]</b>
		</eqn>
		<eqn>
			<b>y</b>  = <b>position.p[2]</b>
		</eqn>
		<eqn>
			<b>z</b>  = <b>position.p[3]</b>
		</eqn>
		<eqn>
			<i> R<sub>1</sub>
			</i>  = <b>semi_axis_1</b>
		</eqn>
		<eqn>
			<i> R<sub>2</sub>
			</i>  = <b>semi_axis_2</b>
		</eqn>
		<eqn>
			<i>H </i>  = <b>height</b>
		</eqn>
		<eqn>
			<i>xo </i>  = <b>x_offset</b>
		</eqn>
		<eqn>
			<i>yo </i>  = <b>y_offset</b>
		</eqn>
		<eqn>
			<i>s</i>  = <b>ratio</b>
		</eqn>
		<p>  and the volume is parametrised as: </p>
		<eqn>
			<b>V</b>
			<i>(u,v,w)</i> = <b>C</b> + <i>v(xo</i>
			<b>x</b> + <i>yo</i>
			<b>y</b>)+ <i>w(1 + v(s - 1))( R<sub>1</sub>((2&#960;u))</i>
			<b>x</b> +
     <i> R<sub>2</sub>
			</i> (sin<i>(2&#960;u)</i>
			<b>y</b>)) +  <i>vH</i>
			<b>z</b>
		</eqn>
		<p>    where the parametrisation range is  <i>0 &#8804; u &#8804; 1,  0 &#8804; v &#8804; 1 </i>, and <i> 0 &#8804; w &#8804; 1 </i>. </p>
		<note number="1"> In the placement coordinate system defined by <b>position</b> the
central point of the top face of the <b>eccentric_conical_volume</b> has coordinates
<i>(x_offset, y_offset, height)</i>. 
</note>
		<note number="2"> If <b>ratio</b> = 0.0 the <b>eccentric_conical_volume</b> includes the apex. 
If <b>ratio</b> = 1.0 the <b>eccentric_conical_volume</b> is in the form of a generalised
cylinder with all cross sections of the same dimensions.
</note>
		<note number="3">
If <b>x_offset</b> = <b>y_offset</b> = 0.0 the eccentric_conical_volume
has the form of a right elliptic cone or, with <i> R<sub>1</sub> = R<sub>2</sub>
			</i>, a right
circular cone.
</note>
	</ext_description>
	<!-- position  -->
	<ext_description linkend="geometry_schema.eccentric_conical_volume.position">
  the location of the central point on the axis and
   the direction of <b>semi_axis_1</b>;  this defines the centre and plane of
   the base of the <b>eccentric_conical_volume</b>. <b>position.p[3]</b> is normal to the
   base of the <b>eccentric_conical_volume</b>;
  </ext_description>
	<!-- semi_axis_1  -->
	<ext_description linkend="geometry_schema.eccentric_conical_volume.semi_axis_1">
  the length of the first radius of the base of the cone in
  the direction of <b>position.p[1]</b>;
</ext_description>
	<!-- semi_axis_2  -->
	<ext_description linkend="geometry_schema.eccentric_conical_volume.semi_axis_2">
 the length of the second radius of the base of the cone in
  the direction of <b>position.p[2]</b>;
</ext_description>
	<!-- height  -->
	<ext_description linkend="geometry_schema.eccentric_conical_volume.height">
  the height of the cone above the base measured in the direction of
<b>position.p[3]</b>;
</ext_description>
 
.
<!-- x_offset  -->
	<ext_description linkend="geometry_schema.eccentric_conical_volume.x_offset">
  the distance, in the direction of <b>position.p[1]</b>, from
the central point of the top face of the cone to the point in the plane of this
face directly above the central point of the base;
</ext_description>
	<!-- y_offset  -->
	<ext_description linkend="geometry_schema.eccentric_conical_volume.y_offset">
 the distance, in the direction of <b>position.p[2]</b>, from
 the central point of the top face of the cone to the point in the plane of this
face directly above the central point of the base;
</ext_description>
	<!-- ratio  -->
	<ext_description linkend="geometry_schema.eccentric_conical_volume.ratio">
 the ratio of a radius of the top face to the corresponding radius
of the base of the cone.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.eccentric_conical_volume.wr:WR1">
	The <b>ratio</b> shall not be negative.
</ext_description>
	<!-- +++++++++++ toroidal_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.toroidal_volume">
		<p>A <b>toroidal_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/>  which could be produced
    by revolving a circular face about a line in its plane. The radius
    of the circle being revolved is referred to here as the <b>minor_radius</b>
    and the <b>major_radius</b> is the distance from the centre of this circle
    to the axis of revolution.
    A <b>toroidal_volume</b> is defined by the major and minor radii and
    the position and orientation of the volume.</p>
		<p>      The data is to be interpreted as follows: </p>
		<eqn>
			<b>C</b> = <b>position.location</b>
		</eqn>
		<eqn>
			<b>x</b> = <b>position.p[1]</b>
		</eqn>
		<eqn>
			<b>y</b>  = <b>position.p[2]</b>
		</eqn>
		<eqn>
			<b>z</b>  = <b>position.p[3]</b>
		</eqn>
		<eqn>
			<i> R</i>  = <b>major_radius</b>
		</eqn>
		<eqn>
			<i> r </i> = <b>minor_radius</b>
		</eqn>
		<p>  and the volume is parametrised as: </p>
		<eqn>
			<b>V</b>
			<i>(u,v,w)</i> = <b>C</b>  + <i>(R + wr</i>cos<i>(2&#960;v))</i>((cos<i>(2&#960;u))</i>
			<b>x</b> +
     (sin<i>(2&#960;u))</i>
			<b>y</b>) + <i>wr</i>(sin(<i>&#960;v))</i>
			<b>z</b>
		</eqn>
		<p>    where the parametrisation range is  <i>0 &#8804; u &#8804; 1,  0 &#8804; v &#8804; 1 </i>, and <i> 0 &#8804; w &#8804; 1 </i>. </p>
	</ext_description>
	<!-- position  -->
	<ext_description linkend="geometry_schema.toroidal_volume.position">
  the location and orientation of the solid,
        <b>position.location</b> is the  central point of the torus;
  </ext_description>
	<!-- major_radius  -->
	<ext_description linkend="geometry_schema.toroidal_volume.major_radius">
  the major radius of the torus;
</ext_description>
	<!-- minor_radius -->
	<ext_description linkend="geometry_schema.toroidal_volume.minor_radius">
  the minor radius of the torus.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.toroidal_volume.wr:WR1">
	The minor radius shall be less than the major radius. This ensures that the parametric coordinates are unique for each point
 inside the volume.
</ext_description>
	<!-- +++++++++++ ellipsoid_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.ellipsoid_volume">
		<p>A <b>ellipsoid_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/>  in the form of a solid ellipsoid. It is
defined by its location and orientation and by the lengths of the three semi-axes.
</p>
		<p>      The data is to be interpreted as follows: </p>
		<eqn>
			<b>C</b> = <b>position.location</b>  (centre)</eqn>
		<eqn>
			<b>x</b> = <b>position.p[1]</b>
		</eqn>
		<eqn>
			<b>y</b>  = <b>position.p[2]</b>
		</eqn>
		<eqn>
			<b>z</b>  = <b>position.p[3]</b>
		</eqn>
		<eqn>
			<i> a</i>  = <b>semi_axis_1</b>
		</eqn>
		<eqn>
			<i> b </i> = <b>semi_axis_2</b>
		</eqn>
		<eqn>
			<i>c </i> = <b>semi_axis_3</b>
		</eqn>
		<p>  and the volume is parametrised as: </p>
		<eqn>
			<b>V</b>
			<i>(u,v,w)</i> = <b>C</b>  + <i>w</i>cos(<i>(&#960;v)/2) (a(</i>cos<i>(&#960;u))</i>
			<b>x</b> + <i>b(</i>sin<i>(2&#960;u))</i>
			<b>y</b>)
        + <i>wc(</i>sin<i> ((&#960;v)/2))</i>
			<b>z</b>
		</eqn>
		<p>    where the parametrisation range is  <i>0 &#8804; u &#8804; 1,  0 &#8804; v &#8804; 1 </i>, and <i> 0 &#8804; w &#8804; 1 </i>. </p>
	</ext_description>
	<!-- position  -->
	<ext_description linkend="geometry_schema.ellipsoid_volume.position">
 the location and orientation of the ellipsoid. <b>position.location</b>
 is a <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> at the centre of the ellipsoid and the axes of the
ellipsoid are aligned with the directions <b>position.p</b>;
  </ext_description>
	<!--  semi_axis_1  -->
	<ext_description linkend="geometry_schema.ellipsoid_volume.semi_axis_1">
 the length of the semi-axis of the ellipsoid in the
<b>direction</b>
		<b>position.p[1]</b>;
</ext_description>
	<!--  semi_axis_2  -->
	<ext_description linkend="geometry_schema.ellipsoid_volume.semi_axis_2">
  the length of the semi-axis of the ellipsoid in the
<b>direction</b>
		<b>position.p[2]</b>;
</ext_description>
	<!--  semi_axis_3  -->
	<ext_description linkend="geometry_schema.ellipsoid_volume.semi_axis_3">
  the length of the semi-axis of the ellipsoid in the
<b>direction</b>
		<b>position.p[3]</b>.
</ext_description>
	<!-- +++++++++++ b_spline_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.b_spline_volume">
		<p>A <b>b_spline_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/>  that is a general form of tri-parametric
    volume field which is represented by control points and basis
    functions. As with the B-spline curve and surface
    entities it has  special subtypes where some of the data can be derived.
</p>
		<p>      The data is to be interpreted as follows: </p>
		<eqn>    K1  = <b>upper_index_on_u_control_values</b>
		</eqn>
		<eqn>   K2  = <b>upper_index_on_v_control_values</b>
		</eqn>
		<eqn>    K2  = <b>upper_index_on_v_control_values</b>
		</eqn>
		<eqn>
			<b>P</b>
			<i>
				<sub>ijk</sub>
			</i>   = <b>control_values</b>
		</eqn>
		<eqn>
			<i> d1</i>  = <b>u_degree</b>
		</eqn>
		<eqn>
			<i> d2 </i> = <b>v_degree</b>
		</eqn>
		<eqn>
			<i> d3 </i> = <b>w_degree</b>
		</eqn>
		<p> The control values are ordered as </p>
		<eqn>
			<b>P</b>
			<sub>000</sub>, <b>P</b>
			<sub>001</sub>, <b>P</b>
			<sub>002</sub>, . . . ,
       <b>P</b>
			<sub>K1K2(K3-1)</sub>, <b>P</b>
			<sub>K1K2K3</sub>
		</eqn>
		<p> For each parameter, <i> s = u</i> or <i>v</i>, or <i>w</i> if <i>k</i> is the
       upper index on the control points and <i>d</i> is the degree for <i>s</i>, the knot
       array is an array of
        <i>(k + d + 2)</i> real numbers <i>[s<sub>-d</sub>, ... ,s<sub>k+1</sub>]</i>,</p>
		<p>such that for all
        indices <i>j</i> in <i>[-d, k], s<sub>j</sub> &#8804; s<sub>j+1</sub>
			</i>.</p>
		<p>This array is obtained from
        the  appropriate <b>knots_data</b> list by repeating each multiple 
        knot according to the multiplicity.</p>
		<p>
			<i>N<sub>i</sub>
				<sup>d</sup>
			</i>, the <i>i</i>th normalised B-spline basis function of
        degree <i>d</i>, is defined on the subset:</p>
		<p>
			<i> [s<sub>i-d</sub>, ... ,s<sub>i+1</sub>]</i> of  this array. </p>
		<p>  Let <i>L</i> denote the number of distinct values amongst
        the  knots in the knot list; <i>L</i> will be referred to as the `upper
        index on knots'. Let <i>m<sub>j</sub>
			</i> denote the multiplicity (i.e., number of
        repetitions) of the <i>j</i>th distinct knot value. Then:</p>
		<p>
			<i> &#931;<sup>L</sup>
				<sub>i=1</sub> m<sub>i</sub> = d + k + 2 </i>
		</p>
		<p>  All knot multiplicities except the first and the last shall be in the
        range <i>1 ....  d</i>; the first and last may have a maximum value of 
        <i>d + 1</i>. </p>
		<note>
        In evaluating the basis functions, a knot <i>u</i> of, for example, multiplicity 
        <i>3</i> is interpreted as a sequence <i> u, u, u,</i> in the knot array.
        </note>
		<p>  The parametric volume is given by the equation:</p>
		<p>
			<img src="BSvol1.gif"/>
		</p>
	</ext_description>
	<!-- u_degree  -->
	<ext_description linkend="geometry_schema.b_spline_volume.u_degree">
 the algebraic degree of basis functions in u;
  </ext_description>
	<!-- v_degree  -->
	<ext_description linkend="geometry_schema.b_spline_volume.v_degree">
 the algebraic degree of basis functions in v;
  </ext_description>
	<!-- w_degree  -->
	<ext_description linkend="geometry_schema.b_spline_volume.w_degree">
  the algebraic degree of basis functions in w;
  </ext_description>
	<!--  control_points_list  -->
	<ext_description linkend="geometry_schema.b_spline_volume.control_points_list">
 a list of lists of lists of control values;
</ext_description>
	<!-- u_upper  -->
	<ext_description linkend="geometry_schema.b_spline_volume.u_upper">
 the upper index on control values in u direction;
  </ext_description>
	<!-- v_upper  -->
	<ext_description linkend="geometry_schema.b_spline_volume.v_upper">
 the upper index on control values in v direction;
  </ext_description>
	<!-- w_upper  -->
	<ext_description linkend="geometry_schema.b_spline_volume.w_upper">
 the upper index on control values in w direction;
  </ext_description>
	<!-- control_points  -->
	<ext_description linkend="geometry_schema.b_spline_volume.control_points">
 the array (three-dimensional) of control values defining field geometry.
       This array is constructed from the control values list.
  </ext_description>
	<!-- WR1  -->
	<ext_description linkend="geometry_schema.b_spline_volume.wr:WR1">
 Any instantiation of this entity shall include one of the subtypes
<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_volume_with_knots"/>, or <express_ref linkend="geometry_schema:ir_express:geometry_schema.bezier_volume"/>, or <express_ref linkend="geometry_schema:ir_express:geometry_schema.uniform_volume"/>, or <express_ref linkend="geometry_schema:ir_express:geometry_schema.quasi_uniform_volume"/>.
  </ext_description>
	<!-- +++++++++++ b_spline_volume_with_knots +++++++++++ -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots">
		<p>A <b>b_spline_volume_with_knots</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_volume"/>  in which the knot values are explicitly given. This
subtype shall be used to represent non-uniform B-spline volumes, and may also
be used for other knot types.</p>
		<p>    All knot multiplicities except the first and the last shall be in the
      range <i>1 ....  degree</i>; the first and last may have a maximum value of
      <i>degree + 1</i>. </p>
		<note>
      In evaluating the basis functions, a knot <i>u</i> of, for example, multiplicity
      <i>3</i> is interpreted as a sequence  <i>u, u, u,</i> in the knot array.
 </note>
	</ext_description>
	<!-- u_multiplicities  -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.u_multiplicities">
 the multiplicities of the knots in the u parameter direction;
  </ext_description>
	<!-- v_multiplicities  -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.v_multiplicities">
 the multiplicities of the knots in the v parameter direction;
  </ext_description>
	<!-- w_multiplicities  -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.w_multiplicities">
  the multiplicities of the knots in the w parameter direction;
   </ext_description>
	<!--  u_knots  -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.u_knots">
the list of the distinct knots in the u parameter direction;
</ext_description>
	<!--  v_knots  -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.v_knots">
the list of the distinct knots in the v parameter direction;
</ext_description>
	<!--  w_knots  -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.w_knots">
the list of the distinct knots in the w parameter direction;
</ext_description>
	<!-- knot_u_upper  -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.knot_u_upper">
the number of distinct knots in the u parameter direction;
  </ext_description>
	<!-- knot_v_upper  -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.knot_v_upper">
the number of distinct knots in the v parameter direction;
  </ext_description>
	<!-- knot_w_upper  -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.knot_w_upper">
the number of distinct knots in the w parameter direction.
  </ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.wr:WR1">
	The function <express_ref linkend="geometry_schema:ir_express:geometry_schema.constraints_param_b_spline"/> returns TRUE when the parameter
     constraints are verified for the <b>u-</b>direction.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.wr:WR2">
	The function <express_ref linkend="geometry_schema:ir_express:geometry_schema.constraints_param_b_spline"/> returns TRUE when the parameter
     constraints are verified for the <b>v-</b>direction.
</ext_description>
	<!-- WR3 -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.wr:WR3">
	The function <express_ref linkend="geometry_schema:ir_express:geometry_schema.constraints_param_b_spline"/> returns TRUE when the parameter
     constraints are verified for the <b>w-</b>direction.
</ext_description>
	<!-- WR4 -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.wr:WR4">
	The number of  <b>u_multiplicities</b> shall be the same as
     the number of <b>u_knots</b>.
</ext_description>
	<!-- WR5 -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.wr:WR5">
	The number of  <b>v_multiplicities</b> shall be the same as
     the number of <b>v_knots</b>.
</ext_description>
	<!-- WR6 -->
	<ext_description linkend="geometry_schema.b_spline_volume_with_knots.wr:WR6">
	The number of  <b>w_multiplicities</b> shall be the same as
     the number of <b>w_knots</b>.
</ext_description>
	<!-- +++++++++++ bezier_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.bezier_volume">
		<p>A <b>bezier_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_volume"/>  in which the knots are evenly spaced and
    have high multiplicities. Suitable default values for the knots and knot
    multiplicities are derived in this case. In this subtype the knot 
    spacing is 1.0, starting from 0.0 </p>
		<note>
			<p> If explicit knot values for the volume are required, they can be
 derived as follows:</p>
			<p>
				<b> ku_up := (SELF\backslash b_spline_volume.u_upper)/(SELF\backslash b_spline_volume.u_degree</b> + 1) </p>
			<p>
				<b> kv_up := (SELF\backslash b_spline_volume.v_upper)/(SELF\backslash b_spline_volume.v_degree</b> + 1) </p>
			<p>
				<b> kw_up := (SELF\backslash b_spline_volume.w_upper)/(SELF\backslash b_spline_volume.w_degree</b> + 1) </p>
			<p>
				<b>ku_up</b> is the value required for the upper index on the knot and
      knot multiplicity lists in the u direction. This is computed from the 
      degree and the number of control values in this direction. </p>
			<p> Similar computations are used to determine <b>kv_up, kw_up</b>. </p>
			<p> The knot multiplicities and knots in the <i>u, v</i> and <i>w</i> parameter directions are
 then given by the function calls:</p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_volume.u_degree, ku_up, bezier_knots) </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_volume.u_degree,ku_up, bezier_knots) </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_volume.v_degree, kv_up, bezier_knots) </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_volume.v_degree,kv_up, bezier_knots)  </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_volume.w_degree, kw_up, bezier_knots) </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_volume.w_degree,kw_up, bezier_knots) </p>
		</note>
	</ext_description>
	<!-- +++++++++++ uniform_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.uniform_volume">
		<p>A <b>uniform_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_volume"/> in which the knots
    are evenly spaced. Suitable default values for the knots and knot
    multiplicities can be derived in this case. </p>
		<p>  A B-spline is {<i>uniform</i> if and only if all knots are of
    multiplicity 1 and they differ by a positive constant from the preceding
    knot. In this subtype the knot spacing is 1.0, starting from <i>-degree</i>.</p>
		<note>
			<p> If explicit knot values for the volume are required, they can be
 derived as follows:</p>
			<p>
				<b> ku_up := SELF\backslash b_spline_volume.u_upper + SELF\backslash b_spline_volume.u_degree</b> + 2 </p>
			<p>
				<b> kv_up := SELF\backslash b_spline_volume.u_upper + SELF\backslash b_spline_volume.v_degree</b> + 2  </p>
			<p>
				<b> kw_up := SELF\backslash b_spline_volume.u_upper + SELF\backslash b_spline_volume.w_degree</b> + 2  </p>
			<p>
				<b>ku_up</b> is the value required for the upper index on the knot and
       knot multiplicity lists in the u direction. This is computed from the 
       degree and the number of control values in this direction. </p>
			<p> Similar computations are used to determine <b>kv_up, kw_up</b>. </p>
			<p> The knot multiplicities and knots in the <i>u, v</i> and <i>w</i> parameter directions are
  then given by the function calls:</p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_volume.u_degree, ku_up, uniform_knots) </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_volume.u_degree,ku_up, uniform_knots)</p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_volume.v_degree, kv_up, uniform_knots) </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_volume.v_degree,kv_up, uniform_knots)  </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_volume.w_degree, kw_up, uniform_knots) </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_volume.w_degree,kw_up, uniform_knots) </p>
		</note>
	</ext_description>
	<!-- +++++++++++ quasi_uniform_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.quasi_uniform_volume">
		<p>A <b>quasi_uniform_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_volume"/> in which the knots
    are evenly spaced, and except for the first and last, have multiplicity 1.
    Suitable default values for the knots and knot multiplicities are derived
    in this case.</p>
		<p>  A B-spline is <i>quasi-uniform</i> if and only if the knots are of
     multiplicity (degree+1) at the ends, of multiplicity 1 elsewhere, and
    they differ by a positive constant from the preceding knot. In this 
    subtype the knot spacing is 1.0, starting from 0.0.</p>
		<note>
			<p> If explicit knot values for the volume are required, they can be
 derived as follows:</p>
			<p>
				<b> ku_up := SELF\backslash b_spline_volume.u_upper - SELF\backslash b_spline_volume.u_degree</b> + 2 </p>
			<p>
				<b> kv_up := SELF\backslash b_spline_volume.u_upper - SELF\backslash b_spline_volume.v_degree</b> + 2  </p>
			<p>
				<b> kw_up := SELF\backslash b_spline_volume.u_upper - SELF\backslash b_spline_volume.w_degree</b> + 2  </p>
			<p>
				<b>ku_up</b> is the value required for the upper index on the knot and
        knot multiplicity lists in the u direction. This is computed from the 
        degree and the number of control values in this direction. </p>
			<p> Similar computations are used to determine <b>kv_up, kw_up</b>. </p>
			<p> The knot multiplicities and knots in the <i>u, v</i> and <i>w</i> parameter directions are
   then given by the function calls:</p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_volume.u_degree, ku_up, quasi_uniform_knots) </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_volume.u_degree,ku_up, quasi_uniform_knots) </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_volume.v_degree, kv_up, quasi_uniform_knots) </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_volume.v_degree,kv_up, quasi_uniform_knots)  </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knot_mult"/>(SELF\b_spline_volume.w_degree, kw_up, quasi_uniform_knots) </p>
			<p>
				<express_ref linkend="geometry_schema:ir_express:geometry_schema.default_b_spline_knots"/>(SELF\b_spline_volume.w_degree,kw_up, quasi_uniform_knots) </p>
		</note>
	</ext_description>
	<!-- +++++++++++ rational_b_spline_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.rational_b_spline_volume">
		<p>A <b>rational_b_spline_volume</b> is a type of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_volume"/> that is a piecewise parametric rational
 volume described in terms of control points, associated weight values and
 basis functions. It is instantiated with any of the other subtypes of <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_volume"/>,
which provide explicit or implicit knot values from which the basis functions
are defined.</p>
		<p>  The volume is to be interpreted as follows:</p>
		<p>
			<img src="BSvol2.gif"/>
		</p>
		<note> See <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_volume"/> for details of the symbology
used in the above equation.
</note>
	</ext_description>
	<!-- weights_data  -->
	<ext_description linkend="geometry_schema.rational_b_spline_volume.weights_data">
the weights associated with the control points in
       the rational  case;  
       </ext_description>
	<!-- weights  -->
	<ext_description linkend="geometry_schema.rational_b_spline_volume.weights">
the array (three-dimensional) of weight values constructed 
       from the <b>weights_data</b>.
  </ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.rational_b_spline_volume.wr:WR1">
	The array dimensions for the weights shall be
     consistent with the control points data.
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.rational_b_spline_volume.wr:WR2">
	The weight value associated with each control point shall be greater
 than zero.
</ext_description>
	<!-- +++++++++++ locally_refined_spline_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume">
		<p>A <b>locally_refined_spline_volume</b> is a type of <express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/> that is a piecewise parametric polynomial or rational volume described in terms of control points and local B-spline functions. If the set of B-spline functions are linearly independent, they will form a basis. With appropriate attribute values, the volume is capable of representing single span or spline volumes of explicit polynomial, rational, B&#233;zier or B-spline type. However, the <b>locally_ refined_spline_volume</b> entity is intended for spline volumes that do not have a tensor product structure. The degree of the volume can vary as the B-splines from which it is defined, need not to have the same polynomial degree. </p>
		<note number="1"> A locally refined spline volume is rational if and only if the weights are not all identical; this can be represented by the <express_ref linkend="geometry_schema:ir_express:geometry_schema.rational_locally_refined_spline_volume"/> subtype. If it is polynomial, the weights may be defaulted to all being 1.
</note>
The entity <b>locally_refined_spline_volume</b> can, with proper pre and post processing, be used to represent volumes of the types: 
<ul>
			<li>analysis suitable T-spline,</li>
			<li> standard T-spline,</li>
			<li>semi-standard T-spline,</li>
			<li> hierarchical B-spline </li>
			<li> LR B-spline.</li>
		</ul>

Interpretation of the data is as follows:
	The volume, in the polynomial case, is given by:
<p>
			<img src="LRvol.gif"/>
		</p>
	In the rational case all weights shall be positive and the volume is given by:

<p>
			<img src="RationalLRvol.gif"/>
		</p>


where
<eqn>
			<b>K</b> = number of control points, </eqn>
		<eqn>
			<b>P</b>
			<sub>
				<i>i</i>
			</sub> = control points(<i>i</i>),</eqn>
		<eqn>
			<i>s<sub>i</sub>
			</i>= scaling_factors(<i>i</i>),</eqn>
		<eqn>
			<i>h<sub>i</sub>
			</i> = weights_data(<i>i</i>),</eqn>
		<eqn>N<sub>
				<i>i</i>
			</sub>
			<sup>d1</sup>(<i>u</i>) = u_bspline(<i>i</i>), and</eqn>
		<eqn>d1=u_degree. </eqn>
		<eqn>N<sub>
				<i>i</i>
			</sub>
			<sup>d2</sup>(<i>v</i>) = v_bspline(<i>i</i>), and</eqn>
		<eqn>d2=v_degree. </eqn>
		<eqn>N<sub>
				<i>i</i>
			</sub>
			<sup>d3</sup>(<i>w</i>) = v_bspline(<i>i</i>), and</eqn>
		<eqn>d3=v_degree. </eqn>
		<note number="2">  The degrees are associated with the <express_ref linkend="geometry_schema:ir_express:geometry_schema.local_b_spline"/>s  and do not need to be constant  throughout the volume.</note> 

The weights, in the case of the rational subtype, are given in the same sequence as the coefficients.

The knot values and multiplicities are defined in the entity <express_ref linkend="geometry_schema:ir_express:geometry_schema.local_b_spline"/>. The B-splines are defined over a domain described by knot vectors in the parameter directions of the volume. However, in contrast to B-bspline volumes, the basis functions or B-splines do not need to adapt to all knot lines in their supports. This facilitates the definition of a spline volume on a box partition.

<note number="3"> When the polynomial degree is the same for all B-splines and no knot lines exist that do not cross the entire parameter domain, the locally_refined_spline_volume will coincide with <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_volume_with_knots"/>. In that case <express_ref linkend="geometry_schema:ir_express:geometry_schema.b_spline_volume_with_knots"/> has the simplest and most compact representation.
</note>
		<note number="4"> A <b>locally_refined_spline_volume</b> can be of type analysis suitable T-spline, hierarchical B-spline, LR-spline, semi standard T-spline or standard T-spline. The type is given by the enumeration locally_refined_spline_type_enum, and the packing and unpacking of the volume will depend on this type.
</note>
	</ext_description>
	<!-- u_b_splines -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.u_b_splines">
the <express_ref linkend="geometry_schema:ir_express:geometry_schema.local_b_spline"/> functions in the first (<i>u</i>) parameter direction from which the volume is defined.  These functions refer to the <b>u_knots</b> list for their knot parameter values. </ext_description>
	<!-- v_b_splines -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.v_b_splines">
the <express_ref linkend="geometry_schema:ir_express:geometry_schema.local_b_spline"/> functions in the second (<i>v</i>) parameter direction from which the volume is defined.  These functions refer to the <b>v_knots</b> list for their knot parameter values. </ext_description>
	<!-- w_b_splines -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.w_b_splines"><p>
the <express_ref linkend="geometry_schema:ir_express:geometry_schema.local_b_spline"/> functions in the thirdd (<i>w</i>) parameter direction from which the volume is defined.  These functions refer to the <b>w_knots</b> list for their knot parameter values.</p> <note number="5">There may be some repetitions in the 3 lists of local_b_splines. </note>
	</ext_description>
	<!-- u_knots -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.u_knots">
the list of knot values for parameter <i>u</i>;
</ext_description>
	<!-- v_knots -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.v_knots">
the list of knot values for parameter <i>v</i>;
</ext_description>
	<!-- w_knots -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.w_knots">
the list of knot values for parameter <i>w</i>;
</ext_description>
	<!-- control_points_list -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.control_points_list">
the list of control points. The <b>control_points_list</b> and consequently also the <b>u_b_splines</b>, the <b>v_b_splines</b>, the <b>w_b_splines</b> and <b>scaling_factors</b>, are ordered according to the knot values of the the combined B-spline coefficient constructed by multiplying corresponding univariate B-splines, starting from the lowest knot value for each parameter.  The knots in the w-parameter are the major sorting factor  followed by knots in the v direction and finally the u direction. In case of ambiguities, the lists are sorted according to the maximum knot values of the combined B-splines and the multiplicities of the first knots of the univariate B-splines.
</ext_description>
	<!-- scaling_factors -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.scaling_factors">
the list of scaling factors, these factors are used to ensure that the non-zero B-splines at all points in the domain add up to unity (partition of unity). LR B-splines, hierarchical B-splines and some variants of T-splines ensure partition of unity by scaling. Other variants of T-splines use rational scaling.
</ext_description>
	<!-- linearly_independent -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.linearly_independent">
		<p>indicates whether this property has been tested for and in that case the result of the test; this is for information only;</p>
		<note number="6"> The test is applied to the set of products of  <express_ref linkend="geometry_schema:ir_express:geometry_schema.local_b_spline"/>s used as coefficients of the control points . Not all types of locally refined volumes are linearly independent by default. </note>
	</ext_description>
	<!-- locally_refined_spline_type -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.locally_refined_spline_type">
the type of the initial locally refined spline volume that provides rules for how the stored volume can be unpacked to its original format;
</ext_description>
	<!-- domain -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.domain">
the parameter domain corresponding to the volume. domain(1),(1) and domain (1),(2) give the minimum and maximum parameter values in the <i>u</i> direction;  domain(2),(1) and domain (2),(2) give the minimum and maximum parameter values in the <i>v</i>  direction;  domain(3),(1) and domain (3),(2) give the minimum and maximum parameter values in the <i>w</i>  direction. If all B-splines at the boundary have a knot multiplicity equal to the degree+1 at this boundary, the domain will coincide with the domain given by the minimum and maximum values in <b>u_knots</b> , <b>v_knots</b> and <b>w_knots</b>. Otherwise, it will be coincide with a domain given by nearby knots depending on knot multiplicities. 
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.wr:WR1">
	the number of <b>u_b_splines</b> shall be equal to the number of control points;
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.wr:WR2">
	the number of <b>v_b_splines</b> shall be equal to the number of control points
</ext_description>
	<!-- WR3 -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.wr:WR3">
	the number of <b>w_b_splines</b> shall be equal to the number of control points;
</ext_description>
	<!-- WR4 -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.wr:WR4">
	the number of <b>scaling_factors</b> shall be equal to the number of control points;
</ext_description>
	<!-- WR5 -->
	<ext_description linkend="geometry_schema.locally_refined_spline_volume.wr:WR5">
	all <b>scaling_factors</b> shall be positive and not greater than 1.0.
</ext_description>
	<!-- +++++++++++ rational_locally_refined_spline_volume +++++++++++ -->
	<ext_description linkend="geometry_schema.rational_locally_refined_spline_volume">
		<p>A <b>rational_locally_refined_spline_volume</b> is a type of <express_ref linkend="geometry_schema:ir_express:geometry_schema.locally_refined_spline_volume"/> that  is a piecewise parametric rational volume described in terms of control points and local B-spline functions. </p>
	</ext_description>
	<!-- weights_data -->
	<ext_description linkend="geometry_schema.rational_locally_refined_spline_volume.weights_data">
the supplied values of the weights.
</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.rational_locally_refined_spline_volume.wr:WR1">
	the size of the  of <b>weights_data</b> list shall be equal to the number of control points
</ext_description>
	<!-- WR2 -->
	<ext_description linkend="geometry_schema.rational_locally_refined_spline_volume.wr:WR2">
	all values in the  <b>weights_data</b> list shall be positive.
</ext_description>
	<!-- Rule -->
	<!-- +++++++++++ compatible_dimension +++++++++++ -->
	<ext_description linkend="geometry_schema.compatible_dimension">
		<p> All <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>s are geometrically founded
	  in one or more  <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/> coordinate spaces, this is checked by WR1 of <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>.</p>
		<p> The rule <b>compatible_dimension</b> ensures that: </p>
		<p>  When <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>s are geometrically founded together in a coordinate space, they have the same coordinate space <express_ref linkend="geometry_schema:ir_express:geometry_schema.dimension_count"/> by ensuring that
	  each matches the <express_ref linkend="geometry_schema:ir_express:geometry_schema.dimension_count"/> of the coordinate space in which it is geometrically founded.</p>
		<note number="1"> Two-dimensional <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>s that are
	geometrically founded in a <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/> are
	only geometrically founded in context with a   <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context.coordinate_space_dimension"/> of 2. 
	    All <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>s founded in such a context are two-dimensional.
    All other values of <express_ref linkend="geometry_schema:ir_express:geometry_schema.dimension_count"/>  behave  similarly. </note>
	</ext_description>
	<!-- WR1 -->
	<ext_description linkend="geometry_schema.compatible_dimension.wr:WR1">
		<p>	There shall be no <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> that has a number of
	coordinates that differs from the <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context.coordinate_space_dimension"/> of
	the <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>s in which it is geometrically founded; there shall be no <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> that has a number of
	<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction.direction_ratios"/> that differs from the <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context.coordinate_space_dimension"/>
	of the <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>s in which it is geometrically founded. These properties are verifieded by the function <express_ref linkend="geometry_schema:ir_express:geometry_schema.check_geometric_dimension"/>
		</p>
		<note number="2">
			<p>A check of only <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s and <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s is
sufficient for all <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>s because: </p>
			<p> All <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>s appear in trees of <express_ref linkend="representation_schema:ir_express:representation_schema.representation_item"/>s
descending from the <express_ref linkend="representation_schema:ir_express:representation_schema.representation.items"/> attribute of entity <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/>.
See WR1 of entity <express_ref linkend="representation_schema:ir_express:representation_schema.representation_item"/> in ISO 10303-43. </p>
			<p> Each <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> gains its position and
orientation information only by being, or referring to, a <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>
or <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> entity in such a tree. In many cases this reference is made via
an <express_ref linkend="geometry_schema:ir_express:geometry_schema.placement"/>. </p>
			<p> No other use of any <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>  is allowed that
would associate it with a coordinate space or otherwise assign a <express_ref linkend="geometry_schema:ir_express:geometry_schema.dimension_count"/>
			</p>
		</note>
	</ext_description>
	<!-- Functions -->
	<!-- +++++++++++ dimension_of +++++++++++ -->
	<ext_description linkend="geometry_schema.dimension_of">
	The <b>dimension_of</b> function returns the dimensionality of the input
<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>. If the item is a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>, <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>, or <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/>, the dimensionality
is obtained directly by counting components.

For all other other subtypes the  dimensionality is the integer
 <express_ref linkend="geometry_schema:ir_express:geometry_schema.dimension_count"/> of a <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>
in which the input <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> is geometrically
founded.

By virtue of the constraints in global rule <express_ref linkend="geometry_schema:ir_express:geometry_schema.compatible_dimension"/>, this
value is the <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item.dim"/> of the input
<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/>. 

</ext_description>
	<!-- item -->
	<ext_description linkend="geometry_schema.dimension_of.item">
	 (input) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> for which the <express_ref linkend="geometry_schema:ir_express:geometry_schema.dimension_count"/> is determined.
</ext_description>
	<!-- +++++++++++ acyclic_curve_replica +++++++++++ -->
	<ext_description linkend="geometry_schema.acyclic_curve_replica">
	The <b>acyclic_curve_replica</b> boolean function is a
recursive  function which determines whether, or not, a given
<express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_replica"/> participates in its own definition. The function
returns FALSE if the <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_replica"/> refers to itself, directly or
indirectly, in its own definition.

</ext_description>
	<!-- rep -->
	<ext_description linkend="geometry_schema.acyclic_curve_replica.rep">
	 (input) The <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_replica"/> which is to be tested for a cyclic reference.
</ext_description>
	<!-- parent -->
	<ext_description linkend="geometry_schema.acyclic_curve_replica.parent">
	a <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/> used in the definition of the replica.
</ext_description>
	<!-- +++++++++++ acyclic_point_replica +++++++++++ -->
	<ext_description linkend="geometry_schema.acyclic_point_replica">
	The <b>acyclic_point_replica</b> boolean function is a
recursive  function which determines whether, or not, a given
<express_ref linkend="geometry_schema:ir_express:geometry_schema.point_replica"/> participates in its own definition. The function
returns FALSE if the <express_ref linkend="geometry_schema:ir_express:geometry_schema.point_replica"/> refers to itself, directly or
indirectly, in its own definition.
</ext_description>
	<!-- rep -->
	<ext_description linkend="geometry_schema.acyclic_point_replica.rep">
	(input) the <express_ref linkend="geometry_schema:ir_express:geometry_schema.point_replica"/> which is to be tested for acyclic reference;
</ext_description>
	<!-- parent -->
	<ext_description linkend="geometry_schema.acyclic_point_replica.parent">
	(input) the <express_ref linkend="geometry_schema:ir_express:geometry_schema.point"/> used to define the replica.
</ext_description>
	<!-- +++++++++++ acyclic_surface_replica +++++++++++ -->
	<ext_description linkend="geometry_schema.acyclic_surface_replica">
	The <b>acyclic_surface_replica</b> boolean function is a
recursive  function which determines whether, or not, a given
<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_replica"/> participates in its own definition. The function
returns FALSE if the <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_replica"/> refers to itself, directly or
indirectly, in its own definition.
</ext_description>
	<!-- rep -->
	<ext_description linkend="geometry_schema.acyclic_surface_replica.rep">
	(input) The <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_replica"/> which is to be tested for acyclic reference.
</ext_description>
	<!-- parent -->
	<ext_description linkend="geometry_schema.acyclic_surface_replica.parent">
	(input) A <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/> used in the definition of the replica.
</ext_description>
	<!-- +++++++++++ associated_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.associated_surface">
	The <b>associated_surface</b> function determines the unique surface which is associated with the
   <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve_or_surface"/> type. It is required by the propositions which
   apply to surface curve and its subtypes.
</ext_description>
	<!-- arg -->
	<ext_description linkend="geometry_schema.associated_surface.arg">
	(input) The <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve_or_surface"/> for which the determination of
the associated parent surface is required.
</ext_description>
	<!--surf -->
	<ext_description linkend="geometry_schema.associated_surface.surf">
	(output) The parent surface associated with <b>arg</b>.
</ext_description>
	<!-- +++++++++++ base_axis +++++++++++ -->
	<ext_description linkend="geometry_schema.base_axis">
		<p>	The <b>base_axis</b> function returns  normalised orthogonal directions,
    <b>u[1], u[2]</b> and, if appropriate, <b>u[3]</b>. </p>
		<p>    In the three-dimensional case, with complete input data, <b>u[3]</b> is in the
    direction of <b>axis3, u[1]</b> is in the direction of the projection of
    <b>axis1</b> onto the plane normal to <b>u[3]</b>, and
    <b>u[2]</b> is orthogonal to both <b>u[1]</b> and
    <b>u[3]</b>, taking the same sense as <b>axis2</b>. </p>
		<p>   In the two-dimensional case <b>u[1]</b> is in the direction of <b>axis1</b>
    and <b>u[2]</b> is perpendicular to this, taking its sense from <b>axis2</b>. </p>
		<p>    For incomplete input data appropriate default values are derived. </p>
		<note>
This function does not provide geometric founding for the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s returned, the caller of the the function is responsible for
ensuring that they are used in a <b>representation</b> with a
<b>geometric_representation_context</b>.
</note>
	</ext_description>
	<!-- dim -->
	<ext_description linkend="geometry_schema.base_axis.dim">
	(input) The integer value of the dimensionality of the space in which the normalised orthogonal directions are required. 
</ext_description>
	<!-- axis1 -->
	<ext_description linkend="geometry_schema.base_axis.axis1">
	(input) A direction used as a first approximation to the direction of output axis <b>u[1]</b>.
</ext_description>
	<!-- axis2 -->
	<ext_description linkend="geometry_schema.base_axis.axis2">
	(input) A direction used to determine the sense of <b>u[2]</b>.
</ext_description>
	<!-- axis3 -->
	<ext_description linkend="geometry_schema.base_axis.axis3">
	(input) The direction of <b>u[3]</b> in the case <b>dim</b> = 3,
or indeterminate in the case <b>dim</b> = 2.
</ext_description>
	<!-- u -->
	<ext_description linkend="geometry_schema.base_axis.u">
	(output) A list of <b>dim</b> (i.e., 2 or 3) mutually perpendicular directions.
</ext_description>
	<!-- +++++++++++ build_2axes +++++++++++ -->
	<ext_description linkend="geometry_schema.build_2axes">
		<p>	The <b>build_2axes</b> function returns two normalised orthogonal directions.
     <b>u[1]</b> is in the direction of </p>
		<p>
			<b>ref_direction</b> and <b>u[2]</b> is perpendicular
    to <b>u[1]</b>. </p>
		<p>  A default value of (1.0, 0.0) is supplied for <b>ref_direction</b> if the input
   data is incomplete. </p>
		<note>
This function does not provide geometric founding for the
<b>direction</b>s returned, the caller of the the function is responsible for
ensuring that they are used in a  <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> with a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>.
</note>
	</ext_description>
	<!-- ref_direction -->
	<ext_description linkend="geometry_schema.build_2axes.ref_direction">
	(input) A reference <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> in 2 dimensional space, this may be defaulted to (1.0, 0.0).
</ext_description>
	<!-- u -->
	<ext_description linkend="geometry_schema.build_2axes.u">
	(output) A list of 2 mutually perpendicular <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s, <b>u[1]</b> is parallel to <b>ref_direction</b>.
</ext_description>
	<!-- +++++++++++ build_axes +++++++++++ -->
	<ext_description linkend="geometry_schema.build_axes">
		<p>	The <b>build_axes</b> function returns three normalised orthogonal <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s.
     <b>u[3]</b> is in the direction of <b>axis</b>, <b>u[1]</b> is in
     the direction of the projection of <b>ref_direction</b> onto the plane
     normal to <b>u[3]</b>, and <b>u[2]</b> is the cross product of <b>u[3]</b>
     and <b>u[1]</b>.
    Default values are supplied if input data is incomplete. </p>
		<note>
This function does not provide geometric founding for the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s returned, the caller of the the function is responsible for
ensuring that they are used in a <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> with a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>.
</note>
	</ext_description>
	<!-- axis -->
	<ext_description linkend="geometry_schema.build_axes.axis">
	(input) The intended <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> of <b>u[3]</b>, this may be
defaulted to (0.0, 0.0, 1.0).
</ext_description>param

<!-- ref_direction -->
	<ext_description linkend="geometry_schema.build_axes.ref_direction">
	(input) A <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> in a direction used to compute <b>u[1]</b>.
</ext_description>
	<!-- u -->
	<ext_description linkend="geometry_schema.build_axes.u">
(output) A list of 3 mutually orthogonal <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s in 3D space.
defaulted to (0.0, 0.0, 1.0).
</ext_description>
	<!-- +++++++++++ check_geometric_dimension  +++++++++++ -->
	<ext_description linkend="geometry_schema.check_geometric_dimension">
		<p>	The <b>check_geometric_dimension </b> function checks that whenever a  <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>.is used in a 

<express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> the number of coordinates is equal to the dimensionality of the corresponding <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>. The function also checkes that whenever a  <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>.is used in a 
<express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> the number of direction ratios is equal to the
dimensionality of the corresponding <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>. </p>
		<p> The function first determines whether there are mixed dimensions in the contexts, if not a simple check of the numbers of coordinates or direction ratios is sufficient. In other cases each point or direction is checked against the dimensionalites of all the contexts in which it is used. The value FALE is returned if any mis-match of dimensions is detected.
</p>
	</ext_description>
	<!-- capt -->
	<ext_description linkend="geometry_schema.check_geometric_dimension.capt">
	(input) A set of <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s to be checked against context dimensionalities.
</ext_description>
	<!-- dir -->
	<ext_description linkend="geometry_schema.check_geometric_dimension.dir">
	(input) A set of <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s to be checked against context dimensionalities.
</ext_description>
	<!-- grc -->
	<ext_description linkend="geometry_schema.check_geometric_dimension.grc">
	(input) The set of <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>s in which the points or directions might be used.
</ext_description>
	<!-- +++++++++++ geometric_dimensionalities_in_contexts  +++++++++++ -->
	<ext_description linkend="geometry_schema.geometric_dimensionalities_in_contexts">
		<p>	The <b>geometric_dimensionalities_in_contexts</b> function checks the different values of dimensionality which are found in a set of   <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>s. If all contexts have the same <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context.coordinate_space_dimension"/>
 then the integer value 1, 2, or 3 is returned depending upon the shared value for  <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context.coordinate_space_dimension"/>.  If mixed values are found the ineger 0 is returned.
</p>
	</ext_description>
	<!-- grcs -->
	<ext_description linkend="geometry_schema.geometric_dimensionalities_in_contexts.grcs">
	(input) The set of <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>s to be checked for mixed dimensionality.
</ext_description>
	<!-- +++++++++++ orthogonal_complement +++++++++++ -->
	<ext_description linkend="geometry_schema.orthogonal_complement">
	The <b>orthogonal_complement</b> function returns a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> which is the orthogonal complement of
     the input <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>.  The input <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> shall be a two-dimensional
     <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> and the result is two dimensional and perpendicular to the input <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>.
<note>
This function does not provide geometric founding for the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> returned, the caller of the the function is responsible for
ensuring that it is used in a <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> with a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>.
</note>
	</ext_description>
	<!-- vec -->
	<ext_description linkend="geometry_schema.orthogonal_complement.vec">
	(input) A <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> in 2D space.
</ext_description>
	<!-- result -->
	<ext_description linkend="geometry_schema.orthogonal_complement.result">
	(output) A  <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> orthogonal to <b>vec</b>.
</ext_description>
	<!-- +++++++++++ first_proj_axis +++++++++++ -->
	<ext_description linkend="geometry_schema.first_proj_axis">
	The <b>first_proj_axis</b> function produces a 3-dimensional <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> which is, with fully
    defined input, the projection of <b>arg</b> onto the plane normal to 
    the <b>z_axis</b>.
With <b>arg</b> defaulted the result is the projection of [1,0,0] onto this
plane; except that, if <b>z_axis</b> = [1,0,0], or, <b>z_axis</b> = [-1,0,0],
[0,1,0] is the default for <b>arg</b>.  A violation occurs if <b>arg</b> is in
the same direction as the input <b>z_axis</b>.
<note>
This function does not provide geometric founding for the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> returned, the caller of the the function is responsible for
ensuring that it is used in a <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> with a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>.
</note>
	</ext_description>
	<!-- z_axis -->
	<ext_description linkend="geometry_schema.first_proj_axis.z_axis">
	(input) A <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> defining a local Z coordinate axis.
</ext_description>
	<!-- arg -->
	<ext_description linkend="geometry_schema.first_proj_axis.arg">
	(input) A <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> not parallel to <b>z_axis</b>..
</ext_description>
	<!-- x_axis -->
	<ext_description linkend="geometry_schema.first_proj_axis.arg">
	(output) A <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> which is in the direction of the
	projection of <b>arg</b> onto the plane with normal <b>z_axis</b>.
</ext_description>
	<!-- +++++++++++ second_proj_axis +++++++++++ -->
	<ext_description linkend="geometry_schema.second_proj_axis">
	The <b>second_proj_axis</b> function returns the normalised <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> that is simultaneously the
     projection of <b>arg</b> onto the plane normal to the <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>&#8194; 
     <b>z_axis</b> and onto the plane normal to the <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> &#8194;<b>x_axis</b>.
     If <b>arg</b> is NULL,
     the projection of the <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> (0, 1, 0) onto <b>z_axis</b> is returned.
  <note>
This function does not provide geometric founding for the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> returned, the caller of the the function is responsible for
ensuring that it is used in a <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> with a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>.
</note>
	</ext_description>
	<!-- z_axis -->
	<ext_description linkend="geometry_schema.second_proj_axis.z_axis">
	(input) a  defining a local Z axis.
</ext_description>
	<!-- x_axis -->
	<ext_description linkend="geometry_schema.second_proj_axis.x_axis">
	(input) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> not parallel to <b>z_axis</b>.
</ext_description>
	<!-- arg -->
	<ext_description linkend="geometry_schema.second_proj_axis.arg">
	(input) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> which is used as the first approximation to the direction of <b>y_axis</b>.
</ext_description>
	<!-- y_axis.orientation -->
	<ext_description linkend="geometry_schema.second_proj_axis.y_axis">
	(output) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> determined by first projecting
	<b>arg</b> onto the plane with normal <b>z_axis</b>, then projecting the result onto
the plane normal to <b>x_axis</b>.
</ext_description>
	<!-- +++++++++++ cross_product +++++++++++ -->
	<ext_description linkend="geometry_schema.cross_product">
	The <b>cross_product</b> function returns the vector, or cross, product of two input 
     <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s. The input <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s  must be three-dimensional and are
     normalised at the start of the computation.  The
     result is always a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> which is unitless. If the
     input <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s are either parallel or anti-parallel, a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> of zero 
     magnitude is returned with <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector.orientation"/> as
     <b>arg1</b>.
<note>
This function does not provide geometric founding for the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> returned, the caller of the the function is responsible for
ensuring that it is used in a <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> with a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>.
</note>
	</ext_description>
	<!-- arg1 -->
	<ext_description linkend="geometry_schema.cross_product.arg1">
	(input) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> defining the first operand in cross product operation.
</ext_description>
	<!-- arg2 -->
	<ext_description linkend="geometry_schema.cross_product.arg2">
	(input) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> defining the second  operand for cross product.
</ext_description>
	<!-- result -->
	<ext_description linkend="geometry_schema.cross_product.result">
	(output) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> which is the cross product of <b>arg1</b> and <b>arg2</b>.
</ext_description>
	<!-- +++++++++++ dot_product +++++++++++ -->
	<ext_description linkend="geometry_schema.dot_product">
	The <b>dot_product</b> function returns the scalar, or dot (&#8901;), product of two <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s.
     The input arguments can be <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s in either
     two- or three-dimensional space and are
     normalised at the start of the computation.  The returned scalar is undefined if
     the input <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s have different dimensionality, or if either is
     undefined.
</ext_description>
	<!-- arg1 -->
	<ext_description linkend="geometry_schema.dot_product.arg1">
	(input)a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> defining first vector in dot product, or scalar product, operation..
</ext_description>
	<!-- arg2 -->
	<ext_description linkend="geometry_schema.dot_product.arg2">
	(input) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> defining second operand for dot product operation.
</ext_description>
	<!-- scalar -->
	<ext_description linkend="geometry_schema.dot_product.scalar">
	(output) a scalar which is the dot product of <b>arg1</b> and <b>arg2</b>.
</ext_description>
	<!-- +++++++++++ normalise +++++++++++ -->
	<ext_description linkend="geometry_schema.normalise">
	The <b>normalise</b> function returns a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> or <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> whose components are
    normalised to have a sum of squares of 1.0.  The output is of the same
    type (<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> or  <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/>, with the same units) as
    the input argument.  If the input argument is not defined or is of zero
    length, the output vector is undefined.
 <note>
This function does not provide geometric founding for the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> returned, the caller of the the function is responsible for
ensuring that it is used in a <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> with a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>.
</note>
	</ext_description>
	<!-- arg -->
	<ext_description linkend="geometry_schema.normalise.arg">
	(input)a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> or <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> to be normalised.
</ext_description>
	<!-- result -->
	<ext_description linkend="geometry_schema.normalise.result">
	(output) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> or <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> which is parallel to <b>arg</b>, of unit length and of the same type.
</ext_description>
	<!-- +++++++++++ scalar_times_vector +++++++++++ -->
	<ext_description linkend="geometry_schema.scalar_times_vector">
	The <b>scalar_times_vector</b> function returns the <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> that is the scalar multiple of the 
     input vector.  It accepts as input a scalar and a `vector' which may be 
     either a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> or  a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>.  The output is a 
     <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> of the same units as the input <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/>, or unitless if a
     <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> is input.  If either input argument is undefined, the
     returned <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> is also undefined. The <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector.orientation"/> of
     the <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> is reversed if the scalar is negative.
<note>
This function does not provide geometric founding for the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> returned, the caller of the the function is responsible for
ensuring that it is used in a <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> with a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>.
</note>
	</ext_description>
	<!-- scalar -->
	<ext_description linkend="geometry_schema.scalar_times_vector.scalar">
	(input) a  real number to participate in the product.
</ext_description>
	<!-- vec -->
	<ext_description linkend="geometry_schema.scalar_times_vector.vec">
	(input) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> or <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> which is to be multiplied.
</ext_description>
	<!-- result -->
	<ext_description linkend="geometry_schema.dimension_of.result">
	(output) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> which is the product of <b>scalar</b>  and <b>vec</b>.
</ext_description>
	<!-- +++++++++++ vector_sum +++++++++++ -->
	<ext_description linkend="geometry_schema.vector_sum">
	The <b>vector_sum</b> function returns the sum of the input arguments.  The function
    returns as a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/>  the vector sum of the two input `vectors'.
    For this purpose <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s are treated as unit vectors.
    The input
    arguments  must both be of the same dimensionality but
    may be either <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s or <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> s. Where both arguments
    are <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/>s, they must be expressed in the same units.
    A zero sum vector produces a
    <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> of zero magnitude in the direction of <b>arg1</b>.
    If both input arguments are <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s, the result is unitless.
<note>
This function does not provide geometric founding for the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> returned, the caller of the the function is responsible for
ensuring that it is used in a <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> with a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>
		</note>
	</ext_description>
	<!-- arg1 -->
	<ext_description linkend="geometry_schema.vector_sum.arg1">
	(input) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> or <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> defining the first operand in vector sum operation..
</ext_description>
	<!-- arg2 -->
	<ext_description linkend="geometry_schema.vector_sum.arg2">
	(input) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> or <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/> defining the second operand for vector sum operation.
</ext_description>
	<!-- result -->
	<ext_description linkend="geometry_schema.vector_sum.result">
	(output) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/>  which is the vector sum of <b>arg1</b> and <b>arg2</b>.
</ext_description>
	<!-- +++++++++++ vector_difference +++++++++++ -->
	<ext_description linkend="geometry_schema.vector_difference">
	The <b>vector_difference</b> function returns the difference of the input arguments
   as (<b>arg1</b> - <b>arg2</b>).  The function returns as a
   <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> the vector difference of the two input `vectors'.
   For this purpose <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s are treated as unit vectors.
  The input arguments shall both be of the same
   dimensionality but may be either <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s or <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/>s.
   If both input  arguments are <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/>s, they must be expressed
   in the same units; if both
   are <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s, a unitless result is produced. A zero difference vector
   produces a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> of zero magnitude in the direction of <b>arg1</b>.
<note>
This function does not provide geometric founding for the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> returned, the caller of the the function is responsible for
ensuring that it is used in a <express_ref linkend="representation_schema:ir_express:representation_schema.representation"/> with a
<express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_context"/>
		</note>
	</ext_description>
	<!-- arg1 -->
	<ext_description linkend="geometry_schema.vector_difference.arg1">
	(input) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s or <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> defining first operand in the vector difference operation;
</ext_description>
	<!-- arg2 -->
	<ext_description linkend="geometry_schema.vector_difference.arg2">
	(input) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.direction"/>s or <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> defining the second operand for vector difference;
</ext_description>
	<!-- result -->
	<ext_description linkend="geometry_schema.vector_difference.result">
	(output) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.vector"/> which is the vector difference of <b>arg1</b> and <b>arg2</b>.
</ext_description>
	<!-- +++++++++++ default_b_spline_knot_mult +++++++++++ -->
	<ext_description linkend="geometry_schema.default_b_spline_knot_mult">
	The <b>default_b_spline_knot_mult</b> function returns the integer list of knot multiplicities,
     depending on the type of knot vector, for the B-spline parametrisation.

</ext_description>
	<!-- degree -->
	<ext_description linkend="geometry_schema.default_b_spline_knot_mult.degree">
	(input) an integer defining the degree of the B-spline basis functions.
</ext_description>
	<!-- up_knots -->
	<ext_description linkend="geometry_schema.default_b_spline_knot_mult.up_knots">
	(input) an integer which gives the number of knot multiplicities required.
</ext_description>
	<!-- uniform -->
	<ext_description linkend="geometry_schema.default_b_spline_knot_mult.uniform">
	(input) the type of basis function for which knot multiplicities are required.
</ext_description>
	<!-- knot_mult -->
	<ext_description linkend="geometry_schema.default_b_spline_knot_mult.knot_mult">
	 (output) a list of integer knot multiplicities.
</ext_description>
	<!-- +++++++++++ default_b_spline_knots +++++++++++ -->
	<ext_description linkend="geometry_schema.default_b_spline_knots">
	The <b>default_b_spline_knots</b> function returns the knot vector, depending on the
     <express_ref linkend="geometry_schema:ir_express:geometry_schema.knot_type"/>, for a B-spline parametrisation.
</ext_description>
	<!-- degree -->
	<ext_description linkend="geometry_schema.default_b_spline_knots.degree">
	(input) an integer defining the degree of the B-spline basis functions.
</ext_description>
	<!-- up_knots -->
	<ext_description linkend="geometry_schema.default_b_spline_knots.up_knots">
	(input) an integer which gives the number of knot values required.
</ext_description>
	<!-- uniform -->
	<ext_description linkend="geometry_schema.default_b_spline_knots.uniform">
	(input) the type of basis function for which knots are required.
</ext_description>
	<!-- knots -->
	<ext_description linkend="geometry_schema.default_b_spline_knots.knots">
	 (output) a list of parameter values for the knots..
</ext_description>
	<!-- +++++++++++ default_b_spline_curve_weights +++++++++++ -->
	<ext_description linkend="geometry_schema.default_b_spline_curve_weights">
	The <b>default_b_spline_curve_weights</b> function returns <b>up_cp</b> weights equal to 1.0 in an array of
    real.
</ext_description>
	<!-- up_cp -->
	<ext_description linkend="geometry_schema.default_b_spline_curve_weights.up_cp">
	(input) an integer defining the upper  index on the array of the B-spline curve weights required.
</ext_description>
	<!-- weights -->
	<ext_description linkend="geometry_schema.default_b_spline_curve_weights.weights">
	(output) a real array of weight values.
</ext_description>
	<!-- +++++++++++ default_b_spline_surface_weights +++++++++++ -->
	<ext_description linkend="geometry_schema.default_b_spline_surface_weights">
	The <b>default_b_spline_surface_weights</b> function returns  weights equal to 1.0 in an array of
    real.
</ext_description>
	<!-- u_upper -->
	<ext_description linkend="geometry_schema.default_b_spline_surface_weights.u_upper">
	(input) an integer defining the upper index on the array of the B-spline surface weights required in the <i>u</i> direction.
</ext_description>
	<!-- v_upper -->
	<ext_description linkend="geometry_schema.default_b_spline_surface_weights.v_upper">
	(input) an integer defining the upper index on the array of the B-spline surface weights required in the <i>v</i> direction.
</ext_description>
	<!-- weights -->
	<ext_description linkend="geometry_schema.default_b_spline_surface_weights.weights">
	(output) a real array of weight values.
</ext_description>
	<!-- +++++++++++ constraints_param_b_spline +++++++++++ -->
	<ext_description linkend="geometry_schema.constraints_param_b_spline">
		<p>The <b>constraints_param_b_spline</b> function checks the parametrisation of a B-spline curve or (one of
     the directions of) a B-spline surface or volume and returns TRUE if no 
     inconsistencies are found. </p>
		<p>   These constraints are: </p>
		<p>  Degree &#8805; 1. </p>
		<p>  Upper index on knots &#8805; 2. </p>
		<p> Upper index on control points &#8805; degree. </p>
		<p>  Sum of knot multiplicities = degree + (upper index on control    points) + 2. </p>
		<p> For the first and last knot the multiplicity is bounded by 1 and  (degree+1). </p>
		<p>  For all other knots the   knot multiplicity is bounded by 1 and degree. </p>
		<p>  The consecutive knots are increasing in value. </p>
	</ext_description>
	<!-- degree -->
	<ext_description linkend="geometry_schema.constraints_param_b_spline.degree">
	(input) an integer defining the degree of the B-spline basis functions.
</ext_description>
	<!--up_knots -->
	<ext_description linkend="geometry_schema.constraints_param_b_spline.up_knots">
	(input) an integer giving the upper index of the list of knot multiplicities.
</ext_description>
	<!--up_cp -->
	<ext_description linkend="geometry_schema.constraints_param_b_spline.up_cp">
	((input) an integer which is the upper index of the control points for the curve or surface being
checked for consistency of its parameter values;
</ext_description>
	<!--knot_mult -->
	<ext_description linkend="geometry_schema.constraints_param_b_spline.knot_mult">
	(input) the list of knot multiplicities;
</ext_description>
	<!--knots -->
	<ext_description linkend="geometry_schema.constraints_param_b_spline.knots">
	(input) the list of knot values to be checked.
</ext_description>
	<!-- +++++++++++ constraints_param_local_b_spline +++++++++++ -->
	<ext_description linkend="geometry_schema.constraints_param_local_b_spline">
		<p>The <b>constraints_param_local_b_spline</b> function checks the parameters defining a <express_ref linkend="geometry_schema:ir_express:geometry_schema.local_b_spline"/> and returns TRUE if no inconsistencies are found.
These constraints are:
</p>
		<p>   These constraints are: </p>
		<p>  Degree &#8805;= 1. </p>
		<p>  Upper index on knots &#8805;= 2. </p>
		<p>  Sum of knot multiplicities = degree + 2. </p>
		<p> For the first and last knot the multiplicity is bounded by 1 and  (degree+1). </p>
		<p>  For all other knots the   knot multiplicity is bounded by 1 and degree. </p>
		<p>  The first knot pointer is at least 1 and consecutive knot pointers are increasing in value. </p>
	</ext_description>
	<!-- degree -->
	<ext_description linkend="geometry_schema.constraints_param_local_b_spline.degree">
	(input) an integer defining the degree of the B-spline basis functions.
</ext_description>
	<!--knot_mult -->
	<ext_description linkend="geometry_schema.constraints_param_local_b_spline.knot_mult">
	(input) the list of knot multiplicities;
</ext_description>
	<!--knots -->
	<ext_description linkend="geometry_schema.constraints_param_local_b_spline.knots">
	(input) the list of integer pointers to the knot values.
</ext_description>
	<!-- +++++++++++ constraints_scaling +++++++++++ -->
	<ext_description linkend="geometry_schema.constraints_scaling">
		<p>The <b>constraints_scaling</b> function checks the scaling factors  associated with the control points of a locally refined curve, surface or volume and returns TRUE if they are all positive and less than 1.0.
 </p>
	</ext_description>
	<!-- factors-->
	<ext_description linkend="geometry_schema.constraints_scaling.factors">
	(input)  a LIST of scaling factor values to be tested.
</ext_description>
	<!-- +++++++++++ curve_weights_positive +++++++++++ -->
	<ext_description linkend="geometry_schema.curve_weights_positive">
	The <b>curve_weights_positive</b> function checks the weights associated with the control points
    of a 
    <express_ref linkend="geometry_schema:ir_express:geometry_schema.rational_b_spline_curve"/> and returns TRUE if they are
    all positive.
</ext_description>
	<!-- b -->
	<ext_description linkend="geometry_schema.curve_weights_positive.b">
	(input) a rational B-spline curve for which the weight values
are to be tested.
</ext_description>
	<!-- +++++++++++ weights_positive +++++++++++ -->
	<ext_description linkend="geometry_schema.weights_positive">
	The <b>weights_positive</b> function checks the weights associated with the control points of a rational locally refined curve, surface or volume and returns TRUE if they are all positive.
</ext_description>
	<!-- b -->
	<ext_description linkend="geometry_schema.weights_positive.weights">
	(input)  a LIST of weight values to be tested.
are to be tested.
</ext_description>
	<!-- +++++++++++ constraints_composite_curve_on_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.constraints_composite_curve_on_surface">
	The <b>constraints_composite_curve_on_surface</b> This function checks that the curves referenced by the segments of the
    <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_on_surface"/> are all curves on surface,
      including the
      <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_on_surface"/> type, which is admissible
      as a <express_ref linkend="geometry_schema:ir_express:geometry_schema.bounded_curve"/>.

</ext_description>
	<!-- c -->
	<ext_description linkend="geometry_schema.constraints_composite_curve_on_surface.c">
	(input) A <express_ref linkend="geometry_schema:ir_express:geometry_schema.composite_curve_on_surface"/> to be verified.
</ext_description>
	<!-- +++++++++++ get_basis_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.get_basis_surface">
	The <b>get_basis_surface</b> function returns the basis surface for a <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/> as a a set of
<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/>s. For a curve which is not a <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve_on_surface"/> an
empty set is returned.
</ext_description>
	<!-- c -->
	<ext_description linkend="geometry_schema.get_basis_surface.c">
	(input) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/> for which the <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve.basis_surface"/> is to be determined.
</ext_description>
	<!-- surfs -->
	<ext_description linkend="geometry_schema.get_basis_surface.surfs">
	(output) the set containing the <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve.basis_surface"/> or surfaces on which <b>c</b> lies.
</ext_description>
	<!-- +++++++++++ surface_weights_positive +++++++++++ -->
	<ext_description linkend="geometry_schema.surface_weights_positive">
	The <b>surface_weights_positive</b> function checks the weights associated with the control points of a
     <express_ref linkend="geometry_schema:ir_express:geometry_schema.rational_b_spline_surface"/> and returns TRUE if they are all positive.  

</ext_description>
	<!-- b -->
	<ext_description linkend="geometry_schema.surface_weights_positive.b">
	(input) a <express_ref linkend="geometry_schema:ir_express:geometry_schema.rational_b_spline_surface"/> for which the weight values are to be tested.
</ext_description>
	<!-- +++++++++++ volume_weights_positive +++++++++++ -->
	<ext_description linkend="geometry_schema.volume_weights_positive">
	The <b>volume_weights_positive</b> function checks the weights associated with the control points of a
     <express_ref linkend="geometry_schema:ir_express:geometry_schema.rational_b_spline_volume"/> and returns TRUE if they are all
     positive.  

</ext_description>
	<!-- b -->
	<ext_description linkend="geometry_schema.volume_weights_positive.b">
	(input)  a <express_ref linkend="geometry_schema:ir_express:geometry_schema.rational_b_spline_volume"/> for which the weight values are to be tested.
</ext_description>
	<!-- +++++++++++ constraints_rectangular_composite_surface +++++++++++ -->
	<ext_description linkend="geometry_schema.constraints_rectangular_composite_surface">
		<p> The <b>constraints_rectangular_composite_surface</b> functions checks the following constraints on the attributes
    of a rectangular composite surface: </p>
		<p> that the component surfaces are all either rectangular trimmed
      surfaces or B-spline surfaces; </p>
		<p> that the <b>transition</b> attributes of the segments array do
      not contain the value  <b>discontinuous</b> except for the last
         row or column, where they indicate that the surface is not closed in
         the appropriate direction. </p>
	</ext_description>
	<!-- s -->
	<ext_description linkend="geometry_schema.constraints_rectangular_composite_surface.s">
	(input) A rectangular composite surface to be verified.
</ext_description>
	<!-- +++++++++++ increasing_values_in_list +++++++++++ -->
	<ext_description linkend="geometry_schema.increasing_values_in_list">
	This function checks a list of real values and  returns TRUE if they are in strictly ascending order.
	

</ext_description>
	<!-- lis -->
	<ext_description linkend="geometry_schema.increasing_values_in_list.values">
	(input) a list of real values to be tested.
</ext_description>
	<!-- +++++++++++ list_to_array +++++++++++ -->
	<ext_description linkend="geometry_schema.list_to_array">
	The <b>list_to_array</b> function converts a generic list to an array
    with pre-determined array bounds. If the array bounds are incompatible 
    with the number of elements in the original list, a null result is 
    returned. This function is used to construct the arrays of control points 
    and weights used in the b-spline entities.

</ext_description>
	<!-- lis -->
	<ext_description linkend="geometry_schema.list_to_array.lis">
	(input) A list to be converted.
</ext_description>
	<!-- low -->
	<ext_description linkend="geometry_schema.list_to_array.low">
	(input) An integer specifying the required lower index of the output array.
</ext_description>
	<!-- u -->
	<ext_description linkend="geometry_schema.list_to_array.u">
	(input) An integer value for the upper index.
</ext_description>
	<!-- res -->
	<ext_description linkend="geometry_schema.list_to_array.res">
	(output) The array generated from the input data
</ext_description>
	<!-- +++++++++++ make_array_of_array +++++++++++ -->
	<ext_description linkend="geometry_schema.make_array_of_array">
	The <b>make_array_of_array</b> function builds an array of arrays from
    a list of lists. The function first checks that the specified array 
    dimensions are compatible with the sizes of the lists, and in particular, 
    verifies that all the sub-lists contain the same number of elements. A
    null result is returned if the input data is incompatible with the 
    dimensions. This function is used to construct the arrays of control 
    points and weights for a B-spline surface.
</ext_description>
	<!-- lis -->
	<ext_description linkend="geometry_schema.make_array_of_array.lis">
	(input) A list of list to be converted.
</ext_description>
	<!-- low1 -->
	<ext_description linkend="geometry_schema.make_array_of_array.low1">
	(input) An integer specifying the required lower index of the first output array.
</ext_description>
	<!-- u1 -->
	<ext_description linkend="geometry_schema.make_array_of_array.u1">
	(input) An integer value for the upper index of the first output array.
</ext_description>
	<!-- low2 -->
	<ext_description linkend="geometry_schema.make_array_of_array.low2">
	(input) An integer specifying the required lower index of the second output array.
</ext_description>
	<!-- u2 -->
	<ext_description linkend="geometry_schema.make_array_of_array.u2">
	(input) An integer value for the upper index of the second output array.
</ext_description>
	<!-- res -->
	<ext_description linkend="geometry_schema.make_array_of_array.res">
	(output)  The array of array with specified dimensions generated from the input data after verifying consistency.
</ext_description>
	<!-- +++++++++++ make_array_of_array_of_array +++++++++++ -->
	<ext_description linkend="geometry_schema.make_array_of_array_of_array">
 	The <b>make_array_of_array_of_array</b> function  builds an
    array of arrays of arrays from a list of lists of lists. The function first checks that the specified array
    dimensions are compatible with the sizes of the lists, and in particular, 
    verifies that all the sub-lists contain the correct numbers of elements.
    An indeterminate  result is returned if the input data is incompatible with the
    dimensions. This function is used to construct the arrays of control 
    points and weights for a B-spline volume.
 </ext_description>
	<!-- lis -->
	<ext_description linkend="geometry_schema.make_array_of_array_of_array.lis">
 	(input) A list of list of list to be converted.
 </ext_description>
	<!-- low1 -->
	<ext_description linkend="geometry_schema.make_array_of_array_of_array.low1">
 	(input) An integer specifying the required lower index of the first output array.
 </ext_description>
	<!-- u1 -->
	<ext_description linkend="geometry_schema.make_array_of_array_of_array.u1">
 	(input) An integer value for the upper index of the first output array.
 </ext_description>
	<!-- low2 -->
	<ext_description linkend="geometry_schema.make_array_of_array_of_array.low2">
 	(input) An integer specifying the required lower index of the second output array.
 </ext_description>
	<!-- u2 -->
	<ext_description linkend="geometry_schema.make_array_of_array_of_array.u2">
 	(input) An integer value for the upper index of the second output array.
 </ext_description>
	<!-- low3 -->
	<ext_description linkend="geometry_schema.make_array_of_array_of_array.low3">
  	(input) An integer specifying the required lower index of the third output array.
  </ext_description>
	<!-- u3 -->
	<ext_description linkend="geometry_schema.make_array_of_array_of_array.u3">
  	(input) An integer value for the upper index of the third output array.
 </ext_description>
	<!-- res -->
	<ext_description linkend="geometry_schema.make_array_of_array_of_array.res">
 	(output)  The array of array of  with specified dimensions generated from the input data after verifying consistency.
 </ext_description>
	<!-- +++++++++++ above_plane +++++++++++ -->
	<ext_description linkend="geometry_schema.above_plane">
	The <b>above_plane</b> function tests whether, or not, four <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s are coplanar.
If the input arguments are two-dimensional an indeterminate result is returned.
The function returns a zero value if the input arguments are coplanar. If the points
are not coplanar the function returns  the distance the fourth point is above
the plane of the first 3 points,  (<b>p1</b>, <b>p2</b>, <b>p3</b>), a negative result indicates that the fourth
point is below this plane. Above is defined to be the side from which the
the loop <b>p1</b>
		<b>p2</b>
		<b>p3</b> appears in counter-clockwise order.
</ext_description>
	<!-- p1 -->
	<ext_description linkend="geometry_schema.above_plane.p1">
	(input) the first <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> to be tested as a member of a coplanar set;
</ext_description>
	<!-- p2 -->
	<ext_description linkend="geometry_schema.above_plane.p2">
	the second <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> to be tested as a member of a coplanar set;
</ext_description>
	<!-- p3 -->
	<ext_description linkend="geometry_schema.above_plane.p3">
	(input) the third <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> to be tested as a member of a coplanar set;
</ext_description>
	<!-- p4 -->
	<ext_description linkend="geometry_schema.above_plane.p4">
	the fourth <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/> to be tested as a member of a coplanar set;
</ext_description>
	<!-- val -->
	<ext_description linkend="geometry_schema.above_plane.val">
	(output) The result of the coplanar test, if zero the four <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s are coplanar, otherwise the sign of <b>value</b>
	indicates if <b>p4</b> is above (positive), or below (negative) the plane of <b>p1, p2, </b>and <b>p3</b>.
</ext_description>
	<!-- +++++++++++ same_side +++++++++++ -->
	<ext_description linkend="geometry_schema.same_side">
	The <b>same_side</b> function tests whether, or not, a list of 2 or more test points are on the
same side of plane defined by three given points.
If the input arguments are two-dimensional an indeterminate result is returned.
The function returns TRUE if the <b>test_points</b> all lie on the same side
of the plane defined by <b>plane_pts</b>, FALSE indicates that the <b>test_points</b>
are not all on the same side of this plane.

</ext_description>
	<!-- plane_pts -->
	<ext_description linkend="geometry_schema.same_side.plane_pts">
	(input) The LIST of 3 <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s defining the plane used in the test.
</ext_description>
	<!-- test_points -->
	<ext_description linkend="geometry_schema.same_side.test_points">
	(input) The LIST of <express_ref linkend="geometry_schema:ir_express:geometry_schema.cartesian_point"/>s to be tested for the property of lying on the same side of the plane.
</ext_description>
	<!-- result -->
	<ext_description linkend="geometry_schema.same_side.result">
	(output) The result of the test, if TRUE all the <b>test_points</b>
	are on the same side of the plane; if FALSE one or more of these points lies
in the plane or on the wrong side of the plane.
</ext_description>
</ext_descriptions>
