<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express description.file="descriptions.xml" language_version="2" rcs.date="$Date$" rcs.revision="$Revision$" reference="ISO 10303-105">
   <application name="JSDAI" owner="LKSoft" source="kinematic_structure_schema schema_instance" url="www.lksoft.com" version="4.0 beta"/>
   <schema name="kinematic_structure_schema">
      <interface kind="reference" schema="kinematic_topology_schema"/>
      <interface kind="reference" schema="geometry_schema">
         <interfaced.item name="axis2_placement_3d"/>
         <interfaced.item name="cartesian_transformation_operator_3d"/>
         <interfaced.item name="curve"/>
         <interfaced.item name="direction"/>
         <interfaced.item name="geometric_representation_context"/>
         <interfaced.item name="geometric_representation_item"/>
         <interfaced.item name="normalise"/>
         <interfaced.item name="point"/>
         <interfaced.item name="point_on_curve"/>
         <interfaced.item name="point_on_surface"/>
         <interfaced.item name="surface"/>
         <interfaced.item name="rectangular_trimmed_surface"/>
         <interfaced.item name="trimmed_curve"/>
      </interface>
      <interface kind="reference" schema="measure_schema">
         <interfaced.item name="conversion_based_unit"/>
         <interfaced.item name="global_unit_assigned_context"/>
         <interfaced.item name="length_measure"/>
         <interfaced.item name="plane_angle_measure"/>
         <interfaced.item name="si_prefix"/>
         <interfaced.item name="si_unit"/>
         <interfaced.item name="si_unit_name"/>
         <interfaced.item name="unit"/>
      </interface>
      <interface kind="reference" schema="product_property_definition_schema">
         <interfaced.item name="characterized_definition"/>
         <interfaced.item name="property_definition"/>
      </interface>
      <interface kind="reference" schema="product_property_representation_schema">
         <interfaced.item name="property_definition_representation"/>
         <interfaced.item name="shape_representation"/>
      </interface>
      <interface kind="reference" schema="representation_schema">
         <interfaced.item name="definitional_representation_relationship"/>
         <interfaced.item name="functionally_defined_transformation"/>
         <interfaced.item name="item_defined_transformation"/>
         <interfaced.item name="representation"/>
         <interfaced.item name="representation_context"/>
         <interfaced.item name="representation_item"/>
         <interfaced.item name="representation_relationship"/>
         <interfaced.item name="representation_relationship_with_transformation"/>
         <interfaced.item name="using_representations"/>
      </interface>
      <interface kind="reference" schema="support_resource_schema">
         <interfaced.item name="bag_to_set"/>
         <interfaced.item name="label"/>
      </interface>
      <type name="kinematic_link_representation_items">
         <select selectitems="curve point rigid_placement surface"/>
      </type>
      <type name="rigid_placement">
         <select selectitems="axis2_placement_3d su_parameters"/>
      </type>
      <type name="rotational_range_measure">
         <select selectitems="plane_angle_measure unlimited_range"/>
      </type>
      <type name="translational_range_measure">
         <select selectitems="length_measure unlimited_range"/>
      </type>
      <type name="unlimited_range">
         <enumeration items="unlimited"/>
      </type>
      <entity name="cylindrical_pair" supertypes="kinematic_pair"/>
      <entity name="cylindrical_pair_range" supertypes="simple_pair_range">
         <explicit name="applies_to_pair">
            <typename name="cylindrical_pair"/>
            <redeclaration entity-ref="simple_pair_range"/>
         </explicit>
         <explicit name="lower_limit_actual_translation">
            <typename name="translational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_translation">
            <typename name="translational_range_measure"/>
         </explicit>
         <explicit name="lower_limit_actual_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_actual_translation))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_actual_translation)))&#10;       XOR&#10;       (lower_limit_actual_translation &lt; upper_limit_actual_translation)" label="WR1"/>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_actual_rotation))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_actual_rotation)))&#10;       XOR&#10;       (lower_limit_actual_rotation &lt; upper_limit_actual_rotation)" label="WR2"/>
      </entity>
      <entity name="fully_constrained_pair" supertypes="kinematic_pair"/>
      <entity name="gear_pair" supertypes="kinematic_pair">
         <explicit name="radius_first_link">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="radius_second_link">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="bevel">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="helical_angle">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="gear_ratio">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="gear_pair_range" supertypes="simple_pair_range">
         <explicit name="applies_to_pair">
            <typename name="gear_pair"/>
            <redeclaration entity-ref="simple_pair_range"/>
         </explicit>
         <explicit name="lower_limit_actual_rotation_1">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation_1">
            <typename name="rotational_range_measure"/>
         </explicit>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_actual_rotation_1))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_actual_rotation_1)))&#10;       XOR&#10;       (lower_limit_actual_rotation_1 &lt;&#10;        upper_limit_actual_rotation_1)" label="WR1"/>
      </entity>
      <entity name="homokinetic_pair" supertypes="universal_pair">
         <where expression="NOT EXISTS(SELF.input_skew_angle)" label="WR1"/>
      </entity>
      <entity name="kinematic_link_representation" supertypes="representation">
         <explicit name="context_of_items">
            <typename name="geometric_representation_context"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="kinematic_link_representation_items"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="represented_link">
            <typename name="kinematic_link"/>
         </explicit>
         <inverse attribute="rep_1" entity="kinematic_link_representation_association" name="associated_shape_representation">
            <inverse.aggregate lower="0" type="SET" upper="1"/>
         </inverse>
      </entity>
      <entity name="kinematic_link_representation_association" supertypes="representation_relationship">
         <explicit name="rep_1">
            <typename name="kinematic_link_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="shape_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <where expression="SELF\representation_relationship.rep_2.context_of_items :=:&#10;       SELF\representation_relationship.rep_1.context_of_items" label="WR1"/>
      </entity>
      <entity abstract.supertype="YES" name="kinematic_pair" super.expression="ONEOF (revolute_pair, screw_pair, cylindrical_pair, spherical_pair, universal_pair, planar_pair, unconstrained_pair, fully_constrained_pair, point_on_surface_pair, point_on_planar_curve_pair, planar_curve_pair, prismatic_pair, gear_pair, rack_and_pinion_pair, surface_pair)" supertypes="item_defined_transformation geometric_representation_item">
         <explicit name="joint">
            <typename name="kinematic_joint"/>
         </explicit>
         <explicit name="transform_item_1">
            <typename name="rigid_placement"/>
            <redeclaration entity-ref="item_defined_transformation"/>
         </explicit>
         <explicit name="transform_item_2">
            <typename name="rigid_placement"/>
            <redeclaration entity-ref="item_defined_transformation"/>
         </explicit>
      </entity>
      <entity name="mechanism_representation" supertypes="representation">
         <explicit name="context_of_items">
            <typename name="geometric_representation_context"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="items">
            <aggregate lower="1" type="SET" upper="?"/>
            <typename name="pair_representation_relationship"/>
            <redeclaration entity-ref="representation"/>
         </explicit>
         <explicit name="underlying_topology">
            <typename name="kinematic_topology_representation"/>
         </explicit>
         <where expression="SIZEOF (QUERY (item &lt;* items | &#10;    NOT (underlying_topology IN using_representations(item\representation_relationship.rep_1\kinematic_link_representation.represented_link))&#10;    OR&#10;    NOT (underlying_topology IN using_representations(item\representation_relationship.rep_2\kinematic_link_representation.represented_link))&#10;    OR&#10;    NOT (underlying_topology IN using_representations(item\representation_relationship_with_transformation.transformation_operator\kinematic_pair.joint))&#10;    )) = 0" label="WR1"/>
      </entity>
      <entity name="pair_actuator" supertypes="simple_pair_range"/>
      <entity name="pair_representation_relationship" supertypes="representation_relationship_with_transformation geometric_representation_item">
         <explicit name="rep_1">
            <typename name="kinematic_link_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="rep_2">
            <typename name="kinematic_link_representation"/>
            <redeclaration entity-ref="representation_relationship"/>
         </explicit>
         <explicit name="transformation_operator">
            <typename name="kinematic_pair"/>
            <redeclaration entity-ref="representation_relationship_with_transformation"/>
         </explicit>
         <where expression="rep_1 IN using_representations(transformation_operator\item_defined_transformation.transform_item_1)" label="WR1"/>
         <where expression="rep_2 IN using_representations(transformation_operator\item_defined_transformation.transform_item_2)" label="WR2"/>
         <where expression="rep_1\kinematic_link_representation.represented_link.mapping_origin = transformation_operator\kinematic_pair.joint.first_link" label="WR3"/>
         <where expression="rep_2\kinematic_link_representation.represented_link.mapping_origin = transformation_operator\kinematic_pair.joint.second_link" label="WR4"/>
      </entity>
      <entity name="planar_curve_pair" supertypes="kinematic_pair">
         <explicit name="curve_1">
            <typename name="curve"/>
         </explicit>
         <explicit name="curve_2">
            <typename name="curve"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="frame_associated_to_background&#10;         (SELF\item_defined_transformation.transform_item_1,&#10;          curve_1)" label="WR1"/>
         <where expression="frame_associated_to_background&#10;         (SELF\item_defined_transformation.transform_item_2,&#10;          curve_2)" label="WR2"/>
      </entity>
      <entity name="planar_curve_pair_range" supertypes="simple_pair_range">
         <explicit name="applies_to_pair">
            <typename name="planar_curve_pair"/>
            <redeclaration entity-ref="simple_pair_range"/>
         </explicit>
         <explicit name="range_on_curve_1">
            <typename name="trimmed_curve"/>
         </explicit>
         <explicit name="range_on_curve_2">
            <typename name="trimmed_curve"/>
         </explicit>
         <where expression="SELF\simple_pair_range.applies_to_pair\planar_curve_pair.curve_1 :=:&#10;       range_on_curve_1.basis_curve" label="WR1"/>
         <where expression="SELF\simple_pair_range.applies_to_pair\planar_curve_pair.curve_2 :=:&#10;       range_on_curve_2.basis_curve" label="WR2"/>
      </entity>
      <entity name="planar_pair" supertypes="kinematic_pair"/>
      <entity name="planar_pair_range" supertypes="simple_pair_range">
         <explicit name="applies_to_pair">
            <typename name="planar_pair"/>
            <redeclaration entity-ref="simple_pair_range"/>
         </explicit>
         <explicit name="lower_limit_actual_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="lower_limit_actual_translation_x">
            <typename name="translational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_translation_x">
            <typename name="translational_range_measure"/>
         </explicit>
         <explicit name="lower_limit_actual_translation_y">
            <typename name="translational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_translation_y">
            <typename name="translational_range_measure"/>
         </explicit>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_actual_rotation))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_actual_rotation)))&#10;       XOR&#10;       (lower_limit_actual_rotation &lt; upper_limit_actual_rotation)" label="WR1"/>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_actual_translation_x))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_actual_translation_x)))&#10;       XOR&#10;       (lower_limit_actual_translation_x &lt; upper_limit_actual_translation_x)" label="WR2"/>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_actual_translation_y))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_actual_translation_y)))&#10;       XOR&#10;       (lower_limit_actual_translation_y &lt; upper_limit_actual_translation_y)" label="WR3"/>
      </entity>
      <entity name="point_on_planar_curve_pair" supertypes="kinematic_pair">
         <explicit name="pair_curve">
            <typename name="curve"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="frame_associated_to_background&#10;         (SELF\item_defined_transformation.transform_item_1,&#10;         pair_curve)" label="WR1"/>
      </entity>
      <entity name="point_on_planar_curve_pair_range" supertypes="simple_pair_range">
         <explicit name="applies_to_pair">
            <typename name="point_on_planar_curve_pair"/>
            <redeclaration entity-ref="simple_pair_range"/>
         </explicit>
         <explicit name="range_on_pair_curve">
            <typename name="trimmed_curve"/>
         </explicit>
         <explicit name="lower_limit_yaw">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_yaw">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="lower_limit_pitch">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_pitch">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="lower_limit_roll">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_roll">
            <typename name="rotational_range_measure"/>
         </explicit>
         <where expression="SELF\simple_pair_range.applies_to_pair\&#10;           point_on_planar_curve_pair.pair_curve&#10;       :=: range_on_pair_curve.basis_curve" label="WR1"/>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_yaw))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_yaw)))&#10;       XOR&#10;       (lower_limit_yaw &lt; upper_limit_yaw)" label="WR2"/>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_pitch))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_pitch)))&#10;       XOR&#10;       (lower_limit_pitch &lt; upper_limit_pitch)" label="WR3"/>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_roll))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_roll)))&#10;       XOR&#10;       (lower_limit_roll &lt; upper_limit_roll)" label="WR4"/>
      </entity>
      <entity name="point_on_surface_pair" supertypes="kinematic_pair">
         <explicit name="pair_surface">
            <typename name="surface"/>
         </explicit>
         <where expression="frame_associated_to_background&#10;         (SELF\item_defined_transformation.transform_item_1, &#10;         pair_surface)" label="WR1"/>
      </entity>
      <entity name="point_on_surface_pair_range" supertypes="simple_pair_range">
         <explicit name="applies_to_pair">
            <typename name="point_on_surface_pair"/>
            <redeclaration entity-ref="simple_pair_range"/>
         </explicit>
         <explicit name="range_on_pair_surface">
            <typename name="rectangular_trimmed_surface"/>
         </explicit>
         <explicit name="lower_limit_yaw">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_yaw">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="lower_limit_pitch">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_pitch">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="lower_limit_roll">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_roll">
            <typename name="rotational_range_measure"/>
         </explicit>
         <where expression="SELF\simple_pair_range.applies_to_pair\point_on_surface_pair.pair_surface&#10;       :=: range_on_pair_surface.basis_surface" label="WR1"/>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_yaw))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_yaw)))&#10;       XOR&#10;       (lower_limit_yaw &lt; upper_limit_yaw)" label="WR2"/>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_pitch))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_pitch)))&#10;       XOR&#10;       (lower_limit_pitch &lt; upper_limit_pitch)" label="WR3"/>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_roll))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_roll)))&#10;       XOR&#10;       (lower_limit_roll &lt; upper_limit_roll)" label="WR4"/>
      </entity>
      <entity name="prismatic_pair" supertypes="kinematic_pair"/>
      <entity name="prismatic_pair_range" supertypes="simple_pair_range">
         <explicit name="applies_to_pair">
            <typename name="prismatic_pair"/>
            <redeclaration entity-ref="simple_pair_range"/>
         </explicit>
         <explicit name="lower_limit_actual_translation">
            <typename name="translational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_translation">
            <typename name="translational_range_measure"/>
         </explicit>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_actual_translation))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_actual_translation)))&#10;       XOR&#10;       (lower_limit_actual_translation &lt; upper_limit_actual_translation)" label="WR1"/>
      </entity>
      <entity name="rack_and_pinion_pair" supertypes="kinematic_pair">
         <explicit name="pinion_radius">
            <typename name="length_measure"/>
         </explicit>
      </entity>
      <entity name="rack_and_pinion_pair_range" supertypes="simple_pair_range">
         <explicit name="applies_to_pair">
            <typename name="rack_and_pinion_pair"/>
            <redeclaration entity-ref="simple_pair_range"/>
         </explicit>
         <explicit name="lower_limit_rack_displacement">
            <typename name="translational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_rack_displacement">
            <typename name="translational_range_measure"/>
         </explicit>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_rack_displacement))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_rack_displacement)))&#10;       XOR&#10;       (lower_limit_rack_displacement &lt; upper_limit_rack_displacement)" label="WR1"/>
      </entity>
      <entity name="revolute_pair" supertypes="kinematic_pair"/>
      <entity name="revolute_pair_range" supertypes="simple_pair_range">
         <explicit name="applies_to_pair">
            <typename name="revolute_pair"/>
            <redeclaration entity-ref="simple_pair_range"/>
         </explicit>
         <explicit name="lower_limit_actual_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_actual_rotation))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_actual_rotation)))&#10;       XOR&#10;       (lower_limit_actual_rotation &lt; upper_limit_actual_rotation)" label="WR1"/>
      </entity>
      <entity name="rolling_curve_pair" supertypes="planar_curve_pair"/>
      <entity name="rolling_surface_pair" supertypes="surface_pair"/>
      <entity name="screw_pair" supertypes="kinematic_pair">
         <explicit name="pitch">
            <typename name="length_measure"/>
         </explicit>
      </entity>
      <entity name="screw_pair_range" supertypes="simple_pair_range">
         <explicit name="applies_to_pair">
            <typename name="screw_pair"/>
            <redeclaration entity-ref="simple_pair_range"/>
         </explicit>
         <explicit name="lower_limit_actual_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_actual_rotation))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_actual_rotation)))&#10;       XOR&#10;       (lower_limit_actual_rotation &lt; upper_limit_actual_rotation)" label="WR1"/>
      </entity>
      <entity abstract.supertype="YES" name="simple_pair_range" super.expression="ONEOF (revolute_pair_range, prismatic_pair_range, screw_pair_range, cylindrical_pair_range, spherical_pair_range, universal_pair_range, planar_pair_range, point_on_surface_pair_range, surface_pair_range, point_on_planar_curve_pair_range, planar_curve_pair_range, gear_pair_range, rack_and_pinion_pair_range) ANDOR pair_actuator" supertypes="kinematic_pair">
         <explicit name="applies_to_pair">
            <typename name="kinematic_pair"/>
         </explicit>
         <derived expression="applies_to_pair.transform_item_1" name="transform_item_1">
            <typename name="rigid_placement"/>
            <redeclaration entity-ref="item_defined_transformation"/>
         </derived>
         <derived expression="applies_to_pair.transform_item_2" name="transform_item_2">
            <typename name="rigid_placement"/>
            <redeclaration entity-ref="item_defined_transformation"/>
         </derived>
         <derived expression="applies_to_pair.joint" name="joint">
            <typename name="kinematic_joint"/>
            <redeclaration entity-ref="kinematic_pair"/>
         </derived>
      </entity>
      <entity name="sliding_curve_pair" supertypes="planar_curve_pair"/>
      <entity name="sliding_surface_pair" supertypes="surface_pair"/>
      <entity name="spherical_pair" supertypes="kinematic_pair"/>
      <entity name="spherical_pair_range" supertypes="simple_pair_range">
         <explicit name="applies_to_pair">
            <typename name="spherical_pair"/>
            <redeclaration entity-ref="simple_pair_range"/>
         </explicit>
         <explicit name="lower_limit_yaw">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_yaw">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="lower_limit_pitch">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_pitch">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="lower_limit_roll">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_roll">
            <typename name="rotational_range_measure"/>
         </explicit>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_yaw))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_yaw)))&#10;       XOR&#10;       (lower_limit_yaw &lt; upper_limit_yaw)" label="WR1"/>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_pitch))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_pitch)))&#10;       XOR&#10;       (lower_limit_pitch &lt; upper_limit_pitch)" label="WR2"/>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_roll))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_roll)))&#10;       XOR&#10;       (lower_limit_roll &lt; upper_limit_roll)" label="WR3"/>
      </entity>
      <entity name="su_parameters" supertypes="geometric_representation_item">
         <explicit name="a">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="alpha">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="b">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="beta">
            <typename name="plane_angle_measure"/>
         </explicit>
         <explicit name="c">
            <typename name="length_measure"/>
         </explicit>
         <explicit name="gamma">
            <typename name="plane_angle_measure"/>
         </explicit>
         <where expression="SELF\geometric_representation_item.dim=3" label="WR1"/>
      </entity>
      <entity name="surface_pair" supertypes="kinematic_pair">
         <explicit name="surface_1">
            <typename name="surface"/>
         </explicit>
         <explicit name="surface_2">
            <typename name="surface"/>
         </explicit>
         <explicit name="orientation">
            <builtintype type="BOOLEAN"/>
         </explicit>
         <where expression="frame_associated_to_background&#10;         (SELF\item_defined_transformation.transform_item_1,&#10;          surface_1)" label="WR1"/>
         <where expression="frame_associated_to_background&#10;         (SELF\item_defined_transformation.transform_item_2,&#10;          surface_2)" label="WR2"/>
      </entity>
      <entity name="surface_pair_range" supertypes="simple_pair_range">
         <explicit name="applies_to_pair">
            <typename name="surface_pair"/>
            <redeclaration entity-ref="simple_pair_range"/>
         </explicit>
         <explicit name="range_on_surface_1">
            <typename name="rectangular_trimmed_surface"/>
         </explicit>
         <explicit name="range_on_surface_2">
            <typename name="rectangular_trimmed_surface"/>
         </explicit>
         <explicit name="lower_limit_actual_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_actual_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <where expression="SELF\simple_pair_range.applies_to_pair\surface_pair.surface_1 :=:&#10;       range_on_surface_1.basis_surface" label="WR1"/>
         <where expression="SELF\simple_pair_range.applies_to_pair\surface_pair.surface_2 :=:&#10;       range_on_surface_2.basis_surface" label="WR2"/>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_actual_rotation))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_actual_rotation)))&#10;       XOR&#10;       (lower_limit_actual_rotation &lt; upper_limit_actual_rotation)" label="WR3"/>
      </entity>
      <entity name="unconstrained_pair" supertypes="kinematic_pair"/>
      <entity name="universal_pair" supertypes="kinematic_pair">
         <explicit name="input_skew_angle" optional="YES">
            <typename name="plane_angle_measure"/>
         </explicit>
         <derived expression="NVL (input_skew_angle, 0.0)" name="skew_angle">
            <typename name="plane_angle_measure"/>
         </derived>
      </entity>
      <entity name="universal_pair_range" supertypes="simple_pair_range">
         <explicit name="applies_to_pair">
            <typename name="universal_pair"/>
            <redeclaration entity-ref="simple_pair_range"/>
         </explicit>
         <explicit name="lower_limit_first_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_first_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="lower_limit_second_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <explicit name="upper_limit_second_rotation">
            <typename name="rotational_range_measure"/>
         </explicit>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_first_rotation))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_first_rotation)))&#10;       XOR&#10;       (lower_limit_first_rotation &lt; upper_limit_first_rotation)" label="WR1"/>
         <where expression="(('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (lower_limit_second_rotation))&#10;        OR&#10;        ('KINEMATIC_STRUCTURE_SCHEMA.UNLIMITED_RANGE' IN&#10;         TYPEOF (upper_limit_second_rotation)))&#10;       XOR&#10;       (lower_limit_second_rotation &lt; upper_limit_second_rotation)" label="WR2"/>
      </entity>
      <subtype.constraint entity="representation" name="kss_representation_subtypes" super.expression="ONEOF (kinematic_link_representation, kinematic_topology_structure, kinematic_topology_directed_structure, kinematic_topology_network_structure, mechanism_representation, shape_representation)"/>
      <function name="convert_plane_angle_for_pair_from_radian">
         <parameter name="pair">
            <typename name="kinematic_pair"/>
         </parameter>
         <parameter name="angle_expr">
            <builtintype type="REAL"/>
         </parameter>
         <typename name="plane_angle_measure"/>
         <algorithm>LOCAL
    link_rep    : kinematic_link_representation
                := representation_of_link (pair.joint.first_link);
    link_cntxt  : representation_context;
    pa_units    : SET OF unit := [];
    pau         : unit;
    conv_factor : REAL := 1.0;
    result      : plane_angle_measure;
  END_LOCAL;

  link_cntxt := link_rep\representation.context_of_items;

  IF NOT ('MEASURE_SCHEMA.GLOBAL_UNIT_ASSIGNED_CONTEXT'
          IN TYPEOF (link_cntxt)) THEN
    RETURN (?);
  END_IF;

  pa_units := QUERY (unit &lt;* link_cntxt\global_unit_assigned_context.units |
                     'MEASURE_SCHEMA.PLANE_ANGLE_UNIT' IN TYPEOF (unit));

  IF SIZEOF (pa_units) &lt;&gt; 1 THEN
    RETURN (?);
  END_IF;

  pau := pa_units[1];

  IF (NOT ('MEASURE_SCHEMA.SI_UNIT' IN TYPEOF (pau)) AND
      NOT ('MEASURE_SCHEMA.CONVERSION_BASED_UNIT' IN TYPEOF (pau))) THEN
    RETURN (?);
  END_IF;

  REPEAT WHILE ('MEASURE_SCHEMA.CONVERSION_BASED_UNIT' IN TYPEOF (pau));
    conv_factor := conv_factor *
                   pau\conversion_based_unit.conversion_factor.
                   value_component;
    pau := pau\conversion_based_unit.conversion_factor.unit_component;

    IF ((NOT ('MEASURE_SCHEMA.SI_UNIT' IN TYPEOF (pau)) AND
         NOT ('MEASURE_SCHEMA.CONVERSION_BASED_UNIT' IN TYPEOF (pau))) OR
        (NOT ('MEASURE_SCHEMA.PLANE_ANGLE_UNIT' IN TYPEOF (pau)))) THEN
      RETURN (?);
    END_IF;
  END_REPEAT;

  IF (pau\si_unit.name &lt;&gt; si_unit_name.radian) THEN
    RETURN (?);
  END_IF;

  CASE pau\si_unit.prefix OF
    si_prefix.exa     : conv_factor := 1.E18 * conv_factor;
    si_prefix.peta    : conv_factor := 1.E15 * conv_factor;
    si_prefix.tera    : conv_factor := 1.E12 * conv_factor;
    si_prefix.giga    : conv_factor := 1.E9 * conv_factor;
    si_prefix.mega    : conv_factor := 1.E6 * conv_factor;
    si_prefix.kilo    : conv_factor := 1.E3 * conv_factor;
    si_prefix.hecto   : conv_factor := 1.E2 * conv_factor;
    si_prefix.deca    : conv_factor := 1.E1 * conv_factor;
    si_prefix.deci    : conv_factor := 1.E-1 * conv_factor;
    si_prefix.centi   : conv_factor := 1.E-2 * conv_factor;
    si_prefix.milli   : conv_factor := 1.E-3 * conv_factor;
    si_prefix.micro   : conv_factor := 1.E-6 * conv_factor;
    si_prefix.nano    : conv_factor := 1.E-9 * conv_factor;
    si_prefix.pico    : conv_factor := 1.E-12 * conv_factor;
    si_prefix.femto   : conv_factor := 1.E-15 * conv_factor;
    si_prefix.atto    : conv_factor := 1.E-18 * conv_factor;
  END_CASE;

  result := angle_expr / conv_factor;
  RETURN (result);</algorithm>
      </function>
      <function name="frame_associated_to_background">
         <parameter name="frame">
            <typename name="rigid_placement"/>
         </parameter>
         <parameter name="background">
            <typename name="kinematic_link_representation_items"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>RETURN (FALSE);</algorithm>
      </function>
      <function name="plane_angle_for_pair_in_radian">
         <parameter name="pair">
            <typename name="kinematic_pair"/>
         </parameter>
         <parameter name="angle">
            <typename name="plane_angle_measure"/>
         </parameter>
         <typename name="plane_angle_measure"/>
         <algorithm>LOCAL
    converted_angle : plane_angle_measure := angle;
    link_rep        : kinematic_link_representation
                    := representation_of_link (pair.joint.first_link);
    link_cntxt      : representation_context;
    pa_units        : SET OF unit := [];
    pau             : unit;
  END_LOCAL;

  link_cntxt := link_rep\representation.context_of_items;

  IF NOT ('MEASURE_SCHEMA.GLOBAL_UNIT_ASSIGNED_CONTEXT'
          IN TYPEOF (link_cntxt)) THEN
    RETURN (?);
  END_IF;

  pa_units := QUERY (unit &lt;* link_cntxt\global_unit_assigned_context.units |
                     'MEASURE_SCHEMA.PLANE_ANGLE_UNIT' IN TYPEOF (unit));

  IF SIZEOF (pa_units) &lt;&gt; 1 THEN
    RETURN (?);
  END_IF;

  pau := pa_units[1];

  IF (NOT ('MEASURE_SCHEMA.SI_UNIT' IN TYPEOF (pau)) AND
      NOT ('MEASURE_SCHEMA.CONVERSION_BASED_UNIT' IN TYPEOF (pau))) THEN
    RETURN (?);
  END_IF;

  REPEAT WHILE ('MEASURE_SCHEMA.CONVERSION_BASED_UNIT' IN TYPEOF (pau));
    converted_angle := converted_angle *
                       pau\conversion_based_unit.conversion_factor.
                       value_component;
    pau := pau\conversion_based_unit.conversion_factor.unit_component;

    IF ((NOT ('MEASURE_SCHEMA.SI_UNIT' IN TYPEOF (pau)) AND
         NOT ('MEASURE_SCHEMA.CONVERSION_BASED_UNIT' IN TYPEOF (pau))) OR
        (NOT ('MEASURE_SCHEMA.PLANE_ANGLE_UNIT' IN TYPEOF (pau)))) THEN
      RETURN (?);
    END_IF;
  END_REPEAT;

  IF (pau\si_unit.name &lt;&gt; si_unit_name.radian) THEN
    RETURN (?);
  END_IF;

  CASE pau\si_unit.prefix OF
    si_prefix.exa     : RETURN (1.E18 * converted_angle);
    si_prefix.peta    : RETURN (1.E15 * converted_angle);
    si_prefix.tera    : RETURN (1.E12 * converted_angle);
    si_prefix.giga    : RETURN (1.E9 * converted_angle);
    si_prefix.mega    : RETURN (1.E6 * converted_angle);
    si_prefix.kilo    : RETURN (1.E3 * converted_angle);
    si_prefix.hecto   : RETURN (1.E2 * converted_angle);
    si_prefix.deca    : RETURN (1.E1 * converted_angle);
    si_prefix.deci    : RETURN (1.E-1 * converted_angle);
    si_prefix.centi   : RETURN (1.E-2 * converted_angle);
    si_prefix.milli   : RETURN (1.E-3 * converted_angle);
    si_prefix.micro   : RETURN (1.E-6 * converted_angle);
    si_prefix.nano    : RETURN (1.E-9 * converted_angle);
    si_prefix.pico    : RETURN (1.E-12 * converted_angle);
    si_prefix.femto   : RETURN (1.E-15 * converted_angle);
    si_prefix.atto    : RETURN (1.E-18 * converted_angle);
  OTHERWISE           : RETURN (converted_angle);
  END_CASE;</algorithm>
      </function>
      <function name="representation_of_link">
         <parameter name="link">
            <typename name="kinematic_link"/>
         </parameter>
         <typename name="kinematic_link_representation"/>
         <algorithm>RETURN (?);</algorithm>
      </function>
   </schema>
</express>
