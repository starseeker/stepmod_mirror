<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?>
<!DOCTYPE express SYSTEM "../../../dtd/express.dtd">

<express language_version="2" rcs.date="$Date$" rcs.revision="$Revision$" description.file="arm_descriptions.xml">
   <application name="JSDAI" owner="LKSoft" url="www.lksoft.com" version="4.0 beta" source="measure_schema schema_instance"/>
   <schema name="measure_schema">
      <interface kind="reference" schema="basic_attribute_schema">
         <interfaced.item name="get_name_value"/>
         <interfaced.item name="name_attribute"/>
      </interface>
      <interface kind="reference" schema="representation_schema">
         <interfaced.item name="representation_context"/>
      </interface>
      <interface kind="reference" schema="support_resource_schema"/>
      <type name="absorbed_dose_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="acceleration_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="amount_of_substance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="area_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="capacitance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="celsius_temperature_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="conductance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="context_dependent_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="count_measure">
         <builtintype type="NUMBER"/>
      </type>
      <type name="descriptive_measure">
         <builtintype type="STRING"/>
      </type>
      <type name="dose_equivalent_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="electric_charge_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="electric_current_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="electric_potential_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="energy_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="force_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="frequency_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="illuminance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="inductance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="length_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="luminous_flux_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="luminous_intensity_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="magnetic_flux_density_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="magnetic_flux_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="mass_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="measure_value">
         <select selectitems="absorbed_dose_measure dose_equivalent_measure radioactivity_measure acceleration_measure amount_of_substance_measure area_measure celsius_temperature_measure context_dependent_measure count_measure descriptive_measure capacitance_measure electric_charge_measure conductance_measure electric_current_measure electric_potential_measure energy_measure magnetic_flux_density_measure force_measure frequency_measure illuminance_measure inductance_measure length_measure luminous_flux_measure luminous_intensity_measure magnetic_flux_measure mass_measure numeric_measure non_negative_length_measure parameter_value plane_angle_measure positive_length_measure positive_plane_angle_measure positive_ratio_measure power_measure pressure_measure ratio_measure resistance_measure solid_angle_measure thermodynamic_temperature_measure time_measure velocity_measure volume_measure"/>
      </type>
      <type name="non_negative_length_measure">
         <typename name="length_measure"/>
         <where label="WR1" expression="SELF &gt;= 0.0"/>
      </type>
      <type name="numeric_measure">
         <builtintype type="NUMBER"/>
      </type>
      <type name="parameter_value">
         <builtintype type="REAL"/>
      </type>
      <type name="plane_angle_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="positive_length_measure">
         <typename name="non_negative_length_measure"/>
         <where label="WR1" expression="SELF &gt; 0.0"/>
      </type>
      <type name="positive_plane_angle_measure">
         <typename name="plane_angle_measure"/>
         <where label="WR1" expression="SELF &gt; 0.0"/>
      </type>
      <type name="positive_ratio_measure">
         <typename name="ratio_measure"/>
         <where label="WR1" expression="SELF &gt; 0.0"/>
      </type>
      <type name="power_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="pressure_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="radioactivity_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="ratio_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="resistance_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="si_prefix">
         <enumeration items="exa peta tera giga mega kilo hecto deca deci centi milli micro nano pico femto atto"/>
      </type>
      <type name="si_unit_name">
         <enumeration items="metre gram second ampere kelvin mole candela radian steradian hertz newton pascal joule watt coulomb volt farad ohm siemens weber tesla henry degree_Celsius lumen lux becquerel gray sievert"/>
      </type>
      <type name="solid_angle_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="thermodynamic_temperature_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="time_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="unit">
         <select selectitems="derived_unit named_unit"/>
      </type>
      <type name="velocity_measure">
         <builtintype type="REAL"/>
      </type>
      <type name="volume_measure">
         <builtintype type="REAL"/>
      </type>
      <entity name="absorbed_dose_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.ABSORBED_DOSE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="absorbed_dose_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.gray)"/>
      </entity>
      <entity name="acceleration_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.ACCELERATION_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="acceleration_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = &#10;       dimensional_exponents ( 1.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0 )"/>
      </entity>
      <entity name="amount_of_substance_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.AMOUNT_OF_SUBSTANCE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="amount_of_substance_unit" supertypes="named_unit">
         <where label="WR1" expression="(SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 1.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0)"/>
      </entity>
      <entity name="area_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.AREA_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="area_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = &#10;      dimensional_exponents ( 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )"/>
      </entity>
      <entity name="capacitance_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.CAPACITANCE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="capacitance_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.farad)"/>
      </entity>
      <entity name="celsius_temperature_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.THERMODYNAMIC_TEMPERATURE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="conductance_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.CONDUCTANCE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="conductance_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.siemens)"/>
      </entity>
      <entity name="context_dependent_unit" supertypes="named_unit">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
      </entity>
      <entity name="conversion_based_unit" supertypes="named_unit">
         <explicit name="name">
            <typename name="label"/>
         </explicit>
         <explicit name="conversion_factor">
            <typename name="measure_with_unit"/>
         </explicit>
      </entity>
      <entity name="derived_unit" super.expression="ONEOF (absorbed_dose_unit, acceleration_unit, radioactivity_unit, area_unit, capacitance_unit, dose_equivalent_unit, electric_charge_unit, conductance_unit, electric_potential_unit, energy_unit, magnetic_flux_density_unit, force_unit, frequency_unit, illuminance_unit, inductance_unit, magnetic_flux_unit, power_unit, pressure_unit, resistance_unit, velocity_unit, volume_unit)">
         <explicit name="elements">
            <aggregate type="SET" lower="1" upper="?"/>
            <typename name="derived_unit_element"/>
         </explicit>
         <derived name="name" expression="get_name_value(SELF)">
            <typename name="label"/>
         </derived>
         <where label="WR1" expression="(SIZEOF(elements) &gt; 1) OR ((SIZEOF(elements) = 1) AND (elements[1].exponent &lt;&gt; 1.0))"/>
         <where label="WR2" expression="SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) &lt;= 1"/>
      </entity>
      <entity name="derived_unit_element">
         <explicit name="unit">
            <typename name="named_unit"/>
         </explicit>
         <explicit name="exponent">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="dimensional_exponents">
         <explicit name="length_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="mass_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="time_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="electric_current_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="thermodynamic_temperature_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="amount_of_substance_exponent">
            <builtintype type="REAL"/>
         </explicit>
         <explicit name="luminous_intensity_exponent">
            <builtintype type="REAL"/>
         </explicit>
      </entity>
      <entity name="dose_equivalent_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.DOSE_EQUIVALENT_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="dose_equivalent_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.sievert)"/>
      </entity>
      <entity name="electric_charge_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.ELECTRIC_CHARGE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="electric_charge_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.coulomb)"/>
      </entity>
      <entity name="electric_current_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.ELECTRIC_CURRENT_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="electric_current_unit" supertypes="named_unit">
         <where label="WR1" expression="(SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 1.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0)"/>
      </entity>
      <entity name="electric_potential_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.ELECTRIC_POTENTIAL_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="electric_potential_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.volt)"/>
      </entity>
      <entity name="energy_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.ENERGY_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="energy_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.joule)"/>
      </entity>
      <entity name="force_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.FORCE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="force_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.newton)"/>
      </entity>
      <entity name="frequency_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.FREQUENCY_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="frequency_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.hertz)"/>
      </entity>
      <entity name="global_unit_assigned_context" supertypes="representation_context">
         <explicit name="units">
            <aggregate type="SET" lower="1" upper="?"/>
            <typename name="unit"/>
         </explicit>
      </entity>
      <entity name="illuminance_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.ILLUMINANCE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="illuminance_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.lux)"/>
      </entity>
      <entity name="inductance_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.INDUCTANCE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="inductance_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.henry)"/>
      </entity>
      <entity name="length_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.LENGTH_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="length_unit" supertypes="named_unit">
         <where label="WR1" expression="(SELF\named_unit.dimensions.length_exponent = 1.0) AND &#10;    (SELF\named_unit.dimensions.mass_exponent = 0.0) AND &#10;    (SELF\named_unit.dimensions.time_exponent = 0.0) AND &#10;    (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND &#10;    (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND &#10;    (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND &#10;    (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0)"/>
      </entity>
      <entity name="luminous_flux_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.LUMINOUS_FLUX_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="luminous_flux_unit" supertypes="named_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.lumen)"/>
      </entity>
      <entity name="luminous_intensity_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.LUMINOUS_INTENSITY_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="luminous_intensity_unit" supertypes="named_unit">
         <where label="WR1" expression="(SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 1.0)"/>
      </entity>
      <entity name="magnetic_flux_density_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.MAGNETIC_FLUX_DENSITY_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="magnetic_flux_density_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.tesla)"/>
      </entity>
      <entity name="magnetic_flux_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.MAGNETIC_FLUX_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="magnetic_flux_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.weber)"/>
      </entity>
      <entity name="mass_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.MASS_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="mass_unit" supertypes="named_unit">
         <where label="WR1" expression="(SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 1.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0)"/>
      </entity>
      <entity name="measure_with_unit" super.expression="ONEOF (length_measure_with_unit, mass_measure_with_unit, time_measure_with_unit, electric_current_measure_with_unit, thermodynamic_temperature_measure_with_unit, celsius_temperature_measure_with_unit, amount_of_substance_measure_with_unit, luminous_intensity_measure_with_unit, plane_angle_measure_with_unit, solid_angle_measure_with_unit, area_measure_with_unit, volume_measure_with_unit, ratio_measure_with_unit, acceleration_measure_with_unit, capacitance_measure_with_unit, electric_charge_measure_with_unit, conductance_measure_with_unit, electric_potential_measure_with_unit, energy_measure_with_unit, magnetic_flux_density_measure_with_unit, force_measure_with_unit, frequency_measure_with_unit, illuminance_measure_with_unit, inductance_measure_with_unit, luminous_flux_measure_with_unit, magnetic_flux_measure_with_unit, power_measure_with_unit, pressure_measure_with_unit, resistance_measure_with_unit, velocity_measure_with_unit, absorbed_dose_measure_with_unit, radioactivity_measure_with_unit, dose_equivalent_measure_with_unit)">
         <explicit name="value_component">
            <typename name="measure_value"/>
         </explicit>
         <explicit name="unit_component">
            <typename name="unit"/>
         </explicit>
         <where label="WR1" expression="valid_units(SELF)"/>
      </entity>
      <entity name="named_unit" super.expression="ONEOF (si_unit, conversion_based_unit, context_dependent_unit) ANDOR ONEOF (length_unit, mass_unit, time_unit, electric_current_unit, thermodynamic_temperature_unit, amount_of_substance_unit, luminous_flux_unit, luminous_intensity_unit, plane_angle_unit, solid_angle_unit, ratio_unit)">
         <explicit name="dimensions">
            <typename name="dimensional_exponents"/>
         </explicit>
      </entity>
      <entity name="plane_angle_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.PLANE_ANGLE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="plane_angle_unit" supertypes="named_unit">
         <where label="WR1" expression="(SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0)"/>
      </entity>
      <entity name="power_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.POWER_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="power_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.watt)"/>
      </entity>
      <entity name="pressure_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.PRESSURE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="pressure_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.pascal)"/>
      </entity>
      <entity name="radioactivity_measure_with_unit" supertypes="measure_with_unit">
         <explicit name="value_component">
            <typename name="numeric_measure"/>
            <redeclaration entity-ref="measure_with_unit"/>
         </explicit>
         <where label="WR1" expression="'MEASURE_SCHEMA.RADIOACTIVITY_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="radioactivity_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.becquerel)"/>
      </entity>
      <entity name="ratio_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.RATIO_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="ratio_unit" supertypes="named_unit">
         <where label="WR1" expression="(SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0)"/>
      </entity>
      <entity name="resistance_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.RESISTANCE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="resistance_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = dimensions_for_si_unit (si_unit_name.ohm)"/>
      </entity>
      <entity name="si_absorbed_dose_unit" supertypes="absorbed_dose_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.gray"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_capacitance_unit" supertypes="capacitance_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.farad"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_conductance_unit" supertypes="conductance_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.siemens"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_dose_equivalent_unit" supertypes="dose_equivalent_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.sievert"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_electric_charge_unit" supertypes="electric_charge_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.coulomb"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_electric_potential_unit" supertypes="electric_potential_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.volt"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_energy_unit" supertypes="energy_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.joule"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_force_unit" supertypes="force_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.newton"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_frequency_unit" supertypes="frequency_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.hertz"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_illuminance_unit" supertypes="illuminance_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.lux"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_inductance_unit" supertypes="inductance_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.henry"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_magnetic_flux_density_unit" supertypes="magnetic_flux_density_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.tesla"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_magnetic_flux_unit" supertypes="magnetic_flux_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.weber"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_power_unit" supertypes="power_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.watt"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_pressure_unit" supertypes="pressure_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.pascal"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_radioactivity_unit" supertypes="radioactivity_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.becquerel"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_resistance_unit" supertypes="resistance_unit si_unit">
         <where label="WR1" expression="SELF\si_unit.name = si_unit_name.ohm"/>
         <where label="WR2" expression="NOT EXISTS(SELF\derived_unit.name)"/>
      </entity>
      <entity name="si_unit" supertypes="named_unit">
         <explicit name="prefix" optional="YES">
            <typename name="si_prefix"/>
         </explicit>
         <explicit name="name">
            <typename name="si_unit_name"/>
         </explicit>
         <derived name="dimensions" expression="dimensions_for_si_unit(name)">
            <typename name="dimensional_exponents"/>
            <redeclaration entity-ref="named_unit"/>
         </derived>
      </entity>
      <entity name="solid_angle_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.SOLID_ANGLE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="solid_angle_unit" supertypes="named_unit">
         <where label="WR1" expression="(SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0)"/>
      </entity>
      <entity name="thermodynamic_temperature_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.THERMODYNAMIC_TEMPERATURE_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="thermodynamic_temperature_unit" supertypes="named_unit">
         <where label="WR1" expression="(SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 1.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0)"/>
      </entity>
      <entity name="time_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.TIME_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="time_unit" supertypes="named_unit">
         <where label="WR1" expression="(SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 1.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0)"/>
      </entity>
      <entity name="velocity_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.VELOCITY_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="velocity_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = &#10;       dimensional_exponents ( 1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0 )"/>
      </entity>
      <entity name="volume_measure_with_unit" supertypes="measure_with_unit">
         <where label="WR1" expression="'MEASURE_SCHEMA.VOLUME_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component)"/>
      </entity>
      <entity name="volume_unit" supertypes="derived_unit">
         <where label="WR1" expression="derive_dimensional_exponents(SELF) = &#10;          dimensional_exponents ( 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )"/>
      </entity>
      <function name="derive_dimensional_exponents">
         <parameter name="x">
            <typename name="unit"/>
         </parameter>
         <typename name="dimensional_exponents"/>
         <algorithm>LOCAL
      result : dimensional_exponents := dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    END_LOCAL;

    IF 'MEASURE_SCHEMA.DERIVED_UNIT' IN TYPEOF(x) THEN
      REPEAT i := LOINDEX(x\derived_unit.elements) TO HIINDEX(x\derived_unit.elements);
        result.length_exponent := result.length_exponent + 
        (x\derived_unit.elements[i]\derived_unit_element.exponent * 
         x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.length_exponent);
        result.mass_exponent := result.mass_exponent + 
        (x\derived_unit.elements[i]\derived_unit_element.exponent * 
         x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.mass_exponent);
        result.time_exponent := result.time_exponent + 
        (x\derived_unit.elements[i]\derived_unit_element.exponent * 
         x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.time_exponent);
        result.electric_current_exponent := result.electric_current_exponent + 
        (x\derived_unit.elements[i]\derived_unit_element.exponent * 
         x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.electric_current_exponent);
        result.thermodynamic_temperature_exponent := result.thermodynamic_temperature_exponent + 
        (x\derived_unit.elements[i]\derived_unit_element.exponent * 
         x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.thermodynamic_temperature_exponent);
        result.amount_of_substance_exponent := result.amount_of_substance_exponent + 
        (x\derived_unit.elements[i]\derived_unit_element.exponent * 
         x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.amount_of_substance_exponent);
        result.luminous_intensity_exponent := result.luminous_intensity_exponent + 
        (x\derived_unit.elements[i]\derived_unit_element.exponent * 
         x\derived_unit.elements[i]\derived_unit_element.unit\named_unit.dimensions.luminous_intensity_exponent);
      END_REPEAT;
    ELSE
      result := x\named_unit.dimensions;
    END_IF;
    RETURN (result);</algorithm>
      </function>
      <function name="dimensions_for_si_unit">
         <parameter name="n">
            <typename name="si_unit_name"/>
         </parameter>
         <typename name="dimensional_exponents"/>
         <algorithm>CASE n OF 
      metre:
        RETURN (dimensional_exponents(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
      gram:
        RETURN (dimensional_exponents(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0));
      second:
        RETURN (dimensional_exponents(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0));
      ampere:
        RETURN (dimensional_exponents(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0));
      kelvin:
        RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0));
      mole:
        RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0));
      candela:
        RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0));
      radian:
        RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
      steradian:
        RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
      hertz:
        RETURN (dimensional_exponents(0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0));
      newton:
        RETURN (dimensional_exponents(1.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0));
      pascal:
        RETURN (dimensional_exponents(-1.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0));
      joule:
        RETURN (dimensional_exponents(2.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0));
      watt:
        RETURN (dimensional_exponents(2.0, 1.0, -3.0, 0.0, 0.0, 0.0, 0.0));
      coulomb:
        RETURN (dimensional_exponents(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0));
      volt:
        RETURN (dimensional_exponents(2.0, 1.0, -3.0, -1.0, 0.0, 0.0, 0.0));
      farad:
        RETURN (dimensional_exponents(-2.0, -1.0, 4.0, 1.0, 0.0, 0.0, 0.0));
      ohm:
        RETURN (dimensional_exponents(2.0, 1.0, -3.0, -2.0, 0.0, 0.0, 0.0));
      siemens:
        RETURN (dimensional_exponents(-2.0, -1.0, 3.0, 2.0, 0.0, 0.0, 0.0));
      weber:
        RETURN (dimensional_exponents(2.0, 1.0, -2.0, -1.0, 0.0, 0.0, 0.0));
      tesla:
        RETURN (dimensional_exponents(0.0, 1.0, -2.0, -1.0, 0.0, 0.0, 0.0));
      henry:
        RETURN (dimensional_exponents(2.0, 1.0, -2.0, -2.0, 0.0, 0.0, 0.0));
      degree_Celsius:
        RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0));
      lumen:
        RETURN (dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0));
      lux:
        RETURN (dimensional_exponents(-2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0));
      becquerel:
        RETURN (dimensional_exponents(0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0));
      gray:
        RETURN (dimensional_exponents(2.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0));
      sievert:
        RETURN (dimensional_exponents(2.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0));
      OTHERWISE:
        RETURN (?);
    END_CASE;</algorithm>
      </function>
      <function name="valid_units">
         <parameter name="m">
            <typename name="measure_with_unit"/>
         </parameter>
         <builtintype type="BOOLEAN"/>
         <algorithm>IF 'MEASURE_SCHEMA.LENGTH_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.MASS_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.TIME_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.ELECTRIC_CURRENT_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.THERMODYNAMIC_TEMPERATURE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.CELSIUS_TEMPERATURE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.AMOUNT_OF_SUBSTANCE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.LUMINOUS_INTENSITY_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.PLANE_ANGLE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.SOLID_ANGLE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.AREA_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.VOLUME_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.RATIO_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.POSITIVE_LENGTH_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.POSITIVE_PLANE_ANGLE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
      dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.ACCELERATION_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( 1.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
     IF 'MEASURE_SCHEMA.CAPACITANCE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( -2.0, -1.0, 4.0, 1.0, 0.0, 0.0, 0.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.ELECTRIC_CHARGE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
        IF 'MEASURE_SCHEMA.CONDUCTANCE_MEASURE' IN TYPEOF(m.value_component) THEN
          IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
            dimensional_exponents( -2.0, -1.0, 3.0, 2.0, 0.0, 0.0, 0.0 ) THEN
            RETURN (FALSE);
          END_IF;
    END_IF;
        IF 'MEASURE_SCHEMA.ELECTRIC_POTENTIAL_MEASURE' IN TYPEOF(m.value_component) THEN
          IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
            dimensional_exponents( 2.0, 1.0, -3.0, -1.0, 0.0, 0.0, 0.0 ) THEN
            RETURN (FALSE);
          END_IF;
    END_IF;    
    IF 'MEASURE_SCHEMA.ENERGY_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( 2.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.FORCE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( 1.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.FREQUENCY_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.ILLUMINANCE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( -2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
     IF 'MEASURE_SCHEMA.INDUCTANCE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( 2.0, 1.0, -2.0, -2.0, 0.0, 0.0, 0.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.LUMINOUS_FLUX_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.MAGNETIC_FLUX_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( 2.0, 1.0, -2.0, -1.0, 0.0, 0.0, 0.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
     IF 'MEASURE_SCHEMA.MAGNETIC_FLUX_DENSITY_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( 0.0, 1.0, -2.0, -1.0, 0.0, 0.0, 0.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.POWER_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( 2.0, 1.0, -3.0, 0.0, 0.0, 0.0, 0.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.PRESSURE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( -1.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.RESISTANCE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( 2.0, 1.0, -3.0, -2.0, 0.0, 0.0, 0.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.VELOCITY_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents( 1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0 ) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.RADIOACTIVITY_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents(0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.ABSORBED_DOSE_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents(2.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    IF 'MEASURE_SCHEMA.DOSE_EQUIVALENT_MEASURE' IN TYPEOF(m.value_component) THEN
      IF derive_dimensional_exponents(m.unit_component) &lt;&gt; 
        dimensional_exponents(2.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0) THEN
        RETURN (FALSE);
      END_IF;
    END_IF;
    RETURN (TRUE);</algorithm>
      </function>
   </schema>
</express>
