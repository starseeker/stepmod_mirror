<?xml version="1.0"?>
<?xml-stylesheet 
  type="text/xsl" 
  href="../../../xsl/descriptions.xsl"?>
<!DOCTYPE ext_descriptions SYSTEM "../../../dtd/description.dtd">
<ext_descriptions module_directory="support_resource_schema" schema_file="support_resource_schema.xml" describe.selects="YES" describe.subtype_constraints="YES" rcs.date="$Date: 2010/05/31 12:58:02 $" rcs.revision="$Revision: 1.2 $">
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Schema: support_resource_schema
   <express_ref linkend="support_resource_schema::support_resource_schema"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<ext_description linkend="support_resource_schema">
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: support_resource_schema  Type: identifier 
   <express_ref linkend="support_resource_schema::support_resource_schema.identifier"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="support_resource_schema.identifier">
	An <b>identifier</b> is a string suitable for identifying some product data.
	<note>
		An identifier may or may not have a natural-language meaning.
	</note>
	<example>
		In the context of a product, a part number or serial number would be an example of an identifier.
	</example>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: support_resource_schema  Type: label 
   <express_ref linkend="support_resource_schema::support_resource_schema.label"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="support_resource_schema.label">
	A <b>label</b> is an alphanumeric string that represents the human-interpretable name of something and shall
	have a natural-language meaning.
	<example>
		'Smith', 'Widget Inc.', and 'Materials Test Laboratory' are examples of labels.
	</example>
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: support_resource_schema  Type: text 
   <express_ref linkend="support_resource_schema::support_resource_schema.text"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="support_resource_schema.text">
	A <b>text</b> is an alphanumeric string intended to be read and understood by a human being. 
	It is for information purposes only.
</ext_description>
<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: support_resource_schema  Function: bag_to_set 
   <express_ref linkend="support_resource_schema::support_resource_schema.bag_to_set"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="support_resource_schema.bag_to_set">
	The <b>bag_to_set</b> function converts BAGs into SETs.
	<example>
		This function can be used to convert the BAGs returned by the USEDIN function into SETs.
	</example>
</ext_description>
<!-- the_bag -->
<ext_description linkend="support_resource_schema.bag_to_set.the_bag">
	(input) the BAG that is to be converted into a SET.
</ext_description>

<!-- 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Schema: support_resource_schema  Function: type_check_function 
   <express_ref linkend="support_resource_schema::support_resource_schema.type_check_function"/>
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  -->
<ext_description linkend="support_resource_schema.type_check_function">
	The <b>type_check_function</b> function compares the names of the data types of the instance that is referred to by the parameter
	<b>the_type</b> with the set of entity names specified by <b>sub_names</b>.
	<p>Depending on the value of <b>criterion</b>, it returns TRUE if:</p>
	<ul>
		<li>
			case 0: the intersection of the two aggregates is not empty.
			<note number="1">
				If <b>sub_names</b> contains the entity names of all the subtypes of a particular entity data type, this case can
				be used to ensure that no instance of the supertype exists.
			</note>
		</li>
		<li>
			case 1: the intersection of the two aggregates is empty.
			<note number="2">
				If <b>sub_names</b> contains the entity names of subtypes of a particular entity data type, this function can be
				used to ensure that no instance of these subtypes exists.
			</note>
		</li>
		<li>
			case 2: the intersection of the two aggregates contains exactly one name.
			<note number="3">
				If <b>sub_names</b> contains the entity names of all the subtypes of a particular entity data type, this function
				can be used to ensure that no complex entity instance of subtypes of the entity exists and that only instances of
				subtypes of the entity exist.
			</note>
			<note number="4">
				The concept of complex entity instance is defined in ISO 10303-11.
			</note>
		</li>
		<li>
			case 3: the intersection of the two aggregates contains at most one name.
			<note number="5">
				If <b>sub_names</b> contains the entity names of subtypes of a particular entity data type, this function can be
				used to ensure that no complex entity instance of these subtypes of the entity exists.
			</note>
		</li>
	</ul>
</ext_description>
<!-- the_type -->
<ext_description linkend="support_resource_schema.type_check_function.the_type">
	(input) the instance whose data type is checked.
</ext_description>
<!-- sub_names -->
<ext_description linkend="support_resource_schema.type_check_function.sub_names">
	(input) the set of names of the entity data types that are candidates for the type of <b>the_type</b>.
</ext_description>
<!-- criterion -->
<ext_description linkend="support_resource_schema.type_check_function.criterion">
	(input) the integer number value between 0 and 3.
</ext_description>
</ext_descriptions>
