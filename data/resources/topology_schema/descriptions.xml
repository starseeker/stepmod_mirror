<?xml version="1.0"?>
<?xml-stylesheet
type="text/xsl"
href="../../../xsl/descriptions.xsl"?>
<!DOCTYPE ext_descriptions SYSTEM "../../../dtd/description.dtd">
<ext_descriptions module_directory="topology_schema" schema_file="topology_schema.xml"
rcs.date="$Date: 2015/12/15 14:41:14 $" rcs.revision="$Revision: 1.6 $"
describe.selects="YES"
>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Schema: topology_schema
<express_ref linkend="topology_schema:ir_express:topology_schema"/>
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<ext_description linkend="topology_schema">
</ext_description>

<!-- +++++++++++ dummy_tri +++++++++++ -->
<ext_description linkend="topology_schema.dummy_tri">
<p>	A <b>dummy_tri</b> is a constant that is a partial entity definition to be used when
types of <express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/> are constructed. It provides
the correct supertypes and the <express_ref linkend="representation_schema:ir_express:representation_schema.representation_item.name"/> attribute as an empty string.
</p>
</ext_description>


<!--	Topology types begin here -->
<!-- +++++++++++ shell +++++++++++ -->
<ext_description linkend="topology_schema.shell">
<p>	The <b>shell</b>  type collects together, for reference when constructing more
  complex models,  the subtypes which have the characteristics of a  shell. </p>
  <p>   A <b>shell</b> is a connected object of fixed dimensionality <i>d</i> = 0, 1, or
   2,     typically used to bound a region.  The domain of a shell, if present, includes 
    its bounds and 0 &#8804; &#926; &lt; &#8734; </p>
  <p>      A shell of dimensionality 0 is represented by a graph consisting of a
    single vertex. The vertex shall not have any associated edges. </p>

  <p>      A shell of dimensionality 1 is represented by a connected graph of
    dimensionality 1.</p>

 <p>   A shell of dimensionality 2 is a topological entity constructed by
  joining    faces along edges. Its domain, if present, is a connected, orientable
    2-manifold with boundary, that is, a connected, oriented,
    finite, non-self-intersecting  surface, which may be closed or open. </p>
</ext_description>

<!-- +++++++++++ reversible_topology_item +++++++++++ -->
<ext_description linkend="topology_schema.reversible_topology_item">
	The <b>reversible_topology_item</b> select  type specifies all the topological representation items which
  can participate in the operation of reversing their orientation. This 
  type is used by the function <express_ref linkend="topology_schema:ir_express:topology_schema.conditional_reverse"/>.
</ext_description>

<!-- +++++++++++ list_of_reversible_topology_item +++++++++++ -->
<ext_description linkend="topology_schema.list_of_reversible_topology_item">
	The <b>list_of_reversible_topology_item</b>   type defines a list of reversible topology items; it is used 
  by the function  <express_ref linkend="topology_schema:ir_express:topology_schema.list_of_topology_reversed"/>
</ext_description>

<!-- +++++++++++ set_of_reversible_topology_item +++++++++++ -->
<ext_description linkend="topology_schema.set_of_reversible_topology_item">
	The <b>set_of_reversible_topology_item</b> type defines a set of reversible topology items; it is used 
  by the function  <express_ref linkend="topology_schema:ir_express:topology_schema.set_of_topology_reversed"/>.
</ext_description>

<!-- +++++++++++ reversible_topology +++++++++++ -->
<ext_description linkend="topology_schema.reversible_topology">
	The <b>reversible_topology</b> identifies all types of reversible topology items; it is
  used by the function <express_ref linkend="topology_schema:ir_express:topology_schema.topology_reversed"/>.
</ext_description>

<!-- Entity definitions -->

<!-- +++++++++++ topological_representation_item +++++++++++ -->
<ext_description linkend="topology_schema.topological_representation_item">
	<p>A <b>topological_representation_item</b> is a type of
	<express_ref linkend="representation_schema:ir_express:representation_schema.representation_item"/> that represents the topology, or
  connectivity, of entities which make up the representation of an object.
   The <b>topological_representation_item</b> is the supertype for all the
   representation items in the topology schema. </p>
<note number="1">
As subtypes of <express_ref linkend="representation_schema:ir_express:representation_schema.representation_item"/> there is an implicit and/or
relationship between <express_ref linkend="geometry_schema:ir_express:geometry_schema.geometric_representation_item"/> and
<b>topological_representation_item</b>. The only complex instances intended to
be created are <express_ref linkend="topology_schema:ir_express:topology_schema.edge_curve"/>, <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/>, and
<express_ref linkend="topology_schema:ir_express:topology_schema.vertex_point"/>.
</note>
<note number="2">
The definition of <b>topological_representation_item</b> defines an
and/or relationship between <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/> and <express_ref linkend="topology_schema:ir_express:topology_schema.path"/>. The only valid complex instance
 is the <express_ref linkend="topology_schema:ir_express:topology_schema.edge_loop"/> entity.
 </note>
</ext_description>	

<!-- IP1 -->
<ext_description linkend="topology_schema.topological_representation_item.wr:IP1">
	For each <b>topological_representation_item</b>, consider 
	    the set of <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s, <express_ref linkend="topology_schema:ir_express:topology_schema.edge_curve"/>, and <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/>s that are referenced, either
	    directly or recursively, from that  <b>topological_representation_item</b>. (Do not
	    include in this set oriented edges or faces, but do include the 
	    non-oriented edges and faces on which they are based.) Then no two 
    distinct elements in this set shall have domains that intersect.
</ext_description>


<!-- +++++++++++ vertex +++++++++++ -->
<ext_description linkend="topology_schema.vertex">
	<p>A <b>vertex</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/>,  and is the topological construct corresponding to a point.
     It has dimensionality 0 and extent 0. The domain of a vertex, if present,
     is a point in m dimensional real space  R<sup><i>m</i></sup>; this is
    represented by the <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_point"/> subtype. </p>
 
</ext_description>	


<!-- IP1 -->
<ext_description linkend="topology_schema.vertex.wr:IP1">
	The <b>vertex</b> has dimensionality 0. This is a fundamental property of the vertex.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.vertex.wr:IP2">
	The extent of a <b>vertex</b> is defined to be zero.
</ext_description>

<!-- +++++++++++ vertex_on_edge +++++++++++ -->
<ext_description linkend="topology_schema.vertex_on_edge">
	A <b>vertex_on_edge</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/>,  which is located on an <express_ref linkend="topology_schema:ir_express:topology_schema.edge_with_length"/> at a distance <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_on_edge.distance_from_start"/> from the start vertex.

 </ext_description>	

<!-- parent_edge -->
<ext_description linkend="topology_schema.vertex_on_edge.parent_edge">
the <express_ref linkend="topology_schema:ir_express:topology_schema.edge_with_length"/> on which the vertex lies;
</ext_description>

<!-- distance_from_start -->
<ext_description linkend="topology_schema.vertex_on_edge.distance_from_start">
the distance, measured along the edge, from the  <express_ref linkend="topology_schema:ir_express:topology_schema.edge.edge_start"/> to this vertex.
</ext_description>



<!-- WR1 -->
<ext_description linkend="topology_schema.vertex_on_edge.wr:WR1">
	The <b>distance_from_start</b> shall be less than the <express_ref linkend="topology_schema:ir_express:topology_schema.edge_with_length.edge_length"/>. 
</ext_description>


<!-- +++++++++++ vertex_point +++++++++++ -->
<ext_description linkend="topology_schema.vertex_point">
	A <b>vertex_point</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/>,  which has its geometry defined as a point.

 </ext_description>	

<!-- vertex_geometry -->
<ext_description linkend="topology_schema.vertex_point.vertex_geometry">
the geometric point which defines the position in  geometric space of the vertex;
</ext_description>





<!-- IP1 -->
<ext_description linkend="topology_schema.vertex_point.wr:IP1">
	The domain of the vertex is formally defined to be the domain
	 of  its <b>vertex_geometry</b>.
</ext_description>


<!-- +++++++++++ edge +++++++++++ -->
<ext_description linkend="topology_schema.edge">
<p>	A <b>edge</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/>,  corresponding to the
 connection
    between two vertices. More abstractly, it may stand for a logical
    relationship between the two vertices. The domain of an edge, if present,
  is a finite, non-self-intersecting open curve in R<sup><i>m</i></sup>, that is,
    a connected 1-dimensional manifold. The bounds of an <b>edge</b> are two
    vertices, which need not be distinct.
    The edge is oriented by choosing its traversal direction
    to run from the first to the second vertex. If the two vertices are the
   same,
    the edge is a  self-loop. The domain of the edge does not include
 its  bounds, and 0 &lt;  &#926; &lt; &#8734;. </p>
 <p>       Associated with an edge may be a geometric <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/> to locate
    the edge in a coordinate space; this is represented by the
  <b>edge_curve</b> subtype. The curve shall be finite and non-self-intersecting
    within the domain of the edge. 
    An <b>edge</b> is a graph, so its multiplicity M and graph genus G<sup><i>e</i></sup>
  may be  determined by the graph traversal algorithm. Since M = <b><i>E</i></b> = 1, the
  Euler equation reduces in this case to </p>
   <eqn>      <b><i>V</i></b> - (2 - G<sup><i>e</i></sup>) = 0  &#8195; &#8195; <a href="eqn2"> (2) </a>
   </eqn>
   <p>  where <b><i>V</i></b> = 1 or 2, and G<sup><i>e</i></sup> = 1 or 0. </p>

  <p>      Specifically, the topological edge defining data shall satisfy: </p>
    <ul>
    <li> An edge has two vertices,       |E[V]| = 2          </li>
    <li> The vertices need not be distinct,
             1 &#8804;|E{V}| &#8804; 2    </li>
    <li> Equation <a href="#eqn2"> (2) </a> shall hold
         |E{V}| - 2 + G<sup><i>e</i></sup> = 0        </li>
</ul>
 </ext_description>	

<!-- edge_start -->
<ext_description linkend="topology_schema.edge.edge_start">
start point (<express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/>) of the <b>edge</b>;
</ext_description>

<!-- edge_end -->
<ext_description linkend="topology_schema.edge.edge_end">
end point (<express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/>) of the <b>edge</b>. The same
     <express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/> can be used for both <b>edge_start</b> and
 <b>edge_end</b>.
</ext_description>



<!-- IP1 -->
<ext_description linkend="topology_schema.edge.wr:IP1">
	The <b>edge</b> has dimensionality 1.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.edge.wr:IP2">
	The extent of an <b>edge</b> shall be finite and nonzero.
</ext_description>

<!-- +++++++++++ edge_with_length +++++++++++ -->
<ext_description linkend="topology_schema.edge_with_length">
<p>	An <b>edge_with_length</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>,   which has its geometry undefined but is of a fixed
	length. </p>
<note> An <b>edge_with_length</b> may be used to describe the topology of flexible structures.</note>
	
 </ext_description>	

<!-- edge_length -->
<ext_description linkend="topology_schema.edge_with_length.edge_length">
the arc length of the <b>edge_with_length</b>.
</ext_description>

<!-- IP1 -->
<ext_description linkend="topology_schema.edge_with_length.wr:IP1">
	If the vertices of the <b>edge_with_length</b> are of type <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_point"/> the distance between the verices shall not exceed <b>edge_length</b>.
</ext_description>

<!-- +++++++++++ edge_curve +++++++++++ -->
<ext_description linkend="topology_schema.edge_curve">
<p>	A <b>edge_curve</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>,   which has its geometry
    fully defined. The geometry is defined by associating the edge with a  <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/>  which may be unbounded.
    As the topological and geometric directions may be opposed, an indicator
    (<b>same_sense</b>) is used to identify whether the edge and curve
   directions   agree or are opposed. The Boolean value indicates whether the <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/>
    direction agrees with (TRUE) or is in the opposite direction (FALSE) to
 the    <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> direction.  Any geometry associated with the vertices of the
   edge    shall be consistent with the edge geometry. Multiple edges can
    reference the same curve. </p>
 <figure id="Topfig23" number="23">
 		<title>Edge_curve</title>
 		<img src="Topfig23.gif"/>
 	</figure>

 
 
 </ext_description>	

<!-- edge_geometry -->
<ext_description linkend="topology_schema.edge_curve.edge_geometry">
the <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/> which defines the shape and spatial
  location  of the edge. This curve may be unbounded and is implicitly trimmed by the
     vertices of the edge; this defines the edge domain.
</ext_description>

<!-- same_sense -->
<ext_description linkend="topology_schema.edge_curve.same_sense">
<p>a logical flag which indicates whether (TRUE), or not (FALSE)
    the senses of the <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> and the <express_ref linkend="geometry_schema:ir_express:geometry_schema.curve"/> defining the edge
   geometry  are the same. The sense of an edge is from the edge start vertex to the
  edge end vertex; the sense of a curve is in the direction of increasing parameter. </p>
<note> See Figure 23 for illustration of attributes. </note>

</ext_description>



<!-- IP1 -->
<ext_description linkend="topology_schema.edge_curve.wr:IP1">
	The domain of the <b>edge_curve</b> is formally defined to
	   be the domain of its <b>edge_geometry</b> as trimmed by the vertices. This
 domain does not include the vertices.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.edge_curve.wr:IP2">
	The extent of an <b>edge_curve</b> shall be finite and nonzero.
</ext_description>

<!-- IP3 -->
<ext_description linkend="topology_schema.edge_curve.wr:IP3">
	 An <b>edge_curve</b> is a manifold.
</ext_description>

<!-- IP4 -->
<ext_description linkend="topology_schema.edge_curve.wr:IP4">
	An <b>edge_curve</b> is arcwise connected..
</ext_description>

<!-- IP5 -->
<ext_description linkend="topology_schema.edge_curve.wr:IP5">
	The edge start is not part of the edge domain..
</ext_description>

<!-- IP6 -->
<ext_description linkend="topology_schema.edge_curve.wr:IP6">
	The edge end is not part of the edge domain.
</ext_description>
 
 <!-- IP7 -->
<ext_description linkend="topology_schema.edge_curve.wr:IP7">
	 Vertex geometry shall be consistent with edge geometry.
</ext_description> 


<!-- +++++++++++ oriented_edge +++++++++++ -->
<ext_description linkend="topology_schema.oriented_edge">
<p>	A <b>oriented_edge</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>, constructed from another <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>
  and contains a BOOLEAN orientation flag to indicate whether or not the
  orientation of the constructed <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>
  agrees with the orientation of the original <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>. Except for possible re-orientation,
  the <b>oriented_edge</b> is equivalent to the original <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>. </p>
  <note> A common practice in solid modelling systems   is to have an entity
         that represents the &quot; use&quot; or &quot; traversal &quot; of an
         <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>.  This &quot;use&quot; entity explicitly represents
         the requirement in a manifold solid that each edge must be
         traversed exactly twice, once in each direction.  The &quot;use&quot;
         functionality is provided by the <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> subtype
         <b>oriented_edge</b>.
          </note>

 </ext_description>	

<!-- edge_element -->
<ext_description linkend="topology_schema.oriented_edge.edge_element">
an <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> entity used to construct this <b>oriented_edge</b>;
</ext_description>

<!-- orientation -->
<ext_description linkend="topology_schema.oriented_edge.orientation">
a BOOLEAN, if TRUE, the topological   orientation as used
   coincides with the orientation, from start vertex to end vertex,  of the
  <b>edge_element</b>;
</ext_description>

<!-- edge_start -->
<ext_description linkend="topology_schema.oriented_edge.edge.edge_start">
the start vertex of the oriented edge, this is derived
  from the vertices of the <b>edge_element</b> after taking account of the
  <b>orientation</b>>;
</ext_description>

<!-- edge_end -->
<ext_description linkend="topology_schema.oriented_edge.edge.edge_end">
the end vertex of the oriented edge, this is derived
  from the vertices of the <b>edge_element</b> after taking account of the
  <b>orientation</b>>;
</ext_description>


<!-- WR1 -->
<ext_description linkend="topology_schema.oriented_edge.wr:WR1">
	 The <b>edge_element</b> shall not be an
               <b>oriented_edge</b>.
</ext_description>

<!-- +++++++++++ seam_edge +++++++++++ -->
<ext_description linkend="topology_schema.seam_edge">
<p>	A <b>seam_edge</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/>,  which, additionally,
identifies a corresponding <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>. A <b>seam_edge</b> is always related
to an <express_ref linkend="topology_schema:ir_express:topology_schema.edge_curve"/> having a <express_ref linkend="geometry_schema:ir_express:geometry_schema.seam_curve"/> as <express_ref linkend="topology_schema:ir_express:topology_schema.edge_curve.edge_geometry"/>.
The <express_ref linkend="topology_schema:ir_express:topology_schema.seam_edge"/> identifies which, of the two
<express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>s defining the <express_ref linkend="geometry_schema:ir_express:geometry_schema.seam_curve"/>, is appropriate for
this <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/>.  </p>

<note> The inherited <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge.orientation"/> attribute refers to the relationship to
the <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge.edge_element"/> and not to the sense of the <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>.
</note>
 </ext_description>	

<!-- pcurve_reference -->
<ext_description linkend="topology_schema.seam_edge.pcurve_reference">
the <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/> associated with the current orientation of
 the <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge.edge_element"/>;
</ext_description>



<!-- WR1 -->
<ext_description linkend="topology_schema.seam_edge.wr:WR1">
	the <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge.edge_element"/> attribute of this type of oriented edge shall be
a <express_ref linkend="geometry_schema:ir_express:geometry_schema.seam_curve"/>.
</ext_description>

<!-- WR2 -->
<ext_description linkend="topology_schema.seam_edge.wr:WR2">
	The <b>pcurve_reference</b> shall be one of the <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>s in the
<express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve.associated_geometry"/> list of the <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge.edge_element"/>.
</ext_description>

<!-- +++++++++++ subedge +++++++++++ -->
<ext_description linkend="topology_schema.subedge">
<p>	A <b>subedge</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>,  whose domain is a connected portion of
the domain of an existing <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>.  
The topological constraints on a <b>subedge</b> are the same as those
on an <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>. </p>
 </ext_description>	

<!-- parent_edge -->
<ext_description linkend="topology_schema.subedge.parent_edge">
the <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>, or <b>subedge</b>, which
   contains the <b>subedge</b>.
</ext_description>



<!-- IP1 -->
<ext_description linkend="topology_schema.subedge.wr:IP1">
	The domain of the <b>subedge</b> is formally defined to be the
	  domain of the <b>parent_edge</b>, as trimmed by the
  <b>subedge.edge_start</b> and <b>subedge.edge_end</b>.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.subedge.wr:IP2">
	The <express_ref linkend="topology_schema:ir_express:topology_schema.edge.edge_start"/> and <express_ref linkend="topology_schema:ir_express:topology_schema.edge.edge_end"/> shall be  within the union of the domains of the vertices of the
  <b>parent_edge</b> and  the  domain of the <b>parent_edge</b>.
</ext_description>


<!-- +++++++++++ path +++++++++++ -->
<ext_description linkend="topology_schema.path">
<p>	A <b>path</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/>,  consisting of an ordered
 collection of <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/>s, such that the <express_ref linkend="topology_schema:ir_express:topology_schema.edge.edge_start"/> vertex
 of each edge coincides with the <express_ref linkend="topology_schema:ir_express:topology_schema.edge.edge_end"/> of its predecessor. The path
 is ordered from the <express_ref linkend="topology_schema:ir_express:topology_schema.edge.edge_start"/> of its first <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/> to
 the <express_ref linkend="topology_schema:ir_express:topology_schema.edge.edge_end"/> of its last <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/>. </p>
  <p>   The BOOLEAN value <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge.orientation"/>  in the <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/> indicates
  whether the edge direction agrees with  the direction of the path (TRUE) or is in
   the opposite direction (FALSE). </p>
    
  <p>  An individual <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> can only be referenced once by an individual
    <b>path</b>. </p>

<p>    An <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> can be referenced by multiple <b>path</b>s.
    An <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> can exist independently of a <b>path</b>. </p>
 
 </ext_description>	

<!-- edge_list -->
<ext_description linkend="topology_schema.path.edge_list">
the list of <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/> entities which are
      concatenated together to form this <b>path</b>.;
</ext_description>



<!-- WR1 -->
<ext_description linkend="topology_schema.path.wr:WR1">
	The end vertex of each <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/> shall be the same as the start
     vertex of its successor..
</ext_description>

<!-- IP1 -->
<ext_description linkend="topology_schema.path.wr:IP1">
	 A <b>path</b> has dimensionality 1.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.path.wr:IP2">
	 A <b>path</b> is  arcwise connected.
</ext_description>

<!-- IP3 -->
<ext_description linkend="topology_schema.path.wr:IP3">
	The edges of the path do not intersect except at common vertices.
</ext_description>

<!-- IP4 -->
<ext_description linkend="topology_schema.path.wr:IP4">
	 A path has a finite, non-zero extent.
</ext_description>

<!-- IP5 -->
<ext_description linkend="topology_schema.path.wr:IP5">
	 No <b>path</b> shall include two oriented edges with the same
     edge element and the same orientation..
</ext_description>


<!-- +++++++++++ oriented_path +++++++++++ -->
<ext_description linkend="topology_schema.oriented_path">
<p>	A <b>oriented_path</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.path"/>, constructed from another
   <express_ref linkend="topology_schema:ir_express:topology_schema.path"/> and contains a BOOLEAN orientation flag to indicate whether 
   or not the orientation of the constructed <express_ref linkend="topology_schema:ir_express:topology_schema.path"/> agrees with the 
   orientation of the original <express_ref linkend="topology_schema:ir_express:topology_schema.path"/>. Except for perhaps orientation, 
   the <b>oriented_path</b> is equivalent to the other <express_ref linkend="topology_schema:ir_express:topology_schema.path"/>.
</p>
 
 </ext_description>	

<!-- path_element -->
<ext_description linkend="topology_schema.oriented_path.path_element">
the <express_ref linkend="topology_schema:ir_express:topology_schema.path"/> entity used to construct this
     <b>oriented_path</b>;
</ext_description>

<!-- orientation -->
<ext_description linkend="topology_schema.oriented_path.orientation">
 a BOOLEAN, if TRUE, the topological orientation as used
     coincides with the orientation of the <b>path_element</b>;
</ext_description>

<!-- edge_list -->
<ext_description linkend="topology_schema.oriented_path.path.edge_list">
 the list of <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/>s which form the
   <b>oriented_path</b>; this list is derived from the <b>path_element</b> after
   taking account of the <b>orientation</b> attribute;
</ext_description>

<!-- WR1 -->
<ext_description linkend="topology_schema.oriented_path.wr:WR1">
	The <b>path_element</b> shall not be an <b>oriented_path</b>.
</ext_description>



<!-- +++++++++++ open_path +++++++++++ -->
<ext_description linkend="topology_schema.open_path">
<p>	A <b>open_path</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.path"/>,  such that a
    traversal of the path visits each of its vertices exactly once. In
    particular, the start vertex and end vertex are different.
    An <b>open_path</b> is a graph for which M = 1 and <i><b>G</b><sup>p</sup></i> = 0, so the Euler
    equation (1) reduces in this case to</p>
   <eqn>     (<b><i>V</i></b> - <b><i>E</i></b>) - 1 = 0  &#8195;  &#8195;<a href="eqn3"> (3) </a></eqn>
    
    <p> where <b><i>V</i></b> and <b><i>E</i></b> are the number of unique vertices and
    edges in the path.  Specifically, the topological attributes of a <express_ref linkend="topology_schema:ir_express:topology_schema.path"/>
    shall meet the following constraints: </p>

    <ul>
     <li> The edges in the Path are unique,              
      <eqn> (P)[E] = (P){E}        </eqn>         </li>
     <li> In the list ((P)[E])[V], two vertices appear once only and every
      other vertex appears exactly twice.  </li>
     <li> The graph genus of the path is zero.  </li>
     <li> Equation <a href= "#eqn3">(3)</a> is interpreted as
             <eqn> |((P)[E]){V}| - |(P){E}| - 1 = 0    </eqn> </li>
   </ul>
  
 
 </ext_description>	

<!-- ne -->
<ext_description linkend="topology_schema.open_path.ne">
the number of elements in the edge list of the path supertype;
</ext_description>

<!-- WR1 -->
<ext_description linkend="topology_schema.open_path.wr:WR1">
	The start vertex of the first edge shall not coincide with 
      the end vertex of the last edge.
</ext_description>

<!-- IP1 -->
<ext_description linkend="topology_schema.open_path.wr:IP1">
	An <b>open_path</b> visits its <express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/>s exactly once.
	   This implies that if a list of vertices is constructed from the edge data the
	   first and last vertex will occur once in this list and all other vertices will occur twice.
</ext_description>

<!-- +++++++++++ loop +++++++++++ -->
<ext_description linkend="topology_schema.loop">
<p>	A <b>loop</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/>,  constructed from a single
    vertex, or by stringing together connected (oriented)
    edges, or linear segments  beginning and ending at the same
    vertex.
    A loop has dimensionality 0 or 1. The domain of a 0-dimensional loop 
    is a single point. The domain of a 1-dimensional loop is a connected, 
    oriented curve, but need not be a manifold.  As the loop is a cycle, the
    location of its beginning/ending point is arbitrary. The domain
    of the loop includes its bounds, and  0 &#8804; &#926; &lt; &#8734; </p>

  <p>   A loop is represented by a single vertex, or by an ordered collection of
     <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/>s, or by an ordered collection of
    points. </p>  
  <p>   A loop is a graph, so M and the graph genus G<sup><i>l</i></sup> may be determined by
   the
     graph traversal algorithm. Since M = 1, the Euler equation 
     reduces in this case to  </p> 
     <eqn>       (<b><i>V</i></b> - <i><b>E</b><sub>l</sub></i>) - (1 - G<sup><i>l</i></sup>) = 0  &#8195; &#8195; <a href="eqn4">(4) </a></eqn>
    
    <p> where <b><i>V</i></b> and <b><i>E</i></b>  are the number of unique vertices and
 oriented edges   in the loop and G<sup><i>l</i></sup> is the genus of the loop.
</p>
 
 </ext_description>	



<!-- IP1 -->
<ext_description linkend="topology_schema.loop.wr:IP1">
	A <b>loop</b> has a finite, or, in the case of the <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_loop"/>, zero extent.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.loop.wr:IP2">
	A <b>loop</b> describes a closed (topological) curve with  coincident start and end vertices.
</ext_description>


<!-- +++++++++++ vertex_loop +++++++++++ -->
<ext_description linkend="topology_schema.vertex_loop">
<p>	A <b>vertex_loop</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>,   of zero genus consisting of a
 single <express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/>.
     A <express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/> can exist independently of a <b>vertex_loop</b>.
     The topological data shall satisfy the following constraint: </p>
   <p> Euler equation <a href= "#eqn4"> (4) </a> shall be satisfied </p>
    <eqn>   |(L){V}| - 1 = 0                
</eqn>
 
 </ext_description>	

<!-- loop_vertex -->
<ext_description linkend="topology_schema.vertex_loop.loop_vertex">
the <express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/> which defines the entire
    <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>;
</ext_description>

<!-- IP1 -->
<ext_description linkend="topology_schema.vertex_loop.wr:IP1">
	A <b>vertex_loop</b> has zero extent and dimensionality.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.vertex_loop.wr:IP2">
	The <b>vertex_loop</b> has genus 0.
</ext_description>


<!-- +++++++++++ edge_loop +++++++++++ -->
<ext_description linkend="topology_schema.edge_loop">
<p>	A <b>edge_loop</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>,   with nonzero extent.  It is
  a <express_ref linkend="topology_schema:ir_express:topology_schema.path"/> in which the start and end vertices are the same.   Its
  domain, if present, is a closed curve.   An
 <b>edge_loop</b> may overlap itself.
</p>
 
 </ext_description>	

<!-- ne -->
<ext_description linkend="topology_schema.edge_loop.ne">
the number of elements in the edge list of the <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/> supertype;
</ext_description>

<!-- WR1 -->
<ext_description linkend="topology_schema.edge_loop.wr:WR1">
	The start vertex of the first edge shall be the same as  the  end vertex of the last edge; this ensures that the path is closed to form
 a loop.
</ext_description>


<!-- IP1 -->
<ext_description linkend="topology_schema.edge_loop.wr:IP1">
	The Euler formula  shall be satisfied:   (number of vertices) + genus -  (number of edges) = 1.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.edge_loop.wr:IP2">
	 No <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> may be referenced more than once by the same
  <b>edge_loop</b> with the same  <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge.orientation"/>.
</ext_description>


<!-- +++++++++++ poly_loop +++++++++++ -->
<ext_description linkend="topology_schema.poly_loop">
<p>	A <b>poly_loop</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>,   with straight edges bounding a planar
    region in space.    A <b>poly_loop</b> is a <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/> of genus 1
    where the <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/> is
    represented by an ordered coplanar collection of <express_ref linkend="geometry_schema:ir_express:geometry_schema.point"/>s forming the
    vertices of the loop.  The loop is composed of straight line segments
   joining
    a point in the collection to the succeeding point in the collection. The
    closing segment is from the last to the first point in the collection. The
    direction of the loop is in the direction of the line segments.  Unlike
 the
    <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/> entity, the edges of the <b>poly_loop</b> are implicitly
    defined by the <b>polygon</b> points. </p> 
  
  <note number="1"> This entity exists   primarily to
    facilitate the efficient communication of faceted boundary representation models. 
    </note>

<note number="2"> The <b>poly_loop</b> has vertices and <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/>s
  which are implicitly created.
  If, for example, A and B are consecutive points in the <b>polygon</b>
  list, there is an implicit <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/> from vertex point A to vertex
  point B with orientation value TRUE. It is assumed that when the higher level
  entities such as shell and B-rep require checks on edge usage that this check
  will recognise, for example, a straight oriented edge from point B to point  A
  with orientation TRUE as equal to an oriented edge from A to B with
  orientation FALSE.  </note>
  
    <p>    A <b>poly_loop</b> shall conform to the following topological
    constraints: </p>
    <ul>
    <li> The loop has a genus of one. </li>
  <li> <p> Euler equation (4)  shall be satisfied </p>
     <eqn>  |(L){V}| - |(L){E<sub><i>l</i></sub>}| = 0          </eqn></li>
   </ul>              

 
 </ext_description>	

<!-- polygon -->
<ext_description linkend="topology_schema.poly_loop.polygon">
a list of <express_ref linkend="geometry_schema:ir_express:geometry_schema.point"/>s defining the loop; there are no
   repeated  <express_ref linkend="geometry_schema:ir_express:geometry_schema.point"/>s in the list;
</ext_description>

<!-- IP1 -->
<ext_description linkend="topology_schema.poly_loop.wr:IP1">
	 All the points in the <b>polygon</b> defining the <b>poly_loop</b> shall be coplanar.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.poly_loop.wr:IP2">
	The implicit edges of the <b>poly_loop</b> shall not intersect
	  each other. The implicit edges are the straight lines joining consecutive 
	  <express_ref linkend="geometry_schema:ir_express:geometry_schema.point"/>s  in the <b>polygon</b>.
</ext_description>


<!-- +++++++++++ face_bound +++++++++++ -->
<ext_description linkend="topology_schema.face_bound">
<p>	A <b>face_bound</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/>, and is a loop  which is intended to be used for bounding a face.
</p>
 </ext_description>	

<!-- bound -->
<ext_description linkend="topology_schema.face_bound.bound">
the  <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/> which will be used as a face boundary;
</ext_description>

<!-- orientation -->
<ext_description linkend="topology_schema.face_bound.orientation">
indicates whether (TRUE), or not (FALSE) the loop has the
    same sense when used to bound the face as when first defined; if <b>orientation</b> is
  FALSE, the  senses of all its component oriented edges are implicitly reversed when
  used in the face;
</ext_description>


<!-- +++++++++++ face_outer_bound +++++++++++ -->
<ext_description linkend="topology_schema.face_outer_bound">
<p>	A <b>face_outer_bound</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.face_bound"/>, which
   carries    the additional semantics of defining an outer boundary
    on the face. A <b>face_outer_bound</b> shall separate the
    interior of the <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> from the exterior and shall
    enclose the interior domain of the <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>.</p> 
  <p>  No more than one boundary of a <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> shall be of this type.</p>
<example number="1"> Any <express_ref linkend="topology_schema:ir_express:topology_schema.edge_loop"/> on a plane surface may be used
to define a <b>face_outer_bound</b> provided it is not enclosed in any other loop in the <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>.
</example>
<example number="2"> A circular loop on a cylindrical surface cannot define a
<b>face_outer_bound</b> since it does not enclose a closed domain in the surface.
</example>

 </ext_description>	


<!-- +++++++++++ face +++++++++++ -->
<ext_description linkend="topology_schema.face">
<p>	A <b>face</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/>,   of dimensionality 2 corresponding
 to   the intuitive notion of a piece of surface bounded by loops. Its domain, if
   present, is an oriented, connected, finite 2-manifold in R<sup><i>m</i></sup>. A face
  domain   shall not have handles, but it may have holes, each hole bounded by a loop.
   The domain of the underlying geometry of the face, if present,
   does not contain its bounds, and  0 &lt;  &#926; &lt; &#8734;.
  A face is represented by its bounding loops, which are
    defined as <express_ref linkend="topology_schema:ir_express:topology_schema.face_bound"/>s. A face shall have at least
    one bound, and the bounds shall be distinct and shall not
    intersect. One <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/> is optionally distinguished, using the
    <express_ref linkend="topology_schema:ir_express:topology_schema.face_outer_bound"/> subtype, as the
    &quot;outer&quot; loop of the face.  If so, it establishes a preferred
    way of embedding the face domain in the plane, in which the
    other bounding loops of the face are &quot;inside&quot; the outer
    loop.  Because the face domain is arcwise connected, no inner
    loop shall contain any other loop.  This is true
    regardless of which embedding in the plane is chosen. </p>

 <p>   A geometric <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/> may be associated with the face. This may
    be done explicitly through the <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/> subtype, or
    implicitly if the faces are defined by <express_ref linkend="topology_schema:ir_express:topology_schema.poly_loop"/>s. 
    In the latter  case, the surface is the plane containing the points of
    the <express_ref linkend="topology_schema:ir_express:topology_schema.poly_loop"/>s. In either case, a topological normal
    <b>n</b> is associated with the face, such that the cross
    product <b>n</b>  &#215; <b>t</b>  points toward the interior of
    the face, where <b>t</b> is the tangent to a bounding loop.
    That is, each loop runs counter-clockwise around the face when
    viewed from above, if we consider the normal <b>n</b> to point
    up. Each loop is associated through a <b>face_bound</b> entity
    with a BOOLEAN flag to signify whether the loop direction is
    oriented correctly with respect to the face normal (TRUE) or
    should be reversed (FALSE).
      For a face of the subtype <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/>, the topological
    normal <b>n</b> is defined from the normal of the underlying
    surface, together with the BOOLEAN attribute <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface.same_sense"/>, and
    this in turn, determines on which side of the loop the face
    interior lies, using the cross-product rule described above. </p>

  <p>  When a <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_loop"/> is used as a
    <express_ref linkend="topology_schema:ir_express:topology_schema.face_bound"/> the sense of the topological normal is derived from
    any other bounding loops, or, in the case of a <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/>, from
    the <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface.face_geometry"/> and the <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface.same_sense"/> flag. If the <b>face</b>
    has only one bound and this is of type <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_loop"/>, then the interior
    of the <b>face</b> is the domain of the <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface.face_geometry"/>. In
    such a case the underlying surface shall be closed (such as a spherical surface.) </p>


  <p>  The situation is different for a face on an implicit planar
    surface, such as one defined by <express_ref linkend="topology_schema:ir_express:topology_schema.poly_loop"/>s, which has no
    unique surface normal.  Since the face
    and its bounding loops lie in a plane, the outer loop can
    always be found without ambiguity. Since the face is required
    to be finite, the face interior must lie inside the outer loop,
    and outside each of the remaining loops. These conditions,
    together with the specified loop orientations, define the
    topological normal <b>n</b> using the cross-product rule
    described above. All <express_ref linkend="topology_schema:ir_express:topology_schema.poly_loop"/> orientations for a given
    face shall produce the same value for <b>n</b>. </p>

  <p>  The edges and vertices referenced by the loops of a face form a
    graph, of which the individual loops are the connected
    components. The Euler equation for this graph becomes: </p>
  <eqn>
      (<b><i>V</i></b> - <b><i>E</i></b>) - (<b><i>L</i></b> - &#931;<sup>L</sup><sub><i>i=1</i></sub> (G<i><sub>i</sub><sup>l</sup></i>)) = 0 &#8195; &#8195; &#8195; &#8195;<a href="eqn5"> (5) </a> </eqn>
   
 
   <p> where G<i><sub>i</sub><sup>l</sup></i> is the graph genus of the <i>i</i> th loop. </p>

     <p>  More specifically, the following topological constraints shall be met: </p>
   <ul>
   <li> The loops are unique
          (F){L} = (F)[L]                  </li>
   <li> In the list ((F)[L])[E] an individual edge occurs no more than
  twice.</li>
   <li> Each <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/> shall be unique
     <eqn>    ((F)[L])\{E<i><sub>l</sub></i>} = ((F)[L])[E<i><sub>l</sub></i>] </eqn>   </li>
   <li> <p> Equation <a href="eqn5"> (5) </a> shall be satisfied </p>
     <eqn>  |(((F)[L<i><sup>e</sup></i>]){E}){V}| + |((F)[L<i><sup>v</sup></i>]){V}|
       - |((F)[L]){E}| - |(F)[L]| + &#931;G<sup><i>l</i></sup> = 0     </eqn>        </li>
   </ul>

 
 </ext_description>	

<!-- bounds -->
<ext_description linkend="topology_schema.face.bounds">
<p> boundaries of the <b>face</b>;  no more than one of these shall be a
   <express_ref linkend="topology_schema:ir_express:topology_schema.face_outer_bound"/>;  </p>
   <note>  For some types of closed or  partially  closed surfaces, it may not be possible to identify a unique outer bound. </note>
</ext_description>

<!-- WR1 -->
<ext_description linkend="topology_schema.face.wr:WR1">
	If any loop of the face is a poly loop, all loops of
    the face shall be poly loops.
</ext_description>

<!-- WR2 -->
<ext_description linkend="topology_schema.face.wr:WR2">
	At most, one of the <b>bounds</b> shall be of type
   <express_ref linkend="topology_schema:ir_express:topology_schema.face_outer_bound"/>.
</ext_description>

<!-- IP1 -->
<ext_description linkend="topology_schema.face.wr:IP1">
	No edge shall be referenced by the face more than twice, or, more than once in the same direction.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.face.wr:IP2">
	Distinct <b>face_bound</b>s of the <b>face</b> shall have no  common vertices.
</ext_description>

<!-- IP3 -->
<ext_description linkend="topology_schema.face.wr:IP3">
	If geometry is present, distinct loops of the same face
  shall not intersect.
</ext_description>

<!-- IP4 -->
<ext_description linkend="topology_schema.face.wr:IP4">
<p>	The face shall satisfy the Euler equation (see equation  (5) ): </p>
<p>	    (number of vertices) - (number of edges) - (number of loops) + (sum of genus
   for loops) = 0. </p>
</ext_description>

<!-- IP5 -->
<ext_description linkend="topology_schema.face.wr:IP5">
	Each <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/> referred to in <b>bounds</b> shall be
   unique.
</ext_description>

    
<!-- +++++++++++ face_surface +++++++++++ -->
<ext_description linkend="topology_schema.face_surface">
<p>	A <b>face_surface</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.face"/>,   in which the geometry
 is  defined by an associated <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/>.
   The portion of the surface used by the face shall be embeddable in the
   plane as an open
   disk, possibly with holes.  However, the
   union of the face with the edges and vertices of its bounding loops
   need not be embeddable in the plane. It may, for example, cover an
   entire sphere or torus.
  As both a face and a geometric surface have
   defined normal directions, a BOOLEAN flag (the orientation attribute) is
 used
  to indicate
   whether the surface normal
   agrees with (TRUE) or is opposed to (FALSE) the face normal direction.
     The geometry associated with any component of the loops of the face shall
   be consistent with the surface geometry, in the sense that the domains
   of all the vertex points and edge curves are contained in the face
   geometry surface.
   A <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface"/> may be referenced by more than one 
   <b>face_surface</b>.

</p>
 
 </ext_description>	

<!-- face_geometry -->
<ext_description linkend="topology_schema.face_surface.face_geometry">
the surface which defines the internal shape of the face; this surface may be unbounded; the domain of the face is defined by
  this surface and the bounding loops in the inherited
  attribute <express_ref linkend="topology_schema:ir_express:topology_schema.face.bounds"/>;
</ext_description>

<!-- same_sense -->
<ext_description linkend="topology_schema.face_surface.same_sense">
flag indicates whether the sense of
    the surface normal agrees with (TRUE), or opposes (FALSE), the
    sense of the topological normal to the <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>;
</ext_description>

<!-- WR1 -->
<ext_description linkend="topology_schema.face_surface.wr:WR1">
	An <express_ref linkend="geometry_schema:ir_express:geometry_schema.oriented_surface"/> shall not be used to define the
  <b>face_geometry</b>.
</ext_description>


<!-- IP1 -->
<ext_description linkend="topology_schema.face_surface.wr:IP1">
	The domain of the <b>face_surface</b> is formally defined to be
	   the domain of its <b>face_geometry</b> as trimmed by the loops, this
 domain does not include the bounding loops.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.face_surface.wr:IP2">
	 A <b>face_surface</b> has nonzero finite extent.
</ext_description>

<!-- IP3 -->
<ext_description linkend="topology_schema.face_surface.wr:IP3">
	A <b>face_surface</b> is a manifold.
</ext_description>

<!-- IP4 -->
<ext_description linkend="topology_schema.face_surface.wr:IP4">
	 A <b>face_surface</b> is arcwise connected.
</ext_description>

<!-- IP5 -->
<ext_description linkend="topology_schema.face_surface.wr:IP5">
	A <b>face_surface</b> has surface genus 0.
</ext_description>

<!-- IP6 -->
<ext_description linkend="topology_schema.face_surface.wr:IP6">
	The loops are not part of the face domain.
</ext_description>

<!-- IP7 -->
<ext_description linkend="topology_schema.face_surface.wr:IP7">
	 Loop geometry shall be consistent with face geometry.
	    This implies that any <express_ref linkend="topology_schema:ir_express:topology_schema.edge_curve"/>s or
	    <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_point"/>s used in defining the loops bounding the
   <b>face_surface</b> shall lie on the <b>face_geometry</b>.
</ext_description>

<!-- IP8 -->
<ext_description linkend="topology_schema.face_surface.wr:IP8">
	The loops of the face shall not intersect.
</ext_description>

<!-- +++++++++++ oriented_face +++++++++++ -->
<ext_description linkend="topology_schema.oriented_face">
<p>	A <b>oriented_face</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.face"/>,   which contains an additional
    orientation BOOLEAN flag to indicate whether, or not, the sense of the
  oriented face agrees with its sense as originally
    defined in the face element.

</p>
 
 </ext_description>	

<!-- face_element -->
<ext_description linkend="topology_schema.oriented_face.face_element">
 a <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> entity used to construct this
        <b>oriented_face</b>.;
</ext_description>

<!-- orientation -->
<ext_description linkend="topology_schema.oriented_face.orientation">
 the relationship of the topological orientation of this
   entity to that of the <b>face_element</b>; if TRUE, the topological
  orientation as used  coincides with the orientation of the <b>face_element</b>;
</ext_description>

<!-- bounds -->
<ext_description linkend="topology_schema.oriented_face.face.bounds">
 the bounds of the <b>oriented_face</b> are derived from those
 of   the <b>face_element</b> after taking account of the orientation which may
  reverse the direction of these bounds;
</ext_description>

<!-- WR1 -->
<ext_description linkend="topology_schema.oriented_face.wr:WR1">
	The <b>face_element</b> shall not be an <b>oriented_face</b>.
</ext_description>

<!-- +++++++++++ subface +++++++++++ -->
<ext_description linkend="topology_schema.subface">
<p>	A <b>subface</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.face"/>,   which is a portion of the domain of a <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>, or another <b>subface</b>.
       The topological constraints on a <b>subface</b> are the same as on a
    <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>.
</p>
 
 </ext_description>	

<!-- parent_face -->
<ext_description linkend="topology_schema.subface.parent_face">
 the <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>, (or <b>subface</b>) which
   contains the  <b>subface</b> being defined by 
   <express_ref linkend="topology_schema:ir_express:topology_schema.face.bounds"/>;
</ext_description>


<!-- WR1 -->
<ext_description linkend="topology_schema.subface.wr:WR1">
	The type of <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s in the <b>subface</b> shall match the
   type  of <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s in the <b>parent_face</b> entity.
</ext_description>

<!-- IP1 -->
<ext_description linkend="topology_schema.subface.wr:IP1">
	The domain of the <b>subface</b> is formally defined to be the
  domain of the parent face, as trimmed by the loops of the subface.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.subface.wr:IP2">
	All loops of the subface shall be contained in the union of the
	  domain of the parent face and the domains of the parent face's bounding
  loops.
</ext_description>

<!-- +++++++++++ connected_face_set +++++++++++ -->
<ext_description linkend="topology_schema.connected_face_set">
<p>	A <b>connected_face_set</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/>,   which is a set of 
	<express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s such that the    domain
    of the faces together with their bounding edges and vertices is connected.
</p>
 
 </ext_description>	

<!-- cfs_faces -->
<ext_description linkend="topology_schema.connected_face_set.cfs_faces">
 a set of <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s arcwise connected along common
    <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s or <express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/>s.;
</ext_description>


<!-- IP1 -->
<ext_description linkend="topology_schema.connected_face_set.wr:IP1">
	The union of the domains of the <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s and their bounding
 <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s shall be arcwise connected.
</ext_description>

<!-- +++++++++++ subface +++++++++++ -->
<ext_description linkend="topology_schema.subface">
<p>	A <b>subface</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.face"/>,   which is a portion of the domain of a <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>, or another <b>subface</b>.
       The topological constraints on a <b>subface</b> are the same as on a
    <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>.
</p>
 
 </ext_description>	

<!-- parent_face -->
<ext_description linkend="topology_schema.subface.parent_face">
 the <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>, (or <b>subface</b>) which
   contains the  <b>subface</b> being defined by 
   <express_ref linkend="topology_schema:ir_express:topology_schema.face.bounds"/>;
</ext_description>


<!-- WR1 -->
<ext_description linkend="topology_schema.subface.wr:WR1">
	The type of <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s in the <b>subface</b> shall match the
   type  of <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s in the <b>parent_face</b> entity.
</ext_description>

<!-- IP1 -->
<ext_description linkend="topology_schema.subface.wr:IP1">
	The domain of the <b>subface</b> is formally defined to be the
  domain of the parent face, as trimmed by the loops of the subface.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.subface.wr:IP2">
	All loops of the subface shall be contained in the union of the
	  domain of the parent face and the domains of the parent face's bounding
  loops.
</ext_description>

<!-- +++++++++++ vertex_shell +++++++++++ -->
<ext_description linkend="topology_schema.vertex_shell">
<p>	A <b>vertex_shell</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/>,   which is a 
	<express_ref linkend="topology_schema:ir_express:topology_schema.shell"/> consisting of a single
     <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_loop"/>. </p>
    <p> A <b>vertex_shell_extent</b> shall be unique. </p>

   <p>  A <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_loop"/> can only be used by a single <b>vertex_shell</b>. </p>

   <p>   A <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_loop"/> can exist independently of a <b>vertex_shell</b>  </p>

 
 </ext_description>	

<!-- vertex_shell_extent -->
<ext_description linkend="topology_schema.vertex_shell.vertex_shell_extent">
 a single <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_loop"/> which
     constitutes the extent of this type of <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>;
</ext_description>



<!-- IP1 -->
<ext_description linkend="topology_schema.vertex_shell.wr:IP1">
	The extent and dimensionality of a <b>vertex_shell</b> are
 both zero..
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.vertex_shell.wr:IP2">
	The genus of a <b>vertex_shell</b> is 0.
</ext_description>

<!-- +++++++++++ wire_shell +++++++++++ -->
<ext_description linkend="topology_schema.wire_shell">
<p>	A <b>wire_shell</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/>,   which is a 
	<express_ref linkend="topology_schema:ir_express:topology_schema.shell"/> of dimensionality 1. A <b>wire_shell</b>
 can be regarded as a graph constructed of vertices and edges. However, it is not
    represented directly as a graph, but indirectly, as a set of loops. It is
   the  union of the vertices and edges of these loops that form the graph. The
    domain of a wire shell, if present, is typically not a manifold.</p>

   <p> Two restrictions are placed on the structure of a wire shell. </p>
    
     <p> (a) The graph as a whole shall be connected. </p>
    <p>(b)  Each edge in the graph shall be referenced exactly twice by the set of loops. </p>
    

  <note number="1">
  Two main applications of wire shells are contemplated.</note>

     <note number="2"> Any connected graph can be written as a single loop obeying
      condition (b) by using the graph traversal algorithm.
      Such a graph may serve as a bound for a region. </note>
      
     <note number="3"> The set of loops referenced by the faces of a closed shell
      automatically obey condition (b), but need not be
    connected.
      However, the faces of a closed shell can always be subdivided in such a
   way
      that their loops form a connected graph, and hence a wire shell. Thus,
   wire
      shells can represent the ``one-dimensional skeleta'' of closed
    shells. </note>

   <p> Writing G<sup><i>w</i></sup> for the graph genus, and setting the number of connected
    components M =1, the Euler graph equation becomes: </p>
   <eqn>
         (<b><i>V</i></b> - <b><i>E</i></b>) - (1 -G<sup><i>w</i></sup>) = 0  &#8195; &#8195; &#8195; &#8195;<a href="eqn6">(6) </a>
    </eqn>

    <p>   More specifically, the following topological constraints shall be met: </p>
    <ul>
    <li> The loops shall be unique.
   <eqn>  (S<sup><i>w</i></sup>){L} = (S<sup><i>w</i></sup>)[L]    </eqn>   </li>            
    <li><p> Each edge shall either be referenced by two loops, or twice by a
   single
    loop. That is, in the list ((S<sup><i>w</i></sup>)[L])[E], each edge appears exactly
   twice. </p>
       <eqn>  |((S<sup><i>w</i></sup>)[L])[E]| = 2|((S<sup><i>w</i></sup>)[L]){E}|   </eqn> </li> 
    <li> Each oriented edge shall be unique.
     <eqn>   ((S<sup><i>w</i></sup>)[L]){E<sub><i>l</i></sub>} = ((S<sup><i>w</i></sup>)[L])[E<sub><i>l</i></sub>] </eqn> </li> 
    <li><p>Equation <a href="#eqn6"> (6) </a> shall be satisfied. </p>
      <eqn> |(((S<sup><i>w</i></sup>)[L]){E}){V}| - |((S<sup><i>w</i></sup>)[L]){E}| - 1 +G<sup><i>w</i></sup> = 0  </eqn></li> 
   </ul>


 
 </ext_description>	

<!-- wire_shell_extent -->
<ext_description linkend="topology_schema.wire_shell.wire_shell_extent">
 a list of <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s defining the
    <b>wire_shell</b>;
</ext_description>


<!-- WR1 -->
<ext_description linkend="topology_schema.wire_shell.wr:WR1">
	The loops making up the wire shell shall not be a mixture of
  <express_ref linkend="topology_schema:ir_express:topology_schema.poly_loop"/>s and other loop types.
</ext_description>

<!-- IP1 -->
<ext_description linkend="topology_schema.wire_shell.wr:IP1">
	The <b>wire_shell</b> has dimensionality 1.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.wire_shell.wr:IP2">
	The extent of the <b>wire_shell</b> is finite and greater than 0.
</ext_description>

<!-- IP3 -->
<ext_description linkend="topology_schema.wire_shell.wr:IP3">
	 Each edge appears precisely twice in the wire shell with opposite orientations.
</ext_description>

<!-- IP4 -->
<ext_description linkend="topology_schema.wire_shell.wr:IP4">
	The Euler equation shall be satisfied.
</ext_description>

<!-- IP5 -->
<ext_description linkend="topology_schema.wire_shell.wr:IP5">
	The <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s defining the <b>wire_shell_extent</b> do
     not intersect except at common <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s or 
     <express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/>s.
</ext_description>

<!-- +++++++++++ open_shell +++++++++++ -->
<ext_description linkend="topology_schema.open_shell">
<p>	An <b>open_shell</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.connected_face_set"/>,   which is a 
	<express_ref linkend="topology_schema:ir_express:topology_schema.shell"/> of dimensionality 2. Its
    domain, if present, is a finite, connected, oriented, 2-manifold
    with boundary, but is not a closed surface. It can be thought of as a 
    <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/> with 
    one or more holes punched in it. The domain of an open shell
    satisfies 0 &lt; &#926;  &lt;  &#8734;.  An open shell is
    functionally more general than a <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> because its domain can have 
    handles.

    The shell is defined by a collection of <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s, which may be
    <b>oriented_face</b>s. The sense of each face, after taking account of 
    the orientation, shall agree with the shell normal as defined below.  
    The <b>orientation</b>  can be supplied directly as a BOOLEAN
    attribute of an <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_face"/>, or be defaulted to TRUE if the
    shell member is a <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> without the orientation
    attribute. </p>

    <p>The following combinatorial restrictions on open shells and geometrical
    restrictions on their domains are designed, together with the informal
    propositions,  to ensure that any domain
    associated with an open shell is an orientable manifold. </p>
    <ul>
     <li> Each face reference shall be unique. </li>
     <li> An <b>open_shell</b> shall have at least one <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>. </li>
     <li> A given <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> may exist in more than one <b>open_shell</b>. </li>
    </ul>
 <p> The boundary of an open shell consists of the edges that are
    referenced only once by the <express_ref linkend="topology_schema:ir_express:topology_schema.face_bound"/>s (loops) of its faces, together with all of their  vertices. The domain of an open shell, if present,  contains
     all edges and vertices of its faces. </p>
   
   <note>  Note that this is slightly different from the definition of a face
    domain, which includes none of its bounds. For example, a face domain 
    may exclude an isolated point or line segment. An open shell domain may 
    not. (See the algorithm for computing <i><b>B</b></i> below.) </note>

  <p>  The surface genus and topological normal of an open shell are
    those that would be obtained by filling in the holes in its domain to
    produce a closed shell. The topological normal can also be derived from 
    the face normals after taking account of their orientation. The following
    Euler equation is satisfied by open shells.  It is the most general form 
    of Euler equation for connected, orientable surfaces. </p>
    <eqn>
        (<b><i>V</i></b> - <b><i>E</i></b> - <i><b>L</b><sub>l</sub></i> + 2<i><b>F</b></i>) - (2 - 2H - <i><b>B</b></i>) = 0
                                                           &#8195; &#8195;    <a href="eqn7">(7) </a>
   </eqn>
    
   <p> where <b><i>V</i></b>, <b><i>E</i></b>, <i><b>L</b><sub>l</sub></i>, <i><b>F</b></i> are, respectively, the
    numbers of distinct vertices, edges,  face bounds, and faces, H is the surface
    genus, and <i><b>B</b></i> is the number of holes. <i><b>B</b></i> can be 
    determined directly from the graph of edges and vertices defining the 
    bounds of the face, in the following manner:</p>
    <p>     Delete all edges from the graph that are referenced twice by the
       face bounds of the face. </p>
     <p> Delete all vertices that have no associated edges. </p>
     <p> Compute <i><b> B</b></i> = the genus of the resulting graph.</p>

   <p> If known a priori, the surface genus H may be used to check
    equation <a href="#eqn7"> (7) </a> as an exact equality. Typically, this will not 
    be the case, so equation <a href="#eqn7"> (7) </a> or some equivalent formulation 
    shall be used to compute the genus. Since H shall be a non-negative 
    integer, this leads to the following inequality, a necessary condition 
    for well-formed open shells. </p>
   <eqn>
     <b><i>V</i></b> - <b><i>E</i></b> - <i><b>L</b><sub>l</sub></i> + <i><b>B</b></i>  shall be even and &#8804; 
                          2-2<i><b>F</b></i> &#8195; &#8195;    <a href="eqn8">(8) </a> </eqn>
   
     <p>   Specifically, the following topological constraints shall be met: </p>
    <ul>
    <li> Each face in the shell is unique.
      <i>  (S<sup>o</sup>){F} = (S<sup>o</sup>)[F]    </i>       </li>
    <li> Each  face bound in the shell is unique.
     <eqn> <i>  ((S<sup>o</sup>)[F]){ L<sub>l</sub>} = ((S<sup>o</sup>)[F])[ L<sub>l</sub>] </i> </eqn> </li>
    <li> Each  <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/> in the shell is unique.
    <eqn> <i> ((S<sup>o</sup>)[F])[ L<sub>l</sub>]){E<sub>l</sub>} = ((S<sup>o</sup>)[F])[L<sub>l</sub>])[E<sub>l</sub>]  </i> </eqn> </li>
    <li>In the list <i>(((S<sup>o</sup>)[F])[ L<sub>l</sub>])[E]</i> there is at least one edge that
      only appears once and no edges appear more than twice; the singleton 
      edges are on the boundary of the shell. </li>
    <li> <p>The Euler condition <a href="#eqn8"> (8) </a>, and  equation <a href="#eqn7"> (7) </a>
     shall be satisfied. </p>
     
 <eqn>   <i>   |((((S<sup>o</sup>)[F]){ L<sub>l</sub><sup>e</sup>}){E\}){V\}| + |(((S<sup>o</sup>)[F]){ L<sub>l</sub><sup>v</sup>}){V}|
     - |(((S<sup>o</sup>)[F]){L<sub>l</sub>})\{E\}| </i> </eqn> 
     <eqn><i> - |((S<sup>o</sup>)[F])[ L<sub>l</sub>]| + B </i> is even and  &#8804;  <i>2 - 2|(S<sup>o</sup>)[F]| </i> </eqn>
    <eqn> <i>
     2 - 2H - B  =  |((((S<sup>o</sup>)[F]){ L<sub>l</sub><sup>e0</sup>){E}){V}| +
    |(((S<sup>o</sup>)[F]){ L<sub>l</sub><sup>v</sup>}){V}| </i> </eqn>
       <eqn><i> - |(((S<sup>o</sup>)[F]){ L<sub>l</sub>}){E}| - |((S<sup>o</sup>)[F])[ L<sub>l</sub>]| + 2|(S<sup>o</sup>)[F]|
    </i>       </eqn> </li>
    </ul>
</ext_description>


<!-- IP1 -->
<ext_description linkend="topology_schema.open_shell.wr:IP1">
	Every <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> shall be referenced at least once, but no more than
    twice by the <express_ref linkend="topology_schema:ir_express:topology_schema.face_bound"/>s of the 
    <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s.>s.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.open_shell.wr:IP2">
	Each <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/> reference shall be unique.
</ext_description>

<!-- IP3 -->
<ext_description linkend="topology_schema.open_shell.wr:IP3">
	 No <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> may be referenced by more than two <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s.
</ext_description>

<!-- IP4 -->
<ext_description linkend="topology_schema.open_shell.wr:IP4">
	 Distinct <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s of the shell do not intersect, but may share
     edges, or vertices.
</ext_description>

<!-- IP5 -->
<ext_description linkend="topology_schema.open_shell.wr:IP5">
	  Distinct <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s do not intersect, but may share vertices.
</ext_description>

<!-- IP6 -->
<ext_description linkend="topology_schema.open_shell.wr:IP6">
	 The Euler equation shall be satisfied.
</ext_description>

<!-- IP7 -->
<ext_description linkend="topology_schema.open_shell.wr:IP7">
	The <b>open_shell</b> shall be an oriented arcwise connected  2-manifold.
</ext_description>

<!-- IP8 -->
<ext_description linkend="topology_schema.open_shell.wr:IP8">
	The <b>open_shell</b> shall contain at least one hole.
</ext_description>

<!-- IP9 -->
<ext_description linkend="topology_schema.open_shell.wr:IP9">
	The topological normal to each <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> of the
	   <b>open_shell</b> shall be consistent with the topological normal to the <b>open_shell</b>.

</ext_description>

<!-- +++++++++++ oriented_open_shell +++++++++++ -->
<ext_description linkend="topology_schema.oriented_open_shell">
<p>	A <b>oriented_open_shell</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.open_shell"/>,   constructed from
  another <express_ref linkend="topology_schema:ir_express:topology_schema.open_shell"/> and contains a BOOLEAN direction flag to
  indicate whether or not the orientation of the constructed
  <express_ref linkend="topology_schema:ir_express:topology_schema.open_shell"/> agrees with the orientation of the original 
  <express_ref linkend="topology_schema:ir_express:topology_schema.open_shell"/>. Except for perhaps orientation, the 
  <b>oriented_open_shell</b> is equivalent to the original 
  <express_ref linkend="topology_schema:ir_express:topology_schema.open_shell"/>.
</p>
 
 </ext_description>	

<!-- open_shell_element -->
<ext_description linkend="topology_schema.oriented_open_shell.open_shell_element">
 the <express_ref linkend="topology_schema:ir_express:topology_schema.open_shell"/>,  which defines the faces of the
   <b>oriented_open_shell</b>;
</ext_description>

<!-- orientation -->
<ext_description linkend="topology_schema.oriented_open_shell.orientation">
 the relationship between the orientation of the <b>oriented_open_shell</b> being defined and the
   <b>open_shell_element</b>  referenced;
</ext_description>

<!-- cfs_faces -->
<ext_description linkend="topology_schema.oriented_open_shell.connected_face_set.cfs_faces">
 the set of faces for the <b>oriented_open_shell</b>,
   obtained from those of the  <b>open_shell_element</b> after possibly  reversing their orientation.;
</ext_description>

<!-- WR1 -->
<ext_description linkend="topology_schema.oriented_open_shell.wr:WR1">
	The type of <b>open_shell_element</b> shall not be
              an <b>oriented_open_shell</b>.
</ext_description>



<!-- +++++++++++ closed_shell +++++++++++ -->
<ext_description linkend="topology_schema.closed_shell">
<p>	A <b>closed_shell</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.connected_face_set"/>, which is a 
	<express_ref linkend="topology_schema:ir_express:topology_schema.shell"/> of dimensionality 2 which
    typically serves as a bound for a region in R<sup>3</sup>. A closed shell has 
    no boundary, and has non-zero finite extent.  If the shell has a domain 
    with coordinate space R<sup>3</sup>, it divides that space into two connected 
    regions, one finite and the
    other infinite. In this case, the topological normal of the shell is
    defined as being directed from the finite to the infinite region. </p>
    <p>The shell is defined by a collection of <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s, which may be
    <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_face"/>s. The sense of each face, after taking account of 
    the orientation, shall agree with the shell normal as defined above.
    The <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_face.orientation"/>  can be supplied directly as a BOOLEAN
    attribute of an <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_face"/>, or be defaulted to TRUE if the
    shell  member is a <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> without the orientation
    attribute. </p>
    <p>The combinatorial restrictions on closed shells and
    geometrical restrictions on their domains  ensure that any
    domain associated with a closed shell is a closed, orientable manifold.
    The domain of a closed shell, if present, is a connected, closed,
    oriented 2-manifold. It is always topologically equivalent to an 
    H-fold torus for some H &#8805; 0. The number H is referred to as the 
    {<it>surface genus</it> of
    the shell. If a shell of genus H has a domain with coordinate space
    R<sup>3</sup>, the finite region of space inside it is topologically
    equivalent to a solid ball with H tunnels drilled through it. </p>

  <p>  The surface Euler equation <a href="#eqn7"> (7) </a> applies with <i><b>B</b></i> = 0,
    because in this case there are no holes. As in the case of 
    <express_ref linkend="topology_schema:ir_express:topology_schema.open_shell"/>s, the surface genus H may not be known a priori, 
    but shall be an integer &#8805; 0. </p>
  <p>  Thus a necessary, but not sufficient, condition for a well-formed closed
    shell is the following: </p>
   <eqn>
     <b><i>V</i></b> - <b><i>E</i></b> - <i><b>L</b><sub>l</sub></i>  shall be even and &#8804;  2 - 2<b><i>F</i></b>
   &#8195; &#8195;    <a href="eqn9">(9) </a> </eqn>
    
    <p>   Specifically, the following topological constraints shall be met: </p>
    <ul>
    <li> Each face in the shell is unique.
      <i>  (S<sup>c</sup>){F} = (S<sup>c</sup>)[F]    </i>       </li>
    <li> Each  face bound in the shell is unique.
      <i>  ((S<sup>c</sup>)[F]){ L<sub>l</sub>} = ((S<sup>c</sup>)[F])[ L<sub>l</sub>] </i>  </li>
    <li><p> Each  <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/> in the shell is unique. </p>
    <eqn> <i> ((S<sup>c</sup>)[F])[ L<sub>l</sub>]){E<sub>l</sub>} = ((S<sup>c</sup>)[F])[L<sub>l</sub>])[E<sub>l</sub>]  </i> </eqn> </li>
  <li><p> Each edge in the shell is either used by exactly two face bounds or is
      used twice by one face bound.</p>
     <eqn><i>  |(((S<sup>c</sup>)[F])[L<sub>l</sub>])\{E<sub>l</sub>}| = 2|(((S<sup>c</sup>)[F])[L<sub>l</sub>]){E}|  </i> </eqn>
     <p> That is, in the list (((S<sup>c</sup>)[F])[L<sub>l</sub>])[E] each edge appears
      exactly twice. </p></li>
    <li><p> The Euler conditions <a href="#eqn9"> (9) </a>, or optionally <a href="#eqn7"> (7) </a>
     shall be satisfied. </p>
  <eqn>   <i>
     2 - 2H  =  |((((S<sup>c</sup>)[F]){ L<sub>l</sub><sup>e0</sup>){E}){V}| +
    |(((S<sup>c</sup>)[F]){ L<sub>l</sub><sup>v</sup>}){V}| </i> </eqn>
       <eqn><i> - |(((S<sup>c</sup>)[F]){ L<sub>l</sub>}){E}| - |((S<sup>c</sup>)[F])[ L<sub>l</sub>]| + 2|(S<sup>c</sup>)[F]|
    </i> </eqn> 
     <i> <eqn> |((((S<sup>c</sup>)[F]){ L<sub>l</sub><sup>e</sup>}){E\}){V\}| + |(((S<sup>c</sup>)[F]){ L<sub>l</sub><sup>v</sup>}){V}|
          - |(((S<sup>c</sup>)[F]){L<sub>l</sub>}){E}| </eqn> </i>
          <eqn> <i> - |((S<sup>c</sup>)[F])[ L<sub>l</sub>]| + B </i> is even and  &#8804;  <i>2 - 2|(S<sup>c</sup>)[F]| </i> </eqn>
    </li> 
    </ul>

 </ext_description>	



<!-- IP1 -->
<ext_description linkend="topology_schema.closed_shell.wr:IP1">
	Every <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> shall be referenced exactly twice by the 
<express_ref linkend="topology_schema:ir_express:topology_schema.face_bound"/>>s of the faces.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.closed_shell.wr:IP2">
	 Each <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/> reference shall be unique.
</ext_description>

<!-- IP3 -->
<ext_description linkend="topology_schema.closed_shell.wr:IP3">
	No <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> shall be referenced by more than two 
	<express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s.
</ext_description>

<!-- IP4 -->
<ext_description linkend="topology_schema.closed_shell.wr:IP4">
	Distinct <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s of the shell do not intersect, but may share
       edges, or vertices.
</ext_description>

<!-- IP5 -->
<ext_description linkend="topology_schema.closed_shell.wr:IP5">
	Distinct <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s do not intersect, but may share vertices.
</ext_description>


<!-- IP6 -->
<ext_description linkend="topology_schema.closed_shell.wr:IP6">
	Each <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> reference shall be unique.
</ext_description>

<!-- IP7 -->
<ext_description linkend="topology_schema.closed_shell.wr:IP7">
	 The <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s of the shell> shall not be a mixture
      of <express_ref linkend="topology_schema:ir_express:topology_schema.poly_loop"/>s and other <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/> types.
</ext_description>

<!-- IP8 -->
<ext_description linkend="topology_schema.closed_shell.wr:IP8">
	The <b>closed_shell</b> shall be an oriented arcwise 
      connected-manifold.
</ext_description>

<!-- IP9 -->
<ext_description linkend="topology_schema.closed_shell.wr:IP9">
	The Euler equation shall be satisfied.
</ext_description>

<!-- IP10 -->
<ext_description linkend="topology_schema.closed_shell.wr:IP10">
	The topological normal to each <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> of the
   <b>closed_shell</b> shall be consistent with the topological normal to
   the <b>closed_shell</b>. This implies that the topological normal to
   each <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>, after taking account of orientation, if present,
   shall point from the finite region bounded by the
   <b>closed_shell</b> into the infinite region outside.
</ext_description>


<!-- +++++++++++ oriented_closed_shell +++++++++++ -->
<ext_description linkend="topology_schema.oriented_closed_shell">
<p>	A <b>oriented_closed_shell</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/>,   constructed from
  another <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/> and contains a BOOLEAN direction flag to
  indicate whether or not the orientation of the constructed
  <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/> agrees with the orientation of the original 
  <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/>. Except for perhaps orientation, the 
  <b>oriented_closed_shell</b> is equivalent to the original 
  <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/>.
</p>
 
 </ext_description>	

<!-- closed_shell_element -->
<ext_description linkend="topology_schema.oriented_closed_shell.closed_shell_element">
 the <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/>,  which defines the faces of the
   <b>oriented_closed_shell</b>;
</ext_description>

<!-- orientation -->
<ext_description linkend="topology_schema.oriented_closed_shell.orientation">
 the relationship between the orientation of the <b>oriented_closed_shell</b> being defined and the
   <b>closed_shell_element</b>  referenced;
</ext_description>

<!-- cfs_faces -->
<ext_description linkend="topology_schema.oriented_closed_shell.connected_face_set.cfs_faces">
 the set of faces for the <b>oriented_closed_shell</b>,
   obtained from those of the  <b>closed_shell_element</b> after possibly  reversing their orientation.;
</ext_description>

<!-- WR1 -->
<ext_description linkend="topology_schema.oriented_closed_shell.wr:WR1">
	The type of <b>closed_shell_element</b> shall not be
              an <b>oriented_closed_shell</b>.
</ext_description>

<!-- +++++++++++ connected_face_sub_set +++++++++++ -->
<ext_description linkend="topology_schema.connected_face_sub_set">
<p>	A <b>connected_face_sub_set</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.connected_face_set"/>,   whose
domain is a connected portion of the domain of an existing <express_ref linkend="topology_schema:ir_express:topology_schema.connected_face_set"/>.
As a complex subtype an instance of <b>connected_face_sub_set</b> may
also be of type <express_ref linkend="topology_schema:ir_express:topology_schema.open_shell"/>, or, if appropriate,
<express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/>. The bounding loops of the faces of the
<b>connected_face_sub_set</b> may reference <express_ref linkend="topology_schema:ir_express:topology_schema.subedge"/>s.
The topological constraints on a <b>connected_face_sub_set</b> are the same
as on an <express_ref linkend="topology_schema:ir_express:topology_schema.connected_face_set"/>.
</p>
 
 </ext_description>	

<!-- parent_face_set -->
<ext_description linkend="topology_schema.connected_face_sub_set.parent_face_set">
 the <express_ref linkend="topology_schema:ir_express:topology_schema.connected_face_set"/>,  which
   contains the <b>connected_face_sub_set</b>; the
   <b>parent_face_set</b> may be of type <express_ref linkend="topology_schema:ir_express:topology_schema.open_shell"/> or of type
   <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/>.
</ext_description>

<!-- orientation -->
<ext_description linkend="topology_schema.connected_face_sub_set.orientation">
 the relationship between the orientation of the <b>connected_face_sub_set</b> being defined and the
   <b>closed_shell_element</b>  referenced;
</ext_description>

<!-- cfs_faces -->
<ext_description linkend="topology_schema.connected_face_sub_set.cfs_faces">
 the set of faces for the <b>connected_face_sub_set</b>,
   obtained from those of the  <b>closed_shell_element</b> after possibly  reversing their orientation.;
</ext_description>

<!-- IP1 -->
<ext_description linkend="topology_schema.connected_face_sub_set.wr:IP1">
	The domain of the <b>connected_face_sub_set</b> shall be
  within the  domain of the <b>parent_face_set</b>.
</ext_description>

<!-- +++++++++++ connected_edge_set +++++++++++ -->
<ext_description linkend="topology_schema.connected_edge_set">
<p>	A <b>connected_edge_set</b> is a type of
	<express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/>,  and  is a set  of 
	<express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s such that the
    domain of the edges together with their bounding vertices is arcwise connected.
</p>
 
 </ext_description>	

<!-- ces_edges -->
<ext_description linkend="topology_schema.connected_edge_set.ces_edges">
 a set of <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s arcwise connected at common
    <express_ref linkend="topology_schema:ir_express:topology_schema.vertex"/>s;
</ext_description>


<!-- IP1 -->
<ext_description linkend="topology_schema.connected_edge_set.wr:IP1">
	The dimensionality of the <b>connected_edge_set</b> is 1.
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.connected_edge_set.wr:IP2">
	The domains of the edges of the <b>connected_edge_set</b>
 shall not intersect.
</ext_description>

<!-- isogeometry additions 2013   -->

<!-- +++++++++++ volume_with_faces +++++++++++ -->
<ext_description linkend="topology_schema.volume_with_faces">
<p>	A <b>volume_with_faces</b> is a type of <express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/> and an explicitly defined solid, in contrast to a boundary representation solid, which is implicitly defined by its boundaries. The volume is limited by faces, which provide means for representation of adjacency information and which allow the subtypes of this entity to take part in a <express_ref linkend="topology_schema:ir_express:topology_schema.connected_volume_set"/>. The geometry of a <b>volume_with_faces</b> is defined by an associated <express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/>. The portion of the volume used by <b>the volume_with_faces</b> shall be embeddable in the <b>volume_with_faces</b>. The geometry associated with any component of the faces of the <b>volume_with_faces</b> shall be consistent with the volume geometry, in the sense that the domains of all the <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_ point"/>s, <express_ref linkend="topology_schema:ir_express:topology_schema.edge_curve"/>s and <express_ref linkend="topology_schema:ir_express:topology_schema.face_surface"/>s are contained in the <b>volume_with_faces</b>  geometry volume. A <express_ref linkend="geometry_schema:ir_express:geometry_schema.volume"/> may be referenced by more than one <b>volume_with_faces</b>. 
</p>
 
 </ext_description>	

<!-- volume_geometry -->
<ext_description linkend="topology_schema.volume_with_faces.volume_geometry">
 the trivariate volume that defines the internal shape of the <b>volume_with_faces</b>. The domain of the <b>volume_with_faces</b> is defined by this volume and its bounding faces. The bounding faces are specified in the subtypes of the <b>volume_with_faces</b>. 
</ext_description>

<!-- +++++++++++ volume_with_parametric_boundary +++++++++++ -->
<ext_description linkend="topology_schema.volume_with_parametric_boundary">
<p>	A <b>volume_with_parametric_boundary</b> is a type of <express_ref linkend="topology_schema:ir_express:topology_schema.volume_with_faces"/> where the boundary is specified by six faces. The associated surfaces of these faces shall correspond to the bounding surfaces of the inherited attributed <express_ref linkend="topology_schema:ir_express:topology_schema.volume_with_faces.volume_geometry"/>. </p>
<example> This entity is suitable for use in a block structured model where the blocks meet in a corner-to-corner configuration, in the context of isogeometric analysis. A <b>volume_with_parametric_boundary</b> may represent one block in a block structured computational mesh. </example>

 </ext_description>	

<!-- outer_bound -->
<ext_description linkend="topology_schema.volume_with_parametric_boundary.outer_bound">
<p> the external boundaries of the <b>volume_with_parametric_boundary</b>. The <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s
             in the array are related to the parameters and their lower and upper values as follows: </p> 
       <ul>
       <li>     face 1: lower boundary in the first parameter direction; </li>
        <li>   face 2: upper boundary in the first parameter direction; </li>
         <li>  face 3: lower boundary in the second parameter direction; </li>
        <li>   face 4: upper boundary in the second parameter direction; </li>
       <li>    face 5: lower boundary in the third parameter direction; </li>
        <li>   face 6: upper boundary in the third parameter direction. </li>
        </ul>
</ext_description>

<!-- +++++++++++ volume_with_shell +++++++++++ -->
<ext_description linkend="topology_schema.volume_with_shell">
<p>	A <b>volume_with_shell</b> is a type of <express_ref linkend="topology_schema:ir_express:topology_schema.volume_with_faces"/> where the boundary is specified by a <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/>. The volume shall not have voids. This entity enables the representation of trimmed volumes. It can also be used to represent blocks in a block structured volume model with T-joints, that is, no corner-to-corner condition is applied. In the latter case, the faces of the <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/> represent the boundary trimming of the volume. 
</p> 


 </ext_description>	

<!-- outer_bound -->
<ext_description linkend="topology_schema.volume_with_shell.outer_bound">
<p>  the <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/> that defines the faces of the external boundary of the
<b>volume_with_shell</b>.</p>
</ext_description>


<!-- +++++++++++ connected_volume_set +++++++++++ -->
<ext_description linkend="topology_schema.connected_volume_set">
<p>	A <b>connected_volume_set</b> is a type of <express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/> and is a set of <express_ref linkend="topology_schema:ir_express:topology_schema.volume_with_faces"/> such that the domain of the volumes together with their bounding faces, edges and vertices is connected. </p>

<note> This concept may be used in isogeometric analysis where the computational mesh is block structured and each block is defined by an explicitly defined volume. </note>

 </ext_description>	

<!-- cvs_volumes  -->
<ext_description linkend="topology_schema.connected_volume_set.cvs_volumes">
 the SET of <express_ref linkend="topology_schema:ir_express:topology_schema.volume_with_faces"/> from which the <b>connected_volume_set</b> is constructed. 
</ext_description>

<!-- IP1 -->
<ext_description linkend="topology_schema.connected_volume_set.wr:IP1">
	 The union of the domains of the volumes and their bounding faces shall be arcwise connected. 
</ext_description>

<!-- IP2 -->
<ext_description linkend="topology_schema.connected_volume_set.wr:IP2">
	No <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> in the <b>connected_volume_set</b> shall be referenced more than twice as <express_ref linkend="topology_schema:ir_express:topology_schema.volume_with_parametric_boundary.outer_bound"/>. 
</ext_description>

<!-- IP3 -->
<ext_description linkend="topology_schema.connected_volume_set.wr:IP3">
	When 2 <express_ref linkend="topology_schema:ir_express:topology_schema.volume_with_faces"/> in the <b>connected_volume_set</b> share a <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> the faces shall be of type <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_face"/> and have opposite orientations.
</ext_description>

<!-- +++++++++++ connected_volume_sub_set +++++++++++ -->
<ext_description linkend="topology_schema.connected_volume_sub_set">
<p>	A <b>connected_volume_sub_set</b> is a type of <express_ref linkend="topology_schema:ir_express:topology_schema.connected_volume_set"/>  whose domain is a connected portion of the domain of an existing <express_ref linkend="topology_schema:ir_express:topology_schema.connected_volume_set"/>. The bounding faces of the volumes of the <b>connected_volume_sub_set</b> may reference <express_ref linkend="topology_schema:ir_express:topology_schema.subface"/>s. The topological constraints on a <b>connected_volume_sub_set</b> are the same as on a <express_ref linkend="topology_schema:ir_express:topology_schema.connected_volume_set"/>. </p>

 </ext_description>	

<!-- parent_volume_set  -->
<ext_description linkend="topology_schema.connected_volume_sub_set.parent_volume_set">
 the <express_ref linkend="topology_schema:ir_express:topology_schema.connected_volume_set"/> that contains the <b>connected_volume_sub_set</b>.
</ext_description>

<!-- IP1 -->
<ext_description linkend="topology_schema.connected_volume_sub_set.wr:IP1">
	The domain of the <b>connected_volume_sub_set</b> shall be within the domain of the <express_ref linkend="topology_schema:ir_express:topology_schema.connected_volume_sub_set.parent_volume_set"/>. 
</ext_description>




<!-- Function descriptions -->

<!-- +++++++++++ conditional_reverse +++++++++++ -->
<ext_description linkend="topology_schema.conditional_reverse">
Depending on its first argument the <b>conditional_reverse</b> function returns either
  the input topology unchanged or a copy of the input topology with
  its orientation reversed.
</ext_description>

<!-- p -->
<ext_description linkend="topology_schema.conditional_reverse.p">
	(input) a BOOLEAN value indicating whether or not orientation
reversal is required;
</ext_description>

<!-- an_item] -->
<ext_description linkend="topology_schema.conditional_reverse.an_item">
	 (input) an item of topology which can be reversed if
required.
</ext_description>



<!-- +++++++++++ topology_reversed +++++++++++ -->
<ext_description linkend="topology_schema.topology_reversed">
	 The <b>topology_reversed</b> function returns topology equivalent to the input topology
  except that the orientation is reversed.
</ext_description>

<!-- an_item -->
<ext_description linkend="topology_schema.topology_reversed.an_item">
	(input) an item of reversible topology which is to have
its orientation reversed;
</ext_description>

<!-- item_reversed -->
<ext_description linkend="topology_schema.topology_reversed.item_reversed">
	 (output) a <express_ref linkend="topology_schema:ir_express:topology_schema.topological_representation_item"/> which is the
result of reversing the orientation of <b>an_item</b>.
</ext_description>


<!-- +++++++++++ edge_reversed +++++++++++ -->
<ext_description linkend="topology_schema.edge_reversed">
	 The <b>edge_reversed</b> function returns an <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/> equivalent to the
  input <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> except that the orientation is reversed.
</ext_description>

<!-- an_edge -->
<ext_description linkend="topology_schema.edge_reversed.an_edge">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> which is to have its orientation reversed.
</ext_description>

<!-- the_reverse -->
<ext_description linkend="topology_schema.edge_reversed.the_reverse">
	 (output) A <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_edge"/> that is the result of
the orientation reversal.
</ext_description>


<!-- +++++++++++ path_reversed +++++++++++ -->
<ext_description linkend="topology_schema.path_reversed">
	 The <b>path_reversed</b> function returns an <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_path"/> equivalent to the
  input <express_ref linkend="topology_schema:ir_express:topology_schema.path"/> except that the orientation is reversed.
</ext_description>

<!-- a_path -->
<ext_description linkend="topology_schema.path_reversed.a_path">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.path"/> which is to have its orientation reversed.
</ext_description>

<!-- the_reverse -->
<ext_description linkend="topology_schema.path_reversed.the_reverse">
	 (output) A <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_path"/> that is the result of
the orientation reversal.
</ext_description>


<!-- +++++++++++ face_bound_reversed +++++++++++ -->
<ext_description linkend="topology_schema.face_bound_reversed">
	 The <b>face_bound_reversed</b> function returns an <express_ref linkend="topology_schema:ir_express:topology_schema.face_bound"/> equivalent to the
  input <express_ref linkend="topology_schema:ir_express:topology_schema.face_bound"/> except that the orientation is reversed.
</ext_description>

<!-- a_face_bound -->
<ext_description linkend="topology_schema.face_bound_reversed.a_face_bound">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.face_bound"/> which is to have its orientation reversed.
</ext_description>

<!-- the_reverse -->
<ext_description linkend="topology_schema.face_bound_reversed.the_reverse">
	 (output) A <express_ref linkend="topology_schema:ir_express:topology_schema.face_bound"/> that is the result of
the orientation reversal.
</ext_description>

<!-- +++++++++++ face_reversed +++++++++++ -->
<ext_description linkend="topology_schema.face_reversed">
	 The <b>face_reversed</b> function returns an <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_face"/> equivalent to the
  input <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> except that the orientation is reversed.
</ext_description>

<!-- a_face -->
<ext_description linkend="topology_schema.face_reversed.a_face">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> which is to have its orientation reversed.
</ext_description>

<!-- the_reverse -->
<ext_description linkend="topology_schema.face_reversed.the_reverse">
	 (output) a <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_face"/> that is the result of
the orientation reversal.
</ext_description>

<!-- +++++++++++ shell_reversed +++++++++++ -->
<ext_description linkend="topology_schema.shell_reversed">
	 The <b>shell_reversed</b> function returns an  <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_open_shell"/> or
   <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_closed_shell"/> equivalent to the
  input <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/> except that the orientation is reversed.
</ext_description>

<!-- a_shell -->
<ext_description linkend="topology_schema.shell_reversed.a_shell">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/> which is to have its orientation reversed.
</ext_description>

<!-- the_reverse -->
<ext_description linkend="topology_schema.shell_reversed.the_reverse">
	 (output) The result of the orientation reversal.
</ext_description>

<!-- +++++++++++ closed_shell_reversed +++++++++++ -->
<ext_description linkend="topology_schema.closed_shell_reversed">
	 The <b>closed_shell_reversed</b> function returns an <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_closed_shell"/> equivalent to the
  input <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/> except that the orientation is reversed.
</ext_description>

<!-- a_shell -->
<ext_description linkend="topology_schema.closed_shell_reversed.a_shell">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.closed_shell"/> which is to have its orientation reversed.
</ext_description>

<!-- the_reverse -->
<ext_description linkend="topology_schema.closed_shell_reversed.the_reverse">
	 (output) A <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_closed_shell"/> that is the result of
the orientation reversal.
</ext_description>

<!-- +++++++++++ open_shell_reversed +++++++++++ -->
<ext_description linkend="topology_schema.open_shell_reversed">
	 The <b>open_shell_reversed</b> function returns an <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_open_shell"/> equivalent to the
  input <express_ref linkend="topology_schema:ir_express:topology_schema.open_shell"/> except that the orientation is reversed.
</ext_description>

<!-- a_shell -->
<ext_description linkend="topology_schema.open_shell_reversed.a_shell">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.open_shell"/> which is to have its orientation reversed.
</ext_description>

<!-- the_reverse -->
<ext_description linkend="topology_schema.open_shell_reversed.the_reverse">
	 (output) A <express_ref linkend="topology_schema:ir_express:topology_schema.oriented_open_shell"/> that is the result of
the orientation reversal.
</ext_description>

<!-- +++++++++++ set_of_topology_reversed +++++++++++ -->
<ext_description linkend="topology_schema.set_of_topology_reversed">
	 The <b>set_of_topology_reversed</b> function returns a set of topology equivalent to the
  input set of topology except that the orientation of each element of the set is reversed.
</ext_description>

<!-- a_set -->
<ext_description linkend="topology_schema.set_of_topology_reversed.a_set">
	(input) the set of topology items which are to have their orientation reversed.
</ext_description>

<!-- the_reverse -->
<ext_description linkend="topology_schema.set_of_topology_reversed.the_reverse">
	 (output) The result of the orientation reversal.
</ext_description>

<!-- +++++++++++ list_of_topology_reversed +++++++++++ -->
<ext_description linkend="topology_schema.list_of_topology_reversed">
	 The <b>list_of_topology_reversed</b> function returns a list of topology equivalent to the
  input list of topology except that the orientation of each
  element of the list is reversed and the order of the elements in the list is reversed. 
</ext_description>

<!-- a_list -->
<ext_description linkend="topology_schema.list_of_topology_reversed.a_list">
	(input) the list of topology items which are to have their orientation and list order reversed.
</ext_description>

<!-- the_reverse -->
<ext_description linkend="topology_schema.list_of_topology_reversed.the_reverse">
	 (output) The result of the orientation and order reversal.
</ext_description>

<!-- +++++++++++ boolean_choose +++++++++++ -->
<ext_description linkend="topology_schema.boolean_choose">
	 The <b>boolean_choose</b> function returns one of two choices depending the value of a Boolean
  input argument.  The two choices are given as input arguments.
</ext_description>

<!-- b -->
<ext_description linkend="topology_schema.boolean_choose.b">
	the Boolean value used to select the element choice1
(TRUE) or choice2 (FALSE);
</ext_description>

<!-- choice1 -->
<ext_description linkend="topology_schema.boolean_choose.choice1">
	(input) the first item which may be selected;
</ext_description>

<!-- choice2 -->
<ext_description linkend="topology_schema.boolean_choose.choice2">
	(input) the second item which may be selected.
</ext_description>

<!-- +++++++++++ path_head_to_tail +++++++++++ -->
<ext_description linkend="topology_schema.path_head_to_tail">
	 The <b>path_head_to_tail</b> function returns TRUE if for the <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s of the input <express_ref linkend="topology_schema:ir_express:topology_schema.path"/>,
  the end vertex of each <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> is the same as the start vertex of its successor.
</ext_description>

<!-- a_path -->
<ext_description linkend="topology_schema.path_head_to_tail.a_path">
	(input) the path for which it is required to verify that
its component edges are arranged consecutively head-to-tail.
</ext_description>

<!-- p -->
<ext_description linkend="topology_schema.path_head_to_tail.p">
	(output) A LOGICAL variable which is TRUE if all <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s in
the <express_ref linkend="topology_schema:ir_express:topology_schema.path"/> join head-to-tail.
</ext_description>

<!-- +++++++++++ list_face_loops +++++++++++ -->
<ext_description linkend="topology_schema.list_face_loops">
	 Given a <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>  
	 (or a <express_ref linkend="topology_schema:ir_express:topology_schema.subface"/>), the <b>list_face_loops</b> function 
        returns the list of <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/> s in the 
        <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>  or <express_ref linkend="topology_schema:ir_express:topology_schema.subface"/>.
</ext_description>

<!-- f -->
<ext_description linkend="topology_schema.list_face_loops.f">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> for which it is required to generate the list
of bounding <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s.
</ext_description>

<!-- loops -->
<ext_description linkend="topology_schema.list_face_loops.loops">
	(output) The list of <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s for <b>f</b>.
</ext_description>

<!-- +++++++++++ list_loop_edges +++++++++++ -->
<ext_description linkend="topology_schema.list_loop_edges">
	 Given a <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>, the <b>list_loop_edges</b> function 
        returns the list of <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> s in the 
        <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>.
</ext_description>

<!-- l -->
<ext_description linkend="topology_schema.list_loop_edges.l">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/> for which it is required to generate the list
of <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s.
</ext_description>

<!-- edges -->
<ext_description linkend="topology_schema.list_loop_edges.edges">
	(output) The list of <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s for <b>l</b>.
</ext_description>

<!-- +++++++++++ list_shell_edges +++++++++++ -->
<ext_description linkend="topology_schema.list_shell_edges">
	 Given a <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>, the <b>list_shell_edges</b> function 
        returns the list of <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/> s in the 
        <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>.
</ext_description>

<!-- s -->
<ext_description linkend="topology_schema.list_shell_edges.s">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/> for which it is required to generate the list
of <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s.
</ext_description>

<!-- edges -->
<ext_description linkend="topology_schema.list_shell_edges.edges">
	(output) The list of <express_ref linkend="topology_schema:ir_express:topology_schema.edge"/>s for <b>s</b>.
</ext_description>

<!-- +++++++++++ list_shell_faces +++++++++++ -->
<ext_description linkend="topology_schema.list_shell_faces">
	 Given a <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>, the <b>list_shell_faces</b> function 
        returns the list of <express_ref linkend="topology_schema:ir_express:topology_schema.face"/> s in the 
        <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>.
</ext_description>

<!-- s -->
<ext_description linkend="topology_schema.list_shell_faces.s">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/> for which it is required to generate the list
of <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s.
</ext_description>

<!-- faces -->
<ext_description linkend="topology_schema.list_shell_faces.faces">
	(output) The list of <express_ref linkend="topology_schema:ir_express:topology_schema.face"/>s for <b>s</b>.
</ext_description>

<!-- +++++++++++ list_shell_loops +++++++++++ -->
<ext_description linkend="topology_schema.list_shell_loops">
	 Given a <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>, the <b>list_shell_loops</b> function 
        returns the list of <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/> s in the 
        <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/>.
</ext_description>

<!-- s -->
<ext_description linkend="topology_schema.list_shell_loops.s">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.shell"/> for which it is required to generate the list
of <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s.
</ext_description>

<!-- loops -->
<ext_description linkend="topology_schema.list_shell_loops.loops">
	(output) The list of <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s for <b>s</b>.
</ext_description>

<!-- +++++++++++ mixed_loop_type_set +++++++++++ -->
<ext_description linkend="topology_schema.mixed_loop_type_set">
	 Given a set of <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s, the <b>mixed_loop_type_set</b> function returns TRUE if the set includes
	    both <express_ref linkend="topology_schema:ir_express:topology_schema.poly_loop"/>s and other types (edge and vertex) of loops.  

</ext_description>

<!-- l -->
<ext_description linkend="topology_schema.mixed_loop_type_set.l">
	(input) the set of <express_ref linkend="topology_schema:ir_express:topology_schema.loop"/>s for which it is required to determine
whether, or not, it is a mixture of <express_ref linkend="topology_schema:ir_express:topology_schema.poly_loop"/>s and others.
</ext_description>

<!-- +++++++++++ list_to_set +++++++++++ -->
<ext_description linkend="topology_schema.list_to_set">
	 The <b>list_to_set</b> function creates a SET from a LIST, the type of element
   for the SET will be the same as that in the original LIST.  
</ext_description>

<!-- l -->
<ext_description linkend="topology_schema.list_to_set.l">
	(input) The list of elements to be converted to a set.
</ext_description>

<!-- s -->
<ext_description linkend="topology_schema.list_to_set.s">
	(output) The set corresponding to <b>l</b>.
</ext_description>

<!-- +++++++++++ edge_curve_pcurves +++++++++++ -->
<ext_description linkend="topology_schema.edge_curve_pcurves">
	 The <b>edge_curve_pcurves</b> function 
        returns the set of pcurves that are associated with 
(i.e., represent the geometry of) an <express_ref linkend="topology_schema:ir_express:topology_schema.edge_curve"/>.
</ext_description>

<!-- an_edge -->
<ext_description linkend="topology_schema.edge_curve_pcurves.an_edge">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.edge_curve"/> whose associated pcurves are to be
found;
</ext_description>

<!-- the_surface_curves -->
<ext_description linkend="topology_schema.edge_curve_pcurves.the_surface_curves">
	(input)  the set of all <express_ref linkend="geometry_schema:ir_express:geometry_schema.surface_curve"/>s within the
scope of the search for <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>s.
</ext_description>

<!-- result -->
<ext_description linkend="topology_schema.edge_curve_pcurves.result">
	(output) the set of all <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>s associated with
<b>an_edge</b>.
</ext_description>

<!-- +++++++++++ vertex_point_pcurves +++++++++++ -->
<ext_description linkend="topology_schema.vertex_point_pcurves">
	 The <b>vertex_point_pcurves</b> function 
        returns the set of pcurves that are associated with 
(i.e., represent the geometry of) a <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_point"/>.
</ext_description>

<!-- a_vertex -->
<ext_description linkend="topology_schema.vertex_point_pcurves.a_vertex">
	(input) the <express_ref linkend="topology_schema:ir_express:topology_schema.vertex_point"/> whose associated pcurves are to be
found;
</ext_description>

<!-- the_degenerates -->
<ext_description linkend="topology_schema.vertex_point_pcurves.the_degenerates">
	(input) the set of all <express_ref linkend="geometry_schema:ir_express:geometry_schema.evaluated_degenerate_pcurve"/>s within the
scope of the search for <express_ref linkend="geometry_schema:ir_express:geometry_schema.pcurve"/>s.
</ext_description>

<!-- result -->
<ext_description linkend="topology_schema.vertex_point_pcurves.result">
	(output) The set of all <express_ref linkend="geometry_schema:ir_express:geometry_schema.evaluated_degenerate_pcurve"/>s having the same
geometry as <b>a_vertex</b>.
</ext_description>





</ext_descriptions>
 
