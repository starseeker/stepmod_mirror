<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../xsl/express.xsl"?><!DOCTYPE express SYSTEM "../../../dtd/express.dtd">
<express description.file="descriptions.xml" language_version="2" rcs.date="$Date: 2017/10/03 15:34:08 $" rcs.revision="$Revision: 1.16 $" reference="ISO 10303-42">
   <application name="JSDAI" owner="LKSoft" source="topology_schema schema_instance" url="www.lksoft.com" version="4.0 beta"/>
   <schema name="topology_schema">
      <interface kind="reference" schema="basic_attribute_schema">
         <interfaced.item name="aggregate_id_attribute"/>
         <interfaced.item name="get_aggregate_id_value"/>
         <interfaced.item name="get_id_value"/>
         <interfaced.item name="id_attribute"/>
         <interfaced.item name="id_attribute_select"/>
      </interface>
      <interface kind="reference" schema="geometry_schema"/>
      <interface kind="reference" schema="measure_schema">
         <interfaced.item name="positive_length_measure"/>
      </interface>
      <interface kind="reference" schema="representation_schema">
         <interfaced.item name="representation"/>
         <interfaced.item name="representation_item"/>
      </interface>
      <interface kind="reference" schema="support_resource_schema">
         <interfaced.item name="bag_to_set"/>
         <interfaced.item name="identifier"/>
      </interface>
      <constant expression="representation_item('')||&#10;                   topological_representation_item()" name="dummy_tri">
         <typename name="topological_representation_item"/>
      </constant>
      <type name="list_of_reversible_topology_item">
         <aggregate lower="0" optional="NO" type="LIST" unique="NO" upper="?"/>
         <typename name="reversible_topology_item"/>
      </type>
      <type name="reversible_topology">
         <select extensible="NO" genericentity="NO" selectitems="reversible_topology_item list_of_reversible_topology_item set_of_reversible_topology_item"/>
      </type>
      <type name="reversible_topology_item">
         <select extensible="NO" genericentity="NO" selectitems="edge path face face_bound closed_shell open_shell"/>
      </type>
      <type name="set_of_reversible_topology_item">
         <aggregate lower="0" optional="NO" type="SET" unique="NO" upper="?"/>
         <typename name="reversible_topology_item"/>
      </type>
      <type name="shell">
         <select extensible="NO" genericentity="NO" selectitems="vertex_shell wire_shell open_shell closed_shell"/>
      </type>
      <type name="tri_id_attribute_select">
         <select basedon="id_attribute_select" extensible="NO" genericentity="NO" selectitems="topological_representation_item"/>
      </type><entity abstract.entity="NO" abstract.supertype="NO" name="topological_representation_item" super.expression="ONEOF (vertex, edge, face_bound, face, vertex_shell, wire_shell, connected_edge_set, connected_face_set, connected_volume_set, volume_with_faces, (loop ANDOR path))" supertypes="representation_item">
         <derived expression="get_id_value(SELF)" name="permanent_id">
            <typename name="identifier" />
         </derived>
         <derived expression="get_aggregate_id_value(SELF)" name="permanent_aggregate_id">
            <typename name="identifier" />
         </derived>
         <where expression="SIZEOF(USEDIN(SELF,'BASIC_ATTRIBUTE_SCHEMA.ID_ATTRIBUTE.IDENTIFIED_ITEM')) &lt;= 1" label="WR1" />
         <where expression="SIZEOF(USEDIN(SELF,'BASIC_ATTRIBUTE_SCHEMA.AGGREGATE_ID_ATTRIBUTE.IDENTIFIED_ITEM')) &lt;= 1" label="WR2" />
      <where label="IP1" />
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="closed_shell" supertypes="connected_face_set">
         <where label="IP1"/>
         <where label="IP10"/>
         <where label="IP2"/>
         <where label="IP3"/>
         <where label="IP4"/>
         <where label="IP5"/>
         <where label="IP6"/>
         <where label="IP7"/>
         <where label="IP8"/>
         <where label="IP9"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="connected_edge_set" supertypes="topological_representation_item">
         <explicit name="ces_edges" optional="NO">
            <aggregate lower="1" optional="NO" type="SET" unique="NO" upper="?"/>
            <typename name="edge"/>
         </explicit>
      <where label="IP1"/>
         <where label="IP2"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="connected_face_set" super.expression="ONEOF (closed_shell, open_shell)" supertypes="topological_representation_item">
         <explicit name="cfs_faces" optional="NO">
            <aggregate lower="1" optional="NO" type="SET" unique="NO" upper="?"/>
            <typename name="face"/>
         </explicit>
      <where label="IP1"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="connected_face_sub_set" supertypes="connected_face_set">
         <explicit name="parent_face_set" optional="NO">
            <typename name="connected_face_set"/>
         </explicit>
      <where label="IP1"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="connected_volume_set" supertypes="topological_representation_item">
         <explicit name="cvs_volumes" optional="NO">
            <aggregate lower="1" optional="NO" type="SET" unique="NO" upper="?"/>
            <typename name="volume_with_faces"/>
         </explicit>
      <where label="IP1"/>
         <where label="IP2"/>
         <where label="IP3"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="connected_volume_sub_set" supertypes="connected_volume_set">
         <explicit name="parent_volume_set" optional="NO">
            <typename name="connected_volume_set"/>
         </explicit>
      <where label="IP1"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="edge" super.expression="ONEOF (edge_curve, edge_with_length, oriented_edge, subedge)" supertypes="topological_representation_item">
         <explicit name="edge_start" optional="NO">
            <typename name="vertex"/>
         </explicit>
         <explicit name="edge_end" optional="NO">
            <typename name="vertex"/>
         </explicit>
      <where label="IP1"/>
         <where label="IP2"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="edge_curve" supertypes="edge geometric_representation_item">
         <explicit name="edge_geometry" optional="NO">
            <typename name="curve"/>
         </explicit>
         <explicit name="same_sense" optional="NO">
            <builtintype fixed="NO" type="BOOLEAN"/>
         </explicit>
      <where label="IP1"/>
         <where label="IP2"/>
         <where label="IP3"/>
         <where label="IP4"/>
         <where label="IP5"/>
         <where label="IP6"/>
         <where label="IP7"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="edge_loop" supertypes="loop path">
         <derived expression="SIZEOF(SELF\path.edge_list)" name="ne">
            <builtintype fixed="NO" type="INTEGER"/>
         </derived>
         <where expression="(SELF\path.edge_list[1].edge_start) :=:&#10;        (SELF\path.edge_list[ne].edge_end)" label="WR1"/>
      <where label="IP1"/>
         <where label="IP2"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="edge_with_length" supertypes="edge">
         <explicit name="edge_length" optional="NO">
            <typename name="positive_length_measure"/>
         </explicit>
      <where label="IP1"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="face" super.expression="ONEOF (face_surface, subface, oriented_face)" supertypes="topological_representation_item">
         <explicit name="bounds" optional="NO">
            <aggregate lower="1" optional="NO" type="SET" unique="NO" upper="?"/>
            <typename name="face_bound"/>
         </explicit>
         <where expression="NOT (mixed_loop_type_set(list_to_set(list_face_loops(SELF))))" label="WR1"/>
         <where expression="SIZEOF(QUERY(temp &lt;* bounds | 'TOPOLOGY_SCHEMA.FACE_OUTER_BOUND' IN&#10;                                               TYPEOF(temp))) &lt;= 1" label="WR2"/>
      <where label="IP1"/>
         <where label="IP2"/>
         <where label="IP3"/>
         <where label="IP4"/>
         <where label="IP5"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="face_bound" supertypes="topological_representation_item">
         <explicit name="bound" optional="NO">
            <typename name="loop"/>
         </explicit>
         <explicit name="orientation" optional="NO">
            <builtintype fixed="NO" type="BOOLEAN"/>
         </explicit>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="face_outer_bound" supertypes="face_bound"/>
      <entity abstract.entity="NO" abstract.supertype="NO" name="face_surface" supertypes="face geometric_representation_item">
         <explicit name="face_geometry" optional="NO">
            <typename name="surface"/>
         </explicit>
         <explicit name="same_sense" optional="NO">
            <builtintype fixed="NO" type="BOOLEAN"/>
         </explicit>
         <where expression="NOT ('GEOMETRY_SCHEMA.ORIENTED_SURFACE' IN TYPEOF(face_geometry))" label="WR1"/>
      <where label="IP1"/>
         <where label="IP2"/>
         <where label="IP3"/>
         <where label="IP4"/>
         <where label="IP5"/>
         <where label="IP6"/>
         <where label="IP7"/>
         <where label="IP8"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="loop" super.expression="ONEOF (vertex_loop, edge_loop, poly_loop)" supertypes="topological_representation_item">
         <where label="IP1"/>
         <where label="IP2"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="open_path" supertypes="path">
         <derived expression="SIZEOF(SELF\path.edge_list)" name="ne">
            <builtintype fixed="NO" type="INTEGER"/>
         </derived>
         <where expression="(SELF\path.edge_list[1].edge_element.edge_start) :&lt;&gt;:&#10;                       (SELF\path.edge_list[ne].edge_element.edge_end)" label="WR1"/>
      <where label="IP1"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="open_shell" supertypes="connected_face_set"/>
      <entity abstract.entity="NO" abstract.supertype="NO" name="oriented_closed_shell" supertypes="closed_shell">
         <explicit name="closed_shell_element" optional="NO">
            <typename name="closed_shell"/>
         </explicit>
         <explicit name="orientation" optional="NO">
            <builtintype fixed="NO" type="BOOLEAN"/>
         </explicit>
         <derived expression="conditional_reverse(SELF.orientation,&#10;                                   SELF.closed_shell_element.cfs_faces)" name="cfs_faces">
            <aggregate lower="1" optional="NO" type="SET" unique="NO" upper="?"/>
            <typename name="face"/>
            <redeclaration entity-ref="connected_face_set"/>
         </derived>
         <where expression="NOT ('TOPOLOGY_SCHEMA.ORIENTED_CLOSED_SHELL' &#10;                IN TYPEOF (SELF.closed_shell_element))" label="WR1"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="oriented_edge" supertypes="edge">
         <explicit name="edge_element" optional="NO">
            <typename name="edge"/>
         </explicit>
         <explicit name="orientation" optional="NO">
            <builtintype fixed="NO" type="BOOLEAN"/>
         </explicit>
         <derived expression="boolean_choose (SELF.orientation,&#10;                                            SELF.edge_element.edge_start,&#10;                                            SELF.edge_element.edge_end)" name="edge_start">
            <typename name="vertex"/>
            <redeclaration entity-ref="edge"/>
         </derived>
         <derived expression="boolean_choose (SELF.orientation,&#10;                                            SELF.edge_element.edge_end,&#10;                                            SELF.edge_element.edge_start)" name="edge_end">
            <typename name="vertex"/>
            <redeclaration entity-ref="edge"/>
         </derived>
         <where expression="NOT ('TOPOLOGY_SCHEMA.ORIENTED_EDGE' IN TYPEOF (SELF.edge_element))" label="WR1"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="oriented_face" supertypes="face">
         <explicit name="face_element" optional="NO">
            <typename name="face"/>
         </explicit>
         <explicit name="orientation" optional="NO">
            <builtintype fixed="NO" type="BOOLEAN"/>
         </explicit>
         <derived expression="conditional_reverse(SELF.orientation,SELF.face_element.bounds)" name="bounds">
            <aggregate lower="1" optional="NO" type="SET" unique="NO" upper="?"/>
            <typename name="face_bound"/>
            <redeclaration entity-ref="face"/>
         </derived>
         <where expression="NOT ('TOPOLOGY_SCHEMA.ORIENTED_FACE' IN TYPEOF (SELF.face_element))" label="WR1"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="oriented_open_shell" supertypes="open_shell">
         <explicit name="open_shell_element" optional="NO">
            <typename name="open_shell"/>
         </explicit>
         <explicit name="orientation" optional="NO">
            <builtintype fixed="NO" type="BOOLEAN"/>
         </explicit>
         <derived expression="conditional_reverse(SELF.orientation,&#10;                                      SELF.open_shell_element.cfs_faces)" name="cfs_faces">
            <aggregate lower="1" optional="NO" type="SET" unique="NO" upper="?"/>
            <typename name="face"/>
            <redeclaration entity-ref="connected_face_set"/>
         </derived>
         <where expression="NOT ('TOPOLOGY_SCHEMA.ORIENTED_OPEN_SHELL' &#10;                IN TYPEOF (SELF.open_shell_element))" label="WR1"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="oriented_path" supertypes="path">
         <explicit name="path_element" optional="NO">
            <typename name="path"/>
         </explicit>
         <explicit name="orientation" optional="NO">
            <builtintype fixed="NO" type="BOOLEAN"/>
         </explicit>
         <derived expression="conditional_reverse(SELF.orientation,&#10;                                         SELF.path_element.edge_list)" name="edge_list">
            <aggregate lower="1" optional="NO" type="LIST" unique="YES" upper="?"/>
            <typename name="oriented_edge"/>
            <redeclaration entity-ref="path"/>
         </derived>
         <where expression="NOT ('TOPOLOGY_SCHEMA.ORIENTED_PATH' IN TYPEOF (SELF.path_element))" label="WR1"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="path" super.expression="ONEOF (open_path, edge_loop, oriented_path)" supertypes="topological_representation_item">
         <explicit name="edge_list" optional="NO">
            <aggregate lower="1" optional="NO" type="LIST" unique="YES" upper="?"/>
            <typename name="oriented_edge"/>
         </explicit>
         <where expression="path_head_to_tail(SELF)" label="WR1"/>
      <where label="IP1"/>
         <where label="IP2"/>
         <where label="IP3"/>
         <where label="IP4"/>
         <where label="IP5"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="poly_loop" supertypes="loop geometric_representation_item">
         <explicit name="polygon" optional="NO">
            <aggregate lower="3" optional="NO" type="LIST" unique="YES" upper="?"/>
            <typename name="cartesian_point"/>
         </explicit>
      <where label="IP1"/>
         <where label="IP2"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="seam_edge" supertypes="oriented_edge">
         <explicit name="pcurve_reference" optional="NO">
            <typename name="pcurve"/>
         </explicit>
         <where expression="( 'TOPOLOGY_SCHEMA.EDGE_CURVE' IN TYPEOF (edge_element) )  AND&#10;                ('TOPOLOGY_SCHEMA.SEAM_CURVE' IN TYPEOF&#10;                       (edge_element\edge_curve.edge_geometry))" label="WR1"/>
         <where expression="pcurve_reference IN edge_element\edge_curve.edge_geometry\&#10;                                 surface_curve.associated_geometry" label="WR2"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="subedge" supertypes="edge">
         <explicit name="parent_edge" optional="NO">
            <typename name="edge"/>
         </explicit>
      <where label="IP1"/>
         <where label="IP2"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="subface" supertypes="face">
         <explicit name="parent_face" optional="NO">
            <typename name="face"/>
         </explicit>
         <where expression="NOT (mixed_loop_type_set(list_to_set(list_face_loops(SELF)) +&#10;              list_to_set(list_face_loops(parent_face))))" label="WR1"/>
      <where label="IP1"/>
         <where label="IP2"/>
      </entity>
      
      <entity abstract.entity="NO" abstract.supertype="NO" name="vertex" supertypes="topological_representation_item">
         <where label="IP1"/>
         <where label="IP2"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="vertex_loop" supertypes="loop">
         <explicit name="loop_vertex" optional="NO">
            <typename name="vertex"/>
         </explicit>
      <where label="IP1"/>
         <where label="IP2"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="vertex_on_edge" supertypes="vertex">
         <explicit name="parent_edge" optional="NO">
            <typename name="edge_with_length"/>
         </explicit>
         <explicit name="distance_from_start" optional="NO">
            <typename name="positive_length_measure"/>
         </explicit>
         <where expression="distance_from_start &lt; parent_edge.edge_length" label="WR1"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="vertex_point" supertypes="vertex geometric_representation_item">
         <explicit name="vertex_geometry" optional="NO">
            <typename name="point"/>
         </explicit>
      <where label="IP1"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="vertex_shell" supertypes="topological_representation_item">
         <explicit name="vertex_shell_extent" optional="NO">
            <typename name="vertex_loop"/>
         </explicit>
      <where label="IP1"/>
         <where label="IP2"/>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="YES" name="volume_with_faces" super.expression="ONEOF (volume_with_shell, volume_with_parametric_boundary)" supertypes="geometric_representation_item topological_representation_item">
         <explicit name="volume_geometry" optional="NO">
            <typename name="volume"/>
         </explicit>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="volume_with_parametric_boundary" supertypes="volume_with_faces">
         <explicit name="outer_bound" optional="NO">
            <aggregate lower="6" optional="NO" type="LIST" unique="NO" upper="6"/>
            <typename name="face"/>
         </explicit>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="volume_with_shell" supertypes="volume_with_faces">
         <explicit name="outer_bound" optional="NO">
            <typename name="closed_shell"/>
         </explicit>
      </entity>
      <entity abstract.entity="NO" abstract.supertype="NO" name="wire_shell" supertypes="topological_representation_item">
         <explicit name="wire_shell_extent" optional="NO">
            <aggregate lower="1" optional="NO" type="SET" unique="NO" upper="?"/>
            <typename name="loop"/>
         </explicit>
         <where expression="NOT mixed_loop_type_set(wire_shell_extent)" label="WR1"/>
      <where label="IP1"/>
         <where label="IP2"/>
         <where label="IP3"/>
         <where label="IP4"/>
         <where label="IP5"/>
      </entity>
      <function name="boolean_choose">
         <parameter name="b">
            <builtintype fixed="NO" type="BOOLEAN"/>
         </parameter>
         <parameter name="choice1">
            <builtintype fixed="NO" type="GENERIC" typelabel="item"/>
         </parameter>
         <parameter name="choice2">
            <builtintype fixed="NO" type="GENERIC" typelabel="item"/>
         </parameter>
         <builtintype fixed="NO" type="GENERIC" typelabel="item"/>
         <algorithm>IF b THEN
       RETURN (choice1);
     ELSE
       RETURN (choice2);
     END_IF;</algorithm>
      </function>
      <function name="closed_shell_reversed">
         <parameter name="a_shell">
            <typename name="closed_shell"/>
         </parameter>
         <typename name="oriented_closed_shell"/>
         <algorithm>LOCAL
    the_reverse : oriented_closed_shell;
  END_LOCAL;
   IF ('TOPOLOGY_SCHEMA.ORIENTED_CLOSED_SHELL' IN TYPEOF (a_shell) ) THEN
      the_reverse := dummy_tri ||
                    connected_face_set (
                       a_shell\connected_face_set.cfs_faces) ||
                    closed_shell () || oriented_closed_shell(
                     a_shell\oriented_closed_shell.closed_shell_element,
                       NOT(a_shell\oriented_closed_shell.orientation));
   ELSE
      the_reverse := dummy_tri ||
               connected_face_set (
                 a_shell\connected_face_set.cfs_faces) ||
               closed_shell () || oriented_closed_shell (a_shell, FALSE);
   END_IF;
   RETURN (the_reverse);</algorithm>
      </function>
      <function name="conditional_reverse">
         <parameter name="p">
            <builtintype fixed="NO" type="BOOLEAN"/>
         </parameter>
         <parameter name="an_item">
            <typename name="reversible_topology"/>
         </parameter>
         <typename name="reversible_topology"/>
         <algorithm>IF p THEN
     RETURN (an_item);
   ELSE
     RETURN (topology_reversed (an_item));
   END_IF;</algorithm>
      </function>
      <function name="edge_curve_pcurves">
         <parameter name="an_edge">
            <typename name="edge_curve"/>
         </parameter>
         <parameter name="the_surface_curves">
            <aggregate lower="0" optional="NO" type="SET" unique="NO" upper="?"/>
            <typename name="surface_curve"/>
         </parameter>
         <aggregate lower="0" optional="NO" type="SET" unique="NO" upper="?"/>
         <typename name="pcurve"/>
         <algorithm>LOCAL
  a_curve      : curve;
  result       : SET OF pcurve;
  the_geometry : LIST[1:2] OF pcurve_or_surface;
END_LOCAL;
  a_curve := an_edge.edge_geometry;
  result := [];
  IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(a_curve) THEN
    result := result + a_curve;
  ELSE
    IF 'GEOMETRY_SCHEMA.SURFACE_CURVE' IN TYPEOF(a_curve) THEN
      the_geometry := a_curve\surface_curve.associated_geometry;
      REPEAT k := 1 TO SIZEOF(the_geometry);
         IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF (the_geometry[k])
         THEN
            result := result + the_geometry[k];
         END_IF;
      END_REPEAT;
    ELSE
      REPEAT j := 1 TO SIZEOF(the_surface_curves);
        the_geometry := the_surface_curves[j].associated_geometry;
        IF the_surface_curves[j].curve_3d :=: a_curve
        THEN
          REPEAT k := 1 TO SIZEOF(the_geometry);
            IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF (the_geometry[k])
            THEN
              result := result + the_geometry[k];
            END_IF;
          END_REPEAT;
        END_IF;
      END_REPEAT;
    END_IF;
  END_IF;

  RETURN (result);</algorithm>
      </function>
      <function name="edge_reversed">
         <parameter name="an_edge">
            <typename name="edge"/>
         </parameter>
         <typename name="oriented_edge"/>
         <algorithm>LOCAL
     the_reverse : oriented_edge;
   END_LOCAL;

   IF ('TOPOLOGY_SCHEMA.ORIENTED_EDGE' IN TYPEOF (an_edge) ) THEN
     the_reverse  := dummy_tri ||
             edge(an_edge.edge_end, an_edge.edge_start) ||
             oriented_edge(an_edge\oriented_edge.edge_element,
                        NOT (an_edge\oriented_edge.orientation)) ;
   ELSE
     the_reverse := dummy_tri ||
             edge(an_edge.edge_end, an_edge.edge_start) ||
             oriented_edge(an_edge, FALSE);
   END_IF;
   RETURN (the_reverse);</algorithm>
      </function>
      <function name="face_bound_reversed">
         <parameter name="a_face_bound">
            <typename name="face_bound"/>
         </parameter>
         <typename name="face_bound"/>
         <algorithm>LOCAL
     the_reverse : face_bound ;
   END_LOCAL;
   IF ('TOPOLOGY_SCHEMA.FACE_OUTER_BOUND' IN TYPEOF (a_face_bound) ) THEN
     the_reverse := dummy_tri ||
                      face_bound(a_face_bound\face_bound.bound,
                           NOT (a_face_bound\face_bound.orientation))
                            || face_outer_bound() ;
   ELSE
     the_reverse := dummy_tri ||
         face_bound(a_face_bound.bound, NOT(a_face_bound.orientation));
   END_IF;
  RETURN (the_reverse);</algorithm>
      </function>
      <function name="face_reversed">
         <parameter name="a_face">
            <typename name="face"/>
         </parameter>
         <typename name="oriented_face"/>
         <algorithm>LOCAL
     the_reverse : oriented_face ;
   END_LOCAL;
   IF ('TOPOLOGY_SCHEMA.ORIENTED_FACE' IN TYPEOF (a_face) ) THEN
     the_reverse := dummy_tri ||
       face(set_of_topology_reversed(a_face.bounds)) ||
          oriented_face(a_face\oriented_face.face_element,
                           NOT (a_face\oriented_face.orientation)) ;
   ELSE
     the_reverse := dummy_tri ||
       face(set_of_topology_reversed(a_face.bounds)) ||
                               oriented_face(a_face, FALSE) ;
   END_IF;
      RETURN (the_reverse);</algorithm>
      </function>
      <function name="get_tri_in_representations">
         <parameter name="members">
            <aggregate lower="0" optional="NO" type="SET" unique="NO" upper="?"/>
            <typename name="representation"/>
         </parameter>
         <aggregate lower="0" optional="NO" type="SET" unique="NO" upper="?"/>
         <typename name="topological_representation_item"/>
         <algorithm>LOCAL
 tri_set : SET OF topological_representation_item := [];
END_LOCAL;

IF SIZEOF(members) = 0 THEN
RETURN(?);
END_IF;

REPEAT i := LOINDEX(members) TO HIINDEX(members);
  REPEAT J := LOINDEX(members[i]\representation.items) TO HIINDEX(members[i]\representation.items);
   IF 'TOPOLOGY_SCHEMA.TOPOLOGICAL_REPRESENTATION_ITEM' IN TYPEOF(members[i]\representation.items[j]) THEN
    tri_set := tri_set + members[i]\representation.items[j];
   END_IF;
  END_REPEAT;
END_REPEAT;

RETURN(tri_set);</algorithm>
      </function>
      <function name="list_face_loops">
         <parameter name="f">
            <typename name="face"/>
         </parameter>
         <aggregate lower="0" optional="NO" type="LIST" unique="NO" upper="?"/>
         <typename name="loop"/>
         <algorithm>LOCAL
     loops : LIST[0:?] OF loop := [];
   END_LOCAL;
   
   REPEAT i := 1 TO SIZEOF(f.bounds);
     loops := loops +(f.bounds[i].bound);
   END_REPEAT;
      
   RETURN(loops);</algorithm>
      </function>
      <function name="list_loop_edges">
         <parameter name="l">
            <typename name="loop"/>
         </parameter>
         <aggregate lower="0" optional="NO" type="LIST" unique="NO" upper="?"/>
         <typename name="edge"/>
         <algorithm>LOCAL
     edges : LIST[0:?] OF edge := [];
   END_LOCAL;
      
   IF 'TOPOLOGY_SCHEMA.EDGE_LOOP' IN TYPEOF(l) THEN
     REPEAT i := 1 TO SIZEOF(l\path.edge_list);
       edges := edges + (l\path.edge_list[i].edge_element);
     END_REPEAT;
   END_IF;

   RETURN(edges);</algorithm>
      </function>
      <function name="list_of_topology_reversed">
         <parameter name="a_list">
            <typename name="list_of_reversible_topology_item"/>
         </parameter>
         <typename name="list_of_reversible_topology_item"/>
         <algorithm>LOCAL
     the_reverse : list_of_reversible_topology_item;
   END_LOCAL;
    
   the_reverse := [];
   REPEAT i := 1 TO SIZEOF (a_list);
     the_reverse := topology_reversed (a_list [i]) + the_reverse;
   END_REPEAT;
  
   RETURN (the_reverse);</algorithm>
      </function>
      <function name="list_shell_edges">
         <parameter name="s">
            <typename name="shell"/>
         </parameter>
         <aggregate lower="0" optional="NO" type="LIST" unique="NO" upper="?"/>
         <typename name="edge"/>
         <algorithm>LOCAL
     edges : LIST[0:?] OF edge := [];
   END_LOCAL;
      
   REPEAT i := 1 TO SIZEOF(list_shell_loops(s));
     edges := edges + list_loop_edges(list_shell_loops(s)[i]);
   END_REPEAT;
   
   RETURN(edges);</algorithm>
      </function>
      <function name="list_shell_faces">
         <parameter name="s">
            <typename name="shell"/>
         </parameter>
         <aggregate lower="0" optional="NO" type="LIST" unique="NO" upper="?"/>
         <typename name="face"/>
         <algorithm>LOCAL
     faces : LIST[0:?] OF face := [];
   END_LOCAL;
   
   IF ('TOPOLOGY_SCHEMA.CLOSED_SHELL' IN TYPEOF(s)) OR 
      ('TOPOLOGY_SCHEMA.OPEN_SHELL' IN TYPEOF(s)) THEN
     REPEAT i := 1 TO SIZEOF(s\connected_face_set.cfs_faces);
       faces := faces + s\connected_face_set.cfs_faces[i];
     END_REPEAT;
   END_IF;
      
   RETURN(faces);</algorithm>
      </function>
      <function name="list_shell_loops">
         <parameter name="s">
            <typename name="shell"/>
         </parameter>
         <aggregate lower="0" optional="NO" type="LIST" unique="NO" upper="?"/>
         <typename name="loop"/>
         <algorithm>LOCAL
     loops : LIST[0:?] OF loop := [];
   END_LOCAL;
      
   IF 'TOPOLOGY_SCHEMA.VERTEX_SHELL' IN TYPEOF(s) THEN
     loops := loops + s.vertex_shell_extent;
   END_IF;
      
   IF 'TOPOLOGY_SCHEMA.WIRE_SHELL' IN TYPEOF(s) THEN
     REPEAT i := 1 TO SIZEOF(s.wire_shell_extent);
       loops := loops + s.wire_shell_extent[i];
     END_REPEAT;
   END_IF;
      
   IF ('TOPOLOGY_SCHEMA.OPEN_SHELL' IN TYPEOF(s)) OR 
      ('TOPOLOGY_SCHEMA.CLOSED_SHELL' IN TYPEOF(s)) THEN
     REPEAT i := 1 TO SIZEOF(s.cfs_faces);
       loops := loops + list_face_loops(s.cfs_faces[i]);
     END_REPEAT;
   END_IF;
      
   RETURN(loops);</algorithm>
      </function>
      <function name="list_to_set">
         <parameter name="l">
            <aggregate lower="0" optional="NO" type="LIST" unique="NO" upper="?"/>
            <builtintype fixed="NO" type="GENERIC" typelabel="T"/>
         </parameter>
         <aggregate lower="0" optional="NO" type="SET" unique="NO" upper="?"/>
         <builtintype fixed="NO" type="GENERIC" typelabel="T"/>
         <algorithm>LOCAL
     s : SET OF GENERIC:T := [];
   END_LOCAL;
      
   REPEAT i := 1 TO SIZEOF(l);
     s := s + l[i];
   END_REPEAT;
   
   RETURN(s);</algorithm>
      </function>
      <function name="mixed_loop_type_set">
         <parameter name="l">
            <aggregate lower="0" optional="NO" type="SET" unique="NO" upper="?"/>
            <typename name="loop"/>
         </parameter>
         <builtintype fixed="NO" type="LOGICAL"/>
         <algorithm>LOCAL
      poly_loop_type: LOGICAL;
    END_LOCAL;
    IF(SIZEOF(l) &lt;= 1) THEN
      RETURN(FALSE);
    END_IF;
    poly_loop_type := ('TOPOLOGY_SCHEMA.POLY_LOOP' IN TYPEOF(l[1]));
    REPEAT i := 2 TO SIZEOF(l);
      IF(('TOPOLOGY_SCHEMA.POLY_LOOP' IN TYPEOF(l[i])) &lt;&gt; poly_loop_type)
          THEN
          RETURN(TRUE);
       END_IF;
    END_REPEAT;
    RETURN(FALSE);</algorithm>
      </function>
      <function name="open_shell_reversed">
         <parameter name="a_shell">
            <typename name="open_shell"/>
         </parameter>
         <typename name="oriented_open_shell"/>
         <algorithm>LOCAL
     the_reverse : oriented_open_shell;
   END_LOCAL;
   IF ('TOPOLOGY_SCHEMA.ORIENTED_OPEN_SHELL' IN TYPEOF (a_shell) ) THEN
     the_reverse := dummy_tri ||
                  connected_face_set (
                      a_shell\connected_face_set.cfs_faces) ||
                  open_shell () || oriented_open_shell(
                    a_shell\oriented_open_shell.open_shell_element,
                      (NOT (a_shell\oriented_open_shell.orientation)));
   ELSE
     the_reverse := dummy_tri ||
                 connected_face_set (
                     a_shell\connected_face_set.cfs_faces) ||
                 open_shell () ||  oriented_open_shell (a_shell, FALSE);
   END_IF;
   RETURN (the_reverse);</algorithm>
      </function>
      <function name="path_head_to_tail">
         <parameter name="a_path">
            <typename name="path"/>
         </parameter>
         <builtintype fixed="NO" type="LOGICAL"/>
         <algorithm>LOCAL
     n : INTEGER;
     p : LOGICAL := TRUE;
   END_LOCAL;
     
     n := SIZEOF (a_path.edge_list);
     REPEAT i := 2 TO n;
       p := p AND (a_path.edge_list[i-1].edge_end :=:
                   a_path.edge_list[i].edge_start);
     END_REPEAT;
     
     RETURN (p);</algorithm>
      </function>
      <function name="path_reversed">
         <parameter name="a_path">
            <typename name="path"/>
         </parameter>
         <typename name="oriented_path"/>
         <algorithm>LOCAL
    the_reverse : oriented_path ;
  END_LOCAL;
  IF ('TOPOLOGY_SCHEMA.ORIENTED_PATH' IN TYPEOF (a_path) ) THEN
    the_reverse := dummy_tri ||
       path(list_of_topology_reversed (a_path.edge_list)) ||
          oriented_path(a_path\oriented_path.path_element,
                          NOT(a_path\oriented_path.orientation)) ;
  ELSE
    the_reverse := dummy_tri ||
                   path(list_of_topology_reversed (a_path.edge_list)) ||
                       oriented_path(a_path, FALSE);
  END_IF;

  RETURN (the_reverse);</algorithm>
      </function>
      <function name="set_of_topology_reversed">
         <parameter name="a_set">
            <typename name="set_of_reversible_topology_item"/>
         </parameter>
         <typename name="set_of_reversible_topology_item"/>
         <algorithm>LOCAL
     the_reverse : set_of_reversible_topology_item;
   END_LOCAL;
   
   the_reverse := [];
   REPEAT i := 1 TO SIZEOF (a_set);
     the_reverse := the_reverse + topology_reversed (a_set [i]);
   END_REPEAT;
   
   RETURN (the_reverse);</algorithm>
      </function>
      <function name="shell_reversed">
         <parameter name="a_shell">
            <typename name="shell"/>
         </parameter>
         <typename name="shell"/>
         <algorithm>IF ('TOPOLOGY_SCHEMA.OPEN_SHELL' IN TYPEOF (a_shell) ) THEN
     RETURN (open_shell_reversed (a_shell));
   ELSE
     IF ('TOPOLOGY_SCHEMA.CLOSED_SHELL' IN TYPEOF (a_shell) ) THEN
       RETURN (closed_shell_reversed (a_shell));
     ELSE
       RETURN (?);
     END_IF;
   END_IF;</algorithm>
      </function>
      <function name="topology_reversed">
         <parameter name="an_item">
            <typename name="reversible_topology"/>
         </parameter>
         <typename name="reversible_topology"/>
         <algorithm>IF ('TOPOLOGY_SCHEMA.EDGE' IN TYPEOF (an_item)) THEN
     RETURN (edge_reversed (an_item));
   END_IF;

   IF ('TOPOLOGY_SCHEMA.PATH' IN TYPEOF (an_item)) THEN
     RETURN (path_reversed (an_item));
   END_IF;

   IF ('TOPOLOGY_SCHEMA.FACE_BOUND' IN TYPEOF (an_item)) THEN
     RETURN (face_bound_reversed (an_item));
   END_IF;
  
   IF ('TOPOLOGY_SCHEMA.FACE' IN TYPEOF (an_item)) THEN
     RETURN (face_reversed (an_item));
   END_IF;

   IF ('TOPOLOGY_SCHEMA.SHELL' IN TYPEOF (an_item)) THEN
     RETURN (shell_reversed (an_item));
   END_IF;

   IF ('SET' IN TYPEOF (an_item)) THEN
     RETURN (set_of_topology_reversed (an_item));
   END_IF;

   IF ('LIST' IN TYPEOF (an_item)) THEN
     RETURN (list_of_topology_reversed (an_item));
   END_IF;

   RETURN (?);</algorithm>
      </function>
      <function name="valid_tri_ids">
         <parameter name="objs">
            <aggregate lower="0" optional="NO" type="SET" unique="NO" upper="?"/>
            <typename name="topological_representation_item"/>
         </parameter>
         <builtintype fixed="NO" type="BOOLEAN"/>
         <algorithm>LOCAL
   values              : BAG OF identifier := [];
END_LOCAL;

  REPEAT i := LOINDEX(objs) TO HIINDEX(objs);
--each tri shall have at least one id.
   IF NOT(EXISTS(objs[i]\topological_representation_item.permanent_id) OR
          EXISTS(objs[i]\topological_representation_item.permanent_aggregate_id)) THEN
    RETURN(FALSE);
   END_IF;
   values := values + objs[i]\topological_representation_item.permanent_id 
                       + objs[i]\topological_representation_item.permanent_aggregate_id;
  END_REPEAT;

--ids are unique across both types
 IF SIZEOF(bag_to_set(values)) &lt;&gt; SIZEOF(values) THEN 
   RETURN(FALSE);
 END_IF;

 RETURN (TRUE);</algorithm>
      </function>
      <function name="vertex_point_pcurves">
         <parameter name="a_vertex">
            <typename name="vertex_point"/>
         </parameter>
         <parameter name="the_degenerates">
            <aggregate lower="0" optional="NO" type="SET" unique="NO" upper="?"/>
            <typename name="evaluated_degenerate_pcurve"/>
         </parameter>
         <aggregate lower="0" optional="NO" type="SET" unique="NO" upper="?"/>
         <typename name="degenerate_pcurve"/>
         <algorithm>LOCAL
  a_point : point;
  result  : SET OF degenerate_pcurve;
END_LOCAL;
  a_point := a_vertex.vertex_geometry;
  result := [];
  IF 'GEOMETRY_SCHEMA.DEGENERATE_PCURVE' IN TYPEOF(a_point) THEN
    result := result + a_point;
  ELSE
      REPEAT j := 1 TO SIZEOF(the_degenerates);
         IF (the_degenerates[j].equivalent_point :=: a_point)  THEN
            result := result + the_degenerates[j];
         END_IF;
      END_REPEAT;
  END_IF;

  RETURN (result);</algorithm>
      </function>
   </schema>
</express>
