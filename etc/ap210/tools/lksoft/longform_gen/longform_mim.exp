(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1157 - ISO/TS 10303-1047 Activity - EXPRESS MIM
*)

SCHEMA Activity_mim;

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM action_schema   -- ISO 10303-41
  (action,
   action_relationship,
   action_status,
   executed_action); 

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute,
   object_role); 

USE FROM management_resources_schema   -- ISO 10303-41
  (action_assignment); 

TYPE action_items = EXTENSIBLE GENERIC_ENTITY SELECT ;
END_TYPE;

ENTITY applied_action_assignment
SUBTYPE OF (action_assignment);
  items : SET [1 : ?] OF action_items;
END_ENTITY;

END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1163 - ISO/TS 10303-1049 Activity method - EXPRESS MIM
*)

SCHEMA Activity_method_mim;

USE FROM action_schema    -- ISO 10303-41
(action_method );

END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2999 - ISO/TS 10303-1249 Activity method assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2307
*) 


SCHEMA Activity_method_assignment_mim;

USE FROM action_schema   -- ISO 10303-41
  (action_method_relationship); 

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM management_resources_schema   -- ISO 10303-41
  (action_method_assignment); 


TYPE action_method_items = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY applied_action_method_assignment
  SUBTYPE OF (action_method_assignment);
  items : SET[1:?] OF action_method_items;
END_ENTITY;

END_SCHEMA;  -- Activity_method_assignment_mim

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1289 - ISO/TS 10303-1514 Advanced boundary representation - EXPRESS MIM
*)

SCHEMA Advanced_boundary_representation_mim;

USE FROM Elemental_geometric_shape_mim;

USE FROM aic_advanced_brep;

END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2907 - ISO/TS 10303-1025 Alias identification - EXPRESS MIM
*)
 


SCHEMA Alias_identification_mim;

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

TYPE ai_identification_item = SELECT BASED_ON identification_item WITH
 (aliasable_item);
END_TYPE; 

TYPE aliasable_item = EXTENSIBLE SELECT;
END_TYPE; 

END_SCHEMA;  -- Alias_identification_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3826 - ISO/TS 10303-1601 Altered package - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3283
*)


SCHEMA Altered_package_mim;
	USE FROM Package_mim;	-- ISO/TS 10303-1707

 	TYPE ap_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH  
		(package);
	END_TYPE;

(** Needed by mapping *)
TYPE ap_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
     (package_terminal);
END_TYPE; 

ENTITY altered_package_terminal
  ABSTRACT SUPERTYPE OF ((shape_formed_terminal ANDOR
      surface_prepped_terminal) ANDOR length_trimmed_terminal)
   SUBTYPE OF (package_terminal);
END_ENTITY;

ENTITY length_trimmed_terminal
   SUBTYPE OF (altered_package_terminal);
END_ENTITY;

ENTITY shape_formed_terminal
   SUBTYPE OF (altered_package_terminal);
END_ENTITY;

ENTITY surface_prepped_terminal
   SUBTYPE OF (altered_package_terminal);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3829 - ISO/TS 10303-1602 Altered part - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3286
*)


SCHEMA Altered_part_mim;
	USE FROM Altered_package_mim;	-- ISO/TS 10303-1601
	USE FROM Packaged_part_black_box_model_mim;	-- ISO/TS 10303-1710
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3832 - ISO/TS 10303-1603 Analytical model - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3289
*)


SCHEMA Analytical_model_mim;

	USE FROM Model_parameter_mim;	-- ISO/TS 10303-1703
	USE FROM Product_identification_mim;	-- ISO/TS 10303-1017
	USE FROM Software_mim;	-- ISO/TS 10303-1746
	USE FROM Specification_document_mim;	-- ISO/TS 10303-1747
	USE FROM Document_structure_mim;	-- ISO/TS 10303-1124
	USE FROM Product_view_definition_relationship_mim;	-- ISO/TS 10303-1041	

USE FROM Date_time_schema
	(date_time_role,
	date_role);

(** Needed by mapping *)
TYPE am_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
     (analytical_model_definition);
END_TYPE; 
	
TYPE am_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH 
     (digital_analytical_model_vector_port);
END_TYPE;
	
ENTITY across_port_variable
  SUBTYPE OF (port_variable);
END_ENTITY;

ENTITY analog_analytical_model_port
  SUBTYPE OF (analytical_model_port);
END_ENTITY;

ENTITY analog_port_variable 
	SUBTYPE OF (representation, representation_item);
END_ENTITY;

ENTITY analytical_model
  SUBTYPE OF (representation);
UNIQUE
  UR1: SELF\representation.name;
END_ENTITY;

ENTITY analytical_model_definition
 SUBTYPE OF (product_definition);
END_ENTITY;

ENTITY analytical_model_make_from_relationship
  SUBTYPE OF (product_definition_relationship);
  SELF\product_definition_relationship.relating_product_definition : analytical_model_definition;
  SELF\product_definition_relationship.related_product_definition  : analytical_model_definition;
UNIQUE
  UR1: SELF\product_definition_relationship.relating_product_definition, 
SELF\product_definition_relationship.related_product_definition;
END_ENTITY;

ENTITY analytical_model_parameter 
 SUBTYPE OF (model_parameter);
END_ENTITY;

ENTITY analytical_model_port
  SUPERTYPE OF (analytical_model_vector_port ANDOR (ONEOF(
   analog_analytical_model_port, digital_analytical_model_port)))
  SUBTYPE OF (representation);
END_ENTITY;

ENTITY analytical_model_port_assignment
  SUBTYPE OF (property_definition_representation, representation_relationship);
    SELF\property_definition_representation.used_representation : analytical_model_port;
    SELF\representation_relationship.rep_1 : analytical_representation;
  DERIVE  
    SELF\representation_relationship.rep_2 : analytical_model_port := SELF\property_definition_representation.used_representation;
END_ENTITY;

ENTITY analytical_model_scalar_port
  SUBTYPE OF (analytical_model_vector_port);
END_ENTITY;

ENTITY analytical_model_vector_port
  SUBTYPE OF (analytical_model_port, compound_representation_item);
END_ENTITY;

ENTITY analytical_representation
  SUBTYPE OF (representation);
UNIQUE
  UR1: SELF\representation.name;
END_ENTITY;

ENTITY digital_analytical_model_port
  SUBTYPE OF (analytical_model_port);
END_ENTITY;

ENTITY digital_analytical_model_scalar_port
  SUBTYPE OF (digital_analytical_model_vector_port, analytical_model_scalar_port);
END_ENTITY;

ENTITY digital_analytical_model_vector_port
  SUBTYPE OF (analytical_model_vector_port);
END_ENTITY;

ENTITY make_from_model_port_relationship
 SUBTYPE OF (representation, representation_relationship);
   SELF\representation_relationship.rep_1 : analytical_model_port;
   SELF\representation_relationship.rep_2 : analytical_model_port;
UNIQUE
  UR1: SELF\representation_relationship.rep_1, 
       SELF\representation_relationship.rep_2;
WHERE
  WR1: rep_1 :<>: rep_2;
END_ENTITY;

ENTITY port_variable
  SUPERTYPE OF (ONEOF(across_port_variable, through_port_variable, transform_port_variable))
  SUBTYPE OF (representation, representation_item);
END_ENTITY;

ENTITY through_port_variable
  SUBTYPE OF (port_variable);
END_ENTITY;
	
ENTITY transform_port_variable
  SUBTYPE OF (port_variable);
END_ENTITY;

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N1947 - ISO/TS 10303-1604 AP210 assembly functional interface requirements - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1612
*)


SCHEMA Ap210_assembly_functional_interface_requirements_mim;
	USE FROM Assembly_module_usage_view_mim;	-- ISO/TS 10303-1642
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N1952 - ISO/TS 10303-1605 AP210 assembly functional requirements - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1615
*)


SCHEMA Ap210_assembly_functional_requirements_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Functional_decomposition_to_assembly_design_mim;	-- ISO/TS 10303-1675
	USE FROM Functional_decomposition_with_nodal_representation_to_packaged_mapping_mim;	-- ISO/TS 10303-1678
	USE FROM Physical_node_requirement_to_implementing_component_allocation_mim;	-- ISO/TS 10303-1723
	USE FROM Planned_characteristic_mim;	-- ISO/TS 10303-1733
	USE FROM Test_requirement_allocation_mim;	-- ISO/TS 10303-1751
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N1957 - ISO/TS 10303-1606 AP210 assembly physical design - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1618
*)


SCHEMA Ap210_assembly_physical_design_mim;
	USE FROM Altered_part_mim;	-- ISO/TS 10303-1602
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Assembly_2d_shape_mim;	-- ISO/TS 10303-1632
	USE FROM Assembly_3d_shape_mim;	-- ISO/TS 10303-1633
	USE FROM Assembly_functional_interface_requirement_mim;	-- ISO/TS 10303-1635
	USE FROM Assembly_module_with_cable_component_2d_mim;	-- ISO/TS 10303-1638
	USE FROM Assembly_module_with_cable_component_3d_mim;	-- ISO/TS 10303-1639
	USE FROM Assembly_module_with_macro_component_mim;	-- ISO/TS 10303-1640
	USE FROM Chemical_substance_mim;	-- ISO/TS 10303-1655
	USE FROM Design_specific_assignment_to_assembly_usage_view_mim;	-- ISO/TS 10303-1662
	USE FROM Device_marking_mim;	-- ISO/TS 10303-1664
    USE FROM Interconnect_module_to_assembly_module_relationship_mim;	-- ISO/TS 10303-1685
	USE FROM Physical_unit_interconnect_definition_mim;	-- ISO/TS 10303-1729

	SUBTYPE_CONSTRAINT packaged_part_subtypes FOR packaged_part; 
	    (ONEOF (minimally_defined_connector, 
	 	packaged_connector)); 
	END_SUBTYPE_CONSTRAINT;

	SUBTYPE_CONSTRAINT ap210_apd_physical_component_subtypes FOR physical_component;         
	    ONEOF (packaged_component,
	    cable_component,
		routed_physical_component);    
	END_SUBTYPE_CONSTRAINT;

	(** It most likely should be in Assembly_module CC *)
	SUBTYPE_CONSTRAINT part_usage_view_subtypes FOR physical_unit;  
	    ONEOF (package,
		 bare_die,
		 cable_usage_view,
		 packaged_part);
	END_SUBTYPE_CONSTRAINT;
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N1962 - ISO/TS 10303-1607 AP210 assembly physical interface requirements - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1621
*)


SCHEMA Ap210_assembly_physical_interface_requirements_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Assembly_physical_requirement_allocation_mim;	-- ISO/TS 10303-1648
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N1967 - ISO/TS 10303-1608 AP210 assembly physical requirements - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1624
*)


SCHEMA Ap210_assembly_physical_requirements_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Assembly_module_usage_view_mim;	-- ISO/TS 10303-1642
	USE FROM Characteristic_mim;	-- ISO/TS 10303-1654
	USE FROM Requirement_assignment_mim;	-- ISO/TS 10303-1233
	USE FROM Requirement_decomposition_mim;	-- ISO/TS 10303-1740
	USE FROM Requirement_identification_and_version_mim;	-- ISO/TS 10303-1140
	USE FROM Requirement_view_definition_mim;	-- ISO/TS 10303-1141
	USE FROM Requirement_view_definition_relationship_mim;	-- ISO/TS 10303-1142
	USE FROM Test_requirement_allocation_mim;	-- ISO/TS 10303-1751
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N1972 - ISO/TS 10303-1609 AP210 assembly requirement allocation - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1627
*)


SCHEMA Ap210_assembly_requirement_allocation_mim;
	USE FROM Ap210_assembly_functional_requirements_mim;	-- ISO/TS 10303-1605
	USE FROM Ap210_assembly_physical_interface_requirements_mim;	-- ISO/TS 10303-1607
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N1977 - ISO/TS 10303-1610 AP210 assembly technology constraints - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1630
*)


SCHEMA Ap210_assembly_technology_constraints_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Specification_document_mim;	-- ISO/TS 10303-1747
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N1982 - ISO/TS 10303-1611 AP210 connection zone based model extraction - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1633
*)


SCHEMA Ap210_connection_zone_based_model_extraction_mim;
	USE FROM Analytical_model_mim;	-- ISO/TS 10303-1603
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
    USE FROM Feature_and_connection_zone_mim; -- ISO/TS 10303-1671	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N1987 - ISO/TS 10303-1759 AP210 datum difference based model definition - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1746
*)
SCHEMA Ap210_datum_difference_based_model_definition_mim;

	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Datum_difference_based_model_mim; -- ISO/TS 10303-1660

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N1992 - ISO/TS 10303-1612 AP210 device functional and physical characterization - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1636
*)


SCHEMA Ap210_device_functional_and_physical_characterization_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Chemical_substance_mim;	-- ISO/TS 10303-1655
	USE FROM Packaged_part_black_box_model_mim;	-- ISO/TS 10303-1710
	USE FROM Part_feature_grouping_mim;	-- ISO/TS 10303-1713
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N1997 - ISO/TS 10303-410 AP210 electronic assembly interconnect and packaging design - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1639
*)


SCHEMA Ap210_electronic_assembly_interconnect_and_packaging_design_mim;
USE FROM Ap210_device_functional_and_physical_characterization_mim;	-- ISO/TS 10303-1612
USE FROM Ap210_interconnect_technology_constraints_mim;	-- ISO/TS 10303-1622
USE FROM Ap210_assembly_technology_constraints_mim;	-- ISO/TS 10303-1610
USE FROM Ap210_assembly_functional_requirements_mim;	-- ISO/TS 10303-1605
USE FROM Ap210_assembly_physical_requirements_mim;	-- ISO/TS 10303-1608
USE FROM Ap210_interconnect_functional_requirements_mim;	-- ISO/TS 10303-1619
USE FROM Ap210_interconnect_physical_requirements_mim;	-- ISO/TS 10303-1620
USE FROM Ap210_assembly_physical_design_mim;	-- ISO/TS 10303-1606
USE FROM Ap210_interconnect_design_for_microwave_mim;	-- ISO/TS 10303-1618
USE FROM Ap210_production_rule_mim;	-- ISO/TS 10303-1630
USE FROM Ap210_functional_decomposition_mim;	-- ISO/TS 10303-1614
USE FROM Ap210_package_functional_and_physical_characterization_mim;	-- ISO/TS 10303-1624
USE FROM Ap210_laminate_assembly_design_mim;	-- ISO/TS 10303-1623
USE FROM Ap210_connection_zone_based_model_extraction_mim;	-- ISO/TS 10303-1611
USE FROM Ap210_functional_specification_mim;	-- ISO/TS 10303-1616
USE FROM Ap210_physical_unit_physical_characterization_mim;	-- ISO/TS 10303-1626
USE FROM Ap210_packaged_part_white_box_model_mim;	-- ISO/TS 10303-1625
USE FROM Ap210_printed_part_functional_and_physical_characterization_mim;	-- ISO/TS 10303-1627
USE FROM Ap210_assembly_functional_interface_requirements_mim;	-- ISO/TS 10303-1604
USE FROM Ap210_assembly_physical_interface_requirements_mim;	-- ISO/TS 10303-1607
USE FROM Ap210_assembly_requirement_allocation_mim;	-- ISO/TS 10303-1609
USE FROM Ap210_interconnect_requirement_allocation_mim;	-- ISO/TS 10303-1621
USE FROM Ap210_functional_requirement_allocation_mim;	-- ISO/TS 10303-1615
USE FROM Ap210_datum_difference_based_model_definition_mim;	-- ISO/TS 10303-1759

USE FROM Application_context_schema
	(application_context,
	 application_protocol_definition);

USE FROM Geometry_schema(offset_curve_2d);

SUBTYPE_CONSTRAINT aeaiapd_component_terminal_subtypes FOR physical_component_terminal;         
  (ONEOF(assembly_module_macro_component_join_terminal,
        interconnect_module_macro_component_join_terminal));
END_SUBTYPE_CONSTRAINT;

SUBTYPE_CONSTRAINT model_parameter_subtypes FOR model_parameter;         
	(ONEOF(analytical_model_parameter,
               category_model_parameter));
END_SUBTYPE_CONSTRAINT;               

SUBTYPE_CONSTRAINT part_terminal_subtypes FOR shape_aspect; 
ONEOF (minimally_defined_bare_die_terminal, -- *pca*
 assembly_module_terminal, -- *pca*
 cable_terminal, -- *pca*
 interconnect_module_terminal, -- *PCB*
 packaged_part_terminal); -- *pca*
END_SUBTYPE_CONSTRAINT;

SUBTYPE_CONSTRAINT physical_unit_subtypes FOR physical_unit;         
 (ONEOF (bare_die, 
          package, 
          packaged_part, 
          assembly_definition, 
          interconnect_definition));
END_SUBTYPE_CONSTRAINT;

SUBTYPE_CONSTRAINT aeaiapd_shape_definition_3d_intersection_subtypes FOR shape_definition_3d_intersection;         
  (ONEOF (edge_segment_cross_section,
              pre_defined_parallel_datum_axis_symbol_3d_2d_relationship,
              pre_defined_perpendicular_datum_axis_symbol_3d_2d_relationship,
              pre_defined_perpendicular_datum_plane_symbol_3d_2d_relationship));
END_SUBTYPE_CONSTRAINT;        

TYPE ap210_managed_design_object = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON managed_design_object WITH 
     (action,
      alternate_product_relationship,
      applied_approval_assignment,
      applied_date_and_time_assignment,
      applied_document_reference,
      applied_group_assignment,
      approval,
      approval_status,
      certification,
      characterized_object,
      composite_curve_segment,
      configuration_effectivity,
      configuration_item,
      contract,
      curve_style,
      curve_style_font,
      curve_style_font_and_scaling,
      curve_style_parameters_representation,
      date,
      design_composition_path,
      dimension_related_tolerance_zone_element,
      dimensional_characteristic_representation,
      dimensional_size,
      document,
      document_usage_constraint,
      externally_defined_item,
--      fill_area_style_colour,
      fill_area_style_hatching,
      fill_area_style_tiles,
      func,
      geometric_tolerance,
      geometric_tolerance_relationship,
      group,
      layer_connection_point,
      material_designation,
      measure_with_unit,
      organization,
      operational_requirement_occurrence_relationship,
      requirement_view_definition_relationship,
      person,
      person_and_organization,
      plus_minus_tolerance,
      pre_defined_item,
      presentation_style_assignment,
      product,
      product_concept,
      product_definition,
      product_definition_formation,
      product_definition_formation_relationship,
      product_definition_relationship,
      property_definition,
      property_definition_relationship,
      property_definition_representation,
      reference_composition_path,
      representation,
      representation_context,
      representation_item,
      representation_relationship,
      runout_zone_orientation,
      security_classification,
      shape_aspect,
      shape_aspect_relationship,
      tolerance_value,
      tolerance_zone_form,
      versioned_action_request,
      action_directive,
	analog_port_variable,
	applied_external_identification_assignment,
	applied_organization_assignment,
	applied_person_and_organization_assignment,
	auxiliary_characteristic_dimension_representation,
	assembly_component,
	assembly_component_usage,
	assembly_component_usage_substitute,
	assembly_joint,
	assembly_group_component_definition_placement_link,
	assembly_bond_definition,
	analytical_representation,
	analytical_model_port_assignment,
	analytical_model_port,
	analytical_model_make_from_relationship,
	analytical_model_definition,
	applied_identification_assignment,
	bus_element_link,
	bus_structural_definition,
	calendar_date,
	complex_clause,
	component_2d_location,
	component_3d_location,
	component_definition,
	component_feature,
	component_feature_relationship,
	component_functional_terminal,
	component_functional_unit,
	component_terminal,
	composite_signal_property_relationship,
	connection_zone_map_identification,
	connection_zone_interface_plane_relationship,
	conductive_interconnect_element_terminal_link,
	connector_based_interconnect_definition,
	range_characteristic,
	date_and_time,
	datum,
	datum_difference_functional_unit_usage_view_terminal_assignment,
	descriptive_representation_item,
	device_terminal_map,
	dimensional_location,
	direct_stratum_component_join_implementation,
	direction,
	effectivity,
	evaluated_characteristic,
	externally_defined_curve_font,
	externally_defined_hatch_style,
    draughting_pre_defined_text_font,
    externally_defined_text_font,
    text_font,
	externally_defined_tile_style,
	fabrication_joint,
	frozen_assignment,
	functional_specification,
	functional_unit_terminal_definition,
	functional_terminal_group,
	general_property_relationship,
	geometric_representation_context,
	geometric_representation_item,
	geometric_tolerance_group,
	group_product_definition,
	group_shape_aspect,
	item_defined_transformation,
	interface_mounted_join,
	join_shape_aspect,
	stratum_based_pattern,
	layout_junction,
	linear_array_component_definition_link,
	make_from_connectivity_relationship,
	make_from_feature_relationship,
	make_from_usage_option,
	mapped_item,
	measure_qualification,
	model_parameter,
	network_node_definition,
	packaged_connector_terminal_relationship,
	parameter_assignment_override,
	parameter_assignment_representation,
	part_connected_terminals_definition,
	passage_technology,
	physical_connectivity_definition,
	physical_connectivity_element,
	physical_network,
	physical_node_requirement_to_implementing_component_allocation,
	plated_inter_stratum_feature,
	product_category,
	product_category_relationship,
	product_definition_with_associated_documents,
	product_specific_parameter_value_assignment,
	promissory_usage_occurrence,
	projected_zone_definition,
	printed_connector_template_terminal_relationship,
	printed_part_template_connected_terminals_definition,
	printed_part_template_material,
	printed_part_template_material_link,
	representation_relationship_with_transformation,
	requirement_assignment,
	predefined_requirement_view_definition,
	rule_action,
	runout_zone_orientation_reference_direction,
	scalar_terminal_definition_link,
	sequential_laminate_passage_based_fabrication_joint,
	shape_dimension_representation,
	shape_representation,
	shape_representation_relationship,
	signal,
	simple_clause,
	solid_curve_font,
	specified_higher_usage_occurrence,
    stratum_feature_conductive_join,
    dielectric_crossover_area,
    stratum_feature_based_derived_pattern,
	stratum_surface,
	stratum_technology,
	stratum_technology_occurrence_link,
	styled_item,
	tolerance_zone_definition,
	usage_view_connection_zone_terminal_shape_relationship,
	vector);
END_TYPE;


RULE application_protocol_definition_required FOR
    (application_context);
WHERE
  WR1:  SIZEOF( QUERY( ac <* application_context |
              (SIZEOF (QUERY (apd <*
USEDIN(ac,'APPLICATION_CONTEXT_SCHEMA.APPLICATION_PROTOCOL_DEFINITION.APPLICATION')
|
                apd.application_interpreted_model_schema_name =
'electronic_assembly_interconnect_and_packaging_design'
                )) > 0)
              )) > 0;
END_RULE;

RULE cartesian_coordinate_system_constraint FOR
     (global_unit_assigned_context,
      geometric_representation_context);
LOCAL
   guac_inst : SET OF global_unit_assigned_context :=
               QUERY ( guac <* global_unit_assigned_context |
             ('GEOMETRY_SCHEMA.' +
              'GEOMETRIC_REPRESENTATION_CONTEXT' IN TYPEOF (guac)));
END_LOCAL;
WHERE
   WR1: SIZEOF (QUERY (guac <* guac_inst |
        NOT (SIZEOF (guac.units) <= 3))) = 0;
   WR2: SIZEOF (QUERY (guac <* guac_inst | (NOT (
        (SIZEOF (QUERY (u <* guac.units |
        ('MEASURE_SCHEMA.LENGTH_UNIT'
        IN TYPEOF (u)))) = 1)
        AND
        (SIZEOF (QUERY (u <* guac.units |
     ('MEASURE_SCHEMA.' +
         'PLANE_ANGLE_UNIT'
        IN TYPEOF (u)))) = 1)
        AND
        (SIZEOF (QUERY (u <* guac.units |
    ('MEASURE_SCHEMA.' +
         'SOLID_ANGLE_UNIT'
        IN TYPEOF (u)) )) <= 1)
        )))) = 0;
   WR3: SIZEOF( QUERY( grc <* guac_inst |
        NOT( (grc.coordinate_space_dimension = 2) OR
        (grc.coordinate_space_dimension = 3)))) = 0;
   WR4: SIZEOF (QUERY (guac <* guac_inst |
        NOT (SIZEOF (QUERY (u <* guac.units |NOT(
    NOT((
     'MEASURE_SCHEMA.' +
     'PLANE_ANGLE_UNIT' IN TYPEOF(u)) AND
    ('MEASURE_SCHEMA.' +
     'CONVERSION_BASED_UNIT' IN TYPEOF(u)) AND
     (u\conversion_based_unit.name = 'degree'))
   OR
       ((abs(u\conversion_based_unit.
           conversion_factor\measure_with_unit.value_component -
               0.0174532925) <= 0.001) AND
        ('MEASURE_SCHEMA.' +
         'PLANE_ANGLE_MEASURE_WITH_UNIT'
        IN TYPEOF(u\conversion_based_unit.conversion_factor)))
   ))) = 0)
   )) = 0;
END_RULE;

RULE shape_representation_requires_origin FOR (shape_representation);
WHERE
  WR1: 
(* 
pseudocode
co:FOREACH (sr <* shape_representation |c1);
c1:EXACTLYONE(it <* sr\representation.items |c2) 
   or ATLEASTONE(it <* sr\representation.items |c3)
   or EXACTLYNONE(it <* sr\representation.items |c4);
c2:((it.name = 'origin') or (it.name = 'orientation')) and 
   (AXIS2_PLACEMENT_2D in TYPEOF(it)  OR
    AXIS2_PLACEMENT_3D in TYPEOF(it));
c3:STYLED_ITEM in TYPEOF(it);
c4:((it.name = 'origin') or (it.name = 'orientation')) and
   ((sr.name = 'zone shape') or 
   (sr.context_of_items.context_type = 'connection zone colour'));
*)
SIZEOF(QUERY ( sr <* shape_representation |  NOT(
(SIZEOF(QUERY ( it <* sr\representation.items | (
((it\representation_item.name = 'origin') or (it\representation_item.name = 'orientation')) and 
   (('GEOMETRY_SCHEMA.' +
    'AXIS2_PLACEMENT_2D' in TYPEOF(it))  OR
   ('GEOMETRY_SCHEMA.' +
    'AXIS2_PLACEMENT_2D' in TYPEOF(it)))
))) = 1
) 
OR
(SIZEOF(QUERY ( it <* sr\representation.items | (
   ('PRESENTATION_APPEARANCE_SCHEMA.' +
    'STYLED_ITEM' in TYPEOF(it))
))) >= 1
)
OR
(SIZEOF(QUERY ( it <* sr\representation.items | (
((it\representation_item.name = 'origin') or (it\representation_item.name = 'orientation')) and
   ((sr\representation.name = 'zone shape') or 
   (sr.context_of_items\representation_context.context_type = 'connection zone colour'))
))) = 0
)
))) = 0;
END_RULE;

FUNCTION valid_2d_wireframe_edge_curve
  (crv   : curve; schma : STRING) : BOOLEAN;

  -- recursively check for valid basic curve types
  IF SIZEOF ([schma + '.LINE',
              schma + '.B_SPLINE_CURVE',
              schma + '.CIRCLE',
              schma + '.HYPERBOLA',
              schma + '.ELLIPSE',
              schma + '.PARABOLA',
              schma + '.POLYLINE'] * TYPEOF (crv)) = 1
      THEN RETURN (TRUE);
  ELSE
    -- recursively check for valid basic curves for curve_replicas
    IF (schma + '.CURVE_REPLICA') IN TYPEOF (crv)
      THEN RETURN (valid_2d_wireframe_edge_curve
                         (crv\curve_replica.parent_curve, schma));
    -- recursively check for valid basis curves for offset_curves
    ELSE
      IF (schma + '.OFFSET_CURVE_2D') IN TYPEOF (crv)
        THEN RETURN (valid_2d_wireframe_edge_curve
                         (crv\offset_curve_2d.basis_curve, schma));
      END_IF;
    END_IF;
  END_IF;
  RETURN (FALSE);
END_FUNCTION;

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2002 - ISO/TS 10303-1614 AP210 functional decomposition - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1642
*)


SCHEMA Ap210_functional_decomposition_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Electrical_network_definition_mim;	-- ISO/TS 10303-1665
	USE FROM Thermal_network_definition_mim;	-- ISO/TS 10303-1752
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2007 - ISO/TS 10303-1615 AP210 functional requirement allocation - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1645
*)


SCHEMA Ap210_functional_requirement_allocation_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Functional_unit_requirement_allocation_mim;	-- ISO/TS 10303-1680
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2012 - ISO/TS 10303-1616 AP210 functional specification - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1648
*)


SCHEMA Ap210_functional_specification_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Functional_specification_mim;	-- ISO/TS 10303-1679
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2022 - ISO/TS 10303-1618 AP210 interconnect design for microwave - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1654
*)


SCHEMA Ap210_interconnect_design_for_microwave_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Chemical_substance_mim;	-- ISO/TS 10303-1655
	USE FROM Connectivity_allocation_to_physical_network_mim;	-- ISO/TS 10303-1658
	USE FROM Design_specific_assignment_to_interconnect_usage_view_mim;	-- ISO/TS 10303-1663
	USE FROM Device_marking_mim;	-- ISO/TS 10303-1664
	USE FROM Interconnect_2d_shape_mim;	-- ISO/TS 10303-1682
	USE FROM Interconnect_non_planar_shape_mim;	-- ISO/TS 10303-1688	
	USE FROM Interconnect_module_to_assembly_module_relationship_mim;	-- ISO/TS 10303-1685
	USE FROM Layered_interconnect_module_2d_design_mim;	-- ISO/TS 10303-1695
	USE FROM Layered_interconnect_module_3d_design_mim;	-- ISO/TS 10303-1696
	USE FROM Layout_macro_definition_mim;	-- ISO/TS 10303-1701
	USE FROM Pre_defined_datum_symbol_mim;	-- ISO/TS 10303-1734
	USE FROM Via_component_mim;	-- ISO/TS 10303-1754

 SUBTYPE_CONSTRAINT aidfm_shape_definition_3d_intersection_subtypes FOR shape_definition_3d_intersection;  
	 (ONEOF (edge_segment_cross_section,
	 pre_defined_perpendicular_datum_plane_symbol_3d_2d_relationship,
	 pre_defined_perpendicular_datum_axis_symbol_3d_2d_relationship,
	 pre_defined_parallel_datum_axis_symbol_3d_2d_relationship));
 END_SUBTYPE_CONSTRAINT;  
	
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2027 - ISO/TS 10303-1619 AP210 interconnect functional requirements - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1657
*)


SCHEMA Ap210_interconnect_functional_requirements_mim;
	USE FROM Ap210_functional_decomposition_mim;	-- ISO/TS 10303-1614
	USE FROM Functional_decomposition_to_interconnect_design_mim;	-- ISO/TS 10303-1677
	USE FROM Functional_decomposition_with_nodal_representation_to_packaged_mapping_mim;	-- ISO/TS 10303-1678
	USE FROM Interconnect_module_to_assembly_module_relationship_mim;	-- ISO/TS 10303-1685
	USE FROM Planned_characteristic_mim;	-- ISO/TS 10303-1733
	USE FROM Test_requirement_allocation_mim;	-- ISO/TS 10303-1751
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2032 - ISO/TS 10303-1620 AP210 interconnect physical requirements - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1660
*)


SCHEMA Ap210_interconnect_physical_requirements_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Fabrication_requirement_mim;	-- ISO/TS 10303-1669
	USE FROM Interconnect_placement_requirements_mim;	-- ISO/TS 10303-1690
	USE FROM Interconnect_module_to_assembly_module_relationship_mim;	-- ISO/TS 10303-1685
	USE FROM Test_requirement_allocation_mim;	-- ISO/TS 10303-1751
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2037 - ISO/TS 10303-1621 AP210 interconnect requirement allocation - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1663
*)


SCHEMA Ap210_interconnect_requirement_allocation_mim;
	USE FROM Ap210_interconnect_functional_requirements_mim;	-- ISO/TS 10303-1619
	USE FROM Ap210_interconnect_physical_requirements_mim;	-- ISO/TS 10303-1620
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2042 - ISO/TS 10303-1622 AP210 interconnect technology constraints - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1666
*)


SCHEMA Ap210_interconnect_technology_constraints_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Fabrication_technology_mim;	-- ISO/TS 10303-1670
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2047 - ISO/TS 10303-1623 AP210 laminate assembly design - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1669
*)


SCHEMA Ap210_laminate_assembly_design_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Sequential_laminate_assembly_design_mim;	-- ISO/TS 10303-1741
	USE FROM Interconnect_module_to_assembly_module_relationship_mim;	-- ISO/TS 10303-1685
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2052 - ISO/TS 10303-1624 AP210 package functional and physical characterization - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1672
*)


SCHEMA Ap210_package_functional_and_physical_characterization_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Chemical_substance_mim;	-- ISO/TS 10303-1655
	USE FROM Package_mim;	-- ISO/TS 10303-1707
	USE FROM Part_feature_grouping_mim;	-- ISO/TS 10303-1713
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2057 - ISO/TS 10303-1625 AP210 packaged part white box model - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1675
*)


SCHEMA Ap210_packaged_part_white_box_model_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Packaged_part_white_box_model_mim;	-- ISO/TS 10303-1709
	USE FROM Part_feature_grouping_mim;	-- ISO/TS 10303-1713
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2062 - ISO/TS 10303-1626 AP210 physical unit physical characterization - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1678
*)


SCHEMA Ap210_physical_unit_physical_characterization_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Part_feature_grouping_mim;	-- ISO/TS 10303-1713
	USE FROM Physical_unit_2d_shape_mim;	-- ISO/TS 10303-1726
	USE FROM Physical_unit_3d_shape_mim;	-- ISO/TS 10303-1727
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2067 - ISO/TS 10303-1627 AP210 printed part functional and physical characterization - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1681
*)


SCHEMA Ap210_printed_part_functional_and_physical_characterization_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Chemical_substance_mim;	-- ISO/TS 10303-1655
	USE FROM Physical_layout_template_mim;	-- ISO/TS 10303-1722
	USE FROM Printed_physical_layout_template_mim; -- ISO/TS 10303-1737
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG3 N2072 - ISO/TS 10303-1630 AP210 production rule - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG3 N1687
*)


SCHEMA Ap210_production_rule_mim;
	USE FROM Design_product_data_management_mim;	-- ISO/TS 10303-1628
	USE FROM Production_rule_mim;	-- ISO/TS 10303-1739
END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2910 - ISO/TS 10303-1012 Approval - EXPRESS MIM
*) 


SCHEMA Approval_mim;

USE FROM approval_schema   -- ISO 10303-41
  (approval,
   approval_date_time,
   approval_person_organization,
   approval_relationship,
   approval_role,
   approval_status); 

USE FROM basic_attribute_schema   -- ISO 10303-41
  (object_role,
   role_association,
   role_select); 

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM Date_time_mim;    -- ISO/TS 10303-1010

USE FROM management_resources_schema   -- ISO 10303-41
  (approval_assignment); 

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011


TYPE approval_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

TYPE date_and_time_item_approval = SELECT BASED_ON date_and_time_item WITH 
   (approval_person_organization);
END_TYPE; 

TYPE date_item_approval = SELECT BASED_ON date_item WITH 
   (approval_person_organization);
END_TYPE; 

ENTITY applied_approval_assignment
  SUBTYPE OF (approval_assignment);
  items : SET[1:?] OF approval_item;
END_ENTITY;

END_SCHEMA;  -- Approval_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3841 - ISO/TS 10303-1631 Area 2d - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3637
*)

SCHEMA Area_2d_mim;
	USE FROM Extended_basic_geometry_mim;	-- ISO/TS 10303-1667
	USE FROM Value_with_unit_extension_mim;	-- ISO/TS 10303-1753
	USE FROM geometric_model_schema
		(circular_area,
		elliptic_area,
		polygonal_area,
		primitive_2d,
		rectangular_area);
END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3844 - ISO/TS 10303-1632 Assembly 2d shape - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3640
*)


SCHEMA Assembly_2d_shape_mim;
	USE FROM Assembly_technology_mim;	-- ISO/TS 10303-1649
	USE FROM Physical_unit_2d_design_view_mim;	-- ISO/TS 10303-1724
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3847 - ISO/TS 10303-1633 Assembly 3d shape - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3643
*)


SCHEMA Assembly_3d_shape_mim;
	USE FROM Assembly_technology_mim;	-- ISO/TS 10303-1649
    USE FROM Physical_unit_3d_shape_mim; -- ISO/TS 10303-1727
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3850 - ISO/TS 10303-1634 Assembly component placement requirements - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3292
*)
SCHEMA Assembly_component_placement_requirements_mim;

	USE FROM Assembly_module_with_interconnect_component_mim;	-- ISO/TS 10303-1643
	USE FROM Requirement_decomposition_mim;	-- ISO/TS 10303-1740	

SUBTYPE_CONSTRAINT acpr_predefined_requirement_view_definition_subtypes FOR predefined_requirement_view_definition;   
  (ONEOF (assembly_spacing_requirement_occurrence,
  assembly_group_spacing_requirement_occurrence,
  item_restricted_requirement_occurrence));
END_SUBTYPE_CONSTRAINT;  

TYPE acpr_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (group_product_definition,
     predefined_requirement_view_definition,
     shape_aspect);
END_TYPE;

TYPE acpr_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
     (assembly_spacing_requirement_occurrence,
     shape_aspect,
     predefined_requirement_view_definition);
END_TYPE;

ENTITY assembly_group_spacing_requirement_occurrence
  SUBTYPE OF (predefined_requirement_view_definition);
END_ENTITY;

ENTITY assembly_spacing_requirement_occurrence
  SUBTYPE OF (predefined_requirement_view_definition);
END_ENTITY;

ENTITY group_product_definition
  SUBTYPE OF (component_definition);
END_ENTITY;

ENTITY item_restricted_requirement_occurrence
  SUBTYPE OF (group, predefined_requirement_view_definition);
END_ENTITY;

ENTITY mounting_restriction_area
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY mounting_restriction_volume
  SUBTYPE OF (shape_aspect);
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3853 - ISO/TS 10303-1635 Assembly functional interface requirement - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3295
*)
SCHEMA Assembly_functional_interface_requirement_mim;

	USE FROM Altered_part_mim;	-- ISO/TS 10303-1602
	USE FROM Packaged_part_black_box_model_mim;	-- ISO/TS 10303-1710
	USE FROM Specification_document_mim; 	-- ISO/TS 10303-1747
	
TYPE afir_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
     (protocol_physical_layer_definition);
END_TYPE;
	
ENTITY minimally_defined_connector
  SUBTYPE OF (packaged_part);
END_ENTITY;

ENTITY protocol_physical_layer_definition 
 SUBTYPE OF (product_definition);
END_ENTITY;

ENTITY protocol_physical_layer_definition_with_characterization 
 SUBTYPE OF (protocol_physical_layer_definition);
END_ENTITY;

ENTITY protocol_requirement_allocation_to_part_terminal
  SUBTYPE OF (requirement_assignment);
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3856 - ISO/TS 10303-1636 Assembly module design - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3298
*)
SCHEMA Assembly_module_design_mim;

	USE FROM Altered_package_mim;	-- ISO/TS 10303-1601
	USE FROM Assembly_module_usage_view_mim;	-- ISO/TS 10303-1642
	USE FROM Bare_die_mim;	-- ISO/TS 10303-1650
	USE FROM Physical_component_feature_mim;	-- ISO/TS 10303-1721
	USE FROM Part_template_extension_mim;	-- ISO/TS 10303-1718	

	SUBTYPE_CONSTRAINT amd_physical_component_subtypes FOR physical_component;         
	    ONEOF (packaged_component,
		routed_physical_component);    
	END_SUBTYPE_CONSTRAINT;

ENTITY bare_die_component
  SUBTYPE OF (physical_component);
END_ENTITY;

ENTITY component_mounting_feature
  SUBTYPE OF (physical_component_feature);
END_ENTITY;

ENTITY packaged_component
  SUBTYPE OF (physical_component);
END_ENTITY;

ENTITY routed_interconnect_component
  SUBTYPE OF (physical_component);
END_ENTITY;

ENTITY routed_physical_component
  SUBTYPE OF (physical_component);
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3859 - ISO/TS 10303-1637 Assembly module macro definition - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3352
*)


SCHEMA Assembly_module_macro_definition_mim;
	USE FROM Interconnect_module_with_macros_mim;	-- ISO/TS 10303-1687

SUBTYPE_CONSTRAINT assembly_module_terminal_subtypes FOR assembly_module_terminal;         
  (ONEOF (assembly_module_interface_terminal, 
           assembly_module_macro_terminal));
END_SUBTYPE_CONSTRAINT;        

ENTITY assembly_module_macro_terminal
  SUBTYPE OF (assembly_module_terminal);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3874 - ISO/TS 10303-1642 Assembly module usage view - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3301
*)
SCHEMA Assembly_module_usage_view_mim;

--	USE FROM Functional_assignment_to_part_mim;	-- ISO/TS 10303-1674
	USE FROM Functional_usage_view_mim;	-- ISO/TS 10303-1705
	USE FROM Packaged_connector_model_mim;	-- ISO/TS 10303-1708

ENTITY assembly_definition
 SUBTYPE OF (physical_unit);
END_ENTITY;

ENTITY assembly_module_interface_terminal
  SUBTYPE OF (assembly_module_terminal);
END_ENTITY;

ENTITY assembly_module_terminal
  SUPERTYPE OF (assembly_module_interface_terminal)
  SUBTYPE OF (shape_aspect);
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3880 - ISO/TS 10303-1644 Assembly module with cable component - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3304
*)
SCHEMA Assembly_module_with_cable_component_mim;

	USE FROM Cable_mim;	-- ISO/TS 10303-1653

	SUBTYPE_CONSTRAINT amwcc_shape_aspect_subtypes FOR shape_aspect; 
		ONEOF (minimally_defined_bare_die_terminal,
		 assembly_module_terminal,
		 cable_terminal,
		 packaged_part_terminal);
	END_SUBTYPE_CONSTRAINT;

ENTITY cable_component
  SUBTYPE OF (physical_component);
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3862 - ISO/TS 10303-1638 Assembly module with cable component 2d - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3379
*)


SCHEMA Assembly_module_with_cable_component_2d_mim;
	USE FROM Assembly_module_with_cable_component_mim;	-- ISO/TS 10303-1644
	USE FROM Physical_unit_2d_design_view_mim;	-- ISO/TS 10303-1724
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3865 - ISO/TS 10303-1639 Assembly module with cable component 3d - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3382
*)


SCHEMA Assembly_module_with_cable_component_3d_mim;
	USE FROM Assembly_module_with_cable_component_mim;	-- ISO/TS 10303-1644
	USE FROM Curve_swept_solid_mim;	-- ISO/TS 10303-1659
	USE FROM Physical_unit_3d_design_view_mim;	-- ISO/TS 10303-1725
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3877 - ISO/TS 10303-1643 Assembly module with interconnect component - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3307
*)
SCHEMA Assembly_module_with_interconnect_component_mim;

	USE FROM Assembly_module_design_mim;	-- ISO/TS 10303-1636
	USE FROM Interconnect_module_usage_view_mim;	-- ISO/TS 10303-1686
	USE FROM Interface_component_mim;	-- ISO/TS 10303-1691	

ENTITY interconnect_module_component
  SUBTYPE OF (physical_component);
END_ENTITY;

ENTITY interconnect_module_component_surface_feature
  SUBTYPE OF (physical_component_feature);
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3868 - ISO/TS 10303-1640 Assembly module with macro component - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3355
*)


SCHEMA Assembly_module_with_macro_component_mim;
	USE FROM Assembly_module_macro_definition_mim;	-- ISO/TS 10303-1637
	USE FROM Assembly_module_with_subassembly_mim;	-- ISO/TS 10303-1641

  ENTITY assembly_module_macro_component
    SUBTYPE OF (physical_component);
  END_ENTITY;
	
ENTITY assembly_module_macro_component_join_terminal
  SUBTYPE OF (physical_component_terminal);
END_ENTITY;
	
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3883 - ISO/TS 10303-1645 Assembly module with packaged connector component - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3652
*)
SCHEMA Assembly_module_with_packaged_connector_component_mim;

	USE FROM Assembly_module_design_mim;	-- ISO/TS 10303-1636
	USE FROM Interface_component_mim;	-- ISO/TS 10303-1691

ENTITY interface_mounted_join
 SUBTYPE OF (shape_aspect_relationship,shape_aspect);
END_ENTITY;

ENTITY packaged_connector_component
    SUBTYPE OF (interface_component, packaged_component);
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3871 - ISO/TS 10303-1641 Assembly module with subassembly - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3358
*)


SCHEMA Assembly_module_with_subassembly_mim;
	USE FROM Assembly_module_design_mim;	-- ISO/TS 10303-1636
  ENTITY assembly_module_component
    SUBTYPE OF (physical_component);
  END_ENTITY;
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3889 - ISO/TS 10303-1647 Assembly physical interface requirement - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3361
*)


SCHEMA Assembly_physical_interface_requirement_mim;

	USE FROM Assembly_functional_interface_requirement_mim;	-- ISO/TS 10303-1635
	USE FROM Layered_3d_shape_mim;	-- ISO/TS 10303-1694
	USE FROM Printed_physical_layout_template_mim; -- ISO/TS 10303-1737
	USE FROM Requirement_decomposition_mim; -- ISO/TS 10303-1740
	USE FROM Product_structure_schema(specified_higher_usage_occurrence);

TYPE apir_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
    (predefined_requirement_view_definition,
    shape_aspect); 
END_TYPE; 

TYPE apir_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
    (protocol_physical_layer_definition); 
END_TYPE; 

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3892 - ISO/TS 10303-1648 Assembly physical requirement allocation - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3310
*)
SCHEMA Assembly_physical_requirement_allocation_mim;

	USE FROM Assembly_physical_interface_requirement_mim;	-- ISO/TS 10303-1647
	USE FROM Assembly_technology_mim;	-- ISO/TS 10303-1649
	USE FROM Discrete_shield_mim;	-- ISO/TS 10303-1744

TYPE apra_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
     (shape_aspect,
     product_definition);
END_TYPE;

TYPE apra_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
    (product_definition, 
	shape_aspect); 
END_TYPE; 

ENTITY electromagnetic_compatibility_requirement_allocation
  SUPERTYPE OF (assembly_shield_allocation)
  SUBTYPE OF (requirement_assignment);
END_ENTITY;

ENTITY assembly_shield_allocation
  SUBTYPE OF (electromagnetic_compatibility_requirement_allocation);
END_ENTITY;

ENTITY thermal_requirement_allocation
  SUBTYPE OF (requirement_assignment);
END_ENTITY;

END_SCHEMA;

(* 
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2516 - ISO/TS 10303-1026 Assembly structure - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1136
*)

SCHEMA Assembly_structure_mim;

USE FROM Product_view_definition_relationship_mim; -- ISO/TS 10303-1041
USE FROM Value_with_unit_mim; -- ISO/TS 10303-1054

USE FROM product_structure_schema -- ISO 10303-44
  (assembly_component_usage,
   next_assembly_usage_occurrence,
   promissory_usage_occurrence,
   quantified_assembly_component_usage,
   specified_higher_usage_occurrence);

END_SCHEMA;




(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3895 - ISO/TS 10303-1649 Assembly technology - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3313
*)
SCHEMA Assembly_technology_mim;
	USE FROM Assembly_module_design_mim;	-- ISO/TS 10303-1636
	USE FROM Component_grouping_mim;	-- ISO/TS 10303-1656
	USE FROM Product_identification_extension_mim;	-- ISO/TS 10303-1738

REFERENCE FROM product_property_definition_schema -- ISO 10303-41
  (acyclic_shape_aspect_relationship);

SUBTYPE_CONSTRAINT assembly_module_subtypes FOR physical_unit; 
	(assembly_definition);
END_SUBTYPE_CONSTRAINT;

TYPE at_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (assembly_joint);
END_TYPE;

TYPE at_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH 
     (assembly_bond_definition);
END_TYPE;

ENTITY assembly_bond_definition
  SUBTYPE OF (shape_aspect);
UNIQUE
  UR1: SELF\shape_aspect.name;
END_ENTITY;

ENTITY assembly_joint
  SUBTYPE OF (component_feature_joint);
WHERE
  WR1: acyclic_shape_aspect_relationship(SELF,
       [SELF\shape_aspect_relationship.related_shape_aspect],
       'ASSEMBLY_TECHNOLOGY_MIM.'+
       'ASSEMBLY_JOINT');
END_ENTITY;

ENTITY component_mating_constraint_condition
  SUBTYPE OF (shape_aspect);
UNIQUE
  UR1: SELF\shape_aspect.name, SELF\shape_aspect.of_shape;
END_ENTITY;

ENTITY connection_zone_based_assembly_joint
  SUBTYPE OF (assembly_joint);
END_ENTITY;

END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N3020 - ISO/TS 10303-1246 Attribute classification - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2256
*) 


SCHEMA Attribute_classification_mim;

USE FROM Class_mim;    -- ISO/TS 10303-1070

USE FROM classification_schema   -- ISO 10303-54
  (class); 

USE FROM management_resources_schema   -- ISO 10303-41
  (attribute_classification_assignment); 


TYPE attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_attribute_classification_assignment
  SUBTYPE OF (attribute_classification_assignment);
  SELF\attribute_classification_assignment.assigned_class : class;
  items : SET[1:?] OF attribute_classification_item;
END_ENTITY;

END_SCHEMA;  -- Attribute_classification_mim

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3898 - ISO/TS 10303-1650 Bare die - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3316
*)
SCHEMA Bare_die_mim;

	USE FROM Extended_geometric_tolerance_mim;	-- ISO/TS 10303-1666
	USE FROM Functional_assignment_to_part_mim;	-- ISO/TS 10303-1674
	USE FROM Part_feature_function_mim;	-- ISO/TS 10303-1712
	USE FROM Functional_usage_view_mim;	-- ISO/TS 10303-1705

ENTITY bare_die
 SUBTYPE OF (physical_unit);
END_ENTITY;

ENTITY bare_die_bottom_surface
 SUBTYPE OF (bare_die_surface);
END_ENTITY;

ENTITY bare_die_edge_segment_surface
  SUBTYPE OF (shape_aspect, shape_aspect_relationship);
   SELF\shape_aspect_relationship.relating_shape_aspect : edge_segment_vertex;
   SELF\shape_aspect_relationship.related_shape_aspect  : edge_segment_vertex;
WHERE
  WR1: SELF\shape_aspect_relationship.relating_shape_aspect :<>:
       SELF\shape_aspect_relationship.related_shape_aspect;
END_ENTITY;

ENTITY bare_die_edge_surface
 SUBTYPE OF (bare_die_surface);
WHERE
  WR1: SELF\shape_aspect.product_definitional;
  WR2: SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\shape_aspect ||
       SELF\part_mounting_feature ||
       SELF\bare_die_edge_surface ||
       SELF\bare_die_surface)) = 0;
END_ENTITY;

ENTITY bare_die_surface
 ABSTRACT SUPERTYPE OF (ONEOF( bare_die_bottom_surface, 
                         bare_die_top_surface, 
                        bare_die_edge_surface))
 SUBTYPE OF (part_mounting_feature);
   SELF\shape_aspect.of_shape : bare_die;
 WHERE
   WR1: SELF\shape_aspect.product_definitional;
END_ENTITY;

ENTITY bare_die_terminal
  SUBTYPE OF (minimally_defined_bare_die_terminal, placed_feature);
END_ENTITY;

ENTITY bare_die_template_terminal
  SUBTYPE OF (part_feature_template_definition, shape_aspect);
END_ENTITY;

ENTITY bare_die_top_surface
 SUBTYPE OF (bare_die_surface);
WHERE
  WR1: SELF\shape_aspect.product_definitional;
  WR2: SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\shape_aspect ||
       SELF\part_mounting_feature ||
       SELF\bare_die_top_surface ||
       SELF\bare_die_surface)) = 0;
END_ENTITY;

ENTITY minimally_defined_bare_die_terminal
  SUPERTYPE OF (bare_die_terminal)
  SUBTYPE OF (shape_aspect);
    SELF\shape_aspect.of_shape : bare_die;
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3901 - ISO/TS 10303-1651 Basic curve - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3367
*)


SCHEMA Basic_curve_mim;
	USE FROM Basic_geometry_mim;	-- ISO/TS 10303-1652
	USE FROM External_item_identification_assignment_mim;	-- ISO/TS 10303-1128

	USE FROM geometry_schema
		(trimmed_curve,
		line,
		composite_curve,
		composite_curve_segment,
		pcurve,
		surface_curve);
	
TYPE bc_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH 
     (trimmed_curve);
END_TYPE;
	
END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3904 - ISO/TS 10303-1652 Basic geometry - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3370
*)


SCHEMA Basic_geometry_mim;

	USE FROM Elemental_geometric_shape_mim;    -- ISO/TS 10303-1004

	USE FROM Geometry_schema(plane,
	point_on_curve,
	curve,
	line,
	point_on_surface,
	degenerate_pcurve,
	surface,
	oriented_surface); -- required by mapping

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3907 - ISO/TS 10303-1653 Cable - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3319
*)
SCHEMA Cable_mim;

	USE FROM Assembly_module_with_packaged_connector_component_mim;	-- ISO/TS 10303-1645

ENTITY cable_terminal
  SUBTYPE OF (shape_aspect);
    SELF\shape_aspect.of_shape : cable_usage_view;
END_ENTITY;

ENTITY cable_usage_view
 SUBTYPE OF (physical_unit);
END_ENTITY;

END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N1148 - ISO/TS 10303-1044 Certification - EXPRESS MIM
*) 


SCHEMA Certification_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (role_association,
   role_select); 

USE FROM certification_schema   -- ISO 10303-41
  (certification,
   certification_type); 

USE FROM management_resources_schema   -- ISO 10303-41
  (certification_assignment); 


TYPE certification_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_certification_assignment
  SUBTYPE OF (certification_assignment);
  items : SET[1:?] OF certification_item;
END_ENTITY;

END_SCHEMA;  -- Certification_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3910 - ISO/TS 10303-1654 Characteristic - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3322
*)
SCHEMA Characteristic_mim;

	USE FROM Document_assignment_mim;	-- ISO/TS 10303-1122
	USE FROM Extended_measure_representation_mim;	-- ISO/TS 10303-1106
	USE FROM Characterizable_object_mim;     -- ISO/TS 10303-xxxx	
	USE FROM Value_with_unit_extension_mim;	-- ISO/TS 10303-1753

USE FROM Group_schema(group);

USE FROM Qualified_measure_schema
	(expanded_uncertainty,
	qualitative_uncertainty,
	measure_qualification);

TYPE c_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
     (representation);
END_TYPE;


ENTITY characteristic_type
  SUBTYPE OF (group);
END_ENTITY;

ENTITY range_characteristic
  SUBTYPE OF (representation, descriptive_representation_item);
END_ENTITY;

ENTITY row_representation_item
  SUBTYPE OF(compound_representation_item);
    SELF\compound_representation_item.item_element : list_representation_item;
END_ENTITY;

ENTITY table_representation_item
  SUBTYPE OF (compound_representation_item, characterized_object);
WHERE
  WR1: SIZEOF(QUERY(itet <* SELF\compound_representation_item.item_element |
       NOT('CHARACTERISTIC_MIM.ROW_REPRESENTATION_ITEM' IN TYPEOF(itet))
            )) = 0;
END_ENTITY; 

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4297 - ISO/TS 10303-1765 Characterizable object - EXPRESS MIM
*)

SCHEMA Characterizable_object_mim;

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object);

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3913 - ISO/TS 10303-1655 Chemical substance - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3373
*)


SCHEMA Chemical_substance_mim;
	USE FROM Assembly_structure_mim;	-- ISO/TS 10303-1026
	USE FROM Generic_material_aspects_mim;	-- ISO/TS 10303-1681		
	USE FROM Part_view_definition_mim;	-- ISO/TS 10303-1023
	USE FROM Person_organization_assignment_mim;	-- ISO/TS 10303-1013
	USE FROM Product_identification_mim;	-- ISO/TS 10303-1017

	USE FROM material_property_definition_schema
		(product_material_composition_relationship);

	USE FROM product_structure_schema
		(make_from_usage_option);
		
END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N3023 - ISO/TS 10303-1070 Class - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2259
*) 


SCHEMA Class_mim;

USE FROM classification_schema   -- ISO 10303-54
  (class,
   class_by_extension,
   class_by_intension); 

USE FROM group_schema   -- ISO 10303-41
  (group); 


END_SCHEMA;  -- Class_mim

(* 
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N3249 - ISO/TS 10303-1114 Classification assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2230 
*)

SCHEMA Classification_assignment_mim;

USE FROM Class_mim;    -- ISO/TS 10303-1070

USE FROM management_resources_schema   -- ISO 10303-41
  (classification_assignment); 


TYPE classification_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_classification_assignment
  SUBTYPE OF (classification_assignment);
  items : SET[1:?] OF classification_item;
END_ENTITY;

END_SCHEMA;  -- Classification_assignment_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4273 - ISO/TS 10303-1111 Classification with attributes - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2617
*)


SCHEMA Classification_with_attributes_mim;

USE FROM Class_mim;

USE FROM Classification_assignment_mim;

USE FROM Extended_measure_representation_mim;

USE FROM External_class_mim;

USE FROM Identification_assignment_mim;

USE FROM Plib_class_reference_mim;

USE FROM Product_identification_mim;

USE FROM Product_version_mim;

USE FROM Product_view_definition_mim;

USE FROM Independent_property_mim;

USE FROM group_schema(
	group,
      group_relationship);

USE FROM product_property_definition_schema(
      characterized_object,
	general_property,
	general_property_association,
	property_definition);

USE FROM product_property_representation_schema(
	property_definition_representation);

USE FROM representation_schema(
	set_representation_item);

USE FROM management_resources_schema(classification_role); --GL added

TYPE classification_item_extended = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH (
	characterized_class,
      product, 
      product_definition_formation,
      product_definition);
END_TYPE;

TYPE classification_identification_item = EXTENSIBLE SELECT BASED_ON identification_item WITH
  (class);
END_TYPE;

TYPE classification_classification_item = EXTENSIBLE SELECT BASED_ON classification_item WITH
  (class);
END_TYPE;

TYPE classified_item = EXTENSIBLE GENERIC_ENTITY SELECT (product, product_definition_formation, product_definition);
END_TYPE;

TYPE class_system_item = EXTENSIBLE GENERIC_ENTITY SELECT(characterized_class);
END_TYPE;

TYPE cwa_identification_item = SELECT BASED_ON identification_item WITH (characterized_class);
END_TYPE;

TYPE cwa_versionable_item = SELECT BASED_ON versionable_item WITH (characterized_class);
END_TYPE;


ENTITY characterized_class
SUBTYPE OF (characterized_object, class);
END_ENTITY;

ENTITY class_system 
SUBTYPE OF (group); 
END_ENTITY; 


RULE restrict_classification_assignments FOR (applied_classification_assignment);
WHERE
WR1: SIZEOF(QUERY(aia <* applied_classification_assignment | 
		NOT class_assignment_is_valid(aia)))=0;
END_RULE;

FUNCTION class_assignment_is_valid (aia: applied_classification_assignment): BOOLEAN;
LOCAL
  item: classification_item;
  role: classification_role;
END_LOCAL;

role:= aia.role;
IF ('CLASSIFICATION_WITH_ATTRIBUTES_MIM.' +'CLASS_SYSTEM' IN TYPEOF(aia.assigned_class)) THEN
  IF(role.name <> 'class system membership') THEN
    RETURN(FALSE);
  END_IF;
  REPEAT i:=LOINDEX(aia.items) TO HIINDEX(aia.items);
    item:= aia.items[i];

    IF (SIZEOF(['CLASSIFICATION_WITH_ATTRIBUTES_MIM.' + 'CLASS_SYSTEM_ITEM']*TYPEOF(item))=0) THEN
-- item invalid if item does not belong to the types that may have a class_system
	RETURN(FALSE);
    END_IF;
  END_REPEAT;
END_IF;

IF ('CLASSIFICATION_WITH_ATTRIBUTES_MIM.' +'CHARACTERIZED_CLASS' IN TYPEOF(aia.assigned_class)) THEN
  IF	NOT(role.name IN ['definitional','non-definitional','']) THEN
    RETURN(FALSE); 
  END_IF;

  REPEAT i:=LOINDEX(aia.items) TO HIINDEX(aia.items);
    item:= aia.items[i];

    IF (SIZEOF(['CLASSIFICATION_WITH_ATTRIBUTES_MIM.' + 'CLASSIFIED_ITEM']*TYPEOF(item))=0) THEN
-- item invalid if item does not belong to the types that may have a characterized_class
	RETURN(FALSE);
    END_IF;
  END_REPEAT;
END_IF;
RETURN(TRUE);
END_FUNCTION;

RULE restrict_group_relationship_for_classification_hierarchy FOR (group_relationship); 
WHERE 
WR1: SIZEOF( QUERY( gr <* group_relationship | 
  (gr.name = 'class hierarchy') AND 
  (NOT('CLASSIFICATION_WITH_ATTRIBUTES_MIM.CLASS' IN TYPEOF(gr.related_group)) OR 
  NOT('CLASSIFICATION_WITH_ATTRIBUTES_MIM.CLASS' IN TYPEOF(gr.relating_group))) )) = 0; 
END_RULE; 

END_SCHEMA;

(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N4243 - ISO/TS 10303-1002 Colour - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N655
*)

SCHEMA Colour_mim;
  USE FROM external_reference_schema -- ISO 10303-41
      (externally_defined_item);
  USE FROM presentation_resource_schema -- ISO 10303-46
      (colour,
       colour_rgb,
       colour_specification,
       draughting_pre_defined_colour,
       pre_defined_colour);
  USE FROM support_resource_schema -- ISO 10303-41
      (identifier);

 ENTITY externally_defined_colour
  SUBTYPE OF (colour_specification,externally_defined_item);
END_ENTITY; -- externally_defined_colour

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3919 - ISO/TS 10303-1657 Component feature - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3325
*)
SCHEMA Component_feature_mim;

	USE FROM Physical_unit_design_view_mim;	-- ISO/TS 10303-1728

TYPE cf_groupable_item = SELECT BASED_ON groupable_item WITH 
   (component_feature);
END_TYPE; 

ENTITY component_feature
  SUBTYPE OF (shape_aspect);
    SELF\shape_aspect.of_shape : assembly_component;
END_ENTITY;

ENTITY component_feature_joint
  SUBTYPE OF (shape_aspect_relationship, shape_aspect);
    SELF\shape_aspect_relationship.related_shape_aspect  : component_feature;
    SELF\shape_aspect_relationship.relating_shape_aspect : component_feature;
END_ENTITY;

ENTITY component_feature_relationship
  SUBTYPE OF (shape_aspect_relationship);
    SELF\shape_aspect_relationship.related_shape_aspect  : component_feature;
    SELF\shape_aspect_relationship.relating_shape_aspect : component_feature;
WHERE
  WR1: SELF\shape_aspect_relationship.related_shape_aspect :<>:
       SELF\shape_aspect_relationship.relating_shape_aspect;
END_ENTITY; 

ENTITY component_terminal
  SUBTYPE OF (component_feature);
END_ENTITY;

ENTITY make_from_feature_relationship
 SUBTYPE OF (component_feature_relationship);
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3916 - ISO/TS 10303-1656 Component grouping - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3328
*)
SCHEMA Component_grouping_mim;

	USE FROM Interface_component_mim;	-- ISO/TS 10303-1691
    REFERENCE FROM product_definition_schema
    (acyclic_product_definition_relationship);



ENTITY array_placement_group
  SUPERTYPE OF (ONEOF(linear_array_placement_group_component,
                      rectangular_array_placement_group_component))
  SUBTYPE OF (assembly_group_component);
END_ENTITY;

ENTITY assembly_group_component
  SUBTYPE OF (assembly_component);
END_ENTITY;

ENTITY assembly_group_component_definition_placement_link
  SUBTYPE OF (product_definition,product_definition_relationship);
   SELF\product_definition_relationship.relating_product_definition : assembly_component;  
   SELF\product_definition_relationship.related_product_definition  : assembly_component;
WHERE
  WR1: SELF\product_definition_relationship.related_product_definition :<>:
       SELF\product_definition_relationship.relating_product_definition;
  WR2: acyclic_product_definition_relationship (SELF,
      [SELF\product_definition_relationship.related_product_definition],
      'COMPONENT_GROUPING_MIM.ASSEMBLY_GROUP_COMPONENT_DEFINITION_PLACEMENT_LINK');
END_ENTITY; 

ENTITY interfaced_group_component
  SUBTYPE OF (assembly_group_component);
END_ENTITY;

ENTITY linear_array_component_definition_link
  SUBTYPE OF (product_definition,product_definition_relationship);
    SELF\product_definition_relationship.relating_product_definition : linear_array_placement_group_component;  
    SELF\product_definition_relationship.related_product_definition : linear_array_placement_group_component;
WHERE
  WR1: SELF\product_definition_relationship.related_product_definition :<>:
       SELF\product_definition_relationship.relating_product_definition;
  WR2: acyclic_product_definition_relationship (SELF,
      [SELF\product_definition_relationship.related_product_definition],
      'COMPONENT_GROUPING_MIM.LINEAR_ARRAY_COMPONENT_DEFINITION_LINK');       
END_ENTITY; 

ENTITY linear_array_placement_group_component
  SUBTYPE OF (array_placement_group);
END_ENTITY;

ENTITY rectangular_array_placement_group_component
  SUBTYPE OF (array_placement_group);
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4216 - ISO/TS 10303-1756 Conductivity material aspects - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3655
*)
SCHEMA Conductivity_material_aspects_mim;

	USE FROM Classification_assignment_mim;	-- ISO/TS 10303-1114
	USE FROM Generic_material_aspects_mim;	-- ISO/TS 10303-1681
	USE FROM Part_view_definition_mim;	-- ISO/TS 10303-1023
	
	TYPE cma_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
     	(material_designation);
	END_TYPE;

	ENTITY material_designation_with_conductivity_classification
		SUBTYPE OF (material_designation);
	END_ENTITY;
	
END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2950 - ISO/TS 10303-1058 Configuration effectivity - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2519
*) 


SCHEMA Configuration_effectivity_mim; 

USE FROM Effectivity_mim;    -- ISO/TS 10303-1057

USE FROM Configuration_item_mim;    -- ISO/CD-TS 10303-1056

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041

USE FROM configuration_management_schema   -- ISO 10303-44
  (configuration_effectivity); 


END_SCHEMA;  -- Configuration_effectivity_mim




(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2533 - ISO/TS 10303-1056 Configuration item - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2483
*) 


SCHEMA Configuration_item_mim;

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Product_concept_identification_mim;    -- ISO/TS 10303-1060

USE FROM configuration_management_schema   -- ISO 10303-44
  (configuration_design,
   configuration_item); 


END_SCHEMA;  -- Configuration_item_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3922 - ISO/TS 10303-1658 Connectivity allocation to physical network - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3376
*)


SCHEMA Connectivity_allocation_to_physical_network_mim;
	USE FROM Functional_decomposition_with_nodal_representation_to_packaged_mapping_mim;	-- ISO/TS 10303-1678
	USE FROM Layered_interconnect_module_design_mim;	-- ISO/TS 10303-1698
END_SCHEMA;

(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N4282 - ISO/TS 10303-1131 Construction geometry - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N2868
*) 


SCHEMA Construction_geometry_mim;

USE FROM Basic_curve_mim;    -- ISO/TS 10303-1651;

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM aic_topologically_bounded_surface;    -- ISO 10303-511

USE FROM geometry_schema   -- ISO 10303-42
  (b_spline_curve,
   b_spline_surface,
   circle,
   composite_curve,
   conical_surface,
   curve,
   curve_bounded_surface,
   curve_replica,
   cylindrical_surface,
   degenerate_pcurve,
   ellipse,
   hyperbola,
   line,
   offset_curve_2d,
   offset_curve_3d,
   offset_surface,
   oriented_surface,
   parabola,
   pcurve,
   placement,
   plane,
   point_on_curve,
   point_on_surface,
   point_replica,
   polyline,
   rectangular_composite_surface,
   rectangular_trimmed_surface,
   spherical_surface,
   surface,
   surface_curve,
   surface_of_linear_extrusion,
   surface_of_revolution,
   surface_replica,
   toroidal_surface,
   trimmed_curve); 

USE FROM representation_schema   -- ISO 10303-43
  (mapped_item,
   representation,
   representation_map,
   representation_relationship); 

USE FROM topology_schema   -- ISO 10303-42
  (edge_curve,
   face_surface,
   vertex_point); 


ENTITY constructive_geometry_representation
  SUBTYPE OF (representation);
WHERE
  WR1: ('CONSTRUCTION_GEOMETRY_MIM.GEOMETRIC_REPRESENTATION_CONTEXT' IN TYPEOF(SELF.context_of_items)) AND ({2 <= SELF.context_of_items\geometric_representation_context. coordinate_space_dimension <= 3});
  WR2: SIZEOF( QUERY( cgr_i <* SELF.items | SIZEOF(['CONSTRUCTION_GEOMETRY_MIM.PLACEMENT', 'CONSTRUCTION_GEOMETRY_MIM.CURVE', 'CONSTRUCTION_GEOMETRY_MIM.EDGE', 'CONSTRUCTION_GEOMETRY_MIM.FACE', 'CONSTRUCTION_GEOMETRY_MIM.POINT', 'CONSTRUCTION_GEOMETRY_MIM.SURFACE', 'CONSTRUCTION_GEOMETRY_MIM.FACE_SURFACE', 'CONSTRUCTION_GEOMETRY_MIM.VERTEX_POINT'] * TYPEOF(cgr_i)) <> 1 )) = 0;
  WR3: SIZEOF( USEDIN( SELF, 'REPRESENTATION_SCHEMA.' + 'REPRESENTATION_RELATIONSHIP.REP_2') ) > 0;
  WR4: SIZEOF( USEDIN( SELF, 'REPRESENTATION_SCHEMA.' + 'REPRESENTATION_MAP.MAPPED_REPRESENTATION') ) = 0;
END_ENTITY;

ENTITY constructive_geometry_representation_relationship
  SUBTYPE OF (representation_relationship);
WHERE
  WR1: (SELF.rep_1.context_of_items :=: SELF.rep_2.context_of_items) AND ('CONSTRUCTION_GEOMETRY_MIM.GEOMETRIC_REPRESENTATION_CONTEXT' IN TYPEOF(SELF.rep_1.context_of_items));
  WR2: 'CONSTRUCTION_GEOMETRY_MIM.CONSTRUCTIVE_GEOMETRY_REPRESENTATION' IN TYPEOF(SELF.rep_2);
  WR3: SIZEOF(['CONSTRUCTION_GEOMETRY_MIM.SHAPE_REPRESENTATION', 'CONSTRUCTION_GEOMETRY_MIM.CONSTRUCTIVE_GEOMETRY_REPRESENTATION'] * TYPEOF(SELF.rep_1)) = 1;
  WR4: NOT('CONSTRUCTION_GEOMETRY_MIM.' + 'REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION' IN TYPEOF(SELF));
END_ENTITY;

END_SCHEMA;  -- Construction_geometry_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4141 - ISO/TS 10303-1731 Constructive solid geometry 2d - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3331
*) 


SCHEMA Constructive_solid_geometry_2d_mim;

	USE FROM Elemental_geometric_shape_mim;	-- ISO/TS 10303-1004

USE FROM Representation_schema(
compound_representation_item,
mapped_item);

USE FROM geometric_model_schema 
(boolean_result,
csg_solid,
elliptic_area,
polygonal_area,
rectangular_area,
half_space_2d,
 primitive_2d
 );




USE FROM geometry_schema (composite_curve);

  TYPE boolean_operand_2d = SELECT (
          primitive_2d,
          boolean_result_2d,
          half_space_2d);
  END_TYPE; 

  TYPE compound_inner_area_boundary = SELECT (set_inner_area_boundary);
  END_TYPE;
  
  TYPE csg_2d_area_select = SELECT (axis2_placement_2d, csg_primitive_solid_2d);
  END_TYPE;

  TYPE csg_2d_shape_select = SELECT (mapped_item, axis2_placement_2d, csg_solid_2d);
  END_TYPE;

  TYPE csg_select_2d = SELECT (primitive_2d, boolean_result_2d);
  END_TYPE;

  TYPE set_inner_area_boundary = SET [1:?] OF primitive_2d;
  END_TYPE;

  ENTITY area_with_outer_boundary 
     SUBTYPE OF (complex_area, half_space_2d);
       SELF\half_space_2d.base_curve : composite_curve;
  END_ENTITY; 

  ENTITY boolean_result_2d
    SUBTYPE OF (boolean_result);
     SELF\boolean_result.first_operand : boolean_operand_2d;
     SELF\boolean_result.second_operand : boolean_operand_2d;
  END_ENTITY;

  ENTITY complex_area
    ABSTRACT SUPERTYPE OF (area_with_outer_boundary)
    SUBTYPE OF (primitive_2d);
  END_ENTITY;

  ENTITY csg_primitive_solid_2d
    SUBTYPE OF (csg_solid_2d);
    SELF\csg_solid.tree_root_expression : primitive_2d;
  END_ENTITY;  

  ENTITY csg_solid_2d
    SUBTYPE OF (csg_solid);
    SELF\csg_solid.tree_root_expression : csg_select_2d;
  END_ENTITY;
  
  ENTITY csg_2d_shape_representation
    SUBTYPE OF (shape_representation);
      SELF\representation.items : SET[1:?] OF csg_2d_shape_select;  
   WHERE 
     WR1: SELF.context_of_items\geometric_representation_context.coordinate_space_dimension = 2;
     WR2: SIZEOF(QUERY ( it <* SELF.items | 
       (SIZEOF(['CONSTRUCTIVE_SOLID_GEOMETRY_2D_MIM.CSG_SOLID']
  	   * TYPEOF(it)) = 1) 
  	   OR 
	   (('CONSTRUCTIVE_SOLID_GEOMETRY_2D_MIM.MAPPED_ITEM' 
	   IN TYPEOF(it)) AND
	   ('CONSTRUCTIVE_SOLID_GEOMETRY_2D_MIM.' +
	   'CSG_2D_SHAPE_REPRESENTATION' 
	   IN TYPEOF(it\mapped_item.mapping_source.mapped_representation))) 
       )) >= 1;
     WR3: SIZEOF(QUERY ( it <* SELF.items | 
       (('CONSTRUCTIVE_SOLID_GEOMETRY_2D_MIM.MAPPED_ITEM' 
       IN TYPEOF(it)) AND (NOT (( 
       'CONSTRUCTIVE_SOLID_GEOMETRY_2D_MIM.' +
       'CSG_2D_SHAPE_REPRESENTATION') 
       IN TYPEOF(it\mapped_item.mapping_source.mapped_representation)))) )) = 0;
     -- TODO does not work with the new introduced subtypes  
     -- WR4: SIZEOF(TYPEOF(SELF) - TYPEOF(SELF\shape_representation ||
     --  SELF\csg_2d_shape_representation || SELF\representation)) = 0;
  END_ENTITY;

  ENTITY primitive_2d_with_inner_boundary
    SUBTYPE OF (primitive_2d, compound_representation_item);
      SELF\compound_representation_item.item_element RENAMED inner_boundary : compound_inner_area_boundary;
    WHERE
      WR1: SIZEOF(['GEOMETRIC_MODEL_SCHEMA.CIRCULAR_AREA', 'GEOMETRIC_MODEL_SCHEMA.ELLIPTIC_AREA', 'GEOMETRIC_MODEL_SCHEMA.RECTANGULAR_AREA',
        'GEOMETRIC_MODEL_SCHEMA.POLYGONAL_AREA', 'CONSTRUCTIVE_SOLID_GEOMETRY_2D_MIM.COMPLEX_AREA'] * TYPEOF(SELF)) > 0;
      WR2: SIZEOF(QUERY(inner <* inner_boundary |
        'CONSTRUCTIVE_SOLID_GEOMETRY_2D_MIM.PRIMITIVE_2D_WITH_INNER_BOUNDARY' IN TYPEOF(inner))) = 0;      
  END_ENTITY;

  ENTITY single_area_csg_2d_shape_representation
    SUBTYPE OF (csg_2d_shape_representation);
    SELF\representation.items : SET[1:?] OF csg_2d_area_select;
  WHERE  
    WR1: SIZEOF (QUERY (it <* SELF.items| 
     ('CONSTRUCTIVE_SOLID_GEOMETRY_2D_MIM.MAPPED_ITEM' 
     IN TYPEOF(it)) )) = 0;
    WR2: SIZEOF (QUERY (it <* SELF.items| 
     ('CONSTRUCTIVE_SOLID_GEOMETRY_2D_MIM.CSG_SOLID_2D' 
     IN TYPEOF(it)) )) = 1;
  END_ENTITY;

  ENTITY single_boundary_csg_2d_shape_representation
    SUBTYPE OF (single_area_csg_2d_shape_representation);
    WHERE
      WR1: SIZEOF(QUERY ( it <* SELF.items |
        (('CONSTRUCTIVE_SOLID_GEOMETRY_2D_MIM.CSG_PRIMITIVE_SOLID_2D' IN TYPEOF(it))
        AND (('CONSTRUCTIVE_SOLID_GEOMETRY_2D_MIM.PRIMITIVE_2D_WITH_INNER_BOUNDARY') IN
        TYPEOF(it\csg_primitive_solid_2d.tree_root_expression))) )) = 0;
  END_ENTITY;

  SUBTYPE_CONSTRAINT primitive_2d_subtypes FOR primitive_2d;
    ONEOF (elliptic_area, rectangular_area, polygonal_area, complex_area);
  END_SUBTYPE_CONSTRAINT;

END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4252 - ISO/TS 10303-1027 Contextual shape positioning - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1139
*)
SCHEMA Contextual_shape_positioning_mim;

USE FROM Extended_basic_geometry_mim; -- ISO/TS 10303-1667
USE FROM Foundation_representation_mim; --  ISO/TS 10303-1006
USE FROM Shape_property_assignment_mim; --  ISO/TS 10303-1032

USE FROM product_property_representation_schema -- ISO 10303-41
  (context_dependent_shape_representation);

USE FROM representation_schema 	-- ISO 10303-43
      (functionally_defined_transformation,
      representation_relationship_with_transformation,
      mapped_item);

END_SCHEMA;




(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1127 - ISO/TS 10303-1062 Contract - EXPRESS MIM
*)    
SCHEMA Contract_mim;
USE FROM contract_schema -- ISO 10303-41
  (contract);
USE FROM management_resources_schema -- ISO 10303-41
  (contract_assignment);

   
TYPE contract_item = EXTENSIBLE SELECT; 
END_TYPE;
   
   
ENTITY applied_contract_assignment
  SUBTYPE OF (contract_assignment);
  items : SET [1:?] OF contract_item;
END_ENTITY;

END_SCHEMA;

 
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3925 - ISO/TS 10303-1659 Curve swept solid - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3334
 *)
SCHEMA Curve_swept_solid_mim;

USE FROM Aic_curve_swept_solid;
	USE FROM Elemental_geometric_shape_mim;	-- ISO/TS 10303-1004

END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1082 - ISO/TS 10303-1010 Date time - EXPRESS MIM
*)       
SCHEMA Date_time_mim;
USE FROM date_time_schema -- ISO 10303-41
  (calendar_date,
   date_and_time,
   coordinated_universal_time_offset);

END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1094 - ISO/TS 10303-1014 Date time assignment - EXPRESS MIM
*)     
SCHEMA Date_time_assignment_mim;

USE FROM Date_time_mim; 	-- 10303-1010

USE FROM date_time_schema 	-- ISO 10303-41
  (date,
   date_role,
   date_time_role);
USE FROM management_resources_schema -- ISO 10303-41
  (date_and_time_assignment,
   date_assignment);

   
TYPE date_item = EXTENSIBLE SELECT; 
END_TYPE;
   
TYPE date_and_time_item = EXTENSIBLE SELECT; 
END_TYPE;
   
ENTITY applied_date_and_time_assignment
  SUBTYPE OF (date_and_time_assignment);
  items : SET [1:?] OF date_and_time_item;
END_ENTITY;
   
ENTITY applied_date_assignment
  SUBTYPE OF (date_assignment);
  items : SET [1:?] OF date_item;
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3928 - ISO/TS 10303-1660 Datum difference based model - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3385
*)


SCHEMA Datum_difference_based_model_mim;
	USE FROM Extended_geometric_tolerance_mim;	-- ISO/TS 10303-1666
	USE FROM Functional_usage_view_mim;	-- ISO/TS 10303-1705

	SUBTYPE_CONSTRAINT ddbm_model_parameter_subtypes FOR model_parameter; 
		ONEOF (datum_difference_based_model_parameter,
	 	schema_based_model_parameter);
	END_SUBTYPE_CONSTRAINT;
	
ENTITY datum_difference_based_model_parameter
  SUBTYPE OF (model_parameter);
END_ENTITY;

ENTITY datum_difference_functional_unit_usage_view_terminal_assignment
  SUBTYPE OF (shape_aspect_relationship);
    SELF\shape_aspect_relationship.relating_shape_aspect : datum_difference;  
    SELF\shape_aspect_relationship.related_shape_aspect  : functional_unit_terminal_definition;
END_ENTITY;
	
END_SCHEMA;
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $ 
ISO TC184/SC4/WG12 N4261 - ISO/TS 10303-1052 Default tolerance - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N2871
*) 


SCHEMA Default_tolerance_mim;

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM Measure_representation_mim;    -- ISO/TS 10303-1118

USE FROM representation_schema   -- ISO 10303-43
  (compound_item_definition,
   compound_representation_item,
   representation,
   set_representation_item); 

USE FROM Shape_property_assignment_mim;    -- ISO/TS 10303-1032


ENTITY default_tolerance_table
  SUBTYPE OF (representation);
WHERE
  WR1: SIZEOF( QUERY( i <* SELF.items | NOT('DEFAULT_TOLERANCE_MIM.DEFAULT_TOLERANCE_TABLE_CELL' IN TYPEOF(i)) )) = 0;
  WR2: (SIZEOF( QUERY( rr <* USEDIN(SELF,'REPRESENTATION_SCHEMA.' + 'REPRESENTATION_RELATIONSHIP.REP_1') | rr.name < 'general tolerance definition' )) = 0) AND (SIZEOF( QUERY( rr <* USEDIN(SELF,'REPRESENTATION_SCHEMA.' + 'REPRESENTATION_RELATIONSHIP.REP_1') | (rr.name = 'general tolerance definition') AND (rr.rep_2.name < 'default tolerance') )) = 0) AND (SIZEOF( USEDIN(SELF,'REPRESENTATION_SCHEMA.' + 'REPRESENTATION_RELATIONSHIP.REP_2') ) = 0);
END_ENTITY;

ENTITY default_tolerance_table_cell
  SUBTYPE OF (compound_representation_item);
WHERE
  WR1: SIZEOF(QUERY( x <* USEDIN(SELF,'REPRESENTATION_SCHEMA.' + 'REPRESENTATION.ITEMS') | 'DEFAULT_TOLERANCE_MIM.' + 'DEFAULT_TOLERANCE_TABLE' IN TYPEOF(x)))=1 ;
  WR2: default_tolerance_table_cell_wr2(SELF\compound_representation_item.item_element);
  WR3: default_tolerance_table_cell_wr3(SELF\compound_representation_item.item_element);
  WR4: default_tolerance_table_cell_wr4(SELF\compound_representation_item.item_element);
  WR5: default_tolerance_table_cell_wr5(SELF\compound_representation_item.item_element);
END_ENTITY;

FUNCTION default_tolerance_table_cell_wr2
 (agg : compound_item_definition) : BOOLEAN; 
BEGIN 
IF SIZEOF(agg) <= 5 THEN 
  RETURN(TRUE); 
ELSE 
  RETURN(FALSE); 
END_IF; 
END; 
      END_FUNCTION; 

FUNCTION default_tolerance_table_cell_wr3
 (agg : compound_item_definition) : BOOLEAN; 
BEGIN 
IF (SIZEOF(QUERY ( i <* agg | (('DEFAULT_TOLERANCE_MIM.MEASURE_REPRESENTATION_ITEM' IN TYPEOF(i)) 
  AND (i\representation_item.name = 'significant number of digits')) )) = 1) OR 
((SIZEOF(QUERY ( i <* agg | (('DEFAULT_TOLERANCE_MIM.MEASURE_REPRESENTATION_ITEM' IN TYPEOF(i)) AND 
  (i\representation_item.name = 'lower limit')) )) = 1) AND 
(SIZEOF( QUERY ( i <* agg | (('DEFAULT_TOLERANCE_MIM.MEASURE_REPRESENTATION_ITEM' IN TYPEOF(i)) AND 
  (i\representation_item.name = 'upper limit')) )) = 1)) THEN 
  RETURN(TRUE); 
ELSE 
  RETURN(FALSE); 
END_IF; 
END; 
      END_FUNCTION; 

FUNCTION default_tolerance_table_cell_wr4
 (agg : compound_item_definition) : BOOLEAN; 
BEGIN 
IF (SIZEOF(QUERY ( i <* agg | (('DEFAULT_TOLERANCE_MIM.MEASURE_REPRESENTATION_ITEM' IN TYPEOF(i)) AND 
  (i\representation_item.name = 'plus minus tolerance value')) )) = 1) OR 
((SIZEOF(QUERY ( i <* agg | (('DEFAULT_TOLERANCE_MIM.MEASURE_REPRESENTATION_ITEM' IN TYPEOF(i)) AND (
  i\representation_item.name = 'lower tolerance value')) )) = 1) AND 
(SIZEOF( QUERY ( i <* agg | (('DEFAULT_TOLERANCE_MIM.MEASURE_REPRESENTATION_ITEM' IN TYPEOF(i)) AND (
  i\representation_item.name = 'upper tolerance value')) )) = 1)) THEN 
  RETURN(TRUE); 
ELSE 
  RETURN(FALSE); 
END_IF; 
END; 
      END_FUNCTION; 

FUNCTION default_tolerance_table_cell_wr5
 (agg : compound_item_definition) : BOOLEAN; 
BEGIN 
IF (SIZEOF(QUERY ( i <* agg | ('DEFAULT_TOLERANCE_MIM.DESCRIPTIVE_REPRESENTATION_ITEM' IN TYPEOF(i)) )) <= 1) AND 
(SIZEOF(QUERY ( i <* agg | ('DEFAULT_TOLERANCE_MIM.DESCRIPTIVE_REPRESENTATION_ITEM' IN TYPEOF(i)) )) = 
  SIZEOF(QUERY ( i <* agg | (('DEFAULT_TOLERANCE_MIM.DESCRIPTIVE_REPRESENTATION_ITEM' IN TYPEOF(i)) AND 
  (i\representation_item.name = 'cell description'))) )) 
THEN 
  RETURN(TRUE); 
ELSE 
  RETURN(FALSE); 
END_IF; 
END; 
      END_FUNCTION; 

END_SCHEMA;  -- Default_tolerance_mim
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N4279 - ISO/TS 10303-1130 Derived shape element - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N2865
*)


SCHEMA Derived_shape_element_mim;

USE FROM Basic_geometry_mim;

USE FROM shape_aspect_definition_schema   -- ISO 10303-47
  (apex,
   centre_of_symmetry,
   derived_shape_aspect,
   extension,
   geometric_alignment,
   geometric_intersection,
   parallel_offset,
   perpendicular_to,
   shape_aspect_deriving_relationship,
   tangent); 

USE FROM Shape_property_assignment_mim;    -- ISO/TS 10303-1032

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054


END_SCHEMA;  -- Derived_shape_element_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3931 - ISO/TS 10303-1661 Design management - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3388
*)


SCHEMA Design_management_mim;
	USE FROM Approval_mim;	-- ISO/TS 10303-1012
	USE FROM Product_view_definition_mim;	-- ISO/TS 10303-1019
	USE FROM Work_order_mim;	-- ISO/TS 10303-1043

	USE FROM Product_definition_schema(product_definition_relationship);

TYPE design_management_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH 
     (frozen_assignment);
END_TYPE;

TYPE managed_design_object = EXTENSIBLE GENERIC_ENTITY SELECT
	(product_definition);
END_TYPE;

ENTITY current_design_assignment
	SUBTYPE OF (design_object_management_assignment);
END_ENTITY;

ENTITY current_design_object_assignment 
	SUBTYPE OF (design_object_management_assignment);
END_ENTITY;

ENTITY design_object_management_assignment
	SUBTYPE OF (action_assignment);
	 items : SET [1:?] OF managed_design_object; 
END_ENTITY;

ENTITY design_object_management_relationship_action
	SUBTYPE OF (action);
END_ENTITY;

ENTITY frozen_assignment 
 SUBTYPE OF (approval_assignment); 
 items : SET [1:?] OF managed_design_object; 
END_ENTITY;

ENTITY previous_design_assignment
	SUBTYPE OF (design_object_management_assignment);
END_ENTITY;

ENTITY previous_design_object_assignment 
	SUBTYPE OF (design_object_management_assignment);
END_ENTITY;

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3838 - ISO/TS 10303-1628 Design product data management - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3349
*)


SCHEMA Design_product_data_management_mim;

	USE FROM Product_data_management_mim;	-- ISO/TS 10303-1231
	USE FROM Classification_with_attributes_mim;	-- ISO/TS 10303-1111
	USE FROM Generic_material_aspects_mim;	-- ISO/TS 10303-1681
	USE FROM Group_mim;	-- ISO/TS 10303-1113
	USE FROM Part_occurrence_mim;	-- ISO/TS 10303-1715
	USE FROM Pre_defined_product_data_management_specializations_mim;
	USE FROM Requirement_assignment_mim;	-- ISO/TS 10303-1233
	USE FROM Requirement_view_definition_relationship_mim;	-- ISO/TS 10303-1142
	USE FROM Test_select_product_mim;	-- ISO/TS 10303-1757
	USE FROM Activity_method_assignment_mim;    -- ISO/TS 10303-1249
	USE FROM Attribute_classification_mim; -- ISO/TS 10303-1246


	USE FROM Contract_schema(contract_type);
	USE FROM Document_schema(document_type);
	USE FROM Material_property_definition_schema(property_definition_relationship);
	USE FROM Product_definition_schema(product_definition_formation_with_specified_source);
	USE FROM Product_structure_schema(make_from_usage_option);
	USE FROM Representation_schema(parametric_representation_context);

TYPE design_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH 
   (product, 
    product_definition_formation);
END_TYPE; 

TYPE design_pdm_attribute_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_classification_item WITH (
	action_directive,
	action_method,
	action_property,
	action_property_representation,
	action_relationship,
	action_request_solution,
	action_request_status,
	alternate_product_relationship,
	applied_action_assignment,
	applied_action_request_assignment,
	applied_approval_assignment,
	applied_certification_assignment,
	applied_document_reference,
	applied_document_usage_constraint_assignment,
	applied_effectivity_assignment,
	applied_event_occurrence_assignment,
	applied_external_identification_assignment,
	applied_identification_assignment,
	applied_person_and_organization_assignment,
	applied_organization_assignment,
	applied_organizational_project_assignment,
	approval,
	approval_person_organization,	
	approval_relationship,
	approval_status,
	certification,
	context_dependent_unit,
	contract,
	date_and_time_assignment,
	date_assignment,
	derived_unit,
	descriptive_representation_item,
	document_file,
	document_relationship,
	effectivity,
	event_occurrence_relationship,
	executed_action,
	general_property,
	general_property_relationship,
	group,
	group_relationship,
	language,
	measure_representation_item,
	measure_with_unit,
	named_unit,
	organizational_address,
	organizational_project_relationship,
	organization_relationship,
	person_and_organization,
	person_and_organization_address,	
	product,
	product_category,
	product_concept,
	product_concept_context,
	product_definition,
	product_definition_context,
	product_definition_formation,
	product_definition_formation_relationship,
	product_definition_relationship,
	property_definition,
	property_definition_representation,
	property_definition_relationship,
	representation,
	representation_context,
	representation_item,
	security_classification,
	time_interval_relationship,
	uncertainty_measure_with_unit,
	versioned_action_request);
END_TYPE;

TYPE design_pdm_name_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON name_item WITH 
   (external_class_library,
   group,
   group_relationship,
   product,
   product_definition);
END_TYPE; 

TYPE design_pdm_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pdm_approval_item WITH 
     (action_directive,
      certification,
      configuration_item,
      contract,
      date,
      directed_action,
      document,
      effectivity,
      executed_action,
      general_property_relationship,
      group,
      group_relationship,
      product,
      product_definition,
      product_definition_formation_relationship,
      product_definition_relationship,
      product_definition_formation,
      representation,
      requirement_assignment,
      security_classification,
      shape_aspect_relationship);
END_TYPE;

TYPE design_pdm_certification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pdm_certification_item WITH 
     (alternate_product_relationship,
     product_definition_formation,
     make_from_usage_option);
END_TYPE;

TYPE design_pdm_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pdm_classification_item WITH 
     (characterized_object);
END_TYPE;

TYPE design_pdm_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH 
     (action_directive,
      alternate_product_relationship,
      directed_action,
      organization,
      person_and_organization,
      product,
      product_definition_formation);
END_TYPE;

TYPE design_pdm_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pdm_date_and_time_item WITH 
     (action_directive,
      approval_person_organization,
      certification,
      contract,
      directed_action,
      document,
      product_definition,
      security_classification);
END_TYPE;

TYPE design_pdm_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pdm_document_reference_item WITH 
     (applied_external_identification_assignment,
      assembly_component_usage,
      characterized_class,
      characterized_object,
      configuration_item,
      descriptive_representation_item,
      externally_defined_item,
      group,
      group_relationship,
      material_designation,
      measure_representation_item,
      product,
      product_category,
      product_definition,
      product_definition_formation,
      property_definition,
      representation,
      representation_item);
END_TYPE;

TYPE design_pdm_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
     (product_definition,
     product_definition_formation,
     property_definition_representation,
     representation,
     representation_item,
     shape_aspect,
     shape_aspect_relationship);
END_TYPE;

TYPE design_pdm_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pdm_organization_item WITH 
     (action_directive,
      applied_classification_assignment,
      applied_identification_assignment,
      product_definition,
      product_definition_formation_relationship);
END_TYPE;

TYPE design_pdm_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pdm_person_and_organization_item WITH 
     (action_directive,
      applied_classification_assignment,
      applied_identification_assignment,
      product_definition,
      product_definition_formation_relationship);
END_TYPE;

TYPE design_pdm_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
    (descriptive_representation_item, 
     configuration_item, 
     product_definition, 
     product_definition_formation, 
     product, 
     product_class,
     product_definition_relationship,
     shape_aspect, 
     representation); 
END_TYPE; 

TYPE design_pdm_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pdm_security_classification_item WITH 
     (document,
      make_from_usage_option,
      product_definition_formation,
      product_definition);
END_TYPE;

TYPE design_pdm_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pdm_date_item WITH 
     (action_directive,
      product_definition,
      directed_action,
      approval_person_organization,
      contract,
	  document,
	  executed_action,
      security_classification,
      certification);
END_TYPE;

TYPE design_pdm_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pdm_identification_item WITH 
     (configuration_item,
      group,
      group_relationship,
      material_designation,
      person_and_organization,
      product,
      product_category,
      product_concept,
      product_definition_formation,
      organization);
END_TYPE;

TYPE promissory_usage_in_product_model_assigned_item = SELECT
     (product_concept,
      product_definition);
END_TYPE;

TYPE design_pdm_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON pdm_action_request_item WITH 
     (versioned_action_request);
END_TYPE;

TYPE design_pdm_requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_source_item WITH 
   (group,
    group_relationship,
    product_definition,
    product_definition_formation,
    product,
    shape_aspect,
    characterized_object,
    product_definition_relationship);
END_TYPE; 

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3934 - ISO/TS 10303-1662 Design specific assignment to assembly usage view - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3391
*)


SCHEMA Design_specific_assignment_to_assembly_usage_view_mim;
	USE FROM Assembly_module_usage_view_mim;	-- ISO/TS 10303-1642
	USE FROM Assembly_module_with_interconnect_component_mim;	-- ISO/TS 10303-1643
	USE FROM Assembly_module_with_subassembly_mim;	-- ISO/TS 10303-1641
	USE FROM Component_feature_mim;	-- ISO/TS 10303-1657
	USE FROM Physical_unit_design_view_mim;	-- ISO/TS 10303-1728

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3937 - ISO/TS 10303-1663 Design specific assignment to interconnect usage view - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3394
*)


SCHEMA Design_specific_assignment_to_interconnect_usage_view_mim;
	USE FROM Fabrication_joint_mim;	-- ISO/TS 10303-1668
--	USE FROM Interconnect_module_usage_view_mim;	-- ISO/TS 10303-1686
--	USE FROM Land_mim;	-- ISO/TS 10303-1692
--	USE FROM Layered_interconnect_module_with_printed_component_design_mim;	-- ISO/TS 10303-1700

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3940 - ISO/TS 10303-1664 Device marking - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3397
*)


SCHEMA Device_marking_mim;

    USE FROM Approval_mim; -- ISO/TS 10303-1012
	USE FROM Part_template_2d_shape_mim;	-- ISO/TS 10303-1716
	USE FROM Part_template_non_planar_shape_mim;	-- ISO/TS 10303-1719
	USE FROM Physical_unit_2d_shape_mim;	-- ISO/TS 10303-1726
	
	USE FROM Presentation_definition_schema(annotation_text_occurrence);

TYPE device_marking_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH 
     (representation);
END_TYPE;

TYPE device_marking_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH 
     (representation);
END_TYPE;

TYPE device_marking_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
     (representation);
END_TYPE;

END_SCHEMA;

(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2874 - ISO/TS 10303-1050 Dimension tolerance - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N1548
*) 


SCHEMA Dimension_tolerance_mim;

USE FROM Construction_geometry_mim;    -- ISO/TS 10303-1131

USE FROM Derived_shape_element_mim;    -- ISO/TS 10303-1130

USE FROM Document_assignment_mim;    -- ISO/TS 10303-1122

USE FROM Elemental_geometric_shape_mim;    -- ISO/TS 10303-1004

USE FROM Extended_measure_representation_mim;    -- ISO/TS 10303-1106

USE FROM external_reference_schema   -- ISO 10303-41
  (external_source,
   externally_defined_item); 

USE FROM geometry_schema   -- ISO 10303-42
  (placement); 

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

USE FROM Measure_representation_mim;    -- ISO/TS 10303-1118

USE FROM qualified_measure_schema   -- ISO 10303-45
  (descriptive_representation_item,
   measure_qualification,
   value_qualifier); 

USE FROM shape_aspect_definition_schema   -- ISO 10303-47
  (shape_aspect_deriving_relationship); 

USE FROM shape_dimension_schema;    -- ISO 10303-47

USE FROM Shape_property_assignment_mim;    -- ISO/TS 10303-1032

USE FROM shape_tolerance_schema   -- ISO 10303-47
  (limits_and_fits,
   plus_minus_tolerance,
   tolerance_method_definition,
   tolerance_value); 

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054


TYPE dimension_identification_item = SELECT BASED_ON identification_item WITH 
   (dimensional_size);
END_TYPE; 

TYPE dimension_tolerance_document_reference_item = SELECT BASED_ON document_reference_item WITH 
   (dimensional_size, 
    externally_defined_dimension_definition);
END_TYPE; 

ENTITY directed_dimensional_location
  SUBTYPE OF (dimensional_location);
END_ENTITY;

ENTITY externally_defined_dimension_definition
  SUBTYPE OF (dimensional_size, externally_defined_item);
WHERE
  WR1: (SELF\externally_defined_item.item_id = 'external size dimension') AND (SELF\externally_defined_item.source.source_id = 'external size dimension specification');
  WR2: 1 >= SIZEOF(QUERY ( adr <* USEDIN(SELF, 'DOCUMENT_ASSIGNMENT_MIM.APPLIED_DOCUMENT_REFERENCE.ITEMS')| (adr.assigned_document.description = 'external size dimension specification') ));
END_ENTITY;

END_SCHEMA;  -- Dimension_tolerance_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4180 - ISO/TS 10303-1744 Discrete shield - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3604
*)

SCHEMA Discrete_shield_mim;

USE FROM Assembly_component_placement_requirements_mim;	-- ISO/TS 10303-1634
USE FROM Physical_connectivity_definition_mim; -- ISO/TS 10303-1755

ENTITY physical_shield
  SUBTYPE OF (physical_component);
END_ENTITY;

ENTITY routed_physical_shield
  SUBTYPE OF (physical_shield, routed_physical_component);
END_ENTITY;

END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1187 - ISO/TS 10303-1121 Document and version identification - EXPRESS MIM
*)

SCHEMA Document_and_version_identification_mim;

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

END_SCHEMA;


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2959 - ISO/TS 10303-1122 Document assignment - EXPRESS MIM
*)



SCHEMA Document_assignment_mim;

USE FROM Document_and_version_identification_mim;    -- ISO/TS 10303-1121

USE FROM Document_definition_mim;    -- ISO/TS 10303-1123

USE FROM document_schema   -- ISO 10303-41
  (document_product_association); 

USE FROM File_identification_mim;    -- ISO/TS 10303-1127

USE FROM management_resources_schema   -- ISO 10303-41
  (document_reference,
   document_usage_constraint_assignment); 


TYPE document_reference_item = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY applied_document_reference
  SUBTYPE OF (document_reference);
  items : SET[1:?] OF document_reference_item;
END_ENTITY;

ENTITY applied_document_usage_constraint_assignment
  SUBTYPE OF (document_usage_constraint_assignment);
  items : SET[1:?] OF document_reference_item;
END_ENTITY;

ENTITY document_product_equivalence
  SUBTYPE OF (document_product_association);
WHERE
  WR1: SELF\document_product_association.name = 'equivalence';
  WR2: NOT('DOCUMENT_ASSIGNMENT_MIM.PRODUCT' IN TYPEOF(SELF\document_product_association.related_product)) OR ((SELF\document_product_association.relating_document.kind. product_data_type = 'configuration controlled document') AND (SIZEOF( QUERY( prpc <* USEDIN(SELF\document_product_association.related_product,'PRODUCT_DEFINITION_SCHEMA.' + 'PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS') | prpc.name = 'document' )) = 1));
  WR3: NOT('DOCUMENT_ASSIGNMENT_MIM.PRODUCT_DEFINITION_FORMATION' IN TYPEOF(SELF.related_product)) OR ((SELF\document_product_association.relating_document.kind.product_data_type = 'configuration controlled document version') AND (SIZEOF( QUERY( prpc <* USEDIN(SELF.related_product\product_definition_formation.of_product, 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS') | prpc.name = 'document')) = 1));
  WR4: NOT('DOCUMENT_ASSIGNMENT_MIM.PRODUCT_DEFINITION' IN TYPEOF(SELF.related_product)) OR ((SELF\document_product_association.relating_document.kind.product_data_type = 'configuration controlled document definition') AND (SIZEOF( QUERY( prpc <* USEDIN(SELF\document_product_association.related_product\product_definition.formation.of_product, 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS') | prpc.name = 'document' )) = 1));
END_ENTITY;

END_SCHEMA;  -- Document_assignment_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2961 - ISO/TS 10303-1123 Document definition - EXPRESS MIM
*) 


SCHEMA Document_definition_mim;

USE FROM Document_and_version_identification_mim;    -- ISO/TS 10303-1121

USE FROM External_item_identification_assignment_mim;    -- ISO/TS 10303-1128

USE FROM File_identification_mim;    -- ISO/TS 10303-1127

USE FROM product_definition_schema   -- ISO 10303-41
  (product_definition,
   product_definition_with_associated_documents); 

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019


TYPE document_location_select = SELECT BASED_ON external_identification_item WITH 
   (product_definition);
END_TYPE; 

END_SCHEMA;  -- Document_definition_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N3038 - ISO/TS 10303-1290 Document management - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2331
*) 


SCHEMA Document_management_mim;

USE FROM Alias_identification_mim;    -- ISO/TS 10303-1025

USE FROM basic_attribute_schema   -- ISO 10303-41
  (object_role); 

USE FROM Contract_mim;    -- ISO/TS 10303-1062

USE FROM Document_and_version_identification_mim;    -- ISO/TS 10303-1121

USE FROM Document_assignment_mim;    -- ISO/TS 10303-1122

USE FROM Document_definition_mim;    -- ISO/TS 10303-1123

USE FROM Document_properties_mim;    -- ISO/TS 10303-1126

USE FROM document_schema   -- ISO 10303-41
  (document_relationship); 

USE FROM Document_structure_mim;    -- ISO/TS 10303-1124

USE FROM External_item_identification_assignment_mim;    -- ISO/TS 10303-1128

USE FROM external_reference_schema   -- ISO 10303-41
  (external_source); 

USE FROM File_identification_mim;    -- ISO/TS 10303-1127

USE FROM Management_resource_information_mim;    -- ISO/TS 10303-1288

USE FROM management_resources_schema   -- ISO 10303-41
  (document_usage_role); 

USE FROM Product_categorization_mim;    -- ISO/TS 10303-1016

USE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_category,
   product_definition,
   product_definition_formation,
   product_definition_relationship); 

USE FROM Security_classification_mim;    -- ISO/TS 10303-1015


TYPE dm_aliasable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON aliasable_item WITH 
   (document_file, 
    product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE dm_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_approval_item WITH 
   (product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE dm_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_attribute_language_item WITH 
   (applied_document_reference, 
    applied_document_usage_constraint_assignment, 
    applied_external_identification_assignment, 
    document_relationship, 
    document_usage_role, 
    external_source, 
    object_role, 
    product, 
    product_category, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE dm_contract_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON contract_item WITH 
   (product_definition_formation);
END_TYPE; 

TYPE dm_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_date_and_time_item WITH 
   (document_file, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE dm_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_date_item WITH 
   (document_file, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE dm_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_identification_item WITH 
   (document_file, 
    product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE dm_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_multi_language_attribute_item WITH 
   (applied_document_reference, 
    applied_document_usage_constraint_assignment, 
    applied_external_identification_assignment, 
    document_relationship, 
    document_usage_role, 
    external_source, 
    object_role, 
    product, 
    product_category, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE dm_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_organization_item WITH 
   (document_file, 
    product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE dm_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_person_and_organization_item WITH 
   (document_file, 
    product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE dm_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH 
   (document_file, 
    product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

END_SCHEMA;  -- Document_management_mim

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1202 - ISO/TS 10303-1126 Document properties - EXPRESS MIM
*)



SCHEMA Document_properties_mim;

USE FROM Document_definition_mim;    -- ISO/TS 10303-1123

USE FROM File_identification_mim;

USE FROM Foundation_representation_mim;

USE FROM Measure_representation_mim;    -- ISO/TS 10303-1118

USE FROM Property_assignment_mim;

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_product_definition); 

END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1196 - ISO/TS 10303-1124 Document structure - EXPRESS MIM
*)



SCHEMA Document_structure_mim;
USE FROM Document_definition_mim; -- ISO/CD TS 10303-1123
USE FROM File_identification_mim; -- ISO/CD TS 10303-1127
USE FROM document_schema (document_relationship); -- ISO 10303-41
USE FROM product_definition_schema -- ISO 10303-41
	(product_definition_formation_relationship,
         product_definition_relationship);
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3967 - ISO/TS 10303-1673 Edge shape feature - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3415
*)


SCHEMA Edge_shape_feature_mim;
	USE FROM Layered_3d_shape_mim;	-- ISO/TS 10303-1694
	USE FROM Characteristic_mim;	-- ISO/TS 10303-1654	

END_SCHEMA;


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1169 - ISO/TS 10303-1057 Effectivity - EXPRESS MIM
*)
  
SCHEMA Effectivity_mim;

USE FROM Time_interval_mim; -- ISO 10303-1065
USE FROM Value_with_unit_mim ; -- ISO 10303-1054

USE FROM effectivity_schema -- ISO 10303-41
  (	dated_effectivity,
	effectivity,
   	effectivity_relationship,
	lot_effectivity,
   	serial_numbered_effectivity,
      time_interval_based_effectivity);

END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N3224 - ISO/TS 10303-1059 Effectivity application - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N1175
*) 


SCHEMA Effectivity_application_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (object_role,
   role_association,
   role_select); 

USE FROM Effectivity_mim;    -- ISO/TS 10303-1057

USE FROM management_resources_schema   -- ISO 10303-41
  (effectivity_assignment); 


TYPE effectivity_item = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY applied_effectivity_assignment
  SUBTYPE OF (effectivity_assignment);
  items : SET[1:?] OF effectivity_item;
END_ENTITY;

END_SCHEMA;  -- Effectivity_application_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3943 - ISO/TS 10303-1665 Electrical network definition - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3337
*)
SCHEMA Electrical_network_definition_mim;

	USE FROM Network_functional_design_view_mim;	-- ISO/TS 10303-1704

ENTITY electrical_network
  SUBTYPE OF (functional_unit);
END_ENTITY;

END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4249 - ISO/TS 10303-1004 Elemental geometric shape - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2103
*)

   
SCHEMA Elemental_geometric_shape_mim;
  
USE FROM Foundation_representation_mim;

USE FROM Identification_assignment_mim; -- ISO 10303-1021

USE FROM qualified_measure_schema
	(measure_representation_item); -- ISO 10303-45

USE FROM geometry_schema -- ISO 10303-42
      (cartesian_point,
       direction,
       axis2_placement_2d,
       axis2_placement_3d,
       geometric_representation_context,
       geometric_representation_item,
       cartesian_transformation_operator_2d,
       cartesian_transformation_operator_3d);

USE FROM product_property_representation_schema -- ISO 10303-41
      (shape_representation,
  	 shape_representation_relationship);

USE FROM representation_schema -- ISO 10303-43
      (item_defined_transformation,
	value_representation_item);

TYPE representation_identification_item = SELECT BASED_ON identification_item WITH 
  (shape_representation);
END_TYPE; 
-- TODiscuss - very questionable place - this is not really used anywhere 
TYPE representation_version_item = SELECT BASED_ON versionable_item WITH 
  (shape_representation);
END_TYPE;

END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2115 - ISO/TS 10303-1064 Event - EXPRESS MIM
*)

SCHEMA Event_mim; 

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM Date_time_mim;    -- ISO/TS 10303-1010

USE FROM date_time_schema   -- ISO 10303-41
  (event_occurrence,
   event_occurrence_relationship,
   relative_event_occurrence); 

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054


TYPE event_occurrence_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH 
   (event_occurrence);
END_TYPE; 

TYPE event_occurrence_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH 
   (event_occurrence);
END_TYPE; 

END_SCHEMA;  -- Event_mim

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2117 - ISO/TS 10303-1364 Event assignment - EXPRESS MIM
*)



SCHEMA Event_assignment_mim; 

USE FROM Event_mim;    -- ISO/TS 10303-1064

USE FROM management_resources_schema   -- ISO 10303-41
  (event_occurrence_assignment); 


TYPE event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_event_occurrence_assignment
  SUBTYPE OF (event_occurrence_assignment);
  items : SET[1:?] OF event_occurrence_item;
END_ENTITY;

END_SCHEMA;  -- Event_assignment_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3949 - ISO/TS 10303-1667 Extended basic geometry - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3673
*)


SCHEMA Extended_basic_geometry_mim;
	USE FROM Basic_geometry_mim;	-- ISO/TS 10303-1652
	
	USE FROM Representation_schema(
		mapped_item,
		representation_item_relationship,
		representation_map,
		representation_relationship_with_transformation,
		transformation);
		
	USE FROM Geometry_schema(
		vector);	

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set);

  ENTITY definitional_representation_relationship
    SUBTYPE OF (representation_relationship);
   WHERE
    WR1: acyclic_representation_relationship(SELF,
       [SELF\representation_relationship.rep_2],
       'REPRESENTATION_SCHEMA.'+
       'REPRESENTATION');
  END_ENTITY;  
	
ENTITY geometric_model_element_relationship
  SUBTYPE OF (geometric_representation_item, representation_item_relationship);
UNIQUE
  UR1: SELF\representation_item_relationship.relating_representation_item, 
       SELF\representation_item_relationship.related_representation_item;
WHERE
  WR1: SELF\representation_item_relationship.relating_representation_item :<>: 
       SELF\representation_item_relationship.related_representation_item;
END_ENTITY; 

FUNCTION acyclic_representation_relationship
 (relation : representation_relationship; relatives : SET[1:?] OF representation; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF representation_relationship;
    END_LOCAL;

    IF relation.rep_1 IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(r <* bag_to_set(USEDIN(relation.rep_1, 'REPRESENTATION_SCHEMA.' + 'REPRESENTATION_RELATIONSHIP.' + 'REP_2')) | specific_relation IN TYPEOF(r));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_representation_relationship(x[i], relatives + relation.rep_1, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 
	
	
END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3946 - ISO/TS 10303-1666 Extended geometric tolerance - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3400
*)


SCHEMA Extended_geometric_tolerance_mim;
	USE FROM Requirement_decomposition_mim;	-- ISO/TS 10303-1740
	USE FROM Default_tolerance_mim;	-- ISO/TS 10303-1052
	USE FROM Dimension_tolerance_mim;	-- ISO/TS 10303-1050
	USE FROM Geometric_tolerance_mim;	-- ISO/TS 10303-1051
    USE FROM Non_feature_shape_element_mim;	-- ISO/TS 10303-1706
	
	USE FROM Application_context_schema(application_context_element);
	USE FROM Material_property_definition_schema(property_definition_relationship);
	USE FROM Shape_tolerance_schema
		(runout_zone_orientation,
		tolerance_zone_form);

	SUBTYPE_CONSTRAINT egt_non_feature_shape_element_subtypes FOR shape_aspect; 
	    (ONEOF (
		 derived_shape_aspect,
		 positional_boundary,
		 positional_boundary_member,
		 tolerance_zone_boundary,
		 viewing_plane,
		 seating_plane,
		 reference_graphic_registration_mark));
	END_SUBTYPE_CONSTRAINT;

TYPE egt_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
   (statistical_geometric_tolerance,
   statistical_dimensional_size,
   statistical_dimensional_location,
   property_definition);
END_TYPE; 

TYPE egt_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH 
   (shape_dimension_representation);
END_TYPE; 
	
TYPE egt_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
   (representation);
END_TYPE; 
	
ENTITY auxiliary_characteristic_dimension_representation
 SUBTYPE OF (dimensional_characteristic_representation);
END_ENTITY;

ENTITY datum_difference
  SUBTYPE OF (shape_aspect,shape_aspect_relationship);
    SELF\shape_aspect_relationship.related_shape_aspect : physical_unit_datum;
    SELF\shape_aspect_relationship.relating_shape_aspect : physical_unit_datum;    
WHERE
  WR1: SELF\shape_aspect_relationship.relating_shape_aspect :<>:
       SELF\shape_aspect_relationship.related_shape_aspect;
END_ENTITY;

ENTITY datum_difference_based_characteristic
  SUBTYPE OF (representation_item);
END_ENTITY;

(** Questionable entity - nothing directly mapps to it from ARM *)
ENTITY dimensional_size_property
  SUBTYPE OF (dimensional_size, property_definition);
END_ENTITY;

ENTITY edge_segment_vertex
  SUBTYPE OF (physical_unit_datum);
END_ENTITY;

ENTITY geometric_tolerance_group
  SUBTYPE OF (property_definition);
END_ENTITY;

ENTITY linear_profile_tolerance
  SUBTYPE OF (physical_unit_geometric_tolerance);
END_ENTITY;

ENTITY opposing_boundary_dimensional_size
  SUBTYPE OF (dimensional_size);
END_ENTITY;

ENTITY physical_unit_datum
  SUPERTYPE OF (edge_segment_vertex)
  SUBTYPE OF (shape_aspect);
WHERE
    WR1: SELF\shape_aspect.product_definitional = False;
END_ENTITY;

ENTITY physical_unit_datum_feature
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY physical_unit_datum_target_set
  SUBTYPE OF (physical_unit_datum_feature);
END_ENTITY;

ENTITY physical_unit_geometric_tolerance
  SUBTYPE OF (geometric_tolerance, property_definition);
END_ENTITY;

ENTITY positional_boundary
  SUBTYPE OF (shape_aspect);
WHERE
  WR2: SELF\shape_aspect.product_definitional = False;
END_ENTITY;

ENTITY positional_boundary_member
  SUBTYPE OF (shape_aspect);
WHERE
  WR1: SELF\shape_aspect.product_definitional = False;
END_ENTITY;

ENTITY statistical_dimensional_location
 SUBTYPE OF (dimensional_location);
END_ENTITY;

ENTITY statistical_dimensional_size
 SUBTYPE OF (dimensional_size_property);
END_ENTITY;

ENTITY statistical_geometric_tolerance
  SUBTYPE OF (physical_unit_geometric_tolerance);
END_ENTITY;

ENTITY tolerance_zone_boundary
  SUBTYPE OF (shape_aspect);
WHERE
  WR1: SELF\shape_aspect.product_definitional = False;
END_ENTITY;

ENTITY tolerance_zone_explicit_opposing_boundary_set
  SUBTYPE OF (tolerance_zone_boundary);
END_ENTITY;

ENTITY tolerance_zone_implicit_opposing_boundary_set
  SUBTYPE OF (tolerance_zone_boundary);
END_ENTITY;

ENTITY viewing_plane
  SUBTYPE OF (shape_aspect);
END_ENTITY;

END_SCHEMA;


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N4270 - ISO/TS 10303-1106 Extended measure representation - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N3232
*) 


SCHEMA Extended_measure_representation_mim;

USE FROM Measure_representation_mim;    -- ISO/TS 10303-1118

USE FROM qualified_measure_schema   -- ISO 10303-45
  (measure_representation_item,
   precision_qualifier,
   qualified_representation_item,
   qualitative_uncertainty, -- GL added, needed for mapping
   standard_uncertainty,
   type_qualifier,
   uncertainty_qualifier); 

USE FROM representation_schema   -- ISO 10303-43
  (compound_item_definition,
   compound_representation_item,
   list_representation_item,
   set_representation_item); 

USE FROM support_resource_schema;    -- ISO 10303-41

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (type_check_function); 


ENTITY value_range
  SUBTYPE OF (compound_representation_item);
WHERE
  WR1: ( 'REPRESENTATION_SCHEMA.'+ 'SET_REPRESENTATION_ITEM' IN TYPEOF ( item_element ) ) AND value_range_wr1 ( item_element );
  WR2: value_range_wr2 ( item_element );
  WR3: value_range_wr3 ( item_element );
END_ENTITY;

RULE subtype_exclusiveness_representation_item FOR 
(representation_item);
WHERE
  WR1: SIZEOF(QUERY (cri <* representation_item | NOT (type_check_function(cri,['QUALIFIED_MEASURE_SCHEMA.MEASURE_REPRESENTATION_ITEM','REPRESENTATION_SCHEMA.VALUE_REPRESENTATION_ITEM','REPRESENTATION_SCHEMA.COMPOUND_REPRESENTATION_ITEM'] , 3)))) = 0;
END_RULE; 

FUNCTION value_range_wr1
 (agg : compound_item_definition) : BOOLEAN; 
BEGIN
IF (SIZEOF(agg) = 2) AND ((SIZEOF(QUERY (i1 <* agg | (
'QUALIFIED_MEASURE_SCHEMA.MEASURE_REPRESENTATION_ITEM' IN TYPEOF
(i1)))) = 2) OR
(SIZEOF(QUERY (i2 <* agg | (
'REPRESENTATION_SCHEMA.VALUE_REPRESENTATION_ITEM' IN TYPEOF
(i2)))) = 2)) THEN
RETURN(TRUE);
ELSE
RETURN(FALSE);
END_IF;
END;
      END_FUNCTION; 

FUNCTION value_range_wr2
 (agg : compound_item_definition) : BOOLEAN; 
BEGIN
IF (SIZEOF(QUERY (i <* agg | (i.name = 'upper limit'))) = 1)
AND (SIZEOF(QUERY (i <* agg | (i.name = 'lower limit'))) = 1)
THEN
RETURN(TRUE);
ELSE
RETURN(FALSE);
END_IF;
END;
      END_FUNCTION; 

FUNCTION value_range_wr3
 (agg : compound_item_definition) : BOOLEAN; 
BEGIN
IF (SIZEOF(QUERY(i1 <* agg |
('QUALIFIED_MEASURE_SCHEMA.MEASURE_REPRESENTATION_ITEM' IN TYPEOF (i1)) AND
(SIZEOF (QUERY (i2 <* agg |
('QUALIFIED_MEASURE_SCHEMA.MEASURE_REPRESENTATION_ITEM' IN TYPEOF (i2)) AND
(i1 :<>: i2) AND (i1\measure_with_unit.unit_component :=: i2\measure_with_unit.unit_component))) = 1))) = 2)
THEN
RETURN (TRUE);
ELSE
RETURN (FALSE);
END_IF;
END;
      END_FUNCTION; 

END_SCHEMA;  -- Extended_measure_representation_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N3050 - ISO/TS 10303-1275 External class - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2265
*) 


SCHEMA External_class_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   description_attribute_select); 

USE FROM Class_mim;    -- ISO/TS 10303-1070

USE FROM classification_schema   -- ISO 10303-54
  (class); 

USE FROM external_reference_schema   -- ISO 10303-41
  (external_source,
   externally_defined_item); 

USE FROM Name_assignment_mim;    -- ISO/TS 10303-1340


TYPE external_class_name_item = SELECT BASED_ON name_item WITH 
   (external_class_library);
END_TYPE; 

ENTITY external_class_library
  SUBTYPE OF (external_source);
END_ENTITY;

ENTITY externally_defined_class
  SUBTYPE OF (class, externally_defined_item);
END_ENTITY;

END_SCHEMA;  -- External_class_mim


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1208 - ISO/TS 10303-1128 External item identification assignment - EXPRESS MIM
*)


SCHEMA External_item_identification_assignment_mim;

USE FROM management_resources_schema   	-- ISO 10303-41
  (external_identification_assignment); 

USE FROM support_resource_schema		-- ISO 10303-41
  (identifier);

TYPE external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE;

ENTITY applied_external_identification_assignment
SUBTYPE OF (external_identification_assignment);
  items : SET [1 : ?] OF external_identification_item;
END_ENTITY;

END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1229 - ISO/TS 10303-1033 External model - EXPRESS MIM
*)

SCHEMA External_model_mim;
  
USE FROM Elemental_geometric_shape_mim; -- ISO 10303-1004
  
USE FROM File_identification_mim;

USE FROM product_property_definition_schema
  (property_definition);

USE FROM product_property_representation_schema
  (property_definition_representation);

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3952 - ISO/TS 10303-1668 Fabrication joint - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3403
*)


SCHEMA Fabrication_joint_mim;
	USE FROM Land_mim;	-- ISO/TS 10303-1692
	USE FROM Layered_interconnect_module_with_printed_component_design_mim;	-- ISO/TS 10303-1700
	
REFERENCE FROM product_property_definition_schema -- ISO 10303-41
  (acyclic_shape_aspect_relationship);
	
	
ENTITY connection_zone_based_fabrication_joint
  SUBTYPE OF (fabrication_joint);
END_ENTITY;

ENTITY fabrication_joint
  SUBTYPE OF (component_feature_joint);
WHERE
  WR1: acyclic_shape_aspect_relationship(SELF,
       [SELF\shape_aspect_relationship.related_shape_aspect],
       'FABRICATION_JOINT_MIM.'+
       'FABRICATION_JOINT');
END_ENTITY;

ENTITY passage_terminal_based_fabrication_joint_link
  SUBTYPE OF (shape_aspect, shape_aspect_relationship);
END_ENTITY;

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3955 - ISO/TS 10303-1669 Fabrication requirement - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3406
*)


SCHEMA Fabrication_requirement_mim;
	USE FROM Fabrication_technology_mim;	-- ISO/TS 10303-1670
	
	USE FROM presentation_appearance_schema(styled_item);

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3958 - ISO/TS 10303-1670 Fabrication technology - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3664
*)


SCHEMA Fabrication_technology_mim;
    USE FROM Constructive_solid_geometry_2d_mim; 	-- ISO/TS 10303-1731
	USE FROM Part_feature_location_mim; -- ISO/TS 10303-1714
	USE FROM Physical_layout_template_mim;	-- ISO/TS 10303-1722
	USE FROM Requirement_decomposition_mim;	-- ISO/TS 10303-1740
	USE FROM Extended_geometric_tolerance_mim;	-- ISO/TS 10303-1666
	USE FROM Part_template_shape_with_parameters_mim; -- ISO/TS 10303-1720

TYPE ft_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH 
   (land_physical_template,
   stratum_technology);
END_TYPE; 
	
TYPE ft_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
   (passage_technology,
    stratum_technology);
END_TYPE; 

TYPE ft_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (passage_technology,
     stratum_technology,
     stratum_technology_occurrence);
END_TYPE; 

SUBTYPE_CONSTRAINT ft_part_template_definition_subtypes FOR part_template_definition; 
    (ONEOF (geometric_template,
	 stratum_stack_model));
END_SUBTYPE_CONSTRAINT;

SUBTYPE_CONSTRAINT ft_property_definition_subtypes FOR property_definition; 
    (ONEOF (stratum_technology_occurrence_link,
	 stratum_technology_occurrence));
END_SUBTYPE_CONSTRAINT;

SUBTYPE_CONSTRAINT ft_property_definition_relationship_subtypes FOR property_definition_relationship; 
    (ONEOF (stratum_technology_occurrence_swap_relationship,
	 stratum_technology_swap_relationship,
	 stratum_technology_occurrence_link));
END_SUBTYPE_CONSTRAINT;

ENTITY blind_passage_template
  SUBTYPE OF (unsupported_passage_template);
END_ENTITY;

ENTITY component_termination_passage_template
  SUBTYPE OF (continuous_template, inter_stratum_feature_template);
END_ENTITY;

ENTITY continuous_template
  SUBTYPE OF (geometric_template);
END_ENTITY;

ENTITY counterbore_passage_template
  SUBTYPE OF (unsupported_passage_template);
END_ENTITY;

ENTITY countersunk_passage_template
  SUBTYPE OF (unsupported_passage_template);
END_ENTITY;  
  
ENTITY default_attachment_size_based_land_physical_template
  SUBTYPE OF (land_physical_template, shape_aspect);
  DERIVE
    SELF\shape_aspect.of_shape : product_definition_shape := SELF;
END_ENTITY;

ENTITY default_passage_based_land_physical_template
  ABSTRACT SUPERTYPE OF (ONEOF (default_plated_passage_based_land_physical_template,
    default_unsupported_passage_based_land_physical_template))
  SUBTYPE OF (land_physical_template);
END_ENTITY;

ENTITY default_plated_passage_based_land_physical_template
  SUBTYPE OF (default_passage_based_land_physical_template);
END_ENTITY;

ENTITY default_unsupported_passage_based_land_physical_template
  SUBTYPE OF (default_passage_based_land_physical_template);
END_ENTITY;

ENTITY filled_via_template
  SUBTYPE OF (via_template);
END_ENTITY;
  
ENTITY inter_stratum_feature_template
  SUPERTYPE OF (ONEOF(component_termination_passage_template,
    unsupported_passage_template,
    via_template))
    SUBTYPE OF (geometric_template);
END_ENTITY;
  
ENTITY land_physical_template
  SUPERTYPE OF (ONEOF (default_passage_based_land_physical_template,
    default_attachment_size_based_land_physical_template))
  SUBTYPE OF (stratum_feature_template);
END_ENTITY;

ENTITY land_template_terminal
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY material_removal_feature_template
  SUBTYPE OF (single_stratum_continuous_template);
END_ENTITY;

ENTITY passage_technology
  SUBTYPE OF (characterized_object);
UNIQUE
  UR1: SELF\characterized_object.name;
END_ENTITY;

ENTITY single_stratum_continuous_template
  ABSTRACT SUPERTYPE OF (ONEOF (stratum_feature_template, material_removal_feature_template))
  SUBTYPE OF (continuous_template, single_stratum_template);
END_ENTITY;

ENTITY single_stratum_template
  ABSTRACT SUPERTYPE OF (single_stratum_continuous_template)
  SUBTYPE OF (part_template_definition);
END_ENTITY;

ENTITY stratum_feature_template
  SUBTYPE OF (single_stratum_continuous_template);
END_ENTITY;

ENTITY stratum_stack_model
  ABSTRACT SUPERTYPE
  SUBTYPE OF(part_template_definition);
END_ENTITY;

ENTITY stratum_technology
  SUBTYPE OF (characterized_object);
UNIQUE
  UR1: SELF\characterized_object.name;
END_ENTITY;

ENTITY stratum_technology_occurrence
  SUBTYPE OF(property_definition);
END_ENTITY;

ENTITY stratum_technology_occurrence_link
  SUBTYPE OF(property_definition, property_definition_relationship);
END_ENTITY;

ENTITY stratum_technology_occurrence_swap_relationship
  SUBTYPE OF(property_definition, property_definition_relationship);
END_ENTITY;

ENTITY stratum_technology_swap_relationship
  SUBTYPE OF(property_definition_relationship);
END_ENTITY;

ENTITY unsupported_passage_template
  SUPERTYPE OF (ONEOF (counterbore_passage_template,
    countersunk_passage_template,
    blind_passage_template))
  SUBTYPE OF (continuous_template, inter_stratum_feature_template);
END_ENTITY;

ENTITY via_template
  SUBTYPE OF (continuous_template, inter_stratum_feature_template);
END_ENTITY;

END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1286 - ISO/TS 10303-1512 Faceted boundary representation - EXPRESS MIM
*)


SCHEMA Faceted_boundary_representation_mim;

USE FROM Elemental_geometric_shape_mim;

USE FROM aic_faceted_brep;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3961 - ISO/TS 10303-1671 Feature and connection zone - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3409
*)


SCHEMA Feature_and_connection_zone_mim;
	USE FROM Shape_feature_mim; -- ISO/TS 10303-1764
	
ENTITY connection_zone_interface_plane_relationship
  SUBTYPE OF (shape_aspect, shape_aspect_relationship);
UNIQUE
  UR1: SELF\shape_aspect_relationship.name;
END_ENTITY;

ENTITY location_shape_representation
  SUBTYPE OF (shape_representation);
  WHERE
    WR1 : SIZEOF(SELF.items)= 1 ;
    WR2 : SIZEOF(QUERY(i <* SELF.items | 'GEOMETRY_SCHEMA.' + 'POINT' IN TYPEOF(i)))= 1 ;
END_ENTITY; -- location_shape_representation
	
END_SCHEMA;


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1205 - ISO/TS 10303-1127 File identification - EXPRESS MIM
*)

SCHEMA File_identification_mim;

USE FROM Identification_assignment_mim;
 
USE FROM External_item_identification_assignment_mim;

USE FROM document_schema   -- ISO 10303-41
  (document,
   document_representation_type); 

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 

TYPE file_identification_item = SELECT BASED_ON identification_item WITH (document_file);
END_TYPE; 

TYPE file_version_item = SELECT BASED_ON versionable_item WITH
  (document_file);
END_TYPE;

TYPE file_location_select = SELECT BASED_ON external_identification_item WITH (document_file);
END_TYPE;

ENTITY document_file
SUBTYPE OF (document, characterized_object);
WHERE
  WR1: SELF\characterized_object.name = '';
  WR2: NOT EXISTS(SELF\characterized_object.description);
  WR3: SIZEOF( QUERY( drt <* SELF\document.representation_types |
               drt.name IN ['digital','physical'])) = 1;
END_ENTITY;

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3964 - ISO/TS 10303-1672 Fill area style - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3412
*)

SCHEMA Fill_area_style_mim;
	USE FROM Basic_curve_mim;	-- ISO/TS 10303-1651
	USE FROM Styled_curve_mim;	-- ISO/TS 10303-1749
	USE FROM Value_with_unit_extension_mim;	-- ISO/TS 10303-1753

	USE FROM Extended_basic_geometry_mim;	-- ISO/TS 10303-1667	

	USE FROM presentation_appearance_schema( -- ISO/TS 10303-46	
		externally_defined_hatch_style,
		externally_defined_tile_style,
		fill_area_style_hatching,
		fill_area_style_tiles,
		fill_area_style_tile_symbol_with_style);

	USE FROM presentation_definition_schema( -- ISO/TS 10303-46	
		annotation_symbol_occurrence);
		
END_SCHEMA;



(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3886 - ISO/TS 10303-1646 Footprint definition - EXPRESS MIM
*)

SCHEMA Footprint_definition_mim;

    USE FROM Part_template_2d_shape_mim; -- ISO/TS 10303-1716
	USE FROM Package_mim;	-- ISO/TS 10303-1707

  SUBTYPE_CONSTRAINT multi_stratum_structured_template_subtypes FOR multi_stratum_structured_template;   
 	(ONEOF (padstack_definition, generic_footprint_definition, multi_stratum_special_symbol_template));
  END_SUBTYPE_CONSTRAINT;  

ENTITY breakout_footprint_definition
 SUBTYPE OF (generic_footprint_definition);
END_ENTITY; 
	
ENTITY footprint_definition
 SUBTYPE OF (generic_footprint_definition);
END_ENTITY; 

ENTITY generic_footprint_definition
 ABSTRACT SUPERTYPE OF (ONEOF (footprint_definition, breakout_footprint_definition))
 SUBTYPE OF (multi_stratum_structured_template);
END_ENTITY;

END_SCHEMA;
(* 
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $ 
ISO TC184/SC4/WG12 N4349 - ISO/TS 10303-1006 Foundation representation - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N3223
*) 


SCHEMA Foundation_representation_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   description_attribute_select,
   id_attribute,
   id_attribute_select); 

USE FROM measure_schema   -- ISO 10303-41
  (global_unit_assigned_context); 

USE FROM qualified_measure_schema   -- ISO 10303-45
  (descriptive_representation_item); 

USE FROM representation_schema   -- ISO 10303-43
  (global_uncertainty_assigned_context,
   representation,
   representation_context,
   representation_item,
   representation_relationship,
   uncertainty_measure_with_unit); 

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054


END_SCHEMA;  -- Foundation_representation_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3970 - ISO/TS 10303-1674 Functional assignment to part - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3670
*)


SCHEMA Functional_assignment_to_part_mim;
	USE FROM Functional_usage_view_mim;	-- ISO/TS 10303-1705
	USE FROM Physical_unit_usage_view_mim;	-- ISO/TS 10303-1732

TYPE fatp_groupable_item = SELECT BASED_ON groupable_item WITH 
   (part_connected_terminals_definition);
END_TYPE; 
	
ENTITY part_connected_terminals_definition
  SUBTYPE OF (shape_aspect);
UNIQUE
  UR1: SELF\shape_aspect.name;
END_ENTITY;
	
END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3973 - ISO/TS 10303-1675 Functional decomposition to assembly design - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3418
*)


SCHEMA Functional_decomposition_to_assembly_design_mim;
	USE FROM Assembly_technology_mim;	-- ISO/TS 10303-1649
	USE FROM Functional_decomposition_to_design_mim; -- ISO/TS 10303-1676
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3976 - ISO/TS 10303-1676 Functional decomposition to design - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3421
*)


SCHEMA Functional_decomposition_to_design_mim;
	USE FROM Design_management_mim;	-- ISO/TS 10303-1661
	USE FROM Physical_unit_design_view_mim;	-- ISO/TS 10303-1728
	USE FROM Network_functional_design_view_mim;	-- ISO/TS 10303-1704	

TYPE fdtd_managed_design_object = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON managed_design_object WITH 
	(product_definition_relationship,
	property_definition_relationship);
END_TYPE;

TYPE fdtd_groupable_item = SELECT BASED_ON groupable_item WITH 
   (component_functional_unit);
END_TYPE; 

ENTITY design_composition_path
  SUBTYPE OF (applied_group_assignment, product_definition);
END_ENTITY;

ENTITY reference_composition_path
  SUBTYPE OF (applied_group_assignment, product_definition);
END_ENTITY;

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3979 - ISO/TS 10303-1677 Functional decomposition to interconnect design - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3424
*)


SCHEMA Functional_decomposition_to_interconnect_design_mim;

	USE FROM Fabrication_joint_mim;	-- ISO/TS 10303-1668
	USE FROM Functional_decomposition_to_design_mim; -- ISO/TS 10303-1676	

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3982 - ISO/TS 10303-1678 Functional decomposition with nodal representation to packaged mapping - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3430
*)


SCHEMA Functional_decomposition_with_nodal_representation_to_packaged_mapping_mim;
	USE FROM Functional_decomposition_to_design_mim; -- ISO/TS 10303-1676
	USE FROM Physical_connectivity_definition_mim;	-- ISO/TS 10303-1755

TYPE fdwnrtpm_groupable_item = SELECT BASED_ON groupable_item WITH 
   (network_node_definition);
END_TYPE; 

ENTITY aggregate_connectivity_requirement
  SUBTYPE OF (applied_group_assignment, product_definition);
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3985 - ISO/TS 10303-1679 Functional specification - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3427
*)


SCHEMA Functional_specification_mim;
	USE FROM Signal_mim;	-- ISO/TS 10303-1745
	USE FROM Network_functional_design_view_mim;	-- ISO/TS 10303-1704	
	
	USE FROM Application_context_schema(application_context_element);	

TYPE fs_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH 
   (functional_specification);
END_TYPE; 

TYPE fs_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
   (representation);
END_TYPE; 
	
ENTITY functional_specification
  SUBTYPE OF (representation);
END_ENTITY;
	
ENTITY functional_specification_definition
  SUBTYPE OF (functional_unit);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3988 - ISO/TS 10303-1680 Functional unit requirement allocation - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3433
*)


SCHEMA Functional_unit_requirement_allocation_mim;
	USE FROM Network_functional_design_view_mim;	-- ISO/TS 10303-1704
	
TYPE fura_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (component_functional_unit);
END_TYPE; 
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4063 - ISO/TS 10303-1705 Functional usage view - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3343
*)
SCHEMA Functional_usage_view_mim;

	USE FROM Analytical_model_mim;	-- ISO/TS 10303-1603
	USE FROM Network_functional_design_view_mim;	-- ISO/TS 10303-1704
	USE FROM Product_identification_mim;	-- ISO/TS 10303-1017
	USE FROM Product_view_definition_relationship_mim;	-- ISO/TS 10303-1041
    USE FROM Shape_property_assignment_mim;    -- ISO/TS 10303-1032	

-- USE FROM Date_time_schema;

USE FROM Document_schema(document_type);
USE FROM Product_property_definition_schema
	(shape_aspect,
	shape_aspect_relationship);
USE FROM Material_property_definition_schema(property_definition_relationship);

TYPE nfuv_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
     (shape_aspect);
END_TYPE;

ENTITY functional_terminal_group
 SUBTYPE OF (group);
UNIQUE
   UR1: SELF\group.name;
END_ENTITY;

ENTITY functional_unit
 SUBTYPE OF (product_definition, product_definition_shape);
  DERIVE
    SELF\property_definition.definition : characterized_definition := SELF;
  WHERE
    WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +'NAME_ATTRIBUTE.NAMED_ITEM')) = 0;
    WR2: NOT EXISTS(SELF\property_definition.description);
END_ENTITY;

ENTITY functional_unit_terminal_definition
  SUBTYPE OF (shape_aspect);
    SELF\shape_aspect.of_shape : functional_unit;
END_ENTITY;

ENTITY make_from_functional_unit_terminal_definition_relationship
 SUBTYPE OF (shape_aspect, shape_aspect_relationship);
UNIQUE
  UR1: SELF\shape_aspect_relationship.relating_shape_aspect, 
       SELF\shape_aspect_relationship.related_shape_aspect;
WHERE
  WR1: relating_shape_aspect.of_shape :<>: 
       related_shape_aspect.of_shape;
  WR2: SELF\shape_aspect.product_definitional = FALSE;
END_ENTITY;

ENTITY scalar_terminal_definition_link
  SUBTYPE OF (shape_aspect,shape_aspect_relationship);
   SELF\shape_aspect_relationship.relating_shape_aspect : functional_unit_terminal_definition;
UNIQUE
  UR1: related_shape_aspect, relating_shape_aspect;
WHERE
  WR1: SELF\shape_aspect_relationship.related_shape_aspect :<>:
       SELF\shape_aspect_relationship.relating_shape_aspect;
END_ENTITY; 

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3991 - ISO/TS 10303-1681 Generic material aspects - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3658
*)

SCHEMA Generic_material_aspects_mim;

	USE FROM Independent_property_mim;	-- ISO/TS 10303-1036
	USE FROM Independent_property_representation_mim;	-- ISO/TS 10303-1038
	USE FROM Property_assignment_mim;	-- ISO/TS 10303-1030

USE FROM material_property_definition_schema(
  material_designation,
  material_designation_characterization,
  material_property);

USE FROM material_property_representation_schema (
  data_environment,  
  material_property_representation);

ENTITY general_material_property 
SUBTYPE OF (general_property); 
WHERE 
WR1: SIZEOF( QUERY( gpa <* USEDIN(SELF,'GENERIC_MATERIAL_ASPECTS_MIM.GENERAL_PROPERTY_ASSOCIATION.BASE_DEFINITION') | 
  NOT ('GENERIC_MATERIAL_ASPECTS_MIM.MATERIAL_PROPERTY' IN TYPEOF(gpa.derived_definition)) )) = 0; 
END_ENTITY; 

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4231 - ISO/TS 10303-1762 Generic product occurrence - EXPRESS MIM
*)

SCHEMA Generic_product_occurrence_mim;
	USE FROM Product_view_definition_relationship_mim;	-- ISO/TS 10303-1041
	USE FROM Value_with_unit_mim;	-- ISO/TS 10303-1054	
	USE FROM Extended_measure_representation_mim;	-- ISO/TS 10303-1106	
	USE FROM Specified_product_mim;	-- ISO/TS 10303-1104	

END_SCHEMA;
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2877 - ISO/TS 10303-1051 Geometric tolerance - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N1551
*) 


SCHEMA Geometric_tolerance_mim;

USE FROM aic_geometric_tolerances;    -- ISO 10303-519

USE FROM Derived_shape_element_mim;    -- ISO/TS 10303-1130

USE FROM Elemental_geometric_shape_mim;    -- ISO/TS 10303-1004

USE FROM Measure_representation_mim;    -- ISO/TS 10303-1118

USE FROM product_property_representation_schema   -- ISO 10303-41
  (property_definition_representation,
   shape_representation); 

USE FROM qualified_measure_schema   -- ISO 10303-45
  (measure_qualification,
   precision_qualifier,
   type_qualifier,
   value_qualifier); 

USE FROM shape_aspect_definition_schema   -- ISO 10303-47
  (datum_target); 

USE FROM Shape_property_assignment_mim;    -- ISO/TS 10303-1032

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   type_check_function); 


ENTITY placed_datum_target_feature
  SUBTYPE OF (datum_target);
DERIVE
  representation_associations : SET[0:?] OF property_definition_representation := get_shape_aspect_property_definition_representations(SELF);
WHERE
  WR1: SELF.description IN ['point','line','rectangle','circle', 'circular line'];
  WR2: SIZEOF (QUERY (pdr <* representation_associations | 'GEOMETRIC_TOLERANCE_MIM.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN TYPEOF (pdr.used_representation) )) = 1;
  WR3: valid_datum_target_parameters(SELF);
END_ENTITY;

ENTITY shape_representation_with_parameters
  SUBTYPE OF (shape_representation);
WHERE
  WR1: SIZEOF( QUERY( i <* SELF.items | SIZEOF(['GEOMETRY_SCHEMA.PLACEMENT', 'GEOMETRIC_TOLERANCE_MIM.MEASURE_REPRESENTATION_ITEM', 'GEOMETRIC_TOLERANCE_MIM.DESCRIPTIVE_REPRESENTATION_ITEM'] * TYPEOF(i)) = 1 )) = SIZEOF(SELF.items);
END_ENTITY;

RULE subtype_exclusiveness_geometric_tolerance FOR 
(geometric_tolerance);
WHERE
  WR1: SIZEOF(QUERY (gt <* geometric_tolerance | NOT (type_check_function(gt, ['GEOMETRIC_TOLERANCE_MIM.ANGULARITY_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.CIRCULAR_RUNOUT_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.COAXIALITY_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.CONCENTRICITY_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.CYLINDRICITY_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.FLATNESS_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.LINE_PROFILE_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.PARALLELISM_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.PERPENDICULARITY_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.POSITION_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.ROUNDNESS_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.STRAIGHTNESS_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.SURFACE_PROFILE_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.SYMMETRY_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.TOTAL_RUNOUT_TOLERANCE'] , 3)))) = 0;
END_RULE; 

RULE subtype_mandatory_geometric_tolerance FOR 
(geometric_tolerance);
WHERE
  WR1: SIZEOF(QUERY (gt <* geometric_tolerance | NOT (type_check_function(gt, ['GEOMETRIC_TOLERANCE_MIM.ANGULARITY_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.CIRCULAR_RUNOUT_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.COAXIALITY_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.CONCENTRICITY_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.CYLINDRICITY_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.FLATNESS_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.LINE_PROFILE_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.PARALLELISM_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.PERPENDICULARITY_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.POSITION_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.ROUNDNESS_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.STRAIGHTNESS_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.SURFACE_PROFILE_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.SYMMETRY_TOLERANCE', 'GEOMETRIC_TOLERANCE_MIM.TOTAL_RUNOUT_TOLERANCE'] , 0)))) = 0;
END_RULE; 

FUNCTION get_shape_aspect_property_definition_representations
 (s_a_instance : shape_aspect) : SET OF property_definition_representation; 
LOCAL
pd_set : SET OF property_definition := [];
pdr_set : SET OF property_definition_representation := [] ;
END_LOCAL;
pd_set := bag_to_set(USEDIN(s_a_instance, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.PROPERTY_DEFINITION.DEFINITION'));
IF (SIZEOF(pd_set) < 1) THEN
RETURN (pdr_set);
END_IF;
REPEAT i := 1 TO HIINDEX(pd_set);
pdr_set := pdr_set + (QUERY(pdr <* USEDIN(pd_set[i], 'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.' + 'PROPERTY_DEFINITION_REPRESENTATION.' + 'DEFINITION') |
'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.SHAPE_DEFINITION_REPRESENTATION' IN TYPEOF(pdr)));
END_REPEAT;
RETURN (pdr_set);      
END_FUNCTION; 

FUNCTION valid_datum_target_parameters
 (pdf : placed_datum_target_feature) : BOOLEAN; 
LOCAL

rep_set : SET OF representation := [] ;

parameter_representations: SET OF representation;
END_LOCAL;


REPEAT i := 1 TO HIINDEX(pdf.representation_associations);
rep_set := rep_set + pdf.representation_associations[i].used_representation;
END_REPEAT;
 
parameter_representations := QUERY(rep <* rep_set |
('GEOMETRIC_TOLERANCE_MIM.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN
TYPEOF(rep)));


IF (SIZEOF( QUERY( srwp <* parameter_representations |
          (SIZEOF( QUERY( i <* srwp.items |
          (i.name='orientation') AND
          ('GEOMETRY_SCHEMA.PLACEMENT' IN TYPEOF(i)))) = 1))) <> 1) THEN
   RETURN(FALSE);
END_IF;

CASE pdf\shape_aspect.description OF
'point': RETURN(SIZEOF(QUERY( srwp <* parameter_representations |
              (SIZEOF(srwp.items) = 1))) = 1);

'circle': RETURN((SIZEOF( QUERY( srwp <* parameter_representations |
              (SIZEOF(srwp.items) = 2))) = 1) AND
             (SIZEOF( QUERY( srwp <* parameter_representations |
              (SIZEOF( QUERY( i <* srwp.items |
                (i.name='target diameter') AND
                (SIZEOF(['GEOMETRIC_TOLERANCE_MIM.MEASURE_REPRESENTATION_ITEM',
		   'GEOMETRIC_TOLERANCE_MIM.LENGTH_MEASURE_WITH_UNIT']*TYPEOF(i)
                 ) = 2) )) = 1))) = 1));

'line': RETURN(SIZEOF( QUERY( srwp <* parameter_representations |
              (SIZEOF( QUERY( i <* srwp.items |
                (i.name='target length') AND
                (SIZEOF(['GEOMETRIC_TOLERANCE_MIM.MEASURE_REPRESENTATION_ITEM',
		'GEOMETRIC_TOLERANCE_MIM.LENGTH_MEASURE_WITH_UNIT']*TYPEOF(i)
                 ) = 2) )) = 1))) = 1);

'rectangle': RETURN((SIZEOF( QUERY( srwp <* parameter_representations |
              (SIZEOF(srwp.items)= 3))) = 1) AND
             (SIZEOF( QUERY( srwp <* parameter_representations |
              (SIZEOF( QUERY( i <* srwp.items |
                (i.name='target length') AND
                (SIZEOF(['GEOMETRIC_TOLERANCE_MIM.MEASURE_REPRESENTATION_ITEM',
		'GEOMETRIC_TOLERANCE_MIM.LENGTH_MEASURE_WITH_UNIT']*TYPEOF(i)
                 ) = 2))) = 1))) = 1) AND
              (SIZEOF( QUERY( srwp <* parameter_representations |
               (SIZEOF( QUERY( i <* srwp.items |
                 (i.name='target width') AND
                 (SIZEOF(['GEOMETRIC_TOLERANCE_MIM.MEASURE_REPRESENTATION_ITEM',
 		'GEOMETRIC_TOLERANCE_MIM.LENGTH_MEASURE_WITH_UNIT']*TYPEOF(i)
                  ) = 2))) = 1) )) = 1));
OTHERWISE : RETURN(FALSE);
END_CASE;
   END_FUNCTION; 

END_SCHEMA;  -- Geometric_tolerance_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1274 - ISO/TS 10303-1507 Geometrically bounded surface - EXPRESS MIM
*)
SCHEMA Geometrically_bounded_surface_mim;

USE FROM aic_geometrically_bounded_surface;

USE FROM Elemental_geometric_shape_mim;

END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4276 - ISO/TS 10303-1113 Group - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N3246
*) 


SCHEMA Group_mim;

USE FROM group_schema   -- ISO 10303-41
  (group,
   group_relationship); 

USE FROM management_resources_schema   -- ISO 10303-41
  (group_assignment); 

USE FROM Basic_attribute_schema(
	id_attribute, 
	id_attribute_select); -- ISO/IS 10303-41

TYPE groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT;
WHERE
  WR1: NOT ('GROUP_MIM.GROUP' IN TYPEOF(SELF));
END_TYPE; 

ENTITY applied_group_assignment
  SUBTYPE OF (group_assignment);
  items : SET[1:?] OF groupable_item;
END_ENTITY;

END_SCHEMA;  -- Group_mim

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2915 - ISO/TS 10303-1021 Identification assignment - EXPRESS MIM
*)

SCHEMA Identification_assignment_mim;

USE FROM management_resources_schema   -- ISO 10303-41
  (identification_assignment,
   identification_role); 


TYPE identification_item = EXTENSIBLE SELECT;
END_TYPE; 

TYPE versionable_item = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY applied_identification_assignment
  SUBTYPE OF (identification_assignment);
  items : SET[1:?] OF identification_item;
END_ENTITY;

END_SCHEMA;  -- Identification_assignment_mim
(* 
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2635 - ISO/TS 10303-1349 Incomplete data reference mechanism - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N2069
*)

SCHEMA Incomplete_data_reference_mechanism_mim;

USE FROM Classification_assignment_mim;

USE FROM Document_definition_mim;

USE FROM File_identification_mim;

USE FROM Part_view_definition_mim;


TYPE idrm_marked_item  = EXTENSIBLE SELECT BASED_ON classification_item WITH
      (product_definition, document_file);
END_TYPE;


END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1238 - ISO/TS 10303-1036 Independent property - EXPRESS MIM
*)
SCHEMA Independent_property_mim;

USE FROM product_property_definition_schema
(general_property,
 general_property_relationship);

END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4372 - ISO/TS 10303-1038 Independent property representation - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1244
*)
SCHEMA Independent_property_representation_mim;

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4228 - ISO/TS 10303-1761 Information product - EXPRESS MIM
*)

SCHEMA Information_product_mim;

USE FROM Product_view_definition_mim;	--  ISO/TS 10303-1019
USE FROM File_identification_mim;	--  ISO/TS 10303-1127

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4234 - ISO/TS 10303-1763 Integral shield - EXPRESS MIM
*)

SCHEMA Integral_shield_mim;

USE FROM Layered_interconnect_module_with_printed_component_design_mim;	-- ISO/TS 10303-1700
USE FROM Requirement_assignment_mim;

ENTITY integral_shield
  SUBTYPE OF (laminate_component);
END_ENTITY;

ENTITY routed_shield 
    SUBTYPE OF (integral_shield);
END_ENTITY;

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3994 - ISO/TS 10303-1682 Interconnect 2d shape - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3436
*)


SCHEMA Interconnect_2d_shape_mim;
	USE FROM Fabrication_joint_mim;	-- ISO/TS 10303-1668
	USE FROM Physical_unit_2d_design_view_mim;	-- ISO/TS 10303-1724

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4000 - ISO/TS 10303-1684 Interconnect module connection routing - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3442
*)


SCHEMA Interconnect_module_connection_routing_mim;
	USE FROM Fabrication_joint_mim;	-- ISO/TS 10303-1668
	USE FROM Interconnect_module_with_macros_mim;	-- ISO/TS 10303-1687

ENTITY dielectric_crossover_area
  SUBTYPE OF (shape_aspect, shape_aspect_relationship);
END_ENTITY;

ENTITY direct_stratum_component_join_implementation
  SUBTYPE OF (shape_aspect_relationship);
END_ENTITY;

ENTITY indirect_stratum_component_join_implementation
  SUBTYPE OF (plated_inter_stratum_feature);
END_ENTITY;

ENTITY join_two_physical_connectivity_definition_supporting_inter_stratum_feature
  SUBTYPE OF (physical_network_supporting_inter_stratum_feature);
END_ENTITY; 

ENTITY physical_network_supporting_inter_stratum_feature
  SUPERTYPE OF (join_two_physical_connectivity_definition_supporting_inter_stratum_feature)
  SUBTYPE OF (plated_inter_stratum_feature);
END_ENTITY; 

ENTITY stratum_feature_conductive_join
  SUBTYPE OF (product_definition_relationship);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4003 - ISO/TS 10303-1685 Interconnect module to assembly module relationship - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3445
*)


SCHEMA Interconnect_module_to_assembly_module_relationship_mim;
	USE FROM Interconnect_module_connection_routing_mim;	-- ISO/TS 10303-1684
	USE FROM Layered_interconnect_module_design_mim;	-- ISO/TS 10303-1698

TYPE imtamr_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (shape_aspect_relationship);
END_TYPE;

TYPE imtamr_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
     (assembly_component,
      component_feature,
      descriptive_representation_item,
      representation);
END_TYPE;

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4006 - ISO/TS 10303-1686 Interconnect module usage view - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3448
*)


SCHEMA Interconnect_module_usage_view_mim;
	USE FROM Extended_geometric_tolerance_mim;	-- ISO/TS 10303-1666
	USE FROM Functional_assignment_to_part_mim;	-- ISO/TS 10303-1674
	USE FROM Functional_usage_view_mim;	-- ISO/TS 10303-1705	

ENTITY interconnect_definition
 SUBTYPE OF (physical_unit);
END_ENTITY;

ENTITY interconnect_module_cutout_segment_surface
  SUBTYPE OF (shape_aspect, shape_aspect_relationship);
    SELF\shape_aspect_relationship.relating_shape_aspect : edge_segment_vertex;  
    SELF\shape_aspect_relationship.related_shape_aspect  : edge_segment_vertex;
WHERE
  WR1: SELF\shape_aspect_relationship.relating_shape_aspect :<>:
       SELF\shape_aspect_relationship.related_shape_aspect;
END_ENTITY;

ENTITY interconnect_module_edge_segment_surface
  SUBTYPE OF (shape_aspect, shape_aspect_relationship);
   SELF\shape_aspect_relationship.relating_shape_aspect : edge_segment_vertex;  
   SELF\shape_aspect_relationship.related_shape_aspect  : edge_segment_vertex;
WHERE
  WR1: SELF\shape_aspect_relationship.relating_shape_aspect :<>:
       SELF\shape_aspect_relationship.related_shape_aspect;
END_ENTITY;

ENTITY interconnect_module_interface_terminal
  SUBTYPE OF (interconnect_module_terminal);
END_ENTITY;

ENTITY interconnect_module_terminal
  SUPERTYPE OF (interconnect_module_interface_terminal)
  SUBTYPE OF (shape_aspect);
END_ENTITY;

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4009 - ISO/TS 10303-1687 Interconnect module with macros - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3451
*)


SCHEMA Interconnect_module_with_macros_mim;
	USE FROM Assembly_module_with_interconnect_component_mim;	-- ISO/TS 10303-1643
	USE FROM Layered_interconnect_module_design_mim;	-- ISO/TS 10303-1698

  ENTITY interconnect_module_macro_component
    SUBTYPE OF (physical_component);
  END_ENTITY;
	
ENTITY interconnect_module_macro_component_join_terminal
  SUBTYPE OF (physical_component_terminal);
END_ENTITY;
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4012 - ISO/TS 10303-1688 Interconnect non planar shape - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3454
*)


SCHEMA Interconnect_non_planar_shape_mim;
    USE FROM Physical_unit_3d_shape_mim;	-- ISO/TS 10303-1727	
	USE FROM Physical_unit_non_planar_design_view_mim;	-- ISO/TS 10303-1613
	USE FROM Part_template_2d_shape_mim;	-- ISO/TS 10303-1716

ENTITY manifold_constraining_context_dependent_shape_representation
  SUBTYPE OF (context_dependent_shape_representation, representation_relationship);
END_ENTITY; 

ENTITY component_part_2d_non_planar_geometric_representation_relationship
  SUBTYPE OF (shape_representation_relationship, representation_relationship_with_transformation);
END_ENTITY; 
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4015 - ISO/TS 10303-1689 Interconnect physical requirement allocation - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3457
*)


SCHEMA Interconnect_physical_requirement_allocation_mim;
	USE FROM Fabrication_technology_mim;	-- ISO/TS 10303-1670
	
	USE FROM Requirement_view_definition_relationship_mim; -- ISO/TS 10303-1142	
	
	USE FROM Integral_shield_mim; -- ISO/TS 10303-xxxx	

TYPE ipra_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (thermal_isolation_removal_template);
END_TYPE; 

ENTITY dependent_electrical_isolation_removal_template
  SUBTYPE OF (electrical_isolation_removal_template);
END_ENTITY;

ENTITY dependent_thermal_isolation_removal_template
  SUBTYPE OF (thermal_isolation_removal_template);
END_ENTITY;
  
ENTITY electrical_isolation_removal_template
  SUBTYPE OF (material_removal_feature_template);
END_ENTITY;

ENTITY interconnect_shield_allocation
  SUBTYPE OF (requirement_assignment);
END_ENTITY;

ENTITY thermal_isolation_removal_template
  SUBTYPE OF (material_removal_structured_template);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4018 - ISO/TS 10303-1690 Interconnect placement requirements - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3460
*)


SCHEMA Interconnect_placement_requirements_mim;
	USE FROM Assembly_component_placement_requirements_mim;	-- ISO/TS 10303-1634
	USE FROM Land_mim;	-- ISO/TS 10303-1692
	USE FROM Part_template_extension_mim;	-- ISO/TS 10303-1718

SUBTYPE_CONSTRAINT ipr_non_feature_shape_element_subtypes FOR shape_aspect; 
    (ONEOF (
	 derived_shape_aspect,
	 positional_boundary,
	 positional_boundary_member,
	 tolerance_zone_boundary,
	 viewing_plane,
	 seating_plane,
	 reference_graphic_registration_mark,
	 template_material_cross_section_boundary,
	 group_shape_aspect,
	 mounting_restriction_area,
	 mounting_restriction_volume));
END_SUBTYPE_CONSTRAINT;

SUBTYPE_CONSTRAINT ipr_predefined_requirement_view_definition_subtypes FOR predefined_requirement_view_definition;   
  (ONEOF (assembly_spacing_requirement_occurrence,
  assembly_group_spacing_requirement_occurrence,
  item_restricted_requirement_occurrence,
  layout_spacing_requirement_occurrence));
END_SUBTYPE_CONSTRAINT;  
	
TYPE ipr_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
     (group_shape_aspect,
     layout_spacing_requirement_occurrence);
END_TYPE;
	
TYPE ipr_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (group_shape_aspect);
END_TYPE;
	
ENTITY interconnect_module_design_object_category
  SUBTYPE OF (characterized_object);
END_ENTITY;

ENTITY layer_qualified_layout_spacing_requirement_occurrence
  SUBTYPE OF (layout_spacing_requirement_occurrence);
END_ENTITY;

ENTITY layout_spacing_requirement_occurrence
  SUBTYPE OF (predefined_requirement_view_definition);
END_ENTITY;

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4021 - ISO/TS 10303-1691 Interface component - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3463
*)


SCHEMA Interface_component_mim;
	USE FROM Physical_component_feature_mim;	-- ISO/TS 10303-1721

SUBTYPE_CONSTRAINT physical_component_feature_subtypes FOR physical_component_feature;
	(ONEOF (physical_component_terminal,
 	physical_component_interface_terminal));
END_SUBTYPE_CONSTRAINT;
	
ENTITY physical_component_interface_terminal
 SUBTYPE OF (physical_component_feature);
END_ENTITY;

ENTITY interface_component
  SUBTYPE OF (physical_component);
END_ENTITY;

END_SCHEMA;


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4294 - ISO/TS 10303-1345 Item definition structure - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2620
*)


SCHEMA Item_definition_structure_mim;

USE FROM Effectivity_application_mim;

USE FROM Part_occurrence_mim;

USE FROM Product_structure_mim;

REFERENCE FROM Single_part_representation_mim
	(categories_of_product);


TYPE effectivity_item_for_replacement  = SELECT BASED_ON effectivity_item WITH
  (product_definition_relationship);
END_TYPE;


RULE restrict_assembly_category FOR (product_definition);
LOCAL
  assembly_definitions: SET OF product_definition := [];
END_LOCAL;
  assembly_definitions :=  QUERY( pd <* product_definition | 
    SIZEOF( QUERY( pdca <* USEDIN( pd, 'ITEM_DEFINITION_STRUCTURE_MIM.PRODUCT_DEFINITION_CONTEXT_ASSOCIATION.DEFINITION') |
    pdca.frame_of_reference.name= 'assembly definition')) > 0 );
WHERE
WR1: SIZEOF( QUERY( pd <* assembly_definitions | 
   NOT ('assembly' IN categories_of_product(pd.formation.of_product)) ))= 0;
END_RULE;

RULE restrict_product_definitions_for_part_definition_relationship FOR
    (product_definition_relationship);
WHERE
WR1: SIZEOF ( QUERY ( pdr <* product_definition_relationship |
     ( pdr.name IN [ 'geometrical relationship' , 'definition replacement' ] ) AND 
	( ( pdr.relating_product_definition.frame_of_reference.name <>'part definition' ) OR 
	( pdr.related_product_definition.frame_of_reference.name <>'part definition' ) ) ) ) =0;
END_RULE;

RULE product_definition_replacement_requires_effectivity_assignment FOR 
	(product_definition_relationship);
WHERE 
WR1: SIZEOF( QUERY( pdr <* product_definition_relationship | 
	(pdr.name = 'definition replacement') AND 
	(SIZEOF( USEDIN(pdr,'ITEM_DEFINITION_STRUCTURE_MIM.APPLIED_EFFECTIVITY_ASSIGNMENT.ITEMS') ) = 0) ))
	 = 0; 
END_RULE; 

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4024 - ISO/TS 10303-1692 Land - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3466
*)


SCHEMA Land_mim;
	USE FROM Layered_interconnect_module_design_mim;	-- ISO/TS 10303-1698


SUBTYPE_CONSTRAINT stratum_feature_template_component_subtypes FOR stratum_feature_template_component;   
	(ONEOF (area_component,
	land));
END_SUBTYPE_CONSTRAINT;

ENTITY contact_size_dependent_land
  SUBTYPE OF (land);
END_ENTITY;

ENTITY inter_stratum_feature_dependent_land
  ABSTRACT SUPERTYPE OF (ONEOF (plated_passage_dependent_land,
    unsupported_passage_dependent_land))
  SUBTYPE OF (land);
END_ENTITY;
	
ENTITY land
  SUPERTYPE OF (ONEOF (contact_size_dependent_land,
    inter_stratum_feature_dependent_land))
  SUBTYPE OF (stratum_feature_template_component);
END_ENTITY;	

ENTITY plated_passage_dependent_land
  SUBTYPE OF (inter_stratum_feature_dependent_land);
END_ENTITY;

ENTITY unsupported_passage_dependent_land
  SUBTYPE OF (inter_stratum_feature_dependent_land);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4027 - ISO/TS 10303-1693 Layered 2d shape - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3469
*)


SCHEMA Layered_2d_shape_mim;
	USE FROM Constructive_solid_geometry_2d_mim;	-- ISO/TS 10303-1731
--	USE FROM Part_template_2d_shape_mim;	-- ISO/TS 10303-1716
--	USE FROM Physical_unit_2d_shape_mim;	-- ISO/TS 10303-1726
	USE FROM Wireframe_2d_mim; 	-- ISO/TS 10303-1347	
	USE FROM Shape_feature_mim;	-- ISO/TS 10303-xxxx
	USE FROM Area_2d_mim;	-- ISO/TS 10303-1631	
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4030 - ISO/TS 10303-1694 Layered 3d shape - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3472
*)


SCHEMA Layered_3d_shape_mim;
    USE FROM Layered_2d_shape_mim; -- -- ISO/TS 10303-1693
	USE FROM Physical_unit_3d_shape_mim;	-- ISO/TS 10303-1727
	USE FROM Advanced_boundary_representation_mim;	-- ISO/TS 10303-1514
	USE FROM Curve_swept_solid_mim;	-- ISO/TS 10303-1659
    USE FROM Faceted_boundary_representation_mim;    -- ISO/TS 10303-1512
	USE FROM Geometrically_bounded_surface_mim;	-- ISO/TS 10303-1507	
	
	USE FROM Representation_schema(representation_relationship_with_transformation);

ENTITY shape_definition_3d_intersection
  SUBTYPE OF (representation, 
              shape_representation_relationship, 
              representation_relationship_with_transformation);
   SELF\representation_relationship_with_transformation.transformation_operator : item_defined_transformation;
UNIQUE
  UR1: SELF\representation_relationship.rep_1, SELF\representation_relationship.rep_2;
WHERE
  WR1: SELF\representation_relationship.rep_1 :<>: SELF\representation_relationship.rep_2;
END_ENTITY; 
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4033 - ISO/TS 10303-1695 Layered interconnect module 2d design - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3478
*)


SCHEMA Layered_interconnect_module_2d_design_mim;
	USE FROM Layered_interconnect_module_design_mim;	-- ISO/TS 10303-1698
	USE FROM Physical_unit_2d_shape_mim;	-- ISO/TS 10303-1726

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4036 - ISO/TS 10303-1696 Layered interconnect module 3d design - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3481
*)


SCHEMA Layered_interconnect_module_3d_design_mim;
	USE FROM Physical_unit_3d_design_view_mim;	-- ISO/TS 10303-1727
	USE FROM Stratum_non_planar_shape_mim;	-- ISO/TS 10303-1748

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4042 - ISO/TS 10303-1698 Layered interconnect module design - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3484
*)


SCHEMA Layered_interconnect_module_design_mim;
	USE FROM Component_grouping_mim;	-- ISO/TS 10303-1656
	USE FROM Edge_shape_feature_mim;	-- ISO/TS 10303-1673
	USE FROM Interconnect_module_connection_routing_mim;	-- ISO/TS 10303-1684
	USE FROM Interconnect_module_usage_view_mim;	-- ISO/TS 10303-1686
	USE FROM Interconnect_physical_requirement_allocation_mim;	-- ISO/TS 10303-1689
	USE FROM Footprint_definition_mim;	-- ISO/TS 10303-1646
	USE FROM Physical_connectivity_definition_mim;	-- ISO/TS 10303-1755
	USE FROM Part_template_extension_mim;	-- ISO/TS 10303-1718
	USE FROM Assembly_component_placement_requirements_mim;	-- ISO/TS 10303-1634	
	
SUBTYPE_CONSTRAINT array_placement_group_subtypes FOR array_placement_group; 
	(ONEOF (laminate_text_string_component,
	 linear_array_placement_group_component,
	 rectangular_array_placement_group_component));
END_SUBTYPE_CONSTRAINT;

SUBTYPE_CONSTRAINT assembly_component_subtypes FOR assembly_component; 
    (ONEOF (physical_component,
 	laminate_component));
END_SUBTYPE_CONSTRAINT;

SUBTYPE_CONSTRAINT component_feature_subtypes FOR component_feature; 
	(ONEOF (physical_component_feature,
	 laminate_component_feature));
END_SUBTYPE_CONSTRAINT;

SUBTYPE_CONSTRAINT limd_component_terminal_subtypes FOR component_terminal; 
	(ONEOF (physical_component_terminal,
	 laminate_component_join_terminal));
END_SUBTYPE_CONSTRAINT;

SUBTYPE_CONSTRAINT inter_stratum_feature_subtypes FOR Inter_stratum_feature;     
	 ONEOF (Cutout,
	 Interconnect_module_edge);
END_SUBTYPE_CONSTRAINT;

SUBTYPE_CONSTRAINT interconnect_module_terminal_subtypes FOR interconnect_module_terminal;     
	(ONEOF (interconnect_module_interface_terminal,
	 interconnect_module_macro_terminal));
END_SUBTYPE_CONSTRAINT; 

SUBTYPE_CONSTRAINT limd_product_definition_subtypes FOR product_definition; 
	(ONEOF (physical_unit,
	stratum));
END_SUBTYPE_CONSTRAINT; 

SUBTYPE_CONSTRAINT limd_part_template_definition_subtypes FOR part_template_definition; 
    (ONEOF (
          ONEOF(printed_part_template, special_symbol_template) ANDOR  geometric_template, 
          non_conductive_cross_section_template,
          part_string_template, 
          parametric_template,
          part_text_template,
          stratum_stack_model));
END_SUBTYPE_CONSTRAINT;

TYPE limd_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (stratum_feature_conductive_join,
 	  dielectric_crossover_area,
 	  physical_unit);
END_TYPE; 

TYPE limd_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH 
     (assembly_component,
      stratum_based_pattern,
      stratum_feature_based_derived_pattern,
      stratum);
END_TYPE; 

TYPE limd_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
     (inter_stratum_feature,
      stratum,
      stratum_feature,
      stratum_surface,
      structured_layout_component);
END_TYPE; 

TYPE limd_groupable_item = SELECT BASED_ON groupable_item WITH 
   (physical_network,
   stratum);
END_TYPE; 

ENTITY area_component
 SUPERTYPE OF (connected_area_component)
 SUBTYPE OF (stratum_feature_template_component);
END_ENTITY;

ENTITY breakout_occurrence
  SUBTYPE OF (footprint_occurrence);
END_ENTITY;  

ENTITY component_termination_passage
  SUBTYPE OF (plated_passage);
END_ENTITY;

ENTITY conductive_interconnect_element
  ABSTRACT SUPERTYPE OF (ONEOF (unrouted_conductive_interconnect_element, conductive_interconnect_element_with_pre_defined_transitions))
  SUBTYPE OF (stratum_feature_template_component);
END_ENTITY;

ENTITY conductive_interconnect_element_terminal_link
  SUBTYPE OF (shape_aspect,shape_aspect_relationship);
    SELF\shape_aspect_relationship.relating_shape_aspect : laminate_component_feature;  
    SELF\shape_aspect_relationship.related_shape_aspect  : laminate_component_feature;
WHERE
  WR1: SELF\shape_aspect_relationship.related_shape_aspect :<>:
       SELF\shape_aspect_relationship.relating_shape_aspect;
END_ENTITY; 

ENTITY conductive_interconnect_element_with_pre_defined_transitions
  SUPERTYPE OF (join_two_physical_connectivity_definition_supporting_conductive_interconnect_element)
  SUBTYPE OF (conductive_interconnect_element);
END_ENTITY;

ENTITY connected_area_component
 SUBTYPE OF (area_component);
END_ENTITY;

ENTITY cutout
  SUPERTYPE OF (ONEOF (physical_connectivity_interrupting_cutout,
    plated_cutout,
    partially_plated_cutout))
  SUBTYPE OF (inter_stratum_feature);
END_ENTITY;

ENTITY cutout_edge_segment
  SUPERTYPE OF (plated_cutout_edge_segment)
  SUBTYPE OF (inter_stratum_feature,shape_aspect_relationship);
   SELF\shape_aspect_relationship.relating_shape_aspect : edge_segment_vertex;
   SELF\shape_aspect_relationship.related_shape_aspect  : edge_segment_vertex;
WHERE
  WR1: SELF\shape_aspect_relationship.relating_shape_aspect :<>:
       SELF\shape_aspect_relationship.related_shape_aspect;
END_ENTITY;

ENTITY dependent_thermal_isolation_removal_component
  SUBTYPE OF (material_removal_structured_component);
END_ENTITY;

ENTITY derived_stratum
  SUBTYPE OF (stratum);
END_ENTITY;

ENTITY design_layer_stratum
  SUBTYPE OF (stratum);
END_ENTITY;

ENTITY dielectric_material_passage
  SUBTYPE OF (inter_stratum_feature);
END_ENTITY;

ENTITY documentation_layer_stratum
  SUBTYPE OF (stratum);
END_ENTITY;
  	
ENTITY electrical_isolation_laminate_component
  SUBTYPE OF (material_removal_laminate_component);
END_ENTITY;

ENTITY fiducial
  SUBTYPE OF (laminate_component);
END_ENTITY;

ENTITY fiducial_stratum_feature
 SUBTYPE OF (stratum_feature);
END_ENTITY;

ENTITY filled_via
  SUBTYPE OF (via);
END_ENTITY;  

ENTITY footprint_occurrence
  SUBTYPE OF (structured_layout_component);
END_ENTITY;

ENTITY footprint_occurrence_product_definition_relationship
  SUBTYPE OF (structured_layout_component_sub_assembly_relationship);
END_ENTITY;

ENTITY inter_stratum_feature
 SUBTYPE OF (laminate_component);
END_ENTITY;

ENTITY interconnect_module_edge
  SUPERTYPE OF (ONEOF (partially_plated_interconnect_module_edge, plated_interconnect_module_edge))
  SUBTYPE OF (inter_stratum_feature);
END_ENTITY;

ENTITY interconnect_module_edge_segment
  SUPERTYPE OF (ONEOF(plated_interconnect_module_edge_segment,
                      unplated_interconnect_module_edge_segment))
  SUBTYPE OF (inter_stratum_feature,shape_aspect_relationship);
    SELF\shape_aspect_relationship.relating_shape_aspect : edge_segment_vertex;  
    SELF\shape_aspect_relationship.related_shape_aspect  : edge_segment_vertex;
WHERE
  WR1: SELF\shape_aspect_relationship.relating_shape_aspect :<>:
       SELF\shape_aspect_relationship.related_shape_aspect;
END_ENTITY;

ENTITY interconnect_module_macro_terminal
  SUBTYPE OF (interconnect_module_terminal);
END_ENTITY;

ENTITY interface_access_component_definition
  SUBTYPE OF (laminate_component);
END_ENTITY;

ENTITY interface_access_material_removal_laminate_component
  SUBTYPE OF (material_removal_laminate_component);
END_ENTITY;

ENTITY interface_access_stratum_feature_template_component
  SUBTYPE OF (stratum_feature_template_component);
END_ENTITY;

ENTITY internal_probe_access_area
  SUBTYPE OF (probe_access_area);
END_ENTITY;

ENTITY join_shape_aspect
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY join_two_physical_connectivity_definition_supporting_conductive_interconnect_element
  SUBTYPE OF (conductive_interconnect_element_with_pre_defined_transitions);
END_ENTITY;

ENTITY laminate_component
  SUPERTYPE OF (ONEOF (material_removal_laminate_component,
			stratum_feature_template_component ANDOR probe_access_area,
			inter_stratum_feature,
			generic_laminate_text_component,
			laminate_text_string_component) ANDOR
			fiducial)
  SUBTYPE OF (assembly_component);
END_ENTITY;

  ENTITY laminate_component_feature
    SUPERTYPE OF (ONEOF (laminate_component_interface_terminal,
 laminate_component_join_terminal))
    SUBTYPE OF (component_feature);
  END_ENTITY;

ENTITY laminate_component_interface_terminal
  SUBTYPE OF (laminate_component_feature);
END_ENTITY;

  ENTITY laminate_component_join_terminal
    SUBTYPE OF (laminate_component_feature,
 		component_terminal);
  END_ENTITY;

ENTITY laminate_group_component_make_from_relationship
  SUBTYPE OF (make_from_usage_option);
    SELF\product_definition_relationship.relating_product_definition : assembly_group_component;
    SELF\product_definition_relationship.related_product_definition  : assembly_group_component;
END_ENTITY;

ENTITY generic_laminate_text_component
  ABSTRACT SUPERTYPE OF (ONEOF(additive_laminate_text_component, 
    material_removal_laminate_text_component))
  SUBTYPE OF (laminate_component);
END_ENTITY;

ENTITY laminate_text_string_component
  SUBTYPE OF (array_placement_group, laminate_component);
END_ENTITY;

ENTITY layer_connection_point
  SUBTYPE OF (shape_aspect);
UNIQUE
  UR1: SELF\shape_aspect.name, SELF\shape_aspect.of_shape;
END_ENTITY;

ENTITY layout_junction
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY material_removal_laminate_component
  SUBTYPE OF (laminate_component);
END_ENTITY;

ENTITY material_removal_structured_component
  SUBTYPE OF (structured_layout_component);
END_ENTITY;

ENTITY multi_layer_component_definition
  SUBTYPE OF (laminate_component);
END_ENTITY;

ENTITY multi_layer_material_removal_laminate_component
  SUBTYPE OF (material_removal_laminate_component);
END_ENTITY;

ENTITY multi_layer_stratum_feature
 SUBTYPE OF (stratum_feature);
END_ENTITY;

ENTITY multi_layer_stratum_feature_template_component
  SUBTYPE OF (stratum_feature_template_component);
END_ENTITY;

ENTITY multi_stratum_special_symbol_component
  SUBTYPE OF (structured_layout_component);
END_ENTITY;

ENTITY material_removal_laminate_text_component
  SUBTYPE OF (generic_laminate_text_component);
END_ENTITY;

ENTITY padstack_occurrence
  SUBTYPE OF (structured_layout_component);--assembly_group_component_shape_aspect);
END_ENTITY;

ENTITY padstack_occurrence_product_definition_relationship
  SUBTYPE OF (property_definition, next_assembly_usage_occurrence_relationship);
WHERE
  WR1: SELF\product_definition_relationship.related_product_definition :<>:
       SELF\product_definition_relationship.relating_product_definition;
END_ENTITY; 

ENTITY partially_plated_cutout
  SUBTYPE OF (cutout);
END_ENTITY;

ENTITY partially_plated_interconnect_module_edge
  SUBTYPE OF (interconnect_module_edge);
END_ENTITY;

ENTITY physical_connectivity_interrupting_cutout
  SUBTYPE OF (cutout);
END_ENTITY;

ENTITY physical_network
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY plated_cutout
  SUBTYPE OF (cutout, plated_inter_stratum_feature);
END_ENTITY;

ENTITY plated_cutout_edge_segment
  SUBTYPE OF (cutout_edge_segment,plated_inter_stratum_feature);
END_ENTITY;

ENTITY plated_interconnect_module_edge
  SUBTYPE OF (interconnect_module_edge, plated_inter_stratum_feature);
END_ENTITY;

ENTITY plated_interconnect_module_edge_segment
  SUBTYPE OF (interconnect_module_edge_segment,
              plated_inter_stratum_feature);
END_ENTITY;

ENTITY plated_inter_stratum_feature
  SUPERTYPE OF (ONEOF (plated_cutout_edge_segment,
		 plated_interconnect_module_edge_segment,
		 plated_passage))
  SUBTYPE OF (inter_stratum_feature);
END_ENTITY;

ENTITY plated_passage 
    SUPERTYPE OF (ONEOF (component_termination_passage,
     via))
  SUBTYPE OF (plated_inter_stratum_feature);
END_ENTITY;

ENTITY additive_laminate_text_component
  SUBTYPE OF (generic_laminate_text_component);
END_ENTITY;

ENTITY primary_stratum_indicator_symbol
  SUBTYPE OF (single_stratum_special_symbol_component);
END_ENTITY;
  
ENTITY probe_access_area
  SUBTYPE OF (laminate_component, shape_aspect);
  DERIVE
    SELF\shape_aspect.of_shape : product_definition_shape := SELF;
END_ENTITY;

ENTITY single_stratum_special_symbol_component
  SUPERTYPE OF (primary_stratum_indicator_symbol)
  SUBTYPE OF (structured_layout_component);
END_ENTITY;
  
ENTITY stratum
 SUPERTYPE OF (ONEOF (documentation_layer_stratum, design_layer_stratum))
 SUBTYPE OF (product_definition, product_definition_shape);
  DERIVE
    SELF\property_definition.definition : characterized_definition := SELF;
  UNIQUE
    UR1: SELF\product_definition.id, SELF\product_definition.formation;
  WHERE
    WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +'NAME_ATTRIBUTE.NAMED_ITEM')) = 0;
    WR2: NOT EXISTS(SELF\property_definition.description);
END_ENTITY;	

ENTITY stratum_based_pattern
 SUBTYPE OF (shape_aspect);
UNIQUE
  UR1: SELF\shape_aspect.name;
END_ENTITY;

ENTITY stratum_based_pattern_inter_stratum_extent
  SUBTYPE OF(product_definition_relationship);
END_ENTITY;  

ENTITY stratum_feature
  SUPERTYPE OF (fiducial_stratum_feature)
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY stratum_feature_based_derived_pattern
  SUBTYPE OF(characterized_object, property_definition_relationship);
END_ENTITY;

ENTITY stratum_feature_template_component
  SUBTYPE OF (laminate_component);
END_ENTITY;

ENTITY stratum_surface
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY stratum_technology_occurrence_to_stratum_mapping_relationship
  SUBTYPE OF(property_definition);
END_ENTITY;

ENTITY structured_layout_component
      ABSTRACT SUPERTYPE OF (ONEOF (footprint_occurrence, 
            material_removal_structured_component,
			multi_stratum_special_symbol_component,
            padstack_occurrence, 
            single_stratum_special_symbol_component))
  SUBTYPE OF (assembly_group_component);
END_ENTITY;  

ENTITY structured_layout_component_sub_assembly_relationship
  SUPERTYPE OF (footprint_occurrence_product_definition_relationship)
  SUBTYPE OF (next_assembly_usage_occurrence_relationship);
  WHERE
    WR1: SELF\product_definition_relationship.related_product_definition :<>:
       SELF\product_definition_relationship.relating_product_definition;
END_ENTITY;  

ENTITY unplated_cutout_edge_segment
  SUBTYPE OF (cutout_edge_segment);
END_ENTITY;

ENTITY unplated_interconnect_module_edge_segment
  SUBTYPE OF (interconnect_module_edge_segment);
END_ENTITY;

ENTITY unrouted_conductive_interconnect_element
  SUBTYPE OF (conductive_interconnect_element);
END_ENTITY;

ENTITY unsupported_passage
  SUBTYPE OF (inter_stratum_feature);
END_ENTITY;

ENTITY via
  ABSTRACT SUPERTYPE OF (filled_via)
  SUBTYPE OF (plated_passage);
END_ENTITY;    				
  
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4048 - ISO/TS 10303-1700 Layered interconnect module with printed component design - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3487
*)


SCHEMA Layered_interconnect_module_with_printed_component_design_mim;
	USE FROM Layered_interconnect_module_design_mim;	-- ISO/TS 10303-1698
	USE FROM Printed_physical_layout_template_mim;	-- ISO/TS 10303-1737
	
	
TYPE limwpcd_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH 
     (printed_component);
END_TYPE; 

SUBTYPE_CONSTRAINT limwpcd_assembly_component_subtypes FOR assembly_component; 
    (ONEOF (physical_component,
	 printed_component,
 	laminate_component));
END_SUBTYPE_CONSTRAINT;
	
SUBTYPE_CONSTRAINT limwpcd_structured_layout_component_subtypes FOR structured_layout_component; 
	(ONEOF (footprint_occurrence,
		material_removal_structured_component,
        multi_stratum_printed_component, 
		multi_stratum_special_symbol_component,
		padstack_occurrence,
		single_stratum_printed_component,
		single_stratum_special_symbol_component));
END_SUBTYPE_CONSTRAINT; 

ENTITY basic_multi_stratum_printed_component
  SUBTYPE OF (printed_component);
END_ENTITY;

ENTITY join_two_physical_network_supporting_single_stratum_printed_component
  SUBTYPE OF (single_stratum_printed_component);
END_ENTITY;

ENTITY join_multiple_physical_network_supporting_multi_stratum_printed_component
  SUBTYPE OF (multi_stratum_printed_component);
END_ENTITY;

ENTITY multi_stratum_printed_component
  SUBTYPE OF (printed_component, structured_layout_component);
END_ENTITY;

ENTITY printed_connector_component
  SUBTYPE OF (printed_component);
END_ENTITY;

ENTITY printed_component
   ABSTRACT SUPERTYPE OF (ONEOF (single_stratum_printed_component, 
    basic_multi_stratum_printed_component,
    multi_stratum_printed_component))
    SUBTYPE OF (assembly_component);
END_ENTITY;	

ENTITY routed_transmission_line
 SUBTYPE OF (assembly_component);
END_ENTITY;

ENTITY single_stratum_printed_component
  SUBTYPE OF (printed_component, structured_layout_component);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4051 - ISO/TS 10303-1701 Layout macro definition - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3490
*)


SCHEMA Layout_macro_definition_mim;
	USE FROM Fabrication_joint_mim;	-- ISO/TS 10303-1668
	USE FROM Application_context_schema(application_context_element);

ENTITY layout_macro_component
  SUBTYPE OF (printed_component);
END_ENTITY;

ENTITY layout_macro_definition
 SUBTYPE OF (physical_unit);
END_ENTITY;

ENTITY layout_macro_definition_terminal_to_usage_terminal_assignment
  SUBTYPE OF (shape_aspect, shape_aspect_relationship);
    SELF\shape_aspect_relationship.related_shape_aspect : printed_part_template_terminal;
UNIQUE
  UR1: SELF\shape_aspect_relationship.name;
END_ENTITY;

ENTITY layout_macro_floor_plan_template
  SUBTYPE OF (printed_part_template);
END_ENTITY;
	
END_SCHEMA;


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4288 - ISO/TS 10303-1288 Management resource information - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N3080
*) 


SCHEMA Management_resource_information_mim;

USE FROM Alias_identification_mim;    -- ISO/TS 10303-1025

USE FROM Approval_mim;    -- ISO/TS 10303-1012

USE FROM Certification_mim;    -- ISO/TS 10303-1044

USE FROM Contract_mim;    -- ISO/TS 10303-1062

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

USE FROM Multi_linguism_mim;    -- ISO/TS 10303-1105

USE FROM Person_organization_assignment_mim;    -- ISO/TS 10303-1013

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011

USE FROM Project_mim;    -- ISO/TS 10303-1061

USE FROM Security_classification_mim;    -- ISO/TS 10303-1015


TYPE mri_aliasable_item = EXTENSIBLE SELECT BASED_ON aliasable_item WITH 
   (approval_status, 
    contract, 
    organization, 
    security_classification,
    security_classification_level);
END_TYPE; 

TYPE mri_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH 
   (certification, 
    contract);
END_TYPE; 

TYPE mri_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH 
   (applied_organizational_project_assignment, 
    approval, 
    approval_relationship, 
    approval_status, 
    certification, 
    certification_type, 
    contract, 
    date_role, 
    date_time_role, 
    identification_role, 
    organization_relationship, 
    organizational_project, 
    organizational_project_relationship, 
    organizational_project_role, 
    person_and_organization);
END_TYPE; 

TYPE mri_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH 
   (applied_organization_assignment, 
    applied_person_and_organization_assignment, 
    applied_security_classification_assignment, 
    certification, 
    contract, 
    security_classification);
END_TYPE; 

TYPE mri_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH 
   (applied_organization_assignment, 
    applied_person_and_organization_assignment, 
    applied_security_classification_assignment, 
    certification, 
    contract, 
    security_classification);
END_TYPE; 

TYPE mri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH 
   (approval_status, 
    contract, 
    organization, 
    security_classification_level);
END_TYPE; 

TYPE mri_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH 
   (applied_organizational_project_assignment, 
    approval, 
    approval_relationship, 
    approval_status, 
    certification, 
    certification_type, 
    contract, 
    date_role, 
    date_time_role, 
    identification_role, 
    organization_relationship, 
    organizational_project, 
    organizational_project_relationship, 
    organizational_project_role, 
    person_and_organization);
END_TYPE; 

TYPE mri_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH 
   (applied_identification_assignment, 
    applied_security_classification_assignment, 
    contract);
END_TYPE; 

TYPE mri_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH 
   (applied_identification_assignment, 
    applied_security_classification_assignment, 
    contract);
END_TYPE; 

END_SCHEMA;  -- Management_resource_information_mim




(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4054 - ISO/TS 10303-1702 Manifold subsurface - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3475
*)


SCHEMA Manifold_subsurface_mim;
	USE FROM Manifold_surface_mim;	-- ISO/TS 10303-1509
	USE FROM Aic_manifold_subsurface;
END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1277 - ISO/TS 10303-1509 Manifold surface - EXPRESS MIM
*)

SCHEMA Manifold_surface_mim;

USE FROM Elemental_geometric_shape_mim;

USE FROM aic_manifold_surface;              -- ISO 10303-511 


END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1217 - ISO/TS 10303-1118 Measure representation - EXPRESS MIM
*)

SCHEMA Measure_representation_mim;

USE FROM Foundation_representation_mim;

USE FROM qualified_measure_schema
(measure_representation_item);

USE FROM representation_schema
(value_representation_item);

USE FROM Value_with_unit_mim;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4057 - ISO/TS 10303-1703 Model parameter - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3493
*)


SCHEMA Model_parameter_mim;
	USE FROM Activity_method_assignment_mim;
	USE FROM Characteristic_mim;	-- ISO/TS 10303-1654
	USE FROM Classification_with_attributes_mim;	-- ISO/TS 10303-1111
	USE FROM Independent_property_representation_mim;	-- ISO/TS 10303-1038
	USE FROM Group_mim;	-- ISO/TS 10303-1113	
	
	USE FROM Specification_document_mim;	-- ISO/TS 10303-1747

	USE FROM product_property_definition_schema(characterized_definition);  -- ISO 10303-41

TYPE mp_action_method_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_method_items WITH 
  (test_method_based_parameter_assignment);
END_TYPE;   

TYPE mp_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (group_relationship);
END_TYPE; 

TYPE mp_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
   (model_parameter);
END_TYPE; 

ENTITY category_model_parameter 
 SUBTYPE OF (model_parameter);
END_ENTITY;

ENTITY default_value_property_definition_representation
  SUBTYPE OF (property_definition_representation);
END_ENTITY;

ENTITY model_parameter 
 SUBTYPE OF (general_property);
END_ENTITY;

ENTITY parameter_assignment_override
  SUBTYPE OF (representation, representation_relationship);
    SELF\representation_relationship.rep_1 : parameter_assignment_representation;
    SELF\representation_relationship.rep_2 : parameter_assignment_representation;
UNIQUE
  UR1: SELF\representation_relationship.rep_1, SELF\representation_relationship.rep_2;
WHERE
  WR1: SELF\representation_relationship.rep_1 <> 
       SELF\representation_relationship.rep_2;
END_ENTITY; 

ENTITY parameter_assignment
  SUBTYPE OF (parameter_assignment_representation, property_definition_representation);
END_ENTITY; 

ENTITY parameter_assignment_representation
  SUBTYPE OF (representation);
END_ENTITY;

ENTITY product_specific_parameter_value_assignment
  SUBTYPE OF (characterized_object,
              product_related_product_category); 
END_ENTITY;

ENTITY schema_based_model_parameter 
 SUBTYPE OF (model_parameter);
END_ENTITY;

ENTITY valid_range_property_definition_representation
  SUBTYPE OF (property_definition_representation);
END_ENTITY;

ENTITY test_method_based_parameter_assignment 
 SUBTYPE OF (parameter_assignment);
END_ENTITY;

END_SCHEMA;


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N3243 - ISO/TS 10303-1105 Multi linguism - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2224
*) 


SCHEMA Multi_linguism_mim;

USE FROM management_resources_schema   -- ISO 10303-41
  (attribute_classification_assignment,
   attribute_value_assignment); 

USE FROM group_schema   -- ISO 10303-41
  (group); 


TYPE attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT
   (multi_language_attribute_assignment, 
    attribute_value_assignment);
END_TYPE; 


TYPE multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE;

ENTITY language 
SUBTYPE OF (group); 
WHERE
WR1: SELF\group.name <> '';
END_ENTITY; 

ENTITY attribute_language_assignment 
SUBTYPE OF (attribute_classification_assignment); 
  SELF\attribute_classification_assignment.assigned_class: language;
  items : SET [1:?] OF attribute_language_item; 
WHERE 
WR1: SELF\attribute_classification_assignment.role.name IN ['primary', 'translated']; 
WR2: SELF\attribute_classification_assignment.attribute_name<> '';
END_ENTITY; 

ENTITY multi_language_attribute_assignment 
SUBTYPE OF (attribute_value_assignment); 
  items : SET [1:?] OF multi_language_attribute_item;

DERIVE
  translation_language : language := language_indication[1]\attribute_classification_assignment.assigned_class;

INVERSE
  language_indication: SET[1:1] OF attribute_language_assignment FOR items;

WHERE 
WR1: (SELF\attribute_value_assignment.role.name = 'alternate language');
WR2: SIZEOF( QUERY( ala <* language_indication |  
   (ala\attribute_classification_assignment.attribute_name = 'attribute_value') AND 
   (ala\attribute_classification_assignment.role.name='translated') )) = 1 ; 
WR3: SELF\attribute_value_assignment.attribute_name <> '' ;
WR4: SIZEOF(QUERY(ci <* items |
SIZEOF(QUERY(ata <* USEDIN(ci, 'MULTI_LINGUISM_MIM.MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.ITEMS') |
(ata\attribute_value_assignment.attribute_name = SELF\attribute_value_assignment.attribute_name) AND 
(ata.translation_language :=: translation_language) ))>1 )) =0;
WR5: SIZEOF(QUERY(ci <* items |
SIZEOF(QUERY(ata <* USEDIN(ci, 'MULTI_LINGUISM_MIM.ATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS') |
 (ata\attribute_classification_assignment.role.name='primary') AND
 (ata\attribute_classification_assignment.attribute_name= SELF\attribute_value_assignment.attribute_name) AND 
 (ata\attribute_classification_assignment.assigned_class :=: translation_language) ))>0 )) =0;
END_ENTITY; 


RULE restrict_language_assignment_per_attribute FOR (attribute_language_assignment);
WHERE
WR1: SIZEOF ( QUERY ( ala1 <* attribute_language_assignment |
	SIZEOF(QUERY( it <* ala1.items |
	   SIZEOF ( QUERY ( ala2 <* USEDIN ( it ,'MULTI_LINGUISM_MIM.ATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS' ) | 
		( ala1\attribute_classification_assignment.attribute_name = ala2\attribute_classification_assignment.attribute_name ) AND 
		( ala1\attribute_classification_assignment.assigned_class :=: ala2\attribute_classification_assignment.assigned_class )
		 )) >1 
	   )) >0 
	)) =0;
END_RULE;

END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N3086 - ISO/TS 10303-1340 Name assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2283
*) 


SCHEMA Name_assignment_mim;

USE FROM management_resources_schema   -- ISO 10303-41
  (name_assignment); 


TYPE name_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY applied_name_assignment
  SUBTYPE OF (name_assignment);
  item : name_item;
END_ENTITY;

END_SCHEMA;  -- Name_assignment_mim




(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4060 - ISO/TS 10303-1704 Network functional design view - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3340
*)
SCHEMA Network_functional_design_view_mim;

	USE FROM Generic_product_occurrence_mim;	-- ISO/TS 10303-xxxx
	USE FROM Functional_usage_view_mim;	-- ISO/TS 10303-1705
	USE FROM Requirement_assignment_mim;	-- ISO/TS 10303-1233

USE FROM Material_property_definition_schema (property_definition_relationship);

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set); 

TYPE nfdv_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (component_functional_unit);
END_TYPE; 

ENTITY bus_element_link
  SUBTYPE OF (product_definition,product_definition_relationship);
UNIQUE
  UR1: SELF\product_definition_relationship.related_product_definition,
       SELF\product_definition_relationship.relating_product_definition;
WHERE
  WR1: SELF\product_definition_relationship.related_product_definition :<>:
       SELF\product_definition_relationship.relating_product_definition;
END_ENTITY; 

ENTITY bus_structural_definition
 SUBTYPE OF (product_definition);
END_ENTITY;

ENTITY component_functional_terminal
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY component_functional_unit
  SUBTYPE OF (product_definition);
END_ENTITY;

ENTITY network_node_definition
  SUBTYPE OF (product_definition);
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4066 - ISO/TS 10303-1706 Non feature shape element - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3496
*)

SCHEMA Non_feature_shape_element_mim;
	USE FROM Physical_unit_shape_with_parameters_mim;	-- ISO/TS 10303-1730

	USE FROM material_property_definition_schema(property_definition_relationship);
	
ENTITY group_shape_aspect
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY interface_plane
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY reference_graphic_registration_mark
 SUBTYPE OF (shape_aspect);
WHERE
  WR1: SELF\shape_aspect.product_definitional = false;
END_ENTITY;

ENTITY seating_plane
  SUBTYPE OF (shape_aspect);
END_ENTITY;

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4069 - ISO/TS 10303-1707 Package - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3499
*)


SCHEMA Package_mim;
	USE FROM Extended_geometric_tolerance_mim;	-- ISO/TS 10303-1666
	USE FROM Part_feature_function_mim;	-- ISO/TS 10303-1712

	SUBTYPE_CONSTRAINT package_part_feature_subtypes FOR shape_aspect; 
		(ONEOF (physical_unit_datum_feature,
		package_body));
	END_SUBTYPE_CONSTRAINT;

	TYPE p_groupable_item = SELECT BASED_ON groupable_item WITH 
	   (representation_item);
	END_TYPE; 

 	TYPE pa_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH  
		(package,
		package_terminal_template_definition);
	END_TYPE;

ENTITY visual_orientation_feature
 SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY guided_wave_terminal
   SUBTYPE OF (package_terminal);
END_ENTITY;

ENTITY package
 SUBTYPE OF (physical_unit);
END_ENTITY;

ENTITY package_body
 SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY package_body_bottom_surface
 SUBTYPE OF (package_body_surface);
END_ENTITY;

ENTITY package_body_edge_segment_surface
  SUBTYPE OF (shape_aspect, shape_aspect_relationship);
    SELF\shape_aspect_relationship.relating_shape_aspect : edge_segment_vertex;
    SELF\shape_aspect_relationship.related_shape_aspect  : edge_segment_vertex;
WHERE
  WR1: SELF\shape_aspect_relationship.relating_shape_aspect :<>:
       SELF\shape_aspect_relationship.related_shape_aspect;
END_ENTITY;

ENTITY package_body_edge_surface
 SUBTYPE OF (package_body_surface);
END_ENTITY;

ENTITY package_body_surface
ABSTRACT SUPERTYPE OF (ONEOF(package_body_top_surface,
                         package_body_edge_surface,
                         package_body_bottom_surface))
 SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY package_body_top_surface
 SUBTYPE OF (package_body_surface);
END_ENTITY;

ENTITY package_terminal_template_definition
  SUBTYPE OF (part_feature_template_definition);
END_ENTITY;  

ENTITY package_terminal
 SUPERTYPE OF (guided_wave_terminal 
 	ANDOR primary_reference_terminal)
  SUBTYPE OF (placed_feature);
END_ENTITY;

ENTITY primary_orientation_feature
 SUBTYPE OF (physical_unit_datum_feature);
WHERE
  WR1: SELF\shape_aspect.product_definitional = TRUE;
END_ENTITY;

ENTITY primary_reference_terminal
  SUBTYPE OF (package_terminal);
END_ENTITY;

ENTITY secondary_orientation_feature
 SUBTYPE OF (physical_unit_datum_feature);
WHERE
 WR1: SELF.product_definitional = TRUE;
END_ENTITY;

ENTITY tertiary_orientation_feature
 SUBTYPE OF (physical_unit_datum_feature);
WHERE
 WR1: SELF.product_definitional = TRUE;
END_ENTITY;

ENTITY wire_terminal
   SUBTYPE OF (package_terminal);
END_ENTITY;

ENTITY wire_terminal_template_definition
   SUBTYPE OF (package_terminal_template_definition);
END_ENTITY;

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4072 - ISO/TS 10303-1708 Packaged connector model - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3502
*)


SCHEMA Packaged_connector_model_mim;
	USE FROM Packaged_part_black_box_model_mim;	-- ISO/TS 10303-1710

ENTITY packaged_connector
  SUBTYPE OF (packaged_part);
END_ENTITY;

ENTITY packaged_connector_terminal_relationship
 SUBTYPE OF (shape_aspect, shape_aspect_relationship);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4078 - ISO/TS 10303-1710 Packaged part black box model - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3346
*)
SCHEMA Packaged_part_black_box_model_mim;

	USE FROM Functional_assignment_to_part_mim;	-- ISO/TS 10303-1674
	USE FROM Functional_usage_view_mim;	-- ISO/TS 10303-1705
	USE FROM Package_mim;	-- ISO/TS 10303-1707
	USE FROM Part_external_reference_mim;	-- ISO/TS 10303-1711

ENTITY packaged_part
 SUBTYPE OF (physical_unit);
END_ENTITY;

ENTITY packaged_part_terminal
 SUBTYPE OF (shape_aspect);
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4075 - ISO/TS 10303-1709 Packaged part white box model - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3505
*)


SCHEMA Packaged_part_white_box_model_mim;
	USE FROM Bare_die_mim;	-- ISO/TS 10303-1650
	USE FROM Packaged_part_black_box_model_mim;	-- ISO/TS 10303-1710
	USE FROM Physical_unit_2d_shape_mim;	-- ISO/TS 10303-1726
	USE FROM Physical_unit_3d_shape_mim;	-- ISO/TS 10303-1727
	
	
ENTITY device_terminal_map
 SUBTYPE OF (shape_aspect, shape_aspect_relationship);
   SELF\shape_aspect_relationship.relating_shape_aspect : packaged_part_terminal;
UNIQUE
  UR1: SELF\shape_aspect_relationship.related_shape_aspect,
       SELF\shape_aspect_relationship.relating_shape_aspect;
END_ENTITY;
	
END_SCHEMA;


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2522 - ISO/TS 10303-1022 Part and version identification - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1115
*) 


SCHEMA Part_and_version_identification_mim; 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM Product_version_mim;    -- ISO/TS 10303-1018


END_SCHEMA;  -- Part_and_version_identification_mim

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1327 - ISO/TS 10303-1055 Part definition relationship - EXPRESS MIM
*)
   
SCHEMA Part_definition_relationship_mim;

USE FROM Part_view_definition_mim;
USE FROM Product_view_definition_relationship_mim;
USE FROM Value_with_unit_mim; -- ISO/TS 10303-1054

USE FROM product_structure_schema
	(make_from_usage_option);

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4081 - ISO/TS 10303-1711 Part external reference - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3508
*)


SCHEMA Part_external_reference_mim;
	USE FROM Physical_layout_template_mim;	-- ISO/TS 10303-1722

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4084 - ISO/TS 10303-1712 Part feature function - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3511
*)


SCHEMA Part_feature_function_mim;
	USE FROM Geometric_tolerance_mim;	-- ISO/TS 10303-1051
	USE FROM Physical_unit_usage_view_mim;	-- ISO/TS 10303-1732

ENTITY fiducial_part_feature
 SUBTYPE OF (part_tooling_feature);
END_ENTITY;

ENTITY part_interface_access_feature
 SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY part_mating_feature
 SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY part_mounting_feature
 SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY part_tooling_feature
 SUPERTYPE OF (ONEOF(fiducial_part_feature,
               tool_registration_mark) ANDOR 
               test_point_part_feature)
 SUBTYPE OF (shape_aspect);
WHERE
 WR1: SELF\shape_aspect.product_definitional = true;
END_ENTITY;

ENTITY test_point_part_feature
 SUBTYPE OF (part_tooling_feature);
END_ENTITY;

ENTITY thermal_feature
 SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY tool_registration_mark
 SUBTYPE OF (part_tooling_feature);
END_ENTITY;

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4087 - ISO/TS 10303-1713 Part feature grouping - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3514
*)


SCHEMA Part_feature_grouping_mim;
	USE FROM Physical_unit_usage_view_mim;	-- ISO/TS 10303-1732
--	USE FROM Value_with_unit_extension_mim;	-- ISO/TS 10303-1753
	USE FROM Shape_aspect_definition_schema(composite_shape_aspect);
	
ENTITY composite_array_shape_aspect
  SUPERTYPE OF (ONEOF( linear_composite_array_shape_aspect,
                 rectangular_composite_array_shape_aspect))
  SUBTYPE OF (composite_shape_aspect);
END_ENTITY;

ENTITY composite_array_shape_aspect_link
  SUBTYPE OF (shape_aspect,shape_aspect_relationship);
WHERE
  WR1: SELF\shape_aspect_relationship.related_shape_aspect :<>:
       SELF\shape_aspect_relationship.relating_shape_aspect;
END_ENTITY; 

ENTITY linear_composite_array_shape_aspect
  SUBTYPE OF (composite_array_shape_aspect);
END_ENTITY;

ENTITY linear_composite_array_shape_aspect_link
  SUBTYPE OF (shape_aspect,shape_aspect_relationship);
    SELF\shape_aspect_relationship.relating_shape_aspect : linear_composite_array_shape_aspect;
    SELF\shape_aspect_relationship.related_shape_aspect  : linear_composite_array_shape_aspect;
WHERE
  WR1: SELF\shape_aspect_relationship.related_shape_aspect :<>:
       SELF\shape_aspect_relationship.relating_shape_aspect;
END_ENTITY; 

ENTITY rectangular_composite_array_shape_aspect
  SUBTYPE OF (composite_array_shape_aspect);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4090 - ISO/TS 10303-1714 Part feature location - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3517
*)


SCHEMA Part_feature_location_mim;
	USE FROM Shape_feature_mim;	-- ISO/TS 10303-xxxx
	USE FROM product_property_representation_schema(item_identified_representation_usage);

  ENTITY usage_concept_usage_relationship
    SUBTYPE OF (mapped_item, item_identified_representation_usage);
      SELF\item_identified_representation_usage.used_representation : shape_representation;
      SELF\item_identified_representation_usage.definition          : shape_aspect;
    DERIVE
      SELF\item_identified_representation_usage.identified_item : representation_item := SELF;
    WHERE
      WR1: SELF IN SELF\item_identified_representation_usage.used_representation.items;
  END_ENTITY;
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4093 - ISO/TS 10303-1715 Part occurrence - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3649
*)


SCHEMA Part_occurrence_mim;
	USE FROM Generic_product_occurrence_mim;	-- ISO/TS 10303-xxxx
	USE FROM Part_view_definition_mim;	-- ISO/TS 10303-1023
	USE FROM Assembly_structure_mim;	-- ISO/TS 10303-1026		

USE FROM product_property_definition_schema(
	characterized_product_definition,
	property_definition);

USE FROM product_property_representation_schema(
	property_definition_representation);
	
USE FROM product_structure_schema
	(product_definition_occurrence_relationship,
	quantified_assembly_component_usage);

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set);

TYPE product_definition_or_assembly_relationship = SELECT (assembly_component_usage, product_definition);
END_TYPE;
	
RULE restrict_part_occurrence FOR (product_definition);
LOCAL
  part_occurrences: SET OF product_definition := QUERY(pd <* product_definition | 
	( pd.frame_of_reference.name = 'part occurrence' ));
END_LOCAL;
WHERE
WR1: SIZEOF ( QUERY ( pd <* part_occurrences | 
	( NOT( pd.name IN 
['single instance' , 'selected instance' ,'quantified instance' , 'specified instance' ] ) ) ) ) = 0;
WR2: SIZEOF ( QUERY ( pd <* part_occurrences | 
 	(SIZEOF ( QUERY ( pdr <* USEDIN ( pd ,
'PART_OCCURRENCE_MIM.' + 'PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION' ) | 
	pdr.name = 'definition usage' ) ) <>1 ) AND 
	( SIZEOF ( QUERY ( cd <* USEDIN ( pd , 'PART_OCCURRENCE_MIM.' + 'CONFIGURATION_DESIGN.DESIGN' ) | 
	( cd.name = 'occurrence usage definition' ) AND 
	( NOT ('PART_OCCURRENCE_MIM.' + 'PRODUCT_IDENTIFICATION' IN TYPEOF( cd.configuration ) ) ) ) ) <>1 ) ) ) = 0;
WR3: SIZEOF ( QUERY ( pd <* part_occurrences |  
	(SIZEOF ( QUERY ( cd <* USEDIN ( pd , 'PART_OCCURRENCE_MIM.'+ 'PRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION' ) |
 	( 'PART_OCCURRENCE_MIM.' +'PRODUCT_DEFINITION_USAGE' IN TYPEOF ( cd ) ) ) ) = 0 )AND
 	( SIZEOF ( USEDIN ( pd , 'PART_OCCURRENCE_MIM.' + 'PRODUCT_DEFINITION_OCCURRENCE_RELATIONSHIP.OCCURRENCE' ) ) = 0 ) ) ) = 0;
WR4: SIZEOF ( QUERY ( pd <* part_occurrences | 
	( pd.name = 'selected instance' ) AND 
	NOT valid_selected_instance_representation(pd) ))=0;
WR5: SIZEOF ( QUERY ( pd <* part_occurrences | 
 	( pd.name = 'quantified instance' ) AND 
	( SIZEOF ( QUERY (ppd <* USEDIN ( pd , 'PART_OCCURRENCE_MIM.' +'PROPERTY_DEFINITION.DEFINITION' ) |
 	( ppd.name ='occurrence quantity' ) AND 
	( SIZEOF ( QUERY ( pdr <*USEDIN ( ppd , 'PART_OCCURRENCE_MIM.' +'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION' ) | (
	pdr.used_representation.name = 'quantity' ) AND 
	(SIZEOF ( pdr.used_representation.items ) = 1 ) AND 
 	(SIZEOF ( QUERY ( i <* pdr.used_representation.items | 
	('PART_OCCURRENCE_MIM.' + 'MEASURE_REPRESENTATION_ITEM' IN TYPEOF ( i ) ) AND
	( i.name = 'quantity measure' ) ) ) = 1)))= 1 )))= 0 )))= 0;
WR6: SIZEOF ( QUERY ( pd <* part_occurrences | 
	( pd.name = 'specified instance' ) AND 
	( SIZEOF ( QUERY (
pdor <* USEDIN ( pd , 'PART_OCCURRENCE_MIM.' +'PRODUCT_DEFINITION_OCCURRENCE_RELATIONSHIP.OCCURRENCE' ) | 
  'PART_OCCURRENCE_MIM.' +'SPECIFIED_HIGHER_USAGE_OCCURRENCE' IN TYPEOF ( pdor.occurrence_usage ) ) ) = 0 ) ) ) = 0;
END_RULE;
	
RULE restrict_part_occurrence_category FOR (product_definition);
LOCAL
  part_occurrences: SET OF product_definition := QUERY( pd <* product_definition |(
		pd.frame_of_reference.name = 'part occurrence'));
END_LOCAL;
WHERE
WR1: SIZEOF( QUERY( pd <* part_occurrences | 
(SIZEOF( QUERY( prpc <* USEDIN(pd.formation.of_product, 'PART_OCCURRENCE_MIM.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS') | 
  prpc.name IN ['part','raw material','tool'] )) = 0 ) )) = 0;
END_RULE;
	
RULE selected_instance_usage_requires_representation FOR
    (assembly_component_usage);
LOCAL
  selected_instance_usages: SET OF assembly_component_usage := QUERY( acr <* assembly_component_usage|
		(acr.name = 'selected instance usage'));
END_LOCAL;
WHERE
WR1: SIZEOF ( QUERY ( acr <* selected_instance_usages | 
	NOT valid_selected_instance_representation(acr) ))=0;
END_RULE;
	
RULE restrict_product_definitions_for_definition_usage FOR
    (product_definition_relationship);
WHERE
WR1: SIZEOF ( QUERY ( pdr <* product_definition_relationship |
     ( pdr.name = 'definition usage' ) AND 
	( ( pdr.relating_product_definition.frame_of_reference.name<> 'part definition' ) OR 
	( pdr.related_product_definition.frame_of_reference.name<>'part occurrence' )))) =0;
END_RULE;
	
FUNCTION valid_selected_instance_representation (pd: product_definition_or_assembly_relationship): LOGICAL;
LOCAL
  properties: SET OF property_definition := bag_to_set(QUERY( prd<* USEDIN ( pd ,'PART_OCCURRENCE_MIM.PROPERTY_DEFINITION.DEFINITION' ) | 
 (prd.name = 'occurrence selection' )));

  property_definition_representations: SET OF property_definition_representation := bag_to_set(QUERY ( pdr <* USEDIN ( properties[1] , 'PART_OCCURRENCE_MIM.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION') | 
	( pdr.used_representation.name = 'selection criteria' )));

  selected_representation: representation;
END_LOCAL;

IF (SIZEOF( properties)<>1) THEN
	RETURN(FALSE);
END_IF;

IF (SIZEOF(property_definition_representations)<>1) THEN
	RETURN(FALSE);
END_IF;

selected_representation := property_definition_representations[1]\property_definition_representation.used_representation;

IF (SIZEOF(selected_representation\representation.items) <1) OR (SIZEOF(selected_representation\representation.items) >2) THEN
	RETURN(FALSE);
END_IF;

IF (SIZEOF ( QUERY ( i <* selected_representation\representation.items |
	( SIZEOF (['PART_OCCURRENCE_MIM.MEASURE_REPRESENTATION_ITEM' ,
			'PART_OCCURRENCE_MIM.VALUE_RANGE']* TYPEOF ( i ) ) = 1) AND
 	( i.name = 'selection quantity' ))) <> 1 ) THEN
	RETURN(FALSE);
END_IF;

IF (SIZEOF ( QUERY ( i <* selected_representation\representation.items |
	( 'PART_OCCURRENCE_MIM.DESCRIPTIVE_REPRESENTATION_ITEM' IN TYPEOF ( i ) ) AND
 	( i.name = 'selection control' )))> 1) THEN
	RETURN(FALSE);
END_IF; --the selection control is not specified then the quantity shall be a qualified_representation_item or a value_range
IF (SIZEOF ( QUERY ( i <* selected_representation\representation.items |
	( 'PART_OCCURRENCE_MIM.DESCRIPTIVE_REPRESENTATION_ITEM' IN TYPEOF( i ) ) AND
 	( i.name = 'selection control' ) ))= 0) AND 
   (SIZEOF ( QUERY ( i <* selected_representation\representation.items |
      ( i.name = 'selection quantity' ) AND  
      ( SIZEOF(['PART_OCCURRENCE_MIM.QUALIFIED_REPRESENTATION_ITEM' ,
		'PART_OCCURRENCE_MIM.VALUE_RANGE']* TYPEOF ( i ) ) =0 ))) > 0 ) THEN
	RETURN(FALSE);
END_IF;
	
RETURN(TRUE);
END_FUNCTION;
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4096 - ISO/TS 10303-1716 Part template 2d shape - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3520
*)


SCHEMA Part_template_2d_shape_mim;
	USE FROM Part_template_extension_mim;	-- ISO/TS 10303-1718
	USE FROM Physical_unit_2d_shape_mim; -- ISO/TS 10303-1726

	USE FROM Requirement_decomposition_mim;	-- ISO/TS 10303-1740
	
	USE FROM product_property_definition_schema (characterized_definition);

TYPE pt2ds_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (assembly_component_usage,
     structured_template);
END_TYPE; 

ENTITY complex_passage_padstack_definition
 SUBTYPE OF (stratum_stack_dependent_template, passage_padstack_definition);
END_ENTITY;
  
ENTITY design_stack_model
  SUBTYPE OF(stratum_stack_model);
END_ENTITY;

ENTITY library_stack_model
  SUBTYPE OF(stratum_stack_model);
END_ENTITY;

ENTITY material_removal_structured_template
  SUBTYPE OF (single_stratum_structured_template);
END_ENTITY;

ENTITY multi_stratum_special_symbol_template
  SUBTYPE OF (multi_stratum_structured_template, special_symbol_template);
END_ENTITY;
  
ENTITY multi_stratum_structured_template
   ABSTRACT SUPERTYPE OF (ONEOF (padstack_definition, multi_stratum_special_symbol_template)
      ANDOR stratum_stack_dependent_template)  
  SUBTYPE OF (structured_template);
END_ENTITY;

ENTITY padstack_definition
    SUPERTYPE OF (passage_padstack_definition)
    SUBTYPE OF (multi_stratum_structured_template);
END_ENTITY;

ENTITY part_template_keepout_shape_allocation_to_stratum_stack
   SUBTYPE OF (characterized_object, property_definition);
   DERIVE
     SELF\property_definition.definition : characterized_definition := SELF;
END_ENTITY;

ENTITY passage_padstack_definition 
 SUBTYPE OF (padstack_definition);
END_ENTITY; 

ENTITY passage_technology_allocation_to_stack_model
  SUBTYPE OF (property_definition);
END_ENTITY;

ENTITY physical_unit_keepout_shape_allocation_to_stratum_stack
   SUBTYPE OF (representation, representation_relationship);
END_ENTITY;

ENTITY single_stratum_special_symbol_template
  SUBTYPE OF (single_stratum_structured_template, special_symbol_template);
END_ENTITY;
  
ENTITY single_stratum_structured_template
  ABSTRACT SUPERTYPE OF (ONEOF (material_removal_structured_template, single_stratum_special_symbol_template))
  SUBTYPE OF (structured_template, single_stratum_template);
END_ENTITY;

ENTITY special_symbol_template
  ABSTRACT SUPERTYPE OF (ONEOF (single_stratum_special_symbol_template, multi_stratum_special_symbol_template))
  SUBTYPE OF (part_template_definition);
END_ENTITY;

ENTITY stratum_specific_template_location
  SUBTYPE OF (assembly_component_usage, property_definition);
END_ENTITY;

ENTITY stratum_stack_dependent_template
  SUBTYPE OF (multi_stratum_structured_template);
END_ENTITY;

ENTITY structured_inter_stratum_feature_template
  SUBTYPE OF (inter_stratum_feature_template, stratum_stack_dependent_template);
END_ENTITY;
  
ENTITY structured_template
  ABSTRACT SUPERTYPE OF (ONEOF (single_stratum_structured_template, multi_stratum_structured_template))
  SUBTYPE OF (geometric_template);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4099 - ISO/TS 10303-1717 Part template 3d shape - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3523
*)


SCHEMA Part_template_3d_shape_mim;
	USE FROM Edge_shape_feature_mim;	-- ISO/TS 10303-1673
	USE FROM Layered_3d_shape_mim;	-- ISO/TS 10303-1694	
	USE FROM Part_template_extension_mim;	-- ISO/TS 10303-1718
	USE FROM Part_template_shape_with_parameters_mim;	-- ISO/TS 10303-1720

ENTITY edge_segment_cross_section
  SUBTYPE OF (shape_definition_3d_intersection);
END_ENTITY; 

ENTITY inter_stratum_feature_edge_segment_template_with_cross_section
  SUBTYPE OF (inter_stratum_feature_edge_segment_template);
END_ENTITY;
  
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4102 - ISO/TS 10303-1718 Part template extension - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3526
*)


SCHEMA Part_template_extension_mim;
    USE FROM Layered_2d_shape_mim;	-- ISO/TS 10303-1693
    USE FROM Fill_area_style_mim; -- ISO/TS 10303-1672
	USE FROM Fabrication_technology_mim;	-- ISO/TS 10303-1670
	USE FROM Text_representation_mim;	-- ISO/TS 10303-1750
	
	USE FROM Presentation_definition_schema(text_literal);

 SUBTYPE_CONSTRAINT pte_template_definition_subtypes FOR part_template_definition;   
 	(ONEOF (parametric_template,
 	part_string_template,
    part_text_template));
 END_SUBTYPE_CONSTRAINT;  

ENTITY closed_curve_style_parameters
  SUBTYPE OF(curve_style_parameters_representation);
END_ENTITY;  

ENTITY curve_style_parameters_representation
  SUBTYPE OF(representation);
END_ENTITY;  

ENTITY curve_style_parameters_with_ends
  SUBTYPE OF(curve_style_parameters_representation);
END_ENTITY;  

ENTITY default_trace_template
  SUBTYPE OF (trace_template);
END_ENTITY;

ENTITY inter_stratum_feature_edge_segment_template
  SUBTYPE OF (part_template_definition,shape_aspect_relationship);
    SELF\shape_aspect_relationship.relating_shape_aspect : edge_segment_vertex;
    SELF\shape_aspect_relationship.related_shape_aspect  : edge_segment_vertex;
WHERE
  WR1: SELF\shape_aspect_relationship.relating_shape_aspect :<>:
       SELF\shape_aspect_relationship.related_shape_aspect;
END_ENTITY;

ENTITY inter_stratum_feature_edge_template
  SUBTYPE OF (part_template_definition);
END_ENTITY;

ENTITY fill_area_template
  SUBTYPE OF (parametric_template);
END_ENTITY;

ENTITY parametric_template
  ABSTRACT SUPERTYPE OF (ONEOF (fill_area_template,
    teardrop_template,
    trace_template))
  SUBTYPE OF (part_template_definition);
END_ENTITY;
  
ENTITY part_string_template
  SUBTYPE OF (part_template_definition);
END_ENTITY;

ENTITY part_text_template
  SUBTYPE OF (part_template_definition);
END_ENTITY;

ENTITY planar_path_shape_representation_with_parameters
  SUBTYPE OF (single_area_csg_2d_shape_representation);
END_ENTITY;

ENTITY path_area_with_parameters
  SUBTYPE OF (complex_area, mapped_item);
(* TODO  
  WHERE
    wr1: "xxx.curve" IN TYPEOF SELF/mapped_item.mapping_source;
      -- the mapping source must be a curve (open or closed)
  wr2: -- the mapping_source.mapped_representation must be
curve_style_parameters_representation;
  wrx: - don't reall care on mapping_source.mapping_origin. Best to make it the
line-width
*)
END_ENTITY;

ENTITY solid_character_glyph_2d_symbol
  SUBTYPE OF (generic_character_glyph_symbol, csg_2d_shape_representation);
END_ENTITY;
  
ENTITY snowball_template
  SUBTYPE OF (teardrop_template);
END_ENTITY;

ENTITY teardrop_by_angle_template
  SUBTYPE OF (teardrop_template);
END_ENTITY;

ENTITY teardrop_by_length_template
  SUBTYPE OF (teardrop_template);
END_ENTITY;

ENTITY teardrop_template
  ABSTRACT SUPERTYPE OF (ONEOF (snowball_template,
    teardrop_by_angle_template,
    teardrop_by_length_template))
  SUBTYPE OF (parametric_template, single_stratum_template);
END_ENTITY;
  
ENTITY trace_template
  SUPERTYPE OF (default_trace_template)
  SUBTYPE OF (parametric_template);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4105 - ISO/TS 10303-1719 Part template non planar shape - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3529
*)


SCHEMA Part_template_non_planar_shape_mim;
    USE FROM Part_template_3d_shape_mim;	-- ISO/TS 10303-1717
	USE FROM Manifold_surface_mim;	-- ISO/TS 10303-1509

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4108 - ISO/TS 10303-1720 Part template shape with parameters - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3532
*)


SCHEMA Part_template_shape_with_parameters_mim;
	USE FROM Non_feature_shape_element_mim;	-- ISO/TS 10303-1706
	USE FROM Physical_layout_template_mim;	-- ISO/TS 10303-1722
	USE FROM Shape_parameters_mim;	-- ISO/TS 10303-1743
	
 	TYPE ptswp_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH  
		(shape_representation);
	END_TYPE;
	
TYPE ptswp_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (shape_representation);
END_TYPE; 

ENTITY geometric_template
  ABSTRACT SUPERTYPE
  SUBTYPE OF (part_template_definition);
END_ENTITY;

END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2919 - ISO/TS 10303-1023 Part view definition - EXPRESS MIM
*)


SCHEMA Part_view_definition_mim;

USE FROM Part_and_version_identification_mim;    -- ISO/TS 10303-1022

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019


END_SCHEMA;  -- Part_view_definition_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2922 - ISO/TS 10303-1011 Person organization - EXPRESS MIM
*) 


SCHEMA Person_organization_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute,
   id_attribute_select,
   name_attribute,
   name_attribute_select); 

USE FROM person_organization_schema   -- ISO 10303-41
  (address,
   organization,
   organization_relationship,
   organizational_address,
   person,
   person_and_organization,
   personal_address); 


ENTITY person_and_organization_address
  SUBTYPE OF (organizational_address, personal_address);
  SELF\organizational_address.organizations : SET[1:1] OF organization;
  SELF\personal_address.people : SET[1:1] OF person;
WHERE
  WR1: SIZEOF(QUERY(pao <* USEDIN (SELF\personal_address.people[1], 'PERSON_ORGANIZATION_SCHEMA.PERSON_AND_ORGANIZATION.THE_PERSON') | pao.the_organization :=: SELF\organizational_address.organizations[1])) = 1;
END_ENTITY;

END_SCHEMA;  -- Person_organization_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1091 - ISO/TS 10303-1013 Person organization assignment - EXPRESS MIM
*)
      
SCHEMA Person_organization_assignment_mim;

USE FROM Person_organization_mim; 		-- 10303-1011
USE FROM person_organization_schema 	-- ISO 10303-41
  (organization_role,
   person_and_organization_role);
USE FROM management_resources_schema 	-- ISO 10303-41
  (organization_assignment,
   person_and_organization_assignment);

   
TYPE organization_item = EXTENSIBLE SELECT; 
END_TYPE;

   
TYPE person_and_organization_item = EXTENSIBLE SELECT; 
END_TYPE;

   
ENTITY applied_organization_assignment
  SUBTYPE OF (organization_assignment);
  items : SET [1:?] OF organization_item;
END_ENTITY;

   
ENTITY applied_person_and_organization_assignment
  SUBTYPE OF (person_and_organization_assignment);
  items : SET [1:?] OF person_and_organization_item;
END_ENTITY;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4111 - ISO/TS 10303-1721 Physical component feature - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3535
*)


SCHEMA Physical_component_feature_mim;
	USE FROM Component_feature_mim;	-- ISO/TS 10303-1657

 ENTITY physical_component_feature
    SUBTYPE OF (component_feature);
  END_ENTITY;

  ENTITY physical_component_terminal
    SUBTYPE OF (component_terminal,
 			physical_component_feature);
  END_ENTITY;
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4213 - ISO/TS 10303-1755 Physical connectivity definition - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3667
*)


SCHEMA Physical_connectivity_definition_mim;
	USE FROM Part_external_reference_mim;	-- ISO/TS 10303-1711
	USE FROM Physical_component_feature_mim;	-- ISO/TS 10303-1721
	USE FROM Requirement_decomposition_mim;	-- ISO/TS 10303-1740

TYPE pcd_groupable_item = SELECT BASED_ON groupable_item WITH 
   (physical_connectivity_definition);
END_TYPE; 

TYPE pcd_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (shape_aspect_relationship,
      physical_connectivity_definition);
END_TYPE; 

TYPE pcd_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
     (physical_connectivity_definition,
      physical_connectivity_element);
END_TYPE; 
	
ENTITY make_from_connectivity_relationship
 SUBTYPE OF (shape_aspect_relationship);
  SELF\shape_aspect_relationship.relating_shape_aspect : physical_connectivity_definition; 
  SELF\shape_aspect_relationship.related_shape_aspect  : physical_connectivity_definition;
END_ENTITY;

ENTITY physical_connectivity_definition
  SUBTYPE OF (shape_aspect);
UNIQUE
  UR1: SELF\shape_aspect.name,SELF\shape_aspect.of_shape;
END_ENTITY;

ENTITY physical_connectivity_element
  SUBTYPE OF (shape_aspect_relationship, shape_aspect);
END_ENTITY;

ENTITY physical_unit_network_definition
 SUBTYPE OF (physical_unit);
END_ENTITY;

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4114 - ISO/TS 10303-1722 Physical layout template - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3538
*)


SCHEMA Physical_layout_template_mim;
	USE FROM Analytical_model_mim;	-- ISO/TS 10303-1603

	USE FROM Feature_and_connection_zone_mim;	-- ISO/TS 10303-1671
   
	USE FROM Characterizable_object_mim;     -- ISO/TS 10303-xxxx	

    USE FROM Part_view_definition_mim;   -- ISO/TS 10303-1023

	USE FROM Application_context_schema(application_context_element);

	TYPE plt_groupable_item = SELECT BASED_ON groupable_item WITH 
	   (representation_item);
	END_TYPE; 

		
ENTITY part_template_definition
  SUBTYPE OF (product_definition, product_definition_shape);
  DERIVE
    SELF\property_definition.definition : characterized_definition := SELF;
  WHERE
    WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +'NAME_ATTRIBUTE.NAMED_ITEM')) = 0;
    WR2: NOT EXISTS(SELF\property_definition.description);
END_ENTITY;	
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4117 - ISO/TS 10303-1723 Physical node requirement to implementing component allocation - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3541
*)


SCHEMA Physical_node_requirement_to_implementing_component_allocation_mim;
	USE FROM Assembly_module_with_packaged_connector_component_mim;	-- ISO/TS 10303-1645
	USE FROM Assembly_technology_mim;	-- ISO/TS 10303-1649
	USE FROM Physical_connectivity_definition_mim;	-- ISO/TS 10303-1755
	
REFERENCE FROM product_property_definition_schema -- ISO 10303-41
  (acyclic_shape_aspect_relationship);
	
ENTITY physical_node_requirement_to_implementing_component_allocation
  SUBTYPE OF (shape_aspect_relationship, shape_aspect);
    SELF\shape_aspect_relationship.relating_shape_aspect : physical_connectivity_definition;
WHERE
  WR1: acyclic_shape_aspect_relationship(SELF,
       [SELF\shape_aspect_relationship.related_shape_aspect],
       'PHYSICAL_NODE_REQUIREMENT_TO_IMPLEMENTING_COMPONENT_ALLOCATION_MIM.'+
       'PHYSICAL_NODE_REQUIREMENT_TO_IMPLEMENTING_COMPONENT_ALLOCATION');
END_ENTITY;
	
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4120 - ISO/TS 10303-1724 Physical unit 2d design view - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3547
*)


SCHEMA Physical_unit_2d_design_view_mim;
	USE FROM Part_template_shape_with_parameters_mim;  -- ISO/TS 10303-1720	
	USE FROM Physical_unit_2d_shape_mim;	-- ISO/TS 10303-1726
	USE FROM Physical_unit_design_view_mim;	-- ISO/TS 10303-1728
	
REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set); 
	
	
ENTITY component_2d_location
  SUBTYPE OF (context_dependent_shape_representation, shape_representation_relationship, representation_relationship_with_transformation, definitional_representation_relationship);
  DERIVE
    SELF\context_dependent_shape_representation.representation_relation : shape_representation_relationship := SELF;   -- NEW
    SELF\representation_relationship.name : label := 'component 2d location';
END_ENTITY;

FUNCTION cto2d_determinant_test (cto2d: cartesian_transformation_operator_2d;
                             expected_value: REAL; delta: REAL ) : BOOLEAN;

LOCAL
  det : REAL := 0.0;
  DRs : LIST [4:4] OF REAL := [];
END_LOCAL;
     DRs[1] := cto2d.u[1].direction_ratios[1];
     DRs[2] := cto2d.u[1].direction_ratios[2];
     DRs[3] := cto2d.u[2].direction_ratios[1];
     DRs[4] := cto2d.u[2].direction_ratios[2];
     det  :=  (DRs[1] * DRs[4]) - (DRs[2] * DRs[3]);
IF (Abs(expected_value - det) < Abs(delta) ) THEN
    RETURN (TRUE);
ELSE
    RETURN (FALSE);
END_IF;
END_FUNCTION;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4126 - ISO/TS 10303-1726 Physical unit 2d shape - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3559
*)


SCHEMA Physical_unit_2d_shape_mim;
	USE FROM Non_feature_shape_element_mim;	-- ISO/TS 10303-1706
	USE FROM Physical_unit_shape_with_parameters_mim;	-- ISO/TS 10303-1730
	USE FROM Layered_2d_shape_mim; -- ISO/TS 10303-1693
	
 	TYPE pu2ds_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH  
		(shape_representation);
	END_TYPE;
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4123 - ISO/TS 10303-1725 Physical unit 3d design view - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3562
*)


SCHEMA Physical_unit_3d_design_view_mim;

	USE FROM Layered_3d_shape_mim;	-- ISO/TS 10303-1694
	USE FROM Part_template_shape_with_parameters_mim;  -- ISO/TS 10303-1720	
	USE FROM Physical_unit_design_view_mim;	-- ISO/TS 10303-1728	
	-- Needed by the mapping
	USE FROM aic_manifold_surface (manifold_surface_shape_representation); -- ISO 10303-511 
	
ENTITY component_3d_location
  SUBTYPE OF (context_dependent_shape_representation, shape_representation_relationship, representation_relationship_with_transformation, definitional_representation_relationship);
  DERIVE
    SELF\context_dependent_shape_representation.representation_relation : shape_representation_relationship := SELF;   -- NEW
    SELF\representation_relationship.name : label := 'component 3d location';
END_ENTITY;

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4129 - ISO/TS 10303-1727 Physical unit 3d shape - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3565
*)


SCHEMA Physical_unit_3d_shape_mim;
	USE FROM Non_feature_shape_element_mim;	-- ISO/TS 10303-1706
	USE FROM Physical_unit_shape_with_parameters_mim;	-- ISO/TS 10303-1730
	USE FROM Requirement_decomposition_mim;	-- ISO/TS 10303-1740
	
 	TYPE pu3ds_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH  
		(shape_representation);
	END_TYPE;

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4132 - ISO/TS 10303-1728 Physical unit design view - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3568
*)

SCHEMA Physical_unit_design_view_mim;

	USE FROM Physical_layout_template_mim;	-- ISO/TS 10303-1722
	
	USE FROM Physical_unit_usage_view_mim;	-- ISO/TS 10303-1732
	
	USE FROM application_context_schema(application_context_element);

TYPE pudv_groupable_item = SELECT BASED_ON groupable_item WITH 
   (assembly_component);
END_TYPE; 
	
TYPE pudv_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (assembly_component_usage,
     descriptive_representation_item,
     property_definition);
END_TYPE; 
	
ENTITY component_definition
  SUBTYPE OF (product_definition, product_definition_relationship);
  DERIVE
    SELF\product_definition_relationship.id : identifier := product_definition.id;
    SELF\product_definition_relationship.related_product_definition : component_definition := SELF;
    SELF\product_definition_relationship.name : label := product_definition.id;
  WHERE
    WR1: NOT EXISTS(SELF\product_definition_relationship.description);
    WR2: NOT EXISTS(SELF\property_definition.description);    
END_ENTITY;

ENTITY assembly_component
  SUBTYPE OF (component_definition, product_definition_shape);
  DERIVE
    SELF\property_definition.definition : characterized_definition := SELF;
  WHERE
    WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +'NAME_ATTRIBUTE.NAMED_ITEM')) = 0;
    WR2: NOT EXISTS(SELF\property_definition.description);
END_ENTITY;

ENTITY next_assembly_usage_occurrence_relationship
  SUBTYPE OF (next_assembly_usage_occurrence,
    product_definition_occurrence_relationship);
  DERIVE
    SELF\product_definition_occurrence_relationship.occurrence_usage : next_assembly_usage_occurrence_relationship := SELF;
END_ENTITY;

ENTITY physical_component
  SUBTYPE OF (assembly_component);
END_ENTITY;

ENTITY thermal_component
  SUBTYPE OF (assembly_component);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4135 - ISO/TS 10303-1729 Physical unit interconnect definition - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3571
*)


SCHEMA Physical_unit_interconnect_definition_mim;
	USE FROM Part_occurrence_mim;	-- ISO/TS 10303-1715

	USE FROM Date_time_schema
		(date_time_role,
		date_role);
	USE FROM Document_schema(document_type);
	USE FROM Person_organization_schema
		(person_and_organization_role,
		organization_role);	
	USE FROM Product_definition_schema(product_definition_with_associated_documents);	
	USE FROM Product_property_definition_schema(property_definition);
			
ENTITY connector_based_interconnect_definition
  SUBTYPE OF (property_definition);
    SELF\property_definition.definition : physical_unit_interconnect_definition;
UNIQUE
  UR1: SELF\property_definition.name,SELF\property_definition.definition;
END_ENTITY;

ENTITY physical_unit_interconnect_definition
 SUBTYPE OF (product_definition);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3835 - ISO/TS 10303-1613 Physical unit non planar design view - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3574
*)


SCHEMA Physical_unit_non_planar_design_view_mim;
	USE FROM Manifold_subsurface_mim;	-- ISO/TS 10303-1702
	USE FROM Physical_unit_design_view_mim;	-- ISO/TS 10303-1728
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4138 - ISO/TS 10303-1730 Physical unit shape with parameters - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3577
*)


SCHEMA Physical_unit_shape_with_parameters_mim;
	USE FROM Elemental_geometric_shape_mim;	-- ISO/TS 10303-1004
--	USE FROM Non_feature_shape_element_mim;	-- ISO/TS 10303-1706
	USE FROM Part_view_definition_mim;	-- ISO/TS 10303-1023
	USE FROM Requirement_assignment_mim;	-- ISO/TS 10303-1233
	USE FROM Shape_parameters_mim;	-- ISO/TS 10303-1743
	USE FROM Physical_unit_usage_view_mim;	-- ISO/TS 10303-1732
	
 	TYPE puswp_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH  
		(shape_representation);
	END_TYPE;
	
TYPE puswp_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (shape_representation);
END_TYPE; 
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4144 - ISO/TS 10303-1732 Physical unit usage view - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3580
*)


SCHEMA Physical_unit_usage_view_mim;
	USE FROM Analytical_model_mim;	-- ISO/TS 10303-1603
	USE FROM Feature_and_connection_zone_mim;	-- ISO/TS 10303-1671
	USE FROM Item_definition_structure_mim;	-- ISO/TS 10303-1345
	USE FROM Part_feature_location_mim;	-- ISO/TS 10303-1714
	USE FROM Requirement_assignment_mim;	-- ISO/TS 10303-1233
	USE FROM Shape_composition_mim;	-- ISO/TS 10303-1742
	USE FROM derived_shape_element_mim; -- ISO/TS 10303-1130
	
	USE FROM application_context_schema(application_context_element);
	USE FROM material_property_definition_schema(property_definition_relationship);

TYPE puuv_groupable_item = SELECT BASED_ON groupable_item WITH 
   (shape_aspect);
END_TYPE; 

TYPE puuv_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (shape_aspect);
END_TYPE;

TYPE puuv_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
     (shape_aspect);
END_TYPE;
	
ENTITY connection_zone_map_identification
  SUBTYPE OF (shape_aspect,representation_relationship);
    SELF\representation_relationship.rep_1 : usage_view_connection_zone_terminal_shape_relationship;
    SELF\representation_relationship.rep_2 : usage_view_connection_zone_terminal_shape_relationship;
WHERE
  WR1: SELF\representation_relationship.rep_2 :<>:
       SELF\representation_relationship.rep_1;
END_ENTITY; 

ENTITY make_from_part_feature_relationship
 SUBTYPE OF (shape_aspect, shape_aspect_relationship);
UNIQUE
  UR1: SELF\shape_aspect_relationship.relating_shape_aspect, 
       SELF\shape_aspect_relationship.related_shape_aspect;
WHERE
  WR1: SELF\shape_aspect.product_definitional = FALSE;
END_ENTITY; 

ENTITY part_feature_template_definition
 SUBTYPE OF (shape_feature_definition, group);
 WHERE
   WR1: SELF\group.name = SELF\characterized_object.name;
   WR2: SELF\group.description = SELF\characterized_object.description;
END_ENTITY;
	
ENTITY physical_unit
 SUBTYPE OF (product_definition, product_definition_shape);
  DERIVE
    SELF\property_definition.definition : characterized_definition := SELF;
  WHERE
    WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +'NAME_ATTRIBUTE.NAMED_ITEM')) = 0;
    WR2: NOT EXISTS(SELF\property_definition.description);
END_ENTITY;

ENTITY usage_view_connection_zone_terminal_shape_relationship
  SUBTYPE OF (representation, representation_relationship_with_transformation);
    SELF\representation_relationship.rep_1 : shape_representation;
    SELF\representation_relationship.rep_2 : shape_representation;    
UNIQUE
  UR1: SELF\representation_relationship.rep_1, SELF\representation_relationship.rep_2;
WHERE
  WR1: SELF\representation_relationship.rep_1 <> 
       SELF\representation_relationship.rep_2;
END_ENTITY; 

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4147 - ISO/TS 10303-1733 Planned characteristic - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3544
*)


SCHEMA Planned_characteristic_mim;
	USE FROM Production_rule_mim;	-- ISO/TS 10303-1739
	
	USE FROM Requirement_assignment_mim;	-- ISO/TS 10303-1233
	
	USE FROM Representation_schema(representation_relationship_with_transformation);
	
ENTITY evaluated_characteristic
  SUBTYPE OF (representation, representation_relationship);
UNIQUE
  UR1: SELF\representation_relationship.rep_1, SELF\representation_relationship.rep_2;
WHERE
  WR1: SELF\representation_relationship.rep_1 <> 
       SELF\representation_relationship.rep_2;
END_ENTITY; 

ENTITY evaluation_product_definition
 SUBTYPE OF (product_definition);
END_ENTITY;
	
END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4291 - ISO/TS 10303-1291 Plib class reference - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N3240
*) 


SCHEMA Plib_class_reference_mim;

USE FROM External_class_mim;    -- ISO/TS 10303-1275

USE FROM External_item_identification_assignment_mim;    -- ISO/TS 10303-1128

USE FROM external_reference_schema   -- ISO 10303-41
  (external_source,
   pre_defined_item); 

USE FROM Person_organization_assignment_mim;    -- ISO/TS 10303-1013


TYPE plib_class_identification_item = SELECT BASED_ON external_identification_item WITH 
   (externally_defined_class);
END_TYPE; 

TYPE plib_class_organization_item = SELECT BASED_ON organization_item WITH 
   (class);
END_TYPE; 

ENTITY known_source
  SUBTYPE OF (external_source, pre_defined_item);
END_ENTITY;

END_SCHEMA;  -- Plib_class_reference_mim

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4153 - ISO/TS 10303-1735 Pre defined datum 2d symbol - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3550
*)


SCHEMA Pre_defined_datum_2d_symbol_mim;
	USE FROM Extended_geometric_tolerance_mim;	-- ISO/TS 10303-1666
	USE FROM Layered_2d_shape_mim;	-- ISO/TS 10303-1693
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4156 - ISO/TS 10303-1736 Pre defined datum 3d symbol - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3556
*)


SCHEMA Pre_defined_datum_3d_symbol_mim;
	USE FROM Extended_geometric_tolerance_mim;	-- ISO/TS 10303-1666
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4150 - ISO/TS 10303-1734 Pre defined datum symbol - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3553
*)


SCHEMA Pre_defined_datum_symbol_mim;
	USE FROM Layered_3d_shape_mim;	-- ISO/TS 10303-1694
	USE FROM Pre_defined_datum_2d_symbol_mim;	-- ISO/TS 10303-1735
	USE FROM Pre_defined_datum_3d_symbol_mim;	-- ISO/TS 10303-1736

SUBTYPE_CONSTRAINT pdds_shape_definition_3d_intersection_subtypes FOR shape_definition_3d_intersection;         
  (ONEOF (pre_defined_parallel_datum_axis_symbol_3d_2d_relationship,
          pre_defined_perpendicular_datum_axis_symbol_3d_2d_relationship,
          pre_defined_perpendicular_datum_plane_symbol_3d_2d_relationship));
END_SUBTYPE_CONSTRAINT;        
	
ENTITY pre_defined_parallel_datum_axis_symbol_3d_2d_relationship
  SUBTYPE OF (shape_definition_3d_intersection);
END_ENTITY; 

ENTITY pre_defined_perpendicular_datum_axis_symbol_3d_2d_relationship
  SUBTYPE OF (shape_definition_3d_intersection);
END_ENTITY; 

ENTITY pre_defined_perpendicular_datum_plane_symbol_3d_2d_relationship
  SUBTYPE OF (shape_definition_3d_intersection);
END_ENTITY; 
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4225 - ISO/TS 10303-1760 Pre defined product data management specializations - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3692
*)
SCHEMA Pre_defined_product_data_management_specializations_mim;

USE FROM Activity_mim; -- ISO/TS 10303-1047
USE FROM Approval_mim; -- ISO/TS 10303-1012
USE FROM Date_time_assignment_mim; -- ISO/TS 10303-1014
USE FROM External_item_identification_assignment_mim; -- ISO/TS 10303-1128
USE FROM Person_organization_assignment_mim; -- ISO/TS 10303-1013
USE FROM Security_classification_mim; -- ISO/TS 10303-1015
USE FROM Work_request_mim; -- ISO/TS 10303-1042

TYPE pdpdms_person_and_organization_item = EXTENSIBLE SELECT BASED_ON person_and_organization_item WITH
  (person_and_organization);
END_TYPE;

TYPE pdpdms_external_identification_item = EXTENSIBLE SELECT BASED_ON external_identification_item WITH
  (action_relationship,
  action_request_status,
  applied_organization_assignment,
  applied_person_and_organization_assignment,
  approval,
  approval_status,
  date_assignment,
  date_and_time_assignment,
  organizational_address,
  security_classification,
  versioned_action_request);
END_TYPE;

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4159 - ISO/TS 10303-1737 Printed physical layout template - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3583
*)


SCHEMA Printed_physical_layout_template_mim;
	USE FROM Extended_geometric_tolerance_mim;	-- ISO/TS 10303-1666
	USE FROM Functional_usage_view_mim;	-- ISO/TS 10303-1705
    USE FROM Part_template_2d_shape_mim; -- ISO/TS 10303-1716	

TYPE pplt_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
     (printed_part_template_terminal);
END_TYPE;

SUBTYPE_CONSTRAINT pplt_part_template_definition_subtypes FOR part_template_definition; 
	ONEOF (Printed_part_template,
	 Non_conductive_cross_section_template);
END_SUBTYPE_CONSTRAINT;

ENTITY basic_multi_stratum_printed_part_template 
  SUBTYPE OF (printed_part_template);
END_ENTITY;

ENTITY multi_stratum_printed_part_template
  SUBTYPE OF (structured_printed_part_template, multi_stratum_structured_template);
END_ENTITY;

ENTITY non_conductive_cross_section_template
  SUBTYPE OF (part_template_definition);
END_ENTITY;

ENTITY printed_connector_template
  SUBTYPE OF (printed_part_template);
END_ENTITY;
	
ENTITY printed_connector_template_terminal_relationship
 SUBTYPE OF (shape_aspect, shape_aspect_relationship);
UNIQUE
  UR1: SELF\shape_aspect_relationship.relating_shape_aspect,
       SELF\shape_aspect_relationship.related_shape_aspect;
WHERE
  WR1: SELF\shape_aspect_relationship.relating_shape_aspect :<>:
       SELF\shape_aspect_relationship.related_shape_aspect;
END_ENTITY;

ENTITY printed_part_cross_section_template
  SUBTYPE OF (printed_part_template);
END_ENTITY;

ENTITY printed_part_cross_section_template_terminal
  SUBTYPE OF (printed_part_template_terminal);
END_ENTITY;

ENTITY printed_part_template
  ABSTRACT SUPERTYPE OF (ONEOF (basic_multi_stratum_printed_part_template,
    structured_printed_part_template) ANDOR printed_connector_template)
      SUBTYPE OF (part_template_definition);
END_ENTITY;

ENTITY printed_part_template_connected_terminals_definition
  SUBTYPE OF (shape_aspect);
UNIQUE
  UR1: SELF\shape_aspect.name;
END_ENTITY;

ENTITY printed_part_template_material
 SUBTYPE OF (product_definition);
END_ENTITY;

ENTITY printed_part_template_material_link
  SUBTYPE OF (shape_aspect,shape_aspect_relationship);
    SELF\shape_aspect_relationship.relating_shape_aspect : template_material_cross_section_boundary;  
    SELF\shape_aspect_relationship.related_shape_aspect  : template_material_cross_section_boundary;
UNIQUE
  UR1: SELF\shape_aspect_relationship.related_shape_aspect, 
       SELF\shape_aspect_relationship.relating_shape_aspect;
WHERE
  WR1: SELF\shape_aspect_relationship.related_shape_aspect :<>:
       SELF\shape_aspect_relationship.relating_shape_aspect;
END_ENTITY; 

ENTITY printed_part_template_terminal
  SUPERTYPE OF (printed_part_cross_section_template_terminal ANDOR structured_printed_part_template_terminal)
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY printed_part_template_terminal_connection_zone_category
   SUBTYPE OF (group);
END_ENTITY;

ENTITY single_stratum_printed_part_template
  SUBTYPE OF (structured_printed_part_template, single_stratum_structured_template);
END_ENTITY;
  
ENTITY structured_printed_part_template
  ABSTRACT SUPERTYPE OF (ONEOF (single_stratum_printed_part_template, 
    multi_stratum_printed_part_template))
  SUBTYPE OF (printed_part_template, structured_template);
END_ENTITY;  

ENTITY structured_printed_part_template_terminal
  SUBTYPE OF (printed_part_template_terminal);
END_ENTITY;  

ENTITY template_material_cross_section_boundary
  SUBTYPE OF (shape_aspect);
END_ENTITY;
	
END_SCHEMA;


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2126 - ISO/TS 10303-1040 Process property assignment - EXPRESS MIM
*)

SCHEMA Process_property_assignment_mim; 

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM Activity_mim;    -- ISO/TS 10303-1047

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM Independent_property_mim;    -- ISO/TS 10303-1036

USE FROM process_property_representation_schema   -- ISO 10303-49
  (action_property_representation); 

USE FROM process_property_schema   -- ISO 10303-49
  (action_property,
   characterized_action_definition); 

USE FROM product_property_definition_schema   -- ISO 10303-41
  (derived_property_select,
   general_property_association); 


END_SCHEMA;  -- Process_property_assignment_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N1100 - ISO/TS 10303-1016 Product categorization - EXPRESS MIM
*) 


SCHEMA Product_categorization_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute,
   id_attribute_select); 

USE FROM product_definition_schema   -- ISO 10303-41
  (product_category,
   product_category_relationship); 


END_SCHEMA;  -- Product_categorization_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2641 - ISO/TS 10303-1103 Product class - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1587
*)

SCHEMA Product_class_mim;

USE FROM Identification_assignment_mim;

USE FROM Product_concept_identification_mim;

USE FROM Group_mim;

USE FROM product_concept_schema(
	conditional_concept_feature,
	product_concept_relationship,
	product_concept_feature,
	product_concept_feature_association,
	concept_feature_operator);

USE FROM product_property_definition_schema(
	characterized_object);

TYPE category_usage_item = SELECT (product_class);
END_TYPE;

TYPE id_for_class = SELECT BASED_ON identification_item WITH (
	product_class, 
	product_concept_feature);
END_TYPE;

TYPE version_for_class = SELECT BASED_ON versionable_item WITH (
	product_class, 
	product_concept_feature);
END_TYPE;

TYPE specification_for_category = SELECT BASED_ON groupable_item WITH (
	package_product_concept_feature,
	product_concept_feature);
END_TYPE;

ENTITY exclusive_product_concept_feature_category
  SUBTYPE OF (product_concept_feature_category);
END_ENTITY;

ENTITY inclusion_product_concept_feature
	SUBTYPE OF (conditional_concept_feature);
	WHERE
		WR1: NOT ( 'PRODUCT_CLASS_MIM.' + 'PACKAGE_PRODUCT_CONCEPT_FEATURE' IN TYPEOF ( SELF ) ) ;
		WR2: SIZEOF (QUERY
									( cfr <* USEDIN 
											( SELF ,'PRODUCT_CONCEPT_SCHEMA.' + 'CONCEPT_FEATURE_RELATIONSHIP.RELATING_PRODUCT_CONCEPT_FEATURE' ) 
											| 
											'PRODUCT_CONCEPT_SCHEMA.'+ 'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION' IN TYPEOF( cfr ) 
									) 
								) + 
				 SIZEOF(QUERY
				 					( cfr <* USEDIN 
				 							(SELF , 'PRODUCT_CONCEPT_SCHEMA.' + 'CONCEPT_FEATURE_RELATIONSHIP.RELATED_PRODUCT_CONCEPT_FEATURE' ) 
				 							| 
											'PRODUCT_CONCEPT_SCHEMA.' + 'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION' IN TYPEOF(cfr)
									)
								)= 0;
		WR3: SELF.condition.conditional_operator.name = 'implication';
END_ENTITY;

ENTITY package_product_concept_feature
	SUBTYPE OF (product_concept_feature);
WHERE
	WR1: NOT ( 'PRODUCT_CONCEPT_SCHEMA.' + 'CONDITIONAL_CONCEPT_FEATURE' IN TYPEOF ( SELF ) ) ;
	WR2: SIZEOF ( QUERY 
									( 
										cfr <* USEDIN ( SELF , 'PRODUCT_CONCEPT_SCHEMA.' + 'CONCEPT_FEATURE_RELATIONSHIP.' +'RELATING_PRODUCT_CONCEPT_FEATURE' ) 
										| 
										('PRODUCT_CONCEPT_SCHEMA.' + 'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION' IN TYPEOF (cfr ) ) 
										AND 
										( SIZEOF ( QUERY 
																( 
																	ipcf <* USEDIN ( cfr , 'PRODUCT_CONCEPT_SCHEMA.' + 'CONDITIONAL_CONCEPT_FEATURE.' +	'CONDITION' ) 
																	| 
																	'PRODUCT_CLASS_MIM.' + 'INCLUSION_PRODUCT_CONCEPT_FEATURE' IN TYPEOF ( ipcf ) 
																)
															)= 1 
										)
									)
							)>0;
END_ENTITY;
					
ENTITY product_class
  SUBTYPE OF (product_concept,characterized_object);
END_ENTITY;

ENTITY product_concept_feature_category
  SUBTYPE OF (group);
WHERE
	WR1 : SIZEOF(QUERY
									( 
										aga <* USEDIN( SELF, 'MANAGEMENT_RESOURCES_SCHEMA.' + 'GROUP_ASSIGNMENT.ASSIGNED_GROUP' ) 
										|
     								('GROUP_MIM.'+ 'APPLIED_GROUP_ASSIGNMENT' IN TYPEOF(aga)) 
     								AND
    								(
    									( aga.role.name <> 'specification category member' ) 
    									OR 
    									( SIZEOF(QUERY 
    															( 
    																i <* aga.items 
    																| 
    																('PRODUCT_CONCEPT_SCHEMA.'+ 'PRODUCT_CONCEPT_FEATURE' IN TYPEOF ( i ) ) 
    																AND 
    																NOT ('PRODUCT_CONCEPT_SCHEMA.'+ 'CONDITIONAL_CONCEPT_FEATURE' IN TYPEOF (i))
    															)
    													) <> SIZEOF (aga.items)
    									)
    								) 
       						) 
       				) =0;
END_ENTITY;

ENTITY product_concept_feature_category_usage
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : product_concept_feature_category;
  items : SET [1:?] OF category_usage_item;
WHERE
WR1 : SELF.role.name IN [ 'mandatory category usage', 'optional category usage' ];
END_ENTITY;

RULE restrict_concept_feature_operator FOR (concept_feature_operator);
WHERE
	WR1: SIZEOF ( QUERY ( cfo <* concept_feature_operator | NOT
		( cfo.name IN ['and' , 'or' , 'oneof' , 'not' , 'implication'] ) ) ) = 0;
	WR2: SIZEOF ( QUERY ( cfo <* concept_feature_operator | (cfo.name = 'implication' ) AND
	 ( SIZEOF ( QUERY (cfrwc <* USEDIN ( cfo , 'PRODUCT_CONCEPT_SCHEMA.' + 'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION.' +
	'CONDITIONAL_OPERATOR' ) | 
		SIZEOF ( QUERY ( ccf <* USEDIN( cfrwc , 'PRODUCT_CONCEPT_SCHEMA.' + 'CONDITIONAL_CONCEPT_FEATURE.CONDITION' ) | 
		NOT ('PRODUCT_CLASS_MIM.' + 'INCLUSION_PRODUCT_CONCEPT_FEATURE' IN TYPEOF ( ccf )))) >0 )) >0 ))) = 0;
	WR3: SIZEOF( QUERY (cfo <* concept_feature_operator | (cfo.name = 'not')
	AND (SIZEOF(QUERY(cfrwc <* USEDIN(cfo, 'PRODUCT_CONCEPT_SCHEMA.' + 'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION.CONDITIONAL_OPERATOR') | 
		cfrwc.related_product_concept_feature :<>: cfrwc.relating_product_concept_feature)) >0 ))) = 0;
END_RULE;	

RULE restrict_group_relationship_for_specification_category FOR (group_relationship); 
WHERE 
WR1 : SIZEOF( QUERY( gr <* group_relationship | 
  (gr.name = 'specification category hierarchy') AND 
  (NOT('PRODUCT_CLASS_MIM.PRODUCT_CONCEPT_FEATURE_CATEGORY' IN TYPEOF(gr.related_group)) 
  OR NOT('PRODUCT_CLASS_MIM.PRODUCT_CONCEPT_FEATURE_CATEGORY' IN TYPEOF(gr.relating_group))) )) = 0; 
END_RULE; 

RULE product_concept_feature_requires_category FOR (product_concept_feature);
WHERE
WR1: SIZEOF ( QUERY ( pcf <* product_concept_feature |
(SIZEOF(['PRODUCT_CLASS_MIM.' + 'INCLUSION_PRODUCT_CONCEPT_FEATURE',
'PRODUCT_CONCEPT_SCHEMA.' + 'CONDITIONAL_CONCEPT_FEATURE'] * TYPEOF(pcf)) = 0) AND 
(SIZEOF ( QUERY ( aga <* USEDIN ( pcf , 'GROUP_MIM.' + 'APPLIED_GROUP_ASSIGNMENT.' + 'ITEMS' ) | 
( aga.role.name = 'specification category member' ) AND 
('PRODUCT_CLASS_MIM.' + 'PRODUCT_CONCEPT_FEATURE_CATEGORY' IN TYPEOF ( aga.assigned_group )))) <>1 ) ) ) = 0;
END_RULE;

END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1178 - ISO/TS 10303-1060 Product concept identification - EXPRESS MIM
*)
   
SCHEMA Product_concept_identification_mim;

USE FROM product_concept_schema -- ISO 10303-44
  (product_concept);
USE FROM application_context_schema -- ISO 10303-41
  (product_concept_context);

   
END_SCHEMA;

(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG3 N1880 - ISO/TS 10303-1231 Product data management - EXPRESS MIM
Supersedes ISO TC184/SC4/WG3 N1487
*) 


SCHEMA Product_data_management_mim;

USE FROM action_schema   -- ISO 10303-41
  (action,
   action_directive,
   action_method,
   action_relationship,
   action_request_solution,
   action_request_status,
   directed_action,
   executed_action,
   versioned_action_request); 

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM Activity_mim;    -- ISO/TS 10303-1047

USE FROM application_context_schema   -- ISO 10303-41
  (application_context_relationship,
   application_protocol_definition,
   product_definition_context); 

USE FROM Approval_mim;    -- ISO/TS 10303-1012

USE FROM approval_schema   -- ISO 10303-41
  (approval,
   approval_person_organization,
   approval_relationship,
   approval_status); 

USE FROM Assembly_structure_mim;    -- ISO/TS 10303-1026

USE FROM basic_attribute_schema   -- ISO 10303-41
  (object_role); 

USE FROM Certification_mim;    -- ISO/TS 10303-1044

USE FROM certification_schema   -- ISO 10303-41
  (certification,
   certification_type); 

USE FROM Class_mim;    -- ISO/TS 10303-1070

USE FROM Classification_assignment_mim;    -- ISO/TS 10303-1114

USE FROM classification_schema   -- ISO 10303-54
  (class); 

USE FROM Configuration_effectivity_mim;    -- ISO/TS 10303-1058

USE FROM Configuration_item_mim;    -- ISO/TS 10303-1056

USE FROM configuration_management_schema   -- ISO 10303-44
  (configuration_effectivity,
   configuration_item); 

USE FROM Contract_mim;    -- ISO/TS 10303-1062

USE FROM contract_schema   -- ISO 10303-41
  (contract); 

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM Date_time_mim;    -- ISO/TS 10303-1010

USE FROM date_time_schema   -- ISO 10303-41
  (calendar_date,
   date_and_time,
   date_role,
   date_time_role,
   event_occurrence); 

USE FROM Document_assignment_mim;    -- ISO/TS 10303-1122

USE FROM Document_management_mim;    -- ISO/TS 10303-1290

USE FROM document_schema   -- ISO 10303-41
  (document_relationship); 

USE FROM Document_structure_mim;    -- ISO/TS 10303-1124

USE FROM Effectivity_application_mim;    -- ISO/TS 10303-1059

USE FROM Effectivity_mim;    -- ISO/TS 10303-1057

USE FROM effectivity_schema   -- ISO 10303-41
  (effectivity); 

USE FROM Event_assignment_mim;    -- ISO/TS 10303-1364

USE FROM Event_mim;    -- ISO/TS 10303-1064

USE FROM External_class_mim;    -- ISO/TS 10303-1275

USE FROM External_item_identification_assignment_mim;    -- ISO/TS 10303-1128

USE FROM External_model_mim;    -- ISO/TS 10303-1033

USE FROM external_reference_schema   -- ISO 10303-41
  (external_source); 

USE FROM File_identification_mim;    -- ISO/TS 10303-1127

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM group_schema   -- ISO 10303-41
  (group); 

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

USE FROM Incomplete_data_reference_mechanism_mim;    -- ISO/TS 10303-1349

USE FROM Independent_property_mim;    -- ISO/TS 10303-1036

USE FROM Independent_property_representation_mim;    -- ISO/TS 10303-1038

USE FROM Management_resource_information_mim;    -- ISO/TS 10303-1288

USE FROM management_resources_schema   -- ISO 10303-41
  (date_and_time_assignment,
   date_assignment,
   document_usage_role,
   identification_assignment,
   identification_role,
   organizational_project_role); 

USE FROM Measure_representation_mim;    -- ISO/TS 10303-1118

USE FROM measure_schema   -- ISO 10303-41
  (context_dependent_unit,
   conversion_based_unit,
   derived_unit,
   measure_with_unit,
   named_unit); 

USE FROM Multi_linguism_mim;    -- ISO/TS 10303-1105

USE FROM Name_assignment_mim;    -- ISO/TS 10303-1340

USE FROM Part_definition_relationship_mim;    -- ISO/TS 10303-1055

USE FROM Person_organization_assignment_mim;    -- ISO/TS 10303-1013

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011

USE FROM person_organization_schema   -- ISO 10303-41
  (address,
   organization,
   organization_relationship,
   organizational_address,
   organizational_project,
   organizational_project_relationship,
   person,
   person_and_organization); 

USE FROM Process_property_assignment_mim;    -- ISO/TS 10303-1040

USE FROM process_property_schema   -- ISO 10303-49
  (action_property); 

USE FROM Product_categorization_mim;    -- ISO/TS 10303-1016

USE FROM Product_concept_identification_mim;    -- ISO/TS 10303-1060

USE FROM product_concept_schema   -- ISO 10303-44
  (product_concept); 

USE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_category,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_formation_with_specified_source,
   product_definition_relationship); 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM product_property_definition_schema   -- ISO 10303-41
  (general_property,
   general_property_relationship,
   property_definition,
   shape_aspect,
   shape_aspect_relationship); 

USE FROM product_property_representation_schema   -- ISO 10303-41
  (property_definition_representation); 

USE FROM Product_replacement_mim;    -- ISO/TS 10303-1046

USE FROM Product_structure_mim;    -- ISO/TS 10303-1134

USE FROM product_structure_schema   -- ISO 10303-44
  (alternate_product_relationship,
   assembly_component_usage,
   assembly_component_usage_substitute); 

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Product_version_relationship_mim;    -- ISO/TS 10303-1020

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Product_view_definition_properties_mim;    -- ISO/TS 10303-1034

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041

USE FROM Project_mim;    -- ISO/TS 10303-1061

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

USE FROM qualified_measure_schema   -- ISO 10303-45
  (descriptive_representation_item,
   measure_representation_item); 

USE FROM representation_schema   -- ISO 10303-43
  (founded_item,
   representation,
   representation_context,
   representation_item,
   uncertainty_measure_with_unit); 

USE FROM Security_classification_mim;    -- ISO/TS 10303-1015

USE FROM security_classification_schema   -- ISO 10303-41
  (security_classification); 

USE FROM Shape_property_assignment_mim;    -- ISO/TS 10303-1032

USE FROM Single_part_representation_mim;    -- ISO/TS 10303-1133

USE FROM Time_interval_assignment_mim;    -- ISO/TS 10303-1365

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054

USE FROM Work_order_mim;    -- ISO/TS 10303-1043

USE FROM Work_request_mim;    -- ISO/TS 10303-1042


TYPE pdm_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH 
   (configuration_effectivity, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE pdm_action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_request_item WITH 
   (product_definition, 
    product_definition_formation, 
    product_definition_relationship, 
    property_definition);
END_TYPE; 

TYPE pdm_approval_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON approval_item WITH 
   (action, 
    applied_action_assignment, 
    configuration_effectivity, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_attribute_language_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON attribute_language_item WITH 
   (applied_document_reference, 
    applied_document_usage_constraint_assignment, 
    applied_external_identification_assignment, 
    applied_organizational_project_assignment, 
    approval, 
    approval_relationship, 
    approval_status, 
    certification, 
    certification_type, 
    contract, 
    date_role, 
    date_time_role, 
    document_relationship, 
    document_usage_role, 
    external_source, 
    identification_role, 
    object_role, 
    organization_relationship, 
    organizational_project, 
    organizational_project_relationship, 
    organizational_project_role, 
    person_and_organization, 
    product, 
    product_category, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE pdm_certification_item = EXTENSIBLE SELECT BASED_ON certification_item WITH 
   (product_definition_formation_relationship);
END_TYPE; 

TYPE pdm_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (action, 
    action_directive, 
    action_method, 
    action_property, 
    action_relationship, 
    action_request_solution, 
    action_request_status, 
    address, 
    alternate_product_relationship, 
    applied_action_assignment, 
    applied_action_request_assignment, 
    applied_approval_assignment, 
    applied_certification_assignment, 
    applied_contract_assignment, 
    applied_date_and_time_assignment, 
    applied_date_assignment, 
    applied_document_reference, 
    applied_document_usage_constraint_assignment, 
    applied_effectivity_assignment, 
    applied_event_occurrence_assignment, 
    applied_external_identification_assignment, 
    applied_identification_assignment, 
    applied_organization_assignment, 
    applied_organizational_project_assignment, 
    applied_person_and_organization_assignment, 
    applied_security_classification_assignment, 
    approval, 
    approval_person_organization, 
    approval_relationship, 
    approval_status, 
    assembly_component_usage_substitute, 
    calendar_date, 
    certification, 
    class, 
    configuration_item, 
    context_dependent_unit, 
    contract, 
    conversion_based_unit, 
    date_and_time, 
    date_and_time_assignment, 
    date_assignment, 
    derived_unit, 
    descriptive_representation_item, 
    directed_action, 
    document_file, 
    document_relationship, 
    effectivity, 
    event_occurrence, 
    executed_action, 
    general_property, 
    general_property_relationship, 
    group, 
    identification_assignment, 
    language, 
    measure_representation_item, 
    measure_with_unit, 
    multi_language_attribute_assignment, 
    named_unit, 
    organization, 
    organization_relationship, 
    organizational_address, 
    organizational_project, 
    organizational_project_relationship, 
    person, 
    person_and_organization_address, 
    product, 
    product_category, 
    product_concept, 
    product_definition, 
    product_definition_context, 
    product_definition_formation, 
    product_definition_formation_relationship, 
    product_definition_relationship, 
    property_definition, 
    property_definition_representation, 
    representation, 
    representation_context, 
    representation_item, 
    security_classification, 
    uncertainty_measure_with_unit, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH 
   (action, 
    applied_action_assignment, 
    executed_action, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_date_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_item WITH 
   (action, 
    applied_action_assignment, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
   (action_method, 
    executed_action, 
    product_definition_formation_relationship, 
    shape_aspect, 
    shape_aspect_relationship, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_effectivity_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON effectivity_item WITH 
   (product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE pdm_event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON event_occurrence_item WITH 
   (organizational_project);
END_TYPE; 

TYPE pdm_external_class_name_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON name_item WITH 
   (assembly_component_usage, 
    external_class_library);
END_TYPE; 

TYPE pdm_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH 
   (shape_aspect_relationship);
END_TYPE; 

TYPE pdm_multi_language_attribute_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON multi_language_attribute_item WITH 
   (applied_document_reference, 
    applied_document_usage_constraint_assignment, 
    applied_external_identification_assignment, 
    applied_organizational_project_assignment, 
    approval, 
    approval_relationship, 
    approval_status, 
    certification, 
    certification_type, 
    contract, 
    date_role, 
    date_time_role, 
    document_relationship, 
    document_usage_role, 
    external_source, 
    identification_role, 
    object_role, 
    organization_relationship, 
    organizational_project, 
    organizational_project_relationship, 
    organizational_project_role, 
    person_and_organization, 
    product, 
    product_category, 
    product_definition, 
    product_definition_formation, 
    product_definition_relationship);
END_TYPE; 

TYPE pdm_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH 
   (action, 
    applied_action_assignment, 
    approval, 
    configuration_item, 
    contract, 
    executed_action, 
    security_classification, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH 
   (action, 
    applied_action_assignment, 
    approval, 
    configuration_item, 
    contract, 
    executed_action, 
    security_classification, 
    versioned_action_request);
END_TYPE; 

TYPE pdm_project_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON project_item WITH 
   (executed_action, 
    product_concept);
END_TYPE; 

TYPE pdm_security_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON security_classification_item WITH 
   (assembly_component_usage);
END_TYPE; 

TYPE pdm_time_interval_item = EXTENSIBLE SELECT BASED_ON time_interval_item WITH 
   (action);
END_TYPE; 

END_SCHEMA;  -- Product_data_management_mim
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2926 - ISO/TS 10303-1017 Product identification - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N1103
*) 


SCHEMA Product_identification_mim; 

USE FROM Product_categorization_mim;    -- ISO/TS 10303-1016

USE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_related_product_category); 


END_SCHEMA;  -- Product_identification_mim




(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4162 - ISO/TS 10303-1738 Product identification extension - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3586
*)


SCHEMA Product_identification_extension_mim;
	USE FROM External_item_identification_assignment_mim;	-- ISO/TS 10303-1128
	USE FROM Product_view_definition_mim;	-- ISO/TS 10303-1019
	
	USE FROM External_reference_schema
		(externally_defined_item,
		external_source);
	
TYPE pie_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH 
     (externally_defined_product_definition);
END_TYPE; 

ENTITY externally_defined_product_definition
 SUPERTYPE OF (library_defined_product_definition)
 SUBTYPE OF (product_definition, externally_defined_item);
END_ENTITY;

ENTITY library_defined_product_definition
 SUBTYPE OF (externally_defined_product_definition);
DERIVE
  library : external_source := SELF\externally_defined_item.source;
END_ENTITY;
	
END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4361 - ISO/TS 10303-1046 Product replacement - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1145
*)
    
SCHEMA Product_replacement_mim;

USE FROM Assembly_structure_mim; -- ISO 10303-1026
USE FROM Product_identification_mim; -- ISO 10303-1017

USE FROM product_structure_schema -- ISO 10303-44
  (alternate_product_relationship,
   assembly_component_usage_substitute);
END_SCHEMA;




(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2547 - ISO/TS 10303-1134 Product structure - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N1671
*) 


SCHEMA Product_structure_mim;

USE FROM Assembly_structure_mim;    -- ISO/TS 10303-1026

USE FROM Contextual_shape_positioning_mim;    -- ISO/TS 10303-1027

USE FROM Part_and_version_identification_mim;    -- ISO/TS 10303-1022

USE FROM Part_definition_relationship_mim;    -- ISO/TS 10303-1055

USE FROM Product_replacement_mim;    -- ISO/TS 10303-1046

USE FROM Product_version_relationship_mim;    -- ISO/TS 10303-1020

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

USE FROM Single_part_representation_mim;    -- ISO/TS 10303-1133

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set); 


END_SCHEMA;  -- Product_structure_mim
(* 
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2528 - ISO/TS 10303-1018 Product version - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1106
*) 


SCHEMA Product_version_mim; 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM product_definition_schema   -- ISO 10303-41
  (product_definition_formation); 


END_SCHEMA;  -- Product_version_mim

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4355 - ISO/TS 10303-1020 Product version relationship - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1130
*)
   
SCHEMA Product_version_relationship_mim;

USE FROM Product_version_mim; 	--ISO 10303-1018

USE FROM product_definition_schema 	-- ISO 10303-41
  (product_definition_formation_relationship);
   
END_SCHEMA;


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4352 - ISO/TS 10303-1019 Product view definition - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2928
*) 


SCHEMA Product_view_definition_mim;

USE FROM application_context_schema   -- ISO 10303-41
  (product_definition_context); 

USE FROM basic_attribute_schema   -- ISO 10303-41
  (name_attribute,
   name_attribute_select); 

USE FROM product_definition_schema   -- ISO 10303-41
  (product_definition,
   product_definition_context_association); 

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set); 


END_SCHEMA;  -- Product_view_definition_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N3228 - ISO/TS 10303-1034 Product view definition properties - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N2127
*) 


SCHEMA Product_view_definition_properties_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute,
   id_attribute_select); 

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_product_definition); 

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030


END_SCHEMA;  -- Product_view_definition_properties_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1142 - ISO/TS 10303-1041 Product view definition relationship - EXPRESS MIM
*)

SCHEMA Product_view_definition_relationship_mim;

USE FROM Product_view_definition_mim; -- ISO 10303-1019
USE FROM product_definition_schema -- ISO 10303-41
  (product_definition_relationship);

USE FROM product_structure_schema -- ISO 10303-44
  (product_definition_usage);
END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4165 - ISO/TS 10303-1739 Production rule - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3589
*)


SCHEMA Production_rule_mim;
	USE FROM Specification_document_mim;    --  ISO/TS 10303-1747
	USE FROM Software_mim;	-- ISO/TS 10303-1746
	USE FROM Date_time_assignment_mim; -- ISO/TS 10303-1014
    USE FROM Identification_assignment_mim;
    USE FROM Product_identification_mim;
   	USE FROM Activity_mim; -- ISO/TS 10303-1047
	
	USE FROM product_definition_schema(product_definition_relationship);
	
	USE FROM representation_schema(representation_item_relationship);
	
	USE FROM product_property_definition_schema(property_definition); 

	USE FROM product_property_representation_schema(property_definition_representation); 
	

TYPE pr_action_items = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON action_items WITH 
     (product_definition_formation);
END_TYPE; 

TYPE pr_date_and_time_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON date_and_time_item WITH 
     (rule_action);
END_TYPE; 

TYPE pr_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
   (rule_set);
END_TYPE; 

TYPE pr_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON identification_item WITH
  (rule_set);
END_TYPE;  

TYPE pr_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON organization_item WITH 
   (rule_action);
END_TYPE; 

TYPE pr_person_and_organization_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON person_and_organization_item WITH 
   (rule_action);
END_TYPE; 

TYPE rule_superseded_item = SELECT
     (product_definition_formation);
END_TYPE;

ENTITY abstract_variable
  SUBTYPE OF (property_definition, property_definition_representation, representation, representation_item);
END_ENTITY;  

ENTITY atomic_formula
  SUBTYPE OF (compound_representation_item);
END_ENTITY;    

ENTITY attribute_assertion
  SUBTYPE OF (fact_type, property_definition_representation, representation);
END_ENTITY;  

ENTITY back_chaining_rule  
  SUBTYPE OF (rule_definition);
END_ENTITY;  
								  
ENTITY back_chaining_rule_body 
  SUBTYPE OF (property_definition, property_definition_representation, representation);
END_ENTITY;

ENTITY complex_clause
  SUBTYPE OF (compound_representation_item);
END_ENTITY;

ENTITY complex_conjunctive_clause
  SUBTYPE OF (complex_clause);
END_ENTITY;

ENTITY complex_disjunctive_clause
  SUBTYPE OF (complex_clause);
END_ENTITY;

ENTITY entity_assertion
  SUBTYPE OF (fact_type);
END_ENTITY;

ENTITY enum_reference_prefix  
  SUBTYPE OF (descriptive_representation_item);
END_ENTITY;

ENTITY extent
  SUBTYPE OF (characterized_object);
END_ENTITY;

ENTITY fact_type
  SUBTYPE OF (property_definition);
END_ENTITY;

ENTITY forward_chaining_rule
  SUBTYPE OF (rule_definition);
END_ENTITY;
				
ENTITY forward_chaining_rule_premise 
  SUBTYPE OF (property_definition, property_definition_representation, representation);
END_ENTITY;

ENTITY func
  SUBTYPE OF (compound_representation_item);
END_ENTITY;

ENTITY global_assignment
  SUBTYPE OF (representation_item_relationship);
END_ENTITY; 

ENTITY ground_fact
  SUBTYPE OF (atomic_formula);
END_ENTITY;

ENTITY literal_conjunction
  SUBTYPE OF (simple_clause);
END_ENTITY;  

ENTITY literal_disjunction
  SUBTYPE OF (simple_clause);
END_ENTITY;  

ENTITY row_value
  SUBTYPE OF (compound_representation_item);
END_ENTITY;

ENTITY row_variable
  SUBTYPE OF (abstract_variable);
END_ENTITY;
																								
ENTITY rule_action
  SUBTYPE OF (action);
END_ENTITY;

ENTITY rule_condition
  SUBTYPE OF (atomic_formula);
END_ENTITY;  
					
ENTITY rule_definition 
 SUBTYPE OF (rule_software_definition);
END_ENTITY;

ENTITY rule_superseded_assignment
 SUBTYPE OF (action_assignment);
     items : SET [1:?] OF rule_superseded_item;
END_ENTITY;

ENTITY rule_set 
 SUBTYPE OF (rule_software_definition);
END_ENTITY;

ENTITY rule_software_definition 
 SUBTYPE OF (product_definition);
END_ENTITY;

ENTITY rule_set_group
SUBTYPE OF (rule_software_definition);
END_ENTITY;

ENTITY rule_supersedence
  SUBTYPE OF (rule_action);
END_ENTITY;

ENTITY scalar_variable
  SUBTYPE OF (abstract_variable);
END_ENTITY;
					
ENTITY simple_clause
  SUBTYPE OF (compound_representation_item);
END_ENTITY;
					
ENTITY symbol
  SUBTYPE OF (representation_item);
END_ENTITY;				
	
END_SCHEMA;


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4264 - ISO/TS 10303-1061 Project - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2112
*) 


SCHEMA Project_mim; 

USE FROM Date_time_assignment_mim;    -- ISO/TS 10303-1014

USE FROM Date_time_mim;    -- ISO/TS 10303-1010

USE FROM Event_assignment_mim;    -- ISO/TS 10303-1364

USE FROM Event_mim;    -- ISO/TS 10303-1064

USE FROM management_resources_schema   -- ISO 10303-41
  (organizational_project_assignment,
   organizational_project_role); 

USE FROM Person_organization_mim;    -- ISO/TS 10303-1011

USE FROM person_organization_schema   -- ISO 10303-41
  (organizational_project,
   organizational_project_relationship); 


TYPE project_as_date_and_time_item = SELECT BASED_ON date_and_time_item WITH 
   (organizational_project);
END_TYPE; 

TYPE project_as_date_item = SELECT BASED_ON date_item WITH 
   (organizational_project);
END_TYPE; 

TYPE project_event_occurrence_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON event_occurrence_item WITH 
   (organizational_project);
END_TYPE; 

TYPE project_item = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY applied_organizational_project_assignment
  SUBTYPE OF (organizational_project_assignment);
  items : SET[1:?] OF project_item;
END_ENTITY;

END_SCHEMA;  -- Project_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4375 - ISO/TS 10303-1030 Property assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2129
*) 


SCHEMA Property_assignment_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute,
   id_attribute_select); 

USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM Independent_property_mim;    -- ISO/TS 10303-1036

USE FROM product_property_definition_schema   -- ISO 10303-41
  (general_property_association,
   property_definition); 

USE FROM product_property_representation_schema   -- ISO 10303-41
  (property_definition_representation); 


END_SCHEMA;  -- Property_assignment_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N3125 - ISO/TS 10303-1233 Requirement assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2346
*) 


SCHEMA Requirement_assignment_mim;

USE FROM group_schema   -- ISO 10303-41
  (group); 

USE FROM management_resources_schema   -- ISO 10303-41
  (group_assignment); 

USE FROM product_definition_schema   -- ISO 10303-41
  (product_definition); 

USE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_object); 

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

USE FROM Requirement_view_definition_mim;    -- ISO/TS 10303-1141


TYPE requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

TYPE requirement_source_item = EXTENSIBLE GENERIC_ENTITY SELECT;
END_TYPE; 

ENTITY assigned_requirement
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : requirement_assignment;
  items : SET[1:1] OF product_definition;
END_ENTITY;

ENTITY requirement_assigned_object
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : requirement_assignment;
  items : SET[1:1] OF requirement_assigned_item;
END_ENTITY;

ENTITY requirement_assignment
  SUBTYPE OF (characterized_object, group);
END_ENTITY;

ENTITY requirement_source
  SUBTYPE OF (group);
END_ENTITY;

ENTITY source_for_requirement
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : requirement_source;
  items : SET[1:1] OF requirement_source_item;
END_ENTITY;

ENTITY sourced_requirement
  SUBTYPE OF (group_assignment);
  SELF\group_assignment.assigned_group : requirement_source;
  items : SET[1:1] OF product_definition;
END_ENTITY;

END_SCHEMA;  -- Requirement_assignment_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4168 - ISO/TS 10303-1740 Requirement decomposition - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3592
*)


SCHEMA Requirement_decomposition_mim;

	USE FROM Conductivity_material_aspects_mim;	-- ISO/TS 10303-1756
	USE FROM Elemental_geometric_shape_mim;	-- ISO/TS 10303-1004
	USE FROM Functional_specification_mim;	-- ISO/TS 10303-1679
	USE FROM Production_rule_mim;	-- ISO/TS 10303-1739
    USE FROM Requirement_view_definition_mim;    -- ISO/TS 10303-1141	
	
	USE FROM Material_property_definition_schema(property_definition_relationship);	

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set); 

SUBTYPE_CONSTRAINT rd_model_parameter_subtypes FOR model_parameter; 
	 ONEOF (analytical_model_parameter,
	 category_model_parameter);
END_SUBTYPE_CONSTRAINT;

TYPE rd_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
     (predefined_requirement_view_definition);
END_TYPE; 

TYPE rd_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
     (predefined_requirement_view_definition);
END_TYPE;

TYPE rd_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (group,
     group_relationship);
END_TYPE; 

ENTITY material_electrical_conductivity_category
  SUBTYPE OF (group);
END_ENTITY;

ENTITY operational_requirement_occurrence_relationship
  SUBTYPE OF (property_definition, product_definition_relationship);
END_ENTITY;

ENTITY predefined_requirement_view_definition
  SUBTYPE OF (product_definition);
END_ENTITY;

ENTITY requirement_view_definition_relationship
  SUBTYPE OF (product_definition_relationship);
END_ENTITY;

ENTITY requirement_definition
 SUBTYPE OF (product_definition);
END_ENTITY;
	
END_SCHEMA;


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N3128 - ISO/TS 10303-1140 Requirement identification and version - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2348
*) 


SCHEMA Requirement_identification_and_version_mim;

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

USE FROM Management_resource_information_mim;    -- ISO/TS 10303-1288

USE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_definition_formation); 

USE FROM Product_identification_mim;    -- ISO/TS 10303-1017

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Product_version_relationship_mim;    -- ISO/TS 10303-1020


TYPE requirement_identification_and_version_mri_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON mri_identification_item WITH 
   (product, 
    product_definition_formation);
END_TYPE; 

END_SCHEMA;  -- Requirement_identification_and_version_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4285 - ISO/TS 10303-1141 Requirement view definition - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N3134
*) 


SCHEMA Requirement_view_definition_mim;

USE FROM Identification_assignment_mim;    -- ISO/TS 10303-1021

USE FROM Product_version_mim;    -- ISO/TS 10303-1018

USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Requirement_identification_and_version_mim;    -- ISO/TS 10303-1140


END_SCHEMA;  -- Requirement_view_definition_mim


(* 
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N3137 - ISO/TS 10303-1142 Requirement view definition relationship - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N2358
*) 


SCHEMA Requirement_view_definition_relationship_mim;

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041

USE FROM Requirement_view_definition_mim;    -- ISO/TS 10303-1141


END_SCHEMA;  -- Requirement_view_definition_relationship_mim

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1097 - ISO/TS 10303-1015 Security classification - EXPRESS MIM
*)

SCHEMA Security_classification_mim;

USE FROM security_classification_schema -- ISO 10303-41
  (security_classification,
   security_classification_level);
USE FROM management_resources_schema -- ISO 10303-41
  (security_classification_assignment);
  
TYPE security_classification_item = EXTENSIBLE SELECT; 
END_TYPE;

ENTITY applied_security_classification_assignment
  SUBTYPE OF (security_classification_assignment);
  items : SET [1:?] OF security_classification_item;
END_ENTITY;

END_SCHEMA;






(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4171 - ISO/TS 10303-1741 Sequential laminate assembly design - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3595
*)


SCHEMA Sequential_laminate_assembly_design_mim;
	USE FROM Assembly_module_with_interconnect_component_mim;	-- ISO/TS 10303-1643
	USE FROM Layered_interconnect_module_design_mim;	-- ISO/TS 10303-1698


  TYPE slad_groupable_item = SELECT BASED_ON groupable_item WITH 
	(group_relationship,
	assembly_component_usage);
  END_TYPE; 
	
  TYPE slad_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
     (derived_laminate_assignment,
     next_assembly_usage_occurrence);
  END_TYPE; 

ENTITY derived_laminate_assignment
  SUBTYPE OF (product_definition, requirement_assignment);
END_ENTITY;

ENTITY interconnect_module_stratum_based_terminal
  SUBTYPE OF (interconnect_module_terminal);
END_ENTITY;

ENTITY sequential_laminate_passage_based_fabrication_joint
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY sequential_laminate_stackup_component 
  SUBTYPE OF(physical_component);
END_ENTITY;

ENTITY sequential_laminate_stackup_definition
  SUBTYPE OF(physical_unit);
END_ENTITY;
	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4174 - ISO/TS 10303-1742 Shape composition - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3598
*)


SCHEMA Shape_composition_mim;
	USE FROM Shape_property_assignment_mim;	-- ISO/TS 10303-1032
	
	USE FROM Shape_aspect_definition_schema(composite_shape_aspect);
--	USE FROM Product_property_definition_schema;
	USE FROM Shape_dimension_schema (dimensional_location);
	
ENTITY composite_group_shape_aspect
  SUBTYPE OF (composite_shape_aspect);
END_ENTITY;

ENTITY composite_unit_shape_aspect
  SUBTYPE OF (composite_shape_aspect);
END_ENTITY;

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4237 - ISO/TS 10303-1764 Shape feature - EXPRESS MIM
*)

SCHEMA Shape_feature_mim;
USE FROM Contextual_shape_positioning_mim;
USE FROM Property_assignment_mim;

ENTITY shape_feature_definition
  SUBTYPE OF (characterized_object);
END_ENTITY;

ENTITY instanced_feature
  SUBTYPE OF (shape_aspect,shape_feature_definition);
WHERE
  WR1:  'SHAPE_FEATURE_MIM.PRODUCT_DEFINITION' IN
         TYPEOF(SELF\shape_aspect.of_shape.definition);   
  WR2:  SELF\shape_aspect.product_definitional;   
END_ENTITY;

ENTITY placed_feature
  SUBTYPE OF (shape_aspect);
END_ENTITY;

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4177 - ISO/TS 10303-1743 Shape parameters - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3601
*)


SCHEMA Shape_parameters_mim;
	USE FROM External_item_identification_assignment_mim;	-- ISO/TS 10303-1128
	
	USE FROM Product_property_definition_schema(characterized_object);
	
ENTITY keepout_design_object_category
  SUBTYPE OF (characterized_object);
END_ENTITY;
	
END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N4358 - ISO/TS 10303-1032 Shape property assignment - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1226
*) 


SCHEMA Shape_property_assignment_mim;

USE FROM basic_attribute_schema   -- ISO 10303-41
  (id_attribute); 

USE FROM Elemental_geometric_shape_mim;    -- ISO/TS 10303-1004

USE FROM External_model_mim;    -- ISO/TS 10303-1033

-- USE FROM Foundation_representation_mim;    -- ISO/TS 10303-1006

USE FROM product_property_definition_schema   -- ISO 10303-41
  (product_definition_shape,
   shape_aspect,
   shape_aspect_relationship); 

USE FROM product_property_representation_schema   -- ISO 10303-41
  (shape_definition_representation); 

-- USE FROM Product_view_definition_mim;    -- ISO/TS 10303-1019

USE FROM Product_view_definition_relationship_mim;    -- ISO/TS 10303-1041

USE FROM Characterizable_object_mim;     -- ISO/TS 10303-xxxx	


END_SCHEMA;  -- Shape_property_assignment_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4183 - ISO/TS 10303-1745 Signal - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3607
*)


SCHEMA Signal_mim;
	USE FROM Characteristic_mim;	-- ISO/TS 10303-1654
	
	USE FROM Product_property_definition_schema
		(characterized_object,
		property_definition);
	USE FROM Material_property_definition_schema(property_definition_relationship);
	USE FROM Group_schema(group);
	USE FROM Document_schema(document_usage_constraint);
	
TYPE s_external_identification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON external_identification_item WITH 
     (composite_signal_property_relationship,
      property_definition,
      signal);
END_TYPE; 
	
ENTITY composite_signal_property_relationship
  SUBTYPE OF (property_definition, property_definition_relationship);
WHERE
  WR1: SELF\property_definition_relationship.related_property_definition.definition :<>:
       SELF\property_definition_relationship.relating_property_definition.definition;
END_ENTITY;

ENTITY signal
  SUBTYPE OF (characterized_object);
END_ENTITY;

ENTITY signal_category
  SUBTYPE OF (group);
END_ENTITY;
	
END_SCHEMA;


(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2544 - ISO/TS 10303-1133 Single part representation - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N1668
*) 


SCHEMA Single_part_representation_mim;

USE FROM Document_assignment_mim;    -- ISO/TS 10303-1122

USE FROM Extended_measure_representation_mim;    -- ISO/TS 10303-1106

USE FROM External_model_mim;    -- ISO/TS 10303-1033

USE FROM Part_and_version_identification_mim;    -- ISO/TS 10303-1022

USE FROM Part_view_definition_mim;    -- ISO/TS 10303-1023

USE FROM Person_organization_assignment_mim;    -- ISO/TS 10303-1013

USE FROM Product_categorization_mim;    -- ISO/TS 10303-1016

USE FROM Property_assignment_mim;    -- ISO/TS 10303-1030

USE FROM Shape_property_assignment_mim;    -- ISO/TS 10303-1032


TYPE spr_document_reference_item = SELECT BASED_ON document_reference_item WITH 
   (product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE spr_organization_item = EXTENSIBLE SELECT BASED_ON organization_item WITH 
   (product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

TYPE spr_person_and_organization_item = EXTENSIBLE SELECT BASED_ON person_and_organization_item WITH 
   (product, 
    product_definition, 
    product_definition_formation);
END_TYPE; 

FUNCTION categories_of_product
 (obj : product) : SET OF STRING; 
LOCAL
category_assignments: BAG OF product_category;
categories: SET OF STRING:=[];
i: INTEGER;
END_LOCAL;
category_assignments := USEDIN(obj, 'PRODUCT_DEFINITION_SCHEMA' + '.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS');
REPEAT i := LOINDEX(category_assignments) TO HIINDEX(category_assignments) BY 1;
categories := categories + category_assignments[i].name;
END_REPEAT;
RETURN(categories);
      END_FUNCTION; 

END_SCHEMA;  -- Single_part_representation_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4186 - ISO/TS 10303-1746 Software - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3610
*)


SCHEMA Software_mim;
	USE FROM Document_definition_mim;	-- ISO/TS 10303-1123
	USE FROM Product_identification_mim;	-- ISO/TS 10303-1017
	USE FROM Information_product_mim;	-- ISO/TS 10303-xxxx
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4189 - ISO/TS 10303-1747 Specification document - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3613
*)


SCHEMA Specification_document_mim;
	USE FROM Characteristic_mim;	-- ISO/TS 10303-1654
	USE FROM Configuration_item_mim;	-- ISO/TS 10303-1056
	USE FROM Tagged_text_representation_mim; -- ISO/TS 10303-1366
	USE FROM Person_organization_assignment_mim;	-- ISO/TS 10303-1013
	USE FROM Person_organization_mim;	-- ISO/TS 10303-1011

	USE FROM document_schema (document_type);
	USE FROM management_resources_schema(group_assignment);
	USE FROM date_time_schema(date_time_role);
	
	USE FROM product_definition_schema(product_definition_formation_relationship);
	
	USE FROM product_property_representation_schema(item_identified_representation_usage);

TYPE document_identifier_assigned_item = SELECT
     (document);
END_TYPE;

TYPE sd_document_reference_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON document_reference_item WITH 
	(configuration_item,
	product,
    product_definition,
    product_definition_formation);
END_TYPE;
	
ENTITY document_identifier
  SUBTYPE OF (group);
UNIQUE
  UR1: SELF\group.name, SELF\group.description;
END_ENTITY;

ENTITY document_identifier_assignment
 SUBTYPE OF (group_assignment);
   SELF\group_assignment.assigned_group : document_identifier;
     items : SET [1:?] OF document_identifier_assigned_item;
END_ENTITY;

ENTITY partial_document_with_structured_text_representation_assignment
  SUBTYPE OF (applied_document_usage_constraint_assignment, characterized_object);
END_ENTITY;  

ENTITY specification_definition
 SUBTYPE OF (product_definition);
END_ENTITY;
	
END_SCHEMA;


(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2590 - ISO/TS 10303-1104 Specified product - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1724
*)

SCHEMA Specified_product_mim;

USE FROM Configuration_item_mim;

USE FROM Identification_assignment_mim;

USE FROM Product_class_mim;

USE FROM Product_version_mim;

USE FROM configuration_management_schema(
	configurable_item);

USE FROM product_property_definition_schema(
	characterized_object);


TYPE id_for_product_identification = SELECT BASED_ON identification_item WITH (product_identification);
END_TYPE;

TYPE version_for_product_identification = SELECT BASED_ON versionable_item WITH (product_identification);
END_TYPE;

ENTITY product_identification
  SUBTYPE OF (configuration_item, characterized_object);
	SELF\configuration_item.item_concept : product_class;
WHERE
	WR1 : SIZEOF(QUERY 
								( cd <* USEDIN ( SELF ,'CONFIGURATION_MANAGEMENT_SCHEMA.CONFIGURATION_DESIGN.CONFIGURATION' ) 
								|
     						( 'PRODUCT_DEFINITION_SCHEMA.'+ 'PRODUCT_DEFINITION_FORMATION' IN TYPEOF ( cd. design ) ) 
     						AND 
    						( SIZEOF ( QUERY 
    												( 
    													prpc <* USEDIN ( cd. design\product_definition_formation.of_product , 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS') 
    													| 
         											prpc. name IN ['part' , 'raw material' , 'tool'] ) ) >0
     													) 
     												) 
     											) <=1;
	WR2 : NOT ( 'CONFIGURATION_MANAGEMENT_SCHEMA.'+ 'CONFIGURABLE_ITEM' IN TYPEOF( SELF ) ) 
				XOR ( 'SPECIFIED_PRODUCT_MIM.'+ 'PRODUCT_SPECIFICATION' IN TYPEOF ( SELF ) ) ;
END_ENTITY;

ENTITY product_specification
  SUBTYPE OF (product_identification, configurable_item);
END_ENTITY;

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4192 - ISO/TS 10303-1748 Stratum non planar shape - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3616
*)


SCHEMA Stratum_non_planar_shape_mim;
	USE FROM Layered_interconnect_module_design_mim;	-- ISO/TS 10303-1698
	USE FROM Manifold_surface_mim;	-- ISO/TS 10303-1509

END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4195 - ISO/TS 10303-1749 Styled curve - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3619
*)

SCHEMA Styled_curve_mim;
	USE FROM Colour_mim;    -- ISO/TS 10303-1002

	USE FROM Elemental_geometric_shape_mim;    -- ISO/TS 10303-1004

	USE FROM presentation_definition_schema
		(annotation_curve_occurrence,
		annotation_occurrence);

	USE FROM presentation_appearance_schema
		(presentation_style_assignment,
		presentation_style_select,
		styled_item);
	
	USE FROM representation_schema
		(parametric_representation_context);
		
		
	USE FROM presentation_appearance_schema
		(curve_style,
		curve_style_font,
		curve_style_font_pattern,
		curve_style_font_and_scaling,
		draughting_pre_defined_curve_font,
		externally_defined_curve_font,
		fill_area_style_colour,		
		pre_defined_curve_font);

	USE FROM representation_schema   -- ISO 10303-43
		(mapped_item);

ENTITY solid_curve_font
 SUBTYPE OF (pre_defined_curve_font);
END_ENTITY; 

ENTITY user_defined_curve_font
  SUBTYPE OF (curve_style_font, mapped_item);
END_ENTITY;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N3823 - ISO/TS 10303-1366 Tagged text representation - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3707
*)

SCHEMA Tagged_text_representation_mim;

USE FROM Foundation_representation_mim;    --  ISO/TS 10303-1006

USE FROM representation_schema(
 compound_representation_item,
 mapped_item);

TYPE string_representation_item_select = SELECT(
    descriptive_representation_item,
    Included_text_block,
    Structured_text_composition);
END_TYPE; 

ENTITY included_text_block
  SUBTYPE of (mapped_item);
  WHERE
   WR1 : 'TAGGED_TEXT_REPRESENTATION_MIM.STRUCTURED_TEXT_REPRESENTATION' IN TYPEOF(SELF\mapped_item.mapping_source.mapped_representation);
END_ENTITY;

ENTITY structured_text_composition
  SUBTYPE OF (compound_representation_item);
END_ENTITY;

ENTITY structured_text_representation
  SUBTYPE OF (representation);
  SELF\Representation.items : SET [1:?] OF string_representation_item_select; 
END_ENTITY;

ENTITY tagged_text_item
  SUBTYPE OF (descriptive_representation_item);
END_ENTITY;

ENTITY tagged_text_format
  SUBTYPE OF (representation_context);
END_ENTITY;

ENTITY uniform_resource_identifier
  SUBTYPE OF (descriptive_representation_item);
END_ENTITY;

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4201 - ISO/TS 10303-1751 Test requirement allocation - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3625
*)


SCHEMA Test_requirement_allocation_mim;
	USE FROM Functional_assignment_to_part_mim;	-- ISO/TS 10303-1674
	USE FROM Requirement_decomposition_mim;	-- ISO/TS 10303-1740
	USE FROM Functional_usage_view_mim;	-- ISO/TS 10303-1705

TYPE tra_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
     (property_definition_representation,
     shape_aspect_relationship);
END_TYPE;

TYPE tra_requirement_assigned_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assigned_item WITH 
   (product_definition_formation);
END_TYPE; 

	
END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4219 - ISO/TS 10303-1757 Test select product - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3680
*)
SCHEMA Test_select_product_mim;

	USE FROM Product_replacement_mim;	-- ISO/TS 10303-1046

END_SCHEMA;
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2697 - ISO/TS 10303-1136 Text appearance - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N1701
*) 


SCHEMA Text_appearance_mim;

USE FROM Elemental_geometric_shape_mim;    -- ISO/TS 10303-1004

USE FROM presentation_appearance_schema   -- ISO 10303-46
  (box_height,
   box_width,
   box_slant_angle,
   box_rotate_angle,
   character_glyph_style_stroke,
   character_glyph_style_outline,
   text_style,
   text_style_for_defined_font,
   text_style_with_box_characteristics,
   text_style_with_mirror,
   text_style_with_spacing); 

USE FROM presentation_definition_schema   -- ISO 10303-46
  (composite_text,
   composite_text_with_extent,
   composite_text_with_delineation,
   composite_text_with_blanking_box,
   text_literal,
   text_literal_with_extent,
   text_literal_with_delineation,
   text_literal_with_blanking_box); 

USE FROM presentation_resource_schema   -- ISO 10303-46
  (colour_rgb,
   draughting_pre_defined_text_font,
   externally_defined_text_font,
   font_select,
   pre_defined_colour,
   pre_defined_text_font); 

USE FROM aic_draughting_annotation (
  draughting_text_literal_with_delineation);    -- ISO 10303-504


RULE text_font_usage FOR 
(externally_defined_text_font,pre_defined_text_font);
WHERE
  WR1: SIZEOF (QUERY (pdtf <* pre_defined_text_font | SIZEOF (USEDIN (pdtf, 'PRESENTATION_DEFINITION_SCHEMA.TEXT_LITERAL.FONT')) = 0 )) = 0;
  WR2: SIZEOF (QUERY (edtf <* externally_defined_text_font | SIZEOF (USEDIN (edtf, 'PRESENTATION_DEFINITION_SCHEMA.TEXT_LITERAL.FONT')) = 0 )) = 0;
END_RULE; 

END_SCHEMA;  -- Text_appearance_mim
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4198 - ISO/TS 10303-1750 Text representation - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3622
*)


SCHEMA Text_representation_mim;
	USE FROM Elemental_geometric_shape_mim;	-- ISO/TS 10303-1004
	USE FROM Text_appearance_mim; -- ISO/TS 10303-1136
	
	USE FROM presentation_definition_schema(text_literal);
	USE FROM presentation_resource_schema(
	    character_glyph_font_usage,
 	    character_glyph_symbol,
 	    character_glyph_symbol_outline,
 	    character_glyph_symbol_stroke,
 	    generic_character_glyph_symbol,
		text_font,
		text_font_family,
		text_font_in_family);	

END_SCHEMA;

(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4204 - ISO/TS 10303-1752 Thermal network definition - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3628
*)


SCHEMA Thermal_network_definition_mim;
	USE FROM Network_functional_design_view_mim;	-- ISO/TS 10303-1704

ENTITY thermal_network
  SUBTYPE OF (functional_unit);
END_ENTITY;
	
END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2119 - ISO/TS 10303-1065 Time interval - EXPRESS MIM
*)

SCHEMA Time_interval_mim; 

USE FROM date_time_schema   -- ISO 10303-41
  (time_interval,
   time_interval_relationship,
   time_interval_with_bounds); 

USE FROM Event_mim;    -- ISO/TS 10303-1064

USE FROM Value_with_unit_mim;    -- ISO/TS 10303-1054


END_SCHEMA;  -- Time_interval_mim
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2121 - ISO/TS 10303-1365 Time interval assignment - EXPRESS MIM
*) 


SCHEMA Time_interval_assignment_mim; 

USE FROM date_time_schema   -- ISO 10303-41
  (time_interval_role); 

USE FROM management_resources_schema   -- ISO 10303-41
  (time_interval_assignment); 

USE FROM Time_interval_mim;    -- ISO/TS 10303-1065


TYPE time_interval_item = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY applied_time_interval_assignment
  SUBTYPE OF (time_interval_assignment);
  items : SET[0:?] OF time_interval_item;
END_ENTITY;

END_SCHEMA;  -- Time_interval_assignment_mim

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1302 - ISO/TS 10303-1054 Value with unit - EXPRESS MIM
*)

SCHEMA Value_with_unit_mim;

USE FROM measure_schema;

USE FROM representation_schema
 (uncertainty_measure_with_unit);

END_SCHEMA;
(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4207 - ISO/TS 10303-1753 Value with unit extension - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3631
*)


SCHEMA Value_with_unit_extension_mim;
	USE FROM Value_with_unit_mim;	-- ISO/TS 10303-1054

	USE FROM Iso13584_generic_expressions_schema
		(environment,
		generic_literal,
		variable_semantics);

	USE FROM basic_attribute_schema
		(name_attribute);
	
ENTITY absorbed_dose_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\absorbed_dose_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = gray;
END_ENTITY;

ENTITY activity_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\activity_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = becquerel;
END_ENTITY;

ENTITY capacitance_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\capacitance_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = farad;
END_ENTITY;

ENTITY conductance_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\conductance_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = siemens;
END_ENTITY;

ENTITY dose_equivalent_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\dose_equivalent_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = sievert;
END_ENTITY;

ENTITY electric_charge_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\electric_charge_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = coulomb;
END_ENTITY;

ENTITY electromotive_force_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\electromotive_force_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = volt ;
END_ENTITY;

ENTITY energy_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\energy_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = joule;
END_ENTITY;

ENTITY expression_conversion_based_unit
  SUBTYPE OF (context_dependent_unit, variable_semantics); 
INVERSE
  associated_variable_environment: environment FOR semantics; 
END_ENTITY;

ENTITY force_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\force_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = newton;
END_ENTITY;

ENTITY frequency_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\frequency_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = hertz;
END_ENTITY;

ENTITY illuminance_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\illuminance_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = lux;
END_ENTITY;

ENTITY inductance_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\inductance_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = henry;
END_ENTITY;

ENTITY luminous_flux_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\luminous_flux_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = lumen;
END_ENTITY;

ENTITY magnetic_flux_density_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\magnetic_flux_density_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = tesla;
END_ENTITY;

ENTITY magnetic_flux_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\magnetic_flux_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = weber;
END_ENTITY;

ENTITY polar_complex_number_literal
  SUBTYPE OF (generic_literal);
  radius    : REAL;
  angle     : REAL;
WHERE
  WR1: radius >= 0;
  WR2: { 0 <= angle < 2*PI };
END_ENTITY;

ENTITY power_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\power_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = watt;
END_ENTITY;

ENTITY pressure_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\pressure_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = pascal;
END_ENTITY;

ENTITY resistance_measure_with_unit
 SUBTYPE OF (measure_with_unit);
   SELF\measure_with_unit.unit_component  : si_unit;
   SELF\measure_with_unit.value_component : numeric_measure;
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\measure_with_unit ||
       SELF\resistance_measure_with_unit))) = 0;
  WR2: SELF\measure_with_unit.unit_component\si_unit.name = ohm;
END_ENTITY;

ENTITY scattering_parameter
 SUBTYPE OF (polar_complex_number_literal);
WHERE
  WR1: SIZEOF(TYPEOF(SELF) - (TYPEOF(SELF\polar_complex_number_literal ||
       SELF\scattering_parameter))) = 0;
END_ENTITY;

RULE subtype_exclusive_measure_with_unit FOR (measure_with_unit);
WHERE
  WR1: SIZEOF (QUERY (mwu <* measure_with_unit |
       NOT (SIZEOF ([
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'ABSORBED_DOSE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'ACTIVITY_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'AMOUNT_OF_SUBSTANCE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'AREA_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'CAPACITANCE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'CELSIUS_TEMPERATURE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'CONDUCTANCE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'DOSE_EQUIVALENT_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'ELECTRIC_CHARGE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'ELECTRIC_CURRENT_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'ELECTROMOTIVE_FORCE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'ENERGY_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'FORCE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'FREQUENCY_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'ILLUMINANCE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'INDUCTANCE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'LENGTH_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'LUMINOUS_FLUX_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'LUMINOUS_INTENSITY_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'MAGNETIC_FLUX_DENSITY_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'MAGNETIC_FLUX_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'MASS_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'PLANE_ANGLE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'POWER_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'PRESSURE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'RATIO_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'RESISTANCE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'SOLID_ANGLE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'THERMODYNAMIC_TEMPERATURE_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'TIME_MEASURE_WITH_UNIT',
       'VALUE_WITH_UNIT_EXTENSION_MIM.' +
       'VOLUME_MEASURE_WITH_UNIT'] *
       TYPEOF(mwu)) <= 1))) = 0;
END_RULE;
	
END_SCHEMA;


(*
   $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
   ISO TC184/SC4/WG12 N4210 - ISO/TS 10303-1754 Via component - EXPRESS MIM
   Supersedes ISO TC184/SC4/WG12 N3634
*)


SCHEMA Via_component_mim;
	USE FROM Interconnect_module_connection_routing_mim;	-- ISO/TS 10303-1684
	USE FROM Layered_interconnect_module_design_mim;	-- ISO/TS 10303-1698

  ENTITY blind_via
    ABSTRACT SUPERTYPE OF (ONEOF (bonded_conductive_base_blind_via,
 non_conductive_base_blind_via,
 plated_conductive_base_blind_via))
    SUBTYPE OF (via);
  END_ENTITY;

  ENTITY bonded_conductive_base_blind_via
    SUBTYPE OF (blind_via);
  END_ENTITY;

  ENTITY buried_via
    SUBTYPE OF (via);
  END_ENTITY;
  
  ENTITY interfacial_connection
    SUBTYPE OF (via);
  END_ENTITY;

  ENTITY non_conductive_base_blind_via
    SUBTYPE OF (blind_via);
  END_ENTITY;

  ENTITY plated_conductive_base_blind_via
    SUBTYPE OF (blind_via);
  END_ENTITY;

 SUBTYPE_CONSTRAINT via_subtypes FOR via;   
 	(ONEOF (blind_via,
 	buried_via,
 	interfacial_connection));
 END_SUBTYPE_CONSTRAINT;  
	
END_SCHEMA;

(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N2626 - ISO/TS 10303-1347 Wireframe 2d - EXPRESS MIM
 Supersedes ISO TC184/SC4/WG12 N1776
*)

SCHEMA Wireframe_2d_mim;

USE FROM Elemental_geometric_shape_mim;

USE FROM aic_geometrically_bounded_2d_wireframe;

END_SCHEMA;
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1154 - ISO/TS 10303-1043 Work order - EXPRESS MIM
*)

SCHEMA Work_order_mim; 

USE FROM Activity_mim;    -- ISO/TS 10303-1047

USE FROM Work_request_mim;    -- ISO/TS 10303-1042

USE FROM action_schema   -- ISO 10303-41
  (action_directive,
   directed_action); 

END_SCHEMA; 
(*
 $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
 ISO TC184/SC4/WG12 N1151 - ISO/TS 10303-1042 Work request - EXPRESS MIM
*)

SCHEMA Work_request_mim;

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM action_schema   -- ISO 10303-41
  (action_request_solution,
   action_request_status,
   versioned_action_request); 

USE FROM management_resources_schema   -- ISO 10303-41
   (action_request_assignment);


TYPE action_request_item = EXTENSIBLE GENERIC_ENTITY SELECT ;
END_TYPE;

ENTITY applied_action_request_assignment
SUBTYPE OF (action_request_assignment);
  items : SET [1 : ?] OF action_request_item;
END_ENTITY;

END_SCHEMA;
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 

SCHEMA action_schema; 

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value,
   get_id_value,
   get_name_value,
   id_attribute,
   name_attribute); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE supported_item = SELECT
   (action, 
    action_directive, 
    action_method);
END_TYPE; 

ENTITY action;
  name : label;
  description : OPTIONAL text;
  chosen_method : action_method;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY action_directive;
  name : label;
  description : OPTIONAL text;
  analysis : text;
  comment : text;
  requests : SET[1:?] OF versioned_action_request;
END_ENTITY;

ENTITY action_method;
  name : label;
  description : OPTIONAL text;
  consequence : text;
  purpose : text;
END_ENTITY;

ENTITY action_method_relationship;
  name : label;
  description : OPTIONAL text;
  relating_method : action_method;
  related_method : action_method;
END_ENTITY;

ENTITY action_relationship;
  name : label;
  description : OPTIONAL text;
  relating_action : action;
  related_action : action;
END_ENTITY;

ENTITY action_request_solution;
  method : action_method;
  request : versioned_action_request;
DERIVE
  description : text := get_description_value (SELF);
  name : label := get_name_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
END_ENTITY;

ENTITY action_request_status;
  status : label;
  assigned_request : versioned_action_request;
END_ENTITY;

ENTITY action_resource;
  name : label;
  description : OPTIONAL text;
  usage : SET[1:?] OF supported_item;
  kind : action_resource_type;
END_ENTITY;

ENTITY action_resource_relationship;
  name : label;
  description : OPTIONAL text;
  relating_resource : action_resource;
  related_resource : action_resource;
END_ENTITY;

ENTITY action_resource_type;
  name : label;
END_ENTITY;

ENTITY action_status;
  status : label;
  assigned_action : executed_action;
END_ENTITY;

ENTITY directed_action
  SUBTYPE OF (executed_action);
  directive : action_directive;
END_ENTITY;

ENTITY executed_action
  SUBTYPE OF (action);
END_ENTITY;

ENTITY versioned_action_request;
  id : identifier;
  version : label;
  purpose : text;
  description : OPTIONAL text;
END_ENTITY;

ENTITY versioned_action_request_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_versioned_action_request : versioned_action_request;
  related_versioned_action_request : versioned_action_request;
END_ENTITY;

FUNCTION acyclic_action_method_relationship (relation : action_method_relationship; relatives : SET [1:?] OF action_method; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF action_method_relationship;
    END_LOCAL;

    IF relation.relating_method IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(am <* bag_to_set(USEDIN(relation.relating_method, 'ACTION_SCHEMA.' + 'ACTION_METHOD_RELATIONSHIP.' + 'RELATED_METHOD')) | specific_relation IN TYPEOF(am));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_action_method_relationship(x[i], relatives + relation.relating_method, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

  FUNCTION acyclic_action_relationship (relation : action_relationship; relatives : SET [1:?] OF action; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF action_relationship;
    END_LOCAL;

    IF relation.relating_action IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(actn <* bag_to_set(USEDIN(relation.relating_action, 'ACTION_SCHEMA.' + 'ACTION_RELATIONSHIP.' + 'RELATED_ACTION')) | specific_relation IN TYPEOF(actn));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_action_relationship(x[i], relatives + relation.relating_action, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

  FUNCTION acyclic_action_resource_relationship (relation : action_resource_relationship; relatives : SET [1:?] OF action_resource; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF action_resource_relationship;
    END_LOCAL;

    IF relation.relating_resource IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(ar <* bag_to_set(USEDIN(relation.relating_resource, 'ACTION_SCHEMA.' + 'ACTION_RESOURCE_RELATIONSHIP.' + 'RELATED_RESOURCE')) | specific_relation IN TYPEOF(ar));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_action_resource_relationship(x[i], relatives + relation.relating_resource, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

  FUNCTION acyclic_versioned_action_request_relationship (relation : versioned_action_request_relationship; relatives : SET OF versioned_action_request; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF versioned_action_request_relationship;
    END_LOCAL;

    IF relation.relating_versioned_action_request IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(varr <* bag_to_set(USEDIN(relation.relating_versioned_action_request, 'ACTION_SCHEMA.' + 'VERSIONED_ACTION_REQUEST_RELATIONSHIP.' + 'RELATED_VERSIONED_ACTION_REQUEST')) | specific_relation IN TYPEOF(varr));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_versioned_action_request_relationship(x[i], relatives + relation.relating_versioned_action_request, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION; 

END_SCHEMA;  -- action_schema
SCHEMA aic_advanced_brep;
  
USE FROM aic_topologically_bounded_surface;
 USE FROM geometry_schema ( cartesian_transformation_operator_3d);
 USE FROM geometric_model_schema ( manifold_solid_brep, brep_with_voids);
 REFERENCE FROM geometric_model_schema ( msb_shells);
 USE FROM topology_schema ( closed_shell, connected_face_set, oriented_closed_shell);
 USE FROM representation_schema ( mapped_item);
 USE FROM product_property_representation_schema ( shape_representation);
  
ENTITY advanced_brep_shape_representation 
 SUBTYPE OF ( shape_representation );
 WHERE 
WR1 : 
SIZEOF ( 
QUERY ( it <* SELF.items| NOT ( SIZEOF ([ 'AIC_ADVANCED_BREP.MANIFOLD_SOLID_BREP', 'AIC_ADVANCED_BREP.FACETED_BREP', 'AIC_ADVANCED_BREP.MAPPED_ITEM', 'AIC_ADVANCED_BREP.AXIS2_PLACEMENT_3D' ] * TYPEOF (it)) = 1) )) = 0;
WR2 : 
SIZEOF ( 
QUERY ( it <* SELF.items| ( SIZEOF ([ 'AIC_ADVANCED_BREP.MANIFOLD_SOLID_BREP', 'AIC_ADVANCED_BREP.MAPPED_ITEM' ] * TYPEOF (it)) = 1) )) > 0;
WR3 : 
SIZEOF ( 
QUERY ( msb <* 
QUERY ( it <* SELF.items| ('AIC_ADVANCED_BREP.MANIFOLD_SOLID_BREP' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( csh <* msb_shells(msb)| NOT ( SIZEOF ( 
QUERY ( fcs <* csh\connected_face_set.cfs_faces| NOT ('AIC_ADVANCED_BREP.ADVANCED_FACE' IN TYPEOF (fcs)) )) = 0) )) = 0) )) = 0;
WR4 : 
SIZEOF ( 
QUERY ( msb <* 
QUERY ( it <* items| ('AIC_ADVANCED_BREP.MANIFOLD_SOLID_BREP' IN TYPEOF (it)) )| ('AIC_ADVANCED_BREP.ORIENTED_CLOSED_SHELL' IN TYPEOF (msb\manifold_solid_brep.outer)) )) = 0;
WR5 : 
SIZEOF ( 
QUERY ( brv <* 
QUERY ( it <* items| ('AIC_ADVANCED_BREP.BREP_WITH_VOIDS' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( csh <* brv\brep_with_voids.voids| csh\oriented_closed_shell.orientation )) = 0) )) = 0;
WR6 : 
SIZEOF ( 
QUERY ( mi <* 
QUERY ( it <* items| ('AIC_ADVANCED_BREP.MAPPED_ITEM' IN TYPEOF (it)) )| NOT ('AIC_ADVANCED_BREP.ADVANCED_BREP_SHAPE_REPRESENTATION' IN TYPEOF (mi\mapped_item.mapping_source.mapped_representation)) )) = 0;
 END_ENTITY ;
END_SCHEMA;
 
 (* First draft of Curve Swept Solid AIC EXPRESS definitions - not yet verified
 by compiler *)
 SCHEMA aic_curve_swept_solid;
 
  USE FROM measure_schema; -- 	

  USE FROM aic_topologically_bounded_surface; -- ISO 10303-511

  USE FROM geometry_schema  -- ISO 10303-42
  (axis2_placement_2d,
                           axis2_placement_3d,
                           bezier_curve,
                           bezier_surface,
                           b_spline_curve_with_knots,
                           b_spline_curve,
                           b_spline_surface,
                           b_spline_surface_with_knots,
			   bounded_surface_curve,
                           cartesian_point,
                           circle,
                           composite_curve_on_surface,
                           conical_surface,
                           cylindrical_surface,
                           degenerate_toroidal_surface,
                           direction,
                           ellipse,
                           geometric_representation_context,
                           hyperbola,
                           line,
                           parabola,
                           pcurve,
                           plane,
                           polyline,
                           quasi_uniform_curve,
                           quasi_uniform_surface,
			   outer_boundary_curve,
                           rational_b_spline_curve,
                           rational_b_spline_surface,
                           spherical_surface,
                           surface_curve,
                           surface_of_linear_extrusion,
                           surface_of_revolution,
                           swept_surface,
		           trimmed_curve,		
                           toroidal_surface,
                           uniform_curve,
                           uniform_surface,
                           vector);

  USE FROM geometric_model_schema  -- ISO  10303-42
      (extruded_area_solid,
       revolved_area_solid,
       surface_curve_swept_area_solid,
       swept_disk_solid);

  USE FROM representation_schema(mapped_item);   -- ISO  10303-43

  USE FROM product_property_representation_schema   -- ISO  10303-41
      (shape_representation);

 ENTITY curve_swept_solid_shape_representation
 SUBTYPE OF (shape_representation);
 WHERE
  WR1: SIZEOF (QUERY (it <* SELF.items |
          NOT (SIZEOF (['AIC_CURVE_SWEPT_SOLID.SWEPT_AREA_SOLID',
                'AIC_CURVE_SWEPT_SOLID.SWEPT_DISK_SOLID',
                'AIC_CURVE_SWEPT_SOLID.MAPPED_ITEM',
                'AIC_CURVE_SWEPT_SOLID.AXIS2_PLACEMENT_3D'] *
                   TYPEOF(it)) = 1))) = 0;
   WR2: SIZEOF (QUERY (it <* SELF.items |
         SIZEOF(['AIC_CURVE_SWEPT_SOLID.SWEPT_AREA_SOLID',
                'AIC_CURVE_SWEPT_SOLID.SWEPT_DISK_SOLID',
          'AIC_CURVE_SWEPT_SOLID.MAPPED_ITEM'] * TYPEOF(it)) =1 )) > 0;
   WR3: SIZEOF (QUERY (mi <*  QUERY (it <* items |
                 'AIC_CURVE_SWEPT_SOLID.MAPPED_ITEM' IN TYPEOF(it)) |
   NOT ('AIC_CURVE_SWEPT_SOLID.CURVE_SWEPT_SOLID_SHAPE_REPRESENTATION' IN
             TYPEOF(mi\mapped_item.mapping_source.
                           mapped_representation)))) = 0;
   WR4: SIZEOF (QUERY (scsas <* QUERY (it <* SELF.items |
        'AIC_CURVE_SWEPT_SOLID.SURFACE_CURVE_SWEPT_AREA_SOLID' IN
              TYPEOF(it)) |
          NOT(('AIC_CURVE_SWEPT_SOLID.SURFACE_CURVE' IN
                   TYPEOF(scsas.directrix)) OR
                   ('AIC_CURVE_SWEPT_SOLID.PCURVE' IN
                   TYPEOF(scsas.directrix))))) = 0;
 END_ENTITY;
(* Formal propositions:
 WR1: Each item im the items set shall be a swept_area_solid,
      a swept_disk_solid, a mapped_item or an axis2_placement_3d.
 WR2: At least one of the items in the items set shall be a
      swept_area_solid, a swept_disk_solid, or a mapped_item.
 WR3: If there is a mapped_item in a curve_swept_solid_shape_representation the
     mapping_source shall be a curve_swept_solid_shape_representation.
 WR4: If there is a surface_curve_swept_area_solid in a
      curve_swept_solid_shape_representation the directrix shall be either a
      pcurve or a surface_curve.
*)
ENTITY ruled_surface_swept_area_solid
  SUBTYPE OF(surface_curve_swept_area_solid);
  WHERE
  WR1: ('AIC_CURVE_SWEPT_SOLID.B_SPLINE_SURFACE' IN TYPEOF(SELF.reference_surface)) AND
         (SELF.reference_surface\b_spline_surface.u_degree = 1);         
  WR2: ('AIC_CURVE_SWEPT_SOLID.PCURVE' IN TYPEOF(SELF.directrix)) OR
        (('AIC_CURVE_SWEPT_SOLID.B_SPLINE_CURVE' IN TYPEOF(SELF.directrix\surface_curve.curve_3d))
         AND
         (SELF.directrix\surface_curve.curve_3d\b_spline_curve.degree =
         SELF.reference_surface\b_spline_surface.v_degree));
END_ENTITY;
(* Formal propositions:
  WR1: The reference_surface of a ruled_surface_swept_area_solid shall be a
       b_spline_surface of u_degree 1.
  NOTE: This ensures that the reference surface has the form of a ruled
        surface bounded by two b_spline_curves.
  WR2: The directrix shall be either a pcurve or surface curve. If the directrix
       is a surface_curve the curve_3d shall be a b_spline_curve of the same
       degree as the boundary curves of the ruled surface that is the
       reference_surface.
*)
END_SCHEMA; -- end AIC_CURVE_SWEPT_SOLID SCHEMA
(*
  This is the EXPRESS of the IS version of ISO 10303-504.
  This document is ISO TC 184/SC4/WG12 N503.
*)
SCHEMA aic_draughting_annotation;

USE FROM draughting_element_schema	-- ISO 10303-101
  (draughting_callout,
   terminator_symbol);

USE FROM geometry_schema	-- ISO 10303-42
  (axis2_placement_2d,
   geometric_representation_context);

USE FROM measure_schema	-- ISO 10303-41
  (conversion_based_unit,
   derived_unit,
   global_unit_assigned_context,
   length_measure_with_unit,
   length_unit,
   measure_with_unit,
   named_unit,
   plane_angle_unit,
   plane_angle_measure_with_unit,
   si_unit);
USE FROM presentation_appearance_schema	-- ISO 10303-46
  (box_height,
   box_rotate_angle,
   box_slant_angle,
   box_width,
   context_dependent_invisibility,
   curve_style,
   curve_style_font,
   externally_defined_curve_font,
   externally_defined_hatch_style,
   externally_defined_tile_style,
   fill_area_style,
   fill_area_style_colour,
   fill_area_style_hatching,
   fill_area_style_tile_symbol_with_style,
   fill_area_style_tiles,
   null_style,
   pre_defined_curve_font,
   presentation_style_by_context,
   symbol_colour,
   symbol_style,
   text_style,
   text_style_for_defined_font,
   text_style_with_box_characteristics,
   text_style_with_mirror,
   text_style_with_spacing);

USE FROM presentation_definition_schema	-- ISO 10303-46
  (annotation_curve_occurrence,
   annotation_fill_area,
   annotation_fill_area_occurrence,
   annotation_occurrence,
   annotation_symbol,
   annotation_symbol_occurrence,
   annotation_text_occurrence,
   composite_text,
   composite_text_with_associated_curves,
   composite_text_with_blanking_box,
   composite_text_with_extent,
   defined_symbol,
   externally_defined_symbol,
   pre_defined_symbol,
   symbol_representation,
   symbol_representation_map,
   text_alignment,
   text_literal,
   text_literal_with_associated_curves,
   text_literal_with_blanking_box,
   text_literal_with_delineation,
   text_literal_with_extent);

USE FROM presentation_resource_schema	-- ISO 10303-46
  (colour_rgb,
   externally_defined_text_font,
   font_select,
   pre_defined_colour,
   pre_defined_text_font);

USE FROM representation_schema	-- ISO 10303-43
  (mapped_item,
   representation,
   representation_item);

ENTITY annotation_subfigure_occurrence
  SUBTYPE OF (annotation_symbol_occurrence);
WHERE
  WR1: SIZEOF (QUERY (sty <* SELF.styles |
         NOT (SIZEOF (sty.styles) = 1)
       )) = 0;
  WR2: SIZEOF (QUERY (sty <* SELF.styles |
         NOT ('AIC_DRAUGHTING_ANNOTATION.NULL_STYLE'
               IN TYPEOF (sty.styles[1]))       ))=0;
  WR3: ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL'
           IN TYPEOF (SELF.item));
  WR4: ('AIC_DRAUGHTING_ANNOTATION.DRAUGHTING_SUBFIGURE_REPRESENTATION'
           IN TYPEOF
           (SELF.item\mapped_item.mapping_source.mapped_representation));
END_ENTITY;

ENTITY draughting_annotation_occurrence
  SUBTYPE OF (annotation_occurrence);
WHERE
  WR1:	-- curve_has_curve_style:
    (NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_CURVE_OCCURRENCE'
            IN TYPEOF (SELF))) OR
    (SIZEOF (QUERY (sty <* SELF.styles |
       NOT ((SIZEOF (sty.styles) = 1)
         AND ('AIC_DRAUGHTING_ANNOTATION.CURVE_STYLE'
                 IN TYPEOF (sty.styles[1]))) )) = 0);
  WR2:	-- fill_area_has_fill_style:
    (NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_FILL_AREA_OCCURRENCE'
            IN TYPEOF (SELF))) OR    (SIZEOF (QUERY (sty <* SELF.styles |
      NOT ((SIZEOF (sty.styles) = 1)
        AND ('AIC_DRAUGHTING_ANNOTATION.FILL_AREA_STYLE'
                IN TYPEOF (sty.styles[1]))) )) = 0);
  WR3:	-- styled_fill_boundaries:
    (NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_FILL_AREA_OCCURRENCE'
            IN TYPEOF (SELF))) OR    (SIZEOF (QUERY (bound <*
                     SELF.item\annotation_fill_area.boundaries |
       NOT (SIZEOF (QUERY (si <*
                   USEDIN (bound, 'PRESENTATION_APPEARANCE_SCHEMA.' +
                                  'STYLED_ITEM.ITEM') |
         ('AIC_DRAUGHTING_ANNOTATION.' +
             'ANNOTATION_CURVE_OCCURRENCE' IN TYPEOF (si)))) > 0))) = 0);
  WR4:	-- symbol_has_symbol_style:
    (NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL_OCCURRENCE'
            IN TYPEOF (SELF))) OR    (SIZEOF (QUERY (sty <* SELF.styles |
       NOT ((SIZEOF (sty.styles) = 1)           AND
            (SIZEOF (TYPEOF (sty.styles[1]) *
                ['AIC_DRAUGHTING_ANNOTATION.SYMBOL_STYLE',
                 'AIC_DRAUGHTING_ANNOTATION.NULL_STYLE']) = 1)) )) = 0);
  WR5:	-- allowable_symbol_representations:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL_OCCURRENCE'
             IN TYPEOF (SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL'
             IN TYPEOF(SELF.item)))) OR
         (SIZEOF (['AIC_DRAUGHTING_ANNOTATION.' +
                   'DRAUGHTING_SYMBOL_REPRESENTATION',
                  'AIC_DRAUGHTING_ANNOTATION.' +
                  'DRAUGHTING_SUBFIGURE_REPRESENTATION'] *
          TYPEOF (SELF.item\mapped_item.mapping_source.
                  mapped_representation)) = 1);
  WR6:	-- text_has_text_style:
    (NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
            IN TYPEOF (SELF))) OR
    (SIZEOF (QUERY (sty <* SELF.styles |
       NOT ((SIZEOF (sty.styles) = 1)
        AND ('AIC_DRAUGHTING_ANNOTATION.TEXT_STYLE'
                IN TYPEOF (sty.styles[1]))) )) = 0);
  WR7:	-- allowable_text:
     (NOT('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (SELF))) OR
         (SIZEOF (TYPEOF(SELF.item) *
             ['AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT',
              'AIC_DRAUGHTING_ANNOTATION.TEXT_LITERAL']) = 1);
  WR8:	-- text_not_nested:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT'
             IN TYPEOF (SELF.item)))) OR    (SIZEOF (QUERY (tl <*
                   SELF.item\composite_text.collected_text |
             NOT ('AIC_DRAUGHTING_ANNOTATION.TEXT_LITERAL' 
             IN TYPEOF (tl)) )) = 0);
  WR9:	-- text_alignment_literals:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.TEXT_LITERAL'
             IN TYPEOF (SELF.item)))) OR (SELF.item\text_literal.alignment 
             IN ['baseline left', 'baseline centre', 'baseline right']);
  WR10:	-- text_alignment_composites:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT'
             IN TYPEOF (SELF.item)))) OR
         (SIZEOF (QUERY (tl <* QUERY (text <* SELF.
                  item\composite_text.collected_text
             |('AIC_DRAUGHTING_ANNOTATION.TEXT_LITERAL' IN TYPEOF(text))) |
          NOT (tl\text_literal.alignment IN
         ['baseline left', 'baseline centre', 'baseline right']) )) = 0);
  WR11:	-- single_text_alignment:
    NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF(SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT'
             IN TYPEOF (SELF.item))) OR check_text_alignment(SELF.item);
  WR12:	-- single_text_font:
    NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF(SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT'
             IN TYPEOF (SELF.item))) OR check_text_font(SELF.item);
  WR13:	-- allowable_text_literals:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF(SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT'
               IN TYPEOF (SELF.item)))) OR
         (SIZEOF (QUERY (tl <* QUERY (text <*
            SELF.item\composite_text.collected_text |
            ('AIC_DRAUGHTING_ANNOTATION.TEXT_LITERAL' IN TYPEOF (text))) |
             NOT (SIZEOF (TYPEOF(tl) *
                  ['AIC_DRAUGHTING_ANNOTATION.' +
                   'TEXT_LITERAL_WITH_BLANKING_BOX',
                   'AIC_DRAUGHTING_ANNOTATION.' +
                   'TEXT_LITERAL_WITH_ASSOCIATED_CURVES']) = 0) )) = 0);
  WR14:	-- styled_text_literal_curves:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.TEXT_LITERAL_WITH_ASSOCIATED_CURVES'
             IN TYPEOF (SELF.item)))) OR
    (SIZEOF (QUERY (crv <*
                   SELF.item\text_literal_with_associated_curves.
                   associated_curves |
      NOT (SIZEOF (QUERY (si <*  USEDIN (crv, 
             'PRESENTATION_APPEARANCE_SCHEMA.STYLED_ITEM.ITEM') |
        ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_CURVE_OCCURRENCE'
            IN TYPEOF (si)) )) > 0) )) = 0);
  WR15:	-- styled_composite_text_curves:
    (NOT (('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE'
             IN TYPEOF (SELF)) AND
         ('AIC_DRAUGHTING_ANNOTATION.COMPOSITE_TEXT_WITH_ASSOCIATED_CURVES'
             IN TYPEOF (SELF.item)))) OR
          (SIZEOF (QUERY (crv <*
                SELF.item\composite_text_with_associated_curves.
                associated_curves |
           NOT (SIZEOF (QUERY (si <*  USEDIN (crv,
                'PRESENTATION_APPEARANCE_SCHEMA.STYLED_ITEM.ITEM') |
               ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_CURVE_OCCURRENCE'
           IN TYPEOF (si)) )) > 0) )) = 0);
WR16:	-- curve_style_has_width:
    SIZEOF (QUERY (cs <* QUERY (sty <* SELF.styles |
      ('AIC_DRAUGHTING_ANNOTATION.CURVE_STYLE' IN TYPEOF (sty.styles[1])))
      | NOT (('AIC_DRAUGHTING_ANNOTATION.LENGTH_MEASURE_WITH_UNIT'
        IN TYPEOF (cs.styles[1]\curve_style.curve_width)) AND
       ('MEASURE_SCHEMA.POSITIVE_LENGTH_MEASURE'
        IN TYPEOF (cs.styles[1]\curve_style.
        curve_width\measure_with_unit.value_component))))) = 0;
WR17:	-- tiling_constraints:
    SIZEOF (QUERY (fas <* QUERY (sty <* SELF.styles |
      ('AIC_DRAUGHTING_ANNOTATION.FILL_AREA_STYLE'
          IN TYPEOF (sty.styles[1]))) |
      NOT ((SIZEOF (QUERY (fs <* fas.styles[1]\fill_area_style.fill_styles
                    | ('AIC_DRAUGHTING_ANNOTATION.FILL_AREA_STYLE_TILES'
                       IN TYPEOF (fs)))) <= 1)
       AND (SIZEOF (QUERY (fst <* QUERY (fs <*
                           fas.styles[1]\fill_area_style.fill_styles |
              ('AIC_DRAUGHTING_ANNOTATION.FILL_AREA_STYLE_TILES'
                  IN TYPEOF (fs))) |
                 NOT (SIZEOF (fst\fill_area_style_tiles.tiles) = 1)
           )) = 0))
    )) = 0;
  WR18:	-- hatching_constraints:
    SIZEOF (QUERY (fas <* QUERY (sty <* SELF.styles |
           ('AIC_DRAUGHTING_ANNOTATION.FILL_AREA_STYLE' 
            IN TYPEOF (sty.styles[1]))) |
             NOT (SIZEOF (QUERY (fsh <* QUERY (fs <*
                          fas.styles[1]\fill_area_style.fill_styles |
             ('AIC_DRAUGHTING_ANNOTATION.FILL_AREA_STYLE_HATCHING'
               IN TYPEOF (fs))) |
        NOT (fsh\fill_area_style_hatching.point_of_reference_hatch_line :=:
             fsh\fill_area_style_hatching.pattern_start)  )) = 0)  )) = 0;
  WR19:	-- text_style_constraint:
    SIZEOF (QUERY (ts <* QUERY (sty <* SELF.styles |
         ('AIC_DRAUGHTING_ANNOTATION.TEXT_STYLE' 
         IN TYPEOF(sty.styles[1]))) |
             NOT ('AIC_DRAUGHTING_ANNOTATION.' +
                  'TEXT_STYLE_WITH_BOX_CHARACTERISTICS'
             IN TYPEOF (ts.styles[1])))) = 0;
  WR20:	-- text_style_characteristics:
    SIZEOF (QUERY (ts <* QUERY (sty <* SELF.styles |
         ('AIC_DRAUGHTING_ANNOTATION.TEXT_STYLE_WITH_BOX_CHARACTERISTICS'
             IN TYPEOF (sty.styles[1]))) |
           NOT (SIZEOF (ts.styles[1]\text_style_with_box_characteristics.
                characteristics) = 4) )) = 0;
END_ENTITY;

ENTITY draughting_subfigure_representation
  SUBTYPE OF (symbol_representation);
WHERE
  WR1: SIZEOF (QUERY (item <* SELF\representation.items |
         NOT (SIZEOF (['AIC_DRAUGHTING_ANNOTATION.ANNOTATION_OCCURRENCE',
              'AIC_DRAUGHTING_ANNOTATION.DRAUGHTING_CALLOUT',
              'GEOMETRY_SCHEMA.AXIS2_PLACEMENT']
               * TYPEOF (item)) = 1))) = 0;
  WR2: SIZEOF (QUERY (item <* SELF\representation.items |
         SIZEOF (['AIC_DRAUGHTING_ANNOTATION.ANNOTATION_OCCURRENCE',
                  'AIC_DRAUGHTING_ANNOTATION.DRAUGHTING_CALLOUT'] *
           TYPEOF (item)) = 1)) >= 1;
  WR3: SIZEOF (QUERY (srm <* QUERY (rm <*
          USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                        'REPRESENTATION_MAP.MAPPED_REPRESENTATION') |
          ('AIC_DRAUGHTING_ANNOTATION.SYMBOL_REPRESENTATION_MAP'
             IN TYPEOF(rm))) | 
            NOT (SIZEOF (QUERY (a_s <* QUERY (mi <* srm.map_usage |
            ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL' IN TYPEOF(mi)))
          | NOT (SIZEOF (QUERY (aso <*
            USEDIN (a_s, 'PRESENTATION_APPEARANCE_SCHEMA.' + 
                         'STYLED_ITEM.ITEM') |
          NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SUBFIGURE_OCCURRENCE'
            IN TYPEOF(aso)))) = 0))) = 0))) > 0;
  WR4: NOT (acyclic_mapped_item_usage (SELF));
  WR5: SIZEOF (SELF.context_of_items.representations_in_context) = 1;
END_ENTITY;

ENTITY draughting_symbol_representation
  SUBTYPE of (symbol_representation);
UNIQUE
  UR1: SELF\representation.name;
WHERE
  WR1: 
    SIZEOF (QUERY (item <* SELF\representation.items |
         NOT (SIZEOF (TYPEOF (item) *
            ['AIC_DRAUGHTING_ANNOTATION.ANNOTATION_CURVE_OCCURRENCE',
             'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL_OCCURRENCE',
             'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_FILL_AREA_OCCURRENCE',
             'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE',
             'GEOMETRY_SCHEMA.AXIS2_PLACEMENT']) = 1)
       )) = 0;
  WR2: 
    SIZEOF (QUERY (item <* SELF\representation.items |
         (SIZEOF (TYPEOF (item) *
            ['AIC_DRAUGHTING_ANNOTATION.ANNOTATION_CURVE_OCCURRENCE',
             'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL_OCCURRENCE',
             'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_FILL_AREA_OCCURRENCE',
             'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_TEXT_OCCURRENCE']) = 1)
       )) >= 1;
  WR3: 
    SIZEOF (QUERY (item <* SELF\representation.items |
         'AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SUBFIGURE_OCCURRENCE'
          IN TYPEOF (item))) = 0;
  WR4: 
    SIZEOF (QUERY (srm <* QUERY (rm <*
          USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                        'REPRESENTATION_MAP.MAPPED_REPRESENTATION') |
          ('REPRESENTATION_SCHEMA.SYMBOL_REPRESENTATION_MAP'
             IN TYPEOF(rm))) |
         NOT (SIZEOF (QUERY (a_s <* QUERY (mi <* srm.map_usage |
           ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL' IN TYPEOF(mi))) |
         NOT (SIZEOF (QUERY(aso <*
             USEDIN(a_s, 'PRESENTATION_APPEARANCE_SCHEMA.' +
                         'STYLED_ITEM.ITEM') |
             NOT ('AIC_DRAUGHTING_ANNOTATION.ANNOTATION_SYMBOL_OCCURRENCE'
                  IN TYPEOF(aso))
          )) = 0) )) = 0) )) > 0;
  WR5: 
    NOT (acyclic_mapped_item_usage (SELF));
  WR6: 
    SIZEOF (SELF.context_of_items.representations_in_context) = 1;
END_ENTITY;

ENTITY draughting_text_literal_with_delineation
  SUBTYPE OF (text_literal_with_delineation);
WHERE
  WR1: SELF.delineation IN ['underline', 'overline'];
END_ENTITY;

FUNCTION acyclic_mapped_item_usage (rep: representation) : BOOLEAN;
  -- returns TRUE if the representation contains one or more mapped_items
  -- that are a mapping of the representation itself
  LOCAL
    items : SET OF representation_item;
  END_LOCAL;

  items := QUERY (item <* rep.items |
           'AIC_DRAUGHTING_ANNOTATION.MAPPED_ITEM' IN TYPEOF (item));
  IF SIZEOF (items) = 0
  THEN 
    RETURN (FALSE);
  ELSE 
    REPEAT i := 1 TO HIINDEX (items);
      IF items[i]\mapped_item.mapping_source.mapped_representation :=: rep
      THEN 
        RETURN (TRUE);
      ELSE 
        RETURN (acyclic_mapped_item_usage(items[i]\
                  mapped_item.mapping_source.mapped_representation));
      END_IF;
    END_REPEAT;
  RETURN (FALSE);
  END_IF;
END_FUNCTION;

FUNCTION check_text_alignment (ct : composite_text) : BOOLEAN;

  LOCAL
    a : SET OF text_alignment := [];
  END_LOCAL;

  -- create a set of all the alignments
  REPEAT i := 1 TO HIINDEX (ct.collected_text);
    a := a + [ct.collected_text[i]\text_literal.alignment];
  END_REPEAT;

  -- if there is more than one element in the set
  -- then not all alignments were the same
  RETURN (SIZEOF(a) = 1);
END_FUNCTION;

FUNCTION check_text_font (ct : composite_text) : BOOLEAN;

  LOCAL
    f : SET OF font_select := [];
  END_LOCAL;

  -- build a set of all the fonts
  REPEAT i := 1 TO HIINDEX (ct.collected_text);
    f := f + [ct.collected_text[i]\text_literal.font];
  END_REPEAT;

  -- if there is more than one element in the set
  -- then not all fonts were the same
  RETURN (SIZEOF(f) <= 1);
END_FUNCTION;

END_SCHEMA; -- aic_draughting_annotation
SCHEMA aic_faceted_brep;
  
USE FROM geometry_schema ( axis2_placement_3d, cartesian_point, cartesian_transformation_operator_3d, elementary_surface, plane);
 USE FROM geometric_model_schema ( brep_with_voids, faceted_brep, manifold_solid_brep);
 REFERENCE FROM geometric_model_schema ( msb_shells);
 USE FROM topology_schema ( closed_shell, connected_face_set, face_bound, face_outer_bound, face_surface, oriented_closed_shell, poly_loop);
 USE FROM representation_schema ( mapped_item);
 USE FROM product_property_representation_schema ( shape_representation);
  
ENTITY faceted_brep_shape_representation 
 SUBTYPE OF ( shape_representation );
 WHERE 
WR1 : 
SIZEOF ( 
QUERY ( it <* items| NOT ( SIZEOF ([ 'AIC_FACETED_BREP.FACETED_BREP', 'AIC_FACETED_BREP.MAPPED_ITEM', 'AIC_FACETED_BREP.AXIS2_PLACEMENT_3D' ] * TYPEOF (it)) = 1) )) = 0;
WR2 : 
SIZEOF ( 
QUERY ( it <* items| ( SIZEOF ([ 'AIC_FACETED_BREP.FACETED_BREP', 'AIC_FACETED_BREP.MAPPED_ITEM' ] * TYPEOF (it)) = 1) )) > 0;
WR3 : 
SIZEOF ( 
QUERY ( fbrep <* 
QUERY ( it <* items| ('AIC_FACETED_BREP.FACETED_BREP' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( csh <* msb_shells(fbrep)| NOT ( SIZEOF ( 
QUERY ( fcs <* csh\connected_face_set.cfs_faces| NOT (('AIC_FACETED_BREP.FACE_SURFACE' IN TYPEOF (fcs)) AND (('AIC_FACETED_BREP.PLANE' IN TYPEOF (fcs\face_surface.face_geometry)) AND ('AIC_FACETED_BREP.CARTESIAN_POINT' IN TYPEOF (fcs\face_surface.face_geometry\elementary_surface.position.location)))) )) = 0) )) = 0) )) = 0;
WR4 : 
SIZEOF ( 
QUERY ( fbrep <* 
QUERY ( it <* items| ('AIC_FACETED_BREP.FACETED_BREP' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( csh <* msb_shells(fbrep)| NOT ( SIZEOF ( 
QUERY ( fcs <* csh\connected_face_set.cfs_faces| NOT ( SIZEOF ( 
QUERY ( bnds <* fcs.bounds| ('AIC_FACETED_BREP.FACE_OUTER_BOUND' IN TYPEOF (bnds)) )) = 1) )) = 0) )) = 0) )) = 0;
WR5 : 
SIZEOF ( 
QUERY ( msb <* 
QUERY ( it <* items| ('AIC_FACETED_BREP.MANIFOLD_SOLID_BREP' IN TYPEOF (it)) )| ('AIC_FACETED_BREP.ORIENTED_CLOSED_SHELL' IN TYPEOF (msb\manifold_solid_brep.outer)) )) = 0;
WR6 : 
SIZEOF ( 
QUERY ( brv <* 
QUERY ( it <* items| ('AIC_FACETED_BREP.BREP_WITH_VOIDS' IN TYPEOF (it)) )| NOT ( SIZEOF ( 
QUERY ( csh <* brv\brep_with_voids.voids| csh\oriented_closed_shell.orientation )) = 0) )) = 0;
WR7 : 
SIZEOF ( 
QUERY ( mi <* 
QUERY ( it <* items| ('AIC_FACETED_BREP.MAPPED_ITEM' IN TYPEOF (it)) )| NOT ('AIC_FACETED_BREP.FACETED_BREP_SHAPE_REPRESENTATION' IN TYPEOF (mi\mapped_item.mapping_source.mapped_representation)) )) = 0;
 END_ENTITY ;
END_SCHEMA;
 
SCHEMA aic_geometric_tolerances;
  
USE FROM measure_schema ( derived_unit, named_unit);
 USE FROM product_property_definition_schema ( shape_aspect_relationship);
 USE FROM shape_aspect_definition_schema ( apex, centre_of_symmetry, composite_shape_aspect, datum, datum_feature, datum_reference, datum_target, derived_shape_aspect, extension, geometric_alignment, geometric_intersection, parallel_offset, perpendicular_to, referenced_modified_datum, shape_aspect_deriving_relationship, symmetric_shape_aspect, tangent);
 USE FROM shape_tolerance_schema ( dimension_related_tolerance_zone_element, geometric_tolerance, geometric_tolerance_relationship, geometric_tolerance_with_datum_reference, geometric_tolerance_with_defined_unit, modified_geometric_tolerance, projected_zone_definition, runout_zone_definition, runout_zone_orientation_reference_direction, tolerance_zone, tolerance_zone_definition);
  
ENTITY angularity_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) < 3;
 END_ENTITY ;
ENTITY circular_runout_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 2;
 END_ENTITY ;
ENTITY coaxiality_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 2;
 END_ENTITY ;
ENTITY common_datum 
 SUBTYPE OF ( composite_shape_aspect , datum );
 WHERE 
WR1 : 
SIZEOF (SELF.component_relationships) = 2;
WR2 : 
SIZEOF ( 
QUERY ( sar <* SELF.component_relationships| NOT (('AIC_GEOMETRIC_TOLERANCES.DATUM' IN TYPEOF (sar.related_shape_aspect)) AND NOT ('AIC_GEOMETRIC_TOLERANCES.COMMON_DATUM' IN TYPEOF (sar.related_shape_aspect))) )) = 0;
 END_ENTITY ;
ENTITY concentricity_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) = 1;
 END_ENTITY ;
ENTITY cylindricity_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF));
 END_ENTITY ;
ENTITY flatness_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF));
 END_ENTITY ;
ENTITY line_profile_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF)) OR ( SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 3);
WR2 : 
SIZEOF ( 
QUERY ( sar <* USEDIN (SELF\geometric_tolerance.toleranced_shape_aspect, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' + 'SHAPE_ASPECT_RELATIONSHIP.RELATING_SHAPE_ASPECT')| (sar.name IN [ 'affected plane association', 'resulting intersection curve association' ]) )) = 1;
 END_ENTITY ;
ENTITY parallelism_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) < 3;
 END_ENTITY ;
ENTITY perpendicularity_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 3;
 END_ENTITY ;
ENTITY position_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF)) OR ( SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 3);
 END_ENTITY ;
ENTITY roundness_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF));
 END_ENTITY ;
ENTITY straightness_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF));
 END_ENTITY ;
ENTITY surface_profile_tolerance 
 SUBTYPE OF ( geometric_tolerance );
 WHERE 
WR1 : NOT ('AIC_GEOMETRIC_TOLERANCES.' + 'GEOMETRIC_TOLERANCE_WITH_DATUM_REFERENCE' IN TYPEOF (SELF)) OR ( SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 3);
 END_ENTITY ;
ENTITY symmetry_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 3;
 END_ENTITY ;
ENTITY total_runout_tolerance 
 SUBTYPE OF ( geometric_tolerance_with_datum_reference );
 WHERE 
WR1 : 
SIZEOF (SELF\geometric_tolerance_with_datum_reference.datum_system) <= 2;
 END_ENTITY ;
END_SCHEMA;
 
(* EXPRESS short form corresponding to 10303-503 IS 
   WG12 N376 *)
SCHEMA aic_geometrically_bounded_2d_wireframe;
USE FROM geometric_model_schema    -- ISO 10303-42
    (geometric_curve_set,
     geometric_set);
USE FROM geometry_schema -- ISO 10303-42
   (axis2_placement_2d,
    b_spline_curve_with_knots,
    bezier_curve,
    circle,
    composite_curve,
    composite_curve_segment,
    curve,
    curve_replica,
    ellipse,
    geometric_representation_context,
    hyperbola,
    line,
    offset_curve_2d,
    parabola,
    point_on_curve,
    polyline,
    quasi_uniform_curve,
    rational_b_spline_curve,
    trimmed_curve,
    uniform_curve);
USE FROM product_property_representation_schema -- ISO 10303-41
   (shape_representation);
USE FROM representation_schema -- ISO 10303-43
   (mapped_item);
ENTITY geometrically_bounded_2d_wireframe_representation
  SUBTYPE OF (shape_representation);
WHERE
  WR1: SELF.context_of_items\geometric_representation_context.
            coordinate_space_dimension = 2;
  WR2: SIZEOF (QUERY (item <* SELF.items |
         NOT (SIZEOF (TYPEOF (item) *
['AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.GEOMETRIC_CURVE_SET',           
'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.AXIS2_PLACEMENT_2D',
            'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.MAPPED_ITEM']) = 1)
       )) = 0;
  WR3: SIZEOF (QUERY (item <* SELF.items |
         SIZEOF (TYPEOF (item) *
          
['AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.GEOMETRIC_CURVE_SET',
            'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.MAPPED_ITEM']) = 1
       )) >= 1;
  WR4: SIZEOF (QUERY (mi <* QUERY (item <* SELF.items |
     ('AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.MAPPED_ITEM'
           IN TYPEOF (item))) |
         NOT ('AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.' +
              'GEOMETRICALLY_BOUNDED_2D_WIREFRAME_REPRESENTATION'
           IN TYPEOF
              (mi\mapped_item.mapping_source.mapped_representation))
       )) = 0;
  WR5: SIZEOF (QUERY (gcs <* QUERY (item <* SELF.items |
     ('AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.GEOMETRIC_CURVE_SET'
                IN TYPEOF (item))) |
         NOT (SIZEOF (QUERY (elem <* gcs\geometric_set.elements |
           NOT (SIZEOF (TYPEOF (elem) *
             ['AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.B_SPLINE_CURVE',
              'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.CIRCLE',
              'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.COMPOSITE_CURVE',
              'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.ELLIPSE',
              'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.OFFSET_CURVE_2D',
              'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.POINT',
              'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.POLYLINE',
              'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.TRIMMED_CURVE']) =
               1)
         )) = 0)
       )) = 0;
  WR6: SIZEOF (QUERY (gcs <* QUERY (item <* SELF.items |
     ('AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.GEOMETRIC_CURVE_SET'
                IN TYPEOF (item))) |
         NOT (SIZEOF (QUERY (crv <* 
           QUERY (elem <* gcs\geometric_set.elements |
              ('AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.CURVE'
                   IN TYPEOF (elem))) |
           NOT (valid_basis_curve_in_2d_wireframe
              (crv))
         )) = 0)
       )) = 0;
  WR7: SIZEOF (QUERY (gcs <* QUERY (item <* SELF.items |
           ('AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.GEOMETRIC_CURVE_SET'
                IN TYPEOF (item))) |
         NOT (SIZEOF (QUERY (pnt <*
           QUERY (elem <* gcs\geometric_set.elements |
             ('AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.POINT'
                  IN TYPEOF(elem))) |
             NOT (SIZEOF (TYPEOF (pnt) *
               ['AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.CARTESIAN_POINT',
                'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.POINT_ON_CURVE'])
          = 1)
         )) = 0)
       )) = 0;
  WR8: SIZEOF (QUERY (gcs <* QUERY (item <* SELF.items |
        
     ('AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.GEOMETRIC_CURVE_SET'
           IN TYPEOF (item))) |
         NOT (SIZEOF (QUERY (pl <* 
           QUERY (elem <* gcs\geometric_set.elements |
             ('AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.POLYLINE'
                  IN TYPEOF (elem))) |
             NOT (SIZEOF (pl\polyline.points) >= 2)
         )) = 0)
       )) = 0;
END_ENTITY;
FUNCTION valid_basis_curve_in_2d_wireframe
   (crv: curve) : BOOLEAN;
   -- check for valid basic curve types
  IF SIZEOF (['AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.POLYLINE',
               'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.B_SPLINE_CURVE',
               'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.ELLIPSE',
               'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.CIRCLE'] * 
               TYPEOF (crv)) = 1
    THEN RETURN (TRUE);
  ELSE
    -- if the curve is a trimmed_curve
    IF (('AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.TRIMMED_CURVE') 
    IN TYPEOF (crv)) THEN
      -- if a line, parabola, or hyperbola is being trimmed, then valid
      IF SIZEOF (['AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.LINE',
                   'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.PARABOLA',
                   'AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.HYPERBOLA'] *
           TYPEOF(crv\trimmed_curve.basis_curve)) = 1
        THEN RETURN (TRUE);
      -- otherwise, recursively check basis_curve
      ELSE RETURN (valid_basis_curve_in_2d_wireframe
                         (crv\trimmed_curve.basis_curve));
      END_IF;
    ELSE
      -- recursively check the offset_curve basis curve
      IF (('AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.OFFSET_CURVE_2D') 
      IN TYPEOF (crv))
        THEN RETURN (valid_basis_curve_in_2d_wireframe
                           (crv\offset_curve_2d.basis_curve));
      ELSE
        -- recursively check the curve_replica parent curve
        IF (('AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.CURVE_REPLICA') 
        IN TYPEOF (crv))
          THEN RETURN (valid_basis_curve_in_2d_wireframe
                         (crv\curve_replica.parent_curve));
        ELSE
          -- recursively check the composite_curve segments
          IF (('AIC_GEOMETRICALLY_BOUNDED_2D_WIREFRAME.COMPOSITE_CURVE') 
          IN TYPEOF (crv)) THEN
            RETURN (SIZEOF (QUERY (ccs <* crv\composite_curve.segments |
                      NOT (valid_basis_curve_in_2d_wireframe
                             (ccs.parent_curve)))) = 0);
          END_IF;
        END_IF;
      END_IF;
    END_IF;
  END_IF;
  RETURN (FALSE);
END_FUNCTION;

END_SCHEMA;  --aic_geometrically_bounded_2d_wireframe



(* ISO 10303-507, TC 184/SC4/WG12 N564 *)

SCHEMA aic_geometrically_bounded_surface;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set); 

USE FROM geometric_model_schema   -- ISO 10303-42
  (geometric_set); 

USE FROM geometry_schema   -- ISO 10303-42
  (axis1_placement,
   axis2_placement_2d,
   axis2_placement_3d,
   b_spline_curve,
   b_spline_curve_with_knots,
   b_spline_surface,
   b_spline_surface_with_knots,
   bezier_curve,
   bezier_surface,
   boundary_curve,
   bounded_pcurve,
   bounded_surface_curve,
   cartesian_point,
   cartesian_transformation_operator_3d,
   circle,
   composite_curve,
   composite_curve_on_surface,
   composite_curve_segment,
   conical_surface,
   curve,
   curve_bounded_surface,
   curve_replica,
   cylindrical_surface,
   degenerate_pcurve,
   degenerate_toroidal_surface,
   direction,
   ellipse,
   evaluated_degenerate_pcurve,
   geometric_representation_context,
   hyperbola,
   intersection_curve,
   line,
   offset_curve_3d,
   offset_surface,
   outer_boundary_curve,
   parabola,
   pcurve,
   plane,
   point,
   point_on_curve,
   point_on_surface,
   polyline,
   quasi_uniform_curve,
   quasi_uniform_surface,
   rational_b_spline_curve,
   rational_b_spline_surface,
   rectangular_composite_surface,
   rectangular_trimmed_surface,
   reparametrised_composite_curve_segment,
   seam_curve,
   spherical_surface,
   surface,
   surface_curve,
   surface_of_linear_extrusion,
   surface_of_revolution,
   surface_patch,
   surface_replica,
   swept_surface,
   toroidal_surface,
   trimmed_curve,
   uniform_curve,
   uniform_surface,
   vector); 

USE FROM product_property_representation_schema   -- ISO 10303-41
  (shape_representation); 

USE FROM representation_schema   -- ISO 10303-43
  (definitional_representation,
   mapped_item,
   parametric_representation_context,
   representation,
   representation_item,
   representation_map); 


ENTITY geometrically_bounded_surface_shape_representation
  SUBTYPE OF (shape_representation);
WHERE
  WR1: SIZEOF(QUERY(it <* SELF.items | NOT (SIZEOF(['AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.MAPPED_ITEM', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.AXIS2_PLACEMENT_3D'] * TYPEOF(it)) = 1))) = 0;
  WR2: SIZEOF(QUERY(it <* SELF.items | SIZEOF(['AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.MAPPED_ITEM'] * TYPEOF(it)) = 1)) > 0;
  WR3: SIZEOF(QUERY(mi <* QUERY(it <* SELF.items | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.MAPPED_ITEM' IN TYPEOF(it)) | NOT (('AIC_GEOMETRICALLY_BOUNDED_SURFACE.' + 'GEOMETRICALLY_BOUNDED_SURFACE_SHAPE_REPRESENTATION' IN TYPEOF(mi\mapped_item.mapping_source.mapped_representation)) AND (SIZEOF(QUERY(mr_it <* mi\mapped_item.mapping_source.mapped_representation.items | ('AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET' IN TYPEOF(mr_it)))) > 0)))) = 0;
  WR4: SIZEOF(QUERY(gs <* QUERY(it <* SELF.items | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET' IN TYPEOF(it)) | NOT (SIZEOF(QUERY(pnt <* QUERY(gsel <* gs\geometric_set.elements | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.POINT' IN TYPEOF(gsel)) | NOT (gbsf_check_point(pnt)))) = 0))) = 0;
  WR5: SIZEOF(QUERY(gs <* QUERY(it <* SELF.items | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET' IN TYPEOF(it)) | NOT (SIZEOF(QUERY(cv <* QUERY(gsel <* gs\geometric_set.elements | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.CURVE' IN TYPEOF(gsel)) | NOT (gbsf_check_curve(cv)))) = 0))) = 0;
  WR6: SIZEOF(QUERY(gs <* QUERY(it <* SELF.items | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET' IN TYPEOF(it)) | NOT (SIZEOF(QUERY(sf <* QUERY(gsel <* gs\geometric_set.elements | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.SURFACE' IN TYPEOF(gsel)) | NOT (gbsf_check_surface(sf)))) = 0))) = 0;
  WR7: SIZEOF(QUERY(gs <* QUERY(it <* SELF.items | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.GEOMETRIC_SET' IN TYPEOF(it)) | SIZEOF(QUERY(gsel <* gs\geometric_set.elements | 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.SURFACE' IN TYPEOF(gsel))) > 0)) > 0;
END_ENTITY;

FUNCTION gbsf_check_point
 (pnt : point) : BOOLEAN; 
  IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.CARTESIAN_POINT' IN TYPEOF(pnt) THEN
    RETURN (TRUE);
  ELSE
    IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.POINT_ON_CURVE' IN TYPEOF(pnt) THEN
      RETURN (gbsf_check_curve(pnt\point_on_curve.basis_curve));
    ELSE
      IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.POINT_ON_SURFACE' IN TYPEOF(pnt) THEN
        RETURN (gbsf_check_surface(pnt\point_on_surface.basis_surface));
      ELSE
        IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.DEGENERATE_PCURVE' IN TYPEOF(pnt) THEN
          RETURN ((gbsf_check_curve(pnt\degenerate_pcurve.reference_to_curve\representation.items[1])) AND (gbsf_check_surface(pnt\degenerate_pcurve.basis_surface)));
        END_IF;
      END_IF;
    END_IF;
  END_IF;
  RETURN (FALSE);
      END_FUNCTION; 

FUNCTION gbsf_check_curve
 (cv : representation_item) : BOOLEAN; 
  IF SIZEOF(['AIC_GEOMETRICALLY_BOUNDED_SURFACE.BOUNDED_CURVE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.CONIC', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.CURVE_REPLICA', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.LINE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.OFFSET_CURVE_3D'] * TYPEOF(cv)) > 1 THEN
    RETURN (FALSE);
  END_IF;
  IF SIZEOF(['AIC_GEOMETRICALLY_BOUNDED_SURFACE.CIRCLE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.ELLIPSE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.TRIMMED_CURVE'] * TYPEOF(cv)) = 1 THEN
    RETURN (TRUE);
  ELSE
    IF (('AIC_GEOMETRICALLY_BOUNDED_SURFACE.B_SPLINE_CURVE' IN TYPEOF(cv)) AND (cv\b_spline_curve.self_intersect = FALSE) OR (cv\b_spline_curve.self_intersect = UNKNOWN)) THEN
      RETURN (TRUE);
    ELSE
      IF (('AIC_GEOMETRICALLY_BOUNDED_SURFACE.COMPOSITE_CURVE' IN TYPEOF(cv)) AND (cv\composite_curve.self_intersect = FALSE) OR (cv\composite_curve.self_intersect = UNKNOWN)) THEN
        RETURN (SIZEOF(QUERY(seg <* cv\composite_curve.segments | NOT (gbsf_check_curve(seg.parent_curve)))) = 0);
      ELSE
        IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.CURVE_REPLICA' IN TYPEOF(cv) THEN
          RETURN (gbsf_check_curve(cv\curve_replica.parent_curve));
        ELSE
          IF (('AIC_GEOMETRICALLY_BOUNDED_SURFACE.OFFSET_CURVE_3D' IN TYPEOF(cv)) AND ((cv\offset_curve_3d.self_intersect = FALSE) OR (cv\offset_curve_3d.self_intersect = UNKNOWN)) AND (NOT ('AIC_GEOMETRICALLY_BOUNDED_SURFACE.POLYLINE' IN TYPEOF(cv\offset_curve_3d.basis_curve)))) THEN
            RETURN (gbsf_check_curve(cv\offset_curve_3d.basis_curve));
          ELSE
            IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.PCURVE' IN TYPEOF(cv) THEN
              RETURN ((gbsf_check_curve(cv\pcurve.reference_to_curve\representation.items[1])) AND (gbsf_check_surface(cv\pcurve.basis_surface)));
            ELSE
              IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.POLYLINE' IN TYPEOF(cv) THEN
                IF (SIZEOF(cv\polyline.points) >= 3) THEN
                  RETURN (TRUE);
                END_IF;
              ELSE
                IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.SURFACE_CURVE' IN TYPEOF(cv) THEN
                  IF gbsf_check_curve(cv\surface_curve.curve_3d) THEN
                    REPEAT i := 1 TO SIZEOF(cv\surface_curve.associated_geometry);
                      IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.SURFACE' IN TYPEOF(cv\surface_curve.associated_geometry[i]) THEN
                        IF NOT gbsf_check_surface(cv\surface_curve.associated_geometry[i]) THEN
                          RETURN (FALSE);
                        END_IF;
                      ELSE
                        IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.PCURVE' IN TYPEOF(cv\surface_curve.associated_geometry[i]) THEN
                          IF NOT gbsf_check_curve(cv\surface_curve.associated_geometry[i]) THEN
                            RETURN (FALSE);
                          END_IF;
                        END_IF;
                      END_IF;
                    END_REPEAT;
                    RETURN (TRUE);
                  END_IF;
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
  END_IF;
  RETURN (FALSE);
      END_FUNCTION; 

FUNCTION gbsf_check_surface
 (sf : surface) : BOOLEAN; 
  IF (('AIC_GEOMETRICALLY_BOUNDED_SURFACE.B_SPLINE_SURFACE' IN TYPEOF(sf)) AND (sf\b_spline_surface.self_intersect = FALSE) OR (sf\b_spline_surface.self_intersect = UNKNOWN)) THEN
    RETURN (TRUE);
  ELSE
    IF SIZEOF(['AIC_GEOMETRICALLY_BOUNDED_SURFACE.SPHERICAL_SURFACE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.TOROIDAL_SURFACE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.CURVE_BOUNDED_SURFACE', 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.RECTANGULAR_TRIMMED_SURFACE'] * TYPEOF(sf)) = 1 THEN
      RETURN (TRUE);
    ELSE
      IF (('AIC_GEOMETRICALLY_BOUNDED_SURFACE.OFFSET_SURFACE' IN TYPEOF(sf)) AND (sf\offset_surface.self_intersect = FALSE) OR (sf\offset_surface.self_intersect = UNKNOWN)) THEN
        RETURN (gbsf_check_surface(sf\offset_surface.basis_surface));
      ELSE
        IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.RECTANGULAR_COMPOSITE_SURFACE' IN TYPEOF(sf) THEN
          REPEAT i := 1 TO SIZEOF(sf\rectangular_composite_surface.segments);
            REPEAT j := 1 TO SIZEOF(sf\rectangular_composite_surface.segments[i]);
              IF NOT (gbsf_check_surface(sf\rectangular_composite_surface.segments[i][j].parent_surface)) THEN
                RETURN (FALSE);
              END_IF;
            END_REPEAT;
          END_REPEAT;
          RETURN (TRUE);
        ELSE
          IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.SURFACE_REPLICA' IN TYPEOF(sf) THEN
            RETURN (gbsf_check_surface(sf\surface_replica.parent_surface));
          ELSE
            IF 'AIC_GEOMETRICALLY_BOUNDED_SURFACE.SURFACE_OF_REVOLUTION' IN TYPEOF(sf) THEN
              RETURN (gbsf_check_curve(sf\swept_surface.swept_curve));
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
  END_IF;
  RETURN (FALSE);
      END_FUNCTION; 

END_SCHEMA;  -- aic_geometrically_bounded_surface
 (* part 521 Manifold subsurface AIC EXPRESS listing WG12 N1308
 2002-07-23 *)
 SCHEMA aic_manifold_subsurface;  --- extracted from part 521 IS WG12 N1307
  USE FROM aic_topologically_bounded_surface; -- ISO 10303-511

  USE FROM geometry_schema    -- ISO  10303-42
      (cartesian_transformation_operator_3d);
  USE FROM topology_schema  -- ISO  10303-42
      (closed_shell,
       connected_face_set,
       connected_face_sub_set,
       face,
       open_shell,
       subedge,
       subface);

  USE FROM representation_schema(mapped_item);   -- ISO  10303-43

  USE FROM product_property_representation_schema   -- ISO  10303-41
      (shape_representation);

 ENTITY manifold_subsurface_shape_representation
 SUBTYPE OF (shape_representation);
 WHERE
   WR1: SIZEOF (QUERY (it <* SELF.items |
          NOT (SIZEOF (['AIC_MANIFOLD_SUBSURFACE.CONNECTED_FACE_SUB_SET',
                'AIC_MANIFOLD_SUBSURFACE.MAPPED_ITEM',
                'AIC_MANIFOLD_SUBSURFACE.AXIS2_PLACEMENT_3D'] *
                   TYPEOF(it)) = 1))) = 0;
   WR2: SIZEOF (QUERY (it <* SELF.items |
         SIZEOF(['AIC_MANIFOLD_SUBSURFACE.CONNECTED_FACE_SUB_SET',
         'AIC_MANIFOLD_SUBSURFACE.MAPPED_ITEM'] * TYPEOF(it)) =1 )) > 0;
   WR3: SIZEOF (QUERY (mi <*  QUERY (it <* items |
                 'AIC_MANIFOLD_SUBSURFACE.MAPPED_ITEM' IN TYPEOF(it)) |
   NOT ('AIC_MANIFOLD_SUBSURFACE.MANIFOLD_SUBSURFACE_SHAPE_REPRESENTATION' IN
             TYPEOF(mi\mapped_item.mapping_source.
                           mapped_representation)))) = 0;
   WR4: SIZEOF (QUERY (cfss <* QUERY (it <* SELF.items |
           'AIC_MANIFOLD_SUBSURFACE.CONNECTED_FACE_SUB_SET' IN TYPEOF(it)) |
          NOT('AIC_MANIFOLD_SUBSURFACE.OPEN_SHELL' IN TYPEOF(cfss)))) = 0;
   WR5: SIZEOF (QUERY (cfss <* QUERY (it <* SELF.items |
           'AIC_MANIFOLD_SUBSURFACE.CONNECTED_FACE_SUB_SET' IN TYPEOF(it)) |
          NOT( (('AIC_MANIFOLD_SUBSURFACE.CONNECTED_FACE_SUB_SET' IN
                   TYPEOF(cfss.parent_face_set)) AND
            (SIZEOF (QUERY (fac <* cfss.parent_face_set.cfs_faces | NOT
                 advanced_face_properties(fac))) = 0)) OR
             (SIZEOF (QUERY (fac <* cfss.parent_face_set.cfs_faces | NOT
              ('AIC_MANIFOLD_SUBSURFACE.ADVANCED_FACE' IN TYPEOF(fac)))) = 0)
                    ))) = 0;
   WR6: SIZEOF (QUERY (cfss <* QUERY (it <* SELF.items |
           'AIC_MANIFOLD_SUBSURFACE.CONNECTED_FACE_SUB_SET' IN TYPEOF(it)) |
          ( SIZEOF (QUERY (fac <* cfss\connected_face_set.cfs_faces  | NOT
              advanced_face_properties(fac))) = 0))) = 0;
   WR7: SIZEOF (QUERY (cfss <* QUERY (it <* SELF.items |
          'AIC_MANIFOLD_SUBSURFACE.CONNECTED_FACE_SUB_SET' IN TYPEOF(it)) |
             NOT (SIZEOF (QUERY(fcs <* cfss\connected_face_set.cfs_faces |
               ('AIC_MANIFOLD_SUBSURFACE.SUBFACE' IN TYPEOF(fcs)) AND
            NOT (SIZEOF(QUERY (elp_fbnds <* QUERY (bnds <* fcs.bounds |
         'AIC_MANIFOLD_SUBSURFACE.EDGE_LOOP' IN TYPEOF(bnds.bound)) |
                NOT (SIZEOF (QUERY (oe <* elp_fbnds.bound\path.edge_list |
                  NOT(('AIC_MANIFOLD_SUBSURFACE.EDGE_CURVE' IN
            TYPEOF(oe.edge_element)) OR
           ('AIC_MANIFOLD_SUBSURFACE.SUBEDGE' IN
            TYPEOF(oe.edge_element)) ))) = 0
                   ))) = 0
                 ))) = 0
             ))) = 0;
   WR8: SIZEOF (QUERY (cfss <* QUERY (it <* SELF.items |
           'AIC_MANIFOLD_SUBSURFACE.CONNECTED_FACE_SUB_SET' IN TYPEOF(it)) |
             NOT (SIZEOF (QUERY(fcs <* cfss\connected_face_set.cfs_faces |
           ('AIC_MANIFOLD_SUBSURFACE.SUBFACE' IN TYPEOF(fcs)) AND
               NOT (SIZEOF(QUERY (elp_fbnds <* QUERY (bnds <* fcs.bounds |
         'AIC_MANIFOLD_SUBSURFACE.EDGE_LOOP' IN TYPEOF(bnds.bound)) |
                 NOT (SIZEOF (QUERY (oe <* elp_fbnds.bound\path.edge_list |
          NOT(('AIC_MANIFOLD_SUBSURFACE.VERTEX_POINT' IN TYPEOF(oe.edge_start))
                AND ('AIC_MANIFOLD_SUBSURFACE.VERTEX_POINT' IN
                 TYPEOF(oe.edge_end))
            ))) = 0
              ))) = 0
               ))) = 0
                   ))) = 0;
   WR9: SIZEOF (QUERY (cfss <* QUERY (it <* SELF.items |
           'AIC_MANIFOLD_SUBSURFACE.CONNECTED_FACE_SUB_SET' IN TYPEOF(it)) |
             NOT (SIZEOF (QUERY(fcs <* cfss\connected_face_set.cfs_faces |
              ( 'AIC_MANIFOLD_SUBSURFACE.SUBFACE' IN TYPEOF(fcs)) AND
              ( NOT (SIZEOF(QUERY  (bnds <* fcs.bounds |
         NOT (SIZEOF (['AIC_MANIFOLD_SUBSURFACE.EDGE_LOOP',
                'AIC_MANIFOLD_SUBSURFACE.VERTEX_LOOP'] *
                   TYPEOF(bnds.bound)) = 1 )
                   )) = 0)
                 ))) = 0
             ))) = 0;
   WR10: SIZEOF (QUERY (cfss <* QUERY (it <* SELF.items |
           'AIC_MANIFOLD_SUBSURFACE.CONNECTED_FACE_SUB_SET' IN TYPEOF(it)) |
             NOT (SIZEOF (QUERY(fcs <* cfss\connected_face_set.cfs_faces |
              ( 'AIC_MANIFOLD_SUBSURFACE.SUBFACE' IN TYPEOF(fcs)) AND
              ( NOT (SIZEOF(QUERY (elp_fbnds <* QUERY (bnds <* fcs.bounds |
         'AIC_MANIFOLD_SUBSURFACE.EDGE_LOOP' IN TYPEOF(bnds.bound)) |
                 NOT (SIZEOF (QUERY (oe <* elp_fbnds.bound\path.edge_list |
                   NOT (SIZEOF (['AIC_MANIFOLD_SUBSURFACE.LINE',
                         'AIC_MANIFOLD_SUBSURFACE.CONIC',
                         'AIC_MANIFOLD_SUBSURFACE.POLYLINE',
                         'AIC_MANIFOLD_SUBSURFACE.SURFACE_CURVE',
                         'AIC_MANIFOLD_SUBSURFACE.B_SPLINE_CURVE' ] *
            TYPEOF(oe.edge_element\edge_curve.edge_geometry)) = 1 )
               )) = 0
               ))) = 0
                 )))) = 0
                    ))) = 0;
   WR11: SIZEOF (QUERY (cfss <* QUERY (it <* SELF.items |
           'AIC_MANIFOLD_SUBSURFACE.CONNECTED_FACE_SUB_SET' IN TYPEOF(it)) |
             NOT (SIZEOF (QUERY(fcs <* cfss\connected_face_set.cfs_faces |
              ( 'AIC_MANIFOLD_SUBSURFACE.SUBFACE' IN TYPEOF(fcs)) AND
               (NOT (SIZEOF(QUERY (elp_fbnds <* QUERY (bnds <* fcs.bounds |
         'AIC_MANIFOLD_SUBSURFACE.EDGE_LOOP' IN TYPEOF(bnds.bound)) |
                NOT (SIZEOF (QUERY (oe <* elp_fbnds.bound\path.edge_list |
                   ('AIC_MANIFOLD_SUBSURFACE.SURFACE_CURVE' IN
            TYPEOF(oe.edge_element\edge_curve.edge_geometry)) AND
            (NOT ((SIZEOF (QUERY (sc_ag <*
            oe.edge_element\edge_curve.edge_geometry\
            surface_curve.associated_geometry |
            NOT ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.PCURVE' IN
            TYPEOF(sc_ag)))) = 0)))
               )) = 0
               ))) = 0
                   )))) = 0
                    ))) = 0;
   WR12: SIZEOF (QUERY (cfss <* QUERY (it <* SELF.items |
           'AIC_MANIFOLD_SUBSURFACE.CONNECTED_FACE_SUB_SET' IN TYPEOF(it)) |
             NOT (SIZEOF (QUERY(fcs <* cfss\connected_face_set.cfs_faces |
              ( 'AIC_MANIFOLD_SUBSURFACE.SUBFACE' IN TYPEOF(fcs)) AND
               (NOT (SIZEOF(QUERY (elp_fbnds <* QUERY (bnds <* fcs.bounds |
         'AIC_MANIFOLD_SUBSURFACE.EDGE_LOOP' IN TYPEOF(bnds.bound)) |
                NOT (SIZEOF (QUERY (oe <* elp_fbnds.bound\path.edge_list |
                   ('AIC_MANIFOLD_SUBSURFACE.POLYLINE' IN
            TYPEOF(oe.edge_element\edge_curve.edge_geometry)) AND
            (NOT (SIZEOF (oe\oriented_edge.edge_element\
                  edge_curve.edge_geometry\polyline.points) >= 3))
               )) = 0
               ))) = 0
                   )))) = 0
                    ))) = 0;
 END_ENTITY;

FUNCTION advanced_face_properties (testface : face) : BOOLEAN;
(* return TRUE if testface is of type advanced_face *)
IF 'AIC_MANIFOLD_SUBSURFACE.ADVANCED_FACE' IN TYPEOF(testface) THEN
    RETURN (TRUE);
END_IF;
(* if testface is a subface recursively test the parent_face,
return FALSE for all other types of face *)
IF  ('AIC_MANIFOLD_SUBSURFACE.SUBFACE' IN TYPEOF(testface)) THEN
   RETURN(advanced_face_properties(testface.parent_face));
   ELSE  RETURN (FALSE);
END_IF;
END_FUNCTION;

END_SCHEMA; -- end AIC_MANIFOLD_SUBSURFACE SCHEMA
(* ISO 10303-509, TC 184/SC4/WG12 N578 *)
SCHEMA aic_manifold_surface; 
 
  USE FROM aic_topologically_bounded_surface;       -- ISO 10303-511
 
  USE FROM geometric_model_schema (                 -- ISO 10303-42
      shell_based_surface_model); 
 
  USE FROM geometry_schema (                        -- ISO 10303-42
      b_spline_curve,
      b_spline_surface,
      bounded_pcurve,
      bounded_surface_curve,
      cartesian_transformation_operator_3d,
      curve, 
      curve_replica, 
      degenerate_pcurve, 
      evaluated_degenerate_pcurve, 
      intersection_curve, 
      offset_curve_3d, 
      offset_surface, 
      point_on_curve, 
      point_on_surface, 
      seam_curve, 
      surface, 
      surface_replica); 

  USE FROM product_property_representation_schema ( -- ISO 10303-41 
      shape_representation); 
 
  USE FROM representation_schema (                  -- ISO 10303-43
      mapped_item,
      representation,
      representation_item,
      representation_map);
 
  USE FROM topology_schema (                        -- ISO 10303-42
      closed_shell,
      connected_face_set, 
      face,
      open_shell, 
      oriented_closed_shell);

ENTITY manifold_surface_shape_representation 
   SUBTYPE OF (shape_representation); 
WHERE 
  WR1: SIZEOF (QUERY (it <* SELF.items |
       NOT (SIZEOF (['AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL',
       'AIC_MANIFOLD_SURFACE.MAPPED_ITEM',
       'AIC_MANIFOLD_SURFACE.AXIS2_PLACEMENT_3D'] * TYPEOF (it)) = 1))) = 0;
  WR2: SIZEOF (QUERY (it <* SELF.items |
       SIZEOF (['AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL',
       'AIC_MANIFOLD_SURFACE.MAPPED_ITEM'] * TYPEOF (it)) = 1)) > 0;
  WR3: SIZEOF (QUERY (mi <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.MAPPED_ITEM' IN TYPEOF (it)) |
       NOT (('AIC_MANIFOLD_SURFACE.MANIFOLD_SURFACE_SHAPE_REPRESENTATION'
       IN TYPEOF (mi\mapped_item.mapping_source.mapped_representation))
       AND
       (SIZEOF(QUERY (mr_it <*
       mi\mapped_item.mapping_source.mapped_representation.items |
       ('AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL'
       IN TYPEOF (mr_it)))) > 0 )))) = 0;
  WR4: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (sh <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (['AIC_MANIFOLD_SURFACE.OPEN_SHELL',
       'AIC_MANIFOLD_SURFACE.ORIENTED_CLOSED_SHELL',
       'AIC_MANIFOLD_SURFACE.CLOSED_SHELL']
       * TYPEOF (sh)) = 1))) = 0))) = 0;
  WR5: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT ('AIC_MANIFOLD_SURFACE.FACE_SURFACE' IN TYPEOF (fa)) )) = 0)))
       = 0))) = 0;
  WR6: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (msf_surface_check(fa\face_surface.face_geometry))))) = 0))) 
       = 0))) = 0;
  WR7: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (bnds <* fa.bounds |
       NOT (SIZEOF (['AIC_MANIFOLD_SURFACE.EDGE_LOOP',
       'AIC_MANIFOLD_SURFACE.VERTEX_LOOP']
       * TYPEOF (bnds.bound)) = 1))) = 0)))) = 0))) = 0))) = 0;
  WR8: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items|
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe <* elp_fbnds\path.edge_list |
       NOT ('AIC_MANIFOLD_SURFACE.EDGE_CURVE' IN TYPEOF 
       (oe.edge_element)))) = 0))) = 0)))) = 0))) = 0))) = 0;
  WR9: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe_cv <* QUERY (oe <* 
       elp_fbnds\path.edge_list |
       'AIC_MANIFOLD_SURFACE.EDGE_CURVE' IN TYPEOF (oe.edge_element)) |
       NOT (SIZEOF (['AIC_MANIFOLD_SURFACE.B_SPLINE_CURVE',
       'AIC_MANIFOLD_SURFACE.CONIC',
       'AIC_MANIFOLD_SURFACE.CURVE_REPLICA',
       'AIC_MANIFOLD_SURFACE.LINE',
       'AIC_MANIFOLD_SURFACE.OFFSET_CURVE_3D',
       'AIC_MANIFOLD_SURFACE.PCURVE',
       'AIC_MANIFOLD_SURFACE.POLYLINE',
       'AIC_MANIFOLD_SURFACE.SURFACE_CURVE'] * 
       TYPEOF (oe_cv.edge_element\edge_curve.edge_geometry)) 
       = 1))) = 0))) = 0)))) = 0))) = 0))) = 0;
 WR10: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe <* elp_fbnds\path.edge_list |
       NOT (msf_curve_check (oe.edge_element\edge_curve.edge_geometry)))) 
       = 0))) = 0)))) = 0))) = 0))) = 0;
 WR11: SIZEOF (QUERY(sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe <* elp_fbnds\path.edge_list|
       NOT (('AIC_MANIFOLD_SURFACE.VERTEX_POINT' IN TYPEOF
       (oe.edge_element.edge_start))
       AND
       ('AIC_MANIFOLD_SURFACE.VERTEX_POINT' IN
       TYPEOF (oe.edge_element.edge_end))))) 
       = 0))) = 0)))) = 0))) = 0))) = 0;
 WR12: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <*
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (elp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (QUERY (oe <* elp_fbnds\path.edge_list |
       NOT ((SIZEOF (['AIC_MANIFOLD_SURFACE.CARTESIAN_POINT',
       'AIC_MANIFOLD_SURFACE.DEGENERATE_PCURVE',
       'AIC_MANIFOLD_SURFACE.POINT_ON_CURVE',
       'AIC_MANIFOLD_SURFACE.POINT_ON_SURFACE'] * TYPEOF
       (oe.edge_element.edge_start\vertex_point.vertex_geometry)) = 1)
       AND
       (SIZEOF (['AIC_MANIFOLD_SURFACE.CARTESIAN_POINT',
       'AIC_MANIFOLD_SURFACE.DEGENERATE_PCURVE',
       'AIC_MANIFOLD_SURFACE.POINT_ON_CURVE',
       'AIC_MANIFOLD_SURFACE.POINT_ON_SURFACE'] * TYPEOF
       (oe.edge_element.edge_end\vertex_point.vertex_geometry)) = 1
       )))) = 0))) = 0)))) = 0))) = 0))) = 0;
 WR13: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <* 
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (vlp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.VERTEX_LOOP' IN TYPEOF (bnds.bound)) |
       NOT ('AIC_MANIFOLD_SURFACE.VERTEX_POINT' IN TYPEOF
       (vlp_fbnds\vertex_loop.loop_vertex)))) = 0)))) = 0))) 
       = 0))) = 0;
 WR14: SIZEOF (QUERY (sbsm <* QUERY (it <* SELF.items |
       'AIC_MANIFOLD_SURFACE.SHELL_BASED_SURFACE_MODEL' IN TYPEOF (it)) |
       NOT (SIZEOF (QUERY (cfs <* 
       sbsm\shell_based_surface_model.sbsm_boundary |
       NOT (SIZEOF (QUERY (fa <* cfs\connected_face_set.cfs_faces |
       NOT (('AIC_MANIFOLD_SURFACE.ADVANCED_FACE' IN TYPEOF (fa))
       OR
       (SIZEOF (QUERY (vlp_fbnds <* QUERY (bnds <* fa.bounds |
       'AIC_MANIFOLD_SURFACE.VERTEX_LOOP' IN TYPEOF (bnds.bound)) |
       NOT (SIZEOF (['AIC_MANIFOLD_SURFACE.CARTESIAN_POINT',
       'AIC_MANIFOLD_SURFACE.DEGENERATE_PCURVE',
       'AIC_MANIFOLD_SURFACE.POINT_ON_CURVE',
       'AIC_MANIFOLD_SURFACE.POINT_ON_SURFACE'] * TYPEOF
       (vlp_fbnds\vertex_loop.loop_vertex\vertex_point.vertex_geometry)) 
       = 1))) = 0)))) = 0))) = 0))) = 0;
END_ENTITY;

FUNCTION msf_curve_check (cv : representation_item) : BOOLEAN;  
 
(* This function varifies the validity of a curve in the context of a
   manifold surface model. Representation_items are
   valid input, however, they are supposed to be curves; otherwise
   this function will return false.
*)

(* complex subtypes of curve that are both bounded_curve and
   oneof conic, curve_replica, line, or offset_curve_3d are not
   valid
*)
IF SIZEOF (['AIC_MANIFOLD_SURFACE.BOUNDED_CURVE',
  'AIC_MANIFOLD_SURFACE.CONIC',
  'AIC_MANIFOLD_SURFACE.CURVE_REPLICA', 'AIC_MANIFOLD_SURFACE.LINE',
  'AIC_MANIFOLD_SURFACE.OFFSET_CURVE_3D'] * TYPEOF(cv)) > 1 THEN
  RETURN(FALSE);
END_IF;

(* b_spline_curves shall not self-intersect
 *)
IF (('AIC_MANIFOLD_SURFACE.B_SPLINE_CURVE' IN TYPEOF (cv)) AND
  (cv\b_spline_curve.self_intersect = FALSE)OR
  (cv\b_spline_curve.self_intersect = UNKNOWN)) THEN
  RETURN(TRUE);
ELSE

  (* conics and lines are valid curve types
   *)
  IF SIZEOF (['AIC_MANIFOLD_SURFACE.CONIC', 'AIC_MANIFOLD_SURFACE.LINE'] 
    * TYPEOF (cv)) = 1 THEN
    RETURN(TRUE);
  ELSE

    (* a curve_replica shall reference a valid curve
     *)
    IF 'AIC_MANIFOLD_SURFACE.CURVE_REPLICA' IN TYPEOF(cv) THEN
      RETURN (msf_curve_check(cv\curve_replica.parent_curve)); 
    ELSE 
 
      (* an offset_curve_3d shall not self-intersect and
         shall reference a valid curve; a polyline is not a
         valid basis_curve
       *)
      IF (('AIC_MANIFOLD_SURFACE.OFFSET_CURVE_3D' IN TYPEOF (cv))
        AND
        ((cv\offset_curve_3d.self_intersect = FALSE) OR
        (cv\offset_curve_3d.self_intersect = UNKNOWN))
        AND
        (NOT ('AIC_MANIFOLD_SURFACE.POLYLINE' IN TYPEOF
        (cv\offset_curve_3d.basis_curve)))) THEN
        RETURN (msf_curve_check(cv\offset_curve_3d.basis_curve)); 
      ELSE 
 
        (* a pcurve shall reference a valid curve and a valid
           basis_surface
         *)
        IF 'AIC_MANIFOLD_SURFACE.PCURVE' IN TYPEOF(cv) THEN 
          RETURN ((msf_curve_check
          (cv\pcurve.reference_to_curve\representation.items[1])) AND
          (msf_surface_check(cv\pcurve.basis_surface)));
        ELSE 
 
          (* a surface_curve references a curve_3d and one or
             two pcurves or one or two surfaces or one of
             each; all of these references shall be valid
           *)
          IF 'AIC_MANIFOLD_SURFACE.SURFACE_CURVE' IN TYPEOF(cv) THEN 

            (* if the curve reference is correct, check also the rest
             *)
            IF msf_curve_check(cv\surface_curve.curve_3d) THEN
              REPEAT i := 1 TO SIZEOF
              (cv\surface_curve.associated_geometry);

                (* do for one or two associated_geometrys:
                 *)
                IF 'AIC_MANIFOLD_SURFACE.SURFACE' IN 
                  TYPEOF (cv\surface_curve.associated_geometry[i]) THEN  
                  IF NOT msf_surface_check
                    (cv\surface_curve.associated_geometry[i]) THEN  
                    RETURN(FALSE);  
                  END_IF;  
                ELSE  
                  IF 'AIC_MANIFOLD_SURFACE.PCURVE' IN TYPEOF 
                    (cv\surface_curve.associated_geometry[i]) THEN  
                    IF NOT msf_curve_check
                      (cv\surface_curve.associated_geometry[i]) THEN 
                      RETURN(FALSE);  
                    END_IF;  
                  END_IF;  
                END_IF; 
              END_REPEAT;  
              RETURN(TRUE);
            END_IF; 
          ELSE

            (* a polyline shall have at least 3 points
             *)
            IF 'AIC_MANIFOLD_SURFACE.POLYLINE' IN TYPEOF(cv) THEN
              IF (SIZEOF (cv\polyline.points) >= 3) THEN RETURN (TRUE);
              END_IF;
            END_IF;
          END_IF; 
        END_IF; 
      END_IF; 
    END_IF; 
  END_IF; 
END_IF; 
(* FALSE is returned if the input parameter cv is not a valid curve.
 *)
RETURN (FALSE); 
END_FUNCTION;

FUNCTION msf_surface_check (surf : surface) : BOOLEAN;

(* This function varifies the validity of a surface in the
   context of a manifold surface model.
*)

  (* elementary_surfaces are valid surface types
   *)
  IF 'AIC_MANIFOLD_SURFACE.ELEMENTARY_SURFACE' IN TYPEOF(surf) THEN
    RETURN(TRUE);
  ELSE 

    (* a swept_surface shall have a valid sweeping curve
     *)
    IF 'AIC_MANIFOLD_SURFACE.SWEPT_SURFACE' IN TYPEOF (surf) THEN 
      RETURN (msf_curve_check(surf\swept_surface.swept_curve));  
    ELSE 
 
      (* an offset_surface shall not self-intersect and shall
         reference a valid surface
       *)
      IF (('AIC_MANIFOLD_SURFACE.OFFSET_SURFACE' IN TYPEOF (surf)) AND
        (surf\offset_surface.self_intersect = FALSE) OR 
        (surf\offset_surface.self_intersect = UNKNOWN)) THEN
        RETURN (msf_surface_check(surf\offset_surface.basis_surface));
      ELSE 
 
        (* a surface_replica shall have a valid parent surface
         *)
        IF 'AIC_MANIFOLD_SURFACE.SURFACE_REPLICA' IN TYPEOF(surf) THEN 
          RETURN(msf_surface_check(surf\surface_replica.parent_surface)); 
        ELSE

          (* a b_spline_surface shall not self-intersect
           *)
          IF (('AIC_MANIFOLD_SURFACE.B_SPLINE_SURFACE' IN TYPEOF(surf)) AND
            (surf\b_spline_surface.self_intersect = FALSE) OR
            (surf\b_spline_surface.self_intersect = UNKNOWN)) THEN
            RETURN(TRUE);
          END_IF;
        END_IF; 
      END_IF; 
    END_IF; 
  END_IF; 
  RETURN(FALSE); 
END_FUNCTION;

END_SCHEMA; (* aic_manifold_surface *)
SCHEMA aic_topologically_bounded_surface;
  
USE FROM geometry_schema ( axis2_placement_2d, axis2_placement_3d, bezier_curve, bezier_surface, b_spline_curve_with_knots, b_spline_surface_with_knots, cartesian_point, circle, composite_curve_on_surface, conical_surface, cylindrical_surface, degenerate_toroidal_surface, direction, ellipse, geometric_representation_context, hyperbola, line, parabola, pcurve, plane, polyline, quasi_uniform_curve, quasi_uniform_surface, rational_b_spline_curve, rational_b_spline_surface, spherical_surface, surface_curve, surface_of_linear_extrusion, surface_of_revolution, swept_surface, toroidal_surface, uniform_curve, uniform_surface, vector);
 USE FROM topology_schema ( edge, edge_curve, edge_loop, face_bound, face_outer_bound, face_surface, oriented_edge, path, vertex_loop, vertex_point);
 USE FROM representation_schema ( definitional_representation, parametric_representation_context);
 USE FROM measure_schema ( parameter_value);
  
ENTITY advanced_face 
 SUBTYPE OF ( face_surface );
 WHERE 
WR1 : 
SIZEOF ([ 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.ELEMENTARY_SURFACE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.B_SPLINE_SURFACE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.SWEPT_SURFACE' ] * TYPEOF (face_geometry)) = 1;
WR2 : 
SIZEOF ( 
QUERY ( elp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) )| NOT ( SIZEOF ( 
QUERY ( oe <* elp_fbnds.bound\path.edge_list| NOT ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_CURVE' IN TYPEOF (oe\oriented_edge.edge_element)) )) = 0) )) = 0;
WR3 : 
SIZEOF ( 
QUERY ( elp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) )| NOT ( SIZEOF ( 
QUERY ( oe <* elp_fbnds.bound\path.edge_list| NOT ( SIZEOF ([ 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.LINE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.CONIC', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.POLYLINE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.SURFACE_CURVE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.B_SPLINE_CURVE' ] * TYPEOF (oe.edge_element\edge_curve.edge_geometry)) = 1) )) = 0) )) = 0;
WR4 : 
SIZEOF ( 
QUERY ( elp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) )| NOT ( SIZEOF ( 
QUERY ( oe <* elp_fbnds.bound\path.edge_list| NOT ((('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.VERTEX_POINT' IN TYPEOF (oe\edge.edge_start)) AND ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.CARTESIAN_POINT' IN TYPEOF (oe\edge.edge_start\vertex_point.vertex_geometry))) AND (('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.VERTEX_POINT' IN TYPEOF (oe\edge.edge_end)) AND ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.CARTESIAN_POINT' IN TYPEOF (oe\edge.edge_end\vertex_point.vertex_geometry)))) )) = 0) )) = 0;
WR5 : 
SIZEOF ( 
QUERY ( elp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) )| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.ORIENTED_PATH' IN TYPEOF (elp_fbnds.bound)) )) = 0;
WR6 : NOT ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.SWEPT_SURFACE' IN TYPEOF (face_geometry)) OR ( SIZEOF ([ 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.LINE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.CONIC', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.POLYLINE', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.B_SPLINE_CURVE' ] * TYPEOF (face_geometry\swept_surface.swept_curve)) = 1);
WR7 : 
SIZEOF ( 
QUERY ( vlp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.VERTEX_LOOP' IN TYPEOF (bnds.bound)) )| NOT (('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.VERTEX_POINT' IN TYPEOF (vlp_fbnds\face_bound.bound\vertex_loop.loop_vertex)) AND ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.CARTESIAN_POINT' IN TYPEOF (vlp_fbnds\face_bound.bound\vertex_loop.loop_vertex\vertex_point.vertex_geometry))) )) = 0;
WR8 : 
SIZEOF ( 
QUERY ( bnd <* bounds| NOT ( SIZEOF ([ 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP', 'AIC_TOPOLOGICALLY_BOUNDED_SURFACE.VERTEX_LOOP' ] * TYPEOF (bnd.bound)) = 1) )) = 0;
WR9 : 
SIZEOF ( 
QUERY ( elp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) )| NOT ( SIZEOF ( 
QUERY ( oe <* elp_fbnds.bound\path.edge_list| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.SURFACE_CURVE' IN TYPEOF (oe\oriented_edge.edge_element\edge_curve.edge_geometry)) AND NOT ( SIZEOF ( 
QUERY ( sc_ag <* oe.edge_element\edge_curve.edge_geometry\surface_curve.associated_geometry| NOT ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.PCURVE' IN TYPEOF (sc_ag)) )) = 0) )) = 0) )) = 0;
WR10 : (NOT ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.SWEPT_SURFACE' IN TYPEOF (face_geometry)) OR (NOT ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.POLYLINE' IN TYPEOF (face_geometry\swept_surface.swept_curve)) OR ( SIZEOF (face_geometry\swept_surface.swept_curve\polyline.points) >= 3))) AND ( SIZEOF ( 
QUERY ( elp_fbnds <* 
QUERY ( bnds <* bounds| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.EDGE_LOOP' IN TYPEOF (bnds.bound)) )| NOT ( SIZEOF ( 
QUERY ( oe <* elp_fbnds.bound\path.edge_list| ('AIC_TOPOLOGICALLY_BOUNDED_SURFACE.POLYLINE' IN TYPEOF (oe\oriented_edge.edge_element\edge_curve.edge_geometry)) AND NOT ( SIZEOF (oe\oriented_edge.edge_element\edge_curve.edge_geometry\polyline.points) >= 3) )) = 0) )) = 0);
 END_ENTITY ;
END_SCHEMA;
 
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA application_context_schema; 

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value,
   get_id_value,
   id_attribute); 

REFERENCE FROM date_time_schema   -- ISO 10303-41
  (year_number); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (identifier,
   label,
   text); 


ENTITY application_context;
  application : label;
DERIVE
  description : text := get_description_value (SELF);
  id : identifier := get_id_value (SELF);
INVERSE
  context_elements : SET[1:?] OF application_context_element FOR frame_of_reference;
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY application_context_element
  SUPERTYPE OF (ONEOF (library_context,
                       product_concept_context,
                       product_context,
                       product_definition_context));
  name : label;
  frame_of_reference : application_context;
END_ENTITY;

ENTITY application_context_relationship;
  name : label;
  description : OPTIONAL text;
  relating_context : application_context;
  related_context : application_context;
END_ENTITY;

ENTITY application_protocol_definition;
  status : label;
  application_interpreted_model_schema_name : label;
  application_protocol_year : year_number;
  application : application_context;
END_ENTITY;

ENTITY library_context
  SUBTYPE OF (application_context_element);
  library_reference : label;
END_ENTITY;

ENTITY product_concept_context
  SUBTYPE OF (application_context_element);
  market_segment_type : label;
END_ENTITY;

ENTITY product_context
  SUBTYPE OF (application_context_element);
  discipline_type : label;
END_ENTITY;

ENTITY product_definition_context
  SUBTYPE OF (application_context_element);
  life_cycle_stage : label;
END_ENTITY;

END_SCHEMA;  -- application_context_schema
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 

SCHEMA approval_schema; 

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value,
   get_role,
   object_role,
   role_association); 

REFERENCE FROM date_time_schema   -- ISO 10303-41
  (date_time_select); 

REFERENCE FROM person_organization_schema   -- ISO 10303-41
  (person_organization_select); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   label,
   text); 


ENTITY approval;
  status : approval_status;
  level : label;
END_ENTITY;

ENTITY approval_date_time;
  date_time : date_time_select;
  dated_approval : approval;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY approval_person_organization;
  person_organization : person_organization_select;
  authorized_approval : approval;
  role : approval_role;
END_ENTITY;

ENTITY approval_relationship;
  name : label;
  description : OPTIONAL text;
  relating_approval : approval;
  related_approval : approval;
END_ENTITY;

ENTITY approval_role;
  role : label;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY approval_status;
  name : label;
END_ENTITY;

FUNCTION acyclic_approval_relationship
 (relation : approval_relationship; relatives : SET[1:?] OF approval; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF approval_relationship;
    END_LOCAL;

    IF relation.relating_approval IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(app <* bag_to_set(USEDIN(relation.relating_approval, 'APPROVAL_SCHEMA.' + 'APPROVAL_RELATIONSHIP.' + 'RELATED_APPROVAL')) | specific_relation IN TYPEOF(app));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_approval_relationship(x[i], relatives + relation.relating_approval, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- approval_schema
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 

SCHEMA basic_attribute_schema; 

REFERENCE FROM action_schema   -- ISO 10303-41
  (action,
   action_request_solution); 

REFERENCE FROM application_context_schema   -- ISO 10303-41
  (application_context); 

REFERENCE FROM approval_schema   -- ISO 10303-41
  (approval_date_time,
   approval_role); 

REFERENCE FROM configuration_management_schema   -- ISO 10303-44
  (configuration_design); 

REFERENCE FROM date_time_schema   -- ISO 10303-41
  (date_role,
   date_time_role,
   time_role); 

REFERENCE FROM effectivity_schema   -- ISO 10303-41
  (effectivity); 

REFERENCE FROM external_reference_schema   -- ISO 10303-41
  (external_source); 

REFERENCE FROM group_schema   -- ISO 10303-41
  (group); 

REFERENCE FROM management_resources_schema   -- ISO 10303-41
  (action_assignment,
   action_request_assignment,
   approval_assignment,
   certification_assignment,
   contract_assignment,
   document_reference,
   effectivity_assignment,
   external_referent_assignment,
   group_assignment,
   name_assignment,
   security_classification_assignment); 

REFERENCE FROM measure_schema   -- ISO 10303-41
  (derived_unit); 

REFERENCE FROM person_organization_schema   -- ISO 10303-41
  (address,
   organization_role,
   organizational_project,
   person_and_organization,
   person_and_organization_role,
   person_role); 

REFERENCE FROM product_definition_schema   -- ISO 10303-41
  (product_category,
   product_definition,
   product_definition_substitute); 

REFERENCE FROM product_property_definition_schema   -- ISO 10303-41
  (property_definition,
   shape_aspect,
   shape_aspect_relationship); 

REFERENCE FROM product_property_representation_schema   -- ISO 10303-41
  (context_dependent_shape_representation,
   property_definition_representation); 

REFERENCE FROM representation_schema   -- ISO 10303-43
  (representation); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (identifier,
   label,
   text); 


TYPE description_attribute_select = SELECT
   (action_request_solution, 
    application_context, 
    approval_role, 
    configuration_design, 
    context_dependent_shape_representation, 
    date_role, 
    date_time_role, 
    effectivity, 
    external_source, 
    organization_role, 
    person_and_organization, 
    person_and_organization_role, 
    person_role, 
    property_definition_representation, 
    representation, 
    time_role);
END_TYPE; 

TYPE id_attribute_select = SELECT
   (action, 
    address, 
    application_context, 
    group, 
    organizational_project, 
    product_category, 
    property_definition, 
    representation, 
    shape_aspect, 
    shape_aspect_relationship);
END_TYPE; 

TYPE name_attribute_select = SELECT
   (action_request_solution, 
    address, 
    configuration_design, 
    context_dependent_shape_representation, 
    derived_unit, 
    effectivity, 
    person_and_organization, 
    product_definition, 
    product_definition_substitute, 
    property_definition_representation);
END_TYPE; 

TYPE role_select = SELECT
   (action_assignment, 
    action_request_assignment, 
    approval_assignment, 
    approval_date_time, 
    certification_assignment, 
    contract_assignment, 
    document_reference, 
    effectivity_assignment, 
    external_referent_assignment, 
    group_assignment, 
    name_assignment, 
    security_classification_assignment);
END_TYPE; 

ENTITY description_attribute;
  attribute_value : text;
  described_item : description_attribute_select;
END_ENTITY;

ENTITY id_attribute;
  attribute_value : identifier;
  identified_item : id_attribute_select;
END_ENTITY;

ENTITY name_attribute;
  attribute_value : label;
  named_item : name_attribute_select;
END_ENTITY;

ENTITY object_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY role_association;
  role : object_role;
  item_with_role : role_select;
END_ENTITY;

FUNCTION get_description_value
 (obj : description_attribute_select) : text; 
  LOCAL
    description_bag : BAG OF description_attribute := (USEDIN(obj, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.' + 'DESCRIBED_ITEM'));
  END_LOCAL;

  IF SIZEOF(description_bag) = 1 THEN
    RETURN (description_bag[1].attribute_value);
  ELSE
    RETURN (?);
  END_IF;
END_FUNCTION; 

FUNCTION get_id_value
 (obj : id_attribute_select) : identifier; 
LOCAL
      id_bag : BAG OF id_attribute := (USEDIN(obj, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.' + 'IDENTIFIED_ITEM'));
END_LOCAL;
IF SIZEOF(id_bag) = 1 THEN
      RETURN (id_bag[1].attribute_value);
ELSE
      RETURN (?);
END_IF;
END_FUNCTION; 

FUNCTION get_name_value
 (obj : name_attribute_select) : label; 
  LOCAL
    name_bag : BAG OF name_attribute := (USEDIN(obj, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.' + 'NAMED_ITEM'));
  END_LOCAL;

  IF SIZEOF(name_bag) = 1 THEN
    RETURN (name_bag[1].attribute_value);
  ELSE
    RETURN (?);
  END_IF;
END_FUNCTION; 

FUNCTION get_role
 (obj : role_select) : object_role; 
  LOCAL
    role_bag : BAG OF role_association := (USEDIN(obj, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.' + 'ITEM_WITH_ROLE'));
  END_LOCAL;

  IF SIZEOF(role_bag) = 1 THEN
    RETURN (role_bag[1].role);
  ELSE
    RETURN (?);
  END_IF;
END_FUNCTION; 

END_SCHEMA;  -- basic_attribute_schema





(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N28872 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA certification_schema; 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (label,
   text); 


ENTITY certification;
  name : label;
  purpose : text;
  kind : certification_type;
END_ENTITY;

ENTITY certification_type;
  description : label;
END_ENTITY;

END_SCHEMA;  -- certification_schema



(* 
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N3213 - ISO/IS 10303-54 Classification and set theory - EXPRESS
Supersedes ISO TC184/SC4/WG12 N1510
*) 


SCHEMA classification_schema;

REFERENCE FROM group_schema   -- ISO 10303-41
  (group); 

REFERENCE FROM management_resources_schema   -- ISO 10303-41
  (classification_assignment); 


TYPE classification_select = EXTENSIBLE SELECT;
END_TYPE; 

TYPE complete_membership_select = EXTENSIBLE SELECT;
END_TYPE; 

ENTITY class
  SUBTYPE OF (group);
END_ENTITY;

ENTITY class_by_extension
  SUBTYPE OF (class);
END_ENTITY;

ENTITY class_by_intension
  SUBTYPE OF (class);
END_ENTITY;

ENTITY classification
  SUBTYPE OF (classification_assignment);
  classified : classification_select;
DERIVE
  classifier : class := SELF\classification_assignment.assigned_class;
END_ENTITY;

ENTITY complete_membership
  SUBTYPE OF (classification_assignment);
DERIVE
  containing_set : class := SELF\classification_assignment.assigned_class;
END_ENTITY;

ENTITY complete_membership_of_empty_set
  SUBTYPE OF (complete_membership);
END_ENTITY;

ENTITY complete_membership_of_non_empty_set
  SUBTYPE OF (complete_membership);
  members : SET[1:?] OF complete_membership_select;
END_ENTITY;

SUBTYPE_CONSTRAINT classification_or_complete_membership FOR classification_assignment;
  ONEOF (classification,
         complete_membership);
END_SUBTYPE_CONSTRAINT;

END_SCHEMA;  -- classification_schema
(* Genenerated from: ../../irs/wg12n529.exp *)

SCHEMA configuration_management_schema;

  REFERENCE FROM product_definition_schema
    (product_definition,
     product_definition_formation,
     product_definition_effectivity);

  REFERENCE FROM product_structure_schema
    (product_definition_usage);

  REFERENCE FROM product_concept_schema
    (product_concept,
     product_concept_feature_association);

  REFERENCE FROM basic_attribute_schema
    (get_description_value,
     get_name_value);

  REFERENCE FROM support_resource_schema
    (text, label, identifier, bag_to_set);

TYPE configuration_design_item = SELECT
   (product_definition,
    product_definition_formation);
END_TYPE;

ENTITY configurable_item
  SUBTYPE OF (configuration_item);
  item_concept_feature : SET[1:?] OF product_concept_feature_association;
END_ENTITY;

ENTITY configuration_design;
  configuration : configuration_item;
  design        : configuration_design_item;
DERIVE
  name          : label := get_name_value (SELF);
  description   : text := get_description_value (SELF);
UNIQUE
  UR1: configuration, design;
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +
                             'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +
                             'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY configuration_effectivity
  SUBTYPE OF (product_definition_effectivity);
  configuration : configuration_design;
UNIQUE
  UR1: configuration,
       usage,
       id;
WHERE
  WR1: 'PRODUCT_STRUCTURE_SCHEMA.PRODUCT_DEFINITION_USAGE' IN
        TYPEOF (SELF\product_definition_effectivity.usage);
END_ENTITY;

ENTITY configuration_item;
   id                  :  identifier;
   name                :  label;
   description         :  OPTIONAL text;
   item_concept        :  product_concept;
   purpose             :  OPTIONAL label;
END_ENTITY;

ENTITY configuration_item_relationship;
  name                        : label;
  description                 : OPTIONAL text;
  relating_configuration_item : configuration_item;
  related_configuration_item  : configuration_item;
END_ENTITY;

END_SCHEMA; -- configuration_management_schema
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA contract_schema; 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


ENTITY contract;
  name : label;
  purpose : text;
  kind : contract_type;
END_ENTITY;

ENTITY contract_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_contract : contract;
  related_contract : contract;
END_ENTITY;

ENTITY contract_type;
  description : label;
END_ENTITY;

FUNCTION acyclic_contract_relationship
 (relation : contract_relationship; relatives : SET[1:?] OF contract; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF contract_relationship;
    END_LOCAL;

    IF relation.relating_contract IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(cont <* bag_to_set(USEDIN(relation.relating_contract, 'CONTRACT_SCHEMA.' + 'CONTRACT_RELATIONSHIP.' + 'RELATED_CONTRACT')) | specific_relation IN TYPEOF(cont));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_contract_relationship(x[i], relatives + relation.relating_contract, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- contract_schema
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA date_time_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value); 

REFERENCE FROM measure_schema   -- ISO 10303-41
  (time_measure_with_unit); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE ahead_or_behind = ENUMERATION OF 
   (ahead,
    exact,
    behind);
END_TYPE; 

TYPE date_time_or_event_occurrence = SELECT
   (date_time_select, 
    event_occurrence);
END_TYPE; 

TYPE date_time_select = SELECT
   (date, 
    date_and_time, 
    local_time);
END_TYPE; 

TYPE day_in_month_number = INTEGER;
WHERE
  WR1: {1 <= SELF <= 31};
END_TYPE; 

TYPE day_in_week_number = INTEGER;
WHERE
  WR1: { 1 <= SELF <= 7 };
END_TYPE; 

TYPE day_in_year_number = INTEGER;
WHERE
  WR1: {1 <= SELF <= 366};
END_TYPE; 

TYPE hour_in_day = INTEGER;
WHERE
  WR1: { 0 <= SELF < 24 };
END_TYPE; 

TYPE minute_in_hour = INTEGER;
WHERE
  WR1: { 0 <= SELF <= 59 };
END_TYPE; 

TYPE month_in_year_number = INTEGER;
WHERE
  WR1: { 1 <= SELF <= 12 };
END_TYPE; 

TYPE second_in_minute = REAL;
WHERE
  WR1: { 0 <= SELF <= 60.0 };
END_TYPE; 

TYPE week_in_year_number = INTEGER;
WHERE
  WR1: { 1 <= SELF <= 53 };
END_TYPE; 

TYPE year_number = INTEGER;
END_TYPE; 

ENTITY calendar_date
  SUBTYPE OF (date);
  day_component : day_in_month_number;
  month_component : month_in_year_number;
WHERE
  WR1: valid_calendar_date (SELF);
END_ENTITY;

ENTITY coordinated_universal_time_offset;
  hour_offset : INTEGER;
  minute_offset : OPTIONAL INTEGER;
  sense : ahead_or_behind;
DERIVE
  actual_minute_offset : INTEGER := NVL(minute_offset,0);
WHERE
  WR1: { 0 <= hour_offset < 24 };
  WR2: { 0 <= actual_minute_offset <= 59 };
  WR3: NOT (((hour_offset <> 0) OR (actual_minute_offset <>0)) AND (sense = exact));
END_ENTITY;

ENTITY date
  SUPERTYPE OF (ONEOF (calendar_date,
                       ordinal_date,
                       week_of_year_and_day_date));
  year_component : year_number;
END_ENTITY;

ENTITY date_and_time;
  date_component : date;
  time_component : local_time;
END_ENTITY;

ENTITY date_role;
  name : label;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY date_time_role;
  name : label;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY event_occurrence;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY event_occurrence_context_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY event_occurrence_relationship;
  name : label;
  description : OPTIONAL text;
  relating_event : event_occurrence;
  related_event : event_occurrence;
END_ENTITY;

ENTITY event_occurrence_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY local_time;
  hour_component : hour_in_day;
  minute_component : OPTIONAL minute_in_hour;
  second_component : OPTIONAL second_in_minute;
  zone : coordinated_universal_time_offset;
WHERE
  WR1: valid_time (SELF);
END_ENTITY;

ENTITY ordinal_date
  SUBTYPE OF (date);
  day_component : day_in_year_number;
WHERE
  WR1: (NOT leap_year(SELF.year_component) AND { 1 <= day_component <= 365 }) OR (leap_year(SELF.year_component) AND { 1 <= day_component <= 366 });
END_ENTITY;

ENTITY relative_event_occurrence
  SUBTYPE OF (event_occurrence);
  base_event : event_occurrence;
  offset : time_measure_with_unit;
END_ENTITY;

ENTITY time_interval;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY time_interval_relationship;
  name : label;
  description : OPTIONAL text;
  relating_time_interval : time_interval;
  related_time_interval : time_interval;
END_ENTITY;

ENTITY time_interval_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY time_interval_with_bounds
  SUBTYPE OF (time_interval);
  primary_bound : OPTIONAL date_time_or_event_occurrence;
  secondary_bound : OPTIONAL date_time_or_event_occurrence;
  duration : OPTIONAL time_measure_with_unit;
WHERE
  WR1: NOT (EXISTS(secondary_bound) AND EXISTS(duration));
  WR2: EXISTS(primary_bound) OR EXISTS(secondary_bound);
END_ENTITY;

ENTITY time_role;
  name : label;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY week_of_year_and_day_date
  SUBTYPE OF (date);
  week_component : week_in_year_number;
  day_component : OPTIONAL day_in_week_number;
END_ENTITY;

FUNCTION acyclic_event_occurrence_relationship
 (relation : event_occurrence_relationship; relatives : SET[1:?] OF event_occurrence; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF event_occurrence_relationship;
    END_LOCAL;

    IF relation.relating_event IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(evnt <* bag_to_set(USEDIN(relation.relating_event, 'DATE_TIME_SCHEMA.' + 'EVENT_OCCURRENCE_RELATIONSHIP.' + 'RELATED_EVENT')) | specific_relation IN TYPEOF(evnt));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_event_occurrence_relationship(x[i], relatives + relation.relating_event, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_time_interval_relationship
 (relation : time_interval_relationship; relatives : SET[1:?] OF time_interval; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF time_interval_relationship;
    END_LOCAL;

    IF relation.relating_time_interval IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(ti <* bag_to_set(USEDIN(relation.relating_time_interval, 'DATE_TIME_SCHEMA.' + 'TIME_INTERVAL_RELATIONSHIP.' + 'RELATED_TIME_INTERVAL')) | specific_relation IN TYPEOF(ti));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_time_interval_relationship(x[i], relatives + relation.relating_time_interval, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION leap_year
 (year : year_number) : BOOLEAN; 
  IF ((((year MOD 4) = 0) AND ((year MOD 100) <> 0)) OR ((year MOD 400) = 0)) THEN
    RETURN (TRUE);
  ELSE
    RETURN (FALSE);
  END_IF;
END_FUNCTION; 

FUNCTION valid_calendar_date
 (date : calendar_date) : LOGICAL; 
  CASE date.month_component OF
    1  : RETURN({ 1 <= date.day_component <= 31 });
    2  : BEGIN
           IF (leap_year(date.year_component)) THEN
             RETURN({ 1 <= date.day_component <= 29 });
           ELSE
             RETURN({ 1 <= date.day_component <= 28 });
           END_IF;
         END;
    3  : RETURN({ 1 <= date.day_component <= 31 });
    4  : RETURN({ 1 <= date.day_component <= 30 });
    5  : RETURN({ 1 <= date.day_component <= 31 });
    6  : RETURN({ 1 <= date.day_component <= 30 });
    7  : RETURN({ 1 <= date.day_component <= 31 });
    8  : RETURN({ 1 <= date.day_component <= 31 });
    9  : RETURN({ 1 <= date.day_component <= 30 });
    10 : RETURN({ 1 <= date.day_component <= 31 });
    11 : RETURN({ 1 <= date.day_component <= 30 });
    12 : RETURN({ 1 <= date.day_component <= 31 });
  END_CASE;
  RETURN (FALSE);
END_FUNCTION; 

FUNCTION valid_time
 (time : local_time) : BOOLEAN; 
  IF EXISTS(time.second_component) THEN
    RETURN (EXISTS(time.minute_component));
  ELSE
    RETURN (TRUE);
  END_IF;
END_FUNCTION; 

END_SCHEMA;  -- date_time_schema

(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA document_schema;

REFERENCE FROM product_definition_schema   -- ISO 10303-41
  (product,
   product_definition,
   product_definition_formation); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE product_or_formation_or_definition = SELECT
   (product, 
    product_definition_formation, 
    product_definition);
END_TYPE; 

ENTITY document;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  kind : document_type;
INVERSE
  representation_types : SET[0:?] OF document_representation_type FOR represented_document;
END_ENTITY;

ENTITY document_product_association;
  name : label;
  description : OPTIONAL text;
  relating_document : document;
  related_product : product_or_formation_or_definition;
END_ENTITY;

ENTITY document_relationship;
  name : label;
  description : OPTIONAL text;
  relating_document : document;
  related_document : document;
END_ENTITY;

ENTITY document_representation_type;
  name : label;
  represented_document : document;
END_ENTITY;

ENTITY document_type;
  product_data_type : label;
END_ENTITY;

ENTITY document_usage_constraint;
  source : document;
  subject_element : label;
  subject_element_value : text;
END_ENTITY;

ENTITY document_with_class
  SUBTYPE OF (document);
  class : identifier;
END_ENTITY;

FUNCTION acyclic_document_relationship
 (relation : document_relationship; relatives : SET[1:?] OF document; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF document_relationship;
    END_LOCAL;

    IF relation.relating_document IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(doc <* bag_to_set(USEDIN(relation.relating_document, 'DOCUMENT_SCHEMA.' + 'DOCUMENT_RELATIONSHIP.' + 'RELATED_DOCUMENT')) | specific_relation IN TYPEOF(doc));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_document_relationship(x[i], relatives + relation.relating_document, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- document_schema
(* Genenerated from: ../../irs/wg12n268.exp *)

SCHEMA draughting_element_schema;

REFERENCE FROM geometry_schema (geometric_representation_item);

REFERENCE FROM support_resource_schema
    (label,
     text);

REFERENCE FROM presentation_definition_schema
    (annotation_occurrence,
     annotation_curve_occurrence,
     annotation_text_occurrence, 
     annotation_symbol_occurrence);

TYPE draughting_callout_element = SELECT
  (annotation_text_occurrence, 
   annotation_symbol_occurrence,
   annotation_curve_occurrence);
END_TYPE;

TYPE dimension_extent_usage = ENUMERATION OF
  (origin,
   target);
END_TYPE;

ENTITY dimension_curve
  SUBTYPE OF (annotation_curve_occurrence);
WHERE
  wr1: (SIZEOF(
          QUERY(dct <* USEDIN(SELF,'DRAUGHTING_ELEMENT_SCHEMA.' +
                'TERMINATOR_SYMBOL.ANNOTATED_CURVE')
               | (('DRAUGHTING_ELEMENT_SCHEMA.'+
                  'DIMENSION_CURVE_TERMINATOR' IN TYPEOF(dct))
                  ))
          ) <= 2);
   wr2:  SIZEOF(
            QUERY( dcdc <* USEDIN(SELF,'DRAUGHTING_ELEMENT_SCHEMA.' +
                   'DRAUGHTING_CALLOUT.CONTENTS') |
                   ('DRAUGHTING_ELEMENT_SCHEMA.'+
                    'DIMENSION_CURVE_DIRECTED_CALLOUT' IN TYPEOF(dcdc)))
       )>= 1;
   wr3: (SIZEOF(
            QUERY(dct1 <* USEDIN(SELF,'DRAUGHTING_ELEMENT_SCHEMA.' +
                  'TERMINATOR_SYMBOL.ANNOTATED_CURVE') 
               | (('DRAUGHTING_ELEMENT_SCHEMA.'+
                  'DIMENSION_CURVE_TERMINATOR' IN TYPEOF(dct1)) 
                  AND (dct1.role = origin)))
        ) <= 1)
     AND 
        (SIZEOF(
            QUERY (dct2 <* USEDIN(SELF,'DRAUGHTING_ELEMENT_SCHEMA.'+
                   'TERMINATOR_SYMBOL.ANNOTATED_CURVE') 
                 | (('DRAUGHTING_ELEMENT_SCHEMA.'+
                   'DIMENSION_CURVE_TERMINATOR' IN TYPEOF(dct2))
                   AND (dct2.role = target)))
       ) <= 1);
END_ENTITY;

ENTITY leader_curve
  SUBTYPE OF (annotation_curve_occurrence);
WHERE
  WR1: SIZEOF( 
          QUERY(ldc <* USEDIN( SELF, 'DRAUGHTING_ELEMENT_SCHEMA.' +
                       'DRAUGHTING_CALLOUT.CONTENTS')
                   |   'DRAUGHTING_ELEMENT_SCHEMA.' +
                       'LEADER_DIRECTED_CALLOUT'  IN TYPEOF(ldc))) >= 1;
END_ENTITY;

ENTITY projection_curve
  SUBTYPE OF (annotation_curve_occurrence);
END_ENTITY;

ENTITY terminator_symbol
  SUBTYPE OF (annotation_symbol_occurrence);
  annotated_curve : annotation_curve_occurrence;
END_ENTITY;

ENTITY dimension_curve_terminator
  SUBTYPE OF (terminator_symbol);
  role  : dimension_extent_usage;
WHERE
  WR1: 'DRAUGHTING_ELEMENT_SCHEMA.DIMENSION_CURVE' IN TYPEOF
       (SELF\terminator_symbol.annotated_curve);
END_ENTITY;

ENTITY leader_terminator
  SUBTYPE OF (terminator_symbol);
WHERE
  WR1: 'DRAUGHTING_ELEMENT_SCHEMA.LEADER_CURVE' IN TYPEOF
       (SELF\terminator_symbol.annotated_curve);
END_ENTITY;

ENTITY draughting_callout
  SUBTYPE OF (geometric_representation_item);
  contents : SET [1:?] OF draughting_callout_element; 
END_ENTITY;

ENTITY draughting_callout_relationship;
  name : label;
  description : text;
  relating_draughting_callout : draughting_callout;
  related_draughting_callout : draughting_callout;
END_ENTITY;

ENTITY leader_directed_callout
  SUBTYPE OF (draughting_callout);
WHERE
  WR1: SIZEOF (QUERY (l_1 <* SELF\draughting_callout.contents |
       'DRAUGHTING_ELEMENT_SCHEMA.LEADER_CURVE' IN (TYPEOF(l_1)))) >= 1;
  WR2: SIZEOF(SELF\draughting_callout.contents) >=2;
END_ENTITY;

ENTITY projection_directed_callout
  SUBTYPE OF (draughting_callout);
WHERE
  WR1: SIZEOF(QUERY(p_1<*SELF\draughting_callout.contents | 
      'DRAUGHTING_ELEMENT_SCHEMA.PROJECTION_CURVE' IN (TYPEOF(p_1))))=1;
  WR2: SIZEOF(SELF\draughting_callout.contents) >=2;
END_ENTITY;

ENTITY dimension_curve_directed_callout
  SUBTYPE OF (draughting_callout);
WHERE
  WR1: SIZEOF(QUERY(d_c<*SELF\draughting_callout.contents | 
      'DRAUGHTING_ELEMENT_SCHEMA.DIMENSION_CURVE' IN (TYPEOF(d_c))))=1;
  WR2: SIZEOF(SELF\draughting_callout.contents) >= 2;
END_ENTITY;

END_SCHEMA; -- draughting_element_schema
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA effectivity_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value,
   get_name_value,
   name_attribute); 

REFERENCE FROM date_time_schema   -- ISO 10303-41
  (date_time_or_event_occurrence,
   time_interval); 

REFERENCE FROM measure_schema   -- ISO 10303-41
  (measure_with_unit); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


ENTITY dated_effectivity
  SUBTYPE OF (effectivity);
  effectivity_end_date : OPTIONAL date_time_or_event_occurrence;
  effectivity_start_date : date_time_or_event_occurrence;
END_ENTITY;

ENTITY effectivity
  SUPERTYPE OF (ONEOF (serial_numbered_effectivity,
                       dated_effectivity,
                       lot_effectivity,
                       time_interval_based_effectivity));
  id : identifier;
DERIVE
  name : label := get_name_value(SELF);
  description : text := get_description_value(SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
  WR2: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY effectivity_relationship;
  name : label;
  description : OPTIONAL text;
  related_effectivity : effectivity;
  relating_effectivity : effectivity;
END_ENTITY;

ENTITY lot_effectivity
  SUBTYPE OF (effectivity);
  effectivity_lot_id : identifier;
  effectivity_lot_size : measure_with_unit;
END_ENTITY;

ENTITY serial_numbered_effectivity
  SUBTYPE OF (effectivity);
  effectivity_start_id : identifier;
  effectivity_end_id : OPTIONAL identifier;
END_ENTITY;

ENTITY time_interval_based_effectivity
  SUBTYPE OF (effectivity);
  effectivity_period : time_interval;
END_ENTITY;

FUNCTION acyclic_effectivity_relationship
 (relation : effectivity_relationship; relatives : SET[1:?] OF effectivity; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF effectivity_relationship;
    END_LOCAL;

    IF relation.relating_effectivity IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(eff <* bag_to_set(USEDIN(relation.relating_effectivity, 'EFFECTIVITY_SCHEMA.' + 'EFFECTIVITY_RELATIONSHIP.' + 'RELATED_EFFECTIVITY')) | specific_relation IN TYPEOF(eff));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_effectivity_relationship(x[i], relatives + relation.relating_effectivity, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- effectivity_schema


(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA experience_schema;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


ENTITY experience;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY experience_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_experience : experience;
  related_experience : experience;
END_ENTITY;

ENTITY experience_type;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY experience_type_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_experience_type : experience_type;
  related_experience_type : experience_type;
END_ENTITY;

FUNCTION acyclic_experience_relationship (relation : experience_relationship; relatives : SET OF experience; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF experience_relationship;
    END_LOCAL;

    IF relation.relating_experience IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(expr <* bag_to_set(USEDIN(relation.relating_experience, 'EXPERIENCE_SCHEMA.' + 'EXPERIENCE_RELATIONSHIP.' + 'RELATED_EXPERIENCE')) | specific_relation IN TYPEOF(expr));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_experience_relationship(x[i], relatives + relation.relating_experience, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

  FUNCTION acyclic_experience_type_relationship (relation : experience_type_relationship; relatives : SET OF experience_type; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF experience_type_relationship;
    END_LOCAL;

    IF relation.relating_experience_type IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(exptyp <* bag_to_set(USEDIN(relation.relating_experience_type, 'EXPERIENCE_SCHEMA.' + 'EXPERIENCE_TYPE_RELATIONSHIP.' + 'RELATED_EXPERIENCE_TYPE')) | specific_relation IN TYPEOF(exptyp));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_experience_type_relationship(x[i], relatives + relation.relating_experience_type, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

END_SCHEMA;  -- experience_schema
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA external_reference_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE message = STRING;
END_TYPE; 

TYPE source_item = SELECT
   (identifier, 
    message);
END_TYPE; 

ENTITY external_source;
  source_id : source_item;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY external_source_relationship;
  name : label;
  description : OPTIONAL text;
  relating_source : external_source;
  related_source : external_source;
END_ENTITY;

ENTITY externally_defined_item;
  item_id : source_item;
  source : external_source;
END_ENTITY;

ENTITY externally_defined_item_relationship;
  name : label;
  description : OPTIONAL text;
  relating_item : externally_defined_item;
  related_item : externally_defined_item;
END_ENTITY;

ENTITY pre_defined_item;
  name : label;
END_ENTITY;

FUNCTION acyclic_external_source_relationship
 (relation : external_source_relationship; relatives : SET[1:?] OF external_source; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF external_source_relationship;
    END_LOCAL;

    IF relation.relating_source IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(es <* bag_to_set(USEDIN(relation.relating_source, 'EXTERNAL_REFERENCE_SCHEMA.' + 'EXTERNAL_SOURCE_RELATIONSHIP.' + 'RELATED_SOURCE')) | specific_relation IN TYPEOF(es));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_external_source_relationship(x[i], relatives + relation.relating_source, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_externally_defined_item_relationship
 (relation : externally_defined_item_relationship; relatives : SET[1:?] OF externally_defined_item; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF externally_defined_item_relationship;
    END_LOCAL;

    IF relation.relating_item IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(edi <* bag_to_set(USEDIN(relation.relating_item, 'EXTERNAL_REFERENCE_SCHEMA.' + 'EXTERNALLY_DEFINED_ITEM_RELATIONSHIP.' + 'RELATED_ITEM')) | specific_relation IN TYPEOF(edi));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_externally_defined_item_relationship(x[i], relatives + relation.relating_item, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- external_reference_schema
 (* Document WG12 N1046r date 2003-04-29. EXPRESS listing corresponding to part
 42  edition IS WG12 N536, as modified by TC1 WG12 N608 and
 by revision 1 (edition 3)  WG12 N1045 *)

 SCHEMA geometric_model_schema;
   REFERENCE FROM geometry_schema;
   REFERENCE FROM topology_schema;
   REFERENCE FROM measure_schema(length_measure,
                                 parameter_value,
                                 plane_angle_measure,
                                 plane_angle_unit,
                                 positive_length_measure,
                                 positive_plane_angle_measure);
   REFERENCE FROM representation_schema(founded_item);

   USE FROM representation_schema(representation_item);

 TYPE boolean_operand = SELECT
   (solid_model, 
    half_space_solid,
    csg_primitive,
    boolean_result,
    half_space_2d);
 END_TYPE;

 TYPE boolean_operator = ENUMERATION OF 
   (union, 
    intersection, 
    difference);
 END_TYPE;

 TYPE csg_select = SELECT
   (boolean_result,
    csg_primitive);
 END_TYPE;

 TYPE csg_primitive = SELECT
   (sphere,
    ellipsoid,
    block,
    right_angular_wedge,
    faceted_primitive,
    rectangular_pyramid,
    torus,
    right_circular_cone,
    eccentric_cone,
    right_circular_cylinder,
    cyclide_segment_solid,
    primitive_2d);
 END_TYPE;

 TYPE geometric_set_select = SELECT
   (point,
    curve,
    surface);
 END_TYPE;

 TYPE surface_model = SELECT
   (shell_based_surface_model, 
    face_based_surface_model);
 END_TYPE;

 TYPE wireframe_model = SELECT
   (shell_based_wireframe_model,
    edge_based_wireframe_model);
 END_TYPE;

 ENTITY block
   SUBTYPE OF (geometric_representation_item);
   position : axis2_placement_3d;
   x        : positive_length_measure;
   y        : positive_length_measure;
   z        : positive_length_measure;
 END_ENTITY;

 ENTITY boolean_result
   SUBTYPE OF (geometric_representation_item);
   operator        : boolean_operator;
   first_operand   :  boolean_operand;
   second_operand  :  boolean_operand;
 END_ENTITY;

 ENTITY box_domain
   SUBTYPE OF (founded_item);
   corner  : cartesian_point;
   xlength : positive_length_measure;
   ylength : positive_length_measure;
   zlength : positive_length_measure;
 WHERE
   WR1: SIZEOF(QUERY(item <* USEDIN(SELF,'')|
             NOT ('GEOMETRIC_MODEL_SCHEMA.BOXED_HALF_SPACE'
                    IN TYPEOF(item)))) = 0;
 END_ENTITY;

 ENTITY boxed_half_space
   SUBTYPE OF(half_space_solid);
   enclosure : box_domain;
 END_ENTITY;

 ENTITY brep_2d
  SUBTYPE OF (solid_model);
  extent : face;
  WHERE
    WR1:  SIZEOF (['TOPOLOGY_SCHEMA.FACE_SURFACE',
          'TOPOLOGY_SCHEMA.SUBFACE', 'TOPOLOGY_SCHEMA.ORIENTED_FACE'] *
              TYPEOF (SELF.extent)) = 0;
   WR2 : SIZEOF (QUERY (bnds <* extent.bounds |
         NOT ('TOPOLOGY_SCHEMA.EDGE_LOOP' IN TYPEOF(bnds.bound))) ) = 0;
   WR3 : SIZEOF (QUERY (bnds <* extent.bounds |
         'TOPOLOGY_SCHEMA.FACE_OUTER_BOUND' IN TYPEOF(bnds))) = 1;
   WR4 : SIZEOF(QUERY (elp_fbnds <* QUERY (bnds <* extent.bounds |
         'TOPOLOGY_SCHEMA.EDGE_LOOP' IN TYPEOF(bnds.bound)) |
          NOT (SIZEOF (QUERY (oe <* elp_fbnds.bound\path.edge_list | NOT
          (('TOPOLOGY_SCHEMA.EDGE_CURVE' IN TYPEOF(oe.edge_element)) AND
         (oe.edge_element\geometric_representation_item.dim = 2)))) =
                0))) = 0;
 END_ENTITY;

 ENTITY brep_with_voids
   SUBTYPE OF (manifold_solid_brep);
   voids : SET [1:?] OF oriented_closed_shell;
 END_ENTITY;

ENTITY  circular_area
  SUBTYPE OF (primitive_2d);
    centre: cartesian_point;
    radius: positive_length_measure;
END_ENTITY;

 ENTITY convex_hexahedron
   SUBTYPE OF (faceted_primitive);
  WHERE
    WR1: SIZEOF(points) = 8 ;
    WR2: above_plane(points[1], points[2], points[3], points[4]) = 0.0;
    WR3: above_plane(points[5], points[8], points[7], points[6]) = 0.0;
    WR4: above_plane(points[1], points[4], points[8], points[5]) = 0.0;
    WR5: above_plane(points[4], points[3], points[7], points[8]) = 0.0;
    WR6: above_plane(points[3], points[2], points[6], points[7]) = 0.0;
    WR7: above_plane(points[1], points[5], points[6], points[2]) = 0.0;
    WR8: same_side([points[1], points[2], points[3]],
                     [points[5], points[6], points[7], points[8]]);
    WR9: same_side([points[1], points[4], points[8]],
                     [points[3], points[7], points[6], points[2]]);
    WR10: same_side([points[1], points[2], points[5]],
                      [points[3], points[7], points[8], points[4]]);
    WR11: same_side([points[5], points[6], points[7]],
                     [points[1], points[2], points[3], points[4]]);
    WR12: same_side([points[3], points[7], points[6]],
                     [points[1], points[4], points[8], points[5]]);
    WR13: same_side([points[3], points[7], points[8]],
                      [points[1], points[5], points[6], points[2]]);
  END_ENTITY;

 ENTITY csg_solid
   SUBTYPE OF (solid_model);
   tree_root_expression : csg_select;
 END_ENTITY;

ENTITY cyclide_segment_solid
   SUBTYPE OF (geometric_representation_item);
   position    : axis2_placement_3d;
   radius1     : positive_length_measure;
   radius2     : positive_length_measure;
   cone_angle1 : plane_angle_measure;
   cone_angle2 : plane_angle_measure;
   turn_angle  : plane_angle_measure;
END_ENTITY;

 ENTITY eccentric_cone
  SUBTYPE OF (geometric_representation_item);
   position    : axis2_placement_3d;
   semi_axis_1 : positive_length_measure;
   semi_axis_2 : positive_length_measure;
   height      : positive_length_measure;
   x_offset    : length_measure;
   y_offset    : length_measure;
   ratio       : REAL;
 WHERE
  WR1 : ratio >= 0.0;
 END_ENTITY;

 ENTITY edge_based_wireframe_model
   SUBTYPE OF (geometric_representation_item);
   ebwm_boundary  : SET [1:?] OF connected_edge_set;
 END_ENTITY;

 ENTITY face_based_surface_model
   SUBTYPE OF (geometric_representation_item);
   fbsm_faces : SET [1:?] OF connected_face_set;
 END_ENTITY;

 ENTITY geometric_curve_set
   SUBTYPE OF (geometric_set);
 WHERE
   WR1: SIZEOF(QUERY(temp <* SELF\geometric_set.elements |
                            'GEOMETRY_SCHEMA.SURFACE' IN TYPEOF(temp))) = 0;
 END_ENTITY;

 ENTITY geometric_set
   SUPERTYPE OF (ONEOF(geometric_curve_set,
                       geometric_set_replica))
   SUBTYPE OF (geometric_representation_item);
   elements :  SET [1:?] OF geometric_set_select;
 END_ENTITY;

 ENTITY ellipsoid
   SUBTYPE OF (geometric_representation_item);
     position      : axis2_placement_3d;
     semi_axis_1 : positive_length_measure;
     semi_axis_2 : positive_length_measure;
     semi_axis_3 : positive_length_measure;
 END_ENTITY;

ENTITY  elliptic_area
  SUBTYPE OF (primitive_2d);
    position : axis2_placement_2d;
    semi_axis_1 : positive_length_measure;
    semi_axis_2 : positive_length_measure;
END_ENTITY;

 ENTITY extruded_area_solid
   SUBTYPE OF (swept_area_solid);
   extruded_direction : direction;
   depth              : positive_length_measure;
 WHERE
   WR1: dot_product(
        (SELF\swept_area_solid.swept_area.basis_surface\
        elementary_surface.position.p[3]), extruded_direction) <> 0.0;
 END_ENTITY;

 ENTITY extruded_face_solid
   SUBTYPE OF (swept_face_solid);
   extruded_direction : direction;
   depth              : positive_length_measure;
 WHERE
   WR1: dot_product(
        (SELF\swept_face_solid.swept_face.face_geometry\
        elementary_surface.position.p[3]), extruded_direction) <> 0.0;
 END_ENTITY;

 ENTITY faceted_brep
   SUBTYPE OF (manifold_solid_brep);
 END_ENTITY;

 ENTITY faceted_primitive
   SUPERTYPE OF (ONEOF(tetrahedron, convex_hexahedron))
   SUBTYPE OF (geometric_representation_item) ;
     points : LIST[4:?] OF UNIQUE cartesian_point ;
  WHERE
    WR1: points[1].dim = 3 ;
  END_ENTITY;

  ENTITY geometric_set_replica
   SUBTYPE OF (geometric_set); 
     parent_set     : geometric_set; 
     transformation : cartesian_transformation_operator; 
   DERIVE 
     SELF\geometric_set.elements : SET [1:?] OF geometric_set_select := 
           build_transformed_set(transformation, parent_set); 
   WHERE
     WR1: acyclic_set_replica(SELF, parent_set);
   END_ENTITY;

ENTITY  half_space_2d
  SUBTYPE OF (geometric_representation_item);
    base_curve:  curve;
    agreement_flag: BOOLEAN;
END_ENTITY;

 ENTITY half_space_solid
   SUBTYPE OF(geometric_representation_item);
   base_surface   : surface;
   agreement_flag : BOOLEAN;
 END_ENTITY;

 ENTITY manifold_solid_brep
   SUBTYPE OF (solid_model);
   outer : closed_shell;
 END_ENTITY;

 ENTITY polygonal_area
   SUBTYPE OF (primitive_2d);
   bounds:  LIST [3:?] OF UNIQUE cartesian_point;
 END_ENTITY;

 ENTITY primitive_2d
   SUPERTYPE  OF (ONEOF (circular_area, elliptic_area, rectangular_area,
                            polygonal_area))
   SUBTYPE OF (geometric_representation_item);
   WHERE
     WR1 : SELF\geometric_representation_item.dim = 2;
 END_ENTITY;

 ENTITY rectangle_domain
   SUBTYPE OF (founded_item);
   corner: cartesian_point;
   xlength: positive_length_measure;
   ylength: positive_length_measure;
 WHERE
   WR1: SIZEOF(QUERY(item <* USEDIN(SELF, '')| NOT
   ('GEOMETRIC_MODEL_SCHEMA.RECTANGLED_HALF_SPACE' IN TYPEOF(item)))) = 0;
 END_ENTITY;

ENTITY rectangled_half_space
  SUBTYPE OF (half_space_2d);
    enclosure: rectangle_domain;
END_ENTITY;

ENTITY rectangular_area
  SUBTYPE OF (primitive_2d);
    position: axis2_placement_2d;
    x: positive_length_measure;
    y: positive_length_measure;
END_ENTITY;

 ENTITY rectangular_pyramid
   SUBTYPE OF (geometric_representation_item);
   position       : axis2_placement_3d;
   xlength        : positive_length_measure;
   ylength        : positive_length_measure;
   height         : positive_length_measure;
 END_ENTITY;

 ENTITY revolved_area_solid
   SUBTYPE OF (swept_area_solid);
   axis  : axis1_placement;
   angle : plane_angle_measure;
 DERIVE
  axis_line : line := representation_item('')||
                    geometric_representation_item()|| curve()||
                    line(axis.location, representation_item('')||
                    geometric_representation_item()||
                    vector(axis.z, 1.0));
 END_ENTITY;

ENTITY revolved_face_solid
   SUBTYPE OF (swept_face_solid);
   axis  : axis1_placement;
   angle : plane_angle_measure;
 DERIVE
  axis_line : line := representation_item('')||
                    geometric_representation_item()|| curve()||
                    line(axis.location, representation_item('')||
                    geometric_representation_item()||
                    vector(axis.z, 1.0));
 END_ENTITY;

 ENTITY right_angular_wedge
   SUBTYPE OF (geometric_representation_item);
   position : axis2_placement_3d;
   x        : positive_length_measure;
   y        : positive_length_measure;
   z        : positive_length_measure;
   ltx      : length_measure;
 WHERE
   WR1: ((0.0 <= ltx) AND (ltx < x));
 END_ENTITY;

 ENTITY right_circular_cone
   SUBTYPE OF (geometric_representation_item);
   position   : axis1_placement;
   height     : positive_length_measure;
   radius     : length_measure;
   semi_angle : plane_angle_measure;
 WHERE
   WR1: radius >= 0.0;
 END_ENTITY;

 ENTITY right_circular_cylinder
   SUBTYPE OF (geometric_representation_item);
   position   : axis1_placement;
   height     : positive_length_measure;
   radius     : positive_length_measure;
 END_ENTITY;

 ENTITY sectioned_spine
   SUBTYPE OF (geometric_curve_set);
      cross_sections   : LIST[2:?] OF curve;
      spine_points     : LIST[2:?] OF point;
   WHERE
     WR1 : SIZEOF(SELF\geometric_set.elements) = 1;
     WR2 : 'GEOMETRY_SCHEMA.CURVE' IN
                     TYPEOF(SELF\geometric_set.elements[1]);
     WR3 : SIZEOF(cross_sections) = SIZEOF(spine_points);
     WR4 : SELF\geometric_representation_item.dim = 3;
 END_ENTITY;

 ENTITY shell_based_surface_model
   SUBTYPE OF (geometric_representation_item);
   sbsm_boundary  : SET [1:?] OF shell;
 WHERE
   WR1: constraints_geometry_shell_based_surface_model(SELF);
 END_ENTITY;

 ENTITY shell_based_wireframe_model
   SUBTYPE OF (geometric_representation_item);
   sbwm_boundary  : SET [1:?] OF shell;
 WHERE
   WR1: constraints_geometry_shell_based_wireframe_model(SELF);
 END_ENTITY;

 ENTITY solid_model
   SUPERTYPE OF (ONEOF( csg_solid, manifold_solid_brep, swept_face_solid,
                        swept_area_solid, swept_disk_solid, solid_replica,
                        brep_2d, trimmed_volume))
   SUBTYPE OF (geometric_representation_item);
 END_ENTITY;

 ENTITY solid_replica
   SUBTYPE OF (solid_model);
   parent_solid   : solid_model;
   transformation : cartesian_transformation_operator_3d;
 WHERE
   WR1: acyclic_solid_replica(SELF, parent_solid);
   WR2: parent_solid\geometric_representation_item.dim = 3;
 END_ENTITY;


 ENTITY sphere
   SUBTYPE OF (geometric_representation_item);
   radius : positive_length_measure;
   centre : point;
 END_ENTITY;

 ENTITY surface_curve_swept_area_solid
   SUBTYPE OF (swept_area_solid);
      directrix          : curve;
      start_param        : REAL;
      end_param          : REAL;
      reference_surface  : surface;
   WHERE
     WR1 : (NOT ('GEOMETRY_SCHEMA.SURFACE_CURVE' IN TYPEOF(directrix))) OR
          (reference_surface IN (directrix\surface_curve.basis_surface));
 END_ENTITY;

 ENTITY surface_curve_swept_face_solid
   SUBTYPE OF (swept_face_solid);
      directrix          : curve;
      start_param        : REAL;
      end_param          : REAL;
      reference_surface  : surface;
   WHERE
     WR1 : (NOT ('GEOMETRY_SCHEMA.SURFACE_CURVE' IN TYPEOF(directrix))) OR
          (reference_surface IN (directrix\surface_curve.basis_surface));
 END_ENTITY;

 ENTITY swept_area_solid
   SUPERTYPE OF (ONEOF(revolved_area_solid, extruded_area_solid,
                       surface_curve_swept_area_solid))
   SUBTYPE OF (solid_model);
   swept_area :  curve_bounded_surface;
 WHERE
   WR1: 'GEOMETRY_SCHEMA.PLANE' IN TYPEOF(swept_area.basis_surface);
 END_ENTITY;

 ENTITY swept_disk_solid
   SUBTYPE OF (solid_model);
     directrix    : curve;
     radius       : positive_length_measure;
     inner_radius : OPTIONAL positive_length_measure;
     start_param : REAL;
     end_param   : REAL;
   WHERE
     WR1 : directrix.dim = 3;
     WR2 : (NOT EXISTS(inner_radius)) OR (radius > inner_radius) ;
 END_ENTITY;

 ENTITY swept_face_solid
   SUPERTYPE OF (ONEOF(extruded_face_solid, revolved_face_solid,
                 surface_curve_swept_face_solid))
   SUBTYPE OF (solid_model);
   swept_face :  face_surface;
 WHERE
   WR1: 'GEOMETRY_SCHEMA.PLANE' IN TYPEOF(swept_face.face_geometry);
 END_ENTITY;

 ENTITY tetrahedron
   SUBTYPE OF (faceted_primitive);
  WHERE
    WR1: SIZEOF(points) = 4 ;
    WR2: above_plane(points[1], points[2], points[3], points[4]) <> 0.0;
  END_ENTITY;

 ENTITY torus
   SUBTYPE OF (geometric_representation_item);
   position     : axis1_placement;
   major_radius : positive_length_measure;
   minor_radius : positive_length_measure;
 WHERE
   WR1: major_radius > minor_radius;
 END_ENTITY;

 ENTITY trimmed_volume
   SUBTYPE OF (solid_model);
   basis_volume :  volume;
     u1         :  parameter_value;
     u2         :  parameter_value;
     v1         :  parameter_value;
     v2         :  parameter_value;
     w1         :  parameter_value;
     w2         :  parameter_value;
   WHERE
     WR1 : u1 <> u2;
     WR2 : v1 <> v2;
     WR3 : w1 <> w2;
 END_ENTITY;

 
 FUNCTION acyclic_set_replica(rep : geometric_set_replica;
                           parent : geometric_set) : BOOLEAN;
   IF NOT (('GEOMETRY_SCHEMA.GEOMETRIC_SET_REPLICA') IN TYPEOF(parent))
        THEN  RETURN (TRUE);
   END_IF;
 (* Return TRUE if the parent is not of type geometric_set_replica *)
   IF (parent :=: rep) THEN
      RETURN (FALSE);
  (* Return FALSE if the parent is the same geometric_set_replica,
     otherwise, call function again with the parents own parent_set.  *)
    ELSE RETURN(acyclic_set_replica(rep,
                          parent\geometric_set_replica.parent_set));
    END_IF;
  END_FUNCTION;

 FUNCTION acyclic_solid_replica(rep : solid_replica; parent :
                    solid_model) : BOOLEAN;
   IF NOT (('GEOMETRY_SCHEMA.SOLID_REPLICA') IN TYPEOF(parent)) THEN
      RETURN (TRUE);
   END_IF;
 (* Return TRUE if the parent is not of type solid_replica. *)
   IF (parent :=: rep) THEN
      RETURN (FALSE);
  (* Return FALSE if the parent is the same solid_replica, otherwise,
   call function again with the parents own parent_solid.     *)
    ELSE RETURN(acyclic_solid_replica(rep,
                      parent\solid_replica.parent_solid));
    END_IF;
  END_FUNCTION;

 FUNCTION build_transformed_set(tr: cartesian_transformation_operator;
           gset : geometric_set) : SET [0:?] OF geometric_set_select;
  LOCAL
   s          : SET [1:?] OF geometric_set_select := gset.elements;
   trset      : SET [0:?] OF geometric_set_select := [];
  END_LOCAL;
  REPEAT j := 1 TO SIZEOF(s);
    IF ('GEOMETRY_SCHEMA.CURVE' IN TYPEOF(s[j])) THEN
     trset := trset + dummy_gri || curve() ||curve_replica(s[j],tr); ELSE
     IF ('GEOMETRY_SCHEMA.POINT' IN TYPEOF(s[j])) THEN
       trset := trset + dummy_gri || point() || point_replica(s[j],tr);
       ELSE
       IF ('GEOMETRY_SCHEMA.SURFACE' IN TYPEOF(s[j])) THEN
         trset := trset + dummy_gri || surface()  || surface_replica(s[j],
           tr || cartesian_transformation_operator_3d (?));
       END_IF;
     END_IF;
    END_IF;
  END_REPEAT;
  RETURN(trset);
 END_FUNCTION;

 FUNCTION constraints_geometry_shell_based_surface_model
             (m: shell_based_surface_model): BOOLEAN;
   LOCAL
     result : BOOLEAN := TRUE;
   END_LOCAL;
   
   REPEAT j := 1 TO SIZEOF(m.sbsm_boundary);
     IF (NOT ('TOPOLOGY_SCHEMA.OPEN_SHELL' IN
                     TYPEOF(m.sbsm_boundary[j])) AND
        (NOT ('TOPOLOGY_SCHEMA.CLOSED_SHELL' IN
           TYPEOF(m.sbsm_boundary[j]))))
     THEN
       result := FALSE;
       RETURN(result);
       (* A surface model is composed of OPEN_ and CLOSED_SHELLs. *)
     END_IF;
   END_REPEAT;
   RETURN(result);
 END_FUNCTION;

 FUNCTION constraints_geometry_shell_based_wireframe_model
                       (m : shell_based_wireframe_model) : BOOLEAN;
   LOCAL
     result : BOOLEAN := TRUE;
   END_LOCAL;

   REPEAT j := 1 TO SIZEOF(m.sbwm_boundary);
     IF (NOT ('TOPOLOGY_SCHEMA.WIRE_SHELL' IN
                    TYPEOF(m.sbwm_boundary[j])) AND
        (NOT ('TOPOLOGY_SCHEMA.VERTEX_SHELL' IN
                      TYPEOF(m.sbwm_boundary[j]))))
     THEN
       result := FALSE;
       RETURN(result);
       (* A wireframe model is composed of WIRE_ and VERTEX_SHELLs *)
     END_IF;
   END_REPEAT;
   RETURN(result);
 END_FUNCTION;

 FUNCTION msb_shells (brep: manifold_solid_brep) :
                          SET [1:?] OF  closed_shell;
 
     IF SIZEOF (QUERY (msbtype <* TYPEOF (brep) |
       msbtype LIKE '*BREP_WITH_VOIDS')) >= 1 THEN
       RETURN (brep\brep_with_voids.voids + brep.outer);
     ELSE
       RETURN([brep.outer]);
     END_IF;
 END_FUNCTION;

 END_SCHEMA; -- end GEOMETRIC MODEL schema
 (* Document WG12 N1046r date 2003-04-29. EXPRESS listing corresponding to part
 42  edition IS WG12 N536, as modified by TC1 WG12 N608 and
 by revision 1 (edition 3)  WG12 N1045 *)
 SCHEMA geometry_schema;
   REFERENCE FROM representation_schema
     (definitional_representation,
      founded_item,
      functionally_defined_transformation,
      item_in_context,
      representation,
      representation_item,
      representation_context,
      using_representations);
   REFERENCE FROM measure_schema
     (global_unit_assigned_context,
      length_measure,
      parameter_value,
      plane_angle_measure,
      plane_angle_unit,
      positive_length_measure,
      positive_plane_angle_measure);
   REFERENCE FROM topology_schema
     (edge_curve,
      face_surface,
      poly_loop,
      vertex_point);
    REFERENCE FROM geometric_model_schema
      (block,
       boolean_result,
       cyclide_segment_solid,
       eccentric_cone,
       edge_based_wireframe_model,
       ellipsoid,
       face_based_surface_model,
       faceted_primitive,
       geometric_set,
       half_space_solid,
       half_space_2d,
       primitive_2d,
       rectangular_pyramid,
       right_angular_wedge,
       right_circular_cone,
       right_circular_cylinder,
       shell_based_surface_model,
       shell_based_wireframe_model,
       solid_model,
       sphere,
       torus);

 CONSTANT
  dummy_gri : geometric_representation_item :=  representation_item('')||
                                   geometric_representation_item();
 END_CONSTANT;

 TYPE axis2_placement = SELECT
   (axis2_placement_2d, 
    axis2_placement_3d);
 END_TYPE;

 TYPE b_spline_curve_form = ENUMERATION OF
   (polyline_form,
    circular_arc,
    elliptic_arc,
    parabolic_arc,
    hyperbolic_arc,
    unspecified);
 END_TYPE;

 TYPE b_spline_surface_form = ENUMERATION OF
   (plane_surf,
    cylindrical_surf,
    conical_surf,
    spherical_surf,
    toroidal_surf,
    surf_of_revolution,
    ruled_surf,
    generalised_cone,
    quadric_surf,
    surf_of_linear_extrusion,
    unspecified);
 END_TYPE;

 TYPE curve_on_surface = SELECT
   (pcurve, 
    surface_curve, 
    composite_curve_on_surface);
 END_TYPE;

TYPE dimension_count = INTEGER;
WHERE
  WR1: SELF > 0;
END_TYPE;

 TYPE extent_enumeration = ENUMERATION OF 
   (invalid,
    zero,
    finite_non_zero,
    infinite);
 END_TYPE;

 TYPE knot_type = ENUMERATION OF 
   (uniform_knots,
    quasi_uniform_knots,
    piecewise_bezier_knots,
    unspecified);
 END_TYPE;

 TYPE pcurve_or_surface = SELECT
   (pcurve, 
    surface);
 END_TYPE;

 TYPE preferred_surface_curve_representation = ENUMERATION OF 
   (curve_3d,
    pcurve_s1, 
    pcurve_s2);
 END_TYPE;

TYPE surface_boundary = SELECT
   (boundary_curve,
    degenerate_pcurve);
END_TYPE;

 TYPE transition_code = ENUMERATION OF 
   (discontinuous,
    continuous,
    cont_same_gradient,
    cont_same_gradient_same_curvature);
 END_TYPE;

 TYPE trimming_preference = ENUMERATION OF 
   (cartesian,
    parameter,
    unspecified);
 END_TYPE;

 TYPE trimming_select = SELECT 
   (cartesian_point, 
    parameter_value);
 END_TYPE;

 TYPE vector_or_direction = SELECT
   (vector, 
    direction);
 END_TYPE;

ENTITY geometric_representation_context
  SUBTYPE OF (representation_context);
  coordinate_space_dimension : dimension_count;
END_ENTITY;

 ENTITY axis1_placement
 SUBTYPE OF (placement);
   axis     : OPTIONAL direction;
 DERIVE
   z : direction := NVL(normalise(axis), dummy_gri ||
                                 direction([0.0,0.0,1.0]));
 WHERE
   WR1: SELF\geometric_representation_item.dim  = 3;
 END_ENTITY;

 ENTITY axis2_placement_2d
   SUBTYPE OF (placement);
   ref_direction : OPTIONAL direction;
 DERIVE
   p             : LIST [2:2] OF direction := build_2axes(ref_direction);
 WHERE
   WR1: SELF\geometric_representation_item.dim = 2;
 END_ENTITY;

 ENTITY axis2_placement_3d
   SUBTYPE OF (placement);
   axis          : OPTIONAL direction;
   ref_direction : OPTIONAL direction;
 DERIVE
   p             : LIST [3:3] OF direction := build_axes(axis,ref_direction);
 WHERE
   WR1: SELF\placement.location.dim = 3;
   WR2: (NOT (EXISTS (axis))) OR (axis.dim = 3);
   WR3: (NOT (EXISTS (ref_direction))) OR (ref_direction.dim = 3);
   WR4: (NOT (EXISTS (axis))) OR (NOT (EXISTS (ref_direction))) OR
          (cross_product(axis,ref_direction).magnitude > 0.0);
 END_ENTITY;

 ENTITY b_spline_curve
   SUPERTYPE OF (ONEOF(uniform_curve, b_spline_curve_with_knots,
                       quasi_uniform_curve, bezier_curve)
                         ANDOR rational_b_spline_curve)
   SUBTYPE OF (bounded_curve);
   degree               : INTEGER;
   control_points_list  : LIST [2:?] OF cartesian_point;
   curve_form           : b_spline_curve_form;
   closed_curve         : LOGICAL;
   self_intersect       : LOGICAL;
 DERIVE
   upper_index_on_control_points  : INTEGER 
                                  := (SIZEOF(control_points_list) - 1);
   control_points       : ARRAY [0:upper_index_on_control_points]
                                                         OF cartesian_point 
                                  := list_to_array(control_points_list,0,
                                             upper_index_on_control_points);
 WHERE
   WR1: ('GEOMETRY_SCHEMA.UNIFORM_CURVE' IN TYPEOF(self)) OR
        ('GEOMETRY_SCHEMA.QUASI_UNIFORM_CURVE' IN TYPEOF(self)) OR
        ('GEOMETRY_SCHEMA.BEZIER_CURVE' IN TYPEOF(self)) OR
        ('GEOMETRY_SCHEMA.B_SPLINE_CURVE_WITH_KNOTS' IN TYPEOF(self));
 END_ENTITY;

 ENTITY b_spline_curve_with_knots
   SUBTYPE OF (b_spline_curve);
   knot_multiplicities  : LIST [2:?] OF INTEGER;
   knots                : LIST [2:?] OF parameter_value;
   knot_spec            : knot_type;
 DERIVE
   upper_index_on_knots : INTEGER := SIZEOF(knots);
 WHERE
   WR1: constraints_param_b_spline(degree, upper_index_on_knots,
                               upper_index_on_control_points,
                               knot_multiplicities, knots);
    WR2: SIZEOF(knot_multiplicities) = upper_index_on_knots;
END_ENTITY;

 ENTITY b_spline_surface
   SUPERTYPE OF (ONEOF(b_spline_surface_with_knots, uniform_surface,
                       quasi_uniform_surface, bezier_surface)
                         ANDOR rational_b_spline_surface)
   SUBTYPE OF (bounded_surface);
   u_degree             : INTEGER;
   v_degree             : INTEGER;
   control_points_list  : LIST [2:?] OF
                            LIST [2:?] OF cartesian_point;
   surface_form         : b_spline_surface_form;
   u_closed             : LOGICAL;
   v_closed             : LOGICAL;
   self_intersect       : LOGICAL;
 DERIVE
   u_upper             : INTEGER := SIZEOF(control_points_list) - 1;
   v_upper             : INTEGER := SIZEOF(control_points_list[1]) - 1;
   control_points      : ARRAY [0:u_upper] OF ARRAY [0:v_upper] OF 
                         cartesian_point 
                       := make_array_of_array(control_points_list,
                                              0,u_upper,0,v_upper);
 WHERE
   WR1: ('GEOMETRY_SCHEMA.UNIFORM_SURFACE' IN TYPEOF(SELF)) OR
        ('GEOMETRY_SCHEMA.QUASI_UNIFORM_SURFACE' IN TYPEOF(SELF)) OR
        ('GEOMETRY_SCHEMA.BEZIER_SURFACE' IN TYPEOF(SELF)) OR
        ('GEOMETRY_SCHEMA.B_SPLINE_SURFACE_WITH_KNOTS' IN TYPEOF(SELF));
 END_ENTITY;

 ENTITY b_spline_surface_with_knots
   SUBTYPE OF (b_spline_surface);
   u_multiplicities  : LIST [2:?] OF INTEGER;
   v_multiplicities  : LIST [2:?] OF INTEGER;
   u_knots           : LIST [2:?] OF parameter_value;
   v_knots           : LIST [2:?] OF parameter_value;
   knot_spec         : knot_type;
 DERIVE
   knot_u_upper      : INTEGER := SIZEOF(u_knots);
   knot_v_upper      : INTEGER := SIZEOF(v_knots);
 WHERE
    WR1: constraints_param_b_spline(SELF\b_spline_surface.u_degree,
                   knot_u_upper, SELF\b_spline_surface.u_upper,
                               u_multiplicities, u_knots);
    WR2: constraints_param_b_spline(SELF\b_spline_surface.v_degree,
                   knot_v_upper, SELF\b_spline_surface.v_upper,
                               v_multiplicities, v_knots);
    WR3: SIZEOF(u_multiplicities) = knot_u_upper;
    WR4: SIZEOF(v_multiplicities) = knot_v_upper;
 END_ENTITY;

 ENTITY b_spline_volume
   SUPERTYPE OF (ONEOF(b_spline_volume_with_knots, uniform_volume,
                      quasi_uniform_volume,bezier_volume) ANDOR
                       rational_b_spline_volume)
   SUBTYPE OF (volume);
   u_degree             : INTEGER;
   v_degree             : INTEGER;
   w_degree             : INTEGER;
   control_points_list  : LIST [2:?] OF
                            LIST [2:?] OF
                              LIST [2:?] OF cartesian_point;
 DERIVE
   u_upper             : INTEGER := SIZEOF(control_points_list) - 1;
   v_upper             : INTEGER := SIZEOF(control_points_list[1]) - 1;
   w_upper             : INTEGER := SIZEOF(control_points_list[1][1]) - 1;

   control_points      : ARRAY [0:u_upper] OF ARRAY [0:v_upper]
                         OF ARRAY [0:w_upper] OF  cartesian_point
                       := make_array_of_array_of_array (control_points_list,
                                              0,u_upper,0,v_upper,
                                              0,w_upper );
 WHERE
   WR1: ('GEOMETRY_SCHEMA.BEZIER_VOLUME' IN TYPEOF(SELF)) OR
        ('GEOMETRY_SCHEMA.UNIFORM_VOLUME' IN TYPEOF(SELF)) OR
        ('GEOMETRY_SCHEMA.QUASI_UNIFORM_VOLUME' IN TYPEOF(SELF)) OR
        ('GEOMETRY_SCHEMA.B_SPLINE_VOLUME_WITH_KNOTS' IN TYPEOF(SELF)) ;
 END_ENTITY;

 ENTITY b_spline_volume_with_knots
   SUBTYPE OF (b_spline_volume);
   u_multiplicities  : LIST [2:?] OF INTEGER;
   v_multiplicities  : LIST [2:?] OF INTEGER;
   w_multiplicities  : LIST [2:?] OF INTEGER;
   u_knots           : LIST [2:?] OF parameter_value;
   v_knots           : LIST [2:?] OF parameter_value;
   w_knots           : LIST [2:?] OF parameter_value;
 DERIVE
   knot_u_upper      : INTEGER := SIZEOF(u_knots);
   knot_v_upper      : INTEGER := SIZEOF(v_knots);
   knot_w_upper      : INTEGER := SIZEOF(w_knots);
 WHERE
    WR1: constraints_param_b_spline(SELF\b_spline_volume.u_degree,
                   knot_u_upper, SELF\b_spline_volume.u_upper,
                               u_multiplicities, u_knots);
    WR2: constraints_param_b_spline(SELF\b_spline_volume.v_degree,
                   knot_v_upper, SELF\b_spline_volume.v_upper,
                               v_multiplicities, v_knots);
    WR3: constraints_param_b_spline(SELF\b_spline_volume.w_degree,
                   knot_w_upper, SELF\b_spline_volume.w_upper,
                               w_multiplicities, w_knots);
    WR4: SIZEOF(u_multiplicities) = knot_u_upper;
    WR5: SIZEOF(v_multiplicities) = knot_v_upper;
    WR6: SIZEOF(w_multiplicities) = knot_w_upper;
 END_ENTITY;

 ENTITY bezier_curve
   SUBTYPE OF (b_spline_curve);
 END_ENTITY;

 ENTITY bezier_surface
   SUBTYPE OF (b_spline_surface);
 END_ENTITY;

 ENTITY bezier_volume
   SUBTYPE OF (b_spline_volume);
 END_ENTITY;

 ENTITY block_volume
   SUBTYPE OF (volume);
   position : axis2_placement_3d;
   x        : positive_length_measure;
   y        : positive_length_measure;
   z        : positive_length_measure;
 END_ENTITY;

 ENTITY boundary_curve
   SUBTYPE OF (composite_curve_on_surface);
 WHERE
   WR1: SELF\composite_curve.closed_curve;
 END_ENTITY;

 ENTITY bounded_curve
   SUPERTYPE OF (ONEOF(polyline, b_spline_curve, trimmed_curve,
                      bounded_pcurve, bounded_surface_curve, composite_curve))
   SUBTYPE OF (curve);
 END_ENTITY;

 ENTITY bounded_pcurve
   SUBTYPE OF (pcurve, bounded_curve);
  WHERE
    WR1: ('GEOMETRY_SCHEMA.BOUNDED_CURVE' IN
                   TYPEOF(SELF\pcurve.reference_to_curve.items[1]));
  END_ENTITY;

 ENTITY bounded_surface
   SUPERTYPE OF (ONEOF(b_spline_surface, rectangular_trimmed_surface,
                       curve_bounded_surface, rectangular_composite_surface))
   SUBTYPE OF (surface);
 END_ENTITY;

 ENTITY bounded_surface_curve
   SUBTYPE OF (surface_curve, bounded_curve);
 WHERE
   WR1: ('GEOMETRY_SCHEMA.BOUNDED_CURVE' IN
             TYPEOF(SELF\surface_curve.curve_3d));
 END_ENTITY;

 ENTITY cartesian_point
   SUPERTYPE OF (ONEOF(cylindrical_point, polar_point, spherical_point))
   SUBTYPE OF (point);
    coordinates  : LIST [1:3] OF length_measure;
 END_ENTITY;

 ENTITY cartesian_transformation_operator
   SUPERTYPE OF(ONEOF(cartesian_transformation_operator_2d,
                               cartesian_transformation_operator_3d))
   SUBTYPE OF (geometric_representation_item,
                            functionally_defined_transformation);
   axis1        : OPTIONAL direction;
   axis2        : OPTIONAL direction;
   local_origin : cartesian_point;
   scale        : OPTIONAL REAL;
 DERIVE
   scl          : REAL := NVL(scale, 1.0);
 WHERE
   WR1: scl > 0.0;
 END_ENTITY;

 ENTITY cartesian_transformation_operator_2d
   SUBTYPE OF (cartesian_transformation_operator);
 DERIVE
   u : LIST[2:2] OF direction := 
       base_axis(2,SELF\cartesian_transformation_operator.axis1,
                   SELF\cartesian_transformation_operator.axis2,?);
 WHERE
   WR1: SELF\geometric_representation_item.dim = 2;
 END_ENTITY;

 ENTITY cartesian_transformation_operator_3d
   SUBTYPE OF (cartesian_transformation_operator);
   axis3 : OPTIONAL direction;
 DERIVE
   u     : LIST[3:3] OF direction 
         := base_axis(3,SELF\cartesian_transformation_operator.axis1,
                        SELF\cartesian_transformation_operator.axis2,axis3);
 WHERE
   WR1: SELF\geometric_representation_item.dim = 3;
 END_ENTITY;

 ENTITY circle
   SUBTYPE OF (conic);
   radius   : positive_length_measure;
 END_ENTITY;

 ENTITY circular_involute
   SUBTYPE OF (curve);
   position    : axis2_placement;
   base_radius : positive_length_measure;
 END_ENTITY;

 ENTITY clothoid
   SUBTYPE OF (curve);
     position          : axis2_placement;
     clothoid_constant : length_measure;
  END_ENTITY;

 ENTITY composite_curve
   SUBTYPE OF (bounded_curve);
   segments       : LIST [1:?] OF composite_curve_segment;
   self_intersect : LOGICAL;
 DERIVE
   n_segments     : INTEGER := SIZEOF(segments);
   closed_curve   : LOGICAL 
                  := segments[n_segments].transition <> discontinuous;
 WHERE
   WR1: ((NOT closed_curve) AND (SIZEOF(QUERY(temp <* segments |
                temp.transition = discontinuous)) = 1)) OR
            ((closed_curve) AND (SIZEOF(QUERY(temp <* segments | 
                temp.transition = discontinuous)) = 0));
 END_ENTITY;

 ENTITY composite_curve_on_surface
   SUPERTYPE OF(boundary_curve)
   SUBTYPE OF (composite_curve);

 DERIVE
   basis_surface : SET[0:2] OF surface :=
                get_basis_surface(SELF);
 WHERE
   WR1: SIZEOF(basis_surface) > 0;
   WR2: constraints_composite_curve_on_surface(SELF);
 END_ENTITY;

 ENTITY composite_curve_segment
 SUBTYPE OF (founded_item);
   transition    : transition_code;
   same_sense    : BOOLEAN;
   parent_curve  : curve;
 INVERSE
   using_curves  : BAG[1:?] OF composite_curve FOR segments;
 WHERE
   WR1 : ('GEOMETRY_SCHEMA.BOUNDED_CURVE' IN TYPEOF(parent_curve));
 END_ENTITY;

 ENTITY conic
   SUPERTYPE OF (ONEOF(circle, ellipse, hyperbola, parabola))
   SUBTYPE OF (curve);
   position: axis2_placement;
 END_ENTITY;

 ENTITY
 conical_surface
   SUBTYPE OF (elementary_surface);
   radius     : length_measure;
   semi_angle : plane_angle_measure;
 WHERE
   WR1: radius >= 0.0;
 END_ENTITY;

ENTITY curve
   SUPERTYPE OF (ONEOF(line, conic, clothoid, circular_involute, pcurve,
             surface_curve, offset_curve_2d, offset_curve_3d, curve_replica))
   SUBTYPE OF (geometric_representation_item);
END_ENTITY;
 
 ENTITY curve_bounded_surface
    SUBTYPE OF (bounded_surface);
    basis_surface    : surface;
    boundaries       : SET [1:?] OF boundary_curve;
    implicit_outer   : BOOLEAN;
  WHERE
    WR1: (NOT implicit_outer) OR
         (SIZEOF (QUERY (temp <* boundaries |
           'GEOMETRY_SCHEMA.OUTER_BOUNDARY_CURVE' IN TYPEOF(temp))) = 0);
    WR2: (NOT(implicit_outer)) OR
                ('GEOMETRY_SCHEMA.BOUNDED_SURFACE' IN TYPEOF(basis_surface));
    WR3: SIZEOF(QUERY(temp <* boundaries |
                  'GEOMETRY_SCHEMA.OUTER_BOUNDARY_CURVE' IN
                                         TYPEOF(temp))) <= 1;
    WR4: SIZEOF(QUERY(temp <* boundaries |
            (temp\composite_curve_on_surface.basis_surface [1] <>
                                         SELF.basis_surface))) = 0;
 END_ENTITY;

 ENTITY curve_replica
   SUBTYPE OF (curve);
   parent_curve   : curve;
   transformation : cartesian_transformation_operator;
 WHERE
   WR1: transformation.dim = parent_curve.dim;
   WR2: acyclic_curve_replica (SELF, parent_curve);
 END_ENTITY;

 ENTITY cylindrical_point
   SUBTYPE OF (cartesian_point);
     r     : length_measure;
     theta : plane_angle_measure;
     z     : length_measure;
   DERIVE
     SELF\cartesian_point.coordinates : LIST [1:3] OF length_measure :=
                     [r*cos(theta), r*sin(theta), z];
   WHERE
    WR1: r >= 0.0;
 END_ENTITY;

 ENTITY cylindrical_surface
   SUBTYPE OF (elementary_surface);
   radius : positive_length_measure;
 END_ENTITY;

 ENTITY  cylindrical_volume
   SUBTYPE OF (volume);
   position : axis2_placement_3d;
   radius   : positive_length_measure;
   height   : positive_length_measure;
 END_ENTITY;

 ENTITY degenerate_pcurve
   SUBTYPE OF (point);
   basis_surface:  surface;
   reference_to_curve : definitional_representation;
 WHERE
   WR1: SIZEOF(reference_to_curve\representation.items) = 1;
   WR2: 'GEOMETRY_SCHEMA.CURVE' IN TYPEOF
                    (reference_to_curve\representation.items[1]);
   WR3: reference_to_curve\representation.
                   items[1]\geometric_representation_item.dim =2;
 END_ENTITY;

 ENTITY degenerate_toroidal_surface
   SUBTYPE OF (toroidal_surface);
   select_outer : BOOLEAN;
 WHERE
  WR1: major_radius <   minor_radius;
 END_ENTITY;

 ENTITY direction
   SUBTYPE OF (geometric_representation_item);
   direction_ratios : LIST [2:3] OF REAL;
 WHERE
   WR1: SIZEOF(QUERY(tmp <* direction_ratios | tmp <> 0.0)) > 0;
 END_ENTITY;

ENTITY dupin_cyclide_surface
   SUBTYPE OF (elementary_surface);
   generalised_major_radius : positive_length_measure;
   generalised_minor_radius : positive_length_measure;
   skewness                 : length_measure;
WHERE
  WR1: skewness >= 0.0;
END_ENTITY;

 ENTITY eccentric_conical_volume
  SUBTYPE OF (volume);
   position    : axis2_placement_3d;
   semi_axis_1 : positive_length_measure;
   semi_axis_2 : positive_length_measure;
   height      : positive_length_measure;
   x_offset    : length_measure;
   y_offset    : length_measure;
   ratio       : REAL;
 WHERE
  WR1 : ratio >= 0.0;
 END_ENTITY;

 ENTITY elementary_surface
   SUPERTYPE OF (ONEOF(plane, cylindrical_surface, conical_surface,
                       spherical_surface, toroidal_surface))
   SUBTYPE OF (surface);
   position : axis2_placement_3d;
 END_ENTITY;

 ENTITY ellipse
   SUBTYPE OF (conic);
   semi_axis_1 : positive_length_measure;
   semi_axis_2 : positive_length_measure;
 END_ENTITY;

 ENTITY ellipsoid_volume
   SUBTYPE OF (volume);
     position      : axis2_placement_3d;
     semi_axis_1 : positive_length_measure;
     semi_axis_2 : positive_length_measure;
     semi_axis_3 : positive_length_measure;
 END_ENTITY;

 ENTITY evaluated_degenerate_pcurve
   SUBTYPE OF (degenerate_pcurve);
   equivalent_point : cartesian_point;
 END_ENTITY;

 ENTITY fixed_reference_swept_surface
   SUBTYPE OF (swept_surface);
      directrix       : curve;
      fixed_reference : direction;
 END_ENTITY;

  ENTITY geometric_representation_item
  SUPERTYPE OF (ONEOF(point, direction, vector, placement,
                 cartesian_transformation_operator, curve, surface,
                 edge_curve, face_surface, poly_loop, vertex_point,
                 solid_model, boolean_result, sphere, right_circular_cone,
                 right_circular_cylinder, torus, block, primitive_2d,
                 right_angular_wedge, ellipsoid, faceted_primitive,
                 rectangular_pyramid, cyclide_segment_solid, volume,
                 half_space_solid, half_space_2d,
                 shell_based_surface_model, face_based_surface_model,
                 shell_based_wireframe_model, edge_based_wireframe_model,
                 geometric_set))
  SUBTYPE OF (representation_item);
  DERIVE
    dim : dimension_count := dimension_of(SELF);
  WHERE
  WR1: SIZEOF (QUERY (using_rep <* using_representations (SELF) |
      NOT ('GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_CONTEXT' IN
      TYPEOF (using_rep.context_of_items)))) = 0;
  END_ENTITY;

 ENTITY line
   SUBTYPE OF (curve);
   pnt : cartesian_point;
   dir : vector;
 WHERE
   WR1: dir.dim  = pnt.dim;
 END_ENTITY;

 ENTITY hexahedron_volume
   SUBTYPE OF (volume);
   points  : LIST[8:8] OF cartesian_point;
  WHERE
    WR1: above_plane(points[1], points[2], points[3], points[4]) = 0.0;
    WR2: above_plane(points[5], points[8], points[7], points[6]) = 0.0;
    WR3: above_plane(points[1], points[4], points[8], points[5]) = 0.0;
    WR4: above_plane(points[4], points[3], points[7], points[8]) = 0.0;
    WR5: above_plane(points[3], points[2], points[6], points[7]) = 0.0;
    WR6: above_plane(points[1], points[5], points[6], points[2]) = 0.0;
    WR7: same_side([points[1], points[2], points[3]],
                     [points[5], points[6], points[7], points[8]]);
    WR8: same_side([points[1], points[4], points[8]],
                     [points[3], points[7], points[6], points[2]]);
    WR9:  same_side([points[1], points[2], points[5]],
                      [points[3], points[7], points[8], points[4]]);
    WR10: same_side([points[5], points[6], points[7]],
                     [points[1], points[2], points[3], points[4]]);
    WR11: same_side([points[3], points[7], points[6]],
                     [points[1], points[4], points[8], points[5]]);
    WR12: same_side([points[3], points[7], points[8]],
                      [points[1], points[5], points[6], points[2]]);
    WR13: points[1].dim = 3;
  END_ENTITY;

 ENTITY hyperbola
   SUBTYPE OF (conic);
   semi_axis      : positive_length_measure;
   semi_imag_axis : positive_length_measure;
 END_ENTITY;

 ENTITY intersection_curve
   SUBTYPE OF (surface_curve);
 WHERE
   WR1: SIZEOF(SELF\surface_curve.associated_geometry) = 2;
   WR2: associated_surface(SELF\surface_curve.associated_geometry[1]) <>
             associated_surface(SELF\surface_curve.associated_geometry[2]);
 END_ENTITY;

 ENTITY offset_curve_2d
   SUBTYPE OF (curve);
   basis_curve    : curve;
   distance       : length_measure;
   self_intersect : LOGICAL;
 WHERE
   WR1: basis_curve.dim = 2;
 END_ENTITY;

 ENTITY offset_curve_3d
   SUBTYPE OF (curve);
   basis_curve    : curve;
   distance       : length_measure;
   self_intersect : LOGICAL;
   ref_direction  : direction;
 WHERE
   WR1 : (basis_curve.dim = 3) AND (ref_direction.dim = 3);
 END_ENTITY;

 ENTITY offset_surface
   SUBTYPE OF (surface);
   basis_surface  : surface;
   distance       : length_measure;
   self_intersect : LOGICAL;
 END_ENTITY;

 ENTITY oriented_surface
   SUBTYPE OF (surface);
   orientation : BOOLEAN;
 END_ENTITY;

 ENTITY outer_boundary_curve
   SUBTYPE OF (boundary_curve);
 END_ENTITY;

 ENTITY parabola
   SUBTYPE OF (conic);
   focal_dist : length_measure;
 WHERE
   WR1: focal_dist <> 0.0;
 END_ENTITY;

 ENTITY pcurve
   SUBTYPE OF (curve);
   basis_surface      : surface;
   reference_to_curve : definitional_representation;
 WHERE
   WR1: SIZEOF(reference_to_curve\representation.items) = 1;
   WR2: 'GEOMETRY_SCHEMA.CURVE' IN TYPEOF
                    (reference_to_curve\representation.items[1]);
   WR3: reference_to_curve\representation.items[1]\
                               geometric_representation_item.dim =2;
 END_ENTITY;

 ENTITY placement
   SUPERTYPE OF (ONEOF(axis1_placement,axis2_placement_2d,axis2_placement_3d))
   SUBTYPE OF (geometric_representation_item);
   location : cartesian_point;
 END_ENTITY;

 ENTITY plane
 SUBTYPE OF (elementary_surface);
 END_ENTITY;

 ENTITY polar_point
   SUBTYPE OF (cartesian_point);
     r     : length_measure;
     theta : plane_angle_measure;
   DERIVE
     SELF\cartesian_point.coordinates : LIST [1:3] OF length_measure :=
                   [r*cos(theta), r*sin(theta)];
   WHERE
    WR1: r >= 0.0;
 END_ENTITY;

ENTITY point
   SUPERTYPE OF (ONEOF(cartesian_point, point_on_curve, point_on_surface,
                        point_in_volume, point_replica, degenerate_pcurve))
   SUBTYPE OF (geometric_representation_item);
 END_ENTITY;

 ENTITY point_in_volume
   SUBTYPE OF (point);
   basis_volume     : volume;
   point_parameter_u : parameter_value;
   point_parameter_v : parameter_value;
   point_parameter_w : parameter_value;
 END_ENTITY;

 ENTITY point_on_curve
   SUBTYPE OF (point);
   basis_curve     : curve;
   point_parameter : parameter_value;
 END_ENTITY;

 ENTITY point_on_surface
   SUBTYPE OF (point);
   basis_surface     : surface;
   point_parameter_u : parameter_value;
   point_parameter_v : parameter_value;
 END_ENTITY;

 ENTITY point_replica
   SUBTYPE OF (point);
   parent_pt      : point;
   transformation : cartesian_transformation_operator;
 WHERE
   WR1: transformation.dim = parent_pt.dim;
   WR2: acyclic_point_replica (SELF,parent_pt);
 END_ENTITY;

 ENTITY polyline
   SUBTYPE OF (bounded_curve);
   points : LIST [2:?] OF cartesian_point;
 END_ENTITY;

 ENTITY pyramid_volume
   SUBTYPE OF (volume);
   position       : axis2_placement_3d;
   xlength        : positive_length_measure;
   ylength          : positive_length_measure;
   height         : positive_length_measure;
 END_ENTITY;

 ENTITY quasi_uniform_curve
   SUBTYPE OF (b_spline_curve);
 END_ENTITY;

 ENTITY quasi_uniform_surface
   SUBTYPE OF (b_spline_surface);
 END_ENTITY;

 ENTITY quasi_uniform_volume
   SUBTYPE OF (b_spline_volume);
 END_ENTITY;

 ENTITY rational_b_spline_curve
   SUBTYPE OF (b_spline_curve);
   weights_data : LIST [2:?] OF REAL;
                                
 DERIVE
   weights           : ARRAY [0:upper_index_on_control_points] OF REAL
                               := list_to_array(weights_data,0,
                                      upper_index_on_control_points);
 WHERE
   WR1:  SIZEOF(weights_data) = SIZEOF(SELF\b_spline_curve.
                                           control_points_list);
   WR2:  curve_weights_positive(SELF);
 END_ENTITY;

 ENTITY rational_b_spline_surface
   SUBTYPE OF (b_spline_surface);
   weights_data : LIST [2:?] OF
                    LIST [2:?] OF REAL;
                                
 DERIVE
   weights       : ARRAY [0:u_upper] OF
                      ARRAY [0:v_upper] OF REAL
                 := make_array_of_array(weights_data,0,u_upper,0,v_upper);
 WHERE
   WR1: (SIZEOF(weights_data) =
                     SIZEOF(SELF\b_spline_surface.control_points_list))
           AND (SIZEOF(weights_data[1]) =
                  SIZEOF(SELF\b_spline_surface.control_points_list[1]));
   WR2: surface_weights_positive(SELF);
 END_ENTITY;

 ENTITY rational_b_spline_volume
   SUBTYPE OF (b_spline_volume);
   weights_data : LIST [2:?] OF
                   LIST [2:?] OF
                    LIST [2:?] OF REAL;
                                
 DERIVE
   weights       : ARRAY [0:u_upper] OF
                    ARRAY [0:v_upper] OF
                     ARRAY [0:w_upper] OF REAL
                 := make_array_of_array_of_array
                             (weights_data,0,u_upper,0,v_upper,0,w_upper);
 WHERE
   WR1: (SIZEOF(weights_data) =
                         SIZEOF(SELF\b_spline_volume.control_points_list))
           AND (SIZEOF(weights_data[1]) =
                     SIZEOF(SELF\b_spline_volume.control_points_list[1]))
            AND (SIZEOF(weights_data[1][1]) =
                 SIZEOF(SELF\b_spline_volume.control_points_list[1][1]));
   WR2: volume_weights_positive(SELF);
 END_ENTITY;

 ENTITY rectangular_composite_surface
   SUBTYPE OF (bounded_surface);
   segments      : LIST [1:?] OF LIST [1:?] OF surface_patch;
 DERIVE
   n_u : INTEGER := SIZEOF(segments);
   n_v : INTEGER := SIZEOF(segments[1]);
 WHERE
   WR1: SIZEOF(QUERY (s <* segments | n_v <> SIZEOF (s))) = 0;
   WR2: constraints_rectangular_composite_surface(SELF);
 END_ENTITY;

 ENTITY rectangular_trimmed_surface
   SUBTYPE OF (bounded_surface);
   basis_surface : surface;
   u1            : parameter_value;
   u2            : parameter_value;
   v1            : parameter_value;
   v2            : parameter_value;
   usense        : BOOLEAN;
   vsense        : BOOLEAN;
 WHERE
   WR1: u1 <> u2;
   WR2: v1 <> v2;
   WR3: (('GEOMETRY_SCHEMA.ELEMENTARY_SURFACE' IN TYPEOF(basis_surface))
       AND  (NOT ('GEOMETRY_SCHEMA.PLANE' IN TYPEOF(basis_surface)))) OR
      ('GEOMETRY_SCHEMA.SURFACE_OF_REVOLUTION' IN TYPEOF(basis_surface))
          OR (usense = (u2 > u1));
   WR4: (('GEOMETRY_SCHEMA.SPHERICAL_SURFACE' IN TYPEOF(basis_surface))
          OR
         ('GEOMETRY_SCHEMA.TOROIDAL_SURFACE' IN TYPEOF(basis_surface)))
          OR (vsense = (v2 > v1));
 END_ENTITY;

 ENTITY reparametrised_composite_curve_segment
   SUBTYPE OF (composite_curve_segment);
   param_length : parameter_value;
 WHERE
   WR1: param_length > 0.0;
 END_ENTITY;

 ENTITY seam_curve
   SUBTYPE OF (surface_curve);
 WHERE
   WR1: SIZEOF(SELF\surface_curve.associated_geometry) = 2;
   WR2: associated_surface(SELF\surface_curve.associated_geometry[1]) =
           associated_surface(SELF\surface_curve.associated_geometry[2]);
   WR3: 'GEOMETRY_SCHEMA.PCURVE' IN
           TYPEOF(SELF\surface_curve.associated_geometry[1]);
   WR4: 'GEOMETRY_SCHEMA.PCURVE' IN
            TYPEOF(SELF\surface_curve.associated_geometry[2]);
 END_ENTITY;

 ENTITY spherical_point
   SUBTYPE OF (cartesian_point);
     r     : length_measure;
     theta : plane_angle_measure;
     phi   : plane_angle_measure;
   DERIVE
     SELF\cartesian_point.coordinates : LIST [1:3] OF length_measure :=
       [r*sin(theta)*cos(phi), r*sin(theta)*sin(phi), r*cos(theta)];
   WHERE
    WR1: r >= 0.0;
 END_ENTITY;

 ENTITY spherical_surface
   SUBTYPE OF (elementary_surface);
   radius   : positive_length_measure;
 END_ENTITY;

 ENTITY spherical_volume
   SUBTYPE OF (volume);
   position : axis2_placement_3d;
   radius   : positive_length_measure;
 END_ENTITY;

 ENTITY surface
   SUPERTYPE OF (ONEOF(elementary_surface, swept_surface, bounded_surface,
                       offset_surface, surface_replica))
   SUBTYPE OF (geometric_representation_item);
 END_ENTITY;

 ENTITY surface_curve
   SUPERTYPE OF (ONEOF(intersection_curve, seam_curve) ANDOR
                                            bounded_surface_curve)
   SUBTYPE OF (curve);
   curve_3d              : curve;
   associated_geometry   : LIST[1:2] OF pcurve_or_surface;
   master_representation : preferred_surface_curve_representation;
 DERIVE
   basis_surface         : SET[1:2] OF surface
                         := get_basis_surface(SELF);
 WHERE
   WR1: curve_3d.dim = 3;
   WR2: ('GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(associated_geometry[1])) OR
                        (master_representation <> pcurve_s1);
   WR3: ('GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(associated_geometry[2])) OR
                        (master_representation <> pcurve_s2);
   WR4: NOT ('GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(curve_3d));
 END_ENTITY;

 ENTITY surface_curve_swept_surface
   SUBTYPE OF (swept_surface);
      directrix  : curve;
      reference_surface : surface;
   WHERE
     WR1 : (NOT ('GEOMETRY_SCHEMA.SURFACE_CURVE' IN TYPEOF(directrix))) OR
          (reference_surface IN (directrix\surface_curve.basis_surface));
 END_ENTITY;

 ENTITY surface_of_linear_extrusion
   SUBTYPE OF (swept_surface);
   extrusion_axis      : vector;
 END_ENTITY;

 ENTITY surface_of_revolution
  SUBTYPE OF (swept_surface);
   axis_position       : axis1_placement;
 DERIVE
   axis_line : line := representation_item('')||
                     geometric_representation_item()|| curve()||
                     line(axis_position.location, representation_item('')||
                     geometric_representation_item()||
                     vector(axis_position.z, 1.0));
 END_ENTITY;

 ENTITY surface_patch
 SUBTYPE OF (founded_item);
   parent_surface : bounded_surface;
   u_transition   : transition_code;
   v_transition   : transition_code;
   u_sense        : BOOLEAN;
   v_sense        : BOOLEAN;
 INVERSE
   using_surfaces : BAG[1:?] OF rectangular_composite_surface FOR segments;
 WHERE
   WR1: (NOT ('GEOMETRY_SCHEMA.CURVE_BOUNDED_SURFACE' 
                 IN TYPEOF(parent_surface)));
 END_ENTITY;

 ENTITY surface_replica
   SUBTYPE OF (surface);
   parent_surface : surface;
   transformation : cartesian_transformation_operator_3d;
 WHERE
   WR1: acyclic_surface_replica(SELF, parent_surface);
 END_ENTITY;

 ENTITY swept_surface
   SUPERTYPE OF (ONEOF(surface_of_linear_extrusion, surface_of_revolution,
                 surface_curve_swept_surface, fixed_reference_swept_surface))
   SUBTYPE OF (surface);
   swept_curve : curve;
 END_ENTITY;

 ENTITY tetrahedron_volume
   SUBTYPE OF (volume);
     point_1 : cartesian_point ;
     point_2 : cartesian_point ;
     point_3 : cartesian_point ;
     point_4 : cartesian_point ;
  WHERE
    WR1: point_1.dim = 3 ;
    WR2: above_plane(point_1, point_2, point_3, point_4) <> 0.0 ;
  END_ENTITY;

 ENTITY toroidal_volume
   SUBTYPE OF (volume);
   position     : axis2_placement_3d;
   major_radius : positive_length_measure;
   minor_radius : positive_length_measure;
 WHERE
   WR1 : minor_radius < major_radius;
 END_ENTITY;

 ENTITY trimmed_curve
   SUBTYPE OF (bounded_curve);
   basis_curve           : curve;
   trim_1                : SET[1:2] OF trimming_select;
   trim_2                : SET[1:2] OF trimming_select;
   sense_agreement       : BOOLEAN;
   master_representation : trimming_preference;
 WHERE
   WR1: (HIINDEX(trim_1) = 1) OR (TYPEOF(trim_1[1]) <> TYPEOF(trim_1[2]));
   WR2: (HIINDEX(trim_2) = 1) OR (TYPEOF(trim_2[1]) <> TYPEOF(trim_2[2]));
 END_ENTITY;

 ENTITY toroidal_surface
   SUBTYPE OF (elementary_surface);
   major_radius : positive_length_measure;
   minor_radius : positive_length_measure;
 END_ENTITY;

 ENTITY uniform_curve
   SUBTYPE OF (b_spline_curve);
 END_ENTITY;

 ENTITY uniform_surface
   SUBTYPE OF (b_spline_surface);
 END_ENTITY;

 ENTITY uniform_volume
   SUBTYPE OF (b_spline_volume);
 END_ENTITY;

 ENTITY vector
   SUBTYPE OF (geometric_representation_item);
   orientation : direction;
   magnitude   : length_measure;
 WHERE
   WR1 : magnitude >= 0.0;
 END_ENTITY;

 ENTITY volume
   SUPERTYPE OF (ONEOF(block_volume, wedge_volume, spherical_volume,
                    cylindrical_volume, eccentric_conical_volume,
                    toroidal_volume, pyramid_volume, b_spline_volume,
                    ellipsoid_volume, tetrahedron_volume, hexahedron_volume))
   SUBTYPE OF (geometric_representation_item);
   WHERE
     WR1 : SELF\geometric_representation_item.dim = 3;
 END_ENTITY;

  ENTITY wedge_volume
   SUBTYPE OF (volume);
   position : axis2_placement_3d;
   x        : positive_length_measure;
   y        : positive_length_measure;
   z        : positive_length_measure;
   ltx      : length_measure;
 WHERE
   WR1: ((0.0 <= ltx) AND (ltx < x));
 END_ENTITY;

RULE compatible_dimension FOR 
  (cartesian_point,
  direction,
  representation_context,
  geometric_representation_context);
WHERE

  -- ensure that the count of coordinates of each cartesian_point
  -- matches the coordinate_space_dimension of each geometric_context in
  -- which it is geometrically founded
  WR1: SIZEOF(QUERY(x <* cartesian_point| SIZEOF(QUERY
       (y <* geometric_representation_context | item_in_context(x,y) AND
       (HIINDEX(x.coordinates) <> y.coordinate_space_dimension))) > 0 )) =0;

  -- ensure that the count of direction_ratios of each direction
  -- matches the coordinate_space_dimension of each geometric_context in
  -- which it is geometrically founded
  WR2: SIZEOF(QUERY(x <* direction | SIZEOF( QUERY
       (y <* geometric_representation_context | item_in_context(x,y) AND
       (HIINDEX(x.direction_ratios) <> y.coordinate_space_dimension)))
       > 0 )) = 0;
END_RULE;

 FUNCTION above_plane(p1, p2, p3, p4 : cartesian_point) : REAL;
   LOCAL
     dir2, dir3, dir4 : direction :=
                 dummy_gri || direction([1.0, 0.0, 0.0]);
     val, mag         : REAL;
   END_LOCAL;

   IF (p1.dim <> 3) THEN
     RETURN(?);
   END_IF;
   REPEAT i := 1 TO 3;
     dir2.direction_ratios[i] := p2.coordinates[i] - p1.coordinates[i];
     dir3.direction_ratios[i] := p3.coordinates[i] - p1.coordinates[i];
     dir4.direction_ratios[i] := p4.coordinates[i] - p1.coordinates[i];
     mag := dir4.direction_ratios[i]*dir4.direction_ratios[i];
  END_REPEAT;
  mag := sqrt(mag);
  val := mag*dot_product(dir4, cross_product(dir2, dir3).orientation);
  RETURN(val);
 END_FUNCTION;

 FUNCTION acyclic_curve_replica(rep : curve_replica; parent : curve)
                                              : BOOLEAN;
   IF NOT (('GEOMETRY_SCHEMA.CURVE_REPLICA') IN TYPEOF(parent)) THEN
      RETURN (TRUE);
   END_IF;
 (* Return TRUE if the parent is not of type curve_replica *)
   IF (parent :=: rep) THEN
      RETURN (FALSE);
  (* Return FALSE if the parent is the same curve_replica, otherwise,
   call function again with the parents own parent_curve.     *)
    ELSE
    RETURN(acyclic_curve_replica(rep,
               parent\curve_replica.parent_curve));
    END_IF;
  END_FUNCTION;

 FUNCTION acyclic_point_replica(rep : point_replica; parent : point)
                                              : BOOLEAN;
   IF NOT (('GEOMETRY_SCHEMA.POINT_REPLICA') IN TYPEOF(parent)) THEN
      RETURN (TRUE);
   END_IF;
 (* Return TRUE if the parent is not of type point_replica *)
   IF (parent :=: rep) THEN
      RETURN (FALSE);
  (* Return FALSE if the parent is the same point_replica, otherwise,
   call function again with the parents own parent_pt.     *)
    ELSE RETURN(acyclic_point_replica(rep, parent\point_replica.parent_pt));
    END_IF;
  END_FUNCTION;

 FUNCTION acyclic_surface_replica(rep : surface_replica; parent : surface)
                                              : BOOLEAN;
   IF NOT (('GEOMETRY_SCHEMA.SURFACE_REPLICA') IN TYPEOF(parent)) THEN
      RETURN (TRUE);
   END_IF;
 (* Return TRUE if the parent is not of type surface_replica *)
   IF (parent :=: rep) THEN
      RETURN (FALSE);
  (* Return FALSE if the parent is the same surface_replica, otherwise,
   call function again with the parents own parent_surface.     *)
    ELSE RETURN(acyclic_surface_replica(rep,
                   parent\surface_replica.parent_surface));
    END_IF;
  END_FUNCTION;

 FUNCTION associated_surface(arg : pcurve_or_surface) : surface;
   LOCAL
     surf : surface;
   END_LOCAL;
   
   IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(arg) THEN
     surf := arg.basis_surface;
   ELSE
     surf := arg;
   END_IF;
   RETURN(surf);
 END_FUNCTION;

FUNCTION base_axis(dim : INTEGER; axis1, axis2, axis3 : direction) :
                                                 LIST [2:3] OF 
direction;
  LOCAL
    u      : LIST [2:3] OF direction;
    factor : REAL;
    d1, d2 : direction;
  END_LOCAL;
  
  IF (dim = 3) THEN
    d1 := NVL(normalise(axis3),  dummy_gri || direction([0.0,0.0,1.0]));
    d2 := first_proj_axis(d1,axis1);
    u := [d2, second_proj_axis(d1,d2,axis2), d1];
  ELSE
     IF EXISTS(axis1) THEN
      d1 := normalise(axis1);
      u := [d1, orthogonal_complement(d1)];
      IF EXISTS(axis2) THEN
        factor := dot_product(axis2,u[2]);
        IF (factor < 0.0) THEN
          u[2].direction_ratios[1] := -u[2].direction_ratios[1];
          u[2].direction_ratios[2] := -u[2].direction_ratios[2];
        END_IF;
      END_IF;
    ELSE
      IF EXISTS(axis2) THEN
        d1 := normalise(axis2);
        u := [orthogonal_complement(d1), d1]; 
        u[1].direction_ratios[1] := -u[1].direction_ratios[1];
        u[1].direction_ratios[2] := -u[1].direction_ratios[2];
      ELSE
        u := [dummy_gri || direction([1.0, 0.0]), dummy_gri ||
                                                direction([0.0, 1.0])];
      END_IF;
    END_IF;
  END_IF;
  RETURN(u);
END_FUNCTION;

 FUNCTION build_2axes(ref_direction : direction) : LIST [2:2] OF direction;
   LOCAL
     d : direction := NVL(normalise(ref_direction),
                          dummy_gri || direction([1.0,0.0]));
   END_LOCAL;

   RETURN([d, orthogonal_complement(d)]);
 END_FUNCTION;

 FUNCTION build_axes(axis, ref_direction : direction) :
                                          LIST [3:3] OF direction;
   LOCAL
     d1, d2 : direction;
   END_LOCAL;
  d1 := NVL(normalise(axis), dummy_gri || direction([0.0,0.0,1.0]));
  d2 := first_proj_axis(d1, ref_direction);
  RETURN([d2, normalise(cross_product(d1,d2)).orientation, d1]);
 END_FUNCTION;

 FUNCTION constraints_composite_curve_on_surface
               (c: composite_curve_on_surface) : BOOLEAN;
   LOCAL
     n_segments : INTEGER := SIZEOF(c.segments);
   END_LOCAL;
        
   REPEAT k := 1 TO n_segments;
     IF (NOT('GEOMETRY_SCHEMA.PCURVE' IN 
           TYPEOF(c\composite_curve.segments[k].parent_curve))) AND
        (NOT('GEOMETRY_SCHEMA.SURFACE_CURVE' IN 
           TYPEOF(c\composite_curve.segments[k].parent_curve))) AND
        (NOT('GEOMETRY_SCHEMA.COMPOSITE_CURVE_ON_SURFACE' IN
           TYPEOF(c\composite_curve.segments[k].parent_curve)))  THEN
       RETURN (FALSE);
     END_IF;
   END_REPEAT;
   RETURN(TRUE);
 END_FUNCTION;

 FUNCTION constraints_param_b_spline(degree, up_knots, up_cp : INTEGER;
                                               knot_mult : LIST OF INTEGER;
                        knots : LIST OF parameter_value) : BOOLEAN;
   LOCAL
     result  : BOOLEAN := TRUE;
     k, sum  : INTEGER;
   END_LOCAL;
   
   (* Find sum of knot multiplicities. *)
   sum := knot_mult[1];
   
   REPEAT i := 2 TO up_knots;
     sum := sum + knot_mult[i];
   END_REPEAT;
   
   (* Check limits holding for all B-spline parametrisations *)
   IF (degree < 1) OR (up_knots < 2) OR (up_cp < degree) OR
         (sum <> (degree + up_cp + 2)) THEN
     result := FALSE;
     RETURN(result);
   END_IF;
   
   k := knot_mult[1];
   
   IF (k < 1) OR (k > degree + 1) THEN
     result := FALSE;
     RETURN(result);
   END_IF;
      
   REPEAT i := 2 TO up_knots;
     IF (knot_mult[i] < 1) OR (knots[i] <= knots[i-1]) THEN
       result := FALSE;
       RETURN(result);
     END_IF;
        
     k := knot_mult[i];
     
     IF (i < up_knots) AND (k > degree) THEN
       result := FALSE;
       RETURN(result);
     END_IF;
        
     IF (i = up_knots) AND (k > degree + 1) THEN
       result := FALSE;
       RETURN(result);
     END_IF;
   END_REPEAT;
   RETURN(result);
 END_FUNCTION;

   FUNCTION constraints_rectangular_composite_surface
           (s : rectangular_composite_surface) : BOOLEAN;

   (* Check the surface types *)
     REPEAT i := 1 TO s.n_u;
       REPEAT j := 1 TO s.n_v;
         IF NOT (('GEOMETRY_SCHEMA.B_SPLINE_SURFACE' IN TYPEOF
                    (s.segments[i][j].parent_surface)) OR
                 ('GEOMETRY_SCHEMA.RECTANGULAR_TRIMMED_SURFACE' IN TYPEOF
                    (s.segments[i][j].parent_surface))) THEN
           RETURN(FALSE);
       END_IF;
     END_REPEAT;
   END_REPEAT;

   (* Check the transition codes, omitting the last row or column *)
   REPEAT i := 1 TO s.n_u-1;
     REPEAT j := 1 TO s.n_v;
       IF s.segments[i][j].u_transition = discontinuous THEN
         RETURN(FALSE);
       END_IF;
     END_REPEAT;
   END_REPEAT;
   
   REPEAT i := 1 TO s.n_u;
     REPEAT j := 1 TO s.n_v-1;
       IF s.segments[i][j].v_transition = discontinuous THEN
         RETURN(FALSE);
       END_IF;
     END_REPEAT;
   END_REPEAT;
   RETURN(TRUE);
 END_FUNCTION;

FUNCTION cross_product (arg1, arg2 : direction) : vector;
  LOCAL
    mag    : REAL;
    res    : direction;
    v1,v2  : LIST[3:3] OF REAL;
    result : vector;
  END_LOCAL;
  
  IF ( NOT EXISTS (arg1) OR (arg1.dim = 2)) OR
     ( NOT EXISTS (arg2) OR (arg2.dim = 2)) THEN
    RETURN(?);
  ELSE
    BEGIN
      v1  := normalise(arg1).direction_ratios;
      v2  := normalise(arg2).direction_ratios;
      res := dummy_gri || direction([(v1[2]*v2[3] - v1[3]*v2[2]),
            (v1[3]*v2[1] - v1[1]*v2[3]), (v1[1]*v2[2] - v1[2]*v2[1])]);
      mag := 0.0;
      REPEAT i := 1 TO 3;
        mag := mag + res.direction_ratios[i]*res.direction_ratios[i];
      END_REPEAT;
      IF (mag > 0.0) THEN
        result := dummy_gri || vector(res, SQRT(mag));
      ELSE
        result := dummy_gri || vector(arg1, 0.0);
      END_IF;
      RETURN(result);
    END;
  END_IF;
END_FUNCTION;

 FUNCTION curve_weights_positive(b: rational_b_spline_curve) : BOOLEAN;
   LOCAL
     result : BOOLEAN := TRUE;
   END_LOCAL;

   REPEAT i := 0 TO b.upper_index_on_control_points;
     IF b.weights[i] <= 0.0  THEN
       result := FALSE;
       RETURN(result);
     END_IF;
   END_REPEAT;
   RETURN(result);
 END_FUNCTION;

 FUNCTION default_b_spline_curve_weights(up_cp : INTEGER)
                                          : ARRAY [0:up_cp] OF REAL;
   RETURN([1:up_cp + 1]);
 END_FUNCTION;

 FUNCTION default_b_spline_surface_weights(u_upper, v_upper: INTEGER)
                                      : ARRAY [0:u_upper] OF 
                                        ARRAY [0:v_upper] OF REAL;
    RETURN([[1:v_upper + 1]:u_upper +1]);
 END_FUNCTION;

 FUNCTION default_b_spline_knot_mult(degree, up_knots : INTEGER;
                                          uniform : knot_type) 
                                                  : LIST [2:?] OF INTEGER;
   LOCAL
     knot_mult : LIST [1:up_knots] OF INTEGER;
   END_LOCAL;
        
   IF uniform = uniform_knots THEN
     knot_mult := [1:up_knots];
   ELSE
     IF uniform = quasi_uniform_knots THEN
       knot_mult := [1:up_knots];
       knot_mult[1] := degree + 1;
       knot_mult[up_knots] := degree + 1;
     ELSE
       IF uniform = piecewise_bezier_knots THEN
         knot_mult := [degree:up_knots];
         knot_mult[1] := degree + 1;
         knot_mult[up_knots] := degree + 1;
       ELSE
         knot_mult := [0:up_knots];
       END_IF;
     END_IF;
   END_IF;
   RETURN(knot_mult);
 END_FUNCTION;

 FUNCTION default_b_spline_knots(degree,up_knots : INTEGER;
                              uniform : knot_type)
                                      : LIST [2:?] OF parameter_value;
  LOCAL
    knots  : LIST [1:up_knots] OF parameter_value := [0:up_knots];
    ishift : INTEGER := 1;
  END_LOCAL;

  IF (uniform = uniform_knots) THEN
     ishift := degree + 1;
  END_if;
  IF (uniform = uniform_knots) OR 
     (uniform = quasi_uniform_knots) OR
     (uniform = piecewise_bezier_knots) THEN
    
    REPEAT i := 1 TO up_knots;
      knots[i] := i - ishift;
    END_REPEAT;
  END_IF;
  RETURN(knots);
 END_FUNCTION;

FUNCTION dimension_of(item : geometric_representation_item) :
  dimension_count;
  LOCAL
    x   : SET OF representation;
    y   : representation_context;
    dim : dimension_count;
  END_LOCAL;
  -- For cartesian_point, direction, or vector dimension is determined by
  -- counting components.
    IF 'GEOMETRY_SCHEMA.CARTESIAN_POINT' IN TYPEOF(item) THEN
       dim := SIZEOF(item\cartesian_point.coordinates);
       RETURN(dim);
    END_IF;
    IF 'GEOMETRY_SCHEMA.DIRECTION' IN TYPEOF(item) THEN
       dim := SIZEOF(item\direction.direction_ratios);
       RETURN(dim);
    END_IF;
    IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(item) THEN
       dim := SIZEOF(item\vector.orientation\direction.direction_ratios);
       RETURN(dim);
    END_IF;
  -- For all other types of geometric_representation_item dim is obtained
  -- via context.
  -- Find the set of representation in which the item is used. 

  x := using_representations(item);

  -- Determines the dimension_count of the 
  -- geometric_representation_context. Note that the 
  -- RULE compatible_dimension ensures that the context_of_items
  -- is of type geometric_representation_context and has
  -- the same dimension_count for all values of x.
  -- The SET x is non-empty since this is required by WR1 of
  -- representation_item.
    y := x[1].context_of_items;
    dim := y\geometric_representation_context.coordinate_space_dimension;
    RETURN (dim);

END_FUNCTION;

 FUNCTION dot_product(arg1, arg2 : direction) : REAL;
   LOCAL
     scalar : REAL;
     vec1, vec2: direction;
     ndim : INTEGER;
   END_LOCAL;
   
   IF NOT EXISTS (arg1) OR NOT EXISTS (arg2) THEN
     scalar := ?;
     (* When function is called with invalid data an indeterminate result
     is returned *)
   ELSE
     IF (arg1.dim <> arg2.dim) THEN
       scalar := ?;
     (* When function is called with invalid data an indeterminate result
     is returned *)
     ELSE
       BEGIN
         vec1   := normalise(arg1);
         vec2   := normalise(arg2);
         ndim   := arg1.dim;
         scalar := 0.0;
         REPEAT  i := 1 TO ndim;
           scalar := scalar +
                       vec1.direction_ratios[i]*vec2.direction_ratios[i];
         END_REPEAT;
       END;
     END_IF;
   END_IF;
   RETURN (scalar);
 END_FUNCTION;

FUNCTION first_proj_axis(z_axis, arg : direction) : direction;
  LOCAL
    x_axis : direction;
    v      : direction;
    z      : direction;
    x_vec  : vector;
  END_LOCAL;
  
  IF (NOT EXISTS(z_axis)) THEN
    RETURN (?) ;
  ELSE
    z := normalise(z_axis);
    IF NOT EXISTS(arg) THEN
      IF ((z.direction_ratios <> [1.0,0.0,0.0]) AND
          (z.direction_ratios <> [-1.0,0.0,0.0]))  THEN
        v :=  dummy_gri || direction([1.0,0.0,0.0]);
      ELSE
        v := dummy_gri || direction([0.0,1.0,0.0]);
      END_IF;
    ELSE
      IF  (arg.dim <> 3) THEN
        RETURN (?) ;
      END_IF;
      IF ((cross_product(arg,z).magnitude) = 0.0) THEN
        RETURN (?);
      ELSE
        v := normalise(arg);
      END_IF;
    END_IF;
    x_vec := scalar_times_vector(dot_product(v, z), z);
    x_axis := vector_difference(v, x_vec).orientation;
    x_axis := normalise(x_axis);
  END_IF;
  RETURN(x_axis);
END_FUNCTION;

FUNCTION get_basis_surface (c : curve_on_surface) : SET[0:2] OF surface;
  LOCAL
    surfs  : SET[0:2] OF surface;
    n      : INTEGER;
  END_LOCAL;
  surfs := [];
  IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF (c) THEN
    surfs := [c\pcurve.basis_surface];
  ELSE
    IF 'GEOMETRY_SCHEMA.SURFACE_CURVE' IN TYPEOF (c) THEN
      n := SIZEOF(c\surface_curve.associated_geometry);
      REPEAT i := 1 TO n;
      surfs := surfs +
                associated_surface(c\surface_curve.associated_geometry[i]);
      END_REPEAT;
    END_IF;
  END_IF;
  IF 'GEOMETRY_SCHEMA.COMPOSITE_CURVE_ON_SURFACE' IN TYPEOF (c) THEN
   (* For a composite_curve_on_surface the basis_surface is the intersection
    of the basis_surfaces of all the segments. *)
     n := SIZEOF(c\composite_curve.segments);
     surfs := get_basis_surface(
                     c\composite_curve.segments[1].parent_curve);
     IF n > 1 THEN
       REPEAT i := 2 TO n;
         surfs := surfs * get_basis_surface(
                  c\composite_curve.segments[i].parent_curve);
       END_REPEAT;
     END_IF;

  END_IF;
  RETURN(surfs);
END_FUNCTION;

 FUNCTION list_to_array(lis : LIST [0:?] OF GENERIC : T;
                      low,u : INTEGER) : ARRAY [low:u] OF GENERIC : T;
   LOCAL
     n   : INTEGER;
     res : ARRAY [low:u] OF GENERIC : T;
   END_LOCAL;
      
   n := SIZEOF(lis);
   IF (n <> (u-low +1)) THEN
     RETURN(?);
   ELSE
     res := [lis[1] : n];
     REPEAT i := 2 TO n;
       res[low+i-1] := lis[i];
     END_REPEAT;
     RETURN(res);
   END_IF;
 END_FUNCTION;

 FUNCTION make_array_of_array(lis : LIST[1:?] OF LIST [1:?] OF GENERIC : T;
                              low1, u1, low2, u2 : INTEGER):
                 ARRAY [low1:u1] OF ARRAY [low2:u2] OF GENERIC : T;
   LOCAL
     res   : ARRAY[low1:u1] OF ARRAY [low2:u2] OF GENERIC : T;
   END_LOCAL;

(* Check input dimensions for consistency *)
   IF (u1-low1+1) <> SIZEOF(lis) THEN
     RETURN (?);
   END_IF;
   IF (u2 - low2 + 1 ) <> SIZEOF(lis[1]) THEN
     RETURN (?) ;
   END_IF;
(* Initialise res with values from lis[1] *)
   res := [list_to_array(lis[1], low2, u2) : (u1-low1 + 1)];
   REPEAT i := 2 TO HIINDEX(lis);
     IF (u2-low2+1) <> SIZEOF(lis[i]) THEN
       RETURN (?);
     END_IF;     
     res[low1+i-1] := list_to_array(lis[i], low2, u2);
   END_REPEAT; 
   
   RETURN (res);
 END_FUNCTION;

 FUNCTION make_array_of_array_of_array(lis : LIST[1:?] OF
              LIST [1:?] OF LIST [1:?] OF GENERIC : T;
              low1, u1, low2, u2, low3, u3 : INTEGER):
      ARRAY[low1:u1] OF ARRAY[low2:u2] OF ARRAY[low3:u3] OF GENERIC : T;
 LOCAL 
   res   : ARRAY[low1:u1] OF ARRAY [low2:u2] OF
             ARRAY[low3:u3] OF GENERIC : T;
 END_LOCAL;                

(* Check input dimensions for consistency *)
   IF (u1-low1+1) <> SIZEOF(lis) THEN
     RETURN (?);
   END_IF;
   IF (u2-low2+1) <> SIZEOF(lis[1]) THEN
     RETURN (?);
   END_IF;
(* Initialise res with values from lis[1] *)
   res := [make_array_of_array(lis[1], low2, u2, low3, u3) : (u1-low1 + 1)];
   REPEAT i := 2 TO HIINDEX(lis);
     IF (u2-low2+1) <> SIZEOF(lis[i]) THEN
       RETURN (?);
     END_IF;  
     res[low1+i-1] := make_array_of_array(lis[i], low2, u2, low3, u3);
   END_REPEAT; 
   RETURN (res);
 END_FUNCTION;

 FUNCTION normalise (arg : vector_or_direction) : vector_or_direction;
   LOCAL
     ndim   : INTEGER;
     v      : direction;
     result : vector_or_direction;
     vec    : vector;
     mag    : REAL;
   END_LOCAL;
   
   IF NOT EXISTS (arg) THEN
     result := ?;
 (* When function is called with invalid data a NULL result is returned *)
   ELSE
     ndim := arg.dim;
     IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg) THEN
       BEGIN
             v := dummy_gri || direction(arg.orientation.direction_ratios);
         IF arg.magnitude = 0.0 THEN
           RETURN(?);
         ELSE
          vec := dummy_gri || vector (v, 1.0);
         END_IF;
       END;
     ELSE
       v := dummy_gri || direction (arg.direction_ratios);
     END_IF;
     mag := 0.0;
     REPEAT  i := 1 TO ndim;
       mag := mag + v.direction_ratios[i]*v.direction_ratios[i];
     END_REPEAT;
     IF mag > 0.0 THEN
       mag := SQRT(mag);
       REPEAT  i := 1 TO ndim;
         v.direction_ratios[i] := v.direction_ratios[i]/mag;
       END_REPEAT;
       IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg) THEN
         vec.orientation := v;
         result := vec;
       ELSE
         result := v;
       END_IF;
     ELSE
       RETURN(?);
     END_IF;
   END_IF;
   RETURN (result);
 END_FUNCTION;

 FUNCTION orthogonal_complement(vec : direction) : direction;
   LOCAL
     result :  direction ;
   END_LOCAL;

   IF (vec.dim <> 2) OR NOT EXISTS (vec) THEN
     RETURN(?);
   ELSE
     result := dummy_gri || direction([-vec.direction_ratios[2],
                                          vec.direction_ratios[1]]);
     RETURN(result);
   END_IF;
 END_FUNCTION;

 FUNCTION same_side(plane_pts : LIST [3:3] of cartesian_point;
                    test_points : LIST [2:?] of cartesian_point) : BOOLEAN;
   LOCAL
     val1, val2 : REAL;
     n          : INTEGER;
   END_LOCAL;

   IF (plane_pts[1].dim = 2) OR (test_points[1].dim = 2) THEN
     RETURN(?);
   END_IF;
   n := SIZEOF(test_points);
   val1 := above_plane(plane_pts[1], plane_pts[2], plane_pts[3],
                       test_points[1] );
   REPEAT i := 2 TO n;
     val2 := above_plane(plane_pts[1], plane_pts[2], plane_pts[3],
                       test_points[i] );
     IF (val1*val2 <= 0.0) THEN
       RETURN(FALSE);
     END_IF;
   END_REPEAT;
   RETURN(TRUE);
 END_FUNCTION;

 FUNCTION scalar_times_vector (scalar : REAL; vec : vector_or_direction)
                                      : vector;
   LOCAL
     v      : direction;
     mag    : REAL;
     result : vector;
   END_LOCAL;

   IF NOT EXISTS (scalar) OR NOT EXISTS (vec) THEN
     RETURN (?) ;
    ELSE
     IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF (vec) THEN
       v   := dummy_gri || direction(vec.orientation.direction_ratios);
       mag := scalar * vec.magnitude;
     ELSE
       v   := dummy_gri || direction(vec.direction_ratios);
       mag := scalar;
     END_IF;
     IF (mag < 0.0 ) THEN
       REPEAT i := 1 TO SIZEOF(v.direction_ratios);
         v.direction_ratios[i] := -v.direction_ratios[i];
       END_REPEAT;
       mag := -mag;
     END_IF;
     result := dummy_gri || vector(normalise(v), mag);
   END_IF;
   RETURN (result);
 END_FUNCTION;

 FUNCTION second_proj_axis(z_axis, x_axis, arg: direction) : direction;
   LOCAL
     y_axis : vector;
     v      : direction;
     temp   : vector;
   END_LOCAL;
   
   IF NOT EXISTS(arg) THEN
     v := dummy_gri || direction([0.0,1.0,0.0]);
   ELSE
     v := arg;
   END_IF;
   
   temp   := scalar_times_vector(dot_product(v, z_axis), z_axis);
   y_axis := vector_difference(v, temp);
   temp   := scalar_times_vector(dot_product(v, x_axis), x_axis);
   y_axis := vector_difference(y_axis, temp);
   y_axis := normalise(y_axis);
   RETURN(y_axis.orientation);
 END_FUNCTION;

 FUNCTION surface_weights_positive(b: rational_b_spline_surface) : BOOLEAN;
   LOCAL
     result        : BOOLEAN := TRUE;
   END_LOCAL;
   
   REPEAT i := 0 TO b.u_upper;
     REPEAT j := 0 TO b.v_upper;
       IF (b.weights[i][j] <= 0.0)  THEN
         result := FALSE;
         RETURN(result);
       END_IF;
     END_REPEAT;
   END_REPEAT;
   RETURN(result);
 END_FUNCTION;

 FUNCTION vector_difference(arg1, arg2 : vector_or_direction) : vector;
   LOCAL
     result          : vector;
     res, vec1, vec2 : direction;
     mag, mag1, mag2 : REAL;
     ndim            : INTEGER;
   END_LOCAL;

   IF ((NOT EXISTS (arg1)) OR (NOT EXISTS (arg2))) OR (arg1.dim <> arg2.dim)
       THEN
     RETURN (?) ;
    ELSE
     BEGIN
       IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg1) THEN
         mag1 := arg1.magnitude;
         vec1 := arg1.orientation;
       ELSE
         mag1 := 1.0;
         vec1 := arg1;
       END_IF;
       IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg2) THEN
         mag2 := arg2.magnitude;
         vec2 := arg2.orientation;
       ELSE
         mag2 := 1.0;
         vec2 := arg2;
       END_IF;
       vec1 := normalise (vec1);
       vec2 := normalise (vec2);
       ndim := SIZEOF(vec1.direction_ratios);
       mag := 0.0;
       res := dummy_gri || direction(vec1.direction_ratios);
       REPEAT i := 1 TO ndim;
         res.direction_ratios[i] := mag1*vec1.direction_ratios[i] +
                                     mag2*vec2.direction_ratios[i];
         mag := mag + (res.direction_ratios[i]*res.direction_ratios[i]);
       END_REPEAT;
       IF (mag > 0.0 ) THEN
       result := dummy_gri || vector( res, SQRT(mag));
       ELSE
         result := dummy_gri || vector( vec1,  0.0);
       END_IF;
     END;
   END_IF;
   RETURN (result);
 END_FUNCTION;

 FUNCTION vector_sum(arg1, arg2 : vector_or_direction) : vector;
   LOCAL
     result          : vector;
     res, vec1, vec2 : direction;
     mag, mag1, mag2 : REAL;
     ndim            : INTEGER;
   END_LOCAL;

   IF ((NOT EXISTS (arg1)) OR (NOT EXISTS (arg2))) OR (arg1.dim <> arg2.dim)
       THEN
     RETURN (?) ;

   ELSE
     BEGIN
       IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg1) THEN
         mag1 := arg1.magnitude;
         vec1 := arg1.orientation;
       ELSE
         mag1 := 1.0;
         vec1 := arg1;
       END_IF;
       IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg2) THEN
         mag2 := arg2.magnitude;
         vec2 := arg2.orientation;
       ELSE
         mag2 := 1.0;
         vec2 := arg2;
       END_IF;
       vec1 := normalise (vec1);
       vec2 := normalise (vec2);
       ndim := SIZEOF(vec1.direction_ratios);
       mag := 0.0;
       res := dummy_gri || direction(vec1.direction_ratios);
       REPEAT i := 1 TO ndim;
         res.direction_ratios[i] := mag1*vec1.direction_ratios[i] +
                                      mag2*vec2.direction_ratios[i];
         mag := mag + (res.direction_ratios[i]*res.direction_ratios[i]);
       END_REPEAT;
       IF (mag > 0.0 ) THEN
       result := dummy_gri || vector( res, SQRT(mag));
       ELSE
         result := dummy_gri || vector( vec1,  0.0);
       END_IF;
     END;
   END_IF;
   RETURN (result);
 END_FUNCTION;

 FUNCTION volume_weights_positive(b: rational_b_spline_volume): BOOLEAN;
     LOCAL
       result   : BOOLEAN := TRUE;
     END_LOCAL;

     REPEAT i := 0 TO b.u_upper;
       REPEAT j := 0 TO b.v_upper;
         REPEAT k := 0 TO b.w_upper;
           IF (b.weights[i][j][k] <= 0.0)  THEN
             result := FALSE;
             RETURN(result);
           END_IF;
         END_REPEAT;
       END_REPEAT;
     END_REPEAT;
     RETURN(result);
   END_FUNCTION;

 END_SCHEMA; -- end GEOMETRY schema
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA group_schema;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (get_id_value,
   id_attribute); 


ENTITY group;
  name : label;
  description : OPTIONAL text;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY group_relationship;
  name : label;
  description : OPTIONAL text;
  relating_group : group;
  related_group : group;
END_ENTITY;

FUNCTION acyclic_group_relationship
 (relation : group_relationship; relatives : SET[1:?] OF group; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF group_relationship;
    END_LOCAL;

    IF relation.relating_group IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(grp <* bag_to_set(USEDIN(relation.relating_group, 'GROUP_SCHEMA.' + 'GROUP_RELATIONSHIP.' + 'RELATED_GROUP')) | specific_relation IN TYPEOF(grp));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_group_relationship(x[i], relatives + relation.relating_group, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- group_schema
SCHEMA ISO13584_generic_expressions_schema;

ENTITY generic_expression
ABSTRACT SUPERTYPE OF(ONEOF(simple_generic_expression,
								unary_generic_expression,
								binary_generic_expression,
								multiple_arity_generic_expression));
WHERE 
	WR1: is_acyclic(SELF);
END_ENTITY;

ENTITY simple_generic_expression
ABSTRACT SUPERTYPE OF (ONEOF(generic_literal, generic_variable))
SUBTYPE OF (generic_expression);
END_ENTITY;

ENTITY generic_literal
ABSTRACT SUPERTYPE
SUBTYPE OF (simple_generic_expression);
END_ENTITY; 

ENTITY generic_variable
ABSTRACT SUPERTYPE
SUBTYPE OF (simple_generic_expression);
INVERSE
	interpretation :
			environment FOR syntactic_representation;
END_ENTITY;

ENTITY variable_semantics
ABSTRACT SUPERTYPE;
END_ENTITY;

ENTITY environment;
	syntactic_representation: generic_variable;
	semantics: variable_semantics;
END_ENTITY;

ENTITY unary_generic_expression
ABSTRACT SUPERTYPE
SUBTYPE OF(generic_expression);
	operand: generic_expression;
END_ENTITY;

ENTITY binary_generic_expression
ABSTRACT SUPERTYPE
SUBTYPE OF(generic_expression);
	operands: LIST [2:2] OF generic_expression;
END_ENTITY;

ENTITY multiple_arity_generic_expression
ABSTRACT SUPERTYPE
SUBTYPE OF(generic_expression);
	operands: LIST [2:?] OF generic_expression;
END_ENTITY;

FUNCTION is_acyclic (arg: generic_expression): BOOLEAN;
RETURN (acyclic (arg, []));
END_FUNCTION ; -- is_acyclic

FUNCTION acyclic (arg1: generic_expression; 
			arg2: SET OF generic_expression): BOOLEAN;

LOCAL
	result: BOOLEAN;
END_LOCAL;

IF ('ISO13584_GENERIC_EXPRESSIONS_SCHEMA.SIMPLE_GENERIC_EXPRESSION'
	IN TYPEOF (arg1)) 
THEN
	RETURN (TRUE);
END_IF;

IF arg1 IN arg2 
THEN 
	RETURN (FALSE);
END_IF;

IF 'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.UNARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	RETURN 
	(acyclic(arg1\unary_generic_expression.operand,arg2+[arg1]));
END_IF;

IF 'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.BINARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	RETURN 
	(acyclic(arg1\binary_generic_expression.operands[1],arg2+[arg1])
	AND
	acyclic(arg1\binary_generic_expression.operands[2],arg2+[arg1]));
END_IF;

IF 
'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.MULTIPLE_ARITY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg1) 
THEN 
	result := TRUE;
	REPEAT i := 1 TO 
			SIZEOF (arg1\multiple_arity_generic_expression.operands);
		result := result AND
		acyclic(arg1\multiple_arity_generic_expression.operands[i], arg2+[arg1]);
	END_REPEAT;

	RETURN (result);
END_IF;

END_FUNCTION; -- acyclic

FUNCTION used_variables (arg : generic_expression) : 
			SET OF generic_variable;

LOCAL
	result : SET OF generic_variable := [];
END_LOCAL;

IF 'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.GENERIC_VARIABLE' 
	IN TYPEOF (arg) 
THEN 
	RETURN ([arg]);
END_IF;

IF 'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.UNARY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg)
THEN 
	RETURN (used_variables (arg\unary_generic_expression.operand));
END_IF;

IF 'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.BINARY_GENERIC_EXPRESSION'
	IN TYPEOF (arg)
THEN 
	RETURN(used_variables(arg\binary_generic_expression.operands[1])
		+ used_variables (arg\binary_generic_expression.operands[2]));
END_IF;

IF
'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.MULTIPLE_ARITY_GENERIC_EXPRESSION' 
	IN TYPEOF (arg)
THEN
	REPEAT i := 1 TO 
		SIZEOF(arg\multiple_arity_generic_expression.operands);
		result := result + used_variables(
			arg\multiple_arity_generic_expression.operands[i]);
	END_REPEAT;
	
	RETURN (result);
END_IF;
RETURN ([ ]);      -- in this case the subtype shall not contain
			            -- any variable (see IP1 in generic_expression)
END_FUNCTION; -- used_variables

END_SCHEMA; 
(*
  $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA location_schema;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


ENTITY location;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY location_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_location : location;
  related_location : location;
END_ENTITY;

  FUNCTION acyclic_location_relationship (relation : location_relationship; relatives : SET OF location; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF location_relationship;
    END_LOCAL;

    IF relation.relating_location IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(lctn <* bag_to_set(USEDIN(relation.relating_location, 'LOCATION_SCHEMA.' + 'LOCATION_RELATIONSHIP.' + 'RELATED_LOCATION')) | specific_relation IN TYPEOF(lctn));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_location_relationship(x[i], relatives + relation.relating_location, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

END_SCHEMA;  -- location_schema

(*
  $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA management_resources_schema;

REFERENCE FROM action_schema;    -- ISO 10303-41

REFERENCE FROM application_context_schema   -- ISO 10303-41
  (library_context); 

REFERENCE FROM approval_schema;    -- ISO 10303-41

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (get_role,
   object_role,
   role_association); 

REFERENCE FROM certification_schema;    -- ISO 10303-41

REFERENCE FROM contract_schema;    -- ISO 10303-41

REFERENCE FROM date_time_schema;    -- ISO 10303-41

REFERENCE FROM document_schema;    -- ISO 10303-41

REFERENCE FROM effectivity_schema;    -- ISO 10303-41

REFERENCE FROM experience_schema;    -- ISO 10303-41

REFERENCE FROM external_reference_schema   -- ISO 10303-41
  (external_source); 

REFERENCE FROM group_schema;    -- ISO 10303-41

REFERENCE FROM location_schema;    -- ISO 10303-41

REFERENCE FROM person_organization_schema;    -- ISO 10303-41

REFERENCE FROM qualifications_schema;    -- ISO 10303-41

REFERENCE FROM security_classification_schema;    -- ISO 10303-41

REFERENCE FROM support_resource_schema;    -- ISO 10303-41


TYPE attribute_type = SELECT
   (label, 
    text);
END_TYPE; 

ENTITY action_assignment
  ABSTRACT SUPERTYPE ;
  assigned_action : action;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY action_method_assignment
  ABSTRACT SUPERTYPE ;
  assigned_action_method : action_method;
  role : action_method_role;
END_ENTITY;

ENTITY action_method_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY action_request_assignment
  ABSTRACT SUPERTYPE ;
  assigned_action_request : versioned_action_request;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY approval_assignment
  ABSTRACT SUPERTYPE ;
  assigned_approval : approval;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY attribute_classification_assignment
  ABSTRACT SUPERTYPE ;
  assigned_class : group;
  attribute_name : label;
  role : classification_role;
END_ENTITY;

ENTITY attribute_value_assignment
  ABSTRACT SUPERTYPE ;
  attribute_name : label;
  attribute_value : attribute_type;
  role : attribute_value_role;
END_ENTITY;

ENTITY attribute_value_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY certification_assignment
  ABSTRACT SUPERTYPE ;
  assigned_certification : certification;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY classification_assignment
  ABSTRACT SUPERTYPE ;
  assigned_class : group;
  role : classification_role;
END_ENTITY;

ENTITY classification_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY contract_assignment
  ABSTRACT SUPERTYPE ;
  assigned_contract : contract;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY date_and_time_assignment
  ABSTRACT SUPERTYPE ;
  assigned_date_and_time : date_and_time;
  role : date_time_role;
END_ENTITY;

ENTITY date_assignment
  ABSTRACT SUPERTYPE ;
  assigned_date : date;
  role : date_role;
END_ENTITY;

ENTITY document_reference
  ABSTRACT SUPERTYPE ;
  assigned_document : document;
  source : label;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY document_usage_constraint_assignment
  ABSTRACT SUPERTYPE ;
  assigned_document_usage : document_usage_constraint;
  role : document_usage_role;
END_ENTITY;

ENTITY document_usage_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY effectivity_assignment
  ABSTRACT SUPERTYPE ;
  assigned_effectivity : effectivity;
DERIVE
  role : object_role := get_role(SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY effectivity_context_assignment
  ABSTRACT SUPERTYPE ;
  assigned_effectivity_assignment : effectivity_assignment;
  role : effectivity_context_role;
END_ENTITY;

ENTITY effectivity_context_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY event_occurrence_assignment
  ABSTRACT SUPERTYPE ;
  assigned_event_occurrence : event_occurrence;
  role : event_occurrence_role;
END_ENTITY;

ENTITY event_occurrence_context_assignment
  ABSTRACT SUPERTYPE ;
  assigned_event_occurrence_assignment : event_occurrence_assignment;
  role : event_occurrence_context_role;
END_ENTITY;

ENTITY experience_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_experience : experience;
  role : experience_role;
END_ENTITY;

ENTITY experience_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY experience_type_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_experience_type : experience_type;
  role : experience_type_role;
END_ENTITY;

ENTITY experience_type_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY external_identification_assignment
  ABSTRACT SUPERTYPE 
  SUBTYPE OF (identification_assignment);
  source : external_source;
END_ENTITY;

ENTITY external_referent_assignment
    ABSTRACT SUPERTYPE;
    assigned_name : label;
  DERIVE
    role : object_role := get_role(SELF);
  UNIQUE
    UR1: assigned_name;
  WHERE
    WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
  END_ENTITY;

ENTITY group_assignment
  ABSTRACT SUPERTYPE ;
  assigned_group : group;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY identification_assignment
  ABSTRACT SUPERTYPE ;
  assigned_id : identifier;
  role : identification_role;
END_ENTITY;

ENTITY identification_assignment_relationship;
  name : label;
  description : OPTIONAL text;
  relating_identification_assignment : identification_assignment;
  related_identification_assignment : identification_assignment;
END_ENTITY;

ENTITY identification_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY library_assignment
  ABSTRACT SUPERTYPE 
  SUBTYPE OF (external_referent_assignment);
  frame_of_reference : library_context;
UNIQUE
  UR1: frame_of_reference;
END_ENTITY;

ENTITY location_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_location : location;
  role : location_role;
END_ENTITY;

ENTITY location_representation_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  represented_location : location;
  role : location_representation_role;
END_ENTITY;

ENTITY location_representation_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY location_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY name_assignment
  ABSTRACT SUPERTYPE ;
  assigned_name : label;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1 ;
END_ENTITY;

ENTITY organization_assignment
  ABSTRACT SUPERTYPE ;
  assigned_organization : organization;
  role : organization_role;
END_ENTITY;

ENTITY organization_type_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_organization_type : organization_type;
  role : organization_type_role;
END_ENTITY;

ENTITY organization_type_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY organizational_project_assignment
  ABSTRACT SUPERTYPE ;
  assigned_organizational_project : organizational_project;
  role : organizational_project_role;
END_ENTITY;

ENTITY organizational_project_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY person_and_organization_assignment
  ABSTRACT SUPERTYPE ;
  assigned_person_and_organization : person_and_organization;
  role : person_and_organization_role;
END_ENTITY;

ENTITY person_assignment
  ABSTRACT SUPERTYPE ;
  assigned_person : person;
  role : person_role;
END_ENTITY;

ENTITY person_type_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_person_type : person_type;
  role : person_type_role;
END_ENTITY;

ENTITY person_type_definition_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_person_type_definition : person_type_definition;
  role : person_type_definition_role;
END_ENTITY;

ENTITY person_type_definition_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY person_type_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY position_in_organization_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_position_in_organization : position_in_organization;
  role : position_in_organization_role;
END_ENTITY;

ENTITY position_in_organization_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY position_in_organization_type_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_position_in_organization_type : position_in_organization_type;
  role : position_in_organization_type_role;
END_ENTITY;

ENTITY position_in_organization_type_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY qualification_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_qualification : qualification;
  role : qualification_role;
END_ENTITY;

ENTITY qualification_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY qualification_type_assignment
  ABSTRACT SUPERTYPE ;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  assigned_qualification_type : qualification_type;
  role : qualification_type_role;
END_ENTITY;

ENTITY qualification_type_role;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY security_classification_assignment
  ABSTRACT SUPERTYPE ;
  assigned_security_classification : security_classification;
DERIVE
  role : object_role := get_role (SELF);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
END_ENTITY;

ENTITY time_assignment
  ABSTRACT SUPERTYPE ;
  assigned_time : local_time;
  role : time_role;
END_ENTITY;

ENTITY time_interval_assignment
  ABSTRACT SUPERTYPE ;
  assigned_time_interval : time_interval;
  role : time_interval_role;
END_ENTITY;

FUNCTION acyclic_identification_assignment_relationship
 (relation : identification_assignment_relationship; relatives : SET[1:?] OF identification_assignment; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF identification_assignment_relationship;
    END_LOCAL;

    IF relation.relating_identification_assignment IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(ia <* bag_to_set(USEDIN(relation.relating_identification_assignment, 'MANAGEMENT_RESOURCES_SCHEMA.' + 'IDENTIFICATION_ASSIGNMENT_RELATIONSHIP.' + 'RELATED_IDENTIFICATION_ASSIGNMENT')) | specific_relation IN TYPEOF(ia));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_identification_assignment_relationship(x[i], relatives + relation.relating_identification_assignment, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);

END_FUNCTION; 

END_SCHEMA;  -- management_resources_schema



(* Genenerated from: ../../irs/wg12n257.exp *)

SCHEMA material_property_definition_schema;

REFERENCE FROM product_definition_schema
      (product_definition_relationship);

REFERENCE FROM product_property_definition_schema
      (characterized_definition,
      property_definition);

REFERENCE FROM support_resource_schema
     (label,
      text,
      bag_to_set);

REFERENCE FROM measure_schema
     (measure_with_unit);

REFERENCE FROM material_property_representation_schema
     (material_property_representation);

TYPE characterized_material_property = SELECT
  (material_property_representation,
   product_material_composition_relationship);
END_TYPE;

ENTITY material_property
SUBTYPE OF (property_definition);
UNIQUE
  UR1 : SELF\property_definition.name, SELF\property_definition.definition;
WHERE
  WR1 : ('PRODUCT_PROPERTY_DEFINITION_SCHEMA.CHARACTERIZED_OBJECT' IN
          TYPEOF(SELF\property_definition.definition)) OR
       (SIZEOF(bag_to_set(USEDIN(SELF ,
                     'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.' +
                     'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION')) -
              QUERY(temp <* bag_to_set(USEDIN(SELF ,
                       'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.' +
                       'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION')) |
                       ('MATERIAL_PROPERTY_REPRESENTATION_SCHEMA.' +
                      'MATERIAL_PROPERTY_REPRESENTATION' IN
                      TYPEOF(temp)))) = 0);
END_ENTITY;

ENTITY property_definition_relationship;
  name                       : label;
  description                 : text;
  relating_property_definition : property_definition;
  related_property_definition  : property_definition;
END_ENTITY;

ENTITY material_designation;
  name       : label;
  definitions : SET [1:?] OF characterized_definition;
END_ENTITY;

ENTITY material_designation_characterization;
  name       : label;
  description : text;
  designation : material_designation;
  property    : characterized_material_property;
END_ENTITY;

ENTITY product_material_composition_relationship
SUBTYPE OF (product_definition_relationship);
  class               : label;
  constituent_amount   : SET [1:?] OF measure_with_unit;
  composition_basis    : label;
  determination_method : text;
END_ENTITY;

FUNCTION acyclic_property_definition_relationship
  (relation          : property_definition_relationship;
   relatives         : SET [1:?] OF property_definition;
   specific_relation : STRING) : LOGICAL;

  LOCAL
    x                : SET OF property_definition_relationship;
  END_LOCAL;

  IF relation.relating_property_definition IN 
            relatives THEN
    RETURN (FALSE);
  END_IF;             -- IN is based in instance equality

  x := QUERY (pd <* bag_to_set (USEDIN
       (relation.relating_property_definition,
        'MATERIAL_PROPERTY_DEFINITION_SCHEMA.' +
        'PROPERTY_DEFINITION_RELATIONSHIP.' +
        'RELATED_PROPERTY_DEFINITION')) |
         specific_relation IN TYPEOF (pd));

  REPEAT I := 1 TO HIINDEX(x);             -- pre-checked loop
    IF NOT acyclic_property_definition_relationship
      (x[I],
       relatives + relation.relating_property_definition,
       specific_relation) THEN
      RETURN(FALSE);
    END_IF;
  END_REPEAT;

  RETURN(TRUE);
END_FUNCTION;  -- acyclic_property_definition_relationship

END_SCHEMA;    -- material_property_definition_schema
(* Genenerated from: ../../irs/wg12n257.exp *)

SCHEMA material_property_representation_schema;

REFERENCE FROM product_property_representation_schema
     (property_definition_representation);

REFERENCE FROM support_resource_schema
     (label,
      text);

ENTITY material_property_representation
  SUBTYPE OF (property_definition_representation);
  dependent_environment : data_environment;
END_ENTITY;

ENTITY data_environment;
  name       : label;
  description : text;
  elements    : SET [1:?] OF property_definition_representation;
END_ENTITY;

ENTITY data_environment_relationship;
  name                    : label;
  description              : text;
  relating_data_environment : data_environment;
  related_data_environment  : data_environment;
END_ENTITY;

END_SCHEMA;    -- material_property_representation_schema
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA measure_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (get_name_value,
   name_attribute); 

REFERENCE FROM representation_schema   -- ISO 10303-43
  (representation_context); 

REFERENCE FROM support_resource_schema;    -- ISO 10303-41


TYPE amount_of_substance_measure = REAL;
END_TYPE; 

TYPE area_measure = REAL;
END_TYPE; 

TYPE celsius_temperature_measure = REAL;
END_TYPE; 

TYPE context_dependent_measure = REAL;
END_TYPE; 

TYPE count_measure = NUMBER;
END_TYPE; 

TYPE descriptive_measure = STRING;
END_TYPE; 

TYPE electric_current_measure = REAL;
END_TYPE; 

TYPE length_measure = REAL;
END_TYPE; 

TYPE luminous_intensity_measure = REAL;
END_TYPE; 

TYPE mass_measure = REAL;
END_TYPE; 

TYPE measure_value = SELECT
   (amount_of_substance_measure, 
    area_measure, 
    celsius_temperature_measure, 
    context_dependent_measure, 
    count_measure, 
    descriptive_measure, 
    electric_current_measure, 
    length_measure, 
    luminous_intensity_measure, 
    mass_measure, 
    numeric_measure, 
    parameter_value, 
    plane_angle_measure, 
    positive_length_measure, 
    positive_plane_angle_measure, 
    positive_ratio_measure, 
    ratio_measure, 
    solid_angle_measure, 
    thermodynamic_temperature_measure, 
    time_measure, 
    volume_measure);
END_TYPE; 

TYPE numeric_measure = NUMBER;
END_TYPE; 

TYPE parameter_value = REAL;
END_TYPE; 

TYPE plane_angle_measure = REAL;
END_TYPE; 

TYPE positive_length_measure = length_measure;
WHERE
  WR1: SELF > 0.0;
END_TYPE; 

TYPE positive_plane_angle_measure = plane_angle_measure;
WHERE
  WR1: SELF > 0.0;
END_TYPE; 

TYPE positive_ratio_measure = ratio_measure;
WHERE
  WR1: SELF > 0.0;
END_TYPE; 

TYPE ratio_measure = REAL;
END_TYPE; 

TYPE si_prefix = ENUMERATION OF 
   (exa,
    peta,
    tera,
    giga,
    mega,
    kilo,
    hecto,
    deca,
    deci,
    centi,
    milli,
    micro,
    nano,
    pico,
    femto,
    atto);
END_TYPE; 

TYPE si_unit_name = ENUMERATION OF 
   (metre,
    gram,
    second,
    ampere,
    kelvin,
    mole,
    candela,
    radian,
    steradian,
    hertz,
    newton,
    pascal,
    joule,
    watt,
    coulomb,
    volt,
    farad,
    ohm,
    siemens,
    weber,
    tesla,
    henry,
    degree_Celsius,
    lumen,
    lux,
    becquerel,
    gray,
    sievert);
END_TYPE; 

TYPE solid_angle_measure = REAL;
END_TYPE; 

TYPE thermodynamic_temperature_measure = REAL;
END_TYPE; 

TYPE time_measure = REAL;
END_TYPE; 

TYPE unit = SELECT
   (derived_unit, 
    named_unit);
END_TYPE; 

TYPE volume_measure = REAL;
END_TYPE; 

ENTITY amount_of_substance_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.AMOUNT_OF_SUBSTANCE_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY amount_of_substance_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 1.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY area_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.AREA_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY area_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 2.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY celsius_temperature_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.THERMODYNAMIC_TEMPERATURE_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY context_dependent_unit
  SUBTYPE OF (named_unit);
  name : label;
END_ENTITY;

ENTITY conversion_based_unit
  SUBTYPE OF (named_unit);
  name : label;
  conversion_factor : measure_with_unit;
END_ENTITY;

ENTITY derived_unit;
  elements : SET[1:?] OF derived_unit_element;
DERIVE
  name : label := get_name_value (SELF);
WHERE
  WR1: (SIZEOF (elements) > 1) OR ((SIZEOF (elements) = 1) AND (elements[1].exponent <> 1.0));
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
END_ENTITY;

ENTITY derived_unit_element;
  unit : named_unit;
  exponent : REAL;
END_ENTITY;

ENTITY dimensional_exponents;
  length_exponent : REAL;
  mass_exponent : REAL;
  time_exponent : REAL;
  electric_current_exponent : REAL;
  thermodynamic_temperature_exponent : REAL;
  amount_of_substance_exponent : REAL;
  luminous_intensity_exponent : REAL;
END_ENTITY;

ENTITY electric_current_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.ELECTRIC_CURRENT_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY electric_current_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 1.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY global_unit_assigned_context
  SUBTYPE OF (representation_context);
  units : SET[1:?] OF unit;
END_ENTITY;

ENTITY length_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.LENGTH_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY length_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 1.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY luminous_intensity_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.LUMINOUS_INTENSITY_UNIT' IN TYPEOF(SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY luminous_intensity_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 1.0);
END_ENTITY;

ENTITY mass_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.MASS_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY mass_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 1.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY measure_with_unit
  SUPERTYPE OF (ONEOF (length_measure_with_unit,
                       mass_measure_with_unit,
                       time_measure_with_unit,
                       electric_current_measure_with_unit,
                       thermodynamic_temperature_measure_with_unit,
                       celsius_temperature_measure_with_unit,
                       amount_of_substance_measure_with_unit,
                       luminous_intensity_measure_with_unit,
                       plane_angle_measure_with_unit,
                       solid_angle_measure_with_unit,
                       area_measure_with_unit,
                       volume_measure_with_unit,
                       ratio_measure_with_unit));
  value_component : measure_value;
  unit_component : unit;
WHERE
  WR1: valid_units (SELF);
END_ENTITY;

ENTITY named_unit
  SUPERTYPE OF (ONEOF (si_unit,
                       conversion_based_unit,
                       context_dependent_unit)
               ANDOR ONEOF (length_unit,
                    mass_unit,
                    time_unit,
                    electric_current_unit,
                    thermodynamic_temperature_unit,
                    amount_of_substance_unit,
                    luminous_intensity_unit,
                    plane_angle_unit,
                    solid_angle_unit,
                    area_unit,
                    volume_unit,
                    ratio_unit));
  dimensions : dimensional_exponents;
END_ENTITY;

ENTITY plane_angle_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.PLANE_ANGLE_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY plane_angle_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY ratio_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.RATIO_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY ratio_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY si_unit
  SUBTYPE OF (named_unit);
  prefix : OPTIONAL si_prefix;
  name : si_unit_name;
DERIVE
  SELF\named_unit.dimensions : dimensional_exponents := dimensions_for_si_unit (name);
END_ENTITY;

ENTITY solid_angle_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.SOLID_ANGLE_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY solid_angle_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY thermodynamic_temperature_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.THERMODYNAMIC_TEMPERATURE_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY thermodynamic_temperature_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 0.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 1.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY time_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.TIME_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY time_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 0.0) AND (SELF\named_unit.dimensions.mass_exponent = 0.0) AND (SELF\named_unit.dimensions.time_exponent = 1.0) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
END_ENTITY;

ENTITY volume_measure_with_unit
  SUBTYPE OF (measure_with_unit);
WHERE
  WR1: 'MEASURE_SCHEMA.VOLUME_UNIT' IN TYPEOF (SELF\measure_with_unit.unit_component);
END_ENTITY;

ENTITY volume_unit
  SUBTYPE OF (named_unit);
WHERE
  WR1: (SELF\named_unit.dimensions.length_exponent = 3.000000) AND (SELF\named_unit.dimensions.mass_exponent = 0.000000) AND (SELF\named_unit.dimensions.time_exponent = 0.000000) AND (SELF\named_unit.dimensions.electric_current_exponent = 0.000000) AND (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.000000) AND (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.000000) AND (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.000000);
END_ENTITY;

FUNCTION derive_dimensional_exponents
 (x : unit) : dimensional_exponents; 
  LOCAL
    result : dimensional_exponents := dimensional_exponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  END_LOCAL;

  IF 'MEASURE_SCHEMA.DERIVED_UNIT' IN TYPEOF(x) THEN
    REPEAT i := LOINDEX(x.elements) TO HIINDEX(x.elements);
      result.length_exponent := result.length_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.length_exponent);
      result.mass_exponent := result.mass_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.mass_exponent);
      result.time_exponent := result.time_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.time_exponent);
      result.electric_current_exponent := result.electric_current_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.electric_current_exponent);
      result.thermodynamic_temperature_exponent := result.thermodynamic_temperature_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.thermodynamic_temperature_exponent);
      result.amount_of_substance_exponent := result.amount_of_substance_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.amount_of_substance_exponent);
      result.luminous_intensity_exponent := result.luminous_intensity_exponent + (x.elements[i].exponent * x.elements[i].unit.dimensions.luminous_intensity_exponent);
    END_REPEAT;
  ELSE
    result := x.dimensions;
  END_IF;
  RETURN (result);
END_FUNCTION; 

FUNCTION dimensions_for_si_unit
 (n : si_unit_name) : dimensional_exponents; 
 CASE n OF
    metre          : RETURN (dimensional_exponents
                          (1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
    gram           : RETURN (dimensional_exponents
                         (0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0));
    second         : RETURN (dimensional_exponents
                         (0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0));
    ampere         : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0));
    kelvin         : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0));
    mole           : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0));
    candela        : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0));
    radian         : RETURN (dimensional_exponents
                           (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
    steradian      : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
    hertz          : RETURN (dimensional_exponents
                         (0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0));
    newton         : RETURN (dimensional_exponents
                         (1.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0));
    pascal         : RETURN (dimensional_exponents
                         (-1.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0));
    joule          : RETURN (dimensional_exponents
                         (2.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0));
    watt           : RETURN (dimensional_exponents
                         (2.0, 1.0, -3.0, 0.0, 0.0, 0.0, 0.0));
    coulomb        : RETURN (dimensional_exponents
                         (0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0));
    volt           : RETURN (dimensional_exponents
                         (2.0, 1.0, -3.0, -1.0, 0.0, 0.0, 0.0));
    farad          : RETURN (dimensional_exponents
                         (-2.0, -1.0, 4.0, 1.0, 0.0, 0.0, 0.0));
    ohm            : RETURN (dimensional_exponents
                         (2.0, 1.0, -3.0, -2.0, 0.0, 0.0, 0.0));
    siemens        : RETURN (dimensional_exponents
                         (-2.0, -1.0, 3.0, 2.0, 0.0, 0.0, 0.0));
    weber          : RETURN (dimensional_exponents
                         (2.0, 1.0, -2.0, -1.0, 0.0, 0.0, 0.0));
    tesla          : RETURN (dimensional_exponents
                         (0.0, 1.0, -2.0, -1.0, 0.0, 0.0, 0.0));
    henry          : RETURN (dimensional_exponents
                         (2.0, 1.0, -2.0, -2.0, 0.0, 0.0, 0.0));
    degree_Celsius : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0));
    lumen          : RETURN (dimensional_exponents
                         (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0));
    lux            : RETURN (dimensional_exponents
                         (-2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0));
    becquerel      : RETURN (dimensional_exponents
                         (0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0));
    gray           : RETURN (dimensional_exponents
                         (2.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0));
    sievert        : RETURN (dimensional_exponents
                         (2.0, 0.0, -2.0, 0.0, 0.0, 0.0, 0.0));
    OTHERWISE      : RETURN (?);
  END_CASE;
END_FUNCTION; 

FUNCTION valid_units
 (m : measure_with_unit) : BOOLEAN; 
 IF 'MEASURE_SCHEMA.LENGTH_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.MASS_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.TIME_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.ELECTRIC_CURRENT_MEASURE' 
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.THERMODYNAMIC_TEMPERATURE_MEASURE'
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.CELSIUS_TEMPERATURE_MEASURE'
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.AMOUNT_OF_SUBSTANCE_MEASURE' 
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.LUMINOUS_INTENSITY_MEASURE' 
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.PLANE_ANGLE_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.SOLID_ANGLE_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.AREA_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.VOLUME_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.RATIO_MEASURE' IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.POSITIVE_LENGTH_MEASURE' 
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  IF 'MEASURE_SCHEMA.POSITIVE_PLANE_ANGLE_MEASURE' 
  IN TYPEOF ( m.value_component ) THEN
    IF derive_dimensional_exponents ( m.unit_component ) <>
       dimensional_exponents ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ) THEN
      RETURN (FALSE);
    END_IF;
  END_IF;
  RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- measure_schema


(*
  $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA person_organization_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value,
   get_id_value,
   get_name_value,
   get_role,
   id_attribute,
   name_attribute,
   object_role,
   role_association); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE person_organization_select = SELECT
   (organization, 
    person, 
    person_and_organization);
END_TYPE; 

ENTITY address;
  internal_location : OPTIONAL label;
  street_number : OPTIONAL label;
  street : OPTIONAL label;
  postal_box : OPTIONAL label;
  town : OPTIONAL label;
  region : OPTIONAL label;
  postal_code : OPTIONAL label;
  country : OPTIONAL label;
  facsimile_number : OPTIONAL label;
  telephone_number : OPTIONAL label;
  electronic_mail_address : OPTIONAL label;
  telex_number : OPTIONAL label;
DERIVE
  name : label := get_name_value(SELF);
  url : identifier := get_id_value(SELF);
WHERE
  WR1: EXISTS(internal_location) OR EXISTS(street_number) OR EXISTS(street) OR EXISTS(postal_box) OR EXISTS(town) OR EXISTS(region) OR EXISTS(postal_code) OR EXISTS(country) OR EXISTS(facsimile_number) OR EXISTS(telephone_number) OR EXISTS(electronic_mail_address) OR EXISTS(telex_number);
END_ENTITY;

ENTITY organization;
  id : OPTIONAL identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY organization_relationship;
  name : label;
  description : OPTIONAL text;
  relating_organization : organization;
  related_organization : organization;
END_ENTITY;

ENTITY organization_role;
  name : label;
DERIVE
  description : text := get_description_value(SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY organization_type;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY organization_type_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_organization_type : organization_type;
  related_organization_type : organization_type;
END_ENTITY;

ENTITY organizational_address
  SUBTYPE OF (address);
  organizations : SET[1:?] OF organization;
  description : OPTIONAL text;
END_ENTITY;

ENTITY organizational_project;
  name : label;
  description : OPTIONAL text;
  responsible_organizations : SET[1:?] OF organization;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY organizational_project_relationship;
  name : label;
  description : OPTIONAL text;
  relating_organizational_project : organizational_project;
  related_organizational_project : organizational_project;
END_ENTITY;

ENTITY person;
  id : identifier;
  last_name : OPTIONAL label;
  first_name : OPTIONAL label;
  middle_names : OPTIONAL LIST[1:?] OF label;
  prefix_titles : OPTIONAL LIST[1:?] OF label;
  suffix_titles : OPTIONAL LIST[1:?] OF label;
WHERE
  WR1: EXISTS(last_name) OR EXISTS(first_name);
END_ENTITY;

ENTITY person_and_organization;
  the_person : person;
  the_organization : organization;
DERIVE
  name : label := get_name_value (SELF);
  description : text := get_description_value(SELF);
  
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY person_and_organization_role;
  name : label;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY person_role;
  name : label;
DERIVE
  description : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
END_ENTITY;

ENTITY person_type;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY person_type_definition;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  formation : person_type_definition_formation;
END_ENTITY;

ENTITY person_type_definition_formation;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  of_person_type : person_type;
END_ENTITY;

ENTITY person_type_definition_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_person_type_definition : person_type_definition;
  related_person_type_definition : person_type_definition;
END_ENTITY;

ENTITY personal_address
  SUBTYPE OF (address);
  people : SET[1:?] OF person;
  description : OPTIONAL text;
END_ENTITY;

ENTITY position_in_organization;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY position_in_organization_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_position_in_organization : position_in_organization;
  related_position_in_organization : position_in_organization;
END_ENTITY;

ENTITY position_in_organization_type;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

FUNCTION acyclic_organization_relationship (relation : organization_relationship; relatives : SET [1:?] OF organization; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF organization_relationship;
    END_LOCAL;

    IF relation.relating_organization IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(org <* bag_to_set(USEDIN(relation.relating_organization, 'PERSON_ORGANIZATION_SCHEMA.' + 'ORGANIZATION_RELATIONSHIP.' + 'RELATED_ORGANIZATION')) | specific_relation IN TYPEOF(org));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_organization_relationship(x[i], relatives + relation.relating_organization, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION; 

FUNCTION acyclic_organization_type_relationship
 (relation : organization_type_relationship; relatives : SET OF organization_type; specific_relation : STRING) : BOOLEAN; 
   LOCAL
      x : SET OF organization_type_relationship;
    END_LOCAL;

    IF relation.relating_organization_type IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(orgtyp <* bag_to_set(USEDIN(relation.relating_organization_type, 'PERSON_ORGANIZATION_SCHEMA.' + 'ORGANIZATION_TYPE_RELATIONSHIP.' + 'RELATED_ORGANIZATION_TYPE')) | specific_relation IN TYPEOF(orgtyp));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_organization_type_relationship(x[i], relatives + relation.relating_organization_type, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_organizational_project_relationship (relation : organizational_project_relationship; relatives : SET [1:?] OF organizational_project; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF organizational_project_relationship;
    END_LOCAL;

    IF relation.relating_organizational_project IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(op <* bag_to_set(USEDIN(relation.relating_organizational_project, 'PERSON_ORGANIZATION_SCHEMA.' + 'ORGANIZATIONAL_PROJECT_RELATIONSHIP.' + 'RELATED_ORGANIZATIONAL_PROJECT')) | specific_relation IN TYPEOF(op));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_organizational_project_relationship(x[i], relatives + relation.relating_organizational_project, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION; 

FUNCTION acyclic_person_type_definition_relationship
 (relation : person_type_definition_relationship; relatives : SET OF person_type_definition; specific_relation : STRING) : BOOLEAN; 
   LOCAL
      x : SET OF person_type_definition_relationship;
    END_LOCAL;

    IF relation.relating_person_type_definition IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(ptdef <* bag_to_set(USEDIN(relation.relating_person_type_definition, 'PERSON_ORGANIZATION_SCHEMA.' + 'PERSON_TYPE_DEFINITION_RELATIONSHIP.' + 'RELATED_PERSON_TYPE_DEFINITION')) | specific_relation IN TYPEOF(ptdef));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_person_type_definition_relationship(x[i], relatives + relation.relating_person_type_definition, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_position_in_organization_relationship
 (relation : position_in_organization_relationship; relatives : SET OF position_in_organization; specific_relation : STRING) : BOOLEAN; 
   LOCAL
      x : SET OF position_in_organization_relationship;
    END_LOCAL;

    IF relation.relating_position_in_organization IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(piorg <* bag_to_set(USEDIN(relation.relating_position_in_organization, 'PERSON_ORGANIZATION_SCHEMA.' + 'POSITION_IN_ORGANIZATION_RELATIONSHIP.' + 'RELATED_POSITION_IN_ORGANIZATION')) | specific_relation IN TYPEOF(piorg));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_position_in_organization_relationship(x[i], relatives + relation.relating_position_in_organization, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

END_SCHEMA;  -- person_organization_schema
(*
    The following EXPRESS is for ISO 10303-46:1994
      Technical Corrigendum 3, 2006-03-28
    This is document ISO TC184/SC4/WG12 N4396
    it supersedes ISO TC184/SC4/WG12 N996 (TC2)
    The following changes are made:
    - changed font_select
    - changed character_glyph_symbol
    - changed character_glyph_font_usage
    - added generic_character_glyph_symbol
*)

SCHEMA presentation_appearance_schema;

REFERENCE FROM external_reference_schema
    (externally_defined_item,
     pre_defined_item);

REFERENCE FROM geometry_schema
    (axis2_placement,
     cartesian_point,
     curve,
     geometric_representation_item,
     point,
     vector);

REFERENCE FROM group_schema
  (group);

REFERENCE FROM measure_schema
    (descriptive_measure,
     length_measure,
     measure_with_unit,
     plane_angle_measure,
     positive_length_measure,
     ratio_measure,
     positive_ratio_measure);

REFERENCE FROM presentation_organization_schema
     (area_dependent_annotation_representation,
      presentation_area,
      presentation_layer_assignment,
      presentation_layer_usage,
      presentation_representation,
      presentation_set,
      presentation_view,
      product_data_representation_view,
      view_dependent_annotation_representation);

REFERENCE FROM presentation_definition_schema
    (annotation_curve_occurrence,
     annotation_fill_area,
     annotation_symbol_occurrence,
     annotation_text_with_delineation,
     symbol_representation_with_blanking_box);

REFERENCE FROM presentation_resource_schema
    (character_glyph_symbol_outline,
     character_glyph_symbol_stroke,
     colour);

REFERENCE FROM representation_schema
    (mapped_item,
     representation,
     representation_item,
     representation_map,
     using_representations);

REFERENCE FROM support_resource_schema
    (label,
     bag_to_set);
 
TYPE style_context_select = SELECT
  (group,
   presentation_layer_assignment,
   representation,
   representation_item,
   presentation_set);
END_TYPE;

TYPE presentation_style_select = SELECT
  (pre_defined_presentation_style,
   point_style,
   curve_style,
   surface_style_usage,
   symbol_style,
   fill_area_style,
   text_style,
   approximation_tolerance,
   externally_defined_style,
   null_style);
END_TYPE;

TYPE null_style = ENUMERATION OF
  (null);
END_TYPE;

TYPE marker_select = SELECT
  (marker_type,
   pre_defined_marker);
END_TYPE;

TYPE marker_type = ENUMERATION OF
  (dot,
   x,
   plus,
   asterisk,
   ring,
   square,
   triangle);
END_TYPE;

TYPE size_select  = SELECT
  (positive_length_measure,
   measure_with_unit,
   descriptive_measure,
   pre_defined_size);
END_TYPE;

TYPE curve_font_or_scaled_curve_font_select = SELECT
  (curve_style_font_select,
   curve_style_font_and_scaling);
END_TYPE;

TYPE curve_style_font_select = SELECT
  (curve_style_font,
   pre_defined_curve_font,
   externally_defined_curve_font);
END_TYPE;

TYPE squared_or_rounded = ENUMERATION OF
  (squared,
   rounded);
END_TYPE;

TYPE fill_style_select = SELECT
  (fill_area_style_colour,
   pre_defined_tile_style,
   externally_defined_tile_style,
   fill_area_style_tiles,
   pre_defined_hatch_style,
   externally_defined_hatch_style,
   fill_area_style_hatching);
END_TYPE;

TYPE fill_area_style_tile_shape_select = SELECT
  (fill_area_style_tile_curve_with_style,
   fill_area_style_tile_coloured_region,
   fill_area_style_tile_symbol_with_style,
   pre_defined_tile,
   externally_defined_tile);
END_TYPE;

TYPE curve_or_annotation_curve_occurrence = SELECT
  (curve,
   annotation_curve_occurrence);
END_TYPE;

TYPE surface_side = ENUMERATION OF
  (positive,
   negative,
   both);
END_TYPE;

TYPE surface_side_style_select = SELECT
  (surface_side_style,
   pre_defined_surface_side_style);
END_TYPE;

TYPE surface_style_element_select = SELECT
  (surface_style_fill_area,
   surface_style_boundary,
   surface_style_silhouette,
   surface_style_segmentation_curve,
   surface_style_control_grid,
   surface_style_parameter_line,
   surface_style_rendering);
END_TYPE;

TYPE curve_or_render = SELECT
  (curve_style,
   curve_style_rendering);
END_TYPE;

TYPE shading_curve_method = ENUMERATION OF
  (constant_colour,
   linear_colour);
END_TYPE;

TYPE direction_count_select = SELECT
  (u_direction_count,
   v_direction_count);
END_TYPE;

TYPE u_direction_count = INTEGER;
WHERE
  WR1: SELF > 1;
END_TYPE;

TYPE v_direction_count = INTEGER;
WHERE
  WR1: SELF > 1;
END_TYPE;

TYPE shading_surface_method = ENUMERATION OF
  (constant_shading,
   colour_shading,
   dot_shading,
   normal_shading);
END_TYPE;

TYPE rendering_properties_select = SELECT
  (surface_style_reflectance_ambient,
   surface_style_transparent);
END_TYPE;

TYPE character_style_select = SELECT
  (character_glyph_style_stroke,
   character_glyph_style_outline,
   text_style_for_defined_font);
END_TYPE;

TYPE text_justification = label;
END_TYPE;

TYPE box_characteristic_select = SELECT
  (box_height,
   box_width,
   box_slant_angle,
   box_rotate_angle);
END_TYPE;

TYPE box_height = positive_ratio_measure;
END_TYPE;

TYPE box_width = positive_ratio_measure;
END_TYPE;

TYPE  box_slant_angle = plane_angle_measure;
END_TYPE;

TYPE box_rotate_angle = plane_angle_measure;
END_TYPE;

TYPE character_spacing_select = SELECT
  (length_measure,
   ratio_measure,
   measure_with_unit,
   descriptive_measure,
   pre_defined_character_spacing);
END_TYPE;

TYPE symbol_style_select= SELECT
  (symbol_element_style,
   symbol_colour);
END_TYPE;

TYPE tolerance_select = SELECT
  (approximation_tolerance_deviation,
   approximation_tolerance_parameter);
END_TYPE;

TYPE approximation_method = ENUMERATION OF
  (chordal_deviation,
   chordal_length);
END_TYPE;

TYPE tolerance_deviation_select = SELECT
  (curve_tolerance_deviation,
   surface_tolerance_deviation);
END_TYPE;

TYPE curve_tolerance_deviation = positive_length_measure;
END_TYPE;

TYPE surface_tolerance_deviation = positive_length_measure;
END_TYPE;

TYPE product_or_presentation_space = ENUMERATION OF
  (product_shape_space,
   presentation_area_space);
END_TYPE;

TYPE tolerance_parameter_select = SELECT
  (curve_tolerance_parameter,
   surface_tolerance_parameter);
END_TYPE;

TYPE curve_tolerance_parameter = REAL;
END_TYPE;

TYPE surface_tolerance_parameter = REAL;
END_TYPE;

TYPE hiding_or_blanking_select = SELECT
  (presentation_area,
   presentation_view,
   product_data_representation_view,
   annotation_fill_area,
   area_dependent_annotation_representation,
   view_dependent_annotation_representation,
   annotation_text_with_delineation,
   character_glyph_symbol_stroke,
   character_glyph_symbol_outline,
   symbol_representation_with_blanking_box);
END_TYPE;

TYPE invisibility_context= SELECT 
  (presentation_layer_usage,
   presentation_representation,
   presentation_set);
END_TYPE;

TYPE invisible_item = SELECT 
  (styled_item,
   presentation_layer_assignment,
   representation);
END_TYPE;

ENTITY styled_item
  SUBTYPE OF (representation_item);
  styles :  SET [1:?] OF presentation_style_assignment;
  item   :  representation_item;
WHERE
  WR1: (SIZEOF(SELF.styles) = 1)
               XOR
       (SIZEOF(QUERY(pres_style <* SELF.styles |
         NOT ('PRESENTATION_APPEARANCE_SCHEMA.' +
              'PRESENTATION_STYLE_BY_CONTEXT' IN
         TYPEOF(pres_style))
         )) = 0);
END_ENTITY;

ENTITY over_riding_styled_item
  SUBTYPE OF (styled_item);
  over_ridden_style : styled_item;
END_ENTITY;

ENTITY context_dependent_over_riding_styled_item
  SUBTYPE OF(over_riding_styled_item);
  style_context : SET[1:2] OF style_context_select;
WHERE
  WR1: (SIZEOF(QUERY( sc <* SELF.style_context |
       'REPRESENTATION_SCHEMA.REPRESENTATION' IN
         TYPEOF(sc))) = 1 )
                 AND
       (SIZEOF(QUERY( sc <* SELF.style_context |
       'REPRESENTATION_SCHEMA.REPRESENTATION_ITEM' IN
         TYPEOF(sc))) = 1);
END_ENTITY;

ENTITY presentation_style_assignment;
  styles : SET [1:?] OF presentation_style_select;
WHERE
  WR1: SIZEOF (QUERY (style1 <* SELF.styles |
         NOT (SIZEOF (QUERY (style2 <* (SELF.styles - style1) |
           NOT ((TYPEOF (style1) <> TYPEOF (style2)) OR
             (SIZEOF (['PRESENTATION_APPEARANCE_SCHEMA.' +
                       'SURFACE_STYLE_USAGE',
                       'PRESENTATION_APPEARANCE_SCHEMA.'+
                       'EXTERNALLY_DEFINED_STYLE'] *
                     TYPEOF (style1)) = 1)
           ))) = 0
         ))) = 0;
  WR2: SIZEOF (QUERY (style1 <* SELF.styles |
         'PRESENTATION_APPEARANCE_SCHEMA.SURFACE_STYLE_USAGE' IN
         TYPEOF(style1)
         )) <= 2;
END_ENTITY;

ENTITY presentation_style_by_context
  SUBTYPE OF (presentation_style_assignment);
  style_context : style_context_select;
END_ENTITY;

ENTITY pre_defined_presentation_style
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY externally_defined_style
  SUBTYPE OF (externally_defined_item);
END_ENTITY;

ENTITY point_style;
  name          : label;
  marker        : marker_select;
  marker_size   : size_select;
  marker_colour : colour;
END_ENTITY;

ENTITY pre_defined_marker
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY pre_defined_size
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY curve_style;
  name         : label;
  curve_font   : curve_font_or_scaled_curve_font_select;
  curve_width  : size_select;
  curve_colour : colour;
END_ENTITY;

ENTITY curve_style_with_ends_and_corners
  SUBTYPE OF (curve_style);
  curve_ends    : squared_or_rounded;
  curve_corners : squared_or_rounded;
END_ENTITY;

ENTITY curve_style_with_extension
  SUBTYPE OF (curve_style);
  curve_extensions   : length_measure;
END_ENTITY;

ENTITY pre_defined_curve_font
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY externally_defined_curve_font
  SUBTYPE OF (externally_defined_item);
END_ENTITY;

ENTITY curve_style_font;
  name         : label;
  pattern_list : LIST [1:?] OF curve_style_font_pattern;
END_ENTITY;

ENTITY curve_style_font_pattern;
  visible_segment_length   : positive_length_measure;
  invisible_segment_length : positive_length_measure;
END_ENTITY;

ENTITY curve_style_wide
  SUBTYPE OF (curve_style_font);
  interior_style : fill_area_style;
END_ENTITY;

ENTITY curve_style_curve_pattern_set
  SUBTYPE OF (curve_style_font, 
              geometric_representation_item);
  pattern_set : SET [1:?] OF curve_style_curve_pattern;
END_ENTITY;

ENTITY curve_style_curve_pattern
  SUBTYPE OF (geometric_representation_item);
  pattern        : annotation_curve_occurrence;
  pattern_length : positive_length_measure;
END_ENTITY;

ENTITY curve_style_font_and_scaling;
  name               : label;
  curve_font         : curve_style_font_select;
  curve_font_scaling : REAL;
END_ENTITY;

ENTITY draughting_pre_defined_curve_font
  SUBTYPE OF (pre_defined_curve_font);
WHERE
  WR1: SELF.name IN
       ['continuous',
        'chain',
        'chain double dash',
        'dashed',
        'dotted'];
END_ENTITY;

ENTITY fill_area_style;
  name       : label;
  fill_styles : SET [1:?] OF fill_style_select;
WHERE
  WR1: SIZEOF(QUERY(fill_style <* SELF.fill_styles |
         'PRESENTATION_APPEARANCE_SCHEMA.'+
         'FILL_AREA_STYLE_COLOUR' IN
         TYPEOF(fill_style)
         )) <= 1;
END_ENTITY;

ENTITY fill_area_style_colour;
  name        : label;
  fill_colour : colour;
END_ENTITY;

ENTITY pre_defined_hatch_style
  SUBTYPE OF (pre_defined_item, geometric_representation_item);
END_ENTITY;

ENTITY externally_defined_hatch_style
  SUBTYPE OF (externally_defined_item, geometric_representation_item);
END_ENTITY;

ENTITY fill_area_style_hatching
  SUBTYPE OF (geometric_representation_item);
  hatch_line_appearance         : curve_style;
  start_of_next_hatch_line      : one_direction_repeat_factor;
  point_of_reference_hatch_line : cartesian_point;
  pattern_start                 : cartesian_point;
  hatch_line_angle              : plane_angle_measure;
END_ENTITY;

ENTITY pre_defined_tile_style
  SUBTYPE OF (pre_defined_item, geometric_representation_item);
END_ENTITY;

ENTITY externally_defined_tile_style
  SUBTYPE OF (externally_defined_item, geometric_representation_item);
END_ENTITY;

ENTITY fill_area_style_tiles
  SUBTYPE OF (geometric_representation_item);
  tiling_pattern : two_direction_repeat_factor;
  tiles          : SET [1:?] OF fill_area_style_tile_shape_select;
  tiling_scale   : positive_ratio_measure;
END_ENTITY;

ENTITY fill_area_style_tile_curve_with_style
  SUBTYPE OF (geometric_representation_item);
  styled_curve : annotation_curve_occurrence;
END_ENTITY;

ENTITY fill_area_style_tile_coloured_region
  SUBTYPE OF (geometric_representation_item);
  closed_curve  : curve_or_annotation_curve_occurrence;
  region_colour : colour;
END_ENTITY;

ENTITY fill_area_style_tile_symbol_with_style
  SUBTYPE OF (geometric_representation_item);
  symbol : annotation_symbol_occurrence;
END_ENTITY;

ENTITY pre_defined_tile
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY externally_defined_tile
  SUBTYPE OF (externally_defined_item);
END_ENTITY;

ENTITY one_direction_repeat_factor
  SUBTYPE OF (geometric_representation_item);
  repeat_factor : vector;
END_ENTITY;


ENTITY two_direction_repeat_factor
  SUBTYPE OF (one_direction_repeat_factor);
  second_repeat_factor : vector;
END_ENTITY;

ENTITY surface_style_usage;
  side  : surface_side;
  style : surface_side_style_select;
END_ENTITY;

ENTITY pre_defined_surface_side_style
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY surface_side_style;
  name   : label;
  styles : SET [1:7] OF surface_style_element_select;
WHERE
  WR1: SIZEOF(QUERY( style1 <* SELF.styles |
         SIZEOF(QUERY( style2 <* SELF.styles - style1 |
           TYPEOF(style1) = TYPEOF(style2)
           )) > 0
         )) = 0;
END_ENTITY;

ENTITY surface_style_fill_area;
  fill_area : fill_area_style;
END_ENTITY;

ENTITY surface_style_boundary;
  style_of_boundary : curve_or_render;
END_ENTITY;

ENTITY curve_style_rendering;
  rendering_method     : shading_curve_method;
  rendering_properties : surface_rendering_properties;
END_ENTITY;

ENTITY surface_rendering_properties;
  rendered_colour : colour;
END_ENTITY;

ENTITY surface_style_silhouette;
  style_of_silhouette : curve_or_render;
END_ENTITY;

ENTITY surface_style_segmentation_curve;
  style_of_segmentation_curve : curve_or_render;
END_ENTITY;

ENTITY surface_style_control_grid;
  style_of_control_grid : curve_or_render;
END_ENTITY;

ENTITY surface_style_parameter_line;
  style_of_parameter_lines : curve_or_render;
  direction_counts         : SET [1:2] OF direction_count_select;
WHERE
  WR1: (HIINDEX(SELF.direction_counts) = 1)
                        XOR
       (TYPEOF(SELF.direction_counts[1]) <>
          TYPEOF(SELF.direction_counts[2]));
END_ENTITY;

ENTITY surface_style_rendering;
  rendering_method : shading_surface_method;
  surface_colour   : colour;
END_ENTITY;

ENTITY surface_style_rendering_with_properties
  SUBTYPE OF (surface_style_rendering);
  properties : SET [1:2] OF rendering_properties_select;
WHERE
  WR1: (HIINDEX(SELF.properties) = 1)
                   XOR
       (TYPEOF(SELF.properties[1]) <> TYPEOF(SELF.properties[2]));
END_ENTITY;

ENTITY surface_style_reflectance_ambient;
  ambient_reflectance : REAL;
END_ENTITY;

ENTITY surface_style_reflectance_ambient_diffuse
  SUBTYPE OF (surface_style_reflectance_ambient);
  diffuse_reflectance : REAL;
END_ENTITY;

ENTITY surface_style_reflectance_ambient_diffuse_specular
  SUBTYPE OF (surface_style_reflectance_ambient_diffuse);
  specular_reflectance : REAL;
  specular_exponent    : REAL;
  specular_colour      : colour;
END_ENTITY;

ENTITY surface_style_transparent;
  transparency : REAL;
WHERE
  WR1: {0.0 <= transparency <= 1.0};
END_ENTITY;

ENTITY text_style;
  name                 : label;
  character_appearance : character_style_select;
END_ENTITY;

ENTITY character_glyph_style_stroke;
  stroke_style : curve_style;
END_ENTITY;

ENTITY character_glyph_style_outline;
  outline_style : curve_style;
END_ENTITY;

ENTITY character_glyph_style_outline_with_characteristics
  SUBTYPE OF (character_glyph_style_outline);
  characteristics : fill_area_style;
END_ENTITY;

ENTITY text_style_for_defined_font;
  text_colour : colour;
END_ENTITY;

ENTITY text_style_with_justification
  SUBTYPE OF (text_style);
  justification : text_justification;
END_ENTITY;

ENTITY text_style_with_box_characteristics
  SUBTYPE OF (text_style);
  characteristics : SET [1:4] OF box_characteristic_select;
WHERE
  WR1: SIZEOF( QUERY( c1 <* SELF.characteristics |
         SIZEOF( QUERY( c2 <* SELF.characteristics - c1 |
           TYPEOF (c1) = TYPEOF (c2)
           )) > 0
       )) = 0;
END_ENTITY;

ENTITY text_style_with_spacing
  SUBTYPE OF (text_style);
  character_spacing : character_spacing_select;
END_ENTITY;

ENTITY pre_defined_character_spacing
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY text_style_with_mirror
  SUBTYPE OF (text_style);
  mirror_placement : axis2_placement;
END_ENTITY;

ENTITY symbol_style;
  name            : label; 
  style_of_symbol : symbol_style_select;
END_ENTITY;

ENTITY symbol_element_style;
  style_of_symbol : presentation_style_assignment;
WHERE
  WR1: SIZEOF (QUERY ( style <* SELF.style_of_symbol.styles |
         'PRESENTATION_APPEARANCE_SCHEMA.SYMBOL_STYLE' IN
         TYPEOF (style))) = 0;
  WR2: NOT ('PRESENTATION_APPEARANCE_SCHEMA.' +
            'PRESENTATION_STYLE_BY_CONTEXT' IN
            TYPEOF (SELF.style_of_symbol)
           );
END_ENTITY;

ENTITY symbol_colour;
  colour_of_symbol : colour;
END_ENTITY;

ENTITY approximation_tolerance;
  tolerance : tolerance_select;
END_ENTITY;

ENTITY approximation_tolerance_deviation;
  tessellation_type : approximation_method;
  tolerances        : SET [1:2] OF tolerance_deviation_select;
  definition_space  : product_or_presentation_space;
WHERE
  WR1: (HIINDEX(SELF.tolerances) = 1)
                XOR
       (TYPEOF(SELF.tolerances[1]) <> TYPEOF(SELF.tolerances[2]));
END_ENTITY;

ENTITY approximation_tolerance_parameter;
  tolerances : SET [1:2] OF tolerance_parameter_select;
WHERE
  WR1: (HIINDEX (SELF.tolerances) = 1 )
               XOR
       (TYPEOF (SELF.tolerances[1]) <> TYPEOF (SELF.tolerances[2]));
END_ENTITY;

ENTITY occlusion_precedence;
  higher_precedence : hiding_or_blanking_select;
  lower_precedence  : hiding_or_blanking_select;
  occlusion_context : representation;
WHERE
  WR1: acyclic_occlusion_precedence (SELF, [SELF.lower_precedence]);
END_ENTITY;

ENTITY invisibility;
  invisible_items : SET [1:?] OF invisible_item;
END_ENTITY;

ENTITY context_dependent_invisibility
  SUBTYPE OF (invisibility);
  presentation_context : invisibility_context;
END_ENTITY;

FUNCTION acyclic_occlusion_precedence
   ( relation : occlusion_precedence;
     set_of_lower : SET OF hiding_or_blanking_select ) : BOOLEAN;
   LOCAL
      x : SET OF occlusion_precedence;
      local_set_of_lower : SET OF hiding_or_blanking_select;
   END_LOCAL;
   REPEAT i:=1 TO HIINDEX(set_of_lower);
      IF relation.higher_precedence :=: set_of_lower[i] THEN
         RETURN(FALSE);
      END_IF;
   END_REPEAT;
   x := bag_to_set (USEDIN ( relation.higher_precedence,
                   'PRESENTATION_APPEARANCE_SCHEMA.'+
           'OCCLUSION_PRECEDENCE.LOWER_PRECEDENCE'));
   local_set_of_lower := set_of_lower + relation.higher_precedence;
   IF SIZEOF (x) > 0 THEN
      REPEAT i:=1 TO HIINDEX (x);
         If NOT acyclic_occlusion_precedence(x[i] ,
                                      local_set_of_lower) THEN
            RETURN (FALSE);
         END_IF;
      END_REPEAT;
   END_IF;
   RETURN (TRUE);
END_FUNCTION;

END_SCHEMA; -- presentation_appearance_schema
(*
    The following EXPRESS is for ISO 10303-46:1994
      Technical Corrigendum 3, 2006-03-28
    This is document ISO TC184/SC4/WG12 N4396
    it supersedes ISO TC184/SC4/WG12 N996 (TC2)
    The following changes are made:
    - changed font_select
    - changed character_glyph_symbol
    - changed character_glyph_font_usage
    - added generic_character_glyph_symbol
*)

SCHEMA presentation_definition_schema;

REFERENCE FROM external_reference_schema
    (externally_defined_item,
     pre_defined_item);

REFERENCE FROM geometry_schema
    (axis2_placement,
     curve,
     geometric_representation_item,
     point
     );

REFERENCE FROM measure_schema
    (positive_ratio_measure);
 
REFERENCE FROM presentation_appearance_schema
    (styled_item);
 
REFERENCE FROM presentation_resource_schema
    (character_glyph_symbol,
     planar_box,
     planar_extent,
     font_select,
     presentable_text,
     text_font);

REFERENCE FROM representation_schema
    (item_in_context,
     mapped_item,
     representation,
     representation_item,
     representation_map,
     representation_relationship,
     representation_relationship_with_transformation,
     using_representations);

REFERENCE FROM support_resource_schema
    (label,
     text,
     bag_to_set);

TYPE text_delineation = label;
END_TYPE;

TYPE defined_symbol_select = SELECT
  (pre_defined_symbol,
   externally_defined_symbol);
END_TYPE;

TYPE text_or_character = SELECT
  (annotation_text,
   annotation_text_character,
   defined_character_glyph,
   composite_text,
   text_literal);
END_TYPE;

TYPE text_alignment = label;
END_TYPE;

TYPE defined_glyph_select = SELECT
  (pre_defined_character_glyph,
   externally_defined_character_glyph);
END_TYPE;

TYPE text_path = ENUMERATION OF
  (left,
   right,
   up,
   down);
END_TYPE;

ENTITY annotation_fill_area
  SUBTYPE OF (geometric_representation_item);
  boundaries : SET [1:?] OF curve;
END_ENTITY;

ENTITY defined_symbol
  SUBTYPE OF(geometric_representation_item);
  definition : defined_symbol_select;
  target     : symbol_target;
END_ENTITY;

ENTITY defined_table
  SUBTYPE OF(defined_symbol);
END_ENTITY;

ENTITY symbol_target
  SUBTYPE OF (geometric_representation_item);
  placement         : axis2_placement;
  x_scale           : positive_ratio_measure;
  y_scale           : positive_ratio_measure;
END_ENTITY;

ENTITY pre_defined_symbol
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY externally_defined_symbol
  SUBTYPE OF (externally_defined_item);
END_ENTITY;

ENTITY annotation_symbol
  SUBTYPE OF(mapped_item);
WHERE
  WR1: 'PRESENTATION_DEFINITION_SCHEMA.SYMBOL_REPRESENTATION_MAP' IN
         TYPEOF (SELF\mapped_item.mapping_source);
  WR2: 'PRESENTATION_DEFINITION_SCHEMA.SYMBOL_TARGET' IN
         TYPEOF (SELF\mapped_item.mapping_target);
  WR3: 'GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_ITEM' IN
         TYPEOF (SELF);
END_ENTITY;

ENTITY annotation_table
  SUBTYPE OF(annotation_symbol);
WHERE
  WR1: 'PRESENTATION_DEFINITION_SCHEMA.TABLE_REPRESENTATION' IN
         TYPEOF (SELF\mapped_item.mapping_source.mapped_representation);
END_ENTITY;

ENTITY symbol_representation_map
  SUBTYPE OF (representation_map);
WHERE
  WR1: 'PRESENTATION_DEFINITION_SCHEMA.SYMBOL_REPRESENTATION' IN
         TYPEOF (SELF\representation_map.mapped_representation);
  WR2: 'GEOMETRY_SCHEMA.AXIS2_PLACEMENT' IN
         TYPEOF (SELF\representation_map.mapping_origin);
END_ENTITY;

ENTITY symbol_representation
  SUBTYPE OF (representation);
END_ENTITY;

ENTITY symbol_representation_with_blanking_box
  SUBTYPE OF (symbol_representation);
  blanking : planar_box;
WHERE
  WR1: item_in_context (SELF.blanking, SELF\representation.context_of_items);
END_ENTITY;

ENTITY table_representation
  SUBTYPE OF (symbol_representation);
END_ENTITY;

ENTITY table_record_representation
  SUBTYPE OF (symbol_representation);
WHERE
  WR1: (SIZEOF(USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                            'REPRESENTATION_RELATIONSHIP.REP_2')) > 0) 
                        OR 
       (SIZEOF(QUERY( map_item <* USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                                               'REPRESENTATION_MAP.'+ 
                                               'MAPPED_REPRESENTATION') | 
         SIZEOF(QUERY( mi <* USEDIN(map_item, 'REPRESENTATION_SCHEMA.'+
                                              'MAPPED_ITEM.'+
                                              'MAPPING_SOURCE') |   
                                              'PRESENTATION_DEFINITION_SCHEMA.'+
                                              'TABLE_REPRESENTATION' IN 
             TYPEOF (using_representations (mi)) )) > 0))  
                    > 0);
END_ENTITY;


ENTITY table_record_field_representation
  SUBTYPE OF (symbol_representation);
WHERE
  WR1: (SIZEOF(USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                            'REPRESENTATION_RELATIONSHIP.REP_2')) > 0) 
                        OR 
       (SIZEOF(QUERY( map_item <* USEDIN(SELF, 'REPRESENTATION_SCHEMA.'+ 
                                               'REPRESENTATION_MAP.'+ 
                                               'MAPPED_REPRESENTATION') | 
         SIZEOF(QUERY( mi <* USEDIN(map_item, 'REPRESENTATION_SCHEMA.'+
                                              'MAPPED_ITEM.'+
                                              'MAPPING_SOURCE') |   
                                         'PRESENTATION_DEFINITION_SCHEMA.'+
                                           'TABLE_RECORD_REPRESENTATION' IN 
             TYPEOF (using_representations (mi)) )) > 0))  
                    > 0);
END_ENTITY;


ENTITY table_record_field_representation_with_clipping_box
  SUBTYPE OF (table_record_field_representation);
  clipping_box : planar_box;
WHERE
   WR1: item_in_context (SELF.clipping_box, 
                         SELF\representation.context_of_items);
END_ENTITY;

ENTITY symbol_representation_relationship
  SUBTYPE OF (representation_relationship_with_transformation);
WHERE
  WR1: acyclic_symbol_representation_relationship (SELF,
                                                   [SELF\representation_relationship.
                                                         rep_2]);
  WR2: 'PRESENTATION_DEFINITION_SCHEMA.SYMBOL_REPRESENTATION' IN
         TYPEOF (SELF\representation_relationship.rep_1);
  WR3: 'PRESENTATION_DEFINITION_SCHEMA.SYMBOL_REPRESENTATION'IN
          TYPEOF (SELF\representation_relationship.rep_2);
END_ENTITY;

ENTITY table_representation_relationship
  SUBTYPE OF (symbol_representation_relationship);
WHERE
  WR1: NOT ('PRESENTATION_DEFINITION_SCHEMA.TABLE_RECORD_REPRESENTATION' IN
            TYPEOF (SELF\representation_relationship.rep_1))   
         OR
       ('PRESENTATION_DEFINITION_SCHEMA.TABLE_RECORD_FIELD_REPRESENTATION' IN
         TYPEOF (SELF\representation_relationship.rep_2));
  WR2: NOT ('PRESENTATION_DEFINITION_SCHEMA.TABLE_REPRESENTATION' IN
             TYPEOF (SELF\representation_relationship.rep_1))   
         OR
       ('PRESENTATION_DEFINITION_SCHEMA.TABLE_RECORD_REPRESENTATION' IN
         TYPEOF (SELF\representation_relationship.rep_2));
  WR3: NOT ('PRESENTATION_DEFINITION_SCHEMA.TABLE_RECORD_FIELD_REPRESENTATION' IN
            TYPEOF (SELF\representation_relationship.rep_1)) 
         OR
       ('PRESENTATION_DEFINITION_SCHEMA.TABLE_RECORD_FIELD_REPRESENTATION' IN
         TYPEOF (SELF\representation_relationship.rep_2));
END_ENTITY;

ENTITY annotation_text
  SUBTYPE OF (mapped_item);
WHERE
  WR1: 'GEOMETRY_SCHEMA.AXIS2_PLACEMENT' IN
       TYPEOF( SELF\mapped_item.mapping_target);
  WR2: 'PRESENTATION_DEFINITION_SCHEMA.TEXT_STRING_REPRESENTATION' IN
       TYPEOF( SELF\mapped_item.mapping_source.mapped_representation);
  WR3: 'GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_ITEM' IN
       TYPEOF( SELF);
END_ENTITY;

ENTITY annotation_text_with_extent
  SUBTYPE OF (annotation_text);
  extent : planar_extent;
END_ENTITY;

ENTITY annotation_text_with_delineation
  SUBTYPE OF (annotation_text);
  delineation : text_delineation;
END_ENTITY;

ENTITY annotation_text_with_blanking_box
  SUBTYPE OF (annotation_text);
  blanking : planar_box;
END_ENTITY;

ENTITY annotation_text_with_associated_curves
  SUBTYPE OF (annotation_text);
  associated_curves : SET[1:?] of curve;
END_ENTITY;

ENTITY text_string_representation
  SUBTYPE OF (representation);
WHERE
  WR1: SIZEOF (
         QUERY (item <* SELF\representation.items |
           SIZEOF (['PRESENTATION_DEFINITION_SCHEMA.TEXT_LITERAL',
                    'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT',
                    'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT_CHARACTER',
                    'PRESENTATION_DEFINITION_SCHEMA.DEFINED_CHARACTER_GLYPH',
                    'PRESENTATION_DEFINITION_SCHEMA.COMPOSITE_TEXT',
                    'GEOMETRY_SCHEMA.AXIS2_PLACEMENT'] * TYPEOF (item)) = 0
         )) = 0;
  WR2: SIZEOF (
         QUERY (item <* SELF\representation.items |
           NOT (SIZEOF (['PRESENTATION_DEFINITION_SCHEMA.TEXT_LITERAL',
                         'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT',
                         'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT_CHARACTER',
                         'PRESENTATION_DEFINITION_SCHEMA.DEFINED_CHARACTER_GLYPH',
                         'PRESENTATION_DEFINITION_SCHEMA.COMPOSITE_TEXT'] *
                 TYPEOF (item)) = 0)
         )) >= 1;
  WR3: SIZEOF (
         QUERY (a2p <* 
           QUERY (item <* SELF\representation.items | 
             'GEOMETRY_SCHEMA.AXIS2_PLACEMENT' IN TYPEOF (item)) |
           NOT ((SIZEOF (
             QUERY (at <* 
               QUERY (item <* SELF\representation.items | 
                  'PRESENTATION_DEFINITION_SCHEMA.' + 
                  'ANNOTATION_TEXT' IN TYPEOF (item)) | 
               (at\mapped_item.mapping_target :=: a2p))) >= 1) OR
           (SIZEOF (
             QUERY (atc <* 
               QUERY (item <* SELF\representation.items |
                 'PRESENTATION_DEFINITION_SCHEMA.' + 
                 'ANNOTATION_TEXT_CHARACTER' IN TYPEOF (item)) | 
               (atc\mapped_item.mapping_target :=: a2p))) >= 1)
          ))) = 0;
END_ENTITY;

ENTITY annotation_text_character
  SUBTYPE OF (mapped_item);
  alignment : text_alignment;
WHERE
  WR1: 'PRESENTATION_RESOURCE_SCHEMA.CHARACTER_GLYPH_SYMBOL' IN
         TYPEOF (SELF\mapped_item.mapping_source.mapped_representation);
  WR2: 'GEOMETRY_SCHEMA.AXIS2_PLACEMENT' IN
         TYPEOF (SELF\mapped_item.mapping_target);
  WR3: 'GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_ITEM' IN
         TYPEOF (SELF);
END_ENTITY;

ENTITY defined_character_glyph
  SUBTYPE OF(geometric_representation_item);
  definition : defined_glyph_select;
  placement  : axis2_placement;
END_ENTITY;

ENTITY externally_defined_character_glyph
  SUBTYPE OF (externally_defined_item);
END_ENTITY;

ENTITY pre_defined_character_glyph
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY text_literal
  SUBTYPE OF (geometric_representation_item);
  literal   : presentable_text;
  placement : axis2_placement;
  alignment : text_alignment;
  path      : text_path;
  font      : font_select;
END_ENTITY;

ENTITY text_literal_with_extent
  SUBTYPE OF (text_literal);
  extent : planar_extent;
END_ENTITY;

ENTITY text_literal_with_delineation
  SUBTYPE OF (text_literal);
  delineation : text_delineation;
END_ENTITY;

ENTITY text_literal_with_blanking_box
  SUBTYPE OF (text_literal);
  blanking : planar_box;
END_ENTITY;

ENTITY text_literal_with_associated_curves
  SUBTYPE OF (text_literal);
  associated_curves : SET[1:?] of curve;
END_ENTITY;

ENTITY composite_text
  SUBTYPE OF (geometric_representation_item);
  collected_text : SET[2:?] of text_or_character;
WHERE
  WR1: acyclic_composite_text( SELF, SELF.collected_text);
END_ENTITY;

ENTITY composite_text_with_extent
  SUBTYPE OF (composite_text);
  extent : planar_extent;
END_ENTITY;

ENTITY composite_text_with_delineation
  SUBTYPE OF (composite_text);
  delineation : text_delineation;
END_ENTITY;

ENTITY composite_text_with_blanking_box
  SUBTYPE OF (composite_text);
  blanking : planar_box;
END_ENTITY;

ENTITY composite_text_with_associated_curves
  SUBTYPE OF (composite_text);
  associated_curves : SET[1:?] of curve;
END_ENTITY;

ENTITY annotation_occurrence
  SUPERTYPE OF (ONEOF(annotation_point_occurrence,
                      annotation_curve_occurrence,
                      annotation_fill_area_occurrence,
                      annotation_text_occurrence,
                      annotation_symbol_occurrence))
  SUBTYPE OF (styled_item);
WHERE
  WR1: 'GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_ITEM' IN
          TYPEOF (SELF);
END_ENTITY;

ENTITY annotation_point_occurrence
  SUBTYPE OF (annotation_occurrence);
WHERE
  WR1: 'GEOMETRY_SCHEMA.POINT' IN TYPEOF (SELF\styled_item.item);
END_ENTITY;

ENTITY annotation_curve_occurrence
  SUBTYPE OF (annotation_occurrence);
WHERE
  WR1: 'GEOMETRY_SCHEMA.CURVE' IN TYPEOF (SELF\styled_item.item);
END_ENTITY;

ENTITY annotation_fill_area_occurrence
  SUBTYPE OF (annotation_occurrence);
  fill_style_target : point;
WHERE
  WR1: 'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_FILL_AREA' IN
         TYPEOF (SELF.item);
END_ENTITY;

ENTITY annotation_text_occurrence
  SUBTYPE OF (annotation_occurrence);
WHERE
  WR1: SIZEOF (
         ['PRESENTATION_DEFINITION_SCHEMA.TEXT_LITERAL',
          'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT',
          'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT_CHARACTER',
          'PRESENTATION_DEFINITION_SCHEMA.DEFINED_CHARACTER_GLYPH',
          'PRESENTATION_DEFINITION_SCHEMA.COMPOSITE_TEXT'] *
         TYPEOF (SELF\styled_item.item)) > 0;
END_ENTITY;

ENTITY annotation_symbol_occurrence
  SUBTYPE OF (annotation_occurrence);
WHERE
  WR1: SIZEOF(
         ['PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_SYMBOL',
          'PRESENTATION_DEFINITION_SCHEMA.DEFINED_SYMBOL'] *
         TYPEOF(SELF\styled_item.item)) > 0;
END_ENTITY;

ENTITY annotation_table_occurrence
  SUBTYPE OF (annotation_symbol_occurrence);
WHERE
  WR1: SIZEOF (
         ['PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TABLE',
          'PRESENTATION_DEFINITION_SCHEMA.DEFINED_TABLE'] *
         TYPEOF (SELF\styled_item.item)) > 0;
END_ENTITY;

ENTITY annotation_occurrence_relationship;
  name                           : label;
  description                    : text;
  relating_annotation_occurrence : annotation_occurrence;
  related_annotation_occurrence  : annotation_occurrence;
END_ENTITY;

ENTITY table_text_relationship
  SUBTYPE OF (annotation_occurrence_relationship);
  field : table_record_field_representation;
WHERE
  WR1: 'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TABLE_OCCURRENCE'
       IN TYPEOF (SELF\annotation_occurrence_relationship.
                  relating_annotation_occurrence);
  WR2: 'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TABLE'
       IN TYPEOF (SELF\annotation_occurrence_relationship.
                  relating_annotation_occurrence\styled_item.item);
  WR3: 'PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT_OCCURRENCE'
       IN TYPEOF (SELF\annotation_occurrence_relationship.
                  related_annotation_occurrence);
  WR4: field_in_table (SELF.field,
                       SELF\annotation_occurrence_relationship.
                       relating_annotation_occurrence);
END_ENTITY;

FUNCTION acyclic_composite_text(start_composite : composite_text;
                                child_text : SET [1:?] OF
                                text_or_character) : LOGICAL;
  LOCAL
   i : INTEGER;
   local_composite_text : SET [0:?] OF composite_text;
   local_annotation_text : SET [0:?] OF annotation_text;
   local_children : SET [0:?] OF text_or_character;
  END_LOCAL;
  local_composite_text := QUERY (child <* child_text |
                          ('PRESENTATION_DEFINITION_SCHEMA.COMPOSITE_TEXT'
                           IN TYPEOF (child)));
  IF (SIZEOF (local_composite_text) > 0) THEN
    REPEAT i := 1 TO HIINDEX (local_composite_text);
      IF (start_composite :=: local_composite_text[i]) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;
  local_children := child_text;
  IF (SIZEOF (local_composite_text)) > 0 THEN
    REPEAT i := 1 TO HIINDEX (local_composite_text);
      local_children := local_children +
                        local_composite_text[i].collected_text;
    END_REPEAT;
  END_IF;
  local_annotation_text := QUERY (child <* child_text |
                          ('PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT'
                           IN TYPEOF (child)));
  IF (SIZEOF (local_annotation_text) > 0) THEN
    REPEAT i := 1 TO HIINDEX (local_annotation_text);
      local_children := local_children +
      QUERY (item <* local_annotation_text[i]\mapped_item.
                     mapping_source.mapped_representation.items |
        SIZEOF(['PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_TEXT',
                'PRESENTATION_DEFINITION_SCHEMA.COMPOSITE_TEXT'] *
                TYPEOF(item)) > 0);
    END_REPEAT;
  END_IF;
  IF (local_children :<>: child_text) THEN
    RETURN (acyclic_composite_text (start_composite, local_children));
  ELSE
    RETURN (TRUE);
  END_IF;
 END_FUNCTION;

FUNCTION acyclic_symbol_representation_relationship
  (relation : symbol_representation_relationship;
   children : SET OF symbol_representation ) : BOOLEAN;
  LOCAL
    x : SET OF symbol_representation_relationship;
    local_children : SET OF symbol_representation;
  END_LOCAL;
  REPEAT i:=1 TO HIINDEX(children);
    IF relation\representation_relationship.rep_1 :=: children[i] THEN
      RETURN(FALSE);
    END_IF;
  END_REPEAT;
  x := bag_to_set (USEDIN ( relation\representation_relationship.rep_1,
                'REPRESENTATION_SCHEMA.'+
                'REPRESENTATION_RELATIONSHIP.'+ 'REP_2'));
  local_children := children + relation\representation_relationship.rep_1;
  IF SIZEOF (x) > 0 THEN
    REPEAT i:=1 TO HIINDEX (x);
      IF NOT acyclic_symbol_representation_relationship(x[i] , 
                                                local_children) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;
   RETURN (TRUE);
END_FUNCTION;

FUNCTION field_in_table (field : table_record_field_representation;
                         table : annotation_table_occurrence): BOOLEAN;
  LOCAL
    table_rep : table_representation;
    symbol_rep_rel_set : SET OF symbol_representation_relationship;
    mapped_item_set : SET OF mapped_item;
    table_record_rep_set : SET OF table_record_representation := [];
  END_LOCAL;
  table_rep := table\styled_item.item\mapped_item.mapping_source.
    mapped_representation;
  mapped_item_set := QUERY(item <* table_rep.items |
                       ('REPRESENTATION_SCHEMA.MAPPED_ITEM' IN
                        TYPEOF(item))
                                 AND
                       ('PRESENTATION_DEFINITION_SCHEMA.'+
                        'TABLE_RECORD_REPRESENTATION' IN
                         TYPEOF(item\mapped_item.mapping_source.
                                    mapped_representation ))
                     );
  REPEAT i := 1 TO HIINDEX(mapped_item_set);
    table_record_rep_set := table_record_rep_set +
           mapped_item_set[i].mapping_source.mapped_representation;
  END_REPEAT;
   symbol_rep_rel_set := bag_to_set (USEDIN(table_rep, 
                               'REPRESENTATION_SCHEMA.'+
                               'REPRESENTATION_RELATIONSHIP.REP_1'));
   REPEAT i := 1 TO HIINDEX(symbol_rep_rel_set);
     table_record_rep_set := table_record_rep_set +
              symbol_rep_rel_set[i]\representation_relationship.rep_2;
  END_REPEAT;
   IF SIZEOF(QUERY( table_record_rep <* table_record_rep_set |
--              (SIZEOF(QUERY( symbol_rep_rel <* USEDIN(table_record_rep,
--                            'PRESENTATION_DEFINITION_SCHEMA.'+
--                            'SYMBOL_REPRESENTATION_RELATIONSHIP.REP_1') |
--                       symbol_rep_rel\representation_relationship.rep_2 :=: field
              (SIZEOF(QUERY( rep_rel <* USEDIN(table_record_rep,
                            'REPRESENTATION_SCHEMA.'+
                            'REPRESENTATION_RELATIONSHIP.REP_1') |
                       ('PRESENTATION_DEFINITION_SCHEMA.' +
                       'SYMBOL_REPRESENTATION_RELATIONSHIP' IN TYPEOF(rep_rel)) AND  
                       (rep_rel.rep_2 :=: field)
                       )) > 0)
                       OR
              (SIZEOF(QUERY(item <* table_record_rep.items |
                        ('REPRESENTATION_SCHEMA.MAPPED_ITEM' IN
                         TYPEOF(item))
                                 AND
                        (field :=: item\mapped_item.mapping_source.
                                    mapped_representation )
                         )) > 0)
             )) = 0 THEN
    RETURN(FALSE);
  END_IF;
  RETURN(TRUE);
END_FUNCTION;

END_SCHEMA; -- presentation_definition_schema
(*
    The following EXPRESS is for ISO 10303-46:1994
      Technical Corrigendum 3, 2006-03-28
    This is document ISO TC184/SC4/WG12 N4396
    it supersedes ISO TC184/SC4/WG12 N996 (TC2)
    The following changes are made:
    - changed font_select
    - changed character_glyph_symbol
    - changed character_glyph_font_usage
    - added generic_character_glyph_symbol
*)

SCHEMA presentation_organization_schema;

REFERENCE FROM presentation_resource_schema
   (colour,
    planar_box,
    planar_extent,
    presentation_scaled_placement);

REFERENCE FROM presentation_definition_schema
    (annotation_occurrence,
     symbol_representation,
     symbol_representation_relationship);

REFERENCE FROM presentation_appearance_schema
    (styled_item);

REFERENCE FROM geometry_schema
    (axis2_placement_2d,
     axis2_placement_3d,
     cartesian_point,
     curve,
     direction,
     dot_product,
     geometric_representation_context,
     geometric_representation_item,
     plane
     );

REFERENCE FROM representation_schema
    (founded_item,
     item_defined_transformation,
     item_in_context,
     mapped_item,
     representation,
     representation_item,
     representation_map,
     representation_relationship,
     representation_relationship_with_transformation);

REFERENCE FROM measure_schema
   (length_measure,
    positive_ratio_measure,
    positive_plane_angle_measure);
 
REFERENCE FROM support_resource_schema
    (identifier,
     label,
     text,
     bag_to_set);

TYPE presentation_size_assignment_select = SELECT 
  (presentation_view,
   presentation_area,
   area_in_set);
END_TYPE;

TYPE area_or_view = SELECT 
  (presentation_area,
   presentation_view);
END_TYPE;

TYPE central_or_parallel = ENUMERATION OF 
  (central, 
   parallel);
END_TYPE;

TYPE layered_item = SELECT 
  (presentation_representation,
   representation_item);
END_TYPE;

TYPE presentation_representation_select = SELECT 
  (presentation_representation,
   presentation_set);
END_TYPE;

ENTITY presentation_set;
INVERSE
  areas : SET [1:?] OF area_in_set FOR in_set;
END_ENTITY;

ENTITY presentation_representation
  SUBTYPE OF (representation);
WHERE
  WR1: SELF\representation.
            context_of_items\geometric_representation_context.
            coordinate_space_dimension = 2;
  WR2: 'GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_CONTEXT'
       IN TYPEOF (SELF\representation.context_of_items);
END_ENTITY;

ENTITY presentation_area
  SUBTYPE OF (presentation_representation);
WHERE
  WR1: ((SIZEOF (QUERY (ais <* USEDIN (SELF, 'PRESENTATION_ORGANIZATION_SCHEMA.' +
                                             'AREA_IN_SET.AREA') | 
           SIZEOF (USEDIN (ais, 'PRESENTATION_ORGANIZATION_SCHEMA.' +
                                'PRESENTATION_SIZE.UNIT')) =1)) > 0) OR
         (SIZEOF (USEDIN (SELF, 'PRESENTATION_ORGANIZATION_SCHEMA.' +
                                'PRESENTATION_SIZE.UNIT')) =1));
END_ENTITY;

ENTITY area_in_set;
  area   : presentation_area;
  in_set : presentation_set;
END_ENTITY;

ENTITY presentation_view
  SUBTYPE OF (presentation_representation);
END_ENTITY;

ENTITY area_dependent_annotation_representation
  SUBTYPE OF (presentation_representation);
WHERE
  WR1: SIZEOF (QUERY (item <* SELF\representation.items |
       NOT (SIZEOF (['PRESENTATION_DEFINITION_SCHEMA.' +
                     'ANNOTATION_OCCURRENCE',
                     'GEOMETRY_SCHEMA.AXIS2_PLACEMENT'] * 
            TYPEOF(item)) = 1
       ))) = 0;
  WR2: SIZEOF (QUERY (item <* SELF\representation.items | 
       ('PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_OCCURRENCE' IN
         TYPEOF (item))
       )) >= 1;
END_ENTITY;

ENTITY product_data_representation_view
  SUBTYPE OF (presentation_representation);
WHERE
  WR1: SIZEOF (QUERY (item <* SELF\representation.items |
       NOT (SIZEOF (['PRESENTATION_ORGANIZATION_SCHEMA.CAMERA_IMAGE',
                     'GEOMETRY_SCHEMA.AXIS2_PLACEMENT'] *
                    TYPEOF (item)) = 1
       ))) = 0;
  WR2: SIZEOF (QUERY (item <* SELF\representation.items | 
       ('PRESENTATION_ORGANIZATION_SCHEMA.CAMERA_IMAGE' IN
        TYPEOF (item))
       )) >= 1;
END_ENTITY;

ENTITY view_dependent_annotation_representation
  SUBTYPE OF (presentation_representation);
WHERE
  WR1: SIZEOF (QUERY (item <* SELF\representation.items |
       NOT (SIZEOF (['PRESENTATION_DEFINITION_SCHEMA.' +
                     'ANNOTATION_OCCURRENCE',
                     'GEOMETRY_SCHEMA.AXIS2_PLACEMENT'] * 
            TYPEOF(item)) = 1
       ))) = 0;
  WR2: SIZEOF (QUERY (item <* SELF\representation.items |
       ('PRESENTATION_DEFINITION_SCHEMA.ANNOTATION_OCCURRENCE' IN
        TYPEOF (item))
       )) >= 1;
END_ENTITY;

ENTITY presentation_size;
  unit : presentation_size_assignment_select;
  size : planar_box;
WHERE
  WR1: (('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_REPRESENTATION'
         IN TYPEOF (SELF.unit)) AND
         item_in_context (SELF.size, 
                          SELF.unit\representation.context_of_items)
       )
            OR
       (
        ('PRESENTATION_ORGANIZATION_SCHEMA.AREA_IN_SET'
          IN TYPEOF (SELF.unit)) AND
        (SIZEOF (QUERY ( ais <* SELF.unit\area_in_set.in_set.areas |
                NOT item_in_context (SELF.size, ais.area\representation.
                                                context_of_items) )) = 0)
       ); 
END_ENTITY;

ENTITY background_colour
  SUBTYPE OF (colour);
  presentation : area_or_view;
UNIQUE
  UR1:  presentation;
END_ENTITY;

ENTITY presentation_representation_relationship
  SUBTYPE OF (representation_relationship_with_transformation);
WHERE
  WR1: 'PRESENTATION_DEFINITION_SCHEMA.PRESENTATION_REPRESENTATION' IN
         TYPEOF (SELF\representation_relationship.rep_1);
  WR2: 'PRESENTATION_DEFINITION_SCHEMA.PRESENTATION_REPRESENTATION' IN
         TYPEOF (SELF\representation_relationship.rep_2);
  WR3: acyclic_presentation_representation_relationship (SELF,
         [SELF\representation_relationship.rep_2]);
  WR4: NOT (('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_AREA' IN
         TYPEOF (SELF\representation_relationship.rep_1)) 
                 AND
         NOT (SIZEOF (['PRESENTATION_ORGANIZATION_SCHEMA.' +
                       'PRODUCT_DATA_REPRESENTATION_VIEW',
                       'PRESENTATION_ORGANIZATION_SCHEMA.' +
                       'VIEW_DEPENDENT_ANNOTATION_REPRESENTATION'] *
         TYPEOF (SELF\representation_relationship.rep_2)) = 0));
  WR5: NOT (('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_VIEW'
         IN TYPEOF (SELF\representation_relationship.rep_1))
                 AND
       NOT (SIZEOF (['PRESENTATION_ORGANIZATION_SCHEMA.' +
                     'PRESENTATION_AREA',
                     'PRESENTATION_ORGANIZATION_SCHEMA.' +
                     'PRESENTATION_VIEW',
                     'PRESENTATION_ORGANIZATION_SCHEMA.' +
                     'AREA_DEPENDENT_ANNOTATION_REPRESENTATION'] *
              TYPEOF (SELF\representation_relationship.rep_2))=0));
  WR6: (NOT ('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_VIEW' IN
         TYPEOF(SELF\representation_relationship.rep_2)))
              XOR
         ('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_AREA'IN
         TYPEOF(SELF\representation_relationship.rep_1));
  WR7: (NOT ('PRESENTATION_ORGANIZATION_SCHEMA.' +
             'PRODUCT_DATA_REPRESENTATION_VIEW' IN
         (TYPEOF(SELF\representation_relationship.rep_1) +
          TYPEOF(SELF\representation_relationship.rep_2))))
              XOR
       ('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_VIEW' IN
         TYPEOF(SELF\representation_relationship.rep_1))
                AND
       ('PRESENTATION_ORGANIZATION_SCHEMA.PRODUCT_DATA_REPRESENTATION_VIEW' IN
         TYPEOF(SELF\representation_relationship.rep_2));
  WR8: 'PRESENTATION_ORGANIZATION_SCHEMA.GRAPHICAL_TRANSFORMATION' IN
         TYPEOF(SELF\representation_relationship_with_transformation.
                     transformation_operator);
END_ENTITY;

ENTITY graphical_transformation
  SUBTYPE OF (item_defined_transformation);
WHERE
  WR1: 'GEOMETRY_SCHEMA.AXIS2_PLACEMENT_2D' IN
         TYPEOF (SELF\item_defined_transformation.transform_item_1);
  WR2: 'PRESENTATION_RESOURCE_SCHEMA.PRESENTATION_SCALED_PLACEMENT' IN
         TYPEOF (SELF\item_defined_transformation.transform_item_2);
END_ENTITY;

ENTITY camera_model
  SUPERTYPE OF (ONEOF(camera_model_d2, camera_model_d3))
  SUBTYPE OF (geometric_representation_item);
WHERE
  WR1: (SIZEOF (USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                              'ITEM_DEFINED_TRANSFORMATION.' +
                              'TRANSFORM_ITEM_1')) +
        SIZEOF (USEDIN (SELF, 'REPRESENTATION_SCHEMA.' +
                              'REPRESENTATION_MAP.MAPPING_ORIGIN'))
       ) > 0;
  WR2: SIZEOF(USEDIN(SELF,'PRESENTATION_APPEARANCE_SCHEMA.'+
                          'STYLED_ITEM.ITEM')) = 0;
END_ENTITY;

ENTITY camera_model_d2
  SUBTYPE OF (camera_model);
  view_window          : planar_box;
  view_window_clipping : BOOLEAN;
WHERE
  WR1: SELF\geometric_representation_item.dim = 2;
END_ENTITY;

ENTITY camera_model_d2_shape_clipping
  SUBTYPE OF (camera_model_d2);
  shape_clipping : curve;
END_ENTITY;

ENTITY camera_model_d3
  SUBTYPE OF (camera_model);
  view_reference_system : axis2_placement_3d;
  perspective_of_volume : view_volume;
WHERE
  WR1: (dot_product (SELF.view_reference_system.p[3],
         SELF.perspective_of_volume.view_window.placement.p[3]) = 1.0)
         AND
       (SELF.view_reference_system.location.coordinates[3] =
        SELF.perspective_of_volume.view_window.
             placement.location.coordinates[3]);
  WR2: SELF\geometric_representation_item.dim = 3;
END_ENTITY;

ENTITY view_volume
  SUBTYPE OF (founded_item);
  projection_type            : central_or_parallel;
  projection_point           : cartesian_point;
  view_plane_distance        : length_measure;
  front_plane_distance       : length_measure;
  front_plane_clipping       : BOOLEAN;
  back_plane_distance        : length_measure;
  back_plane_clipping        : BOOLEAN;
  view_volume_sides_clipping : BOOLEAN;
  view_window                : planar_box;
END_ENTITY;

ENTITY camera_model_d3_with_hlhsr
  SUBTYPE OF (camera_model_d3);
  hidden_line_surface_removal : BOOLEAN;
END_ENTITY;

ENTITY camera_model_d3_multi_clipping
  SUBTYPE OF (camera_model_d3);
  shape_clipping : SET [1:?] OF plane;
END_ENTITY;

ENTITY camera_model_with_light_sources
  SUBTYPE OF (camera_model_d3);
  sources : SET [1:?] OF light_source;
END_ENTITY;

ENTITY light_source
  SUPERTYPE OF (ONEOF(light_source_ambient,
                      light_source_directional,
                      light_source_positional,
                      light_source_spot))
  SUBTYPE OF (geometric_representation_item);
  light_colour : colour;
WHERE
  WR1: SIZEOF(USEDIN(SELF,'PRESENTATION_APPEARANCE_SCHEMA.'+
                         'STYLED_ITEM.ITEM')) = 0;
END_ENTITY;

ENTITY light_source_ambient
  SUBTYPE OF (light_source);
END_ENTITY;

ENTITY light_source_directional
  SUBTYPE OF (light_source);
  orientation : direction;
END_ENTITY;

ENTITY light_source_positional
  SUBTYPE OF (light_source);
  position             : cartesian_point;
  constant_attenuation : REAL;
  distance_attenuation : REAL;
END_ENTITY;

ENTITY light_source_spot
  SUBTYPE OF (light_source);
  position               : cartesian_point;
  orientation            : direction;
  concentration_exponent : REAL;
  constant_attenuation   : REAL;
  distance_attenuation   : REAL;
  spread_angle           : positive_plane_angle_measure;
END_ENTITY;

ENTITY camera_image
  SUBTYPE OF (mapped_item);
WHERE
  WR1: 'PRESENTATION_ORGANIZATION_SCHEMA.CAMERA_USAGE'
       IN TYPEOF (SELF\mapped_item.mapping_source);
  WR2: 'PRESENTATION_RESOURCE_SCHEMA.PLANAR_BOX'
       IN TYPEOF (SELF\mapped_item.mapping_target);
  WR3: 'GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_ITEM'
       IN TYPEOF (SELF);
END_ENTITY;

ENTITY camera_usage
  SUBTYPE OF (representation_map);
WHERE
  WR1: NOT ('PRESENTATION_ORGANIZATION_SCHEMA.PRESENTATION_REPRESENTATION'
       IN TYPEOF(SELF\representation_map.mapped_representation));
  WR2: 'PRESENTATION_ORGANIZATION_SCHEMA.CAMERA_MODEL'
       IN TYPEOF (SELF\representation_map.mapping_origin);
END_ENTITY;

ENTITY camera_image_3d_with_scale
  SUBTYPE OF (camera_image);
DERIVE
  scale: positive_ratio_measure := ((SELF\mapped_item.mapping_target\
         planar_extent.size_in_x) / (SELF\mapped_item.mapping_source.
         mapping_origin\camera_model_d3.perspective_of_volume.view_window.
         size_in_x));
WHERE
  WR1: ('PRESENTATION_ORGANIZATION_SCHEMA.CAMERA_MODEL_D3'
       IN TYPEOF (SELF\mapped_item.mapping_source.mapping_origin));
  WR2: aspect_ratio(SELF\mapped_item.mapping_target) =
       aspect_ratio(SELF\mapped_item.mapping_source.mapping_origin\
       camera_model_d3.perspective_of_volume.view_window);
  WR3: SELF\mapped_item.mapping_source.mapping_origin\camera_model_d3.
       perspective_of_volume.front_plane_clipping
       AND
       SELF\mapped_item.mapping_source.mapping_origin\camera_model_d3.
       perspective_of_volume.view_volume_sides_clipping;
  WR4: (SELF\mapped_item.mapping_target\planar_extent.size_in_x > 0)
       AND
       (SELF\mapped_item.mapping_target\planar_extent.size_in_y > 0);
  WR5: (SELF\mapped_item.mapping_source.mapping_origin\camera_model_d3.
       perspective_of_volume.view_window.size_in_x > 0)
       AND
       (SELF\mapped_item.mapping_source.mapping_origin\camera_model_d3.
       perspective_of_volume.view_window.size_in_y > 0);
  WR6: ('GEOMETRY_SCHEMA.' +
       'AXIS2_PLACEMENT_2D' IN TYPEOF (SELF\mapped_item.
       mapping_target\planar_box.placement))
       AND NOT ('GEOMETRY_SCHEMA.' +
       'AXIS2_PLACEMENT_3D' IN TYPEOF (SELF\mapped_item.
       mapping_target\planar_box.placement));
END_ENTITY;


ENTITY presentation_layer_assignment;
  name           : label;
  description    : text;
  assigned_items : SET [1:?] OF layered_item;
END_ENTITY;

ENTITY representation_item_dependent_layer_assignment
  SUBTYPE OF (presentation_layer_assignment);
  item_context : representation_item;
END_ENTITY;

ENTITY presentation_layer_usage;
  assignment   : presentation_layer_assignment;
  presentation : presentation_representation;
UNIQUE
  UR1: assignment, presentation;
END_ENTITY;

ENTITY presented_item_representation;
  presentation : presentation_representation_select;
  item         : presented_item;
END_ENTITY;

ENTITY presented_item
  ABSTRACT SUPERTYPE;
END_ENTITY;

RULE symbol_representation_rule
  FOR (presentation_representation_relationship);
WHERE
  WR1: SIZEOF(QUERY(each_1 <* presentation_representation_relationship  |
              NOT ('PRESENTATION_DEFINITION_SCHEMA.'+
              'SYMBOL_REPRESENTATION_RELATIONSHIP' IN TYPEOF(each_1)) AND
         (SIZEOF(QUERY(each_2 <* [each_1\representation_relationship.rep_1,
                                  each_1\representation_relationship.rep_2] |
         'PRESENTATION_DEFINITION_SCHEMA.SYMBOL_REPRESENTATION' IN TYPEOF(each_2)
         )) > 0)
       )) = 0;
END_RULE;

FUNCTION acyclic_presentation_representation_relationship
  ( relation : presentation_representation_relationship;
    children : SET OF presentation_representation ) : BOOLEAN;
  LOCAL
    x : SET OF presentation_representation_relationship;
    local_children : SET OF presentation_representation;
  END_LOCAL;
  REPEAT i:=1 TO HIINDEX(children);
    IF relation\representation_relationship.rep_1 :=: children[i] THEN
       RETURN(FALSE);
    END_IF;
  END_REPEAT;
  x := bag_to_set (USEDIN ( relation\representation_relationship.rep_1,
                  'REPRESENTATION_SCHEMA.'+
                  'REPRESENTATION_RELATIONSHIP.REP_2'));
  local_children := children + relation\representation_relationship.rep_1;
  IF SIZEOF (x) > 0 THEN
    REPEAT i:=1 TO HIINDEX (x);
       IF NOT acyclic_presentation_representation_relationship
              (x[i] , local_children) THEN
         RETURN (FALSE);
       END_IF;
    END_REPEAT;
  END_IF;
  RETURN (TRUE);
END_FUNCTION;

FUNCTION aspect_ratio (p : planar_box) : positive_ratio_measure;
(* if the dimensions of the planar_box are greater than zero,
      compute the aspect ratio and return the resulting value. *)
   IF (p.size_in_x > 0.) AND (p.size_in_y > 0.) THEN
      RETURN (p.size_in_x / p.size_in_y);
   ELSE
      RETURN (?);
   END_IF;
END_FUNCTION; 

END_SCHEMA; -- presentation_organization_schema 
(*
    The following EXPRESS is for ISO 10303-46:1994
      Technical Corrigendum 3, 2006-03-28
    This is document ISO TC184/SC4/WG12 N4396
    it supersedes ISO TC184/SC4/WG12 N996 (TC2)
    The following changes are made:
    - changed font_select
    - changed character_glyph_symbol
    - changed character_glyph_font_usage
    - added generic_character_glyph_symbol
*)

SCHEMA presentation_resource_schema;

REFERENCE FROM external_reference_schema
    (externally_defined_item,
     pre_defined_item);

REFERENCE FROM geometry_schema
    (axis2_placement,
     curve,
     geometric_representation_item
     );

REFERENCE FROM measure_schema
    (length_measure,
     positive_length_measure,
     positive_ratio_measure,
     ratio_measure);

REFERENCE FROM presentation_definition_schema
    (annotation_fill_area,
     symbol_representation);

REFERENCE FROM representation_schema
    (item_in_context,
     representation);

REFERENCE FROM support_resource_schema
    (identifier,
     label,
     text);
 
TYPE staircase_or_linear = ENUMERATION OF 
  (staircase, 
   linear);
END_TYPE;

TYPE presentable_text = STRING;
END_TYPE;

TYPE font_select = SELECT
  (pre_defined_text_font,
   externally_defined_text_font,
   text_font);
END_TYPE;

ENTITY character_glyph_symbol
  SUBTYPE OF (generic_character_glyph_symbol);
  character_box  : planar_extent;
  baseline_ratio : ratio_measure;
DERIVE
  box_height : length_measure := character_box.size_in_y;
WHERE
  WR1: {0.0 <= baseline_ratio <= 1.0};
  WR2: item_in_context(SELF.character_box, 
                       SELF\representation.context_of_items);
  WR3: 'MEASURE_SCHEMA.POSITIVE_LENGTH_MEASURE'
        IN TYPEOF (SELF.box_height);
END_ENTITY;

ENTITY character_glyph_symbol_stroke
  SUBTYPE OF (character_glyph_symbol);
  strokes : SET [1:?] OF curve;
WHERE
  WR1: SELF.strokes <= SELF\representation.items;
END_ENTITY;

ENTITY character_glyph_symbol_outline
  SUBTYPE OF (character_glyph_symbol);
  outlines : SET [1:?] OF annotation_fill_area;
WHERE
  WR1: SELF.outlines <= SELF\representation.items;
END_ENTITY;

ENTITY character_glyph_font_usage;
  character : generic_character_glyph_symbol;
  font      : text_font;
END_ENTITY;

ENTITY generic_character_glyph_symbol
  ABSTRACT SUPERTYPE
  SUBTYPE OF (symbol_representation);
END_ENTITY; 

ENTITY text_font;
  id          : identifier;
  name        : label;
  description : text;
INVERSE
  glyphs : SET [1:?] OF character_glyph_font_usage FOR font;
END_ENTITY;

ENTITY text_font_family;
  id          : identifier;
  name        : label;
  description : text;
INVERSE
  fonts       : SET [1:?] OF text_font_in_family FOR family;
END_ENTITY;

ENTITY text_font_in_family;
  font   : text_font;
  family : text_font_family;
END_ENTITY;

ENTITY externally_defined_text_font
  SUBTYPE OF (externally_defined_item);
END_ENTITY;

ENTITY pre_defined_text_font
  SUBTYPE OF (pre_defined_item);
END_ENTITY;

ENTITY colour;
END_ENTITY;

ENTITY colour_specification
  SUBTYPE OF (colour);
  name : label;
END_ENTITY;

ENTITY colour_rgb
  SUBTYPE OF (colour_specification);
  red   : REAL;
  green : REAL;
  blue  : REAL;
WHERE
  WR1: {0.0 <= red <= 1.0};
  WR2: {0.0 <= green <= 1.0};
  WR3: {0.0 <= blue <= 1.0};
END_ENTITY;

ENTITY colour_associated
  SUBTYPE OF (colour);
  name : label;
  variable_to_be_shown : SET [1:?] OF REAL;
  mapping              : colour_association_table;
END_ENTITY;

ENTITY colour_association_table;
  discrete_states_with_colours : LIST [1:?] OF state_variable_with_colour;
  interpolation_type           : staircase_or_linear;
END_ENTITY;

ENTITY state_variable_with_colour;
  state_variable    : REAL;
  associated_colour : colour_specification;
END_ENTITY;

ENTITY pre_defined_colour
  SUBTYPE OF (pre_defined_item, colour);
END_ENTITY;

ENTITY planar_extent
  SUBTYPE OF (geometric_representation_item);
   size_in_x : length_measure;
   size_in_y : length_measure;
END_ENTITY;

ENTITY planar_box
  SUBTYPE OF (planar_extent);
  placement:  axis2_placement;
END_ENTITY;

ENTITY presentation_scaled_placement 
  SUBTYPE OF (geometric_representation_item);
  placement : axis2_placement;
  scaling   : positive_ratio_measure;
END_ENTITY;


ENTITY draughting_pre_defined_colour
  SUBTYPE OF (pre_defined_colour);
WHERE
  WR1: SELF.name IN
      ['red',
       'green',
       'blue',
       'yellow',
       'magenta',
       'cyan',
       'black',
       'white'];
END_ENTITY;

ENTITY draughting_pre_defined_text_font
   SUBTYPE of (pre_defined_text_font);
WHERE
   WR1: SELF.name[1:8] = 'ISO 3098';
END_ENTITY;

END_SCHEMA; -- presentation_resource_schema
(* Genenerated from: ../../irs/10303-049.exp *)

SCHEMA process_property_representation_schema;

REFERENCE FROM support_resource_schema
    (label, 
     text);

REFERENCE FROM representation_schema
    (representation);

REFERENCE FROM process_property_schema
    (action_property, 
     resource_property);

ENTITY action_property_representation;
  name           : label;
  description    : text;
  property       : action_property;
  representation : representation;
END_ENTITY;

ENTITY resource_property_representation;
  name           : label;
  description    : text;
  property       : resource_property;
  representation : representation;
END_ENTITY;

END_SCHEMA; -- process_property_representation_schema
(* Genenerated from: ../../irs/10303-049.exp *)

SCHEMA process_property_schema;

REFERENCE FROM action_schema
    (action, 
     action_method,
     action_method_relationship,
     action_relationship,
     action_resource,
     action_resource_relationship,
     acyclic_action_relationship);

REFERENCE FROM product_property_definition_schema
    (characterized_product_definition,
     property_definition, 
     shape_definition);

REFERENCE FROM support_resource_schema
    (identifier,
     label,
     text);

TYPE characterized_action_definition = SELECT
   (action,
   action_method,
   action_method_relationship,
   action_relationship);
END_TYPE;

TYPE characterized_resource_definition = SELECT
  (action_resource,
   action_resource_relationship,
   action_resource_requirement,
   action_resource_requirement_relationship);
END_TYPE;

TYPE property_or_shape_select = SELECT
     (property_definition,
      shape_definition);
END_TYPE;

ENTITY action_property;
  name        : label;
  description : text;
  definition  : characterized_action_definition;
END_ENTITY;

ENTITY product_definition_process
  SUBTYPE OF (action);
  identification : identifier;
INVERSE 
  product_definitions : SET [1:?] OF process_product_association FOR process;
END_ENTITY;

ENTITY process_product_association;
  name            : label;
  description     : text;
  defined_product : characterized_product_definition;
  process         : product_definition_process;
END_ENTITY;

ENTITY property_process
  SUBTYPE OF (action);
  identification : identifier;
INVERSE
  properties : SET [1:?] OF process_property_association FOR process;
END_ENTITY;

ENTITY process_property_association;
  name              : label;
  description       : text;
  process           : property_process;
  property_or_shape : property_or_shape_select;
END_ENTITY;

ENTITY replacement_relationship
  SUBTYPE OF (action_relationship);
WHERE
  WR1: acyclic_action_relationship (SELF,
       [SELF\action_relationship.related_action],
       'PROCESS_PROPERTY_SCHEMA.REPLACEMENT_RELATIONSHIP');
END_ENTITY;

ENTITY resource_property;
  name        : label;
  description : text;
  resource    : characterized_resource_definition;
END_ENTITY;

ENTITY action_resource_requirement;
  name        : label;
  description : text;
  kind        : resource_requirement_type;
  operations  : SET [1:?] OF characterized_action_definition;
END_ENTITY;

ENTITY action_property_relationship;
  name                     : label;
  description              : text;
  relating_action_property : action_property;
  related_action_property  : action_property;
WHERE
  WR1: relating_action_property :<>: related_action_property;
END_ENTITY;

ENTITY requirement_for_action_resource
  SUBTYPE OF (action_resource_requirement);
  resources : SET [1:?] OF action_resource;
END_ENTITY;

ENTITY resource_property_relationship;
  name                       : label;
  description                : text;
  relating_resource_property : resource_property;
  related_resource_property  : resource_property;
WHERE
  WR1: relating_resource_property :<>: related_resource_property;
END_ENTITY;

ENTITY action_resource_requirement_relationship;
  name                                 : label;
  description                          : text;
  relating_action_resource_requirement : action_resource_requirement;
  related_action_resource_requirement  : action_resource_requirement;
WHERE
  WR1: relating_action_resource_requirement :<>: 
       related_action_resource_requirement;
END_ENTITY;

ENTITY resource_requirement_type;
  name        : label;
  description : text;
END_ENTITY;

ENTITY resource_requirement_type_relationship;
  name                      : label;
  description               : text;
  relating_requirement_type : resource_requirement_type;
  related_requirement_type  : resource_requirement_type;
WHERE
  WR1: relating_requirement_type :<>: related_requirement_type;
END_ENTITY;

END_SCHEMA; -- process_property_schema
(* Genenerated from: ../../irs/wg12n529.exp *)

SCHEMA product_concept_schema;

  REFERENCE FROM support_resource_schema
    (text, label, identifier);

  REFERENCE FROM application_context_schema
    (product_concept_context);

ENTITY concept_feature_operator;
  name        : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY concept_feature_relationship;
  name                              : label;
  description                       : OPTIONAL text;
  relating_product_concept_feature  : product_concept_feature;
  related_product_concept_feature   : product_concept_feature;
END_ENTITY;

ENTITY concept_feature_relationship_with_condition
  SUBTYPE OF (concept_feature_relationship);
  conditional_operator : concept_feature_operator;
END_ENTITY;

ENTITY conditional_concept_feature
  SUBTYPE OF (product_concept_feature);
  condition : concept_feature_relationship_with_condition;
END_ENTITY;

ENTITY product_concept;
  id                  : identifier;
  name                : label;
  description         : OPTIONAL text;
  market_context      : product_concept_context;
UNIQUE
  UR1: id;
END_ENTITY;

ENTITY product_concept_feature;
  id          : identifier;
  name        : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY product_concept_feature_association;
  name        : label;
  description : OPTIONAL text;
  concept     : product_concept;
  feature     : product_concept_feature;
END_ENTITY;

ENTITY product_concept_relationship;
  name                     : label;
  description              : OPTIONAL text;
  relating_product_concept : product_concept;
  related_product_concept  : product_concept;
END_ENTITY;

END_SCHEMA; -- product_concept_schema
(*
$Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA product_definition_schema;

REFERENCE FROM application_context_schema   -- ISO 10303-41
  (product_context,
   product_definition_context); 

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (get_id_value,
   get_name_value,
   name_attribute); 

REFERENCE FROM document_schema   -- ISO 10303-41
  (document); 

REFERENCE FROM effectivity_schema   -- ISO 10303-41
  (effectivity); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE source = ENUMERATION OF 
   (made,
    bought,
    not_known);
END_TYPE; 

ENTITY product;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  frame_of_reference : SET[1:?] OF product_context;
END_ENTITY;

ENTITY product_category;
  name : label;
  description : OPTIONAL text;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY product_category_relationship;
  name : label;
  description : OPTIONAL text;
  category : product_category;
  sub_category : product_category;
WHERE
  WR1: acyclic_product_category_relationship (SELF, [SELF.sub_category]);
END_ENTITY;

ENTITY product_definition;
  id : identifier;
  description : OPTIONAL text;
  formation : product_definition_formation;
  frame_of_reference : product_definition_context;
DERIVE
  name : label := get_name_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
END_ENTITY;

ENTITY product_definition_context_association;
  definition : product_definition;
  frame_of_reference : product_definition_context;
  role : product_definition_context_role;
END_ENTITY;

ENTITY product_definition_context_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY product_definition_effectivity
  SUBTYPE OF (effectivity);
  usage : product_definition_relationship;
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'MANAGEMENT_RESOURCES_SCHEMA.' + 'EFFECTIVITY_ASSIGNMENT.ASSIGNED_EFFECTIVITY')) = 0;
END_ENTITY;

ENTITY product_definition_formation;
  id : identifier;
  description : OPTIONAL text;
  of_product : product;
UNIQUE
  UR1: id, of_product;
END_ENTITY;

ENTITY product_definition_formation_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_product_definition_formation : product_definition_formation;
  related_product_definition_formation : product_definition_formation;
END_ENTITY;

ENTITY product_definition_formation_with_specified_source
  SUBTYPE OF (product_definition_formation);
  make_or_buy : source;
END_ENTITY;

ENTITY product_definition_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_product_definition : product_definition;
  related_product_definition : product_definition;
END_ENTITY;

ENTITY product_definition_substitute;
  description : OPTIONAL text;
  context_relationship : product_definition_relationship;
  substitute_definition : product_definition;
DERIVE
  name : label := get_name_value (SELF);
WHERE
  WR1: context_relationship.related_product_definition :<>: substitute_definition;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
END_ENTITY;

ENTITY product_definition_with_associated_documents
  SUBTYPE OF (product_definition);
  documentation_ids : SET[1:?] OF document;
END_ENTITY;

ENTITY product_related_product_category
  SUBTYPE OF (product_category);
  products : SET[1:?] OF product;
END_ENTITY;

ENTITY product_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_product : product;
  related_product : product;
END_ENTITY;

FUNCTION acyclic_product_category_relationship
 (relation : product_category_relationship; children : SET OF product_category) : BOOLEAN; 
LOCAL
      x : SET OF product_category_relationship;
      local_children : SET OF product_category;
    END_LOCAL;

    REPEAT i := 1 TO HIINDEX(children);
      IF relation.category :=: children[i] THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    x := bag_to_set(USEDIN(relation.category, 'PRODUCT_DEFINITION_SCHEMA.' + 'PRODUCT_CATEGORY_RELATIONSHIP.SUB_CATEGORY'));
    local_children := children + relation.category;
    IF SIZEOF(x) > 0 THEN
      REPEAT i := 1 TO HIINDEX(x);
        IF NOT acyclic_product_category_relationship(x[i], local_children) THEN
          RETURN (FALSE);
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_product_definition_formation_relationship
 (relation : product_definition_formation_relationship; relatives : SET[1:?] OF product_definition_formation; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF product_definition_formation_relationship;
    END_LOCAL;

    IF relation.relating_product_definition_formation IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(pdf <* bag_to_set(USEDIN(relation.relating_product_definition_formation, 'PRODUCT_DEFINITION_SCHEMA.' + 'PRODUCT_DEFINITION_FORMATION_RELATIONSHIP.' + 'RELATED_PRODUCT_DEFINITION_FORMATION')) | specific_relation IN TYPEOF(pdf));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_product_definition_formation_relationship(x[i], relatives + relation.relating_product_definition_formation, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_product_definition_relationship
 (relation : product_definition_relationship; relatives : SET[1:?] OF product_definition; specific_relation : STRING) : BOOLEAN; 
LOCAL
      x : SET OF product_definition_relationship;
    END_LOCAL;

    IF relation.relating_product_definition IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(pd <* bag_to_set(USEDIN(relation.relating_product_definition, 'PRODUCT_DEFINITION_SCHEMA.' + 'PRODUCT_DEFINITION_RELATIONSHIP.' + 'RELATED_PRODUCT_DEFINITION')) | specific_relation IN TYPEOF(pd));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_product_definition_relationship(x[i], relatives + relation.relating_product_definition, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_product_relationship
 (relation : product_relationship; relatives : SET[1:?] OF product; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF product_relationship;
    END_LOCAL;

    IF relation.relating_product IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(prod <* bag_to_set(USEDIN(relation.relating_product, 'PRODUCT_DEFINITION_SCHEMA.' + 'PRODUCT_RELATIONSHIP.' + 'RELATED_PRODUCT')) | specific_relation IN TYPEOF(prod));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_product_relationship(x[i], relatives + relation.relating_product, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION get_product_definitions
 (c_def_instance : product) : SET OF product_definition; 
  LOCAL
      pd_set : SET OF product_definition_formation := [];
      pdr_set : SET OF product_definition := [];
    END_LOCAL;

    pd_set := bag_to_set(USEDIN(c_def_instance, 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION_FORMATION.OF_PRODUCT'));
    IF (SIZEOF(pd_set) < 1) THEN
      RETURN (pdr_set);
    END_IF;
    REPEAT i := 1 TO HIINDEX(pd_set);
      pdr_set := pdr_set + bag_to_set(USEDIN(pd_set[i], 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION.FORMATION'));
    END_REPEAT;
    RETURN (pdr_set);
END_FUNCTION; 

END_SCHEMA;  -- product_definition_schema

(*
  $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA product_property_definition_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (get_id_value,
   id_attribute); 

REFERENCE FROM process_property_schema   -- ISO 10303-49
  (action_property,
   resource_property); 

REFERENCE FROM product_definition_schema   -- ISO 10303-41
  (product_definition,
   product_definition_relationship); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


TYPE characterized_definition = SELECT
   (characterized_object, 
    characterized_product_definition, 
    shape_definition);
END_TYPE; 

TYPE characterized_product_definition = SELECT
   (product_definition, 
    product_definition_relationship);
END_TYPE; 

TYPE derived_property_select = SELECT
   (action_property, 
    property_definition, 
    resource_property);
END_TYPE; 

TYPE shape_definition = SELECT
   (product_definition_shape, 
    shape_aspect, 
    shape_aspect_relationship);
END_TYPE; 

ENTITY characterized_object;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY characterized_object_relationship;
  name : label;
  description : OPTIONAL text;
  relating_object : characterized_object;
  related_object : characterized_object;
END_ENTITY;

ENTITY general_property;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY general_property_association;
  name : label;
  description : OPTIONAL text;
  base_definition : general_property;
  derived_definition : derived_property_select;
WHERE
  WR1: SIZEOF( USEDIN( derived_definition, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' + 'GENERAL_PROPERTY_ASSOCIATION.' + 'DERIVED_DEFINITION')) = 1;
  WR2: derived_definition.name = base_definition.name;
END_ENTITY;

ENTITY general_property_relationship;
  name : label;
  description : OPTIONAL text;
  relating_property : general_property;
  related_property : general_property;
END_ENTITY;

ENTITY product_definition_shape
    SUBTYPE OF (property_definition);
  UNIQUE
    UR1: SELF\property_definition.definition;
  WHERE
    WR1: SIZEOF(['PRODUCT_PROPERTY_DEFINITION_SCHEMA.CHARACTERIZED_PRODUCT_DEFINITION', 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.CHARACTERIZED_OBJECT'] * TYPEOF(SELF\property_definition.definition)) > 0;
END_ENTITY;

ENTITY property_definition;
  name : label;
  description : OPTIONAL text;
  definition : characterized_definition;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY shape_aspect;
  name : label;
  description : OPTIONAL text;
  of_shape : product_definition_shape;
  product_definitional : LOGICAL;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

ENTITY shape_aspect_relationship;
  name : label;
  description : OPTIONAL text;
  relating_shape_aspect : shape_aspect;
  related_shape_aspect : shape_aspect;
DERIVE
  id : identifier := get_id_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY;

FUNCTION acyclic_characterized_object_relationship
 (relation : characterized_object_relationship; relatives : SET[1:?] OF characterized_object; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF characterized_object_relationship;
    END_LOCAL;

    IF relation.relating_object IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(ca <* bag_to_set(USEDIN(relation.relating_object, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' + 'CHARACTERIZED_OBJECT_RELATIONSHIP.' + 'RELATED_OBJECT')) | specific_relation IN TYPEOF(ca));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_characterized_object_relationship(x[i], relatives + relation.relating_object, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_general_property_relationship
 (relation : general_property_relationship; relatives : SET[1:?] OF general_property; specific_relation : STRING) : BOOLEAN; 
  LOCAL
      x : SET OF general_property_relationship;
    END_LOCAL;

    IF relation.relating_property IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(genp <* bag_to_set(USEDIN(relation.relating_property, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' + 'GENERAL_PROPERTY_RELATIONSHIP.' + 'RELATED_PROPERTY')) | specific_relation IN TYPEOF(genp));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_general_property_relationship(x[i], relatives + relation.relating_property, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION acyclic_shape_aspect_relationship
 (relation : shape_aspect_relationship; relatives : SET[1:?] OF shape_aspect; specific_relation : STRING) : BOOLEAN; 
 LOCAL
      x : SET OF shape_aspect_relationship;
    END_LOCAL;

    IF relation.relating_shape_aspect IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(sa <* bag_to_set(USEDIN(relation.relating_shape_aspect, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' + 'SHAPE_ASPECT_RELATIONSHIP.' + 'RELATED_SHAPE_ASPECT')) | specific_relation IN TYPEOF(sa));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_shape_aspect_relationship(x[i], relatives + relation.relating_shape_aspect, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
END_FUNCTION; 

FUNCTION get_shape_aspects
 (c_def_instance : characterized_definition) : SET OF shape_aspect; 
  LOCAL
      pd_set : SET OF product_definition_shape := [];
      pdr_set : SET OF shape_aspect := [];
    END_LOCAL;

    pd_set := bag_to_set(QUERY(pd <* USEDIN(c_def_instance, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.PROPERTY_DEFINITION.DEFINITION') | 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.PRODUCT_DEFINITION_SHAPE' IN TYPEOF(pd)));
    IF (SIZEOF(pd_set) < 1) THEN
      RETURN (pdr_set);
    END_IF;
    REPEAT i := 1 TO HIINDEX(pd_set);
      pdr_set := pdr_set + bag_to_set(USEDIN(pd_set[i], 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.SHAPE_ASPECT.OF_SHAPE'));
    END_REPEAT;
    RETURN (pdr_set);
END_FUNCTION; 

END_SCHEMA;  -- product_property_definition_schema
(*
  $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA product_property_representation_schema;

REFERENCE FROM basic_attribute_schema   -- ISO 10303-41
  (description_attribute,
   get_description_value,
   get_name_value,
   name_attribute); 

REFERENCE FROM material_property_definition_schema   -- ISO 10303-45
  (property_definition_relationship); 

REFERENCE FROM product_definition_schema   -- ISO 10303-41
  (product_definition,
   product_definition_relationship); 

REFERENCE FROM product_property_definition_schema   -- ISO 10303-41
  (characterized_definition,
   general_property,
   product_definition_shape,
   property_definition,
   shape_aspect,
   shape_aspect_relationship); 

REFERENCE FROM representation_schema   -- ISO 10303-43
  (representation,
   representation_item,
   representation_relationship,
   using_representations); 

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   label,
   text); 


TYPE represented_definition = SELECT
   (general_property, 
    property_definition, 
    property_definition_relationship, 
    shape_aspect, 
    shape_aspect_relationship);
END_TYPE; 

ENTITY context_dependent_shape_representation;
  representation_relation : shape_representation_relationship;
  represented_product_relation : product_definition_shape;
DERIVE
  description : text := get_description_value (SELF);
  name : label := get_name_value (SELF);
WHERE
  WR1: 'PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION_RELATIONSHIP' IN TYPEOF (SELF.represented_product_relation.definition);
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
  WR3: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
END_ENTITY;

ENTITY item_identified_representation_usage;
  name : label;
  description : OPTIONAL text;
  definition : represented_definition;
  used_representation : representation;
  identified_item : representation_item;
WHERE
  WR1: SELF.used_representation IN using_representations(SELF.identified_item);
END_ENTITY;

ENTITY property_definition_representation;
  definition : represented_definition;
  used_representation : representation;
DERIVE
  description : text := get_description_value (SELF);
  name : label := get_name_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
END_ENTITY;

ENTITY shape_definition_representation
  SUBTYPE OF (property_definition_representation);
WHERE
  WR1: ('PRODUCT_PROPERTY_DEFINITION_SCHEMA.PRODUCT_DEFINITION_SHAPE' IN TYPEOF (SELF.definition)) OR ('PRODUCT_PROPERTY_DEFINITION_SCHEMA.SHAPE_DEFINITION' IN TYPEOF (SELF.definition.definition));
  WR2: 'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.SHAPE_REPRESENTATION' IN TYPEOF(SELF.used_representation);
END_ENTITY;

ENTITY shape_representation
  SUBTYPE OF (representation);
END_ENTITY;

ENTITY shape_representation_relationship
  SUBTYPE OF (representation_relationship);
WHERE
  WR1: 'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.SHAPE_REPRESENTATION' IN (TYPEOF(SELF\representation_relationship.rep_1) + TYPEOF(SELF\representation_relationship.rep_2));
END_ENTITY;

FUNCTION relatives_of_product_definitions
 (definition_set : SET OF product_definition; relation_subtype : STRING) : SET OF product_definition; 
FUNCTION local_relatives_of_product_definitions (definition_set : SET OF product_definition; total_definitions : SET OF product_definition; relation_subtype : STRING):SET OF product_definition;
      LOCAL
        local_def : SET OF product_definition := [];
        local_pdr : SET OF product_definition_relationship := [];
        local_total : SET OF product_definition := [];
      END_LOCAL;

      REPEAT i := 1 TO HIINDEX(definition_set);
        local_pdr := local_pdr + bag_to_set(USEDIN(definition_set[i], relation_subtype + '.RELATING_PRODUCT_DEFINITION'));
      END_REPEAT;
      REPEAT i := 1 TO HIINDEX(local_pdr);
        local_def := local_def + local_pdr[i].related_product_definition;
      END_REPEAT;
      IF (SIZEOF(local_def) - SIZEOF(total_definitions)) = 0 THEN
        RETURN (local_def);
      ELSE
        local_total := total_definitions + local_def;
        RETURN (local_def + (local_relatives_of_product_definitions(local_def - total_definitions, local_total, relation_subtype)));
      END_IF;
    END_FUNCTION;

    RETURN (local_relatives_of_product_definitions(definition_set, definition_set, relation_subtype));
END_FUNCTION; 

FUNCTION relatives_of_shape_representations
 (shape_representation_set : SET OF shape_representation) : SET OF shape_representation; 
 FUNCTION local_relatives_of_shape_representations (shape_representation_set : SET OF shape_representation; total_reps : SET OF shape_representation):SET OF shape_representation;
      LOCAL
        local_shape_rep : SET OF shape_representation := [];
        local_srr : SET OF shape_representation_relationship := [];
        local_total : SET OF shape_representation := [];
      END_LOCAL;

      REPEAT i := 1 TO HIINDEX(shape_representation_set);
        local_srr := local_srr + QUERY(rr <* bag_to_set(USEDIN(shape_representation_set[i], 'REPRESENTATION_SCHEMA.REPRESENTATION_RELATIONSHIP.REP_1')) | 'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.SHAPE_REPRESENTATION_RELATIONSHIP' IN TYPEOF(rr));
      END_REPEAT;
      REPEAT i := 1 TO HIINDEX(local_srr);
        IF 'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.' + 'SHAPE_REPRESENTATION_RELATIONSHIP' IN TYPEOF(local_srr[i]) THEN
          local_shape_rep := local_shape_rep + local_srr[i].rep_2;
        END_IF;
      END_REPEAT;
      IF SIZEOF(local_shape_rep - total_reps) = 0 THEN
        RETURN (shape_representation_set);
      ELSE
        local_total := total_reps + local_shape_rep;
        RETURN (local_shape_rep + (local_relatives_of_shape_representations(local_shape_rep - total_reps, local_total)));
      END_IF;
    END_FUNCTION;

    RETURN (local_relatives_of_shape_representations(shape_representation_set, shape_representation_set));      
END_FUNCTION; 

FUNCTION get_property_definition_representations
 (c_def_instance : characterized_definition) : SET OF property_definition_representation; 
LOCAL
      pd_set : SET OF property_definition := [];
      pdr_set : SET OF property_definition_representation := [];
    END_LOCAL;

    pd_set := bag_to_set(USEDIN(c_def_instance, 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.PROPERTY_DEFINITION.DEFINITION'));
    IF (SIZEOF(pd_set) < 1) THEN
      RETURN (pdr_set);
    END_IF;
    REPEAT i := 1 TO HIINDEX(pd_set);
      pdr_set := pdr_set + bag_to_set(USEDIN(pd_set[i], 'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'));
    END_REPEAT;
    RETURN (pdr_set);
END_FUNCTION; 

END_SCHEMA;  -- product_property_representation_schema
(* Genenerated from: ../../irs/wg12n529.exp *)

SCHEMA product_structure_schema;

  REFERENCE FROM product_definition_schema
    (product,
     product_definition,
     product_definition_relationship,
     acyclic_product_definition_relationship);

  REFERENCE FROM measure_schema
     (measure_with_unit);

  REFERENCE FROM support_resource_schema
     (identifier, label, text);

ENTITY alternate_product_relationship;
  name        : label;
  definition  : OPTIONAL text;
  alternate   : product;
  base        : product;
  basis       : text;
UNIQUE
  UR1: alternate, base;
WHERE
  WR1: alternate :<>: base;
END_ENTITY;

ENTITY assembly_component_usage
  SUPERTYPE OF (ONEOF (next_assembly_usage_occurrence,
                       specified_higher_usage_occurrence,
                       promissory_usage_occurrence))
  SUBTYPE OF (product_definition_usage);
  reference_designator : OPTIONAL identifier;
END_ENTITY;

ENTITY assembly_component_usage_substitute;
  name              : label;
  definition        : OPTIONAL text;
  base              : assembly_component_usage;
  substitute        : assembly_component_usage;
UNIQUE
  UR1: base,substitute;
WHERE
  WR1: base.relating_product_definition :=:
       substitute.relating_product_definition;
  WR2: base :<>: substitute;
END_ENTITY;

ENTITY assembly_component_usage_substitute_with_ranking
  SUBTYPE OF (assembly_component_usage_substitute);
  ranking           : INTEGER;
  ranking_rationale : text;
END_ENTITY;

ENTITY make_from_usage_option
  SUBTYPE OF (product_definition_usage);
  ranking           : INTEGER;
  ranking_rationale : text;
  quantity          : measure_with_unit;
WHERE
  WR1: (NOT ('NUMBER' IN TYPEOF(quantity.value_component)))
       OR (quantity.value_component > 0);
END_ENTITY;

ENTITY make_from_usage_option_group;
  members : SET [2:?] OF make_from_usage_option;
WHERE
  WR1: SIZEOF (QUERY (example <* members |
       example.related_product_definition
       :=: members[1].related_product_definition)) =SIZEOF(members);
END_ENTITY;

ENTITY next_assembly_usage_occurrence
  SUBTYPE OF (assembly_component_usage);
END_ENTITY;

ENTITY product_definition_occurrence_relationship;
  name             : label;
  description      : OPTIONAL text;
  occurrence       : product_definition;
  occurrence_usage : assembly_component_usage;
WHERE
  WR1: occurrence_usage.relating_product_definition :<>: 
       occurrence;
  WR2: occurrence_usage.related_product_definition :<>: 
       occurrence;
  WR3: occurrence.formation :=:
       occurrence_usage.related_product_definition.formation;
END_ENTITY;

ENTITY product_definition_usage
  SUPERTYPE OF (ONEOF (make_from_usage_option,
                       assembly_component_usage))
  SUBTYPE OF (product_definition_relationship);
UNIQUE
  UR1: SELF\product_definition_relationship.id,
       SELF\product_definition_relationship.relating_product_definition,
       SELF\product_definition_relationship.related_product_definition;
WHERE
  WR1:  acyclic_product_definition_relationship
         (SELF,
         [SELF\product_definition_relationship.related_product_definition],
         'PRODUCT_STRUCTURE_SCHEMA.PRODUCT_DEFINITION_USAGE');
END_ENTITY;

ENTITY promissory_usage_occurrence
  SUBTYPE OF (assembly_component_usage);
END_ENTITY;

ENTITY quantified_assembly_component_usage
  SUBTYPE OF (assembly_component_usage);
  quantity   : measure_with_unit;
WHERE
  WR1: (NOT ('NUMBER' IN TYPEOF(quantity.value_component)))
       OR (quantity.value_component > 0);
END_ENTITY;

ENTITY specified_higher_usage_occurrence
  SUBTYPE OF (assembly_component_usage);
  upper_usage   : assembly_component_usage;
  next_usage    : next_assembly_usage_occurrence;
UNIQUE
  UR1: upper_usage, next_usage;
WHERE
  WR1: SELF :<>: upper_usage;
  WR2: SELF\product_definition_relationship.relating_product_definition
       :=: upper_usage.relating_product_definition;
  WR3: SELF\product_definition_relationship.related_product_definition
       :=: next_usage.related_product_definition;
  WR4: (upper_usage.related_product_definition :=:
       next_usage.relating_product_definition) OR
       (SIZEOF (QUERY (pdr <* USEDIN (upper_usage.related_product_definition,
       'PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION_RELATIONSHIP.' +
       'RELATED_PRODUCT_DEFINITION') |
        pdr.relating_product_definition :=: 
        next_usage.relating_product_definition)) = 1);
  WR5: SIZEOF (['PRODUCT_STRUCTURE_SCHEMA.NEXT_ASSEMBLY_USAGE_OCCURRENCE',
       'PRODUCT_STRUCTURE_SCHEMA.SPECIFIED_HIGHER_USAGE_OCCURRENCE']
       * TYPEOF(upper_usage)) = 1;
END_ENTITY;

END_SCHEMA; -- product_structure
(*
  $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA qualifications_schema;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text); 


ENTITY qualification;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY qualification_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_qualification : qualification;
  related_qualification : qualification;
END_ENTITY;

ENTITY qualification_type;
  id : identifier;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY qualification_type_relationship;
  id : identifier;
  name : label;
  description : OPTIONAL text;
  relating_qualification_type : qualification_type;
  related_qualification_type : qualification_type;
END_ENTITY;

FUNCTION acyclic_qualification_relationship (relation : qualification_relationship; relatives : SET OF qualification; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF qualification_relationship;
    END_LOCAL;

    IF relation.relating_qualification IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(qual <* bag_to_set(USEDIN(relation.relating_qualification, 'QUALIFICATIONS_SCHEMA.' + 'QUALIFICATION_RELATIONSHIP.' + 'RELATED_QUALIFICATION')) | specific_relation IN TYPEOF(qual));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_qualification_relationship(x[i], relatives + relation.relating_qualification, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

  FUNCTION acyclic_qualification_type_relationship (relation : qualification_type_relationship; relatives : SET OF qualification_type; specific_relation : STRING):BOOLEAN;
    LOCAL
      x : SET OF qualification_type_relationship;
    END_LOCAL;

    IF relation.relating_qualification_type IN relatives THEN
      RETURN (FALSE);
    END_IF;
    x := QUERY(qultyp <* bag_to_set(USEDIN(relation.relating_qualification_type, 'QUALIFICATIONS_SCHEMA.' + 'QUALIFICATION_TYPE_RELATIONSHIP.' + 'RELATED_QUALIFICATION_TYPE')) | specific_relation IN TYPEOF(qultyp));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_qualification_type_relationship(x[i], relatives + relation.relating_qualification_type, specific_relation) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
    RETURN (TRUE);
  END_FUNCTION;

END_SCHEMA;  -- qualifications_schema

(* Genenerated from: ../../irs/wg12n257.exp *)

SCHEMA qualified_measure_schema;

REFERENCE FROM support_resource_schema
     (label,
      text);

REFERENCE FROM measure_schema
     (measure_with_unit);

REFERENCE FROM representation_schema
     (representation_item);

TYPE value_qualifier = SELECT
  (precision_qualifier,
   type_qualifier,
   uncertainty_qualifier);
END_TYPE;

ENTITY type_qualifier;
  name : label;
END_ENTITY;

ENTITY precision_qualifier;
  precision_value : INTEGER;
END_ENTITY;

ENTITY uncertainty_qualifier
  SUPERTYPE OF (ONEOF (standard_uncertainty,
                     qualitative_uncertainty));
  measure_name : label;
  description  : text;
END_ENTITY;

ENTITY qualitative_uncertainty
  SUBTYPE OF (uncertainty_qualifier);
  uncertainty_value : text;
END_ENTITY;

ENTITY standard_uncertainty
  SUPERTYPE OF (expanded_uncertainty)
  SUBTYPE OF (uncertainty_qualifier);
  uncertainty_value : REAL;
END_ENTITY;

ENTITY expanded_uncertainty
  SUBTYPE OF (standard_uncertainty);
  coverage_factor : REAL;
END_ENTITY;

ENTITY measure_representation_item
  SUBTYPE OF (representation_item, measure_with_unit);
END_ENTITY;

ENTITY descriptive_representation_item
  SUBTYPE OF (representation_item);
  description : text;
END_ENTITY;

ENTITY qualified_representation_item
  SUBTYPE OF (representation_item);
  qualifiers : SET [1:?] OF value_qualifier;
WHERE
  WR1: SIZEOF(QUERY(temp <* qualifiers |
             'QUALIFIED_MEASURE_SCHEMA.PRECISION_QUALIFIER'
             IN TYPEOF(temp))) < 2;
END_ENTITY;

ENTITY measure_qualification;
  name : label;
  description : text;
  qualified_measure : measure_with_unit;
  qualifiers : SET [1:?] OF value_qualifier;
WHERE
  WR1: SIZEOF(QUERY(temp <* qualifiers |
             'QUALIFIED_MEASURE_SCHEMA.PRECISION_QUALIFIER'
             IN TYPEOF(temp))) < 2;
END_ENTITY;

END_SCHEMA;  -- qualified_measure_schema
(* Genenerated from: ../../irs/wg12n458.exp *)

SCHEMA representation_schema;

REFERENCE FROM basic_attribute_schema
  (get_description_value,
   get_id_value);

REFERENCE FROM measure_schema
  (measure_value,
   measure_with_unit);

REFERENCE FROM support_resource_schema
  (bag_to_set,
   identifier,
   label,
   text);

TYPE compound_item_definition = SELECT
  (list_representation_item,
   set_representation_item);
END_TYPE;

TYPE founded_item_select = SELECT
  (founded_item,
   representation_item);
END_TYPE;

TYPE list_representation_item = LIST [1:?] OF representation_item;
END_TYPE;

TYPE set_representation_item = SET [1:?] OF representation_item;
END_TYPE;

TYPE transformation = SELECT
  (item_defined_transformation,
   functionally_defined_transformation);
END_TYPE;

ENTITY compound_representation_item
  SUBTYPE OF (representation_item);
  item_element : compound_item_definition;
END_ENTITY;

ENTITY definitional_representation
  SUBTYPE OF (representation);
WHERE
  WR1: 'REPRESENTATION_SCHEMA.PARAMETRIC_REPRESENTATION_CONTEXT' IN
        TYPEOF (SELF\representation.context_of_items );
END_ENTITY;

ENTITY founded_item;
END_ENTITY;

ENTITY functionally_defined_transformation;
  name        : label;
  description : OPTIONAL text;
END_ENTITY;

ENTITY global_uncertainty_assigned_context
  SUBTYPE OF (representation_context);
  uncertainty : SET [1:?] OF uncertainty_measure_with_unit;
END_ENTITY;

ENTITY item_defined_transformation;
  name             : label;
  description      : OPTIONAL text;
  transform_item_1 : representation_item;
  transform_item_2 : representation_item;
END_ENTITY;

ENTITY mapped_item
  SUBTYPE OF (representation_item);
  mapping_source : representation_map;
  mapping_target : representation_item;
WHERE
  WR1: acyclic_mapped_representation(using_representations(SELF), [SELF]);
END_ENTITY;

ENTITY parametric_representation_context
  SUBTYPE OF (representation_context);
END_ENTITY;

ENTITY representation;
  name             : label;
  items            : SET[1:?] OF representation_item;
  context_of_items : representation_context;
DERIVE
  id               : identifier := get_id_value (SELF);
  description      : text := get_description_value (SELF);
WHERE
  WR1: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +
                             'ID_ATTRIBUTE.IDENTIFIED_ITEM'))
       <= 1;
  WR2: SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +
                             'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM'))
       <= 1;
 END_ENTITY;

ENTITY representation_context;
  context_identifier : identifier;
  context_type       : text;
INVERSE
  representations_in_context : SET [1:?] OF representation
    FOR context_of_items;
END_ENTITY;

ENTITY representation_item;
  name : label;
WHERE
  WR1: SIZEOF(using_representations(SELF)) > 0;
END_ENTITY;

ENTITY representation_item_relationship;
  name : label;
  description : OPTIONAL text;
  relating_representation_item : representation_item;
  related_representation_item : representation_item;
END_ENTITY;

ENTITY representation_map;
  mapping_origin        : representation_item;
  mapped_representation : representation;
INVERSE
  map_usage : SET[1:?] OF mapped_item FOR mapping_source;
WHERE
  WR1: item_in_context(SELF.mapping_origin,
       SELF.mapped_representation.context_of_items);
END_ENTITY;

ENTITY representation_relationship;
  name        : label;
  description : OPTIONAL text;
  rep_1       : representation;
  rep_2       : representation;
END_ENTITY;

ENTITY representation_relationship_with_transformation
  SUBTYPE OF (representation_relationship);
  transformation_operator : transformation;
WHERE
  WR1:
   SELF\representation_relationship.rep_1.context_of_items
   :<>: SELF\representation_relationship.rep_2.context_of_items;
END_ENTITY;

ENTITY uncertainty_assigned_representation
  SUBTYPE OF (representation);
  uncertainty : SET [1:?] OF uncertainty_measure_with_unit;
END_ENTITY;

ENTITY uncertainty_measure_with_unit
  SUBTYPE OF (measure_with_unit);
  name        : label;
  description : OPTIONAL text;
WHERE
  WR1: valid_measure_value (SELF\measure_with_unit.value_component);
END_ENTITY;

ENTITY value_representation_item
SUBTYPE OF (representation_item);
  value_component : measure_value;
WHERE
  WR1: SIZEOF (QUERY (rep <* using_representations (SELF) |
       NOT ('MEASURE_SCHEMA.GLOBAL_UNIT_ASSIGNED_CONTEXT'
       IN TYPEOF (rep.context_of_items)
       ))) = 0;
END_ENTITY;

FUNCTION acyclic_mapped_representation
  (parent_set   : SET OF representation;
   children_set : SET OF representation_item) : BOOLEAN;
  LOCAL
    x,y : SET OF representation_item;
  END_LOCAL;
  -- Determine the subset of children_set that are mapped_items
  x := QUERY(z <* children_set | 'REPRESENTATION_SCHEMA.MAPPED_ITEM'
       IN TYPEOF(z));
  -- Determine that the subset has elements
  IF SIZEOF(x) > 0 THEN
    -- Check each element of the set
    REPEAT i := 1 TO HIINDEX(x);
      -- If the selected element maps a representation in the
      -- parent_set, then return false
      IF x[i]\mapped_item.mapping_source.mapped_representation
        IN parent_set THEN
        RETURN (FALSE);
      END_IF;
      -- Recursive check of the items of mapped_representation
      IF NOT acyclic_mapped_representation
        (parent_set +
        x[i]\mapped_item.mapping_source.mapped_representation,
        x[i]\mapped_item.mapping_source.mapped_representation.items) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;
  -- Determine the subset of children_set that are not
  -- mapped_items
  x := children_set - x;
  -- Determine that the subset has elements
  IF SIZEOF(x) > 0 THEN
    -- For each element of the set:
    REPEAT i := 1 TO HIINDEX(x);
      -- Determine the set of representation_items referenced
      y := QUERY(z <* bag_to_set( USEDIN(x[i], '')) |
           'REPRESENTATION_SCHEMA.REPRESENTATION_ITEM' IN TYPEOF(z));
      -- Recursively check for an offending mapped_item
      -- Return false for any errors encountered
      IF NOT acyclic_mapped_representation(parent_set, y) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;
  -- Return true when all elements are checked and
  -- no error conditions found
  RETURN (TRUE);
END_FUNCTION;

FUNCTION item_in_context
  (item  : representation_item;
   cntxt : representation_context) : BOOLEAN;
  LOCAL
    y : BAG OF representation_item;
  END_LOCAL;
  -- If there is one or more representation using both the item
  -- and cntxt return true.
  IF SIZEOF(USEDIN(item,'REPRESENTATION_SCHEMA.REPRESENTATION.ITEMS')
    * cntxt.representations_in_context) > 0 THEN
    RETURN (TRUE);
    -- Determine the bag of representation_items that reference
    -- item
    ELSE y := QUERY(z <* USEDIN (item , '') |
           'REPRESENTATION_SCHEMA.REPRESENTATION_ITEM' IN TYPEOF(z));
      -- Ensure that the bag is not empty
      IF SIZEOF(y) > 0 THEN
      -- For each element in the bag
      REPEAT i := 1 TO HIINDEX(y);
        -- Check to see it is an item in the input cntxt.
        IF item_in_context(y[i], cntxt) THEN
          RETURN (TRUE);
        END_IF;
      END_REPEAT;
    END_IF;
  END_IF;
  -- Return false when all possible branches have been checked
  -- with no success.
  RETURN (FALSE);
END_FUNCTION;

FUNCTION using_items (item : founded_item_select;
                      checked_items: SET OF founded_item_select)
                    : SET OF founded_item_select;
  LOCAL
    new_check_items    : SET OF founded_item_select;
    result_items       : SET OF founded_item_select;
    next_items         : SET OF founded_item_select;
  END_LOCAL;
  result_items := [];
  new_check_items := checked_items + item;
  -- Find the set of representation_items or founded_items
  -- in which item is used directly.
  next_items := QUERY(z <* bag_to_set( USEDIN(item , '')) |
    ('REPRESENTATION_SCHEMA.REPRESENTATION_ITEM' IN TYPEOF(z)) OR
    ('REPRESENTATION_SCHEMA.FOUNDED_ITEM'        IN TYPEOF(z)));
  -- If the set of next_items is not empty;
  IF SIZEOF(next_items) > 0 THEN
    -- For each element in the set, find the using_items recursively
    REPEAT i := 1 TO HIINDEX(next_items);
      -- Check for loop in data model, i.e. one of the next_items
      -- occurred earlier in the set of check_items;
      IF NOT(next_items[i] IN new_check_items) THEN
        result_items := result_items + next_items[i] +
                        using_items(next_items[i],new_check_items);
      END_IF;
    END_REPEAT;
  END_IF;
  -- return the set of representation_items or founded_items
  -- in which the input item is used directly and indirectly.
  RETURN (result_items);
END_FUNCTION;

FUNCTION using_representations (item : founded_item_select)
  : SET OF representation;
  LOCAL
    results            : SET OF representation;
    result_bag         : BAG OF representation;
    intermediate_items : SET OF founded_item_select;
  END_LOCAL;
  -- Find the representations in which the item is used and add to the
  -- results set.
  results := [];
  result_bag :=
USEDIN(item,'REPRESENTATION_SCHEMA.REPRESENTATION.ITEMS');
  IF SIZEOF(result_bag) > 0 THEN
    REPEAT i := 1 TO HIINDEX(result_bag);
      results := results + result_bag[i];
    END_REPEAT;
  END_IF;
  -- Find all representation_items or founded_items
  -- by which item is referenced directly or indirectly.
  intermediate_items := using_items(item,[]);
  -- If the set of intermediate items is not empty;
  IF SIZEOF(intermediate_items) > 0 THEN
    -- For each element in the set, add the
    -- representations of that element.
    REPEAT i := 1 TO HIINDEX(intermediate_items);
      result_bag := USEDIN(intermediate_items[i],
                    'REPRESENTATION_SCHEMA.REPRESENTATION.ITEMS');
      IF SIZEOF(result_bag) > 0 THEN
        REPEAT j := 1 TO HIINDEX(result_bag);
          results := results + result_bag[j];
        END_REPEAT;
      END_IF;
    END_REPEAT;
  END_IF;
  -- Return the set of representation in which the input item is
  -- used directly and indirectly (through intervening
  -- representation_items or founded items).
  RETURN (results);
END_FUNCTION;

FUNCTION valid_measure_value
  (m : measure_value) : BOOLEAN;
  IF ('REAL' IN TYPEOF (m)) THEN
  RETURN (m > 0.0);
  ELSE
    IF ('INTEGER' IN TYPEOF (m)) THEN
    RETURN (m > 0);
    ELSE
      RETURN (TRUE);
    END_IF;
  END_IF;
END_FUNCTION;

END_SCHEMA; -- representation_schema
(*
  $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA security_classification_schema;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (label,
   text); 


ENTITY security_classification;
  name : label;
  purpose : text;
  security_level : security_classification_level;
END_ENTITY;

ENTITY security_classification_level;
  name : label;
END_ENTITY;

END_SCHEMA;  -- security_classification_schema
(* Genenerated from: ../../irs/wg12n548.exp *)

SCHEMA shape_aspect_definition_schema;
REFERENCE FROM product_property_definition_schema
    (shape_aspect,
     shape_aspect_relationship);
REFERENCE FROM measure_schema
    (measure_with_unit);
REFERENCE FROM support_resource_schema
    (bag_to_set, label, identifier);

TYPE limit_condition = ENUMERATION OF
  (maximum_material_condition,
   least_material_condition,
   regardless_of_feature_size);
END_TYPE;

ENTITY datum
  SUBTYPE OF (shape_aspect);
  identification               :identifier;
INVERSE
  established_by_relationships : SET [1:?] OF shape_aspect_relationship
                                 FOR related_shape_aspect;
WHERE
  WR1: SIZEOF (QUERY (x<*SELF\datum.established_by_relationships |
       SIZEOF (TYPEOF(x\shape_aspect_relationship.relating_shape_aspect)* 
       ['SHAPE_ASPECT_DEFINITION_SCHEMA.DATUM_FEATURE', 
       'SHAPE_ASPECT_DEFINITION_SCHEMA.DATUM_TARGET']) <> 1))=0;
END_ENTITY;

ENTITY datum_feature
   SUBTYPE OF (shape_aspect);
INVERSE 
   feature_basis_relationship : shape_aspect_relationship
                              FOR relating_shape_aspect;
WHERE
   WR1: SIZEOF (QUERY (sar<* bag_to_set (USEDIN (SELF,
     'PRODUCT_PROPERTY_DEFINITION_SCHEMA.SHAPE_ASPECT_RELATIONSHIP.'+
       'RELATING_SHAPE_ASPECT'))
       | NOT ('SHAPE_ASPECT_DEFINITION_SCHEMA.DATUM' IN TYPEOF
       (sar\shape_aspect_relationship.related_shape_aspect))))=0;
  WR2: SELF\shape_aspect.product_definitional = TRUE;
END_ENTITY;

ENTITY datum_target
  SUBTYPE OF (shape_aspect);
  target_id             : identifier; 
INVERSE
  target_basis_relationship : shape_aspect_relationship FOR
                              relating_shape_aspect;
WHERE
   WR1: SIZEOF (QUERY (sar<* bag_to_set (USEDIN (SELF,
     'PRODUCT_PROPERTY_DEFINITION_SCHEMA.SHAPE_ASPECT_RELATIONSHIP.' +
       'RELATING_SHAPE_ASPECT'))
      | NOT ('SHAPE_ASPECT_DEFINITION_SCHEMA.DATUM' IN TYPEOF 
      (sar\shape_aspect_relationship.related_shape_aspect))))=0;
   WR2: SELF\shape_aspect.product_definitional = TRUE;
END_ENTITY;

ENTITY datum_reference;
  precedence       : INTEGER;
  referenced_datum : datum;
WHERE
  WR1: precedence > 0;
END_ENTITY;

ENTITY referenced_modified_datum
  SUBTYPE OF (datum_reference);
  modifier : limit_condition;
END_ENTITY;

ENTITY composite_shape_aspect
  SUBTYPE OF (shape_aspect);
INVERSE
  component_relationships : SET [2:?] OF shape_aspect_relationship
                            FOR relating_shape_aspect;
END_ENTITY;

ENTITY derived_shape_aspect
  SUPERTYPE OF (ONEOF (apex,
                       centre_of_symmetry,
                       geometric_alignment,
                       geometric_intersection,
                       parallel_offset,
                       perpendicular_to,
                       extension,
                       tangent))
  SUBTYPE OF (shape_aspect);
INVERSE
  deriving_relationships : SET [1:?] OF
          shape_aspect_relationship FOR relating_shape_aspect;
WHERE
   WR1: SIZEOF (QUERY (dr <*
          SELF\derived_shape_aspect.deriving_relationships |
          NOT ('SHAPE_ASPECT_DEFINITION_SCHEMA.' +
               'SHAPE_ASPECT_DERIVING_RELATIONSHIP'
          IN TYPEOF (dr)))) = 0;
END_ENTITY;

ENTITY apex
  SUBTYPE OF (derived_shape_aspect);
END_ENTITY;

ENTITY centre_of_symmetry 
   SUBTYPE OF (derived_shape_aspect);
WHERE
    WR1: SIZEOF
        (QUERY(sadr<*SELF\derived_shape_aspect.deriving_relationships|
    NOT('SHAPE_ASPECT_DEFINITION_SCHEMA.SYMMETRIC_SHAPE_ASPECT'
     IN TYPEOF
     (sadr\shape_aspect_relationship.related_shape_aspect))))=0; 
END_ENTITY;

ENTITY geometric_alignment
  SUBTYPE OF (derived_shape_aspect);
WHERE
  WR1: SIZEOF (SELF\derived_shape_aspect.deriving_relationships)> 1;
END_ENTITY;

ENTITY geometric_intersection
  SUBTYPE OF (derived_shape_aspect);
WHERE
  WR1: SIZEOF (SELF\derived_shape_aspect.deriving_relationships)> 1;
END_ENTITY;

ENTITY parallel_offset
  SUBTYPE OF (derived_shape_aspect);
  offset               : measure_with_unit;
WHERE
  WR1: SIZEOF (SELF\derived_shape_aspect.deriving_relationships)= 1;
END_ENTITY;

ENTITY perpendicular_to
  SUBTYPE OF (derived_shape_aspect);
WHERE
  WR1: SIZEOF (SELF\derived_shape_aspect.deriving_relationships)= 1;
END_ENTITY;

ENTITY extension
  SUBTYPE OF (derived_shape_aspect);
WHERE
  WR1: SIZEOF (SELF\derived_shape_aspect.deriving_relationships)= 1;
END_ENTITY;

ENTITY tangent
  SUBTYPE OF (derived_shape_aspect);
WHERE
  WR1: SIZEOF (SELF\derived_shape_aspect.deriving_relationships)= 1;
END_ENTITY;

ENTITY shape_aspect_deriving_relationship
       SUBTYPE OF (shape_aspect_relationship);
     WHERE
       WR1: 'SHAPE_ASPECT_DEFINITION_SCHEMA.DERIVED_SHAPE_ASPECT' IN
TYPEOF
            (SELF\SHAPE_ASPECT_RELATIONSHIP.RELATING_SHAPE_ASPECT);
     END_ENTITY;

ENTITY symmetric_shape_aspect
  SUBTYPE OF (shape_aspect);
INVERSE
  basis_relationships : SET [1:?] OF shape_aspect_relationship
                        FOR relating_shape_aspect;
WHERE
  WR1: SIZEOF (QUERY (x<*SELF\symmetric_shape_aspect.basis_relationships |
       'SHAPE_ASPECT_DEFINITION_SCHEMA.CENTRE_OF_SYMMETRY' IN TYPEOF 
       (x\shape_aspect_relationship.related_shape_aspect)))>=1;
END_ENTITY;

END_SCHEMA;  --  shape_aspect_definition_schema
(* Genenerated from: ../../irs/wg12n548.exp *)

SCHEMA shape_dimension_schema;
REFERENCE FROM measure_schema
   (measure_with_unit);
REFERENCE FROM representation_schema
    (representation);
REFERENCE FROM qualified_measure_schema
    (measure_representation_item, 
     qualified_representation_item);
REFERENCE FROM product_property_representation_schema
    (shape_representation);
REFERENCE FROM product_property_definition_schema
    (shape_aspect,
     shape_aspect_relationship);
REFERENCE FROM support_resource_schema
    (label,
     text);

TYPE angle_relator = ENUMERATION OF
  (equal,
   large,
   small);
END_TYPE;

TYPE dimensional_characteristic = SELECT (dimensional_location,
                                          dimensional_size);
END_TYPE;

ENTITY angular_location
  SUBTYPE OF (dimensional_location);
  angle_selection : angle_relator;
END_ENTITY;

ENTITY angular_size
  SUBTYPE OF (dimensional_size);
  angle_selection : angle_relator;
END_ENTITY;

ENTITY dimensional_characteristic_representation;
  dimension      : dimensional_characteristic; 
  representation : shape_dimension_representation;
END_ENTITY;

ENTITY dimensional_location
  SUPERTYPE OF (ONEOF (angular_location,
                       dimensional_location_with_path))
  SUBTYPE OF (shape_aspect_relationship);
END_ENTITY;

ENTITY dimensional_location_with_path
  SUBTYPE OF (dimensional_location);
  path : shape_aspect;
END_ENTITY;

ENTITY dimensional_size
  SUPERTYPE OF (ONEOF (angular_size,
                       dimensional_size_with_path));
  applies_to : shape_aspect;
  name       : label;
WHERE
  WR1: applies_to.product_definitional = TRUE;
END_ENTITY;

ENTITY dimensional_size_with_path
  SUBTYPE OF (dimensional_size);
  path : shape_aspect;
END_ENTITY;

ENTITY shape_dimension_representation
                SUBTYPE OF (shape_representation);
  WHERE
   WR1: SIZEOF (QUERY (temp <* SELF\representation.items | 
    NOT ('QUALIFIED_MEASURE_SCHEMA.MEASURE_REPRESENTATION_ITEM' 
        IN TYPEOF (temp)))) = 0;
   WR2: SIZEOF (SELF\representation.items) <= 3;
   WR3: SIZEOF (QUERY (pos_mri <* QUERY (real_mri <*
        SELF\representation.items | 'REAL' IN TYPEOF
        (real_mri\measure_with_unit.value_component) ) |        
     NOT  (pos_mri\measure_with_unit.value_component > 0.0 ))) = 0;
END_ENTITY;

END_SCHEMA;   --  shape_dimension_schema
(* Genenerated from: ../../irs/wg12n548.exp *)

SCHEMA shape_tolerance_schema;
REFERENCE FROM product_property_definition_schema
    (shape_aspect,
     shape_aspect_relationship);
REFERENCE FROM measure_schema
   (derive_dimensional_exponents,
    dimensional_exponents,
    measure_with_unit,
    measure_value);
REFERENCE FROM representation_schema
    (representation);
REFERENCE FROM support_resource_schema
    (label,
     text);
REFERENCE FROM shape_aspect_definition_schema
    (datum_reference,
     limit_condition);
REFERENCE FROM shape_dimension_schema
    (dimensional_characteristic,
     dimensional_location);

TYPE tolerance_method_definition = SELECT
  (tolerance_value,
   limits_and_fits);
END_TYPE;

TYPE  shape_tolerance_select = SELECT
     (geometric_tolerance,
      plus_minus_tolerance);
END_TYPE;

ENTITY dimension_related_tolerance_zone_element;
  related_dimension : dimensional_location; 
  related_element   : tolerance_zone_definition;
END_ENTITY;

ENTITY geometric_tolerance;
  name                    : label;
  description             : text;
  magnitude               : measure_with_unit; 
  toleranced_shape_aspect : shape_aspect; 
WHERE
  WR1: ('NUMBER' IN TYPEOF
       (magnitude\measure_with_unit.value_component)) AND
       (magnitude\measure_with_unit.value_component >= 0.0);
END_ENTITY;

ENTITY geometric_tolerance_relationship;
                                   name                         :label;
                                   description                  :text;
                                   relating_geometric_tolerance : geometric_tolerance; 
                                   related_geometric_tolerance  : geometric_tolerance; 
END_ENTITY;

ENTITY geometric_tolerance_with_datum_reference
   SUBTYPE OF (geometric_tolerance);
   datum_system : SET [1:?] OF  datum_reference;
END_ENTITY;

ENTITY geometric_tolerance_with_defined_unit
  SUBTYPE OF (geometric_tolerance);
  unit_size : measure_with_unit;
WHERE
  WR1: ('NUMBER' IN TYPEOF
       (unit_size\measure_with_unit.value_component)) AND
       (unit_size\measure_with_unit.value_component > 0.0);
END_ENTITY;

ENTITY modified_geometric_tolerance
  SUBTYPE OF (geometric_tolerance);
  modifier : limit_condition;
END_ENTITY;

ENTITY projected_zone_definition 
  SUBTYPE OF (tolerance_zone_definition);  
  projection_end   : shape_aspect; 
  projected_length : measure_with_unit;
WHERE 
  WR1: ('NUMBER' IN TYPEOF
       (projected_length\measure_with_unit.value_component)) AND
       (projected_length\measure_with_unit.value_component > 0.0);
  WR2: (derive_dimensional_exponents
       (projected_length\measure_with_unit.unit_component)=
        dimensional_exponents(1,0,0,0,0,0,0));
END_ENTITY;

ENTITY runout_zone_definition
  SUBTYPE OF (tolerance_zone_definition); 
  orientation  : runout_zone_orientation;
END_ENTITY;

ENTITY runout_zone_orientation;
  angle : measure_with_unit;
END_ENTITY;

ENTITY runout_zone_orientation_reference_direction
  SUBTYPE OF (runout_zone_orientation); 
  orientation_defining_relationship: shape_aspect_relationship;
END_ENTITY;

ENTITY statistical_distribution_for_tolerance
  SUBTYPE OF (representation);
WHERE
  WR1: SIZEOF (QUERY (item <* SELF\representation.items |
       NOT ('QUALIFIED_MEASURE_SCHEMA.MEASURE_REPRESENTATION_ITEM' 
       IN TYPEOF (item)))) = 0;
END_ENTITY;

ENTITY tolerance_with_statistical_distribution;
   associated_tolerance : shape_tolerance_select;
   tolerance_allocation : statistical_distribution_for_tolerance;
END_ENTITY;

ENTITY tolerance_zone
  SUBTYPE OF (shape_aspect);
  defining_tolerance : SET [1:?] OF geometric_tolerance; 
  form               : tolerance_zone_form;
END_ENTITY;

ENTITY tolerance_zone_form;
  name : label;
END_ENTITY;

ENTITY tolerance_zone_definition
  SUPERTYPE OF (ONEOF (projected_zone_definition,
                       runout_zone_definition));
  zone : tolerance_zone;
  boundaries: SET [1:?] OF shape_aspect;
END_ENTITY;

ENTITY limits_and_fits;
  form_variance   : label;
  zone_variance   : label;
  grade           : label;
  source          : text;
END_ENTITY;

ENTITY  plus_minus_tolerance;
  range                : tolerance_method_definition; 
  toleranced_dimension : dimensional_characteristic;
UNIQUE
  UR1: toleranced_dimension;
END_ENTITY;

ENTITY tolerance_value; 
   lower_bound : measure_with_unit; 
   upper_bound : measure_with_unit;
WHERE 
   WR1: upper_bound\measure_with_unit.value_component >
        lower_bound\measure_with_unit.value_component;  
   WR2: upper_bound\measure_with_unit.unit_component =
        lower_bound\measure_with_unit.unit_component;
END_ENTITY;

END_SCHEMA;   -- End of shape_tolerance_schema
(*
  $Id: longform_mim.exp,v 1.6 2007/01/08 16:34:58 liutkus Exp $
  ISO TC184/SC4/WG12 N2887 - ISO/IS 10303-41 Fundamentals of product description and support - EXPRESS
*) 


SCHEMA support_resource_schema;


TYPE identifier = STRING;
END_TYPE; 

TYPE label = STRING;
END_TYPE; 

TYPE text = STRING;
END_TYPE; 

FUNCTION bag_to_set (the_bag : BAG OF GENERIC:intype):SET OF GENERIC:intype;
    LOCAL
      the_set : SET OF GENERIC:intype := [];
    END_LOCAL;

    IF SIZEOF(the_bag) > 0 THEN
      REPEAT i := 1 TO HIINDEX(the_bag);
        the_set := the_set + the_bag[i];
      END_REPEAT;
    END_IF;
    RETURN (the_set);
END_FUNCTION; 

FUNCTION type_check_function
 (the_type : GENERIC; sub_names : SET OF STRING; criterion : INTEGER) : LOGICAL; 
IF (( NOT EXISTS ( the_type ) ) OR (NOT ({0<= criterion <=3})) OR
(SIZEOF ( sub_names ) = 0 ) ) THEN RETURN (UNKNOWN);
ELSE
  CASE criterion OF
       0: RETURN (SIZEOF ( sub_names * TYPEOF (the_type) ) > 0);
       1: RETURN (SIZEOF ( sub_names * TYPEOF (the_type) ) = 0);
       2: RETURN (SIZEOF ( sub_names * TYPEOF (the_type) ) = 1);
       3: RETURN (SIZEOF ( sub_names * TYPEOF (the_type) ) <= 1);
  END_CASE;
END_IF;
END_FUNCTION; 

END_SCHEMA;  -- support_resource_schema
 (* Document WG12 N1046r date 2003-04-29. EXPRESS listing corresponding to part
 42  edition IS WG12 N536, as modified by TC1 WG12 N608 and
 by revision 1 (edition 3)  WG12 N1045 *)

 SCHEMA topology_schema;
   REFERENCE FROM geometry_schema;
   REFERENCE FROM representation_schema(representation_item);

 CONSTANT
    dummy_tri : topological_representation_item := representation_item('')||
                   topological_representation_item();        
 END_CONSTANT;

 TYPE list_of_reversible_topology_item =
                               LIST [0:?] of reversible_topology_item;
 END_TYPE;

 TYPE reversible_topology = SELECT
           (reversible_topology_item,
            list_of_reversible_topology_item,
            set_of_reversible_topology_item);
 END_TYPE;

 TYPE reversible_topology_item = SELECT
   (edge, 
    path, 
    face, 
    face_bound,
    closed_shell, 
    open_shell);
 END_TYPE;

  TYPE set_of_reversible_topology_item =
                       SET [0:?] of reversible_topology_item;
  END_TYPE;

 TYPE shell = SELECT
   (vertex_shell,
    wire_shell,
    open_shell,
    closed_shell);
 END_TYPE;

 ENTITY closed_shell
   SUBTYPE OF (connected_face_set);
 END_ENTITY;

 ENTITY connected_edge_set
   SUBTYPE OF (topological_representation_item);
   ces_edges : SET [1:?] OF edge;
 END_ENTITY;

 ENTITY connected_face_set
   SUPERTYPE OF (ONEOF (closed_shell, open_shell))
   SUBTYPE OF (topological_representation_item);
   cfs_faces : SET [1:?] OF face;
 END_ENTITY;

 ENTITY connected_face_sub_set
   SUBTYPE OF (connected_face_set);
   parent_face_set   :  connected_face_set;
 END_ENTITY;

 ENTITY edge
   SUPERTYPE OF(ONEOF(edge_curve, oriented_edge, subedge))
   SUBTYPE OF (topological_representation_item);
   edge_start : vertex;
   edge_end   : vertex;
 END_ENTITY;

 ENTITY edge_curve
   SUBTYPE OF(edge,geometric_representation_item);
   edge_geometry : curve;
   same_sense    : BOOLEAN;
 END_ENTITY;

 ENTITY edge_loop
   SUBTYPE OF (loop,path);
 DERIVE
   ne : INTEGER := SIZEOF(SELF\path.edge_list);
 WHERE
   WR1: (SELF\path.edge_list[1].edge_start) :=:
        (SELF\path.edge_list[ne].edge_end);
 END_ENTITY;

 ENTITY face
   SUPERTYPE OF(ONEOF(face_surface, subface, oriented_face))
   SUBTYPE OF (topological_representation_item);
   bounds : SET[1:?] OF face_bound;
 WHERE
   WR1: NOT (mixed_loop_type_set(list_to_set(list_face_loops(SELF))));
   WR2: SIZEOF(QUERY(temp <* bounds | 'TOPOLOGY_SCHEMA.FACE_OUTER_BOUND' IN
                                               TYPEOF(temp))) <= 1;
 END_ENTITY;

 ENTITY face_bound
   SUBTYPE OF(topological_representation_item);
   bound       :  loop;
   orientation :  BOOLEAN;
 END_ENTITY;

    ENTITY face_outer_bound
    SUBTYPE OF (face_bound);
    END_ENTITY;

 ENTITY face_surface
   SUBTYPE OF(face,geometric_representation_item);
   face_geometry :  surface;
   same_sense    :  BOOLEAN;
 WHERE
   WR1: NOT ('GEOMETRY_SCHEMA.ORIENTED_SURFACE' IN TYPEOF(face_geometry));
 END_ENTITY;

 ENTITY loop
   SUPERTYPE OF (ONEOF(vertex_loop, edge_loop, poly_loop))
   SUBTYPE OF (topological_representation_item);
 END_ENTITY;

 ENTITY open_path
   SUBTYPE OF (path);
 DERIVE
   ne : INTEGER := SIZEOF(SELF\path.edge_list);
 WHERE
   WR1: (SELF\path.edge_list[1].edge_element.edge_start) :<>:
                       (SELF\path.edge_list[ne].edge_element.edge_end);
 END_ENTITY;

 ENTITY open_shell
   SUBTYPE OF (connected_face_set);
 END_ENTITY;

 ENTITY oriented_closed_shell
   SUBTYPE OF (closed_shell);
   closed_shell_element : closed_shell;
   orientation          : BOOLEAN;
 DERIVE
   SELF\connected_face_set.cfs_faces : SET [1:?] OF face
                                := conditional_reverse(SELF.orientation,
                                   SELF.closed_shell_element.cfs_faces);
 WHERE
   WR1: NOT ('TOPOLOGY_SCHEMA.ORIENTED_CLOSED_SHELL' 
                IN TYPEOF (SELF.closed_shell_element));
 END_ENTITY;

 ENTITY oriented_edge
   SUBTYPE OF (edge);
   edge_element : edge;
   orientation  : BOOLEAN;
 DERIVE
   SELF\edge.edge_start : vertex := boolean_choose (SELF.orientation,
                                            SELF.edge_element.edge_start,
                                            SELF.edge_element.edge_end);
   SELF\edge.edge_end   : vertex := boolean_choose (SELF.orientation,
                                            SELF.edge_element.edge_end,
                                            SELF.edge_element.edge_start);
 WHERE
   WR1: NOT ('TOPOLOGY_SCHEMA.ORIENTED_EDGE' IN TYPEOF (SELF.edge_element));
 END_ENTITY;

 ENTITY oriented_face
   SUBTYPE OF (face);
   face_element : face;
   orientation  : BOOLEAN;
 DERIVE
   SELF\face.bounds : SET[1:?] OF face_bound
          := conditional_reverse(SELF.orientation,SELF.face_element.bounds);
 WHERE
   WR1: NOT ('TOPOLOGY_SCHEMA.ORIENTED_FACE' IN TYPEOF (SELF.face_element));
 END_ENTITY;

 ENTITY oriented_open_shell
   SUBTYPE OF (open_shell);
   open_shell_element : open_shell;
   orientation        : BOOLEAN;
 DERIVE
   SELF\connected_face_set.cfs_faces : SET [1:?] OF face
                                := conditional_reverse(SELF.orientation,
                                      SELF.open_shell_element.cfs_faces);
 WHERE
   WR1: NOT ('TOPOLOGY_SCHEMA.ORIENTED_OPEN_SHELL' 
                IN TYPEOF (SELF.open_shell_element));
 END_ENTITY;

 ENTITY oriented_path
   SUBTYPE OF (path);
   path_element : path;
   orientation  : BOOLEAN;
 DERIVE
   SELF\path.edge_list : LIST [1:?] OF UNIQUE oriented_edge
                           := conditional_reverse(SELF.orientation,
                                         SELF.path_element.edge_list);
 WHERE
   WR1: NOT ('TOPOLOGY_SCHEMA.ORIENTED_PATH' IN TYPEOF (SELF.path_element));
 END_ENTITY;

 ENTITY path
   SUPERTYPE OF (ONEOF(open_path, edge_loop, oriented_path))
   SUBTYPE OF (topological_representation_item);
   edge_list  : LIST [1:?] OF UNIQUE oriented_edge;
 WHERE
   WR1: path_head_to_tail(SELF);
 END_ENTITY;

 ENTITY poly_loop
   SUBTYPE OF (loop,geometric_representation_item);
   polygon : LIST [3:?] OF UNIQUE cartesian_point;
 END_ENTITY;

 ENTITY seam_edge
   SUBTYPE OF (oriented_edge);
     pcurve_reference : pcurve ; 
 WHERE
    WR1 : ( 'TOPOLOGY_SCHEMA.EDGE_CURVE' IN TYPEOF (edge_element) )  AND
                ('TOPOLOGY_SCHEMA.SEAM_CURVE' IN TYPEOF
                       (edge_element\edge_curve.edge_geometry)) ;
   WR2 :  pcurve_reference IN edge_element\edge_curve.edge_geometry\
                                 surface_curve.associated_geometry ;
 END_ENTITY;

 ENTITY subedge
   SUBTYPE OF (edge);
   parent_edge   :  edge;
 END_ENTITY;

 ENTITY subface
   SUBTYPE OF (face);
   parent_face   :  face;
 WHERE
   WR1: NOT (mixed_loop_type_set(list_to_set(list_face_loops(SELF)) +
              list_to_set(list_face_loops(parent_face))));
 END_ENTITY;

 ENTITY topological_representation_item
   SUPERTYPE OF (ONEOF(vertex, edge, face_bound, face, vertex_shell,
                   wire_shell, connected_edge_set, connected_face_set,
                    (loop ANDOR path)))
   SUBTYPE OF (representation_item);
 END_ENTITY;

 ENTITY vertex
   SUBTYPE OF (topological_representation_item);
 END_ENTITY;

 ENTITY vertex_point
 SUBTYPE OF(vertex,geometric_representation_item);
   vertex_geometry : point;
 END_ENTITY;

 ENTITY vertex_loop
   SUBTYPE OF (loop);
   loop_vertex : vertex;
 END_ENTITY;

 ENTITY vertex_shell
   SUBTYPE OF (topological_representation_item);
   vertex_shell_extent : vertex_loop;
 END_ENTITY;

 ENTITY wire_shell
   SUBTYPE OF (topological_representation_item);
   wire_shell_extent : SET [1:?] OF loop;
 WHERE
   WR1: NOT mixed_loop_type_set(wire_shell_extent);
 END_ENTITY;

   FUNCTION boolean_choose (b : boolean;
            choice1, choice2 : generic : item)  : generic : item;
 
     IF b THEN
       RETURN (choice1);
     ELSE
       RETURN (choice2);
     END_IF;
   END_FUNCTION;

 FUNCTION closed_shell_reversed (a_shell : closed_shell) :
                                       oriented_closed_shell;
  LOCAL
    the_reverse : oriented_closed_shell;
  END_LOCAL;
   IF ('TOPOLOGY_SCHEMA.ORIENTED_CLOSED_SHELL' IN TYPEOF (a_shell) ) THEN
      the_reverse := dummy_tri ||
                    connected_face_set (
                       a_shell\connected_face_set.cfs_faces) ||
                    closed_shell () || oriented_closed_shell(
                     a_shell\oriented_closed_shell.closed_shell_element,
                       NOT(a_shell\oriented_closed_shell.orientation));
   ELSE
      the_reverse := dummy_tri ||
               connected_face_set (
                 a_shell\connected_face_set.cfs_faces) ||
               closed_shell () || oriented_closed_shell (a_shell, FALSE);
   END_IF;
   RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION conditional_reverse (p       : BOOLEAN;
                               an_item : reversible_topology)
                                       : reversible_topology;
   IF p THEN
     RETURN (an_item);
   ELSE
     RETURN (topology_reversed (an_item));
   END_IF;
 END_FUNCTION;

FUNCTION edge_curve_pcurves (an_edge  : edge_curve;
                       the_surface_curves : SET OF surface_curve)
      : SET OF pcurve;
LOCAL
  a_curve      : curve;
  result       : SET OF pcurve;
  the_geometry : LIST[1:2] OF pcurve_or_surface;
END_LOCAL;
  a_curve := an_edge.edge_geometry;
  result := [];
  IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(a_curve) THEN
    result := result + a_curve;
  ELSE
    IF 'GEOMETRY_SCHEMA.SURFACE_CURVE' IN TYPEOF(a_curve) THEN
      the_geometry := a_curve\surface_curve.associated_geometry;
      REPEAT k := 1 TO SIZEOF(the_geometry);
         IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF (the_geometry[k])
         THEN
            result := result + the_geometry[k];
         END_IF;
      END_REPEAT;
    ELSE
      REPEAT j := 1 TO SIZEOF(the_surface_curves);
        the_geometry := the_surface_curves[j].associated_geometry;
        IF the_surface_curves[j].curve_3d :=: a_curve
        THEN
          REPEAT k := 1 TO SIZEOF(the_geometry);
            IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF (the_geometry[k])
            THEN
              result := result + the_geometry[k];
            END_IF;
          END_REPEAT;
        END_IF;
      END_REPEAT;
    END_IF;
  END_IF;

  RETURN (result);
END_FUNCTION;

 FUNCTION edge_reversed (an_edge : edge) : oriented_edge;
   LOCAL
     the_reverse : oriented_edge;
   END_LOCAL;

   IF ('TOPOLOGY_SCHEMA.ORIENTED_EDGE' IN TYPEOF (an_edge) ) THEN
     the_reverse  := dummy_tri ||
             edge(an_edge.edge_end, an_edge.edge_start) ||
             oriented_edge(an_edge\oriented_edge.edge_element,
                        NOT (an_edge\oriented_edge.orientation)) ;
   ELSE
     the_reverse := dummy_tri ||
             edge(an_edge.edge_end, an_edge.edge_start) ||
             oriented_edge(an_edge, FALSE);
   END_IF;
   RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION face_bound_reversed (a_face_bound : face_bound) : face_bound;
   LOCAL
     the_reverse : face_bound ;
   END_LOCAL;
   IF ('TOPOLOGY_SCHEMA.FACE_OUTER_BOUND' IN TYPEOF (a_face_bound) ) THEN
     the_reverse := dummy_tri ||
                      face_bound(a_face_bound\face_bound.bound,
                           NOT (a_face_bound\face_bound.orientation))
                            || face_outer_bound() ;
   ELSE
     the_reverse := dummy_tri ||
         face_bound(a_face_bound.bound, NOT(a_face_bound.orientation));
   END_IF;
  RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION face_reversed (a_face : face) : oriented_face;
   LOCAL
     the_reverse : oriented_face ;
   END_LOCAL;
   IF ('TOPOLOGY_SCHEMA.ORIENTED_FACE' IN TYPEOF (a_face) ) THEN
     the_reverse := dummy_tri ||
       face(set_of_topology_reversed(a_face.bounds)) ||
          oriented_face(a_face\oriented_face.face_element,
                           NOT (a_face\oriented_face.orientation)) ;
   ELSE
     the_reverse := dummy_tri ||
       face(set_of_topology_reversed(a_face.bounds)) ||
                               oriented_face(a_face, FALSE) ;
   END_IF;
      RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION list_face_loops(f: face) : LIST[0:?] OF loop;
   LOCAL
     loops : LIST[0:?] OF loop := [];
   END_LOCAL;
   
   REPEAT i := 1 TO SIZEOF(f.bounds);
     loops := loops +(f.bounds[i].bound);
   END_REPEAT;
      
   RETURN(loops);
 END_FUNCTION;

 FUNCTION list_loop_edges(l: loop): LIST[0:?] OF edge;
   LOCAL
     edges : LIST[0:?] OF edge := [];
   END_LOCAL;
      
   IF 'TOPOLOGY_SCHEMA.EDGE_LOOP' IN TYPEOF(l) THEN
     REPEAT i := 1 TO SIZEOF(l\path.edge_list);
       edges := edges + (l\path.edge_list[i].edge_element);
     END_REPEAT;
   END_IF;

   RETURN(edges);
 END_FUNCTION;

 FUNCTION list_of_topology_reversed (a_list
                                  : list_of_reversible_topology_item)
                                  : list_of_reversible_topology_item;
   LOCAL
     the_reverse : list_of_reversible_topology_item;
   END_LOCAL;
    
   the_reverse := [];
   REPEAT i := 1 TO SIZEOF (a_list);
     the_reverse := topology_reversed (a_list [i]) + the_reverse;
   END_REPEAT;
  
   RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION list_shell_edges(s : shell) : LIST[0:?] OF edge;
   LOCAL
     edges : LIST[0:?] OF edge := [];
   END_LOCAL;
      
   REPEAT i := 1 TO SIZEOF(list_shell_loops(s));
     edges := edges + list_loop_edges(list_shell_loops(s)[i]);
   END_REPEAT;
   
   RETURN(edges);
 END_FUNCTION;

 FUNCTION list_shell_faces(s : shell) : LIST[0:?] OF face;
   LOCAL
     faces : LIST[0:?] OF face := [];
   END_LOCAL;
   
   IF ('TOPOLOGY_SCHEMA.CLOSED_SHELL' IN TYPEOF(s)) OR 
      ('TOPOLOGY_SCHEMA.OPEN_SHELL' IN TYPEOF(s)) THEN
     REPEAT i := 1 TO SIZEOF(s\connected_face_set.cfs_faces);
       faces := faces + s\connected_face_set.cfs_faces[i];
     END_REPEAT;
   END_IF;
      
   RETURN(faces);
 END_FUNCTION;

 FUNCTION list_shell_loops(s : shell) : LIST[0:?] OF loop;
   LOCAL
     loops : LIST[0:?] OF loop := [];
   END_LOCAL;
      
   IF 'TOPOLOGY_SCHEMA.VERTEX_SHELL' IN TYPEOF(s) THEN
     loops := loops + s.vertex_shell_extent;
   END_IF;
      
   IF 'TOPOLOGY_SCHEMA.WIRE_SHELL' IN TYPEOF(s) THEN
     REPEAT i := 1 TO SIZEOF(s.wire_shell_extent);
       loops := loops + s.wire_shell_extent[i];
     END_REPEAT;
   END_IF;
      
   IF ('TOPOLOGY_SCHEMA.OPEN_SHELL' IN TYPEOF(s)) OR 
      ('TOPOLOGY_SCHEMA.CLOSED_SHELL' IN TYPEOF(s)) THEN
     REPEAT i := 1 TO SIZEOF(s.cfs_faces);
       loops := loops + list_face_loops(s.cfs_faces[i]);
     END_REPEAT;
   END_IF;
      
   RETURN(loops);
 END_FUNCTION;

 FUNCTION list_to_set(l : LIST [0:?] OF GENERIC:T) : SET OF GENERIC:T;
   LOCAL
     s : SET OF GENERIC:T := [];
   END_LOCAL;
      
   REPEAT i := 1 TO SIZEOF(l);
     s := s + l[i];
   END_REPEAT;
   
   RETURN(s);
 END_FUNCTION;

 FUNCTION mixed_loop_type_set(l: SET[0:?] OF loop): LOGICAL;
    LOCAL
      poly_loop_type: LOGICAL;
    END_LOCAL;
    IF(SIZEOF(l) <= 1) THEN
      RETURN(FALSE);
    END_IF;
    poly_loop_type := ('TOPOLOGY_SCHEMA.POLY_LOOP' IN TYPEOF(l[1]));
    REPEAT i := 2 TO SIZEOF(l);
      IF(('TOPOLOGY_SCHEMA.POLY_LOOP' IN TYPEOF(l[i])) <> poly_loop_type)
          THEN
          RETURN(TRUE);
       END_IF;
    END_REPEAT;
    RETURN(FALSE);
  END_FUNCTION;

 FUNCTION open_shell_reversed ( a_shell : open_shell) :
                                         oriented_open_shell;
   LOCAL
     the_reverse : oriented_open_shell;
   END_LOCAL;
   IF ('TOPOLOGY_SCHEMA.ORIENTED_OPEN_SHELL' IN TYPEOF (a_shell) ) THEN
     the_reverse := dummy_tri ||
                  connected_face_set (
                      a_shell\connected_face_set.cfs_faces) ||
                  open_shell () || oriented_open_shell(
                    a_shell\oriented_open_shell.open_shell_element,
                      (NOT (a_shell\oriented_open_shell.orientation)));
   ELSE
     the_reverse := dummy_tri ||
                 connected_face_set (
                     a_shell\connected_face_set.cfs_faces) ||
                 open_shell () ||  oriented_open_shell (a_shell, FALSE);
   END_IF;
   RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION path_head_to_tail(a_path : path) : LOGICAL;
   LOCAL
     n : INTEGER;
     p : LOGICAL := TRUE;
   END_LOCAL;
     
     n := SIZEOF (a_path.edge_list);
     REPEAT i := 2 TO n;
       p := p AND (a_path.edge_list[i-1].edge_end :=:
                   a_path.edge_list[i].edge_start);
     END_REPEAT;
     
     RETURN (p);
 END_FUNCTION;

FUNCTION path_reversed (a_path : path) : oriented_path;
  LOCAL
    the_reverse : oriented_path ;
  END_LOCAL;
  IF ('TOPOLOGY_SCHEMA.ORIENTED_PATH' IN TYPEOF (a_path) ) THEN
    the_reverse := dummy_tri ||
       path(list_of_topology_reversed (a_path.edge_list)) ||
          oriented_path(a_path\oriented_path.path_element,
                          NOT(a_path\oriented_path.orientation)) ;
  ELSE
    the_reverse := dummy_tri ||
                   path(list_of_topology_reversed (a_path.edge_list)) ||
                       oriented_path(a_path, FALSE);
  END_IF;

  RETURN (the_reverse);
END_FUNCTION;

 FUNCTION set_of_topology_reversed (a_set : set_of_reversible_topology_item)
                                          : set_of_reversible_topology_item;
   LOCAL
     the_reverse : set_of_reversible_topology_item;
   END_LOCAL;
   
   the_reverse := [];
   REPEAT i := 1 TO SIZEOF (a_set);
     the_reverse := the_reverse + topology_reversed (a_set [i]);
   END_REPEAT;
   
   RETURN (the_reverse);
 END_FUNCTION;

 FUNCTION shell_reversed (a_shell : shell) : shell;
   IF ('TOPOLOGY_SCHEMA.OPEN_SHELL' IN TYPEOF (a_shell) ) THEN
     RETURN (open_shell_reversed (a_shell));
   ELSE
     IF ('TOPOLOGY_SCHEMA.CLOSED_SHELL' IN TYPEOF (a_shell) ) THEN
       RETURN (closed_shell_reversed (a_shell));
     ELSE
       RETURN (?);
     END_IF;
   END_IF;
 END_FUNCTION;

 FUNCTION topology_reversed (an_item : reversible_topology)
                                     : reversible_topology;

   IF ('TOPOLOGY_SCHEMA.EDGE' IN TYPEOF (an_item)) THEN
     RETURN (edge_reversed (an_item));
   END_IF;

   IF ('TOPOLOGY_SCHEMA.PATH' IN TYPEOF (an_item)) THEN
     RETURN (path_reversed (an_item));
   END_IF;

   IF ('TOPOLOGY_SCHEMA.FACE_BOUND' IN TYPEOF (an_item)) THEN
     RETURN (face_bound_reversed (an_item));
   END_IF;
  
   IF ('TOPOLOGY_SCHEMA.FACE' IN TYPEOF (an_item)) THEN
     RETURN (face_reversed (an_item));
   END_IF;

   IF ('TOPOLOGY_SCHEMA.SHELL' IN TYPEOF (an_item)) THEN
     RETURN (shell_reversed (an_item));
   END_IF;

   IF ('SET' IN TYPEOF (an_item)) THEN
     RETURN (set_of_topology_reversed (an_item));
   END_IF;

   IF ('LIST' IN TYPEOF (an_item)) THEN
     RETURN (list_of_topology_reversed (an_item));
   END_IF;

   RETURN (?);
 END_FUNCTION;


FUNCTION vertex_point_pcurves (a_vertex  : vertex_point; 
      the_degenerates : SET OF evaluated_degenerate_pcurve)
      : SET OF degenerate_pcurve;
LOCAL
  a_point : point;
  result  : SET OF degenerate_pcurve;
END_LOCAL;
  a_point := a_vertex.vertex_geometry;
  result := [];
  IF 'GEOMETRY_SCHEMA.DEGENERATE_PCURVE' IN TYPEOF(a_point) THEN
    result := result + a_point;
  ELSE
      REPEAT j := 1 TO SIZEOF(the_degenerates);
         IF (the_degenerates[j].equivalent_point :=: a_point)  THEN
            result := result + the_degenerates[j];
         END_IF;
      END_REPEAT;
  END_IF;

  RETURN (result);
END_FUNCTION;

 END_SCHEMA; -- end TOPOLOGY schema
