boolean = "true" | "false" | "on" | "off" | "yes" | "no"
tasks =
  propertyfile
  | vsscheckin
  | sql
  | cvspass
  | p4reopen
  | csc
  | dirname
  | wlrun
  | p4label
  | p4revert
  | replaceregexp
  | get
  | jjtree
  | sleep
  | jarlib-display
  | dependset
  | zip
  | patch
  | jspc
  | style
  | test
  | tstamp
  | unwar
  | vsshistory
  | icontract
  | cvschangelog
  | p4submit
  | ccmcheckin
  | p4change
  | bzip2
  | p4delete
  | vssadd
  | javadoc
  | translate
  | signjar
  | vajload
  | jarlib-available
  | WsdlToDotnet
  | buildnumber
  | jpcovmerge
  | ejbjar
  | war
  | rename
  | sequential
  | serverdeploy
  | property
  | move
  | copydir
  | cccheckin
  | wljspc
  | fixcrlf
  | sosget
  | pathconvert
  | record
  | p4sync
  | exec
  | p4edit
  | manifest
  | maudit
  | antlr
  | netrexxc
  | jpcovreport
  | execon
  | ccmcheckout
  | ant
  | xmlvalidate
  | xslt
  | iplanet-ejbc
  | ccmcheckintask
  | gzip
  | native2ascii
  | starteam
  | ear
  | input
  | rmic
  | checksum
  | mail
  | loadfile
  | vsscheckout
  | stylebook
  | soscheckin
  | mimemail
  | stlabel
  | gunzip
  | concat
  | cab
  | touch
  | parallel
  | splash
  | antcall
  | cccheckout
  | typedef
  | p4have
  | filter
  | xmlproperty
  | copy
  | antstructure
  | ccmcreatetask
  | rpm
  | delete
  | replace
  | mmetrics
  | waitfor
  | untar
  | loadproperties
  | available
  | echoproperties
  | vajexport
  | stcheckout
  | bunzip2
  | copyfile
  | vsscreate
  | ejbc
  | unjar
  | wsdltodotnet
  | mkdir
  | condition
  | cvs
  | tempfile
  | junitreport
  | taskdef
  | echo
  | ccupdate
  | java
  | renameext
  | vsslabel
  | basename
  | javadoc2
  | vsscp
  | tar
  | vajimport
  | setproxy
  | wlstop
  | p4counter
  | ilasm
  | soscheckout
  | apply
  | ccuncheckout
  | jarlib-resolve
  | cvstagdiff
  | jlink
  | javacc
  | jarlib-manifest
  | pvcs
  | chmod
  | jar
  | sound
  | mparse
  | blgenclient
  | uptodate
  | genkey
  | javah
  | ccmreconfigure
  | fail
  | unzip
  | javac
  | p4add
  | soslabel
  | jpcoverage
  | depend
  | vssget
  | deltree
  | ddcreator
types =
  patternset
  | filterset
  | libfileset
  | filterreader
  | extension
  | fileset
  | dirset
  | filelist
  | filterchain
  | path
  | classfileset
  | description
  | xmlcatalog
  | selector
  | mapper
  | substitution
  | extensionSet
  | regexp
project =
  element project {
    attlist.project, (target | property | taskdef | typedef | types)*
  }
attlist.project &=
  attribute name { text }?,
  attribute default { text },
  attribute basedir { text }?
target = element target { attlist.target, (tasks | types)* }
attlist.target &=
  attribute id { xsd:ID }?,
  attribute name { text },
  attribute if { text }?,
  attribute unless { text }?,
  attribute depends { text }?,
  attribute description { text }?
patternset =
  element patternset {
    attlist.patternset,
    (\include | patternset | exclude | excludesfile | includesfile)*
  }
attlist.patternset &=
  attribute id { xsd:ID }?,
  attribute includes { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute excludesfile { text }?,
  attribute includesfile { text }?,
  attribute excludes { text }?
\include = element include { attlist.include, empty }
attlist.include &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute unless { text }?,
  attribute if { text }?
exclude = element exclude { attlist.exclude, empty }
attlist.exclude &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute unless { text }?,
  attribute if { text }?
excludesfile = element excludesfile { attlist.excludesfile, empty }
attlist.excludesfile &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute unless { text }?,
  attribute if { text }?
includesfile = element includesfile { attlist.includesfile, empty }
attlist.includesfile &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute unless { text }?,
  attribute if { text }?
filterset =
  element filterset {
    attlist.filterset, (filterset | filter | filtersfile)*
  }
attlist.filterset &=
  attribute id { xsd:ID }?,
  attribute begintoken { text }?,
  attribute endtoken { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute filtersfile { text }?
filter = element filter { attlist.filter, empty }
attlist.filter &=
  attribute id { xsd:ID }?,
  attribute token { text }?,
  attribute value { text }?
filtersfile = element filtersfile { attlist.filtersfile, empty }
attlist.filtersfile &=
  attribute id { xsd:ID }?,
  attribute file { text }?
libfileset =
  element libfileset {
    attlist.libfileset,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.libfileset &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute urlbase { text }?,
  attribute includeimpl { boolean }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute includeurl { boolean }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludesfile { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute includes { text }?
custom = element custom { attlist.custom, (classpath | param)* }
attlist.custom &=
  attribute id { xsd:ID }?,
  attribute classpath { text }?,
  attribute error { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute classname { text }?
classpath =
  element classpath {
    attlist.classpath,
    (fileset | dirset | filelist | pathelement | path)*
  }
attlist.classpath &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
fileset =
  element fileset {
    attlist.fileset,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.fileset &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
none =
  element none {
    attlist.none,
    (depend
     | filename
     | custom
     | not
     | date
     | contains
     | selector
     | depth
     | or
     | and
     | present
     | majority
     | none
     | size)*
  }
attlist.none &=
  attribute id { xsd:ID }?,
  attribute error { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?
depend = element depend { attlist.depend, mapper* }
attlist.depend &=
  attribute id { xsd:ID }?,
  attribute error { text }?,
  attribute targetdir { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute granularity { text }?
mapper = element mapper { attlist.mapper, classpath* }
attlist.mapper &=
  attribute id { xsd:ID }?,
  attribute classpath { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute type {
    "identity" | "flatten" | "glob" | "merge" | "regexp" | "package"
  }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute classname { text }?,
  attribute from { text }?,
  attribute to { text }?
filename = element filename { attlist.filename, empty }
attlist.filename &=
  attribute id { xsd:ID }?,
  attribute error { text }?,
  attribute casesensitive { boolean }?,
  attribute name { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute negate { boolean }?
not =
  element not {
    attlist.not,
    (depend
     | filename
     | custom
     | not
     | date
     | contains
     | selector
     | depth
     | or
     | and
     | present
     | majority
     | none
     | size)*
  }
attlist.not &=
  attribute id { xsd:ID }?,
  attribute error { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?
date = element date { attlist.date, empty }
attlist.date &=
  attribute id { xsd:ID }?,
  attribute when { "before" | "after" | "equal" }?,
  attribute error { text }?,
  attribute millis { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute checkdirs { boolean }?,
  attribute granularity { text }?,
  attribute datetime { text }?
contains = element contains { attlist.contains, empty }
attlist.contains &=
  attribute id { xsd:ID }?,
  attribute error { text }?,
  attribute casesensitive { boolean }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute text { text }?
selector =
  element selector {
    attlist.selector,
    (depend
     | filename
     | custom
     | not
     | date
     | contains
     | selector
     | depth
     | or
     | and
     | present
     | majority
     | none
     | size)*
  }
attlist.selector &=
  attribute id { xsd:ID }?,
  attribute error { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?
depth = element depth { attlist.depth, empty }
attlist.depth &=
  attribute id { xsd:ID }?,
  attribute max { text }?,
  attribute error { text }?,
  attribute min { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?
or =
  element or {
    attlist.or,
    (depend
     | filename
     | custom
     | not
     | date
     | contains
     | selector
     | depth
     | or
     | and
     | present
     | majority
     | none
     | size)*
  }
attlist.or &=
  attribute id { xsd:ID }?,
  attribute error { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?
and =
  element and {
    attlist.and,
    (depend
     | filename
     | custom
     | not
     | date
     | contains
     | selector
     | depth
     | or
     | and
     | present
     | majority
     | none
     | size)*
  }
attlist.and &=
  attribute id { xsd:ID }?,
  attribute error { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?
present = element present { attlist.present, mapper* }
attlist.present &=
  attribute id { xsd:ID }?,
  attribute error { text }?,
  attribute targetdir { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute present { "srconly" | "both" }?
majority =
  element majority {
    attlist.majority,
    (depend
     | filename
     | custom
     | not
     | date
     | contains
     | selector
     | depth
     | or
     | and
     | present
     | majority
     | none
     | size)*
  }
attlist.majority &=
  attribute id { xsd:ID }?,
  attribute error { text }?,
  attribute refid { xsd:IDREF }?,
  attribute allowtie { boolean }?,
  attribute description { text }?
size = element size { attlist.size, empty }
attlist.size &=
  attribute id { xsd:ID }?,
  attribute when { "less" | "more" | "equal" }?,
  attribute units {
    "K"
    | "k"
    | "kilo"
    | "KILO"
    | "Ki"
    | "KI"
    | "ki"
    | "kibi"
    | "KIBI"
    | "M"
    | "m"
    | "mega"
    | "MEGA"
    | "Mi"
    | "MI"
    | "mi"
    | "mebi"
    | "MEBI"
    | "G"
    | "g"
    | "giga"
    | "GIGA"
    | "Gi"
    | "GI"
    | "gi"
    | "gibi"
    | "GIBI"
    | "T"
    | "t"
    | "tera"
    | "TERA"
    | "Ti"
    | "TI"
    | "ti"
    | "tebi"
    | "TEBI"
  }?,
  attribute error { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute value { text }?
dirset =
  element dirset {
    attlist.dirset,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.dirset &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
filelist = element filelist { attlist.filelist, empty }
attlist.filelist &=
  attribute id { xsd:ID }?,
  attribute dir { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute files { text }?
pathelement = element pathelement { attlist.pathelement, empty }
attlist.pathelement &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute path { text }?
path =
  element path {
    attlist.path, (fileset | dirset | filelist | pathelement | path)*
  }
attlist.path &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
param = element param { attlist.param, empty }
attlist.param &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute type { text }?,
  attribute value { text }?
filterreader =
  element filterreader { attlist.filterreader, (classpath | param)* }
attlist.filterreader &=
  attribute id { xsd:ID }?,
  attribute classpath { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute classname { text }?
extension = element extension { attlist.extension, empty }
attlist.extension &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute implementationversion { text }?,
  attribute specificationversion { text }?,
  attribute extensionname { text }?,
  attribute implementationvendorid { text }?,
  attribute specificationvendor { text }?,
  attribute implementationurl { text }?,
  attribute description { text }?,
  attribute implementationvendor { text }?
filterchain =
  element filterchain {
    attlist.filterchain,
    (linecontainsregexp
     | classconstants
     | headfilter
     | tabstospaces
     | striplinebreaks
     | tailfilter
     | stripjavacomments
     | expandproperties
     | linecontains
     | replacetokens
     | striplinecomments
     | prefixlines
     | filterreader)*
  }
attlist.filterchain &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?
linecontainsregexp =
  element linecontainsregexp { attlist.linecontainsregexp, regexp* }
attlist.linecontainsregexp &= attribute id { xsd:ID }?
regexp = element regexp { attlist.regexp, empty }
attlist.regexp &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute pattern { text }?
classconstants =
  element classconstants { attlist.classconstants, empty }
attlist.classconstants &= attribute id { xsd:ID }?
headfilter = element headfilter { attlist.headfilter, empty }
attlist.headfilter &=
  attribute id { xsd:ID }?,
  attribute lines { text }?
tabstospaces = element tabstospaces { attlist.tabstospaces, empty }
attlist.tabstospaces &=
  attribute id { xsd:ID }?,
  attribute tablength { text }?
striplinebreaks =
  element striplinebreaks { attlist.striplinebreaks, empty }
attlist.striplinebreaks &=
  attribute id { xsd:ID }?,
  attribute linebreaks { text }?
tailfilter = element tailfilter { attlist.tailfilter, empty }
attlist.tailfilter &=
  attribute id { xsd:ID }?,
  attribute lines { text }?
stripjavacomments =
  element stripjavacomments { attlist.stripjavacomments, empty }
attlist.stripjavacomments &= attribute id { xsd:ID }?
expandproperties =
  element expandproperties { attlist.expandproperties, empty }
attlist.expandproperties &= attribute id { xsd:ID }?
linecontains = element linecontains { attlist.linecontains, contains* }
attlist.linecontains &= attribute id { xsd:ID }?
replacetokens = element replacetokens { attlist.replacetokens, \token* }
attlist.replacetokens &=
  attribute id { xsd:ID }?,
  attribute begintoken { text }?,
  attribute endtoken { text }?
\token = element token { attlist.token, empty }
attlist.token &=
  attribute id { xsd:ID }?,
  attribute key { text }?,
  attribute value { text }?
striplinecomments =
  element striplinecomments { attlist.striplinecomments, comment* }
attlist.striplinecomments &= attribute id { xsd:ID }?
comment = element comment { attlist.comment, empty }
attlist.comment &=
  attribute id { xsd:ID }?,
  attribute value { text }?
prefixlines = element prefixlines { attlist.prefixlines, empty }
attlist.prefixlines &=
  attribute id { xsd:ID }?,
  attribute prefix { text }?
classfileset =
  element classfileset {
    attlist.classfileset,
    (patternset
     | exclude
     | \include
     | custom
     | rootfileset
     | present
     | none
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | root
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.classfileset &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute rootclass { text }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
rootfileset =
  element rootfileset {
    attlist.rootfileset,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.rootfileset &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
root = element root { attlist.root, empty }
attlist.root &=
  attribute id { xsd:ID }?,
  attribute classname { text }?
description = element description { attlist.description, text }
attlist.description &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?
xmlcatalog =
  element xmlcatalog {
    attlist.xmlcatalog, (entity | classpath | dtd | xmlcatalog)*
  }
attlist.xmlcatalog &=
  attribute id { xsd:ID }?,
  attribute classpath { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?
entity = element entity { attlist.entity, empty }
attlist.entity &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute publicid { text }?
dtd = element dtd { attlist.dtd, empty }
attlist.dtd &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute publicid { text }?
substitution = element substitution { attlist.substitution, empty }
attlist.substitution &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute expression { text }?
extensionSet =
  element extensionSet {
    attlist.extensionSet, (fileset | libfileset | extension)*
  }
attlist.extensionSet &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?
propertyfile = element propertyfile { attlist.propertyfile, entry* }
attlist.propertyfile &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute file { text }?,
  attribute description { text }?,
  attribute comment { text }?
entry = element entry { attlist.entry, empty }
attlist.entry &=
  attribute id { xsd:ID }?,
  attribute operation { text }?,
  attribute default { text }?,
  attribute key { text }?,
  attribute type { "int" | "date" | "string" }?,
  attribute unit {
    "millisecond"
    | "second"
    | "minute"
    | "hour"
    | "day"
    | "week"
    | "month"
    | "year"
  }?,
  attribute pattern { text }?,
  attribute value { text }?
vsscheckin = element vsscheckin { attlist.vsscheckin, empty }
attlist.vsscheckin &=
  attribute id { xsd:ID }?,
  attribute ssdir { text }?,
  attribute recursive { boolean }?,
  attribute autoresponse { text }?,
  attribute vsspath { text }?,
  attribute comment { text }?,
  attribute serverpath { text }?,
  attribute writable { boolean }?,
  attribute login { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute localpath { text }?
sql =
  element sql {
    attlist.sql, (text | fileset | classpath | transaction)*
  }
attlist.sql &=
  attribute id { xsd:ID }?,
  attribute onerror { "continue" | "stop" | "abort" }?,
  attribute userid { text }?,
  attribute password { text }?,
  attribute autocommit { boolean }?,
  attribute rdbms { text }?,
  attribute print { boolean }?,
  attribute classpathref { xsd:IDREF }?,
  attribute encoding { text }?,
  attribute version { text }?,
  attribute url { text }?,
  attribute src { text }?,
  attribute output { text }?,
  attribute driver { text }?,
  attribute showheaders { boolean }?,
  attribute classpath { text }?,
  attribute delimitertype { "normal" | "row" }?,
  attribute description { text }?,
  attribute append { boolean }?,
  attribute taskname { text }?,
  attribute caching { boolean }?,
  attribute delimiter { text }?
transaction = element transaction { attlist.transaction, text }
attlist.transaction &=
  attribute id { xsd:ID }?,
  attribute src { text }?
cvspass = element cvspass { attlist.cvspass, empty }
attlist.cvspass &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute password { text }?,
  attribute description { text }?,
  attribute cvsroot { text }?,
  attribute passfile { text }?
p4reopen = element p4reopen { attlist.p4reopen, empty }
attlist.p4reopen &=
  attribute id { xsd:ID }?,
  attribute tochange { text }?,
  attribute port { text }?,
  attribute client { text }?,
  attribute user { text }?,
  attribute cmdopts { text }?,
  attribute view { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?
csc =
  element csc {
    attlist.csc,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.csc &=
  attribute id { xsd:ID }?,
  attribute references { text }?,
  attribute filealign { text }?,
  attribute excludes { text }?,
  attribute mainclass { text }?,
  attribute noconfig { boolean }?,
  attribute extraoptions { text }?,
  attribute additionalmodules { text }?,
  attribute win32icon { text }?,
  attribute destdir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute utf8output { boolean }?,
  attribute includedefaultreferences { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute optimize { boolean }?,
  attribute targettype { text }?,
  attribute destfile { text }?,
  attribute casesensitive { boolean }?,
  attribute win32res { text }?,
  attribute debug { boolean }?,
  attribute unsafe { boolean }?,
  attribute docfile { text }?,
  attribute incremental { boolean }?,
  attribute includes { text }?,
  attribute outputfile { text }?,
  attribute description { text }?,
  attribute includesfile { text }?,
  attribute failonerror { boolean }?,
  attribute taskname { text }?,
  attribute warnlevel { text }?,
  attribute srcdir { text }?,
  attribute excludesfile { text }?,
  attribute fullpaths { boolean }?,
  attribute definitions { text }?,
  attribute referencefiles { text }?
dirname = element dirname { attlist.dirname, empty }
attlist.dirname &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute file { text }?,
  attribute description { text }?,
  attribute property { text }?
wlrun = element wlrun { attlist.wlrun, (classpath | wlclasspath)* }
attlist.wlrun &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute classpath { text }?,
  attribute pkpassword { text }?,
  attribute beahome { text }?,
  attribute domain { text }?,
  attribute username { text }?,
  attribute weblogicmainclass { text }?,
  attribute wlclasspath { text }?,
  attribute policy { text }?,
  attribute properties { text }?,
  attribute args { text }?,
  attribute home { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute password { text }?,
  attribute jvmargs { text }?
wlclasspath =
  element wlclasspath {
    attlist.wlclasspath,
    (fileset | dirset | filelist | pathelement | path)*
  }
attlist.wlclasspath &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
p4label = element p4label { attlist.p4label, empty }
attlist.p4label &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute port { text }?,
  attribute client { text }?,
  attribute user { text }?,
  attribute cmdopts { text }?,
  attribute desc { text }?,
  attribute view { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?,
  attribute lock { text }?
p4revert = element p4revert { attlist.p4revert, empty }
attlist.p4revert &=
  attribute id { xsd:ID }?,
  attribute port { text }?,
  attribute client { text }?,
  attribute revertonlyunchanged { boolean }?,
  attribute user { text }?,
  attribute cmdopts { text }?,
  attribute change { text }?,
  attribute view { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?
replaceregexp =
  element replaceregexp {
    attlist.replaceregexp, (fileset | substitution | regexp)*
  }
attlist.replaceregexp &=
  attribute id { xsd:ID }?,
  attribute flags { text }?,
  attribute taskname { text }?,
  attribute match { text }?,
  attribute byline { text }?,
  attribute replace { text }?,
  attribute file { text }?,
  attribute description { text }?
get = element get { attlist.get, empty }
attlist.get &=
  attribute id { xsd:ID }?,
  attribute src { text }?,
  attribute verbose { boolean }?,
  attribute ignoreerrors { boolean }?,
  attribute username { text }?,
  attribute usetimestamp { boolean }?,
  attribute taskname { text }?,
  attribute dest { text }?,
  attribute description { text }?,
  attribute password { text }?
jjtree = element jjtree { attlist.jjtree, empty }
attlist.jjtree &=
  attribute id { xsd:ID }?,
  attribute nodedefaultvoid { boolean }?,
  attribute buildnodefiles { boolean }?,
  attribute outputdirectory { text }?,
  attribute static { boolean }?,
  attribute javacchome { text }?,
  attribute nodeprefix { text }?,
  attribute nodefactory { boolean }?,
  attribute multi { boolean }?,
  attribute visitor { boolean }?,
  attribute target { text }?,
  attribute nodeusesparser { boolean }?,
  attribute visitorexception { text }?,
  attribute nodescopehook { boolean }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute nodepackage { text }?
sleep = element sleep { attlist.sleep, empty }
attlist.sleep &=
  attribute id { xsd:ID }?,
  attribute hours { text }?,
  attribute taskname { text }?,
  attribute milliseconds { text }?,
  attribute minutes { text }?,
  attribute description { text }?,
  attribute seconds { text }?,
  attribute failonerror { boolean }?
jarlib-display =
  element jarlib-display { attlist.jarlib-display, fileset* }
attlist.jarlib-display &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute file { text }?,
  attribute description { text }?
dependset =
  element dependset {
    attlist.dependset,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | targetfileset
     | srcfileset
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | srcfilelist
     | date
     | excludesfile
     | depth
     | and
     | targetfilelist)*
  }
attlist.dependset &=
  attribute id { xsd:ID }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute casesensitive { boolean }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
targetfileset =
  element targetfileset {
    attlist.targetfileset,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.targetfileset &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
srcfileset =
  element srcfileset {
    attlist.srcfileset,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.srcfileset &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
srcfilelist = element srcfilelist { attlist.srcfilelist, empty }
attlist.srcfilelist &=
  attribute id { xsd:ID }?,
  attribute dir { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute files { text }?
targetfilelist =
  element targetfilelist { attlist.targetfilelist, empty }
attlist.targetfilelist &=
  attribute id { xsd:ID }?,
  attribute dir { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute files { text }?
zip =
  element zip {
    attlist.zip,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | or
     | contains
     | depend
     | fileset
     | size
     | majority
     | filename
     | selector
     | includesfile
     | zipgroupfileset
     | zipfileset
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.zip &=
  attribute id { xsd:ID }?,
  attribute whenempty { "fail" | "skip" | "create" }?,
  attribute duplicate { "add" | "preserve" | "fail" }?,
  attribute excludes { text }?,
  attribute basedir { text }?,
  attribute encoding { text }?,
  attribute defaultexcludes { boolean }?,
  attribute update { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute destfile { text }?,
  attribute casesensitive { boolean }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute includesfile { text }?,
  attribute compress { boolean }?,
  attribute taskname { text }?,
  attribute filesonly { boolean }?,
  attribute file { text }?,
  attribute excludesfile { text }?,
  attribute zipfile { text }?
zipgroupfileset =
  element zipgroupfileset {
    attlist.zipgroupfileset,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.zipgroupfileset &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
zipfileset =
  element zipfileset {
    attlist.zipfileset,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.zipfileset &=
  attribute id { xsd:ID }?,
  attribute src { text }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute prefix { text }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute fullpath { text }?,
  attribute excludesfile { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute includes { text }?
patch = element patch { attlist.patch, empty }
attlist.patch &=
  attribute id { xsd:ID }?,
  attribute strip { text }?,
  attribute dir { text }?,
  attribute quiet { boolean }?,
  attribute originalfile { text }?,
  attribute patchfile { text }?,
  attribute reverse { boolean }?,
  attribute taskname { text }?,
  attribute backups { boolean }?,
  attribute ignorewhitespace { boolean }?,
  attribute description { text }?
jspc =
  element jspc {
    attlist.jspc,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | or
     | contains
     | depend
     | classpath
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | webapp
     | depth
     | and)*
  }
attlist.jspc &=
  attribute id { xsd:ID }?,
  attribute mapped { boolean }?,
  attribute ieplugin { text }?,
  attribute excludes { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute package { text }?,
  attribute destdir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute uribase { text }?,
  attribute classpath { text }?,
  attribute casesensitive { boolean }?,
  attribute verbose { text }?,
  attribute compiler { text }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute webxml { text }?,
  attribute includesfile { text }?,
  attribute failonerror { boolean }?,
  attribute taskname { text }?,
  attribute srcdir { text }?,
  attribute excludesfile { text }?,
  attribute uriroot { text }?,
  attribute webinc { text }?
webapp = element webapp { attlist.webapp, empty }
attlist.webapp &=
  attribute id { xsd:ID }?,
  attribute basedir { text }?
style =
  element style {
    attlist.style,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | param
     | or
     | contains
     | depend
     | classpath
     | size
     | majority
     | filename
     | xmlcatalog
     | selector
     | includesfile
     | outputproperty
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.style &=
  attribute id { xsd:ID }?,
  attribute force { boolean }?,
  attribute excludes { text }?,
  attribute processor { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute basedir { text }?,
  attribute destdir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute scanincludeddirectories { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute extension { text }?,
  attribute in { text }?,
  attribute classpath { text }?,
  attribute casesensitive { boolean }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute out { text }?,
  attribute includesfile { text }?,
  attribute style { text }?,
  attribute taskname { text }?,
  attribute excludesfile { text }?
outputproperty =
  element outputproperty { attlist.outputproperty, empty }
attlist.outputproperty &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute value { text }?
test =
  element test {
    attlist.test,
    (arg | jvmarg | classpath | sysproperty | testlet | env)*
  }
attlist.test &=
  attribute id { xsd:ID }?,
  attribute jvmargs { text }?,
  attribute args { text }?,
  attribute fork { boolean }?,
  attribute maxmemory { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute jar { text }?,
  attribute forceshowtrace { boolean }?,
  attribute output { text }?,
  attribute timeout { text }?,
  attribute jvm { text }?,
  attribute classpath { text }?,
  attribute dir { text }?,
  attribute description { text }?,
  attribute showsuccess { boolean }?,
  attribute jvmversion { text }?,
  attribute append { boolean }?,
  attribute failonerror { boolean }?,
  attribute taskname { text }?,
  attribute showbanner { text }?,
  attribute newenvironment { boolean }?,
  attribute classname { text }?,
  attribute showtrace { boolean }?
arg = element arg { attlist.arg, empty }
attlist.arg &=
  attribute id { xsd:ID }?,
  attribute line { text }?,
  attribute file { text }?,
  attribute value { text }?,
  attribute path { text }?
jvmarg = element jvmarg { attlist.jvmarg, empty }
attlist.jvmarg &=
  attribute id { xsd:ID }?,
  attribute line { text }?,
  attribute file { text }?,
  attribute value { text }?,
  attribute path { text }?
sysproperty = element sysproperty { attlist.sysproperty, empty }
attlist.sysproperty &=
  attribute id { xsd:ID }?,
  attribute key { text }?,
  attribute file { text }?,
  attribute value { text }?,
  attribute path { text }?
testlet = element testlet { attlist.testlet, text }
attlist.testlet &= attribute id { xsd:ID }?
env = element env { attlist.env, empty }
attlist.env &=
  attribute id { xsd:ID }?,
  attribute key { text }?,
  attribute file { text }?,
  attribute value { text }?,
  attribute path { text }?
tstamp = element tstamp { attlist.tstamp, format* }
attlist.tstamp &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute prefix { text }?
format = element format { attlist.format, empty }
attlist.format &=
  attribute id { xsd:ID }?,
  attribute locale { text }?,
  attribute timezone { text }?,
  attribute unit {
    "millisecond"
    | "second"
    | "minute"
    | "hour"
    | "day"
    | "week"
    | "month"
    | "year"
  }?,
  attribute pattern { text }?,
  attribute property { text }?,
  attribute offset { text }?
unwar = element unwar { attlist.unwar, (fileset | patternset)* }
attlist.unwar &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute overwrite { boolean }?,
  attribute dest { text }?,
  attribute description { text }?,
  attribute src { text }?
vsshistory = element vsshistory { attlist.vsshistory, empty }
attlist.vsshistory &=
  attribute id { xsd:ID }?,
  attribute style { "brief" | "codediff" | "nofile" | "default" }?,
  attribute numdays { text }?,
  attribute todate { text }?,
  attribute fromlabel { text }?,
  attribute output { text }?,
  attribute ssdir { text }?,
  attribute recursive { boolean }?,
  attribute vsspath { text }?,
  attribute fromdate { text }?,
  attribute user { text }?,
  attribute serverpath { text }?,
  attribute login { text }?,
  attribute taskname { text }?,
  attribute tolabel { text }?,
  attribute dateformat { text }?,
  attribute description { text }?
icontract =
  element icontract {
    attlist.icontract,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | or
     | contains
     | depend
     | classpath
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.icontract &=
  attribute id { xsd:ID }?,
  attribute classdir { text }?,
  attribute excludes { text }?,
  attribute quiet { boolean }?,
  attribute classpathref { xsd:IDREF }?,
  attribute defaultexcludes { boolean }?,
  attribute repositorydir { text }?,
  attribute instrumentdir { text }?,
  attribute followsymlinks { boolean }?,
  attribute builddir { text }?,
  attribute updateicontrol { boolean }?,
  attribute classpath { text }?,
  attribute casesensitive { boolean }?,
  attribute pre { boolean }?,
  attribute controlfile { text }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute invariant { boolean }?,
  attribute post { boolean }?,
  attribute includesfile { text }?,
  attribute taskname { text }?,
  attribute srcdir { text }?,
  attribute failthrowable { text }?,
  attribute verbosity { text }?,
  attribute excludesfile { text }?,
  attribute repbuilddir { text }?,
  attribute targets { text }?
cvschangelog =
  element cvschangelog { attlist.cvschangelog, (fileset | user)* }
attlist.cvschangelog &=
  attribute id { xsd:ID }?,
  attribute end { text }?,
  attribute taskname { text }?,
  attribute dir { text }?,
  attribute description { text }?,
  attribute usersfile { text }?,
  attribute daysinpast { text }?,
  attribute start { text }?,
  attribute destfile { text }?
user = element user { attlist.user, empty }
attlist.user &=
  attribute id { xsd:ID }?,
  attribute userid { text }?,
  attribute displayname { text }?
p4submit = element p4submit { attlist.p4submit, empty }
attlist.p4submit &=
  attribute id { xsd:ID }?,
  attribute port { text }?,
  attribute client { text }?,
  attribute user { text }?,
  attribute cmdopts { text }?,
  attribute change { text }?,
  attribute view { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?
ccmcheckin = element ccmcheckin { attlist.ccmcheckin, empty }
attlist.ccmcheckin &=
  attribute id { xsd:ID }?,
  attribute ccmaction { text }?,
  attribute task { text }?,
  attribute taskname { text }?,
  attribute file { text }?,
  attribute description { text }?,
  attribute ccmdir { text }?,
  attribute comment { text }?
p4change = element p4change { attlist.p4change, empty }
attlist.p4change &=
  attribute id { xsd:ID }?,
  attribute view { text }?,
  attribute client { text }?,
  attribute user { text }?,
  attribute port { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute cmdopts { text }?,
  attribute failonerror { boolean }?
bzip2 = element bzip2 { attlist.bzip2, empty }
attlist.bzip2 &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute zipfile { text }?,
  attribute description { text }?,
  attribute src { text }?
p4delete = element p4delete { attlist.p4delete, empty }
attlist.p4delete &=
  attribute id { xsd:ID }?,
  attribute port { text }?,
  attribute client { text }?,
  attribute user { text }?,
  attribute cmdopts { text }?,
  attribute change { text }?,
  attribute view { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?
vssadd = element vssadd { attlist.vssadd, empty }
attlist.vssadd &=
  attribute id { xsd:ID }?,
  attribute ssdir { text }?,
  attribute recursive { boolean }?,
  attribute autoresponse { text }?,
  attribute vsspath { text }?,
  attribute comment { text }?,
  attribute serverpath { text }?,
  attribute writable { boolean }?,
  attribute login { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute localpath { text }?
javadoc =
  element javadoc {
    attlist.javadoc,
    (bottom
     | source
     | classpath
     | doctitle
     | header
     | excludepackage
     | bootclasspath
     | doclet
     | taglet
     | fileset
     | packageset
     | sourcepath
     | link
     | footer
     | package
     | group
     | tag)*
  }
attlist.javadoc &=
  attribute id { xsd:ID }?,
  attribute bottom { text }?,
  attribute verbose { boolean }?,
  attribute bootclasspathref { xsd:IDREF }?,
  attribute header { text }?,
  attribute link { text }?,
  attribute noindex { boolean }?,
  attribute access { "protected" | "public" | "package" | "private" }?,
  attribute doclet { text }?,
  attribute public { boolean }?,
  attribute author { boolean }?,
  attribute footer { text }?,
  attribute docletpath { text }?,
  attribute package { boolean }?,
  attribute useexternalfile { boolean }?,
  attribute description { text }?,
  attribute sourcepathref { xsd:IDREF }?,
  attribute protected { boolean }?,
  attribute nonavbar { boolean }?,
  attribute maxmemory { text }?,
  attribute group { text }?,
  attribute source { text }?,
  attribute linkoffline { text }?,
  attribute additionalparam { text }?,
  attribute failonerror { boolean }?,
  attribute locale { text }?,
  attribute destdir { text }?,
  attribute classpath { text }?,
  attribute defaultexcludes { boolean }?,
  attribute bootclasspath { text }?,
  attribute private { boolean }?,
  attribute taskname { text }?,
  attribute charset { text }?,
  attribute nodeprecatedlist { boolean }?,
  attribute classpathref { xsd:IDREF }?,
  attribute stylesheetfile { text }?,
  attribute docencoding { text }?,
  attribute excludepackagenames { text }?,
  attribute docletpathref { xsd:IDREF }?,
  attribute packagenames { text }?,
  attribute windowtitle { text }?,
  attribute notree { boolean }?,
  attribute splitindex { boolean }?,
  attribute packagelist { text }?,
  attribute encoding { text }?,
  attribute doctitle { text }?,
  attribute serialwarn { boolean }?,
  attribute old { boolean }?,
  attribute use { boolean }?,
  attribute sourcepath { text }?,
  attribute helpfile { text }?,
  attribute version { boolean }?,
  attribute sourcefiles { text }?,
  attribute extdirs { text }?,
  attribute nohelp { boolean }?,
  attribute nodeprecated { boolean }?,
  attribute overview { text }?
bottom = element bottom { attlist.bottom, text }
attlist.bottom &= attribute id { xsd:ID }?
source = element source { attlist.source, empty }
attlist.source &=
  attribute id { xsd:ID }?,
  attribute file { text }?
doctitle = element doctitle { attlist.doctitle, text }
attlist.doctitle &= attribute id { xsd:ID }?
header = element header { attlist.header, text }
attlist.header &= attribute id { xsd:ID }?
excludepackage =
  element excludepackage { attlist.excludepackage, empty }
attlist.excludepackage &=
  attribute id { xsd:ID }?,
  attribute name { text }?
bootclasspath =
  element bootclasspath {
    attlist.bootclasspath,
    (fileset | dirset | filelist | pathelement | path)*
  }
attlist.bootclasspath &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
doclet = element doclet { attlist.doclet, (path | param)* }
attlist.doclet &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute pathref { xsd:IDREF }?,
  attribute path { text }?
taglet = element taglet { attlist.taglet, path* }
attlist.taglet &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute pathref { xsd:IDREF }?,
  attribute path { text }?
packageset =
  element packageset {
    attlist.packageset,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.packageset &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
sourcepath =
  element sourcepath {
    attlist.sourcepath,
    (fileset | dirset | filelist | pathelement | path)*
  }
attlist.sourcepath &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
link = element link { attlist.link, empty }
attlist.link &=
  attribute id { xsd:ID }?,
  attribute href { text }?,
  attribute offline { boolean }?,
  attribute packagelistloc { text }?
footer = element footer { attlist.footer, text }
attlist.footer &= attribute id { xsd:ID }?
package = element package { attlist.package, empty }
attlist.package &=
  attribute id { xsd:ID }?,
  attribute name { text }?
group = element group { attlist.group, (package | title)* }
attlist.group &=
  attribute id { xsd:ID }?,
  attribute packages { text }?,
  attribute title { text }?
title = element title { attlist.title, text }
attlist.title &= attribute id { xsd:ID }?
tag = element tag { attlist.tag, empty }
attlist.tag &=
  attribute id { xsd:ID }?,
  attribute enabled { boolean }?,
  attribute name { text }?,
  attribute scope { text }?,
  attribute description { text }?
translate =
  element translate {
    attlist.translate,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | or
     | contains
     | depend
     | fileset
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.translate &=
  attribute id { xsd:ID }?,
  attribute bundlecountry { text }?,
  attribute bundlelanguage { text }?,
  attribute excludes { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute srcencoding { text }?,
  attribute bundle { text }?,
  attribute bundleencoding { text }?,
  attribute casesensitive { boolean }?,
  attribute destencoding { text }?,
  attribute bundlevariant { text }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute todir { text }?,
  attribute includesfile { text }?,
  attribute taskname { text }?,
  attribute excludesfile { text }?,
  attribute endtoken { text }?,
  attribute forceoverwrite { boolean }?,
  attribute starttoken { text }?
signjar = element signjar { attlist.signjar, fileset* }
attlist.signjar &=
  attribute id { xsd:ID }?,
  attribute storepass { text }?,
  attribute lazy { boolean }?,
  attribute jar { text }?,
  attribute verbose { boolean }?,
  attribute keypass { text }?,
  attribute alias { text }?,
  attribute sectionsonly { boolean }?,
  attribute keystore { text }?,
  attribute taskname { text }?,
  attribute sigfile { text }?,
  attribute description { text }?,
  attribute internalsf { boolean }?,
  attribute storetype { text }?,
  attribute signedjar { text }?
vajload = element vajload { attlist.vajload, vajproject* }
attlist.vajload &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute remote { text }?
vajproject = element vajproject { attlist.vajproject, empty }
attlist.vajproject &=
  attribute id { xsd:ID }?,
  attribute version { text }?,
  attribute name { text }?
jarlib-available =
  element jarlib-available {
    attlist.jarlib-available, (extensionset | extension)*
  }
attlist.jarlib-available &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute file { text }?,
  attribute description { text }?,
  attribute property { text }?
extensionset =
  element extensionset {
    attlist.extensionset, (fileset | libfileset | extension)*
  }
attlist.extensionset &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?
WsdlToDotnet = element WsdlToDotnet { attlist.WsdlToDotnet, empty }
attlist.WsdlToDotnet &=
  attribute id { xsd:ID }?,
  attribute url { text }?,
  attribute srcfile { text }?,
  attribute destfile { text }?,
  attribute server { boolean }?,
  attribute namespace { text }?,
  attribute language { text }?,
  attribute extraoptions { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?
buildnumber = element buildnumber { attlist.buildnumber, empty }
attlist.buildnumber &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute file { text }?,
  attribute description { text }?
jpcovmerge = element jpcovmerge { attlist.jpcovmerge, fileset* }
attlist.jpcovmerge &=
  attribute id { xsd:ID }?,
  attribute verbose { boolean }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute tofile { text }?,
  attribute home { text }?
ejbjar =
  element ejbjar {
    attlist.ejbjar,
    (patternset
     | exclude
     | \include
     | custom
     | weblogictoplink
     | present
     | none
     | jboss
     | not
     | borland
     | weblogic
     | iplanet
     | or
     | jonas
     | contains
     | depend
     | support
     | classpath
     | size
     | majority
     | websphere
     | dtd
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.ejbjar &=
  attribute id { xsd:ID }?,
  attribute descriptordir { text }?,
  attribute excludes { text }?,
  attribute manifest { text }?,
  attribute destdir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute basenameterminator { text }?,
  attribute classpath { text }?,
  attribute casesensitive { boolean }?,
  attribute dependency { text }?,
  attribute basejarname { text }?,
  attribute flatdestdir { boolean }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute includesfile { text }?,
  attribute taskname { text }?,
  attribute srcdir { text }?,
  attribute naming {
    "ejb-name" | "directory" | "descriptor" | "basejarname"
  }?,
  attribute excludesfile { text }?,
  attribute genericjarsuffix { text }?
weblogictoplink =
  element weblogictoplink {
    attlist.weblogictoplink, (classpath | wlclasspath | sysproperty)*
  }
attlist.weblogictoplink &=
  attribute id { xsd:ID }?,
  attribute newcmp { boolean }?,
  attribute ejbdtd { text }?,
  attribute jvmargs { text }?,
  attribute rebuild { boolean }?,
  attribute suffix { text }?,
  attribute args { text }?,
  attribute outputdir { text }?,
  attribute toplinkdtd { text }?,
  attribute wldtd { text }?,
  attribute destdir { text }?,
  attribute weblogicdtd { text }?,
  attribute wlclasspath { text }?,
  attribute jvmdebuglevel { text }?,
  attribute classpath { text }?,
  attribute keepgenerated { text }?,
  attribute compiler { text }?,
  attribute oldcmp { boolean }?,
  attribute keepgeneric { boolean }?,
  attribute ejbcclass { text }?,
  attribute noejbc { boolean }?,
  attribute toplinkdescriptor { text }?,
  attribute genericjarsuffix { text }?
jboss = element jboss { attlist.jboss, classpath* }
attlist.jboss &=
  attribute id { xsd:ID }?,
  attribute destdir { text }?,
  attribute genericjarsuffix { text }?,
  attribute classpath { text }?
borland = element borland { attlist.borland, classpath* }
attlist.borland &=
  attribute id { xsd:ID }?,
  attribute verifyargs { text }?,
  attribute debug { boolean }?,
  attribute destdir { text }?,
  attribute classpath { text }?,
  attribute genericjarsuffix { text }?,
  attribute version { text }?,
  attribute basdtd { text }?,
  attribute verify { boolean }?,
  attribute suffix { text }?,
  attribute generateclient { boolean }?
weblogic =
  element weblogic {
    attlist.weblogic, (classpath | wlclasspath | sysproperty)*
  }
attlist.weblogic &=
  attribute id { xsd:ID }?,
  attribute newcmp { boolean }?,
  attribute ejbdtd { text }?,
  attribute jvmargs { text }?,
  attribute rebuild { boolean }?,
  attribute suffix { text }?,
  attribute args { text }?,
  attribute outputdir { text }?,
  attribute wldtd { text }?,
  attribute destdir { text }?,
  attribute weblogicdtd { text }?,
  attribute wlclasspath { text }?,
  attribute jvmdebuglevel { text }?,
  attribute classpath { text }?,
  attribute keepgenerated { text }?,
  attribute compiler { text }?,
  attribute oldcmp { boolean }?,
  attribute keepgeneric { boolean }?,
  attribute ejbcclass { text }?,
  attribute noejbc { boolean }?,
  attribute genericjarsuffix { text }?
iplanet = element iplanet { attlist.iplanet, classpath* }
attlist.iplanet &=
  attribute id { xsd:ID }?,
  attribute destdir { text }?,
  attribute genericjarsuffix { text }?,
  attribute classpath { text }?,
  attribute keepgenerated { boolean }?,
  attribute debug { boolean }?,
  attribute suffix { text }?,
  attribute iashome { text }?
jonas = element jonas { attlist.jonas, classpath* }
attlist.jonas &=
  attribute id { xsd:ID }?,
  attribute jonasroot { text }?,
  attribute keepgeneric { boolean }?,
  attribute additionalargs { text }?,
  attribute javac { text }?,
  attribute destdir { text }?,
  attribute classpath { text }?,
  attribute orb { text }?,
  attribute jarsuffix { text }?,
  attribute verbose { boolean }?,
  attribute genericjarsuffix { text }?,
  attribute nogenic { boolean }?,
  attribute rmicopts { text }?,
  attribute javacopts { text }?,
  attribute novalidation { boolean }?,
  attribute keepgenerated { boolean }?,
  attribute nocompil { boolean }?,
  attribute secpropag { boolean }?
support =
  element support {
    attlist.support,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.support &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
websphere =
  element websphere { attlist.websphere, (classpath | wasclasspath)* }
attlist.websphere &=
  attribute id { xsd:ID }?,
  attribute newcmp { boolean }?,
  attribute ejbdtd { text }?,
  attribute noinform { boolean }?,
  attribute rebuild { boolean }?,
  attribute suffix { text }?,
  attribute args { text }?,
  attribute quiet { boolean }?,
  attribute dbschema { text }?,
  attribute destdir { text }?,
  attribute ejbdeploy { boolean }?,
  attribute tempdir { text }?,
  attribute use35 { boolean }?,
  attribute novalidate { boolean }?,
  attribute codegen { boolean }?,
  attribute dbvendor {
    "SQL92"
    | "SQL99"
    | "DB2UDBWIN_V71"
    | "DB2UDBOS390_V6"
    | "DB2UDBAS400_V4R5"
    | "ORACLE_V8"
    | "INFORMIX_V92"
    | "SYBASE_V1192"
    | "MSSQLSERVER_V7"
    | "MYSQL_V323"
  }?,
  attribute classpath { text }?,
  attribute keepgenerated { text }?,
  attribute compiler { text }?,
  attribute wasclasspath { text }?,
  attribute oldcmp { boolean }?,
  attribute dbname { text }?,
  attribute keepgeneric { boolean }?,
  attribute trace { boolean }?,
  attribute nowarn { boolean }?,
  attribute genericjarsuffix { text }?
wasclasspath =
  element wasclasspath {
    attlist.wasclasspath,
    (fileset | dirset | filelist | pathelement | path)*
  }
attlist.wasclasspath &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
war =
  element war {
    attlist.war,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | manifest
     | metainf
     | or
     | contains
     | depend
     | lib
     | fileset
     | size
     | majority
     | filename
     | selector
     | includesfile
     | zipgroupfileset
     | zipfileset
     | classes
     | date
     | excludesfile
     | webinf
     | depth
     | and)*
  }
attlist.war &=
  attribute id { xsd:ID }?,
  attribute whenempty { "fail" | "skip" | "create" }?,
  attribute duplicate { "add" | "preserve" | "fail" }?,
  attribute excludes { text }?,
  attribute basedir { text }?,
  attribute encoding { text }?,
  attribute manifest { text }?,
  attribute jarfile { text }?,
  attribute defaultexcludes { boolean }?,
  attribute index { boolean }?,
  attribute update { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute destfile { text }?,
  attribute casesensitive { boolean }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute webxml { text }?,
  attribute includesfile { text }?,
  attribute compress { boolean }?,
  attribute taskname { text }?,
  attribute filesonly { boolean }?,
  attribute warfile { text }?,
  attribute file { text }?,
  attribute excludesfile { text }?,
  attribute zipfile { text }?
manifest =
  element manifest { attlist.manifest, (\attribute | section)* }
attlist.manifest &= attribute id { xsd:ID }?
\attribute = element attribute { attlist.attribute, empty }
attlist.attribute &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute value { text }?
section = element section { attlist.section, \attribute* }
attlist.section &=
  attribute id { xsd:ID }?,
  attribute name { text }?
metainf =
  element metainf {
    attlist.metainf,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.metainf &=
  attribute id { xsd:ID }?,
  attribute src { text }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute prefix { text }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute fullpath { text }?,
  attribute excludesfile { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute includes { text }?
lib =
  element lib {
    attlist.lib,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.lib &=
  attribute id { xsd:ID }?,
  attribute src { text }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute prefix { text }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute fullpath { text }?,
  attribute excludesfile { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute includes { text }?
classes =
  element classes {
    attlist.classes,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.classes &=
  attribute id { xsd:ID }?,
  attribute src { text }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute prefix { text }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute fullpath { text }?,
  attribute excludesfile { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute includes { text }?
webinf =
  element webinf {
    attlist.webinf,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.webinf &=
  attribute id { xsd:ID }?,
  attribute src { text }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute prefix { text }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute fullpath { text }?,
  attribute excludesfile { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute includes { text }?
rename = element rename { attlist.rename, empty }
attlist.rename &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute dest { text }?,
  attribute replace { text }?,
  attribute description { text }?,
  attribute src { text }?
sequential = element sequential { attlist.sequential, tasks* }
attlist.sequential &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute description { text }?
serverdeploy =
  element serverdeploy {
    attlist.serverdeploy, (weblogic | generic | jonas)*
  }
attlist.serverdeploy &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute action { text }?,
  attribute source { text }?
generic =
  element generic { attlist.generic, (arg | classpath | jvmarg)* }
attlist.generic &=
  attribute id { xsd:ID }?,
  attribute classpath { text }?,
  attribute password { text }?,
  attribute server { text }?,
  attribute classname { text }?,
  attribute username { text }?
property = element property { attlist.property, classpath* }
attlist.property &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute name { text }?,
  attribute classpath { text }?,
  attribute userproperty { boolean }?,
  attribute file { text }?,
  attribute resource { text }?,
  attribute environment { text }?,
  attribute prefix { text }?,
  attribute taskname { text }?,
  attribute value { text }?,
  attribute location { text }?,
  attribute description { text }?
move =
  element move {
    attlist.move, (filterchain | fileset | filterset | mapper)*
  }
attlist.move &=
  attribute id { xsd:ID }?,
  attribute flatten { boolean }?,
  attribute encoding { text }?,
  attribute tofile { text }?,
  attribute todir { text }?,
  attribute file { text }?,
  attribute verbose { boolean }?,
  attribute includeemptydirs { boolean }?,
  attribute overwrite { boolean }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?,
  attribute preservelastmodified { boolean }?,
  attribute filtering { boolean }?
copydir =
  element copydir {
    attlist.copydir,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.copydir &=
  attribute id { xsd:ID }?,
  attribute flatten { boolean }?,
  attribute src { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute taskname { text }?,
  attribute casesensitive { boolean }?,
  attribute dest { text }?,
  attribute description { text }?,
  attribute forceoverwrite { boolean }?,
  attribute excludesfile { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute filtering { boolean }?,
  attribute includes { text }?
cccheckin = element cccheckin { attlist.cccheckin, empty }
attlist.cccheckin &=
  attribute id { xsd:ID }?,
  attribute preservetime { boolean }?,
  attribute viewpath { text }?,
  attribute comment { text }?,
  attribute nowarn { boolean }?,
  attribute identical { boolean }?,
  attribute cleartooldir { text }?,
  attribute taskname { text }?,
  attribute keepcopy { boolean }?,
  attribute description { text }?,
  attribute commentfile { text }?
wljspc =
  element wljspc {
    attlist.wljspc,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | or
     | contains
     | depend
     | classpath
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.wljspc &=
  attribute id { xsd:ID }?,
  attribute src { text }?,
  attribute classpath { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute taskname { text }?,
  attribute casesensitive { boolean }?,
  attribute dest { text }?,
  attribute package { text }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
fixcrlf =
  element fixcrlf {
    attlist.fixcrlf,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.fixcrlf &=
  attribute id { xsd:ID }?,
  attribute tab { "add" | "asis" | "remove" }?,
  attribute excludes { text }?,
  attribute encoding { text }?,
  attribute cr { "add" | "asis" | "remove" }?,
  attribute destdir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute eol { "asis" | "cr" | "lf" | "crlf" }?,
  attribute followsymlinks { boolean }?,
  attribute javafiles { boolean }?,
  attribute eof { "add" | "asis" | "remove" }?,
  attribute casesensitive { boolean }?,
  attribute tablength { text }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute includesfile { text }?,
  attribute taskname { text }?,
  attribute srcdir { text }?,
  attribute excludesfile { text }?
sosget = element sosget { attlist.sosget, empty }
attlist.sosget &=
  attribute id { xsd:ID }?,
  attribute password { text }?,
  attribute comment { text }?,
  attribute nocompress { boolean }?,
  attribute version { text }?,
  attribute username { text }?,
  attribute sosserverpath { text }?,
  attribute label { text }?,
  attribute vssserverpath { text }?,
  attribute soscmd { text }?,
  attribute verbose { boolean }?,
  attribute localpath { text }?,
  attribute nocache { boolean }?,
  attribute projectpath { text }?,
  attribute description { text }?,
  attribute taskname { text }?,
  attribute recursive { boolean }?,
  attribute file { text }?,
  attribute soshome { text }?
pathconvert = element pathconvert { attlist.pathconvert, (path | map)* }
attlist.pathconvert &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute pathsep { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute dirsep { text }?,
  attribute setonempty { boolean }?,
  attribute property { text }?,
  attribute targetos { text }?
map = element map { attlist.map, empty }
attlist.map &=
  attribute id { xsd:ID }?,
  attribute from { text }?,
  attribute to { text }?
record = element record { attlist.record, empty }
attlist.record &=
  attribute id { xsd:ID }?,
  attribute append { boolean }?,
  attribute taskname { text }?,
  attribute name { text }?,
  attribute loglevel {
    "error" | "warn" | "info" | "verbose" | "debug"
  }?,
  attribute description { text }?,
  attribute emacsmode { boolean }?,
  attribute action { "start" | "stop" }?
p4sync = element p4sync { attlist.p4sync, empty }
attlist.p4sync &=
  attribute id { xsd:ID }?,
  attribute force { text }?,
  attribute port { text }?,
  attribute client { text }?,
  attribute user { text }?,
  attribute cmdopts { text }?,
  attribute view { text }?,
  attribute taskname { text }?,
  attribute label { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?
exec = element exec { attlist.exec, (arg | env)* }
attlist.exec &=
  attribute id { xsd:ID }?,
  attribute append { boolean }?,
  attribute output { text }?,
  attribute dir { text }?,
  attribute command { text }?,
  attribute outputproperty { text }?,
  attribute os { text }?,
  attribute resultproperty { text }?,
  attribute failifexecutionfails { boolean }?,
  attribute timeout { text }?,
  attribute taskname { text }?,
  attribute vmlauncher { boolean }?,
  attribute description { text }?,
  attribute failonerror { boolean }?,
  attribute newenvironment { boolean }?,
  attribute executable { text }?
p4edit = element p4edit { attlist.p4edit, empty }
attlist.p4edit &=
  attribute id { xsd:ID }?,
  attribute port { text }?,
  attribute client { text }?,
  attribute user { text }?,
  attribute cmdopts { text }?,
  attribute change { text }?,
  attribute view { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?
maudit =
  element maudit {
    attlist.maudit,
    (fileset
     | jvmarg
     | classpath
     | rulespath
     | searchpath
     | sourcepath)*
  }
attlist.maudit &=
  attribute id { xsd:ID }?,
  attribute tofile { text }?,
  attribute exit { boolean }?,
  attribute offsets { boolean }?,
  attribute quiet { boolean }?,
  attribute unused { boolean }?,
  attribute verbose { boolean }?,
  attribute maxmemory { text }?,
  attribute fix { boolean }?,
  attribute metamatahome { text }?,
  attribute list { boolean }?,
  attribute home { text }?,
  attribute fullsemanticize { boolean }?,
  attribute taskname { text }?,
  attribute description { text }?
rulespath =
  element rulespath {
    attlist.rulespath,
    (fileset | dirset | filelist | pathelement | path)*
  }
attlist.rulespath &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
searchpath =
  element searchpath {
    attlist.searchpath,
    (fileset | dirset | filelist | pathelement | path)*
  }
attlist.searchpath &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
antlr = element antlr { attlist.antlr, (jvmarg | classpath)* }
attlist.antlr &=
  attribute id { xsd:ID }?,
  attribute debug { boolean }?,
  attribute outputdirectory { text }?,
  attribute fork { boolean }?,
  attribute dir { text }?,
  attribute trace { boolean }?,
  attribute tracetreewalker { boolean }?,
  attribute html { boolean }?,
  attribute tracelexer { boolean }?,
  attribute diagnostic { boolean }?,
  attribute traceparser { boolean }?,
  attribute target { text }?,
  attribute taskname { text }?,
  attribute glib { text }?,
  attribute description { text }?
netrexxc =
  element netrexxc {
    attlist.netrexxc,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.netrexxc &=
  attribute id { xsd:ID }?,
  attribute excludes { text }?,
  attribute verbose {
    "verbose"
    | "verbose0"
    | "verbose1"
    | "verbose2"
    | "verbose3"
    | "verbose4"
    | "verbose5"
    | "noverbose"
  }?,
  attribute keep { boolean }?,
  attribute comments { boolean }?,
  attribute strictimport { boolean }?,
  attribute sourcedir { boolean }?,
  attribute diag { boolean }?,
  attribute compile { boolean }?,
  attribute binary { boolean }?,
  attribute description { text }?,
  attribute includes { text }?,
  attribute suppressmethodargumentnotused { boolean }?,
  attribute suppressvariablenotused { boolean }?,
  attribute strictsignal { boolean }?,
  attribute trace { "trace" | "trace1" | "trace2" | "notrace" }?,
  attribute destdir { text }?,
  attribute console { boolean }?,
  attribute replace { boolean }?,
  attribute classpath { text }?,
  attribute followsymlinks { boolean }?,
  attribute casesensitive { boolean }?,
  attribute defaultexcludes { boolean }?,
  attribute format { boolean }?,
  attribute explicit { boolean }?,
  attribute includesfile { text }?,
  attribute suppressprivatepropertynotused { boolean }?,
  attribute strictargs { boolean }?,
  attribute suppressdeprecation { boolean }?,
  attribute strictcase { boolean }?,
  attribute taskname { text }?,
  attribute savelog { boolean }?,
  attribute logo { boolean }?,
  attribute utf8 { boolean }?,
  attribute strictprops { boolean }?,
  attribute srcdir { text }?,
  attribute java { boolean }?,
  attribute suppressexceptionnotsignalled { boolean }?,
  attribute crossref { boolean }?,
  attribute time { boolean }?,
  attribute symbols { boolean }?,
  attribute excludesfile { text }?,
  attribute strictassign { boolean }?,
  attribute compact { boolean }?,
  attribute decimal { boolean }?
jpcovreport =
  element jpcovreport {
    attlist.jpcovreport, (reference | coveragepath | sourcepath)*
  }
attlist.jpcovreport &=
  attribute id { xsd:ID }?,
  attribute snapshot { text }?,
  attribute tofile { text }?,
  attribute filters { text }?,
  attribute percent { text }?,
  attribute home { text }?,
  attribute type {
    "executive" | "summary" | "detailed" | "verydetailed"
  }?,
  attribute taskname { text }?,
  attribute format { "html" | "text" | "xml" }?,
  attribute includesource { boolean }?,
  attribute description { text }?
reference =
  element reference { attlist.reference, (classpath | filters)* }
attlist.reference &= attribute id { xsd:ID }?
filters = element filters { attlist.filters, (\include | exclude)* }
attlist.filters &= attribute id { xsd:ID }?
coveragepath =
  element coveragepath {
    attlist.coveragepath,
    (fileset | dirset | filelist | pathelement | path)*
  }
attlist.coveragepath &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
execon =
  element execon {
    attlist.execon,
    (arg | fileset | env | targetfile | srcfile | mapper)*
  }
attlist.execon &=
  attribute id { xsd:ID }?,
  attribute resultproperty { text }?,
  attribute skipemptyfilesets { boolean }?,
  attribute type { "file" | "dir" | "both" }?,
  attribute failifexecutionfails { boolean }?,
  attribute command { text }?,
  attribute executable { text }?,
  attribute os { text }?,
  attribute output { text }?,
  attribute timeout { text }?,
  attribute dest { text }?,
  attribute dir { text }?,
  attribute description { text }?,
  attribute outputproperty { text }?,
  attribute failonerror { boolean }?,
  attribute append { boolean }?,
  attribute taskname { text }?,
  attribute vmlauncher { boolean }?,
  attribute newenvironment { boolean }?,
  attribute relative { boolean }?,
  attribute parallel { boolean }?
targetfile = element targetfile { attlist.targetfile, empty }
attlist.targetfile &= attribute id { xsd:ID }?
srcfile = element srcfile { attlist.srcfile, empty }
attlist.srcfile &= attribute id { xsd:ID }?
ccmcheckout = element ccmcheckout { attlist.ccmcheckout, empty }
attlist.ccmcheckout &=
  attribute id { xsd:ID }?,
  attribute ccmaction { text }?,
  attribute task { text }?,
  attribute taskname { text }?,
  attribute file { text }?,
  attribute description { text }?,
  attribute ccmdir { text }?,
  attribute comment { text }?
ant = element ant { attlist.ant, (reference | property)* }
attlist.ant &=
  attribute id { xsd:ID }?,
  attribute output { text }?,
  attribute taskname { text }?,
  attribute inheritall { boolean }?,
  attribute dir { text }?,
  attribute inheritrefs { boolean }?,
  attribute description { text }?,
  attribute antfile { text }?,
  attribute target { text }?
xmlvalidate =
  element xmlvalidate {
    attlist.xmlvalidate, (fileset | classpath | dtd | xmlcatalog)*
  }
attlist.xmlvalidate &=
  attribute id { xsd:ID }?,
  attribute classpath { text }?,
  attribute file { text }?,
  attribute classname { text }?,
  attribute lenient { boolean }?,
  attribute warn { boolean }?,
  attribute classpathref { xsd:IDREF }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?
xslt =
  element xslt {
    attlist.xslt,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | param
     | or
     | contains
     | depend
     | classpath
     | size
     | majority
     | filename
     | xmlcatalog
     | selector
     | includesfile
     | outputproperty
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.xslt &=
  attribute id { xsd:ID }?,
  attribute force { boolean }?,
  attribute excludes { text }?,
  attribute processor { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute basedir { text }?,
  attribute destdir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute scanincludeddirectories { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute extension { text }?,
  attribute in { text }?,
  attribute classpath { text }?,
  attribute casesensitive { boolean }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute out { text }?,
  attribute includesfile { text }?,
  attribute style { text }?,
  attribute taskname { text }?,
  attribute excludesfile { text }?
iplanet-ejbc = element iplanet-ejbc { attlist.iplanet-ejbc, classpath* }
attlist.iplanet-ejbc &=
  attribute id { xsd:ID }?,
  attribute ejbdescriptor { text }?,
  attribute debug { boolean }?,
  attribute classpath { text }?,
  attribute iasdescriptor { text }?,
  attribute iashome { text }?,
  attribute taskname { text }?,
  attribute dest { text }?,
  attribute description { text }?,
  attribute keepgenerated { boolean }?
ccmcheckintask =
  element ccmcheckintask { attlist.ccmcheckintask, empty }
attlist.ccmcheckintask &=
  attribute id { xsd:ID }?,
  attribute ccmaction { text }?,
  attribute task { text }?,
  attribute taskname { text }?,
  attribute file { text }?,
  attribute description { text }?,
  attribute ccmdir { text }?,
  attribute comment { text }?
gzip = element gzip { attlist.gzip, empty }
attlist.gzip &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute zipfile { text }?,
  attribute description { text }?,
  attribute src { text }?
native2ascii =
  element native2ascii {
    attlist.native2ascii,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | mapper
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.native2ascii &=
  attribute id { xsd:ID }?,
  attribute src { text }?,
  attribute encoding { text }?,
  attribute ext { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute reverse { boolean }?,
  attribute taskname { text }?,
  attribute casesensitive { boolean }?,
  attribute dest { text }?,
  attribute description { text }?,
  attribute excludesfile { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute includes { text }?
starteam = element starteam { attlist.starteam, empty }
attlist.starteam &=
  attribute id { xsd:ID }?,
  attribute targetfolderabsolute { boolean }?,
  attribute force { boolean }?,
  attribute recursion { boolean }?,
  attribute verbose { boolean }?,
  attribute username { text }?,
  attribute targetfolder { text }?,
  attribute viewname { text }?,
  attribute projectname { text }?,
  attribute servername { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute password { text }?,
  attribute serverport { text }?,
  attribute foldername { text }?,
  attribute excludes { text }?,
  attribute includes { text }?
ear =
  element ear {
    attlist.ear,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | manifest
     | metainf
     | or
     | contains
     | depend
     | fileset
     | size
     | majority
     | archives
     | filename
     | selector
     | includesfile
     | zipgroupfileset
     | zipfileset
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.ear &=
  attribute id { xsd:ID }?,
  attribute whenempty { "fail" | "skip" | "create" }?,
  attribute duplicate { "add" | "preserve" | "fail" }?,
  attribute excludes { text }?,
  attribute basedir { text }?,
  attribute encoding { text }?,
  attribute manifest { text }?,
  attribute jarfile { text }?,
  attribute defaultexcludes { boolean }?,
  attribute index { boolean }?,
  attribute update { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute destfile { text }?,
  attribute casesensitive { boolean }?,
  attribute earfile { text }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute includesfile { text }?,
  attribute appxml { text }?,
  attribute compress { boolean }?,
  attribute taskname { text }?,
  attribute filesonly { boolean }?,
  attribute file { text }?,
  attribute excludesfile { text }?,
  attribute zipfile { text }?
archives =
  element archives {
    attlist.archives,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.archives &=
  attribute id { xsd:ID }?,
  attribute src { text }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute prefix { text }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute fullpath { text }?,
  attribute excludesfile { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute includes { text }?
input = element input { attlist.input, text }
attlist.input &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute addproperty { text }?,
  attribute description { text }?,
  attribute validargs { text }?,
  attribute message { text }?
rmic =
  element rmic {
    attlist.rmic,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | extdirs
     | not
     | or
     | contains
     | depend
     | classpath
     | size
     | majority
     | filename
     | selector
     | includesfile
     | compilerarg
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.rmic &=
  attribute id { xsd:ID }?,
  attribute verify { boolean }?,
  attribute excludes { text }?,
  attribute iiop { boolean }?,
  attribute idlopts { text }?,
  attribute extdirs { text }?,
  attribute sourcebase { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute base { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute includeantruntime { boolean }?,
  attribute includejavaruntime { boolean }?,
  attribute classpath { text }?,
  attribute casesensitive { boolean }?,
  attribute debug { boolean }?,
  attribute compiler { text }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute includesfile { text }?,
  attribute taskname { text }?,
  attribute idl { boolean }?,
  attribute iiopopts { text }?,
  attribute classname { text }?,
  attribute excludesfile { text }?,
  attribute filtering { boolean }?,
  attribute stubversion { text }?
extdirs =
  element extdirs {
    attlist.extdirs, (fileset | dirset | filelist | pathelement | path)*
  }
attlist.extdirs &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
compilerarg = element compilerarg { attlist.compilerarg, empty }
attlist.compilerarg &=
  attribute id { xsd:ID }?,
  attribute line { text }?,
  attribute implementation { text }?,
  attribute file { text }?,
  attribute compiler { text }?,
  attribute value { text }?,
  attribute path { text }?
checksum =
  element checksum {
    attlist.checksum,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | or
     | contains
     | depend
     | fileset
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.checksum &=
  attribute id { xsd:ID }?,
  attribute file { text }?,
  attribute verifyproperty { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute readbuffersize { text }?,
  attribute algorithm { text }?,
  attribute taskname { text }?,
  attribute casesensitive { boolean }?,
  attribute provider { text }?,
  attribute description { text }?,
  attribute property { text }?,
  attribute forceoverwrite { boolean }?,
  attribute excludesfile { text }?,
  attribute includesfile { text }?,
  attribute excludes { text }?,
  attribute fileext { text }?,
  attribute includes { text }?
mail =
  element mail {
    attlist.mail, (fileset | bcc | message | cc | to | from)*
  }
attlist.mail &=
  attribute id { xsd:ID }?,
  attribute includefilenames { boolean }?,
  attribute files { text }?,
  attribute encoding { "auto" | "mime" | "uu" | "plain" }?,
  attribute cclist { text }?,
  attribute bcclist { text }?,
  attribute tolist { text }?,
  attribute subject { text }?,
  attribute mailhost { text }?,
  attribute messagefile { text }?,
  attribute taskname { text }?,
  attribute messagemimetype { text }?,
  attribute from { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?,
  attribute mailport { text }?,
  attribute message { text }?
bcc = element bcc { attlist.bcc, empty }
attlist.bcc &=
  attribute id { xsd:ID }?,
  attribute address { text }?,
  attribute name { text }?
message = element message { attlist.message, text }
attlist.message &=
  attribute id { xsd:ID }?,
  attribute mimetype { text }?,
  attribute src { text }?
cc = element cc { attlist.cc, empty }
attlist.cc &=
  attribute id { xsd:ID }?,
  attribute address { text }?,
  attribute name { text }?
to = element to { attlist.to, empty }
attlist.to &=
  attribute id { xsd:ID }?,
  attribute address { text }?,
  attribute name { text }?
from = element from { attlist.from, empty }
attlist.from &=
  attribute id { xsd:ID }?,
  attribute address { text }?,
  attribute name { text }?
loadfile = element loadfile { attlist.loadfile, filterchain* }
attlist.loadfile &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute encoding { text }?,
  attribute property { text }?,
  attribute srcfile { text }?,
  attribute failonerror { boolean }?
vsscheckout = element vsscheckout { attlist.vsscheckout, empty }
attlist.vsscheckout &=
  attribute id { xsd:ID }?,
  attribute ssdir { text }?,
  attribute recursive { boolean }?,
  attribute date { text }?,
  attribute autoresponse { text }?,
  attribute vsspath { text }?,
  attribute version { text }?,
  attribute serverpath { text }?,
  attribute login { text }?,
  attribute taskname { text }?,
  attribute label { text }?,
  attribute description { text }?,
  attribute localpath { text }?
stylebook =
  element stylebook {
    attlist.stylebook, (arg | jvmarg | classpath | sysproperty | env)*
  }
attlist.stylebook &=
  attribute id { xsd:ID }?,
  attribute jvmargs { text }?,
  attribute loaderconfig { text }?,
  attribute args { text }?,
  attribute fork { boolean }?,
  attribute maxmemory { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute jar { text }?,
  attribute targetdirectory { text }?,
  attribute output { text }?,
  attribute timeout { text }?,
  attribute skindirectory { text }?,
  attribute jvm { text }?,
  attribute book { text }?,
  attribute classpath { text }?,
  attribute dir { text }?,
  attribute description { text }?,
  attribute jvmversion { text }?,
  attribute append { boolean }?,
  attribute failonerror { boolean }?,
  attribute taskname { text }?,
  attribute newenvironment { boolean }?,
  attribute classname { text }?
soscheckin = element soscheckin { attlist.soscheckin, empty }
attlist.soscheckin &=
  attribute id { xsd:ID }?,
  attribute password { text }?,
  attribute comment { text }?,
  attribute nocompress { boolean }?,
  attribute version { text }?,
  attribute username { text }?,
  attribute sosserverpath { text }?,
  attribute label { text }?,
  attribute vssserverpath { text }?,
  attribute soscmd { text }?,
  attribute verbose { boolean }?,
  attribute localpath { text }?,
  attribute nocache { boolean }?,
  attribute projectpath { text }?,
  attribute description { text }?,
  attribute taskname { text }?,
  attribute recursive { boolean }?,
  attribute file { text }?,
  attribute soshome { text }?
mimemail =
  element mimemail {
    attlist.mimemail, (fileset | bcc | message | cc | to | from)*
  }
attlist.mimemail &=
  attribute id { xsd:ID }?,
  attribute includefilenames { boolean }?,
  attribute files { text }?,
  attribute encoding { "auto" | "mime" | "uu" | "plain" }?,
  attribute cclist { text }?,
  attribute bcclist { text }?,
  attribute tolist { text }?,
  attribute subject { text }?,
  attribute mailhost { text }?,
  attribute messagefile { text }?,
  attribute taskname { text }?,
  attribute messagemimetype { text }?,
  attribute from { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?,
  attribute mailport { text }?,
  attribute message { text }?
stlabel = element stlabel { attlist.stlabel, empty }
attlist.stlabel &=
  attribute id { xsd:ID }?,
  attribute lastbuild { text }?,
  attribute url { text }?,
  attribute username { text }?,
  attribute viewname { text }?,
  attribute projectname { text }?,
  attribute servername { text }?,
  attribute taskname { text }?,
  attribute label { text }?,
  attribute description { text }?,
  attribute password { text }?,
  attribute serverport { text }?
gunzip = element gunzip { attlist.gunzip, empty }
attlist.gunzip &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute dest { text }?,
  attribute description { text }?,
  attribute src { text }?
concat = element concat { attlist.concat, (text | fileset | filelist)* }
attlist.concat &=
  attribute id { xsd:ID }?,
  attribute append { boolean }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute encoding { text }?,
  attribute destfile { text }?
cab =
  element cab {
    attlist.cab,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | or
     | contains
     | depend
     | fileset
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.cab &=
  attribute id { xsd:ID }?,
  attribute cabfile { text }?,
  attribute compress { boolean }?,
  attribute verbose { boolean }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute basedir { text }?,
  attribute taskname { text }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludesfile { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute includes { text }?,
  attribute options { text }?
touch = element touch { attlist.touch, fileset* }
attlist.touch &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute millis { text }?,
  attribute file { text }?,
  attribute description { text }?,
  attribute datetime { text }?
parallel = element parallel { attlist.parallel, tasks* }
attlist.parallel &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute description { text }?
splash = element splash { attlist.splash, empty }
attlist.splash &=
  attribute id { xsd:ID }?,
  attribute port { text }?,
  attribute user { text }?,
  attribute proxy { text }?,
  attribute imageurl { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute password { text }?,
  attribute showduration { text }?,
  attribute useproxy { boolean }?
antcall = element antcall { attlist.antcall, (reference | param)* }
attlist.antcall &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute inheritall { boolean }?,
  attribute inheritrefs { boolean }?,
  attribute description { text }?,
  attribute target { text }?
cccheckout = element cccheckout { attlist.cccheckout, empty }
attlist.cccheckout &=
  attribute id { xsd:ID }?,
  attribute reserved { boolean }?,
  attribute viewpath { text }?,
  attribute out { text }?,
  attribute comment { text }?,
  attribute nodata { boolean }?,
  attribute version { boolean }?,
  attribute nowarn { boolean }?,
  attribute cleartooldir { text }?,
  attribute taskname { text }?,
  attribute branch { text }?,
  attribute description { text }?,
  attribute commentfile { text }?
typedef = element typedef { attlist.typedef, classpath* }
attlist.typedef &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute classpath { text }?,
  attribute file { text }?,
  attribute classname { text }?,
  attribute resource { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute loaderref { xsd:IDREF }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute reverseloader { boolean }?
p4have = element p4have { attlist.p4have, empty }
attlist.p4have &=
  attribute id { xsd:ID }?,
  attribute view { text }?,
  attribute client { text }?,
  attribute user { text }?,
  attribute port { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute cmdopts { text }?,
  attribute failonerror { boolean }?
xmlproperty = element xmlproperty { attlist.xmlproperty, empty }
attlist.xmlproperty &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute collapseattributes { boolean }?,
  attribute keeproot { boolean }?,
  attribute file { text }?,
  attribute description { text }?,
  attribute prefix { text }?,
  attribute validate { boolean }?
copy =
  element copy {
    attlist.copy, (filterchain | fileset | filterset | mapper)*
  }
attlist.copy &=
  attribute id { xsd:ID }?,
  attribute flatten { boolean }?,
  attribute encoding { text }?,
  attribute tofile { text }?,
  attribute todir { text }?,
  attribute file { text }?,
  attribute verbose { boolean }?,
  attribute includeemptydirs { boolean }?,
  attribute overwrite { boolean }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?,
  attribute preservelastmodified { boolean }?,
  attribute filtering { boolean }?
antstructure = element antstructure { attlist.antstructure, empty }
attlist.antstructure &=
  attribute id { xsd:ID }?,
  attribute output { text }?,
  attribute taskname { text }?,
  attribute description { text }?
ccmcreatetask = element ccmcreatetask { attlist.ccmcreatetask, empty }
attlist.ccmcreatetask &=
  attribute id { xsd:ID }?,
  attribute subsystem { text }?,
  attribute task { text }?,
  attribute platform { text }?,
  attribute resolver { text }?,
  attribute comment { text }?,
  attribute ccmaction { text }?,
  attribute ccmdir { text }?,
  attribute taskname { text }?,
  attribute release { text }?,
  attribute description { text }?
rpm = element rpm { attlist.rpm, empty }
attlist.rpm &=
  attribute id { xsd:ID }?,
  attribute removesource { boolean }?,
  attribute output { text }?,
  attribute command { text }?,
  attribute cleanbuilddir { boolean }?,
  attribute removespec { boolean }?,
  attribute error { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute specfile { text }?,
  attribute topdir { text }?
delete =
  element delete {
    attlist.delete,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | or
     | contains
     | depend
     | fileset
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.delete &=
  attribute id { xsd:ID }?,
  attribute file { text }?,
  attribute dir { text }?,
  attribute quiet { boolean }?,
  attribute verbose { boolean }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute includeemptydirs { boolean }?,
  attribute taskname { text }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute failonerror { boolean }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
replace =
  element replace {
    attlist.replace,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | replacefilter
     | or
     | contains
     | depend
     | replacetoken
     | size
     | majority
     | filename
     | selector
     | includesfile
     | replacevalue
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.replace &=
  attribute id { xsd:ID }?,
  attribute encoding { text }?,
  attribute file { text }?,
  attribute dir { text }?,
  attribute token { text }?,
  attribute propertyfile { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute summary { boolean }?,
  attribute taskname { text }?,
  attribute casesensitive { boolean }?,
  attribute value { text }?,
  attribute description { text }?,
  attribute excludesfile { text }?,
  attribute includesfile { text }?,
  attribute excludes { text }?,
  attribute replacefilterfile { text }?,
  attribute includes { text }?
replacefilter = element replacefilter { attlist.replacefilter, empty }
attlist.replacefilter &=
  attribute id { xsd:ID }?,
  attribute token { text }?,
  attribute value { text }?,
  attribute property { text }?
replacetoken = element replacetoken { attlist.replacetoken, text }
attlist.replacetoken &= attribute id { xsd:ID }?
replacevalue = element replacevalue { attlist.replacevalue, text }
attlist.replacevalue &= attribute id { xsd:ID }?
mmetrics =
  element mmetrics {
    attlist.mmetrics,
    (fileset | jvmarg | classpath | path | sourcepath)*
  }
attlist.mmetrics &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute metamatahome { text }?,
  attribute description { text }?,
  attribute tofile { text }?,
  attribute maxmemory { text }?,
  attribute home { text }?,
  attribute granularity {
    "compilation-units" | "files" | "methods" | "types" | "packages"
  }?
waitfor =
  element waitfor {
    attlist.waitfor,
    (isfalse
     | equals
     | available
     | not
     | contains
     | os
     | or
     | and
     | filesmatch
     | checksum
     | istrue
     | isset
     | socket
     | http
     | uptodate)*
  }
attlist.waitfor &=
  attribute id { xsd:ID }?,
  attribute checkeveryunit {
    "millisecond" | "second" | "minute" | "hour" | "day" | "week"
  }?,
  attribute checkevery { text }?,
  attribute maxwaitunit {
    "millisecond" | "second" | "minute" | "hour" | "day" | "week"
  }?,
  attribute maxwait { text }?,
  attribute timeoutproperty { text }?
isfalse = element isfalse { attlist.isfalse, empty }
attlist.isfalse &=
  attribute id { xsd:ID }?,
  attribute value { boolean }?
equals = element equals { attlist.equals, empty }
attlist.equals &=
  attribute id { xsd:ID }?,
  attribute trim { boolean }?,
  attribute arg2 { text }?,
  attribute arg1 { text }?,
  attribute casesensitive { boolean }?
available =
  element available { attlist.available, (classpath | filepath)* }
attlist.available &=
  attribute id { xsd:ID }?,
  attribute classpath { text }?,
  attribute file { text }?,
  attribute classname { text }?,
  attribute resource { text }?,
  attribute ignoresystemclasses { boolean }?,
  attribute type { "file" | "dir" }?,
  attribute classpathref { xsd:IDREF }?,
  attribute taskname { text }?,
  attribute value { text }?,
  attribute description { text }?,
  attribute property { text }?,
  attribute filepath { text }?
filepath =
  element filepath {
    attlist.filepath,
    (fileset | dirset | filelist | pathelement | path)*
  }
attlist.filepath &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
os = element os { attlist.os, empty }
attlist.os &=
  attribute id { xsd:ID }?,
  attribute version { text }?,
  attribute name { text }?,
  attribute family { text }?,
  attribute arch { text }?
filesmatch = element filesmatch { attlist.filesmatch, empty }
attlist.filesmatch &=
  attribute id { xsd:ID }?,
  attribute file2 { text }?,
  attribute file1 { text }?
istrue = element istrue { attlist.istrue, empty }
attlist.istrue &=
  attribute id { xsd:ID }?,
  attribute value { boolean }?
isset = element isset { attlist.isset, empty }
attlist.isset &=
  attribute id { xsd:ID }?,
  attribute property { text }?
socket = element socket { attlist.socket, empty }
attlist.socket &=
  attribute id { xsd:ID }?,
  attribute port { text }?,
  attribute server { text }?
http = element http { attlist.http, empty }
attlist.http &=
  attribute id { xsd:ID }?,
  attribute url { text }?
uptodate = element uptodate { attlist.uptodate, (srcfiles | mapper)* }
attlist.uptodate &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute value { text }?,
  attribute property { text }?,
  attribute srcfile { text }?,
  attribute targetfile { text }?
srcfiles =
  element srcfiles {
    attlist.srcfiles,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.srcfiles &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
untar = element untar { attlist.untar, (fileset | patternset)* }
attlist.untar &=
  attribute id { xsd:ID }?,
  attribute compression { "none" | "gzip" | "bzip2" }?,
  attribute taskname { text }?,
  attribute overwrite { boolean }?,
  attribute dest { text }?,
  attribute description { text }?,
  attribute src { text }?
loadproperties =
  element loadproperties { attlist.loadproperties, filterchain* }
attlist.loadproperties &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute srcfile { text }?
echoproperties =
  element echoproperties { attlist.echoproperties, empty }
attlist.echoproperties &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute prefix { text }?,
  attribute failonerror { boolean }?,
  attribute destfile { text }?
vajexport =
  element vajexport { attlist.vajexport, (\include | exclude)* }
attlist.vajexport &=
  attribute id { xsd:ID }?,
  attribute exportclasses { boolean }?,
  attribute remote { text }?,
  attribute destdir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute exportresources { boolean }?,
  attribute exportsources { boolean }?,
  attribute overwrite { boolean }?,
  attribute exportdebuginfo { boolean }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includes { text }?
stcheckout = element stcheckout { attlist.stcheckout, empty }
attlist.stcheckout &=
  attribute id { xsd:ID }?,
  attribute password { text }?,
  attribute projectname { text }?,
  attribute servername { text }?,
  attribute excludes { text }?,
  attribute username { text }?,
  attribute url { text }?,
  attribute rootstarteamfolder { text }?,
  attribute label { text }?,
  attribute viewname { text }?,
  attribute rootlocalfolder { text }?,
  attribute serverport { text }?,
  attribute deleteuncontrolled { boolean }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute unlocked { boolean }?,
  attribute taskname { text }?,
  attribute recursive { boolean }?,
  attribute locked { boolean }?,
  attribute forced { boolean }?,
  attribute createworkingdirs { boolean }?
bunzip2 = element bunzip2 { attlist.bunzip2, empty }
attlist.bunzip2 &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute dest { text }?,
  attribute description { text }?,
  attribute src { text }?
copyfile = element copyfile { attlist.copyfile, empty }
attlist.copyfile &=
  attribute id { xsd:ID }?,
  attribute forceoverwrite { boolean }?,
  attribute taskname { text }?,
  attribute dest { text }?,
  attribute description { text }?,
  attribute filtering { text }?,
  attribute src { text }?
vsscreate = element vsscreate { attlist.vsscreate, empty }
attlist.vsscreate &=
  attribute id { xsd:ID }?,
  attribute ssdir { text }?,
  attribute autoresponse { text }?,
  attribute quiet { boolean }?,
  attribute vsspath { text }?,
  attribute comment { text }?,
  attribute serverpath { text }?,
  attribute login { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?
ejbc =
  element ejbc {
    attlist.ejbc,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.ejbc &=
  attribute id { xsd:ID }?,
  attribute src { text }?,
  attribute manifest { text }?,
  attribute classpath { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute taskname { text }?,
  attribute casesensitive { boolean }?,
  attribute dest { text }?,
  attribute description { text }?,
  attribute keepgenerated { text }?,
  attribute excludesfile { text }?,
  attribute includesfile { text }?,
  attribute excludes { text }?,
  attribute descriptors { text }?,
  attribute includes { text }?
unjar = element unjar { attlist.unjar, (fileset | patternset)* }
attlist.unjar &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute overwrite { boolean }?,
  attribute dest { text }?,
  attribute description { text }?,
  attribute src { text }?
wsdltodotnet = element wsdltodotnet { attlist.wsdltodotnet, empty }
attlist.wsdltodotnet &=
  attribute id { xsd:ID }?,
  attribute url { text }?,
  attribute srcfile { text }?,
  attribute destfile { text }?,
  attribute server { boolean }?,
  attribute namespace { text }?,
  attribute language { text }?,
  attribute extraoptions { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?
mkdir = element mkdir { attlist.mkdir, empty }
attlist.mkdir &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute dir { text }?,
  attribute description { text }?
condition =
  element condition {
    attlist.condition,
    (isfalse
     | equals
     | available
     | not
     | contains
     | os
     | or
     | and
     | filesmatch
     | checksum
     | istrue
     | isset
     | socket
     | http
     | uptodate)*
  }
attlist.condition &=
  attribute id { xsd:ID }?,
  attribute value { text }?,
  attribute property { text }?
cvs = element cvs { attlist.cvs, commandline* }
attlist.cvs &=
  attribute id { xsd:ID }?,
  attribute cvsrsh { text }?,
  attribute quiet { boolean }?,
  attribute passfile { text }?,
  attribute command { text }?,
  attribute package { text }?,
  attribute cvsroot { text }?,
  attribute output { text }?,
  attribute port { text }?,
  attribute dest { text }?,
  attribute compressionlevel { text }?,
  attribute noexec { boolean }?,
  attribute error { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?,
  attribute append { boolean }?,
  attribute taskname { text }?,
  attribute date { text }?,
  attribute compression { boolean }?,
  attribute tag { text }?
commandline =
  element commandline { attlist.commandline, (marker | argument)* }
attlist.commandline &=
  attribute id { xsd:ID }?,
  attribute executable { text }?
marker = element marker { attlist.marker, empty }
attlist.marker &= attribute id { xsd:ID }?
argument = element argument { attlist.argument, empty }
attlist.argument &=
  attribute id { xsd:ID }?,
  attribute line { text }?,
  attribute file { text }?,
  attribute value { text }?,
  attribute path { text }?
tempfile = element tempfile { attlist.tempfile, empty }
attlist.tempfile &=
  attribute id { xsd:ID }?,
  attribute destdir { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute prefix { text }?,
  attribute property { text }?,
  attribute suffix { text }?
junitreport =
  element junitreport { attlist.junitreport, (report | fileset)* }
attlist.junitreport &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute todir { text }?,
  attribute description { text }?,
  attribute tofile { text }?
report = element report { attlist.report, empty }
attlist.report &=
  attribute id { xsd:ID }?,
  attribute todir { text }?,
  attribute styledir { text }?,
  attribute format { "frames" | "noframes" }?,
  attribute extension { text }?
taskdef = element taskdef { attlist.taskdef, classpath* }
attlist.taskdef &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute classpath { text }?,
  attribute file { text }?,
  attribute classname { text }?,
  attribute resource { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute loaderref { xsd:IDREF }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute reverseloader { boolean }?
echo = element echo { attlist.echo, text }
attlist.echo &=
  attribute id { xsd:ID }?,
  attribute append { boolean }?,
  attribute taskname { text }?,
  attribute file { text }?,
  attribute description { text }?,
  attribute message { text }?,
  attribute level {
    "error" | "warning" | "info" | "verbose" | "debug"
  }?
ccupdate = element ccupdate { attlist.ccupdate, empty }
attlist.ccupdate &=
  attribute id { xsd:ID }?,
  attribute preservetime { boolean }?,
  attribute rename { boolean }?,
  attribute viewpath { text }?,
  attribute log { text }?,
  attribute overwrite { boolean }?,
  attribute cleartooldir { text }?,
  attribute graphical { boolean }?,
  attribute taskname { text }?,
  attribute currenttime { boolean }?,
  attribute description { text }?
java =
  element java {
    attlist.java, (arg | jvmarg | classpath | sysproperty | env)*
  }
attlist.java &=
  attribute id { xsd:ID }?,
  attribute jvmargs { text }?,
  attribute args { text }?,
  attribute fork { boolean }?,
  attribute maxmemory { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute jar { text }?,
  attribute output { text }?,
  attribute timeout { text }?,
  attribute jvm { text }?,
  attribute classpath { text }?,
  attribute dir { text }?,
  attribute description { text }?,
  attribute jvmversion { text }?,
  attribute failonerror { boolean }?,
  attribute append { boolean }?,
  attribute taskname { text }?,
  attribute newenvironment { boolean }?,
  attribute classname { text }?
renameext =
  element renameext {
    attlist.renameext,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.renameext &=
  attribute id { xsd:ID }?,
  attribute replace { boolean }?,
  attribute toextension { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute fromextension { text }?,
  attribute taskname { text }?,
  attribute casesensitive { boolean }?,
  attribute srcdir { text }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute includes { text }?
vsslabel = element vsslabel { attlist.vsslabel, empty }
attlist.vsslabel &=
  attribute id { xsd:ID }?,
  attribute ssdir { text }?,
  attribute autoresponse { text }?,
  attribute vsspath { text }?,
  attribute comment { text }?,
  attribute version { text }?,
  attribute serverpath { text }?,
  attribute login { text }?,
  attribute taskname { text }?,
  attribute label { text }?,
  attribute description { text }?
basename = element basename { attlist.basename, empty }
attlist.basename &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute file { text }?,
  attribute description { text }?,
  attribute property { text }?,
  attribute suffix { text }?
javadoc2 =
  element javadoc2 {
    attlist.javadoc2,
    (bottom
     | source
     | classpath
     | doctitle
     | header
     | excludepackage
     | bootclasspath
     | doclet
     | taglet
     | fileset
     | packageset
     | sourcepath
     | link
     | footer
     | package
     | group
     | tag)*
  }
attlist.javadoc2 &=
  attribute id { xsd:ID }?,
  attribute bottom { text }?,
  attribute verbose { boolean }?,
  attribute bootclasspathref { xsd:IDREF }?,
  attribute header { text }?,
  attribute link { text }?,
  attribute noindex { boolean }?,
  attribute access { "protected" | "public" | "package" | "private" }?,
  attribute doclet { text }?,
  attribute public { boolean }?,
  attribute author { boolean }?,
  attribute footer { text }?,
  attribute docletpath { text }?,
  attribute package { boolean }?,
  attribute useexternalfile { boolean }?,
  attribute description { text }?,
  attribute sourcepathref { xsd:IDREF }?,
  attribute protected { boolean }?,
  attribute nonavbar { boolean }?,
  attribute maxmemory { text }?,
  attribute group { text }?,
  attribute source { text }?,
  attribute linkoffline { text }?,
  attribute additionalparam { text }?,
  attribute failonerror { boolean }?,
  attribute locale { text }?,
  attribute destdir { text }?,
  attribute classpath { text }?,
  attribute defaultexcludes { boolean }?,
  attribute bootclasspath { text }?,
  attribute private { boolean }?,
  attribute taskname { text }?,
  attribute charset { text }?,
  attribute nodeprecatedlist { boolean }?,
  attribute classpathref { xsd:IDREF }?,
  attribute stylesheetfile { text }?,
  attribute docencoding { text }?,
  attribute excludepackagenames { text }?,
  attribute docletpathref { xsd:IDREF }?,
  attribute packagenames { text }?,
  attribute windowtitle { text }?,
  attribute notree { boolean }?,
  attribute splitindex { boolean }?,
  attribute packagelist { text }?,
  attribute encoding { text }?,
  attribute doctitle { text }?,
  attribute serialwarn { boolean }?,
  attribute old { boolean }?,
  attribute use { boolean }?,
  attribute sourcepath { text }?,
  attribute helpfile { text }?,
  attribute version { boolean }?,
  attribute sourcefiles { text }?,
  attribute extdirs { text }?,
  attribute nohelp { boolean }?,
  attribute nodeprecated { boolean }?,
  attribute overview { text }?
vsscp = element vsscp { attlist.vsscp, empty }
attlist.vsscp &=
  attribute id { xsd:ID }?,
  attribute login { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute vsspath { text }?,
  attribute serverpath { text }?,
  attribute ssdir { text }?,
  attribute autoresponse { text }?
tar =
  element tar {
    attlist.tar,
    (patternset
     | exclude
     | \include
     | tarfileset
     | custom
     | present
     | none
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.tar &=
  attribute id { xsd:ID }?,
  attribute tarfile { text }?,
  attribute destfile { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute basedir { text }?,
  attribute taskname { text }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludesfile { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute compression { "none" | "gzip" | "bzip2" }?,
  attribute longfile { "warn" | "fail" | "truncate" | "gnu" | "omit" }?,
  attribute includes { text }?
tarfileset =
  element tarfileset {
    attlist.tarfileset,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.tarfileset &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute dir { text }?,
  attribute defaultexcludes { boolean }?,
  attribute username { text }?,
  attribute followsymlinks { boolean }?,
  attribute mode { text }?,
  attribute prefix { text }?,
  attribute casesensitive { boolean }?,
  attribute preserveleadingslashes { boolean }?,
  attribute description { text }?,
  attribute group { text }?,
  attribute fullpath { text }?,
  attribute excludesfile { text }?,
  attribute includesfile { text }?,
  attribute excludes { text }?,
  attribute includes { text }?
vajimport = element vajimport { attlist.vajimport, fileset* }
attlist.vajimport &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute importsources { boolean }?,
  attribute importclasses { boolean }?,
  attribute description { text }?,
  attribute remote { text }?,
  attribute importresources { boolean }?,
  attribute defaultexcludes { boolean }?,
  attribute project { text }?
setproxy = element setproxy { attlist.setproxy, empty }
attlist.setproxy &=
  attribute id { xsd:ID }?,
  attribute socksproxyport { text }?,
  attribute proxyport { text }?,
  attribute taskname { text }?,
  attribute socksproxyhost { text }?,
  attribute proxyhost { text }?,
  attribute description { text }?,
  attribute nonproxyhosts { text }?
wlstop = element wlstop { attlist.wlstop, classpath* }
attlist.wlstop &=
  attribute id { xsd:ID }?,
  attribute user { text }?,
  attribute classpath { text }?,
  attribute taskname { text }?,
  attribute delay { text }?,
  attribute password { text }?,
  attribute url { text }?,
  attribute description { text }?,
  attribute beahome { text }?
p4counter = element p4counter { attlist.p4counter, empty }
attlist.p4counter &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute port { text }?,
  attribute client { text }?,
  attribute user { text }?,
  attribute cmdopts { text }?,
  attribute view { text }?,
  attribute taskname { text }?,
  attribute value { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?,
  attribute property { text }?
ilasm =
  element ilasm {
    attlist.ilasm,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.ilasm &=
  attribute id { xsd:ID }?,
  attribute owner { text }?,
  attribute excludes { text }?,
  attribute extraoptions { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute targettype { text }?,
  attribute casesensitive { boolean }?,
  attribute verbose { boolean }?,
  attribute debug { boolean }?,
  attribute includes { text }?,
  attribute outputfile { text }?,
  attribute description { text }?,
  attribute includesfile { text }?,
  attribute failonerror { boolean }?,
  attribute taskname { text }?,
  attribute resourcefile { text }?,
  attribute srcdir { text }?,
  attribute excludesfile { text }?,
  attribute listing { boolean }?,
  attribute keyfile { text }?
soscheckout = element soscheckout { attlist.soscheckout, empty }
attlist.soscheckout &=
  attribute id { xsd:ID }?,
  attribute password { text }?,
  attribute comment { text }?,
  attribute nocompress { boolean }?,
  attribute version { text }?,
  attribute username { text }?,
  attribute sosserverpath { text }?,
  attribute label { text }?,
  attribute vssserverpath { text }?,
  attribute soscmd { text }?,
  attribute verbose { boolean }?,
  attribute localpath { text }?,
  attribute nocache { boolean }?,
  attribute projectpath { text }?,
  attribute description { text }?,
  attribute taskname { text }?,
  attribute recursive { boolean }?,
  attribute file { text }?,
  attribute soshome { text }?
apply =
  element apply {
    attlist.apply,
    (arg | fileset | env | targetfile | srcfile | mapper)*
  }
attlist.apply &=
  attribute id { xsd:ID }?,
  attribute resultproperty { text }?,
  attribute skipemptyfilesets { boolean }?,
  attribute type { "file" | "dir" | "both" }?,
  attribute failifexecutionfails { boolean }?,
  attribute command { text }?,
  attribute executable { text }?,
  attribute os { text }?,
  attribute output { text }?,
  attribute timeout { text }?,
  attribute dest { text }?,
  attribute dir { text }?,
  attribute description { text }?,
  attribute outputproperty { text }?,
  attribute failonerror { boolean }?,
  attribute append { boolean }?,
  attribute taskname { text }?,
  attribute vmlauncher { boolean }?,
  attribute newenvironment { boolean }?,
  attribute relative { boolean }?,
  attribute parallel { boolean }?
ccuncheckout = element ccuncheckout { attlist.ccuncheckout, empty }
attlist.ccuncheckout &=
  attribute id { xsd:ID }?,
  attribute keepcopy { boolean }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute cleartooldir { text }?,
  attribute viewpath { text }?
jarlib-resolve =
  element jarlib-resolve {
    attlist.jarlib-resolve, (ant | location | url | extension)*
  }
attlist.jarlib-resolve &=
  attribute id { xsd:ID }?,
  attribute checkextension { boolean }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute property { text }?,
  attribute failonerror { boolean }?
location = element location { attlist.location, empty }
attlist.location &=
  attribute id { xsd:ID }?,
  attribute location { text }?
url = element url { attlist.url, empty }
attlist.url &=
  attribute id { xsd:ID }?,
  attribute destdir { text }?,
  attribute url { text }?,
  attribute destfile { text }?
cvstagdiff = element cvstagdiff { attlist.cvstagdiff, empty }
attlist.cvstagdiff &=
  attribute id { xsd:ID }?,
  attribute passfile { text }?,
  attribute enddate { text }?,
  attribute port { text }?,
  attribute destfile { text }?,
  attribute quiet { boolean }?,
  attribute endtag { text }?,
  attribute compressionlevel { text }?,
  attribute cvsrsh { text }?,
  attribute cvsroot { text }?,
  attribute taskname { text }?,
  attribute startdate { text }?,
  attribute starttag { text }?,
  attribute package { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?,
  attribute compression { boolean }?
jlink =
  element jlink {
    attlist.jlink,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | or
     | contains
     | depend
     | mergefiles
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | addfiles
     | depth
     | and)*
  }
attlist.jlink &=
  attribute id { xsd:ID }?,
  attribute outfile { text }?,
  attribute compress { boolean }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute addfiles { text }?,
  attribute taskname { text }?,
  attribute casesensitive { boolean }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute mergefiles { text }?,
  attribute includes { text }?
mergefiles =
  element mergefiles {
    attlist.mergefiles,
    (fileset | dirset | filelist | pathelement | path)*
  }
attlist.mergefiles &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
addfiles =
  element addfiles {
    attlist.addfiles,
    (fileset | dirset | filelist | pathelement | path)*
  }
attlist.addfiles &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
javacc = element javacc { attlist.javacc, empty }
attlist.javacc &=
  attribute id { xsd:ID }?,
  attribute debugparser { boolean }?,
  attribute javacchome { text }?,
  attribute forcelacheck { boolean }?,
  attribute optimizetokenmanager { boolean }?,
  attribute commontokenaction { boolean }?,
  attribute buildtokenmanager { boolean }?,
  attribute sanitycheck { boolean }?,
  attribute buildparser { boolean }?,
  attribute otherambiguitycheck { text }?,
  attribute lookahead { text }?,
  attribute debuglookahead { boolean }?,
  attribute choiceambiguitycheck { text }?,
  attribute unicodeinput { boolean }?,
  attribute usercharstream { boolean }?,
  attribute debugtokenmanager { boolean }?,
  attribute description { text }?,
  attribute taskname { text }?,
  attribute outputdirectory { text }?,
  attribute cachetokens { boolean }?,
  attribute javaunicodeescape { boolean }?,
  attribute static { boolean }?,
  attribute target { text }?,
  attribute ignorecase { boolean }?,
  attribute usertokenmanager { boolean }?,
  attribute errorreporting { boolean }?
jarlib-manifest =
  element jarlib-manifest {
    attlist.jarlib-manifest,
    (options | \attribute | depends | extension)*
  }
attlist.jarlib-manifest &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute destfile { text }?
options =
  element options {
    attlist.options, (fileset | libfileset | extension)*
  }
attlist.options &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?
depends =
  element depends {
    attlist.depends, (fileset | libfileset | extension)*
  }
attlist.depends &=
  attribute id { xsd:ID }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?
pvcs = element pvcs { attlist.pvcs, pvcsproject* }
attlist.pvcs &=
  attribute id { xsd:ID }?,
  attribute updateonly { boolean }?,
  attribute force { text }?,
  attribute workspace { text }?,
  attribute pvcsbin { text }?,
  attribute pvcsproject { text }?,
  attribute filenameformat { text }?,
  attribute userid { text }?,
  attribute repository { text }?,
  attribute ignorereturncode { boolean }?,
  attribute linestart { text }?,
  attribute taskname { text }?,
  attribute promotiongroup { text }?,
  attribute label { text }?,
  attribute description { text }?
pvcsproject = element pvcsproject { attlist.pvcsproject, empty }
attlist.pvcsproject &=
  attribute id { xsd:ID }?,
  attribute name { text }?
chmod =
  element chmod {
    attlist.chmod,
    (mapper
     | \include
     | srcfile
     | exclude
     | targetfile
     | patternset
     | env
     | fileset
     | arg)*
  }
attlist.chmod &=
  attribute id { xsd:ID }?,
  attribute resultproperty { text }?,
  attribute perm { text }?,
  attribute skipemptyfilesets { boolean }?,
  attribute excludes { text }?,
  attribute failifexecutionfails { boolean }?,
  attribute type { "file" | "dir" | "both" }?,
  attribute command { text }?,
  attribute executable { text }?,
  attribute defaultexcludes { boolean }?,
  attribute os { text }?,
  attribute output { text }?,
  attribute timeout { text }?,
  attribute dest { text }?,
  attribute dir { text }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute outputproperty { text }?,
  attribute failonerror { boolean }?,
  attribute append { boolean }?,
  attribute taskname { text }?,
  attribute vmlauncher { boolean }?,
  attribute newenvironment { boolean }?,
  attribute file { text }?,
  attribute relative { boolean }?,
  attribute parallel { boolean }?
jar =
  element jar {
    attlist.jar,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | not
     | manifest
     | metainf
     | or
     | contains
     | depend
     | fileset
     | size
     | majority
     | filename
     | selector
     | includesfile
     | zipgroupfileset
     | zipfileset
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.jar &=
  attribute id { xsd:ID }?,
  attribute whenempty { "fail" | "skip" | "create" }?,
  attribute duplicate { "add" | "preserve" | "fail" }?,
  attribute excludes { text }?,
  attribute basedir { text }?,
  attribute encoding { text }?,
  attribute manifest { text }?,
  attribute jarfile { text }?,
  attribute defaultexcludes { boolean }?,
  attribute index { boolean }?,
  attribute update { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute destfile { text }?,
  attribute casesensitive { boolean }?,
  attribute includes { text }?,
  attribute description { text }?,
  attribute includesfile { text }?,
  attribute compress { boolean }?,
  attribute taskname { text }?,
  attribute filesonly { boolean }?,
  attribute file { text }?,
  attribute excludesfile { text }?,
  attribute zipfile { text }?
sound = element sound { attlist.sound, (fail | success)* }
attlist.sound &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute description { text }?
fail = element fail { attlist.fail, empty }
attlist.fail &=
  attribute id { xsd:ID }?,
  attribute loops { text }?,
  attribute source { text }?,
  attribute duration { text }?
success = element success { attlist.success, empty }
attlist.success &=
  attribute id { xsd:ID }?,
  attribute loops { text }?,
  attribute source { text }?,
  attribute duration { text }?
mparse =
  element mparse { attlist.mparse, (jvmarg | classpath | sourcepath)* }
attlist.mparse &=
  attribute id { xsd:ID }?,
  attribute cleanup { boolean }?,
  attribute verbose { boolean }?,
  attribute maxmemory { text }?,
  attribute metamatahome { text }?,
  attribute target { text }?,
  attribute debugparser { boolean }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute debugscanner { boolean }?
blgenclient = element blgenclient { attlist.blgenclient, classpath* }
attlist.blgenclient &=
  attribute id { xsd:ID }?,
  attribute debug { boolean }?,
  attribute classpath { text }?,
  attribute mode { text }?,
  attribute ejbjar { text }?,
  attribute version { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute clientjar { text }?
genkey = element genkey { attlist.genkey, dname* }
attlist.genkey &=
  attribute id { xsd:ID }?,
  attribute storepass { text }?,
  attribute sigalg { text }?,
  attribute verbose { boolean }?,
  attribute keypass { text }?,
  attribute dname { text }?,
  attribute keysize { text }?,
  attribute alias { text }?,
  attribute keyalg { text }?,
  attribute validity { text }?,
  attribute keystore { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute storetype { text }?
dname = element dname { attlist.dname, param* }
attlist.dname &= attribute id { xsd:ID }?
javah =
  element javah { attlist.javah, (classpath | class | bootclasspath)* }
attlist.javah &=
  attribute id { xsd:ID }?,
  attribute stubs { boolean }?,
  attribute force { boolean }?,
  attribute destdir { text }?,
  attribute classpath { text }?,
  attribute old { boolean }?,
  attribute outputfile { text }?,
  attribute class { text }?,
  attribute verbose { boolean }?,
  attribute bootclasspath { text }?,
  attribute bootclasspathref { xsd:IDREF }?,
  attribute classpathref { xsd:IDREF }?,
  attribute taskname { text }?,
  attribute description { text }?
class = element class { attlist.class, empty }
attlist.class &=
  attribute id { xsd:ID }?,
  attribute name { text }?
ccmreconfigure =
  element ccmreconfigure { attlist.ccmreconfigure, empty }
attlist.ccmreconfigure &=
  attribute id { xsd:ID }?,
  attribute ccmaction { text }?,
  attribute verbose { boolean }?,
  attribute taskname { text }?,
  attribute ccmproject { text }?,
  attribute description { text }?,
  attribute recurse { boolean }?,
  attribute ccmdir { text }?
unzip = element unzip { attlist.unzip, (fileset | patternset)* }
attlist.unzip &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute overwrite { boolean }?,
  attribute dest { text }?,
  attribute description { text }?,
  attribute src { text }?
javac =
  element javac {
    attlist.javac,
    (patternset
     | exclude
     | \include
     | custom
     | present
     | none
     | extdirs
     | not
     | src
     | or
     | contains
     | depend
     | classpath
     | sourcepath
     | size
     | majority
     | bootclasspath
     | filename
     | selector
     | includesfile
     | compilerarg
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.javac &=
  attribute id { xsd:ID }?,
  attribute target { text }?,
  attribute excludes { text }?,
  attribute verbose { boolean }?,
  attribute bootclasspathref { xsd:IDREF }?,
  attribute compiler { text }?,
  attribute executable { text }?,
  attribute debuglevel { text }?,
  attribute memoryinitialsize { text }?,
  attribute deprecation { boolean }?,
  attribute includeantruntime { boolean }?,
  attribute description { text }?,
  attribute sourcepathref { xsd:IDREF }?,
  attribute depend { boolean }?,
  attribute includes { text }?,
  attribute source { text }?,
  attribute includejavaruntime { boolean }?,
  attribute failonerror { boolean }?,
  attribute destdir { text }?,
  attribute debug { boolean }?,
  attribute classpath { text }?,
  attribute followsymlinks { boolean }?,
  attribute casesensitive { boolean }?,
  attribute defaultexcludes { boolean }?,
  attribute bootclasspath { text }?,
  attribute includesfile { text }?,
  attribute nowarn { boolean }?,
  attribute proceed { boolean }?,
  attribute taskname { text }?,
  attribute classpathref { xsd:IDREF }?,
  attribute fork { boolean }?,
  attribute srcdir { text }?,
  attribute memorymaximumsize { text }?,
  attribute optimize { boolean }?,
  attribute encoding { text }?,
  attribute excludesfile { text }?,
  attribute sourcepath { text }?,
  attribute listfiles { boolean }?,
  attribute extdirs { text }?
src =
  element src {
    attlist.src, (fileset | dirset | filelist | pathelement | path)*
  }
attlist.src &=
  attribute id { xsd:ID }?,
  attribute location { text }?,
  attribute refid { xsd:IDREF }?,
  attribute description { text }?,
  attribute path { text }?
p4add = element p4add { attlist.p4add, fileset* }
attlist.p4add &=
  attribute id { xsd:ID }?,
  attribute port { text }?,
  attribute client { text }?,
  attribute user { text }?,
  attribute changelist { text }?,
  attribute cmdopts { text }?,
  attribute view { text }?,
  attribute taskname { text }?,
  attribute description { text }?,
  attribute failonerror { boolean }?,
  attribute commandlength { text }?
soslabel = element soslabel { attlist.soslabel, empty }
attlist.soslabel &=
  attribute id { xsd:ID }?,
  attribute password { text }?,
  attribute comment { text }?,
  attribute nocompress { boolean }?,
  attribute version { text }?,
  attribute username { text }?,
  attribute sosserverpath { text }?,
  attribute label { text }?,
  attribute vssserverpath { text }?,
  attribute soscmd { text }?,
  attribute verbose { boolean }?,
  attribute localpath { text }?,
  attribute nocache { boolean }?,
  attribute projectpath { text }?,
  attribute description { text }?,
  attribute taskname { text }?,
  attribute recursive { boolean }?,
  attribute file { text }?,
  attribute soshome { text }?
jpcoverage =
  element jpcoverage {
    attlist.jpcoverage,
    (arg | socket | fileset | jvmarg | classpath | triggers | filters)*
  }
attlist.jpcoverage &=
  attribute id { xsd:ID }?,
  attribute applet { boolean }?,
  attribute recordfromstart { "coverage" | "none" | "all" }?,
  attribute vm { "java2" | "jdk118" | "jdk117" }?,
  attribute classname { text }?,
  attribute workingdir { text }?,
  attribute inputfile { text }?,
  attribute snapshotdir { text }?,
  attribute seedname { text }?,
  attribute javaexe { text }?,
  attribute home { text }?,
  attribute exitprompt { text }?,
  attribute taskname { text }?,
  attribute warnlevel { text }?,
  attribute finalsnapshot { text }?,
  attribute description { text }?,
  attribute tracknatives { boolean }?
triggers = element triggers { attlist.triggers, method* }
attlist.triggers &= attribute id { xsd:ID }?
method = element method { attlist.method, empty }
attlist.method &=
  attribute id { xsd:ID }?,
  attribute name { text }?,
  attribute event { text }?,
  attribute action { text }?,
  attribute param { text }?
vssget = element vssget { attlist.vssget, empty }
attlist.vssget &=
  attribute id { xsd:ID }?,
  attribute ssdir { text }?,
  attribute recursive { boolean }?,
  attribute date { text }?,
  attribute autoresponse { text }?,
  attribute quiet { boolean }?,
  attribute vsspath { text }?,
  attribute version { text }?,
  attribute serverpath { text }?,
  attribute login { text }?,
  attribute writable { boolean }?,
  attribute taskname { text }?,
  attribute label { text }?,
  attribute description { text }?,
  attribute localpath { text }?
deltree = element deltree { attlist.deltree, empty }
attlist.deltree &=
  attribute id { xsd:ID }?,
  attribute taskname { text }?,
  attribute dir { text }?,
  attribute description { text }?
ddcreator =
  element ddcreator {
    attlist.ddcreator,
    (patternset
     | exclude
     | \include
     | custom
     | none
     | present
     | not
     | or
     | contains
     | depend
     | size
     | majority
     | filename
     | selector
     | includesfile
     | date
     | excludesfile
     | depth
     | and)*
  }
attlist.ddcreator &=
  attribute id { xsd:ID }?,
  attribute classpath { text }?,
  attribute defaultexcludes { boolean }?,
  attribute followsymlinks { boolean }?,
  attribute taskname { text }?,
  attribute casesensitive { boolean }?,
  attribute dest { text }?,
  attribute description { text }?,
  attribute excludes { text }?,
  attribute includesfile { text }?,
  attribute excludesfile { text }?,
  attribute descriptors { text }?,
  attribute includes { text }?
start = project
