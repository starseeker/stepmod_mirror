<?xml version="1.0" encoding="iso-8859-1"?>
<?xml-stylesheet href="../make-menu.xsl" type="text/xsl"?><html>
   <head>
      <this-is section="index-entries" page="_A" subpage=""/>
      <!--
           Generated at 2010-10-29T18:20:48.427+01:00--><title>Saxonica: XSLT and XQuery Processing: A</title>
      <meta name="coverage" content="Worldwide"/>
      <meta name="copyright" content="Copyright Saxonica Ltd"/>
      <meta name="title" content="Saxonica: XSLT and XQuery Processing: A"/>
      <meta name="robots" content="noindex,nofollow"/>
      <link rel="stylesheet" href="../saxondocs.css" type="text/css"/>
   </head>
   <body class="main">
      <h1>A</h1>
      <p class="subhead">A2</p>
      <p>
         <a class="bodylink" href="../conditions/third-party-components.xml">A2 Base64 Encoder/Decoder</a>
      </p>
      <p class="subhead">A3</p>
      <p>
         <a class="bodylink" href="../conditions/third-party-components.xml">A3 Generic Sorter</a>
      </p>
      <p class="subhead">A4</p>
      <p>
         <a class="bodylink" href="../conditions/third-party-components.xml">A4 Unicode Normalization</a>
      </p>
      <p class="subhead">A5</p>
      <p>
         <a class="bodylink" href="../conditions/third-party-components.xml">A5 XPath Parser</a>
      </p>
      <p class="subhead">A6</p>
      <p>
         <a class="bodylink" href="../conditions/third-party-components.xml">A6 Regex Translator</a>
      </p>
      <p class="subhead">A7</p>
      <p>
         <a class="bodylink" href="../conditions/third-party-components.xml">A7 Ant Saxon Task</a>
      </p>
      <p class="subhead">ABS</p>
      <p>
         <a class="bodylink" href="../functions/intro/abs.xml">abs</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/abs.xml">abs($arg as numeric?) &#8594; numeric?</a>
      </p>
      <p class="subhead">ACCESS</p>
      <p>
         <a class="bodylink" href="../sourcedocs/streaming/streaming-templates.xml">Access to attributes and ancestors</a>
      </p>
      <p>
         <a class="bodylink" href="../sql-extension/example.xml">Running the example using Microsoft Access</a>
      </p>
      <p class="subhead">ACOS</p>
      <p>
         <a class="bodylink" href="../functions/intro/acos.xml">acos</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/fo30-93.xml">acos()</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/acos.xml">acos($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p class="subhead">ADDING</p>
      <p>
         <a class="bodylink" href="../extensions/map.xml">Adding a value to the map</a>
      </p>
      <p class="subhead">ADDITION</p>
      <p>
         <a class="bodylink" href="../expressions/arithmetic/addition.xml">Addition and subtraction</a>
      </p>
      <p class="subhead">ADDITIONAL</p>
      <p>
         <a class="bodylink" href="../xpath-api/jaxp-xpath/saxon-additions.xml">Additional Saxon methods</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/output-extras.xml">Additional serialization parameters</a>
      </p>
      <p class="subhead">ADJUST-DATETIME-TO-TIMEZONE</p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-dateTime-to-timezone.xml">adjust-dateTime-to-timezone</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-dateTime-to-timezone.xml">adjust-dateTime-to-timezone($arg as xs:dateTime?, $timezone as xs:dayTimeDuration?) &#8594; xs:dateTime</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-dateTime-to-timezone.xml">adjust-dateTime-to-timezone($arg as xs:dateTime?) &#8594; xs:dateTime</a>
      </p>
      <p class="subhead">ADJUST-DATE-TO-TIMEZONE</p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-date-to-timezone.xml">adjust-date-to-timezone</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-date-to-timezone.xml">adjust-date-to-timezone($arg as xs:date?, $timezone as xs:dayTimeDuration?) &#8594; xs:date?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-date-to-timezone.xml">adjust-date-to-timezone($arg as xs:date?) &#8594; xs:date?</a>
      </p>
      <p class="subhead">ADJUST-TIME-TO-TIMEZONE</p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-time-to-timezone.xml">adjust-time-to-timezone</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-time-to-timezone.xml">adjust-time-to-timezone($arg as xs:time?, $timezone as xs:dayTimeDuration?) &#8594; xs:time?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-time-to-timezone.xml">adjust-time-to-timezone($arg as xs:time?) &#8594; xs:time?</a>
      </p>
      <p class="subhead">ADJUST-TO-CIVIL-TIME</p>
      <p>
         <a class="bodylink" href="../extensions/functions/adjusttociviltime.xml">saxon:adjust-to-civil-time()</a>
      </p>
      <p class="subhead">ALGORITHMS</p>
      <p>
         <a class="bodylink" href="../conditions/algorithms.xml">Published Algorithms and Specifications</a>
      </p>
      <p class="subhead">ALL</p>
      <p>
         <a class="bodylink" href="../schema-processing/schema11/allgroups.xml">All Model Groups</a>
      </p>
      <p class="subhead">ALLOW-CYCLES</p>
      <p>
         <a class="bodylink" href="../using-xquery/extensions.xml">declare option saxon:allow-cycles</a>
      </p>
      <p class="subhead">AMONG</p>
      <p>
         <a class="bodylink" href="../extensibility/functions/choosing-overload.xml">Choosing among overloaded methods</a>
      </p>
      <p class="subhead">AN</p>
      <p>
         <a class="bodylink" href="../sourcedocs/builder-api.xml">Building a Source Document from an application</a>
      </p>
      <p>
         <a class="bodylink"
            href="../using-xquery/querycompilation/callingcompiledfromapp.xml">Calling Compiled Queries from an Application</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/embedding.xml">Invoking XSLT from an application</a>
      </p>
      <p class="subhead">ANALYSIS</p>
      <p>
         <a class="bodylink" href="../using-xsl/performanceanalysis.xml">Performance Analysis</a>
      </p>
      <p class="subhead">ANALYZE-STRING</p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/fo30-93.xml">fn:analyze-string()</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/functions/analyze-string.xml">saxon:analyze-string()</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/analyze-string.xml">xsl:analyze-string</a>
      </p>
      <p class="subhead">ANALYZE-STRING-RESULT</p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p class="subhead">ANCESTORS</p>
      <p>
         <a class="bodylink" href="../sourcedocs/streaming/streaming-templates.xml">Access to attributes and ancestors</a>
      </p>
      <p class="subhead">ANT</p>
      <p>
         <a class="bodylink" href="../conditions/third-party-components.xml">A7 Ant Saxon Task</a>
      </p>
      <p>
         <a class="bodylink" href="../about/installationjava/licensekey.xml">Ant</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/intro.xml">Ant</a>
      </p>
      <p>
         <a class="bodylink" href="../configuration/config-interfaces/config-ant.xml">Configuration when running Ant</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/ant-93.xml">Running Saxon from Ant</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/xsltfromant.xml">Running Saxon XSLT transformations from Ant</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/validation-from-ant.xml">Running validation from Ant</a>
      </p>
      <p class="subhead">ANYATOMICTYPE</p>
      <p>
         <a class="bodylink" href="../functions/intro/avg.xml">avg($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/avg.xml">avg($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $etc... as xs:anyAtomicType?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $etc... as xs:anyAtomicType?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $etc... as xs:anyAtomicType?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/current-grouping-key.xml">current-grouping-key() &#8594; xs:anyAtomicType</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/data.xml">data() &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/data.xml">data($arg as item()*) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType, $collation as xs:string) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType, $collation as xs:string) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/number.xml">number($arg as xs:anyAtomicType?) &#8594; xs:double</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType</a>
      </p>
      <p class="subhead">ANYURI</p>
      <p>
         <a class="bodylink" href="../functions/intro/base-uri.xml">base-uri() &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/base-uri.xml">base-uri($arg as node()?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/document-uri.xml">document-uri() &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/document-uri.xml">document-uri($arg as node()?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri.xml">namespace-uri() &#8594; xs:anyURI</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri.xml">namespace-uri($arg as node()?) &#8594; xs:anyURI</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri-for-prefix.xml">namespace-uri-for-prefix($prefix as xs:string?, $element as element()) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri-from-QName.xml">namespace-uri-from-QName($arg as xs:QName?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-uri.xml">resolve-uri($relative as xs:string?, $base as xs:string) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-uri.xml">resolve-uri($relative as xs:string?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/static-base-uri.xml">static-base-uri() &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/uri-collection.xml">uri-collection() &#8594; xs:anyURI*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/uri-collection.xml">uri-collection($arg as xs:string?) &#8594; xs:anyURI*</a>
      </p>
      <p class="subhead">API</p>
      <p>
         <a class="bodylink" href="../changes/intro/s9api-93.xml">Changes to the s9api API</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/schema90.xml">Changes to the Schema Component Model API</a>
      </p>
      <p>
         <a class="bodylink" href="../configuration/config-interfaces/config-dotnet.xml">Configuration using the .NET API</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/api-query/xqj.xml">Invoking XQuery using the XQJ API</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/intro.xml">Java API</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/s9api90.xml">New Java API</a>
      </p>
      <p>
         <a class="bodylink" href="../dotnet/dotnetapi.xml">Saxon API for .NET</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/oldapi90.xml">The .NET API</a>
      </p>
      <p>
         <a class="bodylink" href="../xpath-api/jaxp-xpath.xml">The JAXP XPath API</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/api-query/embedding.xml">The legacy XQuery API</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/oldapi90.xml">The XQJ API</a>
      </p>
      <p>
         <a class="bodylink" href="../xpath-api/intro.xml">XPath API for Java</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro91/xqj91.xml">XQJ (XQuery API for Java)</a>
      </p>
      <p class="subhead">APIS</p>
      <p>
         <a class="bodylink" href="../changes/s90/oldapi90.xml">Changes to existing APIs</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro91/internal91.xml">Internal APIs</a>
      </p>
      <p class="subhead">APPLICATION</p>
      <p>
         <a class="bodylink" href="../sourcedocs/builder-api.xml">Building a Source Document from an application</a>
      </p>
      <p>
         <a class="bodylink"
            href="../using-xquery/querycompilation/callingcompiledfromapp.xml">Calling Compiled Queries from an Application</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/embedding.xml">Invoking XSLT from an application</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/api-query.xml">Running Queries from a Java Application</a>
      </p>
      <p>
         <a class="bodylink" href="../samples/shakespeare.xml">Shakespeare XPath Sample Application</a>
      </p>
      <p class="subhead">APPLICATIONS</p>
      <p>
         <a class="bodylink" href="../samples/dotnetsamples.xml">Example applications for .NET</a>
      </p>
      <p>
         <a class="bodylink" href="../about/installationdotnet.xml">Sample applications</a>
      </p>
      <p>
         <a class="bodylink" href="../samples/intro.xml">Sample Saxon Applications</a>
      </p>
      <p class="subhead">APPLY-IMPORTS</p>
      <p>
         <a class="bodylink" href="../xsl-elements/apply-imports.xml">xsl:apply-imports</a>
      </p>
      <p class="subhead">APPLY-TEMPLATES</p>
      <p>
         <a class="bodylink" href="../xsl-elements/apply-templates.xml">xsl:apply-templates</a>
      </p>
      <p class="subhead">ARG</p>
      <p>
         <a class="bodylink" href="../functions/intro/abs.xml">abs($arg as numeric?) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/acos.xml">acos($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-dateTime-to-timezone.xml">adjust-dateTime-to-timezone($arg as xs:dateTime?, $timezone as xs:dayTimeDuration?) &#8594; xs:dateTime</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-dateTime-to-timezone.xml">adjust-dateTime-to-timezone($arg as xs:dateTime?) &#8594; xs:dateTime</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-date-to-timezone.xml">adjust-date-to-timezone($arg as xs:date?, $timezone as xs:dayTimeDuration?) &#8594; xs:date?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-date-to-timezone.xml">adjust-date-to-timezone($arg as xs:date?) &#8594; xs:date?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-time-to-timezone.xml">adjust-time-to-timezone($arg as xs:time?, $timezone as xs:dayTimeDuration?) &#8594; xs:time?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-time-to-timezone.xml">adjust-time-to-timezone($arg as xs:time?) &#8594; xs:time?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/asin.xml">asin($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/atan.xml">atan($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/avg.xml">avg($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/base-uri.xml">base-uri($arg as node()?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/boolean.xml">boolean($arg as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ceiling.xml">ceiling($arg as numeric?) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoints-to-string.xml">codepoints-to-string($arg as xs:integer*) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/collection.xml">collection($arg as xs:string?) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/count.xml">count($arg as item()*) &#8594; xs:integer</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/data.xml">data($arg as item()*) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/day-from-date.xml">day-from-date($arg as xs:date?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/day-from-dateTime.xml">day-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/days-from-duration.xml">days-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/document-uri.xml">document-uri($arg as node()?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/element-available.xml">element-available($arg as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/element-with-id.xml">element-with-id($arg as xs:string*, $node as node()) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/element-with-id.xml">element-with-id($arg as xs:string*) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/empty.xml">empty($arg as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/exactly-one.xml">exactly-one($arg as item()*) &#8594; item()</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/exists.xml">exists($arg as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/floor.xml">floor($arg as numeric?) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/generate-id.xml">generate-id($arg as node()?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/head.xml">head($arg as item()*) &#8594; item()?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/hours-from-dateTime.xml">hours-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/hours-from-duration.xml">hours-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/hours-from-time.xml">hours-from-time($arg as xs:time?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/id.xml">id($arg as xs:string*, $node as node()) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/id.xml">id($arg as xs:string*) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/idref.xml">idref($arg as xs:string*, $node as node()) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/idref.xml">idref($arg as xs:string*) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/local-name.xml">local-name($arg as node()?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/local-name-from-QName.xml">local-name-from-QName($arg as xs:QName?) &#8594; xs:NCName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/lower-case.xml">lower-case($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/minutes-from-dateTime.xml">minutes-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/minutes-from-duration.xml">minutes-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/minutes-from-time.xml">minutes-from-time($arg as xs:time?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/month-from-date.xml">month-from-date($arg as xs:date?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/month-from-dateTime.xml">month-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/months-from-duration.xml">months-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/name.xml">name($arg as node()?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri.xml">namespace-uri($arg as node()?) &#8594; xs:anyURI</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri-from-QName.xml">namespace-uri-from-QName($arg as xs:QName?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/nilled.xml">nilled($arg as node()?) &#8594; xs:boolean?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/node-name.xml">node-name($arg as node()?) &#8594; xs:QName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-space.xml">normalize-space($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-unicode.xml">normalize-unicode($arg as xs:string?, $normalizationForm as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-unicode.xml">normalize-unicode($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/not.xml">not($arg as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/number.xml">number($arg as xs:anyAtomicType?) &#8594; xs:double</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/one-or-more.xml">one-or-more($arg as item()*) &#8594; item()+</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/parse-xml.xml">parse-xml($arg as xs:string, $baseURI as xs:string) &#8594; document-node(element(*, xs:untyped))</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/parse-xml.xml">parse-xml($arg as xs:string) &#8594; document-node(element(*, xs:untyped))</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/prefix-from-QName.xml">prefix-from-QName($arg as xs:QName?) &#8594; xs:NCName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/reverse.xml">reverse($arg as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/root.xml">root($arg as node()?) &#8594; node()?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/round.xml">round($arg as numeric?, $precision as xs:integer) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/round.xml">round($arg as numeric?) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/round-half-to-even.xml">round-half-to-even($arg as numeric?, $precision as xs:integer) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/round-half-to-even.xml">round-half-to-even($arg as numeric?) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/seconds-from-dateTime.xml">seconds-from-dateTime($arg as xs:dateTime?) &#8594; xs:decimal?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/seconds-from-duration.xml">seconds-from-duration($arg as xs:duration?) &#8594; xs:decimal?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/seconds-from-time.xml">seconds-from-time($arg as xs:time?) &#8594; xs:decimal?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/serialize.xml">serialize($arg as node(), $params as node()*) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/serialize.xml">serialize($arg as node()) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sqrt.xml">sqrt($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string.xml">string($arg as item()?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-length.xml">string-length($arg as xs:string?) &#8594; xs:integer</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-to-codepoints.xml">string-to-codepoints($arg as xs:string?) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/system-property.xml">system-property($arg as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tail.xml">tail($arg as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/timezone-from-date.xml">timezone-from-date($arg as xs:date?) &#8594; xs:dayTimeDuration?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/timezone-from-dateTime.xml">timezone-from-dateTime($arg as xs:dateTime?) &#8594; xs:dayTimeDuration?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/timezone-from-time.xml">timezone-from-time($arg as xs:time?) &#8594; xs:dayTimeDuration?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/translate.xml">translate($arg as xs:string?, $mapString as xs:string, $transString as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/upper-case.xml">upper-case($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/uri-collection.xml">uri-collection($arg as xs:string?) &#8594; xs:anyURI*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/year-from-date.xml">year-from-date($arg as xs:date?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/year-from-dateTime.xml">year-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/years-from-duration.xml">years-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/zero-or-one.xml">zero-or-one($arg as item()*) &#8594; item()?</a>
      </p>
      <p class="subhead">ARG1</p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $etc... as xs:anyAtomicType?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/dateTime.xml">dateTime($arg1 as xs:date?, $arg2 as xs:time?) &#8594; xs:dateTime?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-join.xml">string-join($arg1 as xs:string*, $arg2 as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-join.xml">string-join($arg1 as xs:string*) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p class="subhead">ARG2</p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $etc... as xs:anyAtomicType?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/dateTime.xml">dateTime($arg1 as xs:date?, $arg2 as xs:time?) &#8594; xs:dateTime?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-join.xml">string-join($arg1 as xs:string*, $arg2 as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p class="subhead">ARGUMENTS</p>
      <p>
         <a class="bodylink" href="../extensibility/converting-args.net.xml">Converting Arguments to .NET Extension Functions</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/converting-args.xml">Converting Arguments to Java Extension Functions</a>
      </p>
      <p>
         <a class="bodylink"
            href="../extensibility/converting-args/converting-arguments.xml">Converting Method Arguments - General Rules</a>
      </p>
      <p class="subhead">ARITHMETIC</p>
      <p>
         <a class="bodylink" href="../expressions/arithmetic.xml">Arithmetic expressions</a>
      </p>
      <p class="subhead">ARITY</p>
      <p>
         <a class="bodylink" href="../functions/intro/function-available.xml">function-available($function as xs:string, $arity as xs:integer) &#8594; xs:boolean</a>
      </p>
      <p class="subhead">AS</p>
      <p>
         <a class="bodylink" href="../functions/intro/abs.xml">abs($arg as numeric?) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/acos.xml">acos($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-dateTime-to-timezone.xml">adjust-dateTime-to-timezone($arg as xs:dateTime?, $timezone as xs:dayTimeDuration?) &#8594; xs:dateTime</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-dateTime-to-timezone.xml">adjust-dateTime-to-timezone($arg as xs:dateTime?, $timezone as xs:dayTimeDuration?) &#8594; xs:dateTime</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-dateTime-to-timezone.xml">adjust-dateTime-to-timezone($arg as xs:dateTime?) &#8594; xs:dateTime</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-date-to-timezone.xml">adjust-date-to-timezone($arg as xs:date?, $timezone as xs:dayTimeDuration?) &#8594; xs:date?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-date-to-timezone.xml">adjust-date-to-timezone($arg as xs:date?, $timezone as xs:dayTimeDuration?) &#8594; xs:date?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-date-to-timezone.xml">adjust-date-to-timezone($arg as xs:date?) &#8594; xs:date?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-time-to-timezone.xml">adjust-time-to-timezone($arg as xs:time?, $timezone as xs:dayTimeDuration?) &#8594; xs:time?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-time-to-timezone.xml">adjust-time-to-timezone($arg as xs:time?, $timezone as xs:dayTimeDuration?) &#8594; xs:time?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-time-to-timezone.xml">adjust-time-to-timezone($arg as xs:time?) &#8594; xs:time?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/asin.xml">asin($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/atan.xml">atan($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/avg.xml">avg($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/base-uri.xml">base-uri($arg as node()?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/boolean.xml">boolean($arg as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../expressions/cast.xml">Cast as, Treat as</a>
      </p>
      <p>
         <a class="bodylink" href="../expressions/cast.xml">Cast as, Treat as</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ceiling.xml">ceiling($arg as numeric?) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoint-equal.xml">codepoint-equal($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:boolean?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoint-equal.xml">codepoint-equal($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:boolean?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoints-to-string.xml">codepoints-to-string($arg as xs:integer*) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/collection.xml">collection($arg as xs:string?) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $etc... as xs:anyAtomicType?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $etc... as xs:anyAtomicType?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $etc... as xs:anyAtomicType?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/cos.xml">cos($&#952; as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/count.xml">count($arg as item()*) &#8594; xs:integer</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/data.xml">data($arg as item()*) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/dateTime.xml">dateTime($arg1 as xs:date?, $arg2 as xs:time?) &#8594; xs:dateTime?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/dateTime.xml">dateTime($arg1 as xs:date?, $arg2 as xs:time?) &#8594; xs:dateTime?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/day-from-date.xml">day-from-date($arg as xs:date?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/day-from-dateTime.xml">day-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/days-from-duration.xml">days-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/deep-equal.xml">deep-equal($parameter1 as item()*, $parameter2 as item()*, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/deep-equal.xml">deep-equal($parameter1 as item()*, $parameter2 as item()*, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/deep-equal.xml">deep-equal($parameter1 as item()*, $parameter2 as item()*, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/deep-equal.xml">deep-equal($parameter1 as item()*, $parameter2 as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/deep-equal.xml">deep-equal($parameter1 as item()*, $parameter2 as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/doc.xml">doc($uri as xs:string?) &#8594; document-node()?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/doc-available.xml">doc-available($uri as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/document.xml">document($uri as item()*, $base as node()*) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/document.xml">document($uri as item()*, $base as node()*) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/document.xml">document($uri as item()*) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/document-uri.xml">document-uri($arg as node()?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/element-available.xml">element-available($arg as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/element-with-id.xml">element-with-id($arg as xs:string*, $node as node()) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/element-with-id.xml">element-with-id($arg as xs:string*, $node as node()) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/element-with-id.xml">element-with-id($arg as xs:string*) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/empty.xml">empty($arg as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/encode-for-uri.xml">encode-for-uri($uri-part as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName?, $description as xs:string, $error-object as item()*) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName?, $description as xs:string, $error-object as item()*) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName?, $description as xs:string, $error-object as item()*) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName?, $description as xs:string) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName?, $description as xs:string) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/escape-html-uri.xml">escape-html-uri($uri as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/exactly-one.xml">exactly-one($arg as item()*) &#8594; item()</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/exists.xml">exists($arg as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/filter.xml">filter($f as function(item()) as xs:boolean, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/filter.xml">filter($f as function(item()) as xs:boolean, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/filter.xml">filter($f as function(item()) as xs:boolean, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/floor.xml">floor($arg as numeric?) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/fold-left.xml">fold-left($f as function(item()*, item()) as item()*, $zero as item()*, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/fold-left.xml">fold-left($f as function(item()*, item()) as item()*, $zero as item()*, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/fold-left.xml">fold-left($f as function(item()*, item()) as item()*, $zero as item()*, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/fold-left.xml">fold-left($f as function(item()*, item()) as item()*, $zero as item()*, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/fold-right.xml">fold-right($f as function(item(), item()*) as item()*, $zero as item()*, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/fold-right.xml">fold-right($f as function(item(), item()*) as item()*, $zero as item()*, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/fold-right.xml">fold-right($f as function(item(), item()*) as item()*, $zero as item()*, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/fold-right.xml">fold-right($f as function(item(), item()*) as item()*, $zero as item()*, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-integer.xml">format-integer($value as xs:integer?, $picture as xs:string, $language as xs:language) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-integer.xml">format-integer($value as xs:integer?, $picture as xs:string, $language as xs:language) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-integer.xml">format-integer($value as xs:integer?, $picture as xs:string, $language as xs:language) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-integer.xml">format-integer($value as xs:integer?, $picture as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-integer.xml">format-integer($value as xs:integer?, $picture as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-number.xml">format-number($value as numeric?, $picture as xs:string, $decimal-format-name as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-number.xml">format-number($value as numeric?, $picture as xs:string, $decimal-format-name as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-number.xml">format-number($value as numeric?, $picture as xs:string, $decimal-format-name as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-number.xml">format-number($value as numeric?, $picture as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-number.xml">format-number($value as numeric?, $picture as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/function-arity.xml">function-arity($func as function(*)) &#8594; xs:integer</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/function-available.xml">function-available($function as xs:string, $arity as xs:integer) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/function-available.xml">function-available($function as xs:string, $arity as xs:integer) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/function-available.xml">function-available($function as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/function-name.xml">function-name($func as function(*)) &#8594; xs:QName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/generate-id.xml">generate-id($arg as node()?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/get-environment-variable.xml">get-environment-variable($name as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/head.xml">head($arg as item()*) &#8594; item()?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/hours-from-dateTime.xml">hours-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/hours-from-duration.xml">hours-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/hours-from-time.xml">hours-from-time($arg as xs:time?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/id.xml">id($arg as xs:string*, $node as node()) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/id.xml">id($arg as xs:string*, $node as node()) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/id.xml">id($arg as xs:string*) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/idref.xml">idref($arg as xs:string*, $node as node()) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/idref.xml">idref($arg as xs:string*, $node as node()) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/idref.xml">idref($arg as xs:string*) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType, $collation as xs:string) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType, $collation as xs:string) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType, $collation as xs:string) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/innermost.xml">innermost($seq as node()*) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/in-scope-prefixes.xml">in-scope-prefixes($element as element()) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/insert-before.xml">insert-before($target as item()*, $position as xs:integer, $inserts as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/insert-before.xml">insert-before($target as item()*, $position as xs:integer, $inserts as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/insert-before.xml">insert-before($target as item()*, $position as xs:integer, $inserts as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../expressions/instanceof.xml">Instance of and Castable as</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/iri-to-uri.xml">iri-to-uri($iri as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/lang.xml">lang($testlang as xs:string?, $node as node()) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/lang.xml">lang($testlang as xs:string?, $node as node()) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/lang.xml">lang($testlang as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/local-name.xml">local-name($arg as node()?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/local-name-from-QName.xml">local-name-from-QName($arg as xs:QName?) &#8594; xs:NCName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/lower-case.xml">lower-case($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/map.xml">map($f as function(item()) as item()*, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/map.xml">map($f as function(item()) as item()*, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/map.xml">map($f as function(item()) as item()*, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/map-pairs.xml">map-pairs($f as function(item(), item()) as item()*, $seq1 as item()*, $seq2 as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/map-pairs.xml">map-pairs($f as function(item(), item()) as item()*, $seq1 as item()*, $seq2 as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/map-pairs.xml">map-pairs($f as function(item(), item()) as item()*, $seq1 as item()*, $seq2 as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/map-pairs.xml">map-pairs($f as function(item(), item()) as item()*, $seq1 as item()*, $seq2 as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/matches.xml">matches($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/matches.xml">matches($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/matches.xml">matches($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/matches.xml">matches($input as xs:string?, $pattern as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/matches.xml">matches($input as xs:string?, $pattern as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/minutes-from-dateTime.xml">minutes-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/minutes-from-duration.xml">minutes-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/minutes-from-time.xml">minutes-from-time($arg as xs:time?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/month-from-date.xml">month-from-date($arg as xs:date?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/month-from-dateTime.xml">month-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/months-from-duration.xml">months-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/name.xml">name($arg as node()?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri.xml">namespace-uri($arg as node()?) &#8594; xs:anyURI</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri-for-prefix.xml">namespace-uri-for-prefix($prefix as xs:string?, $element as element()) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri-for-prefix.xml">namespace-uri-for-prefix($prefix as xs:string?, $element as element()) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri-from-QName.xml">namespace-uri-from-QName($arg as xs:QName?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/nilled.xml">nilled($arg as node()?) &#8594; xs:boolean?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/node-name.xml">node-name($arg as node()?) &#8594; xs:QName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-space.xml">normalize-space($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-unicode.xml">normalize-unicode($arg as xs:string?, $normalizationForm as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-unicode.xml">normalize-unicode($arg as xs:string?, $normalizationForm as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-unicode.xml">normalize-unicode($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/not.xml">not($arg as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/number.xml">number($arg as xs:anyAtomicType?) &#8594; xs:double</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/one-or-more.xml">one-or-more($arg as item()*) &#8594; item()+</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/outermost.xml">outermost($seq as node()*) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/parse-xml.xml">parse-xml($arg as xs:string, $baseURI as xs:string) &#8594; document-node(element(*, xs:untyped))</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/parse-xml.xml">parse-xml($arg as xs:string, $baseURI as xs:string) &#8594; document-node(element(*, xs:untyped))</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/parse-xml.xml">parse-xml($arg as xs:string) &#8594; document-node(element(*, xs:untyped))</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/prefix-from-QName.xml">prefix-from-QName($arg as xs:QName?) &#8594; xs:NCName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/QName.xml">QName($paramURI as xs:string?, $paramQName as xs:string) &#8594; xs:QName</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/QName.xml">QName($paramURI as xs:string?, $paramQName as xs:string) &#8594; xs:QName</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/remove.xml">remove($target as item()*, $position as xs:integer) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/remove.xml">remove($target as item()*, $position as xs:integer) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-QName.xml">resolve-QName($qname as xs:string?, $element as element()) &#8594; xs:QName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-QName.xml">resolve-QName($qname as xs:string?, $element as element()) &#8594; xs:QName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-uri.xml">resolve-uri($relative as xs:string?, $base as xs:string) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-uri.xml">resolve-uri($relative as xs:string?, $base as xs:string) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-uri.xml">resolve-uri($relative as xs:string?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/reverse.xml">reverse($arg as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/root.xml">root($arg as node()?) &#8594; node()?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/round.xml">round($arg as numeric?, $precision as xs:integer) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/round.xml">round($arg as numeric?, $precision as xs:integer) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/round.xml">round($arg as numeric?) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/round-half-to-even.xml">round-half-to-even($arg as numeric?, $precision as xs:integer) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/round-half-to-even.xml">round-half-to-even($arg as numeric?, $precision as xs:integer) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/round-half-to-even.xml">round-half-to-even($arg as numeric?) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink"
            href="../using-xquery/querycompilation/runningcompiledasservlet.xml">Running a Compiled Query as a Servlet</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/seconds-from-dateTime.xml">seconds-from-dateTime($arg as xs:dateTime?) &#8594; xs:decimal?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/seconds-from-duration.xml">seconds-from-duration($arg as xs:duration?) &#8594; xs:decimal?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/seconds-from-time.xml">seconds-from-time($arg as xs:time?) &#8594; xs:decimal?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/serialize.xml">serialize($arg as node(), $params as node()*) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/serialize.xml">serialize($arg as node(), $params as node()*) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/serialize.xml">serialize($arg as node()) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sin.xml">sin($&#952; as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sqrt.xml">sqrt($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string.xml">string($arg as item()?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-join.xml">string-join($arg1 as xs:string*, $arg2 as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-join.xml">string-join($arg1 as xs:string*, $arg2 as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-join.xml">string-join($arg1 as xs:string*) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-length.xml">string-length($arg as xs:string?) &#8594; xs:integer</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-to-codepoints.xml">string-to-codepoints($arg as xs:string?) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/subsequence.xml">subsequence($sourceSeq as item()*, $startingLoc as xs:double, $length as xs:double) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/subsequence.xml">subsequence($sourceSeq as item()*, $startingLoc as xs:double, $length as xs:double) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/subsequence.xml">subsequence($sourceSeq as item()*, $startingLoc as xs:double, $length as xs:double) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/subsequence.xml">subsequence($sourceSeq as item()*, $startingLoc as xs:double) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/subsequence.xml">subsequence($sourceSeq as item()*, $startingLoc as xs:double) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring.xml">substring($sourceString as xs:string?, $start as xs:double, $length as xs:double) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring.xml">substring($sourceString as xs:string?, $start as xs:double, $length as xs:double) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring.xml">substring($sourceString as xs:string?, $start as xs:double, $length as xs:double) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring.xml">substring($sourceString as xs:string?, $start as xs:double) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring.xml">substring($sourceString as xs:string?, $start as xs:double) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/system-property.xml">system-property($arg as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tail.xml">tail($arg as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tan.xml">tan($&#952; as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/timezone-from-date.xml">timezone-from-date($arg as xs:date?) &#8594; xs:dayTimeDuration?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/timezone-from-dateTime.xml">timezone-from-dateTime($arg as xs:dateTime?) &#8594; xs:dayTimeDuration?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/timezone-from-time.xml">timezone-from-time($arg as xs:time?) &#8594; xs:dayTimeDuration?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tokenize.xml">tokenize($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tokenize.xml">tokenize($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tokenize.xml">tokenize($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tokenize.xml">tokenize($input as xs:string?, $pattern as xs:string) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tokenize.xml">tokenize($input as xs:string?, $pattern as xs:string) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/trace.xml">trace($value as item()*, $label as xs:string) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/trace.xml">trace($value as item()*, $label as xs:string) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/translate.xml">translate($arg as xs:string?, $mapString as xs:string, $transString as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/translate.xml">translate($arg as xs:string?, $mapString as xs:string, $transString as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/translate.xml">translate($arg as xs:string?, $mapString as xs:string, $transString as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/type-available.xml">type-available($type as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unordered.xml">unordered($sourceSeq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text.xml">unparsed-text($href as xs:string?, $encoding as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text.xml">unparsed-text($href as xs:string?, $encoding as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text.xml">unparsed-text($href as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text-available.xml">unparsed-text-available($href as xs:string?, $encoding as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text-available.xml">unparsed-text-available($href as xs:string?, $encoding as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text-available.xml">unparsed-text-available($href as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/upper-case.xml">upper-case($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/uri-collection.xml">uri-collection($arg as xs:string?) &#8594; xs:anyURI*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/year-from-date.xml">year-from-date($arg as xs:date?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/year-from-dateTime.xml">year-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/years-from-duration.xml">years-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/zero-or-one.xml">zero-or-one($arg as item()*) &#8594; item()?</a>
      </p>
      <p class="subhead">ASIN</p>
      <p>
         <a class="bodylink" href="../functions/intro/asin.xml">asin</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/fo30-93.xml">asin()</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/asin.xml">asin($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p class="subhead">ASPECTS</p>
      <p>
         <a class="bodylink" href="../conformance/xpath20.xml">Implementation-defined aspects of Functions and Operators</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/serialization.xml">Implementation-defined aspects of Serialization</a>
      </p>
      <p class="subhead">ASSEMBLY</p>
      <p>
         <a class="bodylink" href="../extensibility/dotnetextensions.xml">assembly</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/dotnetextensions.xml">Global Assembly Cache</a>
      </p>
      <p class="subhead">ASSERTIONS</p>
      <p>
         <a class="bodylink" href="../schema-processing/schema11/assertions.xml">Assertions on Complex Types</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/schema11/simpleassert.xml">Assertions on Simple Types</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/extensions11/saxon.message.xml">Messages associated with assertions and other facets</a>
      </p>
      <p class="subhead">ASSIGN</p>
      <p>
         <a class="bodylink" href="../extensions/instructions/assign.xml">saxon:assign</a>
      </p>
      <p class="subhead">ASSIGNABLE</p>
      <p>
         <a class="bodylink" href="../extensions/attributes/assignable.xml">saxon:assignable</a>
      </p>
      <p class="subhead">ASSIGNMENT</p>
      <p>
         <a class="bodylink" href="../schema-processing/schema11/cta.xml">Conditional Type Assignment</a>
      </p>
      <p class="subhead">ASSOCIATED</p>
      <p>
         <a class="bodylink" href="../schema-processing/extensions11/saxon.message.xml">Messages associated with assertions and other facets</a>
      </p>
      <p class="subhead">ATAN</p>
      <p>
         <a class="bodylink" href="../functions/intro/atan.xml">atan</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/fo30-93.xml">atan()</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/atan.xml">atan($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p class="subhead">ATOMIC</p>
      <p>
         <a class="bodylink" href="../extensibility/converting-args/converting-atomic.xml">Converting Atomic Values</a>
      </p>
      <p>
         <a class="bodylink"
            href="../extensibility/converting-args.net/converting-atomic.net.xml">Converting Atomic Values and Sequences</a>
      </p>
      <p class="subhead">ATTRIBUTE</p>
      <p>
         <a class="bodylink" href="../changes/s90/schema90.xml">Expansion of attribute and element defaults</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/output-extras/method.xml">The method attribute</a>
      </p>
      <p>
         <a class="bodylink"
            href="../extensions/output-extras/character-representation.xml">The saxon:character-representation attribute</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/output-extras/double-space.xml">The saxon:double-space attribute</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/output-extras/indent-spaces.xml">The saxon:indent-spaces attribute</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/output-extras/line-length.xml">The saxon:line-length attribute</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/output-extras/next-in-chain.xml">The saxon:next-in-chain attribute</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/output-extras/recognize-binary.xml">The saxon:recognize-binary attribute</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/output-extras/require-well-formed.xml">The saxon:require-well-formed attribute</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/output-extras/supply-source-locator.xml">The saxon:supply-source-locator attribute</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/output-extras/suppress-indentation.xml">The saxon:suppress-indentation attribute</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/attribute.xml">xsl:attribute</a>
      </p>
      <p class="subhead">ATTRIBUTES</p>
      <p>
         <a class="bodylink" href="../sourcedocs/streaming/streaming-templates.xml">Access to attributes and ancestors</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/attributes.xml">Extension attributes (XSLT only)</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/output-extras/user-defined-atts.xml">User-defined serialization attributes</a>
      </p>
      <p class="subhead">ATTRIBUTE-SET</p>
      <p>
         <a class="bodylink" href="../xsl-elements/attribute-set.xml">xsl:attribute-set</a>
      </p>
      <p class="subhead">AVAILABLE-ENVIRONMENT-VARIABLES</p>
      <p>
         <a class="bodylink" href="../functions/intro/available-environment-variables.xml">available-environment-variables</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/available-environment-variables.xml">available-environment-variables() &#8594; xs:string*</a>
      </p>
      <p class="subhead">AVG</p>
      <p>
         <a class="bodylink" href="../functions/intro/avg.xml">avg</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/avg.xml">avg($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p class="subhead">AXIS</p>
      <p>
         <a class="bodylink" href="../expressions/axissteps.xml">Axis steps</a>
      </p>
      <table width="100%">
         <tr>
            <td>
               <p align="right"><a class="nav" href="_B.xml">Next</a></p>
            </td>
         </tr>
      </table>
   </body>
</html>