<?xml version="1.0" encoding="iso-8859-1"?>
<?xml-stylesheet href="../make-menu.xsl" type="text/xsl"?><html>
   <head>
      <this-is section="index-entries" page="_C" subpage=""/>
      <!--
           Generated at 2010-10-29T18:20:48.427+01:00--><title>Saxonica: XSLT and XQuery Processing: C</title>
      <meta name="coverage" content="Worldwide"/>
      <meta name="copyright" content="Copyright Saxonica Ltd"/>
      <meta name="title" content="Saxonica: XSLT and XQuery Processing: C"/>
      <meta name="robots" content="noindex,nofollow"/>
      <link rel="stylesheet" href="../saxondocs.css" type="text/css"/>
   </head>
   <body class="main">
      <h1>C</h1>
      <p class="subhead">CACHE</p>
      <p>
         <a class="bodylink" href="../extensibility/dotnetextensions.xml">Global Assembly Cache</a>
      </p>
      <p class="subhead">CALENDAR</p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p class="subhead">CALL</p>
      <p>
         <a class="bodylink" href="../extensions/functions/call.xml">saxon:call()</a>
      </p>
      <p class="subhead">CALLING</p>
      <p>
         <a class="bodylink" href="../extensibility/dotnetextensions/constructors.net.xml">Calling .NET Constructors</a>
      </p>
      <p>
         <a class="bodylink"
            href="../extensibility/dotnetextensions/instance-methods.net.xml">Calling .NET Instance-Level Methods</a>
      </p>
      <p>
         <a class="bodylink"
            href="../using-xquery/querycompilation/callingcompiledfromapp.xml">Calling Compiled Queries from an Application</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/functions/constructors.xml">Calling Java Constructors</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/functions/instance-methods.xml">Calling Java Instance-Level Methods</a>
      </p>
      <p>
         <a class="bodylink"
            href="../xpath-api/jaxp-xpath/jaxp-xpath-extension-functions.xml">Calling JAXP XPath extension functions</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/dotnetextensions/staticmethods.net.xml">Calling Static Methods in a .NET Class</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/functions/staticmethods.xml">Calling Static Methods in a Java Class</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/callingfunctions.xml">Calling XQuery Functions from Java</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/dotnetextensions.xml">Identifying and Calling Specific Methods</a>
      </p>
      <p class="subhead">CALLS</p>
      <p>
         <a class="bodylink" href="../expressions/functioncalls.xml">Function Calls</a>
      </p>
      <p class="subhead">CALL-TEMPLATE</p>
      <p>
         <a class="bodylink" href="../extensions/instructions/call-template.xml">saxon:call-template</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/call-template.xml">xsl:call-template</a>
      </p>
      <p class="subhead">CAMELCASE</p>
      <p>
         <a class="bodylink" href="../extensibility/functions.xml">camelCase</a>
      </p>
      <p class="subhead">CASES</p>
      <p>
         <a class="bodylink" href="../using-xquery/usecases.xml">Use Cases</a>
      </p>
      <p class="subhead">CAST</p>
      <p>
         <a class="bodylink" href="../expressions/cast.xml">Cast as, Treat as</a>
      </p>
      <p class="subhead">CASTABLE</p>
      <p>
         <a class="bodylink" href="../expressions/instanceof.xml">Instance of and Castable as</a>
      </p>
      <p class="subhead">CATALOG</p>
      <p>
         <a class="bodylink" href="../sourcedocs/collections.xml">Using catalog files</a>
      </p>
      <p class="subhead">CATCH</p>
      <p>
         <a class="bodylink" href="../extensions/instructions/catch.xml">saxon:catch</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/xquery11support/trycatch.xml">Try/Catch</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/xslt30.xml">xsl:try and xsl:catch</a>
      </p>
      <p class="subhead">CEILING</p>
      <p>
         <a class="bodylink" href="../functions/intro/ceiling.xml">ceiling</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ceiling.xml">ceiling($arg as numeric?) &#8594; numeric?</a>
      </p>
      <p class="subhead">CHANGES</p>
      <p>
         <a class="bodylink" href="../changes/intro.xml">Changes in this Release</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/oldapi90.xml">Changes to existing APIs</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/s9api-93.xml">Changes to the s9api API</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/schema90.xml">Changes to the Schema Component Model API</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/command-line-93.xml">Command line and configuration changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/xslt92.xml">Command line changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/xquery1092.xml">Command line changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/commandline90.xml">Command line changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/expressiontree90.xml">Expression tree changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/extensibility-93.xml">Extensibility changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/misc-93.xml">Internal changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/install92.xml">Licensing changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/namepool90.xml">NamePool changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/dot-net-93.xml">Saxon on .NET changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/schema90.xml">Schema-related changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xsd10-93.xml">XML Schema 1.0 changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xsd11-93.xml">XML Schema 1.1 changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xpath20-93.xml">XPath 2.0 and XQuery 1.0 changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xpath30-93.xml">XPath 3.0 changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/xpath90.xml">XPath changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/xquery1092.xml">XQJ changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xquery30-93.xml">XQuery 3.0 and XQuery Update changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xslt30-93.xml">XSLT 3.0 changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/xslt90.xml">XSLT changes</a>
      </p>
      <p class="subhead">CHARACTER</p>
      <p>
         <a class="bodylink" href="../conformance/encodings.xml">Character Encodings Supported</a>
      </p>
      <p class="subhead">CHARACTER-MAP</p>
      <p>
         <a class="bodylink" href="../xsl-elements/character-map.xml">xsl:character-map</a>
      </p>
      <p class="subhead">CHARACTER-REPRESENTATION</p>
      <p>
         <a class="bodylink"
            href="../extensions/output-extras/character-representation.xml">The saxon:character-representation attribute</a>
      </p>
      <p class="subhead">CHECKLIST</p>
      <p>
         <a class="bodylink" href="../conformance/xslt20.xml">Checklist of Implementation-Defined Items</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/xquery.xml">Checklist of Implementation-Defined Items</a>
      </p>
      <p class="subhead">CHOOSE</p>
      <p>
         <a class="bodylink" href="../xsl-elements/choose.xml">xsl:choose</a>
      </p>
      <p class="subhead">CIVIL</p>
      <p>
         <a class="bodylink" href="../extensions/functions/adjusttociviltime.xml">civil timezone</a>
      </p>
      <p class="subhead">CLASS</p>
      <p>
         <a class="bodylink" href="../extensibility/dotnetextensions/staticmethods.net.xml">Calling Static Methods in a .NET Class</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/functions/staticmethods.xml">Calling Static Methods in a Java Class</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/functions.xml">Identifying the Java Class</a>
      </p>
      <p class="subhead">CLASSPATH</p>
      <p>
         <a class="bodylink" href="../using-xsl/commandline.xml">classpath</a>
      </p>
      <p class="subhead">CLAUSES</p>
      <p>
         <a class="bodylink" href="../using-xquery/xquery11support/multiple-where.xml">Multiple where clauses</a>
      </p>
      <p class="subhead">CLOSE</p>
      <p>
         <a class="bodylink" href="../sql-extension/close.xml">sql:close</a>
      </p>
      <p class="subhead">CODE</p>
      <p>
         <a class="bodylink" href="../using-xquery/querycompilation.xml">Compiling Queries to Java code</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName?, $description as xs:string, $error-object as item()*) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName?, $description as xs:string) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink"
            href="../using-xquery/querycompilation/compilercommandline.xml">Java Code Generation from the Command Line</a>
      </p>
      <p>
         <a class="bodylink"
            href="../using-xquery/querycompilation/runningcompiledfromcommandline.xml">Running Compiled Code from the Command Line</a>
      </p>
      <p class="subhead">CODEPOINT</p>
      <p>
         <a class="bodylink" href="../extensibility/collation.xml">Unicode Codepoint Collation</a>
      </p>
      <p class="subhead">CODEPOINT-EQUAL</p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoint-equal.xml">codepoint-equal</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoint-equal.xml">codepoint-equal($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:boolean?</a>
      </p>
      <p class="subhead">CODEPOINTS-TO-STRING</p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoints-to-string.xml">codepoints-to-string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoints-to-string.xml">codepoints-to-string($arg as xs:integer*) &#8594; xs:string</a>
      </p>
      <p class="subhead">COLLATING</p>
      <p>
         <a class="bodylink" href="../extensibility/collation.xml">Implementing a collating sequence</a>
      </p>
      <p class="subhead">COLLATION</p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/deep-equal.xml">deep-equal($parameter1 as item()*, $parameter2 as item()*, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType, $collation as xs:string) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/instructions/collation.xml">saxon:collation</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/collation.xml">Unicode Codepoint Collation</a>
      </p>
      <p class="subhead">COLLATIONS</p>
      <p>
         <a class="bodylink"
            href="../configuration/configuration-file/config-collations.xml">The &lt;collations&gt; element</a>
      </p>
      <p class="subhead">COLLECTION</p>
      <p>
         <a class="bodylink" href="../functions/intro/collection.xml">collection</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/collection.xml">collection() &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/collection.xml">collection($arg as xs:string?) &#8594; node()*</a>
      </p>
      <p class="subhead">COLLECTIONS</p>
      <p>
         <a class="bodylink" href="../sourcedocs/collections.xml">Collections</a>
      </p>
      <p>
         <a class="bodylink" href="../sourcedocs/collections.xml">Registered Collections</a>
      </p>
      <p class="subhead">COLUMN</p>
      <p>
         <a class="bodylink" href="../sql-extension/insert.xml">sql:insert and sql:column</a>
      </p>
      <p>
         <a class="bodylink" href="../sql-extension/update.xml">sql:update and sql:column</a>
      </p>
      <p class="subhead">COLUMN-NUMBER</p>
      <p>
         <a class="bodylink" href="../extensions/functions/columnnumber.xml">saxon:column-number(node)</a>
      </p>
      <p class="subhead">COMMAND</p>
      <p>
         <a class="bodylink" href="../changes/intro/command-line-93.xml">Command line and configuration changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/xslt92.xml">Command line changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/xquery1092.xml">Command line changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/commandline90.xml">Command line changes</a>
      </p>
      <p>
         <a class="bodylink"
            href="../configuration/config-interfaces/config-commandline.xml">Configuration from the command line</a>
      </p>
      <p>
         <a class="bodylink"
            href="../using-xquery/querycompilation/compilercommandline.xml">Java Code Generation from the Command Line</a>
      </p>
      <p>
         <a class="bodylink"
            href="../using-xquery/querycompilation/runningcompiledfromcommandline.xml">Running Compiled Code from the Command Line</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/commandline.xml">Running Validation from the Command Line</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/commandline.xml">Running XQuery from the Command Line</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/commandline.xml">Running XSLT from the Command Line</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/saquerycmd.xml">Schema-Aware XQuery from the Command Line</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/satransformcmd.xml">Schema-Aware XSLT from the Command Line</a>
      </p>
      <p>
         <a class="bodylink" href="../sourcedocs/command-line.xml">Source Documents on the Command Line</a>
      </p>
      <p class="subhead">COMMENT</p>
      <p>
         <a class="bodylink" href="../xsl-elements/comment.xml">xsl:comment</a>
      </p>
      <p class="subhead">COMMERCIAL</p>
      <p>
         <a class="bodylink" href="../about/related.xml">Commercial Editors and Debuggers</a>
      </p>
      <p class="subhead">COMPARAND1</p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoint-equal.xml">codepoint-equal($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:boolean?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:integer?</a>
      </p>
      <p class="subhead">COMPARAND2</p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoint-equal.xml">codepoint-equal($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:boolean?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:integer?</a>
      </p>
      <p class="subhead">COMPARE</p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:integer?</a>
      </p>
      <p class="subhead">COMPARISONS</p>
      <p>
         <a class="bodylink" href="../expressions/comparisons.xml">Comparisons</a>
      </p>
      <p class="subhead">COMPILATION</p>
      <p>
         <a class="bodylink" href="../using-xquery/api-query/s9api-query.xml">Separate compilation of library modules</a>
      </p>
      <p class="subhead">COMPILED</p>
      <p>
         <a class="bodylink"
            href="../using-xquery/querycompilation/callingcompiledfromapp.xml">Calling Compiled Queries from an Application</a>
      </p>
      <p>
         <a class="bodylink"
            href="../using-xquery/querycompilation/runningcompiledasservlet.xml">Running a Compiled Query as a Servlet</a>
      </p>
      <p>
         <a class="bodylink"
            href="../using-xquery/querycompilation/runningcompiledfromcommandline.xml">Running Compiled Code from the Command Line</a>
      </p>
      <p class="subhead">COMPILE-QUERY</p>
      <p>
         <a class="bodylink" href="../extensions/functions/compile-query.xml">saxon:compile-query()</a>
      </p>
      <p class="subhead">COMPILE-STYLESHEET</p>
      <p>
         <a class="bodylink" href="../extensions/functions/compile-stylesheet.xml">saxon:compile-stylesheet()</a>
      </p>
      <p class="subhead">COMPILING</p>
      <p>
         <a class="bodylink" href="../using-xsl/compiling.xml">Compiling a Stylesheet</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/querycompilation.xml">Compiling Queries to Java code</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/api-query/embedding.xml">Compiling the Query</a>
      </p>
      <p class="subhead">COMPLEX</p>
      <p>
         <a class="bodylink" href="../schema-processing/schema11/assertions.xml">Assertions on Complex Types</a>
      </p>
      <p class="subhead">COMPONENT</p>
      <p>
         <a class="bodylink" href="../changes/s90/schema90.xml">Changes to the Schema Component Model API</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/scm.xml">Importing and Exporting Schema Component Models</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/schema90.xml">Serializing a Schema Component Model</a>
      </p>
      <p class="subhead">COMPONENTS</p>
      <p>
         <a class="bodylink" href="../conditions/intro.xml">components</a>
      </p>
      <p>
         <a class="bodylink" href="../conditions/redistributed.xml">Redistributed Components</a>
      </p>
      <p>
         <a class="bodylink" href="../conditions/third-party-components.xml">Third Party Source Components</a>
      </p>
      <p class="subhead">CONCAT</p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $etc... as xs:anyAtomicType?) &#8594; xs:string</a>
      </p>
      <p class="subhead">CONDITIONAL</p>
      <p>
         <a class="bodylink" href="../expressions/conditionals.xml">Conditional Expressions</a>
      </p>
      <p>
         <a class="bodylink" href="../sourcedocs/streaming/streaming-templates.xml">Conditional instructions</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/schema11/cta.xml">Conditional Type Assignment</a>
      </p>
      <p class="subhead">CONFIGURATION</p>
      <p>
         <a class="bodylink" href="../changes/intro/command-line-93.xml">Command line and configuration changes</a>
      </p>
      <p>
         <a class="bodylink" href="../configuration/config-features.xml">Configuration Features</a>
      </p>
      <p>
         <a class="bodylink"
            href="../configuration/config-interfaces/config-commandline.xml">Configuration from the command line</a>
      </p>
      <p>
         <a class="bodylink" href="../configuration/config-interfaces.xml">Configuration interfaces</a>
      </p>
      <p>
         <a class="bodylink" href="../configuration/config-interfaces/s9api-config.xml">Configuration using s9api</a>
      </p>
      <p>
         <a class="bodylink" href="../configuration/config-interfaces/config-dotnet.xml">Configuration using the .NET API</a>
      </p>
      <p>
         <a class="bodylink" href="../configuration/config-interfaces/config-xqj.xml">Configuration using XQJ</a>
      </p>
      <p>
         <a class="bodylink" href="../configuration/config-interfaces/config-ant.xml">Configuration when running Ant</a>
      </p>
      <p>
         <a class="bodylink" href="../configuration/intro.xml">Saxon Configuration</a>
      </p>
      <p>
         <a class="bodylink" href="../configuration/configuration-file.xml">The Saxon configuration file</a>
      </p>
      <p class="subhead">CONFORMANCE</p>
      <p>
         <a class="bodylink" href="../conformance/xquery.xml">Conformance Tests</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/other.xml">Conformance with other specifications</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/jaxp.xml">JAXP Conformance</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/intro.xml">Standards Conformance</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/xpath20.xml">XPath 2.0 conformance</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/xqj.xml">XQJ Conformance</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/xquery.xml">XQuery 1.0 Conformance</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/xslt20.xml">XSLT 2.0 conformance</a>
      </p>
      <p class="subhead">CONNECT</p>
      <p>
         <a class="bodylink" href="../sql-extension/connect.xml">sql:connect</a>
      </p>
      <p class="subhead">CONSTANTS</p>
      <p>
         <a class="bodylink" href="../expressions/literals.xml">Constants</a>
      </p>
      <p class="subhead">CONSTRAINTS</p>
      <p>
         <a class="bodylink"
            href="../schema-processing/extensions11/extended-uniqueness-constraints.xml">Saxon extensions to XSD uniqueness and referential constraints</a>
      </p>
      <p class="subhead">CONSTRUCTOR</p>
      <p>
         <a class="bodylink" href="../extensibility/functions.xml">Identifying the Java constructor, method, or field</a>
      </p>
      <p class="subhead">CONSTRUCTORS</p>
      <p>
         <a class="bodylink" href="../extensibility/dotnetextensions/constructors.net.xml">Calling .NET Constructors</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/functions/constructors.xml">Calling Java Constructors</a>
      </p>
      <p class="subhead">CONTAINS</p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p class="subhead">CONTENT</p>
      <p>
         <a class="bodylink" href="../schema-processing/schema11/open-content.xml">Open Content</a>
      </p>
      <p class="subhead">CONTENTHANDLER</p>
      <p>
         <a class="bodylink" href="../extensions/output-extras/method.xml">ContentHandler</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/output-extras/supply-source-locator.xml">ContentHandler</a>
      </p>
      <p class="subhead">CONTEXT</p>
      <p>
         <a class="bodylink" href="../using-xquery/xquery11support/contextitem.xml">Declaring the Initial Context Item</a>
      </p>
      <p>
         <a class="bodylink" href="../xpath-api/jaxp-xpath/context-node.xml">Setting the context item</a>
      </p>
      <p class="subhead">CONTINUE</p>
      <p>
         <a class="bodylink" href="../extensions/instructions/continue.xml">saxon:continue</a>
      </p>
      <p class="subhead">CONTRIBUTORS</p>
      <p>
         <a class="bodylink" href="../conditions/contributors.xml">Contributors</a>
      </p>
      <p class="subhead">CONTROLLING</p>
      <p>
         <a class="bodylink" href="../schema-processing/validation-api.xml">Controlling Validation from Java</a>
      </p>
      <p class="subhead">CONVERTING</p>
      <p>
         <a class="bodylink" href="../extensibility/converting-args.net.xml">Converting Arguments to .NET Extension Functions</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/converting-args.xml">Converting Arguments to Java Extension Functions</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/converting-args/converting-atomic.xml">Converting Atomic Values</a>
      </p>
      <p>
         <a class="bodylink"
            href="../extensibility/converting-args.net/converting-atomic.net.xml">Converting Atomic Values and Sequences</a>
      </p>
      <p>
         <a class="bodylink"
            href="../extensibility/converting-args/converting-arguments.xml">Converting Method Arguments - General Rules</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/converting-args/converting-node.xml">Converting Nodes</a>
      </p>
      <p>
         <a class="bodylink"
            href="../extensibility/converting-args.net/converting-node.net.xml">Converting Nodes and Sequences of Nodes</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/function-result.net.xml">Converting the Result of a .NET Extension Function</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/function-result.xml">Converting the Result of a Java Extension Function</a>
      </p>
      <p>
         <a class="bodylink"
            href="../extensibility/converting-args.net/converting-wrapped-dotnet.xml">Converting Wrapped .NET Objects</a>
      </p>
      <p>
         <a class="bodylink"
            href="../extensibility/converting-args/converting-wrapped-java.xml">Converting Wrapped Java Objects</a>
      </p>
      <p class="subhead">COPY</p>
      <p>
         <a class="bodylink" href="../xsl-elements/copy.xml">xsl:copy</a>
      </p>
      <p class="subhead">COPYING</p>
      <p>
         <a class="bodylink" href="../sourcedocs/streaming/burst-mode-streaming.xml">Example: selective copying</a>
      </p>
      <p class="subhead">COPY-OF</p>
      <p>
         <a class="bodylink" href="../xsl-elements/copy-of.xml">xsl:copy-of</a>
      </p>
      <p>
         <a class="bodylink" href="../sourcedocs/streaming/burst-mode-streaming.xml">XSLT example using xsl:copy-of</a>
      </p>
      <p class="subhead">COPYRIGHT</p>
      <p>
         <a class="bodylink" href="../conditions/intro.xml">copyright</a>
      </p>
      <p class="subhead">COS</p>
      <p>
         <a class="bodylink" href="../functions/intro/cos.xml">cos</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/fo30-93.xml">cos()</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/cos.xml">cos($&#952; as xs:double?) &#8594; xs:double?</a>
      </p>
      <p class="subhead">COUNT</p>
      <p>
         <a class="bodylink" href="../functions/intro/count.xml">count</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/count.xml">count($arg as item()*) &#8594; xs:integer</a>
      </p>
      <p class="subhead">CPUS</p>
      <p>
         <a class="bodylink" href="../extensions/attributes/threads.xml">multi-core CPUs</a>
      </p>
      <p class="subhead">CREATING</p>
      <p>
         <a class="bodylink" href="../extensions/map.xml">Creating a new map</a>
      </p>
      <p class="subhead">CURRENT</p>
      <p>
         <a class="bodylink" href="../functions/intro/current.xml">current</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/current.xml">current() &#8594; item()</a>
      </p>
      <p class="subhead">CURRENT-DATE</p>
      <p>
         <a class="bodylink" href="../functions/intro/current-date.xml">current-date</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/current-date.xml">current-date() &#8594; xs:date</a>
      </p>
      <p class="subhead">CURRENT-DATETIME</p>
      <p>
         <a class="bodylink" href="../functions/intro/current-dateTime.xml">current-dateTime</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/current-dateTime.xml">current-dateTime() &#8594; xs:dateTimeStamp</a>
      </p>
      <p class="subhead">CURRENT-GROUP</p>
      <p>
         <a class="bodylink" href="../functions/intro/current-group.xml">current-group</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/current-group.xml">current-group() &#8594; item()</a>
      </p>
      <p class="subhead">CURRENT-GROUPING-KEY</p>
      <p>
         <a class="bodylink" href="../functions/intro/current-grouping-key.xml">current-grouping-key</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/current-grouping-key.xml">current-grouping-key() &#8594; xs:anyAtomicType</a>
      </p>
      <p class="subhead">CURRENT-MODE-NAME</p>
      <p>
         <a class="bodylink" href="../extensions/functions/currentmode.xml">saxon:current-mode-name()</a>
      </p>
      <p class="subhead">CURRENT-TIME</p>
      <p>
         <a class="bodylink" href="../functions/intro/current-time.xml">current-time</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/current-time.xml">current-time() &#8594; xs:time</a>
      </p>
      <p class="subhead">CUSTOMIZING</p>
      <p>
         <a class="bodylink" href="../extensibility/output-filters.xml">Customizing Serialization</a>
      </p>
      <table width="100%">
         <tr>
            <td>
               <p align="right"><a class="nav" href="_D.xml">Next</a></p>
            </td>
         </tr>
      </table>
   </body>
</html>