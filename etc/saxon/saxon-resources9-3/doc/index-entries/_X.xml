<?xml version="1.0" encoding="iso-8859-1"?>
<?xml-stylesheet href="../make-menu.xsl" type="text/xsl"?><html>
   <head>
      <this-is section="index-entries" page="_X" subpage=""/>
      <!--
           Generated at 2010-10-29T18:20:48.427+01:00--><title>Saxonica: XSLT and XQuery Processing: X</title>
      <meta name="coverage" content="Worldwide"/>
      <meta name="copyright" content="Copyright Saxonica Ltd"/>
      <meta name="title" content="Saxonica: XSLT and XQuery Processing: X"/>
      <meta name="robots" content="noindex,nofollow"/>
      <link rel="stylesheet" href="../saxondocs.css" type="text/css"/>
   </head>
   <body class="main">
      <h1>X</h1>
      <p class="subhead">XERCES</p>
      <p>
         <a class="bodylink" href="../conditions/intro.xml">Xerces</a>
      </p>
      <p class="subhead">XINCLUDE</p>
      <p>
         <a class="bodylink" href="../sourcedocs/XInclude.xml">XInclude processing</a>
      </p>
      <p class="subhead">XML</p>
      <p>
         <a class="bodylink" href="../sourcedocs/xml11.xml">Saxon and XML 1.1</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/extensions11.xml">Saxon extensions to XML Schema 1.1</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/parsing92.xml">XML Parsing and Serialization</a>
      </p>
      <p>
         <a class="bodylink" href="../dotnet/xmlparsing.xml">XML Parsing in .NET</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/xsd92.xml">XML Schema</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/xsd92.xml">XML Schema 1.0</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro91/schema10support91.xml">XML Schema 1.0</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/schema.xml">XML Schema 1.0</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xsd10-93.xml">XML Schema 1.0 changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/xsd92.xml">XML Schema 1.1</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro91/schema11support91.xml">XML Schema 1.1</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/schema11.xml">XML Schema 1.1</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/schema11.xml">XML Schema 1.1</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xsd11-93.xml">XML Schema 1.1 changes</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/intro.xml">XML Schema Processing</a>
      </p>
      <p class="subhead">XOM</p>
      <p>
         <a class="bodylink" href="../sourcedocs/thirdparty.xml">Third-party Object Models: DOM, JDOM, XOM, and DOM4J</a>
      </p>
      <p class="subhead">XPATH</p>
      <p>
         <a class="bodylink" href="../conditions/third-party-components.xml">A5 XPath Parser</a>
      </p>
      <p>
         <a class="bodylink"
            href="../xpath-api/jaxp-xpath/jaxp-xpath-extension-functions.xml">Calling JAXP XPath extension functions</a>
      </p>
      <p>
         <a class="bodylink" href="../xpath-api/s9api-xpath.xml">Evaluating XPath Expressions using s9api</a>
      </p>
      <p>
         <a class="bodylink" href="../expressions/xpath30new.xml">New features in XPath 3.0</a>
      </p>
      <p>
         <a class="bodylink" href="../xpath-api/jaxp-xpath/factory.xml">Selecting the XPath implementation</a>
      </p>
      <p>
         <a class="bodylink" href="../samples/shakespeare.xml">Shakespeare XPath Sample Application</a>
      </p>
      <p>
         <a class="bodylink" href="../xpath-api/jaxp-xpath.xml">The JAXP XPath API</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xpath20-93.xml">XPath 2.0 and XQuery 1.0 changes</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/xpath20.xml">XPath 2.0 conformance</a>
      </p>
      <p>
         <a class="bodylink" href="../expressions/intro.xml">XPath 2.0 Expression Syntax</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xpath30-93.xml">XPath 3.0 changes</a>
      </p>
      <p>
         <a class="bodylink" href="../xpath-api/intro.xml">XPath API for Java</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/xpath90.xml">XPath changes</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro.xml">XSLT 2.0 and XPath 2.0 Functions</a>
      </p>
      <p class="subhead">XQJ</p>
      <p>
         <a class="bodylink" href="../configuration/config-interfaces/config-xqj.xml">Configuration using XQJ</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/api-query/xqj.xml">Invoking XQuery using the XQJ API</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/oldapi90.xml">The XQJ API</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro91/xqj91.xml">XQJ (XQuery API for Java)</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/xquery1092.xml">XQJ changes</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/xqj.xml">XQJ Conformance</a>
      </p>
      <p class="subhead">XQUERY</p>
      <p>
         <a class="bodylink" href="../using-xquery/callingfunctions.xml">Calling XQuery Functions from Java</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/api-query/xqj.xml">Invoking XQuery using the XQJ API</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/xquery11support/miscellaneous.xml">Miscellaneous XQuery 3.0 Features</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/commandline.xml">Running XQuery from the Command Line</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/saqueryapi.xml">Schema-Aware XQuery from Java</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/saquerycmd.xml">Schema-Aware XQuery from the Command Line</a>
      </p>
      <p>
         <a class="bodylink" href="../configuration/configuration-file/config-xquery.xml">The &lt;xquery&gt; element</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/api-query/embedding.xml">The legacy XQuery API</a>
      </p>
      <p>
         <a class="bodylink" href="../extensions/output-extras/xquery-method.xml">The saxon:xquery serialization method</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/api-query/s9api-query.xml">Using s9api for XQuery</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/intro.xml">Using XQuery</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/update.xml">Using XQuery Update</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xpath20-93.xml">XPath 2.0 and XQuery 1.0 changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro91/xqj91.xml">XQJ (XQuery API for Java)</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/xquery1092.xml">XQuery 1.0</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro91/xquery91.xml">XQuery 1.0</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/xquery.xml">XQuery 1.0 Conformance</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/xquery1192.xml">XQuery 1.1</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xquery30-93.xml">XQuery 3.0 and XQuery Update changes</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xquery30-93.xml">XQuery 3.0 and XQuery Update changes</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xquery/xquery11support.xml">XQuery 3.0 Support</a>
      </p>
      <p>
         <a class="bodylink" href="../about/related.xml">XQuery Documentation</a>
      </p>
      <p>
         <a class="bodylink" href="../sourcedocs/streaming/burst-mode-streaming.xml">XQuery example using the saxon:stream pragma</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/update.xml">XQuery Update 1.0</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/updates92.xml">XQuery Updates</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro91/xqupdate91.xml">XQuery Updates</a>
      </p>
      <p class="subhead">XS</p>
      <p>
         <a class="bodylink" href="../functions/intro/acos.xml">acos($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/acos.xml">acos($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-dateTime-to-timezone.xml">adjust-dateTime-to-timezone($arg as xs:dateTime?, $timezone as xs:dayTimeDuration?) &#8594; xs:dateTime</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-dateTime-to-timezone.xml">adjust-dateTime-to-timezone($arg as xs:dateTime?, $timezone as xs:dayTimeDuration?) &#8594; xs:dateTime</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-dateTime-to-timezone.xml">adjust-dateTime-to-timezone($arg as xs:dateTime?, $timezone as xs:dayTimeDuration?) &#8594; xs:dateTime</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-dateTime-to-timezone.xml">adjust-dateTime-to-timezone($arg as xs:dateTime?) &#8594; xs:dateTime</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-dateTime-to-timezone.xml">adjust-dateTime-to-timezone($arg as xs:dateTime?) &#8594; xs:dateTime</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-date-to-timezone.xml">adjust-date-to-timezone($arg as xs:date?, $timezone as xs:dayTimeDuration?) &#8594; xs:date?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-date-to-timezone.xml">adjust-date-to-timezone($arg as xs:date?, $timezone as xs:dayTimeDuration?) &#8594; xs:date?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-date-to-timezone.xml">adjust-date-to-timezone($arg as xs:date?, $timezone as xs:dayTimeDuration?) &#8594; xs:date?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-date-to-timezone.xml">adjust-date-to-timezone($arg as xs:date?) &#8594; xs:date?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-date-to-timezone.xml">adjust-date-to-timezone($arg as xs:date?) &#8594; xs:date?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-time-to-timezone.xml">adjust-time-to-timezone($arg as xs:time?, $timezone as xs:dayTimeDuration?) &#8594; xs:time?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-time-to-timezone.xml">adjust-time-to-timezone($arg as xs:time?, $timezone as xs:dayTimeDuration?) &#8594; xs:time?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-time-to-timezone.xml">adjust-time-to-timezone($arg as xs:time?, $timezone as xs:dayTimeDuration?) &#8594; xs:time?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-time-to-timezone.xml">adjust-time-to-timezone($arg as xs:time?) &#8594; xs:time?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/adjust-time-to-timezone.xml">adjust-time-to-timezone($arg as xs:time?) &#8594; xs:time?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/analyze-string.xml">analyze-string($input as xs:string?, $pattern as xs:string) &#8594; element(fn:analyze-string-result)</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/asin.xml">asin($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/asin.xml">asin($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/atan.xml">atan($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/atan.xml">atan($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/available-environment-variables.xml">available-environment-variables() &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/avg.xml">avg($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/avg.xml">avg($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/base-uri.xml">base-uri() &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/base-uri.xml">base-uri($arg as node()?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/boolean.xml">boolean($arg as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoint-equal.xml">codepoint-equal($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:boolean?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoint-equal.xml">codepoint-equal($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:boolean?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoint-equal.xml">codepoint-equal($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:boolean?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoints-to-string.xml">codepoints-to-string($arg as xs:integer*) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/codepoints-to-string.xml">codepoints-to-string($arg as xs:integer*) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/collection.xml">collection($arg as xs:string?) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/compare.xml">compare($comparand1 as xs:string?, $comparand2 as xs:string?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $etc... as xs:anyAtomicType?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $etc... as xs:anyAtomicType?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $etc... as xs:anyAtomicType?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/concat.xml">concat($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, $etc... as xs:anyAtomicType?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/contains.xml">contains($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/cos.xml">cos($&#952; as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/cos.xml">cos($&#952; as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/count.xml">count($arg as item()*) &#8594; xs:integer</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/current-date.xml">current-date() &#8594; xs:date</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/current-dateTime.xml">current-dateTime() &#8594; xs:dateTimeStamp</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/current-grouping-key.xml">current-grouping-key() &#8594; xs:anyAtomicType</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/current-time.xml">current-time() &#8594; xs:time</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/data.xml">data() &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/data.xml">data($arg as item()*) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/dateTime.xml">dateTime($arg1 as xs:date?, $arg2 as xs:time?) &#8594; xs:dateTime?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/dateTime.xml">dateTime($arg1 as xs:date?, $arg2 as xs:time?) &#8594; xs:dateTime?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/dateTime.xml">dateTime($arg1 as xs:date?, $arg2 as xs:time?) &#8594; xs:dateTime?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/day-from-date.xml">day-from-date($arg as xs:date?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/day-from-date.xml">day-from-date($arg as xs:date?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/day-from-dateTime.xml">day-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/day-from-dateTime.xml">day-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/days-from-duration.xml">days-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/days-from-duration.xml">days-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/deep-equal.xml">deep-equal($parameter1 as item()*, $parameter2 as item()*, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/deep-equal.xml">deep-equal($parameter1 as item()*, $parameter2 as item()*, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/deep-equal.xml">deep-equal($parameter1 as item()*, $parameter2 as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/default-collation.xml">default-collation() &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/distinct-values.xml">distinct-values($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/doc.xml">doc($uri as xs:string?) &#8594; document-node()?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/doc-available.xml">doc-available($uri as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/doc-available.xml">doc-available($uri as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/document-uri.xml">document-uri() &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/document-uri.xml">document-uri($arg as node()?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/element-available.xml">element-available($arg as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/element-available.xml">element-available($arg as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/element-with-id.xml">element-with-id($arg as xs:string*, $node as node()) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/element-with-id.xml">element-with-id($arg as xs:string*) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/empty.xml">empty($arg as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/encode-for-uri.xml">encode-for-uri($uri-part as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/encode-for-uri.xml">encode-for-uri($uri-part as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/ends-with.xml">ends-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName?, $description as xs:string, $error-object as item()*) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName?, $description as xs:string, $error-object as item()*) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName?, $description as xs:string) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName?, $description as xs:string) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/error.xml">error($code as xs:QName) &#8594; none</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/escape-html-uri.xml">escape-html-uri($uri as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/escape-html-uri.xml">escape-html-uri($uri as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/exists.xml">exists($arg as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/false.xml">false() &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/filter.xml">filter($f as function(item()) as xs:boolean, $seq as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-date.xml">format-date($value as xs:date?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-dateTime.xml">format-dateTime($value as xs:dateTime?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-integer.xml">format-integer($value as xs:integer?, $picture as xs:string, $language as xs:language) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-integer.xml">format-integer($value as xs:integer?, $picture as xs:string, $language as xs:language) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-integer.xml">format-integer($value as xs:integer?, $picture as xs:string, $language as xs:language) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-integer.xml">format-integer($value as xs:integer?, $picture as xs:string, $language as xs:language) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-integer.xml">format-integer($value as xs:integer?, $picture as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-integer.xml">format-integer($value as xs:integer?, $picture as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-integer.xml">format-integer($value as xs:integer?, $picture as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-number.xml">format-number($value as numeric?, $picture as xs:string, $decimal-format-name as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-number.xml">format-number($value as numeric?, $picture as xs:string, $decimal-format-name as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-number.xml">format-number($value as numeric?, $picture as xs:string, $decimal-format-name as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-number.xml">format-number($value as numeric?, $picture as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-number.xml">format-number($value as numeric?, $picture as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string, $language as xs:string?, $calendar as xs:string?, $place as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/format-time.xml">format-time($value as xs:time?, $picture as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/function-arity.xml">function-arity($func as function(*)) &#8594; xs:integer</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/function-available.xml">function-available($function as xs:string, $arity as xs:integer) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/function-available.xml">function-available($function as xs:string, $arity as xs:integer) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/function-available.xml">function-available($function as xs:string, $arity as xs:integer) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/function-available.xml">function-available($function as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/function-available.xml">function-available($function as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/function-name.xml">function-name($func as function(*)) &#8594; xs:QName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/generate-id.xml">generate-id() &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/generate-id.xml">generate-id($arg as node()?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/get-environment-variable.xml">get-environment-variable($name as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/get-environment-variable.xml">get-environment-variable($name as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/hours-from-dateTime.xml">hours-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/hours-from-dateTime.xml">hours-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/hours-from-duration.xml">hours-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/hours-from-duration.xml">hours-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/hours-from-time.xml">hours-from-time($arg as xs:time?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/hours-from-time.xml">hours-from-time($arg as xs:time?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/id.xml">id($arg as xs:string*, $node as node()) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/id.xml">id($arg as xs:string*) &#8594; element()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/idref.xml">idref($arg as xs:string*, $node as node()) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/idref.xml">idref($arg as xs:string*) &#8594; node()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/implicit-timezone.xml">implicit-timezone() &#8594; xs:dayTimeDuration</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType, $collation as xs:string) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType, $collation as xs:string) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType, $collation as xs:string) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType, $collation as xs:string) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/index-of.xml">index-of($seq as xs:anyAtomicType*, $search as xs:anyAtomicType) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/in-scope-prefixes.xml">in-scope-prefixes($element as element()) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/insert-before.xml">insert-before($target as item()*, $position as xs:integer, $inserts as item()*) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/iri-to-uri.xml">iri-to-uri($iri as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/iri-to-uri.xml">iri-to-uri($iri as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/lang.xml">lang($testlang as xs:string?, $node as node()) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/lang.xml">lang($testlang as xs:string?, $node as node()) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/lang.xml">lang($testlang as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/lang.xml">lang($testlang as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/last.xml">last() &#8594; xs:integer</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/local-name.xml">local-name() &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/local-name.xml">local-name($arg as node()?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/local-name-from-QName.xml">local-name-from-QName($arg as xs:QName?) &#8594; xs:NCName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/local-name-from-QName.xml">local-name-from-QName($arg as xs:QName?) &#8594; xs:NCName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/lower-case.xml">lower-case($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/lower-case.xml">lower-case($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/matches.xml">matches($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/matches.xml">matches($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/matches.xml">matches($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/matches.xml">matches($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/matches.xml">matches($input as xs:string?, $pattern as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/matches.xml">matches($input as xs:string?, $pattern as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/matches.xml">matches($input as xs:string?, $pattern as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/max.xml">max($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*, $collation as xs:string) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/min.xml">min($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/minutes-from-dateTime.xml">minutes-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/minutes-from-dateTime.xml">minutes-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/minutes-from-duration.xml">minutes-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/minutes-from-duration.xml">minutes-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/minutes-from-time.xml">minutes-from-time($arg as xs:time?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/minutes-from-time.xml">minutes-from-time($arg as xs:time?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/month-from-date.xml">month-from-date($arg as xs:date?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/month-from-date.xml">month-from-date($arg as xs:date?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/month-from-dateTime.xml">month-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/month-from-dateTime.xml">month-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/months-from-duration.xml">months-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/months-from-duration.xml">months-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/name.xml">name() &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/name.xml">name($arg as node()?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri.xml">namespace-uri() &#8594; xs:anyURI</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri.xml">namespace-uri($arg as node()?) &#8594; xs:anyURI</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri-for-prefix.xml">namespace-uri-for-prefix($prefix as xs:string?, $element as element()) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri-for-prefix.xml">namespace-uri-for-prefix($prefix as xs:string?, $element as element()) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri-from-QName.xml">namespace-uri-from-QName($arg as xs:QName?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/namespace-uri-from-QName.xml">namespace-uri-from-QName($arg as xs:QName?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/nilled.xml">nilled($arg as node()?) &#8594; xs:boolean?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/node-name.xml">node-name() &#8594; xs:QName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/node-name.xml">node-name($arg as node()?) &#8594; xs:QName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-space.xml">normalize-space() &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-space.xml">normalize-space($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-space.xml">normalize-space($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-unicode.xml">normalize-unicode($arg as xs:string?, $normalizationForm as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-unicode.xml">normalize-unicode($arg as xs:string?, $normalizationForm as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-unicode.xml">normalize-unicode($arg as xs:string?, $normalizationForm as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-unicode.xml">normalize-unicode($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/normalize-unicode.xml">normalize-unicode($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/not.xml">not($arg as item()*) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/number.xml">number() &#8594; xs:double</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/number.xml">number($arg as xs:anyAtomicType?) &#8594; xs:double</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/number.xml">number($arg as xs:anyAtomicType?) &#8594; xs:double</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/parse-xml.xml">parse-xml($arg as xs:string, $baseURI as xs:string) &#8594; document-node(element(*, xs:untyped))</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/parse-xml.xml">parse-xml($arg as xs:string, $baseURI as xs:string) &#8594; document-node(element(*, xs:untyped))</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/parse-xml.xml">parse-xml($arg as xs:string, $baseURI as xs:string) &#8594; document-node(element(*, xs:untyped))</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/parse-xml.xml">parse-xml($arg as xs:string) &#8594; document-node(element(*, xs:untyped))</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/parse-xml.xml">parse-xml($arg as xs:string) &#8594; document-node(element(*, xs:untyped))</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/pi.xml">pi() &#8594; xs:double</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/position.xml">position() &#8594; xs:integer</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/prefix-from-QName.xml">prefix-from-QName($arg as xs:QName?) &#8594; xs:NCName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/prefix-from-QName.xml">prefix-from-QName($arg as xs:QName?) &#8594; xs:NCName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/QName.xml">QName($paramURI as xs:string?, $paramQName as xs:string) &#8594; xs:QName</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/QName.xml">QName($paramURI as xs:string?, $paramQName as xs:string) &#8594; xs:QName</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/QName.xml">QName($paramURI as xs:string?, $paramQName as xs:string) &#8594; xs:QName</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/regex-group.xml">regex-group() &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/remove.xml">remove($target as item()*, $position as xs:integer) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/replace.xml">replace($input as xs:string?, $pattern as xs:string, $replacement as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-QName.xml">resolve-QName($qname as xs:string?, $element as element()) &#8594; xs:QName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-QName.xml">resolve-QName($qname as xs:string?, $element as element()) &#8594; xs:QName?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-uri.xml">resolve-uri($relative as xs:string?, $base as xs:string) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-uri.xml">resolve-uri($relative as xs:string?, $base as xs:string) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-uri.xml">resolve-uri($relative as xs:string?, $base as xs:string) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-uri.xml">resolve-uri($relative as xs:string?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/resolve-uri.xml">resolve-uri($relative as xs:string?) &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/round.xml">round($arg as numeric?, $precision as xs:integer) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/round-half-to-even.xml">round-half-to-even($arg as numeric?, $precision as xs:integer) &#8594; numeric?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/seconds-from-dateTime.xml">seconds-from-dateTime($arg as xs:dateTime?) &#8594; xs:decimal?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/seconds-from-dateTime.xml">seconds-from-dateTime($arg as xs:dateTime?) &#8594; xs:decimal?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/seconds-from-duration.xml">seconds-from-duration($arg as xs:duration?) &#8594; xs:decimal?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/seconds-from-duration.xml">seconds-from-duration($arg as xs:duration?) &#8594; xs:decimal?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/seconds-from-time.xml">seconds-from-time($arg as xs:time?) &#8594; xs:decimal?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/seconds-from-time.xml">seconds-from-time($arg as xs:time?) &#8594; xs:decimal?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/serialize.xml">serialize($arg as node(), $params as node()*) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/serialize.xml">serialize($arg as node()) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sin.xml">sin($&#952; as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sin.xml">sin($&#952; as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sqrt.xml">sqrt($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sqrt.xml">sqrt($arg as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/starts-with.xml">starts-with($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/static-base-uri.xml">static-base-uri() &#8594; xs:anyURI?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string.xml">string() &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string.xml">string($arg as item()?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-join.xml">string-join($arg1 as xs:string*, $arg2 as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-join.xml">string-join($arg1 as xs:string*, $arg2 as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-join.xml">string-join($arg1 as xs:string*, $arg2 as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-join.xml">string-join($arg1 as xs:string*) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-join.xml">string-join($arg1 as xs:string*) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-length.xml">string-length() &#8594; xs:integer</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-length.xml">string-length($arg as xs:string?) &#8594; xs:integer</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-length.xml">string-length($arg as xs:string?) &#8594; xs:integer</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-to-codepoints.xml">string-to-codepoints($arg as xs:string?) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/string-to-codepoints.xml">string-to-codepoints($arg as xs:string?) &#8594; xs:integer*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/subsequence.xml">subsequence($sourceSeq as item()*, $startingLoc as xs:double, $length as xs:double) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/subsequence.xml">subsequence($sourceSeq as item()*, $startingLoc as xs:double, $length as xs:double) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/subsequence.xml">subsequence($sourceSeq as item()*, $startingLoc as xs:double) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring.xml">substring($sourceString as xs:string?, $start as xs:double, $length as xs:double) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring.xml">substring($sourceString as xs:string?, $start as xs:double, $length as xs:double) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring.xml">substring($sourceString as xs:string?, $start as xs:double, $length as xs:double) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring.xml">substring($sourceString as xs:string?, $start as xs:double, $length as xs:double) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring.xml">substring($sourceString as xs:string?, $start as xs:double) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring.xml">substring($sourceString as xs:string?, $start as xs:double) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring.xml">substring($sourceString as xs:string?, $start as xs:double) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-after.xml">substring-after($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/substring-before.xml">substring-before($arg1 as xs:string?, $arg2 as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?) &#8594; xs:anyAtomicType?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/sum.xml">sum($arg as xs:anyAtomicType*) &#8594; xs:anyAtomicType</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/system-property.xml">system-property($arg as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/system-property.xml">system-property($arg as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tan.xml">tan($&#952; as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tan.xml">tan($&#952; as xs:double?) &#8594; xs:double?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/timezone-from-date.xml">timezone-from-date($arg as xs:date?) &#8594; xs:dayTimeDuration?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/timezone-from-date.xml">timezone-from-date($arg as xs:date?) &#8594; xs:dayTimeDuration?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/timezone-from-dateTime.xml">timezone-from-dateTime($arg as xs:dateTime?) &#8594; xs:dayTimeDuration?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/timezone-from-dateTime.xml">timezone-from-dateTime($arg as xs:dateTime?) &#8594; xs:dayTimeDuration?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/timezone-from-time.xml">timezone-from-time($arg as xs:time?) &#8594; xs:dayTimeDuration?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/timezone-from-time.xml">timezone-from-time($arg as xs:time?) &#8594; xs:dayTimeDuration?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tokenize.xml">tokenize($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tokenize.xml">tokenize($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tokenize.xml">tokenize($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tokenize.xml">tokenize($input as xs:string?, $pattern as xs:string, $flags as xs:string) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tokenize.xml">tokenize($input as xs:string?, $pattern as xs:string) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tokenize.xml">tokenize($input as xs:string?, $pattern as xs:string) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/tokenize.xml">tokenize($input as xs:string?, $pattern as xs:string) &#8594; xs:string*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/trace.xml">trace($value as item()*, $label as xs:string) &#8594; item()*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/translate.xml">translate($arg as xs:string?, $mapString as xs:string, $transString as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/translate.xml">translate($arg as xs:string?, $mapString as xs:string, $transString as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/translate.xml">translate($arg as xs:string?, $mapString as xs:string, $transString as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/translate.xml">translate($arg as xs:string?, $mapString as xs:string, $transString as xs:string) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/true.xml">true() &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/type-available.xml">type-available($type as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/type-available.xml">type-available($type as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-entity-public-id.xml">unparsed-entity-public-id() &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-entity-uri.xml">unparsed-entity-uri() &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text.xml">unparsed-text($href as xs:string?, $encoding as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text.xml">unparsed-text($href as xs:string?, $encoding as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text.xml">unparsed-text($href as xs:string?, $encoding as xs:string) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text.xml">unparsed-text($href as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text.xml">unparsed-text($href as xs:string?) &#8594; xs:string?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text-available.xml">unparsed-text-available($href as xs:string?, $encoding as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text-available.xml">unparsed-text-available($href as xs:string?, $encoding as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text-available.xml">unparsed-text-available($href as xs:string?, $encoding as xs:string) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text-available.xml">unparsed-text-available($href as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/unparsed-text-available.xml">unparsed-text-available($href as xs:string?) &#8594; xs:boolean</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/upper-case.xml">upper-case($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/upper-case.xml">upper-case($arg as xs:string?) &#8594; xs:string</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/uri-collection.xml">uri-collection() &#8594; xs:anyURI*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/uri-collection.xml">uri-collection($arg as xs:string?) &#8594; xs:anyURI*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/uri-collection.xml">uri-collection($arg as xs:string?) &#8594; xs:anyURI*</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/year-from-date.xml">year-from-date($arg as xs:date?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/year-from-date.xml">year-from-date($arg as xs:date?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/year-from-dateTime.xml">year-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/year-from-dateTime.xml">year-from-dateTime($arg as xs:dateTime?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/years-from-duration.xml">years-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro/years-from-duration.xml">years-from-duration($arg as xs:duration?) &#8594; xs:integer?</a>
      </p>
      <p class="subhead">XSD</p>
      <p>
         <a class="bodylink" href="../schema-processing/schema11/misc-xsd11.xml">Miscellaneous XSD 1.1 Features</a>
      </p>
      <p>
         <a class="bodylink"
            href="../schema-processing/extensions11/extended-uniqueness-constraints.xml">Saxon extensions to XSD uniqueness and referential constraints</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/xsd92.xml">Saxon XSD Extensions</a>
      </p>
      <p>
         <a class="bodylink" href="../configuration/configuration-file/config-xsd.xml">The &lt;xsd&gt; element</a>
      </p>
      <p class="subhead">XSL</p>
      <p>
         <a class="bodylink" href="../xsl-elements/analyze-string.xml">xsl:analyze-string</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/apply-imports.xml">xsl:apply-imports</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/apply-templates.xml">xsl:apply-templates</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/attribute.xml">xsl:attribute</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/attribute-set.xml">xsl:attribute-set</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/call-template.xml">xsl:call-template</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/character-map.xml">xsl:character-map</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/choose.xml">xsl:choose</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/comment.xml">xsl:comment</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/copy.xml">xsl:copy</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/copy-of.xml">xsl:copy-of</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/decimal-format.xml">xsl:decimal-format</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/document.xml">xsl:document</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/element.xml">xsl:element</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/xslt30.xml">xsl:evaluate</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/evaluate.xml">xsl:evaluate</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/fallback.xml">xsl:fallback</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/for-each.xml">xsl:for-each</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/for-each-group.xml">xsl:for-each-group</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/function.xml">xsl:function</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/if.xml">xsl:if</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/import.xml">xsl:import</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/import-schema.xml">xsl:import-schema</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/include.xml">xsl:include</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/xslt30.xml">xsl:iterate</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/key.xml">xsl:key</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/matching-substring.xml">xsl:matching-substring</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/message.xml">xsl:message</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/xslt30.xml">xsl:mode</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/namespace.xml">xsl:namespace</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/namespace-alias.xml">xsl:namespace-alias</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/next-match.xml">xsl:next-match</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/non-matching-substring.xml">xsl:non-matching-substring</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/number.xml">xsl:number</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/otherwise.xml">xsl:otherwise</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/output.xml">xsl:output</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/output-character.xml">xsl:output-character</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/param.xml">xsl:param</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/perform-sort.xml">xsl:perform-sort</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/preserve-space.xml">xsl:preserve-space</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/processing-instruction.xml">xsl:processing-instruction</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/result-document.xml">xsl:result-document</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/sequence.xml">xsl:sequence</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/collation.xml">xsl:sort</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/sort.xml">xsl:sort</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/strip-space.xml">xsl:strip-space</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/stylesheet.xml">xsl:stylesheet</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/template.xml">xsl:template</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/text.xml">xsl:text</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/xslt30.xml">xsl:try and xsl:catch</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/xslt30.xml">xsl:try and xsl:catch</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/value-of.xml">xsl:value-of</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/variable.xml">xsl:variable</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/when.xml">xsl:when</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/with-param.xml">xsl:with-param</a>
      </p>
      <p>
         <a class="bodylink" href="../sourcedocs/streaming/burst-mode-streaming.xml">XSLT example using xsl:copy-of</a>
      </p>
      <p class="subhead">XSLT</p>
      <p>
         <a class="bodylink" href="../extensions/attributes.xml">Extension attributes (XSLT only)</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/embedding.xml">Invoking XSLT from an application</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/xsltfromant.xml">Running Saxon XSLT transformations from Ant</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/commandline.xml">Running XSLT from the Command Line</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/satransformapi.xml">Schema-Aware XSLT from Java</a>
      </p>
      <p>
         <a class="bodylink" href="../schema-processing/satransformcmd.xml">Schema-Aware XSLT from the Command Line</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xslt-streaming-93.xml">Streaming in XSLT</a>
      </p>
      <p>
         <a class="bodylink" href="../configuration/configuration-file/config-xslt.xml">The &lt;xslt&gt; element</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/intro.xml">Using XSLT 2.0</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/intro.xml">Using XSLT 2.0 Stylesheets</a>
      </p>
      <p>
         <a class="bodylink" href="../extensibility/instructions.xml">Writing XSLT extension instructions</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro92/xslt92.xml">XSLT</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro91/xslt91.xml">XSLT 2.0</a>
      </p>
      <p>
         <a class="bodylink" href="../functions/intro.xml">XSLT 2.0 and XPath 2.0 Functions</a>
      </p>
      <p>
         <a class="bodylink" href="../conformance/xslt20.xml">XSLT 2.0 conformance</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/intro/xslt30-93.xml">XSLT 3.0 changes</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/xslt30.xml">XSLT 3.0 functions</a>
      </p>
      <p>
         <a class="bodylink" href="../using-xsl/xslt30.xml">XSLT 3.0 Support</a>
      </p>
      <p>
         <a class="bodylink" href="../changes/s90/xslt90.xml">XSLT changes</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/intro.xml">XSLT Elements</a>
      </p>
      <p>
         <a class="bodylink" href="../sourcedocs/streaming/burst-mode-streaming.xml">XSLT example using xsl:copy-of</a>
      </p>
      <p>
         <a class="bodylink" href="../xsl-elements/patterns.xml">XSLT Patterns</a>
      </p>
      <table width="100%">
         <tr>
            <td>
               <p align="right"><a class="nav" href="_Y.xml">Next</a></p>
            </td>
         </tr>
      </table>
   </body>
</html>