<!DOCTYPE html
PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<!-- $Id: resdoc_qd_creation.htm,v 1.4 2002/11/06 23:51:38 thendrix Exp $ -->
<HTML>
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<TITLE>STEP integrated resource creation help</TITLE>
<link rel="stylesheet" type="text/css" href="../css/stepmod.css">
</HEAD>
<BODY>

  <!-- table of contents -->
  <table border="0" cellspacing="0" cellpadding="0">
    <tr>          
      <td width="120">
        <h3 align="left">
          <b>Help</b><br/>
          <small>$Revision: 1.4 $</small>
        </h3>
      </td>
      <td width="300" align="center">
        <h3 align="left">Integrated Resource Document Creation</h3>
          
      </td>
    </tr>    
  </table>
  <hr/>
  <center>
    <small>
      [
      <a href="../repository_index.htm">STEPmod HTML</a>
      &nbsp;|&nbsp;
      <a href="../repository_index.xml">STEPmod XML</a>
      &nbsp;|&nbsp;
      <a href="index.htm">Help index</a>
      ]
    </small>
  </center>


<h2>
  <a name="mod_files">Creating / Editing an Integrated  Resource - A Quick and Dirty Guide that even mentions GE.</a>
</h2>
<p><i>Warning: this process is still in development and subject to frequent improvements.</i>
</p>  
The following stages are required in the creation or editing of an integrated resource (part 40-50 series).:
<ul>
  <li>
      Create the <a href="mod_files.htm">directory and files</a> for
      the resource document using the the wmf file mkresource.wmf, or start from the JScript
      <code><a href="util.htm#create">mkresource</a></code>.  Before running this, if you know the names of your schemas, edit mkresource.js variables resourceSchemas and resourceClauses to reflect this.  AN IR has a separate clause per schema, and in the repository these are hard-coded in the resource_document's sys directory.  

 <p>
var resourceSchemas = new Array("nut_and_bolt_1_schema", "nut_and_bolt_2_schema", "nut_and_bolt_3_schema");
</p>
<p> resourceClauses is used to establish the files in the sys directory</p>

var resourceClauses = new Array("main", "cover", "contents", 
<br>			      "introduction", "foreword", 
<br>			      "1_scope", "2_refs", "3_defs", 

<br>			      "a_short_names", 
<br>                          "b_obj_reg", 
<br>			      "c_expg",
			      "d_exp",
<br>			      "e_guide", 
<br>			      "f_discussion", 
<BR>			      "e_add_scope", 
			      "biblio");
 
      <br/>Note: When editing the resource doc directory should already exist.
  </li>
  <li>
      Add the new resource doc to the repository index:
      <br/>Note: When editing the resource_doc should already be in 
      <a href="../repository_index.xml">repository_index.xml</a>
  </li>
  <li>
      Create the EXPRESS files.  Store them in the resources directory - they are separated from the resource document for historical  them in the module directory.
    <ul>
      <li>The EXPRESS should be called <code>(schema_name).exp</code></li>
    </ul>
  </li>
  <li>
    Create the text definitions of the entities, attributes, rules,
    functions  in file <code>descriptions.xml</code>
    See <a href="doc_exp.htm">EXPRESS documentation</a>.
  </li>
  <li>
    Edit <code>(schema).xml</code> files to ensure that the
  description file is 
  referenced.  Add the attribute:
  <code>description.file="descriptions.xml" </code>
  in element &lt;express&gt;  
  </li>
  <li>
      Convert the EXPRESS to XML using the JScript
      <code><a href="util.htm#express2xml">express2xml</a></code>.
  </li>
  <li>
      Document the resource, i.e. edit the file <code>resource.xml</code> as
      ( will soon be )described in <a href="res_doc.htm">"Integrated resource documentation"</a>
  </li>
  <li>
      Create the EXPRESS-G diagrams. If these are created as HTML imagemap,
      these should be converted to XML using the JScript
      <code><a href="util.htm#imagemap2xml">imagemap2xml</a></code>.
      <li>The EXPRESS-G files for schema entity diagrams should be called <code>(schema_name)expg(number).(xml|gif)</code></li>
      <li>A single  EXPRESS-G schema level diagram is permitted in the Introduction.  These files should be called <code>schema_diagexpg(number).(xml|gif)</code> These files are placed in the resource_doc directory.</li>
  </li>
</ul>
<h2>Using Graphical Express and related tools to create new resource schemas and diagrams</h2>
<ul>
      <li>Manually create directories in stepmod\data\resources for each schema.</li>
      <li>Create schemas in Graphical Express. These can be in one or more GE files. </li>
      <li>Then export to XML. Suggest creating  a directories stepmod\data\resources\(schema)\dvlp for these. Do this once for each schema.
</li>
<li>Then run ge2module (version 1.3 or higher)</li>

     <li>Edit  the diagram xml files  to point at a new stylesheet:<br>
&lt;xsl:stylesheet
     href="../../../xsl/res_doc/imgfile.xsl" ...etc &gt;
<br>
and set description.file="descriptions.xml"<br>Edit imgfile.content attributes module="(name of resource document NOT resource schema)" Example: &lt; imgfile.content module="nutty_bolts" file="nut_and_bolt_1_schemaexpg1.xml"&gt;
</li>

<li>Edit the express  xml files  to point at a new stylesheet: <br>
&lt;xsl:stylesheet
     href="../../../xsl/res_doc/express.xsl" ...etc &gt;
</li>
      <li> Run extractDescriptions.wsf, setting Express xml file to <br> ..\data\resources\(schema name)\(schema name).xml.<br>
and giving it the name descriptions.xml.</li></ul>
</BODY>
</HTML>
  



