<!DOCTYPE html
PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<!-- $Id: resdoc_qd_creation.htm,v 1.3 2002/10/21 02:37:58 thendrix Exp $ -->
<HTML>
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<TITLE>STEP integrated resource creation help</TITLE>
<link rel="stylesheet" type="text/css" href="../css/stepmod.css">
</HEAD>
<BODY>

  <!-- table of contents -->
  <table border="0" cellspacing="0" cellpadding="0">
    <tr>          
      <td width="120">
        <h3 align="left">
          <b>Help</b><br/>
          <small>$Revision: 1.3 $</small>
        </h3>
      </td>
      <td width="300" align="center">
        <h3 align="left">Module Creation</h3>
          
      </td>
    </tr>    
  </table>
  <hr/>
  <center>
    <small>
      [
      <a href="../repository_index.htm">STEPmod HTML</a>
      &nbsp;|&nbsp;
      <a href="../repository_index.xml">STEPmod XML</a>
      &nbsp;|&nbsp;
      <a href="index.htm">Help index</a>
      ]
    </small>
  </center>


<h2>
  <a name="mod_files">Creating / Editing an Integrated  Resource - A Quick and Dirty Guide that even mentions GE.</a>
</h2>
<p><i>Warning: the following material was hastily prepared and has not been tested.</i>
</p>  
The following stages are required in the creation or editing of an integrated resource (part 40-50 series).:
<ul>
  <li>
      Create the <a href="mod_files.htm">directory and files</a> for
      the resource document using the the wmf file mkresource.wmf, or start from the JScript
      <code><a href="util.htm#create">mkresource</a></code>.  Before running this, if you know the names of your schemas, edit mkresource.js variables resourceSchemas and resourceClauses to reflect this.  AN IR has a separate clause per schema, and in the repository these are hard-coded in the resource_document's sys directory.  

 <p>
var resourceSchemas = new Array("nut_and_bolt_1_schema", "nut_and_bolt_2_schema", "nut_and_bolt_3_schema");
</p>
<p> resourceClauses is used to estblish the files in the sys directory</p>

var resourceClauses = new Array("main", "cover", "contents", 
<br>			      "introduction", "foreword", 
<br>			      "1_scope", "2_refs", "3_defs", 

<br>			      "4_schema",  "5_schema", "6_schema", "7_schema", 
<br>			      "a_short_names", 
    <br>                          "b_obj_reg", 
<br>			      "c_expg",
<br>                            "c_4_schema_expg","c_5_schema_expg",
<br>                              "c_6_schema_expg","c_7_schema_expg", 
			      "d_exp",
<br>			      "d_exp_schema_4","d_exp_schema_5",
<br>			      "d_exp_schema_6","d_exp_schema_7",
<br>			      "e_guide", 
<br>			      "f_discussion", 
<BR>			      "e_add_scope", 
			      "biblio");
 
      <br/>Note: When editing the resource doc directory should already exist.
  </li>
  <li>
      Add the new resource doc to the test repository index:
      <a href="../repository_index.xml">resdoc_test_index.xml</a>
Once things are working, it will be added to the real directory.
      <a href="../repository_index.xml">repository_index.xml</a>
      <br/>Note: When editing the module should already be in 
      <a href="../repository_index.xml">repository_index.xml</a>
  </li>
  <li>
      Create the EXPRESS files.  Store them in the resources directory - they are separated from the resource document for historical  them in the module directory.
    <ul>
      <li>The EXPRESS should be called <code>(schema_name).exp</code></li>
      <li>the MIM short form EXPRESS should be called <code>mim.exp</code></li>
      <li>the MIM long form EXPRESS should be called <code>mim_lf.exp</code>
      as described in  <a href="mod_files.htm">"Module Files"</a></li>
    </ul>
  </li>
  <li>
    Create the text definitions of the entities, attributes, rules,
    functions  in file <code>descriptions.xml</code>
    See <a href="doc_exp.htm">EXPRESS documentation</a>.
  </li>
  <li>
    Edit <code>(schema).xml</code> files to ensure that the
  description file is 
  referenced.  Add the attribute:
  <code>description.file="descriptions.xml" </code>
  in element &lt;express&gt;  
  </li>
  <li>
      Convert the EXPRESS to XML using the JScript
      <code><a href="util.htm#express2xml">express2xml</a></code>.
  </li>
  <li>
      Document the resource, i.e. edit the file <code>resource.xml</code> as
      ( will soon be )described in <a href="res_doc.htm">"Integrated resource documentation"</a>
  </li>
  <li>
      Create the EXPRESS-G diagrams. If these are created as HTML imagemap,
      these should be converted to XML using the JScript
      <code><a href="util.htm#imagemap2xml">imagemap2xml</a></code>.
      <li>The EXPRESS-G files for schema entity diagrams should be called <code>(schema_name)expg(number).(xml|gif)</code></li>
      <li>A single  EXPRESS-G schema level diagram is permitted in the Introduction.  These files should be called <code>schema_diagexpg(number).(xml|gif)</code> These files are placed in the resource_doc directory.</li>
  </li>
  <li>
      Convert the XML to HTML using the JScript
      <code><a href="util.htm#xml2html">xml2html</a></code>.
  </li>
</ul>
<h2>How I made the nutty bolts example IR document and its resource schemas using Graphical Express and related tools</h2>
<ul>
      <li>I created the test IR "nutty bolts" schemas using Graphical Express. I created all three schemas in one Visio file. </li>
      <li> I then ran ge2module.wsf 3 times to create three sets of entity diagrams and one interface diagram.  This was before the option of writing them into the modules directory (which is not where they go anyway.</li>
      <li>I manually renamed the files per the above convention.
</li>
      <li>I manually created directories for each schema and moved the
      express, express xml and expressg xml, and express-g gif files
      to the appropriate directory with appropriate names. 

     </li>
     <li>I edited  the diagram xml files  to point at a new stylesheet:<br>
&lt;xsl:stylesheet
     href="../../../xsl/res_doc/imgfile.xsl" ...etc &gt;
<br>
and set description.file="descriptions.xml"<br>
The links don't work right yet, so watch this space...
</li><li>I edited  the express  xml files  to point at a new stylesheet: <br>
&lt;xsl:stylesheet
     href="../../../xsl/res_doc/express.xsl" ...etc &gt;
</li>
      <li> Then I ran extractDescriptions.wsf, setting Express xml file to <br> ..\data\resources\nutty_bolts_schema\nutty_bolts_schema.xml.<br>
and giving it the name descriptions.xml.</li></ul>
</BODY>
</HTML>
  



