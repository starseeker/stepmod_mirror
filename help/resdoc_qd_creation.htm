<!DOCTYPE html
PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<!-- $Id: resdoc_qd_creation.htm,v 1.10 2005/10/27 23:28:04 thendrix Exp $ -->
<HTML>
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<TITLE>STEP integrated resource creation help</TITLE>
<link rel="stylesheet" type="text/css" href="../css/stepmod.css">
</HEAD>
<BODY>

  <!-- table of contents -->
  <table border="0" cellspacing="0" cellpadding="0">
    <tr>          
      <td width="120">
        <h3 align="left">
          <b>Help</b><br/>
          <small>$Revision: 1.10 $</small>
        </h3>
      </td>
      <td width="300" align="center">
        <h3 align="left">Integrated Resource Document Creation</h3>
          
      </td>
    </tr>    
  </table>
  <hr/>
  <center>
    <small>
      [
      <a href="../repository_index.htm">STEPmod HTML</a>
      &nbsp;|&nbsp;
      <a href="../repository_index.xml">STEPmod XML</a>
      &nbsp;|&nbsp;
      <a href="index.htm">Help index</a>
      ]
    </small>
  </center>


<h2>
  <a name="mod_files">Creating / Editing an Integrated  Resource</a>
</h2>
The following stages are required in the creation or editing of an integrated resource (part 40-50 series).:
<h2>Getting started </h2>
<ul>
  <li>
      Create the directory and files for
      the integrated resource document using the wsf file stepmod/utils/resource/mkresource.wsf<p><i>Warning: Use the script. Do not try to copy from an existing document.</i></p> 

      Before running the script, if you know the names of your schemas, edit your local copy of stepmod/utils/mkresource.js variable <b>resourceSchemas</b> (near line 25) to reflect this.  An Integrated Resource has a separate clause for each schema, and in the repository each of these has an xml file hard-coded in the resource_doc's sys directory.  These files are created by the script if it knows about them.  The script looks for these  schemas in stepmod/data/resources/  and if it can't find them, creates template files . 

 <p>
var resourceSchemas = new Array("nut_and_bolt_1_schema", "nut_and_bolt_2_schema", "nut_and_bolt_3_schema");
</p>
  <li>
      Add the new resource doc to the repository index:
      <br/><a href="../repository_index.xml">repository_index.xml</a>
  </li>
<h2> Creating Express and diagrams.
</h2>
      <li>Manually create directories in stepmod\data\resources for each schema.</li>
<h3>Creating Express first. That is, the express is considered source, and the diagram is somehow derived. This is the case when you are using for example a schema that is already standardized, for reference.
</h3>
NOTE if you are using Graphical Express, read this for reference, but skip to next section.

  <li>
      Create the EXPRESS files.  Store them in the resources directory - they are separated from the resource document for historical  reasons.
    <ul>
      <li>The EXPRESS should be called <code>(schema_name).exp</code></li>
    </ul>
  </li>
  <li>
    Create the text definitions of the entities, attributes, rules,
    functions  in file <code>descriptions.xml</code>
    See <a href="doc_exp.htm">EXPRESS documentation</a>.
  </li>
  <li>
    Edit <code>(schema_name).xml</code> files to ensure that the
  description file is 
  referenced.  Add the attribute:
  <code>description.file="descriptions.xml" </code>
  in element &lt;express&gt;  
  </li>
  <li>
      Convert the EXPRESS to XML.  There are several ways to do this:
      <ul>
	<li>using <a href="http://www.eurostep.com/">Eurostep</a> Express Parser (Eep!). This requires a set of  express into schemas concatentated into one file. The schemas must pass the Eep parser's validator and resolve all references to interfaced data types. The concatenated set can be created with an ant target in script.xml for a ballot that includes the schema of interest.</li>
<li>using for example <a href="http://www.pdtec.de/">PDTEC</a> ECCO, produce an express xml file that conforms to the dtd <a href="../dtd/part28/iso_10303_28_base_arch.dtd" >iso_10303_28_base_arch</a>, possibly from ISO/PDTS 10303-28 . Then execute <a href="../etc/ecco/utils/ecco2module.wsf" >ecco2module.wsf</a>.  NOTE this script has not been tested.</li>
	<li>using the JScript
      <code><a href="util.htm#express2xml">express2xml.js</a></code> express2xml.js is not built on a robust express parser, and not recommended.  If you use it,  desk check its output (as presented in with the input .exp file.</li></ul>
  </li>
  <li>
      Document the resource, i.e. edit the file <code>resource.xml</code> as
      ( will soon be )described in <a href="res_doc.htm">"Integrated resource documentation"</a>
  </li>
  <li>
      Create the EXPRESS-G diagrams. If these are created as HTML imagemap,
      these should be converted to XML using the JScript
      <code><a href="util.htm#imagemap2xml">imagemap2xml</a></code>.
      <li>The EXPRESS-G files for schema entity diagrams should be called <code>(schema_name)expg(number).(xml|gif)</code></li>
      <li>A single  EXPRESS-G schema level diagram is permitted in the Introduction.  These files should be called <code>schema_diagexpg(number).(xml|gif)</code> These files are placed in the resource_doc directory.</li>
  </li>
</ul>
<h3>Using <a href="http://www.eurostep.com/">Eurostep</a> 
Graphical Express and related tools to create new resource schemas and diagrams. </h3>
<p><i>NOTE: These notes do not cover the installation or use of  Graphical Express.</i></p>
<ul>
<li>Create a new Graphical Express Visio file, named for the resource part:<br>
Example: <code>nutty_bolts_v001.vsd</code><br>
<b>Important! The first part of the GE Visio file name must be the name of the resource part. It must contain a final underscore separated  field indicating the version,  starting with "_v0" as shown.</b>
</li>
<li>Create the schemas for the integrated resource using Graphical Express (GE). 

<!-- not tested - These can be in one or more Visio files. However all referenced data types must be modeled in schemas in the same file as the referencing schema. So in most cases it is easier to create a single GE Visio file -->
</li>
      <li>
<!-- For each GE file, 
-->Publish as XML. When prompted select all the schemas.</li>
</li>
<li>Then run the script  <a href="../etc/graphicalexpress/utils/ge2module.wsf" >stepmod/etc/graphicalexpress/utils/ge2module.wsf</a>. This is done once for each schema that is standardized in the resource part.  This creates a schema level and entity level diagrams in stepmod/data/resources/(schema_name)/. GE diagram files have sequential names (schema_name)expg(#).xml, where #=1 for the schema level diagram, and 2 or higher for the entity level diagrams. <br>Example: <code>nut_and_bolt_1_schemaexpg2.xml</code><br>  The schema level diagram may be suitable for the interface diagram required in the introduction clause of the resource document. <i>NOTE: Schema level diagrams of than one page have not been tested.</i></li>
<li>Update the express-g tags in the resource.xml file of the resource document. .<br>
<code>
&lt;express-g&gt;<br>
&lt;imgfile file="nut_and_bolt_1_schemaexpg2.xml"/&gt;<br>
&lt;imgfile file="nut_and_bolt_1_schemaexpg3.xml"/&gt;<br>
&lt;/express-g&gt;
</code>
</li>

<li> Run extractDescriptions.wsf, setting Express xml file to <br> ..\data\resources\(schema name)\(schema name).xml.<br>
and giving it the name descriptions.xml.</li></ul>
</BODY>
</HTML>
  



