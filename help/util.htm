<!DOCTYPE html
PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<!-- $Id: -->
<HTML>
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<TITLE>STEP modules help</TITLE>
<link rel="stylesheet" type="text/css" href="../css/stepmod.css">
</HEAD>
<BODY>

  <!-- table of contents -->
  <table border="0" cellspacing="0" cellpadding="0">
    <tr>          
      <td width="120">
        <h3 align="left">
          <b>Help</b><br/>
          <font size="1">$Revision: 1.2 $</font>
        </h3>
      </td>
      <td width="300" align="center">
        <h3 align="left">Help index</h3>
          
      </td>
    </tr>    
  </table>
  <hr/>
  <center>
    <font size="2">
      [
      <a href="../repository_index.htm">STEPmod</a>
      &nbsp;|&nbsp;
      <a href="index.htm">Help index</a>
      ]
    </font>
  </center>

  <!-- Index -->
  <h2>Utility scripts</h2>
  Several scripts have been developed that are useful when creating
  modules.
  <ul>
    <li><a href="#create">Creating a module</a></li>
    <li><a href="#xmlhtml">Generating HTML</a></li>
    <li><a href="#imagemap2xml">HTML image map to XML file</a></li>
    <li><a href="#express2xml">EXPRESS to XML</a></li>
  </ul>
  
  <h3><a name="create">Creating a module</a></h3>
  The Jscript <code>utils/mkmodule.js</code> should be used when
  creating a new module. It will generate:
  <ul>
    <li>the module directory,</li>
    <li>skeleton <a href="mod_files.htm">XML files</a> for the module,</li>
    <li>the <a href="sys.htm">SYS</a> files.</li> 
  </ul>
  <p>
  Before running the global variable
  <code>stepmodHome</code> must be set in the script.
  </p>
  To create a new module, run:
  <blockquote>
  <code>
  cscript mkmodule.js  &lt;module&gt;
  </code>
  </blockquote>
  where <code>&lt;module&gt;</code> is the name of the new module.

  
  <h3><a name="xmlhtml">Generating HTML</a></h3>
  The Jscript <code>utils/xml2html.js</code> can be used to convert the XML
  in the module repository to HTML.
  <p>
  The script uses the SAXON XSLT processor (see
  <a
  href="http://sourceforge.net/projects/saxon">http://sourceforge.net/projects/saxon</a>)  
  </p>
  <p>
  Before running the global variables <code>saxonExe</code> and
  <code>stepmodHome</code> must be set in the script.
  </p>
  <p>
  The script can be run in several modes.

  <h4>Convert the module XML to HTML</h4>
  To convert the module XML to HTML run:
  <blockquote>
  <code>
  cscript xml2html.js module &lt;module&gt;
  </code>
  </blockquote>
  where <code>&lt;module&gt;</code> is the name of the module.

  <h4>Convert the XML for all modules to HTML</h4>
  To convert the XML for all the modules to HTML run:
  <blockquote>
  <code>
  cscript xml2html.js all modules
  </code>
  </blockquote>
  where <code>&lt;module&gt;</code> is the name of the module.
  <p>
  The list of modules to be converted is provided in:
  <code>
  <a href="../repository_index.xml">stepmod/repository_index.xml</a>
  </code>

  <h4>Convert the resource XML to HTML</h4>
  To convert the integrated resource XML to HTML run:
  <blockquote>
  <code>
  cscript xml2html.js resource &lt;resource&gt;
  </code>
  </blockquote>
  where <code>&lt;resource&gt;</code> is the name of the resource.

  <h4>Convert the XML for all resources to HTML</h4>
  To convert the XML for all the integrated resources to HTML run:
  <blockquote>
  <code>
  cscript xml2html.js all resources
  </code>
  </blockquote>
  where <code>&lt;resource&gt;</code> is the name of the resource.
  <p>
  The list of resources to be converted is provided in:
  <code>
  <a href="../repository_index.xml">stepmod/repository_index.xml</a>
  </code>
  

  <h4>Convert the XML for complete repository to HTML</h4>
  To convert the XML for the complete module repository, that is all
  modules and integrated resources to HTML run:
  <blockquote>
  <code>
  cscript xml2html.js all
  </code>
  </blockquote>
  <p>
  The list of modules and resources to be converted is provided in:
  <code>
  <a href="../repository_index.xml">stepmod/repository_index.xml</a>
  </code>



  <h3><a name="imagemap2xml">HTML image map to XML file</a></h3>
  The script <code>utils/imagemap2xml.js</code> will convert an HTML file
  containing a single image map into an XML file.

  <pre>
    cscript imagemap2xml.js &lt;module&gt; &lt;imagemap.html&gt; &lt;file.xml&gt; &lt;optional title&gt;
  </pre>
  where
  <ul>
    <li><tt>module</tt> the name of the module that the image file
	should be stored in. </li>
    <li><tt>imagemap.html</tt> the HTML file containing the image map.</li>
    <li><tt>file.xml</tt> the generated XML file. The top element is
	<tt><a href="xml_text.htm#imgfile">imgfile.content</a></tt>
    </li>
    <li><tt>optional title</tt> the title of the image.</li>
  </ul>
  E.g. Given the file armdiag.htm:
  <p/>
  <table border="1" width="500" 
    cellspacing="0" cellpadding="3" bgcolor="#FFFFCC">
    <tr>
      <td width="100%"
      bordercolor="#808080" 
      bgcolor="#CCCCCC" 
      valign="top" align="left">
      <tt><b>armdiag.htm</b></tt>
      </td>
    </tr>
    <tr>
      <td width="100%" bordercolor="#808080" valign="top" align="left">
<pre>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252"&gt;
    &lt;TITLE&gt;application module: Work order ARM EXPRESS-G Diagram 1&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY bgcolor="#FFFFFF" link="#0000FF" vlink="#800080"&gt;
    &lt;H3 ALIGN="center"&gt;
     application module: Work order ARM &lt;br&gt;
     Figure C.1 - ARM EXPRESS-G diagram 1 of 1
   &lt;/H3&gt;
  &lt;img src="arm.gif" width="1080" height="810" border="0" alt="" usemap="#arm"&gt;
    &lt;map name="arm"&gt;
     &lt;area alt="" 
       coords="12,120,220,173"
       href="../../pdm/product_version/armdiag.html#product_version"
       shape="RECT"&gt;
     &lt;area alt="" 
       coords="11,192,277,245"
       href="../../pdm/product_view_definition_structure/armdiag.html#view_definition_relationship"
       shape="RECT"&gt;
     &lt;/map&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
      </td>
    </tr>
  </table>

  <pre>
  cscript imagemap2xml.js person ../data/modules/foo/armdiag.html armdiag.xml "the title"
  </pre>
  will generate the file <tt>../data/modules/person/armdiag.xml</tt>
  
  <table border="1" width="500" 
    cellspacing="0" cellpadding="3" bgcolor="#FFFFCC">
    <tr>
      <td width="100%"
      bordercolor="#808080" 
      bgcolor="#CCCCCC" 
      valign="top" align="left">
      <tt><b>armdiag.xml</b></tt>
      </td>
    </tr>
    <tr>
      <td width="100%" bordercolor="#808080" valign="top" align="left">
<pre>
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="../../../xsl/imgfile.xsl"?&gt;
&lt;!DOCTYPE imgfile.content SYSTEM "../../../dtd/text.ent"&gt;
&lt;imgfile.content
  module="person"
  title="the title"&gt;
  &lt;img
    src="arm.gif"&gt;
    &lt;img.area
      shape="RECT"
      coords="12,120,220,173"
      href="../../pdm/product_version/armdiag.html#product_version"/&gt;
    &lt;img.area
      shape="RECT"
      coords="11,192,277,245"
      href="../../pdm/product_view_definition_structure/armdiag.html#view_definition_relationship"/&gt;
  &lt;/img&gt;
&lt;/imgfile.content&gt;
      
</pre>
      </td>
    </tr>
  </table>
  
  <h3><a name="express2xml">EXPRESS to XML</a></h3>
  The script <code>utils/express2xml.js</code> will convert EXPRESS into
  XML.
  <p>
  The script can be run in several modes.
  
  <h4>To convert all module schemas</h4>
  To convert a modules ARM, short and long form MIM EXPRESS schemas, run:
  <blockquote>
  <code>
  cscript express2xml.js &lt;module&gt; module
  </code>
  </blockquote>
  where <code>&lt;module&gt;</code> is the name of the module.
  <p>The script assumes that the EXPRESS files are stored in the module
  directory, and that the ARM EXPRESS is called <code>arm.exp</code>, the
  MIM short form EXPRESS is called <code>mim.exp</code>, the MIM long form
  EXPRESS is called <code>mim_lf.exp</code> as described in
  <a href="mod_files.htm">"Module Files"</a>

  <h4>To convert module ARM</h4>
  To convert the ARM EXPRESS schema for a module, run:
  <blockquote>
  <code>
  cscript express2xml.js &lt;module&gt; arm
  </code>
  </blockquote>
  where <code>&lt;module&gt;</code> is the name of the module.
  <p>The script assumes that the EXPRESS files are stored in the module
  directory, and that the ARM EXPRESS is called <code>arm.exp</code> as
  described in <a href="mod_files.htm">"Module Files"</a>

  <h4>To convert module MIM short form</h4>
  To convert the MIM short form EXPRESS schema for a module, run:
  <blockquote>
  <code>
  cscript express2xml.js &lt;module&gt; mim
  </code>
  </blockquote>
  where <code>&lt;module&gt;</code> is the name of the module.
  <p>The script assumes that the EXPRESS files are stored in the module
  directory, and that the MIM short form EXPRESS is called
  <code>mim.exp</code> as 
  described in <a href="mod_files.htm">"Module Files"</a>

  <h4>To convert module MIM long form</h4>
  To convert the MIM long form EXPRESS schema for a module, run:
  <blockquote>
  <code>
  cscript express2xml.js &lt;module&gt; mim_lf
  </code>
  </blockquote>
  where <code>&lt;module&gt;</code> is the name of the module.
  <p>The script assumes that the EXPRESS files are stored in the module
  directory, and that the MIM long form EXPRESS is called
  <code>mim_lf.exp</code> as 
  described in <a href="mod_files.htm">"Module Files"</a>

  <h4>To convert resource schema</h4>
  To convert an integrated resource schema, i.e. a schema stored in
  <code>data/resources</code> run:
  <blockquote>
  <code>
  cscript express2xml.js <resource> resource
  </code>
  </blockquote>

  <h4>To convert any EXPRESS file</h4>
  <blockquote>
  <code>
  cscript express2xml.js &lt;express.exp&gt;
  </code>
  </blockquote>
  where <code>&lt;express.exp&gt;</code> is the name of the EXPRESS file.
  <p>The XML file will be stored in the same location as EXPRESS file with
  the suffix .exp replaced with .xml.</p>


  </p>
  </BODY>
</HTML>
