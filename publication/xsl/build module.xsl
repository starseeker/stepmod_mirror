<?xml version="1.0" encoding="utf-8"?>
<!--
$ Id: build.xsl,v 1.9 2003/02/26 02:12:17 thendrix Exp $
   Author:  Rob Bodington, Eurostep Limited
   Owner:   Developed by Eurostep Limited http://www.eurostep.com and supplied to NIST under contract.
   Purpose: To build the initial ANT publication file. 
-->

<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:exslt="http://exslt.org/common"
  exclude-result-prefixes="exslt"
  version="1.0">
  
  <xsl:import href="../../xsl/common.xsl"/>

  <xsl:output method="xml" indent="yes"/>

    <xsl:variable name="LOWER" select="'abcdefghijklmnopqrstuvwxyz_'"/>
    <xsl:variable name="UPPER" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>
        
  <xsl:template match="publication_index">
    <xsl:variable name="modules_ok">      
      <xsl:apply-templates select="modules/module" mode="check_module"/>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="contains($modules_ok,'false')">
        <xsl:message>
************************************************************
  ABORTING THE BUILD
  The file publication_index.xml is referencing modules that
  have errors
************************************************************
        </xsl:message>
      </xsl:when>
      <xsl:otherwise>
        <!-- output the build.xml file -->
        <xsl:text>
        </xsl:text>
        <xsl:comment>
          This file has been auto generated by:
          ant -buildfile buildbuild.xml
        </xsl:comment>

        <!-- 
             note the use of xsl:extension-element-prefixes to prevent the
             output of the names space
             -->
        <project
          xsl:extension-element-prefixes="exslt"
          name="iso_publication" default="all" basedir="../../..">
          <xsl:text>
          </xsl:text>
          <xsl:apply-templates select="." mode="target_variables"/>
          <xsl:apply-templates select="." mode="target_init"/>
          <xsl:apply-templates select="." mode="target_isomodules"/>
          <xsl:apply-templates select="." mode="target_publish"/>
        </project>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- generate the target "variables" -->
  <xsl:template match="publication_index" mode="target_variables">
    <xsl:element name="target">
      <xsl:attribute name="name">variables</xsl:attribute>
      <xsl:attribute name="description">initialize variables</xsl:attribute>
      <tstamp>
        <format property="START_TIME" pattern="EEE, d MMM yyyy HH:mm:ss"/>
        <format property="PUB_DATE" pattern="yyyy-MM-dd"/>
      </tstamp>
      <echo>
        Publication started: ${START_TIME}
      </echo>

      
      <input
        message="Have you created  CVS tag for the modules (y/n)?"
          addproperty="do.continue"/>
      <condition property="do.abort">
        <xsl:element name="equals">
          <xsl:attribute name="arg1">n</xsl:attribute>
          <xsl:attribute name="arg2">${do.continue}</xsl:attribute>
        </xsl:element>
      </condition>
      <fail if="do.abort">

        ------------------------------------------------------------
        You need to tag the repository before publishing the modules.
        ------------------------------------------------------------
      </fail>

      <input
        message="Enter CVS tag "
          addproperty="CVS_tag"/>

      <echo>
        The CVS tag is: ${CVS_tag}
      </echo>
      <input
        message="Is this correct (y/n)?"
          addproperty="do.continue1"/>
      <condition property="do.abort1">
        <xsl:element name="equals">
          <xsl:attribute name="arg1">n</xsl:attribute>
          <xsl:attribute name="arg2">${do.continue1}</xsl:attribute>
        </xsl:element>

      </condition>
      <fail if="do.abort1">

        ------------------------------------------------------------
        Enter the correct values for the CVS tag and module edition
        ------------------------------------------------------------
      </fail>


      <xsl:element name="property">
        <xsl:attribute name="name">PUBDIR</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:value-of select="concat('publication/isopub/',@name)"/>
        </xsl:attribute>
      </xsl:element>
      <xsl:element name="property">
        <xsl:attribute name="name">TMPDIR</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:value-of select="concat('publication/isopub/',@name,'/tmp')"/>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">ISOMENU</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:value-of select="concat('./publication/publication/',@name,'/menubar_iso.xml')"/>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">APDOCS_INLINE_ERRORS</xsl:attribute>
        <xsl:attribute name="value">'yes'</xsl:attribute>
      </xsl:element>
      <xsl:element name="property">
        <xsl:attribute name="name">MODULES_INLINE_ERRORS</xsl:attribute>
        <xsl:attribute name="value">'yes'</xsl:attribute>
      </xsl:element>
      <xsl:element name="property">
        <xsl:attribute name="name">DEPMODULES_INLINE_ERRORS</xsl:attribute>
        <xsl:attribute name="value">'yes'</xsl:attribute>
      </xsl:element>
      <xsl:element name="property">
        <xsl:attribute name="name">OUTPUT_RCS</xsl:attribute>
        <xsl:attribute name="value">NO</xsl:attribute>
      </xsl:element>
      <xsl:element name="property">
        <xsl:attribute name="name">OUTPUT_ISSUES</xsl:attribute>
        <xsl:attribute name="value">NO</xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">STEPMOD_DATA_MODULES</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:value-of select="'../../../../data/modules/'"/>
        </xsl:attribute>
      </xsl:element>
      <xsl:element name="property">
        <xsl:attribute name="name">STEPMOD_DATA_APS</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:value-of select="'../../../../data/application_protocol/'"/>
        </xsl:attribute>
      </xsl:element>
      <xsl:element name="property">
        <xsl:attribute name="name">STEPMOD_DATA_RESOURCES</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:value-of select="'../../../../data/resources/'"/>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">STEPMODSTYLES</xsl:attribute>
        <xsl:attribute name="value">xsl</xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">STEPMODDTDDIR</xsl:attribute>
        <xsl:attribute name="value">dtd</xsl:attribute>
      </xsl:element>      
      
      <xsl:element name="property">
        <xsl:attribute name="name">MODULES</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/**/*.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">CONTENTSXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/contents.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">SCOPEXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/1_scope.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">REFSXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/2_refs.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">DEFSXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/3_defs.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">INFOREQSXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/4_info_reqs.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">MAINXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/5_main.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">MAPPINGXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/5_mapping.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">MIMXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/5_mim.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">INDEXXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/index.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">ABSTRACTXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/abstract.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">ASHORTNAMESXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/a_short_names.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">BOBJREGXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/b_obj_reg.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">BIBLIOXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/biblio.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">MODINDEXXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/modindex.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">CARMEXPGXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/c_arm_expg.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">COVERXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/cover.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">DMIMEXPGXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/d_mim_expg.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">EEXPXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/e_exp.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">EEXPARMXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/e_exp_arm.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">EEXPARMLFXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module" mode="long_form">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/e_exp_arm_lf.xml'"/>
          </xsl:apply-templates> 
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">EEXPMIMXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/e_exp_mim.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>

      <xsl:element name="property">
        <xsl:attribute name="name">EEXPMIMLFXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module" mode="long_form">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/e_exp_mim_lf.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">FGUIDEXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/f_guide.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">FOREWORDXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/foreword.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">INTRODUCTIONXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/sys/introduction.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">ARMDESCRIPTIONSXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/arm_descriptions.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">MIMDESCRIPTIONSXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/mim_descriptions.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">ARMEXPGXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/armexpg*.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">MIMEXPGXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/mimexpg*.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">ARMEXPXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/arm.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      
      <xsl:element name="property">
        <xsl:attribute name="name">MIMEXPXML</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/mim.xml'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">EXPRESS</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/*.exp'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
    
      <xsl:element name="property">
        <xsl:attribute name="name">GIFS</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/*.gif'"/>
            <xsl:with-param name="terminate" select="'NO'"/>
          </xsl:apply-templates>
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/*.png'"/>
            <xsl:with-param name="terminate" select="'NO'"/>
          </xsl:apply-templates>
          <xsl:apply-templates select="modules/module">
            <xsl:with-param name="prefix" select="'data/modules/'"/>
            <xsl:with-param name="suffix" select="'/*.jpg'"/>
          </xsl:apply-templates>
        </xsl:attribute>
      </xsl:element>
      
      <xsl:element name="property">
        <xsl:attribute name="name">DATE</xsl:attribute>
        <xsl:attribute name="value">
          <xsl:value-of select="'${DSTAMP}'"/>
        </xsl:attribute>
      </xsl:element>
      
    </xsl:element>
    <xsl:text>
    </xsl:text>
  </xsl:template>
  
  <!-- generate the target "init" -->
  <xsl:template match="publication_index" mode="target_init">
    <target 
      xsl:extension-element-prefixes="exslt"        
      name="init" depends="variables">
      
      <xsl:element name="mkdir">
        <xsl:attribute name="dir">
          <xsl:value-of select="'${TMPDIR}'"/>
        </xsl:attribute>          
      </xsl:element>
      
      <xsl:element name="copy">
        <xsl:attribute name="todir">
          <xsl:value-of select="'${TMPDIR}/images'"/>
        </xsl:attribute>
        <fileset dir="images"/>
      </xsl:element>
    </target>
    <xsl:text>
    </xsl:text>
  </xsl:template>
  
  <!-- generate the target "target_isomodules" -->
  <xsl:template match="publication_index" mode="target_isomodules">
    <xsl:param name="menu"/>
    <target
      xsl:extension-element-prefixes="exslt"        
      name="isomodules" depends="init" 
      description="generate HTML for all modules">
      <dependset>
        <xsl:element name="srcfileset">
          <xsl:attribute name="dir">
            <xsl:value-of select="'${STEPMODDTDDIR}'"/>
          </xsl:attribute>
          <xsl:attribute name="includes">
            <xsl:value-of select="'**/*.dtd, **/*.ent'"/>
          </xsl:attribute>
        </xsl:element>
        <xsl:element name="srcfileset">
          <xsl:attribute name="dir">
            <xsl:value-of select="'${STEPMODSTYLES}'"/>
          </xsl:attribute>
          <xsl:attribute name="includes">
            <xsl:value-of select="'**/*.xsl'"/>
          </xsl:attribute>
        </xsl:element>
        <xsl:element name="srcfileset">
          <xsl:attribute name="dir">
            <xsl:value-of select="'.'"/>
          </xsl:attribute>
          <xsl:attribute name="includes">
            <xsl:value-of select="'${MODULES}'"/>
          </xsl:attribute>
        </xsl:element>
        <xsl:element name="srcfileset">
          <xsl:attribute name="dir">
            <xsl:value-of select="'.'"/>
          </xsl:attribute>
          <xsl:attribute name="includes">
            <xsl:value-of select="'${GIFS}'"/>
          </xsl:attribute>
        </xsl:element>
        <xsl:element name="srcfileset">
          <xsl:attribute name="dir">
            <xsl:value-of select="'.'"/>
          </xsl:attribute>
          <xsl:attribute name="includes">
            <xsl:value-of select="'${EXPRESS}'"/>
          </xsl:attribute>
        </xsl:element>
        <xsl:element name="targetfileset">
          <xsl:attribute name="dir">
            <xsl:value-of select="'${TMPDIR}'"/>
          </xsl:attribute>
          <xsl:attribute name="includes">
            <xsl:value-of select="'/data/modules/**/*.htm'"/>
          </xsl:attribute>
        </xsl:element>
      </dependset>

      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${CONTENTSXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_contents.xsl'"/>
        </xsl:attribute>        
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${SCOPEXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_1_scope.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${REFSXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_2_refs.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${DEFSXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_3_defs.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${INFOREQSXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_4_info_reqs.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${MAINXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_5_main.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${MAPPINGXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_5_mapping.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${MIMXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_5_mim.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>

      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${INDEXXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/index.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>

      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${ABSTRACTXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_abstract.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>

      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${ASHORTNAMESXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_a_short_names.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${BOBJREGXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_b_obj_reg.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${BIBLIOXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_biblio.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>

      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${MODINDEXXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_modindex.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${CARMEXPGXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_c_arm_expg.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${COVERXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_cover.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
        <xsl:element name="param">
          <xsl:attribute name="name">
            <xsl:value-of select="'coverpage_date'"/>
          </xsl:attribute>
          <xsl:attribute name="expression">
            <xsl:value-of select="'${DATE}'"/>
          </xsl:attribute>
        </xsl:element>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${DMIMEXPGXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_d_mim_expg.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${EEXPXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${EEXPARMXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_arm.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${EEXPARMLFXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_arm_lf.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>

      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${EEXPMIMXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_mim.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${EEXPMIMLFXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_mim_lf.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${FGUIDEXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_f_guide.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${FOREWORDXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_foreword.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${INTRODUCTIONXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_introduction.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${ARMEXPXML}, ${MIMEXPXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/express.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>
      
      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${ARMEXPGXML},${MIMEXPGXML}'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/imgfile.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>

      <xsl:element name="style">
        <xsl:attribute name="includes">
          <xsl:value-of select="'${SYS}/e_exp_arm_lf.xml'"/>
        </xsl:attribute>
        <xsl:attribute name="style">
          <xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_arm_lf.xsl'"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="modules_target_style_attributes">
          <xsl:with-param name="menu" select="$menu"/>
        </xsl:apply-templates>
      </xsl:element>

      <xsl:element name="copy">
        <xsl:attribute name="todir">
          <xsl:value-of select="'${TMPDIR}'"/>
        </xsl:attribute>
        <xsl:element name="fileset">
          <xsl:attribute name="dir">
            <xsl:value-of select="'.'"/>
          </xsl:attribute>
          <xsl:attribute name="includes">
            <xsl:value-of select="'${EXPRESS}'"/>
          </xsl:attribute>
        </xsl:element>
      </xsl:element>
      
      <xsl:element name="copy">
        <xsl:attribute name="todir">
          <xsl:value-of select="'${TMPDIR}'"/>
        </xsl:attribute>
        <xsl:element name="fileset">
          <xsl:attribute name="dir">
            <xsl:value-of select="'.'"/>
          </xsl:attribute>
          <xsl:attribute name="includes">
            <xsl:value-of select="'${GIFS}'"/>
          </xsl:attribute>
        </xsl:element>
      </xsl:element>
    </target>
    <xsl:text>
    </xsl:text>
  </xsl:template>

  <!-- called from template match="publication_index" mode="modules_target" -->
  <xsl:template match="publication_index"
    mode="modules_target_style_attributes">
    <xsl:param name="menu"/>
    <xsl:attribute name="destdir">
      <xsl:value-of select="'${TMPDIR}'"/>
    </xsl:attribute>
    <xsl:attribute name="extension">
      <xsl:value-of select="'.htm'"/>
    </xsl:attribute>
    <param name="output_type" expression="HTM"/>
    <xsl:element name="param">
      <xsl:attribute name="name">
        <xsl:value-of select="'INLINE_ERRORS'"/>
      </xsl:attribute>
      <xsl:attribute name="expression">
        <xsl:value-of select="'${MODULES_INLINE_ERRORS}'"/>
      </xsl:attribute>
    </xsl:element>
    <xsl:element name="param">
      <xsl:attribute name="name">
        <xsl:value-of select="'output_rcs'"/>
      </xsl:attribute>
      <xsl:attribute name="expression">
        <xsl:value-of select="'${OUTPUT_RCS}'"/>
      </xsl:attribute>
    </xsl:element>
    <xsl:element name="param">
      <xsl:attribute name="name">
        <xsl:value-of select="'output_issues'"/>
      </xsl:attribute>
      <xsl:attribute name="expression">
        <xsl:value-of select="'${OUTPUT_ISSUES}'"/>
      </xsl:attribute>
    </xsl:element>
    <xsl:element name="param">
      <xsl:attribute name="name">
        <xsl:value-of select="'menubar_file'"/>
      </xsl:attribute>
      <xsl:attribute name="expression">
        <xsl:value-of select="'${ISOMENU}'"/>
      </xsl:attribute>
    </xsl:element>
    <xsl:element name="param">
      <xsl:attribute name="name">
        <xsl:value-of select="'STEPMOD_DATA_MODULES'"/>
      </xsl:attribute>
      <xsl:attribute name="expression">
        <xsl:value-of select="'${STEPMOD_DATA_MODULES}'"/>
      </xsl:attribute>
    </xsl:element>
    <xsl:element name="param">
      <xsl:attribute name="name">
        <xsl:value-of select="'STEPMOD_DATA_RESOURCES'"/>
      </xsl:attribute>
      <xsl:attribute name="expression">
        <xsl:value-of select="'${STEPMOD_DATA_RESOURCES}'"/>
      </xsl:attribute>
    </xsl:element>
    <xsl:element name="param">
      <xsl:attribute name="name">
        <xsl:value-of select="'STEPMOD_DATA_APS'"/>
      </xsl:attribute>
      <xsl:attribute name="expression">
        <xsl:value-of select="'${STEPMOD_DATA_APS}'"/>
      </xsl:attribute>
    </xsl:element>
  </xsl:template>
  
  <!-- generate the target "publish" -->
  <xsl:template match="publication_index" mode="target_publish">
    <xsl:element name="target">
      <xsl:attribute name="name">publish</xsl:attribute>
      <xsl:attribute name="depends">isomodules</xsl:attribute>
      <xsl:attribute name="description">Copy HTML to publication directory</xsl:attribute>
      <xsl:apply-templates select="//module" mode="target_publish"/>

    </xsl:element>
  </xsl:template>

  <xsl:template match="module" mode="target_publish">

    <xsl:variable name="module_file" select="concat('../../data/modules/',@name,'/module.xml')"/>
    <xsl:variable name="module_xml" select="document($module_file)"/>
    
    <xsl:variable name="module_iso_no" select="concat('iso10303_',$module_xml/module/@part)"/>
    <xsl:variable name="module_dir" select="concat('${PUBDIR}/',$module_iso_no,'/')"/>

    <xsl:text>
    </xsl:text>
    <xsl:comment> Publish module: <xsl:value-of select="@name"/> </xsl:comment>

    <!-- the readme -->
    <xsl:element name="style">
      <xsl:attribute name="in">
        <xsl:value-of select="concat('data/modules/',@name,'/module.xml')"/>
      </xsl:attribute>
      <xsl:attribute name="out">
        <xsl:value-of select="concat($module_dir,$module_iso_no,'_readme.txt')"/>
      </xsl:attribute>
      <xsl:attribute name="style">
        <xsl:value-of select="'${STEPMODSTYLES}/publication/pub_readme.xsl'"/>
      </xsl:attribute>        
      <xsl:attribute name="destdir">
        <xsl:value-of select="$module_dir"/>
      </xsl:attribute>
    </xsl:element>

    <!-- make sure that the CR/LF are windows for the readme -->
    <xsl:element name="fixcrlf">
      <xsl:attribute name="srcdir">
        <xsl:value-of select="$module_dir"/>
      </xsl:attribute>
      <xsl:attribute name="includes">
        <xsl:value-of select="concat($module_iso_no,'_readme.txt')"/>
      </xsl:attribute>
      <xsl:attribute name="eol">
        <xsl:value-of select="'crlf'"/>
      </xsl:attribute>
    </xsl:element>

    <!-- the frontpage -->
    <xsl:element name="style">
      <xsl:attribute name="in">
        <xsl:value-of select="concat('data/modules/',@name,'/module.xml')"/>
      </xsl:attribute>
      <xsl:attribute name="out">
        <xsl:value-of select="concat($module_dir,$module_iso_no,'.htm')"/>
      </xsl:attribute>
      <xsl:attribute name="style">
        <xsl:value-of select="'${STEPMODSTYLES}/publication/pub_frontpage.xsl'"/>
      </xsl:attribute>        
      <xsl:attribute name="destdir">
        <xsl:value-of select="$module_dir"/>
      </xsl:attribute>
      <param name="output_type" expression="HTM"/>
    </xsl:element>

    <!-- the cover page redirected to front page -->
    <xsl:element name="style">
      <xsl:attribute name="in">
        <xsl:value-of select="concat('data/modules/',@name,'/module.xml')"/>
      </xsl:attribute>
      <xsl:attribute name="out">
        <xsl:value-of select="concat($module_dir,'data/modules/',@name,'/sys/cover.htm')"/>
      </xsl:attribute>
      <xsl:attribute name="style">
        <xsl:value-of select="'${STEPMODSTYLES}/publication/pub_cover.xsl'"/>
      </xsl:attribute>        
      <xsl:attribute name="destdir">
        <xsl:value-of select="$module_dir"/>
      </xsl:attribute>
      <param name="output_type" expression="HTM"/>
    </xsl:element>

    <!-- copy the SC4 cover page -->
    <xsl:element name="copy">
      <xsl:attribute name="file">
        <xsl:value-of select="concat('${TMPDIR}/data/modules/',@name,'/sys/cover.htm')"/>
      </xsl:attribute>
      <xsl:attribute name="tofile">
        <xsl:value-of select="concat($module_dir,'data/modules/',@name,'/sys/sc4_cover.htm')"/>
      </xsl:attribute>
    </xsl:element>
    

    <xsl:element name="copy">
      <xsl:attribute name="todir">
        <xsl:value-of select="concat($module_dir,'images')"/>
      </xsl:attribute>
      <xsl:element name="fileset">
        <xsl:attribute name="dir">
          <xsl:value-of select="'${TMPDIR}/images'"/>
        </xsl:attribute>
      </xsl:element>
    </xsl:element>

    <xsl:element name="copy">
      <xsl:attribute name="todir">
        <xsl:value-of select="concat($module_dir,'data/modules/',@name)"/>
      </xsl:attribute>
      <xsl:element name="fileset">
        <xsl:attribute name="dir">
          <xsl:value-of select="concat('${TMPDIR}/data/modules/',@name)"/>
        </xsl:attribute>
      </xsl:element>
    </xsl:element>

    <xsl:element name="copy">
      <xsl:attribute name="file">
        <xsl:value-of select="concat('${TMPDIR}/data/modules/',@name,'/sys/abstract.htm')"/>
      </xsl:attribute>
      <xsl:attribute name="tofile">
        <xsl:value-of select="concat($module_dir,'abstracts/module_abstract_',$module_xml/module/@part,'.htm')"/>
      </xsl:attribute>
    </xsl:element>

    <xsl:apply-templates select="." mode="copy_express"/>

    <xsl:element name="zip">
      <xsl:attribute name="zipfile">
        <xsl:value-of select="concat('${PUBDIR}/iso10303_',$module_xml/module/@part,'.zip')"/>
      </xsl:attribute>
      <xsl:attribute name="basedir">
        <xsl:value-of select="$module_dir"/>
      </xsl:attribute>
      <xsl:attribute name="excludes">
        <xsl:value-of select="'**/*.zip'"/>
      </xsl:attribute>
      <xsl:attribute name="includes">
        <xsl:value-of select="'**'"/>
      </xsl:attribute>
    </xsl:element>

    <xsl:element name="loadfile">
      <xsl:attribute name="property">
        <xsl:value-of select="'CVS_module_entry'"/>
      </xsl:attribute>
      <xsl:attribute name="srcFile">
        <xsl:apply-templates select=".">
          <xsl:with-param name="prefix" select="'data/modules/'"/>
          <xsl:with-param name="suffix" select="'/CVS/Entries'"/>
        </xsl:apply-templates>
      </xsl:attribute>
    </xsl:element>

    <xsl:element name="loadfile">
      <xsl:attribute name="property">
        <xsl:value-of select="'CVS_module_dvlp_entry'"/>
      </xsl:attribute>
      <xsl:attribute name="srcFile">
        <xsl:apply-templates select=".">
          <xsl:with-param name="prefix" select="'data/modules/'"/>
          <xsl:with-param name="suffix" select="'/dvlp/CVS/Entries'"/>
        </xsl:apply-templates>
      </xsl:attribute>
    </xsl:element>

    <xsl:element name="loadfile">
      <xsl:attribute name="property">
        <xsl:value-of select="'CVS_module_sys_entry'"/>
      </xsl:attribute>
      <xsl:attribute name="srcFile">
        <xsl:apply-templates select=".">
          <xsl:with-param name="prefix" select="'data/modules/'"/>
          <xsl:with-param name="suffix" select="'/sys/CVS/Entries'"/>
        </xsl:apply-templates>
      </xsl:attribute>
    </xsl:element>

    <xsl:element name="style">
      <xsl:attribute name="in">
        <xsl:value-of select="concat('data/modules/',@name,'/module.xml')"/>
      </xsl:attribute>
      <xsl:attribute name="out">
        <xsl:value-of select="concat($module_dir,'data/modules/',@name,'/publication_record.xml')"/>
      </xsl:attribute>
      <xsl:attribute name="style">
        <xsl:value-of select="'${STEPMODSTYLES}/publication/pub_record.xsl'"/>
      </xsl:attribute>        
      <xsl:attribute name="destdir">
        <xsl:value-of select="$module_dir"/>
      </xsl:attribute>
      <xsl:element name="param">
        <xsl:attribute name="name">
          <xsl:value-of select="'CVS_module_entry'"/>
        </xsl:attribute>
        <xsl:attribute name="expression">
          <xsl:value-of select="'${CVS_module_entry}'"/>
        </xsl:attribute>
      </xsl:element>
      <xsl:element name="param">
        <xsl:attribute name="name">
          <xsl:value-of select="'CVS_module_dvlp_entry'"/>
        </xsl:attribute>
        <xsl:attribute name="expression">
          <xsl:value-of select="'${CVS_module_dvlp_entry}'"/>
        </xsl:attribute>
      </xsl:element>
      <xsl:element name="param">
        <xsl:attribute name="name">
          <xsl:value-of select="'CVS_module_sys_entry'"/>
        </xsl:attribute>
        <xsl:attribute name="expression">
          <xsl:value-of select="'${CVS_module_sys_entry}'"/>
        </xsl:attribute>
      </xsl:element>
      <xsl:element name="param">
        <xsl:attribute name="name">
          <xsl:value-of select="'CVS_tag'"/>
        </xsl:attribute>
        <xsl:attribute name="expression">
          <xsl:value-of select="'${CVS_tag}'"/>
        </xsl:attribute>
      </xsl:element>
      <xsl:element name="param">
        <xsl:attribute name="name">
          <xsl:value-of select="'PUBLICATION_DATE'"/>
        </xsl:attribute>
        <xsl:attribute name="expression">
          <xsl:value-of select="'${PUB_DATE}'"/>
        </xsl:attribute>
      </xsl:element>

    </xsl:element>
  </xsl:template>


  <xsl:template match="module" mode="copy_express">
    <xsl:variable name="module" select="@name"/>
    <xsl:variable name="module_xml"
      select="document(concat('../../data/modules/',$module,'/module.xml'))"/>
    <xsl:variable name="module_iso_no" select="concat('iso10303_',$module_xml/module/@part)"/>
    <xsl:variable name="express_dir" select="concat('${PUBDIR}/',$module_iso_no,'/express/')"/>
    
    <xsl:variable name="part" select="$module_xml/module/@part"/>
    <xsl:variable name="status" 
      select="translate(translate($module_xml/module/@status,$UPPER,$LOWER),'-','')"/>
    <xsl:variable name="wg" select="$module_xml/module/@sc4.working_group"/>
    <xsl:variable name="prefix" select="concat('part',$part,$status,'_wg',$wg,'n')"/>
    
    <xsl:variable name="wg.number.arm" select="$module_xml/module/@wg.number.arm"/>
    <xsl:element name="copy">
      <xsl:attribute name="file">
        <xsl:value-of select="concat('data/modules/',@name,'/arm.exp')"/>
      </xsl:attribute>
      <xsl:attribute name="tofile">
        <xsl:value-of select="concat($express_dir,$prefix,$wg.number.arm,'arm.exp')"/>
      </xsl:attribute>
    </xsl:element>
    
    <xsl:if test="$module_xml/module/arm_lf">
      <xsl:variable name="wg.number.arm_lf" select="$module_xml/module/@wg.number.arm_lf"/>
      <xsl:element name="copy">
        <xsl:attribute name="file">
          <xsl:value-of select="concat('data/modules/',@name,'/arm_lf.exp')"/>
        </xsl:attribute>
        <xsl:attribute name="tofile">
          <xsl:value-of select="concat($express_dir,$prefix,$wg.number.arm_lf,'arm_lf.exp')"/>
        </xsl:attribute>
      </xsl:element>
    </xsl:if>
    
    <xsl:variable name="wg.number.mim" select="$module_xml/module/@wg.number.mim"/> 
    <xsl:element name="copy">
      <xsl:attribute name="file">
        <xsl:value-of select="concat('data/modules/',@name,'/mim.exp')"/>
      </xsl:attribute>
      <xsl:attribute name="tofile">
        <xsl:value-of select="concat($express_dir,$prefix,$wg.number.mim,'mim.exp')"/>
      </xsl:attribute>
    </xsl:element>
    
    <xsl:if test="$module_xml/module/mim_lf">
      <xsl:variable name="wg.number.mim_lf" select="$module_xml/module/@wg.number.mim_lf"/>
      <xsl:element name="copy">
        <xsl:attribute name="file">
          <xsl:value-of select="concat('data/modules/',@name,'/mim_lf.exp')"/>
        </xsl:attribute>
        <xsl:attribute name="tofile">
          <xsl:value-of select="concat($express_dir,$prefix,$wg.number.mim_lf,'mim_lf.exp')"/>
        </xsl:attribute>
      </xsl:element>
    </xsl:if>
  </xsl:template>


  <xsl:template match="module">
    <xsl:param name="prefix"/>
    <xsl:param name="suffix"/>
    <xsl:param name="terminate" select="'YES'"/>
    <xsl:choose>
      <xsl:when test="$terminate='YES'">
        <xsl:choose>
          <xsl:when test="position()=last()">
            <xsl:value-of select="concat($prefix,@name,$suffix)"/><xsl:text/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="concat($prefix,@name,$suffix)"/>,<xsl:text/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="concat($prefix,@name,$suffix)"/>,<xsl:text/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


  <xsl:template match="module" mode="long_form">
    <xsl:param name="prefix"/>
    <xsl:param name="suffix"/>
    <xsl:param name="terminate" select="'YES'"/>
    <xsl:variable name="module_xml" select="document(concat('../../data/modules/',@name,'/module.xml'))"/>
    <xsl:if test="$module_xml/module/arm_lf">
      <xsl:choose>
        <xsl:when test="$terminate='YES'">
          <xsl:choose>
            <xsl:when test="position()=last()">
              <xsl:value-of select="concat($prefix,@name,$suffix)"/><xsl:text/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="concat($prefix,@name,$suffix)"/>,<xsl:text/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="concat($prefix,@name,$suffix)"/>,<xsl:text/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>



  <!-- run a check on each module listed in publication_index -->
  <xsl:template match="module" mode="check_module">
    <xsl:variable name="module_ok">
      <xsl:call-template name="check_module_exists">
        <xsl:with-param name="module" select="@name"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="$module_ok!='true'">
        <xsl:message>
************************************************************
  ERROR 1 
  <xsl:value-of select="$module_ok"/>
************************************************************
        </xsl:message>
        <xsl:value-of select="'false'"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="'true'"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  


  <!-- given the name of a module, check to see whether it has been
       included in the repository_index.xml file
       Return true or if not found, an error message.
       -->
  <xsl:template name="check_module_exists">
    <xsl:param name="module"/>

    <xsl:variable name="module_name">
      <xsl:call-template name="module_name">
        <xsl:with-param name="module" select="$module"/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="ret_val">
        <xsl:choose>
          <xsl:when
            test="document('../../repository_index.xml')/repository_index/modules/module[@name=$module_name]">
            <xsl:value-of select="'true'"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of
              select="concat(' The module ', $module_name,
                      ' is not identified as a module in repository_index.xml')"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:value-of select="$ret_val"/>
  </xsl:template>

  
  
</xsl:stylesheet>
