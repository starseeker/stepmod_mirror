<?xml version="1.0" encoding="UTF-8"?>

<!--  $Id: build_CR.xsl,v 1.27 2016/08/04 10:37:45 mikeward Exp $
Author:  Rob Bodington, Eurostep Limited
Owner:   Developed by Eurostep Limited http://www.eurostep.com and supplied to NIST under contract.
Purpose: To build the ANT build file from which a Change Request is produced. 
-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:exslt="http://exslt.org/common" exclude-result-prefixes="exslt" version="1.0">

    <xsl:import href="../../xsl/res_doc/common.xsl"/>
    <xsl:import href="../../xsl/bom_doc/common.xsl"/>

    <xsl:output method="xml" indent="yes"/>

    <xsl:variable name="LOWER" select="'abcdefghijklmnopqrstuvwxyz_'"/>
    <xsl:variable name="UPPER" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>

    <!-- MWD match index -->
    <xsl:template match="part1000.publication_index">
        <xsl:comment> This file has been auto generated by: ant -buildfile buildbuild.xml </xsl:comment>
        <project xsl:extension-element-prefixes="exslt" name="part1000_publication" default="all"
            basedir="../../..">
            <xsl:apply-templates select="." mode="target_variables"/>
            <xsl:apply-templates select="." mode="target_checkcvstag"/>
            <xsl:if test="./modules/module">
                <xsl:apply-templates select="." mode="target_modules_check"/>
            </xsl:if>
            <xsl:apply-templates select="." mode="target_normref_check"/>
            <xsl:apply-templates select="." mode="target_bibliography_check"/>
            <xsl:apply-templates select="." mode="target_wgn_summary"/>
            <xsl:apply-templates select="." mode="target_init"/>
            <xsl:apply-templates select="." mode="target_isoindex"/>
            <xsl:apply-templates select="." mode="target_zip"/>

            <xsl:if test="./modules/module">
                <xsl:apply-templates select="." mode="target_isomodules"/>
            </xsl:if>

            <xsl:if test="./resource_docs/resource_doc">
                <xsl:apply-templates select="." mode="target_isoresdocs"/>
            </xsl:if>

            <xsl:if test="./resources/resource">
                <xsl:apply-templates select="." mode="target_isoresources"/>
            </xsl:if>

            <xsl:if test="./business_object_models/bom_doc">
                <xsl:apply-templates select="." mode="target_isobomdocs"/>
            </xsl:if>
            
            <xsl:apply-templates select="." mode="target_publish_isoparts"/>
            <xsl:apply-templates select="." mode="target_all"/>
        </project>
    </xsl:template>

    <!-- generate the target "checkcvstag" -->
    <xsl:template match="part1000.publication_index" mode="target_checkcvstag">
        <xsl:element name="target">
            <xsl:attribute name="name">checkcvstag</xsl:attribute>
            <xsl:attribute name="description">check CVS tag</xsl:attribute>
            <xsl:variable name="CVS_tag" select="@name"/>
            <input message="Have you tagged the CVS repository (y/n)? The Tag to use is {$CVS_tag}"
                addproperty="do.continue"/>
            <condition property="do.abort">
                <xsl:element name="equals">
                    <xsl:attribute name="arg1">n</xsl:attribute>
                    <xsl:attribute name="arg2">${do.continue}</xsl:attribute>
                </xsl:element>
            </condition>
            <xsl:variable name="fail_msg">-
                ------------------------------------------------------------ You need to tag the
                repository before publishing the modules and/or resources and/or bo models. Use:
                <xsl:value-of select="$CVS_tag"/>
                ------------------------------------------------------------ </xsl:variable>
            <fail if="do.abort">
                <xsl:value-of select="$fail_msg"/>
            </fail>
        </xsl:element>
    </xsl:template>

    <xsl:template match="part1000.publication_index" mode="target_isomodules">
        <xsl:text>
	    </xsl:text>
        <target xsl:extension-element-prefixes="exslt" name="isomodules" depends="init"
            description="generate HTML for all modules listed in the publication_index">
            <dependset>
                <xsl:element name="srcfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'${STEPMODDTDDIR}'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'**/*.dtd, **/*.ent'"/>
                    </xsl:attribute>
                </xsl:element>
                <xsl:element name="srcfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'${STEPMODSTYLES}'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'**/*.xsl'"/>
                    </xsl:attribute>
                </xsl:element>
                <xsl:element name="srcfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'.'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'${MODULES}'"/>
                    </xsl:attribute>
                </xsl:element>
                <xsl:element name="srcfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'.'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'${GIFS}'"/>
                    </xsl:attribute>
                </xsl:element>
                <xsl:element name="srcfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'.'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'${EXPRESS}'"/>
                    </xsl:attribute>
                </xsl:element>
                <xsl:element name="targetfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'${P1000DIR}'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'/data/modules/**/*.htm'"/>
                    </xsl:attribute>
                </xsl:element>
            </dependset>
            <xsl:element name="xslt">
                <xsl:attribute name="includes">
                    <xsl:value-of select="'${CONTENTSXML}'"/>
                </xsl:attribute>
                <xsl:attribute name="style">
                    <xsl:value-of select="'${STEPMODSTYLES}/sect_contents.xsl'"/>
                </xsl:attribute>
                <xsl:apply-templates select="." mode="modules_target_style_attributes"/>
            </xsl:element>
            <xsl:element name="xslt">
                <xsl:attribute name="includes">
                    <xsl:value-of select="'${SCOPEXML}'"/>
                </xsl:attribute>
                <xsl:attribute name="style">
                    <xsl:value-of select="'${STEPMODSTYLES}/sect_1_scope.xsl'"/>
                </xsl:attribute>
                <xsl:apply-templates select="." mode="modules_target_style_attributes"/>
            </xsl:element>
            <xsl:element name="xslt">
                <xsl:attribute name="includes">
                    <xsl:value-of select="'${REFSXML}'"/>
                </xsl:attribute>
                <xsl:attribute name="style">
                    <xsl:value-of select="'${STEPMODSTYLES}/sect_2_refs.xsl'"/>
                </xsl:attribute>
                <xsl:apply-templates select="." mode="modules_target_style_attributes"/>
            </xsl:element>
            <xsl:element name="xslt">
                <xsl:attribute name="includes">
                    <xsl:value-of select="'${DEFSXML}'"/>
                </xsl:attribute>
                <xsl:attribute name="style">
                    <xsl:value-of select="'${STEPMODSTYLES}/sect_3_defs.xsl'"/>
                </xsl:attribute>
                <xsl:apply-templates select="." mode="modules_target_style_attributes"/>
            </xsl:element>
            <xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${INFOREQSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_4_info_reqs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${MAINXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_5_main.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${REFDATAXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_6_refdata.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${MAPPINGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_5_mapping.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${MIMXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_5_mim.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${INDEXXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/index.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${ABSTRACTXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_abstract.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${ASHORTNAMESXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_a_short_names.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOBJREGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_b_obj_reg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BIBLIOXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_biblio.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${MODINDEXXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_modindex.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${CARMEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_c_arm_expg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${COVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_cover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
				<xsl:element name="param">
					<xsl:attribute name="name">
						<xsl:value-of select="'coverpage_date'"/>
					</xsl:attribute>
					<xsl:attribute name="expression">
						<xsl:value-of select="'${DATE}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${ISOCOVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_isocover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
				<xsl:element name="param">
					<xsl:attribute name="name">
						<xsl:value-of select="'coverpage_date'"/>
					</xsl:attribute>
					<xsl:attribute name="expression">
						<xsl:value-of select="'${DATE}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>

			<!-- move the ISO cover page to cover page -->
			<xsl:element name="move">
				<xsl:attribute name="todir">${P1000DIR}</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">${P1000DIR}</xsl:attribute>
					<xsl:attribute name="includes">${ISOCOVERHTM}</xsl:attribute>
				</xsl:element>
				<mapper type="glob" from="*isocover.htm" to="*cover.htm"/>
			</xsl:element>


			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMIMEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_d_mim_expg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${EEXPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${EEXPARMXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_arm.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:variable name="longforms">
				<xsl:apply-templates select="modules/module" mode="long_form">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp_arm_lf.xml'"/>
				</xsl:apply-templates>
			</xsl:variable>

			<xsl:if test="string-length($longforms) > 0">
				<xsl:element name="xslt">
					<xsl:attribute name="includes">
						<xsl:value-of select="'${EEXPARMLFXML}'"/>
					</xsl:attribute>
					<xsl:attribute name="style">
						<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_arm_lf.xsl'"/>
					</xsl:attribute>
					<xsl:apply-templates select="." mode="modules_target_style_attributes">
						
					</xsl:apply-templates>
				</xsl:element>
			</xsl:if>
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${EEXPMIMXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_mim.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:if test="string-length($longforms) > 0">
				<xsl:element name="xslt">
					<xsl:attribute name="includes">
						<xsl:value-of select="'${EEXPMIMLFXML}'"/>
					</xsl:attribute>
					<xsl:attribute name="style">
						<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_mim_lf.xsl'"/>
					</xsl:attribute>
					<xsl:apply-templates select="." mode="modules_target_style_attributes">
						
					</xsl:apply-templates>
				</xsl:element>
			</xsl:if>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${FGUIDEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_f_guide.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${GCHANGEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_g_change.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${FOREWORDXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_foreword.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${INTRODUCTIONXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_introduction.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of
						select="'${ARMEXPXML}, ${MIMEXPXML},${ARMLFEXPXML}, ${MIMLFEXPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/express.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${ARMEXPGXML},${MIMEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/imgfile.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${EXPRESS}'"/>
					</xsl:attribute>
				</xsl:element>
				<!-- as the express file is copied, replace the CVS Id with aSTEPmod Id
					so that subversion can take over the Id tag -->
				<xsl:variable name="escDollar" select="'\$'"/>
				<xsl:variable name="dollar" select="'$'"/>
				<xsl:variable name="pattern" select="concat($escDollar, 'Id: (.*) ', $escDollar)"/>
				<xsl:variable name="replace"
					select="concat('Part1000: ', $dollar, 'Id: ', $dollar, '&#xA; STEPmod.CVS.Id: \1')"/>
				<filterchain>
					<replaceregex pattern="{$pattern}" replace="{$replace}" flags="s"/>
				</filterchain>
			</xsl:element>

			<!-- the replaceregex above seems to introduce extra linefeed characters - hence strip them -->
			<xsl:element name="fixcrlf">
				<xsl:attribute name="srcDir">${P1000DIR}</xsl:attribute>
				<xsl:attribute name="eol">crlf</xsl:attribute>
				<xsl:attribute name="includes">
					<xsl:value-of select="'${EXPRESS}'"/>
				</xsl:attribute>
			</xsl:element>

			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${GIFS}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>
        </target>
    </xsl:template>

    <xsl:template match="part1000.publication_index" mode="target_isoresdocs">
        <xsl:text>
	    </xsl:text>
        
        
        
        <target xsl:extension-element-prefixes="exslt" name="isoresdocs" depends="init"
            description="generate HTML for all resource documents listed in the publication_index">
            <xsl:for-each select="./resource_docs/resource_doc">
                <xsl:variable name="part_number" select="./@number"/>
                <xsl:variable name="part_name" select="./@name"/>
                <xsl:variable name="res_doc_directory" select="concat('${PUBDIR}/iso10303_', $part_number, '/data/resource_docs/', $part_name, '/sys')"/>
                
                <dependset>
                    <xsl:element name="srcfileset">
                        <xsl:attribute name="dir">
                            <xsl:value-of select="'${STEPMODDTDDIR}'"/>
                        </xsl:attribute>
                        <xsl:attribute name="includes">
                            <xsl:value-of select="'**/*.dtd, **/*.ent'"/>
                        </xsl:attribute>
                    </xsl:element>
                    <xsl:element name="srcfileset">
                        <xsl:attribute name="dir">
                            <xsl:value-of select="'${STEPMODSTYLES}'"/>
                        </xsl:attribute>
                        <xsl:attribute name="includes">
                            <xsl:value-of select="'**/*.xsl'"/>
                        </xsl:attribute>
                    </xsl:element>
                    <xsl:element name="srcfileset">
                        <xsl:attribute name="dir">
                            <xsl:value-of select="'.'"/>
                        </xsl:attribute>
                        <xsl:attribute name="includes">
                            <xsl:value-of select="concat('${RESDOCS', $part_number, '}')"/>
                        </xsl:attribute>
                    </xsl:element>
                    <xsl:element name="srcfileset">
                        <xsl:attribute name="dir">
                            <xsl:value-of select="'.'"/>
                        </xsl:attribute>
                        <xsl:attribute name="includes">
                            <xsl:value-of select="concat('${RESDOCGIFS', $part_number, '}')"/>
                        </xsl:attribute>
                    </xsl:element>
                    <xsl:element name="targetfileset">
                        <xsl:attribute name="dir">
                            <xsl:value-of select="'${PUBDIR}'"/>
                        </xsl:attribute>
                        <xsl:attribute name="includes">
                            <xsl:value-of select="'/data/resource_docs/**/*.htm'"/>
                        </xsl:attribute>
                    </xsl:element>
                </dependset>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCINDEXXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_resdocindex.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCABSTRACTXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_abstract.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCCONTENTSXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_contents.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCSCOPEXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_1_scope.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCRESDOCINDEXXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_resdocindex.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCREFSXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_2_refs.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCDEFSXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_3_defs.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCSCHEMAXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_schema.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCCEXPSCHEMAXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_c_exp_schema.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCCEXPXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_c_exp.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCDEXPGXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_d_expg.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCASHORTNAMESXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_a_short_names.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCBOBJREGXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_b_obj_reg.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCTECHDISCUSSIONXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_tech_discussion.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCEXAMPLESXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_examples.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCADDSCOPEXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_add_scope.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCBIBLIOXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_biblio.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCCOVERXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_cover.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCISOCOVERXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_isocover.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="move">
                    <xsl:attribute name="todir"><xsl:value-of select="$res_doc_directory"/></xsl:attribute>
                    <xsl:element name="fileset">
                        <xsl:attribute name="dir"><xsl:value-of select="$res_doc_directory"/></xsl:attribute>
                        <xsl:attribute name="includes"><xsl:value-of select="'isocover.htm'"/></xsl:attribute>
                    </xsl:element>
                    <mapper type="glob" from="*isocover.htm" to="*cover.htm"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCFOREWORDXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_foreword.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCINTRODUCTIONXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_introduction.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCSCHEMADIAGXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/imgfile.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESDOCGCHANGEXML', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_g_change.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of
                            select="concat('${RESDOCRESOURCESSCHEMAEXPGXMLS', $part_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/imgfile.xsl'"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
                </xsl:element>
               
                <xsl:element name="copy">
                    <xsl:attribute name="todir">
                        <xsl:value-of select="concat('${PUBDIR}/iso10303_', $part_number)"/>
                    </xsl:attribute>
                    <xsl:element name="fileset">
                        <xsl:attribute name="dir">
                            <xsl:value-of select="'.'"/>
                        </xsl:attribute>
                        <xsl:attribute name="includes">
                            <xsl:value-of select="concat('${RESDOCGIFS', $part_number, '}')"/>
                        </xsl:attribute>
                    </xsl:element>
                </xsl:element>
                
                <xsl:element name="copy">
                    <xsl:attribute name="todir">
                        <xsl:value-of select="concat('${PUBDIR}/iso10303_', $part_number)"/>
                    </xsl:attribute>
                    <xsl:element name="fileset">
                        <xsl:attribute name="dir">
                            <xsl:value-of select="'.'"/>
                        </xsl:attribute>
                        
                        <xsl:attribute name="includes">
                            <xsl:value-of
                                select="concat('${RESDOCRESOURCESSCHEMAEXPGGIFS', $part_number, '}')"/>
                        </xsl:attribute>
                    </xsl:element>
                </xsl:element>
                
            </xsl:for-each>
        </target>
    </xsl:template>

    <xsl:template match="part1000.publication_index" mode="target_isoresources">
        <xsl:text>
	    </xsl:text>
        <target xsl:extension-element-prefixes="exslt" name="isoresources" depends="init"
            description="generate HTML for all resources listed in the publication_index">
            <xsl:for-each select="./resources/resource">
                
                <dependset>
                    <xsl:element name="srcfileset">
                        <xsl:attribute name="dir">
                            <xsl:value-of select="'${STEPMODDTDDIR}'"/>
                        </xsl:attribute>
                        <xsl:attribute name="includes">
                            <xsl:value-of select="'**/*.dtd, **/*.ent'"/>
                        </xsl:attribute>
                    </xsl:element>
                    <xsl:element name="srcfileset">
                        <xsl:attribute name="dir">
                            <xsl:value-of select="'${STEPMODSTYLES}'"/>
                        </xsl:attribute>
                        <xsl:attribute name="includes">
                            <xsl:value-of select="'**/*.xsl'"/>
                        </xsl:attribute>
                    </xsl:element>
                    <xsl:element name="targetfileset">
                        <xsl:attribute name="dir">
                            <xsl:value-of select="'${P1000DIR}'"/>
                        </xsl:attribute>
                        <xsl:attribute name="includes">
                            <xsl:value-of select="'/data/resources/**/*.htm'"/>
                        </xsl:attribute>
                    </xsl:element>
                </dependset>
                
                <xsl:variable name="resource_number" select="./@number"/>
                
                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESSCHEMAXML', $resource_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="destdir">
                        <xsl:value-of select="concat('${PUBDIR}/iso10303_', $resource_number)"/>
                    </xsl:attribute>
                    <xsl:attribute name="extension">
                        <xsl:value-of select="'.htm'"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/express.xsl'"/>
                    </xsl:attribute>
                    <param name="output_type" expression="HTM"/>
                    <xsl:element name="param">
                        <xsl:attribute name="name">
                            <xsl:value-of select="'output_background'"/>
                        </xsl:attribute>
                        <xsl:attribute name="expression">
                            <xsl:value-of select="'${OUTPUT_RESOURCES_BACKGROUND}'"/>
                        </xsl:attribute>
                    </xsl:element>
                    <xsl:choose>
                        <xsl:when test="./@background.image.dependent.resources">
                            <xsl:element name="param">
                                <xsl:attribute name="name">
                                    <xsl:value-of select="'background_image'"/>
                                </xsl:attribute>
                                <xsl:attribute name="expression">
                                    <xsl:value-of select="./@background.image.dependent.resources"/>
                                </xsl:attribute>
                            </xsl:element>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:element name="param">
                                <xsl:attribute name="name">
                                    <xsl:value-of select="'background_image'"/>
                                </xsl:attribute>
                                <xsl:attribute name="expression">
                                    <xsl:value-of select="'greybackground.jpg'"/>
                                </xsl:attribute>
                            </xsl:element>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:element>

                <xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESOURCESSCHEMAEXPGXMLS', $resource_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="destdir">
                        <xsl:value-of select="concat('${PUBDIR}/iso10303_', $resource_number)"/>
                    </xsl:attribute>
                    <xsl:attribute name="extension">
                        <xsl:value-of select="'.htm'"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/res_doc/imgfile.xsl'"/>
                    </xsl:attribute>
                    <param name="output_type" expression="HTM"/>
                </xsl:element>
                
                <!--<xsl:element name="xslt">
                    <xsl:attribute name="includes">
                        <xsl:value-of select="concat('${RESOURCESXML', $resource_number, '}')"/>
                    </xsl:attribute>
                    <xsl:attribute name="destdir">
                        <xsl:value-of select="concat('${PUBDIR}/iso10303_', $resource_number)"/>
                    </xsl:attribute>
                    <xsl:attribute name="extension">
                        <xsl:value-of select="'.htm'"/>
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:value-of select="'${STEPMODSTYLES}/express.xsl'"/>
                    </xsl:attribute>
                    <param name="output_type" expression="HTM"/>
                    <xsl:element name="param">
                        <xsl:attribute name="name">
                            <xsl:value-of select="'output_background'"/>
                        </xsl:attribute>
                        <xsl:attribute name="expression">
                            <xsl:value-of select="'${OUTPUT_RESOURCES_BACKGROUND}'"/>
                        </xsl:attribute>
                    </xsl:element>
                    <xsl:choose>
                        <xsl:when test="./@background.image.dependent.resources">
                            <xsl:element name="param">
                                <xsl:attribute name="name">
                                    <xsl:value-of select="'background_image'"/>
                                </xsl:attribute>
                                <xsl:attribute name="expression">
                                    <xsl:value-of select="./@background.image.dependent.resources"/>
                                </xsl:attribute>
                            </xsl:element>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:element name="param">
                                <xsl:attribute name="name">
                                    <xsl:value-of select="'background_image'"/>
                                </xsl:attribute>
                                <xsl:attribute name="expression">
                                    <xsl:value-of select="'greybackground.jpg'"/>
                                </xsl:attribute>
                            </xsl:element>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:element>   -->             
                
                <xsl:element name="copy">
                    <xsl:attribute name="todir">
                        <xsl:value-of select="concat('${PUBDIR}/iso10303_', $resource_number)"/>
                    </xsl:attribute>
                    <xsl:element name="fileset">
                        <xsl:attribute name="dir">
                            <xsl:value-of select="'.'"/>
                        </xsl:attribute>
                        <xsl:attribute name="includes">
                            <xsl:value-of select="concat('${RESOURCESEXP', $resource_number, '}')"/>
                        </xsl:attribute>
                    </xsl:element>
                </xsl:element>
                
                <xsl:element name="copy">
                    <xsl:attribute name="todir">
                        <xsl:value-of select="concat('${PUBDIR}/iso10303_', $resource_number)"/>
                    </xsl:attribute>
                    <xsl:element name="fileset">
                        <xsl:attribute name="dir">
                            <xsl:value-of select="'.'"/>
                        </xsl:attribute>
                        <xsl:attribute name="includes">
                            <xsl:value-of select="concat('${RESOURCESSCHEMAEXPGGIFS', $resource_number, '}')"/>
                        </xsl:attribute>
                    </xsl:element>
                </xsl:element>
                
            </xsl:for-each>
        </target>
    </xsl:template>

    <xsl:template match="part1000.publication_index" mode="target_isobomdocs">
        <xsl:text>
	    </xsl:text>
        <target name="isobomdocs" depends="init" description="generate HTML for all BO Models">

            <dependset>
                <xsl:element name="srcfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'${STEPMODDTDDIR}'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'**/*.dtd, **/*.ent'"/>
                    </xsl:attribute>
                </xsl:element>
                <xsl:element name="srcfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'${STEPMODSTYLES}'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'**/*.xsl'"/>
                    </xsl:attribute>
                </xsl:element>
                <xsl:element name="srcfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'.'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'${BOMDOCS}'"/>
                    </xsl:attribute>
                </xsl:element>
                <xsl:element name="srcfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'.'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'${BOMDOCGIFS}'"/>
                    </xsl:attribute>
                </xsl:element>
                <xsl:element name="targetfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'${PUBDIR}'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'/data/business_object_models/**/*.htm'"/>
                    </xsl:attribute>
                </xsl:element>
            </dependset>

            <xsl:element name="xslt">
                <xsl:attribute name="includes">
                    <xsl:value-of select="'${BOMSCOPEXML}'"/>
                </xsl:attribute>
                <xsl:attribute name="style">
                    <xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_1_scope.xsl'"/>
                </xsl:attribute>
                <xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
            </xsl:element>
            
            <xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMREFSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_2_refs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMDEFSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_3_defs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINFOREQSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_4_info_reqs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMMAINXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_5_main.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMABSTRACTXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_abstract.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMANNEXBOMEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_annex_bom_expg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMANNEXBOMUMLXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_annex_bom_uml.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMANNEXCOMPINTXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_annex_comp_int.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMANNEXOBJREGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_annex_obj_reg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMANNEXXSDDERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_annex_xsd_der.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMBIBLIOXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_biblio.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_bomindex.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMCONFIGXSDXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_config.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMCONTENTSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_contents.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMCOVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_cover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMFOREWORDXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_foreword.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMFRAMETITLEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/frame_title.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMFRAMETOCXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/frame_toc.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMHELPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_help.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMEXPRESSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_express.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMEXPRESSINNERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_express_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMEXPRESSNAVXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_express_nav.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMEXPRESSNAVINNERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of
						select="'${STEPMODSTYLES}/bom_doc/index_bom_express_nav_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMEXPRESSNAVTOPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_express_nav_top.xsl'"
					/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMEXPRESSTOPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_express_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>


			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMAPPINGS}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_mappings.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMAPPINGSINNER}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_mappings_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMAPPINGSTOP}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_mappings_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMODULES}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_arm_modules.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMODULESINNER}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_arm_modules_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMODULESINNERPART}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of
						select="'${STEPMODSTYLES}/ap_doc/index_arm_modules_inner_part.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMODULESTOP}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_arm_modules_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMDOCXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_index_bomdoc.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXRESOURCESXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_resources.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXRESOURCESINNERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_resources_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXRESOURCESINNERPARTXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_resources_inner_part.xsl'"
					/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXRESOURCESTOPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_resources_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINTRODUCTIONXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_introduction.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMBOMXSDXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_xsd.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMBOMINDEXXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_bomindex.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMHOMEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/home.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<!-- generate the ISO cover page  -->
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMISOCOVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_isocover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<!-- move the ISO cover page to cover page -->
			<xsl:element name="move">
				<xsl:attribute name="todir">${P1000DIR}</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">${P1000DIR}</xsl:attribute>
					<xsl:attribute name="includes">${BOMISOCOVERHTM}</xsl:attribute>
				</xsl:element>
				<mapper type="glob" from="*isocover.htm" to="*cover.htm"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMSCHEMADIAGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/imgfile.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${BOMDOCGIFS}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>

        </target>
    </xsl:template>

    <!-- generate the target "all" ie all the first level targets that need to be run -->
    <xsl:template match="part1000.publication_index" mode="target_all">
        <xsl:text>
		</xsl:text>

        <xsl:variable name="target">
            <xsl:value-of select="'normref_check, bibliography_check, modules_check, wgn_summary, '"/>
            <xsl:choose>
                <xsl:when test="./modules">
                    <xsl:value-of select="'isomodules, publish_isomodules, '"/>
                </xsl:when>

            </xsl:choose>
            <xsl:choose>
                <xsl:when test="./resource_docs">
                    <xsl:value-of select="'isoresdocs, publish_isoresdocs, '"/>
                </xsl:when>

            </xsl:choose>
            <xsl:choose>
                <xsl:when test="./resources">
                    <xsl:value-of select="'isoresources, publish_isoresources, '"/>
                </xsl:when>

            </xsl:choose>
            <xsl:choose>
                <xsl:when test="./business_object_models">
                    <xsl:value-of select="'isobomdocs, publish_isobomdocs, '"/>
                </xsl:when>
            </xsl:choose>
        </xsl:variable>

        <xsl:variable name="target_and_zip" select="concat($target, 'zip')"/>


        <xsl:element name="target">
            <xsl:attribute name="name">all</xsl:attribute>
            <xsl:attribute name="depends">
                <xsl:value-of select="$target_and_zip"/>
            </xsl:attribute>
            <xsl:attribute name="description">Generate the HTML for ISO publication</xsl:attribute>
        </xsl:element>
    </xsl:template>

    <xsl:template match="part1000.publication_index" mode="target_init">
        <target xsl:extension-element-prefixes="exslt" name="init" depends="checkcvstag, variables">
            <xsl:choose>
                <xsl:when test="./resource_docs/resource_doc">

                    <xsl:for-each select="./resource_docs/resource_doc">
                        <xsl:variable name="res_doc_number" select="./@number"/>
                        <xsl:variable name="res_doc_images_dir"
                            select="concat('${PUBDIR}/iso10303_', $res_doc_number, '/images')"/>
                        <xsl:element name="mkdir">
                            <xsl:attribute name="dir">
                                <xsl:value-of select="$res_doc_images_dir"/>
                            </xsl:attribute>
                        </xsl:element>
                        <xsl:element name="copy">
                            <xsl:attribute name="todir">
                                <xsl:value-of select="$res_doc_images_dir"/>
                            </xsl:attribute>
                            <xsl:element name="fileset">
                                <xsl:attribute name="dir">
                                    <xsl:value-of select="'./images'"/>
                                </xsl:attribute>
                                <xsl:attribute name="includes">
                                    <xsl:value-of select="'*.*'"/>
                                </xsl:attribute>
                            </xsl:element>
                        </xsl:element>
                    </xsl:for-each>
                </xsl:when>

                <xsl:when test="./resources/resource">
                    <xsl:for-each select="./resources/resource">
                        <xsl:variable name="resource_number" select="./@number"/>
                        <xsl:variable name="resource_images_dir"
                            select="concat('${PUBDIR}/iso10303_', $resource_number, '/images')"/>
                        <xsl:element name="mkdir">
                            <xsl:attribute name="dir">
                                <xsl:value-of select="$resource_images_dir"/>
                            </xsl:attribute>
                        </xsl:element>
                        <xsl:element name="copy">
                            <xsl:attribute name="todir">
                                <xsl:value-of select="$resource_images_dir"/>
                            </xsl:attribute>
                            <xsl:element name="fileset">
                                <xsl:attribute name="dir">
                                    <xsl:value-of select="'./images'"/>
                                </xsl:attribute>
                                <xsl:attribute name="includes">
                                    <xsl:value-of select="'*.*'"/>
                                </xsl:attribute>
                            </xsl:element>
                        </xsl:element>
                    </xsl:for-each>
                </xsl:when>



            </xsl:choose>
            <xsl:choose>
                <xsl:when test="./modules/module">
                    <xsl:element name="mkdir">
                        <xsl:attribute name="dir">
                            <xsl:value-of select="'${P1000DIR}'"/>
                        </xsl:attribute>
                    </xsl:element>

                    <xsl:element name="copy">
                        <xsl:attribute name="todir">
                            <xsl:value-of select="'${P1000DIR}/images'"/>
                        </xsl:attribute>
                        <xsl:element name="fileset">
                            <xsl:attribute name="dir">
                                <xsl:value-of select="'./images'"/>
                            </xsl:attribute>
                            <xsl:attribute name="includes">
                                <xsl:value-of select="'*.*'"/>
                            </xsl:attribute>
                        </xsl:element>
                    </xsl:element>
                </xsl:when>
            </xsl:choose>
        </target>
    </xsl:template>

    <!-- generates general variables and paths to source files -->
    <xsl:template match="part1000.publication_index" mode="target_variables">
        <xsl:variable name="CR_name" select="./@name"/>
        <xsl:element name="target">
            <xsl:attribute name="name">variables</xsl:attribute>
            <xsl:attribute name="description">initialize variables</xsl:attribute>
            <tstamp>
                <format property="START_TIME" pattern="EEE, d MMM yyyy HH:mm:ss"/>
                <format property="PUB_DATE" pattern="yyyy-MM-dd"/>
            </tstamp>
            <echo> Publication started: ${START_TIME} </echo>

            <!-- target directory for modules and BOMs -->
            <xsl:element name="property">
                <xsl:attribute name="name">P1000DIR</xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('publication/isopub/', $CR_name, '/part1000')"/>
                </xsl:attribute>
            </xsl:element>

            <!-- target directory for resources and resource_docs -->
            <xsl:element name="property">
                <xsl:attribute name="name">PUBDIR</xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('publication/isopub/', $CR_name)"/>
                </xsl:attribute>
            </xsl:element>

            <xsl:element name="property">
                <xsl:attribute name="name">STEPMODSTYLES</xsl:attribute>
                <xsl:attribute name="value">xsl</xsl:attribute>
            </xsl:element>

            <xsl:element name="property">
                <xsl:attribute name="name">DATE</xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="'${DSTAMP}'"/>
                </xsl:attribute>
            </xsl:element>

            <xsl:element name="property">
                <xsl:attribute name="name">PUBSRCDIR</xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('publication/part1000/', @name)"/>
                </xsl:attribute>
            </xsl:element>

            <xsl:element name="property">
                <xsl:attribute name="name">PUBSRCDTD</xsl:attribute>
                <xsl:attribute name="value">publication/dtd</xsl:attribute>
            </xsl:element>

            <xsl:element name="property">
                <xsl:attribute name="name">PUBSRCSTYLES</xsl:attribute>
                <xsl:attribute name="value">publication/xsl</xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">STEPMODDTDDIR</xsl:attribute>
                <xsl:attribute name="value">dtd</xsl:attribute>
            </xsl:element>

            <xsl:choose>
                <xsl:when test="./resource_docs">
                    <xsl:apply-templates select="." mode="resdoc_variables"/>
                </xsl:when>
            </xsl:choose>

            <xsl:choose>
                <xsl:when test="./resources">
                    <xsl:apply-templates select="." mode="resource_variables"/>
                </xsl:when>
            </xsl:choose>

            <xsl:choose>
                <xsl:when test="./modules">
                    <xsl:apply-templates select="." mode="modules_variables"/>
                </xsl:when>
            </xsl:choose>

            <xsl:choose>
                <xsl:when test="./business_object_models">
                    <xsl:apply-templates select="." mode="bomdoc_variables"/>
                </xsl:when>
            </xsl:choose>

        </xsl:element>
    </xsl:template>

    <!-- generates paths to module source files -->
    <xsl:template match="part1000.publication_index" mode="modules_variables">
        
        <xsl:element name="property">
            <xsl:attribute name="name">MODULES</xsl:attribute>
            <xsl:attribute name="value">
                <xsl:apply-templates select="modules/module" mode="list">
                    <xsl:with-param name="prefix" select="'data/modules/'"/>
                    <xsl:with-param name="suffix" select="'/**/*.xml'"/>
                </xsl:apply-templates>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="property">
            <xsl:attribute name="name">CONTENTSXML</xsl:attribute>
            <xsl:attribute name="value">
                <xsl:apply-templates select="modules/module" mode="list">
                    <xsl:with-param name="prefix" select="'data/modules/'"/>
                    <xsl:with-param name="suffix" select="'/sys/contents.xml'"/>
                </xsl:apply-templates>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="property">
            <xsl:attribute name="name">SCOPEXML</xsl:attribute>
            <xsl:attribute name="value">
                <xsl:apply-templates select="modules/module" mode="list">
                    <xsl:with-param name="prefix" select="'data/modules/'"/>
                    <xsl:with-param name="suffix" select="'/sys/1_scope.xml'"/>
                </xsl:apply-templates>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="property">
            <xsl:attribute name="name">REFSXML</xsl:attribute>
            <xsl:attribute name="value">
                <xsl:apply-templates select="modules/module" mode="list">
                    <xsl:with-param name="prefix" select="'data/modules/'"/>
                    <xsl:with-param name="suffix" select="'/sys/2_refs.xml'"/>
                </xsl:apply-templates>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="property">
            <xsl:attribute name="name">DEFSXML</xsl:attribute>
            <xsl:attribute name="value">
                <xsl:apply-templates select="modules/module" mode="list">
                    <xsl:with-param name="prefix" select="'data/modules/'"/>
                    <xsl:with-param name="suffix" select="'/sys/3_defs.xml'"/>
                </xsl:apply-templates>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="property">
			<xsl:attribute name="name">INFOREQSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/4_info_reqs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MAINXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/5_main.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>


		<xsl:element name="property">
			<xsl:attribute name="name">REFDATAXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/6_refdata.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MAPPINGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/5_mapping.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MIMXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/5_mim.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">INDEXXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/index.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">ABSTRACTXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/abstract.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">ASHORTNAMESXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/a_short_names.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOBJREGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/b_obj_reg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BIBLIOXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/biblio.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MODINDEXXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/modindex.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">CARMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/c_arm_expg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">COVERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/cover.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">COVERHTM</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/cover.htm'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>


		<xsl:element name="property">
			<xsl:attribute name="name">ISOCOVERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/isocover.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">ISOCOVERHTM</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/isocover.htm'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>


		<xsl:element name="property">
			<xsl:attribute name="name">DMIMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/d_mim_expg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">EEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">EEXPARMXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp_arm.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">EEXPARMLFXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="long_form">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp_arm_lf.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">EEXPMIMXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp_mim.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">EEXPMIMLFXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="long_form">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp_mim_lf.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">FGUIDEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/f_guide.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">GCHANGEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/g_change.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">FOREWORDXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/foreword.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">INTRODUCTIONXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/introduction.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<!-- MWD 2016-02-15 -->
		<xsl:element name="property">
			<xsl:attribute name="name">ARMDESCRIPTIONSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/arm_descriptions.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MIMDESCRIPTIONSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/mim_descriptions.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">ARMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/armexpg*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MIMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/mimexpg*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">ARMEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/arm.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">ARMLFEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/arm_lf.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MIMEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/mim.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MIMLFEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/mim_lf.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
        
        <xsl:element name="property">
            <xsl:attribute name="name">EXPRESS</xsl:attribute>
            <xsl:attribute name="value">
                <xsl:apply-templates select="modules/module" mode="list">
                    <xsl:with-param name="prefix" select="'data/modules/'"/>
                    <xsl:with-param name="suffix" select="'/*.exp'"/>
                </xsl:apply-templates>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="property">
            <xsl:attribute name="name">GIFS</xsl:attribute>
            <xsl:attribute name="value">
                <xsl:apply-templates select="modules/module" mode="list">
                    <xsl:with-param name="prefix" select="'data/modules/'"/>
                    <xsl:with-param name="suffix" select="'/*.gif'"/>
                    <xsl:with-param name="terminate" select="'NO'"/>
                </xsl:apply-templates>
                <xsl:apply-templates select="modules/module" mode="list">
                    <xsl:with-param name="prefix" select="'data/modules/'"/>
                    <xsl:with-param name="suffix" select="'/*.png'"/>
                    <xsl:with-param name="terminate" select="'NO'"/>
                </xsl:apply-templates>
                <xsl:apply-templates select="modules/module" mode="list">
                    <xsl:with-param name="prefix" select="'data/modules/'"/>
                    <xsl:with-param name="suffix" select="'/*.jpg'"/>
                </xsl:apply-templates>
            </xsl:attribute>
        </xsl:element>
    </xsl:template>


    <xsl:template match="part1000.publication_index" mode="modules_target_style_attributes">

        <xsl:attribute name="destdir">
            <xsl:value-of select="'${P1000DIR}'"/>
        </xsl:attribute>
        <xsl:attribute name="extension">
            <xsl:value-of select="'.htm'"/>
        </xsl:attribute>
        <param name="output_type" expression="HTM"/>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'INLINE_ERRORS'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${MODULES_INLINE_ERRORS}'"/>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'publication'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${PUBLICATION}'"/>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'output_rcs'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${OUTPUT_RCS}'"/>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'output_issues'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${OUTPUT_ISSUES}'"/>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'menubar_file'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${ISOMENU}'"/>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'STEPMOD_DATA_MODULES'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${STEPMOD_DATA_MODULES}'"/>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'STEPMOD_DATA_RESOURCES'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${STEPMOD_DATA_RESOURCES}'"/>
            </xsl:attribute>
        </xsl:element>
    </xsl:template>

    <xsl:template match="module" mode="list">
        <xsl:param name="prefix" select="''"/>
        <xsl:param name="suffix" select="''"/>
        <xsl:param name="terminate" select="'YES'"/>

        <!-- the name of the resource directory should be in lower case -->
        <xsl:variable name="lname" select="translate(./@name, $UPPER, $LOWER)"/>
        <!-- workaround - only output first occurrence of a module -->
        <xsl:if test="not(./preceding-sibling::*[@name = $lname])">
            <xsl:choose>
                <xsl:when test="$terminate = 'YES'">
                    <xsl:choose>

                        <xsl:when test="position() = last()">
                            <xsl:value-of select="concat($prefix, $lname, $suffix)"/>
                            <xsl:text/>
                        </xsl:when>

                        <xsl:otherwise>
                            <xsl:value-of select="concat($prefix, $lname, $suffix)"/>,<xsl:text/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:when>

                <xsl:otherwise>
                    <xsl:value-of select="concat($prefix, $lname, $suffix)"/>,<xsl:text/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:if>
    </xsl:template>

    <xsl:template match="bom_doc" mode="list">
        <xsl:param name="prefix" select="''"/>
        <xsl:param name="suffix" select="''"/>

        <!-- the name of the resource directory should be in lower case -->
        <xsl:variable name="lname" select="translate(./@name, $UPPER, $LOWER)"/>
        <xsl:choose>
            <xsl:when test="position() = last()">
                <xsl:value-of select="concat($prefix, $lname, $suffix)"/>
                <xsl:text/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="concat($prefix, $lname, $suffix)"/>,<xsl:text/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!-- generates paths to resource document source files -->
    <xsl:template match="part1000.publication_index" mode="resdoc_variables">
        <xsl:for-each select="./resource_docs/resource_doc">
            <xsl:variable name="res_doc_number" select="./@number"/>
            <xsl:variable name="res_doc_name" select="./@name"/>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCGIFS<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/*.exp, data/resource_docs/', $res_doc_name, '/*.gif, data/resource_docs/', $res_doc_name, '/*.png, data/resource_docs/', $res_doc_name, '/*.jpg')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCINDEXXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/resdocindex.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCABSTRACTXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/abstract.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCCONTENTSXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/contents.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCS<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/**/*.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCSCOPEXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/1_scope.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCRESDOCINDEXXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/resdocindex.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCREFSXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/2_refs.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCDEFSXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/3_defs.xml')"/>
                </xsl:attribute>       
            </xsl:element>
           
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCSCHEMAXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/*_schema.xml')"/>
                </xsl:attribute>       
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCASHORTNAMESXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/a_short_names.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCBOBJREGXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/b_obj_reg.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCBIBLIOXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/biblio.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCISOCOVERXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/isocover.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCCOVERXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/cover.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCCOVERHTM<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/cover.htm')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCISOCOVERHTM<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/isocover.htm')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCCEXPSCHEMAXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/c_exp_schema_*.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCCEXPXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/c_exp.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCDEXPGXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/d_expg.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCTECHDISCUSSIONXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/tech_discussion.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCEXAMPLESXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/examples.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCADDSCOPE<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/add_scope.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCFOREWORDXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/foreword.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCINTRODUCTIONXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/introduction.xml')"/>
                </xsl:attribute>
           </xsl:element>
            
           <xsl:element name="property">
               <xsl:attribute name="name">RESDOCDESCRIPTIONSXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/descriptions.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCSCHEMADIAGXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/schema_diagexpg*.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESDOCGCHANGEXML<xsl:value-of select="$res_doc_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:value-of select="concat('data/resource_docs/', $res_doc_name, '/sys/g_change.xml')"/>
                </xsl:attribute>
            </xsl:element>
            
        </xsl:for-each>
    </xsl:template>

    <!-- generates paths to resource source files -->
    <xsl:template match="part1000.publication_index" mode="resource_variables">
        <xsl:for-each select="./resources/resource[not(preceding::resource/@number = @number)]">
            <xsl:variable name="resource_number" select="./@number"/>

            <xsl:element name="property">
                <xsl:attribute name="name">RESSCHEMAXML<xsl:value-of select="$resource_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:variable name="resource_list_w_commas">
                        <xsl:for-each select="../../resources/resource[@number = $resource_number]">
                            <xsl:variable name="prefix" select="'data/resources/'"/>
                            <xsl:variable name="part_name" select="./@name"/>
                            <xsl:variable name="suffix" select="'*schema.xml'"/>
                            <xsl:value-of select="concat($prefix, $part_name, '/', $suffix)"
                            />,<xsl:text/>
                        </xsl:for-each>
                    </xsl:variable>
                    <!-- strip final comma -->
                    <xsl:value-of select="substring($resource_list_w_commas, 1, string-length($resource_list_w_commas) - 1)"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESOURCESSCHEMAEXPGXMLS<xsl:value-of select="$resource_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:variable name="resource_list_w_commas">
                        <xsl:for-each select="../../resources/resource[@number=$resource_number]">
                            <xsl:variable name="prefix" select="'data/resources/'"/>
                            <xsl:variable name="part_name" select="./@name"/>
                            <xsl:variable name="suffix" select="'*expg*.xml'"/>
                            <xsl:value-of select="concat($prefix, $part_name, '/', $suffix)"/>,<xsl:text/>
                        </xsl:for-each>
                    </xsl:variable>
                    <!-- strip final comma -->
                    <xsl:value-of select="substring($resource_list_w_commas, 1, string-length($resource_list_w_commas)-1)"/>
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESOURCESEXP<xsl:value-of select="$resource_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    
                    <xsl:variable name="resource_list_w_commas">
                        <xsl:for-each select="../../resources/resource[@number=$resource_number]">
                            <xsl:variable name="prefix" select="'data/resources/'"/>
                            <xsl:variable name="part_name" select="./@name"/>
                            <xsl:variable name="suffix" select="'*.exp'"/>
                            <xsl:value-of select="concat($prefix, $part_name, '/', $suffix)"/>,<xsl:text/>
                        </xsl:for-each>
                    </xsl:variable>
                    <!-- strip final comma -->
                    <xsl:value-of select="substring($resource_list_w_commas, 1, string-length($resource_list_w_commas)-1)"/>	
                </xsl:attribute>
            </xsl:element>
            
            <xsl:element name="property">
                <xsl:attribute name="name">RESOURCESSCHEMAEXPGGIFS<xsl:value-of select="$resource_number"/></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:variable name="resource_list_w_commas">
                        <xsl:for-each select="../../resources/resource[@number=$resource_number]">
                            <xsl:variable name="prefix" select="'data/resources/'"/>
                            <xsl:variable name="part_name" select="./@name"/>
                            <xsl:variable name="suffix" select="'*expg*.gif'"/>
                            <xsl:value-of select="concat($prefix, $part_name, '/', $suffix)"/>,<xsl:text/>
                        </xsl:for-each>
                    </xsl:variable>
                    <!-- strip final comma -->
                    <xsl:value-of select="substring($resource_list_w_commas, 1, string-length($resource_list_w_commas)-1)"/>
                </xsl:attribute>
            </xsl:element>
            
        </xsl:for-each>
    </xsl:template>

    <xsl:template match="resource_doc" mode="resdoc_target_style_attributes">
        <xsl:variable name="res_doc_number" select="./@number"/>
        <xsl:attribute name="destdir">
            <xsl:value-of select="concat('${PUBDIR}/iso10303_', $res_doc_number)"/>
        </xsl:attribute>
        <xsl:attribute name="extension">
            <xsl:value-of select="'.htm'"/>
        </xsl:attribute>
        <param name="output_type" expression="HTM"/>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'publication'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${PUBLICATION}'"/>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'output_rcs'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${OUTPUT_RCS}'"/>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'output_issues'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${OUTPUT_ISSUES}'"/>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'INLINE_ERRORS'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${INLINE_ERRORS}'"/>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'menubar_file'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${ISOMENU}'"/>
            </xsl:attribute>
        </xsl:element>
    </xsl:template>

    <xsl:template match="resource_doc" mode="list_for_resource_docs">
        <xsl:param name="prefix" select="''"/>
        <xsl:param name="suffix" select="''"/>
        <xsl:param name="terminate" select="'YES'"/>

        <xsl:variable name="part_number" select="./@number"/>
        <xsl:variable name="part_name" select="./@name"/>
        <xsl:variable name="extended_prefix"
            select="concat('iso10303_', $part_number, '/data/resource_docs/')"/>
        <!-- the name of the resource directory should be in lower case -->
        <xsl:variable name="lname" select="translate($part_name, $UPPER, $LOWER)"/>
        <!-- workaround - only output first occurrence of a module -->
        <xsl:if test="not(./preceding-sibling::*[@name = $lname])">
            <xsl:choose>
                <xsl:when test="$terminate = 'YES'">
                    <xsl:choose>

                        <xsl:when test="position() = last()">
                            <xsl:value-of select="concat($extended_prefix, $part_name, $suffix)"/>
                            <xsl:text/>
                        </xsl:when>

                        <xsl:otherwise>
                            <xsl:value-of select="concat($extended_prefix, $part_name, $suffix)"
                            />,<xsl:text/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:when>

                <xsl:otherwise>
                    <xsl:value-of select="concat($extended_prefix, $part_name, $suffix)"
                    />,<xsl:text/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:if>
    </xsl:template>


    <!-- generates paths to business object model source files -->
    <xsl:template match="part1000.publication_index" mode="bomdoc_variables">
        <xsl:element name="property">
            <xsl:attribute name="name">BOMDOCGIFS</xsl:attribute>
            <xsl:attribute name="value">
                <xsl:apply-templates select="business_object_models/bom_doc" mode="list">
                    <xsl:with-param name="prefix" select="'data/business_object_models/'"/>
                    <xsl:with-param name="suffix" select="'/*.exp'"/>
                    <xsl:with-param name="terminate" select="'NO'"/>
                </xsl:apply-templates>
                <xsl:apply-templates select="business_object_models/bom_doc" mode="list">
                    <xsl:with-param name="prefix" select="'data/business_object_models/'"/>
                    <xsl:with-param name="suffix" select="'/*.gif'"/>
                    <xsl:with-param name="terminate" select="'NO'"/>
                </xsl:apply-templates>
                <xsl:apply-templates select="business_object_models/bom_doc" mode="list">
                    <xsl:with-param name="prefix" select="'data/business_object_models/'"/>
                    <xsl:with-param name="suffix" select="'/*.png'"/>
                    <xsl:with-param name="terminate" select="'NO'"/>
                </xsl:apply-templates>
                <xsl:apply-templates select="business_object_models/bom_doc" mode="list">
                    <xsl:with-param name="prefix" select="'data/business_object_models/'"/>
                    <xsl:with-param name="suffix" select="'/*.jpg'"/>
                </xsl:apply-templates>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="property">
            <xsl:attribute name="name">BOMDOCS</xsl:attribute>
            <xsl:attribute name="value">
                <xsl:apply-templates select="business_object_models/bom_doc" mode="list">
                    <xsl:with-param name="prefix" select="'data/business_object_models/'"/>
                    <xsl:with-param name="suffix" select="'/**/*.xml'"/>
                </xsl:apply-templates>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="property">
            <xsl:attribute name="name">BOMSCOPEXML</xsl:attribute>
            <xsl:attribute name="value">
                <xsl:apply-templates select="business_object_models/bom_doc" mode="list">
                    <xsl:with-param name="prefix" select="'data/business_object_models/'"/>
                    <xsl:with-param name="suffix" select="'/sys/1_scope.xml'"/>
                </xsl:apply-templates>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="property">
			<xsl:attribute name="name">BOMREFSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/2_refs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMDEFSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/3_defs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINFOREQSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/4_info_reqs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMMAINXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/5_main.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMABSTRACTXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/abstract.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMANNEXBOMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/annex_bom_expg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMANNEXBOMUMLXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/annex_bom_uml.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMANNEXCOMPINTXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/annex_comp_int.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMANNEXOBJREGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/annex_obj_reg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMANNEXXSDDERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/annex_xsd_der.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMBIBLIOXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/biblio.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMBOMXSDXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/bom_xsd.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMBOMINDEXXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/bomindex.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMCONFIGXSDXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/config_xsd.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMCONTENTSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/contents.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMCOVERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/cover.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMFOREWORDXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/foreword.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMFRAMETITLEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/frame_title.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMFRAMETOCXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/frame_toc.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMHELPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/help.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMEXPRESSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_express.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMEXPRESSINNERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_express_inner.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMEXPRESSNAVXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_express_nav.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMEXPRESSNAVINNERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_express_nav_inner.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>


		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMEXPRESSNAVTOPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_express_nav_top.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMEXPRESSTOPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_express_top.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMAPPINGS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_mappings.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMAPPINGSINNER</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_mappings_inner.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMAPPINGSTOP</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_mappings_top.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMODULES</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_modules.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMODULESINNER</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_modules_inner.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMODULESINNERPART</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_modules_inner_part.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMODULESTOP</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_modules_top.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMDOCXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_doc.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXRESOURCESXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_resources.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXRESOURCESINNERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_resources_inner.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXRESOURCESINNERPARTXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_resources_inner_part.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXRESOURCESTOPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_resources_top.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINTRODUCTIONXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/introduction.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMISOCOVERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/isocover.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<!-- ???? -->
		<xsl:element name="property">
			<xsl:attribute name="name">BOMISOCOVERHTM</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/isocover.htm'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMHOMEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/home.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMSCHEMADIAGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/bomexpg*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
        
    </xsl:template>

    <xsl:template match="part1000.publication_index" mode="bomdoc_target_style_attributes">
        <xsl:attribute name="destdir">
            <xsl:value-of select="'${P1000DIR}'"/>
        </xsl:attribute>
        <xsl:attribute name="extension">
            <xsl:value-of select="'.htm'"/>
        </xsl:attribute>
        
        <param name="output_type" expression="HTM"/>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'publication'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${PUBLICATION}'"/>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'output_rcs'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${OUTPUT_RCS}'"/>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'INLINE_ERRORS'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${INLINE_ERRORS}'"/>
            </xsl:attribute>
        </xsl:element>
        <xsl:element name="param">
            <xsl:attribute name="name">
                <xsl:value-of select="'menubar_file'"/>
            </xsl:attribute>
            <xsl:attribute name="expression">
                <xsl:value-of select="'${ISOMENU}'"/>
            </xsl:attribute>
        </xsl:element>
        
    </xsl:template>

    <xsl:template match="part1000.publication_index" mode="target_zip">
        <xsl:text>
        </xsl:text>
        <xsl:element name="target">
            <xsl:attribute name="name">zip</xsl:attribute>
            <xsl:attribute name="depends">isoindex</xsl:attribute>
            <xsl:attribute name="description">zip the results.</xsl:attribute>
            <xsl:element name="zip">
                <xsl:attribute name="zipfile">
                    <xsl:value-of select="concat('${PUBDIR}/', @name, '_${DATE}.zip')"/>
                </xsl:attribute>
                <xsl:attribute name="basedir">
                    <xsl:value-of select="'${PUBDIR}/'"/>
                </xsl:attribute>
                <xsl:attribute name="includes">
                    <xsl:value-of select="'**'"/>
                </xsl:attribute>
                <xsl:attribute name="excludes">
                    <xsl:value-of select="'*.zip, **/Thumbs.db'"/>
                </xsl:attribute>
            </xsl:element>
        </xsl:element>
    </xsl:template>

    <xsl:template match="part1000.publication_index" mode="target_isoindex">
        <xsl:text>
	</xsl:text>
        <target name="isoindex" depends="init" description="Create HTML index">
            <dependset>
                <xsl:element name="srcfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'${PUBSRCDTD}'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'**/*.dtd, **/*.ent'"/>
                    </xsl:attribute>
                </xsl:element>
                <xsl:element name="srcfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'${PUBSRCSTYLES}'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'**/*.xsl'"/>
                    </xsl:attribute>
                </xsl:element>
                <xsl:element name="srcfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'${PUBSRCDIR}'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'**/*.xml'"/>
                    </xsl:attribute>
                </xsl:element>
                <xsl:element name="targetfileset">
                    <xsl:attribute name="dir">
                        <xsl:value-of select="'.'"/>
                    </xsl:attribute>
                    <xsl:attribute name="includes">
                        <xsl:value-of select="'${PUBSRCDIR}/*.htm*'"/>
                    </xsl:attribute>
                </xsl:element>
            </dependset>

            <xsl:element name="xslt">
                <xsl:attribute name="in">
                    <xsl:value-of select="'${PUBSRCDIR}/sys/publication_summary.xml'"/>
                </xsl:attribute>
                <xsl:attribute name="out">
                    <xsl:value-of select="'${PUBDIR}/index.htm'"/>
                </xsl:attribute>
                <xsl:attribute name="destdir">
                    <xsl:value-of select="'${PUBDIR}'"/>
                </xsl:attribute>
                <xsl:attribute name="extension">
                    <xsl:value-of select="'.htm'"/>
                </xsl:attribute>
                <xsl:attribute name="style">
                    <xsl:value-of select="'${PUBSRCSTYLES}/CR_publication_summary.xsl'"/>
                </xsl:attribute>
                <param name="output_type" expression="HTM"/>
                <param name="stepmodhome" expression="."/>
                <xsl:element name="param">
                    <xsl:attribute name="name">
                        <xsl:value-of select="'date'"/>
                    </xsl:attribute>
                    <xsl:attribute name="expression">
                        <xsl:value-of select="'${DATE}'"/>
                    </xsl:attribute>
                </xsl:element>
            </xsl:element>

            <xsl:element name="xslt">
                <xsl:attribute name="in">
                    <xsl:value-of select="'${PUBSRCDIR}/publication_index.xml'"/>
                </xsl:attribute>
                <xsl:attribute name="out">
                    <xsl:value-of select="'${PUBDIR}/readme.txt'"/>
                </xsl:attribute>
                <xsl:attribute name="destdir">
                    <xsl:value-of select="'${PUBDIR}'"/>
                </xsl:attribute>
                <xsl:attribute name="extension">
                    <xsl:value-of select="'.txt'"/>
                </xsl:attribute>
                <xsl:attribute name="style">
                    <xsl:value-of select="'${PUBSRCSTYLES}/publication_readme.xsl'"/>
                </xsl:attribute>
                <xsl:element name="param">
                    <xsl:attribute name="name">
                        <xsl:value-of select="'date'"/>
                    </xsl:attribute>
                    <xsl:attribute name="expression">
                        <xsl:value-of select="'${DATE}'"/>
                    </xsl:attribute>
                </xsl:element>
            </xsl:element>

            <!-- make sure that the CR/LF are windows for the readme -->
            <xsl:element name="fixcrlf">
                <xsl:attribute name="srcdir">
                    <xsl:value-of select="concat('publication/isopub/', @name)"/>
                </xsl:attribute>
                <xsl:attribute name="includes">
                    <xsl:value-of select="'readme.txt'"/>
                </xsl:attribute>
                <xsl:attribute name="eol">
                    <xsl:value-of select="'crlf'"/>
                </xsl:attribute>
            </xsl:element>

        </target>
    </xsl:template>

    <xsl:template match="part1000.publication_index" mode="target_publish_isoparts">
        <xsl:text>
	 </xsl:text>
        <xsl:if test="./modules">
        <xsl:element name="target">
            <xsl:attribute name="name">publish_isomodules</xsl:attribute>
            <xsl:attribute name="depends">isoindex, isomodules</xsl:attribute>
            <xsl:attribute name="description">Copy HTML for all modules listed in publication_index to publication directory</xsl:attribute>
            <xsl:apply-templates select="//module" mode="target_publish_isomodules"/>
        </xsl:element>
        </xsl:if>
        
        <xsl:if test="./resource_docs">
        <xsl:element name="target">
            <xsl:attribute name="name">publish_isoresdocs</xsl:attribute>
            <xsl:attribute name="depends">isoindex, isoresdocs</xsl:attribute>
            <xsl:attribute name="description">Copy HTML for all resource documents listed in publication_index to publication directory</xsl:attribute>
            <xsl:apply-templates select="//resource_doc" mode="target_publish_isoresdocs"/>
        </xsl:element>
        </xsl:if>
        
        <xsl:if test="./resources">
        <xsl:element name="target">
            <xsl:attribute name="name">publish_isoresources</xsl:attribute>
            <xsl:attribute name="depends">isoindex, isoresources</xsl:attribute>
            <xsl:attribute name="description">Copy HTML for all resources listed in publication_index to publication directory</xsl:attribute>
            <xsl:apply-templates select="//resource" mode="target_publish_isoresources"/>
        </xsl:element>
        </xsl:if>
        
        <xsl:if test="./business_object_models">
        <xsl:element name="target">
            <xsl:attribute name="name">publish_isobomdocs</xsl:attribute>
            <xsl:attribute name="depends">isoindex, isobomdocs</xsl:attribute>
            <xsl:attribute name="description">Copy HTML for all business object models listed in publication_index to publication directory</xsl:attribute>
            <xsl:apply-templates select="//bom_doc" mode="target_publish_isobomdocs"/>
        </xsl:element>
        </xsl:if>
    </xsl:template>

    <xsl:template match="module" mode="target_publish_isomodules">
        <xsl:variable name="module_name"/>
        <xsl:text>
	    </xsl:text>
        <xsl:comment> Publish module: <xsl:value-of select="$module_name"/></xsl:comment>
        <!-- generate the publication record for modules -->
        <xsl:apply-templates select="." mode="pub_record_style"/>
    </xsl:template>
    
    

    <xsl:template match="module" mode="pub_record_style">
        <xsl:variable name="module_file"
            select="concat('../../data/modules/', @name, '/module.xml')"/>
        <xsl:variable name="module_xml" select="document($module_file)"/>
        <xsl:variable name="CVS_dir_dot_entry" select="concat('CVS_dir_dot_entry_', @name)"/>
        <xsl:variable name="CVS_dir_dvlp_entry" select="concat('CVS_dir_dvlp_entry_', @name)"/>
        <xsl:variable name="CVS_dir_sys_entry" select="concat('CVS_dir_sys_entry_', @name)"/>
        <xsl:variable name="CVS_dir_xsl_entry" select="concat('CVS_dir_xsl_entry_', @name)"/>
        <xsl:variable name="CVS_dir_xslp28xsd_entry"
            select="concat('CVS_dir_xslp28xsd_entry_', @name)"/>

        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_dot_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('data/modules/', @name, '/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>

        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_dvlp_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('data/modules/', @name, '/dvlp/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>

        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_sys_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('data/modules/', @name, '/sys/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>

        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_xsl_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('xsl', '/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>

        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_xslp28xsd_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('xsl/p28xsd', '/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>

        <xsl:element name="xslt">
            <xsl:attribute name="force">yes</xsl:attribute>
            <xsl:attribute name="in">
                <xsl:value-of select="concat('data/modules/', @name, '/module.xml')"/>
            </xsl:attribute>
            <xsl:attribute name="out">
                <xsl:value-of
                    select="concat('${P1000DIR}/data/modules/', @name, '/publication_record.xml')"/>
            </xsl:attribute>
            <xsl:attribute name="style">
                <xsl:value-of select="'${STEPMODSTYLES}/publication/pub_record.xsl'"/>
            </xsl:attribute>
            <xsl:attribute name="destdir">
                <xsl:value-of select="'${P1000DIR}'"/>
            </xsl:attribute>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_dot_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_dot_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_dvlp_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_dvlp_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_sys_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_sys_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_xsl_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_xsl_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_xslp28xsd_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_xslp28xsd_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">
                    <xsl:value-of select="'CVS_tag'"/>
                </xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="'${CVS_tag}'"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">
                    <xsl:value-of select="'PUBLICATION_DATE'"/>
                </xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="'${PUB_DATE}'"/>
                </xsl:attribute>
            </xsl:element>
        </xsl:element>
    </xsl:template>

    <xsl:template match="part1000.publication_index" mode="target_bibliography_check">
        <xsl:text>
		</xsl:text>
        <target name="bibliography_check" depends="variables"
            description="Create normative reference check">
            <xsl:element name="xslt">
                <xsl:attribute name="in">
                    <xsl:value-of select="'${PUBSRCDIR}/sys/bibliography_check.xml'"/>
                </xsl:attribute>
                <xsl:attribute name="out">
                    <xsl:value-of select="'${PUBDIR}/bibliography_check.htm'"/>
                </xsl:attribute>
                <xsl:attribute name="destdir">
                    <xsl:value-of select="'${PUBDIR}'"/>
                </xsl:attribute>
                <xsl:attribute name="extension">
                    <xsl:value-of select="'.htm'"/>
                </xsl:attribute>
                <xsl:attribute name="style">
                    <xsl:value-of select="'${STEPMODSTYLES}/pub_ballot/bibliography_check.xsl'"/>
                </xsl:attribute>
                <param name="output_type" expression="HTM"/>
                <param name="stepmodhome" expression="."/>
                <xsl:element name="param">
                    <xsl:attribute name="name">
                        <xsl:value-of select="'date'"/>
                    </xsl:attribute>
                    <xsl:attribute name="expression">
                        <xsl:value-of select="'${DATE}'"/>
                    </xsl:attribute>
                </xsl:element>
            </xsl:element>
        </target>
    </xsl:template>

    <xsl:template match="part1000.publication_index" mode="target_modules_check">
        <xsl:text>
		</xsl:text>
        <target xsl:extension-element-prefixes="exslt" name="modules_check" depends="variables"
            description="Check the modules dates etc.">
            <xsl:element name="xslt">
                <xsl:attribute name="in">
                    <xsl:value-of select="'${PUBSRCDIR}/sys/modules_check.xml'"/>
                </xsl:attribute>
                <xsl:attribute name="out">
                    <xsl:value-of select="'${PUBDIR}/modules_check.htm'"/>
                </xsl:attribute>
                <xsl:attribute name="destdir">
                    <xsl:value-of select="'${PUBDIR}'"/>
                </xsl:attribute>
                <xsl:attribute name="extension">
                    <xsl:value-of select="'.htm'"/>
                </xsl:attribute>
                <xsl:attribute name="force">
                    <xsl:value-of select="'yes'"/>
                </xsl:attribute>
                <xsl:attribute name="style">
                    <xsl:value-of select="'${STEPMODSTYLES}/pub_ballot/modules_check.xsl'"/>
                </xsl:attribute>
                <param name="output_type" expression="HTM"/>
            </xsl:element>
        </target>
    </xsl:template>
    
    <xsl:template match="part1000.publication_index" mode="target_normref_check">
        <xsl:text>
		</xsl:text>
        <target name="normref_check" depends="variables"
            description="Create normative reference check">
            <xsl:element name="xslt">
                <xsl:attribute name="in">
                    <xsl:value-of select="'${PUBSRCDIR}/sys/normref_check.xml'"/>
                </xsl:attribute>
                <xsl:attribute name="out">
                    <xsl:value-of select="'${PUBDIR}/normref_check.htm'"/>
                </xsl:attribute>
                <xsl:attribute name="destdir">
                    <xsl:value-of select="'${PUBDIR}'"/>
                </xsl:attribute>
                <xsl:attribute name="extension">
                    <xsl:value-of select="'.htm'"/>
                </xsl:attribute>
                <xsl:attribute name="style">
                    <xsl:value-of select="'${STEPMODSTYLES}/pub_ballot/normref_check.xsl'"/>
                </xsl:attribute>
                <param name="output_type" expression="HTM"/>
                <param name="stepmodhome" expression="."/>
                <xsl:element name="param">
                    <xsl:attribute name="name">
                        <xsl:value-of select="'date'"/>
                    </xsl:attribute>
                    <xsl:attribute name="expression">
                        <xsl:value-of select="'${DATE}'"/>
                    </xsl:attribute>
                </xsl:element>
            </xsl:element>
        </target>
    </xsl:template>
    
    <xsl:template match="part1000.publication_index" mode="target_wgn_summary">
        <xsl:text>
		</xsl:text>
        <target name="wgn_summary" depends="variables" description="Create WG number summary">
            <xsl:element name="xslt">
                <xsl:attribute name="in">
                    <xsl:value-of select="'${PUBSRCDIR}/sys/wgn_summary.xml'"/>
                </xsl:attribute>
                <xsl:attribute name="out">
                    <xsl:value-of select="'${PUBDIR}/wgn_summary.htm'"/>
                </xsl:attribute>
                <xsl:attribute name="destdir">
                    <xsl:value-of select="'${PUBDIR}'"/>
                </xsl:attribute>
                <xsl:attribute name="extension">
                    <xsl:value-of select="'.htm'"/>
                </xsl:attribute>
                <xsl:attribute name="style">
                    <xsl:value-of select="'${PUBSRCSTYLES}/wgn_summary.xsl'"/>
                </xsl:attribute>
                <param name="output_type" expression="HTM"/>
                <param name="stepmodhome" expression="."/>
                <xsl:element name="param">
                    <xsl:attribute name="name">
                        <xsl:value-of select="'date'"/>
                    </xsl:attribute>
                    <xsl:attribute name="expression">
                        <xsl:value-of select="'${DATE}'"/>
                    </xsl:attribute>
                </xsl:element>
            </xsl:element>
        </target>
    </xsl:template>
    
    <!-- generate the publication record for the resource doc-->
    <xsl:template match="resource_doc" mode="target_publish_isoresdocs">
        <xsl:variable name="resdoc_name" select="./@name"/>
        <xsl:text>
	    </xsl:text>
        <xsl:comment>Publish resource doc: <xsl:value-of select="$resdoc_name"/></xsl:comment>              
        <xsl:apply-templates select="." mode="pub_record_style"/>
    </xsl:template>
    
    <!-- generate the publication record for the resource -->
    <xsl:template match="resource" mode="target_publish_isoresources">
        <xsl:variable name="resource_name" select="./@name"/>
        <xsl:text>
	    </xsl:text>
        <xsl:comment>Publish resource: <xsl:value-of select="$resource_name"/></xsl:comment>              
        <xsl:apply-templates select="." mode="pub_record_style"/>
    </xsl:template>
    
    <xsl:template match="resource_doc" mode="pub_record_style">
        <xsl:variable name="resdoc_file"
            select="concat('../../data/resource_docs/', @name, '/resource.xml')"/>
        <xsl:variable name="resdoc_xml" select="document($resdoc_file)"/>
        <xsl:variable name="CVS_dir_dot_entry" select="concat('CVS_resdoc_entry_', @name)"/>
        <xsl:variable name="CVS_dir_dvlp_entry" select="concat('CVS_resdoc_dvlp_entry_', @name)"/>
        <xsl:variable name="CVS_dir_sys_entry" select="concat('CVS_resdoc_sys_entry_', @name)"/>
        <xsl:variable name="CVS_dir_xsl_entry" select="concat('CVS_dir_xsl_entry_', @name)"/>
        <xsl:variable name="CVS_dir_xslresdoc_entry" select="concat('CVS_dir_xslresdoc_entry_', @name)"/>
        <xsl:variable name="res_part_no" select="./@number"/>
        <xsl:variable name="res_doc_dir" select="concat('${PUBDIR}/iso10303_', $res_part_no)"/>
        
        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_dot_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('data/resource_docs/', @name, '/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_dvlp_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('data/resource_docs/', @name, '/dvlp/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_sys_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('data/resource_docs/', @name, '/sys/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_xsl_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('xsl', '/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_xslresdoc_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('xsl/res_doc', '/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="xslt">
            <xsl:attribute name="in">
                <xsl:value-of select="concat('data/resource_docs/', @name, '/resource.xml')"/>
            </xsl:attribute>
            <xsl:attribute name="out">
                <xsl:value-of select="concat($res_doc_dir, '/data/resource_docs/', @name, '/publication_record.xml')"/>
            </xsl:attribute>
            <xsl:attribute name="style">
                <xsl:value-of select="'${STEPMODSTYLES}/publication/pub_record.xsl'"/>
            </xsl:attribute>
            <xsl:attribute name="destdir">
                <xsl:value-of select="$res_doc_dir"/>
            </xsl:attribute>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_dot_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_dot_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_dvlp_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_dvlp_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_sys_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_sys_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_xsl_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_xsl_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_xslresdoc_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_xslresdoc_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">
                    <xsl:value-of select="'CVS_tag'"/>
                </xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="'${CVS_tag}'"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">
                    <xsl:value-of select="'PUBLICATION_DATE'"/>
                </xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="'${PUB_DATE}'"/>
                </xsl:attribute>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    
    <xsl:template match="bom_doc" mode="target_publish_isobomdocs">
        <xsl:variable name="bom_name" select="./@name"/>
        <xsl:text>
		</xsl:text>
        <xsl:comment>Publish business object model: <xsl:value-of select="$bom_name"/>
		</xsl:comment>
        <!-- generate the publication record for the B doc-->
        <xsl:apply-templates select="." mode="pub_record_style"/>
    </xsl:template>
    
    <xsl:template match="bom_doc" mode="pub_record_style">
        <xsl:variable name="bomdoc_file"
            select="concat('../../data/business_object_models/', @name, '/business_object_model.xml')"/>
        <xsl:variable name="bomdoc_xml" select="document($bomdoc_file)"/>
        <xsl:variable name="CVS_dir_dot_entry" select="concat('CVS_dir_dot_entry_', @name)"/>
        <xsl:variable name="CVS_dir_dvlp_entry" select="concat('CVS_dir_dvlp_entry_', @name)"/>
        <xsl:variable name="CVS_dir_sys_entry" select="concat('CVS_dir_sys_entry_', @name)"/>
        <xsl:variable name="CVS_dir_xsl_entry" select="concat('CVS_dir_xsl_entry_', @name)"/>
        <xsl:variable name="CVS_dir_xslp28xsd_entry" select="concat('CVS_dir_xslp28xsd_entry_', @name)"/>
        
        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_dot_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('data/business_object_models/', @name, '/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_dvlp_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('data/business_object_models/', @name, '/dvlp/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_sys_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of
                    select="concat('data/business_object_models/', @name, '/sys/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_xsl_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('xsl', '/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_xslp28xsd_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('xsl/p28xsd', '/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="xslt">
            <xsl:attribute name="force">yes</xsl:attribute>
            <xsl:attribute name="in">
                <xsl:value-of
                    select="concat('data/business_object_models/', @name, '/business_object_model.xml')"
                />
            </xsl:attribute>
            <xsl:attribute name="out">
                <xsl:value-of
                    select="concat('${P1000DIR}/data/business_object_models/', @name, '/publication_record.xml')"
                />
            </xsl:attribute>
            <xsl:attribute name="style">
                <xsl:value-of select="'${STEPMODSTYLES}/publication/pub_record.xsl'"/>
            </xsl:attribute>
            <xsl:attribute name="destdir">
                <xsl:value-of select="'${P1000DIR}'"/>
            </xsl:attribute>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_dot_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_dot_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_dvlp_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_dvlp_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_sys_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_sys_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_xsl_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_xsl_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_xslp28xsd_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${', $CVS_dir_xslp28xsd_entry, '}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">
                    <xsl:value-of select="'CVS_tag'"/>
                </xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="'${CVS_tag}'"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">
                    <xsl:value-of select="'PUBLICATION_DATE'"/>
                </xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="'${PUB_DATE}'"/>
                </xsl:attribute>
            </xsl:element>
        </xsl:element>
    </xsl:template>
    
    <xsl:template match="resource" mode="pub_record_style">
        
        <xsl:variable name="res_name" select="./@name"/>
        <xsl:variable name="res_number" select="./@number"/>
        <xsl:variable name="res_file"
            select="concat('../../data/resources/',$res_name,'/',$res_name,'.xml')"/>
        <xsl:variable name="res_xml" select="document($res_file)"/>
        <xsl:variable name="CVS_dir_dot_entry" select="concat('CVS_res_entry_',@name)"/>
        <xsl:variable name="res_doc_dir" select="concat('${PUBDIR}/iso10303_', $res_number)"/>
        
        <xsl:element name="loadfile">
            <xsl:attribute name="property">
                <xsl:value-of select="$CVS_dir_dot_entry"/>
            </xsl:attribute>
            <xsl:attribute name="srcfile">
                <xsl:value-of select="concat('data/resources/',$res_name,'/CVS/Entries')"/>
            </xsl:attribute>
        </xsl:element>
        
        <xsl:element name="xslt">
            <xsl:attribute name="in">
                <xsl:value-of select="concat('data/resources/',$res_name,'/',$res_name,'.xml')"/>
            </xsl:attribute>
            <xsl:attribute name="out">
                <xsl:value-of
                    select="concat($res_doc_dir, '/data/resources/',$res_name,'/publication_record.xml')"
                />
            </xsl:attribute>
            <xsl:attribute name="style">
                <xsl:value-of select="'${STEPMODSTYLES}/publication/pub_record.xsl'"/>
            </xsl:attribute>
            <xsl:attribute name="destdir">
                <xsl:value-of select="$res_doc_dir"/>
            </xsl:attribute>
            <xsl:element name="param">
                <xsl:attribute name="name">CVS_dir_dot_entry</xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="concat('${',$CVS_dir_dot_entry,'}')"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">
                    <xsl:value-of select="'CVS_tag'"/>
                </xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="'${CVS_tag}'"/>
                </xsl:attribute>
            </xsl:element>
            <xsl:element name="param">
                <xsl:attribute name="name">
                    <xsl:value-of select="'PUBLICATION_DATE'"/>
                </xsl:attribute>
                <xsl:attribute name="expression">
                    <xsl:value-of select="'${PUB_DATE}'"/>
                </xsl:attribute>
            </xsl:element>
        </xsl:element>
    </xsl:template>

</xsl:stylesheet>
