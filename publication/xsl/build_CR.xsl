<?xml version="1.0" encoding="utf-8"?>
<!--  $Id: build_CR.xsl,v 1.3 2014/06/07 17:40:11 mikeward Exp $
Author:  Rob Bodington, Eurostep Limited
Owner:   Developed by Eurostep Limited http://www.eurostep.com and supplied to NIST under contract.
Purpose: To build the initial ANT publication file. 
-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:exslt="http://exslt.org/common" exclude-result-prefixes="exslt" version="1.0">

	<!--<xsl:import href="../../xsl/ap_doc/common.xsl"/>-->
	<xsl:import href="../../xsl/res_doc/common.xsl"/>
	<!-- MWD START -->
	<xsl:import href="../../xsl/bom_doc/common.xsl"/>
	<!-- MWD END -->
	<xsl:output method="xml" indent="yes"/>

	<xsl:variable name="mim_modules">
		<xsl:call-template name="get_mod_node_set"/>
	</xsl:variable>


	<xsl:variable name="mim_modules_node_set" select="exslt:node-set($mim_modules)"/>

	<xsl:variable name="dlongforms">
		<xsl:apply-templates select="$mim_modules_node_set/module" mode="long_form"/>
	</xsl:variable>


	<xsl:variable name="LOWER" select="'abcdefghijklmnopqrstuvwxyz_'"/>
	<xsl:variable name="UPPER" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>

	<xsl:template match="part1000.publication_index">
		<xsl:variable name="index_ok1">
			<xsl:apply-templates select="." mode="check_single"/>
		</xsl:variable>

		<xsl:variable name="index_ok2">
			<xsl:apply-templates select="." mode="check"/>
		</xsl:variable>


		<xsl:choose>
			<!-- dont check to see if a pure build
		   <xsl:when test="contains($index_ok1,'false') or contains($index_ok2,'false')"> -->
			<xsl:when test="''">
				<xsl:message> ************************************************************ ABORTING
					THE BUILD The file part1000.publication_index.xml is referencing modules,
					resource document or APs that have errors
					************************************************************ </xsl:message>
			</xsl:when>
			<xsl:otherwise>
				<!-- output the build.xml file -->
				<xsl:text>
		</xsl:text>
				<xsl:comment> This file has been auto generated by: ant -buildfile buildbuild.xml
					${START_TIME} </xsl:comment>

				<!-- 
			 note the use of xsl:extension-element-prefixes to prevent the
			 output of the names space
		-->
				<project xsl:extension-element-prefixes="exslt" name="part1000_publication"
					default="all" basedir="../../..">
					<xsl:text>
		  </xsl:text>
					<xsl:apply-templates select="." mode="target_variables"/>
					<xsl:apply-templates select="." mode="target_checkcvstag"/>
					<xsl:if test="./modules/module">
						<xsl:apply-templates select="." mode="target_modules_check"/>
					</xsl:if>
					<xsl:apply-templates select="." mode="target_normref_check"/>
					<xsl:apply-templates select="." mode="target_bibliography_check"/>
					<xsl:apply-templates select="." mode="target_wgn_summary"/>
					<xsl:apply-templates select="." mode="target_init"/>
					<xsl:apply-templates select="." mode="target_isoindex"/>
					<xsl:apply-templates select="." mode="target_zip"/>
					<!-- MWD -->
					<!--<xsl:apply-templates select="." mode="target_resources"/>-->
					<xsl:if test="./modules/module">
						<xsl:apply-templates select="." mode="target_isomodules"/>
						<xsl:apply-templates select="." mode="target_publish_isomodules"/>
						<xsl:apply-templates select="." mode="target_mergeSMRL"/>
						<!-- DELETE? -->
					</xsl:if>

					<!-- MWD START -->
					<!--<xsl:if test="./application_protocols/ap_doc">
						<xsl:apply-templates select="." mode="target_isoapdocs"/>
						<xsl:apply-templates select="." mode="target_publish_isoapdocs"/>
					</xsl:if>-->
					<!-- MWD END -->

					<xsl:if test="./resource_docs/resource_doc">
						<xsl:apply-templates select="." mode="target_isoresdocs"/>
						<xsl:apply-templates select="." mode="target_publish_isoresdocs"/>
					</xsl:if>

					<!-- MWD START -->
					<xsl:if test="./business_object_models/bom_doc">
						<xsl:apply-templates select="." mode="target_isobomdocs"/>
						<xsl:apply-templates select="." mode="target_publish_isobomdocs"/>
					</xsl:if>
					<!-- MWD END -->
					
					
					
					
					<xsl:apply-templates select="." mode="target_all"/>
				</project>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<!-- generate the target "checkcvstag" -->
	<xsl:template match="part1000.publication_index" mode="target_checkcvstag">
		<xsl:element name="target">
			<xsl:attribute name="name">checkcvstag</xsl:attribute>
			<xsl:attribute name="description">check CVS tag</xsl:attribute>
			<xsl:variable name="CVS_tag" select="@name"/>
			<input message="Have you tagged the CVS repository (y/n)? The Tag to use is {$CVS_tag}"
				addproperty="do.continue"/>
			<condition property="do.abort">
				<xsl:element name="equals">
					<xsl:attribute name="arg1">n</xsl:attribute>
					<xsl:attribute name="arg2">${do.continue}</xsl:attribute>
				</xsl:element>
			</condition>
			<xsl:variable name="fail_msg">-
				------------------------------------------------------------ You need to tag the
				repository before publishing the modules and/or resources and/or bo models. Use:
					<xsl:value-of select="$CVS_tag"/>
				------------------------------------------------------------ </xsl:variable>
			<fail if="do.abort">
				<xsl:value-of select="$fail_msg"/>
			</fail>
		</xsl:element>
	</xsl:template>


	<!-- generate the target "variables" -->
	<xsl:template match="part1000.publication_index" mode="target_variables">
		<xsl:element name="target">
			<xsl:attribute name="name">variables</xsl:attribute>
			<xsl:attribute name="description">initialize variables</xsl:attribute>
			<tstamp>
				<format property="START_TIME" pattern="EEE, d MMM yyyy HH:mm:ss"/>
				<format property="PUB_DATE" pattern="yyyy-MM-dd"/>
			</tstamp>
			<echo> Publication started: ${START_TIME} </echo>
			<xsl:element name="property">
				<xsl:attribute name="name">PUBLICATION</xsl:attribute>
				<xsl:attribute name="value">YES</xsl:attribute>
			</xsl:element>

			<xsl:element name="property">
				<xsl:attribute name="name">PUBDIR</xsl:attribute>
				<xsl:attribute name="value">
					<xsl:value-of select="concat('publication/isopub/',@name)"/>
				</xsl:attribute>
			</xsl:element>

			<xsl:element name="property">
				<xsl:attribute name="name">SC4COVERDIR</xsl:attribute>
				<xsl:attribute name="value">
					<xsl:value-of select="concat('publication/isopub/',@name, '/sc4covers')"/>
				</xsl:attribute>
			</xsl:element>

			<xsl:element name="property">
				<xsl:attribute name="name">P1000DIR</xsl:attribute>
				<xsl:attribute name="value">
					<xsl:value-of select="concat('publication/isopub/',@name,'/part1000')"/>
				</xsl:attribute>
			</xsl:element>
			<!-- IMAGES -->
			<xsl:element name="property">
				<xsl:attribute name="name">IMAGES</xsl:attribute>
				<xsl:attribute name="value">
					<xsl:value-of select="'images/*.*'"/>
				</xsl:attribute>
			</xsl:element>

			<xsl:element name="property">
				<xsl:attribute name="name">ISOMENU</xsl:attribute>
				<xsl:attribute name="value">
					<xsl:value-of
						select="concat('./publication/part1000/',@name,'/menubar_iso.xml')"/>
				</xsl:attribute>
			</xsl:element>

			<xsl:element name="property">
				<xsl:attribute name="name">PUBSRCDIR</xsl:attribute>
				<xsl:attribute name="value">
					<xsl:value-of select="concat('publication/part1000/',@name)"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="property">
				<xsl:attribute name="name">PUBSRCDTD</xsl:attribute>
				<xsl:attribute name="value">publication/dtd</xsl:attribute>
			</xsl:element>
			<xsl:element name="property">
				<xsl:attribute name="name">PUBSRCSTYLES</xsl:attribute>
				<xsl:attribute name="value">publication/xsl</xsl:attribute>
			</xsl:element>

			<!-- MWD START -->
			<!--<xsl:element name="property">
				<xsl:attribute name="name">APDOCS_INLINE_ERRORS</xsl:attribute>
				<xsl:attribute name="value">'yes'</xsl:attribute>
			</xsl:element>-->
			<!-- MWD END -->
			<xsl:if test="./modules">
				<xsl:element name="property">
					<xsl:attribute name="name">MODULES_INLINE_ERRORS</xsl:attribute>
					<xsl:attribute name="value">'yes'</xsl:attribute>
				</xsl:element>
				<xsl:element name="property">
					<xsl:attribute name="name">DEPMODULES_INLINE_ERRORS</xsl:attribute>
					<xsl:attribute name="value">'yes'</xsl:attribute>
				</xsl:element>
			</xsl:if>
			<xsl:element name="property">
				<xsl:attribute name="name">OUTPUT_RCS</xsl:attribute>
				<xsl:attribute name="value">NO</xsl:attribute>
			</xsl:element>
			<xsl:element name="property">
				<xsl:attribute name="name">OUTPUT_ISSUES</xsl:attribute>
				<xsl:attribute name="value">NO</xsl:attribute>
			</xsl:element>

			<xsl:if test="./modules">
				<xsl:element name="property">
					<xsl:attribute name="name">STEPMOD_DATA_MODULES</xsl:attribute>
					<xsl:attribute name="value">
						<xsl:value-of select="'../../../../data/modules/'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:if>

			<!-- MWD START -->
			<!--<xsl:element name="property">
				<xsl:attribute name="name">STEPMOD_DATA_APS</xsl:attribute>
				<xsl:attribute name="value">
					<xsl:value-of select="'../../../../data/application_protocol/'"/>
				</xsl:attribute>
			</xsl:element>-->
			<!-- MWD END -->

			<xsl:if test="./resource_docs">
				<xsl:element name="property">
					<xsl:attribute name="name">STEPMOD_DATA_RESOURCES</xsl:attribute>
					<xsl:attribute name="value">
						<xsl:value-of select="'../../../../data/resources/'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:if>
			<!-- MWD START -->
			<xsl:if test="./business_object_models">
				<xsl:element name="property">
					<xsl:attribute name="name">STEPMOD_DATA_BOMS</xsl:attribute>
					<xsl:attribute name="value">
						<xsl:value-of select="'../../../../data/business_object_models/'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:if>
			<!-- MWD END -->

			<xsl:element name="property">
				<xsl:attribute name="name">STEPMODSTYLES</xsl:attribute>
				<xsl:attribute name="value">xsl</xsl:attribute>
			</xsl:element>

			<xsl:element name="property">
				<xsl:attribute name="name">STEPMODDTDDIR</xsl:attribute>
				<xsl:attribute name="value">dtd</xsl:attribute>
			</xsl:element>

			<xsl:element name="property">
				<xsl:attribute name="name">DATE</xsl:attribute>
				<xsl:attribute name="value">
					<xsl:value-of select="'${DSTAMP}'"/>
				</xsl:attribute>
			</xsl:element>

			<!-- MWD START -->
			<!-- assumption that if the AP document is specified, then all the
		   modules are part of that document -->
			<!--<xsl:if test="./application_protocols">
				<xsl:apply-templates select="." mode="dependent_mod_res_variables"/>
				<xsl:apply-templates select="." mode="apdoc_variables"/>
			</xsl:if>-->
			<!-- MWD END -->

			<xsl:if test="./modules">
				<!--<xsl:apply-templates select="." mode="dependent_mod_res_variables"/>-->
				<!-- DELETE? -->
				<xsl:apply-templates select="." mode="modules_variables"/>
			</xsl:if>

			<xsl:if test="./resource_docs">
				<!--<xsl:apply-templates select="." mode="dependent_res_doc_variables"/>-->
				<!-- DELETE? -->
				<xsl:apply-templates select="." mode="resdoc_variables"/>
			</xsl:if>

			<!-- MWD START -->
			<xsl:if test="./business_object_models">
				<xsl:apply-templates select="." mode="bomdoc_variables"/>
			</xsl:if>
			<!-- MWD END -->

		</xsl:element>
	</xsl:template>


	<!-- variables for building the module -->
	<xsl:template match="part1000.publication_index" mode="modules_variables">


		<xsl:element name="property">
			<xsl:attribute name="name">MODULES</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/**/*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">CONTENTSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/contents.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">SCOPEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/1_scope.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">REFSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/2_refs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DEFSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/3_defs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">INFOREQSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/4_info_reqs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MAINXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/5_main.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>


		<xsl:element name="property">
			<xsl:attribute name="name">REFDATAXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/6_refdata.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MAPPINGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/5_mapping.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MIMXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/5_mim.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">INDEXXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/index.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">ABSTRACTXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/abstract.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">ASHORTNAMESXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/a_short_names.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOBJREGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/b_obj_reg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BIBLIOXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/biblio.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MODINDEXXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/modindex.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">CARMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/c_arm_expg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">COVERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/cover.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">COVERHTM</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/cover.htm'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>


		<xsl:element name="property">
			<xsl:attribute name="name">ISOCOVERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/isocover.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">ISOCOVERHTM</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/isocover.htm'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>


		<xsl:element name="property">
			<xsl:attribute name="name">DMIMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/d_mim_expg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">EEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">EEXPARMXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp_arm.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">EEXPARMLFXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="long_form">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp_arm_lf.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">EEXPMIMXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp_mim.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">EEXPMIMLFXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="long_form">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp_mim_lf.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">FGUIDEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/f_guide.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">GCHANGEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/g_change.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">FOREWORDXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/foreword.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">INTRODUCTIONXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/introduction.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<!-- MWD -->
		<!--<xsl:element name="property">
			<xsl:attribute name="name">ARMDESCRIPTIONSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/arm_descriptions.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MIMDESCRIPTIONSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/mim_descriptions.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">ARMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/armexpg*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MIMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/mimexpg*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">ARMEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/arm.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">ARMLFEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/arm_lf.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>



		<xsl:element name="property">
			<xsl:attribute name="name">MIMEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/mim.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">MIMLFEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/mim_lf.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>-->

		<xsl:element name="property">
			<xsl:attribute name="name">EXPRESS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/*.exp'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">GIFS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/*.gif'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/*.png'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="modules/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/*.jpg'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		<xsl:text>
	</xsl:text>
	</xsl:template>

	<!-- MWD -->
	<!--<xsl:template match="part1000.publication_index" mode="apdoc_variables">
		<xsl:element name="property">
			<xsl:attribute name="name">APDIR</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:value-of
					select="concat('data/application_protocols/',./application_protocols/ap_doc/@name)"
				/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCS</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/**/*.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APXSL</xsl:attribute>
			<xsl:attribute name="value">xsl/ap_doc</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCGIFS</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/*.gif</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCJPEGS</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/*.jpeg</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCJPGS</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/*.jpg</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCPNGS</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/*.png</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCSHOMEXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/home.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCSAAMIDEFXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/aamidef*.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCSDATAPLANXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/data_plan_*.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCSCOPEXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/1_scope.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCREFSXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/2_refs.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCDEFSXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/3_defs.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINFOREQSXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/4_info_reqs.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCMAINXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/5_main.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCCCSXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/6_ccs.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCCCSARMTABLEXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/6_ccs_arm_table.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCCCSMIMTABLEXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/6_ccs_mim_table.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCANNEXAAM</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/annex_aam.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCABSTRACT</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/abstract.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCANNEXARMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/annex_arm_expg.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCANNEXMIMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/annex_mim_expg.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCANNEXCHANGESXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/annex_changes.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCANNEXCOMP</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/annex_comp_int.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCANNEXEXPLFXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/annex_exp_lf.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCANNEXGUIDEXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/annex_guide.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCANNEXIMPMETHXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/annex_imp_meth.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCANNEXOBJREGXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/annex_obj_reg.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCANNEXPICSXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/annex_pics.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCANNEXSHORTNAMESXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/annex_shortnames.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCANNEXTECHDISCXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/annex_tech_disc.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCBIBLIOXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/biblio.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCCONTENTSXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/contents.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXAPDOCXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_apdoc.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCCOVERXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/cover.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCCOVERHTM</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/cover.htm</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCISOCOVERXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/isocover.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCISOCOVERHTM</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/isocover.htm</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCFOREWORDXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/foreword.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCFRAMEAPTITLEXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/frame_aptitle.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCFRAMECONTENTTITLEXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/frame_contenttitle.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCFRAMEINDEXXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/frame_index.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCFRAMETOCXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/frame_toc.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCFRAMETOCSHORTXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/frame_toc_short.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCHELPXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/help.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">INDEXARMEXPRESSNAVXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_arm_express_nav.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">INDEXARMEXPRESSNAVINNERXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_arm_express_nav_inner.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">INDEXARMEXPRESSNAVTOPXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_arm_express_nav_top.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXARMEXPRESSXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_arm_express.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXARMEXPRESSINNERXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_arm_express_inner.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXARMEXPRESSTOPXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_arm_express_top.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXARMMAPPINGSXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_arm_mappings.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXARMMAPPINGSINNERXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_arm_mappings_inner.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXARMMAPPINGSTOP</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_arm_mappings_top.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXARMMODULES</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_arm_modules.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXARMMODULESINNER</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_arm_modules_inner.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXARMMODULESINNERPART</xsl:attribute>
			<xsl:attribute name="value"
				>${APDIR}/sys/index_arm_modules_inner_part.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXARMMODULESTOP</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_arm_modules_top.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXMIMEXPRESS</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_mim_express.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXMIMEXPRESSINNERXML</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_mim_express_inner.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXMIMEXPRESSTOP</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_mim_express_top.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXMIMMODULES</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_mim_modules.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXMIMMODULESINNER</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_mim_modules_inner.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXMIMMODULESINNERPART</xsl:attribute>
			<xsl:attribute name="value"
				>${APDIR}/sys/index_mim_modules_inner_part.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXMIMMODULESTOP</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_mim_modules_top.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXRESOURCES</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_resources.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXRESOURCESINNER</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_resources_inner.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXRESOURCESINNERPART</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_resources_inner_part.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINDEXRESOURCESTOP</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/index_resources_top.xml</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">APDOCINTRODUCTION</xsl:attribute>
			<xsl:attribute name="value">${APDIR}/sys/introduction.xml</xsl:attribute>
		</xsl:element>
	</xsl:template>-->

	<!-- variables for building the resource documents -->
	<xsl:template match="part1000.publication_index" mode="resdoc_variables">
		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCGIFS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/*.exp'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/*.gif'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/*.png'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/*.jpg'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCINDEXXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/resdocindex.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCABSTRACTXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/abstract.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCCONTENTSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/contents.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/**/*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCSCOPEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/1_scope.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCRESDOCINDEXXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/resdocindex.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCREFSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/2_refs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCDEFSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/3_defs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>


		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCMAINXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/main.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCSCHEMAXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/*_schema.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCASHORTNAMESXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/a_short_names.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCBOBJREGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/b_obj_reg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCBIBLIOXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/biblio.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCISOCOVERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/isocover.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCCOVERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/cover.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCCOVERHTM</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/cover.htm'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCISOCOVERHTM</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/isocover.htm'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCCEXPSCHEMAXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/c_exp_schema_*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCCEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/c_exp.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCDEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/d_expg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCTECHDISCUSSIONXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/tech_discussion.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCEXAMPLESXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/examples.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCADDSCOPE</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/add_scope.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCFOREWORDXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/foreword.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCINTRODUCTIONXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/sys/introduction.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<!-- MWD -->
		<!--<xsl:element name="property">
			<xsl:attribute name="name">RESDOCDESCRIPTIONSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resources/'"/>
					<xsl:with-param name="suffix" select="'/descriptions.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>-->

		<xsl:element name="property">
			<xsl:attribute name="name">RESDOCSCHEMADIAGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="resource_docs/resource_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/resource_docs/'"/>
					<xsl:with-param name="suffix" select="'/schema_diagexpg*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:variable name="resdoc_file"
			select="concat('../../data/resource_docs/',resource_docs/resource_doc/@name,'/resource.xml')"/>
		<xsl:variable name="resdoc_xml" select="document($resdoc_file)"/>

		<!-- MWD -->
		<!--<xsl:element name="property">
			<xsl:attribute name="name">RESDOCRESOURCESSCHEMAEXPGXMLS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$resdoc_xml//schema" mode="list">
					<xsl:with-param name="prefix" select="'data/resources/'"/>
					<xsl:with-param name="suffix" select="'expg*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>-->

		<!-- MWD -->
		<!--<xsl:element name="property">
			<xsl:attribute name="name">RESDOCRESOURCESSCHEMAEXPGGIFS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$resdoc_xml//schema" mode="list">
					<xsl:with-param name="prefix" select="'data/resources/'"/>
					<xsl:with-param name="suffix" select="'expg*.gif'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="$resdoc_xml//schema" mode="list">
					<xsl:with-param name="prefix" select="'data/resources/'"/>
					<xsl:with-param name="suffix" select="'expg*.png'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="$resdoc_xml//schema" mode="list">
					<xsl:with-param name="prefix" select="'data/resources/'"/>
					<xsl:with-param name="suffix" select="'expg*.jpg'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>-->
	</xsl:template>

	<!-- variables for building the business object model -->
	<xsl:template match="part1000.publication_index" mode="bomdoc_variables">
		<xsl:element name="property">
			<xsl:attribute name="name">BOMDOCGIFS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/*.exp'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/*.gif'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/*.png'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/*.jpg'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMDOCS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/**/*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMSCOPEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/1_scope.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMREFSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/2_refs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMDEFSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/3_defs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINFOREQSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/4_info_reqs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMMAINXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/5_main.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMABSTRACTXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/abstract.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMANNEXBOMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/annex_bom_expg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMANNEXBOMUMLXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/annex_bom_uml.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMANNEXCOMPINTXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/annex_comp_int.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMANNEXOBJREGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/annex_obj_reg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMANNEXXSDDERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/annex_xsd_der.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMBIBLIOXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/biblio.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMBOMXSDXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/bom_xsd.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMBOMINDEXXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/bomindex.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMCONFIGXSDXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/config_xsd.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMCONTENTSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/contents.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMCOVERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/cover.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMFOREWORDXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/foreword.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<!--<xsl:element name="property">
			<xsl:attribute name="name">BOMFRAMEBOMTITLEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/frame_bomtitle.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>-->

		<xsl:element name="property">
			<xsl:attribute name="name">BOMFRAMETITLEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/frame_title.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMFRAMETOCXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/frame_toc.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMHELPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/help.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMEXPRESSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_express.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMEXPRESSINNERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_express_inner.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMEXPRESSNAVXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_express_nav.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMEXPRESSNAVINNERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_express_nav_inner.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMEXPRESSNAVTOPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_express_nav_top.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMEXPRESSTOPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_express_top.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMAPPINGS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_mappings.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMAPPINGSINNER</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_mappings_inner.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMAPPINGSTOP</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_mappings_top.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMODULES</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_modules.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMODULESINNER</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_modules_inner.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMODULESINNERPART</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_modules_inner_part.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMMODULESTOP</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_modules_top.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXBOMDOCXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_bom_doc.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXRESOURCESXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_resources.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXRESOURCESINNERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_resources_inner.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXRESOURCESINNERPARTXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_resources_inner_part.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMINDEXRESOURCESTOPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/index_resources_top.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMINTRODUCTIONXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/introduction.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMISOCOVERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/isocover.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<!-- ???? -->
		<xsl:element name="property">
			<xsl:attribute name="name">BOMISOCOVERHTM</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/isocover.htm'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		<xsl:element name="property">
			<xsl:attribute name="name">BOMHOMEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/home.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMSCHEMADIAGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/bomexpg*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		



		<!--<xsl:variable name="bomdoc_file"
			select="concat('../../data/business_object_models/',business_object_models/bom_doc/@name,'/business_object_model.xml')"/>
		<xsl:variable name="resdoc_xml" select="document($bomdoc_file)"/>-->


	</xsl:template>

	<!-- variables for building the business object model documents -->
	<!--<xsl:template match="part1000.publication_index" mode="bomdoc_variables">
		<xsl:element name="property">
			<xsl:attribute name="name">BOMDOCGIFS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/*.exp'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/*.gif'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/*.png'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/*.jpg'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>
		
		
		
		<!-\- HTML -\->
		<xsl:element name="property">
			<xsl:attribute name="name">BOMISOCOVERHTM</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/isocover.htm'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">BOMCOVERHTM</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="business_object_models/bom_doc" mode="list">
					<xsl:with-param name="prefix" select="'data/business_object_models/'"/>
					<xsl:with-param name="suffix" select="'/sys/cover.htm'"/>
				</xsl:apply-templates>
			</xsl:attribute>
      </xsl:element>

		

		

		<!-\-<xsl:variable name="resdoc_file"
			select="concat('../../data/business_object_models/',business_object_models/bom_doc/@name,'/resource.xml')"/>
		<xsl:variable name="resdoc_xml" select="document($resdoc_file)"/>-\->
		
		<!-\- MWD -\->
		<!-\-<xsl:element name="property">
			<xsl:attribute name="name">RESDOCRESOURCESSCHEMAEXPGXMLS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$resdoc_xml//schema" mode="list">
					<xsl:with-param name="prefix" select="'data/resources/'"/>
					<xsl:with-param name="suffix" select="'expg*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>-\->

		<!-\- MWD -\->
		<!-\-<xsl:element name="property">
			<xsl:attribute name="name">RESDOCRESOURCESSCHEMAEXPGGIFS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$resdoc_xml//schema" mode="list">
					<xsl:with-param name="prefix" select="'data/resources/'"/>
					<xsl:with-param name="suffix" select="'expg*.gif'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="$resdoc_xml//schema" mode="list">
					<xsl:with-param name="prefix" select="'data/resources/'"/>
					<xsl:with-param name="suffix" select="'expg*.png'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="$resdoc_xml//schema" mode="list">
					<xsl:with-param name="prefix" select="'data/resources/'"/>
					<xsl:with-param name="suffix" select="'expg*.jpg'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>-\->
	</xsl:template>
-->

	<!-- generate the target "isoindex" -->
	<xsl:template match="part1000.publication_index" mode="target_isoindex">
		<xsl:text>
	</xsl:text>
		<target name="isoindex" depends="init" description="Create HTML index">
			<dependset>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${PUBSRCDTD}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.dtd, **/*.ent'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${PUBSRCSTYLES}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.xsl'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${PUBSRCDIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.xml'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="targetfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${PUBSRCDIR}/*.htm*'"/>
					</xsl:attribute>
				</xsl:element>
			</dependset>

			<xsl:element name="xslt">
				<xsl:attribute name="in">
					<xsl:value-of select="'${PUBSRCDIR}/sys/publication_summary.xml'"/>
				</xsl:attribute>
				<xsl:attribute name="out">
					<xsl:value-of select="'${PUBDIR}/index.htm'"/>
				</xsl:attribute>
				<xsl:attribute name="destdir">
					<xsl:value-of select="'${PUBDIR}'"/>
				</xsl:attribute>
				<xsl:attribute name="extension">
					<xsl:value-of select="'.htm'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${PUBSRCSTYLES}/CR_publication_summary.xsl'"/>
				</xsl:attribute>
				<param name="output_type" expression="HTM"/>
				<param name="stepmodhome" expression="."/>
				<xsl:element name="param">
					<xsl:attribute name="name">
						<xsl:value-of select="'date'"/>
					</xsl:attribute>
					<xsl:attribute name="expression">
						<xsl:value-of select="'${DATE}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="in">
					<xsl:value-of select="'${PUBSRCDIR}/publication_index.xml'"/>
				</xsl:attribute>
				<xsl:attribute name="out">
					<xsl:value-of select="'${PUBDIR}/readme.txt'"/>
				</xsl:attribute>
				<xsl:attribute name="destdir">
					<xsl:value-of select="'${PUBDIR}'"/>
				</xsl:attribute>
				<xsl:attribute name="extension">
					<xsl:value-of select="'.txt'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${PUBSRCSTYLES}/publication_readme.xsl'"/>
				</xsl:attribute>
				<xsl:element name="param">
					<xsl:attribute name="name">
						<xsl:value-of select="'date'"/>
					</xsl:attribute>
					<xsl:attribute name="expression">
						<xsl:value-of select="'${DATE}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>

			<!-- make sure that the CR/LF are windows for the readme -->
			<xsl:element name="fixcrlf">
				<xsl:attribute name="srcdir">
					<xsl:value-of select="concat('publication/isopub/',@name)"/>
				</xsl:attribute>
				<xsl:attribute name="includes">
					<xsl:value-of select="'readme.txt'"/>
				</xsl:attribute>
				<xsl:attribute name="eol">
					<xsl:value-of select="'crlf'"/>
				</xsl:attribute>
			</xsl:element>

		</target>
	</xsl:template>

	<!-- generate the target "init" -->
	<xsl:template match="part1000.publication_index" mode="target_init">
		<xsl:choose>
			<xsl:when test="./modules/module">
				<target xsl:extension-element-prefixes="exslt" name="init"
					depends="checkcvstag, modules_check, variables">
					<xsl:element name="mkdir">
						<xsl:attribute name="dir">
							<xsl:value-of select="'${P1000DIR}'"/>
						</xsl:attribute>
					</xsl:element>
					<!-- IMAGES -->
					<xsl:element name="copy">						
						<xsl:attribute name="todir">							
							<xsl:value-of select="'${P1000DIR}'"/>							
						</xsl:attribute>						
						<xsl:element name="fileset">							
							<xsl:attribute name="dir">								
								<xsl:value-of select="'.'"/>								
							</xsl:attribute>
							<xsl:attribute name="includes">
								<xsl:value-of select="'${IMAGES}'"/>
							</xsl:attribute>
						</xsl:element>						
					</xsl:element>
					
				</target>
			</xsl:when>
			<xsl:otherwise>
				<target xsl:extension-element-prefixes="exslt" name="init"
					depends="checkcvstag, variables">
					<xsl:element name="mkdir">
						<xsl:attribute name="dir">
							<xsl:value-of select="'${P1000DIR}'"/>
						</xsl:attribute>
					</xsl:element>
					
					<xsl:element name="copy">						
						<xsl:attribute name="todir">							
							<xsl:value-of select="'${P1000DIR}'"/>							
						</xsl:attribute>						
						<xsl:element name="fileset">							
							<xsl:attribute name="dir">								
								<xsl:value-of select="'.'"/>								
							</xsl:attribute>
							<xsl:attribute name="includes">
								<xsl:value-of select="'${IMAGES}'"/>
							</xsl:attribute>
						</xsl:element>						
					</xsl:element>
					
				</target>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:text>
		</xsl:text>
		
		
	</xsl:template>



	<!-- output the variable for the dependent modules and resources -->
	<xsl:template match="part1000.publication_index" mode="dependent_mod_res_variables">
		<xsl:apply-templates select="." mode="dependent_variables">
			<xsl:with-param name="mim_modules" select="$mim_modules"/>
		</xsl:apply-templates>
	</xsl:template>

	<!-- output the variable for  dependent  resources for resource docs -->
	<xsl:template match="part1000.publication_index" mode="dependent_res_doc_variables">
		<!--
		<xsl:variable name="resdoc_schema">
		<xsl:call-template name="get_resource_schema_node_set"/>
		</xsl:variable>
	-->
		<xsl:apply-templates select="." mode="dependent_variables">
			<xsl:with-param name="mim_modules" select="$mim_modules"/>
		</xsl:apply-templates>
	</xsl:template>

	<xsl:template match="part1000.publication_index" mode="dependent_variables">
		<xsl:param name="mim_modules"/>

		<!-- MWD -->
		<!-- The resources -->
		<!--<xsl:element name="property">
			<xsl:attribute name="name">RESOURCESXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/resource" mode="list">
					<xsl:with-param name="prefix" select="'data/resources/'"/>
					<xsl:with-param name="suffix" select="'.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESOURCESEXP</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/resource" mode="list">
					<xsl:with-param name="prefix" select="'data/resources/'"/>
					<xsl:with-param name="suffix" select="'.exp'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESOURCESSCHEMAEXPGGIFS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/resource" mode="list">
					<xsl:with-param name="prefix" select="'data/resources/'"/>
					<xsl:with-param name="suffix" select="'expg*.gif'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">RESOURCESSCHEMAEXPGXMLS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/resource" mode="list">
					<xsl:with-param name="prefix" select="'data/resources/'"/>
					<xsl:with-param name="suffix" select="'expg*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>-->

		<!-- The dependent modules -->
		<xsl:element name="property">
			<xsl:attribute name="name">DMODEXPRESS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/*.exp'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODGIFS</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/*.exp'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/*.gif'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/*.png'"/>
					<xsl:with-param name="terminate" select="'NO'"/>
				</xsl:apply-templates>
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/*.jpg'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODCONTENTSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/contents.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODMODULES</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/**/*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODSCOPEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/1_scope.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODREFSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/2_refs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODDEFSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/3_defs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODINFOREQSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/4_info_reqs.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODMAINXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/5_main.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODREFDATAXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/6_refdata.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODMAPPINGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/5_mapping.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODMIMXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/5_mim.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODINDEXXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/index.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODASHORTNAMESXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/a_short_names.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODBOBJREGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/b_obj_reg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODBIBLIOXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/biblio.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODMODINDEXXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/modindex.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODCARMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/c_arm_expg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODCOVERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/cover.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODCOVERHTM</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/cover.htm'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODISOCOVERXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/isocover.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODISOCOVERHTM</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/isocover.htm'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODDMIMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/d_mim_expg.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODEEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODEEXPARMXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp_arm.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODEEXPMIMXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp_mim.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:if test="string-length($dlongforms)>0">

			<xsl:element name="property">
				<xsl:attribute name="name">DMODEEXPARMLFXML</xsl:attribute>
				<xsl:attribute name="value">
					<xsl:apply-templates select="$mim_modules_node_set/module" mode="long_form">
						<xsl:with-param name="prefix" select="'data/modules/'"/>
						<xsl:with-param name="suffix" select="'/sys/e_exp_arm_lf.xml'"/>
					</xsl:apply-templates>
				</xsl:attribute>
			</xsl:element>


			<xsl:element name="property">
				<xsl:attribute name="name">DMODEEXPMIMLFXML</xsl:attribute>
				<xsl:attribute name="value">
					<xsl:apply-templates select="$mim_modules_node_set/module" mode="long_form">
						<xsl:with-param name="prefix" select="'data/modules/'"/>
						<xsl:with-param name="suffix" select="'/sys/e_exp_mim_lf.xml'"/>
					</xsl:apply-templates>
				</xsl:attribute>
			</xsl:element>

		</xsl:if>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODFGUIDEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/f_guide.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODGCHANGEXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/g_change.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODFOREWORDXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/foreword.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODINTRODUCTIONXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/introduction.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODARMDESCRIPTIONSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/arm_descriptions.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODMIMDESCRIPTIONSXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/mim_descriptions.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODARMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/armexpg*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODMIMEXPGXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/mimexpg*.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODARMEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/arm.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="property">
			<xsl:attribute name="name">DMODMIMEXPXML</xsl:attribute>
			<xsl:attribute name="value">
				<xsl:apply-templates select="$mim_modules_node_set/module" mode="list">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/mim.xml'"/>
				</xsl:apply-templates>
			</xsl:attribute>
		</xsl:element>

	</xsl:template>

	<!-- generate the target "target_isomodules" -->
	<xsl:template match="part1000.publication_index" mode="target_isomodules">
		<xsl:param name="menu"/>
		<xsl:text>
	</xsl:text>
		<target xsl:extension-element-prefixes="exslt" name="isomodules" depends="init"
			description="generate HTML for all modules listed in the publication_index">
			<dependset>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${STEPMODDTDDIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.dtd, **/*.ent'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${STEPMODSTYLES}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.xsl'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${MODULES}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${GIFS}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${EXPRESS}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="targetfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${P1000DIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'/data/modules/**/*.htm'"/>
					</xsl:attribute>
				</xsl:element>
			</dependset>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${CONTENTSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_contents.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${SCOPEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_1_scope.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${REFSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_2_refs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DEFSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_3_defs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${INFOREQSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_4_info_reqs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${MAINXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_5_main.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${REFDATAXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_6_refdata.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${MAPPINGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_5_mapping.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${MIMXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_5_mim.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${INDEXXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/index.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${ABSTRACTXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_abstract.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${ASHORTNAMESXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_a_short_names.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOBJREGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_b_obj_reg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BIBLIOXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_biblio.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${MODINDEXXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_modindex.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${CARMEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_c_arm_expg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${COVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_cover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
				<xsl:element name="param">
					<xsl:attribute name="name">
						<xsl:value-of select="'coverpage_date'"/>
					</xsl:attribute>
					<xsl:attribute name="expression">
						<xsl:value-of select="'${DATE}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${ISOCOVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_isocover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
				<xsl:element name="param">
					<xsl:attribute name="name">
						<xsl:value-of select="'coverpage_date'"/>
					</xsl:attribute>
					<xsl:attribute name="expression">
						<xsl:value-of select="'${DATE}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>

			<!-- move the ISO cover page to cover page -->
			<xsl:element name="move">
				<xsl:attribute name="todir">${P1000DIR}</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">${P1000DIR}</xsl:attribute>
					<xsl:attribute name="includes">${ISOCOVERHTM}</xsl:attribute>
				</xsl:element>
				<mapper type="glob" from="*isocover.htm" to="*cover.htm"/>
			</xsl:element>


			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMIMEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_d_mim_expg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${EEXPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${EEXPARMXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_arm.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:variable name="longforms">
				<xsl:apply-templates select="modules/module" mode="long_form">
					<xsl:with-param name="prefix" select="'data/modules/'"/>
					<xsl:with-param name="suffix" select="'/sys/e_exp_arm_lf.xml'"/>
				</xsl:apply-templates>
			</xsl:variable>

			<xsl:if test="string-length($longforms)>0">
				<xsl:element name="xslt">
					<xsl:attribute name="includes">
						<xsl:value-of select="'${EEXPARMLFXML}'"/>
					</xsl:attribute>
					<xsl:attribute name="style">
						<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_arm_lf.xsl'"/>
					</xsl:attribute>
					<xsl:apply-templates select="." mode="modules_target_style_attributes">
						<xsl:with-param name="menu" select="$menu"/>
					</xsl:apply-templates>
				</xsl:element>
			</xsl:if>
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${EEXPMIMXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_mim.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:if test="string-length($longforms)>0">
				<xsl:element name="xslt">
					<xsl:attribute name="includes">
						<xsl:value-of select="'${EEXPMIMLFXML}'"/>
					</xsl:attribute>
					<xsl:attribute name="style">
						<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_mim_lf.xsl'"/>
					</xsl:attribute>
					<xsl:apply-templates select="." mode="modules_target_style_attributes">
						<xsl:with-param name="menu" select="$menu"/>
					</xsl:apply-templates>
				</xsl:element>
			</xsl:if>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${FGUIDEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_f_guide.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${GCHANGEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_g_change.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${FOREWORDXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_foreword.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${INTRODUCTIONXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_introduction.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of
						select="'${ARMEXPXML}, ${MIMEXPXML},${ARMLFEXPXML}, ${MIMLFEXPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/express.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${ARMEXPGXML},${MIMEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/imgfile.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${EXPRESS}'"/>
					</xsl:attribute>
				</xsl:element>
				<!-- as the express file is copied, replace the CVS Id with aSTEPmod Id
					so that subversion can take over the Id tag -->
				<xsl:variable name="escDollar" select="'\$'"/>
				<xsl:variable name="dollar" select="'$'"/>
				<xsl:variable name="pattern" select="concat($escDollar,'Id: (.*) ',$escDollar)"/>
				<xsl:variable name="replace"
					select="concat('Part1000: ',$dollar,'Id: ',$dollar,'&#xA; STEPmod.CVS.Id: \1')"/>
				<filterchain>
					<replaceregex pattern="{$pattern}" replace="{$replace}" flags="s"/>
				</filterchain>
			</xsl:element>

			<!-- the replaceregex above seems to introduce extra linefeed characters - hence strip them -->
			<xsl:element name="fixcrlf">
				<xsl:attribute name="srcDir">${P1000DIR}</xsl:attribute>
				<xsl:attribute name="eol">crlf</xsl:attribute>
				<xsl:attribute name="includes">
					<xsl:value-of select="'${EXPRESS}'"/>
				</xsl:attribute>
			</xsl:element>

			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${GIFS}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>
		</target>
	</xsl:template>

	<!-- MWD -->
	<!-- generate the target "target_resources" -->
	<!--<xsl:template match="part1000.publication_index" mode="target_resources">
		<xsl:text>
	</xsl:text>
		<target xsl:extension-element-prefixes="exslt" name="resources" depends="init"
			description="generate common resources">
			<dependset>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${STEPMODDTDDIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.dtd, **/*.ent'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${STEPMODSTYLES}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.xsl'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfilelist">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="files">
						<xsl:value-of select="'${RESOURCESXML}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="targetfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${P1000DIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'/data/resources/**/*.htm'"/>
					</xsl:attribute>
				</xsl:element>
			</dependset>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESOURCESXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="destdir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:attribute name="extension">
					<xsl:value-of select="'.htm'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/express.xsl'"/>
				</xsl:attribute>
				<param name="output_type" expression="HTM"/>
				<xsl:element name="param">
					<xsl:attribute name="name">
						<xsl:value-of select="'output_background'"/>
					</xsl:attribute>
					<xsl:attribute name="expression">
						<xsl:value-of select="'${OUTPUT_RESOURCES_BACKGROUND}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:choose>
					<xsl:when test="./@background.image.dependent.resources">
						<xsl:element name="param">
							<xsl:attribute name="name">
								<xsl:value-of select="'background_image'"/>
							</xsl:attribute>
							<xsl:attribute name="expression">
								<xsl:value-of select="./@background.image.dependent.resources"/>
							</xsl:attribute>
						</xsl:element>
					</xsl:when>
					<xsl:otherwise>
						<xsl:element name="param">
							<xsl:attribute name="name">
								<xsl:value-of select="'background_image'"/>
							</xsl:attribute>
							<xsl:attribute name="expression">
								<xsl:value-of select="'greybackground.jpg'"/>
							</xsl:attribute>
						</xsl:element>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:element>

			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${RESOURCESEXP}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>
		</target>
	</xsl:template>-->


	<xsl:template match="part1000.publication_index" mode="target_isodepmodules">
		<xsl:param name="menu"/>
		<xsl:apply-templates select="." mode="target_isodepmodules_publication_record"/>
		<xsl:text>
	</xsl:text>
		<target xsl:extension-element-prefixes="exslt" name="isodepmodules"
			depends="init, isodepmodules_publication_record"
			description="generate HTML for all modules">
			<dependset>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${STEPMODDTDDIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.dtd, **/*.ent'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${STEPMODSTYLES}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.xsl'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${DMODMODULES}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${DMODGIFS}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${DMODEXPRESS}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="targetfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${P1000DIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'/data/modules/**/*.htm'"/>
					</xsl:attribute>
				</xsl:element>
			</dependset>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODCONTENTSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_contents.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODSCOPEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_1_scope.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODREFSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_2_refs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODDEFSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_3_defs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODINFOREQSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_4_info_reqs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODMAINXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_5_main.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODREFDATAXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_6_refdata.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODMAPPINGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_5_mapping.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODMIMXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_5_mim.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODINDEXXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/index.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>


			<!-- RBN - ISO do not want the abstract in the module
		   <xsl:element name="xslt">
		   <xsl:attribute name="includes">
		   <xsl:value-of select="'${DMODABSTRACTXML}'"/>
		   </xsl:attribute>
		   <xsl:attribute name="style">
		   <xsl:value-of select="'${STEPMODSTYLES}/sect_abstract.xsl'"/>
		   </xsl:attribute>        
		   <xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
		   <xsl:with-param name="menu" select="$menu"/>
		   </xsl:apply-templates>
		   </xsl:element> -->

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODASHORTNAMESXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_a_short_names.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODBOBJREGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_b_obj_reg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODBIBLIOXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_biblio.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODMODINDEXXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_modindex.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODCARMEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_c_arm_expg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODCOVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_cover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
				<xsl:element name="param">
					<xsl:attribute name="name">
						<xsl:value-of select="'coverpage_date'"/>
					</xsl:attribute>
					<xsl:attribute name="expression">
						<xsl:value-of select="'${DATE}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>

			<!-- move the cover page to SC4 cover page  -->
			<!-- RBN Commented out as per request from ISO
		   <xsl:element name="move">
		   <xsl:attribute name="todir">${P1000DIR}</xsl:attribute>
		   <xsl:element name="fileset">
		   <xsl:attribute name="dir">${P1000DIR}</xsl:attribute>
		   <xsl:attribute name="includes">${DMODCOVERHTM}</xsl:attribute>
		   </xsl:element>
		   <mapper type="glob" from="*.htm" to="*_sc4.htm"/>
		   </xsl:element> -->

			<!-- generate the ISO cover page  -->
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODISOCOVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_isocover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<!-- move the ISO cover page to cover page -->
			<xsl:element name="move">
				<xsl:attribute name="todir">${P1000DIR}</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">${P1000DIR}</xsl:attribute>
					<xsl:attribute name="includes">${DMODISOCOVERHTM}</xsl:attribute>
				</xsl:element>
				<mapper type="glob" from="*isocover.htm" to="*cover.htm"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODDMIMEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_d_mim_expg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODEEXPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODEEXPARMXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_arm.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODEEXPMIMXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_mim.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>


			<!-- RBN the test need to be run on the dependent modules -->
			<xsl:if test="string-length($dlongforms)>0">

				<xsl:element name="xslt">
					<xsl:attribute name="includes">
						<xsl:value-of select="'${DMODEEXPARMLFXML}'"/>
					</xsl:attribute>
					<xsl:attribute name="style">
						<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_arm_lf.xsl'"/>
					</xsl:attribute>
					<xsl:attribute name="scanincludeddirectories">
						<xsl:value-of select="'false'"/>
					</xsl:attribute>
					<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
						<xsl:with-param name="menu" select="$menu"/>
					</xsl:apply-templates>
				</xsl:element>

				<!-- RBN the test need to be run on the dependent modules       
			 <xsl:if test="string-length($dlongforms)>0"></xsl:if> -->
				<xsl:element name="xslt">
					<xsl:attribute name="includes">
						<xsl:value-of select="'${DMODEEXPMIMLFXML}'"/>
					</xsl:attribute>
					<xsl:attribute name="style">
						<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_mim_lf.xsl'"/>
					</xsl:attribute>
					<xsl:attribute name="scanincludeddirectories">
						<xsl:value-of select="'false'"/>
					</xsl:attribute>
					<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
						<xsl:with-param name="menu" select="$menu"/>
					</xsl:apply-templates>
				</xsl:element>

			</xsl:if>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODFGUIDEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_f_guide.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODGCHANGEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_g_change.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODFOREWORDXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_foreword.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODINTRODUCTIONXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_introduction.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODARMEXPXML}, ${DMODMIMEXPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/express.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${DMODARMEXPGXML},${DMODMIMEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/imgfile.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${SYS}/e_exp_arm_lf.xml'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_e_exp_arm_lf.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="dependent_modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${DMODEXPRESS}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>

			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${DMODGIFS}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>
		</target>
	</xsl:template>


	<!-- called from template match="part1000.publication_index" mode="dependent_modules_target" -->
	<xsl:template match="part1000.publication_index"
		mode="dependent_modules_target_style_attributes">
		<xsl:param name="menu"/>
		<xsl:attribute name="destdir">
			<xsl:value-of select="'${P1000DIR}'"/>
		</xsl:attribute>
		<xsl:attribute name="extension">
			<xsl:value-of select="'.htm'"/>
		</xsl:attribute>
		<param name="output_type" expression="HTM"/>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'INLINE_ERRORS'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${DEPMODULES_INLINE_ERRORS}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'publication'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${PUBLICATION}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'output_rcs'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${OUTPUT_RCS}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'output_issues'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${OUTPUT_ISSUES}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'output_background'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${OUTPUT_DEPMODULES_BACKGROUND}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'menubar_file'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${ISOMENU}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:if test="./modules">
			<xsl:element name="param">
				<xsl:attribute name="name">
					<xsl:value-of select="'STEPMOD_DATA_MODULES'"/>
				</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="'${STEPMOD_DATA_MODULES}'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:if>
		<!-- MWD -->
		<xsl:if test="./resource_docs">
			<xsl:element name="param">
				<xsl:attribute name="name">
					<xsl:value-of select="'STEPMOD_DATA_RESOURCES'"/>
				</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="'${STEPMOD_DATA_RESOURCES}'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:if>
		<xsl:if test="./business_object_models">
			<xsl:element name="param">
				<xsl:attribute name="name">
					<xsl:value-of select="'STEPMOD_DATA_BOMS'"/>
				</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="'${STEPMOD_DATA_BOMS}'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:if>
		<!--<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'STEPMOD_DATA_APS'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${STEPMOD_DATA_APS}'"/>
			</xsl:attribute>
		</xsl:element>-->
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'background_image'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${DEPMODULES_BACKGROUND}'"/>
			</xsl:attribute>
		</xsl:element>
	</xsl:template>

	<!-- called from template match="part1000.publication_index" mode="apdocs_target" -->
	<xsl:template match="part1000.publication_index" mode="apdocs_target_style_attributes">
		<xsl:param name="menu"/>
		<xsl:attribute name="destdir">
			<xsl:value-of select="'${P1000DIR}'"/>
		</xsl:attribute>
		<xsl:attribute name="extension">
			<xsl:value-of select="'.htm'"/>
		</xsl:attribute>
		<param name="output_type" expression="HTM"/>
		<!--<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'INLINE_ERRORS'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${APDOCS_INLINE_ERRORS}'"/>
			</xsl:attribute>
		</xsl:element>-->
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'publication'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${PUBLICATION}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'output_rcs'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${OUTPUT_RCS}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'output_issues'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${OUTPUT_ISSUES}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'menubar_file'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${ISOMENU}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'STEPMOD_DATA_MODULES'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${STEPMOD_DATA_MODULES}'"/>
			</xsl:attribute>
		</xsl:element>
		<!-- MWD -->
		<!--<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'STEPMOD_DATA_RESOURCES'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${STEPMOD_DATA_RESOURCES}'"/>
			</xsl:attribute>
		</xsl:element>-->
		<!--<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'STEPMOD_DATA_APS'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${STEPMOD_DATA_APS}'"/>
			</xsl:attribute>
		</xsl:element>-->
	</xsl:template>

	<!-- called from template match="part1000.publication_index" mode="target_isomodules" -->
	<xsl:template match="part1000.publication_index" mode="modules_target_style_attributes">
		<xsl:param name="menu"/>
		<xsl:attribute name="destdir">
			<xsl:value-of select="'${P1000DIR}'"/>
		</xsl:attribute>
		<xsl:attribute name="extension">
			<xsl:value-of select="'.htm'"/>
		</xsl:attribute>
		<param name="output_type" expression="HTM"/>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'INLINE_ERRORS'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${MODULES_INLINE_ERRORS}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'publication'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${PUBLICATION}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'output_rcs'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${OUTPUT_RCS}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'output_issues'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${OUTPUT_ISSUES}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'menubar_file'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${ISOMENU}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'STEPMOD_DATA_MODULES'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${STEPMOD_DATA_MODULES}'"/>
			</xsl:attribute>
		</xsl:element>
		<!-- MWD -->
		<!--<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'STEPMOD_DATA_RESOURCES'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${STEPMOD_DATA_RESOURCES}'"/>
			</xsl:attribute>
		</xsl:element>-->
		<!--<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'STEPMOD_DATA_APS'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${STEPMOD_DATA_APS}'"/>
			</xsl:attribute>
		</xsl:element>-->
	</xsl:template>


	<!-- MWD -->
	<!-- generate the target "isoapdocs" -->
	<!--<xsl:template match="part1000.publication_index" mode="target_isoapdocs">
		<xsl:param name="menu"/>

		<!-\- generate the target for all the modules that the AP is dependent
		  on. These will be published as well -\->
		<xsl:apply-templates select="." mode="target_isodepmodules"/>
		<xsl:text>
	 </xsl:text>
		<target xsl:extension-element-prefixes="exslt" name="isoapdoc" depends="init"
			description="generate HTML for AP doc">
			<dependset>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${STEPMODDTDDIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.dtd, **/*.ent'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${STEPMODSTYLES}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.xsl'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${APDOCS}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${APDOCGIFS}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${APDOCJPEGS}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${APDOCJPGS}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${APDOCPNGS}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="targetfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${P1000DIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'/${APDIR}/**/*.htm'"/>
					</xsl:attribute>
				</xsl:element>
			</dependset>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCSHOMEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/home.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCFRAMEAPTITLEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/frame_aptitle.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCFRAMECONTENTTITLEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/frame_contenttitle.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCFRAMEINDEXXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/frame_index.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCFRAMETOCXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/frame_toc.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCFRAMETOCSHORTXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/frame_toc_short.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCHELPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_help.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCSAAMIDEFXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/imgfile.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCSDATAPLANXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/imgfile.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCSCOPEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_1_scope.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCREFSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_2_refs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCDEFSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_3_defs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINFOREQSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_4_info_reqs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCMAINXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_5_main.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCCCSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_6_ccs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCCCSARMTABLEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_6_ccs_arm_table.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCCCSMIMTABLEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_6_ccs_mim_table.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCABSTRACT}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_abstract.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCANNEXAAM}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_annex_aam.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCANNEXARMEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_annex_arm_expg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCANNEXMIMEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_annex_mim_expg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCANNEXCHANGESXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_annex_changes.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCANNEXCOMP}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_annex_comp_int.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCANNEXEXPLFXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_annex_exp_lf.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCANNEXGUIDEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_annex_guide.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCANNEXIMPMETHXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_annex_imp_meth.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCANNEXOBJREGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_annex_obj_reg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCANNEXPICSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_annex_pics.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCANNEXSHORTNAMESXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_annex_shortnames.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCANNEXTECHDISCXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_annex_tech_disc.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCBIBLIOXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_biblio.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCCONTENTSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_contents.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXAPDOCXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_index_apdoc.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCCOVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_cover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<!-\- move the cover page to SC4 cover page  -\->
			<!-\- RBN commented out per request for ISO - not to have sc4 cover page
	   <xsl:element name="move">
		 <xsl:attribute name="todir">${P1000DIR}</xsl:attribute>
		 <xsl:element name="fileset">
		   <xsl:attribute name="dir">${P1000DIR}</xsl:attribute>
		   <xsl:attribute name="includes">${APDOCCOVERHTM}</xsl:attribute>
		 </xsl:element>
		 <mapper type="glob" from="*.htm" to="*_sc4.htm"/>
	   </xsl:element>  
	   -\->

			<!-\- generate the ISO cover page  -\->
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCISOCOVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_isocover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="modules_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<!-\- move the ISO cover page to cover page -\->
			<xsl:element name="move">
				<xsl:attribute name="todir">${P1000DIR}</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">${P1000DIR}</xsl:attribute>
					<xsl:attribute name="includes">${APDOCISOCOVERHTM}</xsl:attribute>
				</xsl:element>
				<mapper type="glob" from="*isocover.htm" to="*cover.htm"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCFOREWORDXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_foreword.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${INDEXARMEXPRESSNAVXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_arm_express_nav.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${INDEXARMEXPRESSNAVINNERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_arm_express_nav_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${INDEXARMEXPRESSNAVTOPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_arm_express_nav_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXARMEXPRESSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_arm_express.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXARMEXPRESSINNERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_arm_express_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXARMEXPRESSTOPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_arm_express_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXARMMAPPINGSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_arm_mappings.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXARMMAPPINGSINNERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_arm_mappings_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXARMMAPPINGSTOP}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_arm_mappings_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXARMMODULES}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_arm_modules.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXARMMODULESINNER}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_arm_modules_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXARMMODULESINNERPART}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_arm_modules_inner_part.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>


			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXARMMODULESTOP}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_arm_modules_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXMIMEXPRESS}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_mim_express.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXMIMEXPRESSINNERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_mim_express_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXMIMEXPRESSTOP}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_mim_express_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXMIMMODULES}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_mim_modules.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXMIMMODULESINNER}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_mim_modules_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXMIMMODULESINNERPART}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_mim_modules_inner_part.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXMIMMODULESTOP}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_mim_modules_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXRESOURCES}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_resources.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXRESOURCESINNER}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_resources_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXRESOURCESINNERPART}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_resources_inner_part.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINDEXRESOURCESTOP}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/index_resources_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${APDOCINTRODUCTION}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${APXSL}/sect_introduction.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="apdocs_target_style_attributes">
					<xsl:with-param name="menu" select="$menu"/>
				</xsl:apply-templates>
			</xsl:element>

			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${APDOCGIFS}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>
			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${APDOCJPGS}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>
			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${APDOCJPEGS}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>
			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${APDOCPNGS}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>
		</target>
	</xsl:template>-->


	<xsl:template match="part1000.publication_index" mode="target_resources_publication_record">
		<xsl:variable name="resdoc_schema">
			<xsl:call-template name="get_resource_schema_node_set"/>
		</xsl:variable>
		<xsl:variable name="resdoc_schema_node_set" select="exslt:node-set($resdoc_schema)"/>
		<xsl:text>
	 </xsl:text>
		<xsl:element name="target">
			<xsl:attribute name="name">resources_publication_record</xsl:attribute>
			<xsl:attribute name="depends">init</xsl:attribute>
			<xsl:apply-templates select="$resdoc_schema_node_set/resource" mode="pub_record_style"/>
		</xsl:element>

	</xsl:template>

	<!-- generate the target "target_isoresdocs" -->
	<xsl:template match="part1000.publication_index" mode="target_isoresdocs">

		<xsl:apply-templates select="." mode="target_resources_publication_record"/>

		<target name="isoresdocs" depends="init" description="generate HTML for all listed resource docs">
			<dependset>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${STEPMODDTDDIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.dtd, **/*.ent'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${STEPMODSTYLES}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.xsl'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${RESDOCS}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${RESDOCGIFS}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="targetfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${PUBDIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'/data/resource_docs/**/*.htm'"/>
					</xsl:attribute>
				</xsl:element>
			</dependset>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCINDEXXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_resdocindex.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCABSTRACTXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_abstract.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCCONTENTSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_contents.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCSCOPEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_1_scope.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCRESDOCINDEXXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_resdocindex.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCREFSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_2_refs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCDEFSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_3_defs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCSCHEMAXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_schema.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCCEXPSCHEMAXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_c_exp_schema.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCCEXPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_c_exp.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCDEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_d_expg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<!--
	   <xsl:element name="xslt">
		 <xsl:attribute name="includes">
		   <xsl:value-of select="'${RESDOCMAINXML}'"/>
		 </xsl:attribute>
		 <xsl:attribute name="style">
		   <xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_main.xsl'"/>
		 </xsl:attribute>
		 <xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
	   </xsl:element>
	   -->
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCASHORTNAMESXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_a_short_names.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCBOBJREGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_b_obj_reg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCTECHDISCUSSIONXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_tech_discussion.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCEXAMPLESXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_examples.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCADDSCOPEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_add_scope.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCBIBLIOXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_biblio.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCCOVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_cover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<!-- move the cover page to SC4 cover page  -->
			<!--
	   <xsl:element name="move">
		 <xsl:attribute name="todir">${P1000DIR}</xsl:attribute>
		 <xsl:element name="fileset">
		   <xsl:attribute name="dir">${P1000DIR}</xsl:attribute>
		   <xsl:attribute name="includes">${RESDOCCOVERHTM}</xsl:attribute>
		 </xsl:element>
		 <mapper type="glob" from="*.htm" to="*_sc4.htm"/>
	   </xsl:element> 
 -->
			<!-- generate the ISO cover page  -->
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCISOCOVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_isocover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<!-- move the ISO cover page to cover page -->
			<xsl:element name="move">
				<xsl:attribute name="todir">${P1000DIR}</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">${P1000DIR}</xsl:attribute>
					<xsl:attribute name="includes">${RESDOCISOCOVERHTM}</xsl:attribute>
				</xsl:element>
				<mapper type="glob" from="*isocover.htm" to="*cover.htm"/>
			</xsl:element>



			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCFOREWORDXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_foreword.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCINTRODUCTIONXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/sect_introduction.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCSCHEMADIAGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/imgfile.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${RESDOCRESOURCESSCHEMAEXPGXMLS}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/res_doc/imgfile.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="resdoc_target_style_attributes"/>
			</xsl:element>


			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${RESDOCGIFS}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>

			<!--<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<!-\- MWD -\->
					<!-\-<xsl:attribute name="includes">
						<xsl:value-of select="'${RESDOCRESOURCESSCHEMAEXPGGIFS}'"/>
					</xsl:attribute>-\->
				</xsl:element>
			</xsl:element>-->
		</target>
	</xsl:template>

	<!-- MWD -->
	<!-- generate the target "target_isobomdocs" -->
	<xsl:template match="part1000.publication_index" mode="target_isobomdocs">

		<!--<xsl:apply-templates select="." mode="target_boms_publication_record"/>-->

		<target name="isobomdocs" depends="init" description="generate HTML for all BO Models">
			<dependset>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${STEPMODDTDDIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.dtd, **/*.ent'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${STEPMODSTYLES}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'**/*.xsl'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${BOMDOCS}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="srcfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${BOMDOCGIFS}'"/>
					</xsl:attribute>
				</xsl:element>
				<xsl:element name="targetfileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'${PUBDIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'/data/business_object_models/**/*.htm'"/>
					</xsl:attribute>
				</xsl:element>
			</dependset>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMSCOPEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_1_scope.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMREFSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_2_refs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMDEFSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_3_defs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINFOREQSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_4_info_reqs.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMMAINXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_5_main.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMABSTRACTXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_abstract.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMANNEXBOMEXPGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_annex_bom_expg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMANNEXBOMUMLXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_annex_bom_uml.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMANNEXCOMPINTXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_annex_comp_int.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMANNEXOBJREGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_annex_obj_reg.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMANNEXXSDDERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_annex_xsd_der.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMBIBLIOXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_biblio.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_bomindex.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMCONFIGXSDXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_config.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMCONTENTSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_contents.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMCOVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_cover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMFOREWORDXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_foreword.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<!--<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMFRAMEBOMTITLEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/frame_title.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>-->
			
				<xsl:element name="xslt">
					<xsl:attribute name="includes">
						<xsl:value-of select="'${BOMFRAMETITLEXML}'"/>
					</xsl:attribute>
					<xsl:attribute name="style">
						<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/frame_title.xsl'"/>
					</xsl:attribute>
					<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
				</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMFRAMETOCXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/frame_toc.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMHELPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_help.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
				</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMEXPRESSXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_express.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMEXPRESSINNERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_express_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMEXPRESSNAVXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_express_nav.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMEXPRESSNAVINNERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_express_nav_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMEXPRESSNAVTOPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_express_nav_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMEXPRESSTOPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_express_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMAPPINGS}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_mappings.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMAPPINGSINNER}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_mappings_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMAPPINGSTOP}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/index_bom_mappings_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMODULES}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_arm_modules.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMODULESINNER}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_arm_modules_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMODULESINNERPART}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_arm_modules_inner_part.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMMODULESTOP}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_arm_modules_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXBOMDOCXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_index_bomdoc.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXRESOURCESXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_resources.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXRESOURCESINNERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_resources_inner.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXRESOURCESINNERPARTXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_resources_inner_part.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINDEXRESOURCESTOPXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/ap_doc/index_resources_top.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMINTRODUCTIONXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_introduction.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMBOMXSDXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_xsd.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMBOMINDEXXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/sect_bomindex.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<!-- MWD START -->
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMHOMEXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/home.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			<!-- MWD END -->
			
			<!-- generate the ISO cover page  -->
			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMISOCOVERXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/sect_isocover.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>

			<!-- move the ISO cover page to cover page -->
			<xsl:element name="move">
				<xsl:attribute name="todir">${P1000DIR}</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">${P1000DIR}</xsl:attribute>
					<xsl:attribute name="includes">${BOMISOCOVERHTM}</xsl:attribute>
				</xsl:element>
				<mapper type="glob" from="*isocover.htm" to="*cover.htm"/>
			</xsl:element>

			<xsl:element name="xslt">
				<xsl:attribute name="includes">
					<xsl:value-of select="'${BOMSCHEMADIAGXML}'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/bom_doc/imgfile.xsl'"/>
				</xsl:attribute>
				<xsl:apply-templates select="." mode="bomdoc_target_style_attributes"/>
			</xsl:element>
			
			<xsl:element name="copy">
				<xsl:attribute name="todir">
					<xsl:value-of select="'${P1000DIR}'"/>
				</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">
						<xsl:value-of select="'.'"/>
					</xsl:attribute>
					<xsl:attribute name="includes">
						<xsl:value-of select="'${BOMDOCGIFS}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>


		</target>
	</xsl:template>

	<!-- called from template match="part1000.publication_index" mode="?????" -->
	<xsl:template match="part1000.publication_index" mode="resdoc_target_style_attributes">
		<xsl:attribute name="destdir">
			<xsl:value-of select="'${P1000DIR}'"/>
		</xsl:attribute>
		<xsl:attribute name="extension">
			<xsl:value-of select="'.htm'"/>
		</xsl:attribute>
		<param name="output_type" expression="HTM"/>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'publication'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${PUBLICATION}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'output_rcs'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${OUTPUT_RCS}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'output_issues'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${OUTPUT_ISSUES}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'INLINE_ERRORS'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${INLINE_ERRORS}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'menubar_file'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${ISOMENU}'"/>
			</xsl:attribute>
		</xsl:element>
	</xsl:template>

	<!-- MWD START -->
	<!-- called from template match="part1000.publication_index" mode="??????" -->
	<xsl:template match="part1000.publication_index" mode="bomdoc_target_style_attributes">
		<xsl:attribute name="destdir">
			<xsl:value-of select="'${P1000DIR}'"/>
		</xsl:attribute>
		<xsl:attribute name="extension">
			<xsl:value-of select="'.htm'"/>
		</xsl:attribute>
		<param name="output_type" expression="HTM"/>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'publication'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${PUBLICATION}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'output_rcs'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${OUTPUT_RCS}'"/>
			</xsl:attribute>
		</xsl:element>
		<!--<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'output_issues'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${OUTPUT_ISSUES}'"/>
			</xsl:attribute>
		</xsl:element>-->
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'INLINE_ERRORS'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${INLINE_ERRORS}'"/>
			</xsl:attribute>
		</xsl:element>
		<xsl:element name="param">
			<xsl:attribute name="name">
				<xsl:value-of select="'menubar_file'"/>
			</xsl:attribute>
			<xsl:attribute name="expression">
				<xsl:value-of select="'${ISOMENU}'"/>
			</xsl:attribute>
		</xsl:element>
	</xsl:template>
	<!-- MWD END -->


	<!-- MWD -->
	<!-- generate the target "publish_isoapdocs" -->
	<!--<xsl:template match="part1000.publication_index" mode="target_publish_isoapdocs">
		<xsl:text>
	 </xsl:text>
		<xsl:element name="target">
			<xsl:attribute name="name">publish_isoapdocs</xsl:attribute>
			<!-\- MWD -\->
			<!-\-<xsl:attribute name="depends">isoindex, resources, isodepmodules,
			isoapdoc</xsl:attribute>-\->
			<xsl:attribute name="depends">isoindex, isodepmodules,
				isoapdoc</xsl:attribute>
			<xsl:attribute name="description">Copy HTML to publication directory</xsl:attribute>
			<xsl:apply-templates select="//ap_doc" mode="target_publish_isoapdocs"/>
		</xsl:element>
	</xsl:template>-->

	<!-- MWD -->
	<!--<xsl:template match="ap_doc" mode="target_publish_isoapdocs">
		<xsl:variable name="apdoc_file"
			select="concat('../../data/application_protocols/',@name,'/application_protocol.xml')"/>
		<xsl:variable name="apdoc_xml" select="document($apdoc_file)"/>

		<xsl:variable name="apdoc_iso_no"
			select="concat('iso10303_',$apdoc_xml/application_protocol/@part)"/>
		<xsl:variable name="apdoc_dir" select="concat('${PUBDIR}/',$apdoc_iso_no,'/')"/>

		<xsl:text>
	 </xsl:text>
		<xsl:comment>Publish Application protocol: <xsl:value-of select="@name"/>
		</xsl:comment>

		<!-\- generate the publication record for the AP doc -\->
		<xsl:apply-templates select="." mode="pub_record_style"/>

		<!-\- MWD -\->
		<!-\- the readme -\->
		<!-\-<xsl:element name="xslt">
			<xsl:attribute name="in">
				<xsl:value-of
					select="concat('data/application_protocols/',@name,'/application_protocol.xml')"
				/>
			</xsl:attribute>
			<xsl:attribute name="out">
				<xsl:value-of select="concat($apdoc_dir,$apdoc_iso_no,'_readme.txt')"/>
			</xsl:attribute>
			<xsl:attribute name="style">
				<xsl:value-of select="'${STEPMODSTYLES}/publication/pub_readme.xsl'"/>
			</xsl:attribute>
			<xsl:attribute name="destdir">
				<xsl:value-of select="$apdoc_dir"/>
			</xsl:attribute>
		</xsl:element>-\->

		<!-\- make sure that the CR/LF are windows for the readme -\->
		<xsl:element name="fixcrlf">
			<xsl:attribute name="srcdir">
				<xsl:value-of select="$apdoc_dir"/>
			</xsl:attribute>
			<xsl:attribute name="includes">
				<xsl:value-of select="concat($apdoc_iso_no,'_readme.txt')"/>
			</xsl:attribute>
			<xsl:attribute name="eol">
				<xsl:value-of select="'crlf'"/>
			</xsl:attribute>
		</xsl:element>

		<!-\- the frontpage redirected to application_protocol cover page -\->
		<xsl:element name="xslt">
			<xsl:attribute name="in">
				<xsl:value-of
					select="concat('data/application_protocols/',@name,'/application_protocol.xml')"
				/>
			</xsl:attribute>
			<xsl:attribute name="out">
				<xsl:value-of select="concat($apdoc_dir,$apdoc_iso_no,'.htm')"/>
			</xsl:attribute>
			<xsl:attribute name="style">
				<xsl:value-of select="'${STEPMODSTYLES}/publication/pub_frontpage.xsl'"/>
			</xsl:attribute>
			<xsl:attribute name="destdir">
				<xsl:value-of select="$apdoc_dir"/>
			</xsl:attribute>
			<param name="output_type" expression="HTM"/>
		</xsl:element>
		<xsl:element name="copy">
			<xsl:attribute name="todir">
				<xsl:value-of select="concat($apdoc_dir,'images')"/>
			</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="'${P1000DIR}/images'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>

		<!-\- MWD -\->
		<!-\- copy the resources -\->
		<!-\-<xsl:element name="copy">
			<xsl:attribute name="todir">
				<xsl:value-of select="concat($apdoc_dir,'data/resources')"/>
			</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="'${P1000DIR}/data/resources'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>-\->

		<!-\- copy the modules -\->
		<xsl:element name="copy">
			<xsl:attribute name="todir">
				<xsl:value-of select="concat($apdoc_dir,'data/modules')"/>
			</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="'${P1000DIR}/data/modules'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>

		<!-\- copy the application protocols -\->
		<xsl:element name="copy">
			<xsl:attribute name="todir">
				<xsl:value-of select="concat($apdoc_dir,'data/application_protocols/',@name)"/>
			</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="concat('${P1000DIR}/data/application_protocols/',@name)"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>

		<!-\- copy the application protocol abstracts -\->
		<!-\- RBN - changed to move as per request from ISO 
	 <xsl:element name="copy"> -\->
		<xsl:element name="move">
			<xsl:attribute name="file">
				<xsl:value-of
					select="concat('${P1000DIR}/data/application_protocols/',@name,'/sys/abstract.htm')"
				/>
			</xsl:attribute>
			<xsl:attribute name="tofile">
				<xsl:value-of
					select="concat($apdoc_dir,'abstracts/abstract_',$apdoc_xml/application_protocol/@part,'.htm')"
				/>
			</xsl:attribute>
		</xsl:element>

		<!-\- copy the application protocol express -\->
		<!-\- NOT YET IMPLEMENTED -\->
		<xsl:apply-templates select="." mode="copy_express">
			<xsl:with-param name="express_dir" select="concat($apdoc_dir,'express/')"/>
		</xsl:apply-templates>

		<xsl:element name="zip">
			<xsl:attribute name="zipfile">
				<xsl:value-of
					select="concat('${PUBDIR}/zip/iso10303_',$apdoc_xml/application_protocol/@part,'.zip')"
				/>
			</xsl:attribute>
			<xsl:attribute name="basedir">
				<xsl:value-of select="$apdoc_dir"/>
			</xsl:attribute>
			<xsl:attribute name="excludes">
				<xsl:value-of select="'**/*.zip'"/>
			</xsl:attribute>
			<xsl:attribute name="includes">
				<xsl:value-of select="'**'"/>
			</xsl:attribute>
		</xsl:element>
	</xsl:template>-->


	<!-- generate the target "publish_isomodules" HERE -->
	<xsl:template match="part1000.publication_index" mode="target_publish_isomodules">
		<xsl:text>
	 </xsl:text>
		<xsl:element name="target">
			<xsl:attribute name="name">publish_isomodules</xsl:attribute>
			<!-- MWD -->
			<!--<xsl:attribute name="depends">isoindex, resources, isomodules</xsl:attribute>-->
			<xsl:attribute name="depends">isoindex, isomodules</xsl:attribute>
			<xsl:attribute name="description">Copy HTML for modules listed in publication_index to
				publication directory</xsl:attribute>
			<!--<xsl:apply-templates select="//module" mode="target_publish_isomodules"/>
			<xsl:apply-templates select="//resource_docs" mode="target_publish_isoresdocs"/>
			<xsl:apply-templates select="//business_object_models" mode="target_publish_isobomdocs"/>-->
		</xsl:element>
	</xsl:template>




	<xsl:template match="module" mode="target_publish_isomodules">

		<xsl:variable name="module_file" select="concat('../../data/modules/',@name,'/module.xml')"/>
		<xsl:variable name="module_xml" select="document($module_file)"/>

		<!--<xsl:variable name="module_iso_no" select="concat('iso10303_',$module_xml/module/@part)"/>
		<xsl:variable name="module_dir" select="concat('${PUBDIR}/',$module_iso_no,'/')"/> ISO10303 -->

		<xsl:text>
	 </xsl:text>
		<xsl:comment> Publish module: <xsl:value-of select="@name"/>
		</xsl:comment>

		<!-- generate the publication record -->
		<xsl:apply-templates select="." mode="pub_record_style"/>

	</xsl:template>

	<xsl:template match="module" mode="target_mergeSMRL">
		<!-- added this so that we can debug if the files are not being deleted -->
		<xsl:element name="property">
			<xsl:attribute name="name">file.verbose</xsl:attribute>
			<xsl:attribute name="value">false</xsl:attribute>
		</xsl:element>
		<xsl:element name="delete">
			<xsl:attribute name="verbose">${file.verbose}</xsl:attribute>
			<xsl:attribute name="failonerror">false</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="concat('${part1000ModulesTarget}',@name)"/>
				</xsl:attribute>
				<xsl:attribute name="includes">**/*</xsl:attribute>
			</xsl:element>
		</xsl:element>
		<xsl:element name="copy">
			<xsl:attribute name="todir">
				<xsl:value-of select="concat('${part1000ModulesTarget}',@name)"/>
			</xsl:attribute>
			<xsl:attribute name="overwrite">true</xsl:attribute>
			<xsl:attribute name="verbose">${file.verbose}</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="concat('${P1000DIR}/data/modules/',@name)"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>

	</xsl:template>



	<xsl:template match="part1000.publication_index" mode="target_publish_isoresdocs">
		<xsl:text>
	 </xsl:text>
		<xsl:element name="target">
			<xsl:attribute name="name">publish_isoresdocs</xsl:attribute>
			<!-- MWD -->
			<!--<xsl:attribute name="depends">isoindex, resources, isoresdocs</xsl:attribute>-->
			<xsl:attribute name="depends">isoindex, isoresdocs</xsl:attribute>
			<xsl:attribute name="description">Copy HTML to publication directory</xsl:attribute>
			<xsl:apply-templates select="//resource_doc" mode="target_publish_isoresdocs"/>
		</xsl:element>
	</xsl:template>

	<!-- MWD START-->
	<xsl:template match="part1000.publication_index" mode="target_publish_isobomdocs">
		<xsl:text>
		</xsl:text>
		<xsl:element name="target">
			<xsl:attribute name="name">publish_isobomdocs</xsl:attribute>
			<xsl:attribute name="depends">isoindex, isobomdocs</xsl:attribute>
			<xsl:attribute name="description">Copy HTML to publication directory</xsl:attribute>
			<xsl:apply-templates select="//bom_doc" mode="target_publish_isobomdocs"/>
		</xsl:element>
	</xsl:template>
	<!-- MWD END-->

	<xsl:template match="resource_doc" mode="target_publish_isoresdocs">
		<xsl:variable name="resdoc_file"
			select="concat('../../data/resource_docs/',@name,'/resource.xml')"/>
		<xsl:variable name="resdoc_xml" select="document($resdoc_file)"/>

		<!--<xsl:variable name="resdoc_iso_no" select="concat('iso10303_',$resdoc_xml/resource/@part)"/> ISO10303 -->
		<!--<xsl:variable name="resdoc_dir" select="concat('${PUBDIR}/',$resdoc_iso_no,'/')"/> ISO10303 -->
		<!--<xsl:variable name="resdoc_express_dir"
			select="concat('${PUBDIR}/',$resdoc_iso_no,'/','inserts','/')"/> ISO10303 -->

		<!--<xsl:variable name="data_resdoc_dir"
			select="concat($resdoc_dir,'data/resource_docs/',@name,'/')"/> ISO10303 -->


		<xsl:variable name="part" select="$resdoc_xml/resource/@part"/>
		<xsl:variable name="status"
			select="translate(translate($resdoc_xml/resource/@status,$UPPER,$LOWER),'-','')"/>
		<xsl:variable name="wg" select="$resdoc_xml/resource/@sc4.working_group"/>
		<xsl:variable name="prefix" select="concat('part',$part,$status,'_wg',$wg,'n')"/>

		<xsl:variable name="wg.number.express" select="$resdoc_xml/resource/@wg.number.express"/>


		<xsl:text>
	 </xsl:text>
		<xsl:comment>Publish resource doc: <xsl:value-of select="@name"/>
		</xsl:comment>

		<!-- generate the publication record for the AP doc-->
		<xsl:apply-templates select="." mode="pub_record_style"/>

		<!-- the readme -->
		<!--<xsl:element name="xslt">
			<xsl:attribute name="in">
				<xsl:value-of select="concat('data/resource_docs/',@name,'/resource.xml')"/>
			</xsl:attribute>
			<xsl:attribute name="out">
				<xsl:value-of select="concat($resdoc_dir,$resdoc_iso_no,'_readme.txt')"/>
			</xsl:attribute>
			<xsl:attribute name="style">
				<xsl:value-of select="'${STEPMODSTYLES}/publication/pub_readme.xsl'"/>
			</xsl:attribute>
			<xsl:attribute name="destdir">
				<xsl:value-of select="$resdoc_dir"/>
			</xsl:attribute>
		</xsl:element> ISO10303 -->

		<!-- make sure that the CR/LF are windows for the readme -->
		<!--<xsl:element name="fixcrlf">
			<xsl:attribute name="srcdir">
				<xsl:value-of select="$resdoc_dir"/>
			</xsl:attribute>
			<xsl:attribute name="includes">
				<xsl:value-of select="concat($resdoc_iso_no,'_readme.txt')"/>
			</xsl:attribute>
			<xsl:attribute name="eol">
				<xsl:value-of select="'crlf'"/>
			</xsl:attribute>
		</xsl:element> ISO10303 -->

		<!-- the frontpage redirected to resource cover page -->
		<!--<xsl:element name="xslt">
			<xsl:attribute name="in">
				<xsl:value-of select="concat('data/resource_docs/',@name,'/resource.xml')"/>
			</xsl:attribute>
			<xsl:attribute name="out">
				<xsl:value-of select="concat($resdoc_dir,$resdoc_iso_no,'.htm')"/>
			</xsl:attribute>
			<xsl:attribute name="style">
				<xsl:value-of select="'${STEPMODSTYLES}/publication/pub_frontpage.xsl'"/>
			</xsl:attribute>
			<xsl:attribute name="destdir">
				<xsl:value-of select="$resdoc_dir"/>
			</xsl:attribute>
			<param name="output_type" expression="HTM"/>
			</xsl:element>
		<xsl:element name="copy">
			<xsl:attribute name="todir">
				<xsl:value-of select="concat($resdoc_dir,'images')"/>
			</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="'${P1000DIR}/images'"/>
				</xsl:attribute>
			</xsl:element>
			</xsl:element> ISO10303 -->

		<!-- MWD -->
		<!-- copy the resources -->
		<!--<xsl:element name="copy">
			<xsl:attribute name="todir">
				<xsl:value-of select="concat($resdoc_dir,'data/resources')"/>
			</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="'${P1000DIR}/data/resources'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>-->


		<!-- copy the resource_docs  abstracts -->
		<!-- RBN - changed to move as per request from ISO 
	 <xsl:element name="copy">
	   -->
		<!--<xsl:element name="move">
			<xsl:attribute name="file">
				<xsl:value-of
					select="concat('${P1000DIR}/data/resource_docs/',@name,'/sys/abstract.htm')"/>
			</xsl:attribute>
			<xsl:attribute name="tofile">
				<xsl:value-of
					select="concat($resdoc_dir,'abstracts/abstract_',$resdoc_xml/resource/@part,'.htm')"
				/>
			</xsl:attribute>
			</xsl:element>  ISO10303 -->



		<!-- copy the resource docs -->
		<!--<xsl:element name="copy">
			<xsl:attribute name="todir">
				<xsl:value-of select="concat($resdoc_dir,'data/resource_docs/',@name)"/>
			</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="concat('${P1000DIR}/data/resource_docs/',@name)"/>
				</xsl:attribute>
			</xsl:element>
			</xsl:element>  ISO10303 -->

		<xsl:apply-templates select="." mode="copy_express"/>


		<!-- cocatenate the resource doc  express -->


		<!-- MWD -->
		<!--<xsl:variable name="schemalist">
			<xsl:apply-templates select="$resdoc_xml//schema" mode="list">
				<xsl:with-param name="prefix" select="'data/resources/'"/>
				<xsl:with-param name="suffix" select="'.exp'"/>
				<xsl:with-param name="terminate" select="'NO'"/>
			</xsl:apply-templates>
		</xsl:variable>-->

		<xsl:variable name="express_file"
			select="concat('part',
						 $resdoc_xml/resource/@part,
						 $resdoc_xml/resource/@status, '_wg',
						 $resdoc_xml/resource/@sc4.working_group,'n',
						 $resdoc_xml/resource/@wg.number.express,
						 'express.exp')"/>


		<!--<xsl:variable name="express_dir">
			<xsl:value-of
				select="concat('${PUBDIR}','/iso10303_',$resdoc_xml/resource/@part,'/','inserts','/')"
			/>
			</xsl:variable>  ISO10303 -->


		<!--<xsl:element name="mkdir">
			<xsl:attribute name="dir">
				<xsl:value-of select="$express_dir"/>
			</xsl:attribute>
			</xsl:element>  ISO10303 -->

		<!-- MWD -->
		<!--<xsl:element name="concat">
			<xsl:attribute name="destfile">
				<xsl:value-of select="concat($data_resdoc_dir,'wg12n',$wg.number.express,'.exp')"/>
			</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="'.'"/>
				</xsl:attribute>
				<xsl:attribute name="includes">
					<xsl:value-of select="$schemalist"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>-->

		<!-- MWD -->
		<!--<xsl:element name="concat">
			<xsl:attribute name="destfile">
				<!-\-          <xsl:value-of select="concat('wg12n',$wg.number.express,'.exp')" /> -\->
				<xsl:value-of select="concat($express_dir,$express_file)"/>
			</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="'.'"/>
				</xsl:attribute>
				<xsl:attribute name="includes">
					<xsl:value-of select="$schemalist"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>-->


		<!--<xsl:element name="zip">
			<xsl:attribute name="zipfile">
				<xsl:value-of
					select="concat('${PUBDIR}/zip/iso10303_',$resdoc_xml/resource/@part,'.zip')"/>
			</xsl:attribute>
			<xsl:attribute name="basedir">
				<xsl:value-of select="$resdoc_dir"/>
			</xsl:attribute>
			<xsl:attribute name="excludes">
				<xsl:value-of select="'**/*.zip'"/>
			</xsl:attribute>
			<xsl:attribute name="includes">
				<xsl:value-of select="'**'"/>
			</xsl:attribute>
		</xsl:element>-->

		<!-- need express in zips, else why create it? -->

		<!--<xsl:element name="zip">
			<xsl:attribute name="zipfile">
				<xsl:value-of
					select="concat('${PUBDIR}/zip/iso10303_',$resdoc_xml/resource/@part,'inserts.zip')"
				/>
			</xsl:attribute>
			<xsl:attribute name="basedir">
				<xsl:value-of select="$resdoc_express_dir"/>
			</xsl:attribute>
			<xsl:attribute name="excludes">
				<xsl:value-of select="'**/*.zip'"/>
			</xsl:attribute>
			<xsl:attribute name="includes">
				<xsl:value-of select="'**'"/>
			</xsl:attribute>
		</xsl:element>-->
	</xsl:template>

	<xsl:template match="bom_doc" mode="target_publish_isobomdocs">
		<xsl:variable name="bomdoc_file"
			select="concat('../../data/business_object_models/',@name,'/business_object_model.xml')"/>
		<xsl:variable name="bomdoc_xml" select="document($bomdoc_file)"/>

		<!--<xsl:variable name="bomdoc_iso_no" select="concat('iso10303_',$bomdoc_xml/business_object_model/@part)"/>  ISO10303 -->
		<!--<xsl:variable name="bomdoc_dir" select="concat('${PUBDIR}/',$bomdoc_iso_no,'/')"/>  ISO10303 -->
		<!--<xsl:variable name="bomdoc_express_dir"
			select="concat('${PUBDIR}/',$bomdoc_iso_no,'/','inserts','/')"/> ISO10303 -->

		<!--<xsl:variable name="data_bomdoc_dir"
			select="concat($bomdoc_dir,'data/business_object_models/',@name,'/')"/>  ISO10303 -->


		<xsl:variable name="part" select="$bomdoc_xml/business_object_model/@part"/>
		<xsl:variable name="status"
			select="translate(translate($bomdoc_xml/business_object_model/@status,$UPPER,$LOWER),'-','')"/>
		<xsl:variable name="wg" select="$bomdoc_xml/business_object_model/@sc4.working_group"/>
		<xsl:variable name="prefix" select="concat('part',$part,$status,'_wg',$wg,'n')"/>

		<xsl:variable name="wg.number.express"
			select="$bomdoc_xml/business_object_model/@wg.number.express"/>


		<xsl:text>
		</xsl:text>
		<xsl:comment>Publish business object model: <xsl:value-of select="@name"/>
		</xsl:comment>

		<!-- generate the publication record for the B doc-->
		<xsl:apply-templates select="." mode="pub_record_style"/>

		<!-- the readme -->
		<!--<xsl:element name="xslt">
			<xsl:attribute name="in">
				<xsl:value-of select="concat('data/business_object_models/',@name,'/business_object_model.xml')"/>
			</xsl:attribute>
			<xsl:attribute name="out">
				<xsl:value-of select="concat($bomdoc_dir,$bomdoc_iso_no,'_readme.txt')"/>
			</xsl:attribute>
			<xsl:attribute name="style">
				<xsl:value-of select="'${STEPMODSTYLES}/publication/pub_readme.xsl'"/>
			</xsl:attribute>
			<xsl:attribute name="destdir">
				<xsl:value-of select="$bomdoc_dir"/>
			</xsl:attribute>
			</xsl:element> ISO10303 -->

		<!-- make sure that the CR/LF are windows for the readme -->
		<!--<xsl:element name="fixcrlf">
			<xsl:attribute name="srcdir">
				<xsl:value-of select="$bomdoc_dir"/>
			</xsl:attribute>
			<xsl:attribute name="includes">
				<xsl:value-of select="concat($bomdoc_iso_no,'_readme.txt')"/>
			</xsl:attribute>
			<xsl:attribute name="eol">
				<xsl:value-of select="'crlf'"/>
			</xsl:attribute>
			</xsl:element> ISO10303 -->

		<!-- the frontpage redirected to business object model cover page -->
		<!--<xsl:element name="xslt">
			<xsl:attribute name="in">
				<xsl:value-of select="concat('data/business_object_models/',@name,'/business_object_model.xml')"/>
			</xsl:attribute>
			<xsl:attribute name="out">
				<xsl:value-of select="concat($bomdoc_dir,$bomdoc_iso_no,'.htm')"/>
			</xsl:attribute>
			<xsl:attribute name="style">
				<xsl:value-of select="'${STEPMODSTYLES}/publication/pub_frontpage.xsl'"/>
			</xsl:attribute>
			<xsl:attribute name="destdir">
				<xsl:value-of select="$bomdoc_dir"/>
			</xsl:attribute>
			<param name="output_type" expression="HTM"/>
		</xsl:element>
		<xsl:element name="copy">
			<xsl:attribute name="todir">
				<xsl:value-of select="concat($bomdoc_dir,'images')"/>
			</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="'${P1000DIR}/images'"/>
				</xsl:attribute>
			</xsl:element>
			</xsl:element> -->



		<!--<xsl:element name="move">
			<xsl:attribute name="file">
				<xsl:value-of
					select="concat('${P1000DIR}/data/business_object_models/',@name,'/sys/abstract.htm')"/>
			</xsl:attribute>
			<xsl:attribute name="tofile">
				<xsl:value-of
					select="concat($bomdoc_dir,'abstracts/abstract_',$bomdoc_xml/business_object_model/@part,'.htm')"
				/>
			</xsl:attribute>
			</xsl:element> ISO10303 -->



		<!-- copy the bom docs -->
		<!--<xsl:element name="copy">
			<xsl:attribute name="todir">
				<xsl:value-of select="concat($bomdoc_dir,'data/business_object_models/',@name)"/>
			</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="concat('${P1000DIR}/data/business_object_models/',@name)"/>
				</xsl:attribute>
			</xsl:element>
			</xsl:element> ISO10303 -->

		<xsl:apply-templates select="." mode="copy_express"/>


		<!-- cocatenate the business object model doc  express -->


		<!-- MWD -->
		<!--<xsl:variable name="schemalist">
			<xsl:apply-templates select="$resdoc_xml//schema" mode="list">
			<xsl:with-param name="prefix" select="'data/resources/'"/>
			<xsl:with-param name="suffix" select="'.exp'"/>
			<xsl:with-param name="terminate" select="'NO'"/>
			</xsl:apply-templates>
			</xsl:variable>-->

		<xsl:variable name="express_file"
			select="concat('part',
			$bomdoc_xml/business_object_model/@part,
			$bomdoc_xml/business_object_model/@status, '_wg',
			$bomdoc_xml/business_object_model/@sc4.working_group,'n',
			$bomdoc_xml/business_object_model/@wg.number.express,
			'express.exp')"/>


		<!--<xsl:variable name="express_dir">
			<xsl:value-of
				select="concat('${PUBDIR}','/iso10303_',$bomdoc_xml/business_object_model/@part,'/','inserts','/')"
			/>
			</xsl:variable>  ISO10303 -->


		<!--<xsl:element name="mkdir">
			<xsl:attribute name="dir">
				<xsl:value-of select="$express_dir"/>
			</xsl:attribute>
			</xsl:element> ISO10303 -->

		<!-- MWD -->
		<!--<xsl:element name="concat">
			<xsl:attribute name="destfile">
			<xsl:value-of select="concat($data_resdoc_dir,'wg12n',$wg.number.express,'.exp')"/>
			</xsl:attribute>
			<xsl:element name="fileset">
			<xsl:attribute name="dir">
			<xsl:value-of select="'.'"/>
			</xsl:attribute>
			<xsl:attribute name="includes">
			<xsl:value-of select="$schemalist"/>
			</xsl:attribute>
			</xsl:element>
			</xsl:element>-->

		<!-- MWD -->
		<!--<xsl:element name="concat">
			<xsl:attribute name="destfile">
			<!-\-          <xsl:value-of select="concat('wg12n',$wg.number.express,'.exp')" /> -\->
			<xsl:value-of select="concat($express_dir,$express_file)"/>
			</xsl:attribute>
			<xsl:element name="fileset">
			<xsl:attribute name="dir">
			<xsl:value-of select="'.'"/>
			</xsl:attribute>
			<xsl:attribute name="includes">
			<xsl:value-of select="$schemalist"/>
			</xsl:attribute>
			</xsl:element>
			</xsl:element>-->


		<!--<xsl:element name="zip">
			<xsl:attribute name="zipfile">
				<xsl:value-of
					select="concat('${PUBDIR}/zip/iso10303_',$bomdoc_xml/business_object_model/@part,'.zip')"/>
			</xsl:attribute>
			<xsl:attribute name="basedir">
				<xsl:value-of select="$bomdoc_dir"/>
			</xsl:attribute>
			<xsl:attribute name="excludes">
				<xsl:value-of select="'**/*.zip'"/>
			</xsl:attribute>
			<xsl:attribute name="includes">
				<xsl:value-of select="'**'"/>
			</xsl:attribute>
		</xsl:element>-->

		<!-- need express in zips, else why create it? -->

		<!--<xsl:element name="zip">
			<xsl:attribute name="zipfile">
				<xsl:value-of
					select="concat('${PUBDIR}/zip/iso10303_',$bomdoc_xml/business_object_model/@part,'inserts.zip')"
				/>
			</xsl:attribute>
			<xsl:attribute name="basedir">
				<xsl:value-of select="$bomdoc_express_dir"/>
			</xsl:attribute>
			<xsl:attribute name="excludes">
				<xsl:value-of select="'**/*.zip'"/>
			</xsl:attribute>
			<xsl:attribute name="includes">
				<xsl:value-of select="'**'"/>
			</xsl:attribute>
		</xsl:element>-->
	</xsl:template>


	<!-- generate the target "all" -->
	<xsl:template match="part1000.publication_index" mode="target_all">
		<xsl:text>
		</xsl:text>
		<xsl:if test="./modules/module"/>
		<xsl:variable name="target1">
			<xsl:choose>
				<xsl:when
					test="./modules/module and ./resource_docs/resource_doc and ./business_object_models/bom_doc"
					> normref_check bibliography_check modules_check wgn_summary
						<xsl:apply-templates select="./resource_docs" mode="target_all"/>
					<xsl:apply-templates select="./modules" mode="target_all"/>
					<xsl:apply-templates select="./business_object_models" mode="target_all"/>
				</xsl:when>
				<xsl:when test="./modules/module and ./resource_docs/resource_doc"> normref_check
					bibliography_check modules_check wgn_summary <xsl:apply-templates
						select="./resource_docs" mode="target_all"/>
					<xsl:apply-templates select="./modules" mode="target_all"/>
				</xsl:when>
				<xsl:when test="./modules/module and ./business_object_models/bom_doc">
					normref_check bibliography_check modules_check wgn_summary <xsl:apply-templates
						select="./modules" mode="target_all"/>
					<xsl:apply-templates select="./business_object_models" mode="target_all"/>
				</xsl:when>
				<xsl:when test="./modules/module"> normref_check bibliography_check modules_check
					wgn_summary <xsl:apply-templates select="./modules" mode="target_all"/>
				</xsl:when>
				<xsl:when test="./resource_docs/resource_doc and ./business_object_models/bom_doc">
					normref_check bibliography_check wgn_summary <xsl:apply-templates
						select="./resource_docs" mode="target_all"/>
					<xsl:apply-templates select="./business_object_models" mode="target_all"/>
				</xsl:when>
				<xsl:when test="./resource_docs/resource_doc"> normref_check bibliography_check
					wgn_summary <xsl:apply-templates select="./resource_docs" mode="target_all"/>
				</xsl:when>
				<xsl:when test="./business_object_models/bom_doc"> normref_check bibliography_check
					wgn_summary <xsl:apply-templates select="./business_object_models"
						mode="target_all"/>
				</xsl:when>
			</xsl:choose>


		</xsl:variable>
		<xsl:variable name="target">
			<xsl:call-template name="output_comma_separated_list">
				<xsl:with-param name="string" select="normalize-space($target1)"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:element name="target">
			<xsl:attribute name="name">all</xsl:attribute>
			<xsl:attribute name="depends"><xsl:value-of select="$target"/>, zip</xsl:attribute>

			<xsl:attribute name="description">Generate the HTML for ISO publication</xsl:attribute>
		</xsl:element>
	</xsl:template>

	<!-- generate the target "all" -->
	<xsl:template match="part1000.publication_index" mode="target_mergeSMRL">
		<xsl:text>
		</xsl:text>
		<xsl:element name="target">
			<xsl:attribute name="name">mergeSMRL</xsl:attribute>
			<!-- MWD -->
			<!--<xsl:attribute name="depends">resources, isomodules</xsl:attribute>-->
			<xsl:attribute name="depends">isomodules</xsl:attribute>
			<xsl:attribute name="description">Merge the published modules and resources into
				part1000</xsl:attribute>

			<xsl:element name="property">
				<xsl:attribute name="name">part1000target</xsl:attribute>
				<xsl:attribute name="value">../SMRL</xsl:attribute>
			</xsl:element>
			<xsl:element name="property">
				<xsl:attribute name="name">part1000ModulesTarget</xsl:attribute>
				<xsl:attribute name="value">${part1000target}/data/modules/</xsl:attribute>
			</xsl:element>
			<!-- MWD -->
			<!--<xsl:element name="property">
				<xsl:attribute name="name">part1000ResourcesTarget</xsl:attribute>
				<xsl:attribute name="value">${part1000target}/data/resources/</xsl:attribute>
			</xsl:element>-->
			<xsl:apply-templates select="modules/module" mode="target_mergeSMRL"/>
			<xsl:element name="xslt">
				<xsl:attribute name="in">
					<xsl:value-of select="'${PUBSRCDIR}/publication_index.xml'"/>
				</xsl:attribute>
				<xsl:attribute name="out">
					<xsl:value-of select="concat('${part1000target}/SMRLCR',@name,'index.htm')"/>
				</xsl:attribute>
				<xsl:attribute name="destdir">
					<xsl:value-of select="'${part1000target}'"/>
				</xsl:attribute>
				<xsl:attribute name="extension">
					<xsl:value-of select="'.htm'"/>
				</xsl:attribute>
				<xsl:attribute name="force">
					<xsl:value-of select="'yes'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${PUBSRCSTYLES}/SMRLCRindex.xsl'"/>
				</xsl:attribute>
				<param name="output_type" expression="HTM"/>
			</xsl:element>

			<!-- MWD -->
			<!--<xsl:element name="copy">
				<xsl:attribute name="todir">${part1000ResourcesTarget}</xsl:attribute>
				<xsl:element name="fileset">
					<xsl:attribute name="dir">${P1000DIR}/data/resources/</xsl:attribute>
				</xsl:element>
			</xsl:element>-->
		</xsl:element>
	</xsl:template>


	<xsl:template match="resource_docs" mode="target_all"> publish_isoresdocs </xsl:template>

	<xsl:template match="modules" mode="target_all"> publish_isomodules </xsl:template>

	<!--<xsl:template match="application_protocols" mode="target_all"> publish_isoapdocs </xsl:template>-->
	<xsl:template match="business_object_models" mode="target_all"> publish_isobomdocs </xsl:template>

	<!-- generate the target "isodepmodules_publication_record" -->
	<xsl:template match="part1000.publication_index" mode="target_isodepmodules_publication_record">
		<xsl:text>
	 </xsl:text>
		<xsl:element name="target">
			<xsl:attribute name="name">isodepmodules_publication_record</xsl:attribute>
			<xsl:attribute name="depends">init</xsl:attribute>
			<xsl:apply-templates select="$mim_modules_node_set/module" mode="pub_record_style"/>
		</xsl:element>
	</xsl:template>

	<!--<xsl:template match="ap_doc" mode="copy_express">
		<xsl:param name="express_dir"/>

		<!-\- the readme -\->
		<xsl:element name="xslt">
			<xsl:attribute name="in">
				<xsl:value-of
					select="concat('data/application_protocols/',@name,'/application_protocol.xml')"
				/>
			</xsl:attribute>
			<xsl:attribute name="out">
				<xsl:value-of select="concat($express_dir,'readme.txt')"/>
			</xsl:attribute>
			<xsl:attribute name="style">
				<xsl:value-of select="'${STEPMODSTYLES}/publication/pub_express_readme.xsl'"/>
			</xsl:attribute>
			<xsl:attribute name="destdir">
				<xsl:value-of select="$express_dir"/>
			</xsl:attribute>
		</xsl:element>

		<!-\- make sure that the CR/LF are windows for the readme -\->
		<xsl:element name="fixcrlf">
			<xsl:attribute name="srcdir">
				<xsl:value-of select="$express_dir"/>
			</xsl:attribute>
			<xsl:attribute name="includes">
				<xsl:value-of select="'readme.txt'"/>
			</xsl:attribute>
			<xsl:attribute name="eol">
				<xsl:value-of select="'crlf'"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:apply-templates select="$mim_modules_node_set/module" mode="copy_express">
			<xsl:with-param name="express_dir" select="$express_dir"/>
		</xsl:apply-templates>
		<xsl:apply-templates select="../modules/module" mode="copy_express">
			<xsl:with-param name="express_dir" select="$express_dir"/>
		</xsl:apply-templates>

		<!-\- copy the resources -\->
		<!-\- MWD -\->
		<!-\-<xsl:element name="copy">
			<xsl:attribute name="todir">
				<xsl:value-of select="$express_dir"/>
			</xsl:attribute>
			<xsl:attribute name="flatten">
				<xsl:value-of select="'true'"/>
			</xsl:attribute>
			<xsl:element name="fileset">
				<xsl:attribute name="dir">
					<xsl:value-of select="'${P1000DIR}/data/resources'"/>
				</xsl:attribute>
				<xsl:element name="include">
					<xsl:attribute name="name">
						<xsl:value-of select="'**/*.exp'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>
		</xsl:element>-\->
	</xsl:template>-->

	<xsl:template match="module" mode="copy_express">
		<xsl:param name="express_dir"/>
		<xsl:variable name="module" select="@name"/>
		<xsl:variable name="module_xml"
			select="document(concat('../../data/modules/',$module,'/module.xml'))"/>
		<!--<xsl:variable name="module_iso_no" select="concat('iso10303_',$module_xml/module/@part)"/>-->
		<xsl:variable name="express_dir1">
			<xsl:choose>
				<xsl:when test="$express_dir">
					<xsl:value-of select="$express_dir"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="'${P1000DIR}/express/'"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>

		<xsl:variable name="part" select="$module_xml/module/@part"/>
		<xsl:variable name="status"
			select="translate(translate($module_xml/module/@status,$UPPER,$LOWER),'-','')"/>
		<xsl:variable name="wg" select="$module_xml/module/@sc4.working_group"/>
		<xsl:variable name="prefix" select="concat('part',$part,$status,'_wg',$wg,'n')"/>

		<xsl:variable name="wg.number.arm" select="$module_xml/module/@wg.number.arm"/>
		<xsl:element name="copy">
			<xsl:attribute name="file">
				<xsl:value-of select="concat('data/modules/',@name,'/arm.exp')"/>
			</xsl:attribute>
			<xsl:attribute name="tofile">
				<xsl:value-of select="concat($express_dir1,'arm/',@name,'_arm.exp')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:if test="$module_xml/module/arm_lf">
			<xsl:variable name="wg.number.arm_lf" select="$module_xml/module/@wg.number.arm_lf"/>
			<xsl:element name="copy">
				<xsl:attribute name="file">
					<xsl:value-of select="concat('data/modules/',@name,'/arm_lf.exp')"/>
				</xsl:attribute>
				<xsl:attribute name="tofile">
					<xsl:value-of select="concat($express_dir1,'arm/',@name,'_arm_lf.exp')"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:if>

		<xsl:variable name="wg.number.mim" select="$module_xml/module/@wg.number.mim"/>
		<xsl:element name="copy">
			<xsl:attribute name="file">
				<xsl:value-of select="concat('data/modules/',@name,'/mim.exp')"/>
			</xsl:attribute>
			<xsl:attribute name="tofile">
				<xsl:value-of select="concat($express_dir1,'mim/',@name,'_mim.exp')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:if test="$module_xml/module/mim_lf">
			<xsl:variable name="wg.number.mim_lf" select="$module_xml/module/@wg.number.mim_lf"/>
			<xsl:element name="copy">
				<xsl:attribute name="file">
					<xsl:value-of select="concat('data/modules/',@name,'/mim_lf.exp')"/>
				</xsl:attribute>
				<xsl:attribute name="tofile">
					<xsl:value-of select="concat($express_dir1,'mim/',@name,'_mim_lf.exp')"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:if>
	</xsl:template>


	<xsl:template match="schema" mode="list">
		<xsl:param name="prefix"/>
		<xsl:param name="suffix"/>
		<xsl:param name="terminate" select="'YES'"/>
		<!-- the name of the resource directory should be in lower case -->
		<xsl:variable name="lname" select="translate(./@name,$UPPER,$LOWER)"/>
		<!-- workaround - only output first occurrence of a module -->
		<xsl:if test="not(./preceding-sibling::*[@name = $lname])">
			<xsl:choose>
				<xsl:when test="$terminate='YES'">
					<xsl:choose>
						<xsl:when test="position()=last()">
							<xsl:value-of select="concat($prefix,$lname,'/',$lname,$suffix)"/>
							<xsl:text/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="concat($prefix,$lname,'/',$lname,$suffix)"
							/>,<xsl:text/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="concat($prefix,$lname,'/',$lname,$suffix)"/>,<xsl:text/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
	</xsl:template>

	<xsl:template match="resource|module|application_protocol|resource_doc|bom_doc" mode="list">
		<xsl:param name="prefix" select="''"/>
		<xsl:param name="suffix" select="''"/>
		<xsl:param name="terminate" select="'YES'"/>
		<!-- the name of the resource directory should be in lower case -->
		<xsl:variable name="lname" select="translate(./@name,$UPPER,$LOWER)"/>
		<!-- workaround - only output first occurrence of a module -->
		<xsl:if test="not(./preceding-sibling::*[@name = $lname])">
			<xsl:choose>
				<xsl:when test="$terminate='YES'">
					<xsl:choose>
						<xsl:when test="position()=last()">
							<xsl:value-of select="concat($prefix,$lname,$suffix)"/>
							<xsl:text/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="concat($prefix,$lname,$suffix)"/>,<xsl:text/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="concat($prefix,$lname,$suffix)"/>,<xsl:text/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
	</xsl:template>


	<xsl:template match="module" mode="long_form">
		<xsl:param name="prefix"/>
		<xsl:param name="suffix"/>
		<xsl:param name="terminate" select="'YES'"/>
		<!-- need a variable for xpath -->
		<xsl:variable name="lname" select="translate(./@name,$UPPER,$LOWER)"/>
		<xsl:variable name="module_xml"
			select="document(concat('../../data/modules/',@name,'/module.xml'))"/>
		<!-- only want modules that declare a long form -->
		<!-- workaround - only output first occurrence of a module -->
		<xsl:if test="$module_xml/module/arm_lf and not(./preceding-sibling::*[@name = $lname])">
			<xsl:choose>
				<xsl:when test="$terminate='YES'">
					<xsl:choose>
						<xsl:when test="position()=last()">
							<xsl:value-of select="concat($prefix,@name,$suffix)"/>
							<xsl:text/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="concat($prefix,@name,$suffix)"/>,<xsl:text/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="concat($prefix,@name,$suffix)"/>,<xsl:text/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
	</xsl:template>


	<xsl:template match="modules" mode="present"> 1 </xsl:template>

	<xsl:template match="resource_docs" mode="present"> 2 </xsl:template>

	<xsl:template match="application_protocols" mode="present"> 3 </xsl:template>

	<xsl:template match="part1000.publication_index" mode="check_single">
		<xsl:variable name="present1">
			<xsl:apply-templates select="modules" mode="present"/>
			<xsl:apply-templates select="resource_docs" mode="present"/>
			<!--<xsl:apply-templates select="application_protocols" mode="present"/>-->
		</xsl:variable>
		<xsl:variable name="present" select="normalize-space($present1)"/>
		<xsl:choose>
			<xsl:when test="string-length($present)>1">
				<xsl:message> ************************************************************ NOTE
					Should process business object models or modules or resources or any mixture thereof
					************************************************************ </xsl:message>
				<xsl:value-of select="'false'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'true'"/>
			</xsl:otherwise>
		</xsl:choose>

	</xsl:template>

	<xsl:template match="part1000.publication_index" mode="check">
		<xsl:variable name="result">
			<xsl:apply-templates select="modules/module" mode="check"/>
			<xsl:apply-templates select="resource_docs/resource_doc" mode="check"/>
			<!-- MWD -->
			<!--<xsl:apply-templates select="application_protocols/ap_doc" mode="check"/>-->
		</xsl:variable>
		<xsl:value-of select="normalize-space($result)"/>
	</xsl:template>

	<!-- run a check on each module listed in publication_index -->
	<xsl:template match="module" mode="check">
		<xsl:variable name="module_ok">
			<xsl:call-template name="check_module_exists">
				<xsl:with-param name="module" select="@name"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$module_ok!='true'">
				<xsl:message> ************************************************************ ERROR 1
						<xsl:value-of select="$module_ok"/>
					************************************************************ </xsl:message>
				<xsl:value-of select="'false'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'true'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>


	<!-- run a check on each resource doc listed in publication_index -->
	<xsl:template match="resource_doc" mode="check">
		<xsl:variable name="resdoc_ok">
			<xsl:call-template name="check_resdoc_exists">
				<xsl:with-param name="resdoc" select="@name"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$resdoc_ok!='true'">
				<xsl:message> ************************************************************ ERROR 1
						<xsl:value-of select="$resdoc_ok"/>
					************************************************************ </xsl:message>
				<xsl:value-of select="'false'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'true'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>


	<!-- run a check on each application protocol listed in publication_index -->
	<!--<xsl:template match="ap_doc" mode="check">
		<xsl:variable name="apdoc_ok">
			<xsl:call-template name="check_application_protocol_exists">
				<xsl:with-param name="application_protocol" select="@name"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$apdoc_ok!='true'">
				<xsl:message> ************************************************************ ERROR 1
						<xsl:value-of select="$apdoc_ok"/>
					************************************************************ </xsl:message>
				<xsl:value-of select="'false'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'true'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>-->



	<!-- given the name of a module, check to see whether it has been
		included in the repository_index.xml file
		Return true or if not found, an error message.
		-->
	<xsl:template name="check_module_exists">
		<xsl:param name="module"/>

		<xsl:variable name="module_name">
			<xsl:call-template name="module_name">
				<xsl:with-param name="module" select="$module"/>
			</xsl:call-template>
		</xsl:variable>

		<xsl:variable name="ret_val">
			<xsl:choose>
				<xsl:when
					test="document('../../repository_index.xml')/repository_index/modules/module[@name=$module_name]">
					<xsl:value-of select="'true'"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of
						select="concat(' The module ', $module_name,
					   ' is not identified as a module in repository_index.xml')"
					/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:value-of select="$ret_val"/>
	</xsl:template>

	<!-- return a node set of all the dependent resources for a resource doc,
 possibly excluding any that are explicitly part of the ballot -->
	<xsl:template name="get_resource_schema_node_set">
		<xsl:variable name="resource_docs">
			<xsl:for-each select="/part1000.publication_index/resource_docs/resource_doc">
				<xsl:variable name="selected_res" select="@name"/>
				<xsl:variable name="res_file"
					select="concat('../../data/resource_docs/',$selected_res,'/resource.xml')"/>
				<xsl:variable name="res_node" select="document($res_file)"/>
				<xsl:for-each select="$res_node/resource/schema">
					<xsl:value-of select="concat(' ',@name,' ')"/>
				</xsl:for-each>
			</xsl:for-each>
		</xsl:variable>

		<xsl:variable name="todo_schema_list" select="string($resource_docs)"/>

		<xsl:variable name="mim_schemas"> " <xsl:call-template name="depends-on-recurse-mim-x">
				<xsl:with-param name="todo" select="$todo_schema_list"/>
				<xsl:with-param name="done" select="' '"/>
			</xsl:call-template>
		</xsl:variable>

		<xsl:variable name="schemas-node-set" select="exslt:node-set($mim_schemas)"/>

		<!-- MWD -->
		<!--<xsl:for-each select="$schemas-node-set//x">
			<xsl:sort/>
			<xsl:variable name="resource"
				select="substring-after(substring-before(.,'.xml'),'../../data/resources/')"/>
			<resource>
				<xsl:attribute name="name">
					<xsl:value-of select="$resource"/>
				</xsl:attribute>
			</resource>
		</xsl:for-each>-->

	</xsl:template>

	<!-- return a node set of all the dependent modules and resources,
	  excluding any that are explicitly part of the ballot -->
	<xsl:template name="get_mod_node_set">
		<xsl:variable name="modules">
			<xsl:for-each select="/part1000.publication_index/modules/module">
				<xsl:variable name="mod_schema">
					<xsl:call-template name="schema_name">
						<xsl:with-param name="module_name" select="@name"/>
						<xsl:with-param name="arm_mim" select="'mim'"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(' ',$mod_schema,' ')"/>
			</xsl:for-each>
		</xsl:variable>

		<!--<xsl:variable name="aps">
			<xsl:for-each select="/part1000.publication_index/application_protocols/ap_doc">
				<xsl:variable name="selected_ap" select="@name"/>
				<xsl:variable name="ap_file"
					select="concat('../../data/application_protocols/',$selected_ap,'/application_protocol.xml')"/>
				<xsl:variable name="ap_node" select="document($ap_file)"/>
				<xsl:variable name="ap_top_module"
					select="$ap_node/application_protocol/@module_name"/>
				<xsl:variable name="mod_schema">
					<xsl:call-template name="schema_name">
						<xsl:with-param name="module_name" select="$ap_top_module"/>
						<xsl:with-param name="arm_mim" select="'mim'"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(' ',$mod_schema,' ')"/>
			</xsl:for-each>
		</xsl:variable>-->

		<xsl:variable name="resource_docs">
			<xsl:for-each select="/part1000.publication_index/resource_docs/resource_doc">
				<xsl:variable name="selected_res" select="@name"/>
				<xsl:variable name="res_file"
					select="concat('../../data/resource_docs/',$selected_res,'/resource.xml')"/>
				<xsl:variable name="res_node" select="document($res_file)"/>
				<xsl:for-each select="$res_node/resource/schema">
					<xsl:value-of select="concat(' ',@name,' ')"/>
				</xsl:for-each>
			</xsl:for-each>
		</xsl:variable>

		<!--<xsl:variable name="todo_schema_list"
			select="concat(string($aps),string($modules),string($resource_docs))"/>

		<xsl:variable name="mim_schemas">
			<xsl:call-template name="depends-on-recurse-mim-x">
				<xsl:with-param name="todo" select="$todo_schema_list"/>
				<xsl:with-param name="done" select="' '"/>
			</xsl:call-template>
		</xsl:variable>-->

		<!--<xsl:variable name="schemas-node-set" select="exslt:node-set($mim_schemas)"/>-->

		<!--
  <xsl:variable name="schemas-done">
    <xsl:for-each select="$schemas-node-set//x">
      <xsl:value-of 
        select="concat(' ',substring-before(substring-after(substring-after(.,'../../data/'),'/'),'/'),' ')"/>
    </xsl:for-each>
  </xsl:variable> -->


		<!-- iterate through all mim schemas extracting the express_ref from the
       intro, arm, mim and extracting the schema name 
  <xsl:for-each select="$schemas-node-set//x">
    <xsl:if test="contains(.,'/mim.xml')">
      <xsl:variable name="module_dir" select="concat(substring-before(.,'/mim.xml'),'/')"/>
      <xsl:variable name="mim_xml" select="document(.)"/>
      <xsl:message>{{<xsl:value-of select="$mim_xml/express/schema/@name"/>}}</xsl:message>
      <xsl:message> 2{{<xsl:apply-templates select="$mim_xml//express_ref" mode="schema_name"/>}}</xsl:message>
      <xsl:if test="$mim_xml/express/@description.file">
        <xsl:variable name="mim_descriptions"
          select="concat($module_dir,$mim_xml/express/@description.file)"/>
        <xsl:message>3{{<xsl:apply-templates select="document($mim_descriptions)//express_ref" mode="schema_name"/>}}</xsl:message>
      </xsl:if>
    </xsl:if>    
  </xsl:for-each> -->

		<!--<xsl:for-each select="$schemas-node-set//x">
			<xsl:sort/>
			<xsl:choose>
				<xsl:when test="substring-before(.,'/mim.xml')">
					<xsl:variable name="module"
						select="substring-after(substring-before(.,'/mim'),'modules/')"/>
					<xsl:variable name="module_ok">
						<xsl:call-template name="check_module_exists">
							<xsl:with-param name="module" select="$module"/>
						</xsl:call-template>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="$module_ok='true'">
							<xsl:variable name="mod_schema">
								<xsl:call-template name="schema_name">
									<xsl:with-param name="module_name" select="$module"/>
									<xsl:with-param name="arm_mim" select="'mim'"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:if test="not(contains($modules,concat(' ',$mod_schema,' ')))">
								<module>
									<xsl:attribute name="name">
										<xsl:value-of select="$module"/>
									</xsl:attribute>
								</module>
							</xsl:if>
						</xsl:when>
						<xsl:otherwise>
							<error>
								<xsl:value-of select="$module"/>
							</error>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>-->
		<!-- MWD -->
		<!--<xsl:otherwise>
					<xsl:variable name="resource"
						select="substring-after(substring-before(.,'.xml'),'../../data/resources/')"/>
					<resource>
						<xsl:attribute name="name">
							<xsl:value-of select="$resource"/>
						</xsl:attribute>
					</resource>
				</xsl:otherwise>
				</xsl:choose>
				</xsl:for-each>-->

	</xsl:template>


	<xsl:template name="depends-on-recurse-mim-x">
		<xsl:param name="todo" select="' '"/>
		<xsl:param name="done"/>
		<!--
       For each interfaced schema:
       Check if not already done
       Otherwise output and add to todo
       -->
		<xsl:variable name="this-schema"
			select="substring-before(concat(normalize-space($todo),' '),' ')"/>

		<xsl:if test="$this-schema">

			<!-- open up the relevant schema  - which can be a resource or a mim schema -->
			<xsl:variable name="file_name">
				<xsl:choose>
					<xsl:when test="substring-before($this-schema,'_mim')">
						<xsl:value-of
							select="concat('../../data/modules/',
							substring-before(translate($this-schema,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),
							'_mim'),
							'/mim.xml')"
						/>
					</xsl:when>
					<!-- MWD -->
					<!--<xsl:when test="substring-before($this-schema,'_schema')">
						<xsl:value-of
							select="concat('../../data/resources/',$this-schema,'/',$this-schema,'.xml')"
						/>
					</xsl:when>
					<xsl:when test="starts-with($this-schema,'aic_')">
						<xsl:value-of
							select="concat('../../data/resources/',$this-schema,'/',$this-schema,'.xml')"
						/>
						</xsl:when>-->
					<xsl:when test="substring-before($this-schema,'_arm')"> BAD SCHEMA name !!!
							{<xsl:value-of select="$this-schema"/>} </xsl:when>
					<!-- MWD -->
					<!--<xsl:otherwise>
						<!-\- assume that it is a resource -\->
						<xsl:message> Found <xsl:value-of select="$this-schema"/> assumed a
							resource. </xsl:message>
						<xsl:value-of
							select="concat('../../data/resources/',$this-schema,'/',$this-schema,'.xml')"
						/>
					</xsl:otherwise>-->
				</xsl:choose>
			</xsl:variable>

			<xsl:if test="not(contains($done,concat(' ',$this-schema,' ')))">
				<x>
					<xsl:value-of
						select="translate($file_name,'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
      'abcdefghijklmnopqrstuvwxyz')"
					/>
				</x>
			</xsl:if>

			<xsl:variable name="mim-node" select="document($file_name)/express"/>


			<!-- get the list of schemas for this level that have not already been done -->

			<xsl:variable name="my-kids">
				<xsl:if test="not(contains($done,concat(' ',$this-schema,' ')))">
					<xsl:apply-templates select="$mim-node//interface" mode="interface-schemas">
						<xsl:with-param name="done" select="$done"/>
					</xsl:apply-templates>

					<!-- only process mims and search for express_refs-->
					<xsl:if test="substring-before($this-schema,'_mim')">
						<xsl:variable name="module_dir"
							select="concat('../../data/modules/',translate(substring-before($this-schema,'_mim'),'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'/')"/>

						<!-- get the express refs from the mim -->
						<xsl:apply-templates select="$mim-node//express_ref|$mim-node//module_ref"
							mode="schema_name">
							<xsl:with-param name="done" select="$done"/>
						</xsl:apply-templates>
						<xsl:if test="$mim-node/@description.file">
							<xsl:variable name="mim_descriptions"
								select="document(concat($module_dir,$mim-node/@description.file))"/>

							<xsl:apply-templates
								select="$mim_descriptions//express_ref|$mim_descriptions//module_ref"
								mode="schema_name">
								<xsl:with-param name="done" select="$done"/>
							</xsl:apply-templates>
						</xsl:if>

						<!-- get the express refs from the arm -->
						<xsl:variable name="arm-node"
							select="document(concat($module_dir,'arm.xml'))/express"/>
						<xsl:apply-templates select="$arm-node//express_ref|$arm-node//module_ref"
							mode="schema_name">
							<xsl:with-param name="done" select="$done"/>
						</xsl:apply-templates>
						<xsl:if test="$arm-node/@description.file">
							<xsl:variable name="arm_descriptions"
								select="document(concat($module_dir,$arm-node/@description.file))"/>
							<xsl:apply-templates
								select="$arm_descriptions//express_ref|$arm_descriptions//module_ref"
								mode="schema_name">
								<xsl:with-param name="done" select="$done"/>
							</xsl:apply-templates>
						</xsl:if>

						<!-- get the express refs from the module -->
						<xsl:variable name="module-node"
							select="document(concat($module_dir,'module.xml'))"/>
						<xsl:apply-templates
							select="$module-node//express_ref|$module-node//module_ref"
							mode="schema_name">
							<xsl:with-param name="done" select="$done"/>
						</xsl:apply-templates>
					</xsl:if>
				</xsl:if>
			</xsl:variable>

			<xsl:variable name="after"
				select="normalize-space(concat(substring-after($todo, $this-schema),$my-kids))"/>

			<xsl:if test="$after">
				<xsl:call-template name="depends-on-recurse-mim-x">
					<xsl:with-param name="todo" select="$after"/>
					<xsl:with-param name="done" select="concat($done,' ',$this-schema,' ')"/>
				</xsl:call-template>
			</xsl:if>

		</xsl:if>

	</xsl:template>

	<xsl:template match="interface" mode="interface-schemas">
		<xsl:param name="done"/>
		<xsl:variable name="schema" select="concat(' ',@schema,' ')"/>
		<xsl:if test="not(contains($done,$schema))">
			<xsl:value-of select="$schema"/>
		</xsl:if>
	</xsl:template>

	<xsl:template match="module_ref" mode="schema_name">
		<xsl:variable name="schema"
			select="concat(' ',normalize-space(substring-before(@linkend,':')),'_mim ')"/>
		<!--
  <xsl:message>
    <xsl:variable name="root" select="/*"/>
    <xsl:choose>
      <xsl:when test="name($root)='ext_descriptions'">
        <xsl:value-of select="concat('module_ref:',name($root),':',$root/@module_directory,':',$root/@schema_file,':',$schema)"/>
      </xsl:when>
      <xsl:when test="name($root)='module'">
        <xsl:value-of select="concat('module_ref:',name($root),':',$root/@name,':',$schema)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="concat('module_ref:',name($root),':',$schema)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:message> -->
		<xsl:value-of select="$schema"/>
	</xsl:template>

	<xsl:template match="express_ref" mode="schema_name">
		<xsl:param name="done"/>
		<xsl:variable name="schema"
			select="concat(' ',substring-before(substring-after(substring-after(@linkend,':'),':'),'.'),' ')"/>
		<xsl:variable name="schema1">
			<xsl:choose>
				<xsl:when test="contains($schema,'_arm ')">
					<xsl:value-of select="concat(substring-before($schema,'_arm '),'_mim ')"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="$schema"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:if test="not(contains($done,$schema1))">
			<!--
    <xsl:message>
      <xsl:variable name="root" select="/*"/>
      <xsl:choose>
        <xsl:when test="name($root)='ext_descriptions'">
          <xsl:value-of select="concat('express_ref:',name($root),':',$root/@module_directory,':',$root/@schema_file,':',$schema1)"/>
        </xsl:when>
        <xsl:when test="name($root)='module'">
          <xsl:value-of select="concat('express_ref:',name($root),':',$root/@name,':',$schema1)"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="concat('express_ref:',name($root),':',$schema1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:message> -->
			<xsl:value-of select="$schema1"/>
		</xsl:if>
	</xsl:template>

	<!-- Generates the style task for generating the publication record for a
     module -->
	<xsl:template match="module" mode="pub_record_style">
		<xsl:variable name="module_file" select="concat('../../data/modules/',@name,'/module.xml')"/>
		<xsl:variable name="module_xml" select="document($module_file)"/>
		<xsl:variable name="CVS_dir_dot_entry" select="concat('CVS_dir_dot_entry_',@name)"/>
		<xsl:variable name="CVS_dir_dvlp_entry" select="concat('CVS_dir_dvlp_entry_',@name)"/>
		<xsl:variable name="CVS_dir_sys_entry" select="concat('CVS_dir_sys_entry_',@name)"/>
		<xsl:variable name="CVS_dir_xsl_entry" select="concat('CVS_dir_xsl_entry_',@name)"/>
		<xsl:variable name="CVS_dir_xslp28xsd_entry"
			select="concat('CVS_dir_xslp28xsd_entry_',@name)"/>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_dot_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('data/modules/',@name,'/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_dvlp_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('data/modules/',@name,'/dvlp/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_sys_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('data/modules/',@name,'/sys/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_xsl_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('xsl','/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_xslp28xsd_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('xsl/p28xsd','/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="xslt">
			<xsl:attribute name="force">yes</xsl:attribute>
			<xsl:attribute name="in">
				<xsl:value-of select="concat('data/modules/',@name,'/module.xml')"/>
			</xsl:attribute>
			<xsl:attribute name="out">
				<xsl:value-of
					select="concat('${P1000DIR}/data/modules/',@name,'/publication_record.xml')"/>
			</xsl:attribute>
			<xsl:attribute name="style">
				<xsl:value-of select="'${STEPMODSTYLES}/publication/pub_record.xsl'"/>
			</xsl:attribute>
			<xsl:attribute name="destdir">
				<xsl:value-of select="'${P1000DIR}'"/>
			</xsl:attribute>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_dot_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_dot_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_dvlp_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_dvlp_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_sys_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_sys_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_xsl_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_xsl_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_xslp28xsd_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_xslp28xsd_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">
					<xsl:value-of select="'CVS_tag'"/>
				</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="'${CVS_tag}'"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">
					<xsl:value-of select="'PUBLICATION_DATE'"/>
				</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="'${PUB_DATE}'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>
	</xsl:template>

	<!-- Generates the style task for generating the publication record for an
     AP document -->
	<!--<xsl:template match="ap_doc" mode="pub_record_style">
		<xsl:variable name="apdoc_file"
			select="concat('../../data/application_protocols/',@name,'/application_protocol.xml')"/>
		<xsl:variable name="apdoc_xml" select="document($apdoc_file)"/>
		<xsl:variable name="CVS_dir_dot_entry" select="concat('CVS_apdoc_entry_',@name)"/>
		<xsl:variable name="CVS_dir_dvlp_entry" select="concat('CVS_apdoc_dvlp_entry_',@name)"/>
		<xsl:variable name="CVS_dir_sys_entry" select="concat('CVS_apdoc_sys_entry_',@name)"/>
		<xsl:variable name="CVS_dir_xsl_entry" select="concat('CVS_dir_xsl_entry_',@name)"/>
		<xsl:variable name="CVS_dir_xslapdoc_entry" select="concat('CVS_dir_xslapdoc_entry_',@name)"/>
		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_dot_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('data/application_protocols/',@name,'/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_dvlp_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of
					select="concat('data/application_protocols/',@name,'/dvlp/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_sys_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of
					select="concat('data/application_protocols/',@name,'/sys/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_xsl_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('xsl','/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<!-\- MWD -\->
		<!-\-<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_xslapdoc_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('xsl/ap_doc','/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>-\->

		<xsl:element name="xslt">
			<!-\-<xsl:attribute name="in">
				<xsl:value-of
					select="concat('data/application_protocols/',@name,'/application_protocol.xml')"
				/>
			</xsl:attribute>
			<xsl:attribute name="out">
				<xsl:value-of
					select="concat('${P1000DIR}/data/application_protocols/',@name,'/publication_record.xml')"
				/>
			</xsl:attribute>-\->
			<xsl:attribute name="style">
				<xsl:value-of select="'${STEPMODSTYLES}/publication/pub_record.xsl'"/>
			</xsl:attribute>
			<xsl:attribute name="destdir">
				<xsl:value-of select="'${P1000DIR}'"/>
			</xsl:attribute>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_dot_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_dot_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_dvlp_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_dvlp_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_sys_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_sys_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_xsl_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_xsl_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_xslapdoc_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_xslapdoc_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">
					<xsl:value-of select="'CVS_tag'"/>
				</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="'${CVS_tag}'"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">
					<xsl:value-of select="'PUBLICATION_DATE'"/>
				</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="'${PUB_DATE}'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>
	</xsl:template>-->

	<!-- Generates the style task for generating the publication record for a
     resource document -->
	<xsl:template match="resource_doc" mode="pub_record_style">
		<xsl:variable name="resdoc_file"
			select="concat('../../data/resource_docs/',@name,'/resource.xml')"/>
		<xsl:variable name="resdoc_xml" select="document($resdoc_file)"/>
		<xsl:variable name="CVS_dir_dot_entry" select="concat('CVS_resdoc_entry_',@name)"/>
		<xsl:variable name="CVS_dir_dvlp_entry" select="concat('CVS_resdoc_dvlp_entry_',@name)"/>
		<xsl:variable name="CVS_dir_sys_entry" select="concat('CVS_resdoc_sys_entry_',@name)"/>
		<xsl:variable name="CVS_dir_xsl_entry" select="concat('CVS_dir_xsl_entry_',@name)"/>
		<xsl:variable name="CVS_dir_xslresdoc_entry"
			select="concat('CVS_dir_xslresdoc_entry_',@name)"/>



		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_dot_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('data/resource_docs/',@name,'/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_dvlp_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('data/resource_docs/',@name,'/dvlp/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_sys_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('data/resource_docs/',@name,'/sys/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_xsl_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('xsl','/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_xslresdoc_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('xsl/res_doc','/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>


		<xsl:element name="xslt">
			<xsl:attribute name="in">
				<xsl:value-of select="concat('data/resource_docs/',@name,'/resource.xml')"/>
			</xsl:attribute>
			<xsl:attribute name="out">
				<xsl:value-of
					select="concat('${P1000DIR}/data/resource_docs/',@name,'/publication_record.xml')"
				/>
			</xsl:attribute>
			<xsl:attribute name="style">
				<xsl:value-of select="'${STEPMODSTYLES}/publication/pub_record.xsl'"/>
			</xsl:attribute>
			<xsl:attribute name="destdir">
				<xsl:value-of select="'${P1000DIR}'"/>
			</xsl:attribute>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_dot_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_dot_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_dvlp_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_dvlp_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_sys_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_sys_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_xsl_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_xsl_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_xslresdoc_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_xslresdoc_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">
					<xsl:value-of select="'CVS_tag'"/>
				</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="'${CVS_tag}'"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">
					<xsl:value-of select="'PUBLICATION_DATE'"/>
				</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="'${PUB_DATE}'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>
	</xsl:template>

	<!-- Generates the style task for generating the publication record for a
	resource  -->
	<!-- MWD -->
	<!--<xsl:template match="resource" mode="pub_record_style">

		<xsl:variable name="res_name" select="substring-after(@name,'/')"/>
		<xsl:variable name="res_file"
			select="concat('../../data/resources/',$res_name,'/',$res_name,'.xml')"/>
		<xsl:variable name="res_xml" select="document($res_file)"/>
		<xsl:variable name="CVS_dir_dot_entry" select="concat('CVS_res_entry_',@name)"/>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_dot_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('data/resources/',$res_name,'/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="xslt">
			<xsl:attribute name="in">
				<xsl:value-of select="concat('data/resources/',$res_name,'/',$res_name,'.xml')"/>
			</xsl:attribute>
			<xsl:attribute name="out">
				<xsl:value-of
					select="concat('${P1000DIR}/data/resources/',$res_name,'/publication_record.xml')"
				/>
			</xsl:attribute>
			<xsl:attribute name="style">
				<xsl:value-of select="'${STEPMODSTYLES}/publication/pub_record.xsl'"/>
			</xsl:attribute>
			<xsl:attribute name="destdir">
				<xsl:value-of select="'${P1000DIR}'"/>
			</xsl:attribute>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_dot_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_dot_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">
					<xsl:value-of select="'CVS_tag'"/>
				</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="'${CVS_tag}'"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">
					<xsl:value-of select="'PUBLICATION_DATE'"/>
				</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="'${PUB_DATE}'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>
		</xsl:template>-->

	<!-- Generates the style task for generating the publication record for a
		bom -->
	<xsl:template match="bom_doc" mode="pub_record_style">
		<xsl:variable name="bomdoc_file"
			select="concat('../../data/business_object_models/',@name,'/business_object_model.xml')"/>
		<xsl:variable name="bomdoc_xml" select="document($bomdoc_file)"/>
		<xsl:variable name="CVS_dir_dot_entry" select="concat('CVS_dir_dot_entry_',@name)"/>
		<xsl:variable name="CVS_dir_dvlp_entry" select="concat('CVS_dir_dvlp_entry_',@name)"/>
		<xsl:variable name="CVS_dir_sys_entry" select="concat('CVS_dir_sys_entry_',@name)"/>
		<xsl:variable name="CVS_dir_xsl_entry" select="concat('CVS_dir_xsl_entry_',@name)"/>
		<xsl:variable name="CVS_dir_xslp28xsd_entry"
			select="concat('CVS_dir_xslp28xsd_entry_',@name)"/>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_dot_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('data/business_object_models/',@name,'/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_dvlp_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of
					select="concat('data/business_object_models/',@name,'/dvlp/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_sys_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of
					select="concat('data/business_object_models/',@name,'/sys/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_xsl_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('xsl','/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="loadfile">
			<xsl:attribute name="property">
				<xsl:value-of select="$CVS_dir_xslp28xsd_entry"/>
			</xsl:attribute>
			<xsl:attribute name="srcfile">
				<xsl:value-of select="concat('xsl/p28xsd','/CVS/Entries')"/>
			</xsl:attribute>
		</xsl:element>

		<xsl:element name="xslt">
			<xsl:attribute name="force">yes</xsl:attribute>
			<xsl:attribute name="in">
				<xsl:value-of
					select="concat('data/business_object_models/',@name,'/business_object_model.xml')"
				/>
			</xsl:attribute>
			<xsl:attribute name="out">
				<xsl:value-of
					select="concat('${P1000DIR}/data/business_object_models/',@name,'/publication_record.xml')"
				/>
			</xsl:attribute>
			<xsl:attribute name="style">
				<xsl:value-of select="'${STEPMODSTYLES}/publication/pub_record.xsl'"/>
			</xsl:attribute>
			<xsl:attribute name="destdir">
				<xsl:value-of select="'${P1000DIR}'"/>
			</xsl:attribute>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_dot_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_dot_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_dvlp_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_dvlp_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_sys_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_sys_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_xsl_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_xsl_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">CVS_dir_xslp28xsd_entry</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="concat('${',$CVS_dir_xslp28xsd_entry,'}')"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">
					<xsl:value-of select="'CVS_tag'"/>
				</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="'${CVS_tag}'"/>
				</xsl:attribute>
			</xsl:element>
			<xsl:element name="param">
				<xsl:attribute name="name">
					<xsl:value-of select="'PUBLICATION_DATE'"/>
				</xsl:attribute>
				<xsl:attribute name="expression">
					<xsl:value-of select="'${PUB_DATE}'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>
	</xsl:template>


	<xsl:template match="part1000.publication_index" mode="target_zip">
		<xsl:text>
    </xsl:text>
		<xsl:element name="target">
			<xsl:attribute name="name">zip</xsl:attribute>
			<xsl:attribute name="depends">isoindex</xsl:attribute>
			<xsl:attribute name="description">zip the results.</xsl:attribute>
			<xsl:element name="zip">
				<xsl:attribute name="zipfile">
					<xsl:value-of select="concat('${PUBDIR}/',@name,'_${DATE}.zip')"/>
				</xsl:attribute>
				<xsl:attribute name="basedir">
					<xsl:value-of select="'${PUBDIR}/'"/>
				</xsl:attribute>
				<xsl:attribute name="includes">
					<xsl:value-of select="'**'"/>
				</xsl:attribute>
				<xsl:attribute name="excludes">
					<xsl:value-of select="'*.zip, **/Thumbs.db'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>
	</xsl:template>

	<xsl:template match="part1000.publication_index" mode="target_modules_check">
		<xsl:text>
		</xsl:text>
		<xsl:if test="./modules/module">
			<target xsl:extension-element-prefixes="exslt" name="modules_check" depends="variables"
				description="Check the modules dates etc.">
				<xsl:element name="xslt">
					<xsl:attribute name="in">
						<xsl:value-of select="'${PUBSRCDIR}/sys/modules_check.xml'"/>
					</xsl:attribute>
					<xsl:attribute name="out">
						<xsl:value-of select="'${PUBDIR}/modules_check.htm'"/>
					</xsl:attribute>
					<xsl:attribute name="destdir">
						<xsl:value-of select="'${PUBDIR}'"/>
					</xsl:attribute>
					<xsl:attribute name="extension">
						<xsl:value-of select="'.htm'"/>
					</xsl:attribute>
					<xsl:attribute name="force">
						<xsl:value-of select="'yes'"/>
					</xsl:attribute>
					<xsl:attribute name="style">
						<xsl:value-of select="'${STEPMODSTYLES}/pub_ballot/modules_check.xsl'"/>
					</xsl:attribute>
					<param name="output_type" expression="HTM"/>
				</xsl:element>
			</target>
		</xsl:if>
	</xsl:template>

	<!-- generate the target "normref_check" -->
	<!-- Note - that this target should be included in isoindex, but left out
		as not all publication packages have a normref_check file yet -->
	<xsl:template match="part1000.publication_index" mode="target_normref_check">
		<xsl:text>
		</xsl:text>
		<target name="normref_check" depends="variables"
			description="Create normative reference check">
			<xsl:element name="xslt">
				<xsl:attribute name="in">
					<xsl:value-of select="'${PUBSRCDIR}/sys/normref_check.xml'"/>
				</xsl:attribute>
				<xsl:attribute name="out">
					<xsl:value-of select="'${PUBDIR}/normref_check.htm'"/>
				</xsl:attribute>
				<xsl:attribute name="destdir">
					<xsl:value-of select="'${PUBDIR}'"/>
				</xsl:attribute>
				<xsl:attribute name="extension">
					<xsl:value-of select="'.htm'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/pub_ballot/normref_check.xsl'"/>
				</xsl:attribute>
				<param name="output_type" expression="HTM"/>
				<param name="stepmodhome" expression="."/>
				<xsl:element name="param">
					<xsl:attribute name="name">
						<xsl:value-of select="'date'"/>
					</xsl:attribute>
					<xsl:attribute name="expression">
						<xsl:value-of select="'${DATE}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>
		</target>
	</xsl:template>

	<!-- generate the target "bibliography_check" -->
	<!-- Note - that this target should be included in isoindex, but left out
		as not all publication packages have a normref_check file yet -->
	<xsl:template match="part1000.publication_index" mode="target_bibliography_check">
		<xsl:text>
		</xsl:text>
		<target name="bibliography_check" depends="variables"
			description="Create normative reference check">
			<xsl:element name="xslt">
				<xsl:attribute name="in">
					<xsl:value-of select="'${PUBSRCDIR}/sys/bibliography_check.xml'"/>
				</xsl:attribute>
				<xsl:attribute name="out">
					<xsl:value-of select="'${PUBDIR}/bibliography_check.htm'"/>
				</xsl:attribute>
				<xsl:attribute name="destdir">
					<xsl:value-of select="'${PUBDIR}'"/>
				</xsl:attribute>
				<xsl:attribute name="extension">
					<xsl:value-of select="'.htm'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${STEPMODSTYLES}/pub_ballot/bibliography_check.xsl'"/>
				</xsl:attribute>
				<param name="output_type" expression="HTM"/>
				<param name="stepmodhome" expression="."/>
				<xsl:element name="param">
					<xsl:attribute name="name">
						<xsl:value-of select="'date'"/>
					</xsl:attribute>
					<xsl:attribute name="expression">
						<xsl:value-of select="'${DATE}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>
		</target>
	</xsl:template>

	<xsl:template match="part1000.publication_index" mode="target_wgn_summary">
		<xsl:text>
		</xsl:text>
		<target name="wgn_summary" depends="variables" description="Create WG number summary">
			<xsl:element name="xslt">
				<xsl:attribute name="in">
					<xsl:value-of select="'${PUBSRCDIR}/sys/wgn_summary.xml'"/>
				</xsl:attribute>
				<xsl:attribute name="out">
					<xsl:value-of select="'${PUBDIR}/wgn_summary.htm'"/>
				</xsl:attribute>
				<xsl:attribute name="destdir">
					<xsl:value-of select="'${PUBDIR}'"/>
				</xsl:attribute>
				<xsl:attribute name="extension">
					<xsl:value-of select="'.htm'"/>
				</xsl:attribute>
				<xsl:attribute name="style">
					<xsl:value-of select="'${PUBSRCSTYLES}/wgn_summary.xsl'"/>
				</xsl:attribute>
				<param name="output_type" expression="HTM"/>
				<param name="stepmodhome" expression="."/>
				<xsl:element name="param">
					<xsl:attribute name="name">
						<xsl:value-of select="'date'"/>
					</xsl:attribute>
					<xsl:attribute name="expression">
						<xsl:value-of select="'${DATE}'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>
		</target>
	</xsl:template>

</xsl:stylesheet>
