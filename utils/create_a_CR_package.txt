$Id: create_a_CR_package.txt,v 1.38 2016/05/11 17:42:23 thomasrthurman Exp $
provides detailed step by step instructions to build a CR and evaluate it.
[[!!do not commit any directory with "isopub" in the path!!]]
The following two documents are included by reference:
ISO/TC 184/SC 4/WG 12 N8352 STEPmod Deliverable directory structure
ISO TC 184/SC 4/WG 12 N8496 Procedure for building the STEP Module and Resource Library

Table of Contents:
Step minus one : Develop module or resource part
Step zero  : Debugging mapping specifications
Step one   : Create a CR publication package upon project approval
Step two   : Build and commit long forms
Step Three : Build actual CR publication package for ISO.
Step four  : AP integration level testing using AP indices.
Step five  : Build SMRL indices and perform link checks.
Step six   : Upload files to WG12 drop-in box
Step seven : Mark all related bugs as RESOLVED/FIXED and assign to Keith
Step eight : Update bug #3361 update tag index with the tag for this CR.

=================================================================
Step minus one:
-- Develop module or resource part
	--- for each module or resource of interest
        A high level overview workflow is shown in the file
        stepmod.cvs.sourceforge.net/viewvc/stepmod/stepmod/utils/module_IR_dev_flow.svg
    note: obviously this step is a precursor to actual formal CR creation but is included
          herein for clarity.
=================================================================
Step zero:
-- Debug mapping specifications for a module
	--- for each module of interest
		-- execute xslt transform against stepmod/data/modules/<module>/sys/5_mapping.xml
		     note: use saxon 655 on command line or XML IDE.
		           The XSLT file is specified in the above xml file.
		-- look for red text
		-- fix red text
	note: the above should go in the stepmod help but leave here until that happens.

=================================================================
Step one:

-- create a CR publication package upon project approval
	
	-- update bugzilla for each bug that is addressed by this CR to change the bug:

		-- set status/resolution to "resolved/fixed" and assign to hunten (use Gmail account!)

		-- set target milestone to this CR identifier

	-- execute stepmod\utils\make_CR.wsf 
	
	-- enter "CR<NNN>" 
		note: that creates stepmod/publication/part1000/CR<NNN> and contents that includes publication_index.xml  
		
	-- commit publication_index.xml  
	
	-- check out publication_index.xml  

	-- create a blank build.log
	
	-- commit build.log
	
	-- check out build.log

	-- add content to publication_index.xml   

	-- populate  
		<part1000.publication_index
			wg.number.publication_set=""
			wg.number.publication_set_comments=""
			date.iso_submission=""
			date.iso_publication=""
			sc4.working_group="">
			
	-- edit  
		<part1000.publication_index>
			<description/>
			eg: "<description>for AP242 ed2 CD</description>"

	-- edit  
		<part1000.publication_index>
			<contacts>
				<projlead>
				<editor>
			</contacts>
			eg: "<projlead ref="wg12convener"/><editor ref="AP242.projlead"/>"

	-- add (if required) 
		<resource_docs>
			<resource_doc/> ....
			eg: "<resource_doc name="geometric_and_topological_representation" collector_bug="5566" />"

	-- add (if required)
	    <resources>
	      <resource name="geometric_model_schema" part="42" collector_bug="9999" />
	      <resource name="geometry_schema" part="42" collector_bug="9999" />
	    </resources>
				
	-- populate  
		<modules> with
			<module/> ....
			eg: "<module number="1514" name="advanced_boundary_representation" team="ap242" version="4" arm.change="n" mim.change="n" collector_bug="5298"/>"
			
	-- add  (if required)  
		<deleted.modules>
			<module number/> ....
			eg: "<module number="1666" name="extended_geometric_tolerance" team="ap242" collector_bug="5298"/>"
			
	-- add  (if required)  
		<business_object_models>
			<bom_doc/> ....
			eg: "<bom_doc name="managed_model_based_3d_engineering" collector_bug="9999"/>"	
			
	-- add  (if required)  
		<deleted.business_object_models>
			<bom_doc/> ....
			eg: "<bom_doc name="managed_model_based_3d_engineering" collector_bug="9999"/>"	
			
		
	-- commit publication_index.xml to sourceforge 

	-- commit the data files for the JSDAI EXPRESS-G editor that was used to create this change request.
	   The data files are the artifacts not otherwise available on stepmod used as input to the EXPRESS-G editor or that are the native data files for the EXPRESS-G editor. 
    	note: A new directory has been created for this purpose: stepmod/data/tools/change_requests/JSDAI/CR12. A new directory 
	    	based on change requests was chosen because it is impossible to disambiguate the JSDAI dictionary and EXPRESS-G files 
		    to an individual module or resource as the tool is currently used.)
	    note: For the initial trial, Kevin is to create and populate needed subdirectories under stepmod/data/tools/change_requests/JSDAI/CR12
		     to check that all required data including property files is committed to stepmod.
        note: For graphic editors that generate binary store on a per module basis the binary files shall be
             stored under the data directory for which the editor is providing the graphic.
             
	-- commit all data to stepmod
	-- tag all modified files with the correct CR tags! 
		note: one way to evaluate success is to check out a separate project with the tag CRxxxx and compare with your committed local repository. 
		note: to avoid conflicts, only tag data directories that are specified in the publication_index.xml
	
	-- update bug #3361 Maintain record CVS tags used

	-- update stepmod/repository_index.xml for new modules (tag with CR #) 
====================================

Step two --Build and commit long forms
note: A graphical representation of one workflow to do this is in the file
      stepmod.cvs.sourceforge.net/viewvc/stepmod/stepmod/utils/EXPRESS_long_form_flow.svg

note: not all long form file names in the diagram are harmonized with this document.!
note: The workflow level of detail in the diagram is not consistent 
       (e.g., errors caused by Express Engine are ignored),
      while shtolo is more completely addressed, as is the EDMS compiler.
note: The workflow diagram assumes the existence of some shell scripts that do not exist.

Step two (A):

-- create ARM/MIM EXPRESS and XML longforms for 409, 410, 442 
	note: use longform.jar, longform_arm.prop, longform_mim.prop, longform_edms.bat, longform.EDMscript (tailored to local environment and particular 4xx module).  
	
-- update concatenated_arm.exp, concatenated_mim.exp for 4xx  
	note: 409 concatenated_arm.exp, concatenated_mim.exp are in stepmod/data/modules/ap209.../dvlp 
	note: 410 concatenated_arm.exp, concatenated_mim.exp are in stepmod/data/modules/ap210_el*/dvlp/pmi 
	note: 442 concatenated_arm.exp, concatenated_mim.exp are in stepmod/data/modules/ap242_m*/dvlp/express/pmi 
	note: each ap project may have its own location for these.
	      For new projects, it is suggested to use stepmod/data/modules/ap2xx.../dvlp
-- execute shtolo using usual longform.EDMscript
	note: The diagnostic file in the example is the diagnostic for the concatenated file!!!! so the endings are not the same for the diagnostic and for the output .exp file
	  eg:
		  Schemata>MakeLongForm(
		  "n:\concatenated_arm.exp",
		  "n:\electronic_assembly_interconnect_and_packaging_design_arm_sf.exp.dia",
		  Ap210_electronic_assembly_interconnect_and_packaging_design_arm,
		  "n:\electronic_assembly_interconnect_and_packaging_design_arm_lf.exp",
		  "REPLACE_SCHEMA_NAMES,REPLACE_SCHEMA_NAMES_REPORT,DIAGNOSTICS_FOR_ROOT_ONLY,DIAGNOSTICS_FOR_INTERFACED_ONLY,EXPRESS_EDITION_2,TC2,EDITION_1_LONGFORM")
		  'n:' is the location of the concatenated files.

    -- explain how to generate your own script [TODO]

-- evaluate concatenated_arm.exp, concatenated_mim.exp for errors using the EDMS diagnostic report
   -- identify and add missing modules to CR (go back to Step One to do that)
-- execute patches listed in stepmod/publication/part1000/CRNNNNN/patches.xlsx 

-- commit concatenated_arm.exp, concatenated_mim.exp for each long form required.

-- commit the six diagnostic files "n:\<schema_name>_sf.exp.dia":
 
-- execute longform EXPRESS evaluation using longform.EDMscript 'DefineSchema' command.
	eg:
		Schemata>DefineSchema(
		"n:\electronic_assembly_interconnect_and_packaging_design_arm_lf.exp",
		"n:\electronic_assembly_interconnect_and_packaging_design_arm_lf.exp.dia",
		Ap210_electronic_assembly_interconnect_and_packaging_design_arm, "STORING_SOURCE,DELETING_EXISTING_SCHEMAS,TC2")
		'n:' is the location of the concatenated files.


-- evaluate error report from longform.EDMscript
   -- correct modules in CR (go back to Step One to do that)
   -- identify and add missing modules to CR (go back to Step One to do that)

-- for each 4xx modules, commit in the right directory:
	note: concatenated_arm/mim.exp.EDM_validation.dia : EDMs diagnostic output of the concatenated schemas
	note: concatenated_arm/mim.exp.shtolo_log.dia : EDMs log output of the "Make Long Form" function
	note: arm/mim_lf.exp.EDM_check.dia : EDMs diagnostic output of the resulting long form schema
	note: update the list of logs to be committed [TODO]

-- commit the diagnostic file "n:\<schema_name>_lf.exp.dia": 

-- copy and rename longform files if needed
	eg: "n:\electronic_assembly_interconnect_and_packaging_design_arm_lf.exp" to 
	stepmod/data/modules/ap210_el*/arm_lf.exp"


-- ensure that the correct header information is included in the first few lines of the file
	eg:
		(*
		   $Id: create_a_CR_package.txt,v 1.38 2016/05/11 17:42:23 thomasrthurman Exp $
		   ISO TC184/SC4/WG3 8232 - ISO/TS 10303-410 AP210 electronic assembly interconnect and packaging design - EXPRESS MIM Long form
		   Supersedes ISO TC184/SC4/WG3 N2601
		*)
		note: The header will need to be copied into the longform before commit.

-- commit arm_lf.exp, mim_lf.exp files.

-- execute the Express Engine pretty printer option against the arm_lf.exp, mim_lf.exp files.
   [[Ensure that both the non-pretty and the pretty EXPRESS are committed
     because the pretty printer does not retain comments.]] 
   
-- compare the pretty results with the original long forms for consistency of the EXPRESS.
   Use the Express Engine compare option or other compare tools.
-- If ok, rename arm_lf-pretty.exp to arm_lf.exp, commit
-- Do same for mim_lf-pretty.exp
   
-- create arm_lf.xml for 4xx

-- create mim_lf.xml for 4xx
	note: JSDAI is can do this
    note: Fixing express2xml.js for the SELF\ bug would mean we could automate that step.
    
-- Execute the Express Engine compare function using the previous SMRL 4xx long form(s) as reference_schema
    and current 4xx long form(s) as trial_schema.
      -- Use the xml mode to generate data for the 4xx arm_descriptions.xml or mim_descriptions.xml files,
          as appropriate.
      -- paste the xml output of the compare function into the arm longform change annex and mim longform 
          change annex as appropriate.
    Note: These are command line actions and can be scripted.
-- Commit module.xml file

Step two (B):

-- evaluate the longform schemas with the steptools expfront tool looking for especially items not covered by EDMS 
	eg: incorrect schema names that cause no schema name replacement during shtolo process.
    -- go to this web page: http://www.steptools.com/translate/expfront
    -- follow the instructions for uploading a file but do not select "Include Integrated resources in compilation" as the long forms are complete
    -- commit the diagnostic files in the usual location with these generic names arm_lf.exp.STEPTools_check.dia and mim_lf.exp.STEPTools_check.dia

   -- identify and add missing modules to CR (go back to Step One to do that)

Step two (C):

-- tag ap2xx* directories with relevant SMRL_CR... tag, moving tags if needed
	note: At the end of this step all modules and BO directories and resource_docs and resources directories shall be correctly tagged.
	      At the end of this step all EXPRESS interfaces have been resolved.
	
====================================

Step Three:

Build actual CR publication package for ISO.
	Step A3.1: Initialize local repo.
    -- Preconditions
    --- 1: empty local directory
    --- 2: "one to one and onto" correspondence between the STEPmod remote data directories tagged with this CR 
           and the contents of publication_index.xml.
	         see bugzilla bug
	         http://www.wikistep.org/bugzilla/show_bug.cgi?id=3361.
	-- Initialize a local instance of stepmod from HEAD
	     Use CVS checkout command: cvs co -d "stepmod" -P -A "/stepmod".
	Step A3.2: Replace stepmod/data with current CR tag [TODO]
	    Use CVS replace command: cvs update -r "SMRL_CR00011" -C -d -P "/stepmod/data"
    -- Postcondition
    	   The directories that are NOT data directories shall be at the HEAD state.
    	   The data directories that are part of the CR shall be at the current CR state (do not forget to include data/basic).
    	   The data directories that are not part of CR shall not exist in the local directory.
    	   
	Step A3.3: Execute build process
	-- goto stepmod\publication\part1000\<CR00NNN>
	
	-- run ant -buildfile buildbuild.xml
	
	-- run ant all 
	   note: This will generate stepmod\publication\isopub\<CR00NNN>
[[The above directory is the "to be delivered to ISO" content.]]
	
	-- review the contents of the build.log file created by ant -buildfile buildbuild.xml for real errors due to missing modules in publication_index.xml or other errors
	   note: Because the local repository is strictly built from CR_current there should be exact provenance for errors/changes.

	Step A3.4: Execute commit process
	-- commit the contents of stepmod\publication\part1000\<CR00NNN> to CVS 
	   note: !!do not commit any directory with "isopub" in the path!!
	
	-- review the content of stepmod\publication\isopub\<CR00NNN> for errors
	
	-- fix errors until none
       -- identify and add missing modules to CR (go back to Step one to do that)
       -- after error fix go back to Step one.
       
	-- move SMRL_CRxxx tag as needed to make it up to date

	Step three-(B): 
	SMRL integration tests
	
	-- build the new test SMRL
	       [[This test SMRL can be provided to WG21 for ballot of the CR.
	         However, it does not include an index, as it is only for incremental testing.
	         A test SMRL with indices is the output of step five.]]
		-- retrieve last SMRL and put it somewhere as "SMRL_v#####"
			eg "stepmod\publication\part1000\SMRL_v6_rc1"
		
		-- delete the directories (and contents) corresponding to the elements explicitly listed in 
			stepmod\publication\part1000\<CR00NNN>\publication_index.xml from 
			SMRL_v#####\data\business_object_models and/or 
			SMRL_v#####\data\modules and/or 
			SMRL_v#####\data\resource_docs and/or
			SMRL_v#####\data\resources

		-- copy the directories (and contents) corresponding to the elements explicitly listed in 
			stepmod\publication\part1000\<CR00NNN>\publication_index.xml 
			from
			stepmod\publication\isopub\<CR00NNN>\iso10303_3NNN\data\business_object_models and/or
			stepmod\publication\isopub\<CR00NNN>\part1000\data\modules and/or
			stepmod\publication\isopub\<CR00NNN>\iso10303_NN\data\resource_docs and/or
			stepmod\publication\isopub\<CR00NNN>\iso10303_NN\data\data\business_object_models
			to the equvalent directories in the new SMRL:
			SMRL_v#####\data\business_object_models and/or 
			SMRL_v#####\data\modules and/or 
			SMRL_v#####\data\resource_docs and/or
			SMRL_v#####\data\resources
		note: This transforms the directory structure from a document centric structure to a SMRL centric
		      structure.	
		note: This procedure ensures that no previous content is retained in the relevant directories.

	-- execute link checks against the integrated test SMRL directories.
	    Note that there are no indices built so the links being checked are the internal links only.
	    We may wish to specify link checks only start from the 4xx modules for simplicity.
	    Specific checks are TBD.
	   Resolve link checks by repeating earlier steps as required.
	   	  Go back to Step one to do that.
	   
	-- move SMRL_CRxxx tag as needed to make it up to date

====================================

Step four:
AP integration level testing
Note: The file 
      stepmod.cvs.sourceforge.net/viewvc/stepmod/stepmod/utils/CR_publication--AP_tests.svg
      provides a high level illustration of this Step.

Step four (A)
Build and test AP level docs.
Note: AP2xx docs are not delivered as part of a CR.
      They are only used for testing using build processes.

-- for each AP corresponding to the AP modules listed in 
	stepmod\publication\part1000\<CR00NNN>\publication_index.xml 
	build an AP publication package

-- run stepmod\utils\mkpublication.wsf

-- enter "APNNN" - to create a directory in stepmod\publication\publication

-– edit stepmod\publication\publication\<APNNN>\publication_index.xml

-- create an empty log file stepmod\publication\publication\<APNNN>\log.txt

-- build the ANT file
	
	-- go to stepmod\publication\publication\<APNNN>
	
	-– run ant -buildfile buildbuild.xml
	
	-– run ant all
	
	note: This generates stepmod\publication\isopub\<APNNN>

	-- commit the directory stepmod\publication\<APNNN>\ to CVS

	note: !!do not commit any directory with "isopub" in the path!!

	-- examine the log file for errors that need fixing

	-- fix errors in AP doc
	
	-- fix errors in modules or resources and repeat Step one to ensure tags and data are valid.

	-- merge the AP publication and the SMRL as follows:
		
		-- copy the stepmod\publication\isopub\<APNNN>\iso10303_2xx\abstracts folder 
			into SMRL_v#####\
		
		-- copy the stepmod\publication\isopub\<APNNN>\iso10303_2xx\data\application_protocols\<ap_name> folder 
			into SMRL_v#####\data\application_protocols\
			note: you will need to create an application_protocols folder under SMRL_v#####\data\
			
		-- copy the contents of the stepmod\publication\isopub\<APNNN>\iso10303_2xx\images folder 
			into SMRL_v#####\images overwritting any duplicate file in the SMLRL
			
		-- copy the 
			stepmod\publication\isopub\<APNNN>\iso10303_2xx\iso10303_2xx.htm
			and
			stepmod\publication\isopub\<APNNN>\iso10303_2xx\iso10303_2xx_readme.txt
			into SMRL_v#####\
	[[This test AP can be provided to WG21 for ballot of the CR.]]

	-- execute link checks against the AP document SMRL_v#####\iso10303_2xx.htm.
	   fix errors found in link check. Repeat step Four or Step one as needed.
	-- move SMRL_CRxxx tag as needed to make it up to date
	   
====================================

Step five:
Build SMRL indices and perform link checks.
A high level illustration of this process is provided in
        stepmod.cvs.sourceforge.net/viewvc/stepmod/stepmod/utils/SMRL_publication.svg
	    Note: This check is moved till the latest possible step because it is manually intensive
	          and needs more clarification as to the decision process for including schemas
	          in the indices. Currently the process for deciding what schemas to include is
	          up to the developer creating the cover sheet that includes the index.

	-- execute the arm and mim index generation process per ISO/TC 184/SC 4/WG 12 N 8496 
	-- execute link checks against the integrated test SMRL directories.
	   Resolve link checks by repeating earlier steps as required.
    -- Upload the test SMRL as directed by Convener.
====================================

Step six:

-- upload the modified SMRL as a zip file to WG12 drop-in box for the ballot package if requested.
-- upload the stepmod\publication\isopub\<CR00NNN> (zipped) if requested.
-- upload the test AP as a zip file if requested.
   note: Check with Convener for which option is desired and which zip file name to use.

====================================

Step seven:

-- mark all related bugs as RESOLVED/FIXED and assign to Keith
   note: !!ensure correct milestone!!

====================================

Step eight:

-- update bug #3361 update tag index with the tag for this CR (if needed)

=================
